/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InlineObject113 struct for InlineObject113
type InlineObject113 struct {
	InstanceType *InstanceTypeCreate `json:"instanceType,omitempty"`
}

// NewInlineObject113 instantiates a new InlineObject113 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineObject113() *InlineObject113 {
	this := InlineObject113{}
	return &this
}

// NewInlineObject113WithDefaults instantiates a new InlineObject113 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineObject113WithDefaults() *InlineObject113 {
	this := InlineObject113{}
	return &this
}

// GetInstanceType returns the InstanceType field value if set, zero value otherwise.
func (o *InlineObject113) GetInstanceType() InstanceTypeCreate {
	if o == nil || o.InstanceType == nil {
		var ret InstanceTypeCreate
		return ret
	}
	return *o.InstanceType
}

// GetInstanceTypeOk returns a tuple with the InstanceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject113) GetInstanceTypeOk() (*InstanceTypeCreate, bool) {
	if o == nil || o.InstanceType == nil {
		return nil, false
	}
	return o.InstanceType, true
}

// HasInstanceType returns a boolean if a field has been set.
func (o *InlineObject113) HasInstanceType() bool {
	if o != nil && o.InstanceType != nil {
		return true
	}

	return false
}

// SetInstanceType gets a reference to the given InstanceTypeCreate and assigns it to the InstanceType field.
func (o *InlineObject113) SetInstanceType(v InstanceTypeCreate) {
	o.InstanceType = &v
}

func (o InlineObject113) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.InstanceType != nil {
		toSerialize["instanceType"] = o.InstanceType
	}
	return json.Marshal(toSerialize)
}

type NullableInlineObject113 struct {
	value *InlineObject113
	isSet bool
}

func (v NullableInlineObject113) Get() *InlineObject113 {
	return v.value
}

func (v *NullableInlineObject113) Set(val *InlineObject113) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineObject113) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineObject113) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineObject113(val *InlineObject113) *NullableInlineObject113 {
	return &NullableInlineObject113{value: val, isSet: true}
}

func (v NullableInlineObject113) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineObject113) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


