/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InlineObject148 The parameters for creating a network router is type dependent. The following lists the common parameters. See get a specific type to list available options for that network router type. Note: when creating a router on NSX v3.0+ some BGP configuration settings require BGP to be disabled during initial creation. The BGP feature can be enabled in a subsequent router update API call. 
type InlineObject148 struct {
	NetworkRouter *NetworkRoutersCreate `json:"networkRouter,omitempty"`
}

// NewInlineObject148 instantiates a new InlineObject148 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineObject148() *InlineObject148 {
	this := InlineObject148{}
	return &this
}

// NewInlineObject148WithDefaults instantiates a new InlineObject148 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineObject148WithDefaults() *InlineObject148 {
	this := InlineObject148{}
	return &this
}

// GetNetworkRouter returns the NetworkRouter field value if set, zero value otherwise.
func (o *InlineObject148) GetNetworkRouter() NetworkRoutersCreate {
	if o == nil || o.NetworkRouter == nil {
		var ret NetworkRoutersCreate
		return ret
	}
	return *o.NetworkRouter
}

// GetNetworkRouterOk returns a tuple with the NetworkRouter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject148) GetNetworkRouterOk() (*NetworkRoutersCreate, bool) {
	if o == nil || o.NetworkRouter == nil {
		return nil, false
	}
	return o.NetworkRouter, true
}

// HasNetworkRouter returns a boolean if a field has been set.
func (o *InlineObject148) HasNetworkRouter() bool {
	if o != nil && o.NetworkRouter != nil {
		return true
	}

	return false
}

// SetNetworkRouter gets a reference to the given NetworkRoutersCreate and assigns it to the NetworkRouter field.
func (o *InlineObject148) SetNetworkRouter(v NetworkRoutersCreate) {
	o.NetworkRouter = &v
}

func (o InlineObject148) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.NetworkRouter != nil {
		toSerialize["networkRouter"] = o.NetworkRouter
	}
	return json.Marshal(toSerialize)
}

type NullableInlineObject148 struct {
	value *InlineObject148
	isSet bool
}

func (v NullableInlineObject148) Get() *InlineObject148 {
	return v.value
}

func (v *NullableInlineObject148) Set(val *InlineObject148) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineObject148) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineObject148) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineObject148(val *InlineObject148) *NullableInlineObject148 {
	return &NullableInlineObject148{value: val, isSet: true}
}

func (v NullableInlineObject148) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineObject148) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


