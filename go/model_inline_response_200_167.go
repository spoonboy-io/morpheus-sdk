/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InlineResponse200167 struct for InlineResponse200167
type InlineResponse200167 struct {
	User *User `json:"user,omitempty"`
	IsMasterAccount *bool `json:"isMasterAccount,omitempty"`
	Permissions *[]InlineResponse200167Permissions `json:"permissions,omitempty"`
	Appliance *InlineResponse200167Appliance `json:"appliance,omitempty"`
}

// NewInlineResponse200167 instantiates a new InlineResponse200167 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse200167() *InlineResponse200167 {
	this := InlineResponse200167{}
	return &this
}

// NewInlineResponse200167WithDefaults instantiates a new InlineResponse200167 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse200167WithDefaults() *InlineResponse200167 {
	this := InlineResponse200167{}
	return &this
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *InlineResponse200167) GetUser() User {
	if o == nil || o.User == nil {
		var ret User
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200167) GetUserOk() (*User, bool) {
	if o == nil || o.User == nil {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *InlineResponse200167) HasUser() bool {
	if o != nil && o.User != nil {
		return true
	}

	return false
}

// SetUser gets a reference to the given User and assigns it to the User field.
func (o *InlineResponse200167) SetUser(v User) {
	o.User = &v
}

// GetIsMasterAccount returns the IsMasterAccount field value if set, zero value otherwise.
func (o *InlineResponse200167) GetIsMasterAccount() bool {
	if o == nil || o.IsMasterAccount == nil {
		var ret bool
		return ret
	}
	return *o.IsMasterAccount
}

// GetIsMasterAccountOk returns a tuple with the IsMasterAccount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200167) GetIsMasterAccountOk() (*bool, bool) {
	if o == nil || o.IsMasterAccount == nil {
		return nil, false
	}
	return o.IsMasterAccount, true
}

// HasIsMasterAccount returns a boolean if a field has been set.
func (o *InlineResponse200167) HasIsMasterAccount() bool {
	if o != nil && o.IsMasterAccount != nil {
		return true
	}

	return false
}

// SetIsMasterAccount gets a reference to the given bool and assigns it to the IsMasterAccount field.
func (o *InlineResponse200167) SetIsMasterAccount(v bool) {
	o.IsMasterAccount = &v
}

// GetPermissions returns the Permissions field value if set, zero value otherwise.
func (o *InlineResponse200167) GetPermissions() []InlineResponse200167Permissions {
	if o == nil || o.Permissions == nil {
		var ret []InlineResponse200167Permissions
		return ret
	}
	return *o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200167) GetPermissionsOk() (*[]InlineResponse200167Permissions, bool) {
	if o == nil || o.Permissions == nil {
		return nil, false
	}
	return o.Permissions, true
}

// HasPermissions returns a boolean if a field has been set.
func (o *InlineResponse200167) HasPermissions() bool {
	if o != nil && o.Permissions != nil {
		return true
	}

	return false
}

// SetPermissions gets a reference to the given []InlineResponse200167Permissions and assigns it to the Permissions field.
func (o *InlineResponse200167) SetPermissions(v []InlineResponse200167Permissions) {
	o.Permissions = &v
}

// GetAppliance returns the Appliance field value if set, zero value otherwise.
func (o *InlineResponse200167) GetAppliance() InlineResponse200167Appliance {
	if o == nil || o.Appliance == nil {
		var ret InlineResponse200167Appliance
		return ret
	}
	return *o.Appliance
}

// GetApplianceOk returns a tuple with the Appliance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200167) GetApplianceOk() (*InlineResponse200167Appliance, bool) {
	if o == nil || o.Appliance == nil {
		return nil, false
	}
	return o.Appliance, true
}

// HasAppliance returns a boolean if a field has been set.
func (o *InlineResponse200167) HasAppliance() bool {
	if o != nil && o.Appliance != nil {
		return true
	}

	return false
}

// SetAppliance gets a reference to the given InlineResponse200167Appliance and assigns it to the Appliance field.
func (o *InlineResponse200167) SetAppliance(v InlineResponse200167Appliance) {
	o.Appliance = &v
}

func (o InlineResponse200167) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.User != nil {
		toSerialize["user"] = o.User
	}
	if o.IsMasterAccount != nil {
		toSerialize["isMasterAccount"] = o.IsMasterAccount
	}
	if o.Permissions != nil {
		toSerialize["permissions"] = o.Permissions
	}
	if o.Appliance != nil {
		toSerialize["appliance"] = o.Appliance
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse200167 struct {
	value *InlineResponse200167
	isSet bool
}

func (v NullableInlineResponse200167) Get() *InlineResponse200167 {
	return v.value
}

func (v *NullableInlineResponse200167) Set(val *InlineResponse200167) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse200167) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse200167) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse200167(val *InlineResponse200167) *NullableInlineResponse200167 {
	return &NullableInlineResponse200167{value: val, isSet: true}
}

func (v NullableInlineResponse200167) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse200167) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


