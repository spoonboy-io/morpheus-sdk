/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// Budgets struct for Budgets
type Budgets struct {
	Id *int64 `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Description NullableString `json:"description,omitempty"`
	Account *InlineResponse20040AppDeployInstance `json:"account,omitempty"`
	Enabled *bool `json:"enabled,omitempty"`
	RefScope *string `json:"refScope,omitempty"`
	RefType *string `json:"refType,omitempty"`
	RefId *int64 `json:"refId,omitempty"`
	RefName *string `json:"refName,omitempty"`
	Period *string `json:"period,omitempty"`
	Year *string `json:"year,omitempty"`
	ResourceType *string `json:"resourceType,omitempty"`
	Timezone *string `json:"timezone,omitempty"`
	StartDate *time.Time `json:"startDate,omitempty"`
	EndDate *time.Time `json:"endDate,omitempty"`
	Interval *string `json:"interval,omitempty"`
	Costs *[]int64 `json:"costs,omitempty"`
	IsFiscal *bool `json:"isFiscal,omitempty"`
	AverageCost *int64 `json:"averageCost,omitempty"`
	TotalCost *int64 `json:"totalCost,omitempty"`
	Currency *string `json:"currency,omitempty"`
	Rollover *bool `json:"rollover,omitempty"`
	WarningLimit NullableString `json:"warningLimit,omitempty"`
	OverLimit NullableString `json:"overLimit,omitempty"`
	ExternalId NullableString `json:"externalId,omitempty"`
	InternalId NullableString `json:"internalId,omitempty"`
	CreatedById *int64 `json:"createdById,omitempty"`
	CreatedByName *string `json:"createdByName,omitempty"`
	UpdatedById NullableString `json:"updatedById,omitempty"`
	UpdatedByName NullableString `json:"updatedByName,omitempty"`
	DateCreated *time.Time `json:"dateCreated,omitempty"`
	LastUpdated *time.Time `json:"lastUpdated,omitempty"`
}

// NewBudgets instantiates a new Budgets object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBudgets() *Budgets {
	this := Budgets{}
	return &this
}

// NewBudgetsWithDefaults instantiates a new Budgets object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBudgetsWithDefaults() *Budgets {
	this := Budgets{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Budgets) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Budgets) GetIdOk() (*int64, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Budgets) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *Budgets) SetId(v int64) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Budgets) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Budgets) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Budgets) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Budgets) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Budgets) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Budgets) GetDescriptionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *Budgets) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *Budgets) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *Budgets) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *Budgets) UnsetDescription() {
	o.Description.Unset()
}

// GetAccount returns the Account field value if set, zero value otherwise.
func (o *Budgets) GetAccount() InlineResponse20040AppDeployInstance {
	if o == nil || o.Account == nil {
		var ret InlineResponse20040AppDeployInstance
		return ret
	}
	return *o.Account
}

// GetAccountOk returns a tuple with the Account field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Budgets) GetAccountOk() (*InlineResponse20040AppDeployInstance, bool) {
	if o == nil || o.Account == nil {
		return nil, false
	}
	return o.Account, true
}

// HasAccount returns a boolean if a field has been set.
func (o *Budgets) HasAccount() bool {
	if o != nil && o.Account != nil {
		return true
	}

	return false
}

// SetAccount gets a reference to the given InlineResponse20040AppDeployInstance and assigns it to the Account field.
func (o *Budgets) SetAccount(v InlineResponse20040AppDeployInstance) {
	o.Account = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *Budgets) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Budgets) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *Budgets) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *Budgets) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetRefScope returns the RefScope field value if set, zero value otherwise.
func (o *Budgets) GetRefScope() string {
	if o == nil || o.RefScope == nil {
		var ret string
		return ret
	}
	return *o.RefScope
}

// GetRefScopeOk returns a tuple with the RefScope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Budgets) GetRefScopeOk() (*string, bool) {
	if o == nil || o.RefScope == nil {
		return nil, false
	}
	return o.RefScope, true
}

// HasRefScope returns a boolean if a field has been set.
func (o *Budgets) HasRefScope() bool {
	if o != nil && o.RefScope != nil {
		return true
	}

	return false
}

// SetRefScope gets a reference to the given string and assigns it to the RefScope field.
func (o *Budgets) SetRefScope(v string) {
	o.RefScope = &v
}

// GetRefType returns the RefType field value if set, zero value otherwise.
func (o *Budgets) GetRefType() string {
	if o == nil || o.RefType == nil {
		var ret string
		return ret
	}
	return *o.RefType
}

// GetRefTypeOk returns a tuple with the RefType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Budgets) GetRefTypeOk() (*string, bool) {
	if o == nil || o.RefType == nil {
		return nil, false
	}
	return o.RefType, true
}

// HasRefType returns a boolean if a field has been set.
func (o *Budgets) HasRefType() bool {
	if o != nil && o.RefType != nil {
		return true
	}

	return false
}

// SetRefType gets a reference to the given string and assigns it to the RefType field.
func (o *Budgets) SetRefType(v string) {
	o.RefType = &v
}

// GetRefId returns the RefId field value if set, zero value otherwise.
func (o *Budgets) GetRefId() int64 {
	if o == nil || o.RefId == nil {
		var ret int64
		return ret
	}
	return *o.RefId
}

// GetRefIdOk returns a tuple with the RefId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Budgets) GetRefIdOk() (*int64, bool) {
	if o == nil || o.RefId == nil {
		return nil, false
	}
	return o.RefId, true
}

// HasRefId returns a boolean if a field has been set.
func (o *Budgets) HasRefId() bool {
	if o != nil && o.RefId != nil {
		return true
	}

	return false
}

// SetRefId gets a reference to the given int64 and assigns it to the RefId field.
func (o *Budgets) SetRefId(v int64) {
	o.RefId = &v
}

// GetRefName returns the RefName field value if set, zero value otherwise.
func (o *Budgets) GetRefName() string {
	if o == nil || o.RefName == nil {
		var ret string
		return ret
	}
	return *o.RefName
}

// GetRefNameOk returns a tuple with the RefName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Budgets) GetRefNameOk() (*string, bool) {
	if o == nil || o.RefName == nil {
		return nil, false
	}
	return o.RefName, true
}

// HasRefName returns a boolean if a field has been set.
func (o *Budgets) HasRefName() bool {
	if o != nil && o.RefName != nil {
		return true
	}

	return false
}

// SetRefName gets a reference to the given string and assigns it to the RefName field.
func (o *Budgets) SetRefName(v string) {
	o.RefName = &v
}

// GetPeriod returns the Period field value if set, zero value otherwise.
func (o *Budgets) GetPeriod() string {
	if o == nil || o.Period == nil {
		var ret string
		return ret
	}
	return *o.Period
}

// GetPeriodOk returns a tuple with the Period field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Budgets) GetPeriodOk() (*string, bool) {
	if o == nil || o.Period == nil {
		return nil, false
	}
	return o.Period, true
}

// HasPeriod returns a boolean if a field has been set.
func (o *Budgets) HasPeriod() bool {
	if o != nil && o.Period != nil {
		return true
	}

	return false
}

// SetPeriod gets a reference to the given string and assigns it to the Period field.
func (o *Budgets) SetPeriod(v string) {
	o.Period = &v
}

// GetYear returns the Year field value if set, zero value otherwise.
func (o *Budgets) GetYear() string {
	if o == nil || o.Year == nil {
		var ret string
		return ret
	}
	return *o.Year
}

// GetYearOk returns a tuple with the Year field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Budgets) GetYearOk() (*string, bool) {
	if o == nil || o.Year == nil {
		return nil, false
	}
	return o.Year, true
}

// HasYear returns a boolean if a field has been set.
func (o *Budgets) HasYear() bool {
	if o != nil && o.Year != nil {
		return true
	}

	return false
}

// SetYear gets a reference to the given string and assigns it to the Year field.
func (o *Budgets) SetYear(v string) {
	o.Year = &v
}

// GetResourceType returns the ResourceType field value if set, zero value otherwise.
func (o *Budgets) GetResourceType() string {
	if o == nil || o.ResourceType == nil {
		var ret string
		return ret
	}
	return *o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Budgets) GetResourceTypeOk() (*string, bool) {
	if o == nil || o.ResourceType == nil {
		return nil, false
	}
	return o.ResourceType, true
}

// HasResourceType returns a boolean if a field has been set.
func (o *Budgets) HasResourceType() bool {
	if o != nil && o.ResourceType != nil {
		return true
	}

	return false
}

// SetResourceType gets a reference to the given string and assigns it to the ResourceType field.
func (o *Budgets) SetResourceType(v string) {
	o.ResourceType = &v
}

// GetTimezone returns the Timezone field value if set, zero value otherwise.
func (o *Budgets) GetTimezone() string {
	if o == nil || o.Timezone == nil {
		var ret string
		return ret
	}
	return *o.Timezone
}

// GetTimezoneOk returns a tuple with the Timezone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Budgets) GetTimezoneOk() (*string, bool) {
	if o == nil || o.Timezone == nil {
		return nil, false
	}
	return o.Timezone, true
}

// HasTimezone returns a boolean if a field has been set.
func (o *Budgets) HasTimezone() bool {
	if o != nil && o.Timezone != nil {
		return true
	}

	return false
}

// SetTimezone gets a reference to the given string and assigns it to the Timezone field.
func (o *Budgets) SetTimezone(v string) {
	o.Timezone = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *Budgets) GetStartDate() time.Time {
	if o == nil || o.StartDate == nil {
		var ret time.Time
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Budgets) GetStartDateOk() (*time.Time, bool) {
	if o == nil || o.StartDate == nil {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *Budgets) HasStartDate() bool {
	if o != nil && o.StartDate != nil {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given time.Time and assigns it to the StartDate field.
func (o *Budgets) SetStartDate(v time.Time) {
	o.StartDate = &v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *Budgets) GetEndDate() time.Time {
	if o == nil || o.EndDate == nil {
		var ret time.Time
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Budgets) GetEndDateOk() (*time.Time, bool) {
	if o == nil || o.EndDate == nil {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *Budgets) HasEndDate() bool {
	if o != nil && o.EndDate != nil {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given time.Time and assigns it to the EndDate field.
func (o *Budgets) SetEndDate(v time.Time) {
	o.EndDate = &v
}

// GetInterval returns the Interval field value if set, zero value otherwise.
func (o *Budgets) GetInterval() string {
	if o == nil || o.Interval == nil {
		var ret string
		return ret
	}
	return *o.Interval
}

// GetIntervalOk returns a tuple with the Interval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Budgets) GetIntervalOk() (*string, bool) {
	if o == nil || o.Interval == nil {
		return nil, false
	}
	return o.Interval, true
}

// HasInterval returns a boolean if a field has been set.
func (o *Budgets) HasInterval() bool {
	if o != nil && o.Interval != nil {
		return true
	}

	return false
}

// SetInterval gets a reference to the given string and assigns it to the Interval field.
func (o *Budgets) SetInterval(v string) {
	o.Interval = &v
}

// GetCosts returns the Costs field value if set, zero value otherwise.
func (o *Budgets) GetCosts() []int64 {
	if o == nil || o.Costs == nil {
		var ret []int64
		return ret
	}
	return *o.Costs
}

// GetCostsOk returns a tuple with the Costs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Budgets) GetCostsOk() (*[]int64, bool) {
	if o == nil || o.Costs == nil {
		return nil, false
	}
	return o.Costs, true
}

// HasCosts returns a boolean if a field has been set.
func (o *Budgets) HasCosts() bool {
	if o != nil && o.Costs != nil {
		return true
	}

	return false
}

// SetCosts gets a reference to the given []int64 and assigns it to the Costs field.
func (o *Budgets) SetCosts(v []int64) {
	o.Costs = &v
}

// GetIsFiscal returns the IsFiscal field value if set, zero value otherwise.
func (o *Budgets) GetIsFiscal() bool {
	if o == nil || o.IsFiscal == nil {
		var ret bool
		return ret
	}
	return *o.IsFiscal
}

// GetIsFiscalOk returns a tuple with the IsFiscal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Budgets) GetIsFiscalOk() (*bool, bool) {
	if o == nil || o.IsFiscal == nil {
		return nil, false
	}
	return o.IsFiscal, true
}

// HasIsFiscal returns a boolean if a field has been set.
func (o *Budgets) HasIsFiscal() bool {
	if o != nil && o.IsFiscal != nil {
		return true
	}

	return false
}

// SetIsFiscal gets a reference to the given bool and assigns it to the IsFiscal field.
func (o *Budgets) SetIsFiscal(v bool) {
	o.IsFiscal = &v
}

// GetAverageCost returns the AverageCost field value if set, zero value otherwise.
func (o *Budgets) GetAverageCost() int64 {
	if o == nil || o.AverageCost == nil {
		var ret int64
		return ret
	}
	return *o.AverageCost
}

// GetAverageCostOk returns a tuple with the AverageCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Budgets) GetAverageCostOk() (*int64, bool) {
	if o == nil || o.AverageCost == nil {
		return nil, false
	}
	return o.AverageCost, true
}

// HasAverageCost returns a boolean if a field has been set.
func (o *Budgets) HasAverageCost() bool {
	if o != nil && o.AverageCost != nil {
		return true
	}

	return false
}

// SetAverageCost gets a reference to the given int64 and assigns it to the AverageCost field.
func (o *Budgets) SetAverageCost(v int64) {
	o.AverageCost = &v
}

// GetTotalCost returns the TotalCost field value if set, zero value otherwise.
func (o *Budgets) GetTotalCost() int64 {
	if o == nil || o.TotalCost == nil {
		var ret int64
		return ret
	}
	return *o.TotalCost
}

// GetTotalCostOk returns a tuple with the TotalCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Budgets) GetTotalCostOk() (*int64, bool) {
	if o == nil || o.TotalCost == nil {
		return nil, false
	}
	return o.TotalCost, true
}

// HasTotalCost returns a boolean if a field has been set.
func (o *Budgets) HasTotalCost() bool {
	if o != nil && o.TotalCost != nil {
		return true
	}

	return false
}

// SetTotalCost gets a reference to the given int64 and assigns it to the TotalCost field.
func (o *Budgets) SetTotalCost(v int64) {
	o.TotalCost = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *Budgets) GetCurrency() string {
	if o == nil || o.Currency == nil {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Budgets) GetCurrencyOk() (*string, bool) {
	if o == nil || o.Currency == nil {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *Budgets) HasCurrency() bool {
	if o != nil && o.Currency != nil {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *Budgets) SetCurrency(v string) {
	o.Currency = &v
}

// GetRollover returns the Rollover field value if set, zero value otherwise.
func (o *Budgets) GetRollover() bool {
	if o == nil || o.Rollover == nil {
		var ret bool
		return ret
	}
	return *o.Rollover
}

// GetRolloverOk returns a tuple with the Rollover field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Budgets) GetRolloverOk() (*bool, bool) {
	if o == nil || o.Rollover == nil {
		return nil, false
	}
	return o.Rollover, true
}

// HasRollover returns a boolean if a field has been set.
func (o *Budgets) HasRollover() bool {
	if o != nil && o.Rollover != nil {
		return true
	}

	return false
}

// SetRollover gets a reference to the given bool and assigns it to the Rollover field.
func (o *Budgets) SetRollover(v bool) {
	o.Rollover = &v
}

// GetWarningLimit returns the WarningLimit field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Budgets) GetWarningLimit() string {
	if o == nil || o.WarningLimit.Get() == nil {
		var ret string
		return ret
	}
	return *o.WarningLimit.Get()
}

// GetWarningLimitOk returns a tuple with the WarningLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Budgets) GetWarningLimitOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.WarningLimit.Get(), o.WarningLimit.IsSet()
}

// HasWarningLimit returns a boolean if a field has been set.
func (o *Budgets) HasWarningLimit() bool {
	if o != nil && o.WarningLimit.IsSet() {
		return true
	}

	return false
}

// SetWarningLimit gets a reference to the given NullableString and assigns it to the WarningLimit field.
func (o *Budgets) SetWarningLimit(v string) {
	o.WarningLimit.Set(&v)
}
// SetWarningLimitNil sets the value for WarningLimit to be an explicit nil
func (o *Budgets) SetWarningLimitNil() {
	o.WarningLimit.Set(nil)
}

// UnsetWarningLimit ensures that no value is present for WarningLimit, not even an explicit nil
func (o *Budgets) UnsetWarningLimit() {
	o.WarningLimit.Unset()
}

// GetOverLimit returns the OverLimit field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Budgets) GetOverLimit() string {
	if o == nil || o.OverLimit.Get() == nil {
		var ret string
		return ret
	}
	return *o.OverLimit.Get()
}

// GetOverLimitOk returns a tuple with the OverLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Budgets) GetOverLimitOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.OverLimit.Get(), o.OverLimit.IsSet()
}

// HasOverLimit returns a boolean if a field has been set.
func (o *Budgets) HasOverLimit() bool {
	if o != nil && o.OverLimit.IsSet() {
		return true
	}

	return false
}

// SetOverLimit gets a reference to the given NullableString and assigns it to the OverLimit field.
func (o *Budgets) SetOverLimit(v string) {
	o.OverLimit.Set(&v)
}
// SetOverLimitNil sets the value for OverLimit to be an explicit nil
func (o *Budgets) SetOverLimitNil() {
	o.OverLimit.Set(nil)
}

// UnsetOverLimit ensures that no value is present for OverLimit, not even an explicit nil
func (o *Budgets) UnsetOverLimit() {
	o.OverLimit.Unset()
}

// GetExternalId returns the ExternalId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Budgets) GetExternalId() string {
	if o == nil || o.ExternalId.Get() == nil {
		var ret string
		return ret
	}
	return *o.ExternalId.Get()
}

// GetExternalIdOk returns a tuple with the ExternalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Budgets) GetExternalIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ExternalId.Get(), o.ExternalId.IsSet()
}

// HasExternalId returns a boolean if a field has been set.
func (o *Budgets) HasExternalId() bool {
	if o != nil && o.ExternalId.IsSet() {
		return true
	}

	return false
}

// SetExternalId gets a reference to the given NullableString and assigns it to the ExternalId field.
func (o *Budgets) SetExternalId(v string) {
	o.ExternalId.Set(&v)
}
// SetExternalIdNil sets the value for ExternalId to be an explicit nil
func (o *Budgets) SetExternalIdNil() {
	o.ExternalId.Set(nil)
}

// UnsetExternalId ensures that no value is present for ExternalId, not even an explicit nil
func (o *Budgets) UnsetExternalId() {
	o.ExternalId.Unset()
}

// GetInternalId returns the InternalId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Budgets) GetInternalId() string {
	if o == nil || o.InternalId.Get() == nil {
		var ret string
		return ret
	}
	return *o.InternalId.Get()
}

// GetInternalIdOk returns a tuple with the InternalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Budgets) GetInternalIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.InternalId.Get(), o.InternalId.IsSet()
}

// HasInternalId returns a boolean if a field has been set.
func (o *Budgets) HasInternalId() bool {
	if o != nil && o.InternalId.IsSet() {
		return true
	}

	return false
}

// SetInternalId gets a reference to the given NullableString and assigns it to the InternalId field.
func (o *Budgets) SetInternalId(v string) {
	o.InternalId.Set(&v)
}
// SetInternalIdNil sets the value for InternalId to be an explicit nil
func (o *Budgets) SetInternalIdNil() {
	o.InternalId.Set(nil)
}

// UnsetInternalId ensures that no value is present for InternalId, not even an explicit nil
func (o *Budgets) UnsetInternalId() {
	o.InternalId.Unset()
}

// GetCreatedById returns the CreatedById field value if set, zero value otherwise.
func (o *Budgets) GetCreatedById() int64 {
	if o == nil || o.CreatedById == nil {
		var ret int64
		return ret
	}
	return *o.CreatedById
}

// GetCreatedByIdOk returns a tuple with the CreatedById field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Budgets) GetCreatedByIdOk() (*int64, bool) {
	if o == nil || o.CreatedById == nil {
		return nil, false
	}
	return o.CreatedById, true
}

// HasCreatedById returns a boolean if a field has been set.
func (o *Budgets) HasCreatedById() bool {
	if o != nil && o.CreatedById != nil {
		return true
	}

	return false
}

// SetCreatedById gets a reference to the given int64 and assigns it to the CreatedById field.
func (o *Budgets) SetCreatedById(v int64) {
	o.CreatedById = &v
}

// GetCreatedByName returns the CreatedByName field value if set, zero value otherwise.
func (o *Budgets) GetCreatedByName() string {
	if o == nil || o.CreatedByName == nil {
		var ret string
		return ret
	}
	return *o.CreatedByName
}

// GetCreatedByNameOk returns a tuple with the CreatedByName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Budgets) GetCreatedByNameOk() (*string, bool) {
	if o == nil || o.CreatedByName == nil {
		return nil, false
	}
	return o.CreatedByName, true
}

// HasCreatedByName returns a boolean if a field has been set.
func (o *Budgets) HasCreatedByName() bool {
	if o != nil && o.CreatedByName != nil {
		return true
	}

	return false
}

// SetCreatedByName gets a reference to the given string and assigns it to the CreatedByName field.
func (o *Budgets) SetCreatedByName(v string) {
	o.CreatedByName = &v
}

// GetUpdatedById returns the UpdatedById field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Budgets) GetUpdatedById() string {
	if o == nil || o.UpdatedById.Get() == nil {
		var ret string
		return ret
	}
	return *o.UpdatedById.Get()
}

// GetUpdatedByIdOk returns a tuple with the UpdatedById field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Budgets) GetUpdatedByIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UpdatedById.Get(), o.UpdatedById.IsSet()
}

// HasUpdatedById returns a boolean if a field has been set.
func (o *Budgets) HasUpdatedById() bool {
	if o != nil && o.UpdatedById.IsSet() {
		return true
	}

	return false
}

// SetUpdatedById gets a reference to the given NullableString and assigns it to the UpdatedById field.
func (o *Budgets) SetUpdatedById(v string) {
	o.UpdatedById.Set(&v)
}
// SetUpdatedByIdNil sets the value for UpdatedById to be an explicit nil
func (o *Budgets) SetUpdatedByIdNil() {
	o.UpdatedById.Set(nil)
}

// UnsetUpdatedById ensures that no value is present for UpdatedById, not even an explicit nil
func (o *Budgets) UnsetUpdatedById() {
	o.UpdatedById.Unset()
}

// GetUpdatedByName returns the UpdatedByName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Budgets) GetUpdatedByName() string {
	if o == nil || o.UpdatedByName.Get() == nil {
		var ret string
		return ret
	}
	return *o.UpdatedByName.Get()
}

// GetUpdatedByNameOk returns a tuple with the UpdatedByName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Budgets) GetUpdatedByNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UpdatedByName.Get(), o.UpdatedByName.IsSet()
}

// HasUpdatedByName returns a boolean if a field has been set.
func (o *Budgets) HasUpdatedByName() bool {
	if o != nil && o.UpdatedByName.IsSet() {
		return true
	}

	return false
}

// SetUpdatedByName gets a reference to the given NullableString and assigns it to the UpdatedByName field.
func (o *Budgets) SetUpdatedByName(v string) {
	o.UpdatedByName.Set(&v)
}
// SetUpdatedByNameNil sets the value for UpdatedByName to be an explicit nil
func (o *Budgets) SetUpdatedByNameNil() {
	o.UpdatedByName.Set(nil)
}

// UnsetUpdatedByName ensures that no value is present for UpdatedByName, not even an explicit nil
func (o *Budgets) UnsetUpdatedByName() {
	o.UpdatedByName.Unset()
}

// GetDateCreated returns the DateCreated field value if set, zero value otherwise.
func (o *Budgets) GetDateCreated() time.Time {
	if o == nil || o.DateCreated == nil {
		var ret time.Time
		return ret
	}
	return *o.DateCreated
}

// GetDateCreatedOk returns a tuple with the DateCreated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Budgets) GetDateCreatedOk() (*time.Time, bool) {
	if o == nil || o.DateCreated == nil {
		return nil, false
	}
	return o.DateCreated, true
}

// HasDateCreated returns a boolean if a field has been set.
func (o *Budgets) HasDateCreated() bool {
	if o != nil && o.DateCreated != nil {
		return true
	}

	return false
}

// SetDateCreated gets a reference to the given time.Time and assigns it to the DateCreated field.
func (o *Budgets) SetDateCreated(v time.Time) {
	o.DateCreated = &v
}

// GetLastUpdated returns the LastUpdated field value if set, zero value otherwise.
func (o *Budgets) GetLastUpdated() time.Time {
	if o == nil || o.LastUpdated == nil {
		var ret time.Time
		return ret
	}
	return *o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Budgets) GetLastUpdatedOk() (*time.Time, bool) {
	if o == nil || o.LastUpdated == nil {
		return nil, false
	}
	return o.LastUpdated, true
}

// HasLastUpdated returns a boolean if a field has been set.
func (o *Budgets) HasLastUpdated() bool {
	if o != nil && o.LastUpdated != nil {
		return true
	}

	return false
}

// SetLastUpdated gets a reference to the given time.Time and assigns it to the LastUpdated field.
func (o *Budgets) SetLastUpdated(v time.Time) {
	o.LastUpdated = &v
}

func (o Budgets) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.Account != nil {
		toSerialize["account"] = o.Account
	}
	if o.Enabled != nil {
		toSerialize["enabled"] = o.Enabled
	}
	if o.RefScope != nil {
		toSerialize["refScope"] = o.RefScope
	}
	if o.RefType != nil {
		toSerialize["refType"] = o.RefType
	}
	if o.RefId != nil {
		toSerialize["refId"] = o.RefId
	}
	if o.RefName != nil {
		toSerialize["refName"] = o.RefName
	}
	if o.Period != nil {
		toSerialize["period"] = o.Period
	}
	if o.Year != nil {
		toSerialize["year"] = o.Year
	}
	if o.ResourceType != nil {
		toSerialize["resourceType"] = o.ResourceType
	}
	if o.Timezone != nil {
		toSerialize["timezone"] = o.Timezone
	}
	if o.StartDate != nil {
		toSerialize["startDate"] = o.StartDate
	}
	if o.EndDate != nil {
		toSerialize["endDate"] = o.EndDate
	}
	if o.Interval != nil {
		toSerialize["interval"] = o.Interval
	}
	if o.Costs != nil {
		toSerialize["costs"] = o.Costs
	}
	if o.IsFiscal != nil {
		toSerialize["isFiscal"] = o.IsFiscal
	}
	if o.AverageCost != nil {
		toSerialize["averageCost"] = o.AverageCost
	}
	if o.TotalCost != nil {
		toSerialize["totalCost"] = o.TotalCost
	}
	if o.Currency != nil {
		toSerialize["currency"] = o.Currency
	}
	if o.Rollover != nil {
		toSerialize["rollover"] = o.Rollover
	}
	if o.WarningLimit.IsSet() {
		toSerialize["warningLimit"] = o.WarningLimit.Get()
	}
	if o.OverLimit.IsSet() {
		toSerialize["overLimit"] = o.OverLimit.Get()
	}
	if o.ExternalId.IsSet() {
		toSerialize["externalId"] = o.ExternalId.Get()
	}
	if o.InternalId.IsSet() {
		toSerialize["internalId"] = o.InternalId.Get()
	}
	if o.CreatedById != nil {
		toSerialize["createdById"] = o.CreatedById
	}
	if o.CreatedByName != nil {
		toSerialize["createdByName"] = o.CreatedByName
	}
	if o.UpdatedById.IsSet() {
		toSerialize["updatedById"] = o.UpdatedById.Get()
	}
	if o.UpdatedByName.IsSet() {
		toSerialize["updatedByName"] = o.UpdatedByName.Get()
	}
	if o.DateCreated != nil {
		toSerialize["dateCreated"] = o.DateCreated
	}
	if o.LastUpdated != nil {
		toSerialize["lastUpdated"] = o.LastUpdated
	}
	return json.Marshal(toSerialize)
}

type NullableBudgets struct {
	value *Budgets
	isSet bool
}

func (v NullableBudgets) Get() *Budgets {
	return v.value
}

func (v *NullableBudgets) Set(val *Budgets) {
	v.value = val
	v.isSet = true
}

func (v NullableBudgets) IsSet() bool {
	return v.isSet
}

func (v *NullableBudgets) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBudgets(val *Budgets) *NullableBudgets {
	return &NullableBudgets{value: val, isSet: true}
}

func (v NullableBudgets) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBudgets) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


