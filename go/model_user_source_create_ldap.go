/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// UserSourceCreateLDAP LDAP Configuration
type UserSourceCreateLDAP struct {
	// URL of Endpoint
	Url *string `json:"url,omitempty"`
	// Binding Username
	BindingUsername *string `json:"bindingUsername,omitempty"`
	// Binding Password
	BindingPassword *string `json:"bindingPassword,omitempty"`
	// User DN Expression
	RequiredGroup *string `json:"requiredGroup,omitempty"`
}

// NewUserSourceCreateLDAP instantiates a new UserSourceCreateLDAP object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserSourceCreateLDAP() *UserSourceCreateLDAP {
	this := UserSourceCreateLDAP{}
	return &this
}

// NewUserSourceCreateLDAPWithDefaults instantiates a new UserSourceCreateLDAP object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserSourceCreateLDAPWithDefaults() *UserSourceCreateLDAP {
	this := UserSourceCreateLDAP{}
	return &this
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *UserSourceCreateLDAP) GetUrl() string {
	if o == nil || o.Url == nil {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSourceCreateLDAP) GetUrlOk() (*string, bool) {
	if o == nil || o.Url == nil {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *UserSourceCreateLDAP) HasUrl() bool {
	if o != nil && o.Url != nil {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *UserSourceCreateLDAP) SetUrl(v string) {
	o.Url = &v
}

// GetBindingUsername returns the BindingUsername field value if set, zero value otherwise.
func (o *UserSourceCreateLDAP) GetBindingUsername() string {
	if o == nil || o.BindingUsername == nil {
		var ret string
		return ret
	}
	return *o.BindingUsername
}

// GetBindingUsernameOk returns a tuple with the BindingUsername field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSourceCreateLDAP) GetBindingUsernameOk() (*string, bool) {
	if o == nil || o.BindingUsername == nil {
		return nil, false
	}
	return o.BindingUsername, true
}

// HasBindingUsername returns a boolean if a field has been set.
func (o *UserSourceCreateLDAP) HasBindingUsername() bool {
	if o != nil && o.BindingUsername != nil {
		return true
	}

	return false
}

// SetBindingUsername gets a reference to the given string and assigns it to the BindingUsername field.
func (o *UserSourceCreateLDAP) SetBindingUsername(v string) {
	o.BindingUsername = &v
}

// GetBindingPassword returns the BindingPassword field value if set, zero value otherwise.
func (o *UserSourceCreateLDAP) GetBindingPassword() string {
	if o == nil || o.BindingPassword == nil {
		var ret string
		return ret
	}
	return *o.BindingPassword
}

// GetBindingPasswordOk returns a tuple with the BindingPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSourceCreateLDAP) GetBindingPasswordOk() (*string, bool) {
	if o == nil || o.BindingPassword == nil {
		return nil, false
	}
	return o.BindingPassword, true
}

// HasBindingPassword returns a boolean if a field has been set.
func (o *UserSourceCreateLDAP) HasBindingPassword() bool {
	if o != nil && o.BindingPassword != nil {
		return true
	}

	return false
}

// SetBindingPassword gets a reference to the given string and assigns it to the BindingPassword field.
func (o *UserSourceCreateLDAP) SetBindingPassword(v string) {
	o.BindingPassword = &v
}

// GetRequiredGroup returns the RequiredGroup field value if set, zero value otherwise.
func (o *UserSourceCreateLDAP) GetRequiredGroup() string {
	if o == nil || o.RequiredGroup == nil {
		var ret string
		return ret
	}
	return *o.RequiredGroup
}

// GetRequiredGroupOk returns a tuple with the RequiredGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSourceCreateLDAP) GetRequiredGroupOk() (*string, bool) {
	if o == nil || o.RequiredGroup == nil {
		return nil, false
	}
	return o.RequiredGroup, true
}

// HasRequiredGroup returns a boolean if a field has been set.
func (o *UserSourceCreateLDAP) HasRequiredGroup() bool {
	if o != nil && o.RequiredGroup != nil {
		return true
	}

	return false
}

// SetRequiredGroup gets a reference to the given string and assigns it to the RequiredGroup field.
func (o *UserSourceCreateLDAP) SetRequiredGroup(v string) {
	o.RequiredGroup = &v
}

func (o UserSourceCreateLDAP) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Url != nil {
		toSerialize["url"] = o.Url
	}
	if o.BindingUsername != nil {
		toSerialize["bindingUsername"] = o.BindingUsername
	}
	if o.BindingPassword != nil {
		toSerialize["bindingPassword"] = o.BindingPassword
	}
	if o.RequiredGroup != nil {
		toSerialize["requiredGroup"] = o.RequiredGroup
	}
	return json.Marshal(toSerialize)
}

type NullableUserSourceCreateLDAP struct {
	value *UserSourceCreateLDAP
	isSet bool
}

func (v NullableUserSourceCreateLDAP) Get() *UserSourceCreateLDAP {
	return v.value
}

func (v *NullableUserSourceCreateLDAP) Set(val *UserSourceCreateLDAP) {
	v.value = val
	v.isSet = true
}

func (v NullableUserSourceCreateLDAP) IsSet() bool {
	return v.isSet
}

func (v *NullableUserSourceCreateLDAP) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserSourceCreateLDAP(val *UserSourceCreateLDAP) *NullableUserSourceCreateLDAP {
	return &NullableUserSourceCreateLDAP{value: val, isSet: true}
}

func (v NullableUserSourceCreateLDAP) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserSourceCreateLDAP) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


