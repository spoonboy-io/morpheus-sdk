/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ApiCertificatesCertificate struct for ApiCertificatesCertificate
type ApiCertificatesCertificate struct {
	// A unique name scoped to your account for the key
	Name *string `json:"name,omitempty"`
	// The contents of the certificate file
	CertFile *string `json:"certFile,omitempty"`
	// The contents of the key file
	KeyFile *string `json:"keyFile,omitempty"`
	// The domain name this certificate is tied to
	DomainName *string `json:"domainName,omitempty"`
	// Wether or not this certificate is a wildcard cert
	Wildcard *bool `json:"wildcard,omitempty"`
}

// NewApiCertificatesCertificate instantiates a new ApiCertificatesCertificate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiCertificatesCertificate() *ApiCertificatesCertificate {
	this := ApiCertificatesCertificate{}
	var wildcard bool = false
	this.Wildcard = &wildcard
	return &this
}

// NewApiCertificatesCertificateWithDefaults instantiates a new ApiCertificatesCertificate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiCertificatesCertificateWithDefaults() *ApiCertificatesCertificate {
	this := ApiCertificatesCertificate{}
	var wildcard bool = false
	this.Wildcard = &wildcard
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ApiCertificatesCertificate) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiCertificatesCertificate) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ApiCertificatesCertificate) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ApiCertificatesCertificate) SetName(v string) {
	o.Name = &v
}

// GetCertFile returns the CertFile field value if set, zero value otherwise.
func (o *ApiCertificatesCertificate) GetCertFile() string {
	if o == nil || o.CertFile == nil {
		var ret string
		return ret
	}
	return *o.CertFile
}

// GetCertFileOk returns a tuple with the CertFile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiCertificatesCertificate) GetCertFileOk() (*string, bool) {
	if o == nil || o.CertFile == nil {
		return nil, false
	}
	return o.CertFile, true
}

// HasCertFile returns a boolean if a field has been set.
func (o *ApiCertificatesCertificate) HasCertFile() bool {
	if o != nil && o.CertFile != nil {
		return true
	}

	return false
}

// SetCertFile gets a reference to the given string and assigns it to the CertFile field.
func (o *ApiCertificatesCertificate) SetCertFile(v string) {
	o.CertFile = &v
}

// GetKeyFile returns the KeyFile field value if set, zero value otherwise.
func (o *ApiCertificatesCertificate) GetKeyFile() string {
	if o == nil || o.KeyFile == nil {
		var ret string
		return ret
	}
	return *o.KeyFile
}

// GetKeyFileOk returns a tuple with the KeyFile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiCertificatesCertificate) GetKeyFileOk() (*string, bool) {
	if o == nil || o.KeyFile == nil {
		return nil, false
	}
	return o.KeyFile, true
}

// HasKeyFile returns a boolean if a field has been set.
func (o *ApiCertificatesCertificate) HasKeyFile() bool {
	if o != nil && o.KeyFile != nil {
		return true
	}

	return false
}

// SetKeyFile gets a reference to the given string and assigns it to the KeyFile field.
func (o *ApiCertificatesCertificate) SetKeyFile(v string) {
	o.KeyFile = &v
}

// GetDomainName returns the DomainName field value if set, zero value otherwise.
func (o *ApiCertificatesCertificate) GetDomainName() string {
	if o == nil || o.DomainName == nil {
		var ret string
		return ret
	}
	return *o.DomainName
}

// GetDomainNameOk returns a tuple with the DomainName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiCertificatesCertificate) GetDomainNameOk() (*string, bool) {
	if o == nil || o.DomainName == nil {
		return nil, false
	}
	return o.DomainName, true
}

// HasDomainName returns a boolean if a field has been set.
func (o *ApiCertificatesCertificate) HasDomainName() bool {
	if o != nil && o.DomainName != nil {
		return true
	}

	return false
}

// SetDomainName gets a reference to the given string and assigns it to the DomainName field.
func (o *ApiCertificatesCertificate) SetDomainName(v string) {
	o.DomainName = &v
}

// GetWildcard returns the Wildcard field value if set, zero value otherwise.
func (o *ApiCertificatesCertificate) GetWildcard() bool {
	if o == nil || o.Wildcard == nil {
		var ret bool
		return ret
	}
	return *o.Wildcard
}

// GetWildcardOk returns a tuple with the Wildcard field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiCertificatesCertificate) GetWildcardOk() (*bool, bool) {
	if o == nil || o.Wildcard == nil {
		return nil, false
	}
	return o.Wildcard, true
}

// HasWildcard returns a boolean if a field has been set.
func (o *ApiCertificatesCertificate) HasWildcard() bool {
	if o != nil && o.Wildcard != nil {
		return true
	}

	return false
}

// SetWildcard gets a reference to the given bool and assigns it to the Wildcard field.
func (o *ApiCertificatesCertificate) SetWildcard(v bool) {
	o.Wildcard = &v
}

func (o ApiCertificatesCertificate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.CertFile != nil {
		toSerialize["certFile"] = o.CertFile
	}
	if o.KeyFile != nil {
		toSerialize["keyFile"] = o.KeyFile
	}
	if o.DomainName != nil {
		toSerialize["domainName"] = o.DomainName
	}
	if o.Wildcard != nil {
		toSerialize["wildcard"] = o.Wildcard
	}
	return json.Marshal(toSerialize)
}

type NullableApiCertificatesCertificate struct {
	value *ApiCertificatesCertificate
	isSet bool
}

func (v NullableApiCertificatesCertificate) Get() *ApiCertificatesCertificate {
	return v.value
}

func (v *NullableApiCertificatesCertificate) Set(val *ApiCertificatesCertificate) {
	v.value = val
	v.isSet = true
}

func (v NullableApiCertificatesCertificate) IsSet() bool {
	return v.isSet
}

func (v *NullableApiCertificatesCertificate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiCertificatesCertificate(val *ApiCertificatesCertificate) *NullableApiCertificatesCertificate {
	return &NullableApiCertificatesCertificate{value: val, isSet: true}
}

func (v NullableApiCertificatesCertificate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiCertificatesCertificate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


