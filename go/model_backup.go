/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// Backup struct for Backup
type Backup struct {
	// Backup ID
	Id *int64 `json:"id,omitempty"`
	// Name
	Name *string `json:"name,omitempty"`
	// Source Type (instance, server, storage)
	LocationType *string `json:"locationType,omitempty"`
	Instance NullableBackupInstance `json:"instance,omitempty"`
	ContainerId NullableInt64 `json:"containerId,omitempty"`
	Job *BackupJob `json:"job,omitempty"`
	Schedule NullableBackupSchedule `json:"schedule,omitempty"`
	RetentionCount NullableInt64 `json:"retentionCount,omitempty"`
	BackupType *BackupBackupType `json:"backupType,omitempty"`
	StorageProvider NullableBackupStorageProvider `json:"storageProvider,omitempty"`
	BackupProvider NullableBackupBackupProvider `json:"backupProvider,omitempty"`
	BackupRespository NullableBackupBackupRespository `json:"backupRespository,omitempty"`
	// Cron Expression
	CronExpression NullableString `json:"cronExpression,omitempty"`
	// Next Fire
	NextFire NullableTime `json:"nextFire,omitempty"`
	// Last Status
	LastStatus NullableString `json:"lastStatus,omitempty"`
	LastResult NullableBackupLastResult `json:"lastResult,omitempty"`
	Stats *BackupStats `json:"stats,omitempty"`
	// Enabled
	Enabled *bool `json:"enabled,omitempty"`
	// Date Created
	DateCreated *time.Time `json:"dateCreated,omitempty"`
	// Last Updated
	LastUpdated *time.Time `json:"lastUpdated,omitempty"`
}

// NewBackup instantiates a new Backup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBackup() *Backup {
	this := Backup{}
	return &this
}

// NewBackupWithDefaults instantiates a new Backup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBackupWithDefaults() *Backup {
	this := Backup{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Backup) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Backup) GetIdOk() (*int64, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Backup) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *Backup) SetId(v int64) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Backup) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Backup) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Backup) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Backup) SetName(v string) {
	o.Name = &v
}

// GetLocationType returns the LocationType field value if set, zero value otherwise.
func (o *Backup) GetLocationType() string {
	if o == nil || o.LocationType == nil {
		var ret string
		return ret
	}
	return *o.LocationType
}

// GetLocationTypeOk returns a tuple with the LocationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Backup) GetLocationTypeOk() (*string, bool) {
	if o == nil || o.LocationType == nil {
		return nil, false
	}
	return o.LocationType, true
}

// HasLocationType returns a boolean if a field has been set.
func (o *Backup) HasLocationType() bool {
	if o != nil && o.LocationType != nil {
		return true
	}

	return false
}

// SetLocationType gets a reference to the given string and assigns it to the LocationType field.
func (o *Backup) SetLocationType(v string) {
	o.LocationType = &v
}

// GetInstance returns the Instance field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Backup) GetInstance() BackupInstance {
	if o == nil || o.Instance.Get() == nil {
		var ret BackupInstance
		return ret
	}
	return *o.Instance.Get()
}

// GetInstanceOk returns a tuple with the Instance field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Backup) GetInstanceOk() (*BackupInstance, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Instance.Get(), o.Instance.IsSet()
}

// HasInstance returns a boolean if a field has been set.
func (o *Backup) HasInstance() bool {
	if o != nil && o.Instance.IsSet() {
		return true
	}

	return false
}

// SetInstance gets a reference to the given NullableBackupInstance and assigns it to the Instance field.
func (o *Backup) SetInstance(v BackupInstance) {
	o.Instance.Set(&v)
}
// SetInstanceNil sets the value for Instance to be an explicit nil
func (o *Backup) SetInstanceNil() {
	o.Instance.Set(nil)
}

// UnsetInstance ensures that no value is present for Instance, not even an explicit nil
func (o *Backup) UnsetInstance() {
	o.Instance.Unset()
}

// GetContainerId returns the ContainerId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Backup) GetContainerId() int64 {
	if o == nil || o.ContainerId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ContainerId.Get()
}

// GetContainerIdOk returns a tuple with the ContainerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Backup) GetContainerIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ContainerId.Get(), o.ContainerId.IsSet()
}

// HasContainerId returns a boolean if a field has been set.
func (o *Backup) HasContainerId() bool {
	if o != nil && o.ContainerId.IsSet() {
		return true
	}

	return false
}

// SetContainerId gets a reference to the given NullableInt64 and assigns it to the ContainerId field.
func (o *Backup) SetContainerId(v int64) {
	o.ContainerId.Set(&v)
}
// SetContainerIdNil sets the value for ContainerId to be an explicit nil
func (o *Backup) SetContainerIdNil() {
	o.ContainerId.Set(nil)
}

// UnsetContainerId ensures that no value is present for ContainerId, not even an explicit nil
func (o *Backup) UnsetContainerId() {
	o.ContainerId.Unset()
}

// GetJob returns the Job field value if set, zero value otherwise.
func (o *Backup) GetJob() BackupJob {
	if o == nil || o.Job == nil {
		var ret BackupJob
		return ret
	}
	return *o.Job
}

// GetJobOk returns a tuple with the Job field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Backup) GetJobOk() (*BackupJob, bool) {
	if o == nil || o.Job == nil {
		return nil, false
	}
	return o.Job, true
}

// HasJob returns a boolean if a field has been set.
func (o *Backup) HasJob() bool {
	if o != nil && o.Job != nil {
		return true
	}

	return false
}

// SetJob gets a reference to the given BackupJob and assigns it to the Job field.
func (o *Backup) SetJob(v BackupJob) {
	o.Job = &v
}

// GetSchedule returns the Schedule field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Backup) GetSchedule() BackupSchedule {
	if o == nil || o.Schedule.Get() == nil {
		var ret BackupSchedule
		return ret
	}
	return *o.Schedule.Get()
}

// GetScheduleOk returns a tuple with the Schedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Backup) GetScheduleOk() (*BackupSchedule, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Schedule.Get(), o.Schedule.IsSet()
}

// HasSchedule returns a boolean if a field has been set.
func (o *Backup) HasSchedule() bool {
	if o != nil && o.Schedule.IsSet() {
		return true
	}

	return false
}

// SetSchedule gets a reference to the given NullableBackupSchedule and assigns it to the Schedule field.
func (o *Backup) SetSchedule(v BackupSchedule) {
	o.Schedule.Set(&v)
}
// SetScheduleNil sets the value for Schedule to be an explicit nil
func (o *Backup) SetScheduleNil() {
	o.Schedule.Set(nil)
}

// UnsetSchedule ensures that no value is present for Schedule, not even an explicit nil
func (o *Backup) UnsetSchedule() {
	o.Schedule.Unset()
}

// GetRetentionCount returns the RetentionCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Backup) GetRetentionCount() int64 {
	if o == nil || o.RetentionCount.Get() == nil {
		var ret int64
		return ret
	}
	return *o.RetentionCount.Get()
}

// GetRetentionCountOk returns a tuple with the RetentionCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Backup) GetRetentionCountOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RetentionCount.Get(), o.RetentionCount.IsSet()
}

// HasRetentionCount returns a boolean if a field has been set.
func (o *Backup) HasRetentionCount() bool {
	if o != nil && o.RetentionCount.IsSet() {
		return true
	}

	return false
}

// SetRetentionCount gets a reference to the given NullableInt64 and assigns it to the RetentionCount field.
func (o *Backup) SetRetentionCount(v int64) {
	o.RetentionCount.Set(&v)
}
// SetRetentionCountNil sets the value for RetentionCount to be an explicit nil
func (o *Backup) SetRetentionCountNil() {
	o.RetentionCount.Set(nil)
}

// UnsetRetentionCount ensures that no value is present for RetentionCount, not even an explicit nil
func (o *Backup) UnsetRetentionCount() {
	o.RetentionCount.Unset()
}

// GetBackupType returns the BackupType field value if set, zero value otherwise.
func (o *Backup) GetBackupType() BackupBackupType {
	if o == nil || o.BackupType == nil {
		var ret BackupBackupType
		return ret
	}
	return *o.BackupType
}

// GetBackupTypeOk returns a tuple with the BackupType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Backup) GetBackupTypeOk() (*BackupBackupType, bool) {
	if o == nil || o.BackupType == nil {
		return nil, false
	}
	return o.BackupType, true
}

// HasBackupType returns a boolean if a field has been set.
func (o *Backup) HasBackupType() bool {
	if o != nil && o.BackupType != nil {
		return true
	}

	return false
}

// SetBackupType gets a reference to the given BackupBackupType and assigns it to the BackupType field.
func (o *Backup) SetBackupType(v BackupBackupType) {
	o.BackupType = &v
}

// GetStorageProvider returns the StorageProvider field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Backup) GetStorageProvider() BackupStorageProvider {
	if o == nil || o.StorageProvider.Get() == nil {
		var ret BackupStorageProvider
		return ret
	}
	return *o.StorageProvider.Get()
}

// GetStorageProviderOk returns a tuple with the StorageProvider field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Backup) GetStorageProviderOk() (*BackupStorageProvider, bool) {
	if o == nil  {
		return nil, false
	}
	return o.StorageProvider.Get(), o.StorageProvider.IsSet()
}

// HasStorageProvider returns a boolean if a field has been set.
func (o *Backup) HasStorageProvider() bool {
	if o != nil && o.StorageProvider.IsSet() {
		return true
	}

	return false
}

// SetStorageProvider gets a reference to the given NullableBackupStorageProvider and assigns it to the StorageProvider field.
func (o *Backup) SetStorageProvider(v BackupStorageProvider) {
	o.StorageProvider.Set(&v)
}
// SetStorageProviderNil sets the value for StorageProvider to be an explicit nil
func (o *Backup) SetStorageProviderNil() {
	o.StorageProvider.Set(nil)
}

// UnsetStorageProvider ensures that no value is present for StorageProvider, not even an explicit nil
func (o *Backup) UnsetStorageProvider() {
	o.StorageProvider.Unset()
}

// GetBackupProvider returns the BackupProvider field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Backup) GetBackupProvider() BackupBackupProvider {
	if o == nil || o.BackupProvider.Get() == nil {
		var ret BackupBackupProvider
		return ret
	}
	return *o.BackupProvider.Get()
}

// GetBackupProviderOk returns a tuple with the BackupProvider field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Backup) GetBackupProviderOk() (*BackupBackupProvider, bool) {
	if o == nil  {
		return nil, false
	}
	return o.BackupProvider.Get(), o.BackupProvider.IsSet()
}

// HasBackupProvider returns a boolean if a field has been set.
func (o *Backup) HasBackupProvider() bool {
	if o != nil && o.BackupProvider.IsSet() {
		return true
	}

	return false
}

// SetBackupProvider gets a reference to the given NullableBackupBackupProvider and assigns it to the BackupProvider field.
func (o *Backup) SetBackupProvider(v BackupBackupProvider) {
	o.BackupProvider.Set(&v)
}
// SetBackupProviderNil sets the value for BackupProvider to be an explicit nil
func (o *Backup) SetBackupProviderNil() {
	o.BackupProvider.Set(nil)
}

// UnsetBackupProvider ensures that no value is present for BackupProvider, not even an explicit nil
func (o *Backup) UnsetBackupProvider() {
	o.BackupProvider.Unset()
}

// GetBackupRespository returns the BackupRespository field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Backup) GetBackupRespository() BackupBackupRespository {
	if o == nil || o.BackupRespository.Get() == nil {
		var ret BackupBackupRespository
		return ret
	}
	return *o.BackupRespository.Get()
}

// GetBackupRespositoryOk returns a tuple with the BackupRespository field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Backup) GetBackupRespositoryOk() (*BackupBackupRespository, bool) {
	if o == nil  {
		return nil, false
	}
	return o.BackupRespository.Get(), o.BackupRespository.IsSet()
}

// HasBackupRespository returns a boolean if a field has been set.
func (o *Backup) HasBackupRespository() bool {
	if o != nil && o.BackupRespository.IsSet() {
		return true
	}

	return false
}

// SetBackupRespository gets a reference to the given NullableBackupBackupRespository and assigns it to the BackupRespository field.
func (o *Backup) SetBackupRespository(v BackupBackupRespository) {
	o.BackupRespository.Set(&v)
}
// SetBackupRespositoryNil sets the value for BackupRespository to be an explicit nil
func (o *Backup) SetBackupRespositoryNil() {
	o.BackupRespository.Set(nil)
}

// UnsetBackupRespository ensures that no value is present for BackupRespository, not even an explicit nil
func (o *Backup) UnsetBackupRespository() {
	o.BackupRespository.Unset()
}

// GetCronExpression returns the CronExpression field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Backup) GetCronExpression() string {
	if o == nil || o.CronExpression.Get() == nil {
		var ret string
		return ret
	}
	return *o.CronExpression.Get()
}

// GetCronExpressionOk returns a tuple with the CronExpression field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Backup) GetCronExpressionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CronExpression.Get(), o.CronExpression.IsSet()
}

// HasCronExpression returns a boolean if a field has been set.
func (o *Backup) HasCronExpression() bool {
	if o != nil && o.CronExpression.IsSet() {
		return true
	}

	return false
}

// SetCronExpression gets a reference to the given NullableString and assigns it to the CronExpression field.
func (o *Backup) SetCronExpression(v string) {
	o.CronExpression.Set(&v)
}
// SetCronExpressionNil sets the value for CronExpression to be an explicit nil
func (o *Backup) SetCronExpressionNil() {
	o.CronExpression.Set(nil)
}

// UnsetCronExpression ensures that no value is present for CronExpression, not even an explicit nil
func (o *Backup) UnsetCronExpression() {
	o.CronExpression.Unset()
}

// GetNextFire returns the NextFire field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Backup) GetNextFire() time.Time {
	if o == nil || o.NextFire.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.NextFire.Get()
}

// GetNextFireOk returns a tuple with the NextFire field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Backup) GetNextFireOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NextFire.Get(), o.NextFire.IsSet()
}

// HasNextFire returns a boolean if a field has been set.
func (o *Backup) HasNextFire() bool {
	if o != nil && o.NextFire.IsSet() {
		return true
	}

	return false
}

// SetNextFire gets a reference to the given NullableTime and assigns it to the NextFire field.
func (o *Backup) SetNextFire(v time.Time) {
	o.NextFire.Set(&v)
}
// SetNextFireNil sets the value for NextFire to be an explicit nil
func (o *Backup) SetNextFireNil() {
	o.NextFire.Set(nil)
}

// UnsetNextFire ensures that no value is present for NextFire, not even an explicit nil
func (o *Backup) UnsetNextFire() {
	o.NextFire.Unset()
}

// GetLastStatus returns the LastStatus field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Backup) GetLastStatus() string {
	if o == nil || o.LastStatus.Get() == nil {
		var ret string
		return ret
	}
	return *o.LastStatus.Get()
}

// GetLastStatusOk returns a tuple with the LastStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Backup) GetLastStatusOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LastStatus.Get(), o.LastStatus.IsSet()
}

// HasLastStatus returns a boolean if a field has been set.
func (o *Backup) HasLastStatus() bool {
	if o != nil && o.LastStatus.IsSet() {
		return true
	}

	return false
}

// SetLastStatus gets a reference to the given NullableString and assigns it to the LastStatus field.
func (o *Backup) SetLastStatus(v string) {
	o.LastStatus.Set(&v)
}
// SetLastStatusNil sets the value for LastStatus to be an explicit nil
func (o *Backup) SetLastStatusNil() {
	o.LastStatus.Set(nil)
}

// UnsetLastStatus ensures that no value is present for LastStatus, not even an explicit nil
func (o *Backup) UnsetLastStatus() {
	o.LastStatus.Unset()
}

// GetLastResult returns the LastResult field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Backup) GetLastResult() BackupLastResult {
	if o == nil || o.LastResult.Get() == nil {
		var ret BackupLastResult
		return ret
	}
	return *o.LastResult.Get()
}

// GetLastResultOk returns a tuple with the LastResult field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Backup) GetLastResultOk() (*BackupLastResult, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LastResult.Get(), o.LastResult.IsSet()
}

// HasLastResult returns a boolean if a field has been set.
func (o *Backup) HasLastResult() bool {
	if o != nil && o.LastResult.IsSet() {
		return true
	}

	return false
}

// SetLastResult gets a reference to the given NullableBackupLastResult and assigns it to the LastResult field.
func (o *Backup) SetLastResult(v BackupLastResult) {
	o.LastResult.Set(&v)
}
// SetLastResultNil sets the value for LastResult to be an explicit nil
func (o *Backup) SetLastResultNil() {
	o.LastResult.Set(nil)
}

// UnsetLastResult ensures that no value is present for LastResult, not even an explicit nil
func (o *Backup) UnsetLastResult() {
	o.LastResult.Unset()
}

// GetStats returns the Stats field value if set, zero value otherwise.
func (o *Backup) GetStats() BackupStats {
	if o == nil || o.Stats == nil {
		var ret BackupStats
		return ret
	}
	return *o.Stats
}

// GetStatsOk returns a tuple with the Stats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Backup) GetStatsOk() (*BackupStats, bool) {
	if o == nil || o.Stats == nil {
		return nil, false
	}
	return o.Stats, true
}

// HasStats returns a boolean if a field has been set.
func (o *Backup) HasStats() bool {
	if o != nil && o.Stats != nil {
		return true
	}

	return false
}

// SetStats gets a reference to the given BackupStats and assigns it to the Stats field.
func (o *Backup) SetStats(v BackupStats) {
	o.Stats = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *Backup) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Backup) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *Backup) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *Backup) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetDateCreated returns the DateCreated field value if set, zero value otherwise.
func (o *Backup) GetDateCreated() time.Time {
	if o == nil || o.DateCreated == nil {
		var ret time.Time
		return ret
	}
	return *o.DateCreated
}

// GetDateCreatedOk returns a tuple with the DateCreated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Backup) GetDateCreatedOk() (*time.Time, bool) {
	if o == nil || o.DateCreated == nil {
		return nil, false
	}
	return o.DateCreated, true
}

// HasDateCreated returns a boolean if a field has been set.
func (o *Backup) HasDateCreated() bool {
	if o != nil && o.DateCreated != nil {
		return true
	}

	return false
}

// SetDateCreated gets a reference to the given time.Time and assigns it to the DateCreated field.
func (o *Backup) SetDateCreated(v time.Time) {
	o.DateCreated = &v
}

// GetLastUpdated returns the LastUpdated field value if set, zero value otherwise.
func (o *Backup) GetLastUpdated() time.Time {
	if o == nil || o.LastUpdated == nil {
		var ret time.Time
		return ret
	}
	return *o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Backup) GetLastUpdatedOk() (*time.Time, bool) {
	if o == nil || o.LastUpdated == nil {
		return nil, false
	}
	return o.LastUpdated, true
}

// HasLastUpdated returns a boolean if a field has been set.
func (o *Backup) HasLastUpdated() bool {
	if o != nil && o.LastUpdated != nil {
		return true
	}

	return false
}

// SetLastUpdated gets a reference to the given time.Time and assigns it to the LastUpdated field.
func (o *Backup) SetLastUpdated(v time.Time) {
	o.LastUpdated = &v
}

func (o Backup) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.LocationType != nil {
		toSerialize["locationType"] = o.LocationType
	}
	if o.Instance.IsSet() {
		toSerialize["instance"] = o.Instance.Get()
	}
	if o.ContainerId.IsSet() {
		toSerialize["containerId"] = o.ContainerId.Get()
	}
	if o.Job != nil {
		toSerialize["job"] = o.Job
	}
	if o.Schedule.IsSet() {
		toSerialize["schedule"] = o.Schedule.Get()
	}
	if o.RetentionCount.IsSet() {
		toSerialize["retentionCount"] = o.RetentionCount.Get()
	}
	if o.BackupType != nil {
		toSerialize["backupType"] = o.BackupType
	}
	if o.StorageProvider.IsSet() {
		toSerialize["storageProvider"] = o.StorageProvider.Get()
	}
	if o.BackupProvider.IsSet() {
		toSerialize["backupProvider"] = o.BackupProvider.Get()
	}
	if o.BackupRespository.IsSet() {
		toSerialize["backupRespository"] = o.BackupRespository.Get()
	}
	if o.CronExpression.IsSet() {
		toSerialize["cronExpression"] = o.CronExpression.Get()
	}
	if o.NextFire.IsSet() {
		toSerialize["nextFire"] = o.NextFire.Get()
	}
	if o.LastStatus.IsSet() {
		toSerialize["lastStatus"] = o.LastStatus.Get()
	}
	if o.LastResult.IsSet() {
		toSerialize["lastResult"] = o.LastResult.Get()
	}
	if o.Stats != nil {
		toSerialize["stats"] = o.Stats
	}
	if o.Enabled != nil {
		toSerialize["enabled"] = o.Enabled
	}
	if o.DateCreated != nil {
		toSerialize["dateCreated"] = o.DateCreated
	}
	if o.LastUpdated != nil {
		toSerialize["lastUpdated"] = o.LastUpdated
	}
	return json.Marshal(toSerialize)
}

type NullableBackup struct {
	value *Backup
	isSet bool
}

func (v NullableBackup) Get() *Backup {
	return v.value
}

func (v *NullableBackup) Set(val *Backup) {
	v.value = val
	v.isSet = true
}

func (v NullableBackup) IsSet() bool {
	return v.isSet
}

func (v *NullableBackup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBackup(val *Backup) *NullableBackup {
	return &NullableBackup{value: val, isSet: true}
}

func (v NullableBackup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBackup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


