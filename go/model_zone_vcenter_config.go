/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ZoneVcenterConfig struct for ZoneVcenterConfig
type ZoneVcenterConfig struct {
	ApiUrl *string `json:"apiUrl,omitempty"`
	Username *string `json:"username,omitempty"`
	Password NullableString `json:"password,omitempty"`
	Datacenter *string `json:"datacenter,omitempty"`
	Cluster *string `json:"cluster,omitempty"`
	ResourcePoolId *string `json:"resourcePoolId,omitempty"`
	ResourcePool *string `json:"resourcePool,omitempty"`
	RpcMode *string `json:"rpcMode,omitempty"`
	HideHostSelection *string `json:"_hideHostSelection,omitempty"`
	HideHostSelection *string `json:"hideHostSelection,omitempty"`
	ImportExisting *string `json:"_importExisting,omitempty"`
	ImportExisting *string `json:"importExisting,omitempty"`
	EnableVnc *string `json:"_enableVnc,omitempty"`
	EnableVnc *string `json:"enableVnc,omitempty"`
	EnableDiskTypeSelection *string `json:"_enableDiskTypeSelection,omitempty"`
	EnableNetworkTypeSelection *string `json:"_enableNetworkTypeSelection,omitempty"`
	DiskStorageType NullableString `json:"diskStorageType,omitempty"`
	ApplianceUrl NullableString `json:"applianceUrl,omitempty"`
	DatacenterName NullableString `json:"datacenterName,omitempty"`
	NetworkServerId *string `json:"networkServer.id,omitempty"`
	NetworkServer *ZoneVcenterConfigNetworkServer `json:"networkServer,omitempty"`
	SecurityMode *string `json:"securityMode,omitempty"`
	CertificateProvider NullableString `json:"certificateProvider,omitempty"`
	BackupMode NullableString `json:"backupMode,omitempty"`
	ReplicationMode NullableString `json:"replicationMode,omitempty"`
	DnsIntegrationId NullableString `json:"dnsIntegrationId,omitempty"`
	ConfigCmdbId NullableString `json:"configCmdbId,omitempty"`
	ConfigManagementId NullableString `json:"configManagementId,omitempty"`
	ConfigCmId NullableString `json:"configCmId,omitempty"`
	SecurityServer NullableString `json:"securityServer,omitempty"`
	ServiceRegistryId NullableString `json:"serviceRegistryId,omitempty"`
	EnableDiskTypeSelection NullableString `json:"enableDiskTypeSelection,omitempty"`
	KubeUrl NullableString `json:"kubeUrl,omitempty"`
	ApiVersion NullableString `json:"apiVersion,omitempty"`
	DatacenterId NullableString `json:"datacenterId,omitempty"`
	ConfigCmdbDiscovery *bool `json:"configCmdbDiscovery,omitempty"`
	DistributedWorkerId NullableString `json:"distributedWorkerId,omitempty"`
	PasswordHash NullableString `json:"passwordHash,omitempty"`
}

// NewZoneVcenterConfig instantiates a new ZoneVcenterConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewZoneVcenterConfig() *ZoneVcenterConfig {
	this := ZoneVcenterConfig{}
	return &this
}

// NewZoneVcenterConfigWithDefaults instantiates a new ZoneVcenterConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewZoneVcenterConfigWithDefaults() *ZoneVcenterConfig {
	this := ZoneVcenterConfig{}
	return &this
}

// GetApiUrl returns the ApiUrl field value if set, zero value otherwise.
func (o *ZoneVcenterConfig) GetApiUrl() string {
	if o == nil || o.ApiUrl == nil {
		var ret string
		return ret
	}
	return *o.ApiUrl
}

// GetApiUrlOk returns a tuple with the ApiUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneVcenterConfig) GetApiUrlOk() (*string, bool) {
	if o == nil || o.ApiUrl == nil {
		return nil, false
	}
	return o.ApiUrl, true
}

// HasApiUrl returns a boolean if a field has been set.
func (o *ZoneVcenterConfig) HasApiUrl() bool {
	if o != nil && o.ApiUrl != nil {
		return true
	}

	return false
}

// SetApiUrl gets a reference to the given string and assigns it to the ApiUrl field.
func (o *ZoneVcenterConfig) SetApiUrl(v string) {
	o.ApiUrl = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *ZoneVcenterConfig) GetUsername() string {
	if o == nil || o.Username == nil {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneVcenterConfig) GetUsernameOk() (*string, bool) {
	if o == nil || o.Username == nil {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *ZoneVcenterConfig) HasUsername() bool {
	if o != nil && o.Username != nil {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *ZoneVcenterConfig) SetUsername(v string) {
	o.Username = &v
}

// GetPassword returns the Password field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ZoneVcenterConfig) GetPassword() string {
	if o == nil || o.Password.Get() == nil {
		var ret string
		return ret
	}
	return *o.Password.Get()
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ZoneVcenterConfig) GetPasswordOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Password.Get(), o.Password.IsSet()
}

// HasPassword returns a boolean if a field has been set.
func (o *ZoneVcenterConfig) HasPassword() bool {
	if o != nil && o.Password.IsSet() {
		return true
	}

	return false
}

// SetPassword gets a reference to the given NullableString and assigns it to the Password field.
func (o *ZoneVcenterConfig) SetPassword(v string) {
	o.Password.Set(&v)
}
// SetPasswordNil sets the value for Password to be an explicit nil
func (o *ZoneVcenterConfig) SetPasswordNil() {
	o.Password.Set(nil)
}

// UnsetPassword ensures that no value is present for Password, not even an explicit nil
func (o *ZoneVcenterConfig) UnsetPassword() {
	o.Password.Unset()
}

// GetDatacenter returns the Datacenter field value if set, zero value otherwise.
func (o *ZoneVcenterConfig) GetDatacenter() string {
	if o == nil || o.Datacenter == nil {
		var ret string
		return ret
	}
	return *o.Datacenter
}

// GetDatacenterOk returns a tuple with the Datacenter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneVcenterConfig) GetDatacenterOk() (*string, bool) {
	if o == nil || o.Datacenter == nil {
		return nil, false
	}
	return o.Datacenter, true
}

// HasDatacenter returns a boolean if a field has been set.
func (o *ZoneVcenterConfig) HasDatacenter() bool {
	if o != nil && o.Datacenter != nil {
		return true
	}

	return false
}

// SetDatacenter gets a reference to the given string and assigns it to the Datacenter field.
func (o *ZoneVcenterConfig) SetDatacenter(v string) {
	o.Datacenter = &v
}

// GetCluster returns the Cluster field value if set, zero value otherwise.
func (o *ZoneVcenterConfig) GetCluster() string {
	if o == nil || o.Cluster == nil {
		var ret string
		return ret
	}
	return *o.Cluster
}

// GetClusterOk returns a tuple with the Cluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneVcenterConfig) GetClusterOk() (*string, bool) {
	if o == nil || o.Cluster == nil {
		return nil, false
	}
	return o.Cluster, true
}

// HasCluster returns a boolean if a field has been set.
func (o *ZoneVcenterConfig) HasCluster() bool {
	if o != nil && o.Cluster != nil {
		return true
	}

	return false
}

// SetCluster gets a reference to the given string and assigns it to the Cluster field.
func (o *ZoneVcenterConfig) SetCluster(v string) {
	o.Cluster = &v
}

// GetResourcePoolId returns the ResourcePoolId field value if set, zero value otherwise.
func (o *ZoneVcenterConfig) GetResourcePoolId() string {
	if o == nil || o.ResourcePoolId == nil {
		var ret string
		return ret
	}
	return *o.ResourcePoolId
}

// GetResourcePoolIdOk returns a tuple with the ResourcePoolId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneVcenterConfig) GetResourcePoolIdOk() (*string, bool) {
	if o == nil || o.ResourcePoolId == nil {
		return nil, false
	}
	return o.ResourcePoolId, true
}

// HasResourcePoolId returns a boolean if a field has been set.
func (o *ZoneVcenterConfig) HasResourcePoolId() bool {
	if o != nil && o.ResourcePoolId != nil {
		return true
	}

	return false
}

// SetResourcePoolId gets a reference to the given string and assigns it to the ResourcePoolId field.
func (o *ZoneVcenterConfig) SetResourcePoolId(v string) {
	o.ResourcePoolId = &v
}

// GetResourcePool returns the ResourcePool field value if set, zero value otherwise.
func (o *ZoneVcenterConfig) GetResourcePool() string {
	if o == nil || o.ResourcePool == nil {
		var ret string
		return ret
	}
	return *o.ResourcePool
}

// GetResourcePoolOk returns a tuple with the ResourcePool field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneVcenterConfig) GetResourcePoolOk() (*string, bool) {
	if o == nil || o.ResourcePool == nil {
		return nil, false
	}
	return o.ResourcePool, true
}

// HasResourcePool returns a boolean if a field has been set.
func (o *ZoneVcenterConfig) HasResourcePool() bool {
	if o != nil && o.ResourcePool != nil {
		return true
	}

	return false
}

// SetResourcePool gets a reference to the given string and assigns it to the ResourcePool field.
func (o *ZoneVcenterConfig) SetResourcePool(v string) {
	o.ResourcePool = &v
}

// GetRpcMode returns the RpcMode field value if set, zero value otherwise.
func (o *ZoneVcenterConfig) GetRpcMode() string {
	if o == nil || o.RpcMode == nil {
		var ret string
		return ret
	}
	return *o.RpcMode
}

// GetRpcModeOk returns a tuple with the RpcMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneVcenterConfig) GetRpcModeOk() (*string, bool) {
	if o == nil || o.RpcMode == nil {
		return nil, false
	}
	return o.RpcMode, true
}

// HasRpcMode returns a boolean if a field has been set.
func (o *ZoneVcenterConfig) HasRpcMode() bool {
	if o != nil && o.RpcMode != nil {
		return true
	}

	return false
}

// SetRpcMode gets a reference to the given string and assigns it to the RpcMode field.
func (o *ZoneVcenterConfig) SetRpcMode(v string) {
	o.RpcMode = &v
}

// GetHideHostSelection returns the HideHostSelection field value if set, zero value otherwise.
func (o *ZoneVcenterConfig) GetHideHostSelection() string {
	if o == nil || o.HideHostSelection == nil {
		var ret string
		return ret
	}
	return *o.HideHostSelection
}

// GetHideHostSelectionOk returns a tuple with the HideHostSelection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneVcenterConfig) GetHideHostSelectionOk() (*string, bool) {
	if o == nil || o.HideHostSelection == nil {
		return nil, false
	}
	return o.HideHostSelection, true
}

// HasHideHostSelection returns a boolean if a field has been set.
func (o *ZoneVcenterConfig) HasHideHostSelection() bool {
	if o != nil && o.HideHostSelection != nil {
		return true
	}

	return false
}

// SetHideHostSelection gets a reference to the given string and assigns it to the HideHostSelection field.
func (o *ZoneVcenterConfig) SetHideHostSelection(v string) {
	o.HideHostSelection = &v
}

// GetHideHostSelection returns the HideHostSelection field value if set, zero value otherwise.
func (o *ZoneVcenterConfig) GetHideHostSelection() string {
	if o == nil || o.HideHostSelection == nil {
		var ret string
		return ret
	}
	return *o.HideHostSelection
}

// GetHideHostSelectionOk returns a tuple with the HideHostSelection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneVcenterConfig) GetHideHostSelectionOk() (*string, bool) {
	if o == nil || o.HideHostSelection == nil {
		return nil, false
	}
	return o.HideHostSelection, true
}

// HasHideHostSelection returns a boolean if a field has been set.
func (o *ZoneVcenterConfig) HasHideHostSelection() bool {
	if o != nil && o.HideHostSelection != nil {
		return true
	}

	return false
}

// SetHideHostSelection gets a reference to the given string and assigns it to the HideHostSelection field.
func (o *ZoneVcenterConfig) SetHideHostSelection(v string) {
	o.HideHostSelection = &v
}

// GetImportExisting returns the ImportExisting field value if set, zero value otherwise.
func (o *ZoneVcenterConfig) GetImportExisting() string {
	if o == nil || o.ImportExisting == nil {
		var ret string
		return ret
	}
	return *o.ImportExisting
}

// GetImportExistingOk returns a tuple with the ImportExisting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneVcenterConfig) GetImportExistingOk() (*string, bool) {
	if o == nil || o.ImportExisting == nil {
		return nil, false
	}
	return o.ImportExisting, true
}

// HasImportExisting returns a boolean if a field has been set.
func (o *ZoneVcenterConfig) HasImportExisting() bool {
	if o != nil && o.ImportExisting != nil {
		return true
	}

	return false
}

// SetImportExisting gets a reference to the given string and assigns it to the ImportExisting field.
func (o *ZoneVcenterConfig) SetImportExisting(v string) {
	o.ImportExisting = &v
}

// GetImportExisting returns the ImportExisting field value if set, zero value otherwise.
func (o *ZoneVcenterConfig) GetImportExisting() string {
	if o == nil || o.ImportExisting == nil {
		var ret string
		return ret
	}
	return *o.ImportExisting
}

// GetImportExistingOk returns a tuple with the ImportExisting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneVcenterConfig) GetImportExistingOk() (*string, bool) {
	if o == nil || o.ImportExisting == nil {
		return nil, false
	}
	return o.ImportExisting, true
}

// HasImportExisting returns a boolean if a field has been set.
func (o *ZoneVcenterConfig) HasImportExisting() bool {
	if o != nil && o.ImportExisting != nil {
		return true
	}

	return false
}

// SetImportExisting gets a reference to the given string and assigns it to the ImportExisting field.
func (o *ZoneVcenterConfig) SetImportExisting(v string) {
	o.ImportExisting = &v
}

// GetEnableVnc returns the EnableVnc field value if set, zero value otherwise.
func (o *ZoneVcenterConfig) GetEnableVnc() string {
	if o == nil || o.EnableVnc == nil {
		var ret string
		return ret
	}
	return *o.EnableVnc
}

// GetEnableVncOk returns a tuple with the EnableVnc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneVcenterConfig) GetEnableVncOk() (*string, bool) {
	if o == nil || o.EnableVnc == nil {
		return nil, false
	}
	return o.EnableVnc, true
}

// HasEnableVnc returns a boolean if a field has been set.
func (o *ZoneVcenterConfig) HasEnableVnc() bool {
	if o != nil && o.EnableVnc != nil {
		return true
	}

	return false
}

// SetEnableVnc gets a reference to the given string and assigns it to the EnableVnc field.
func (o *ZoneVcenterConfig) SetEnableVnc(v string) {
	o.EnableVnc = &v
}

// GetEnableVnc returns the EnableVnc field value if set, zero value otherwise.
func (o *ZoneVcenterConfig) GetEnableVnc() string {
	if o == nil || o.EnableVnc == nil {
		var ret string
		return ret
	}
	return *o.EnableVnc
}

// GetEnableVncOk returns a tuple with the EnableVnc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneVcenterConfig) GetEnableVncOk() (*string, bool) {
	if o == nil || o.EnableVnc == nil {
		return nil, false
	}
	return o.EnableVnc, true
}

// HasEnableVnc returns a boolean if a field has been set.
func (o *ZoneVcenterConfig) HasEnableVnc() bool {
	if o != nil && o.EnableVnc != nil {
		return true
	}

	return false
}

// SetEnableVnc gets a reference to the given string and assigns it to the EnableVnc field.
func (o *ZoneVcenterConfig) SetEnableVnc(v string) {
	o.EnableVnc = &v
}

// GetEnableDiskTypeSelection returns the EnableDiskTypeSelection field value if set, zero value otherwise.
func (o *ZoneVcenterConfig) GetEnableDiskTypeSelection() string {
	if o == nil || o.EnableDiskTypeSelection == nil {
		var ret string
		return ret
	}
	return *o.EnableDiskTypeSelection
}

// GetEnableDiskTypeSelectionOk returns a tuple with the EnableDiskTypeSelection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneVcenterConfig) GetEnableDiskTypeSelectionOk() (*string, bool) {
	if o == nil || o.EnableDiskTypeSelection == nil {
		return nil, false
	}
	return o.EnableDiskTypeSelection, true
}

// HasEnableDiskTypeSelection returns a boolean if a field has been set.
func (o *ZoneVcenterConfig) HasEnableDiskTypeSelection() bool {
	if o != nil && o.EnableDiskTypeSelection != nil {
		return true
	}

	return false
}

// SetEnableDiskTypeSelection gets a reference to the given string and assigns it to the EnableDiskTypeSelection field.
func (o *ZoneVcenterConfig) SetEnableDiskTypeSelection(v string) {
	o.EnableDiskTypeSelection = &v
}

// GetEnableNetworkTypeSelection returns the EnableNetworkTypeSelection field value if set, zero value otherwise.
func (o *ZoneVcenterConfig) GetEnableNetworkTypeSelection() string {
	if o == nil || o.EnableNetworkTypeSelection == nil {
		var ret string
		return ret
	}
	return *o.EnableNetworkTypeSelection
}

// GetEnableNetworkTypeSelectionOk returns a tuple with the EnableNetworkTypeSelection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneVcenterConfig) GetEnableNetworkTypeSelectionOk() (*string, bool) {
	if o == nil || o.EnableNetworkTypeSelection == nil {
		return nil, false
	}
	return o.EnableNetworkTypeSelection, true
}

// HasEnableNetworkTypeSelection returns a boolean if a field has been set.
func (o *ZoneVcenterConfig) HasEnableNetworkTypeSelection() bool {
	if o != nil && o.EnableNetworkTypeSelection != nil {
		return true
	}

	return false
}

// SetEnableNetworkTypeSelection gets a reference to the given string and assigns it to the EnableNetworkTypeSelection field.
func (o *ZoneVcenterConfig) SetEnableNetworkTypeSelection(v string) {
	o.EnableNetworkTypeSelection = &v
}

// GetDiskStorageType returns the DiskStorageType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ZoneVcenterConfig) GetDiskStorageType() string {
	if o == nil || o.DiskStorageType.Get() == nil {
		var ret string
		return ret
	}
	return *o.DiskStorageType.Get()
}

// GetDiskStorageTypeOk returns a tuple with the DiskStorageType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ZoneVcenterConfig) GetDiskStorageTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DiskStorageType.Get(), o.DiskStorageType.IsSet()
}

// HasDiskStorageType returns a boolean if a field has been set.
func (o *ZoneVcenterConfig) HasDiskStorageType() bool {
	if o != nil && o.DiskStorageType.IsSet() {
		return true
	}

	return false
}

// SetDiskStorageType gets a reference to the given NullableString and assigns it to the DiskStorageType field.
func (o *ZoneVcenterConfig) SetDiskStorageType(v string) {
	o.DiskStorageType.Set(&v)
}
// SetDiskStorageTypeNil sets the value for DiskStorageType to be an explicit nil
func (o *ZoneVcenterConfig) SetDiskStorageTypeNil() {
	o.DiskStorageType.Set(nil)
}

// UnsetDiskStorageType ensures that no value is present for DiskStorageType, not even an explicit nil
func (o *ZoneVcenterConfig) UnsetDiskStorageType() {
	o.DiskStorageType.Unset()
}

// GetApplianceUrl returns the ApplianceUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ZoneVcenterConfig) GetApplianceUrl() string {
	if o == nil || o.ApplianceUrl.Get() == nil {
		var ret string
		return ret
	}
	return *o.ApplianceUrl.Get()
}

// GetApplianceUrlOk returns a tuple with the ApplianceUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ZoneVcenterConfig) GetApplianceUrlOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ApplianceUrl.Get(), o.ApplianceUrl.IsSet()
}

// HasApplianceUrl returns a boolean if a field has been set.
func (o *ZoneVcenterConfig) HasApplianceUrl() bool {
	if o != nil && o.ApplianceUrl.IsSet() {
		return true
	}

	return false
}

// SetApplianceUrl gets a reference to the given NullableString and assigns it to the ApplianceUrl field.
func (o *ZoneVcenterConfig) SetApplianceUrl(v string) {
	o.ApplianceUrl.Set(&v)
}
// SetApplianceUrlNil sets the value for ApplianceUrl to be an explicit nil
func (o *ZoneVcenterConfig) SetApplianceUrlNil() {
	o.ApplianceUrl.Set(nil)
}

// UnsetApplianceUrl ensures that no value is present for ApplianceUrl, not even an explicit nil
func (o *ZoneVcenterConfig) UnsetApplianceUrl() {
	o.ApplianceUrl.Unset()
}

// GetDatacenterName returns the DatacenterName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ZoneVcenterConfig) GetDatacenterName() string {
	if o == nil || o.DatacenterName.Get() == nil {
		var ret string
		return ret
	}
	return *o.DatacenterName.Get()
}

// GetDatacenterNameOk returns a tuple with the DatacenterName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ZoneVcenterConfig) GetDatacenterNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DatacenterName.Get(), o.DatacenterName.IsSet()
}

// HasDatacenterName returns a boolean if a field has been set.
func (o *ZoneVcenterConfig) HasDatacenterName() bool {
	if o != nil && o.DatacenterName.IsSet() {
		return true
	}

	return false
}

// SetDatacenterName gets a reference to the given NullableString and assigns it to the DatacenterName field.
func (o *ZoneVcenterConfig) SetDatacenterName(v string) {
	o.DatacenterName.Set(&v)
}
// SetDatacenterNameNil sets the value for DatacenterName to be an explicit nil
func (o *ZoneVcenterConfig) SetDatacenterNameNil() {
	o.DatacenterName.Set(nil)
}

// UnsetDatacenterName ensures that no value is present for DatacenterName, not even an explicit nil
func (o *ZoneVcenterConfig) UnsetDatacenterName() {
	o.DatacenterName.Unset()
}

// GetNetworkServerId returns the NetworkServerId field value if set, zero value otherwise.
func (o *ZoneVcenterConfig) GetNetworkServerId() string {
	if o == nil || o.NetworkServerId == nil {
		var ret string
		return ret
	}
	return *o.NetworkServerId
}

// GetNetworkServerIdOk returns a tuple with the NetworkServerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneVcenterConfig) GetNetworkServerIdOk() (*string, bool) {
	if o == nil || o.NetworkServerId == nil {
		return nil, false
	}
	return o.NetworkServerId, true
}

// HasNetworkServerId returns a boolean if a field has been set.
func (o *ZoneVcenterConfig) HasNetworkServerId() bool {
	if o != nil && o.NetworkServerId != nil {
		return true
	}

	return false
}

// SetNetworkServerId gets a reference to the given string and assigns it to the NetworkServerId field.
func (o *ZoneVcenterConfig) SetNetworkServerId(v string) {
	o.NetworkServerId = &v
}

// GetNetworkServer returns the NetworkServer field value if set, zero value otherwise.
func (o *ZoneVcenterConfig) GetNetworkServer() ZoneVcenterConfigNetworkServer {
	if o == nil || o.NetworkServer == nil {
		var ret ZoneVcenterConfigNetworkServer
		return ret
	}
	return *o.NetworkServer
}

// GetNetworkServerOk returns a tuple with the NetworkServer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneVcenterConfig) GetNetworkServerOk() (*ZoneVcenterConfigNetworkServer, bool) {
	if o == nil || o.NetworkServer == nil {
		return nil, false
	}
	return o.NetworkServer, true
}

// HasNetworkServer returns a boolean if a field has been set.
func (o *ZoneVcenterConfig) HasNetworkServer() bool {
	if o != nil && o.NetworkServer != nil {
		return true
	}

	return false
}

// SetNetworkServer gets a reference to the given ZoneVcenterConfigNetworkServer and assigns it to the NetworkServer field.
func (o *ZoneVcenterConfig) SetNetworkServer(v ZoneVcenterConfigNetworkServer) {
	o.NetworkServer = &v
}

// GetSecurityMode returns the SecurityMode field value if set, zero value otherwise.
func (o *ZoneVcenterConfig) GetSecurityMode() string {
	if o == nil || o.SecurityMode == nil {
		var ret string
		return ret
	}
	return *o.SecurityMode
}

// GetSecurityModeOk returns a tuple with the SecurityMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneVcenterConfig) GetSecurityModeOk() (*string, bool) {
	if o == nil || o.SecurityMode == nil {
		return nil, false
	}
	return o.SecurityMode, true
}

// HasSecurityMode returns a boolean if a field has been set.
func (o *ZoneVcenterConfig) HasSecurityMode() bool {
	if o != nil && o.SecurityMode != nil {
		return true
	}

	return false
}

// SetSecurityMode gets a reference to the given string and assigns it to the SecurityMode field.
func (o *ZoneVcenterConfig) SetSecurityMode(v string) {
	o.SecurityMode = &v
}

// GetCertificateProvider returns the CertificateProvider field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ZoneVcenterConfig) GetCertificateProvider() string {
	if o == nil || o.CertificateProvider.Get() == nil {
		var ret string
		return ret
	}
	return *o.CertificateProvider.Get()
}

// GetCertificateProviderOk returns a tuple with the CertificateProvider field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ZoneVcenterConfig) GetCertificateProviderOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CertificateProvider.Get(), o.CertificateProvider.IsSet()
}

// HasCertificateProvider returns a boolean if a field has been set.
func (o *ZoneVcenterConfig) HasCertificateProvider() bool {
	if o != nil && o.CertificateProvider.IsSet() {
		return true
	}

	return false
}

// SetCertificateProvider gets a reference to the given NullableString and assigns it to the CertificateProvider field.
func (o *ZoneVcenterConfig) SetCertificateProvider(v string) {
	o.CertificateProvider.Set(&v)
}
// SetCertificateProviderNil sets the value for CertificateProvider to be an explicit nil
func (o *ZoneVcenterConfig) SetCertificateProviderNil() {
	o.CertificateProvider.Set(nil)
}

// UnsetCertificateProvider ensures that no value is present for CertificateProvider, not even an explicit nil
func (o *ZoneVcenterConfig) UnsetCertificateProvider() {
	o.CertificateProvider.Unset()
}

// GetBackupMode returns the BackupMode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ZoneVcenterConfig) GetBackupMode() string {
	if o == nil || o.BackupMode.Get() == nil {
		var ret string
		return ret
	}
	return *o.BackupMode.Get()
}

// GetBackupModeOk returns a tuple with the BackupMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ZoneVcenterConfig) GetBackupModeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.BackupMode.Get(), o.BackupMode.IsSet()
}

// HasBackupMode returns a boolean if a field has been set.
func (o *ZoneVcenterConfig) HasBackupMode() bool {
	if o != nil && o.BackupMode.IsSet() {
		return true
	}

	return false
}

// SetBackupMode gets a reference to the given NullableString and assigns it to the BackupMode field.
func (o *ZoneVcenterConfig) SetBackupMode(v string) {
	o.BackupMode.Set(&v)
}
// SetBackupModeNil sets the value for BackupMode to be an explicit nil
func (o *ZoneVcenterConfig) SetBackupModeNil() {
	o.BackupMode.Set(nil)
}

// UnsetBackupMode ensures that no value is present for BackupMode, not even an explicit nil
func (o *ZoneVcenterConfig) UnsetBackupMode() {
	o.BackupMode.Unset()
}

// GetReplicationMode returns the ReplicationMode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ZoneVcenterConfig) GetReplicationMode() string {
	if o == nil || o.ReplicationMode.Get() == nil {
		var ret string
		return ret
	}
	return *o.ReplicationMode.Get()
}

// GetReplicationModeOk returns a tuple with the ReplicationMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ZoneVcenterConfig) GetReplicationModeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ReplicationMode.Get(), o.ReplicationMode.IsSet()
}

// HasReplicationMode returns a boolean if a field has been set.
func (o *ZoneVcenterConfig) HasReplicationMode() bool {
	if o != nil && o.ReplicationMode.IsSet() {
		return true
	}

	return false
}

// SetReplicationMode gets a reference to the given NullableString and assigns it to the ReplicationMode field.
func (o *ZoneVcenterConfig) SetReplicationMode(v string) {
	o.ReplicationMode.Set(&v)
}
// SetReplicationModeNil sets the value for ReplicationMode to be an explicit nil
func (o *ZoneVcenterConfig) SetReplicationModeNil() {
	o.ReplicationMode.Set(nil)
}

// UnsetReplicationMode ensures that no value is present for ReplicationMode, not even an explicit nil
func (o *ZoneVcenterConfig) UnsetReplicationMode() {
	o.ReplicationMode.Unset()
}

// GetDnsIntegrationId returns the DnsIntegrationId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ZoneVcenterConfig) GetDnsIntegrationId() string {
	if o == nil || o.DnsIntegrationId.Get() == nil {
		var ret string
		return ret
	}
	return *o.DnsIntegrationId.Get()
}

// GetDnsIntegrationIdOk returns a tuple with the DnsIntegrationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ZoneVcenterConfig) GetDnsIntegrationIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DnsIntegrationId.Get(), o.DnsIntegrationId.IsSet()
}

// HasDnsIntegrationId returns a boolean if a field has been set.
func (o *ZoneVcenterConfig) HasDnsIntegrationId() bool {
	if o != nil && o.DnsIntegrationId.IsSet() {
		return true
	}

	return false
}

// SetDnsIntegrationId gets a reference to the given NullableString and assigns it to the DnsIntegrationId field.
func (o *ZoneVcenterConfig) SetDnsIntegrationId(v string) {
	o.DnsIntegrationId.Set(&v)
}
// SetDnsIntegrationIdNil sets the value for DnsIntegrationId to be an explicit nil
func (o *ZoneVcenterConfig) SetDnsIntegrationIdNil() {
	o.DnsIntegrationId.Set(nil)
}

// UnsetDnsIntegrationId ensures that no value is present for DnsIntegrationId, not even an explicit nil
func (o *ZoneVcenterConfig) UnsetDnsIntegrationId() {
	o.DnsIntegrationId.Unset()
}

// GetConfigCmdbId returns the ConfigCmdbId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ZoneVcenterConfig) GetConfigCmdbId() string {
	if o == nil || o.ConfigCmdbId.Get() == nil {
		var ret string
		return ret
	}
	return *o.ConfigCmdbId.Get()
}

// GetConfigCmdbIdOk returns a tuple with the ConfigCmdbId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ZoneVcenterConfig) GetConfigCmdbIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ConfigCmdbId.Get(), o.ConfigCmdbId.IsSet()
}

// HasConfigCmdbId returns a boolean if a field has been set.
func (o *ZoneVcenterConfig) HasConfigCmdbId() bool {
	if o != nil && o.ConfigCmdbId.IsSet() {
		return true
	}

	return false
}

// SetConfigCmdbId gets a reference to the given NullableString and assigns it to the ConfigCmdbId field.
func (o *ZoneVcenterConfig) SetConfigCmdbId(v string) {
	o.ConfigCmdbId.Set(&v)
}
// SetConfigCmdbIdNil sets the value for ConfigCmdbId to be an explicit nil
func (o *ZoneVcenterConfig) SetConfigCmdbIdNil() {
	o.ConfigCmdbId.Set(nil)
}

// UnsetConfigCmdbId ensures that no value is present for ConfigCmdbId, not even an explicit nil
func (o *ZoneVcenterConfig) UnsetConfigCmdbId() {
	o.ConfigCmdbId.Unset()
}

// GetConfigManagementId returns the ConfigManagementId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ZoneVcenterConfig) GetConfigManagementId() string {
	if o == nil || o.ConfigManagementId.Get() == nil {
		var ret string
		return ret
	}
	return *o.ConfigManagementId.Get()
}

// GetConfigManagementIdOk returns a tuple with the ConfigManagementId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ZoneVcenterConfig) GetConfigManagementIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ConfigManagementId.Get(), o.ConfigManagementId.IsSet()
}

// HasConfigManagementId returns a boolean if a field has been set.
func (o *ZoneVcenterConfig) HasConfigManagementId() bool {
	if o != nil && o.ConfigManagementId.IsSet() {
		return true
	}

	return false
}

// SetConfigManagementId gets a reference to the given NullableString and assigns it to the ConfigManagementId field.
func (o *ZoneVcenterConfig) SetConfigManagementId(v string) {
	o.ConfigManagementId.Set(&v)
}
// SetConfigManagementIdNil sets the value for ConfigManagementId to be an explicit nil
func (o *ZoneVcenterConfig) SetConfigManagementIdNil() {
	o.ConfigManagementId.Set(nil)
}

// UnsetConfigManagementId ensures that no value is present for ConfigManagementId, not even an explicit nil
func (o *ZoneVcenterConfig) UnsetConfigManagementId() {
	o.ConfigManagementId.Unset()
}

// GetConfigCmId returns the ConfigCmId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ZoneVcenterConfig) GetConfigCmId() string {
	if o == nil || o.ConfigCmId.Get() == nil {
		var ret string
		return ret
	}
	return *o.ConfigCmId.Get()
}

// GetConfigCmIdOk returns a tuple with the ConfigCmId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ZoneVcenterConfig) GetConfigCmIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ConfigCmId.Get(), o.ConfigCmId.IsSet()
}

// HasConfigCmId returns a boolean if a field has been set.
func (o *ZoneVcenterConfig) HasConfigCmId() bool {
	if o != nil && o.ConfigCmId.IsSet() {
		return true
	}

	return false
}

// SetConfigCmId gets a reference to the given NullableString and assigns it to the ConfigCmId field.
func (o *ZoneVcenterConfig) SetConfigCmId(v string) {
	o.ConfigCmId.Set(&v)
}
// SetConfigCmIdNil sets the value for ConfigCmId to be an explicit nil
func (o *ZoneVcenterConfig) SetConfigCmIdNil() {
	o.ConfigCmId.Set(nil)
}

// UnsetConfigCmId ensures that no value is present for ConfigCmId, not even an explicit nil
func (o *ZoneVcenterConfig) UnsetConfigCmId() {
	o.ConfigCmId.Unset()
}

// GetSecurityServer returns the SecurityServer field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ZoneVcenterConfig) GetSecurityServer() string {
	if o == nil || o.SecurityServer.Get() == nil {
		var ret string
		return ret
	}
	return *o.SecurityServer.Get()
}

// GetSecurityServerOk returns a tuple with the SecurityServer field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ZoneVcenterConfig) GetSecurityServerOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SecurityServer.Get(), o.SecurityServer.IsSet()
}

// HasSecurityServer returns a boolean if a field has been set.
func (o *ZoneVcenterConfig) HasSecurityServer() bool {
	if o != nil && o.SecurityServer.IsSet() {
		return true
	}

	return false
}

// SetSecurityServer gets a reference to the given NullableString and assigns it to the SecurityServer field.
func (o *ZoneVcenterConfig) SetSecurityServer(v string) {
	o.SecurityServer.Set(&v)
}
// SetSecurityServerNil sets the value for SecurityServer to be an explicit nil
func (o *ZoneVcenterConfig) SetSecurityServerNil() {
	o.SecurityServer.Set(nil)
}

// UnsetSecurityServer ensures that no value is present for SecurityServer, not even an explicit nil
func (o *ZoneVcenterConfig) UnsetSecurityServer() {
	o.SecurityServer.Unset()
}

// GetServiceRegistryId returns the ServiceRegistryId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ZoneVcenterConfig) GetServiceRegistryId() string {
	if o == nil || o.ServiceRegistryId.Get() == nil {
		var ret string
		return ret
	}
	return *o.ServiceRegistryId.Get()
}

// GetServiceRegistryIdOk returns a tuple with the ServiceRegistryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ZoneVcenterConfig) GetServiceRegistryIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ServiceRegistryId.Get(), o.ServiceRegistryId.IsSet()
}

// HasServiceRegistryId returns a boolean if a field has been set.
func (o *ZoneVcenterConfig) HasServiceRegistryId() bool {
	if o != nil && o.ServiceRegistryId.IsSet() {
		return true
	}

	return false
}

// SetServiceRegistryId gets a reference to the given NullableString and assigns it to the ServiceRegistryId field.
func (o *ZoneVcenterConfig) SetServiceRegistryId(v string) {
	o.ServiceRegistryId.Set(&v)
}
// SetServiceRegistryIdNil sets the value for ServiceRegistryId to be an explicit nil
func (o *ZoneVcenterConfig) SetServiceRegistryIdNil() {
	o.ServiceRegistryId.Set(nil)
}

// UnsetServiceRegistryId ensures that no value is present for ServiceRegistryId, not even an explicit nil
func (o *ZoneVcenterConfig) UnsetServiceRegistryId() {
	o.ServiceRegistryId.Unset()
}

// GetEnableDiskTypeSelection returns the EnableDiskTypeSelection field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ZoneVcenterConfig) GetEnableDiskTypeSelection() string {
	if o == nil || o.EnableDiskTypeSelection.Get() == nil {
		var ret string
		return ret
	}
	return *o.EnableDiskTypeSelection.Get()
}

// GetEnableDiskTypeSelectionOk returns a tuple with the EnableDiskTypeSelection field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ZoneVcenterConfig) GetEnableDiskTypeSelectionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EnableDiskTypeSelection.Get(), o.EnableDiskTypeSelection.IsSet()
}

// HasEnableDiskTypeSelection returns a boolean if a field has been set.
func (o *ZoneVcenterConfig) HasEnableDiskTypeSelection() bool {
	if o != nil && o.EnableDiskTypeSelection.IsSet() {
		return true
	}

	return false
}

// SetEnableDiskTypeSelection gets a reference to the given NullableString and assigns it to the EnableDiskTypeSelection field.
func (o *ZoneVcenterConfig) SetEnableDiskTypeSelection(v string) {
	o.EnableDiskTypeSelection.Set(&v)
}
// SetEnableDiskTypeSelectionNil sets the value for EnableDiskTypeSelection to be an explicit nil
func (o *ZoneVcenterConfig) SetEnableDiskTypeSelectionNil() {
	o.EnableDiskTypeSelection.Set(nil)
}

// UnsetEnableDiskTypeSelection ensures that no value is present for EnableDiskTypeSelection, not even an explicit nil
func (o *ZoneVcenterConfig) UnsetEnableDiskTypeSelection() {
	o.EnableDiskTypeSelection.Unset()
}

// GetKubeUrl returns the KubeUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ZoneVcenterConfig) GetKubeUrl() string {
	if o == nil || o.KubeUrl.Get() == nil {
		var ret string
		return ret
	}
	return *o.KubeUrl.Get()
}

// GetKubeUrlOk returns a tuple with the KubeUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ZoneVcenterConfig) GetKubeUrlOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.KubeUrl.Get(), o.KubeUrl.IsSet()
}

// HasKubeUrl returns a boolean if a field has been set.
func (o *ZoneVcenterConfig) HasKubeUrl() bool {
	if o != nil && o.KubeUrl.IsSet() {
		return true
	}

	return false
}

// SetKubeUrl gets a reference to the given NullableString and assigns it to the KubeUrl field.
func (o *ZoneVcenterConfig) SetKubeUrl(v string) {
	o.KubeUrl.Set(&v)
}
// SetKubeUrlNil sets the value for KubeUrl to be an explicit nil
func (o *ZoneVcenterConfig) SetKubeUrlNil() {
	o.KubeUrl.Set(nil)
}

// UnsetKubeUrl ensures that no value is present for KubeUrl, not even an explicit nil
func (o *ZoneVcenterConfig) UnsetKubeUrl() {
	o.KubeUrl.Unset()
}

// GetApiVersion returns the ApiVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ZoneVcenterConfig) GetApiVersion() string {
	if o == nil || o.ApiVersion.Get() == nil {
		var ret string
		return ret
	}
	return *o.ApiVersion.Get()
}

// GetApiVersionOk returns a tuple with the ApiVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ZoneVcenterConfig) GetApiVersionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ApiVersion.Get(), o.ApiVersion.IsSet()
}

// HasApiVersion returns a boolean if a field has been set.
func (o *ZoneVcenterConfig) HasApiVersion() bool {
	if o != nil && o.ApiVersion.IsSet() {
		return true
	}

	return false
}

// SetApiVersion gets a reference to the given NullableString and assigns it to the ApiVersion field.
func (o *ZoneVcenterConfig) SetApiVersion(v string) {
	o.ApiVersion.Set(&v)
}
// SetApiVersionNil sets the value for ApiVersion to be an explicit nil
func (o *ZoneVcenterConfig) SetApiVersionNil() {
	o.ApiVersion.Set(nil)
}

// UnsetApiVersion ensures that no value is present for ApiVersion, not even an explicit nil
func (o *ZoneVcenterConfig) UnsetApiVersion() {
	o.ApiVersion.Unset()
}

// GetDatacenterId returns the DatacenterId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ZoneVcenterConfig) GetDatacenterId() string {
	if o == nil || o.DatacenterId.Get() == nil {
		var ret string
		return ret
	}
	return *o.DatacenterId.Get()
}

// GetDatacenterIdOk returns a tuple with the DatacenterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ZoneVcenterConfig) GetDatacenterIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DatacenterId.Get(), o.DatacenterId.IsSet()
}

// HasDatacenterId returns a boolean if a field has been set.
func (o *ZoneVcenterConfig) HasDatacenterId() bool {
	if o != nil && o.DatacenterId.IsSet() {
		return true
	}

	return false
}

// SetDatacenterId gets a reference to the given NullableString and assigns it to the DatacenterId field.
func (o *ZoneVcenterConfig) SetDatacenterId(v string) {
	o.DatacenterId.Set(&v)
}
// SetDatacenterIdNil sets the value for DatacenterId to be an explicit nil
func (o *ZoneVcenterConfig) SetDatacenterIdNil() {
	o.DatacenterId.Set(nil)
}

// UnsetDatacenterId ensures that no value is present for DatacenterId, not even an explicit nil
func (o *ZoneVcenterConfig) UnsetDatacenterId() {
	o.DatacenterId.Unset()
}

// GetConfigCmdbDiscovery returns the ConfigCmdbDiscovery field value if set, zero value otherwise.
func (o *ZoneVcenterConfig) GetConfigCmdbDiscovery() bool {
	if o == nil || o.ConfigCmdbDiscovery == nil {
		var ret bool
		return ret
	}
	return *o.ConfigCmdbDiscovery
}

// GetConfigCmdbDiscoveryOk returns a tuple with the ConfigCmdbDiscovery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneVcenterConfig) GetConfigCmdbDiscoveryOk() (*bool, bool) {
	if o == nil || o.ConfigCmdbDiscovery == nil {
		return nil, false
	}
	return o.ConfigCmdbDiscovery, true
}

// HasConfigCmdbDiscovery returns a boolean if a field has been set.
func (o *ZoneVcenterConfig) HasConfigCmdbDiscovery() bool {
	if o != nil && o.ConfigCmdbDiscovery != nil {
		return true
	}

	return false
}

// SetConfigCmdbDiscovery gets a reference to the given bool and assigns it to the ConfigCmdbDiscovery field.
func (o *ZoneVcenterConfig) SetConfigCmdbDiscovery(v bool) {
	o.ConfigCmdbDiscovery = &v
}

// GetDistributedWorkerId returns the DistributedWorkerId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ZoneVcenterConfig) GetDistributedWorkerId() string {
	if o == nil || o.DistributedWorkerId.Get() == nil {
		var ret string
		return ret
	}
	return *o.DistributedWorkerId.Get()
}

// GetDistributedWorkerIdOk returns a tuple with the DistributedWorkerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ZoneVcenterConfig) GetDistributedWorkerIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DistributedWorkerId.Get(), o.DistributedWorkerId.IsSet()
}

// HasDistributedWorkerId returns a boolean if a field has been set.
func (o *ZoneVcenterConfig) HasDistributedWorkerId() bool {
	if o != nil && o.DistributedWorkerId.IsSet() {
		return true
	}

	return false
}

// SetDistributedWorkerId gets a reference to the given NullableString and assigns it to the DistributedWorkerId field.
func (o *ZoneVcenterConfig) SetDistributedWorkerId(v string) {
	o.DistributedWorkerId.Set(&v)
}
// SetDistributedWorkerIdNil sets the value for DistributedWorkerId to be an explicit nil
func (o *ZoneVcenterConfig) SetDistributedWorkerIdNil() {
	o.DistributedWorkerId.Set(nil)
}

// UnsetDistributedWorkerId ensures that no value is present for DistributedWorkerId, not even an explicit nil
func (o *ZoneVcenterConfig) UnsetDistributedWorkerId() {
	o.DistributedWorkerId.Unset()
}

// GetPasswordHash returns the PasswordHash field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ZoneVcenterConfig) GetPasswordHash() string {
	if o == nil || o.PasswordHash.Get() == nil {
		var ret string
		return ret
	}
	return *o.PasswordHash.Get()
}

// GetPasswordHashOk returns a tuple with the PasswordHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ZoneVcenterConfig) GetPasswordHashOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PasswordHash.Get(), o.PasswordHash.IsSet()
}

// HasPasswordHash returns a boolean if a field has been set.
func (o *ZoneVcenterConfig) HasPasswordHash() bool {
	if o != nil && o.PasswordHash.IsSet() {
		return true
	}

	return false
}

// SetPasswordHash gets a reference to the given NullableString and assigns it to the PasswordHash field.
func (o *ZoneVcenterConfig) SetPasswordHash(v string) {
	o.PasswordHash.Set(&v)
}
// SetPasswordHashNil sets the value for PasswordHash to be an explicit nil
func (o *ZoneVcenterConfig) SetPasswordHashNil() {
	o.PasswordHash.Set(nil)
}

// UnsetPasswordHash ensures that no value is present for PasswordHash, not even an explicit nil
func (o *ZoneVcenterConfig) UnsetPasswordHash() {
	o.PasswordHash.Unset()
}

func (o ZoneVcenterConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ApiUrl != nil {
		toSerialize["apiUrl"] = o.ApiUrl
	}
	if o.Username != nil {
		toSerialize["username"] = o.Username
	}
	if o.Password.IsSet() {
		toSerialize["password"] = o.Password.Get()
	}
	if o.Datacenter != nil {
		toSerialize["datacenter"] = o.Datacenter
	}
	if o.Cluster != nil {
		toSerialize["cluster"] = o.Cluster
	}
	if o.ResourcePoolId != nil {
		toSerialize["resourcePoolId"] = o.ResourcePoolId
	}
	if o.ResourcePool != nil {
		toSerialize["resourcePool"] = o.ResourcePool
	}
	if o.RpcMode != nil {
		toSerialize["rpcMode"] = o.RpcMode
	}
	if o.HideHostSelection != nil {
		toSerialize["_hideHostSelection"] = o.HideHostSelection
	}
	if o.HideHostSelection != nil {
		toSerialize["hideHostSelection"] = o.HideHostSelection
	}
	if o.ImportExisting != nil {
		toSerialize["_importExisting"] = o.ImportExisting
	}
	if o.ImportExisting != nil {
		toSerialize["importExisting"] = o.ImportExisting
	}
	if o.EnableVnc != nil {
		toSerialize["_enableVnc"] = o.EnableVnc
	}
	if o.EnableVnc != nil {
		toSerialize["enableVnc"] = o.EnableVnc
	}
	if o.EnableDiskTypeSelection != nil {
		toSerialize["_enableDiskTypeSelection"] = o.EnableDiskTypeSelection
	}
	if o.EnableNetworkTypeSelection != nil {
		toSerialize["_enableNetworkTypeSelection"] = o.EnableNetworkTypeSelection
	}
	if o.DiskStorageType.IsSet() {
		toSerialize["diskStorageType"] = o.DiskStorageType.Get()
	}
	if o.ApplianceUrl.IsSet() {
		toSerialize["applianceUrl"] = o.ApplianceUrl.Get()
	}
	if o.DatacenterName.IsSet() {
		toSerialize["datacenterName"] = o.DatacenterName.Get()
	}
	if o.NetworkServerId != nil {
		toSerialize["networkServer.id"] = o.NetworkServerId
	}
	if o.NetworkServer != nil {
		toSerialize["networkServer"] = o.NetworkServer
	}
	if o.SecurityMode != nil {
		toSerialize["securityMode"] = o.SecurityMode
	}
	if o.CertificateProvider.IsSet() {
		toSerialize["certificateProvider"] = o.CertificateProvider.Get()
	}
	if o.BackupMode.IsSet() {
		toSerialize["backupMode"] = o.BackupMode.Get()
	}
	if o.ReplicationMode.IsSet() {
		toSerialize["replicationMode"] = o.ReplicationMode.Get()
	}
	if o.DnsIntegrationId.IsSet() {
		toSerialize["dnsIntegrationId"] = o.DnsIntegrationId.Get()
	}
	if o.ConfigCmdbId.IsSet() {
		toSerialize["configCmdbId"] = o.ConfigCmdbId.Get()
	}
	if o.ConfigManagementId.IsSet() {
		toSerialize["configManagementId"] = o.ConfigManagementId.Get()
	}
	if o.ConfigCmId.IsSet() {
		toSerialize["configCmId"] = o.ConfigCmId.Get()
	}
	if o.SecurityServer.IsSet() {
		toSerialize["securityServer"] = o.SecurityServer.Get()
	}
	if o.ServiceRegistryId.IsSet() {
		toSerialize["serviceRegistryId"] = o.ServiceRegistryId.Get()
	}
	if o.EnableDiskTypeSelection.IsSet() {
		toSerialize["enableDiskTypeSelection"] = o.EnableDiskTypeSelection.Get()
	}
	if o.KubeUrl.IsSet() {
		toSerialize["kubeUrl"] = o.KubeUrl.Get()
	}
	if o.ApiVersion.IsSet() {
		toSerialize["apiVersion"] = o.ApiVersion.Get()
	}
	if o.DatacenterId.IsSet() {
		toSerialize["datacenterId"] = o.DatacenterId.Get()
	}
	if o.ConfigCmdbDiscovery != nil {
		toSerialize["configCmdbDiscovery"] = o.ConfigCmdbDiscovery
	}
	if o.DistributedWorkerId.IsSet() {
		toSerialize["distributedWorkerId"] = o.DistributedWorkerId.Get()
	}
	if o.PasswordHash.IsSet() {
		toSerialize["passwordHash"] = o.PasswordHash.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableZoneVcenterConfig struct {
	value *ZoneVcenterConfig
	isSet bool
}

func (v NullableZoneVcenterConfig) Get() *ZoneVcenterConfig {
	return v.value
}

func (v *NullableZoneVcenterConfig) Set(val *ZoneVcenterConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableZoneVcenterConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableZoneVcenterConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableZoneVcenterConfig(val *ZoneVcenterConfig) *NullableZoneVcenterConfig {
	return &NullableZoneVcenterConfig{value: val, isSet: true}
}

func (v NullableZoneVcenterConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableZoneVcenterConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


