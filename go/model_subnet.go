/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Subnet struct for Subnet
type Subnet struct {
	Id *int64 `json:"id,omitempty"`
	Code NullableString `json:"code,omitempty"`
	Name *string `json:"name,omitempty"`
	Labels []string `json:"labels,omitempty"`
	Active *bool `json:"active,omitempty"`
	Description NullableString `json:"description,omitempty"`
	ExternalId *string `json:"externalId,omitempty"`
	UniqueId NullableString `json:"uniqueId,omitempty"`
	AddressPrefix NullableString `json:"addressPrefix,omitempty"`
	Cidr *string `json:"cidr,omitempty"`
	Gateway NullableString `json:"gateway,omitempty"`
	Netmask *string `json:"netmask,omitempty"`
	SubnetAddress *string `json:"subnetAddress,omitempty"`
	TftpServer NullableString `json:"tftpServer,omitempty"`
	BootFile NullableString `json:"bootFile,omitempty"`
	Pool NullableString `json:"pool,omitempty"`
	DhcpServer *bool `json:"dhcpServer,omitempty"`
	HasFloatingIps *bool `json:"hasFloatingIps,omitempty"`
	DhcpIp NullableString `json:"dhcpIp,omitempty"`
	DnsPrimary NullableString `json:"dnsPrimary,omitempty"`
	DnsSecondary NullableString `json:"dnsSecondary,omitempty"`
	DhcpStart *string `json:"dhcpStart,omitempty"`
	DhcpEnd *string `json:"dhcpEnd,omitempty"`
	DhcpRange NullableString `json:"dhcpRange,omitempty"`
	NetworkProxy NullableString `json:"networkProxy,omitempty"`
	NetworkDomain NullableString `json:"networkDomain,omitempty"`
	SearchDomains NullableString `json:"searchDomains,omitempty"`
	DefaultNetwork *bool `json:"defaultNetwork,omitempty"`
	AssignPublicIp *bool `json:"assignPublicIp,omitempty"`
	Visibility *string `json:"visibility,omitempty"`
	Status *AppStateInputProviders `json:"status,omitempty"`
	Network *InlineResponse20040AppDeployInstance `json:"network,omitempty"`
	Type *InlineResponse20079LoadBalancerMonitorLoadBalancerType `json:"type,omitempty"`
	Account *InlineResponse20040AppDeployInstance `json:"account,omitempty"`
	SecurityGroups *[]map[string]interface{} `json:"securityGroups,omitempty"`
	Tenants *[]InlineResponse20040AppDeployInstance `json:"tenants,omitempty"`
	ResourcePermission *SubnetResourcePermission `json:"resourcePermission,omitempty"`
}

// NewSubnet instantiates a new Subnet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubnet() *Subnet {
	this := Subnet{}
	return &this
}

// NewSubnetWithDefaults instantiates a new Subnet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubnetWithDefaults() *Subnet {
	this := Subnet{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Subnet) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subnet) GetIdOk() (*int64, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Subnet) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *Subnet) SetId(v int64) {
	o.Id = &v
}

// GetCode returns the Code field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Subnet) GetCode() string {
	if o == nil || o.Code.Get() == nil {
		var ret string
		return ret
	}
	return *o.Code.Get()
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Subnet) GetCodeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Code.Get(), o.Code.IsSet()
}

// HasCode returns a boolean if a field has been set.
func (o *Subnet) HasCode() bool {
	if o != nil && o.Code.IsSet() {
		return true
	}

	return false
}

// SetCode gets a reference to the given NullableString and assigns it to the Code field.
func (o *Subnet) SetCode(v string) {
	o.Code.Set(&v)
}
// SetCodeNil sets the value for Code to be an explicit nil
func (o *Subnet) SetCodeNil() {
	o.Code.Set(nil)
}

// UnsetCode ensures that no value is present for Code, not even an explicit nil
func (o *Subnet) UnsetCode() {
	o.Code.Unset()
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Subnet) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subnet) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Subnet) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Subnet) SetName(v string) {
	o.Name = &v
}

// GetLabels returns the Labels field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Subnet) GetLabels() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Subnet) GetLabelsOk() (*[]string, bool) {
	if o == nil || o.Labels == nil {
		return nil, false
	}
	return &o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *Subnet) HasLabels() bool {
	if o != nil && o.Labels != nil {
		return true
	}

	return false
}

// SetLabels gets a reference to the given []string and assigns it to the Labels field.
func (o *Subnet) SetLabels(v []string) {
	o.Labels = v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *Subnet) GetActive() bool {
	if o == nil || o.Active == nil {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subnet) GetActiveOk() (*bool, bool) {
	if o == nil || o.Active == nil {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *Subnet) HasActive() bool {
	if o != nil && o.Active != nil {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *Subnet) SetActive(v bool) {
	o.Active = &v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Subnet) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Subnet) GetDescriptionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *Subnet) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *Subnet) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *Subnet) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *Subnet) UnsetDescription() {
	o.Description.Unset()
}

// GetExternalId returns the ExternalId field value if set, zero value otherwise.
func (o *Subnet) GetExternalId() string {
	if o == nil || o.ExternalId == nil {
		var ret string
		return ret
	}
	return *o.ExternalId
}

// GetExternalIdOk returns a tuple with the ExternalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subnet) GetExternalIdOk() (*string, bool) {
	if o == nil || o.ExternalId == nil {
		return nil, false
	}
	return o.ExternalId, true
}

// HasExternalId returns a boolean if a field has been set.
func (o *Subnet) HasExternalId() bool {
	if o != nil && o.ExternalId != nil {
		return true
	}

	return false
}

// SetExternalId gets a reference to the given string and assigns it to the ExternalId field.
func (o *Subnet) SetExternalId(v string) {
	o.ExternalId = &v
}

// GetUniqueId returns the UniqueId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Subnet) GetUniqueId() string {
	if o == nil || o.UniqueId.Get() == nil {
		var ret string
		return ret
	}
	return *o.UniqueId.Get()
}

// GetUniqueIdOk returns a tuple with the UniqueId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Subnet) GetUniqueIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UniqueId.Get(), o.UniqueId.IsSet()
}

// HasUniqueId returns a boolean if a field has been set.
func (o *Subnet) HasUniqueId() bool {
	if o != nil && o.UniqueId.IsSet() {
		return true
	}

	return false
}

// SetUniqueId gets a reference to the given NullableString and assigns it to the UniqueId field.
func (o *Subnet) SetUniqueId(v string) {
	o.UniqueId.Set(&v)
}
// SetUniqueIdNil sets the value for UniqueId to be an explicit nil
func (o *Subnet) SetUniqueIdNil() {
	o.UniqueId.Set(nil)
}

// UnsetUniqueId ensures that no value is present for UniqueId, not even an explicit nil
func (o *Subnet) UnsetUniqueId() {
	o.UniqueId.Unset()
}

// GetAddressPrefix returns the AddressPrefix field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Subnet) GetAddressPrefix() string {
	if o == nil || o.AddressPrefix.Get() == nil {
		var ret string
		return ret
	}
	return *o.AddressPrefix.Get()
}

// GetAddressPrefixOk returns a tuple with the AddressPrefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Subnet) GetAddressPrefixOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AddressPrefix.Get(), o.AddressPrefix.IsSet()
}

// HasAddressPrefix returns a boolean if a field has been set.
func (o *Subnet) HasAddressPrefix() bool {
	if o != nil && o.AddressPrefix.IsSet() {
		return true
	}

	return false
}

// SetAddressPrefix gets a reference to the given NullableString and assigns it to the AddressPrefix field.
func (o *Subnet) SetAddressPrefix(v string) {
	o.AddressPrefix.Set(&v)
}
// SetAddressPrefixNil sets the value for AddressPrefix to be an explicit nil
func (o *Subnet) SetAddressPrefixNil() {
	o.AddressPrefix.Set(nil)
}

// UnsetAddressPrefix ensures that no value is present for AddressPrefix, not even an explicit nil
func (o *Subnet) UnsetAddressPrefix() {
	o.AddressPrefix.Unset()
}

// GetCidr returns the Cidr field value if set, zero value otherwise.
func (o *Subnet) GetCidr() string {
	if o == nil || o.Cidr == nil {
		var ret string
		return ret
	}
	return *o.Cidr
}

// GetCidrOk returns a tuple with the Cidr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subnet) GetCidrOk() (*string, bool) {
	if o == nil || o.Cidr == nil {
		return nil, false
	}
	return o.Cidr, true
}

// HasCidr returns a boolean if a field has been set.
func (o *Subnet) HasCidr() bool {
	if o != nil && o.Cidr != nil {
		return true
	}

	return false
}

// SetCidr gets a reference to the given string and assigns it to the Cidr field.
func (o *Subnet) SetCidr(v string) {
	o.Cidr = &v
}

// GetGateway returns the Gateway field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Subnet) GetGateway() string {
	if o == nil || o.Gateway.Get() == nil {
		var ret string
		return ret
	}
	return *o.Gateway.Get()
}

// GetGatewayOk returns a tuple with the Gateway field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Subnet) GetGatewayOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Gateway.Get(), o.Gateway.IsSet()
}

// HasGateway returns a boolean if a field has been set.
func (o *Subnet) HasGateway() bool {
	if o != nil && o.Gateway.IsSet() {
		return true
	}

	return false
}

// SetGateway gets a reference to the given NullableString and assigns it to the Gateway field.
func (o *Subnet) SetGateway(v string) {
	o.Gateway.Set(&v)
}
// SetGatewayNil sets the value for Gateway to be an explicit nil
func (o *Subnet) SetGatewayNil() {
	o.Gateway.Set(nil)
}

// UnsetGateway ensures that no value is present for Gateway, not even an explicit nil
func (o *Subnet) UnsetGateway() {
	o.Gateway.Unset()
}

// GetNetmask returns the Netmask field value if set, zero value otherwise.
func (o *Subnet) GetNetmask() string {
	if o == nil || o.Netmask == nil {
		var ret string
		return ret
	}
	return *o.Netmask
}

// GetNetmaskOk returns a tuple with the Netmask field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subnet) GetNetmaskOk() (*string, bool) {
	if o == nil || o.Netmask == nil {
		return nil, false
	}
	return o.Netmask, true
}

// HasNetmask returns a boolean if a field has been set.
func (o *Subnet) HasNetmask() bool {
	if o != nil && o.Netmask != nil {
		return true
	}

	return false
}

// SetNetmask gets a reference to the given string and assigns it to the Netmask field.
func (o *Subnet) SetNetmask(v string) {
	o.Netmask = &v
}

// GetSubnetAddress returns the SubnetAddress field value if set, zero value otherwise.
func (o *Subnet) GetSubnetAddress() string {
	if o == nil || o.SubnetAddress == nil {
		var ret string
		return ret
	}
	return *o.SubnetAddress
}

// GetSubnetAddressOk returns a tuple with the SubnetAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subnet) GetSubnetAddressOk() (*string, bool) {
	if o == nil || o.SubnetAddress == nil {
		return nil, false
	}
	return o.SubnetAddress, true
}

// HasSubnetAddress returns a boolean if a field has been set.
func (o *Subnet) HasSubnetAddress() bool {
	if o != nil && o.SubnetAddress != nil {
		return true
	}

	return false
}

// SetSubnetAddress gets a reference to the given string and assigns it to the SubnetAddress field.
func (o *Subnet) SetSubnetAddress(v string) {
	o.SubnetAddress = &v
}

// GetTftpServer returns the TftpServer field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Subnet) GetTftpServer() string {
	if o == nil || o.TftpServer.Get() == nil {
		var ret string
		return ret
	}
	return *o.TftpServer.Get()
}

// GetTftpServerOk returns a tuple with the TftpServer field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Subnet) GetTftpServerOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TftpServer.Get(), o.TftpServer.IsSet()
}

// HasTftpServer returns a boolean if a field has been set.
func (o *Subnet) HasTftpServer() bool {
	if o != nil && o.TftpServer.IsSet() {
		return true
	}

	return false
}

// SetTftpServer gets a reference to the given NullableString and assigns it to the TftpServer field.
func (o *Subnet) SetTftpServer(v string) {
	o.TftpServer.Set(&v)
}
// SetTftpServerNil sets the value for TftpServer to be an explicit nil
func (o *Subnet) SetTftpServerNil() {
	o.TftpServer.Set(nil)
}

// UnsetTftpServer ensures that no value is present for TftpServer, not even an explicit nil
func (o *Subnet) UnsetTftpServer() {
	o.TftpServer.Unset()
}

// GetBootFile returns the BootFile field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Subnet) GetBootFile() string {
	if o == nil || o.BootFile.Get() == nil {
		var ret string
		return ret
	}
	return *o.BootFile.Get()
}

// GetBootFileOk returns a tuple with the BootFile field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Subnet) GetBootFileOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.BootFile.Get(), o.BootFile.IsSet()
}

// HasBootFile returns a boolean if a field has been set.
func (o *Subnet) HasBootFile() bool {
	if o != nil && o.BootFile.IsSet() {
		return true
	}

	return false
}

// SetBootFile gets a reference to the given NullableString and assigns it to the BootFile field.
func (o *Subnet) SetBootFile(v string) {
	o.BootFile.Set(&v)
}
// SetBootFileNil sets the value for BootFile to be an explicit nil
func (o *Subnet) SetBootFileNil() {
	o.BootFile.Set(nil)
}

// UnsetBootFile ensures that no value is present for BootFile, not even an explicit nil
func (o *Subnet) UnsetBootFile() {
	o.BootFile.Unset()
}

// GetPool returns the Pool field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Subnet) GetPool() string {
	if o == nil || o.Pool.Get() == nil {
		var ret string
		return ret
	}
	return *o.Pool.Get()
}

// GetPoolOk returns a tuple with the Pool field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Subnet) GetPoolOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Pool.Get(), o.Pool.IsSet()
}

// HasPool returns a boolean if a field has been set.
func (o *Subnet) HasPool() bool {
	if o != nil && o.Pool.IsSet() {
		return true
	}

	return false
}

// SetPool gets a reference to the given NullableString and assigns it to the Pool field.
func (o *Subnet) SetPool(v string) {
	o.Pool.Set(&v)
}
// SetPoolNil sets the value for Pool to be an explicit nil
func (o *Subnet) SetPoolNil() {
	o.Pool.Set(nil)
}

// UnsetPool ensures that no value is present for Pool, not even an explicit nil
func (o *Subnet) UnsetPool() {
	o.Pool.Unset()
}

// GetDhcpServer returns the DhcpServer field value if set, zero value otherwise.
func (o *Subnet) GetDhcpServer() bool {
	if o == nil || o.DhcpServer == nil {
		var ret bool
		return ret
	}
	return *o.DhcpServer
}

// GetDhcpServerOk returns a tuple with the DhcpServer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subnet) GetDhcpServerOk() (*bool, bool) {
	if o == nil || o.DhcpServer == nil {
		return nil, false
	}
	return o.DhcpServer, true
}

// HasDhcpServer returns a boolean if a field has been set.
func (o *Subnet) HasDhcpServer() bool {
	if o != nil && o.DhcpServer != nil {
		return true
	}

	return false
}

// SetDhcpServer gets a reference to the given bool and assigns it to the DhcpServer field.
func (o *Subnet) SetDhcpServer(v bool) {
	o.DhcpServer = &v
}

// GetHasFloatingIps returns the HasFloatingIps field value if set, zero value otherwise.
func (o *Subnet) GetHasFloatingIps() bool {
	if o == nil || o.HasFloatingIps == nil {
		var ret bool
		return ret
	}
	return *o.HasFloatingIps
}

// GetHasFloatingIpsOk returns a tuple with the HasFloatingIps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subnet) GetHasFloatingIpsOk() (*bool, bool) {
	if o == nil || o.HasFloatingIps == nil {
		return nil, false
	}
	return o.HasFloatingIps, true
}

// HasHasFloatingIps returns a boolean if a field has been set.
func (o *Subnet) HasHasFloatingIps() bool {
	if o != nil && o.HasFloatingIps != nil {
		return true
	}

	return false
}

// SetHasFloatingIps gets a reference to the given bool and assigns it to the HasFloatingIps field.
func (o *Subnet) SetHasFloatingIps(v bool) {
	o.HasFloatingIps = &v
}

// GetDhcpIp returns the DhcpIp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Subnet) GetDhcpIp() string {
	if o == nil || o.DhcpIp.Get() == nil {
		var ret string
		return ret
	}
	return *o.DhcpIp.Get()
}

// GetDhcpIpOk returns a tuple with the DhcpIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Subnet) GetDhcpIpOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DhcpIp.Get(), o.DhcpIp.IsSet()
}

// HasDhcpIp returns a boolean if a field has been set.
func (o *Subnet) HasDhcpIp() bool {
	if o != nil && o.DhcpIp.IsSet() {
		return true
	}

	return false
}

// SetDhcpIp gets a reference to the given NullableString and assigns it to the DhcpIp field.
func (o *Subnet) SetDhcpIp(v string) {
	o.DhcpIp.Set(&v)
}
// SetDhcpIpNil sets the value for DhcpIp to be an explicit nil
func (o *Subnet) SetDhcpIpNil() {
	o.DhcpIp.Set(nil)
}

// UnsetDhcpIp ensures that no value is present for DhcpIp, not even an explicit nil
func (o *Subnet) UnsetDhcpIp() {
	o.DhcpIp.Unset()
}

// GetDnsPrimary returns the DnsPrimary field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Subnet) GetDnsPrimary() string {
	if o == nil || o.DnsPrimary.Get() == nil {
		var ret string
		return ret
	}
	return *o.DnsPrimary.Get()
}

// GetDnsPrimaryOk returns a tuple with the DnsPrimary field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Subnet) GetDnsPrimaryOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DnsPrimary.Get(), o.DnsPrimary.IsSet()
}

// HasDnsPrimary returns a boolean if a field has been set.
func (o *Subnet) HasDnsPrimary() bool {
	if o != nil && o.DnsPrimary.IsSet() {
		return true
	}

	return false
}

// SetDnsPrimary gets a reference to the given NullableString and assigns it to the DnsPrimary field.
func (o *Subnet) SetDnsPrimary(v string) {
	o.DnsPrimary.Set(&v)
}
// SetDnsPrimaryNil sets the value for DnsPrimary to be an explicit nil
func (o *Subnet) SetDnsPrimaryNil() {
	o.DnsPrimary.Set(nil)
}

// UnsetDnsPrimary ensures that no value is present for DnsPrimary, not even an explicit nil
func (o *Subnet) UnsetDnsPrimary() {
	o.DnsPrimary.Unset()
}

// GetDnsSecondary returns the DnsSecondary field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Subnet) GetDnsSecondary() string {
	if o == nil || o.DnsSecondary.Get() == nil {
		var ret string
		return ret
	}
	return *o.DnsSecondary.Get()
}

// GetDnsSecondaryOk returns a tuple with the DnsSecondary field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Subnet) GetDnsSecondaryOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DnsSecondary.Get(), o.DnsSecondary.IsSet()
}

// HasDnsSecondary returns a boolean if a field has been set.
func (o *Subnet) HasDnsSecondary() bool {
	if o != nil && o.DnsSecondary.IsSet() {
		return true
	}

	return false
}

// SetDnsSecondary gets a reference to the given NullableString and assigns it to the DnsSecondary field.
func (o *Subnet) SetDnsSecondary(v string) {
	o.DnsSecondary.Set(&v)
}
// SetDnsSecondaryNil sets the value for DnsSecondary to be an explicit nil
func (o *Subnet) SetDnsSecondaryNil() {
	o.DnsSecondary.Set(nil)
}

// UnsetDnsSecondary ensures that no value is present for DnsSecondary, not even an explicit nil
func (o *Subnet) UnsetDnsSecondary() {
	o.DnsSecondary.Unset()
}

// GetDhcpStart returns the DhcpStart field value if set, zero value otherwise.
func (o *Subnet) GetDhcpStart() string {
	if o == nil || o.DhcpStart == nil {
		var ret string
		return ret
	}
	return *o.DhcpStart
}

// GetDhcpStartOk returns a tuple with the DhcpStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subnet) GetDhcpStartOk() (*string, bool) {
	if o == nil || o.DhcpStart == nil {
		return nil, false
	}
	return o.DhcpStart, true
}

// HasDhcpStart returns a boolean if a field has been set.
func (o *Subnet) HasDhcpStart() bool {
	if o != nil && o.DhcpStart != nil {
		return true
	}

	return false
}

// SetDhcpStart gets a reference to the given string and assigns it to the DhcpStart field.
func (o *Subnet) SetDhcpStart(v string) {
	o.DhcpStart = &v
}

// GetDhcpEnd returns the DhcpEnd field value if set, zero value otherwise.
func (o *Subnet) GetDhcpEnd() string {
	if o == nil || o.DhcpEnd == nil {
		var ret string
		return ret
	}
	return *o.DhcpEnd
}

// GetDhcpEndOk returns a tuple with the DhcpEnd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subnet) GetDhcpEndOk() (*string, bool) {
	if o == nil || o.DhcpEnd == nil {
		return nil, false
	}
	return o.DhcpEnd, true
}

// HasDhcpEnd returns a boolean if a field has been set.
func (o *Subnet) HasDhcpEnd() bool {
	if o != nil && o.DhcpEnd != nil {
		return true
	}

	return false
}

// SetDhcpEnd gets a reference to the given string and assigns it to the DhcpEnd field.
func (o *Subnet) SetDhcpEnd(v string) {
	o.DhcpEnd = &v
}

// GetDhcpRange returns the DhcpRange field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Subnet) GetDhcpRange() string {
	if o == nil || o.DhcpRange.Get() == nil {
		var ret string
		return ret
	}
	return *o.DhcpRange.Get()
}

// GetDhcpRangeOk returns a tuple with the DhcpRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Subnet) GetDhcpRangeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DhcpRange.Get(), o.DhcpRange.IsSet()
}

// HasDhcpRange returns a boolean if a field has been set.
func (o *Subnet) HasDhcpRange() bool {
	if o != nil && o.DhcpRange.IsSet() {
		return true
	}

	return false
}

// SetDhcpRange gets a reference to the given NullableString and assigns it to the DhcpRange field.
func (o *Subnet) SetDhcpRange(v string) {
	o.DhcpRange.Set(&v)
}
// SetDhcpRangeNil sets the value for DhcpRange to be an explicit nil
func (o *Subnet) SetDhcpRangeNil() {
	o.DhcpRange.Set(nil)
}

// UnsetDhcpRange ensures that no value is present for DhcpRange, not even an explicit nil
func (o *Subnet) UnsetDhcpRange() {
	o.DhcpRange.Unset()
}

// GetNetworkProxy returns the NetworkProxy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Subnet) GetNetworkProxy() string {
	if o == nil || o.NetworkProxy.Get() == nil {
		var ret string
		return ret
	}
	return *o.NetworkProxy.Get()
}

// GetNetworkProxyOk returns a tuple with the NetworkProxy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Subnet) GetNetworkProxyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NetworkProxy.Get(), o.NetworkProxy.IsSet()
}

// HasNetworkProxy returns a boolean if a field has been set.
func (o *Subnet) HasNetworkProxy() bool {
	if o != nil && o.NetworkProxy.IsSet() {
		return true
	}

	return false
}

// SetNetworkProxy gets a reference to the given NullableString and assigns it to the NetworkProxy field.
func (o *Subnet) SetNetworkProxy(v string) {
	o.NetworkProxy.Set(&v)
}
// SetNetworkProxyNil sets the value for NetworkProxy to be an explicit nil
func (o *Subnet) SetNetworkProxyNil() {
	o.NetworkProxy.Set(nil)
}

// UnsetNetworkProxy ensures that no value is present for NetworkProxy, not even an explicit nil
func (o *Subnet) UnsetNetworkProxy() {
	o.NetworkProxy.Unset()
}

// GetNetworkDomain returns the NetworkDomain field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Subnet) GetNetworkDomain() string {
	if o == nil || o.NetworkDomain.Get() == nil {
		var ret string
		return ret
	}
	return *o.NetworkDomain.Get()
}

// GetNetworkDomainOk returns a tuple with the NetworkDomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Subnet) GetNetworkDomainOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NetworkDomain.Get(), o.NetworkDomain.IsSet()
}

// HasNetworkDomain returns a boolean if a field has been set.
func (o *Subnet) HasNetworkDomain() bool {
	if o != nil && o.NetworkDomain.IsSet() {
		return true
	}

	return false
}

// SetNetworkDomain gets a reference to the given NullableString and assigns it to the NetworkDomain field.
func (o *Subnet) SetNetworkDomain(v string) {
	o.NetworkDomain.Set(&v)
}
// SetNetworkDomainNil sets the value for NetworkDomain to be an explicit nil
func (o *Subnet) SetNetworkDomainNil() {
	o.NetworkDomain.Set(nil)
}

// UnsetNetworkDomain ensures that no value is present for NetworkDomain, not even an explicit nil
func (o *Subnet) UnsetNetworkDomain() {
	o.NetworkDomain.Unset()
}

// GetSearchDomains returns the SearchDomains field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Subnet) GetSearchDomains() string {
	if o == nil || o.SearchDomains.Get() == nil {
		var ret string
		return ret
	}
	return *o.SearchDomains.Get()
}

// GetSearchDomainsOk returns a tuple with the SearchDomains field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Subnet) GetSearchDomainsOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SearchDomains.Get(), o.SearchDomains.IsSet()
}

// HasSearchDomains returns a boolean if a field has been set.
func (o *Subnet) HasSearchDomains() bool {
	if o != nil && o.SearchDomains.IsSet() {
		return true
	}

	return false
}

// SetSearchDomains gets a reference to the given NullableString and assigns it to the SearchDomains field.
func (o *Subnet) SetSearchDomains(v string) {
	o.SearchDomains.Set(&v)
}
// SetSearchDomainsNil sets the value for SearchDomains to be an explicit nil
func (o *Subnet) SetSearchDomainsNil() {
	o.SearchDomains.Set(nil)
}

// UnsetSearchDomains ensures that no value is present for SearchDomains, not even an explicit nil
func (o *Subnet) UnsetSearchDomains() {
	o.SearchDomains.Unset()
}

// GetDefaultNetwork returns the DefaultNetwork field value if set, zero value otherwise.
func (o *Subnet) GetDefaultNetwork() bool {
	if o == nil || o.DefaultNetwork == nil {
		var ret bool
		return ret
	}
	return *o.DefaultNetwork
}

// GetDefaultNetworkOk returns a tuple with the DefaultNetwork field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subnet) GetDefaultNetworkOk() (*bool, bool) {
	if o == nil || o.DefaultNetwork == nil {
		return nil, false
	}
	return o.DefaultNetwork, true
}

// HasDefaultNetwork returns a boolean if a field has been set.
func (o *Subnet) HasDefaultNetwork() bool {
	if o != nil && o.DefaultNetwork != nil {
		return true
	}

	return false
}

// SetDefaultNetwork gets a reference to the given bool and assigns it to the DefaultNetwork field.
func (o *Subnet) SetDefaultNetwork(v bool) {
	o.DefaultNetwork = &v
}

// GetAssignPublicIp returns the AssignPublicIp field value if set, zero value otherwise.
func (o *Subnet) GetAssignPublicIp() bool {
	if o == nil || o.AssignPublicIp == nil {
		var ret bool
		return ret
	}
	return *o.AssignPublicIp
}

// GetAssignPublicIpOk returns a tuple with the AssignPublicIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subnet) GetAssignPublicIpOk() (*bool, bool) {
	if o == nil || o.AssignPublicIp == nil {
		return nil, false
	}
	return o.AssignPublicIp, true
}

// HasAssignPublicIp returns a boolean if a field has been set.
func (o *Subnet) HasAssignPublicIp() bool {
	if o != nil && o.AssignPublicIp != nil {
		return true
	}

	return false
}

// SetAssignPublicIp gets a reference to the given bool and assigns it to the AssignPublicIp field.
func (o *Subnet) SetAssignPublicIp(v bool) {
	o.AssignPublicIp = &v
}

// GetVisibility returns the Visibility field value if set, zero value otherwise.
func (o *Subnet) GetVisibility() string {
	if o == nil || o.Visibility == nil {
		var ret string
		return ret
	}
	return *o.Visibility
}

// GetVisibilityOk returns a tuple with the Visibility field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subnet) GetVisibilityOk() (*string, bool) {
	if o == nil || o.Visibility == nil {
		return nil, false
	}
	return o.Visibility, true
}

// HasVisibility returns a boolean if a field has been set.
func (o *Subnet) HasVisibility() bool {
	if o != nil && o.Visibility != nil {
		return true
	}

	return false
}

// SetVisibility gets a reference to the given string and assigns it to the Visibility field.
func (o *Subnet) SetVisibility(v string) {
	o.Visibility = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Subnet) GetStatus() AppStateInputProviders {
	if o == nil || o.Status == nil {
		var ret AppStateInputProviders
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subnet) GetStatusOk() (*AppStateInputProviders, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Subnet) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given AppStateInputProviders and assigns it to the Status field.
func (o *Subnet) SetStatus(v AppStateInputProviders) {
	o.Status = &v
}

// GetNetwork returns the Network field value if set, zero value otherwise.
func (o *Subnet) GetNetwork() InlineResponse20040AppDeployInstance {
	if o == nil || o.Network == nil {
		var ret InlineResponse20040AppDeployInstance
		return ret
	}
	return *o.Network
}

// GetNetworkOk returns a tuple with the Network field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subnet) GetNetworkOk() (*InlineResponse20040AppDeployInstance, bool) {
	if o == nil || o.Network == nil {
		return nil, false
	}
	return o.Network, true
}

// HasNetwork returns a boolean if a field has been set.
func (o *Subnet) HasNetwork() bool {
	if o != nil && o.Network != nil {
		return true
	}

	return false
}

// SetNetwork gets a reference to the given InlineResponse20040AppDeployInstance and assigns it to the Network field.
func (o *Subnet) SetNetwork(v InlineResponse20040AppDeployInstance) {
	o.Network = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Subnet) GetType() InlineResponse20079LoadBalancerMonitorLoadBalancerType {
	if o == nil || o.Type == nil {
		var ret InlineResponse20079LoadBalancerMonitorLoadBalancerType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subnet) GetTypeOk() (*InlineResponse20079LoadBalancerMonitorLoadBalancerType, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Subnet) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given InlineResponse20079LoadBalancerMonitorLoadBalancerType and assigns it to the Type field.
func (o *Subnet) SetType(v InlineResponse20079LoadBalancerMonitorLoadBalancerType) {
	o.Type = &v
}

// GetAccount returns the Account field value if set, zero value otherwise.
func (o *Subnet) GetAccount() InlineResponse20040AppDeployInstance {
	if o == nil || o.Account == nil {
		var ret InlineResponse20040AppDeployInstance
		return ret
	}
	return *o.Account
}

// GetAccountOk returns a tuple with the Account field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subnet) GetAccountOk() (*InlineResponse20040AppDeployInstance, bool) {
	if o == nil || o.Account == nil {
		return nil, false
	}
	return o.Account, true
}

// HasAccount returns a boolean if a field has been set.
func (o *Subnet) HasAccount() bool {
	if o != nil && o.Account != nil {
		return true
	}

	return false
}

// SetAccount gets a reference to the given InlineResponse20040AppDeployInstance and assigns it to the Account field.
func (o *Subnet) SetAccount(v InlineResponse20040AppDeployInstance) {
	o.Account = &v
}

// GetSecurityGroups returns the SecurityGroups field value if set, zero value otherwise.
func (o *Subnet) GetSecurityGroups() []map[string]interface{} {
	if o == nil || o.SecurityGroups == nil {
		var ret []map[string]interface{}
		return ret
	}
	return *o.SecurityGroups
}

// GetSecurityGroupsOk returns a tuple with the SecurityGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subnet) GetSecurityGroupsOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.SecurityGroups == nil {
		return nil, false
	}
	return o.SecurityGroups, true
}

// HasSecurityGroups returns a boolean if a field has been set.
func (o *Subnet) HasSecurityGroups() bool {
	if o != nil && o.SecurityGroups != nil {
		return true
	}

	return false
}

// SetSecurityGroups gets a reference to the given []map[string]interface{} and assigns it to the SecurityGroups field.
func (o *Subnet) SetSecurityGroups(v []map[string]interface{}) {
	o.SecurityGroups = &v
}

// GetTenants returns the Tenants field value if set, zero value otherwise.
func (o *Subnet) GetTenants() []InlineResponse20040AppDeployInstance {
	if o == nil || o.Tenants == nil {
		var ret []InlineResponse20040AppDeployInstance
		return ret
	}
	return *o.Tenants
}

// GetTenantsOk returns a tuple with the Tenants field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subnet) GetTenantsOk() (*[]InlineResponse20040AppDeployInstance, bool) {
	if o == nil || o.Tenants == nil {
		return nil, false
	}
	return o.Tenants, true
}

// HasTenants returns a boolean if a field has been set.
func (o *Subnet) HasTenants() bool {
	if o != nil && o.Tenants != nil {
		return true
	}

	return false
}

// SetTenants gets a reference to the given []InlineResponse20040AppDeployInstance and assigns it to the Tenants field.
func (o *Subnet) SetTenants(v []InlineResponse20040AppDeployInstance) {
	o.Tenants = &v
}

// GetResourcePermission returns the ResourcePermission field value if set, zero value otherwise.
func (o *Subnet) GetResourcePermission() SubnetResourcePermission {
	if o == nil || o.ResourcePermission == nil {
		var ret SubnetResourcePermission
		return ret
	}
	return *o.ResourcePermission
}

// GetResourcePermissionOk returns a tuple with the ResourcePermission field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subnet) GetResourcePermissionOk() (*SubnetResourcePermission, bool) {
	if o == nil || o.ResourcePermission == nil {
		return nil, false
	}
	return o.ResourcePermission, true
}

// HasResourcePermission returns a boolean if a field has been set.
func (o *Subnet) HasResourcePermission() bool {
	if o != nil && o.ResourcePermission != nil {
		return true
	}

	return false
}

// SetResourcePermission gets a reference to the given SubnetResourcePermission and assigns it to the ResourcePermission field.
func (o *Subnet) SetResourcePermission(v SubnetResourcePermission) {
	o.ResourcePermission = &v
}

func (o Subnet) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Code.IsSet() {
		toSerialize["code"] = o.Code.Get()
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Labels != nil {
		toSerialize["labels"] = o.Labels
	}
	if o.Active != nil {
		toSerialize["active"] = o.Active
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.ExternalId != nil {
		toSerialize["externalId"] = o.ExternalId
	}
	if o.UniqueId.IsSet() {
		toSerialize["uniqueId"] = o.UniqueId.Get()
	}
	if o.AddressPrefix.IsSet() {
		toSerialize["addressPrefix"] = o.AddressPrefix.Get()
	}
	if o.Cidr != nil {
		toSerialize["cidr"] = o.Cidr
	}
	if o.Gateway.IsSet() {
		toSerialize["gateway"] = o.Gateway.Get()
	}
	if o.Netmask != nil {
		toSerialize["netmask"] = o.Netmask
	}
	if o.SubnetAddress != nil {
		toSerialize["subnetAddress"] = o.SubnetAddress
	}
	if o.TftpServer.IsSet() {
		toSerialize["tftpServer"] = o.TftpServer.Get()
	}
	if o.BootFile.IsSet() {
		toSerialize["bootFile"] = o.BootFile.Get()
	}
	if o.Pool.IsSet() {
		toSerialize["pool"] = o.Pool.Get()
	}
	if o.DhcpServer != nil {
		toSerialize["dhcpServer"] = o.DhcpServer
	}
	if o.HasFloatingIps != nil {
		toSerialize["hasFloatingIps"] = o.HasFloatingIps
	}
	if o.DhcpIp.IsSet() {
		toSerialize["dhcpIp"] = o.DhcpIp.Get()
	}
	if o.DnsPrimary.IsSet() {
		toSerialize["dnsPrimary"] = o.DnsPrimary.Get()
	}
	if o.DnsSecondary.IsSet() {
		toSerialize["dnsSecondary"] = o.DnsSecondary.Get()
	}
	if o.DhcpStart != nil {
		toSerialize["dhcpStart"] = o.DhcpStart
	}
	if o.DhcpEnd != nil {
		toSerialize["dhcpEnd"] = o.DhcpEnd
	}
	if o.DhcpRange.IsSet() {
		toSerialize["dhcpRange"] = o.DhcpRange.Get()
	}
	if o.NetworkProxy.IsSet() {
		toSerialize["networkProxy"] = o.NetworkProxy.Get()
	}
	if o.NetworkDomain.IsSet() {
		toSerialize["networkDomain"] = o.NetworkDomain.Get()
	}
	if o.SearchDomains.IsSet() {
		toSerialize["searchDomains"] = o.SearchDomains.Get()
	}
	if o.DefaultNetwork != nil {
		toSerialize["defaultNetwork"] = o.DefaultNetwork
	}
	if o.AssignPublicIp != nil {
		toSerialize["assignPublicIp"] = o.AssignPublicIp
	}
	if o.Visibility != nil {
		toSerialize["visibility"] = o.Visibility
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.Network != nil {
		toSerialize["network"] = o.Network
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Account != nil {
		toSerialize["account"] = o.Account
	}
	if o.SecurityGroups != nil {
		toSerialize["securityGroups"] = o.SecurityGroups
	}
	if o.Tenants != nil {
		toSerialize["tenants"] = o.Tenants
	}
	if o.ResourcePermission != nil {
		toSerialize["resourcePermission"] = o.ResourcePermission
	}
	return json.Marshal(toSerialize)
}

type NullableSubnet struct {
	value *Subnet
	isSet bool
}

func (v NullableSubnet) Get() *Subnet {
	return v.value
}

func (v *NullableSubnet) Set(val *Subnet) {
	v.value = val
	v.isSet = true
}

func (v NullableSubnet) IsSet() bool {
	return v.isSet
}

func (v *NullableSubnet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubnet(val *Subnet) *NullableSubnet {
	return &NullableSubnet{value: val, isSet: true}
}

func (v NullableSubnet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubnet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


