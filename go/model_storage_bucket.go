/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// StorageBucket struct for StorageBucket
type StorageBucket struct {
	Id *int64 `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Active *bool `json:"active,omitempty"`
	AccountId *int64 `json:"accountId,omitempty"`
	ProviderType *string `json:"providerType,omitempty"`
	Config *StorageBucketConfig `json:"config,omitempty"`
	BucketName *string `json:"bucketName,omitempty"`
	ReadOnly *bool `json:"readOnly,omitempty"`
	DefaultBackupTarget *bool `json:"defaultBackupTarget,omitempty"`
	DefaultDeploymentTarget *bool `json:"defaultDeploymentTarget,omitempty"`
	DefaultVirtualImageTarget *bool `json:"defaultVirtualImageTarget,omitempty"`
	CopyToStore *bool `json:"copyToStore,omitempty"`
	RetentionPolicyType NullableString `json:"retentionPolicyType,omitempty"`
	RetentionPolicyDays NullableString `json:"retentionPolicyDays,omitempty"`
	RetentionProvider NullableString `json:"retentionProvider,omitempty"`
}

// NewStorageBucket instantiates a new StorageBucket object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStorageBucket() *StorageBucket {
	this := StorageBucket{}
	return &this
}

// NewStorageBucketWithDefaults instantiates a new StorageBucket object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStorageBucketWithDefaults() *StorageBucket {
	this := StorageBucket{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *StorageBucket) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageBucket) GetIdOk() (*int64, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *StorageBucket) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *StorageBucket) SetId(v int64) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *StorageBucket) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageBucket) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *StorageBucket) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *StorageBucket) SetName(v string) {
	o.Name = &v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *StorageBucket) GetActive() bool {
	if o == nil || o.Active == nil {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageBucket) GetActiveOk() (*bool, bool) {
	if o == nil || o.Active == nil {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *StorageBucket) HasActive() bool {
	if o != nil && o.Active != nil {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *StorageBucket) SetActive(v bool) {
	o.Active = &v
}

// GetAccountId returns the AccountId field value if set, zero value otherwise.
func (o *StorageBucket) GetAccountId() int64 {
	if o == nil || o.AccountId == nil {
		var ret int64
		return ret
	}
	return *o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageBucket) GetAccountIdOk() (*int64, bool) {
	if o == nil || o.AccountId == nil {
		return nil, false
	}
	return o.AccountId, true
}

// HasAccountId returns a boolean if a field has been set.
func (o *StorageBucket) HasAccountId() bool {
	if o != nil && o.AccountId != nil {
		return true
	}

	return false
}

// SetAccountId gets a reference to the given int64 and assigns it to the AccountId field.
func (o *StorageBucket) SetAccountId(v int64) {
	o.AccountId = &v
}

// GetProviderType returns the ProviderType field value if set, zero value otherwise.
func (o *StorageBucket) GetProviderType() string {
	if o == nil || o.ProviderType == nil {
		var ret string
		return ret
	}
	return *o.ProviderType
}

// GetProviderTypeOk returns a tuple with the ProviderType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageBucket) GetProviderTypeOk() (*string, bool) {
	if o == nil || o.ProviderType == nil {
		return nil, false
	}
	return o.ProviderType, true
}

// HasProviderType returns a boolean if a field has been set.
func (o *StorageBucket) HasProviderType() bool {
	if o != nil && o.ProviderType != nil {
		return true
	}

	return false
}

// SetProviderType gets a reference to the given string and assigns it to the ProviderType field.
func (o *StorageBucket) SetProviderType(v string) {
	o.ProviderType = &v
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *StorageBucket) GetConfig() StorageBucketConfig {
	if o == nil || o.Config == nil {
		var ret StorageBucketConfig
		return ret
	}
	return *o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageBucket) GetConfigOk() (*StorageBucketConfig, bool) {
	if o == nil || o.Config == nil {
		return nil, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *StorageBucket) HasConfig() bool {
	if o != nil && o.Config != nil {
		return true
	}

	return false
}

// SetConfig gets a reference to the given StorageBucketConfig and assigns it to the Config field.
func (o *StorageBucket) SetConfig(v StorageBucketConfig) {
	o.Config = &v
}

// GetBucketName returns the BucketName field value if set, zero value otherwise.
func (o *StorageBucket) GetBucketName() string {
	if o == nil || o.BucketName == nil {
		var ret string
		return ret
	}
	return *o.BucketName
}

// GetBucketNameOk returns a tuple with the BucketName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageBucket) GetBucketNameOk() (*string, bool) {
	if o == nil || o.BucketName == nil {
		return nil, false
	}
	return o.BucketName, true
}

// HasBucketName returns a boolean if a field has been set.
func (o *StorageBucket) HasBucketName() bool {
	if o != nil && o.BucketName != nil {
		return true
	}

	return false
}

// SetBucketName gets a reference to the given string and assigns it to the BucketName field.
func (o *StorageBucket) SetBucketName(v string) {
	o.BucketName = &v
}

// GetReadOnly returns the ReadOnly field value if set, zero value otherwise.
func (o *StorageBucket) GetReadOnly() bool {
	if o == nil || o.ReadOnly == nil {
		var ret bool
		return ret
	}
	return *o.ReadOnly
}

// GetReadOnlyOk returns a tuple with the ReadOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageBucket) GetReadOnlyOk() (*bool, bool) {
	if o == nil || o.ReadOnly == nil {
		return nil, false
	}
	return o.ReadOnly, true
}

// HasReadOnly returns a boolean if a field has been set.
func (o *StorageBucket) HasReadOnly() bool {
	if o != nil && o.ReadOnly != nil {
		return true
	}

	return false
}

// SetReadOnly gets a reference to the given bool and assigns it to the ReadOnly field.
func (o *StorageBucket) SetReadOnly(v bool) {
	o.ReadOnly = &v
}

// GetDefaultBackupTarget returns the DefaultBackupTarget field value if set, zero value otherwise.
func (o *StorageBucket) GetDefaultBackupTarget() bool {
	if o == nil || o.DefaultBackupTarget == nil {
		var ret bool
		return ret
	}
	return *o.DefaultBackupTarget
}

// GetDefaultBackupTargetOk returns a tuple with the DefaultBackupTarget field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageBucket) GetDefaultBackupTargetOk() (*bool, bool) {
	if o == nil || o.DefaultBackupTarget == nil {
		return nil, false
	}
	return o.DefaultBackupTarget, true
}

// HasDefaultBackupTarget returns a boolean if a field has been set.
func (o *StorageBucket) HasDefaultBackupTarget() bool {
	if o != nil && o.DefaultBackupTarget != nil {
		return true
	}

	return false
}

// SetDefaultBackupTarget gets a reference to the given bool and assigns it to the DefaultBackupTarget field.
func (o *StorageBucket) SetDefaultBackupTarget(v bool) {
	o.DefaultBackupTarget = &v
}

// GetDefaultDeploymentTarget returns the DefaultDeploymentTarget field value if set, zero value otherwise.
func (o *StorageBucket) GetDefaultDeploymentTarget() bool {
	if o == nil || o.DefaultDeploymentTarget == nil {
		var ret bool
		return ret
	}
	return *o.DefaultDeploymentTarget
}

// GetDefaultDeploymentTargetOk returns a tuple with the DefaultDeploymentTarget field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageBucket) GetDefaultDeploymentTargetOk() (*bool, bool) {
	if o == nil || o.DefaultDeploymentTarget == nil {
		return nil, false
	}
	return o.DefaultDeploymentTarget, true
}

// HasDefaultDeploymentTarget returns a boolean if a field has been set.
func (o *StorageBucket) HasDefaultDeploymentTarget() bool {
	if o != nil && o.DefaultDeploymentTarget != nil {
		return true
	}

	return false
}

// SetDefaultDeploymentTarget gets a reference to the given bool and assigns it to the DefaultDeploymentTarget field.
func (o *StorageBucket) SetDefaultDeploymentTarget(v bool) {
	o.DefaultDeploymentTarget = &v
}

// GetDefaultVirtualImageTarget returns the DefaultVirtualImageTarget field value if set, zero value otherwise.
func (o *StorageBucket) GetDefaultVirtualImageTarget() bool {
	if o == nil || o.DefaultVirtualImageTarget == nil {
		var ret bool
		return ret
	}
	return *o.DefaultVirtualImageTarget
}

// GetDefaultVirtualImageTargetOk returns a tuple with the DefaultVirtualImageTarget field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageBucket) GetDefaultVirtualImageTargetOk() (*bool, bool) {
	if o == nil || o.DefaultVirtualImageTarget == nil {
		return nil, false
	}
	return o.DefaultVirtualImageTarget, true
}

// HasDefaultVirtualImageTarget returns a boolean if a field has been set.
func (o *StorageBucket) HasDefaultVirtualImageTarget() bool {
	if o != nil && o.DefaultVirtualImageTarget != nil {
		return true
	}

	return false
}

// SetDefaultVirtualImageTarget gets a reference to the given bool and assigns it to the DefaultVirtualImageTarget field.
func (o *StorageBucket) SetDefaultVirtualImageTarget(v bool) {
	o.DefaultVirtualImageTarget = &v
}

// GetCopyToStore returns the CopyToStore field value if set, zero value otherwise.
func (o *StorageBucket) GetCopyToStore() bool {
	if o == nil || o.CopyToStore == nil {
		var ret bool
		return ret
	}
	return *o.CopyToStore
}

// GetCopyToStoreOk returns a tuple with the CopyToStore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageBucket) GetCopyToStoreOk() (*bool, bool) {
	if o == nil || o.CopyToStore == nil {
		return nil, false
	}
	return o.CopyToStore, true
}

// HasCopyToStore returns a boolean if a field has been set.
func (o *StorageBucket) HasCopyToStore() bool {
	if o != nil && o.CopyToStore != nil {
		return true
	}

	return false
}

// SetCopyToStore gets a reference to the given bool and assigns it to the CopyToStore field.
func (o *StorageBucket) SetCopyToStore(v bool) {
	o.CopyToStore = &v
}

// GetRetentionPolicyType returns the RetentionPolicyType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageBucket) GetRetentionPolicyType() string {
	if o == nil || o.RetentionPolicyType.Get() == nil {
		var ret string
		return ret
	}
	return *o.RetentionPolicyType.Get()
}

// GetRetentionPolicyTypeOk returns a tuple with the RetentionPolicyType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageBucket) GetRetentionPolicyTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RetentionPolicyType.Get(), o.RetentionPolicyType.IsSet()
}

// HasRetentionPolicyType returns a boolean if a field has been set.
func (o *StorageBucket) HasRetentionPolicyType() bool {
	if o != nil && o.RetentionPolicyType.IsSet() {
		return true
	}

	return false
}

// SetRetentionPolicyType gets a reference to the given NullableString and assigns it to the RetentionPolicyType field.
func (o *StorageBucket) SetRetentionPolicyType(v string) {
	o.RetentionPolicyType.Set(&v)
}
// SetRetentionPolicyTypeNil sets the value for RetentionPolicyType to be an explicit nil
func (o *StorageBucket) SetRetentionPolicyTypeNil() {
	o.RetentionPolicyType.Set(nil)
}

// UnsetRetentionPolicyType ensures that no value is present for RetentionPolicyType, not even an explicit nil
func (o *StorageBucket) UnsetRetentionPolicyType() {
	o.RetentionPolicyType.Unset()
}

// GetRetentionPolicyDays returns the RetentionPolicyDays field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageBucket) GetRetentionPolicyDays() string {
	if o == nil || o.RetentionPolicyDays.Get() == nil {
		var ret string
		return ret
	}
	return *o.RetentionPolicyDays.Get()
}

// GetRetentionPolicyDaysOk returns a tuple with the RetentionPolicyDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageBucket) GetRetentionPolicyDaysOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RetentionPolicyDays.Get(), o.RetentionPolicyDays.IsSet()
}

// HasRetentionPolicyDays returns a boolean if a field has been set.
func (o *StorageBucket) HasRetentionPolicyDays() bool {
	if o != nil && o.RetentionPolicyDays.IsSet() {
		return true
	}

	return false
}

// SetRetentionPolicyDays gets a reference to the given NullableString and assigns it to the RetentionPolicyDays field.
func (o *StorageBucket) SetRetentionPolicyDays(v string) {
	o.RetentionPolicyDays.Set(&v)
}
// SetRetentionPolicyDaysNil sets the value for RetentionPolicyDays to be an explicit nil
func (o *StorageBucket) SetRetentionPolicyDaysNil() {
	o.RetentionPolicyDays.Set(nil)
}

// UnsetRetentionPolicyDays ensures that no value is present for RetentionPolicyDays, not even an explicit nil
func (o *StorageBucket) UnsetRetentionPolicyDays() {
	o.RetentionPolicyDays.Unset()
}

// GetRetentionProvider returns the RetentionProvider field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageBucket) GetRetentionProvider() string {
	if o == nil || o.RetentionProvider.Get() == nil {
		var ret string
		return ret
	}
	return *o.RetentionProvider.Get()
}

// GetRetentionProviderOk returns a tuple with the RetentionProvider field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageBucket) GetRetentionProviderOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RetentionProvider.Get(), o.RetentionProvider.IsSet()
}

// HasRetentionProvider returns a boolean if a field has been set.
func (o *StorageBucket) HasRetentionProvider() bool {
	if o != nil && o.RetentionProvider.IsSet() {
		return true
	}

	return false
}

// SetRetentionProvider gets a reference to the given NullableString and assigns it to the RetentionProvider field.
func (o *StorageBucket) SetRetentionProvider(v string) {
	o.RetentionProvider.Set(&v)
}
// SetRetentionProviderNil sets the value for RetentionProvider to be an explicit nil
func (o *StorageBucket) SetRetentionProviderNil() {
	o.RetentionProvider.Set(nil)
}

// UnsetRetentionProvider ensures that no value is present for RetentionProvider, not even an explicit nil
func (o *StorageBucket) UnsetRetentionProvider() {
	o.RetentionProvider.Unset()
}

func (o StorageBucket) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Active != nil {
		toSerialize["active"] = o.Active
	}
	if o.AccountId != nil {
		toSerialize["accountId"] = o.AccountId
	}
	if o.ProviderType != nil {
		toSerialize["providerType"] = o.ProviderType
	}
	if o.Config != nil {
		toSerialize["config"] = o.Config
	}
	if o.BucketName != nil {
		toSerialize["bucketName"] = o.BucketName
	}
	if o.ReadOnly != nil {
		toSerialize["readOnly"] = o.ReadOnly
	}
	if o.DefaultBackupTarget != nil {
		toSerialize["defaultBackupTarget"] = o.DefaultBackupTarget
	}
	if o.DefaultDeploymentTarget != nil {
		toSerialize["defaultDeploymentTarget"] = o.DefaultDeploymentTarget
	}
	if o.DefaultVirtualImageTarget != nil {
		toSerialize["defaultVirtualImageTarget"] = o.DefaultVirtualImageTarget
	}
	if o.CopyToStore != nil {
		toSerialize["copyToStore"] = o.CopyToStore
	}
	if o.RetentionPolicyType.IsSet() {
		toSerialize["retentionPolicyType"] = o.RetentionPolicyType.Get()
	}
	if o.RetentionPolicyDays.IsSet() {
		toSerialize["retentionPolicyDays"] = o.RetentionPolicyDays.Get()
	}
	if o.RetentionProvider.IsSet() {
		toSerialize["retentionProvider"] = o.RetentionProvider.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableStorageBucket struct {
	value *StorageBucket
	isSet bool
}

func (v NullableStorageBucket) Get() *StorageBucket {
	return v.value
}

func (v *NullableStorageBucket) Set(val *StorageBucket) {
	v.value = val
	v.isSet = true
}

func (v NullableStorageBucket) IsSet() bool {
	return v.isSet
}

func (v *NullableStorageBucket) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStorageBucket(val *StorageBucket) *NullableStorageBucket {
	return &NullableStorageBucket{value: val, isSet: true}
}

func (v NullableStorageBucket) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStorageBucket) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


