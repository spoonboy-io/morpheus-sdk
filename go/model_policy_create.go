/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// PolicyCreate struct for PolicyCreate
type PolicyCreate struct {
	// A name for the policy
	Name string `json:"name"`
	// A description for the policy
	Description *string `json:"description,omitempty"`
	PolicyType PolicyCreatePolicyType `json:"policyType"`
	// A map of config values. The expected values vary by policy type. See `Retrieves all Policy Types` endpoint for `fieldName`(s) of required options.
	Config AnyOfobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobject `json:"config"`
	// Set to false to disable
	Enabled *bool `json:"enabled,omitempty"`
	// Scope object type.  If none specified, will default to Global (null)
	RefType NullableString `json:"refType,omitempty"`
	// Scope object ID (`group`,`cloud`,`user`, etc)
	RefId *int64 `json:"refId,omitempty"`
	// Array of tenants to scope the policy to
	Accounts *[]int64 `json:"accounts,omitempty"`
	// Apply individually to each user in role.  Only when `refType` equals `Role`
	EachUser *bool `json:"eachUser,omitempty"`
}

// NewPolicyCreate instantiates a new PolicyCreate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPolicyCreate(name string, policyType PolicyCreatePolicyType, config AnyOfobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobject, ) *PolicyCreate {
	this := PolicyCreate{}
	this.Name = name
	this.PolicyType = policyType
	this.Config = config
	var enabled bool = true
	this.Enabled = &enabled
	var refType REF_TYPE = "null"
	this.RefType = *NewNullableString(&refType)
	return &this
}

// NewPolicyCreateWithDefaults instantiates a new PolicyCreate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPolicyCreateWithDefaults() *PolicyCreate {
	this := PolicyCreate{}
	var enabled bool = true
	this.Enabled = &enabled
	var refType REF_TYPE = "null"
	this.RefType = *NewNullableString(&refType)
	return &this
}

// GetName returns the Name field value
func (o *PolicyCreate) GetName() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *PolicyCreate) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *PolicyCreate) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *PolicyCreate) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyCreate) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *PolicyCreate) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *PolicyCreate) SetDescription(v string) {
	o.Description = &v
}

// GetPolicyType returns the PolicyType field value
func (o *PolicyCreate) GetPolicyType() PolicyCreatePolicyType {
	if o == nil  {
		var ret PolicyCreatePolicyType
		return ret
	}

	return o.PolicyType
}

// GetPolicyTypeOk returns a tuple with the PolicyType field value
// and a boolean to check if the value has been set.
func (o *PolicyCreate) GetPolicyTypeOk() (*PolicyCreatePolicyType, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.PolicyType, true
}

// SetPolicyType sets field value
func (o *PolicyCreate) SetPolicyType(v PolicyCreatePolicyType) {
	o.PolicyType = v
}

// GetConfig returns the Config field value
func (o *PolicyCreate) GetConfig() AnyOfobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobject {
	if o == nil  {
		var ret AnyOfobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobject
		return ret
	}

	return o.Config
}

// GetConfigOk returns a tuple with the Config field value
// and a boolean to check if the value has been set.
func (o *PolicyCreate) GetConfigOk() (*AnyOfobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobject, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Config, true
}

// SetConfig sets field value
func (o *PolicyCreate) SetConfig(v AnyOfobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobject) {
	o.Config = v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *PolicyCreate) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyCreate) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *PolicyCreate) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *PolicyCreate) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetRefType returns the RefType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PolicyCreate) GetRefType() string {
	if o == nil || o.RefType.Get() == nil {
		var ret string
		return ret
	}
	return *o.RefType.Get()
}

// GetRefTypeOk returns a tuple with the RefType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PolicyCreate) GetRefTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RefType.Get(), o.RefType.IsSet()
}

// HasRefType returns a boolean if a field has been set.
func (o *PolicyCreate) HasRefType() bool {
	if o != nil && o.RefType.IsSet() {
		return true
	}

	return false
}

// SetRefType gets a reference to the given NullableString and assigns it to the RefType field.
func (o *PolicyCreate) SetRefType(v string) {
	o.RefType.Set(&v)
}
// SetRefTypeNil sets the value for RefType to be an explicit nil
func (o *PolicyCreate) SetRefTypeNil() {
	o.RefType.Set(nil)
}

// UnsetRefType ensures that no value is present for RefType, not even an explicit nil
func (o *PolicyCreate) UnsetRefType() {
	o.RefType.Unset()
}

// GetRefId returns the RefId field value if set, zero value otherwise.
func (o *PolicyCreate) GetRefId() int64 {
	if o == nil || o.RefId == nil {
		var ret int64
		return ret
	}
	return *o.RefId
}

// GetRefIdOk returns a tuple with the RefId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyCreate) GetRefIdOk() (*int64, bool) {
	if o == nil || o.RefId == nil {
		return nil, false
	}
	return o.RefId, true
}

// HasRefId returns a boolean if a field has been set.
func (o *PolicyCreate) HasRefId() bool {
	if o != nil && o.RefId != nil {
		return true
	}

	return false
}

// SetRefId gets a reference to the given int64 and assigns it to the RefId field.
func (o *PolicyCreate) SetRefId(v int64) {
	o.RefId = &v
}

// GetAccounts returns the Accounts field value if set, zero value otherwise.
func (o *PolicyCreate) GetAccounts() []int64 {
	if o == nil || o.Accounts == nil {
		var ret []int64
		return ret
	}
	return *o.Accounts
}

// GetAccountsOk returns a tuple with the Accounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyCreate) GetAccountsOk() (*[]int64, bool) {
	if o == nil || o.Accounts == nil {
		return nil, false
	}
	return o.Accounts, true
}

// HasAccounts returns a boolean if a field has been set.
func (o *PolicyCreate) HasAccounts() bool {
	if o != nil && o.Accounts != nil {
		return true
	}

	return false
}

// SetAccounts gets a reference to the given []int64 and assigns it to the Accounts field.
func (o *PolicyCreate) SetAccounts(v []int64) {
	o.Accounts = &v
}

// GetEachUser returns the EachUser field value if set, zero value otherwise.
func (o *PolicyCreate) GetEachUser() bool {
	if o == nil || o.EachUser == nil {
		var ret bool
		return ret
	}
	return *o.EachUser
}

// GetEachUserOk returns a tuple with the EachUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyCreate) GetEachUserOk() (*bool, bool) {
	if o == nil || o.EachUser == nil {
		return nil, false
	}
	return o.EachUser, true
}

// HasEachUser returns a boolean if a field has been set.
func (o *PolicyCreate) HasEachUser() bool {
	if o != nil && o.EachUser != nil {
		return true
	}

	return false
}

// SetEachUser gets a reference to the given bool and assigns it to the EachUser field.
func (o *PolicyCreate) SetEachUser(v bool) {
	o.EachUser = &v
}

func (o PolicyCreate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if true {
		toSerialize["policyType"] = o.PolicyType
	}
	if true {
		toSerialize["config"] = o.Config
	}
	if o.Enabled != nil {
		toSerialize["enabled"] = o.Enabled
	}
	if o.RefType.IsSet() {
		toSerialize["refType"] = o.RefType.Get()
	}
	if o.RefId != nil {
		toSerialize["refId"] = o.RefId
	}
	if o.Accounts != nil {
		toSerialize["accounts"] = o.Accounts
	}
	if o.EachUser != nil {
		toSerialize["eachUser"] = o.EachUser
	}
	return json.Marshal(toSerialize)
}

type NullablePolicyCreate struct {
	value *PolicyCreate
	isSet bool
}

func (v NullablePolicyCreate) Get() *PolicyCreate {
	return v.value
}

func (v *NullablePolicyCreate) Set(val *PolicyCreate) {
	v.value = val
	v.isSet = true
}

func (v NullablePolicyCreate) IsSet() bool {
	return v.isSet
}

func (v *NullablePolicyCreate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePolicyCreate(val *PolicyCreate) *NullablePolicyCreate {
	return &NullablePolicyCreate{value: val, isSet: true}
}

func (v NullablePolicyCreate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePolicyCreate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


