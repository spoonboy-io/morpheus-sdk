/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 6.1.1
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ListBackupSettings200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListBackupSettings200Response{}

// ListBackupSettings200Response struct for ListBackupSettings200Response
type ListBackupSettings200Response struct {
	BackupSettings *BackupSettings `json:"backupSettings,omitempty"`
}

// NewListBackupSettings200Response instantiates a new ListBackupSettings200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListBackupSettings200Response() *ListBackupSettings200Response {
	this := ListBackupSettings200Response{}
	return &this
}

// NewListBackupSettings200ResponseWithDefaults instantiates a new ListBackupSettings200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListBackupSettings200ResponseWithDefaults() *ListBackupSettings200Response {
	this := ListBackupSettings200Response{}
	return &this
}

// GetBackupSettings returns the BackupSettings field value if set, zero value otherwise.
func (o *ListBackupSettings200Response) GetBackupSettings() BackupSettings {
	if o == nil || IsNil(o.BackupSettings) {
		var ret BackupSettings
		return ret
	}
	return *o.BackupSettings
}

// GetBackupSettingsOk returns a tuple with the BackupSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListBackupSettings200Response) GetBackupSettingsOk() (*BackupSettings, bool) {
	if o == nil || IsNil(o.BackupSettings) {
		return nil, false
	}
	return o.BackupSettings, true
}

// HasBackupSettings returns a boolean if a field has been set.
func (o *ListBackupSettings200Response) HasBackupSettings() bool {
	if o != nil && !IsNil(o.BackupSettings) {
		return true
	}

	return false
}

// SetBackupSettings gets a reference to the given BackupSettings and assigns it to the BackupSettings field.
func (o *ListBackupSettings200Response) SetBackupSettings(v BackupSettings) {
	o.BackupSettings = &v
}

func (o ListBackupSettings200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListBackupSettings200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BackupSettings) {
		toSerialize["backupSettings"] = o.BackupSettings
	}
	return toSerialize, nil
}

type NullableListBackupSettings200Response struct {
	value *ListBackupSettings200Response
	isSet bool
}

func (v NullableListBackupSettings200Response) Get() *ListBackupSettings200Response {
	return v.value
}

func (v *NullableListBackupSettings200Response) Set(val *ListBackupSettings200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableListBackupSettings200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableListBackupSettings200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListBackupSettings200Response(val *ListBackupSettings200Response) *NullableListBackupSettings200Response {
	return &NullableListBackupSettings200Response{value: val, isSet: true}
}

func (v NullableListBackupSettings200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListBackupSettings200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


