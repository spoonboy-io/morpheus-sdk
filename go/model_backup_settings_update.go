/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 6.1.1
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the BackupSettingsUpdate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BackupSettingsUpdate{}

// BackupSettingsUpdate struct for BackupSettingsUpdate
type BackupSettingsUpdate struct {
	// Use this to enable / disable scheduled backups
	BackupsEnabled *bool `json:"backupsEnabled,omitempty"`
	// Maximum number of successful backups to retain
	RetentionCount *int64 `json:"retentionCount,omitempty"`
	// Use this to enable / disable create backups
	CreateBackups *bool `json:"createBackups,omitempty"`
	// When enabled, a Backup will be created to backup the Morpheus appliance database
	BackupAppliance *bool `json:"backupAppliance,omitempty"`
	// Use this to update existing backups with new settings
	UpdateExisting *bool `json:"updateExisting,omitempty"`
	DefaultSchedule *BackupSettingsUpdateDefaultSchedule `json:"defaultSchedule,omitempty"`
	// Use this to clear existing default backup schedule
	ClearDefaultSchedule *bool `json:"clearDefaultSchedule,omitempty"`
	DefaultStorageBucket *BackupSettingsUpdateDefaultStorageBucket `json:"defaultStorageBucket,omitempty"`
	// Use this to clear default store bucket
	ClearDefaultStorageBucket *bool `json:"clearDefaultStorageBucket,omitempty"`
}

// NewBackupSettingsUpdate instantiates a new BackupSettingsUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBackupSettingsUpdate() *BackupSettingsUpdate {
	this := BackupSettingsUpdate{}
	return &this
}

// NewBackupSettingsUpdateWithDefaults instantiates a new BackupSettingsUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBackupSettingsUpdateWithDefaults() *BackupSettingsUpdate {
	this := BackupSettingsUpdate{}
	return &this
}

// GetBackupsEnabled returns the BackupsEnabled field value if set, zero value otherwise.
func (o *BackupSettingsUpdate) GetBackupsEnabled() bool {
	if o == nil || IsNil(o.BackupsEnabled) {
		var ret bool
		return ret
	}
	return *o.BackupsEnabled
}

// GetBackupsEnabledOk returns a tuple with the BackupsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupSettingsUpdate) GetBackupsEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.BackupsEnabled) {
		return nil, false
	}
	return o.BackupsEnabled, true
}

// HasBackupsEnabled returns a boolean if a field has been set.
func (o *BackupSettingsUpdate) HasBackupsEnabled() bool {
	if o != nil && !IsNil(o.BackupsEnabled) {
		return true
	}

	return false
}

// SetBackupsEnabled gets a reference to the given bool and assigns it to the BackupsEnabled field.
func (o *BackupSettingsUpdate) SetBackupsEnabled(v bool) {
	o.BackupsEnabled = &v
}

// GetRetentionCount returns the RetentionCount field value if set, zero value otherwise.
func (o *BackupSettingsUpdate) GetRetentionCount() int64 {
	if o == nil || IsNil(o.RetentionCount) {
		var ret int64
		return ret
	}
	return *o.RetentionCount
}

// GetRetentionCountOk returns a tuple with the RetentionCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupSettingsUpdate) GetRetentionCountOk() (*int64, bool) {
	if o == nil || IsNil(o.RetentionCount) {
		return nil, false
	}
	return o.RetentionCount, true
}

// HasRetentionCount returns a boolean if a field has been set.
func (o *BackupSettingsUpdate) HasRetentionCount() bool {
	if o != nil && !IsNil(o.RetentionCount) {
		return true
	}

	return false
}

// SetRetentionCount gets a reference to the given int64 and assigns it to the RetentionCount field.
func (o *BackupSettingsUpdate) SetRetentionCount(v int64) {
	o.RetentionCount = &v
}

// GetCreateBackups returns the CreateBackups field value if set, zero value otherwise.
func (o *BackupSettingsUpdate) GetCreateBackups() bool {
	if o == nil || IsNil(o.CreateBackups) {
		var ret bool
		return ret
	}
	return *o.CreateBackups
}

// GetCreateBackupsOk returns a tuple with the CreateBackups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupSettingsUpdate) GetCreateBackupsOk() (*bool, bool) {
	if o == nil || IsNil(o.CreateBackups) {
		return nil, false
	}
	return o.CreateBackups, true
}

// HasCreateBackups returns a boolean if a field has been set.
func (o *BackupSettingsUpdate) HasCreateBackups() bool {
	if o != nil && !IsNil(o.CreateBackups) {
		return true
	}

	return false
}

// SetCreateBackups gets a reference to the given bool and assigns it to the CreateBackups field.
func (o *BackupSettingsUpdate) SetCreateBackups(v bool) {
	o.CreateBackups = &v
}

// GetBackupAppliance returns the BackupAppliance field value if set, zero value otherwise.
func (o *BackupSettingsUpdate) GetBackupAppliance() bool {
	if o == nil || IsNil(o.BackupAppliance) {
		var ret bool
		return ret
	}
	return *o.BackupAppliance
}

// GetBackupApplianceOk returns a tuple with the BackupAppliance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupSettingsUpdate) GetBackupApplianceOk() (*bool, bool) {
	if o == nil || IsNil(o.BackupAppliance) {
		return nil, false
	}
	return o.BackupAppliance, true
}

// HasBackupAppliance returns a boolean if a field has been set.
func (o *BackupSettingsUpdate) HasBackupAppliance() bool {
	if o != nil && !IsNil(o.BackupAppliance) {
		return true
	}

	return false
}

// SetBackupAppliance gets a reference to the given bool and assigns it to the BackupAppliance field.
func (o *BackupSettingsUpdate) SetBackupAppliance(v bool) {
	o.BackupAppliance = &v
}

// GetUpdateExisting returns the UpdateExisting field value if set, zero value otherwise.
func (o *BackupSettingsUpdate) GetUpdateExisting() bool {
	if o == nil || IsNil(o.UpdateExisting) {
		var ret bool
		return ret
	}
	return *o.UpdateExisting
}

// GetUpdateExistingOk returns a tuple with the UpdateExisting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupSettingsUpdate) GetUpdateExistingOk() (*bool, bool) {
	if o == nil || IsNil(o.UpdateExisting) {
		return nil, false
	}
	return o.UpdateExisting, true
}

// HasUpdateExisting returns a boolean if a field has been set.
func (o *BackupSettingsUpdate) HasUpdateExisting() bool {
	if o != nil && !IsNil(o.UpdateExisting) {
		return true
	}

	return false
}

// SetUpdateExisting gets a reference to the given bool and assigns it to the UpdateExisting field.
func (o *BackupSettingsUpdate) SetUpdateExisting(v bool) {
	o.UpdateExisting = &v
}

// GetDefaultSchedule returns the DefaultSchedule field value if set, zero value otherwise.
func (o *BackupSettingsUpdate) GetDefaultSchedule() BackupSettingsUpdateDefaultSchedule {
	if o == nil || IsNil(o.DefaultSchedule) {
		var ret BackupSettingsUpdateDefaultSchedule
		return ret
	}
	return *o.DefaultSchedule
}

// GetDefaultScheduleOk returns a tuple with the DefaultSchedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupSettingsUpdate) GetDefaultScheduleOk() (*BackupSettingsUpdateDefaultSchedule, bool) {
	if o == nil || IsNil(o.DefaultSchedule) {
		return nil, false
	}
	return o.DefaultSchedule, true
}

// HasDefaultSchedule returns a boolean if a field has been set.
func (o *BackupSettingsUpdate) HasDefaultSchedule() bool {
	if o != nil && !IsNil(o.DefaultSchedule) {
		return true
	}

	return false
}

// SetDefaultSchedule gets a reference to the given BackupSettingsUpdateDefaultSchedule and assigns it to the DefaultSchedule field.
func (o *BackupSettingsUpdate) SetDefaultSchedule(v BackupSettingsUpdateDefaultSchedule) {
	o.DefaultSchedule = &v
}

// GetClearDefaultSchedule returns the ClearDefaultSchedule field value if set, zero value otherwise.
func (o *BackupSettingsUpdate) GetClearDefaultSchedule() bool {
	if o == nil || IsNil(o.ClearDefaultSchedule) {
		var ret bool
		return ret
	}
	return *o.ClearDefaultSchedule
}

// GetClearDefaultScheduleOk returns a tuple with the ClearDefaultSchedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupSettingsUpdate) GetClearDefaultScheduleOk() (*bool, bool) {
	if o == nil || IsNil(o.ClearDefaultSchedule) {
		return nil, false
	}
	return o.ClearDefaultSchedule, true
}

// HasClearDefaultSchedule returns a boolean if a field has been set.
func (o *BackupSettingsUpdate) HasClearDefaultSchedule() bool {
	if o != nil && !IsNil(o.ClearDefaultSchedule) {
		return true
	}

	return false
}

// SetClearDefaultSchedule gets a reference to the given bool and assigns it to the ClearDefaultSchedule field.
func (o *BackupSettingsUpdate) SetClearDefaultSchedule(v bool) {
	o.ClearDefaultSchedule = &v
}

// GetDefaultStorageBucket returns the DefaultStorageBucket field value if set, zero value otherwise.
func (o *BackupSettingsUpdate) GetDefaultStorageBucket() BackupSettingsUpdateDefaultStorageBucket {
	if o == nil || IsNil(o.DefaultStorageBucket) {
		var ret BackupSettingsUpdateDefaultStorageBucket
		return ret
	}
	return *o.DefaultStorageBucket
}

// GetDefaultStorageBucketOk returns a tuple with the DefaultStorageBucket field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupSettingsUpdate) GetDefaultStorageBucketOk() (*BackupSettingsUpdateDefaultStorageBucket, bool) {
	if o == nil || IsNil(o.DefaultStorageBucket) {
		return nil, false
	}
	return o.DefaultStorageBucket, true
}

// HasDefaultStorageBucket returns a boolean if a field has been set.
func (o *BackupSettingsUpdate) HasDefaultStorageBucket() bool {
	if o != nil && !IsNil(o.DefaultStorageBucket) {
		return true
	}

	return false
}

// SetDefaultStorageBucket gets a reference to the given BackupSettingsUpdateDefaultStorageBucket and assigns it to the DefaultStorageBucket field.
func (o *BackupSettingsUpdate) SetDefaultStorageBucket(v BackupSettingsUpdateDefaultStorageBucket) {
	o.DefaultStorageBucket = &v
}

// GetClearDefaultStorageBucket returns the ClearDefaultStorageBucket field value if set, zero value otherwise.
func (o *BackupSettingsUpdate) GetClearDefaultStorageBucket() bool {
	if o == nil || IsNil(o.ClearDefaultStorageBucket) {
		var ret bool
		return ret
	}
	return *o.ClearDefaultStorageBucket
}

// GetClearDefaultStorageBucketOk returns a tuple with the ClearDefaultStorageBucket field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupSettingsUpdate) GetClearDefaultStorageBucketOk() (*bool, bool) {
	if o == nil || IsNil(o.ClearDefaultStorageBucket) {
		return nil, false
	}
	return o.ClearDefaultStorageBucket, true
}

// HasClearDefaultStorageBucket returns a boolean if a field has been set.
func (o *BackupSettingsUpdate) HasClearDefaultStorageBucket() bool {
	if o != nil && !IsNil(o.ClearDefaultStorageBucket) {
		return true
	}

	return false
}

// SetClearDefaultStorageBucket gets a reference to the given bool and assigns it to the ClearDefaultStorageBucket field.
func (o *BackupSettingsUpdate) SetClearDefaultStorageBucket(v bool) {
	o.ClearDefaultStorageBucket = &v
}

func (o BackupSettingsUpdate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BackupSettingsUpdate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BackupsEnabled) {
		toSerialize["backupsEnabled"] = o.BackupsEnabled
	}
	if !IsNil(o.RetentionCount) {
		toSerialize["retentionCount"] = o.RetentionCount
	}
	if !IsNil(o.CreateBackups) {
		toSerialize["createBackups"] = o.CreateBackups
	}
	if !IsNil(o.BackupAppliance) {
		toSerialize["backupAppliance"] = o.BackupAppliance
	}
	if !IsNil(o.UpdateExisting) {
		toSerialize["updateExisting"] = o.UpdateExisting
	}
	if !IsNil(o.DefaultSchedule) {
		toSerialize["defaultSchedule"] = o.DefaultSchedule
	}
	if !IsNil(o.ClearDefaultSchedule) {
		toSerialize["clearDefaultSchedule"] = o.ClearDefaultSchedule
	}
	if !IsNil(o.DefaultStorageBucket) {
		toSerialize["defaultStorageBucket"] = o.DefaultStorageBucket
	}
	if !IsNil(o.ClearDefaultStorageBucket) {
		toSerialize["clearDefaultStorageBucket"] = o.ClearDefaultStorageBucket
	}
	return toSerialize, nil
}

type NullableBackupSettingsUpdate struct {
	value *BackupSettingsUpdate
	isSet bool
}

func (v NullableBackupSettingsUpdate) Get() *BackupSettingsUpdate {
	return v.value
}

func (v *NullableBackupSettingsUpdate) Set(val *BackupSettingsUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableBackupSettingsUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableBackupSettingsUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBackupSettingsUpdate(val *BackupSettingsUpdate) *NullableBackupSettingsUpdate {
	return &NullableBackupSettingsUpdate{value: val, isSet: true}
}

func (v NullableBackupSettingsUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBackupSettingsUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


