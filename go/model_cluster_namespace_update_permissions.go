/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ClusterNamespaceUpdatePermissions struct for ClusterNamespaceUpdatePermissions
type ClusterNamespaceUpdatePermissions struct {
	ResourcePermissions *ClusterNamespaceCreateResourcePermissions `json:"resourcePermissions,omitempty"`
}

// NewClusterNamespaceUpdatePermissions instantiates a new ClusterNamespaceUpdatePermissions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClusterNamespaceUpdatePermissions() *ClusterNamespaceUpdatePermissions {
	this := ClusterNamespaceUpdatePermissions{}
	return &this
}

// NewClusterNamespaceUpdatePermissionsWithDefaults instantiates a new ClusterNamespaceUpdatePermissions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClusterNamespaceUpdatePermissionsWithDefaults() *ClusterNamespaceUpdatePermissions {
	this := ClusterNamespaceUpdatePermissions{}
	return &this
}

// GetResourcePermissions returns the ResourcePermissions field value if set, zero value otherwise.
func (o *ClusterNamespaceUpdatePermissions) GetResourcePermissions() ClusterNamespaceCreateResourcePermissions {
	if o == nil || o.ResourcePermissions == nil {
		var ret ClusterNamespaceCreateResourcePermissions
		return ret
	}
	return *o.ResourcePermissions
}

// GetResourcePermissionsOk returns a tuple with the ResourcePermissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterNamespaceUpdatePermissions) GetResourcePermissionsOk() (*ClusterNamespaceCreateResourcePermissions, bool) {
	if o == nil || o.ResourcePermissions == nil {
		return nil, false
	}
	return o.ResourcePermissions, true
}

// HasResourcePermissions returns a boolean if a field has been set.
func (o *ClusterNamespaceUpdatePermissions) HasResourcePermissions() bool {
	if o != nil && o.ResourcePermissions != nil {
		return true
	}

	return false
}

// SetResourcePermissions gets a reference to the given ClusterNamespaceCreateResourcePermissions and assigns it to the ResourcePermissions field.
func (o *ClusterNamespaceUpdatePermissions) SetResourcePermissions(v ClusterNamespaceCreateResourcePermissions) {
	o.ResourcePermissions = &v
}

func (o ClusterNamespaceUpdatePermissions) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ResourcePermissions != nil {
		toSerialize["resourcePermissions"] = o.ResourcePermissions
	}
	return json.Marshal(toSerialize)
}

type NullableClusterNamespaceUpdatePermissions struct {
	value *ClusterNamespaceUpdatePermissions
	isSet bool
}

func (v NullableClusterNamespaceUpdatePermissions) Get() *ClusterNamespaceUpdatePermissions {
	return v.value
}

func (v *NullableClusterNamespaceUpdatePermissions) Set(val *ClusterNamespaceUpdatePermissions) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterNamespaceUpdatePermissions) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterNamespaceUpdatePermissions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterNamespaceUpdatePermissions(val *ClusterNamespaceUpdatePermissions) *NullableClusterNamespaceUpdatePermissions {
	return &NullableClusterNamespaceUpdatePermissions{value: val, isSet: true}
}

func (v NullableClusterNamespaceUpdatePermissions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterNamespaceUpdatePermissions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


