/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InlineResponse20066 struct for InlineResponse20066
type InlineResponse20066 struct {
	KeyPair *KeyPair `json:"keyPair,omitempty"`
}

// NewInlineResponse20066 instantiates a new InlineResponse20066 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse20066() *InlineResponse20066 {
	this := InlineResponse20066{}
	return &this
}

// NewInlineResponse20066WithDefaults instantiates a new InlineResponse20066 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse20066WithDefaults() *InlineResponse20066 {
	this := InlineResponse20066{}
	return &this
}

// GetKeyPair returns the KeyPair field value if set, zero value otherwise.
func (o *InlineResponse20066) GetKeyPair() KeyPair {
	if o == nil || o.KeyPair == nil {
		var ret KeyPair
		return ret
	}
	return *o.KeyPair
}

// GetKeyPairOk returns a tuple with the KeyPair field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse20066) GetKeyPairOk() (*KeyPair, bool) {
	if o == nil || o.KeyPair == nil {
		return nil, false
	}
	return o.KeyPair, true
}

// HasKeyPair returns a boolean if a field has been set.
func (o *InlineResponse20066) HasKeyPair() bool {
	if o != nil && o.KeyPair != nil {
		return true
	}

	return false
}

// SetKeyPair gets a reference to the given KeyPair and assigns it to the KeyPair field.
func (o *InlineResponse20066) SetKeyPair(v KeyPair) {
	o.KeyPair = &v
}

func (o InlineResponse20066) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.KeyPair != nil {
		toSerialize["keyPair"] = o.KeyPair
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse20066 struct {
	value *InlineResponse20066
	isSet bool
}

func (v NullableInlineResponse20066) Get() *InlineResponse20066 {
	return v.value
}

func (v *NullableInlineResponse20066) Set(val *InlineResponse20066) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse20066) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse20066) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse20066(val *InlineResponse20066) *NullableInlineResponse20066 {
	return &NullableInlineResponse20066{value: val, isSet: true}
}

func (v NullableInlineResponse20066) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse20066) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


