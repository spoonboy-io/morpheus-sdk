/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 6.1.1
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the BackupSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BackupSettings{}

// BackupSettings struct for BackupSettings
type BackupSettings struct {
	BackupsEnabled *bool `json:"backupsEnabled,omitempty"`
	CreateBackups *bool `json:"createBackups,omitempty"`
	BackupAppliance *bool `json:"backupAppliance,omitempty"`
	DefaultStorageBucket *ApplianceSettingsEnabledZoneTypesInner `json:"defaultStorageBucket,omitempty"`
	DefaultSchedule *BackupSettingsDefaultSchedule `json:"defaultSchedule,omitempty"`
	RetentionCount *int64 `json:"retentionCount,omitempty"`
}

// NewBackupSettings instantiates a new BackupSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBackupSettings() *BackupSettings {
	this := BackupSettings{}
	return &this
}

// NewBackupSettingsWithDefaults instantiates a new BackupSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBackupSettingsWithDefaults() *BackupSettings {
	this := BackupSettings{}
	return &this
}

// GetBackupsEnabled returns the BackupsEnabled field value if set, zero value otherwise.
func (o *BackupSettings) GetBackupsEnabled() bool {
	if o == nil || IsNil(o.BackupsEnabled) {
		var ret bool
		return ret
	}
	return *o.BackupsEnabled
}

// GetBackupsEnabledOk returns a tuple with the BackupsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupSettings) GetBackupsEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.BackupsEnabled) {
		return nil, false
	}
	return o.BackupsEnabled, true
}

// HasBackupsEnabled returns a boolean if a field has been set.
func (o *BackupSettings) HasBackupsEnabled() bool {
	if o != nil && !IsNil(o.BackupsEnabled) {
		return true
	}

	return false
}

// SetBackupsEnabled gets a reference to the given bool and assigns it to the BackupsEnabled field.
func (o *BackupSettings) SetBackupsEnabled(v bool) {
	o.BackupsEnabled = &v
}

// GetCreateBackups returns the CreateBackups field value if set, zero value otherwise.
func (o *BackupSettings) GetCreateBackups() bool {
	if o == nil || IsNil(o.CreateBackups) {
		var ret bool
		return ret
	}
	return *o.CreateBackups
}

// GetCreateBackupsOk returns a tuple with the CreateBackups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupSettings) GetCreateBackupsOk() (*bool, bool) {
	if o == nil || IsNil(o.CreateBackups) {
		return nil, false
	}
	return o.CreateBackups, true
}

// HasCreateBackups returns a boolean if a field has been set.
func (o *BackupSettings) HasCreateBackups() bool {
	if o != nil && !IsNil(o.CreateBackups) {
		return true
	}

	return false
}

// SetCreateBackups gets a reference to the given bool and assigns it to the CreateBackups field.
func (o *BackupSettings) SetCreateBackups(v bool) {
	o.CreateBackups = &v
}

// GetBackupAppliance returns the BackupAppliance field value if set, zero value otherwise.
func (o *BackupSettings) GetBackupAppliance() bool {
	if o == nil || IsNil(o.BackupAppliance) {
		var ret bool
		return ret
	}
	return *o.BackupAppliance
}

// GetBackupApplianceOk returns a tuple with the BackupAppliance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupSettings) GetBackupApplianceOk() (*bool, bool) {
	if o == nil || IsNil(o.BackupAppliance) {
		return nil, false
	}
	return o.BackupAppliance, true
}

// HasBackupAppliance returns a boolean if a field has been set.
func (o *BackupSettings) HasBackupAppliance() bool {
	if o != nil && !IsNil(o.BackupAppliance) {
		return true
	}

	return false
}

// SetBackupAppliance gets a reference to the given bool and assigns it to the BackupAppliance field.
func (o *BackupSettings) SetBackupAppliance(v bool) {
	o.BackupAppliance = &v
}

// GetDefaultStorageBucket returns the DefaultStorageBucket field value if set, zero value otherwise.
func (o *BackupSettings) GetDefaultStorageBucket() ApplianceSettingsEnabledZoneTypesInner {
	if o == nil || IsNil(o.DefaultStorageBucket) {
		var ret ApplianceSettingsEnabledZoneTypesInner
		return ret
	}
	return *o.DefaultStorageBucket
}

// GetDefaultStorageBucketOk returns a tuple with the DefaultStorageBucket field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupSettings) GetDefaultStorageBucketOk() (*ApplianceSettingsEnabledZoneTypesInner, bool) {
	if o == nil || IsNil(o.DefaultStorageBucket) {
		return nil, false
	}
	return o.DefaultStorageBucket, true
}

// HasDefaultStorageBucket returns a boolean if a field has been set.
func (o *BackupSettings) HasDefaultStorageBucket() bool {
	if o != nil && !IsNil(o.DefaultStorageBucket) {
		return true
	}

	return false
}

// SetDefaultStorageBucket gets a reference to the given ApplianceSettingsEnabledZoneTypesInner and assigns it to the DefaultStorageBucket field.
func (o *BackupSettings) SetDefaultStorageBucket(v ApplianceSettingsEnabledZoneTypesInner) {
	o.DefaultStorageBucket = &v
}

// GetDefaultSchedule returns the DefaultSchedule field value if set, zero value otherwise.
func (o *BackupSettings) GetDefaultSchedule() BackupSettingsDefaultSchedule {
	if o == nil || IsNil(o.DefaultSchedule) {
		var ret BackupSettingsDefaultSchedule
		return ret
	}
	return *o.DefaultSchedule
}

// GetDefaultScheduleOk returns a tuple with the DefaultSchedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupSettings) GetDefaultScheduleOk() (*BackupSettingsDefaultSchedule, bool) {
	if o == nil || IsNil(o.DefaultSchedule) {
		return nil, false
	}
	return o.DefaultSchedule, true
}

// HasDefaultSchedule returns a boolean if a field has been set.
func (o *BackupSettings) HasDefaultSchedule() bool {
	if o != nil && !IsNil(o.DefaultSchedule) {
		return true
	}

	return false
}

// SetDefaultSchedule gets a reference to the given BackupSettingsDefaultSchedule and assigns it to the DefaultSchedule field.
func (o *BackupSettings) SetDefaultSchedule(v BackupSettingsDefaultSchedule) {
	o.DefaultSchedule = &v
}

// GetRetentionCount returns the RetentionCount field value if set, zero value otherwise.
func (o *BackupSettings) GetRetentionCount() int64 {
	if o == nil || IsNil(o.RetentionCount) {
		var ret int64
		return ret
	}
	return *o.RetentionCount
}

// GetRetentionCountOk returns a tuple with the RetentionCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupSettings) GetRetentionCountOk() (*int64, bool) {
	if o == nil || IsNil(o.RetentionCount) {
		return nil, false
	}
	return o.RetentionCount, true
}

// HasRetentionCount returns a boolean if a field has been set.
func (o *BackupSettings) HasRetentionCount() bool {
	if o != nil && !IsNil(o.RetentionCount) {
		return true
	}

	return false
}

// SetRetentionCount gets a reference to the given int64 and assigns it to the RetentionCount field.
func (o *BackupSettings) SetRetentionCount(v int64) {
	o.RetentionCount = &v
}

func (o BackupSettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BackupSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BackupsEnabled) {
		toSerialize["backupsEnabled"] = o.BackupsEnabled
	}
	if !IsNil(o.CreateBackups) {
		toSerialize["createBackups"] = o.CreateBackups
	}
	if !IsNil(o.BackupAppliance) {
		toSerialize["backupAppliance"] = o.BackupAppliance
	}
	if !IsNil(o.DefaultStorageBucket) {
		toSerialize["defaultStorageBucket"] = o.DefaultStorageBucket
	}
	if !IsNil(o.DefaultSchedule) {
		toSerialize["defaultSchedule"] = o.DefaultSchedule
	}
	if !IsNil(o.RetentionCount) {
		toSerialize["retentionCount"] = o.RetentionCount
	}
	return toSerialize, nil
}

type NullableBackupSettings struct {
	value *BackupSettings
	isSet bool
}

func (v NullableBackupSettings) Get() *BackupSettings {
	return v.value
}

func (v *NullableBackupSettings) Set(val *BackupSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableBackupSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableBackupSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBackupSettings(val *BackupSettings) *NullableBackupSettings {
	return &NullableBackupSettings{value: val, isSet: true}
}

func (v NullableBackupSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBackupSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


