/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ApiSubnetsSubnet struct for ApiSubnetsSubnet
type ApiSubnetsSubnet struct {
	Type *ApiSubnetsSubnetType `json:"type,omitempty"`
	// Configuration object. Settings vary by type.
	Config *map[string]interface{} `json:"config,omitempty"`
	// Array of tenant account ID objects that are allowed access
	Tenants *[]ApiBlueprintsIdUpdatePermissionsResourcePermissionSites `json:"tenants,omitempty"`
	// private or public
	Visibility *string `json:"visibility,omitempty"`
	// Array of label strings, can be used for filtering.
	Labels []string `json:"labels,omitempty"`
}

// NewApiSubnetsSubnet instantiates a new ApiSubnetsSubnet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiSubnetsSubnet() *ApiSubnetsSubnet {
	this := ApiSubnetsSubnet{}
	var visibility string = "private"
	this.Visibility = &visibility
	return &this
}

// NewApiSubnetsSubnetWithDefaults instantiates a new ApiSubnetsSubnet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiSubnetsSubnetWithDefaults() *ApiSubnetsSubnet {
	this := ApiSubnetsSubnet{}
	var visibility string = "private"
	this.Visibility = &visibility
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ApiSubnetsSubnet) GetType() ApiSubnetsSubnetType {
	if o == nil || o.Type == nil {
		var ret ApiSubnetsSubnetType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiSubnetsSubnet) GetTypeOk() (*ApiSubnetsSubnetType, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ApiSubnetsSubnet) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given ApiSubnetsSubnetType and assigns it to the Type field.
func (o *ApiSubnetsSubnet) SetType(v ApiSubnetsSubnetType) {
	o.Type = &v
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *ApiSubnetsSubnet) GetConfig() map[string]interface{} {
	if o == nil || o.Config == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiSubnetsSubnet) GetConfigOk() (*map[string]interface{}, bool) {
	if o == nil || o.Config == nil {
		return nil, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *ApiSubnetsSubnet) HasConfig() bool {
	if o != nil && o.Config != nil {
		return true
	}

	return false
}

// SetConfig gets a reference to the given map[string]interface{} and assigns it to the Config field.
func (o *ApiSubnetsSubnet) SetConfig(v map[string]interface{}) {
	o.Config = &v
}

// GetTenants returns the Tenants field value if set, zero value otherwise.
func (o *ApiSubnetsSubnet) GetTenants() []ApiBlueprintsIdUpdatePermissionsResourcePermissionSites {
	if o == nil || o.Tenants == nil {
		var ret []ApiBlueprintsIdUpdatePermissionsResourcePermissionSites
		return ret
	}
	return *o.Tenants
}

// GetTenantsOk returns a tuple with the Tenants field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiSubnetsSubnet) GetTenantsOk() (*[]ApiBlueprintsIdUpdatePermissionsResourcePermissionSites, bool) {
	if o == nil || o.Tenants == nil {
		return nil, false
	}
	return o.Tenants, true
}

// HasTenants returns a boolean if a field has been set.
func (o *ApiSubnetsSubnet) HasTenants() bool {
	if o != nil && o.Tenants != nil {
		return true
	}

	return false
}

// SetTenants gets a reference to the given []ApiBlueprintsIdUpdatePermissionsResourcePermissionSites and assigns it to the Tenants field.
func (o *ApiSubnetsSubnet) SetTenants(v []ApiBlueprintsIdUpdatePermissionsResourcePermissionSites) {
	o.Tenants = &v
}

// GetVisibility returns the Visibility field value if set, zero value otherwise.
func (o *ApiSubnetsSubnet) GetVisibility() string {
	if o == nil || o.Visibility == nil {
		var ret string
		return ret
	}
	return *o.Visibility
}

// GetVisibilityOk returns a tuple with the Visibility field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiSubnetsSubnet) GetVisibilityOk() (*string, bool) {
	if o == nil || o.Visibility == nil {
		return nil, false
	}
	return o.Visibility, true
}

// HasVisibility returns a boolean if a field has been set.
func (o *ApiSubnetsSubnet) HasVisibility() bool {
	if o != nil && o.Visibility != nil {
		return true
	}

	return false
}

// SetVisibility gets a reference to the given string and assigns it to the Visibility field.
func (o *ApiSubnetsSubnet) SetVisibility(v string) {
	o.Visibility = &v
}

// GetLabels returns the Labels field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApiSubnetsSubnet) GetLabels() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApiSubnetsSubnet) GetLabelsOk() (*[]string, bool) {
	if o == nil || o.Labels == nil {
		return nil, false
	}
	return &o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *ApiSubnetsSubnet) HasLabels() bool {
	if o != nil && o.Labels != nil {
		return true
	}

	return false
}

// SetLabels gets a reference to the given []string and assigns it to the Labels field.
func (o *ApiSubnetsSubnet) SetLabels(v []string) {
	o.Labels = v
}

func (o ApiSubnetsSubnet) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Config != nil {
		toSerialize["config"] = o.Config
	}
	if o.Tenants != nil {
		toSerialize["tenants"] = o.Tenants
	}
	if o.Visibility != nil {
		toSerialize["visibility"] = o.Visibility
	}
	if o.Labels != nil {
		toSerialize["labels"] = o.Labels
	}
	return json.Marshal(toSerialize)
}

type NullableApiSubnetsSubnet struct {
	value *ApiSubnetsSubnet
	isSet bool
}

func (v NullableApiSubnetsSubnet) Get() *ApiSubnetsSubnet {
	return v.value
}

func (v *NullableApiSubnetsSubnet) Set(val *ApiSubnetsSubnet) {
	v.value = val
	v.isSet = true
}

func (v NullableApiSubnetsSubnet) IsSet() bool {
	return v.isSet
}

func (v *NullableApiSubnetsSubnet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiSubnetsSubnet(val *ApiSubnetsSubnet) *NullableApiSubnetsSubnet {
	return &NullableApiSubnetsSubnet{value: val, isSet: true}
}

func (v NullableApiSubnetsSubnet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiSubnetsSubnet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


