/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InstanceSnapshotSnapshot struct for InstanceSnapshotSnapshot
type InstanceSnapshotSnapshot struct {
	// Optional name for the snapshot being created.
	Name *string `json:"name,omitempty"`
	// Optional description for the snapshot
	Description *string `json:"description,omitempty"`
}

// NewInstanceSnapshotSnapshot instantiates a new InstanceSnapshotSnapshot object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstanceSnapshotSnapshot() *InstanceSnapshotSnapshot {
	this := InstanceSnapshotSnapshot{}
	var name string = "{serverName}.{timestamp}"
	this.Name = &name
	return &this
}

// NewInstanceSnapshotSnapshotWithDefaults instantiates a new InstanceSnapshotSnapshot object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstanceSnapshotSnapshotWithDefaults() *InstanceSnapshotSnapshot {
	this := InstanceSnapshotSnapshot{}
	var name string = "{serverName}.{timestamp}"
	this.Name = &name
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *InstanceSnapshotSnapshot) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceSnapshotSnapshot) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *InstanceSnapshotSnapshot) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *InstanceSnapshotSnapshot) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *InstanceSnapshotSnapshot) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceSnapshotSnapshot) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *InstanceSnapshotSnapshot) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *InstanceSnapshotSnapshot) SetDescription(v string) {
	o.Description = &v
}

func (o InstanceSnapshotSnapshot) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	return json.Marshal(toSerialize)
}

type NullableInstanceSnapshotSnapshot struct {
	value *InstanceSnapshotSnapshot
	isSet bool
}

func (v NullableInstanceSnapshotSnapshot) Get() *InstanceSnapshotSnapshot {
	return v.value
}

func (v *NullableInstanceSnapshotSnapshot) Set(val *InstanceSnapshotSnapshot) {
	v.value = val
	v.isSet = true
}

func (v NullableInstanceSnapshotSnapshot) IsSet() bool {
	return v.isSet
}

func (v *NullableInstanceSnapshotSnapshot) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstanceSnapshotSnapshot(val *InstanceSnapshotSnapshot) *NullableInstanceSnapshotSnapshot {
	return &NullableInstanceSnapshotSnapshot{value: val, isSet: true}
}

func (v NullableInstanceSnapshotSnapshot) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstanceSnapshotSnapshot) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


