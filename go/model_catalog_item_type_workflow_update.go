/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CatalogItemTypeWorkflowUpdate struct for CatalogItemTypeWorkflowUpdate
type CatalogItemTypeWorkflowUpdate struct {
	// Catalog Item Type name
	Name *string `json:"name,omitempty"`
	// Useful shortcode for provisioning naming schemes and export reference.
	Code NullableString `json:"code,omitempty"`
	// Catalog Item Type category
	Category NullableString `json:"category,omitempty"`
	// Catalog Item Type description
	Description *string `json:"description,omitempty"`
	// Array of label strings, can be used for filtering.
	Labels []string `json:"labels,omitempty"`
	// Type, `instance`, `blueprint` or `workflow`. This determines whether an Instance or App will be provisioned. Instance types require a config and blueprint requires a blueprint and appSpec, while workflow types requires a workflow and context.
	Type *string `json:"type,omitempty"`
	// Visibility - Set to public to allow all tenants
	Visibility *string `json:"visibility,omitempty"`
	// Identifier primarily used for Plugin Catalog Item Types
	LayoutCode NullableString `json:"layoutCode,omitempty"`
	// Icon Path, relative location of an icon image, eg. /assets/containers-png/nginx.png.
	IconPath *string `json:"iconPath,omitempty"`
	// Can be used to enable / disable the catalog item type.
	Enabled *bool `json:"enabled,omitempty"`
	// Can be used to feature the catalog item type.
	Featured *bool `json:"featured,omitempty"`
	// Can users order more than one of this item at a time.
	AllowQuantity *bool `json:"allowQuantity,omitempty"`
	Workflow *ApiBlueprintsIdUpdatePermissionsResourcePermissionSites `json:"workflow,omitempty"`
	Context *string `json:"context,omitempty"`
	// Configuration object that contains settings for the workflow.
	WorkflowConfig *string `json:"workflowConfig,omitempty"`
}

// NewCatalogItemTypeWorkflowUpdate instantiates a new CatalogItemTypeWorkflowUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCatalogItemTypeWorkflowUpdate() *CatalogItemTypeWorkflowUpdate {
	this := CatalogItemTypeWorkflowUpdate{}
	var visibility string = "private"
	this.Visibility = &visibility
	var enabled bool = true
	this.Enabled = &enabled
	var featured bool = false
	this.Featured = &featured
	var allowQuantity bool = false
	this.AllowQuantity = &allowQuantity
	return &this
}

// NewCatalogItemTypeWorkflowUpdateWithDefaults instantiates a new CatalogItemTypeWorkflowUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCatalogItemTypeWorkflowUpdateWithDefaults() *CatalogItemTypeWorkflowUpdate {
	this := CatalogItemTypeWorkflowUpdate{}
	var visibility string = "private"
	this.Visibility = &visibility
	var enabled bool = true
	this.Enabled = &enabled
	var featured bool = false
	this.Featured = &featured
	var allowQuantity bool = false
	this.AllowQuantity = &allowQuantity
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CatalogItemTypeWorkflowUpdate) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogItemTypeWorkflowUpdate) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CatalogItemTypeWorkflowUpdate) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CatalogItemTypeWorkflowUpdate) SetName(v string) {
	o.Name = &v
}

// GetCode returns the Code field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CatalogItemTypeWorkflowUpdate) GetCode() string {
	if o == nil || o.Code.Get() == nil {
		var ret string
		return ret
	}
	return *o.Code.Get()
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CatalogItemTypeWorkflowUpdate) GetCodeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Code.Get(), o.Code.IsSet()
}

// HasCode returns a boolean if a field has been set.
func (o *CatalogItemTypeWorkflowUpdate) HasCode() bool {
	if o != nil && o.Code.IsSet() {
		return true
	}

	return false
}

// SetCode gets a reference to the given NullableString and assigns it to the Code field.
func (o *CatalogItemTypeWorkflowUpdate) SetCode(v string) {
	o.Code.Set(&v)
}
// SetCodeNil sets the value for Code to be an explicit nil
func (o *CatalogItemTypeWorkflowUpdate) SetCodeNil() {
	o.Code.Set(nil)
}

// UnsetCode ensures that no value is present for Code, not even an explicit nil
func (o *CatalogItemTypeWorkflowUpdate) UnsetCode() {
	o.Code.Unset()
}

// GetCategory returns the Category field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CatalogItemTypeWorkflowUpdate) GetCategory() string {
	if o == nil || o.Category.Get() == nil {
		var ret string
		return ret
	}
	return *o.Category.Get()
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CatalogItemTypeWorkflowUpdate) GetCategoryOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Category.Get(), o.Category.IsSet()
}

// HasCategory returns a boolean if a field has been set.
func (o *CatalogItemTypeWorkflowUpdate) HasCategory() bool {
	if o != nil && o.Category.IsSet() {
		return true
	}

	return false
}

// SetCategory gets a reference to the given NullableString and assigns it to the Category field.
func (o *CatalogItemTypeWorkflowUpdate) SetCategory(v string) {
	o.Category.Set(&v)
}
// SetCategoryNil sets the value for Category to be an explicit nil
func (o *CatalogItemTypeWorkflowUpdate) SetCategoryNil() {
	o.Category.Set(nil)
}

// UnsetCategory ensures that no value is present for Category, not even an explicit nil
func (o *CatalogItemTypeWorkflowUpdate) UnsetCategory() {
	o.Category.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CatalogItemTypeWorkflowUpdate) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogItemTypeWorkflowUpdate) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CatalogItemTypeWorkflowUpdate) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CatalogItemTypeWorkflowUpdate) SetDescription(v string) {
	o.Description = &v
}

// GetLabels returns the Labels field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CatalogItemTypeWorkflowUpdate) GetLabels() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CatalogItemTypeWorkflowUpdate) GetLabelsOk() (*[]string, bool) {
	if o == nil || o.Labels == nil {
		return nil, false
	}
	return &o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *CatalogItemTypeWorkflowUpdate) HasLabels() bool {
	if o != nil && o.Labels != nil {
		return true
	}

	return false
}

// SetLabels gets a reference to the given []string and assigns it to the Labels field.
func (o *CatalogItemTypeWorkflowUpdate) SetLabels(v []string) {
	o.Labels = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *CatalogItemTypeWorkflowUpdate) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogItemTypeWorkflowUpdate) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *CatalogItemTypeWorkflowUpdate) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *CatalogItemTypeWorkflowUpdate) SetType(v string) {
	o.Type = &v
}

// GetVisibility returns the Visibility field value if set, zero value otherwise.
func (o *CatalogItemTypeWorkflowUpdate) GetVisibility() string {
	if o == nil || o.Visibility == nil {
		var ret string
		return ret
	}
	return *o.Visibility
}

// GetVisibilityOk returns a tuple with the Visibility field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogItemTypeWorkflowUpdate) GetVisibilityOk() (*string, bool) {
	if o == nil || o.Visibility == nil {
		return nil, false
	}
	return o.Visibility, true
}

// HasVisibility returns a boolean if a field has been set.
func (o *CatalogItemTypeWorkflowUpdate) HasVisibility() bool {
	if o != nil && o.Visibility != nil {
		return true
	}

	return false
}

// SetVisibility gets a reference to the given string and assigns it to the Visibility field.
func (o *CatalogItemTypeWorkflowUpdate) SetVisibility(v string) {
	o.Visibility = &v
}

// GetLayoutCode returns the LayoutCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CatalogItemTypeWorkflowUpdate) GetLayoutCode() string {
	if o == nil || o.LayoutCode.Get() == nil {
		var ret string
		return ret
	}
	return *o.LayoutCode.Get()
}

// GetLayoutCodeOk returns a tuple with the LayoutCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CatalogItemTypeWorkflowUpdate) GetLayoutCodeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LayoutCode.Get(), o.LayoutCode.IsSet()
}

// HasLayoutCode returns a boolean if a field has been set.
func (o *CatalogItemTypeWorkflowUpdate) HasLayoutCode() bool {
	if o != nil && o.LayoutCode.IsSet() {
		return true
	}

	return false
}

// SetLayoutCode gets a reference to the given NullableString and assigns it to the LayoutCode field.
func (o *CatalogItemTypeWorkflowUpdate) SetLayoutCode(v string) {
	o.LayoutCode.Set(&v)
}
// SetLayoutCodeNil sets the value for LayoutCode to be an explicit nil
func (o *CatalogItemTypeWorkflowUpdate) SetLayoutCodeNil() {
	o.LayoutCode.Set(nil)
}

// UnsetLayoutCode ensures that no value is present for LayoutCode, not even an explicit nil
func (o *CatalogItemTypeWorkflowUpdate) UnsetLayoutCode() {
	o.LayoutCode.Unset()
}

// GetIconPath returns the IconPath field value if set, zero value otherwise.
func (o *CatalogItemTypeWorkflowUpdate) GetIconPath() string {
	if o == nil || o.IconPath == nil {
		var ret string
		return ret
	}
	return *o.IconPath
}

// GetIconPathOk returns a tuple with the IconPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogItemTypeWorkflowUpdate) GetIconPathOk() (*string, bool) {
	if o == nil || o.IconPath == nil {
		return nil, false
	}
	return o.IconPath, true
}

// HasIconPath returns a boolean if a field has been set.
func (o *CatalogItemTypeWorkflowUpdate) HasIconPath() bool {
	if o != nil && o.IconPath != nil {
		return true
	}

	return false
}

// SetIconPath gets a reference to the given string and assigns it to the IconPath field.
func (o *CatalogItemTypeWorkflowUpdate) SetIconPath(v string) {
	o.IconPath = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *CatalogItemTypeWorkflowUpdate) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogItemTypeWorkflowUpdate) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *CatalogItemTypeWorkflowUpdate) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *CatalogItemTypeWorkflowUpdate) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetFeatured returns the Featured field value if set, zero value otherwise.
func (o *CatalogItemTypeWorkflowUpdate) GetFeatured() bool {
	if o == nil || o.Featured == nil {
		var ret bool
		return ret
	}
	return *o.Featured
}

// GetFeaturedOk returns a tuple with the Featured field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogItemTypeWorkflowUpdate) GetFeaturedOk() (*bool, bool) {
	if o == nil || o.Featured == nil {
		return nil, false
	}
	return o.Featured, true
}

// HasFeatured returns a boolean if a field has been set.
func (o *CatalogItemTypeWorkflowUpdate) HasFeatured() bool {
	if o != nil && o.Featured != nil {
		return true
	}

	return false
}

// SetFeatured gets a reference to the given bool and assigns it to the Featured field.
func (o *CatalogItemTypeWorkflowUpdate) SetFeatured(v bool) {
	o.Featured = &v
}

// GetAllowQuantity returns the AllowQuantity field value if set, zero value otherwise.
func (o *CatalogItemTypeWorkflowUpdate) GetAllowQuantity() bool {
	if o == nil || o.AllowQuantity == nil {
		var ret bool
		return ret
	}
	return *o.AllowQuantity
}

// GetAllowQuantityOk returns a tuple with the AllowQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogItemTypeWorkflowUpdate) GetAllowQuantityOk() (*bool, bool) {
	if o == nil || o.AllowQuantity == nil {
		return nil, false
	}
	return o.AllowQuantity, true
}

// HasAllowQuantity returns a boolean if a field has been set.
func (o *CatalogItemTypeWorkflowUpdate) HasAllowQuantity() bool {
	if o != nil && o.AllowQuantity != nil {
		return true
	}

	return false
}

// SetAllowQuantity gets a reference to the given bool and assigns it to the AllowQuantity field.
func (o *CatalogItemTypeWorkflowUpdate) SetAllowQuantity(v bool) {
	o.AllowQuantity = &v
}

// GetWorkflow returns the Workflow field value if set, zero value otherwise.
func (o *CatalogItemTypeWorkflowUpdate) GetWorkflow() ApiBlueprintsIdUpdatePermissionsResourcePermissionSites {
	if o == nil || o.Workflow == nil {
		var ret ApiBlueprintsIdUpdatePermissionsResourcePermissionSites
		return ret
	}
	return *o.Workflow
}

// GetWorkflowOk returns a tuple with the Workflow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogItemTypeWorkflowUpdate) GetWorkflowOk() (*ApiBlueprintsIdUpdatePermissionsResourcePermissionSites, bool) {
	if o == nil || o.Workflow == nil {
		return nil, false
	}
	return o.Workflow, true
}

// HasWorkflow returns a boolean if a field has been set.
func (o *CatalogItemTypeWorkflowUpdate) HasWorkflow() bool {
	if o != nil && o.Workflow != nil {
		return true
	}

	return false
}

// SetWorkflow gets a reference to the given ApiBlueprintsIdUpdatePermissionsResourcePermissionSites and assigns it to the Workflow field.
func (o *CatalogItemTypeWorkflowUpdate) SetWorkflow(v ApiBlueprintsIdUpdatePermissionsResourcePermissionSites) {
	o.Workflow = &v
}

// GetContext returns the Context field value if set, zero value otherwise.
func (o *CatalogItemTypeWorkflowUpdate) GetContext() string {
	if o == nil || o.Context == nil {
		var ret string
		return ret
	}
	return *o.Context
}

// GetContextOk returns a tuple with the Context field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogItemTypeWorkflowUpdate) GetContextOk() (*string, bool) {
	if o == nil || o.Context == nil {
		return nil, false
	}
	return o.Context, true
}

// HasContext returns a boolean if a field has been set.
func (o *CatalogItemTypeWorkflowUpdate) HasContext() bool {
	if o != nil && o.Context != nil {
		return true
	}

	return false
}

// SetContext gets a reference to the given string and assigns it to the Context field.
func (o *CatalogItemTypeWorkflowUpdate) SetContext(v string) {
	o.Context = &v
}

// GetWorkflowConfig returns the WorkflowConfig field value if set, zero value otherwise.
func (o *CatalogItemTypeWorkflowUpdate) GetWorkflowConfig() string {
	if o == nil || o.WorkflowConfig == nil {
		var ret string
		return ret
	}
	return *o.WorkflowConfig
}

// GetWorkflowConfigOk returns a tuple with the WorkflowConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogItemTypeWorkflowUpdate) GetWorkflowConfigOk() (*string, bool) {
	if o == nil || o.WorkflowConfig == nil {
		return nil, false
	}
	return o.WorkflowConfig, true
}

// HasWorkflowConfig returns a boolean if a field has been set.
func (o *CatalogItemTypeWorkflowUpdate) HasWorkflowConfig() bool {
	if o != nil && o.WorkflowConfig != nil {
		return true
	}

	return false
}

// SetWorkflowConfig gets a reference to the given string and assigns it to the WorkflowConfig field.
func (o *CatalogItemTypeWorkflowUpdate) SetWorkflowConfig(v string) {
	o.WorkflowConfig = &v
}

func (o CatalogItemTypeWorkflowUpdate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Code.IsSet() {
		toSerialize["code"] = o.Code.Get()
	}
	if o.Category.IsSet() {
		toSerialize["category"] = o.Category.Get()
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Labels != nil {
		toSerialize["labels"] = o.Labels
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Visibility != nil {
		toSerialize["visibility"] = o.Visibility
	}
	if o.LayoutCode.IsSet() {
		toSerialize["layoutCode"] = o.LayoutCode.Get()
	}
	if o.IconPath != nil {
		toSerialize["iconPath"] = o.IconPath
	}
	if o.Enabled != nil {
		toSerialize["enabled"] = o.Enabled
	}
	if o.Featured != nil {
		toSerialize["featured"] = o.Featured
	}
	if o.AllowQuantity != nil {
		toSerialize["allowQuantity"] = o.AllowQuantity
	}
	if o.Workflow != nil {
		toSerialize["workflow"] = o.Workflow
	}
	if o.Context != nil {
		toSerialize["context"] = o.Context
	}
	if o.WorkflowConfig != nil {
		toSerialize["workflowConfig"] = o.WorkflowConfig
	}
	return json.Marshal(toSerialize)
}

type NullableCatalogItemTypeWorkflowUpdate struct {
	value *CatalogItemTypeWorkflowUpdate
	isSet bool
}

func (v NullableCatalogItemTypeWorkflowUpdate) Get() *CatalogItemTypeWorkflowUpdate {
	return v.value
}

func (v *NullableCatalogItemTypeWorkflowUpdate) Set(val *CatalogItemTypeWorkflowUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogItemTypeWorkflowUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogItemTypeWorkflowUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogItemTypeWorkflowUpdate(val *CatalogItemTypeWorkflowUpdate) *NullableCatalogItemTypeWorkflowUpdate {
	return &NullableCatalogItemTypeWorkflowUpdate{value: val, isSet: true}
}

func (v NullableCatalogItemTypeWorkflowUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogItemTypeWorkflowUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


