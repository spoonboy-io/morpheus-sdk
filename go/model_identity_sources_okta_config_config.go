/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// IdentitySourcesOktaConfigConfig struct for IdentitySourcesOktaConfigConfig
type IdentitySourcesOktaConfigConfig struct {
	Url *string `json:"url,omitempty"`
	AdministratorAPIToken *string `json:"administratorAPIToken,omitempty"`
	RequiredGroup *string `json:"requiredGroup,omitempty"`
	RequiredGroupId *string `json:"requiredGroupId,omitempty"`
	AdministratorAPITokenHash *string `json:"administratorAPITokenHash,omitempty"`
}

// NewIdentitySourcesOktaConfigConfig instantiates a new IdentitySourcesOktaConfigConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIdentitySourcesOktaConfigConfig() *IdentitySourcesOktaConfigConfig {
	this := IdentitySourcesOktaConfigConfig{}
	return &this
}

// NewIdentitySourcesOktaConfigConfigWithDefaults instantiates a new IdentitySourcesOktaConfigConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIdentitySourcesOktaConfigConfigWithDefaults() *IdentitySourcesOktaConfigConfig {
	this := IdentitySourcesOktaConfigConfig{}
	return &this
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *IdentitySourcesOktaConfigConfig) GetUrl() string {
	if o == nil || o.Url == nil {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentitySourcesOktaConfigConfig) GetUrlOk() (*string, bool) {
	if o == nil || o.Url == nil {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *IdentitySourcesOktaConfigConfig) HasUrl() bool {
	if o != nil && o.Url != nil {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *IdentitySourcesOktaConfigConfig) SetUrl(v string) {
	o.Url = &v
}

// GetAdministratorAPIToken returns the AdministratorAPIToken field value if set, zero value otherwise.
func (o *IdentitySourcesOktaConfigConfig) GetAdministratorAPIToken() string {
	if o == nil || o.AdministratorAPIToken == nil {
		var ret string
		return ret
	}
	return *o.AdministratorAPIToken
}

// GetAdministratorAPITokenOk returns a tuple with the AdministratorAPIToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentitySourcesOktaConfigConfig) GetAdministratorAPITokenOk() (*string, bool) {
	if o == nil || o.AdministratorAPIToken == nil {
		return nil, false
	}
	return o.AdministratorAPIToken, true
}

// HasAdministratorAPIToken returns a boolean if a field has been set.
func (o *IdentitySourcesOktaConfigConfig) HasAdministratorAPIToken() bool {
	if o != nil && o.AdministratorAPIToken != nil {
		return true
	}

	return false
}

// SetAdministratorAPIToken gets a reference to the given string and assigns it to the AdministratorAPIToken field.
func (o *IdentitySourcesOktaConfigConfig) SetAdministratorAPIToken(v string) {
	o.AdministratorAPIToken = &v
}

// GetRequiredGroup returns the RequiredGroup field value if set, zero value otherwise.
func (o *IdentitySourcesOktaConfigConfig) GetRequiredGroup() string {
	if o == nil || o.RequiredGroup == nil {
		var ret string
		return ret
	}
	return *o.RequiredGroup
}

// GetRequiredGroupOk returns a tuple with the RequiredGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentitySourcesOktaConfigConfig) GetRequiredGroupOk() (*string, bool) {
	if o == nil || o.RequiredGroup == nil {
		return nil, false
	}
	return o.RequiredGroup, true
}

// HasRequiredGroup returns a boolean if a field has been set.
func (o *IdentitySourcesOktaConfigConfig) HasRequiredGroup() bool {
	if o != nil && o.RequiredGroup != nil {
		return true
	}

	return false
}

// SetRequiredGroup gets a reference to the given string and assigns it to the RequiredGroup field.
func (o *IdentitySourcesOktaConfigConfig) SetRequiredGroup(v string) {
	o.RequiredGroup = &v
}

// GetRequiredGroupId returns the RequiredGroupId field value if set, zero value otherwise.
func (o *IdentitySourcesOktaConfigConfig) GetRequiredGroupId() string {
	if o == nil || o.RequiredGroupId == nil {
		var ret string
		return ret
	}
	return *o.RequiredGroupId
}

// GetRequiredGroupIdOk returns a tuple with the RequiredGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentitySourcesOktaConfigConfig) GetRequiredGroupIdOk() (*string, bool) {
	if o == nil || o.RequiredGroupId == nil {
		return nil, false
	}
	return o.RequiredGroupId, true
}

// HasRequiredGroupId returns a boolean if a field has been set.
func (o *IdentitySourcesOktaConfigConfig) HasRequiredGroupId() bool {
	if o != nil && o.RequiredGroupId != nil {
		return true
	}

	return false
}

// SetRequiredGroupId gets a reference to the given string and assigns it to the RequiredGroupId field.
func (o *IdentitySourcesOktaConfigConfig) SetRequiredGroupId(v string) {
	o.RequiredGroupId = &v
}

// GetAdministratorAPITokenHash returns the AdministratorAPITokenHash field value if set, zero value otherwise.
func (o *IdentitySourcesOktaConfigConfig) GetAdministratorAPITokenHash() string {
	if o == nil || o.AdministratorAPITokenHash == nil {
		var ret string
		return ret
	}
	return *o.AdministratorAPITokenHash
}

// GetAdministratorAPITokenHashOk returns a tuple with the AdministratorAPITokenHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentitySourcesOktaConfigConfig) GetAdministratorAPITokenHashOk() (*string, bool) {
	if o == nil || o.AdministratorAPITokenHash == nil {
		return nil, false
	}
	return o.AdministratorAPITokenHash, true
}

// HasAdministratorAPITokenHash returns a boolean if a field has been set.
func (o *IdentitySourcesOktaConfigConfig) HasAdministratorAPITokenHash() bool {
	if o != nil && o.AdministratorAPITokenHash != nil {
		return true
	}

	return false
}

// SetAdministratorAPITokenHash gets a reference to the given string and assigns it to the AdministratorAPITokenHash field.
func (o *IdentitySourcesOktaConfigConfig) SetAdministratorAPITokenHash(v string) {
	o.AdministratorAPITokenHash = &v
}

func (o IdentitySourcesOktaConfigConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Url != nil {
		toSerialize["url"] = o.Url
	}
	if o.AdministratorAPIToken != nil {
		toSerialize["administratorAPIToken"] = o.AdministratorAPIToken
	}
	if o.RequiredGroup != nil {
		toSerialize["requiredGroup"] = o.RequiredGroup
	}
	if o.RequiredGroupId != nil {
		toSerialize["requiredGroupId"] = o.RequiredGroupId
	}
	if o.AdministratorAPITokenHash != nil {
		toSerialize["administratorAPITokenHash"] = o.AdministratorAPITokenHash
	}
	return json.Marshal(toSerialize)
}

type NullableIdentitySourcesOktaConfigConfig struct {
	value *IdentitySourcesOktaConfigConfig
	isSet bool
}

func (v NullableIdentitySourcesOktaConfigConfig) Get() *IdentitySourcesOktaConfigConfig {
	return v.value
}

func (v *NullableIdentitySourcesOktaConfigConfig) Set(val *IdentitySourcesOktaConfigConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableIdentitySourcesOktaConfigConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableIdentitySourcesOktaConfigConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdentitySourcesOktaConfigConfig(val *IdentitySourcesOktaConfigConfig) *NullableIdentitySourcesOktaConfigConfig {
	return &NullableIdentitySourcesOktaConfigConfig{value: val, isSet: true}
}

func (v NullableIdentitySourcesOktaConfigConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdentitySourcesOktaConfigConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


