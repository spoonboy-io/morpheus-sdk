/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// OptionTypeListCreateConfigSourceHeaders struct for OptionTypeListCreateConfigSourceHeaders
type OptionTypeListCreateConfigSourceHeaders struct {
	// Header name
	Name string `json:"name"`
	// Header value
	Value *string `json:"value,omitempty"`
	// Can be used to enable / disable masking of value
	Masked *bool `json:"masked,omitempty"`
}

// NewOptionTypeListCreateConfigSourceHeaders instantiates a new OptionTypeListCreateConfigSourceHeaders object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOptionTypeListCreateConfigSourceHeaders(name string, ) *OptionTypeListCreateConfigSourceHeaders {
	this := OptionTypeListCreateConfigSourceHeaders{}
	this.Name = name
	var masked bool = false
	this.Masked = &masked
	return &this
}

// NewOptionTypeListCreateConfigSourceHeadersWithDefaults instantiates a new OptionTypeListCreateConfigSourceHeaders object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOptionTypeListCreateConfigSourceHeadersWithDefaults() *OptionTypeListCreateConfigSourceHeaders {
	this := OptionTypeListCreateConfigSourceHeaders{}
	var masked bool = false
	this.Masked = &masked
	return &this
}

// GetName returns the Name field value
func (o *OptionTypeListCreateConfigSourceHeaders) GetName() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *OptionTypeListCreateConfigSourceHeaders) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *OptionTypeListCreateConfigSourceHeaders) SetName(v string) {
	o.Name = v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *OptionTypeListCreateConfigSourceHeaders) GetValue() string {
	if o == nil || o.Value == nil {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionTypeListCreateConfigSourceHeaders) GetValueOk() (*string, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *OptionTypeListCreateConfigSourceHeaders) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *OptionTypeListCreateConfigSourceHeaders) SetValue(v string) {
	o.Value = &v
}

// GetMasked returns the Masked field value if set, zero value otherwise.
func (o *OptionTypeListCreateConfigSourceHeaders) GetMasked() bool {
	if o == nil || o.Masked == nil {
		var ret bool
		return ret
	}
	return *o.Masked
}

// GetMaskedOk returns a tuple with the Masked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionTypeListCreateConfigSourceHeaders) GetMaskedOk() (*bool, bool) {
	if o == nil || o.Masked == nil {
		return nil, false
	}
	return o.Masked, true
}

// HasMasked returns a boolean if a field has been set.
func (o *OptionTypeListCreateConfigSourceHeaders) HasMasked() bool {
	if o != nil && o.Masked != nil {
		return true
	}

	return false
}

// SetMasked gets a reference to the given bool and assigns it to the Masked field.
func (o *OptionTypeListCreateConfigSourceHeaders) SetMasked(v bool) {
	o.Masked = &v
}

func (o OptionTypeListCreateConfigSourceHeaders) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	if o.Masked != nil {
		toSerialize["masked"] = o.Masked
	}
	return json.Marshal(toSerialize)
}

type NullableOptionTypeListCreateConfigSourceHeaders struct {
	value *OptionTypeListCreateConfigSourceHeaders
	isSet bool
}

func (v NullableOptionTypeListCreateConfigSourceHeaders) Get() *OptionTypeListCreateConfigSourceHeaders {
	return v.value
}

func (v *NullableOptionTypeListCreateConfigSourceHeaders) Set(val *OptionTypeListCreateConfigSourceHeaders) {
	v.value = val
	v.isSet = true
}

func (v NullableOptionTypeListCreateConfigSourceHeaders) IsSet() bool {
	return v.isSet
}

func (v *NullableOptionTypeListCreateConfigSourceHeaders) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOptionTypeListCreateConfigSourceHeaders(val *OptionTypeListCreateConfigSourceHeaders) *NullableOptionTypeListCreateConfigSourceHeaders {
	return &NullableOptionTypeListCreateConfigSourceHeaders{value: val, isSet: true}
}

func (v NullableOptionTypeListCreateConfigSourceHeaders) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOptionTypeListCreateConfigSourceHeaders) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


