/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// HubLoginObject Object for logging in to the [Morpheus Hub](https://morpheushub.com) with existing credentials. This is only required for `hubmode=login`.
type HubLoginObject struct {
	Hub HubLoginObjectHub `json:"hub"`
}

// NewHubLoginObject instantiates a new HubLoginObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHubLoginObject(hub HubLoginObjectHub, ) *HubLoginObject {
	this := HubLoginObject{}
	this.Hub = hub
	return &this
}

// NewHubLoginObjectWithDefaults instantiates a new HubLoginObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHubLoginObjectWithDefaults() *HubLoginObject {
	this := HubLoginObject{}
	return &this
}

// GetHub returns the Hub field value
func (o *HubLoginObject) GetHub() HubLoginObjectHub {
	if o == nil  {
		var ret HubLoginObjectHub
		return ret
	}

	return o.Hub
}

// GetHubOk returns a tuple with the Hub field value
// and a boolean to check if the value has been set.
func (o *HubLoginObject) GetHubOk() (*HubLoginObjectHub, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Hub, true
}

// SetHub sets field value
func (o *HubLoginObject) SetHub(v HubLoginObjectHub) {
	o.Hub = v
}

func (o HubLoginObject) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["hub"] = o.Hub
	}
	return json.Marshal(toSerialize)
}

type NullableHubLoginObject struct {
	value *HubLoginObject
	isSet bool
}

func (v NullableHubLoginObject) Get() *HubLoginObject {
	return v.value
}

func (v *NullableHubLoginObject) Set(val *HubLoginObject) {
	v.value = val
	v.isSet = true
}

func (v NullableHubLoginObject) IsSet() bool {
	return v.isSet
}

func (v *NullableHubLoginObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHubLoginObject(val *HubLoginObject) *NullableHubLoginObject {
	return &NullableHubLoginObject{value: val, isSet: true}
}

func (v NullableHubLoginObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHubLoginObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


