/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// IntegrationType struct for IntegrationType
type IntegrationType struct {
	Id *int64 `json:"id,omitempty"`
	Code *string `json:"code,omitempty"`
	Name *string `json:"name,omitempty"`
	Description NullableString `json:"description,omitempty"`
	Category *string `json:"category,omitempty"`
	Enabled *bool `json:"enabled,omitempty"`
	Creatable *bool `json:"creatable,omitempty"`
	HasCMDB *bool `json:"hasCMDB,omitempty"`
	HasCMDBDiscovery *bool `json:"hasCMDBDiscovery,omitempty"`
	HasCM *bool `json:"hasCM,omitempty"`
	HasDNS *bool `json:"hasDNS,omitempty"`
	HasApprovals *bool `json:"hasApprovals,omitempty"`
	HasDeleteApprovals *bool `json:"hasDeleteApprovals,omitempty"`
	HasReconfigureApprovals *bool `json:"hasReconfigureApprovals,omitempty"`
	IsPlugin *bool `json:"isPlugin,omitempty"`
}

// NewIntegrationType instantiates a new IntegrationType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIntegrationType() *IntegrationType {
	this := IntegrationType{}
	return &this
}

// NewIntegrationTypeWithDefaults instantiates a new IntegrationType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIntegrationTypeWithDefaults() *IntegrationType {
	this := IntegrationType{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *IntegrationType) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationType) GetIdOk() (*int64, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *IntegrationType) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *IntegrationType) SetId(v int64) {
	o.Id = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *IntegrationType) GetCode() string {
	if o == nil || o.Code == nil {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationType) GetCodeOk() (*string, bool) {
	if o == nil || o.Code == nil {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *IntegrationType) HasCode() bool {
	if o != nil && o.Code != nil {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *IntegrationType) SetCode(v string) {
	o.Code = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *IntegrationType) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationType) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *IntegrationType) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *IntegrationType) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IntegrationType) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IntegrationType) GetDescriptionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *IntegrationType) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *IntegrationType) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *IntegrationType) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *IntegrationType) UnsetDescription() {
	o.Description.Unset()
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *IntegrationType) GetCategory() string {
	if o == nil || o.Category == nil {
		var ret string
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationType) GetCategoryOk() (*string, bool) {
	if o == nil || o.Category == nil {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *IntegrationType) HasCategory() bool {
	if o != nil && o.Category != nil {
		return true
	}

	return false
}

// SetCategory gets a reference to the given string and assigns it to the Category field.
func (o *IntegrationType) SetCategory(v string) {
	o.Category = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *IntegrationType) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationType) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *IntegrationType) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *IntegrationType) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetCreatable returns the Creatable field value if set, zero value otherwise.
func (o *IntegrationType) GetCreatable() bool {
	if o == nil || o.Creatable == nil {
		var ret bool
		return ret
	}
	return *o.Creatable
}

// GetCreatableOk returns a tuple with the Creatable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationType) GetCreatableOk() (*bool, bool) {
	if o == nil || o.Creatable == nil {
		return nil, false
	}
	return o.Creatable, true
}

// HasCreatable returns a boolean if a field has been set.
func (o *IntegrationType) HasCreatable() bool {
	if o != nil && o.Creatable != nil {
		return true
	}

	return false
}

// SetCreatable gets a reference to the given bool and assigns it to the Creatable field.
func (o *IntegrationType) SetCreatable(v bool) {
	o.Creatable = &v
}

// GetHasCMDB returns the HasCMDB field value if set, zero value otherwise.
func (o *IntegrationType) GetHasCMDB() bool {
	if o == nil || o.HasCMDB == nil {
		var ret bool
		return ret
	}
	return *o.HasCMDB
}

// GetHasCMDBOk returns a tuple with the HasCMDB field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationType) GetHasCMDBOk() (*bool, bool) {
	if o == nil || o.HasCMDB == nil {
		return nil, false
	}
	return o.HasCMDB, true
}

// HasHasCMDB returns a boolean if a field has been set.
func (o *IntegrationType) HasHasCMDB() bool {
	if o != nil && o.HasCMDB != nil {
		return true
	}

	return false
}

// SetHasCMDB gets a reference to the given bool and assigns it to the HasCMDB field.
func (o *IntegrationType) SetHasCMDB(v bool) {
	o.HasCMDB = &v
}

// GetHasCMDBDiscovery returns the HasCMDBDiscovery field value if set, zero value otherwise.
func (o *IntegrationType) GetHasCMDBDiscovery() bool {
	if o == nil || o.HasCMDBDiscovery == nil {
		var ret bool
		return ret
	}
	return *o.HasCMDBDiscovery
}

// GetHasCMDBDiscoveryOk returns a tuple with the HasCMDBDiscovery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationType) GetHasCMDBDiscoveryOk() (*bool, bool) {
	if o == nil || o.HasCMDBDiscovery == nil {
		return nil, false
	}
	return o.HasCMDBDiscovery, true
}

// HasHasCMDBDiscovery returns a boolean if a field has been set.
func (o *IntegrationType) HasHasCMDBDiscovery() bool {
	if o != nil && o.HasCMDBDiscovery != nil {
		return true
	}

	return false
}

// SetHasCMDBDiscovery gets a reference to the given bool and assigns it to the HasCMDBDiscovery field.
func (o *IntegrationType) SetHasCMDBDiscovery(v bool) {
	o.HasCMDBDiscovery = &v
}

// GetHasCM returns the HasCM field value if set, zero value otherwise.
func (o *IntegrationType) GetHasCM() bool {
	if o == nil || o.HasCM == nil {
		var ret bool
		return ret
	}
	return *o.HasCM
}

// GetHasCMOk returns a tuple with the HasCM field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationType) GetHasCMOk() (*bool, bool) {
	if o == nil || o.HasCM == nil {
		return nil, false
	}
	return o.HasCM, true
}

// HasHasCM returns a boolean if a field has been set.
func (o *IntegrationType) HasHasCM() bool {
	if o != nil && o.HasCM != nil {
		return true
	}

	return false
}

// SetHasCM gets a reference to the given bool and assigns it to the HasCM field.
func (o *IntegrationType) SetHasCM(v bool) {
	o.HasCM = &v
}

// GetHasDNS returns the HasDNS field value if set, zero value otherwise.
func (o *IntegrationType) GetHasDNS() bool {
	if o == nil || o.HasDNS == nil {
		var ret bool
		return ret
	}
	return *o.HasDNS
}

// GetHasDNSOk returns a tuple with the HasDNS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationType) GetHasDNSOk() (*bool, bool) {
	if o == nil || o.HasDNS == nil {
		return nil, false
	}
	return o.HasDNS, true
}

// HasHasDNS returns a boolean if a field has been set.
func (o *IntegrationType) HasHasDNS() bool {
	if o != nil && o.HasDNS != nil {
		return true
	}

	return false
}

// SetHasDNS gets a reference to the given bool and assigns it to the HasDNS field.
func (o *IntegrationType) SetHasDNS(v bool) {
	o.HasDNS = &v
}

// GetHasApprovals returns the HasApprovals field value if set, zero value otherwise.
func (o *IntegrationType) GetHasApprovals() bool {
	if o == nil || o.HasApprovals == nil {
		var ret bool
		return ret
	}
	return *o.HasApprovals
}

// GetHasApprovalsOk returns a tuple with the HasApprovals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationType) GetHasApprovalsOk() (*bool, bool) {
	if o == nil || o.HasApprovals == nil {
		return nil, false
	}
	return o.HasApprovals, true
}

// HasHasApprovals returns a boolean if a field has been set.
func (o *IntegrationType) HasHasApprovals() bool {
	if o != nil && o.HasApprovals != nil {
		return true
	}

	return false
}

// SetHasApprovals gets a reference to the given bool and assigns it to the HasApprovals field.
func (o *IntegrationType) SetHasApprovals(v bool) {
	o.HasApprovals = &v
}

// GetHasDeleteApprovals returns the HasDeleteApprovals field value if set, zero value otherwise.
func (o *IntegrationType) GetHasDeleteApprovals() bool {
	if o == nil || o.HasDeleteApprovals == nil {
		var ret bool
		return ret
	}
	return *o.HasDeleteApprovals
}

// GetHasDeleteApprovalsOk returns a tuple with the HasDeleteApprovals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationType) GetHasDeleteApprovalsOk() (*bool, bool) {
	if o == nil || o.HasDeleteApprovals == nil {
		return nil, false
	}
	return o.HasDeleteApprovals, true
}

// HasHasDeleteApprovals returns a boolean if a field has been set.
func (o *IntegrationType) HasHasDeleteApprovals() bool {
	if o != nil && o.HasDeleteApprovals != nil {
		return true
	}

	return false
}

// SetHasDeleteApprovals gets a reference to the given bool and assigns it to the HasDeleteApprovals field.
func (o *IntegrationType) SetHasDeleteApprovals(v bool) {
	o.HasDeleteApprovals = &v
}

// GetHasReconfigureApprovals returns the HasReconfigureApprovals field value if set, zero value otherwise.
func (o *IntegrationType) GetHasReconfigureApprovals() bool {
	if o == nil || o.HasReconfigureApprovals == nil {
		var ret bool
		return ret
	}
	return *o.HasReconfigureApprovals
}

// GetHasReconfigureApprovalsOk returns a tuple with the HasReconfigureApprovals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationType) GetHasReconfigureApprovalsOk() (*bool, bool) {
	if o == nil || o.HasReconfigureApprovals == nil {
		return nil, false
	}
	return o.HasReconfigureApprovals, true
}

// HasHasReconfigureApprovals returns a boolean if a field has been set.
func (o *IntegrationType) HasHasReconfigureApprovals() bool {
	if o != nil && o.HasReconfigureApprovals != nil {
		return true
	}

	return false
}

// SetHasReconfigureApprovals gets a reference to the given bool and assigns it to the HasReconfigureApprovals field.
func (o *IntegrationType) SetHasReconfigureApprovals(v bool) {
	o.HasReconfigureApprovals = &v
}

// GetIsPlugin returns the IsPlugin field value if set, zero value otherwise.
func (o *IntegrationType) GetIsPlugin() bool {
	if o == nil || o.IsPlugin == nil {
		var ret bool
		return ret
	}
	return *o.IsPlugin
}

// GetIsPluginOk returns a tuple with the IsPlugin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationType) GetIsPluginOk() (*bool, bool) {
	if o == nil || o.IsPlugin == nil {
		return nil, false
	}
	return o.IsPlugin, true
}

// HasIsPlugin returns a boolean if a field has been set.
func (o *IntegrationType) HasIsPlugin() bool {
	if o != nil && o.IsPlugin != nil {
		return true
	}

	return false
}

// SetIsPlugin gets a reference to the given bool and assigns it to the IsPlugin field.
func (o *IntegrationType) SetIsPlugin(v bool) {
	o.IsPlugin = &v
}

func (o IntegrationType) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Code != nil {
		toSerialize["code"] = o.Code
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.Category != nil {
		toSerialize["category"] = o.Category
	}
	if o.Enabled != nil {
		toSerialize["enabled"] = o.Enabled
	}
	if o.Creatable != nil {
		toSerialize["creatable"] = o.Creatable
	}
	if o.HasCMDB != nil {
		toSerialize["hasCMDB"] = o.HasCMDB
	}
	if o.HasCMDBDiscovery != nil {
		toSerialize["hasCMDBDiscovery"] = o.HasCMDBDiscovery
	}
	if o.HasCM != nil {
		toSerialize["hasCM"] = o.HasCM
	}
	if o.HasDNS != nil {
		toSerialize["hasDNS"] = o.HasDNS
	}
	if o.HasApprovals != nil {
		toSerialize["hasApprovals"] = o.HasApprovals
	}
	if o.HasDeleteApprovals != nil {
		toSerialize["hasDeleteApprovals"] = o.HasDeleteApprovals
	}
	if o.HasReconfigureApprovals != nil {
		toSerialize["hasReconfigureApprovals"] = o.HasReconfigureApprovals
	}
	if o.IsPlugin != nil {
		toSerialize["isPlugin"] = o.IsPlugin
	}
	return json.Marshal(toSerialize)
}

type NullableIntegrationType struct {
	value *IntegrationType
	isSet bool
}

func (v NullableIntegrationType) Get() *IntegrationType {
	return v.value
}

func (v *NullableIntegrationType) Set(val *IntegrationType) {
	v.value = val
	v.isSet = true
}

func (v NullableIntegrationType) IsSet() bool {
	return v.isSet
}

func (v *NullableIntegrationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntegrationType(val *IntegrationType) *NullableIntegrationType {
	return &NullableIntegrationType{value: val, isSet: true}
}

func (v NullableIntegrationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntegrationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


