/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// PolicyGroupUpdatePolicyType struct for PolicyGroupUpdatePolicyType
type PolicyGroupUpdatePolicyType struct {
	// The policy type
	Code *string `json:"code,omitempty"`
	// A map of config values. The expected values vary by policyType.
	Config *OneOfobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobject `json:"config,omitempty"`
	// Set to false to disable
	Enabled *bool `json:"enabled,omitempty"`
	// Scope object type
	RefType *string `json:"refType,omitempty"`
	// Scope object ID (`group`)
	RefId *int64 `json:"refId,omitempty"`
	// Array of tenants to scope the policy to
	Accounts *[]int64 `json:"accounts,omitempty"`
	// Apply individually to each user in role.  Only when `refType` equals `Role`
	EachUser *bool `json:"eachUser,omitempty"`
}

// NewPolicyGroupUpdatePolicyType instantiates a new PolicyGroupUpdatePolicyType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPolicyGroupUpdatePolicyType() *PolicyGroupUpdatePolicyType {
	this := PolicyGroupUpdatePolicyType{}
	var enabled bool = true
	this.Enabled = &enabled
	return &this
}

// NewPolicyGroupUpdatePolicyTypeWithDefaults instantiates a new PolicyGroupUpdatePolicyType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPolicyGroupUpdatePolicyTypeWithDefaults() *PolicyGroupUpdatePolicyType {
	this := PolicyGroupUpdatePolicyType{}
	var enabled bool = true
	this.Enabled = &enabled
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *PolicyGroupUpdatePolicyType) GetCode() string {
	if o == nil || o.Code == nil {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyGroupUpdatePolicyType) GetCodeOk() (*string, bool) {
	if o == nil || o.Code == nil {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *PolicyGroupUpdatePolicyType) HasCode() bool {
	if o != nil && o.Code != nil {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *PolicyGroupUpdatePolicyType) SetCode(v string) {
	o.Code = &v
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *PolicyGroupUpdatePolicyType) GetConfig() OneOfobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobject {
	if o == nil || o.Config == nil {
		var ret OneOfobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobject
		return ret
	}
	return *o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyGroupUpdatePolicyType) GetConfigOk() (*OneOfobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobject, bool) {
	if o == nil || o.Config == nil {
		return nil, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *PolicyGroupUpdatePolicyType) HasConfig() bool {
	if o != nil && o.Config != nil {
		return true
	}

	return false
}

// SetConfig gets a reference to the given OneOfobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobject and assigns it to the Config field.
func (o *PolicyGroupUpdatePolicyType) SetConfig(v OneOfobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobject) {
	o.Config = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *PolicyGroupUpdatePolicyType) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyGroupUpdatePolicyType) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *PolicyGroupUpdatePolicyType) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *PolicyGroupUpdatePolicyType) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetRefType returns the RefType field value if set, zero value otherwise.
func (o *PolicyGroupUpdatePolicyType) GetRefType() string {
	if o == nil || o.RefType == nil {
		var ret string
		return ret
	}
	return *o.RefType
}

// GetRefTypeOk returns a tuple with the RefType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyGroupUpdatePolicyType) GetRefTypeOk() (*string, bool) {
	if o == nil || o.RefType == nil {
		return nil, false
	}
	return o.RefType, true
}

// HasRefType returns a boolean if a field has been set.
func (o *PolicyGroupUpdatePolicyType) HasRefType() bool {
	if o != nil && o.RefType != nil {
		return true
	}

	return false
}

// SetRefType gets a reference to the given string and assigns it to the RefType field.
func (o *PolicyGroupUpdatePolicyType) SetRefType(v string) {
	o.RefType = &v
}

// GetRefId returns the RefId field value if set, zero value otherwise.
func (o *PolicyGroupUpdatePolicyType) GetRefId() int64 {
	if o == nil || o.RefId == nil {
		var ret int64
		return ret
	}
	return *o.RefId
}

// GetRefIdOk returns a tuple with the RefId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyGroupUpdatePolicyType) GetRefIdOk() (*int64, bool) {
	if o == nil || o.RefId == nil {
		return nil, false
	}
	return o.RefId, true
}

// HasRefId returns a boolean if a field has been set.
func (o *PolicyGroupUpdatePolicyType) HasRefId() bool {
	if o != nil && o.RefId != nil {
		return true
	}

	return false
}

// SetRefId gets a reference to the given int64 and assigns it to the RefId field.
func (o *PolicyGroupUpdatePolicyType) SetRefId(v int64) {
	o.RefId = &v
}

// GetAccounts returns the Accounts field value if set, zero value otherwise.
func (o *PolicyGroupUpdatePolicyType) GetAccounts() []int64 {
	if o == nil || o.Accounts == nil {
		var ret []int64
		return ret
	}
	return *o.Accounts
}

// GetAccountsOk returns a tuple with the Accounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyGroupUpdatePolicyType) GetAccountsOk() (*[]int64, bool) {
	if o == nil || o.Accounts == nil {
		return nil, false
	}
	return o.Accounts, true
}

// HasAccounts returns a boolean if a field has been set.
func (o *PolicyGroupUpdatePolicyType) HasAccounts() bool {
	if o != nil && o.Accounts != nil {
		return true
	}

	return false
}

// SetAccounts gets a reference to the given []int64 and assigns it to the Accounts field.
func (o *PolicyGroupUpdatePolicyType) SetAccounts(v []int64) {
	o.Accounts = &v
}

// GetEachUser returns the EachUser field value if set, zero value otherwise.
func (o *PolicyGroupUpdatePolicyType) GetEachUser() bool {
	if o == nil || o.EachUser == nil {
		var ret bool
		return ret
	}
	return *o.EachUser
}

// GetEachUserOk returns a tuple with the EachUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyGroupUpdatePolicyType) GetEachUserOk() (*bool, bool) {
	if o == nil || o.EachUser == nil {
		return nil, false
	}
	return o.EachUser, true
}

// HasEachUser returns a boolean if a field has been set.
func (o *PolicyGroupUpdatePolicyType) HasEachUser() bool {
	if o != nil && o.EachUser != nil {
		return true
	}

	return false
}

// SetEachUser gets a reference to the given bool and assigns it to the EachUser field.
func (o *PolicyGroupUpdatePolicyType) SetEachUser(v bool) {
	o.EachUser = &v
}

func (o PolicyGroupUpdatePolicyType) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Code != nil {
		toSerialize["code"] = o.Code
	}
	if o.Config != nil {
		toSerialize["config"] = o.Config
	}
	if o.Enabled != nil {
		toSerialize["enabled"] = o.Enabled
	}
	if o.RefType != nil {
		toSerialize["refType"] = o.RefType
	}
	if o.RefId != nil {
		toSerialize["refId"] = o.RefId
	}
	if o.Accounts != nil {
		toSerialize["accounts"] = o.Accounts
	}
	if o.EachUser != nil {
		toSerialize["eachUser"] = o.EachUser
	}
	return json.Marshal(toSerialize)
}

type NullablePolicyGroupUpdatePolicyType struct {
	value *PolicyGroupUpdatePolicyType
	isSet bool
}

func (v NullablePolicyGroupUpdatePolicyType) Get() *PolicyGroupUpdatePolicyType {
	return v.value
}

func (v *NullablePolicyGroupUpdatePolicyType) Set(val *PolicyGroupUpdatePolicyType) {
	v.value = val
	v.isSet = true
}

func (v NullablePolicyGroupUpdatePolicyType) IsSet() bool {
	return v.isSet
}

func (v *NullablePolicyGroupUpdatePolicyType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePolicyGroupUpdatePolicyType(val *PolicyGroupUpdatePolicyType) *NullablePolicyGroupUpdatePolicyType {
	return &NullablePolicyGroupUpdatePolicyType{value: val, isSet: true}
}

func (v NullablePolicyGroupUpdatePolicyType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePolicyGroupUpdatePolicyType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


