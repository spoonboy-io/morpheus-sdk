/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// NetworkPoolCreate struct for NetworkPoolCreate
type NetworkPoolCreate struct {
	// Name
	Name *string `json:"name,omitempty"`
	Type *NetworkPoolCreateType `json:"type,omitempty"`
	// Array of IP range objects. Type 'morpheus' expects startAddress and endAddress. Type 'morpheusipv6' expects a cidrIPv6.
	IpRanges *[]NetworkPoolCreateIpRanges `json:"ipRanges,omitempty"`
	// Configuration object with parameters that vary by pool type.
	Config *map[string]interface{} `json:"config,omitempty"`
}

// NewNetworkPoolCreate instantiates a new NetworkPoolCreate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkPoolCreate() *NetworkPoolCreate {
	this := NetworkPoolCreate{}
	return &this
}

// NewNetworkPoolCreateWithDefaults instantiates a new NetworkPoolCreate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkPoolCreateWithDefaults() *NetworkPoolCreate {
	this := NetworkPoolCreate{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *NetworkPoolCreate) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkPoolCreate) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *NetworkPoolCreate) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *NetworkPoolCreate) SetName(v string) {
	o.Name = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *NetworkPoolCreate) GetType() NetworkPoolCreateType {
	if o == nil || o.Type == nil {
		var ret NetworkPoolCreateType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkPoolCreate) GetTypeOk() (*NetworkPoolCreateType, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *NetworkPoolCreate) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given NetworkPoolCreateType and assigns it to the Type field.
func (o *NetworkPoolCreate) SetType(v NetworkPoolCreateType) {
	o.Type = &v
}

// GetIpRanges returns the IpRanges field value if set, zero value otherwise.
func (o *NetworkPoolCreate) GetIpRanges() []NetworkPoolCreateIpRanges {
	if o == nil || o.IpRanges == nil {
		var ret []NetworkPoolCreateIpRanges
		return ret
	}
	return *o.IpRanges
}

// GetIpRangesOk returns a tuple with the IpRanges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkPoolCreate) GetIpRangesOk() (*[]NetworkPoolCreateIpRanges, bool) {
	if o == nil || o.IpRanges == nil {
		return nil, false
	}
	return o.IpRanges, true
}

// HasIpRanges returns a boolean if a field has been set.
func (o *NetworkPoolCreate) HasIpRanges() bool {
	if o != nil && o.IpRanges != nil {
		return true
	}

	return false
}

// SetIpRanges gets a reference to the given []NetworkPoolCreateIpRanges and assigns it to the IpRanges field.
func (o *NetworkPoolCreate) SetIpRanges(v []NetworkPoolCreateIpRanges) {
	o.IpRanges = &v
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *NetworkPoolCreate) GetConfig() map[string]interface{} {
	if o == nil || o.Config == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkPoolCreate) GetConfigOk() (*map[string]interface{}, bool) {
	if o == nil || o.Config == nil {
		return nil, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *NetworkPoolCreate) HasConfig() bool {
	if o != nil && o.Config != nil {
		return true
	}

	return false
}

// SetConfig gets a reference to the given map[string]interface{} and assigns it to the Config field.
func (o *NetworkPoolCreate) SetConfig(v map[string]interface{}) {
	o.Config = &v
}

func (o NetworkPoolCreate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.IpRanges != nil {
		toSerialize["ipRanges"] = o.IpRanges
	}
	if o.Config != nil {
		toSerialize["config"] = o.Config
	}
	return json.Marshal(toSerialize)
}

type NullableNetworkPoolCreate struct {
	value *NetworkPoolCreate
	isSet bool
}

func (v NullableNetworkPoolCreate) Get() *NetworkPoolCreate {
	return v.value
}

func (v *NullableNetworkPoolCreate) Set(val *NetworkPoolCreate) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkPoolCreate) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkPoolCreate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkPoolCreate(val *NetworkPoolCreate) *NullableNetworkPoolCreate {
	return &NullableNetworkPoolCreate{value: val, isSet: true}
}

func (v NullableNetworkPoolCreate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkPoolCreate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


