/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// InstanceScheduleUpdate struct for InstanceScheduleUpdate
type InstanceScheduleUpdate struct {
	ScheduleType *string `json:"scheduleType,omitempty"`
	// Time Zone eg. America/New_York, Europe/Amsterdam, etc. Only used and required for scheduleType `dayOfWeek`
	ScheduleTimezone *string `json:"scheduleTimezone,omitempty"`
	// Start day of the week 1-7 (Sun-Sat). Only used and required for scheduleType `dayOfWeek`
	StartDayOfWeek *int32 `json:"startDayOfWeek,omitempty"`
	// Start time of the day in 24-hour format. Only used and required for scheduleType `dayOfWeek`
	StartTime *string `json:"startTime,omitempty"`
	// End day of the week 1-7 (Sun-Sat). Only used and required for scheduleType `dayOfWeek`
	EndDayOfWeek *int32 `json:"endDayOfWeek,omitempty"`
	// End time of the day in 24-hour format. Only used and required for scheduleType `dayOfWeek`
	EndTime *string `json:"endTime,omitempty"`
	// Start Date. Only used and required for scheduleType `exact`
	StartDate *time.Time `json:"startDate,omitempty"`
	// End Date. Only used and required for scheduleType `exact`
	EndDate *time.Time `json:"endDate,omitempty"`
	Threshold *InstanceScheduleUpdateThreshold `json:"threshold,omitempty"`
}

// NewInstanceScheduleUpdate instantiates a new InstanceScheduleUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstanceScheduleUpdate() *InstanceScheduleUpdate {
	this := InstanceScheduleUpdate{}
	var scheduleType string = "dayOfWeek"
	this.ScheduleType = &scheduleType
	var scheduleTimezone string = "UTC"
	this.ScheduleTimezone = &scheduleTimezone
	return &this
}

// NewInstanceScheduleUpdateWithDefaults instantiates a new InstanceScheduleUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstanceScheduleUpdateWithDefaults() *InstanceScheduleUpdate {
	this := InstanceScheduleUpdate{}
	var scheduleType string = "dayOfWeek"
	this.ScheduleType = &scheduleType
	var scheduleTimezone string = "UTC"
	this.ScheduleTimezone = &scheduleTimezone
	return &this
}

// GetScheduleType returns the ScheduleType field value if set, zero value otherwise.
func (o *InstanceScheduleUpdate) GetScheduleType() string {
	if o == nil || o.ScheduleType == nil {
		var ret string
		return ret
	}
	return *o.ScheduleType
}

// GetScheduleTypeOk returns a tuple with the ScheduleType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceScheduleUpdate) GetScheduleTypeOk() (*string, bool) {
	if o == nil || o.ScheduleType == nil {
		return nil, false
	}
	return o.ScheduleType, true
}

// HasScheduleType returns a boolean if a field has been set.
func (o *InstanceScheduleUpdate) HasScheduleType() bool {
	if o != nil && o.ScheduleType != nil {
		return true
	}

	return false
}

// SetScheduleType gets a reference to the given string and assigns it to the ScheduleType field.
func (o *InstanceScheduleUpdate) SetScheduleType(v string) {
	o.ScheduleType = &v
}

// GetScheduleTimezone returns the ScheduleTimezone field value if set, zero value otherwise.
func (o *InstanceScheduleUpdate) GetScheduleTimezone() string {
	if o == nil || o.ScheduleTimezone == nil {
		var ret string
		return ret
	}
	return *o.ScheduleTimezone
}

// GetScheduleTimezoneOk returns a tuple with the ScheduleTimezone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceScheduleUpdate) GetScheduleTimezoneOk() (*string, bool) {
	if o == nil || o.ScheduleTimezone == nil {
		return nil, false
	}
	return o.ScheduleTimezone, true
}

// HasScheduleTimezone returns a boolean if a field has been set.
func (o *InstanceScheduleUpdate) HasScheduleTimezone() bool {
	if o != nil && o.ScheduleTimezone != nil {
		return true
	}

	return false
}

// SetScheduleTimezone gets a reference to the given string and assigns it to the ScheduleTimezone field.
func (o *InstanceScheduleUpdate) SetScheduleTimezone(v string) {
	o.ScheduleTimezone = &v
}

// GetStartDayOfWeek returns the StartDayOfWeek field value if set, zero value otherwise.
func (o *InstanceScheduleUpdate) GetStartDayOfWeek() int32 {
	if o == nil || o.StartDayOfWeek == nil {
		var ret int32
		return ret
	}
	return *o.StartDayOfWeek
}

// GetStartDayOfWeekOk returns a tuple with the StartDayOfWeek field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceScheduleUpdate) GetStartDayOfWeekOk() (*int32, bool) {
	if o == nil || o.StartDayOfWeek == nil {
		return nil, false
	}
	return o.StartDayOfWeek, true
}

// HasStartDayOfWeek returns a boolean if a field has been set.
func (o *InstanceScheduleUpdate) HasStartDayOfWeek() bool {
	if o != nil && o.StartDayOfWeek != nil {
		return true
	}

	return false
}

// SetStartDayOfWeek gets a reference to the given int32 and assigns it to the StartDayOfWeek field.
func (o *InstanceScheduleUpdate) SetStartDayOfWeek(v int32) {
	o.StartDayOfWeek = &v
}

// GetStartTime returns the StartTime field value if set, zero value otherwise.
func (o *InstanceScheduleUpdate) GetStartTime() string {
	if o == nil || o.StartTime == nil {
		var ret string
		return ret
	}
	return *o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceScheduleUpdate) GetStartTimeOk() (*string, bool) {
	if o == nil || o.StartTime == nil {
		return nil, false
	}
	return o.StartTime, true
}

// HasStartTime returns a boolean if a field has been set.
func (o *InstanceScheduleUpdate) HasStartTime() bool {
	if o != nil && o.StartTime != nil {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given string and assigns it to the StartTime field.
func (o *InstanceScheduleUpdate) SetStartTime(v string) {
	o.StartTime = &v
}

// GetEndDayOfWeek returns the EndDayOfWeek field value if set, zero value otherwise.
func (o *InstanceScheduleUpdate) GetEndDayOfWeek() int32 {
	if o == nil || o.EndDayOfWeek == nil {
		var ret int32
		return ret
	}
	return *o.EndDayOfWeek
}

// GetEndDayOfWeekOk returns a tuple with the EndDayOfWeek field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceScheduleUpdate) GetEndDayOfWeekOk() (*int32, bool) {
	if o == nil || o.EndDayOfWeek == nil {
		return nil, false
	}
	return o.EndDayOfWeek, true
}

// HasEndDayOfWeek returns a boolean if a field has been set.
func (o *InstanceScheduleUpdate) HasEndDayOfWeek() bool {
	if o != nil && o.EndDayOfWeek != nil {
		return true
	}

	return false
}

// SetEndDayOfWeek gets a reference to the given int32 and assigns it to the EndDayOfWeek field.
func (o *InstanceScheduleUpdate) SetEndDayOfWeek(v int32) {
	o.EndDayOfWeek = &v
}

// GetEndTime returns the EndTime field value if set, zero value otherwise.
func (o *InstanceScheduleUpdate) GetEndTime() string {
	if o == nil || o.EndTime == nil {
		var ret string
		return ret
	}
	return *o.EndTime
}

// GetEndTimeOk returns a tuple with the EndTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceScheduleUpdate) GetEndTimeOk() (*string, bool) {
	if o == nil || o.EndTime == nil {
		return nil, false
	}
	return o.EndTime, true
}

// HasEndTime returns a boolean if a field has been set.
func (o *InstanceScheduleUpdate) HasEndTime() bool {
	if o != nil && o.EndTime != nil {
		return true
	}

	return false
}

// SetEndTime gets a reference to the given string and assigns it to the EndTime field.
func (o *InstanceScheduleUpdate) SetEndTime(v string) {
	o.EndTime = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *InstanceScheduleUpdate) GetStartDate() time.Time {
	if o == nil || o.StartDate == nil {
		var ret time.Time
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceScheduleUpdate) GetStartDateOk() (*time.Time, bool) {
	if o == nil || o.StartDate == nil {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *InstanceScheduleUpdate) HasStartDate() bool {
	if o != nil && o.StartDate != nil {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given time.Time and assigns it to the StartDate field.
func (o *InstanceScheduleUpdate) SetStartDate(v time.Time) {
	o.StartDate = &v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *InstanceScheduleUpdate) GetEndDate() time.Time {
	if o == nil || o.EndDate == nil {
		var ret time.Time
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceScheduleUpdate) GetEndDateOk() (*time.Time, bool) {
	if o == nil || o.EndDate == nil {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *InstanceScheduleUpdate) HasEndDate() bool {
	if o != nil && o.EndDate != nil {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given time.Time and assigns it to the EndDate field.
func (o *InstanceScheduleUpdate) SetEndDate(v time.Time) {
	o.EndDate = &v
}

// GetThreshold returns the Threshold field value if set, zero value otherwise.
func (o *InstanceScheduleUpdate) GetThreshold() InstanceScheduleUpdateThreshold {
	if o == nil || o.Threshold == nil {
		var ret InstanceScheduleUpdateThreshold
		return ret
	}
	return *o.Threshold
}

// GetThresholdOk returns a tuple with the Threshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceScheduleUpdate) GetThresholdOk() (*InstanceScheduleUpdateThreshold, bool) {
	if o == nil || o.Threshold == nil {
		return nil, false
	}
	return o.Threshold, true
}

// HasThreshold returns a boolean if a field has been set.
func (o *InstanceScheduleUpdate) HasThreshold() bool {
	if o != nil && o.Threshold != nil {
		return true
	}

	return false
}

// SetThreshold gets a reference to the given InstanceScheduleUpdateThreshold and assigns it to the Threshold field.
func (o *InstanceScheduleUpdate) SetThreshold(v InstanceScheduleUpdateThreshold) {
	o.Threshold = &v
}

func (o InstanceScheduleUpdate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ScheduleType != nil {
		toSerialize["scheduleType"] = o.ScheduleType
	}
	if o.ScheduleTimezone != nil {
		toSerialize["scheduleTimezone"] = o.ScheduleTimezone
	}
	if o.StartDayOfWeek != nil {
		toSerialize["startDayOfWeek"] = o.StartDayOfWeek
	}
	if o.StartTime != nil {
		toSerialize["startTime"] = o.StartTime
	}
	if o.EndDayOfWeek != nil {
		toSerialize["endDayOfWeek"] = o.EndDayOfWeek
	}
	if o.EndTime != nil {
		toSerialize["endTime"] = o.EndTime
	}
	if o.StartDate != nil {
		toSerialize["startDate"] = o.StartDate
	}
	if o.EndDate != nil {
		toSerialize["endDate"] = o.EndDate
	}
	if o.Threshold != nil {
		toSerialize["threshold"] = o.Threshold
	}
	return json.Marshal(toSerialize)
}

type NullableInstanceScheduleUpdate struct {
	value *InstanceScheduleUpdate
	isSet bool
}

func (v NullableInstanceScheduleUpdate) Get() *InstanceScheduleUpdate {
	return v.value
}

func (v *NullableInstanceScheduleUpdate) Set(val *InstanceScheduleUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableInstanceScheduleUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableInstanceScheduleUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstanceScheduleUpdate(val *InstanceScheduleUpdate) *NullableInstanceScheduleUpdate {
	return &NullableInstanceScheduleUpdate{value: val, isSet: true}
}

func (v NullableInstanceScheduleUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstanceScheduleUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


