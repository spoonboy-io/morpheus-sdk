/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ProvisioningLicenseReservations struct for ProvisioningLicenseReservations
type ProvisioningLicenseReservations struct {
	ResourceId *int64 `json:"resourceId,omitempty"`
	ResourceType *string `json:"resourceType,omitempty"`
}

// NewProvisioningLicenseReservations instantiates a new ProvisioningLicenseReservations object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProvisioningLicenseReservations() *ProvisioningLicenseReservations {
	this := ProvisioningLicenseReservations{}
	return &this
}

// NewProvisioningLicenseReservationsWithDefaults instantiates a new ProvisioningLicenseReservations object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProvisioningLicenseReservationsWithDefaults() *ProvisioningLicenseReservations {
	this := ProvisioningLicenseReservations{}
	return &this
}

// GetResourceId returns the ResourceId field value if set, zero value otherwise.
func (o *ProvisioningLicenseReservations) GetResourceId() int64 {
	if o == nil || o.ResourceId == nil {
		var ret int64
		return ret
	}
	return *o.ResourceId
}

// GetResourceIdOk returns a tuple with the ResourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisioningLicenseReservations) GetResourceIdOk() (*int64, bool) {
	if o == nil || o.ResourceId == nil {
		return nil, false
	}
	return o.ResourceId, true
}

// HasResourceId returns a boolean if a field has been set.
func (o *ProvisioningLicenseReservations) HasResourceId() bool {
	if o != nil && o.ResourceId != nil {
		return true
	}

	return false
}

// SetResourceId gets a reference to the given int64 and assigns it to the ResourceId field.
func (o *ProvisioningLicenseReservations) SetResourceId(v int64) {
	o.ResourceId = &v
}

// GetResourceType returns the ResourceType field value if set, zero value otherwise.
func (o *ProvisioningLicenseReservations) GetResourceType() string {
	if o == nil || o.ResourceType == nil {
		var ret string
		return ret
	}
	return *o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisioningLicenseReservations) GetResourceTypeOk() (*string, bool) {
	if o == nil || o.ResourceType == nil {
		return nil, false
	}
	return o.ResourceType, true
}

// HasResourceType returns a boolean if a field has been set.
func (o *ProvisioningLicenseReservations) HasResourceType() bool {
	if o != nil && o.ResourceType != nil {
		return true
	}

	return false
}

// SetResourceType gets a reference to the given string and assigns it to the ResourceType field.
func (o *ProvisioningLicenseReservations) SetResourceType(v string) {
	o.ResourceType = &v
}

func (o ProvisioningLicenseReservations) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ResourceId != nil {
		toSerialize["resourceId"] = o.ResourceId
	}
	if o.ResourceType != nil {
		toSerialize["resourceType"] = o.ResourceType
	}
	return json.Marshal(toSerialize)
}

type NullableProvisioningLicenseReservations struct {
	value *ProvisioningLicenseReservations
	isSet bool
}

func (v NullableProvisioningLicenseReservations) Get() *ProvisioningLicenseReservations {
	return v.value
}

func (v *NullableProvisioningLicenseReservations) Set(val *ProvisioningLicenseReservations) {
	v.value = val
	v.isSet = true
}

func (v NullableProvisioningLicenseReservations) IsSet() bool {
	return v.isSet
}

func (v *NullableProvisioningLicenseReservations) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProvisioningLicenseReservations(val *ProvisioningLicenseReservations) *NullableProvisioningLicenseReservations {
	return &NullableProvisioningLicenseReservations{value: val, isSet: true}
}

func (v NullableProvisioningLicenseReservations) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProvisioningLicenseReservations) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


