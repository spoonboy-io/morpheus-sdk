/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InstanceStateInput struct for InstanceStateInput
type InstanceStateInput struct {
	Variables *[]map[string]interface{} `json:"variables,omitempty"`
	Providers *[]map[string]interface{} `json:"providers,omitempty"`
	Data *[]map[string]interface{} `json:"data,omitempty"`
}

// NewInstanceStateInput instantiates a new InstanceStateInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstanceStateInput() *InstanceStateInput {
	this := InstanceStateInput{}
	return &this
}

// NewInstanceStateInputWithDefaults instantiates a new InstanceStateInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstanceStateInputWithDefaults() *InstanceStateInput {
	this := InstanceStateInput{}
	return &this
}

// GetVariables returns the Variables field value if set, zero value otherwise.
func (o *InstanceStateInput) GetVariables() []map[string]interface{} {
	if o == nil || o.Variables == nil {
		var ret []map[string]interface{}
		return ret
	}
	return *o.Variables
}

// GetVariablesOk returns a tuple with the Variables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceStateInput) GetVariablesOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.Variables == nil {
		return nil, false
	}
	return o.Variables, true
}

// HasVariables returns a boolean if a field has been set.
func (o *InstanceStateInput) HasVariables() bool {
	if o != nil && o.Variables != nil {
		return true
	}

	return false
}

// SetVariables gets a reference to the given []map[string]interface{} and assigns it to the Variables field.
func (o *InstanceStateInput) SetVariables(v []map[string]interface{}) {
	o.Variables = &v
}

// GetProviders returns the Providers field value if set, zero value otherwise.
func (o *InstanceStateInput) GetProviders() []map[string]interface{} {
	if o == nil || o.Providers == nil {
		var ret []map[string]interface{}
		return ret
	}
	return *o.Providers
}

// GetProvidersOk returns a tuple with the Providers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceStateInput) GetProvidersOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.Providers == nil {
		return nil, false
	}
	return o.Providers, true
}

// HasProviders returns a boolean if a field has been set.
func (o *InstanceStateInput) HasProviders() bool {
	if o != nil && o.Providers != nil {
		return true
	}

	return false
}

// SetProviders gets a reference to the given []map[string]interface{} and assigns it to the Providers field.
func (o *InstanceStateInput) SetProviders(v []map[string]interface{}) {
	o.Providers = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *InstanceStateInput) GetData() []map[string]interface{} {
	if o == nil || o.Data == nil {
		var ret []map[string]interface{}
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceStateInput) GetDataOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *InstanceStateInput) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given []map[string]interface{} and assigns it to the Data field.
func (o *InstanceStateInput) SetData(v []map[string]interface{}) {
	o.Data = &v
}

func (o InstanceStateInput) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Variables != nil {
		toSerialize["variables"] = o.Variables
	}
	if o.Providers != nil {
		toSerialize["providers"] = o.Providers
	}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	return json.Marshal(toSerialize)
}

type NullableInstanceStateInput struct {
	value *InstanceStateInput
	isSet bool
}

func (v NullableInstanceStateInput) Get() *InstanceStateInput {
	return v.value
}

func (v *NullableInstanceStateInput) Set(val *InstanceStateInput) {
	v.value = val
	v.isSet = true
}

func (v NullableInstanceStateInput) IsSet() bool {
	return v.isSet
}

func (v *NullableInstanceStateInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstanceStateInput(val *InstanceStateInput) *NullableInstanceStateInput {
	return &NullableInstanceStateInput{value: val, isSet: true}
}

func (v NullableInstanceStateInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstanceStateInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


