/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// DashboardLogStats struct for DashboardLogStats
type DashboardLogStats struct {
	Success *bool `json:"success,omitempty"`
	Data *[]DashboardLogStatsData `json:"data,omitempty"`
	StartMs *int64 `json:"startMs,omitempty"`
	Earliest *int64 `json:"earliest,omitempty"`
	EndMs *int64 `json:"endMs,omitempty"`
	Interval *int64 `json:"interval,omitempty"`
}

// NewDashboardLogStats instantiates a new DashboardLogStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDashboardLogStats() *DashboardLogStats {
	this := DashboardLogStats{}
	return &this
}

// NewDashboardLogStatsWithDefaults instantiates a new DashboardLogStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDashboardLogStatsWithDefaults() *DashboardLogStats {
	this := DashboardLogStats{}
	return &this
}

// GetSuccess returns the Success field value if set, zero value otherwise.
func (o *DashboardLogStats) GetSuccess() bool {
	if o == nil || o.Success == nil {
		var ret bool
		return ret
	}
	return *o.Success
}

// GetSuccessOk returns a tuple with the Success field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardLogStats) GetSuccessOk() (*bool, bool) {
	if o == nil || o.Success == nil {
		return nil, false
	}
	return o.Success, true
}

// HasSuccess returns a boolean if a field has been set.
func (o *DashboardLogStats) HasSuccess() bool {
	if o != nil && o.Success != nil {
		return true
	}

	return false
}

// SetSuccess gets a reference to the given bool and assigns it to the Success field.
func (o *DashboardLogStats) SetSuccess(v bool) {
	o.Success = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *DashboardLogStats) GetData() []DashboardLogStatsData {
	if o == nil || o.Data == nil {
		var ret []DashboardLogStatsData
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardLogStats) GetDataOk() (*[]DashboardLogStatsData, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *DashboardLogStats) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given []DashboardLogStatsData and assigns it to the Data field.
func (o *DashboardLogStats) SetData(v []DashboardLogStatsData) {
	o.Data = &v
}

// GetStartMs returns the StartMs field value if set, zero value otherwise.
func (o *DashboardLogStats) GetStartMs() int64 {
	if o == nil || o.StartMs == nil {
		var ret int64
		return ret
	}
	return *o.StartMs
}

// GetStartMsOk returns a tuple with the StartMs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardLogStats) GetStartMsOk() (*int64, bool) {
	if o == nil || o.StartMs == nil {
		return nil, false
	}
	return o.StartMs, true
}

// HasStartMs returns a boolean if a field has been set.
func (o *DashboardLogStats) HasStartMs() bool {
	if o != nil && o.StartMs != nil {
		return true
	}

	return false
}

// SetStartMs gets a reference to the given int64 and assigns it to the StartMs field.
func (o *DashboardLogStats) SetStartMs(v int64) {
	o.StartMs = &v
}

// GetEarliest returns the Earliest field value if set, zero value otherwise.
func (o *DashboardLogStats) GetEarliest() int64 {
	if o == nil || o.Earliest == nil {
		var ret int64
		return ret
	}
	return *o.Earliest
}

// GetEarliestOk returns a tuple with the Earliest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardLogStats) GetEarliestOk() (*int64, bool) {
	if o == nil || o.Earliest == nil {
		return nil, false
	}
	return o.Earliest, true
}

// HasEarliest returns a boolean if a field has been set.
func (o *DashboardLogStats) HasEarliest() bool {
	if o != nil && o.Earliest != nil {
		return true
	}

	return false
}

// SetEarliest gets a reference to the given int64 and assigns it to the Earliest field.
func (o *DashboardLogStats) SetEarliest(v int64) {
	o.Earliest = &v
}

// GetEndMs returns the EndMs field value if set, zero value otherwise.
func (o *DashboardLogStats) GetEndMs() int64 {
	if o == nil || o.EndMs == nil {
		var ret int64
		return ret
	}
	return *o.EndMs
}

// GetEndMsOk returns a tuple with the EndMs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardLogStats) GetEndMsOk() (*int64, bool) {
	if o == nil || o.EndMs == nil {
		return nil, false
	}
	return o.EndMs, true
}

// HasEndMs returns a boolean if a field has been set.
func (o *DashboardLogStats) HasEndMs() bool {
	if o != nil && o.EndMs != nil {
		return true
	}

	return false
}

// SetEndMs gets a reference to the given int64 and assigns it to the EndMs field.
func (o *DashboardLogStats) SetEndMs(v int64) {
	o.EndMs = &v
}

// GetInterval returns the Interval field value if set, zero value otherwise.
func (o *DashboardLogStats) GetInterval() int64 {
	if o == nil || o.Interval == nil {
		var ret int64
		return ret
	}
	return *o.Interval
}

// GetIntervalOk returns a tuple with the Interval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardLogStats) GetIntervalOk() (*int64, bool) {
	if o == nil || o.Interval == nil {
		return nil, false
	}
	return o.Interval, true
}

// HasInterval returns a boolean if a field has been set.
func (o *DashboardLogStats) HasInterval() bool {
	if o != nil && o.Interval != nil {
		return true
	}

	return false
}

// SetInterval gets a reference to the given int64 and assigns it to the Interval field.
func (o *DashboardLogStats) SetInterval(v int64) {
	o.Interval = &v
}

func (o DashboardLogStats) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Success != nil {
		toSerialize["success"] = o.Success
	}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	if o.StartMs != nil {
		toSerialize["startMs"] = o.StartMs
	}
	if o.Earliest != nil {
		toSerialize["earliest"] = o.Earliest
	}
	if o.EndMs != nil {
		toSerialize["endMs"] = o.EndMs
	}
	if o.Interval != nil {
		toSerialize["interval"] = o.Interval
	}
	return json.Marshal(toSerialize)
}

type NullableDashboardLogStats struct {
	value *DashboardLogStats
	isSet bool
}

func (v NullableDashboardLogStats) Get() *DashboardLogStats {
	return v.value
}

func (v *NullableDashboardLogStats) Set(val *DashboardLogStats) {
	v.value = val
	v.isSet = true
}

func (v NullableDashboardLogStats) IsSet() bool {
	return v.isSet
}

func (v *NullableDashboardLogStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDashboardLogStats(val *DashboardLogStats) *NullableDashboardLogStats {
	return &NullableDashboardLogStats{value: val, isSet: true}
}

func (v NullableDashboardLogStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDashboardLogStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


