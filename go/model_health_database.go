/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// HealthDatabase struct for HealthDatabase
type HealthDatabase struct {
	Success *bool `json:"success,omitempty"`
	ConnectionList []map[string]interface{} `json:"connectionList,omitempty"`
	BusyConnections *[]string `json:"busyConnections,omitempty"`
	MaxConnections *int64 `json:"maxConnections,omitempty"`
	MaxUsedConnections *int64 `json:"maxUsedConnections,omitempty"`
	UsedConnections *int64 `json:"usedConnections,omitempty"`
	AbortedConnections *int64 `json:"abortedConnections,omitempty"`
	InnodbStatus NullableString `json:"innodbStatus,omitempty"`
	Stats *HealthDatabaseStats `json:"stats,omitempty"`
	Scans *HealthDatabaseScans `json:"scans,omitempty"`
	SlowQueries *[]HealthDatabaseSlowQueries `json:"slowQueries,omitempty"`
	InnodbStats *HealthDatabaseInnodbStats `json:"innodbStats,omitempty"`
	ScanPercent *float32 `json:"scanPercent,omitempty"`
	Status *string `json:"status,omitempty"`
}

// NewHealthDatabase instantiates a new HealthDatabase object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHealthDatabase() *HealthDatabase {
	this := HealthDatabase{}
	return &this
}

// NewHealthDatabaseWithDefaults instantiates a new HealthDatabase object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHealthDatabaseWithDefaults() *HealthDatabase {
	this := HealthDatabase{}
	return &this
}

// GetSuccess returns the Success field value if set, zero value otherwise.
func (o *HealthDatabase) GetSuccess() bool {
	if o == nil || o.Success == nil {
		var ret bool
		return ret
	}
	return *o.Success
}

// GetSuccessOk returns a tuple with the Success field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HealthDatabase) GetSuccessOk() (*bool, bool) {
	if o == nil || o.Success == nil {
		return nil, false
	}
	return o.Success, true
}

// HasSuccess returns a boolean if a field has been set.
func (o *HealthDatabase) HasSuccess() bool {
	if o != nil && o.Success != nil {
		return true
	}

	return false
}

// SetSuccess gets a reference to the given bool and assigns it to the Success field.
func (o *HealthDatabase) SetSuccess(v bool) {
	o.Success = &v
}

// GetConnectionList returns the ConnectionList field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HealthDatabase) GetConnectionList() []map[string]interface{} {
	if o == nil  {
		var ret []map[string]interface{}
		return ret
	}
	return o.ConnectionList
}

// GetConnectionListOk returns a tuple with the ConnectionList field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HealthDatabase) GetConnectionListOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.ConnectionList == nil {
		return nil, false
	}
	return &o.ConnectionList, true
}

// HasConnectionList returns a boolean if a field has been set.
func (o *HealthDatabase) HasConnectionList() bool {
	if o != nil && o.ConnectionList != nil {
		return true
	}

	return false
}

// SetConnectionList gets a reference to the given []map[string]interface{} and assigns it to the ConnectionList field.
func (o *HealthDatabase) SetConnectionList(v []map[string]interface{}) {
	o.ConnectionList = v
}

// GetBusyConnections returns the BusyConnections field value if set, zero value otherwise.
func (o *HealthDatabase) GetBusyConnections() []string {
	if o == nil || o.BusyConnections == nil {
		var ret []string
		return ret
	}
	return *o.BusyConnections
}

// GetBusyConnectionsOk returns a tuple with the BusyConnections field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HealthDatabase) GetBusyConnectionsOk() (*[]string, bool) {
	if o == nil || o.BusyConnections == nil {
		return nil, false
	}
	return o.BusyConnections, true
}

// HasBusyConnections returns a boolean if a field has been set.
func (o *HealthDatabase) HasBusyConnections() bool {
	if o != nil && o.BusyConnections != nil {
		return true
	}

	return false
}

// SetBusyConnections gets a reference to the given []string and assigns it to the BusyConnections field.
func (o *HealthDatabase) SetBusyConnections(v []string) {
	o.BusyConnections = &v
}

// GetMaxConnections returns the MaxConnections field value if set, zero value otherwise.
func (o *HealthDatabase) GetMaxConnections() int64 {
	if o == nil || o.MaxConnections == nil {
		var ret int64
		return ret
	}
	return *o.MaxConnections
}

// GetMaxConnectionsOk returns a tuple with the MaxConnections field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HealthDatabase) GetMaxConnectionsOk() (*int64, bool) {
	if o == nil || o.MaxConnections == nil {
		return nil, false
	}
	return o.MaxConnections, true
}

// HasMaxConnections returns a boolean if a field has been set.
func (o *HealthDatabase) HasMaxConnections() bool {
	if o != nil && o.MaxConnections != nil {
		return true
	}

	return false
}

// SetMaxConnections gets a reference to the given int64 and assigns it to the MaxConnections field.
func (o *HealthDatabase) SetMaxConnections(v int64) {
	o.MaxConnections = &v
}

// GetMaxUsedConnections returns the MaxUsedConnections field value if set, zero value otherwise.
func (o *HealthDatabase) GetMaxUsedConnections() int64 {
	if o == nil || o.MaxUsedConnections == nil {
		var ret int64
		return ret
	}
	return *o.MaxUsedConnections
}

// GetMaxUsedConnectionsOk returns a tuple with the MaxUsedConnections field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HealthDatabase) GetMaxUsedConnectionsOk() (*int64, bool) {
	if o == nil || o.MaxUsedConnections == nil {
		return nil, false
	}
	return o.MaxUsedConnections, true
}

// HasMaxUsedConnections returns a boolean if a field has been set.
func (o *HealthDatabase) HasMaxUsedConnections() bool {
	if o != nil && o.MaxUsedConnections != nil {
		return true
	}

	return false
}

// SetMaxUsedConnections gets a reference to the given int64 and assigns it to the MaxUsedConnections field.
func (o *HealthDatabase) SetMaxUsedConnections(v int64) {
	o.MaxUsedConnections = &v
}

// GetUsedConnections returns the UsedConnections field value if set, zero value otherwise.
func (o *HealthDatabase) GetUsedConnections() int64 {
	if o == nil || o.UsedConnections == nil {
		var ret int64
		return ret
	}
	return *o.UsedConnections
}

// GetUsedConnectionsOk returns a tuple with the UsedConnections field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HealthDatabase) GetUsedConnectionsOk() (*int64, bool) {
	if o == nil || o.UsedConnections == nil {
		return nil, false
	}
	return o.UsedConnections, true
}

// HasUsedConnections returns a boolean if a field has been set.
func (o *HealthDatabase) HasUsedConnections() bool {
	if o != nil && o.UsedConnections != nil {
		return true
	}

	return false
}

// SetUsedConnections gets a reference to the given int64 and assigns it to the UsedConnections field.
func (o *HealthDatabase) SetUsedConnections(v int64) {
	o.UsedConnections = &v
}

// GetAbortedConnections returns the AbortedConnections field value if set, zero value otherwise.
func (o *HealthDatabase) GetAbortedConnections() int64 {
	if o == nil || o.AbortedConnections == nil {
		var ret int64
		return ret
	}
	return *o.AbortedConnections
}

// GetAbortedConnectionsOk returns a tuple with the AbortedConnections field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HealthDatabase) GetAbortedConnectionsOk() (*int64, bool) {
	if o == nil || o.AbortedConnections == nil {
		return nil, false
	}
	return o.AbortedConnections, true
}

// HasAbortedConnections returns a boolean if a field has been set.
func (o *HealthDatabase) HasAbortedConnections() bool {
	if o != nil && o.AbortedConnections != nil {
		return true
	}

	return false
}

// SetAbortedConnections gets a reference to the given int64 and assigns it to the AbortedConnections field.
func (o *HealthDatabase) SetAbortedConnections(v int64) {
	o.AbortedConnections = &v
}

// GetInnodbStatus returns the InnodbStatus field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HealthDatabase) GetInnodbStatus() string {
	if o == nil || o.InnodbStatus.Get() == nil {
		var ret string
		return ret
	}
	return *o.InnodbStatus.Get()
}

// GetInnodbStatusOk returns a tuple with the InnodbStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HealthDatabase) GetInnodbStatusOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.InnodbStatus.Get(), o.InnodbStatus.IsSet()
}

// HasInnodbStatus returns a boolean if a field has been set.
func (o *HealthDatabase) HasInnodbStatus() bool {
	if o != nil && o.InnodbStatus.IsSet() {
		return true
	}

	return false
}

// SetInnodbStatus gets a reference to the given NullableString and assigns it to the InnodbStatus field.
func (o *HealthDatabase) SetInnodbStatus(v string) {
	o.InnodbStatus.Set(&v)
}
// SetInnodbStatusNil sets the value for InnodbStatus to be an explicit nil
func (o *HealthDatabase) SetInnodbStatusNil() {
	o.InnodbStatus.Set(nil)
}

// UnsetInnodbStatus ensures that no value is present for InnodbStatus, not even an explicit nil
func (o *HealthDatabase) UnsetInnodbStatus() {
	o.InnodbStatus.Unset()
}

// GetStats returns the Stats field value if set, zero value otherwise.
func (o *HealthDatabase) GetStats() HealthDatabaseStats {
	if o == nil || o.Stats == nil {
		var ret HealthDatabaseStats
		return ret
	}
	return *o.Stats
}

// GetStatsOk returns a tuple with the Stats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HealthDatabase) GetStatsOk() (*HealthDatabaseStats, bool) {
	if o == nil || o.Stats == nil {
		return nil, false
	}
	return o.Stats, true
}

// HasStats returns a boolean if a field has been set.
func (o *HealthDatabase) HasStats() bool {
	if o != nil && o.Stats != nil {
		return true
	}

	return false
}

// SetStats gets a reference to the given HealthDatabaseStats and assigns it to the Stats field.
func (o *HealthDatabase) SetStats(v HealthDatabaseStats) {
	o.Stats = &v
}

// GetScans returns the Scans field value if set, zero value otherwise.
func (o *HealthDatabase) GetScans() HealthDatabaseScans {
	if o == nil || o.Scans == nil {
		var ret HealthDatabaseScans
		return ret
	}
	return *o.Scans
}

// GetScansOk returns a tuple with the Scans field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HealthDatabase) GetScansOk() (*HealthDatabaseScans, bool) {
	if o == nil || o.Scans == nil {
		return nil, false
	}
	return o.Scans, true
}

// HasScans returns a boolean if a field has been set.
func (o *HealthDatabase) HasScans() bool {
	if o != nil && o.Scans != nil {
		return true
	}

	return false
}

// SetScans gets a reference to the given HealthDatabaseScans and assigns it to the Scans field.
func (o *HealthDatabase) SetScans(v HealthDatabaseScans) {
	o.Scans = &v
}

// GetSlowQueries returns the SlowQueries field value if set, zero value otherwise.
func (o *HealthDatabase) GetSlowQueries() []HealthDatabaseSlowQueries {
	if o == nil || o.SlowQueries == nil {
		var ret []HealthDatabaseSlowQueries
		return ret
	}
	return *o.SlowQueries
}

// GetSlowQueriesOk returns a tuple with the SlowQueries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HealthDatabase) GetSlowQueriesOk() (*[]HealthDatabaseSlowQueries, bool) {
	if o == nil || o.SlowQueries == nil {
		return nil, false
	}
	return o.SlowQueries, true
}

// HasSlowQueries returns a boolean if a field has been set.
func (o *HealthDatabase) HasSlowQueries() bool {
	if o != nil && o.SlowQueries != nil {
		return true
	}

	return false
}

// SetSlowQueries gets a reference to the given []HealthDatabaseSlowQueries and assigns it to the SlowQueries field.
func (o *HealthDatabase) SetSlowQueries(v []HealthDatabaseSlowQueries) {
	o.SlowQueries = &v
}

// GetInnodbStats returns the InnodbStats field value if set, zero value otherwise.
func (o *HealthDatabase) GetInnodbStats() HealthDatabaseInnodbStats {
	if o == nil || o.InnodbStats == nil {
		var ret HealthDatabaseInnodbStats
		return ret
	}
	return *o.InnodbStats
}

// GetInnodbStatsOk returns a tuple with the InnodbStats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HealthDatabase) GetInnodbStatsOk() (*HealthDatabaseInnodbStats, bool) {
	if o == nil || o.InnodbStats == nil {
		return nil, false
	}
	return o.InnodbStats, true
}

// HasInnodbStats returns a boolean if a field has been set.
func (o *HealthDatabase) HasInnodbStats() bool {
	if o != nil && o.InnodbStats != nil {
		return true
	}

	return false
}

// SetInnodbStats gets a reference to the given HealthDatabaseInnodbStats and assigns it to the InnodbStats field.
func (o *HealthDatabase) SetInnodbStats(v HealthDatabaseInnodbStats) {
	o.InnodbStats = &v
}

// GetScanPercent returns the ScanPercent field value if set, zero value otherwise.
func (o *HealthDatabase) GetScanPercent() float32 {
	if o == nil || o.ScanPercent == nil {
		var ret float32
		return ret
	}
	return *o.ScanPercent
}

// GetScanPercentOk returns a tuple with the ScanPercent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HealthDatabase) GetScanPercentOk() (*float32, bool) {
	if o == nil || o.ScanPercent == nil {
		return nil, false
	}
	return o.ScanPercent, true
}

// HasScanPercent returns a boolean if a field has been set.
func (o *HealthDatabase) HasScanPercent() bool {
	if o != nil && o.ScanPercent != nil {
		return true
	}

	return false
}

// SetScanPercent gets a reference to the given float32 and assigns it to the ScanPercent field.
func (o *HealthDatabase) SetScanPercent(v float32) {
	o.ScanPercent = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *HealthDatabase) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HealthDatabase) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *HealthDatabase) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *HealthDatabase) SetStatus(v string) {
	o.Status = &v
}

func (o HealthDatabase) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Success != nil {
		toSerialize["success"] = o.Success
	}
	if o.ConnectionList != nil {
		toSerialize["connectionList"] = o.ConnectionList
	}
	if o.BusyConnections != nil {
		toSerialize["busyConnections"] = o.BusyConnections
	}
	if o.MaxConnections != nil {
		toSerialize["maxConnections"] = o.MaxConnections
	}
	if o.MaxUsedConnections != nil {
		toSerialize["maxUsedConnections"] = o.MaxUsedConnections
	}
	if o.UsedConnections != nil {
		toSerialize["usedConnections"] = o.UsedConnections
	}
	if o.AbortedConnections != nil {
		toSerialize["abortedConnections"] = o.AbortedConnections
	}
	if o.InnodbStatus.IsSet() {
		toSerialize["innodbStatus"] = o.InnodbStatus.Get()
	}
	if o.Stats != nil {
		toSerialize["stats"] = o.Stats
	}
	if o.Scans != nil {
		toSerialize["scans"] = o.Scans
	}
	if o.SlowQueries != nil {
		toSerialize["slowQueries"] = o.SlowQueries
	}
	if o.InnodbStats != nil {
		toSerialize["innodbStats"] = o.InnodbStats
	}
	if o.ScanPercent != nil {
		toSerialize["scanPercent"] = o.ScanPercent
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	return json.Marshal(toSerialize)
}

type NullableHealthDatabase struct {
	value *HealthDatabase
	isSet bool
}

func (v NullableHealthDatabase) Get() *HealthDatabase {
	return v.value
}

func (v *NullableHealthDatabase) Set(val *HealthDatabase) {
	v.value = val
	v.isSet = true
}

func (v NullableHealthDatabase) IsSet() bool {
	return v.isSet
}

func (v *NullableHealthDatabase) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHealthDatabase(val *HealthDatabase) *NullableHealthDatabase {
	return &NullableHealthDatabase{value: val, isSet: true}
}

func (v NullableHealthDatabase) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHealthDatabase) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


