/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 6.1.1
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// UpdateCatalogItemTypeRequestCatalogItemType struct for UpdateCatalogItemTypeRequestCatalogItemType
type UpdateCatalogItemTypeRequestCatalogItemType struct {
	CatalogItemTypeBlueprintUpdate *CatalogItemTypeBlueprintUpdate
	CatalogItemTypeInstanceUpdate *CatalogItemTypeInstanceUpdate
	CatalogItemTypeWorkflowUpdate *CatalogItemTypeWorkflowUpdate
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *UpdateCatalogItemTypeRequestCatalogItemType) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into CatalogItemTypeBlueprintUpdate
	err = json.Unmarshal(data, &dst.CatalogItemTypeBlueprintUpdate);
	if err == nil {
		jsonCatalogItemTypeBlueprintUpdate, _ := json.Marshal(dst.CatalogItemTypeBlueprintUpdate)
		if string(jsonCatalogItemTypeBlueprintUpdate) == "{}" { // empty struct
			dst.CatalogItemTypeBlueprintUpdate = nil
		} else {
			return nil // data stored in dst.CatalogItemTypeBlueprintUpdate, return on the first match
		}
	} else {
		dst.CatalogItemTypeBlueprintUpdate = nil
	}

	// try to unmarshal JSON data into CatalogItemTypeInstanceUpdate
	err = json.Unmarshal(data, &dst.CatalogItemTypeInstanceUpdate);
	if err == nil {
		jsonCatalogItemTypeInstanceUpdate, _ := json.Marshal(dst.CatalogItemTypeInstanceUpdate)
		if string(jsonCatalogItemTypeInstanceUpdate) == "{}" { // empty struct
			dst.CatalogItemTypeInstanceUpdate = nil
		} else {
			return nil // data stored in dst.CatalogItemTypeInstanceUpdate, return on the first match
		}
	} else {
		dst.CatalogItemTypeInstanceUpdate = nil
	}

	// try to unmarshal JSON data into CatalogItemTypeWorkflowUpdate
	err = json.Unmarshal(data, &dst.CatalogItemTypeWorkflowUpdate);
	if err == nil {
		jsonCatalogItemTypeWorkflowUpdate, _ := json.Marshal(dst.CatalogItemTypeWorkflowUpdate)
		if string(jsonCatalogItemTypeWorkflowUpdate) == "{}" { // empty struct
			dst.CatalogItemTypeWorkflowUpdate = nil
		} else {
			return nil // data stored in dst.CatalogItemTypeWorkflowUpdate, return on the first match
		}
	} else {
		dst.CatalogItemTypeWorkflowUpdate = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(UpdateCatalogItemTypeRequestCatalogItemType)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *UpdateCatalogItemTypeRequestCatalogItemType) MarshalJSON() ([]byte, error) {
	if src.CatalogItemTypeBlueprintUpdate != nil {
		return json.Marshal(&src.CatalogItemTypeBlueprintUpdate)
	}

	if src.CatalogItemTypeInstanceUpdate != nil {
		return json.Marshal(&src.CatalogItemTypeInstanceUpdate)
	}

	if src.CatalogItemTypeWorkflowUpdate != nil {
		return json.Marshal(&src.CatalogItemTypeWorkflowUpdate)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableUpdateCatalogItemTypeRequestCatalogItemType struct {
	value *UpdateCatalogItemTypeRequestCatalogItemType
	isSet bool
}

func (v NullableUpdateCatalogItemTypeRequestCatalogItemType) Get() *UpdateCatalogItemTypeRequestCatalogItemType {
	return v.value
}

func (v *NullableUpdateCatalogItemTypeRequestCatalogItemType) Set(val *UpdateCatalogItemTypeRequestCatalogItemType) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateCatalogItemTypeRequestCatalogItemType) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateCatalogItemTypeRequestCatalogItemType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateCatalogItemTypeRequestCatalogItemType(val *UpdateCatalogItemTypeRequestCatalogItemType) *NullableUpdateCatalogItemTypeRequestCatalogItemType {
	return &NullableUpdateCatalogItemTypeRequestCatalogItemType{value: val, isSet: true}
}

func (v NullableUpdateCatalogItemTypeRequestCatalogItemType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateCatalogItemTypeRequestCatalogItemType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


