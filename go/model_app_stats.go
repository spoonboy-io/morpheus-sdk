/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 6.1.1
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the AppStats type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AppStats{}

// AppStats struct for AppStats
type AppStats struct {
	UsedMemory *int64 `json:"usedMemory,omitempty"`
	MaxMemory *int64 `json:"maxMemory,omitempty"`
	UsedStorage *int64 `json:"usedStorage,omitempty"`
	MaxStorage *int64 `json:"maxStorage,omitempty"`
	Running *int64 `json:"running,omitempty"`
	Total *int64 `json:"total,omitempty"`
	CpuUsage *float32 `json:"cpuUsage,omitempty"`
	InstanceCount *int64 `json:"instanceCount,omitempty"`
	InstanceDayCount []int64 `json:"instanceDayCount,omitempty"`
	InstanceDayCountTotal *int64 `json:"instanceDayCountTotal,omitempty"`
}

// NewAppStats instantiates a new AppStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppStats() *AppStats {
	this := AppStats{}
	return &this
}

// NewAppStatsWithDefaults instantiates a new AppStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppStatsWithDefaults() *AppStats {
	this := AppStats{}
	return &this
}

// GetUsedMemory returns the UsedMemory field value if set, zero value otherwise.
func (o *AppStats) GetUsedMemory() int64 {
	if o == nil || IsNil(o.UsedMemory) {
		var ret int64
		return ret
	}
	return *o.UsedMemory
}

// GetUsedMemoryOk returns a tuple with the UsedMemory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppStats) GetUsedMemoryOk() (*int64, bool) {
	if o == nil || IsNil(o.UsedMemory) {
		return nil, false
	}
	return o.UsedMemory, true
}

// HasUsedMemory returns a boolean if a field has been set.
func (o *AppStats) HasUsedMemory() bool {
	if o != nil && !IsNil(o.UsedMemory) {
		return true
	}

	return false
}

// SetUsedMemory gets a reference to the given int64 and assigns it to the UsedMemory field.
func (o *AppStats) SetUsedMemory(v int64) {
	o.UsedMemory = &v
}

// GetMaxMemory returns the MaxMemory field value if set, zero value otherwise.
func (o *AppStats) GetMaxMemory() int64 {
	if o == nil || IsNil(o.MaxMemory) {
		var ret int64
		return ret
	}
	return *o.MaxMemory
}

// GetMaxMemoryOk returns a tuple with the MaxMemory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppStats) GetMaxMemoryOk() (*int64, bool) {
	if o == nil || IsNil(o.MaxMemory) {
		return nil, false
	}
	return o.MaxMemory, true
}

// HasMaxMemory returns a boolean if a field has been set.
func (o *AppStats) HasMaxMemory() bool {
	if o != nil && !IsNil(o.MaxMemory) {
		return true
	}

	return false
}

// SetMaxMemory gets a reference to the given int64 and assigns it to the MaxMemory field.
func (o *AppStats) SetMaxMemory(v int64) {
	o.MaxMemory = &v
}

// GetUsedStorage returns the UsedStorage field value if set, zero value otherwise.
func (o *AppStats) GetUsedStorage() int64 {
	if o == nil || IsNil(o.UsedStorage) {
		var ret int64
		return ret
	}
	return *o.UsedStorage
}

// GetUsedStorageOk returns a tuple with the UsedStorage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppStats) GetUsedStorageOk() (*int64, bool) {
	if o == nil || IsNil(o.UsedStorage) {
		return nil, false
	}
	return o.UsedStorage, true
}

// HasUsedStorage returns a boolean if a field has been set.
func (o *AppStats) HasUsedStorage() bool {
	if o != nil && !IsNil(o.UsedStorage) {
		return true
	}

	return false
}

// SetUsedStorage gets a reference to the given int64 and assigns it to the UsedStorage field.
func (o *AppStats) SetUsedStorage(v int64) {
	o.UsedStorage = &v
}

// GetMaxStorage returns the MaxStorage field value if set, zero value otherwise.
func (o *AppStats) GetMaxStorage() int64 {
	if o == nil || IsNil(o.MaxStorage) {
		var ret int64
		return ret
	}
	return *o.MaxStorage
}

// GetMaxStorageOk returns a tuple with the MaxStorage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppStats) GetMaxStorageOk() (*int64, bool) {
	if o == nil || IsNil(o.MaxStorage) {
		return nil, false
	}
	return o.MaxStorage, true
}

// HasMaxStorage returns a boolean if a field has been set.
func (o *AppStats) HasMaxStorage() bool {
	if o != nil && !IsNil(o.MaxStorage) {
		return true
	}

	return false
}

// SetMaxStorage gets a reference to the given int64 and assigns it to the MaxStorage field.
func (o *AppStats) SetMaxStorage(v int64) {
	o.MaxStorage = &v
}

// GetRunning returns the Running field value if set, zero value otherwise.
func (o *AppStats) GetRunning() int64 {
	if o == nil || IsNil(o.Running) {
		var ret int64
		return ret
	}
	return *o.Running
}

// GetRunningOk returns a tuple with the Running field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppStats) GetRunningOk() (*int64, bool) {
	if o == nil || IsNil(o.Running) {
		return nil, false
	}
	return o.Running, true
}

// HasRunning returns a boolean if a field has been set.
func (o *AppStats) HasRunning() bool {
	if o != nil && !IsNil(o.Running) {
		return true
	}

	return false
}

// SetRunning gets a reference to the given int64 and assigns it to the Running field.
func (o *AppStats) SetRunning(v int64) {
	o.Running = &v
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *AppStats) GetTotal() int64 {
	if o == nil || IsNil(o.Total) {
		var ret int64
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppStats) GetTotalOk() (*int64, bool) {
	if o == nil || IsNil(o.Total) {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *AppStats) HasTotal() bool {
	if o != nil && !IsNil(o.Total) {
		return true
	}

	return false
}

// SetTotal gets a reference to the given int64 and assigns it to the Total field.
func (o *AppStats) SetTotal(v int64) {
	o.Total = &v
}

// GetCpuUsage returns the CpuUsage field value if set, zero value otherwise.
func (o *AppStats) GetCpuUsage() float32 {
	if o == nil || IsNil(o.CpuUsage) {
		var ret float32
		return ret
	}
	return *o.CpuUsage
}

// GetCpuUsageOk returns a tuple with the CpuUsage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppStats) GetCpuUsageOk() (*float32, bool) {
	if o == nil || IsNil(o.CpuUsage) {
		return nil, false
	}
	return o.CpuUsage, true
}

// HasCpuUsage returns a boolean if a field has been set.
func (o *AppStats) HasCpuUsage() bool {
	if o != nil && !IsNil(o.CpuUsage) {
		return true
	}

	return false
}

// SetCpuUsage gets a reference to the given float32 and assigns it to the CpuUsage field.
func (o *AppStats) SetCpuUsage(v float32) {
	o.CpuUsage = &v
}

// GetInstanceCount returns the InstanceCount field value if set, zero value otherwise.
func (o *AppStats) GetInstanceCount() int64 {
	if o == nil || IsNil(o.InstanceCount) {
		var ret int64
		return ret
	}
	return *o.InstanceCount
}

// GetInstanceCountOk returns a tuple with the InstanceCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppStats) GetInstanceCountOk() (*int64, bool) {
	if o == nil || IsNil(o.InstanceCount) {
		return nil, false
	}
	return o.InstanceCount, true
}

// HasInstanceCount returns a boolean if a field has been set.
func (o *AppStats) HasInstanceCount() bool {
	if o != nil && !IsNil(o.InstanceCount) {
		return true
	}

	return false
}

// SetInstanceCount gets a reference to the given int64 and assigns it to the InstanceCount field.
func (o *AppStats) SetInstanceCount(v int64) {
	o.InstanceCount = &v
}

// GetInstanceDayCount returns the InstanceDayCount field value if set, zero value otherwise.
func (o *AppStats) GetInstanceDayCount() []int64 {
	if o == nil || IsNil(o.InstanceDayCount) {
		var ret []int64
		return ret
	}
	return o.InstanceDayCount
}

// GetInstanceDayCountOk returns a tuple with the InstanceDayCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppStats) GetInstanceDayCountOk() ([]int64, bool) {
	if o == nil || IsNil(o.InstanceDayCount) {
		return nil, false
	}
	return o.InstanceDayCount, true
}

// HasInstanceDayCount returns a boolean if a field has been set.
func (o *AppStats) HasInstanceDayCount() bool {
	if o != nil && !IsNil(o.InstanceDayCount) {
		return true
	}

	return false
}

// SetInstanceDayCount gets a reference to the given []int64 and assigns it to the InstanceDayCount field.
func (o *AppStats) SetInstanceDayCount(v []int64) {
	o.InstanceDayCount = v
}

// GetInstanceDayCountTotal returns the InstanceDayCountTotal field value if set, zero value otherwise.
func (o *AppStats) GetInstanceDayCountTotal() int64 {
	if o == nil || IsNil(o.InstanceDayCountTotal) {
		var ret int64
		return ret
	}
	return *o.InstanceDayCountTotal
}

// GetInstanceDayCountTotalOk returns a tuple with the InstanceDayCountTotal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppStats) GetInstanceDayCountTotalOk() (*int64, bool) {
	if o == nil || IsNil(o.InstanceDayCountTotal) {
		return nil, false
	}
	return o.InstanceDayCountTotal, true
}

// HasInstanceDayCountTotal returns a boolean if a field has been set.
func (o *AppStats) HasInstanceDayCountTotal() bool {
	if o != nil && !IsNil(o.InstanceDayCountTotal) {
		return true
	}

	return false
}

// SetInstanceDayCountTotal gets a reference to the given int64 and assigns it to the InstanceDayCountTotal field.
func (o *AppStats) SetInstanceDayCountTotal(v int64) {
	o.InstanceDayCountTotal = &v
}

func (o AppStats) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AppStats) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UsedMemory) {
		toSerialize["usedMemory"] = o.UsedMemory
	}
	if !IsNil(o.MaxMemory) {
		toSerialize["maxMemory"] = o.MaxMemory
	}
	if !IsNil(o.UsedStorage) {
		toSerialize["usedStorage"] = o.UsedStorage
	}
	if !IsNil(o.MaxStorage) {
		toSerialize["maxStorage"] = o.MaxStorage
	}
	if !IsNil(o.Running) {
		toSerialize["running"] = o.Running
	}
	if !IsNil(o.Total) {
		toSerialize["total"] = o.Total
	}
	if !IsNil(o.CpuUsage) {
		toSerialize["cpuUsage"] = o.CpuUsage
	}
	if !IsNil(o.InstanceCount) {
		toSerialize["instanceCount"] = o.InstanceCount
	}
	if !IsNil(o.InstanceDayCount) {
		toSerialize["instanceDayCount"] = o.InstanceDayCount
	}
	if !IsNil(o.InstanceDayCountTotal) {
		toSerialize["instanceDayCountTotal"] = o.InstanceDayCountTotal
	}
	return toSerialize, nil
}

type NullableAppStats struct {
	value *AppStats
	isSet bool
}

func (v NullableAppStats) Get() *AppStats {
	return v.value
}

func (v *NullableAppStats) Set(val *AppStats) {
	v.value = val
	v.isSet = true
}

func (v NullableAppStats) IsSet() bool {
	return v.isSet
}

func (v *NullableAppStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppStats(val *AppStats) *NullableAppStats {
	return &NullableAppStats{value: val, isSet: true}
}

func (v NullableAppStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


