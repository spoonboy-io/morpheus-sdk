/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// BackupLastResult struct for BackupLastResult
type BackupLastResult struct {
	// Last Result ID
	Id *int64 `json:"id,omitempty"`
	// Last Result Status
	Name *string `json:"name,omitempty"`
	// Last Result Date Created
	DateCreated *time.Time `json:"dateCreated,omitempty"`
}

// NewBackupLastResult instantiates a new BackupLastResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBackupLastResult() *BackupLastResult {
	this := BackupLastResult{}
	return &this
}

// NewBackupLastResultWithDefaults instantiates a new BackupLastResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBackupLastResultWithDefaults() *BackupLastResult {
	this := BackupLastResult{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *BackupLastResult) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupLastResult) GetIdOk() (*int64, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *BackupLastResult) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *BackupLastResult) SetId(v int64) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *BackupLastResult) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupLastResult) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *BackupLastResult) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *BackupLastResult) SetName(v string) {
	o.Name = &v
}

// GetDateCreated returns the DateCreated field value if set, zero value otherwise.
func (o *BackupLastResult) GetDateCreated() time.Time {
	if o == nil || o.DateCreated == nil {
		var ret time.Time
		return ret
	}
	return *o.DateCreated
}

// GetDateCreatedOk returns a tuple with the DateCreated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupLastResult) GetDateCreatedOk() (*time.Time, bool) {
	if o == nil || o.DateCreated == nil {
		return nil, false
	}
	return o.DateCreated, true
}

// HasDateCreated returns a boolean if a field has been set.
func (o *BackupLastResult) HasDateCreated() bool {
	if o != nil && o.DateCreated != nil {
		return true
	}

	return false
}

// SetDateCreated gets a reference to the given time.Time and assigns it to the DateCreated field.
func (o *BackupLastResult) SetDateCreated(v time.Time) {
	o.DateCreated = &v
}

func (o BackupLastResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.DateCreated != nil {
		toSerialize["dateCreated"] = o.DateCreated
	}
	return json.Marshal(toSerialize)
}

type NullableBackupLastResult struct {
	value *BackupLastResult
	isSet bool
}

func (v NullableBackupLastResult) Get() *BackupLastResult {
	return v.value
}

func (v *NullableBackupLastResult) Set(val *BackupLastResult) {
	v.value = val
	v.isSet = true
}

func (v NullableBackupLastResult) IsSet() bool {
	return v.isSet
}

func (v *NullableBackupLastResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBackupLastResult(val *BackupLastResult) *NullableBackupLastResult {
	return &NullableBackupLastResult{value: val, isSet: true}
}

func (v NullableBackupLastResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBackupLastResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


