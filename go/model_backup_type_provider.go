/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// BackupTypeProvider struct for BackupTypeProvider
type BackupTypeProvider struct {
	LocationType string `json:"locationType"`
	// A name for the backup
	Name string `json:"name"`
	// Source Object Store. The ID of the storage provider (bucket) to be backed up.
	SourceProviderId *int64 `json:"sourceProviderId,omitempty"`
	// Target Object Store. The ID of the storage provider (bucket) the backup will be copied to.
	StorageProviderId *int64 `json:"storageProviderId,omitempty"`
	// The backup type code, options vary by the type of cloud and source
	BackupType string `json:"backupType"`
	// Create a new backup job, clone an existing job or add the new backup to an existing job
	JobAction string `json:"jobAction"`
	// The ID of the job to clone or add to. Only applies to jobAction `clone` and `addTo`.
	JobId *int64 `json:"jobId,omitempty"`
	// Name for new job. Only applies to jobAction `new` and `clone`.
	JobName *string `json:"jobName,omitempty"`
	// The ID of the execute schedule for new job. See Execute Schedules. Only applies to jobAction `new` and `clone`.
	JobSchedule *int64 `json:"jobSchedule,omitempty"`
	// Retention Count for new job. By default the backup settings value will be used. Only applies to jobAction `new` and `clone`.
	RetentionCount *int64 `json:"retentionCount,omitempty"`
}

// NewBackupTypeProvider instantiates a new BackupTypeProvider object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBackupTypeProvider(locationType string, name string, backupType string, jobAction string, ) *BackupTypeProvider {
	this := BackupTypeProvider{}
	this.LocationType = locationType
	this.Name = name
	this.BackupType = backupType
	this.JobAction = jobAction
	return &this
}

// NewBackupTypeProviderWithDefaults instantiates a new BackupTypeProvider object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBackupTypeProviderWithDefaults() *BackupTypeProvider {
	this := BackupTypeProvider{}
	return &this
}

// GetLocationType returns the LocationType field value
func (o *BackupTypeProvider) GetLocationType() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.LocationType
}

// GetLocationTypeOk returns a tuple with the LocationType field value
// and a boolean to check if the value has been set.
func (o *BackupTypeProvider) GetLocationTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.LocationType, true
}

// SetLocationType sets field value
func (o *BackupTypeProvider) SetLocationType(v string) {
	o.LocationType = v
}

// GetName returns the Name field value
func (o *BackupTypeProvider) GetName() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *BackupTypeProvider) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *BackupTypeProvider) SetName(v string) {
	o.Name = v
}

// GetSourceProviderId returns the SourceProviderId field value if set, zero value otherwise.
func (o *BackupTypeProvider) GetSourceProviderId() int64 {
	if o == nil || o.SourceProviderId == nil {
		var ret int64
		return ret
	}
	return *o.SourceProviderId
}

// GetSourceProviderIdOk returns a tuple with the SourceProviderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupTypeProvider) GetSourceProviderIdOk() (*int64, bool) {
	if o == nil || o.SourceProviderId == nil {
		return nil, false
	}
	return o.SourceProviderId, true
}

// HasSourceProviderId returns a boolean if a field has been set.
func (o *BackupTypeProvider) HasSourceProviderId() bool {
	if o != nil && o.SourceProviderId != nil {
		return true
	}

	return false
}

// SetSourceProviderId gets a reference to the given int64 and assigns it to the SourceProviderId field.
func (o *BackupTypeProvider) SetSourceProviderId(v int64) {
	o.SourceProviderId = &v
}

// GetStorageProviderId returns the StorageProviderId field value if set, zero value otherwise.
func (o *BackupTypeProvider) GetStorageProviderId() int64 {
	if o == nil || o.StorageProviderId == nil {
		var ret int64
		return ret
	}
	return *o.StorageProviderId
}

// GetStorageProviderIdOk returns a tuple with the StorageProviderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupTypeProvider) GetStorageProviderIdOk() (*int64, bool) {
	if o == nil || o.StorageProviderId == nil {
		return nil, false
	}
	return o.StorageProviderId, true
}

// HasStorageProviderId returns a boolean if a field has been set.
func (o *BackupTypeProvider) HasStorageProviderId() bool {
	if o != nil && o.StorageProviderId != nil {
		return true
	}

	return false
}

// SetStorageProviderId gets a reference to the given int64 and assigns it to the StorageProviderId field.
func (o *BackupTypeProvider) SetStorageProviderId(v int64) {
	o.StorageProviderId = &v
}

// GetBackupType returns the BackupType field value
func (o *BackupTypeProvider) GetBackupType() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.BackupType
}

// GetBackupTypeOk returns a tuple with the BackupType field value
// and a boolean to check if the value has been set.
func (o *BackupTypeProvider) GetBackupTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.BackupType, true
}

// SetBackupType sets field value
func (o *BackupTypeProvider) SetBackupType(v string) {
	o.BackupType = v
}

// GetJobAction returns the JobAction field value
func (o *BackupTypeProvider) GetJobAction() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.JobAction
}

// GetJobActionOk returns a tuple with the JobAction field value
// and a boolean to check if the value has been set.
func (o *BackupTypeProvider) GetJobActionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.JobAction, true
}

// SetJobAction sets field value
func (o *BackupTypeProvider) SetJobAction(v string) {
	o.JobAction = v
}

// GetJobId returns the JobId field value if set, zero value otherwise.
func (o *BackupTypeProvider) GetJobId() int64 {
	if o == nil || o.JobId == nil {
		var ret int64
		return ret
	}
	return *o.JobId
}

// GetJobIdOk returns a tuple with the JobId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupTypeProvider) GetJobIdOk() (*int64, bool) {
	if o == nil || o.JobId == nil {
		return nil, false
	}
	return o.JobId, true
}

// HasJobId returns a boolean if a field has been set.
func (o *BackupTypeProvider) HasJobId() bool {
	if o != nil && o.JobId != nil {
		return true
	}

	return false
}

// SetJobId gets a reference to the given int64 and assigns it to the JobId field.
func (o *BackupTypeProvider) SetJobId(v int64) {
	o.JobId = &v
}

// GetJobName returns the JobName field value if set, zero value otherwise.
func (o *BackupTypeProvider) GetJobName() string {
	if o == nil || o.JobName == nil {
		var ret string
		return ret
	}
	return *o.JobName
}

// GetJobNameOk returns a tuple with the JobName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupTypeProvider) GetJobNameOk() (*string, bool) {
	if o == nil || o.JobName == nil {
		return nil, false
	}
	return o.JobName, true
}

// HasJobName returns a boolean if a field has been set.
func (o *BackupTypeProvider) HasJobName() bool {
	if o != nil && o.JobName != nil {
		return true
	}

	return false
}

// SetJobName gets a reference to the given string and assigns it to the JobName field.
func (o *BackupTypeProvider) SetJobName(v string) {
	o.JobName = &v
}

// GetJobSchedule returns the JobSchedule field value if set, zero value otherwise.
func (o *BackupTypeProvider) GetJobSchedule() int64 {
	if o == nil || o.JobSchedule == nil {
		var ret int64
		return ret
	}
	return *o.JobSchedule
}

// GetJobScheduleOk returns a tuple with the JobSchedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupTypeProvider) GetJobScheduleOk() (*int64, bool) {
	if o == nil || o.JobSchedule == nil {
		return nil, false
	}
	return o.JobSchedule, true
}

// HasJobSchedule returns a boolean if a field has been set.
func (o *BackupTypeProvider) HasJobSchedule() bool {
	if o != nil && o.JobSchedule != nil {
		return true
	}

	return false
}

// SetJobSchedule gets a reference to the given int64 and assigns it to the JobSchedule field.
func (o *BackupTypeProvider) SetJobSchedule(v int64) {
	o.JobSchedule = &v
}

// GetRetentionCount returns the RetentionCount field value if set, zero value otherwise.
func (o *BackupTypeProvider) GetRetentionCount() int64 {
	if o == nil || o.RetentionCount == nil {
		var ret int64
		return ret
	}
	return *o.RetentionCount
}

// GetRetentionCountOk returns a tuple with the RetentionCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupTypeProvider) GetRetentionCountOk() (*int64, bool) {
	if o == nil || o.RetentionCount == nil {
		return nil, false
	}
	return o.RetentionCount, true
}

// HasRetentionCount returns a boolean if a field has been set.
func (o *BackupTypeProvider) HasRetentionCount() bool {
	if o != nil && o.RetentionCount != nil {
		return true
	}

	return false
}

// SetRetentionCount gets a reference to the given int64 and assigns it to the RetentionCount field.
func (o *BackupTypeProvider) SetRetentionCount(v int64) {
	o.RetentionCount = &v
}

func (o BackupTypeProvider) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["locationType"] = o.LocationType
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.SourceProviderId != nil {
		toSerialize["sourceProviderId"] = o.SourceProviderId
	}
	if o.StorageProviderId != nil {
		toSerialize["storageProviderId"] = o.StorageProviderId
	}
	if true {
		toSerialize["backupType"] = o.BackupType
	}
	if true {
		toSerialize["jobAction"] = o.JobAction
	}
	if o.JobId != nil {
		toSerialize["jobId"] = o.JobId
	}
	if o.JobName != nil {
		toSerialize["jobName"] = o.JobName
	}
	if o.JobSchedule != nil {
		toSerialize["jobSchedule"] = o.JobSchedule
	}
	if o.RetentionCount != nil {
		toSerialize["retentionCount"] = o.RetentionCount
	}
	return json.Marshal(toSerialize)
}

type NullableBackupTypeProvider struct {
	value *BackupTypeProvider
	isSet bool
}

func (v NullableBackupTypeProvider) Get() *BackupTypeProvider {
	return v.value
}

func (v *NullableBackupTypeProvider) Set(val *BackupTypeProvider) {
	v.value = val
	v.isSet = true
}

func (v NullableBackupTypeProvider) IsSet() bool {
	return v.isSet
}

func (v *NullableBackupTypeProvider) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBackupTypeProvider(val *BackupTypeProvider) *NullableBackupTypeProvider {
	return &NullableBackupTypeProvider{value: val, isSet: true}
}

func (v NullableBackupTypeProvider) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBackupTypeProvider) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


