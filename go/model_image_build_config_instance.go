/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ImageBuildConfigInstance struct for ImageBuildConfigInstance
type ImageBuildConfigInstance struct {
	Layout *ImageBuildsConfigPlan `json:"layout,omitempty"`
	Type *string `json:"type,omitempty"`
	UserGroup *ZoneVcenterConfigNetworkServer `json:"userGroup,omitempty"`
}

// NewImageBuildConfigInstance instantiates a new ImageBuildConfigInstance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImageBuildConfigInstance() *ImageBuildConfigInstance {
	this := ImageBuildConfigInstance{}
	return &this
}

// NewImageBuildConfigInstanceWithDefaults instantiates a new ImageBuildConfigInstance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImageBuildConfigInstanceWithDefaults() *ImageBuildConfigInstance {
	this := ImageBuildConfigInstance{}
	return &this
}

// GetLayout returns the Layout field value if set, zero value otherwise.
func (o *ImageBuildConfigInstance) GetLayout() ImageBuildsConfigPlan {
	if o == nil || o.Layout == nil {
		var ret ImageBuildsConfigPlan
		return ret
	}
	return *o.Layout
}

// GetLayoutOk returns a tuple with the Layout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageBuildConfigInstance) GetLayoutOk() (*ImageBuildsConfigPlan, bool) {
	if o == nil || o.Layout == nil {
		return nil, false
	}
	return o.Layout, true
}

// HasLayout returns a boolean if a field has been set.
func (o *ImageBuildConfigInstance) HasLayout() bool {
	if o != nil && o.Layout != nil {
		return true
	}

	return false
}

// SetLayout gets a reference to the given ImageBuildsConfigPlan and assigns it to the Layout field.
func (o *ImageBuildConfigInstance) SetLayout(v ImageBuildsConfigPlan) {
	o.Layout = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ImageBuildConfigInstance) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageBuildConfigInstance) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ImageBuildConfigInstance) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ImageBuildConfigInstance) SetType(v string) {
	o.Type = &v
}

// GetUserGroup returns the UserGroup field value if set, zero value otherwise.
func (o *ImageBuildConfigInstance) GetUserGroup() ZoneVcenterConfigNetworkServer {
	if o == nil || o.UserGroup == nil {
		var ret ZoneVcenterConfigNetworkServer
		return ret
	}
	return *o.UserGroup
}

// GetUserGroupOk returns a tuple with the UserGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageBuildConfigInstance) GetUserGroupOk() (*ZoneVcenterConfigNetworkServer, bool) {
	if o == nil || o.UserGroup == nil {
		return nil, false
	}
	return o.UserGroup, true
}

// HasUserGroup returns a boolean if a field has been set.
func (o *ImageBuildConfigInstance) HasUserGroup() bool {
	if o != nil && o.UserGroup != nil {
		return true
	}

	return false
}

// SetUserGroup gets a reference to the given ZoneVcenterConfigNetworkServer and assigns it to the UserGroup field.
func (o *ImageBuildConfigInstance) SetUserGroup(v ZoneVcenterConfigNetworkServer) {
	o.UserGroup = &v
}

func (o ImageBuildConfigInstance) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Layout != nil {
		toSerialize["layout"] = o.Layout
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.UserGroup != nil {
		toSerialize["userGroup"] = o.UserGroup
	}
	return json.Marshal(toSerialize)
}

type NullableImageBuildConfigInstance struct {
	value *ImageBuildConfigInstance
	isSet bool
}

func (v NullableImageBuildConfigInstance) Get() *ImageBuildConfigInstance {
	return v.value
}

func (v *NullableImageBuildConfigInstance) Set(val *ImageBuildConfigInstance) {
	v.value = val
	v.isSet = true
}

func (v NullableImageBuildConfigInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableImageBuildConfigInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImageBuildConfigInstance(val *ImageBuildConfigInstance) *NullableImageBuildConfigInstance {
	return &NullableImageBuildConfigInstance{value: val, isSet: true}
}

func (v NullableImageBuildConfigInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImageBuildConfigInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


