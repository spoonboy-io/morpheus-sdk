/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 6.1.1
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the AddBudgets200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddBudgets200Response{}

// AddBudgets200Response struct for AddBudgets200Response
type AddBudgets200Response struct {
	Success *bool `json:"success,omitempty"`
	Budget *Budgets `json:"budget,omitempty"`
}

// NewAddBudgets200Response instantiates a new AddBudgets200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddBudgets200Response() *AddBudgets200Response {
	this := AddBudgets200Response{}
	return &this
}

// NewAddBudgets200ResponseWithDefaults instantiates a new AddBudgets200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddBudgets200ResponseWithDefaults() *AddBudgets200Response {
	this := AddBudgets200Response{}
	return &this
}

// GetSuccess returns the Success field value if set, zero value otherwise.
func (o *AddBudgets200Response) GetSuccess() bool {
	if o == nil || IsNil(o.Success) {
		var ret bool
		return ret
	}
	return *o.Success
}

// GetSuccessOk returns a tuple with the Success field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddBudgets200Response) GetSuccessOk() (*bool, bool) {
	if o == nil || IsNil(o.Success) {
		return nil, false
	}
	return o.Success, true
}

// HasSuccess returns a boolean if a field has been set.
func (o *AddBudgets200Response) HasSuccess() bool {
	if o != nil && !IsNil(o.Success) {
		return true
	}

	return false
}

// SetSuccess gets a reference to the given bool and assigns it to the Success field.
func (o *AddBudgets200Response) SetSuccess(v bool) {
	o.Success = &v
}

// GetBudget returns the Budget field value if set, zero value otherwise.
func (o *AddBudgets200Response) GetBudget() Budgets {
	if o == nil || IsNil(o.Budget) {
		var ret Budgets
		return ret
	}
	return *o.Budget
}

// GetBudgetOk returns a tuple with the Budget field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddBudgets200Response) GetBudgetOk() (*Budgets, bool) {
	if o == nil || IsNil(o.Budget) {
		return nil, false
	}
	return o.Budget, true
}

// HasBudget returns a boolean if a field has been set.
func (o *AddBudgets200Response) HasBudget() bool {
	if o != nil && !IsNil(o.Budget) {
		return true
	}

	return false
}

// SetBudget gets a reference to the given Budgets and assigns it to the Budget field.
func (o *AddBudgets200Response) SetBudget(v Budgets) {
	o.Budget = &v
}

func (o AddBudgets200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddBudgets200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Success) {
		toSerialize["success"] = o.Success
	}
	if !IsNil(o.Budget) {
		toSerialize["budget"] = o.Budget
	}
	return toSerialize, nil
}

type NullableAddBudgets200Response struct {
	value *AddBudgets200Response
	isSet bool
}

func (v NullableAddBudgets200Response) Get() *AddBudgets200Response {
	return v.value
}

func (v *NullableAddBudgets200Response) Set(val *AddBudgets200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableAddBudgets200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableAddBudgets200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddBudgets200Response(val *AddBudgets200Response) *NullableAddBudgets200Response {
	return &NullableAddBudgets200Response{value: val, isSet: true}
}

func (v NullableAddBudgets200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddBudgets200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


