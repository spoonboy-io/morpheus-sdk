/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// UserSourceCreateUserSource struct for UserSourceCreateUserSource
type UserSourceCreateUserSource struct {
	// A name for the Identity Source
	Name string `json:"name"`
	// IDM type code
	Type string `json:"type"`
	// description
	Description *string `json:"description,omitempty"`
	DefaultAccountRole UserSourceCreateUserSourceDefaultAccountRole `json:"defaultAccountRole"`
	RoleMappings *OneOfarraymap `json:"roleMappings,omitempty"`
	// Map of Morpheus '`Role ID`':'`Role Name`'. 
	RoleMappingNames *map[string]string `json:"roleMappingNames,omitempty"`
	// Enable Role Mapping Permission
	AllowCustomMappings *bool `json:"allowCustomMappings,omitempty"`
	// Manual Role Assignment
	ManualRoleAssignment *bool `json:"manualRoleAssignment,omitempty"`
	Config *OneOfuserSourceCreateLDAPuserSourceCreateJumpClouduserSourceCreateActiveDirectoryuserSourceCreateOktauserSourceCreateOneLoginuserSourceCreateSamluserSourceCreateCustomExternaluserSourceCreateCustomApi `json:"config,omitempty"`
}

// NewUserSourceCreateUserSource instantiates a new UserSourceCreateUserSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserSourceCreateUserSource(name string, type_ string, defaultAccountRole UserSourceCreateUserSourceDefaultAccountRole, ) *UserSourceCreateUserSource {
	this := UserSourceCreateUserSource{}
	this.Name = name
	this.Type = type_
	this.DefaultAccountRole = defaultAccountRole
	return &this
}

// NewUserSourceCreateUserSourceWithDefaults instantiates a new UserSourceCreateUserSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserSourceCreateUserSourceWithDefaults() *UserSourceCreateUserSource {
	this := UserSourceCreateUserSource{}
	return &this
}

// GetName returns the Name field value
func (o *UserSourceCreateUserSource) GetName() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *UserSourceCreateUserSource) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *UserSourceCreateUserSource) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value
func (o *UserSourceCreateUserSource) GetType() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *UserSourceCreateUserSource) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *UserSourceCreateUserSource) SetType(v string) {
	o.Type = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *UserSourceCreateUserSource) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSourceCreateUserSource) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *UserSourceCreateUserSource) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *UserSourceCreateUserSource) SetDescription(v string) {
	o.Description = &v
}

// GetDefaultAccountRole returns the DefaultAccountRole field value
func (o *UserSourceCreateUserSource) GetDefaultAccountRole() UserSourceCreateUserSourceDefaultAccountRole {
	if o == nil  {
		var ret UserSourceCreateUserSourceDefaultAccountRole
		return ret
	}

	return o.DefaultAccountRole
}

// GetDefaultAccountRoleOk returns a tuple with the DefaultAccountRole field value
// and a boolean to check if the value has been set.
func (o *UserSourceCreateUserSource) GetDefaultAccountRoleOk() (*UserSourceCreateUserSourceDefaultAccountRole, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.DefaultAccountRole, true
}

// SetDefaultAccountRole sets field value
func (o *UserSourceCreateUserSource) SetDefaultAccountRole(v UserSourceCreateUserSourceDefaultAccountRole) {
	o.DefaultAccountRole = v
}

// GetRoleMappings returns the RoleMappings field value if set, zero value otherwise.
func (o *UserSourceCreateUserSource) GetRoleMappings() OneOfarraymap {
	if o == nil || o.RoleMappings == nil {
		var ret OneOfarraymap
		return ret
	}
	return *o.RoleMappings
}

// GetRoleMappingsOk returns a tuple with the RoleMappings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSourceCreateUserSource) GetRoleMappingsOk() (*OneOfarraymap, bool) {
	if o == nil || o.RoleMappings == nil {
		return nil, false
	}
	return o.RoleMappings, true
}

// HasRoleMappings returns a boolean if a field has been set.
func (o *UserSourceCreateUserSource) HasRoleMappings() bool {
	if o != nil && o.RoleMappings != nil {
		return true
	}

	return false
}

// SetRoleMappings gets a reference to the given OneOfarraymap and assigns it to the RoleMappings field.
func (o *UserSourceCreateUserSource) SetRoleMappings(v OneOfarraymap) {
	o.RoleMappings = &v
}

// GetRoleMappingNames returns the RoleMappingNames field value if set, zero value otherwise.
func (o *UserSourceCreateUserSource) GetRoleMappingNames() map[string]string {
	if o == nil || o.RoleMappingNames == nil {
		var ret map[string]string
		return ret
	}
	return *o.RoleMappingNames
}

// GetRoleMappingNamesOk returns a tuple with the RoleMappingNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSourceCreateUserSource) GetRoleMappingNamesOk() (*map[string]string, bool) {
	if o == nil || o.RoleMappingNames == nil {
		return nil, false
	}
	return o.RoleMappingNames, true
}

// HasRoleMappingNames returns a boolean if a field has been set.
func (o *UserSourceCreateUserSource) HasRoleMappingNames() bool {
	if o != nil && o.RoleMappingNames != nil {
		return true
	}

	return false
}

// SetRoleMappingNames gets a reference to the given map[string]string and assigns it to the RoleMappingNames field.
func (o *UserSourceCreateUserSource) SetRoleMappingNames(v map[string]string) {
	o.RoleMappingNames = &v
}

// GetAllowCustomMappings returns the AllowCustomMappings field value if set, zero value otherwise.
func (o *UserSourceCreateUserSource) GetAllowCustomMappings() bool {
	if o == nil || o.AllowCustomMappings == nil {
		var ret bool
		return ret
	}
	return *o.AllowCustomMappings
}

// GetAllowCustomMappingsOk returns a tuple with the AllowCustomMappings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSourceCreateUserSource) GetAllowCustomMappingsOk() (*bool, bool) {
	if o == nil || o.AllowCustomMappings == nil {
		return nil, false
	}
	return o.AllowCustomMappings, true
}

// HasAllowCustomMappings returns a boolean if a field has been set.
func (o *UserSourceCreateUserSource) HasAllowCustomMappings() bool {
	if o != nil && o.AllowCustomMappings != nil {
		return true
	}

	return false
}

// SetAllowCustomMappings gets a reference to the given bool and assigns it to the AllowCustomMappings field.
func (o *UserSourceCreateUserSource) SetAllowCustomMappings(v bool) {
	o.AllowCustomMappings = &v
}

// GetManualRoleAssignment returns the ManualRoleAssignment field value if set, zero value otherwise.
func (o *UserSourceCreateUserSource) GetManualRoleAssignment() bool {
	if o == nil || o.ManualRoleAssignment == nil {
		var ret bool
		return ret
	}
	return *o.ManualRoleAssignment
}

// GetManualRoleAssignmentOk returns a tuple with the ManualRoleAssignment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSourceCreateUserSource) GetManualRoleAssignmentOk() (*bool, bool) {
	if o == nil || o.ManualRoleAssignment == nil {
		return nil, false
	}
	return o.ManualRoleAssignment, true
}

// HasManualRoleAssignment returns a boolean if a field has been set.
func (o *UserSourceCreateUserSource) HasManualRoleAssignment() bool {
	if o != nil && o.ManualRoleAssignment != nil {
		return true
	}

	return false
}

// SetManualRoleAssignment gets a reference to the given bool and assigns it to the ManualRoleAssignment field.
func (o *UserSourceCreateUserSource) SetManualRoleAssignment(v bool) {
	o.ManualRoleAssignment = &v
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *UserSourceCreateUserSource) GetConfig() OneOfuserSourceCreateLDAPuserSourceCreateJumpClouduserSourceCreateActiveDirectoryuserSourceCreateOktauserSourceCreateOneLoginuserSourceCreateSamluserSourceCreateCustomExternaluserSourceCreateCustomApi {
	if o == nil || o.Config == nil {
		var ret OneOfuserSourceCreateLDAPuserSourceCreateJumpClouduserSourceCreateActiveDirectoryuserSourceCreateOktauserSourceCreateOneLoginuserSourceCreateSamluserSourceCreateCustomExternaluserSourceCreateCustomApi
		return ret
	}
	return *o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSourceCreateUserSource) GetConfigOk() (*OneOfuserSourceCreateLDAPuserSourceCreateJumpClouduserSourceCreateActiveDirectoryuserSourceCreateOktauserSourceCreateOneLoginuserSourceCreateSamluserSourceCreateCustomExternaluserSourceCreateCustomApi, bool) {
	if o == nil || o.Config == nil {
		return nil, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *UserSourceCreateUserSource) HasConfig() bool {
	if o != nil && o.Config != nil {
		return true
	}

	return false
}

// SetConfig gets a reference to the given OneOfuserSourceCreateLDAPuserSourceCreateJumpClouduserSourceCreateActiveDirectoryuserSourceCreateOktauserSourceCreateOneLoginuserSourceCreateSamluserSourceCreateCustomExternaluserSourceCreateCustomApi and assigns it to the Config field.
func (o *UserSourceCreateUserSource) SetConfig(v OneOfuserSourceCreateLDAPuserSourceCreateJumpClouduserSourceCreateActiveDirectoryuserSourceCreateOktauserSourceCreateOneLoginuserSourceCreateSamluserSourceCreateCustomExternaluserSourceCreateCustomApi) {
	o.Config = &v
}

func (o UserSourceCreateUserSource) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["type"] = o.Type
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if true {
		toSerialize["defaultAccountRole"] = o.DefaultAccountRole
	}
	if o.RoleMappings != nil {
		toSerialize["roleMappings"] = o.RoleMappings
	}
	if o.RoleMappingNames != nil {
		toSerialize["roleMappingNames"] = o.RoleMappingNames
	}
	if o.AllowCustomMappings != nil {
		toSerialize["allowCustomMappings"] = o.AllowCustomMappings
	}
	if o.ManualRoleAssignment != nil {
		toSerialize["manualRoleAssignment"] = o.ManualRoleAssignment
	}
	if o.Config != nil {
		toSerialize["config"] = o.Config
	}
	return json.Marshal(toSerialize)
}

type NullableUserSourceCreateUserSource struct {
	value *UserSourceCreateUserSource
	isSet bool
}

func (v NullableUserSourceCreateUserSource) Get() *UserSourceCreateUserSource {
	return v.value
}

func (v *NullableUserSourceCreateUserSource) Set(val *UserSourceCreateUserSource) {
	v.value = val
	v.isSet = true
}

func (v NullableUserSourceCreateUserSource) IsSet() bool {
	return v.isSet
}

func (v *NullableUserSourceCreateUserSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserSourceCreateUserSource(val *UserSourceCreateUserSource) *NullableUserSourceCreateUserSource {
	return &NullableUserSourceCreateUserSource{value: val, isSet: true}
}

func (v NullableUserSourceCreateUserSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserSourceCreateUserSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


