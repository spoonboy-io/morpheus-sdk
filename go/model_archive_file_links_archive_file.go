/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 6.1.1
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ArchiveFileLinksArchiveFile type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ArchiveFileLinksArchiveFile{}

// ArchiveFileLinksArchiveFile struct for ArchiveFileLinksArchiveFile
type ArchiveFileLinksArchiveFile struct {
	Id *int64 `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	FilePath *string `json:"filePath,omitempty"`
}

// NewArchiveFileLinksArchiveFile instantiates a new ArchiveFileLinksArchiveFile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewArchiveFileLinksArchiveFile() *ArchiveFileLinksArchiveFile {
	this := ArchiveFileLinksArchiveFile{}
	return &this
}

// NewArchiveFileLinksArchiveFileWithDefaults instantiates a new ArchiveFileLinksArchiveFile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewArchiveFileLinksArchiveFileWithDefaults() *ArchiveFileLinksArchiveFile {
	this := ArchiveFileLinksArchiveFile{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ArchiveFileLinksArchiveFile) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArchiveFileLinksArchiveFile) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ArchiveFileLinksArchiveFile) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *ArchiveFileLinksArchiveFile) SetId(v int64) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ArchiveFileLinksArchiveFile) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArchiveFileLinksArchiveFile) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ArchiveFileLinksArchiveFile) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ArchiveFileLinksArchiveFile) SetName(v string) {
	o.Name = &v
}

// GetFilePath returns the FilePath field value if set, zero value otherwise.
func (o *ArchiveFileLinksArchiveFile) GetFilePath() string {
	if o == nil || IsNil(o.FilePath) {
		var ret string
		return ret
	}
	return *o.FilePath
}

// GetFilePathOk returns a tuple with the FilePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArchiveFileLinksArchiveFile) GetFilePathOk() (*string, bool) {
	if o == nil || IsNil(o.FilePath) {
		return nil, false
	}
	return o.FilePath, true
}

// HasFilePath returns a boolean if a field has been set.
func (o *ArchiveFileLinksArchiveFile) HasFilePath() bool {
	if o != nil && !IsNil(o.FilePath) {
		return true
	}

	return false
}

// SetFilePath gets a reference to the given string and assigns it to the FilePath field.
func (o *ArchiveFileLinksArchiveFile) SetFilePath(v string) {
	o.FilePath = &v
}

func (o ArchiveFileLinksArchiveFile) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ArchiveFileLinksArchiveFile) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.FilePath) {
		toSerialize["filePath"] = o.FilePath
	}
	return toSerialize, nil
}

type NullableArchiveFileLinksArchiveFile struct {
	value *ArchiveFileLinksArchiveFile
	isSet bool
}

func (v NullableArchiveFileLinksArchiveFile) Get() *ArchiveFileLinksArchiveFile {
	return v.value
}

func (v *NullableArchiveFileLinksArchiveFile) Set(val *ArchiveFileLinksArchiveFile) {
	v.value = val
	v.isSet = true
}

func (v NullableArchiveFileLinksArchiveFile) IsSet() bool {
	return v.isSet
}

func (v *NullableArchiveFileLinksArchiveFile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArchiveFileLinksArchiveFile(val *ArchiveFileLinksArchiveFile) *NullableArchiveFileLinksArchiveFile {
	return &NullableArchiveFileLinksArchiveFile{value: val, isSet: true}
}

func (v NullableArchiveFileLinksArchiveFile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableArchiveFileLinksArchiveFile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


