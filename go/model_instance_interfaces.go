/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InstanceInterfaces struct for InstanceInterfaces
type InstanceInterfaces struct {
	Id NullableString `json:"id,omitempty"`
	Network *InstanceNetwork `json:"network,omitempty"`
	IpAddress NullableString `json:"ipAddress,omitempty"`
	NetworkInterfaceTypeId NullableInt64 `json:"networkInterfaceTypeId,omitempty"`
	IpMode NullableString `json:"ipMode,omitempty"`
}

// NewInstanceInterfaces instantiates a new InstanceInterfaces object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstanceInterfaces() *InstanceInterfaces {
	this := InstanceInterfaces{}
	return &this
}

// NewInstanceInterfacesWithDefaults instantiates a new InstanceInterfaces object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstanceInterfacesWithDefaults() *InstanceInterfaces {
	this := InstanceInterfaces{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InstanceInterfaces) GetId() string {
	if o == nil || o.Id.Get() == nil {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InstanceInterfaces) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *InstanceInterfaces) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *InstanceInterfaces) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *InstanceInterfaces) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *InstanceInterfaces) UnsetId() {
	o.Id.Unset()
}

// GetNetwork returns the Network field value if set, zero value otherwise.
func (o *InstanceInterfaces) GetNetwork() InstanceNetwork {
	if o == nil || o.Network == nil {
		var ret InstanceNetwork
		return ret
	}
	return *o.Network
}

// GetNetworkOk returns a tuple with the Network field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceInterfaces) GetNetworkOk() (*InstanceNetwork, bool) {
	if o == nil || o.Network == nil {
		return nil, false
	}
	return o.Network, true
}

// HasNetwork returns a boolean if a field has been set.
func (o *InstanceInterfaces) HasNetwork() bool {
	if o != nil && o.Network != nil {
		return true
	}

	return false
}

// SetNetwork gets a reference to the given InstanceNetwork and assigns it to the Network field.
func (o *InstanceInterfaces) SetNetwork(v InstanceNetwork) {
	o.Network = &v
}

// GetIpAddress returns the IpAddress field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InstanceInterfaces) GetIpAddress() string {
	if o == nil || o.IpAddress.Get() == nil {
		var ret string
		return ret
	}
	return *o.IpAddress.Get()
}

// GetIpAddressOk returns a tuple with the IpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InstanceInterfaces) GetIpAddressOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IpAddress.Get(), o.IpAddress.IsSet()
}

// HasIpAddress returns a boolean if a field has been set.
func (o *InstanceInterfaces) HasIpAddress() bool {
	if o != nil && o.IpAddress.IsSet() {
		return true
	}

	return false
}

// SetIpAddress gets a reference to the given NullableString and assigns it to the IpAddress field.
func (o *InstanceInterfaces) SetIpAddress(v string) {
	o.IpAddress.Set(&v)
}
// SetIpAddressNil sets the value for IpAddress to be an explicit nil
func (o *InstanceInterfaces) SetIpAddressNil() {
	o.IpAddress.Set(nil)
}

// UnsetIpAddress ensures that no value is present for IpAddress, not even an explicit nil
func (o *InstanceInterfaces) UnsetIpAddress() {
	o.IpAddress.Unset()
}

// GetNetworkInterfaceTypeId returns the NetworkInterfaceTypeId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InstanceInterfaces) GetNetworkInterfaceTypeId() int64 {
	if o == nil || o.NetworkInterfaceTypeId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.NetworkInterfaceTypeId.Get()
}

// GetNetworkInterfaceTypeIdOk returns a tuple with the NetworkInterfaceTypeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InstanceInterfaces) GetNetworkInterfaceTypeIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NetworkInterfaceTypeId.Get(), o.NetworkInterfaceTypeId.IsSet()
}

// HasNetworkInterfaceTypeId returns a boolean if a field has been set.
func (o *InstanceInterfaces) HasNetworkInterfaceTypeId() bool {
	if o != nil && o.NetworkInterfaceTypeId.IsSet() {
		return true
	}

	return false
}

// SetNetworkInterfaceTypeId gets a reference to the given NullableInt64 and assigns it to the NetworkInterfaceTypeId field.
func (o *InstanceInterfaces) SetNetworkInterfaceTypeId(v int64) {
	o.NetworkInterfaceTypeId.Set(&v)
}
// SetNetworkInterfaceTypeIdNil sets the value for NetworkInterfaceTypeId to be an explicit nil
func (o *InstanceInterfaces) SetNetworkInterfaceTypeIdNil() {
	o.NetworkInterfaceTypeId.Set(nil)
}

// UnsetNetworkInterfaceTypeId ensures that no value is present for NetworkInterfaceTypeId, not even an explicit nil
func (o *InstanceInterfaces) UnsetNetworkInterfaceTypeId() {
	o.NetworkInterfaceTypeId.Unset()
}

// GetIpMode returns the IpMode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InstanceInterfaces) GetIpMode() string {
	if o == nil || o.IpMode.Get() == nil {
		var ret string
		return ret
	}
	return *o.IpMode.Get()
}

// GetIpModeOk returns a tuple with the IpMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InstanceInterfaces) GetIpModeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IpMode.Get(), o.IpMode.IsSet()
}

// HasIpMode returns a boolean if a field has been set.
func (o *InstanceInterfaces) HasIpMode() bool {
	if o != nil && o.IpMode.IsSet() {
		return true
	}

	return false
}

// SetIpMode gets a reference to the given NullableString and assigns it to the IpMode field.
func (o *InstanceInterfaces) SetIpMode(v string) {
	o.IpMode.Set(&v)
}
// SetIpModeNil sets the value for IpMode to be an explicit nil
func (o *InstanceInterfaces) SetIpModeNil() {
	o.IpMode.Set(nil)
}

// UnsetIpMode ensures that no value is present for IpMode, not even an explicit nil
func (o *InstanceInterfaces) UnsetIpMode() {
	o.IpMode.Unset()
}

func (o InstanceInterfaces) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.Network != nil {
		toSerialize["network"] = o.Network
	}
	if o.IpAddress.IsSet() {
		toSerialize["ipAddress"] = o.IpAddress.Get()
	}
	if o.NetworkInterfaceTypeId.IsSet() {
		toSerialize["networkInterfaceTypeId"] = o.NetworkInterfaceTypeId.Get()
	}
	if o.IpMode.IsSet() {
		toSerialize["ipMode"] = o.IpMode.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableInstanceInterfaces struct {
	value *InstanceInterfaces
	isSet bool
}

func (v NullableInstanceInterfaces) Get() *InstanceInterfaces {
	return v.value
}

func (v *NullableInstanceInterfaces) Set(val *InstanceInterfaces) {
	v.value = val
	v.isSet = true
}

func (v NullableInstanceInterfaces) IsSet() bool {
	return v.isSet
}

func (v *NullableInstanceInterfaces) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstanceInterfaces(val *InstanceInterfaces) *NullableInstanceInterfaces {
	return &NullableInstanceInterfaces{value: val, isSet: true}
}

func (v NullableInstanceInterfaces) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstanceInterfaces) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


