/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// WhitelabelSettings struct for WhitelabelSettings
type WhitelabelSettings struct {
	Enabled *bool `json:"enabled,omitempty"`
	ApplianceName *string `json:"applianceName,omitempty"`
	DisableSupportMenu *bool `json:"disableSupportMenu,omitempty"`
	HeaderLogo *string `json:"headerLogo,omitempty"`
	FooterLogo *string `json:"footerLogo,omitempty"`
	LoginLogo *string `json:"loginLogo,omitempty"`
	Favicon *string `json:"favicon,omitempty"`
	HeaderBgColor *string `json:"headerBgColor,omitempty"`
	HeaderFgColor *string `json:"headerFgColor,omitempty"`
	NavBgColor *string `json:"navBgColor,omitempty"`
	NavFgColor *string `json:"navFgColor,omitempty"`
	NavHoverColor *string `json:"navHoverColor,omitempty"`
	PrimaryButtonBgColor *string `json:"primaryButtonBgColor,omitempty"`
	PrimaryButtonFgColor *string `json:"primaryButtonFgColor,omitempty"`
	PrimaryButtonHoverBgColor *string `json:"primaryButtonHoverBgColor,omitempty"`
	PrimaryButtonHoverFgColor *string `json:"primaryButtonHoverFgColor,omitempty"`
	FooterBgColor *string `json:"footerBgColor,omitempty"`
	FooterFgColor *string `json:"footerFgColor,omitempty"`
	LoginBgColor *string `json:"loginBgColor,omitempty"`
	OverrideCss *string `json:"overrideCss,omitempty"`
	CopyrightString *string `json:"copyrightString,omitempty"`
	TermsOfUse *string `json:"termsOfUse,omitempty"`
	PrivacyPolicy *string `json:"privacyPolicy,omitempty"`
	SupportMenuLinks *[]WhitelabelSettingsSupportMenuLinks `json:"supportMenuLinks,omitempty"`
}

// NewWhitelabelSettings instantiates a new WhitelabelSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWhitelabelSettings() *WhitelabelSettings {
	this := WhitelabelSettings{}
	return &this
}

// NewWhitelabelSettingsWithDefaults instantiates a new WhitelabelSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWhitelabelSettingsWithDefaults() *WhitelabelSettings {
	this := WhitelabelSettings{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *WhitelabelSettings) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WhitelabelSettings) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *WhitelabelSettings) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *WhitelabelSettings) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetApplianceName returns the ApplianceName field value if set, zero value otherwise.
func (o *WhitelabelSettings) GetApplianceName() string {
	if o == nil || o.ApplianceName == nil {
		var ret string
		return ret
	}
	return *o.ApplianceName
}

// GetApplianceNameOk returns a tuple with the ApplianceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WhitelabelSettings) GetApplianceNameOk() (*string, bool) {
	if o == nil || o.ApplianceName == nil {
		return nil, false
	}
	return o.ApplianceName, true
}

// HasApplianceName returns a boolean if a field has been set.
func (o *WhitelabelSettings) HasApplianceName() bool {
	if o != nil && o.ApplianceName != nil {
		return true
	}

	return false
}

// SetApplianceName gets a reference to the given string and assigns it to the ApplianceName field.
func (o *WhitelabelSettings) SetApplianceName(v string) {
	o.ApplianceName = &v
}

// GetDisableSupportMenu returns the DisableSupportMenu field value if set, zero value otherwise.
func (o *WhitelabelSettings) GetDisableSupportMenu() bool {
	if o == nil || o.DisableSupportMenu == nil {
		var ret bool
		return ret
	}
	return *o.DisableSupportMenu
}

// GetDisableSupportMenuOk returns a tuple with the DisableSupportMenu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WhitelabelSettings) GetDisableSupportMenuOk() (*bool, bool) {
	if o == nil || o.DisableSupportMenu == nil {
		return nil, false
	}
	return o.DisableSupportMenu, true
}

// HasDisableSupportMenu returns a boolean if a field has been set.
func (o *WhitelabelSettings) HasDisableSupportMenu() bool {
	if o != nil && o.DisableSupportMenu != nil {
		return true
	}

	return false
}

// SetDisableSupportMenu gets a reference to the given bool and assigns it to the DisableSupportMenu field.
func (o *WhitelabelSettings) SetDisableSupportMenu(v bool) {
	o.DisableSupportMenu = &v
}

// GetHeaderLogo returns the HeaderLogo field value if set, zero value otherwise.
func (o *WhitelabelSettings) GetHeaderLogo() string {
	if o == nil || o.HeaderLogo == nil {
		var ret string
		return ret
	}
	return *o.HeaderLogo
}

// GetHeaderLogoOk returns a tuple with the HeaderLogo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WhitelabelSettings) GetHeaderLogoOk() (*string, bool) {
	if o == nil || o.HeaderLogo == nil {
		return nil, false
	}
	return o.HeaderLogo, true
}

// HasHeaderLogo returns a boolean if a field has been set.
func (o *WhitelabelSettings) HasHeaderLogo() bool {
	if o != nil && o.HeaderLogo != nil {
		return true
	}

	return false
}

// SetHeaderLogo gets a reference to the given string and assigns it to the HeaderLogo field.
func (o *WhitelabelSettings) SetHeaderLogo(v string) {
	o.HeaderLogo = &v
}

// GetFooterLogo returns the FooterLogo field value if set, zero value otherwise.
func (o *WhitelabelSettings) GetFooterLogo() string {
	if o == nil || o.FooterLogo == nil {
		var ret string
		return ret
	}
	return *o.FooterLogo
}

// GetFooterLogoOk returns a tuple with the FooterLogo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WhitelabelSettings) GetFooterLogoOk() (*string, bool) {
	if o == nil || o.FooterLogo == nil {
		return nil, false
	}
	return o.FooterLogo, true
}

// HasFooterLogo returns a boolean if a field has been set.
func (o *WhitelabelSettings) HasFooterLogo() bool {
	if o != nil && o.FooterLogo != nil {
		return true
	}

	return false
}

// SetFooterLogo gets a reference to the given string and assigns it to the FooterLogo field.
func (o *WhitelabelSettings) SetFooterLogo(v string) {
	o.FooterLogo = &v
}

// GetLoginLogo returns the LoginLogo field value if set, zero value otherwise.
func (o *WhitelabelSettings) GetLoginLogo() string {
	if o == nil || o.LoginLogo == nil {
		var ret string
		return ret
	}
	return *o.LoginLogo
}

// GetLoginLogoOk returns a tuple with the LoginLogo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WhitelabelSettings) GetLoginLogoOk() (*string, bool) {
	if o == nil || o.LoginLogo == nil {
		return nil, false
	}
	return o.LoginLogo, true
}

// HasLoginLogo returns a boolean if a field has been set.
func (o *WhitelabelSettings) HasLoginLogo() bool {
	if o != nil && o.LoginLogo != nil {
		return true
	}

	return false
}

// SetLoginLogo gets a reference to the given string and assigns it to the LoginLogo field.
func (o *WhitelabelSettings) SetLoginLogo(v string) {
	o.LoginLogo = &v
}

// GetFavicon returns the Favicon field value if set, zero value otherwise.
func (o *WhitelabelSettings) GetFavicon() string {
	if o == nil || o.Favicon == nil {
		var ret string
		return ret
	}
	return *o.Favicon
}

// GetFaviconOk returns a tuple with the Favicon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WhitelabelSettings) GetFaviconOk() (*string, bool) {
	if o == nil || o.Favicon == nil {
		return nil, false
	}
	return o.Favicon, true
}

// HasFavicon returns a boolean if a field has been set.
func (o *WhitelabelSettings) HasFavicon() bool {
	if o != nil && o.Favicon != nil {
		return true
	}

	return false
}

// SetFavicon gets a reference to the given string and assigns it to the Favicon field.
func (o *WhitelabelSettings) SetFavicon(v string) {
	o.Favicon = &v
}

// GetHeaderBgColor returns the HeaderBgColor field value if set, zero value otherwise.
func (o *WhitelabelSettings) GetHeaderBgColor() string {
	if o == nil || o.HeaderBgColor == nil {
		var ret string
		return ret
	}
	return *o.HeaderBgColor
}

// GetHeaderBgColorOk returns a tuple with the HeaderBgColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WhitelabelSettings) GetHeaderBgColorOk() (*string, bool) {
	if o == nil || o.HeaderBgColor == nil {
		return nil, false
	}
	return o.HeaderBgColor, true
}

// HasHeaderBgColor returns a boolean if a field has been set.
func (o *WhitelabelSettings) HasHeaderBgColor() bool {
	if o != nil && o.HeaderBgColor != nil {
		return true
	}

	return false
}

// SetHeaderBgColor gets a reference to the given string and assigns it to the HeaderBgColor field.
func (o *WhitelabelSettings) SetHeaderBgColor(v string) {
	o.HeaderBgColor = &v
}

// GetHeaderFgColor returns the HeaderFgColor field value if set, zero value otherwise.
func (o *WhitelabelSettings) GetHeaderFgColor() string {
	if o == nil || o.HeaderFgColor == nil {
		var ret string
		return ret
	}
	return *o.HeaderFgColor
}

// GetHeaderFgColorOk returns a tuple with the HeaderFgColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WhitelabelSettings) GetHeaderFgColorOk() (*string, bool) {
	if o == nil || o.HeaderFgColor == nil {
		return nil, false
	}
	return o.HeaderFgColor, true
}

// HasHeaderFgColor returns a boolean if a field has been set.
func (o *WhitelabelSettings) HasHeaderFgColor() bool {
	if o != nil && o.HeaderFgColor != nil {
		return true
	}

	return false
}

// SetHeaderFgColor gets a reference to the given string and assigns it to the HeaderFgColor field.
func (o *WhitelabelSettings) SetHeaderFgColor(v string) {
	o.HeaderFgColor = &v
}

// GetNavBgColor returns the NavBgColor field value if set, zero value otherwise.
func (o *WhitelabelSettings) GetNavBgColor() string {
	if o == nil || o.NavBgColor == nil {
		var ret string
		return ret
	}
	return *o.NavBgColor
}

// GetNavBgColorOk returns a tuple with the NavBgColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WhitelabelSettings) GetNavBgColorOk() (*string, bool) {
	if o == nil || o.NavBgColor == nil {
		return nil, false
	}
	return o.NavBgColor, true
}

// HasNavBgColor returns a boolean if a field has been set.
func (o *WhitelabelSettings) HasNavBgColor() bool {
	if o != nil && o.NavBgColor != nil {
		return true
	}

	return false
}

// SetNavBgColor gets a reference to the given string and assigns it to the NavBgColor field.
func (o *WhitelabelSettings) SetNavBgColor(v string) {
	o.NavBgColor = &v
}

// GetNavFgColor returns the NavFgColor field value if set, zero value otherwise.
func (o *WhitelabelSettings) GetNavFgColor() string {
	if o == nil || o.NavFgColor == nil {
		var ret string
		return ret
	}
	return *o.NavFgColor
}

// GetNavFgColorOk returns a tuple with the NavFgColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WhitelabelSettings) GetNavFgColorOk() (*string, bool) {
	if o == nil || o.NavFgColor == nil {
		return nil, false
	}
	return o.NavFgColor, true
}

// HasNavFgColor returns a boolean if a field has been set.
func (o *WhitelabelSettings) HasNavFgColor() bool {
	if o != nil && o.NavFgColor != nil {
		return true
	}

	return false
}

// SetNavFgColor gets a reference to the given string and assigns it to the NavFgColor field.
func (o *WhitelabelSettings) SetNavFgColor(v string) {
	o.NavFgColor = &v
}

// GetNavHoverColor returns the NavHoverColor field value if set, zero value otherwise.
func (o *WhitelabelSettings) GetNavHoverColor() string {
	if o == nil || o.NavHoverColor == nil {
		var ret string
		return ret
	}
	return *o.NavHoverColor
}

// GetNavHoverColorOk returns a tuple with the NavHoverColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WhitelabelSettings) GetNavHoverColorOk() (*string, bool) {
	if o == nil || o.NavHoverColor == nil {
		return nil, false
	}
	return o.NavHoverColor, true
}

// HasNavHoverColor returns a boolean if a field has been set.
func (o *WhitelabelSettings) HasNavHoverColor() bool {
	if o != nil && o.NavHoverColor != nil {
		return true
	}

	return false
}

// SetNavHoverColor gets a reference to the given string and assigns it to the NavHoverColor field.
func (o *WhitelabelSettings) SetNavHoverColor(v string) {
	o.NavHoverColor = &v
}

// GetPrimaryButtonBgColor returns the PrimaryButtonBgColor field value if set, zero value otherwise.
func (o *WhitelabelSettings) GetPrimaryButtonBgColor() string {
	if o == nil || o.PrimaryButtonBgColor == nil {
		var ret string
		return ret
	}
	return *o.PrimaryButtonBgColor
}

// GetPrimaryButtonBgColorOk returns a tuple with the PrimaryButtonBgColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WhitelabelSettings) GetPrimaryButtonBgColorOk() (*string, bool) {
	if o == nil || o.PrimaryButtonBgColor == nil {
		return nil, false
	}
	return o.PrimaryButtonBgColor, true
}

// HasPrimaryButtonBgColor returns a boolean if a field has been set.
func (o *WhitelabelSettings) HasPrimaryButtonBgColor() bool {
	if o != nil && o.PrimaryButtonBgColor != nil {
		return true
	}

	return false
}

// SetPrimaryButtonBgColor gets a reference to the given string and assigns it to the PrimaryButtonBgColor field.
func (o *WhitelabelSettings) SetPrimaryButtonBgColor(v string) {
	o.PrimaryButtonBgColor = &v
}

// GetPrimaryButtonFgColor returns the PrimaryButtonFgColor field value if set, zero value otherwise.
func (o *WhitelabelSettings) GetPrimaryButtonFgColor() string {
	if o == nil || o.PrimaryButtonFgColor == nil {
		var ret string
		return ret
	}
	return *o.PrimaryButtonFgColor
}

// GetPrimaryButtonFgColorOk returns a tuple with the PrimaryButtonFgColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WhitelabelSettings) GetPrimaryButtonFgColorOk() (*string, bool) {
	if o == nil || o.PrimaryButtonFgColor == nil {
		return nil, false
	}
	return o.PrimaryButtonFgColor, true
}

// HasPrimaryButtonFgColor returns a boolean if a field has been set.
func (o *WhitelabelSettings) HasPrimaryButtonFgColor() bool {
	if o != nil && o.PrimaryButtonFgColor != nil {
		return true
	}

	return false
}

// SetPrimaryButtonFgColor gets a reference to the given string and assigns it to the PrimaryButtonFgColor field.
func (o *WhitelabelSettings) SetPrimaryButtonFgColor(v string) {
	o.PrimaryButtonFgColor = &v
}

// GetPrimaryButtonHoverBgColor returns the PrimaryButtonHoverBgColor field value if set, zero value otherwise.
func (o *WhitelabelSettings) GetPrimaryButtonHoverBgColor() string {
	if o == nil || o.PrimaryButtonHoverBgColor == nil {
		var ret string
		return ret
	}
	return *o.PrimaryButtonHoverBgColor
}

// GetPrimaryButtonHoverBgColorOk returns a tuple with the PrimaryButtonHoverBgColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WhitelabelSettings) GetPrimaryButtonHoverBgColorOk() (*string, bool) {
	if o == nil || o.PrimaryButtonHoverBgColor == nil {
		return nil, false
	}
	return o.PrimaryButtonHoverBgColor, true
}

// HasPrimaryButtonHoverBgColor returns a boolean if a field has been set.
func (o *WhitelabelSettings) HasPrimaryButtonHoverBgColor() bool {
	if o != nil && o.PrimaryButtonHoverBgColor != nil {
		return true
	}

	return false
}

// SetPrimaryButtonHoverBgColor gets a reference to the given string and assigns it to the PrimaryButtonHoverBgColor field.
func (o *WhitelabelSettings) SetPrimaryButtonHoverBgColor(v string) {
	o.PrimaryButtonHoverBgColor = &v
}

// GetPrimaryButtonHoverFgColor returns the PrimaryButtonHoverFgColor field value if set, zero value otherwise.
func (o *WhitelabelSettings) GetPrimaryButtonHoverFgColor() string {
	if o == nil || o.PrimaryButtonHoverFgColor == nil {
		var ret string
		return ret
	}
	return *o.PrimaryButtonHoverFgColor
}

// GetPrimaryButtonHoverFgColorOk returns a tuple with the PrimaryButtonHoverFgColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WhitelabelSettings) GetPrimaryButtonHoverFgColorOk() (*string, bool) {
	if o == nil || o.PrimaryButtonHoverFgColor == nil {
		return nil, false
	}
	return o.PrimaryButtonHoverFgColor, true
}

// HasPrimaryButtonHoverFgColor returns a boolean if a field has been set.
func (o *WhitelabelSettings) HasPrimaryButtonHoverFgColor() bool {
	if o != nil && o.PrimaryButtonHoverFgColor != nil {
		return true
	}

	return false
}

// SetPrimaryButtonHoverFgColor gets a reference to the given string and assigns it to the PrimaryButtonHoverFgColor field.
func (o *WhitelabelSettings) SetPrimaryButtonHoverFgColor(v string) {
	o.PrimaryButtonHoverFgColor = &v
}

// GetFooterBgColor returns the FooterBgColor field value if set, zero value otherwise.
func (o *WhitelabelSettings) GetFooterBgColor() string {
	if o == nil || o.FooterBgColor == nil {
		var ret string
		return ret
	}
	return *o.FooterBgColor
}

// GetFooterBgColorOk returns a tuple with the FooterBgColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WhitelabelSettings) GetFooterBgColorOk() (*string, bool) {
	if o == nil || o.FooterBgColor == nil {
		return nil, false
	}
	return o.FooterBgColor, true
}

// HasFooterBgColor returns a boolean if a field has been set.
func (o *WhitelabelSettings) HasFooterBgColor() bool {
	if o != nil && o.FooterBgColor != nil {
		return true
	}

	return false
}

// SetFooterBgColor gets a reference to the given string and assigns it to the FooterBgColor field.
func (o *WhitelabelSettings) SetFooterBgColor(v string) {
	o.FooterBgColor = &v
}

// GetFooterFgColor returns the FooterFgColor field value if set, zero value otherwise.
func (o *WhitelabelSettings) GetFooterFgColor() string {
	if o == nil || o.FooterFgColor == nil {
		var ret string
		return ret
	}
	return *o.FooterFgColor
}

// GetFooterFgColorOk returns a tuple with the FooterFgColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WhitelabelSettings) GetFooterFgColorOk() (*string, bool) {
	if o == nil || o.FooterFgColor == nil {
		return nil, false
	}
	return o.FooterFgColor, true
}

// HasFooterFgColor returns a boolean if a field has been set.
func (o *WhitelabelSettings) HasFooterFgColor() bool {
	if o != nil && o.FooterFgColor != nil {
		return true
	}

	return false
}

// SetFooterFgColor gets a reference to the given string and assigns it to the FooterFgColor field.
func (o *WhitelabelSettings) SetFooterFgColor(v string) {
	o.FooterFgColor = &v
}

// GetLoginBgColor returns the LoginBgColor field value if set, zero value otherwise.
func (o *WhitelabelSettings) GetLoginBgColor() string {
	if o == nil || o.LoginBgColor == nil {
		var ret string
		return ret
	}
	return *o.LoginBgColor
}

// GetLoginBgColorOk returns a tuple with the LoginBgColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WhitelabelSettings) GetLoginBgColorOk() (*string, bool) {
	if o == nil || o.LoginBgColor == nil {
		return nil, false
	}
	return o.LoginBgColor, true
}

// HasLoginBgColor returns a boolean if a field has been set.
func (o *WhitelabelSettings) HasLoginBgColor() bool {
	if o != nil && o.LoginBgColor != nil {
		return true
	}

	return false
}

// SetLoginBgColor gets a reference to the given string and assigns it to the LoginBgColor field.
func (o *WhitelabelSettings) SetLoginBgColor(v string) {
	o.LoginBgColor = &v
}

// GetOverrideCss returns the OverrideCss field value if set, zero value otherwise.
func (o *WhitelabelSettings) GetOverrideCss() string {
	if o == nil || o.OverrideCss == nil {
		var ret string
		return ret
	}
	return *o.OverrideCss
}

// GetOverrideCssOk returns a tuple with the OverrideCss field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WhitelabelSettings) GetOverrideCssOk() (*string, bool) {
	if o == nil || o.OverrideCss == nil {
		return nil, false
	}
	return o.OverrideCss, true
}

// HasOverrideCss returns a boolean if a field has been set.
func (o *WhitelabelSettings) HasOverrideCss() bool {
	if o != nil && o.OverrideCss != nil {
		return true
	}

	return false
}

// SetOverrideCss gets a reference to the given string and assigns it to the OverrideCss field.
func (o *WhitelabelSettings) SetOverrideCss(v string) {
	o.OverrideCss = &v
}

// GetCopyrightString returns the CopyrightString field value if set, zero value otherwise.
func (o *WhitelabelSettings) GetCopyrightString() string {
	if o == nil || o.CopyrightString == nil {
		var ret string
		return ret
	}
	return *o.CopyrightString
}

// GetCopyrightStringOk returns a tuple with the CopyrightString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WhitelabelSettings) GetCopyrightStringOk() (*string, bool) {
	if o == nil || o.CopyrightString == nil {
		return nil, false
	}
	return o.CopyrightString, true
}

// HasCopyrightString returns a boolean if a field has been set.
func (o *WhitelabelSettings) HasCopyrightString() bool {
	if o != nil && o.CopyrightString != nil {
		return true
	}

	return false
}

// SetCopyrightString gets a reference to the given string and assigns it to the CopyrightString field.
func (o *WhitelabelSettings) SetCopyrightString(v string) {
	o.CopyrightString = &v
}

// GetTermsOfUse returns the TermsOfUse field value if set, zero value otherwise.
func (o *WhitelabelSettings) GetTermsOfUse() string {
	if o == nil || o.TermsOfUse == nil {
		var ret string
		return ret
	}
	return *o.TermsOfUse
}

// GetTermsOfUseOk returns a tuple with the TermsOfUse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WhitelabelSettings) GetTermsOfUseOk() (*string, bool) {
	if o == nil || o.TermsOfUse == nil {
		return nil, false
	}
	return o.TermsOfUse, true
}

// HasTermsOfUse returns a boolean if a field has been set.
func (o *WhitelabelSettings) HasTermsOfUse() bool {
	if o != nil && o.TermsOfUse != nil {
		return true
	}

	return false
}

// SetTermsOfUse gets a reference to the given string and assigns it to the TermsOfUse field.
func (o *WhitelabelSettings) SetTermsOfUse(v string) {
	o.TermsOfUse = &v
}

// GetPrivacyPolicy returns the PrivacyPolicy field value if set, zero value otherwise.
func (o *WhitelabelSettings) GetPrivacyPolicy() string {
	if o == nil || o.PrivacyPolicy == nil {
		var ret string
		return ret
	}
	return *o.PrivacyPolicy
}

// GetPrivacyPolicyOk returns a tuple with the PrivacyPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WhitelabelSettings) GetPrivacyPolicyOk() (*string, bool) {
	if o == nil || o.PrivacyPolicy == nil {
		return nil, false
	}
	return o.PrivacyPolicy, true
}

// HasPrivacyPolicy returns a boolean if a field has been set.
func (o *WhitelabelSettings) HasPrivacyPolicy() bool {
	if o != nil && o.PrivacyPolicy != nil {
		return true
	}

	return false
}

// SetPrivacyPolicy gets a reference to the given string and assigns it to the PrivacyPolicy field.
func (o *WhitelabelSettings) SetPrivacyPolicy(v string) {
	o.PrivacyPolicy = &v
}

// GetSupportMenuLinks returns the SupportMenuLinks field value if set, zero value otherwise.
func (o *WhitelabelSettings) GetSupportMenuLinks() []WhitelabelSettingsSupportMenuLinks {
	if o == nil || o.SupportMenuLinks == nil {
		var ret []WhitelabelSettingsSupportMenuLinks
		return ret
	}
	return *o.SupportMenuLinks
}

// GetSupportMenuLinksOk returns a tuple with the SupportMenuLinks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WhitelabelSettings) GetSupportMenuLinksOk() (*[]WhitelabelSettingsSupportMenuLinks, bool) {
	if o == nil || o.SupportMenuLinks == nil {
		return nil, false
	}
	return o.SupportMenuLinks, true
}

// HasSupportMenuLinks returns a boolean if a field has been set.
func (o *WhitelabelSettings) HasSupportMenuLinks() bool {
	if o != nil && o.SupportMenuLinks != nil {
		return true
	}

	return false
}

// SetSupportMenuLinks gets a reference to the given []WhitelabelSettingsSupportMenuLinks and assigns it to the SupportMenuLinks field.
func (o *WhitelabelSettings) SetSupportMenuLinks(v []WhitelabelSettingsSupportMenuLinks) {
	o.SupportMenuLinks = &v
}

func (o WhitelabelSettings) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Enabled != nil {
		toSerialize["enabled"] = o.Enabled
	}
	if o.ApplianceName != nil {
		toSerialize["applianceName"] = o.ApplianceName
	}
	if o.DisableSupportMenu != nil {
		toSerialize["disableSupportMenu"] = o.DisableSupportMenu
	}
	if o.HeaderLogo != nil {
		toSerialize["headerLogo"] = o.HeaderLogo
	}
	if o.FooterLogo != nil {
		toSerialize["footerLogo"] = o.FooterLogo
	}
	if o.LoginLogo != nil {
		toSerialize["loginLogo"] = o.LoginLogo
	}
	if o.Favicon != nil {
		toSerialize["favicon"] = o.Favicon
	}
	if o.HeaderBgColor != nil {
		toSerialize["headerBgColor"] = o.HeaderBgColor
	}
	if o.HeaderFgColor != nil {
		toSerialize["headerFgColor"] = o.HeaderFgColor
	}
	if o.NavBgColor != nil {
		toSerialize["navBgColor"] = o.NavBgColor
	}
	if o.NavFgColor != nil {
		toSerialize["navFgColor"] = o.NavFgColor
	}
	if o.NavHoverColor != nil {
		toSerialize["navHoverColor"] = o.NavHoverColor
	}
	if o.PrimaryButtonBgColor != nil {
		toSerialize["primaryButtonBgColor"] = o.PrimaryButtonBgColor
	}
	if o.PrimaryButtonFgColor != nil {
		toSerialize["primaryButtonFgColor"] = o.PrimaryButtonFgColor
	}
	if o.PrimaryButtonHoverBgColor != nil {
		toSerialize["primaryButtonHoverBgColor"] = o.PrimaryButtonHoverBgColor
	}
	if o.PrimaryButtonHoverFgColor != nil {
		toSerialize["primaryButtonHoverFgColor"] = o.PrimaryButtonHoverFgColor
	}
	if o.FooterBgColor != nil {
		toSerialize["footerBgColor"] = o.FooterBgColor
	}
	if o.FooterFgColor != nil {
		toSerialize["footerFgColor"] = o.FooterFgColor
	}
	if o.LoginBgColor != nil {
		toSerialize["loginBgColor"] = o.LoginBgColor
	}
	if o.OverrideCss != nil {
		toSerialize["overrideCss"] = o.OverrideCss
	}
	if o.CopyrightString != nil {
		toSerialize["copyrightString"] = o.CopyrightString
	}
	if o.TermsOfUse != nil {
		toSerialize["termsOfUse"] = o.TermsOfUse
	}
	if o.PrivacyPolicy != nil {
		toSerialize["privacyPolicy"] = o.PrivacyPolicy
	}
	if o.SupportMenuLinks != nil {
		toSerialize["supportMenuLinks"] = o.SupportMenuLinks
	}
	return json.Marshal(toSerialize)
}

type NullableWhitelabelSettings struct {
	value *WhitelabelSettings
	isSet bool
}

func (v NullableWhitelabelSettings) Get() *WhitelabelSettings {
	return v.value
}

func (v *NullableWhitelabelSettings) Set(val *WhitelabelSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableWhitelabelSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableWhitelabelSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWhitelabelSettings(val *WhitelabelSettings) *NullableWhitelabelSettings {
	return &NullableWhitelabelSettings{value: val, isSet: true}
}

func (v NullableWhitelabelSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWhitelabelSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


