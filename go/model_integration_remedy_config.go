/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// IntegrationRemedyConfig struct for IntegrationRemedyConfig
type IntegrationRemedyConfig struct {
	ApprovalUser *string `json:"approvalUser,omitempty"`
	Company *string `json:"company,omitempty"`
	RemedyIgnoreSSLErrors NullableString `json:"remedyIgnoreSSLErrors,omitempty"`
}

// NewIntegrationRemedyConfig instantiates a new IntegrationRemedyConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIntegrationRemedyConfig() *IntegrationRemedyConfig {
	this := IntegrationRemedyConfig{}
	return &this
}

// NewIntegrationRemedyConfigWithDefaults instantiates a new IntegrationRemedyConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIntegrationRemedyConfigWithDefaults() *IntegrationRemedyConfig {
	this := IntegrationRemedyConfig{}
	return &this
}

// GetApprovalUser returns the ApprovalUser field value if set, zero value otherwise.
func (o *IntegrationRemedyConfig) GetApprovalUser() string {
	if o == nil || o.ApprovalUser == nil {
		var ret string
		return ret
	}
	return *o.ApprovalUser
}

// GetApprovalUserOk returns a tuple with the ApprovalUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationRemedyConfig) GetApprovalUserOk() (*string, bool) {
	if o == nil || o.ApprovalUser == nil {
		return nil, false
	}
	return o.ApprovalUser, true
}

// HasApprovalUser returns a boolean if a field has been set.
func (o *IntegrationRemedyConfig) HasApprovalUser() bool {
	if o != nil && o.ApprovalUser != nil {
		return true
	}

	return false
}

// SetApprovalUser gets a reference to the given string and assigns it to the ApprovalUser field.
func (o *IntegrationRemedyConfig) SetApprovalUser(v string) {
	o.ApprovalUser = &v
}

// GetCompany returns the Company field value if set, zero value otherwise.
func (o *IntegrationRemedyConfig) GetCompany() string {
	if o == nil || o.Company == nil {
		var ret string
		return ret
	}
	return *o.Company
}

// GetCompanyOk returns a tuple with the Company field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationRemedyConfig) GetCompanyOk() (*string, bool) {
	if o == nil || o.Company == nil {
		return nil, false
	}
	return o.Company, true
}

// HasCompany returns a boolean if a field has been set.
func (o *IntegrationRemedyConfig) HasCompany() bool {
	if o != nil && o.Company != nil {
		return true
	}

	return false
}

// SetCompany gets a reference to the given string and assigns it to the Company field.
func (o *IntegrationRemedyConfig) SetCompany(v string) {
	o.Company = &v
}

// GetRemedyIgnoreSSLErrors returns the RemedyIgnoreSSLErrors field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IntegrationRemedyConfig) GetRemedyIgnoreSSLErrors() string {
	if o == nil || o.RemedyIgnoreSSLErrors.Get() == nil {
		var ret string
		return ret
	}
	return *o.RemedyIgnoreSSLErrors.Get()
}

// GetRemedyIgnoreSSLErrorsOk returns a tuple with the RemedyIgnoreSSLErrors field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IntegrationRemedyConfig) GetRemedyIgnoreSSLErrorsOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RemedyIgnoreSSLErrors.Get(), o.RemedyIgnoreSSLErrors.IsSet()
}

// HasRemedyIgnoreSSLErrors returns a boolean if a field has been set.
func (o *IntegrationRemedyConfig) HasRemedyIgnoreSSLErrors() bool {
	if o != nil && o.RemedyIgnoreSSLErrors.IsSet() {
		return true
	}

	return false
}

// SetRemedyIgnoreSSLErrors gets a reference to the given NullableString and assigns it to the RemedyIgnoreSSLErrors field.
func (o *IntegrationRemedyConfig) SetRemedyIgnoreSSLErrors(v string) {
	o.RemedyIgnoreSSLErrors.Set(&v)
}
// SetRemedyIgnoreSSLErrorsNil sets the value for RemedyIgnoreSSLErrors to be an explicit nil
func (o *IntegrationRemedyConfig) SetRemedyIgnoreSSLErrorsNil() {
	o.RemedyIgnoreSSLErrors.Set(nil)
}

// UnsetRemedyIgnoreSSLErrors ensures that no value is present for RemedyIgnoreSSLErrors, not even an explicit nil
func (o *IntegrationRemedyConfig) UnsetRemedyIgnoreSSLErrors() {
	o.RemedyIgnoreSSLErrors.Unset()
}

func (o IntegrationRemedyConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ApprovalUser != nil {
		toSerialize["approvalUser"] = o.ApprovalUser
	}
	if o.Company != nil {
		toSerialize["company"] = o.Company
	}
	if o.RemedyIgnoreSSLErrors.IsSet() {
		toSerialize["remedyIgnoreSSLErrors"] = o.RemedyIgnoreSSLErrors.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableIntegrationRemedyConfig struct {
	value *IntegrationRemedyConfig
	isSet bool
}

func (v NullableIntegrationRemedyConfig) Get() *IntegrationRemedyConfig {
	return v.value
}

func (v *NullableIntegrationRemedyConfig) Set(val *IntegrationRemedyConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableIntegrationRemedyConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableIntegrationRemedyConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntegrationRemedyConfig(val *IntegrationRemedyConfig) *NullableIntegrationRemedyConfig {
	return &NullableIntegrationRemedyConfig{value: val, isSet: true}
}

func (v NullableIntegrationRemedyConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntegrationRemedyConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


