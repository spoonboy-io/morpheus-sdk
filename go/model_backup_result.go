/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// BackupResult struct for BackupResult
type BackupResult struct {
	// Backup Result ID
	Id *int64 `json:"id,omitempty"`
	Backup *BackupJobBackups `json:"backup,omitempty"`
	BackupSetId NullableString `json:"backupSetId,omitempty"`
	InstanceId NullableInt64 `json:"instanceId,omitempty"`
	ContainerId NullableInt64 `json:"containerId,omitempty"`
	ServerId NullableInt64 `json:"serverId,omitempty"`
	Status NullableString `json:"status,omitempty"`
	ErrorMessage NullableString `json:"errorMessage,omitempty"`
	StartDate NullableTime `json:"startDate,omitempty"`
	EndDate NullableTime `json:"endDate,omitempty"`
	DurationMillis NullableInt64 `json:"durationMillis,omitempty"`
	SizeInBytes NullableInt64 `json:"sizeInBytes,omitempty"`
	SizeInMb NullableInt64 `json:"sizeInMb,omitempty"`
	VolumePath NullableString `json:"volumePath,omitempty"`
	ResultArchive NullableString `json:"resultArchive,omitempty"`
	ResultPath NullableString `json:"resultPath,omitempty"`
	ExternalId NullableString `json:"externalId,omitempty"`
	SnapshotId NullableString `json:"snapshotId,omitempty"`
	SnapshotExternalId NullableString `json:"snapshotExternalId,omitempty"`
	CreatedBy NullableInlineResponse200108NetworkFloatingIpCreatedBy `json:"createdBy,omitempty"`
	// Date Created
	DateCreated *time.Time `json:"dateCreated,omitempty"`
	// Last Updated
	LastUpdated *time.Time `json:"lastUpdated,omitempty"`
}

// NewBackupResult instantiates a new BackupResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBackupResult() *BackupResult {
	this := BackupResult{}
	return &this
}

// NewBackupResultWithDefaults instantiates a new BackupResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBackupResultWithDefaults() *BackupResult {
	this := BackupResult{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *BackupResult) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupResult) GetIdOk() (*int64, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *BackupResult) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *BackupResult) SetId(v int64) {
	o.Id = &v
}

// GetBackup returns the Backup field value if set, zero value otherwise.
func (o *BackupResult) GetBackup() BackupJobBackups {
	if o == nil || o.Backup == nil {
		var ret BackupJobBackups
		return ret
	}
	return *o.Backup
}

// GetBackupOk returns a tuple with the Backup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupResult) GetBackupOk() (*BackupJobBackups, bool) {
	if o == nil || o.Backup == nil {
		return nil, false
	}
	return o.Backup, true
}

// HasBackup returns a boolean if a field has been set.
func (o *BackupResult) HasBackup() bool {
	if o != nil && o.Backup != nil {
		return true
	}

	return false
}

// SetBackup gets a reference to the given BackupJobBackups and assigns it to the Backup field.
func (o *BackupResult) SetBackup(v BackupJobBackups) {
	o.Backup = &v
}

// GetBackupSetId returns the BackupSetId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupResult) GetBackupSetId() string {
	if o == nil || o.BackupSetId.Get() == nil {
		var ret string
		return ret
	}
	return *o.BackupSetId.Get()
}

// GetBackupSetIdOk returns a tuple with the BackupSetId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupResult) GetBackupSetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.BackupSetId.Get(), o.BackupSetId.IsSet()
}

// HasBackupSetId returns a boolean if a field has been set.
func (o *BackupResult) HasBackupSetId() bool {
	if o != nil && o.BackupSetId.IsSet() {
		return true
	}

	return false
}

// SetBackupSetId gets a reference to the given NullableString and assigns it to the BackupSetId field.
func (o *BackupResult) SetBackupSetId(v string) {
	o.BackupSetId.Set(&v)
}
// SetBackupSetIdNil sets the value for BackupSetId to be an explicit nil
func (o *BackupResult) SetBackupSetIdNil() {
	o.BackupSetId.Set(nil)
}

// UnsetBackupSetId ensures that no value is present for BackupSetId, not even an explicit nil
func (o *BackupResult) UnsetBackupSetId() {
	o.BackupSetId.Unset()
}

// GetInstanceId returns the InstanceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupResult) GetInstanceId() int64 {
	if o == nil || o.InstanceId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.InstanceId.Get()
}

// GetInstanceIdOk returns a tuple with the InstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupResult) GetInstanceIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.InstanceId.Get(), o.InstanceId.IsSet()
}

// HasInstanceId returns a boolean if a field has been set.
func (o *BackupResult) HasInstanceId() bool {
	if o != nil && o.InstanceId.IsSet() {
		return true
	}

	return false
}

// SetInstanceId gets a reference to the given NullableInt64 and assigns it to the InstanceId field.
func (o *BackupResult) SetInstanceId(v int64) {
	o.InstanceId.Set(&v)
}
// SetInstanceIdNil sets the value for InstanceId to be an explicit nil
func (o *BackupResult) SetInstanceIdNil() {
	o.InstanceId.Set(nil)
}

// UnsetInstanceId ensures that no value is present for InstanceId, not even an explicit nil
func (o *BackupResult) UnsetInstanceId() {
	o.InstanceId.Unset()
}

// GetContainerId returns the ContainerId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupResult) GetContainerId() int64 {
	if o == nil || o.ContainerId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ContainerId.Get()
}

// GetContainerIdOk returns a tuple with the ContainerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupResult) GetContainerIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ContainerId.Get(), o.ContainerId.IsSet()
}

// HasContainerId returns a boolean if a field has been set.
func (o *BackupResult) HasContainerId() bool {
	if o != nil && o.ContainerId.IsSet() {
		return true
	}

	return false
}

// SetContainerId gets a reference to the given NullableInt64 and assigns it to the ContainerId field.
func (o *BackupResult) SetContainerId(v int64) {
	o.ContainerId.Set(&v)
}
// SetContainerIdNil sets the value for ContainerId to be an explicit nil
func (o *BackupResult) SetContainerIdNil() {
	o.ContainerId.Set(nil)
}

// UnsetContainerId ensures that no value is present for ContainerId, not even an explicit nil
func (o *BackupResult) UnsetContainerId() {
	o.ContainerId.Unset()
}

// GetServerId returns the ServerId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupResult) GetServerId() int64 {
	if o == nil || o.ServerId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ServerId.Get()
}

// GetServerIdOk returns a tuple with the ServerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupResult) GetServerIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ServerId.Get(), o.ServerId.IsSet()
}

// HasServerId returns a boolean if a field has been set.
func (o *BackupResult) HasServerId() bool {
	if o != nil && o.ServerId.IsSet() {
		return true
	}

	return false
}

// SetServerId gets a reference to the given NullableInt64 and assigns it to the ServerId field.
func (o *BackupResult) SetServerId(v int64) {
	o.ServerId.Set(&v)
}
// SetServerIdNil sets the value for ServerId to be an explicit nil
func (o *BackupResult) SetServerIdNil() {
	o.ServerId.Set(nil)
}

// UnsetServerId ensures that no value is present for ServerId, not even an explicit nil
func (o *BackupResult) UnsetServerId() {
	o.ServerId.Unset()
}

// GetStatus returns the Status field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupResult) GetStatus() string {
	if o == nil || o.Status.Get() == nil {
		var ret string
		return ret
	}
	return *o.Status.Get()
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupResult) GetStatusOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Status.Get(), o.Status.IsSet()
}

// HasStatus returns a boolean if a field has been set.
func (o *BackupResult) HasStatus() bool {
	if o != nil && o.Status.IsSet() {
		return true
	}

	return false
}

// SetStatus gets a reference to the given NullableString and assigns it to the Status field.
func (o *BackupResult) SetStatus(v string) {
	o.Status.Set(&v)
}
// SetStatusNil sets the value for Status to be an explicit nil
func (o *BackupResult) SetStatusNil() {
	o.Status.Set(nil)
}

// UnsetStatus ensures that no value is present for Status, not even an explicit nil
func (o *BackupResult) UnsetStatus() {
	o.Status.Unset()
}

// GetErrorMessage returns the ErrorMessage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupResult) GetErrorMessage() string {
	if o == nil || o.ErrorMessage.Get() == nil {
		var ret string
		return ret
	}
	return *o.ErrorMessage.Get()
}

// GetErrorMessageOk returns a tuple with the ErrorMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupResult) GetErrorMessageOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ErrorMessage.Get(), o.ErrorMessage.IsSet()
}

// HasErrorMessage returns a boolean if a field has been set.
func (o *BackupResult) HasErrorMessage() bool {
	if o != nil && o.ErrorMessage.IsSet() {
		return true
	}

	return false
}

// SetErrorMessage gets a reference to the given NullableString and assigns it to the ErrorMessage field.
func (o *BackupResult) SetErrorMessage(v string) {
	o.ErrorMessage.Set(&v)
}
// SetErrorMessageNil sets the value for ErrorMessage to be an explicit nil
func (o *BackupResult) SetErrorMessageNil() {
	o.ErrorMessage.Set(nil)
}

// UnsetErrorMessage ensures that no value is present for ErrorMessage, not even an explicit nil
func (o *BackupResult) UnsetErrorMessage() {
	o.ErrorMessage.Unset()
}

// GetStartDate returns the StartDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupResult) GetStartDate() time.Time {
	if o == nil || o.StartDate.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.StartDate.Get()
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupResult) GetStartDateOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.StartDate.Get(), o.StartDate.IsSet()
}

// HasStartDate returns a boolean if a field has been set.
func (o *BackupResult) HasStartDate() bool {
	if o != nil && o.StartDate.IsSet() {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given NullableTime and assigns it to the StartDate field.
func (o *BackupResult) SetStartDate(v time.Time) {
	o.StartDate.Set(&v)
}
// SetStartDateNil sets the value for StartDate to be an explicit nil
func (o *BackupResult) SetStartDateNil() {
	o.StartDate.Set(nil)
}

// UnsetStartDate ensures that no value is present for StartDate, not even an explicit nil
func (o *BackupResult) UnsetStartDate() {
	o.StartDate.Unset()
}

// GetEndDate returns the EndDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupResult) GetEndDate() time.Time {
	if o == nil || o.EndDate.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.EndDate.Get()
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupResult) GetEndDateOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EndDate.Get(), o.EndDate.IsSet()
}

// HasEndDate returns a boolean if a field has been set.
func (o *BackupResult) HasEndDate() bool {
	if o != nil && o.EndDate.IsSet() {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given NullableTime and assigns it to the EndDate field.
func (o *BackupResult) SetEndDate(v time.Time) {
	o.EndDate.Set(&v)
}
// SetEndDateNil sets the value for EndDate to be an explicit nil
func (o *BackupResult) SetEndDateNil() {
	o.EndDate.Set(nil)
}

// UnsetEndDate ensures that no value is present for EndDate, not even an explicit nil
func (o *BackupResult) UnsetEndDate() {
	o.EndDate.Unset()
}

// GetDurationMillis returns the DurationMillis field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupResult) GetDurationMillis() int64 {
	if o == nil || o.DurationMillis.Get() == nil {
		var ret int64
		return ret
	}
	return *o.DurationMillis.Get()
}

// GetDurationMillisOk returns a tuple with the DurationMillis field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupResult) GetDurationMillisOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DurationMillis.Get(), o.DurationMillis.IsSet()
}

// HasDurationMillis returns a boolean if a field has been set.
func (o *BackupResult) HasDurationMillis() bool {
	if o != nil && o.DurationMillis.IsSet() {
		return true
	}

	return false
}

// SetDurationMillis gets a reference to the given NullableInt64 and assigns it to the DurationMillis field.
func (o *BackupResult) SetDurationMillis(v int64) {
	o.DurationMillis.Set(&v)
}
// SetDurationMillisNil sets the value for DurationMillis to be an explicit nil
func (o *BackupResult) SetDurationMillisNil() {
	o.DurationMillis.Set(nil)
}

// UnsetDurationMillis ensures that no value is present for DurationMillis, not even an explicit nil
func (o *BackupResult) UnsetDurationMillis() {
	o.DurationMillis.Unset()
}

// GetSizeInBytes returns the SizeInBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupResult) GetSizeInBytes() int64 {
	if o == nil || o.SizeInBytes.Get() == nil {
		var ret int64
		return ret
	}
	return *o.SizeInBytes.Get()
}

// GetSizeInBytesOk returns a tuple with the SizeInBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupResult) GetSizeInBytesOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SizeInBytes.Get(), o.SizeInBytes.IsSet()
}

// HasSizeInBytes returns a boolean if a field has been set.
func (o *BackupResult) HasSizeInBytes() bool {
	if o != nil && o.SizeInBytes.IsSet() {
		return true
	}

	return false
}

// SetSizeInBytes gets a reference to the given NullableInt64 and assigns it to the SizeInBytes field.
func (o *BackupResult) SetSizeInBytes(v int64) {
	o.SizeInBytes.Set(&v)
}
// SetSizeInBytesNil sets the value for SizeInBytes to be an explicit nil
func (o *BackupResult) SetSizeInBytesNil() {
	o.SizeInBytes.Set(nil)
}

// UnsetSizeInBytes ensures that no value is present for SizeInBytes, not even an explicit nil
func (o *BackupResult) UnsetSizeInBytes() {
	o.SizeInBytes.Unset()
}

// GetSizeInMb returns the SizeInMb field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupResult) GetSizeInMb() int64 {
	if o == nil || o.SizeInMb.Get() == nil {
		var ret int64
		return ret
	}
	return *o.SizeInMb.Get()
}

// GetSizeInMbOk returns a tuple with the SizeInMb field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupResult) GetSizeInMbOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SizeInMb.Get(), o.SizeInMb.IsSet()
}

// HasSizeInMb returns a boolean if a field has been set.
func (o *BackupResult) HasSizeInMb() bool {
	if o != nil && o.SizeInMb.IsSet() {
		return true
	}

	return false
}

// SetSizeInMb gets a reference to the given NullableInt64 and assigns it to the SizeInMb field.
func (o *BackupResult) SetSizeInMb(v int64) {
	o.SizeInMb.Set(&v)
}
// SetSizeInMbNil sets the value for SizeInMb to be an explicit nil
func (o *BackupResult) SetSizeInMbNil() {
	o.SizeInMb.Set(nil)
}

// UnsetSizeInMb ensures that no value is present for SizeInMb, not even an explicit nil
func (o *BackupResult) UnsetSizeInMb() {
	o.SizeInMb.Unset()
}

// GetVolumePath returns the VolumePath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupResult) GetVolumePath() string {
	if o == nil || o.VolumePath.Get() == nil {
		var ret string
		return ret
	}
	return *o.VolumePath.Get()
}

// GetVolumePathOk returns a tuple with the VolumePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupResult) GetVolumePathOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.VolumePath.Get(), o.VolumePath.IsSet()
}

// HasVolumePath returns a boolean if a field has been set.
func (o *BackupResult) HasVolumePath() bool {
	if o != nil && o.VolumePath.IsSet() {
		return true
	}

	return false
}

// SetVolumePath gets a reference to the given NullableString and assigns it to the VolumePath field.
func (o *BackupResult) SetVolumePath(v string) {
	o.VolumePath.Set(&v)
}
// SetVolumePathNil sets the value for VolumePath to be an explicit nil
func (o *BackupResult) SetVolumePathNil() {
	o.VolumePath.Set(nil)
}

// UnsetVolumePath ensures that no value is present for VolumePath, not even an explicit nil
func (o *BackupResult) UnsetVolumePath() {
	o.VolumePath.Unset()
}

// GetResultArchive returns the ResultArchive field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupResult) GetResultArchive() string {
	if o == nil || o.ResultArchive.Get() == nil {
		var ret string
		return ret
	}
	return *o.ResultArchive.Get()
}

// GetResultArchiveOk returns a tuple with the ResultArchive field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupResult) GetResultArchiveOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ResultArchive.Get(), o.ResultArchive.IsSet()
}

// HasResultArchive returns a boolean if a field has been set.
func (o *BackupResult) HasResultArchive() bool {
	if o != nil && o.ResultArchive.IsSet() {
		return true
	}

	return false
}

// SetResultArchive gets a reference to the given NullableString and assigns it to the ResultArchive field.
func (o *BackupResult) SetResultArchive(v string) {
	o.ResultArchive.Set(&v)
}
// SetResultArchiveNil sets the value for ResultArchive to be an explicit nil
func (o *BackupResult) SetResultArchiveNil() {
	o.ResultArchive.Set(nil)
}

// UnsetResultArchive ensures that no value is present for ResultArchive, not even an explicit nil
func (o *BackupResult) UnsetResultArchive() {
	o.ResultArchive.Unset()
}

// GetResultPath returns the ResultPath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupResult) GetResultPath() string {
	if o == nil || o.ResultPath.Get() == nil {
		var ret string
		return ret
	}
	return *o.ResultPath.Get()
}

// GetResultPathOk returns a tuple with the ResultPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupResult) GetResultPathOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ResultPath.Get(), o.ResultPath.IsSet()
}

// HasResultPath returns a boolean if a field has been set.
func (o *BackupResult) HasResultPath() bool {
	if o != nil && o.ResultPath.IsSet() {
		return true
	}

	return false
}

// SetResultPath gets a reference to the given NullableString and assigns it to the ResultPath field.
func (o *BackupResult) SetResultPath(v string) {
	o.ResultPath.Set(&v)
}
// SetResultPathNil sets the value for ResultPath to be an explicit nil
func (o *BackupResult) SetResultPathNil() {
	o.ResultPath.Set(nil)
}

// UnsetResultPath ensures that no value is present for ResultPath, not even an explicit nil
func (o *BackupResult) UnsetResultPath() {
	o.ResultPath.Unset()
}

// GetExternalId returns the ExternalId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupResult) GetExternalId() string {
	if o == nil || o.ExternalId.Get() == nil {
		var ret string
		return ret
	}
	return *o.ExternalId.Get()
}

// GetExternalIdOk returns a tuple with the ExternalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupResult) GetExternalIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ExternalId.Get(), o.ExternalId.IsSet()
}

// HasExternalId returns a boolean if a field has been set.
func (o *BackupResult) HasExternalId() bool {
	if o != nil && o.ExternalId.IsSet() {
		return true
	}

	return false
}

// SetExternalId gets a reference to the given NullableString and assigns it to the ExternalId field.
func (o *BackupResult) SetExternalId(v string) {
	o.ExternalId.Set(&v)
}
// SetExternalIdNil sets the value for ExternalId to be an explicit nil
func (o *BackupResult) SetExternalIdNil() {
	o.ExternalId.Set(nil)
}

// UnsetExternalId ensures that no value is present for ExternalId, not even an explicit nil
func (o *BackupResult) UnsetExternalId() {
	o.ExternalId.Unset()
}

// GetSnapshotId returns the SnapshotId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupResult) GetSnapshotId() string {
	if o == nil || o.SnapshotId.Get() == nil {
		var ret string
		return ret
	}
	return *o.SnapshotId.Get()
}

// GetSnapshotIdOk returns a tuple with the SnapshotId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupResult) GetSnapshotIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SnapshotId.Get(), o.SnapshotId.IsSet()
}

// HasSnapshotId returns a boolean if a field has been set.
func (o *BackupResult) HasSnapshotId() bool {
	if o != nil && o.SnapshotId.IsSet() {
		return true
	}

	return false
}

// SetSnapshotId gets a reference to the given NullableString and assigns it to the SnapshotId field.
func (o *BackupResult) SetSnapshotId(v string) {
	o.SnapshotId.Set(&v)
}
// SetSnapshotIdNil sets the value for SnapshotId to be an explicit nil
func (o *BackupResult) SetSnapshotIdNil() {
	o.SnapshotId.Set(nil)
}

// UnsetSnapshotId ensures that no value is present for SnapshotId, not even an explicit nil
func (o *BackupResult) UnsetSnapshotId() {
	o.SnapshotId.Unset()
}

// GetSnapshotExternalId returns the SnapshotExternalId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupResult) GetSnapshotExternalId() string {
	if o == nil || o.SnapshotExternalId.Get() == nil {
		var ret string
		return ret
	}
	return *o.SnapshotExternalId.Get()
}

// GetSnapshotExternalIdOk returns a tuple with the SnapshotExternalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupResult) GetSnapshotExternalIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SnapshotExternalId.Get(), o.SnapshotExternalId.IsSet()
}

// HasSnapshotExternalId returns a boolean if a field has been set.
func (o *BackupResult) HasSnapshotExternalId() bool {
	if o != nil && o.SnapshotExternalId.IsSet() {
		return true
	}

	return false
}

// SetSnapshotExternalId gets a reference to the given NullableString and assigns it to the SnapshotExternalId field.
func (o *BackupResult) SetSnapshotExternalId(v string) {
	o.SnapshotExternalId.Set(&v)
}
// SetSnapshotExternalIdNil sets the value for SnapshotExternalId to be an explicit nil
func (o *BackupResult) SetSnapshotExternalIdNil() {
	o.SnapshotExternalId.Set(nil)
}

// UnsetSnapshotExternalId ensures that no value is present for SnapshotExternalId, not even an explicit nil
func (o *BackupResult) UnsetSnapshotExternalId() {
	o.SnapshotExternalId.Unset()
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupResult) GetCreatedBy() InlineResponse200108NetworkFloatingIpCreatedBy {
	if o == nil || o.CreatedBy.Get() == nil {
		var ret InlineResponse200108NetworkFloatingIpCreatedBy
		return ret
	}
	return *o.CreatedBy.Get()
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupResult) GetCreatedByOk() (*InlineResponse200108NetworkFloatingIpCreatedBy, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CreatedBy.Get(), o.CreatedBy.IsSet()
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *BackupResult) HasCreatedBy() bool {
	if o != nil && o.CreatedBy.IsSet() {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given NullableInlineResponse200108NetworkFloatingIpCreatedBy and assigns it to the CreatedBy field.
func (o *BackupResult) SetCreatedBy(v InlineResponse200108NetworkFloatingIpCreatedBy) {
	o.CreatedBy.Set(&v)
}
// SetCreatedByNil sets the value for CreatedBy to be an explicit nil
func (o *BackupResult) SetCreatedByNil() {
	o.CreatedBy.Set(nil)
}

// UnsetCreatedBy ensures that no value is present for CreatedBy, not even an explicit nil
func (o *BackupResult) UnsetCreatedBy() {
	o.CreatedBy.Unset()
}

// GetDateCreated returns the DateCreated field value if set, zero value otherwise.
func (o *BackupResult) GetDateCreated() time.Time {
	if o == nil || o.DateCreated == nil {
		var ret time.Time
		return ret
	}
	return *o.DateCreated
}

// GetDateCreatedOk returns a tuple with the DateCreated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupResult) GetDateCreatedOk() (*time.Time, bool) {
	if o == nil || o.DateCreated == nil {
		return nil, false
	}
	return o.DateCreated, true
}

// HasDateCreated returns a boolean if a field has been set.
func (o *BackupResult) HasDateCreated() bool {
	if o != nil && o.DateCreated != nil {
		return true
	}

	return false
}

// SetDateCreated gets a reference to the given time.Time and assigns it to the DateCreated field.
func (o *BackupResult) SetDateCreated(v time.Time) {
	o.DateCreated = &v
}

// GetLastUpdated returns the LastUpdated field value if set, zero value otherwise.
func (o *BackupResult) GetLastUpdated() time.Time {
	if o == nil || o.LastUpdated == nil {
		var ret time.Time
		return ret
	}
	return *o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupResult) GetLastUpdatedOk() (*time.Time, bool) {
	if o == nil || o.LastUpdated == nil {
		return nil, false
	}
	return o.LastUpdated, true
}

// HasLastUpdated returns a boolean if a field has been set.
func (o *BackupResult) HasLastUpdated() bool {
	if o != nil && o.LastUpdated != nil {
		return true
	}

	return false
}

// SetLastUpdated gets a reference to the given time.Time and assigns it to the LastUpdated field.
func (o *BackupResult) SetLastUpdated(v time.Time) {
	o.LastUpdated = &v
}

func (o BackupResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Backup != nil {
		toSerialize["backup"] = o.Backup
	}
	if o.BackupSetId.IsSet() {
		toSerialize["backupSetId"] = o.BackupSetId.Get()
	}
	if o.InstanceId.IsSet() {
		toSerialize["instanceId"] = o.InstanceId.Get()
	}
	if o.ContainerId.IsSet() {
		toSerialize["containerId"] = o.ContainerId.Get()
	}
	if o.ServerId.IsSet() {
		toSerialize["serverId"] = o.ServerId.Get()
	}
	if o.Status.IsSet() {
		toSerialize["status"] = o.Status.Get()
	}
	if o.ErrorMessage.IsSet() {
		toSerialize["errorMessage"] = o.ErrorMessage.Get()
	}
	if o.StartDate.IsSet() {
		toSerialize["startDate"] = o.StartDate.Get()
	}
	if o.EndDate.IsSet() {
		toSerialize["endDate"] = o.EndDate.Get()
	}
	if o.DurationMillis.IsSet() {
		toSerialize["durationMillis"] = o.DurationMillis.Get()
	}
	if o.SizeInBytes.IsSet() {
		toSerialize["sizeInBytes"] = o.SizeInBytes.Get()
	}
	if o.SizeInMb.IsSet() {
		toSerialize["sizeInMb"] = o.SizeInMb.Get()
	}
	if o.VolumePath.IsSet() {
		toSerialize["volumePath"] = o.VolumePath.Get()
	}
	if o.ResultArchive.IsSet() {
		toSerialize["resultArchive"] = o.ResultArchive.Get()
	}
	if o.ResultPath.IsSet() {
		toSerialize["resultPath"] = o.ResultPath.Get()
	}
	if o.ExternalId.IsSet() {
		toSerialize["externalId"] = o.ExternalId.Get()
	}
	if o.SnapshotId.IsSet() {
		toSerialize["snapshotId"] = o.SnapshotId.Get()
	}
	if o.SnapshotExternalId.IsSet() {
		toSerialize["snapshotExternalId"] = o.SnapshotExternalId.Get()
	}
	if o.CreatedBy.IsSet() {
		toSerialize["createdBy"] = o.CreatedBy.Get()
	}
	if o.DateCreated != nil {
		toSerialize["dateCreated"] = o.DateCreated
	}
	if o.LastUpdated != nil {
		toSerialize["lastUpdated"] = o.LastUpdated
	}
	return json.Marshal(toSerialize)
}

type NullableBackupResult struct {
	value *BackupResult
	isSet bool
}

func (v NullableBackupResult) Get() *BackupResult {
	return v.value
}

func (v *NullableBackupResult) Set(val *BackupResult) {
	v.value = val
	v.isSet = true
}

func (v NullableBackupResult) IsSet() bool {
	return v.isSet
}

func (v *NullableBackupResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBackupResult(val *BackupResult) *NullableBackupResult {
	return &NullableBackupResult{value: val, isSet: true}
}

func (v NullableBackupResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBackupResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


