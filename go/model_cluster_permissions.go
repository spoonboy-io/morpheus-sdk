/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ClusterPermissions struct for ClusterPermissions
type ClusterPermissions struct {
	ResourcePool *ClusterPermissionsResourcePool `json:"resourcePool,omitempty"`
	ResourcePermissions *ClusterPermissionsResourcePermissions `json:"resourcePermissions,omitempty"`
}

// NewClusterPermissions instantiates a new ClusterPermissions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClusterPermissions() *ClusterPermissions {
	this := ClusterPermissions{}
	return &this
}

// NewClusterPermissionsWithDefaults instantiates a new ClusterPermissions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClusterPermissionsWithDefaults() *ClusterPermissions {
	this := ClusterPermissions{}
	return &this
}

// GetResourcePool returns the ResourcePool field value if set, zero value otherwise.
func (o *ClusterPermissions) GetResourcePool() ClusterPermissionsResourcePool {
	if o == nil || o.ResourcePool == nil {
		var ret ClusterPermissionsResourcePool
		return ret
	}
	return *o.ResourcePool
}

// GetResourcePoolOk returns a tuple with the ResourcePool field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterPermissions) GetResourcePoolOk() (*ClusterPermissionsResourcePool, bool) {
	if o == nil || o.ResourcePool == nil {
		return nil, false
	}
	return o.ResourcePool, true
}

// HasResourcePool returns a boolean if a field has been set.
func (o *ClusterPermissions) HasResourcePool() bool {
	if o != nil && o.ResourcePool != nil {
		return true
	}

	return false
}

// SetResourcePool gets a reference to the given ClusterPermissionsResourcePool and assigns it to the ResourcePool field.
func (o *ClusterPermissions) SetResourcePool(v ClusterPermissionsResourcePool) {
	o.ResourcePool = &v
}

// GetResourcePermissions returns the ResourcePermissions field value if set, zero value otherwise.
func (o *ClusterPermissions) GetResourcePermissions() ClusterPermissionsResourcePermissions {
	if o == nil || o.ResourcePermissions == nil {
		var ret ClusterPermissionsResourcePermissions
		return ret
	}
	return *o.ResourcePermissions
}

// GetResourcePermissionsOk returns a tuple with the ResourcePermissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterPermissions) GetResourcePermissionsOk() (*ClusterPermissionsResourcePermissions, bool) {
	if o == nil || o.ResourcePermissions == nil {
		return nil, false
	}
	return o.ResourcePermissions, true
}

// HasResourcePermissions returns a boolean if a field has been set.
func (o *ClusterPermissions) HasResourcePermissions() bool {
	if o != nil && o.ResourcePermissions != nil {
		return true
	}

	return false
}

// SetResourcePermissions gets a reference to the given ClusterPermissionsResourcePermissions and assigns it to the ResourcePermissions field.
func (o *ClusterPermissions) SetResourcePermissions(v ClusterPermissionsResourcePermissions) {
	o.ResourcePermissions = &v
}

func (o ClusterPermissions) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ResourcePool != nil {
		toSerialize["resourcePool"] = o.ResourcePool
	}
	if o.ResourcePermissions != nil {
		toSerialize["resourcePermissions"] = o.ResourcePermissions
	}
	return json.Marshal(toSerialize)
}

type NullableClusterPermissions struct {
	value *ClusterPermissions
	isSet bool
}

func (v NullableClusterPermissions) Get() *ClusterPermissions {
	return v.value
}

func (v *NullableClusterPermissions) Set(val *ClusterPermissions) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterPermissions) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterPermissions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterPermissions(val *ClusterPermissions) *NullableClusterPermissions {
	return &NullableClusterPermissions{value: val, isSet: true}
}

func (v NullableClusterPermissions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterPermissions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


