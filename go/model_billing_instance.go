/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// BillingInstance struct for BillingInstance
type BillingInstance struct {
	InstanceId NullableInt64 `json:"instanceId,omitempty"`
	InstanceUUID *string `json:"instanceUUID,omitempty"`
	StartDate *time.Time `json:"startDate,omitempty"`
	EndDate *time.Time `json:"endDate,omitempty"`
	Name *string `json:"name,omitempty"`
	Price *float32 `json:"price,omitempty"`
	Cost *float32 `json:"cost,omitempty"`
	Currency *string `json:"currency,omitempty"`
	Containers *[]BillingInstanceContainers `json:"containers,omitempty"`
}

// NewBillingInstance instantiates a new BillingInstance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBillingInstance() *BillingInstance {
	this := BillingInstance{}
	return &this
}

// NewBillingInstanceWithDefaults instantiates a new BillingInstance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBillingInstanceWithDefaults() *BillingInstance {
	this := BillingInstance{}
	return &this
}

// GetInstanceId returns the InstanceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BillingInstance) GetInstanceId() int64 {
	if o == nil || o.InstanceId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.InstanceId.Get()
}

// GetInstanceIdOk returns a tuple with the InstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BillingInstance) GetInstanceIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.InstanceId.Get(), o.InstanceId.IsSet()
}

// HasInstanceId returns a boolean if a field has been set.
func (o *BillingInstance) HasInstanceId() bool {
	if o != nil && o.InstanceId.IsSet() {
		return true
	}

	return false
}

// SetInstanceId gets a reference to the given NullableInt64 and assigns it to the InstanceId field.
func (o *BillingInstance) SetInstanceId(v int64) {
	o.InstanceId.Set(&v)
}
// SetInstanceIdNil sets the value for InstanceId to be an explicit nil
func (o *BillingInstance) SetInstanceIdNil() {
	o.InstanceId.Set(nil)
}

// UnsetInstanceId ensures that no value is present for InstanceId, not even an explicit nil
func (o *BillingInstance) UnsetInstanceId() {
	o.InstanceId.Unset()
}

// GetInstanceUUID returns the InstanceUUID field value if set, zero value otherwise.
func (o *BillingInstance) GetInstanceUUID() string {
	if o == nil || o.InstanceUUID == nil {
		var ret string
		return ret
	}
	return *o.InstanceUUID
}

// GetInstanceUUIDOk returns a tuple with the InstanceUUID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingInstance) GetInstanceUUIDOk() (*string, bool) {
	if o == nil || o.InstanceUUID == nil {
		return nil, false
	}
	return o.InstanceUUID, true
}

// HasInstanceUUID returns a boolean if a field has been set.
func (o *BillingInstance) HasInstanceUUID() bool {
	if o != nil && o.InstanceUUID != nil {
		return true
	}

	return false
}

// SetInstanceUUID gets a reference to the given string and assigns it to the InstanceUUID field.
func (o *BillingInstance) SetInstanceUUID(v string) {
	o.InstanceUUID = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *BillingInstance) GetStartDate() time.Time {
	if o == nil || o.StartDate == nil {
		var ret time.Time
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingInstance) GetStartDateOk() (*time.Time, bool) {
	if o == nil || o.StartDate == nil {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *BillingInstance) HasStartDate() bool {
	if o != nil && o.StartDate != nil {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given time.Time and assigns it to the StartDate field.
func (o *BillingInstance) SetStartDate(v time.Time) {
	o.StartDate = &v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *BillingInstance) GetEndDate() time.Time {
	if o == nil || o.EndDate == nil {
		var ret time.Time
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingInstance) GetEndDateOk() (*time.Time, bool) {
	if o == nil || o.EndDate == nil {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *BillingInstance) HasEndDate() bool {
	if o != nil && o.EndDate != nil {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given time.Time and assigns it to the EndDate field.
func (o *BillingInstance) SetEndDate(v time.Time) {
	o.EndDate = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *BillingInstance) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingInstance) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *BillingInstance) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *BillingInstance) SetName(v string) {
	o.Name = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *BillingInstance) GetPrice() float32 {
	if o == nil || o.Price == nil {
		var ret float32
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingInstance) GetPriceOk() (*float32, bool) {
	if o == nil || o.Price == nil {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *BillingInstance) HasPrice() bool {
	if o != nil && o.Price != nil {
		return true
	}

	return false
}

// SetPrice gets a reference to the given float32 and assigns it to the Price field.
func (o *BillingInstance) SetPrice(v float32) {
	o.Price = &v
}

// GetCost returns the Cost field value if set, zero value otherwise.
func (o *BillingInstance) GetCost() float32 {
	if o == nil || o.Cost == nil {
		var ret float32
		return ret
	}
	return *o.Cost
}

// GetCostOk returns a tuple with the Cost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingInstance) GetCostOk() (*float32, bool) {
	if o == nil || o.Cost == nil {
		return nil, false
	}
	return o.Cost, true
}

// HasCost returns a boolean if a field has been set.
func (o *BillingInstance) HasCost() bool {
	if o != nil && o.Cost != nil {
		return true
	}

	return false
}

// SetCost gets a reference to the given float32 and assigns it to the Cost field.
func (o *BillingInstance) SetCost(v float32) {
	o.Cost = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *BillingInstance) GetCurrency() string {
	if o == nil || o.Currency == nil {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingInstance) GetCurrencyOk() (*string, bool) {
	if o == nil || o.Currency == nil {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *BillingInstance) HasCurrency() bool {
	if o != nil && o.Currency != nil {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *BillingInstance) SetCurrency(v string) {
	o.Currency = &v
}

// GetContainers returns the Containers field value if set, zero value otherwise.
func (o *BillingInstance) GetContainers() []BillingInstanceContainers {
	if o == nil || o.Containers == nil {
		var ret []BillingInstanceContainers
		return ret
	}
	return *o.Containers
}

// GetContainersOk returns a tuple with the Containers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingInstance) GetContainersOk() (*[]BillingInstanceContainers, bool) {
	if o == nil || o.Containers == nil {
		return nil, false
	}
	return o.Containers, true
}

// HasContainers returns a boolean if a field has been set.
func (o *BillingInstance) HasContainers() bool {
	if o != nil && o.Containers != nil {
		return true
	}

	return false
}

// SetContainers gets a reference to the given []BillingInstanceContainers and assigns it to the Containers field.
func (o *BillingInstance) SetContainers(v []BillingInstanceContainers) {
	o.Containers = &v
}

func (o BillingInstance) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.InstanceId.IsSet() {
		toSerialize["instanceId"] = o.InstanceId.Get()
	}
	if o.InstanceUUID != nil {
		toSerialize["instanceUUID"] = o.InstanceUUID
	}
	if o.StartDate != nil {
		toSerialize["startDate"] = o.StartDate
	}
	if o.EndDate != nil {
		toSerialize["endDate"] = o.EndDate
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Price != nil {
		toSerialize["price"] = o.Price
	}
	if o.Cost != nil {
		toSerialize["cost"] = o.Cost
	}
	if o.Currency != nil {
		toSerialize["currency"] = o.Currency
	}
	if o.Containers != nil {
		toSerialize["containers"] = o.Containers
	}
	return json.Marshal(toSerialize)
}

type NullableBillingInstance struct {
	value *BillingInstance
	isSet bool
}

func (v NullableBillingInstance) Get() *BillingInstance {
	return v.value
}

func (v *NullableBillingInstance) Set(val *BillingInstance) {
	v.value = val
	v.isSet = true
}

func (v NullableBillingInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableBillingInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBillingInstance(val *BillingInstance) *NullableBillingInstance {
	return &NullableBillingInstance{value: val, isSet: true}
}

func (v NullableBillingInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBillingInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


