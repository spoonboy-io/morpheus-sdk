/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// RolePermissionCatalogItemType struct for RolePermissionCatalogItemType
type RolePermissionCatalogItemType struct {
	// `id` of the catalog item type
	CatalogItemTypeId int32 `json:"catalogItemTypeId"`
	// The new access level.
	Access string `json:"access"`
}

// NewRolePermissionCatalogItemType instantiates a new RolePermissionCatalogItemType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRolePermissionCatalogItemType(catalogItemTypeId int32, access string, ) *RolePermissionCatalogItemType {
	this := RolePermissionCatalogItemType{}
	this.CatalogItemTypeId = catalogItemTypeId
	this.Access = access
	return &this
}

// NewRolePermissionCatalogItemTypeWithDefaults instantiates a new RolePermissionCatalogItemType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRolePermissionCatalogItemTypeWithDefaults() *RolePermissionCatalogItemType {
	this := RolePermissionCatalogItemType{}
	return &this
}

// GetCatalogItemTypeId returns the CatalogItemTypeId field value
func (o *RolePermissionCatalogItemType) GetCatalogItemTypeId() int32 {
	if o == nil  {
		var ret int32
		return ret
	}

	return o.CatalogItemTypeId
}

// GetCatalogItemTypeIdOk returns a tuple with the CatalogItemTypeId field value
// and a boolean to check if the value has been set.
func (o *RolePermissionCatalogItemType) GetCatalogItemTypeIdOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.CatalogItemTypeId, true
}

// SetCatalogItemTypeId sets field value
func (o *RolePermissionCatalogItemType) SetCatalogItemTypeId(v int32) {
	o.CatalogItemTypeId = v
}

// GetAccess returns the Access field value
func (o *RolePermissionCatalogItemType) GetAccess() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Access
}

// GetAccessOk returns a tuple with the Access field value
// and a boolean to check if the value has been set.
func (o *RolePermissionCatalogItemType) GetAccessOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Access, true
}

// SetAccess sets field value
func (o *RolePermissionCatalogItemType) SetAccess(v string) {
	o.Access = v
}

func (o RolePermissionCatalogItemType) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["catalogItemTypeId"] = o.CatalogItemTypeId
	}
	if true {
		toSerialize["access"] = o.Access
	}
	return json.Marshal(toSerialize)
}

type NullableRolePermissionCatalogItemType struct {
	value *RolePermissionCatalogItemType
	isSet bool
}

func (v NullableRolePermissionCatalogItemType) Get() *RolePermissionCatalogItemType {
	return v.value
}

func (v *NullableRolePermissionCatalogItemType) Set(val *RolePermissionCatalogItemType) {
	v.value = val
	v.isSet = true
}

func (v NullableRolePermissionCatalogItemType) IsSet() bool {
	return v.isSet
}

func (v *NullableRolePermissionCatalogItemType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRolePermissionCatalogItemType(val *RolePermissionCatalogItemType) *NullableRolePermissionCatalogItemType {
	return &NullableRolePermissionCatalogItemType{value: val, isSet: true}
}

func (v NullableRolePermissionCatalogItemType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRolePermissionCatalogItemType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


