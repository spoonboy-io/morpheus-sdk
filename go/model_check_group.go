/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 6.1.1
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the CheckGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CheckGroup{}

// CheckGroup struct for CheckGroup
type CheckGroup struct {
	Id *int64 `json:"id,omitempty"`
	Account *UpdateBlueprintPermissionsRequestResourcePermissionSitesInner `json:"account,omitempty"`
	Instance NullableCheckGroupInstance `json:"instance,omitempty"`
	Name *string `json:"name,omitempty"`
	Description NullableString `json:"description,omitempty"`
	InUptime *bool `json:"inUptime,omitempty"`
	LastCheckStatus NullableString `json:"lastCheckStatus,omitempty"`
	LastWarningDate NullableTime `json:"lastWarningDate,omitempty"`
	LastErrorDate NullableTime `json:"lastErrorDate,omitempty"`
	LastSuccessDate NullableTime `json:"lastSuccessDate,omitempty"`
	LastRunDate NullableTime `json:"lastRunDate,omitempty"`
	LastError NullableString `json:"lastError,omitempty"`
	OutageTime *int64 `json:"outageTime,omitempty"`
	LastTimer *int64 `json:"lastTimer,omitempty"`
	Health *int64 `json:"health,omitempty"`
	History NullableString `json:"history,omitempty"`
	MinHappy *int64 `json:"minHappy,omitempty"`
	LastMetric NullableString `json:"lastMetric,omitempty"`
	Severity *string `json:"severity,omitempty"`
	CreateIncident *bool `json:"createIncident,omitempty"`
	Muted *bool `json:"muted,omitempty"`
	CreatedBy *ActivityActivityInnerUser `json:"createdBy,omitempty"`
	DateCreated *time.Time `json:"dateCreated,omitempty"`
	LastUpdated *time.Time `json:"lastUpdated,omitempty"`
	Availability NullableFloat32 `json:"availability,omitempty"`
	CheckType *CheckCheckType `json:"checkType,omitempty"`
	Checks []int64 `json:"checks,omitempty"`
}

// NewCheckGroup instantiates a new CheckGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCheckGroup() *CheckGroup {
	this := CheckGroup{}
	return &this
}

// NewCheckGroupWithDefaults instantiates a new CheckGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCheckGroupWithDefaults() *CheckGroup {
	this := CheckGroup{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CheckGroup) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckGroup) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CheckGroup) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *CheckGroup) SetId(v int64) {
	o.Id = &v
}

// GetAccount returns the Account field value if set, zero value otherwise.
func (o *CheckGroup) GetAccount() UpdateBlueprintPermissionsRequestResourcePermissionSitesInner {
	if o == nil || IsNil(o.Account) {
		var ret UpdateBlueprintPermissionsRequestResourcePermissionSitesInner
		return ret
	}
	return *o.Account
}

// GetAccountOk returns a tuple with the Account field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckGroup) GetAccountOk() (*UpdateBlueprintPermissionsRequestResourcePermissionSitesInner, bool) {
	if o == nil || IsNil(o.Account) {
		return nil, false
	}
	return o.Account, true
}

// HasAccount returns a boolean if a field has been set.
func (o *CheckGroup) HasAccount() bool {
	if o != nil && !IsNil(o.Account) {
		return true
	}

	return false
}

// SetAccount gets a reference to the given UpdateBlueprintPermissionsRequestResourcePermissionSitesInner and assigns it to the Account field.
func (o *CheckGroup) SetAccount(v UpdateBlueprintPermissionsRequestResourcePermissionSitesInner) {
	o.Account = &v
}

// GetInstance returns the Instance field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CheckGroup) GetInstance() CheckGroupInstance {
	if o == nil || IsNil(o.Instance.Get()) {
		var ret CheckGroupInstance
		return ret
	}
	return *o.Instance.Get()
}

// GetInstanceOk returns a tuple with the Instance field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CheckGroup) GetInstanceOk() (*CheckGroupInstance, bool) {
	if o == nil {
		return nil, false
	}
	return o.Instance.Get(), o.Instance.IsSet()
}

// HasInstance returns a boolean if a field has been set.
func (o *CheckGroup) HasInstance() bool {
	if o != nil && o.Instance.IsSet() {
		return true
	}

	return false
}

// SetInstance gets a reference to the given NullableCheckGroupInstance and assigns it to the Instance field.
func (o *CheckGroup) SetInstance(v CheckGroupInstance) {
	o.Instance.Set(&v)
}
// SetInstanceNil sets the value for Instance to be an explicit nil
func (o *CheckGroup) SetInstanceNil() {
	o.Instance.Set(nil)
}

// UnsetInstance ensures that no value is present for Instance, not even an explicit nil
func (o *CheckGroup) UnsetInstance() {
	o.Instance.Unset()
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CheckGroup) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckGroup) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CheckGroup) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CheckGroup) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CheckGroup) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CheckGroup) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *CheckGroup) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *CheckGroup) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *CheckGroup) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *CheckGroup) UnsetDescription() {
	o.Description.Unset()
}

// GetInUptime returns the InUptime field value if set, zero value otherwise.
func (o *CheckGroup) GetInUptime() bool {
	if o == nil || IsNil(o.InUptime) {
		var ret bool
		return ret
	}
	return *o.InUptime
}

// GetInUptimeOk returns a tuple with the InUptime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckGroup) GetInUptimeOk() (*bool, bool) {
	if o == nil || IsNil(o.InUptime) {
		return nil, false
	}
	return o.InUptime, true
}

// HasInUptime returns a boolean if a field has been set.
func (o *CheckGroup) HasInUptime() bool {
	if o != nil && !IsNil(o.InUptime) {
		return true
	}

	return false
}

// SetInUptime gets a reference to the given bool and assigns it to the InUptime field.
func (o *CheckGroup) SetInUptime(v bool) {
	o.InUptime = &v
}

// GetLastCheckStatus returns the LastCheckStatus field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CheckGroup) GetLastCheckStatus() string {
	if o == nil || IsNil(o.LastCheckStatus.Get()) {
		var ret string
		return ret
	}
	return *o.LastCheckStatus.Get()
}

// GetLastCheckStatusOk returns a tuple with the LastCheckStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CheckGroup) GetLastCheckStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastCheckStatus.Get(), o.LastCheckStatus.IsSet()
}

// HasLastCheckStatus returns a boolean if a field has been set.
func (o *CheckGroup) HasLastCheckStatus() bool {
	if o != nil && o.LastCheckStatus.IsSet() {
		return true
	}

	return false
}

// SetLastCheckStatus gets a reference to the given NullableString and assigns it to the LastCheckStatus field.
func (o *CheckGroup) SetLastCheckStatus(v string) {
	o.LastCheckStatus.Set(&v)
}
// SetLastCheckStatusNil sets the value for LastCheckStatus to be an explicit nil
func (o *CheckGroup) SetLastCheckStatusNil() {
	o.LastCheckStatus.Set(nil)
}

// UnsetLastCheckStatus ensures that no value is present for LastCheckStatus, not even an explicit nil
func (o *CheckGroup) UnsetLastCheckStatus() {
	o.LastCheckStatus.Unset()
}

// GetLastWarningDate returns the LastWarningDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CheckGroup) GetLastWarningDate() time.Time {
	if o == nil || IsNil(o.LastWarningDate.Get()) {
		var ret time.Time
		return ret
	}
	return *o.LastWarningDate.Get()
}

// GetLastWarningDateOk returns a tuple with the LastWarningDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CheckGroup) GetLastWarningDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastWarningDate.Get(), o.LastWarningDate.IsSet()
}

// HasLastWarningDate returns a boolean if a field has been set.
func (o *CheckGroup) HasLastWarningDate() bool {
	if o != nil && o.LastWarningDate.IsSet() {
		return true
	}

	return false
}

// SetLastWarningDate gets a reference to the given NullableTime and assigns it to the LastWarningDate field.
func (o *CheckGroup) SetLastWarningDate(v time.Time) {
	o.LastWarningDate.Set(&v)
}
// SetLastWarningDateNil sets the value for LastWarningDate to be an explicit nil
func (o *CheckGroup) SetLastWarningDateNil() {
	o.LastWarningDate.Set(nil)
}

// UnsetLastWarningDate ensures that no value is present for LastWarningDate, not even an explicit nil
func (o *CheckGroup) UnsetLastWarningDate() {
	o.LastWarningDate.Unset()
}

// GetLastErrorDate returns the LastErrorDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CheckGroup) GetLastErrorDate() time.Time {
	if o == nil || IsNil(o.LastErrorDate.Get()) {
		var ret time.Time
		return ret
	}
	return *o.LastErrorDate.Get()
}

// GetLastErrorDateOk returns a tuple with the LastErrorDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CheckGroup) GetLastErrorDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastErrorDate.Get(), o.LastErrorDate.IsSet()
}

// HasLastErrorDate returns a boolean if a field has been set.
func (o *CheckGroup) HasLastErrorDate() bool {
	if o != nil && o.LastErrorDate.IsSet() {
		return true
	}

	return false
}

// SetLastErrorDate gets a reference to the given NullableTime and assigns it to the LastErrorDate field.
func (o *CheckGroup) SetLastErrorDate(v time.Time) {
	o.LastErrorDate.Set(&v)
}
// SetLastErrorDateNil sets the value for LastErrorDate to be an explicit nil
func (o *CheckGroup) SetLastErrorDateNil() {
	o.LastErrorDate.Set(nil)
}

// UnsetLastErrorDate ensures that no value is present for LastErrorDate, not even an explicit nil
func (o *CheckGroup) UnsetLastErrorDate() {
	o.LastErrorDate.Unset()
}

// GetLastSuccessDate returns the LastSuccessDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CheckGroup) GetLastSuccessDate() time.Time {
	if o == nil || IsNil(o.LastSuccessDate.Get()) {
		var ret time.Time
		return ret
	}
	return *o.LastSuccessDate.Get()
}

// GetLastSuccessDateOk returns a tuple with the LastSuccessDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CheckGroup) GetLastSuccessDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastSuccessDate.Get(), o.LastSuccessDate.IsSet()
}

// HasLastSuccessDate returns a boolean if a field has been set.
func (o *CheckGroup) HasLastSuccessDate() bool {
	if o != nil && o.LastSuccessDate.IsSet() {
		return true
	}

	return false
}

// SetLastSuccessDate gets a reference to the given NullableTime and assigns it to the LastSuccessDate field.
func (o *CheckGroup) SetLastSuccessDate(v time.Time) {
	o.LastSuccessDate.Set(&v)
}
// SetLastSuccessDateNil sets the value for LastSuccessDate to be an explicit nil
func (o *CheckGroup) SetLastSuccessDateNil() {
	o.LastSuccessDate.Set(nil)
}

// UnsetLastSuccessDate ensures that no value is present for LastSuccessDate, not even an explicit nil
func (o *CheckGroup) UnsetLastSuccessDate() {
	o.LastSuccessDate.Unset()
}

// GetLastRunDate returns the LastRunDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CheckGroup) GetLastRunDate() time.Time {
	if o == nil || IsNil(o.LastRunDate.Get()) {
		var ret time.Time
		return ret
	}
	return *o.LastRunDate.Get()
}

// GetLastRunDateOk returns a tuple with the LastRunDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CheckGroup) GetLastRunDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastRunDate.Get(), o.LastRunDate.IsSet()
}

// HasLastRunDate returns a boolean if a field has been set.
func (o *CheckGroup) HasLastRunDate() bool {
	if o != nil && o.LastRunDate.IsSet() {
		return true
	}

	return false
}

// SetLastRunDate gets a reference to the given NullableTime and assigns it to the LastRunDate field.
func (o *CheckGroup) SetLastRunDate(v time.Time) {
	o.LastRunDate.Set(&v)
}
// SetLastRunDateNil sets the value for LastRunDate to be an explicit nil
func (o *CheckGroup) SetLastRunDateNil() {
	o.LastRunDate.Set(nil)
}

// UnsetLastRunDate ensures that no value is present for LastRunDate, not even an explicit nil
func (o *CheckGroup) UnsetLastRunDate() {
	o.LastRunDate.Unset()
}

// GetLastError returns the LastError field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CheckGroup) GetLastError() string {
	if o == nil || IsNil(o.LastError.Get()) {
		var ret string
		return ret
	}
	return *o.LastError.Get()
}

// GetLastErrorOk returns a tuple with the LastError field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CheckGroup) GetLastErrorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastError.Get(), o.LastError.IsSet()
}

// HasLastError returns a boolean if a field has been set.
func (o *CheckGroup) HasLastError() bool {
	if o != nil && o.LastError.IsSet() {
		return true
	}

	return false
}

// SetLastError gets a reference to the given NullableString and assigns it to the LastError field.
func (o *CheckGroup) SetLastError(v string) {
	o.LastError.Set(&v)
}
// SetLastErrorNil sets the value for LastError to be an explicit nil
func (o *CheckGroup) SetLastErrorNil() {
	o.LastError.Set(nil)
}

// UnsetLastError ensures that no value is present for LastError, not even an explicit nil
func (o *CheckGroup) UnsetLastError() {
	o.LastError.Unset()
}

// GetOutageTime returns the OutageTime field value if set, zero value otherwise.
func (o *CheckGroup) GetOutageTime() int64 {
	if o == nil || IsNil(o.OutageTime) {
		var ret int64
		return ret
	}
	return *o.OutageTime
}

// GetOutageTimeOk returns a tuple with the OutageTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckGroup) GetOutageTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.OutageTime) {
		return nil, false
	}
	return o.OutageTime, true
}

// HasOutageTime returns a boolean if a field has been set.
func (o *CheckGroup) HasOutageTime() bool {
	if o != nil && !IsNil(o.OutageTime) {
		return true
	}

	return false
}

// SetOutageTime gets a reference to the given int64 and assigns it to the OutageTime field.
func (o *CheckGroup) SetOutageTime(v int64) {
	o.OutageTime = &v
}

// GetLastTimer returns the LastTimer field value if set, zero value otherwise.
func (o *CheckGroup) GetLastTimer() int64 {
	if o == nil || IsNil(o.LastTimer) {
		var ret int64
		return ret
	}
	return *o.LastTimer
}

// GetLastTimerOk returns a tuple with the LastTimer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckGroup) GetLastTimerOk() (*int64, bool) {
	if o == nil || IsNil(o.LastTimer) {
		return nil, false
	}
	return o.LastTimer, true
}

// HasLastTimer returns a boolean if a field has been set.
func (o *CheckGroup) HasLastTimer() bool {
	if o != nil && !IsNil(o.LastTimer) {
		return true
	}

	return false
}

// SetLastTimer gets a reference to the given int64 and assigns it to the LastTimer field.
func (o *CheckGroup) SetLastTimer(v int64) {
	o.LastTimer = &v
}

// GetHealth returns the Health field value if set, zero value otherwise.
func (o *CheckGroup) GetHealth() int64 {
	if o == nil || IsNil(o.Health) {
		var ret int64
		return ret
	}
	return *o.Health
}

// GetHealthOk returns a tuple with the Health field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckGroup) GetHealthOk() (*int64, bool) {
	if o == nil || IsNil(o.Health) {
		return nil, false
	}
	return o.Health, true
}

// HasHealth returns a boolean if a field has been set.
func (o *CheckGroup) HasHealth() bool {
	if o != nil && !IsNil(o.Health) {
		return true
	}

	return false
}

// SetHealth gets a reference to the given int64 and assigns it to the Health field.
func (o *CheckGroup) SetHealth(v int64) {
	o.Health = &v
}

// GetHistory returns the History field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CheckGroup) GetHistory() string {
	if o == nil || IsNil(o.History.Get()) {
		var ret string
		return ret
	}
	return *o.History.Get()
}

// GetHistoryOk returns a tuple with the History field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CheckGroup) GetHistoryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.History.Get(), o.History.IsSet()
}

// HasHistory returns a boolean if a field has been set.
func (o *CheckGroup) HasHistory() bool {
	if o != nil && o.History.IsSet() {
		return true
	}

	return false
}

// SetHistory gets a reference to the given NullableString and assigns it to the History field.
func (o *CheckGroup) SetHistory(v string) {
	o.History.Set(&v)
}
// SetHistoryNil sets the value for History to be an explicit nil
func (o *CheckGroup) SetHistoryNil() {
	o.History.Set(nil)
}

// UnsetHistory ensures that no value is present for History, not even an explicit nil
func (o *CheckGroup) UnsetHistory() {
	o.History.Unset()
}

// GetMinHappy returns the MinHappy field value if set, zero value otherwise.
func (o *CheckGroup) GetMinHappy() int64 {
	if o == nil || IsNil(o.MinHappy) {
		var ret int64
		return ret
	}
	return *o.MinHappy
}

// GetMinHappyOk returns a tuple with the MinHappy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckGroup) GetMinHappyOk() (*int64, bool) {
	if o == nil || IsNil(o.MinHappy) {
		return nil, false
	}
	return o.MinHappy, true
}

// HasMinHappy returns a boolean if a field has been set.
func (o *CheckGroup) HasMinHappy() bool {
	if o != nil && !IsNil(o.MinHappy) {
		return true
	}

	return false
}

// SetMinHappy gets a reference to the given int64 and assigns it to the MinHappy field.
func (o *CheckGroup) SetMinHappy(v int64) {
	o.MinHappy = &v
}

// GetLastMetric returns the LastMetric field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CheckGroup) GetLastMetric() string {
	if o == nil || IsNil(o.LastMetric.Get()) {
		var ret string
		return ret
	}
	return *o.LastMetric.Get()
}

// GetLastMetricOk returns a tuple with the LastMetric field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CheckGroup) GetLastMetricOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastMetric.Get(), o.LastMetric.IsSet()
}

// HasLastMetric returns a boolean if a field has been set.
func (o *CheckGroup) HasLastMetric() bool {
	if o != nil && o.LastMetric.IsSet() {
		return true
	}

	return false
}

// SetLastMetric gets a reference to the given NullableString and assigns it to the LastMetric field.
func (o *CheckGroup) SetLastMetric(v string) {
	o.LastMetric.Set(&v)
}
// SetLastMetricNil sets the value for LastMetric to be an explicit nil
func (o *CheckGroup) SetLastMetricNil() {
	o.LastMetric.Set(nil)
}

// UnsetLastMetric ensures that no value is present for LastMetric, not even an explicit nil
func (o *CheckGroup) UnsetLastMetric() {
	o.LastMetric.Unset()
}

// GetSeverity returns the Severity field value if set, zero value otherwise.
func (o *CheckGroup) GetSeverity() string {
	if o == nil || IsNil(o.Severity) {
		var ret string
		return ret
	}
	return *o.Severity
}

// GetSeverityOk returns a tuple with the Severity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckGroup) GetSeverityOk() (*string, bool) {
	if o == nil || IsNil(o.Severity) {
		return nil, false
	}
	return o.Severity, true
}

// HasSeverity returns a boolean if a field has been set.
func (o *CheckGroup) HasSeverity() bool {
	if o != nil && !IsNil(o.Severity) {
		return true
	}

	return false
}

// SetSeverity gets a reference to the given string and assigns it to the Severity field.
func (o *CheckGroup) SetSeverity(v string) {
	o.Severity = &v
}

// GetCreateIncident returns the CreateIncident field value if set, zero value otherwise.
func (o *CheckGroup) GetCreateIncident() bool {
	if o == nil || IsNil(o.CreateIncident) {
		var ret bool
		return ret
	}
	return *o.CreateIncident
}

// GetCreateIncidentOk returns a tuple with the CreateIncident field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckGroup) GetCreateIncidentOk() (*bool, bool) {
	if o == nil || IsNil(o.CreateIncident) {
		return nil, false
	}
	return o.CreateIncident, true
}

// HasCreateIncident returns a boolean if a field has been set.
func (o *CheckGroup) HasCreateIncident() bool {
	if o != nil && !IsNil(o.CreateIncident) {
		return true
	}

	return false
}

// SetCreateIncident gets a reference to the given bool and assigns it to the CreateIncident field.
func (o *CheckGroup) SetCreateIncident(v bool) {
	o.CreateIncident = &v
}

// GetMuted returns the Muted field value if set, zero value otherwise.
func (o *CheckGroup) GetMuted() bool {
	if o == nil || IsNil(o.Muted) {
		var ret bool
		return ret
	}
	return *o.Muted
}

// GetMutedOk returns a tuple with the Muted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckGroup) GetMutedOk() (*bool, bool) {
	if o == nil || IsNil(o.Muted) {
		return nil, false
	}
	return o.Muted, true
}

// HasMuted returns a boolean if a field has been set.
func (o *CheckGroup) HasMuted() bool {
	if o != nil && !IsNil(o.Muted) {
		return true
	}

	return false
}

// SetMuted gets a reference to the given bool and assigns it to the Muted field.
func (o *CheckGroup) SetMuted(v bool) {
	o.Muted = &v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *CheckGroup) GetCreatedBy() ActivityActivityInnerUser {
	if o == nil || IsNil(o.CreatedBy) {
		var ret ActivityActivityInnerUser
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckGroup) GetCreatedByOk() (*ActivityActivityInnerUser, bool) {
	if o == nil || IsNil(o.CreatedBy) {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *CheckGroup) HasCreatedBy() bool {
	if o != nil && !IsNil(o.CreatedBy) {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given ActivityActivityInnerUser and assigns it to the CreatedBy field.
func (o *CheckGroup) SetCreatedBy(v ActivityActivityInnerUser) {
	o.CreatedBy = &v
}

// GetDateCreated returns the DateCreated field value if set, zero value otherwise.
func (o *CheckGroup) GetDateCreated() time.Time {
	if o == nil || IsNil(o.DateCreated) {
		var ret time.Time
		return ret
	}
	return *o.DateCreated
}

// GetDateCreatedOk returns a tuple with the DateCreated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckGroup) GetDateCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DateCreated) {
		return nil, false
	}
	return o.DateCreated, true
}

// HasDateCreated returns a boolean if a field has been set.
func (o *CheckGroup) HasDateCreated() bool {
	if o != nil && !IsNil(o.DateCreated) {
		return true
	}

	return false
}

// SetDateCreated gets a reference to the given time.Time and assigns it to the DateCreated field.
func (o *CheckGroup) SetDateCreated(v time.Time) {
	o.DateCreated = &v
}

// GetLastUpdated returns the LastUpdated field value if set, zero value otherwise.
func (o *CheckGroup) GetLastUpdated() time.Time {
	if o == nil || IsNil(o.LastUpdated) {
		var ret time.Time
		return ret
	}
	return *o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckGroup) GetLastUpdatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastUpdated) {
		return nil, false
	}
	return o.LastUpdated, true
}

// HasLastUpdated returns a boolean if a field has been set.
func (o *CheckGroup) HasLastUpdated() bool {
	if o != nil && !IsNil(o.LastUpdated) {
		return true
	}

	return false
}

// SetLastUpdated gets a reference to the given time.Time and assigns it to the LastUpdated field.
func (o *CheckGroup) SetLastUpdated(v time.Time) {
	o.LastUpdated = &v
}

// GetAvailability returns the Availability field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CheckGroup) GetAvailability() float32 {
	if o == nil || IsNil(o.Availability.Get()) {
		var ret float32
		return ret
	}
	return *o.Availability.Get()
}

// GetAvailabilityOk returns a tuple with the Availability field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CheckGroup) GetAvailabilityOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Availability.Get(), o.Availability.IsSet()
}

// HasAvailability returns a boolean if a field has been set.
func (o *CheckGroup) HasAvailability() bool {
	if o != nil && o.Availability.IsSet() {
		return true
	}

	return false
}

// SetAvailability gets a reference to the given NullableFloat32 and assigns it to the Availability field.
func (o *CheckGroup) SetAvailability(v float32) {
	o.Availability.Set(&v)
}
// SetAvailabilityNil sets the value for Availability to be an explicit nil
func (o *CheckGroup) SetAvailabilityNil() {
	o.Availability.Set(nil)
}

// UnsetAvailability ensures that no value is present for Availability, not even an explicit nil
func (o *CheckGroup) UnsetAvailability() {
	o.Availability.Unset()
}

// GetCheckType returns the CheckType field value if set, zero value otherwise.
func (o *CheckGroup) GetCheckType() CheckCheckType {
	if o == nil || IsNil(o.CheckType) {
		var ret CheckCheckType
		return ret
	}
	return *o.CheckType
}

// GetCheckTypeOk returns a tuple with the CheckType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckGroup) GetCheckTypeOk() (*CheckCheckType, bool) {
	if o == nil || IsNil(o.CheckType) {
		return nil, false
	}
	return o.CheckType, true
}

// HasCheckType returns a boolean if a field has been set.
func (o *CheckGroup) HasCheckType() bool {
	if o != nil && !IsNil(o.CheckType) {
		return true
	}

	return false
}

// SetCheckType gets a reference to the given CheckCheckType and assigns it to the CheckType field.
func (o *CheckGroup) SetCheckType(v CheckCheckType) {
	o.CheckType = &v
}

// GetChecks returns the Checks field value if set, zero value otherwise.
func (o *CheckGroup) GetChecks() []int64 {
	if o == nil || IsNil(o.Checks) {
		var ret []int64
		return ret
	}
	return o.Checks
}

// GetChecksOk returns a tuple with the Checks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckGroup) GetChecksOk() ([]int64, bool) {
	if o == nil || IsNil(o.Checks) {
		return nil, false
	}
	return o.Checks, true
}

// HasChecks returns a boolean if a field has been set.
func (o *CheckGroup) HasChecks() bool {
	if o != nil && !IsNil(o.Checks) {
		return true
	}

	return false
}

// SetChecks gets a reference to the given []int64 and assigns it to the Checks field.
func (o *CheckGroup) SetChecks(v []int64) {
	o.Checks = v
}

func (o CheckGroup) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CheckGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Account) {
		toSerialize["account"] = o.Account
	}
	if o.Instance.IsSet() {
		toSerialize["instance"] = o.Instance.Get()
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if !IsNil(o.InUptime) {
		toSerialize["inUptime"] = o.InUptime
	}
	if o.LastCheckStatus.IsSet() {
		toSerialize["lastCheckStatus"] = o.LastCheckStatus.Get()
	}
	if o.LastWarningDate.IsSet() {
		toSerialize["lastWarningDate"] = o.LastWarningDate.Get()
	}
	if o.LastErrorDate.IsSet() {
		toSerialize["lastErrorDate"] = o.LastErrorDate.Get()
	}
	if o.LastSuccessDate.IsSet() {
		toSerialize["lastSuccessDate"] = o.LastSuccessDate.Get()
	}
	if o.LastRunDate.IsSet() {
		toSerialize["lastRunDate"] = o.LastRunDate.Get()
	}
	if o.LastError.IsSet() {
		toSerialize["lastError"] = o.LastError.Get()
	}
	if !IsNil(o.OutageTime) {
		toSerialize["outageTime"] = o.OutageTime
	}
	if !IsNil(o.LastTimer) {
		toSerialize["lastTimer"] = o.LastTimer
	}
	if !IsNil(o.Health) {
		toSerialize["health"] = o.Health
	}
	if o.History.IsSet() {
		toSerialize["history"] = o.History.Get()
	}
	if !IsNil(o.MinHappy) {
		toSerialize["minHappy"] = o.MinHappy
	}
	if o.LastMetric.IsSet() {
		toSerialize["lastMetric"] = o.LastMetric.Get()
	}
	if !IsNil(o.Severity) {
		toSerialize["severity"] = o.Severity
	}
	if !IsNil(o.CreateIncident) {
		toSerialize["createIncident"] = o.CreateIncident
	}
	if !IsNil(o.Muted) {
		toSerialize["muted"] = o.Muted
	}
	if !IsNil(o.CreatedBy) {
		toSerialize["createdBy"] = o.CreatedBy
	}
	if !IsNil(o.DateCreated) {
		toSerialize["dateCreated"] = o.DateCreated
	}
	if !IsNil(o.LastUpdated) {
		toSerialize["lastUpdated"] = o.LastUpdated
	}
	if o.Availability.IsSet() {
		toSerialize["availability"] = o.Availability.Get()
	}
	if !IsNil(o.CheckType) {
		toSerialize["checkType"] = o.CheckType
	}
	if !IsNil(o.Checks) {
		toSerialize["checks"] = o.Checks
	}
	return toSerialize, nil
}

type NullableCheckGroup struct {
	value *CheckGroup
	isSet bool
}

func (v NullableCheckGroup) Get() *CheckGroup {
	return v.value
}

func (v *NullableCheckGroup) Set(val *CheckGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableCheckGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableCheckGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCheckGroup(val *CheckGroup) *NullableCheckGroup {
	return &NullableCheckGroup{value: val, isSet: true}
}

func (v NullableCheckGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCheckGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


