/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 6.1.1
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the CatalogItemType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CatalogItemType{}

// CatalogItemType struct for CatalogItemType
type CatalogItemType struct {
	Id *int64 `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	// Useful shortcode for provisioning naming schemes and export reference.
	Code NullableString `json:"code,omitempty"`
	// Catalog Item Type category
	Category NullableString `json:"category,omitempty"`
	Description NullableString `json:"description,omitempty"`
	Labels []string `json:"labels,omitempty"`
	Type *string `json:"type,omitempty"`
	Enabled *bool `json:"enabled,omitempty"`
	Featured *bool `json:"featured,omitempty"`
	// Can users order more than one of this item at a time.
	AllowQuantity *bool `json:"allowQuantity,omitempty"`
	IconPath *string `json:"iconPath,omitempty"`
	ImagePath *string `json:"imagePath,omitempty"`
	DarkImagePath *string `json:"darkImagePath,omitempty"`
	Visibility *string `json:"visibility,omitempty"`
	LayoutCode NullableString `json:"layoutCode,omitempty"`
	Blueprint map[string]interface{} `json:"blueprint,omitempty"`
	AppSpec NullableString `json:"appSpec,omitempty"`
	Config map[string]interface{} `json:"config,omitempty"`
	Workflow NullableCheckGroupInstance `json:"workflow,omitempty"`
	Content NullableString `json:"content,omitempty"`
	OptionTypes []Object `json:"optionTypes,omitempty"`
	CreatedBy NullableString `json:"createdBy,omitempty"`
	Owner *ApplianceSettingsEnabledZoneTypesInner `json:"owner,omitempty"`
	DateCreated *time.Time `json:"dateCreated,omitempty"`
	LastUpdated *time.Time `json:"lastUpdated,omitempty"`
}

// NewCatalogItemType instantiates a new CatalogItemType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCatalogItemType() *CatalogItemType {
	this := CatalogItemType{}
	return &this
}

// NewCatalogItemTypeWithDefaults instantiates a new CatalogItemType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCatalogItemTypeWithDefaults() *CatalogItemType {
	this := CatalogItemType{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CatalogItemType) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogItemType) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CatalogItemType) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *CatalogItemType) SetId(v int64) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CatalogItemType) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogItemType) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CatalogItemType) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CatalogItemType) SetName(v string) {
	o.Name = &v
}

// GetCode returns the Code field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CatalogItemType) GetCode() string {
	if o == nil || IsNil(o.Code.Get()) {
		var ret string
		return ret
	}
	return *o.Code.Get()
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CatalogItemType) GetCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Code.Get(), o.Code.IsSet()
}

// HasCode returns a boolean if a field has been set.
func (o *CatalogItemType) HasCode() bool {
	if o != nil && o.Code.IsSet() {
		return true
	}

	return false
}

// SetCode gets a reference to the given NullableString and assigns it to the Code field.
func (o *CatalogItemType) SetCode(v string) {
	o.Code.Set(&v)
}
// SetCodeNil sets the value for Code to be an explicit nil
func (o *CatalogItemType) SetCodeNil() {
	o.Code.Set(nil)
}

// UnsetCode ensures that no value is present for Code, not even an explicit nil
func (o *CatalogItemType) UnsetCode() {
	o.Code.Unset()
}

// GetCategory returns the Category field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CatalogItemType) GetCategory() string {
	if o == nil || IsNil(o.Category.Get()) {
		var ret string
		return ret
	}
	return *o.Category.Get()
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CatalogItemType) GetCategoryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Category.Get(), o.Category.IsSet()
}

// HasCategory returns a boolean if a field has been set.
func (o *CatalogItemType) HasCategory() bool {
	if o != nil && o.Category.IsSet() {
		return true
	}

	return false
}

// SetCategory gets a reference to the given NullableString and assigns it to the Category field.
func (o *CatalogItemType) SetCategory(v string) {
	o.Category.Set(&v)
}
// SetCategoryNil sets the value for Category to be an explicit nil
func (o *CatalogItemType) SetCategoryNil() {
	o.Category.Set(nil)
}

// UnsetCategory ensures that no value is present for Category, not even an explicit nil
func (o *CatalogItemType) UnsetCategory() {
	o.Category.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CatalogItemType) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CatalogItemType) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *CatalogItemType) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *CatalogItemType) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *CatalogItemType) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *CatalogItemType) UnsetDescription() {
	o.Description.Unset()
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *CatalogItemType) GetLabels() []string {
	if o == nil || IsNil(o.Labels) {
		var ret []string
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogItemType) GetLabelsOk() ([]string, bool) {
	if o == nil || IsNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *CatalogItemType) HasLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given []string and assigns it to the Labels field.
func (o *CatalogItemType) SetLabels(v []string) {
	o.Labels = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *CatalogItemType) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogItemType) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *CatalogItemType) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *CatalogItemType) SetType(v string) {
	o.Type = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *CatalogItemType) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogItemType) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *CatalogItemType) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *CatalogItemType) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetFeatured returns the Featured field value if set, zero value otherwise.
func (o *CatalogItemType) GetFeatured() bool {
	if o == nil || IsNil(o.Featured) {
		var ret bool
		return ret
	}
	return *o.Featured
}

// GetFeaturedOk returns a tuple with the Featured field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogItemType) GetFeaturedOk() (*bool, bool) {
	if o == nil || IsNil(o.Featured) {
		return nil, false
	}
	return o.Featured, true
}

// HasFeatured returns a boolean if a field has been set.
func (o *CatalogItemType) HasFeatured() bool {
	if o != nil && !IsNil(o.Featured) {
		return true
	}

	return false
}

// SetFeatured gets a reference to the given bool and assigns it to the Featured field.
func (o *CatalogItemType) SetFeatured(v bool) {
	o.Featured = &v
}

// GetAllowQuantity returns the AllowQuantity field value if set, zero value otherwise.
func (o *CatalogItemType) GetAllowQuantity() bool {
	if o == nil || IsNil(o.AllowQuantity) {
		var ret bool
		return ret
	}
	return *o.AllowQuantity
}

// GetAllowQuantityOk returns a tuple with the AllowQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogItemType) GetAllowQuantityOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowQuantity) {
		return nil, false
	}
	return o.AllowQuantity, true
}

// HasAllowQuantity returns a boolean if a field has been set.
func (o *CatalogItemType) HasAllowQuantity() bool {
	if o != nil && !IsNil(o.AllowQuantity) {
		return true
	}

	return false
}

// SetAllowQuantity gets a reference to the given bool and assigns it to the AllowQuantity field.
func (o *CatalogItemType) SetAllowQuantity(v bool) {
	o.AllowQuantity = &v
}

// GetIconPath returns the IconPath field value if set, zero value otherwise.
func (o *CatalogItemType) GetIconPath() string {
	if o == nil || IsNil(o.IconPath) {
		var ret string
		return ret
	}
	return *o.IconPath
}

// GetIconPathOk returns a tuple with the IconPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogItemType) GetIconPathOk() (*string, bool) {
	if o == nil || IsNil(o.IconPath) {
		return nil, false
	}
	return o.IconPath, true
}

// HasIconPath returns a boolean if a field has been set.
func (o *CatalogItemType) HasIconPath() bool {
	if o != nil && !IsNil(o.IconPath) {
		return true
	}

	return false
}

// SetIconPath gets a reference to the given string and assigns it to the IconPath field.
func (o *CatalogItemType) SetIconPath(v string) {
	o.IconPath = &v
}

// GetImagePath returns the ImagePath field value if set, zero value otherwise.
func (o *CatalogItemType) GetImagePath() string {
	if o == nil || IsNil(o.ImagePath) {
		var ret string
		return ret
	}
	return *o.ImagePath
}

// GetImagePathOk returns a tuple with the ImagePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogItemType) GetImagePathOk() (*string, bool) {
	if o == nil || IsNil(o.ImagePath) {
		return nil, false
	}
	return o.ImagePath, true
}

// HasImagePath returns a boolean if a field has been set.
func (o *CatalogItemType) HasImagePath() bool {
	if o != nil && !IsNil(o.ImagePath) {
		return true
	}

	return false
}

// SetImagePath gets a reference to the given string and assigns it to the ImagePath field.
func (o *CatalogItemType) SetImagePath(v string) {
	o.ImagePath = &v
}

// GetDarkImagePath returns the DarkImagePath field value if set, zero value otherwise.
func (o *CatalogItemType) GetDarkImagePath() string {
	if o == nil || IsNil(o.DarkImagePath) {
		var ret string
		return ret
	}
	return *o.DarkImagePath
}

// GetDarkImagePathOk returns a tuple with the DarkImagePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogItemType) GetDarkImagePathOk() (*string, bool) {
	if o == nil || IsNil(o.DarkImagePath) {
		return nil, false
	}
	return o.DarkImagePath, true
}

// HasDarkImagePath returns a boolean if a field has been set.
func (o *CatalogItemType) HasDarkImagePath() bool {
	if o != nil && !IsNil(o.DarkImagePath) {
		return true
	}

	return false
}

// SetDarkImagePath gets a reference to the given string and assigns it to the DarkImagePath field.
func (o *CatalogItemType) SetDarkImagePath(v string) {
	o.DarkImagePath = &v
}

// GetVisibility returns the Visibility field value if set, zero value otherwise.
func (o *CatalogItemType) GetVisibility() string {
	if o == nil || IsNil(o.Visibility) {
		var ret string
		return ret
	}
	return *o.Visibility
}

// GetVisibilityOk returns a tuple with the Visibility field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogItemType) GetVisibilityOk() (*string, bool) {
	if o == nil || IsNil(o.Visibility) {
		return nil, false
	}
	return o.Visibility, true
}

// HasVisibility returns a boolean if a field has been set.
func (o *CatalogItemType) HasVisibility() bool {
	if o != nil && !IsNil(o.Visibility) {
		return true
	}

	return false
}

// SetVisibility gets a reference to the given string and assigns it to the Visibility field.
func (o *CatalogItemType) SetVisibility(v string) {
	o.Visibility = &v
}

// GetLayoutCode returns the LayoutCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CatalogItemType) GetLayoutCode() string {
	if o == nil || IsNil(o.LayoutCode.Get()) {
		var ret string
		return ret
	}
	return *o.LayoutCode.Get()
}

// GetLayoutCodeOk returns a tuple with the LayoutCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CatalogItemType) GetLayoutCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LayoutCode.Get(), o.LayoutCode.IsSet()
}

// HasLayoutCode returns a boolean if a field has been set.
func (o *CatalogItemType) HasLayoutCode() bool {
	if o != nil && o.LayoutCode.IsSet() {
		return true
	}

	return false
}

// SetLayoutCode gets a reference to the given NullableString and assigns it to the LayoutCode field.
func (o *CatalogItemType) SetLayoutCode(v string) {
	o.LayoutCode.Set(&v)
}
// SetLayoutCodeNil sets the value for LayoutCode to be an explicit nil
func (o *CatalogItemType) SetLayoutCodeNil() {
	o.LayoutCode.Set(nil)
}

// UnsetLayoutCode ensures that no value is present for LayoutCode, not even an explicit nil
func (o *CatalogItemType) UnsetLayoutCode() {
	o.LayoutCode.Unset()
}

// GetBlueprint returns the Blueprint field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CatalogItemType) GetBlueprint() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Blueprint
}

// GetBlueprintOk returns a tuple with the Blueprint field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CatalogItemType) GetBlueprintOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Blueprint) {
		return map[string]interface{}{}, false
	}
	return o.Blueprint, true
}

// HasBlueprint returns a boolean if a field has been set.
func (o *CatalogItemType) HasBlueprint() bool {
	if o != nil && IsNil(o.Blueprint) {
		return true
	}

	return false
}

// SetBlueprint gets a reference to the given map[string]interface{} and assigns it to the Blueprint field.
func (o *CatalogItemType) SetBlueprint(v map[string]interface{}) {
	o.Blueprint = v
}

// GetAppSpec returns the AppSpec field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CatalogItemType) GetAppSpec() string {
	if o == nil || IsNil(o.AppSpec.Get()) {
		var ret string
		return ret
	}
	return *o.AppSpec.Get()
}

// GetAppSpecOk returns a tuple with the AppSpec field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CatalogItemType) GetAppSpecOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AppSpec.Get(), o.AppSpec.IsSet()
}

// HasAppSpec returns a boolean if a field has been set.
func (o *CatalogItemType) HasAppSpec() bool {
	if o != nil && o.AppSpec.IsSet() {
		return true
	}

	return false
}

// SetAppSpec gets a reference to the given NullableString and assigns it to the AppSpec field.
func (o *CatalogItemType) SetAppSpec(v string) {
	o.AppSpec.Set(&v)
}
// SetAppSpecNil sets the value for AppSpec to be an explicit nil
func (o *CatalogItemType) SetAppSpecNil() {
	o.AppSpec.Set(nil)
}

// UnsetAppSpec ensures that no value is present for AppSpec, not even an explicit nil
func (o *CatalogItemType) UnsetAppSpec() {
	o.AppSpec.Unset()
}

// GetConfig returns the Config field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CatalogItemType) GetConfig() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CatalogItemType) GetConfigOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Config) {
		return map[string]interface{}{}, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *CatalogItemType) HasConfig() bool {
	if o != nil && IsNil(o.Config) {
		return true
	}

	return false
}

// SetConfig gets a reference to the given map[string]interface{} and assigns it to the Config field.
func (o *CatalogItemType) SetConfig(v map[string]interface{}) {
	o.Config = v
}

// GetWorkflow returns the Workflow field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CatalogItemType) GetWorkflow() CheckGroupInstance {
	if o == nil || IsNil(o.Workflow.Get()) {
		var ret CheckGroupInstance
		return ret
	}
	return *o.Workflow.Get()
}

// GetWorkflowOk returns a tuple with the Workflow field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CatalogItemType) GetWorkflowOk() (*CheckGroupInstance, bool) {
	if o == nil {
		return nil, false
	}
	return o.Workflow.Get(), o.Workflow.IsSet()
}

// HasWorkflow returns a boolean if a field has been set.
func (o *CatalogItemType) HasWorkflow() bool {
	if o != nil && o.Workflow.IsSet() {
		return true
	}

	return false
}

// SetWorkflow gets a reference to the given NullableCheckGroupInstance and assigns it to the Workflow field.
func (o *CatalogItemType) SetWorkflow(v CheckGroupInstance) {
	o.Workflow.Set(&v)
}
// SetWorkflowNil sets the value for Workflow to be an explicit nil
func (o *CatalogItemType) SetWorkflowNil() {
	o.Workflow.Set(nil)
}

// UnsetWorkflow ensures that no value is present for Workflow, not even an explicit nil
func (o *CatalogItemType) UnsetWorkflow() {
	o.Workflow.Unset()
}

// GetContent returns the Content field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CatalogItemType) GetContent() string {
	if o == nil || IsNil(o.Content.Get()) {
		var ret string
		return ret
	}
	return *o.Content.Get()
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CatalogItemType) GetContentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Content.Get(), o.Content.IsSet()
}

// HasContent returns a boolean if a field has been set.
func (o *CatalogItemType) HasContent() bool {
	if o != nil && o.Content.IsSet() {
		return true
	}

	return false
}

// SetContent gets a reference to the given NullableString and assigns it to the Content field.
func (o *CatalogItemType) SetContent(v string) {
	o.Content.Set(&v)
}
// SetContentNil sets the value for Content to be an explicit nil
func (o *CatalogItemType) SetContentNil() {
	o.Content.Set(nil)
}

// UnsetContent ensures that no value is present for Content, not even an explicit nil
func (o *CatalogItemType) UnsetContent() {
	o.Content.Unset()
}

// GetOptionTypes returns the OptionTypes field value if set, zero value otherwise.
func (o *CatalogItemType) GetOptionTypes() []Object {
	if o == nil || IsNil(o.OptionTypes) {
		var ret []Object
		return ret
	}
	return o.OptionTypes
}

// GetOptionTypesOk returns a tuple with the OptionTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogItemType) GetOptionTypesOk() ([]Object, bool) {
	if o == nil || IsNil(o.OptionTypes) {
		return nil, false
	}
	return o.OptionTypes, true
}

// HasOptionTypes returns a boolean if a field has been set.
func (o *CatalogItemType) HasOptionTypes() bool {
	if o != nil && !IsNil(o.OptionTypes) {
		return true
	}

	return false
}

// SetOptionTypes gets a reference to the given []Object and assigns it to the OptionTypes field.
func (o *CatalogItemType) SetOptionTypes(v []Object) {
	o.OptionTypes = v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CatalogItemType) GetCreatedBy() string {
	if o == nil || IsNil(o.CreatedBy.Get()) {
		var ret string
		return ret
	}
	return *o.CreatedBy.Get()
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CatalogItemType) GetCreatedByOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CreatedBy.Get(), o.CreatedBy.IsSet()
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *CatalogItemType) HasCreatedBy() bool {
	if o != nil && o.CreatedBy.IsSet() {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given NullableString and assigns it to the CreatedBy field.
func (o *CatalogItemType) SetCreatedBy(v string) {
	o.CreatedBy.Set(&v)
}
// SetCreatedByNil sets the value for CreatedBy to be an explicit nil
func (o *CatalogItemType) SetCreatedByNil() {
	o.CreatedBy.Set(nil)
}

// UnsetCreatedBy ensures that no value is present for CreatedBy, not even an explicit nil
func (o *CatalogItemType) UnsetCreatedBy() {
	o.CreatedBy.Unset()
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *CatalogItemType) GetOwner() ApplianceSettingsEnabledZoneTypesInner {
	if o == nil || IsNil(o.Owner) {
		var ret ApplianceSettingsEnabledZoneTypesInner
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogItemType) GetOwnerOk() (*ApplianceSettingsEnabledZoneTypesInner, bool) {
	if o == nil || IsNil(o.Owner) {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *CatalogItemType) HasOwner() bool {
	if o != nil && !IsNil(o.Owner) {
		return true
	}

	return false
}

// SetOwner gets a reference to the given ApplianceSettingsEnabledZoneTypesInner and assigns it to the Owner field.
func (o *CatalogItemType) SetOwner(v ApplianceSettingsEnabledZoneTypesInner) {
	o.Owner = &v
}

// GetDateCreated returns the DateCreated field value if set, zero value otherwise.
func (o *CatalogItemType) GetDateCreated() time.Time {
	if o == nil || IsNil(o.DateCreated) {
		var ret time.Time
		return ret
	}
	return *o.DateCreated
}

// GetDateCreatedOk returns a tuple with the DateCreated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogItemType) GetDateCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DateCreated) {
		return nil, false
	}
	return o.DateCreated, true
}

// HasDateCreated returns a boolean if a field has been set.
func (o *CatalogItemType) HasDateCreated() bool {
	if o != nil && !IsNil(o.DateCreated) {
		return true
	}

	return false
}

// SetDateCreated gets a reference to the given time.Time and assigns it to the DateCreated field.
func (o *CatalogItemType) SetDateCreated(v time.Time) {
	o.DateCreated = &v
}

// GetLastUpdated returns the LastUpdated field value if set, zero value otherwise.
func (o *CatalogItemType) GetLastUpdated() time.Time {
	if o == nil || IsNil(o.LastUpdated) {
		var ret time.Time
		return ret
	}
	return *o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogItemType) GetLastUpdatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastUpdated) {
		return nil, false
	}
	return o.LastUpdated, true
}

// HasLastUpdated returns a boolean if a field has been set.
func (o *CatalogItemType) HasLastUpdated() bool {
	if o != nil && !IsNil(o.LastUpdated) {
		return true
	}

	return false
}

// SetLastUpdated gets a reference to the given time.Time and assigns it to the LastUpdated field.
func (o *CatalogItemType) SetLastUpdated(v time.Time) {
	o.LastUpdated = &v
}

func (o CatalogItemType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CatalogItemType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if o.Code.IsSet() {
		toSerialize["code"] = o.Code.Get()
	}
	if o.Category.IsSet() {
		toSerialize["category"] = o.Category.Get()
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if !IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Featured) {
		toSerialize["featured"] = o.Featured
	}
	if !IsNil(o.AllowQuantity) {
		toSerialize["allowQuantity"] = o.AllowQuantity
	}
	if !IsNil(o.IconPath) {
		toSerialize["iconPath"] = o.IconPath
	}
	if !IsNil(o.ImagePath) {
		toSerialize["imagePath"] = o.ImagePath
	}
	if !IsNil(o.DarkImagePath) {
		toSerialize["darkImagePath"] = o.DarkImagePath
	}
	if !IsNil(o.Visibility) {
		toSerialize["visibility"] = o.Visibility
	}
	if o.LayoutCode.IsSet() {
		toSerialize["layoutCode"] = o.LayoutCode.Get()
	}
	if o.Blueprint != nil {
		toSerialize["blueprint"] = o.Blueprint
	}
	if o.AppSpec.IsSet() {
		toSerialize["appSpec"] = o.AppSpec.Get()
	}
	if o.Config != nil {
		toSerialize["config"] = o.Config
	}
	if o.Workflow.IsSet() {
		toSerialize["workflow"] = o.Workflow.Get()
	}
	if o.Content.IsSet() {
		toSerialize["content"] = o.Content.Get()
	}
	if !IsNil(o.OptionTypes) {
		toSerialize["optionTypes"] = o.OptionTypes
	}
	if o.CreatedBy.IsSet() {
		toSerialize["createdBy"] = o.CreatedBy.Get()
	}
	if !IsNil(o.Owner) {
		toSerialize["owner"] = o.Owner
	}
	if !IsNil(o.DateCreated) {
		toSerialize["dateCreated"] = o.DateCreated
	}
	if !IsNil(o.LastUpdated) {
		toSerialize["lastUpdated"] = o.LastUpdated
	}
	return toSerialize, nil
}

type NullableCatalogItemType struct {
	value *CatalogItemType
	isSet bool
}

func (v NullableCatalogItemType) Get() *CatalogItemType {
	return v.value
}

func (v *NullableCatalogItemType) Set(val *CatalogItemType) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogItemType) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogItemType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogItemType(val *CatalogItemType) *NullableCatalogItemType {
	return &NullableCatalogItemType{value: val, isSet: true}
}

func (v NullableCatalogItemType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogItemType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


