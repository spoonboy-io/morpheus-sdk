/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// TaskNestedWorkflowConfigTaskOptions struct for TaskNestedWorkflowConfigTaskOptions
type TaskNestedWorkflowConfigTaskOptions struct {
	// Operational Workflow ID
	OperationalWorkflowId NullableString `json:"operationalWorkflowId"`
	// Operational Workflow Name
	OperationalWorkflowName NullableString `json:"operationalWorkflowName,omitempty"`
}

// NewTaskNestedWorkflowConfigTaskOptions instantiates a new TaskNestedWorkflowConfigTaskOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaskNestedWorkflowConfigTaskOptions(operationalWorkflowId NullableString, ) *TaskNestedWorkflowConfigTaskOptions {
	this := TaskNestedWorkflowConfigTaskOptions{}
	this.OperationalWorkflowId = operationalWorkflowId
	return &this
}

// NewTaskNestedWorkflowConfigTaskOptionsWithDefaults instantiates a new TaskNestedWorkflowConfigTaskOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaskNestedWorkflowConfigTaskOptionsWithDefaults() *TaskNestedWorkflowConfigTaskOptions {
	this := TaskNestedWorkflowConfigTaskOptions{}
	return &this
}

// GetOperationalWorkflowId returns the OperationalWorkflowId field value
// If the value is explicit nil, the zero value for string will be returned
func (o *TaskNestedWorkflowConfigTaskOptions) GetOperationalWorkflowId() string {
	if o == nil || o.OperationalWorkflowId.Get() == nil {
		var ret string
		return ret
	}

	return *o.OperationalWorkflowId.Get()
}

// GetOperationalWorkflowIdOk returns a tuple with the OperationalWorkflowId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskNestedWorkflowConfigTaskOptions) GetOperationalWorkflowIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.OperationalWorkflowId.Get(), o.OperationalWorkflowId.IsSet()
}

// SetOperationalWorkflowId sets field value
func (o *TaskNestedWorkflowConfigTaskOptions) SetOperationalWorkflowId(v string) {
	o.OperationalWorkflowId.Set(&v)
}

// GetOperationalWorkflowName returns the OperationalWorkflowName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskNestedWorkflowConfigTaskOptions) GetOperationalWorkflowName() string {
	if o == nil || o.OperationalWorkflowName.Get() == nil {
		var ret string
		return ret
	}
	return *o.OperationalWorkflowName.Get()
}

// GetOperationalWorkflowNameOk returns a tuple with the OperationalWorkflowName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskNestedWorkflowConfigTaskOptions) GetOperationalWorkflowNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.OperationalWorkflowName.Get(), o.OperationalWorkflowName.IsSet()
}

// HasOperationalWorkflowName returns a boolean if a field has been set.
func (o *TaskNestedWorkflowConfigTaskOptions) HasOperationalWorkflowName() bool {
	if o != nil && o.OperationalWorkflowName.IsSet() {
		return true
	}

	return false
}

// SetOperationalWorkflowName gets a reference to the given NullableString and assigns it to the OperationalWorkflowName field.
func (o *TaskNestedWorkflowConfigTaskOptions) SetOperationalWorkflowName(v string) {
	o.OperationalWorkflowName.Set(&v)
}
// SetOperationalWorkflowNameNil sets the value for OperationalWorkflowName to be an explicit nil
func (o *TaskNestedWorkflowConfigTaskOptions) SetOperationalWorkflowNameNil() {
	o.OperationalWorkflowName.Set(nil)
}

// UnsetOperationalWorkflowName ensures that no value is present for OperationalWorkflowName, not even an explicit nil
func (o *TaskNestedWorkflowConfigTaskOptions) UnsetOperationalWorkflowName() {
	o.OperationalWorkflowName.Unset()
}

func (o TaskNestedWorkflowConfigTaskOptions) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["operationalWorkflowId"] = o.OperationalWorkflowId.Get()
	}
	if o.OperationalWorkflowName.IsSet() {
		toSerialize["operationalWorkflowName"] = o.OperationalWorkflowName.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableTaskNestedWorkflowConfigTaskOptions struct {
	value *TaskNestedWorkflowConfigTaskOptions
	isSet bool
}

func (v NullableTaskNestedWorkflowConfigTaskOptions) Get() *TaskNestedWorkflowConfigTaskOptions {
	return v.value
}

func (v *NullableTaskNestedWorkflowConfigTaskOptions) Set(val *TaskNestedWorkflowConfigTaskOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableTaskNestedWorkflowConfigTaskOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableTaskNestedWorkflowConfigTaskOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaskNestedWorkflowConfigTaskOptions(val *TaskNestedWorkflowConfigTaskOptions) *NullableTaskNestedWorkflowConfigTaskOptions {
	return &NullableTaskNestedWorkflowConfigTaskOptions{value: val, isSet: true}
}

func (v NullableTaskNestedWorkflowConfigTaskOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaskNestedWorkflowConfigTaskOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


