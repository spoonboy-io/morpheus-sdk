/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// VirtualImage struct for VirtualImage
type VirtualImage struct {
	Id *int64 `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Description NullableString `json:"description,omitempty"`
	Labels *[]string `json:"labels,omitempty"`
	OwnerId *int64 `json:"ownerId,omitempty"`
	Tenant *InlineResponse20040AppDeployInstance `json:"tenant,omitempty"`
	ImageType *string `json:"imageType,omitempty"`
	UserUploaded *bool `json:"userUploaded,omitempty"`
	UserDefined *bool `json:"userDefined,omitempty"`
	SystemImage *bool `json:"systemImage,omitempty"`
	IsCloudInit *bool `json:"isCloudInit,omitempty"`
	SshUsername NullableString `json:"sshUsername,omitempty"`
	SshPassword NullableString `json:"sshPassword,omitempty"`
	SshPasswordHash NullableString `json:"sshPasswordHash,omitempty"`
	SshKey NullableString `json:"sshKey,omitempty"`
	OsType NullableVirtualImageOsType `json:"osType,omitempty"`
	MinRam NullableInt64 `json:"minRam,omitempty"`
	MinRamGB NullableInt64 `json:"minRamGB,omitempty"`
	MinDisk NullableString `json:"minDisk,omitempty"`
	MinDiskGB NullableString `json:"minDiskGB,omitempty"`
	RawSize NullableInt64 `json:"rawSize,omitempty"`
	RawSizeGB NullableFloat32 `json:"rawSizeGB,omitempty"`
	TrialVersion *bool `json:"trialVersion,omitempty"`
	VirtioSupported *bool `json:"virtioSupported,omitempty"`
	Uefi NullableString `json:"uefi,omitempty"`
	IsAutoJoinDomain *bool `json:"isAutoJoinDomain,omitempty"`
	VmToolsInstalled *bool `json:"vmToolsInstalled,omitempty"`
	InstallAgent *bool `json:"installAgent,omitempty"`
	IsForceCustomization *bool `json:"isForceCustomization,omitempty"`
	IsSysprep *bool `json:"isSysprep,omitempty"`
	FipsEnabled *bool `json:"fipsEnabled,omitempty"`
	UserData NullableString `json:"userData,omitempty"`
	ConsoleKeymap NullableString `json:"consoleKeymap,omitempty"`
	StorageProvider NullableString `json:"storageProvider,omitempty"`
	ExternalId NullableString `json:"externalId,omitempty"`
	Visibility *string `json:"visibility,omitempty"`
	Accounts *[]InlineResponse20040AppDeployInstance `json:"accounts,omitempty"`
	Config *VirtualImageConfig `json:"config,omitempty"`
	Volumes *[]map[string]interface{} `json:"volumes,omitempty"`
	StorageControllers *[]map[string]interface{} `json:"storageControllers,omitempty"`
	NetworkInterfaces *[]map[string]interface{} `json:"networkInterfaces,omitempty"`
	Tags *[]map[string]interface{} `json:"tags,omitempty"`
	Locations *[]map[string]interface{} `json:"locations,omitempty"`
	DateCreated *time.Time `json:"dateCreated,omitempty"`
	LastUpdated *time.Time `json:"lastUpdated,omitempty"`
	Status *string `json:"status,omitempty"`
}

// NewVirtualImage instantiates a new VirtualImage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVirtualImage() *VirtualImage {
	this := VirtualImage{}
	return &this
}

// NewVirtualImageWithDefaults instantiates a new VirtualImage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVirtualImageWithDefaults() *VirtualImage {
	this := VirtualImage{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *VirtualImage) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualImage) GetIdOk() (*int64, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *VirtualImage) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *VirtualImage) SetId(v int64) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *VirtualImage) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualImage) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *VirtualImage) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *VirtualImage) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VirtualImage) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VirtualImage) GetDescriptionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *VirtualImage) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *VirtualImage) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *VirtualImage) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *VirtualImage) UnsetDescription() {
	o.Description.Unset()
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *VirtualImage) GetLabels() []string {
	if o == nil || o.Labels == nil {
		var ret []string
		return ret
	}
	return *o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualImage) GetLabelsOk() (*[]string, bool) {
	if o == nil || o.Labels == nil {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *VirtualImage) HasLabels() bool {
	if o != nil && o.Labels != nil {
		return true
	}

	return false
}

// SetLabels gets a reference to the given []string and assigns it to the Labels field.
func (o *VirtualImage) SetLabels(v []string) {
	o.Labels = &v
}

// GetOwnerId returns the OwnerId field value if set, zero value otherwise.
func (o *VirtualImage) GetOwnerId() int64 {
	if o == nil || o.OwnerId == nil {
		var ret int64
		return ret
	}
	return *o.OwnerId
}

// GetOwnerIdOk returns a tuple with the OwnerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualImage) GetOwnerIdOk() (*int64, bool) {
	if o == nil || o.OwnerId == nil {
		return nil, false
	}
	return o.OwnerId, true
}

// HasOwnerId returns a boolean if a field has been set.
func (o *VirtualImage) HasOwnerId() bool {
	if o != nil && o.OwnerId != nil {
		return true
	}

	return false
}

// SetOwnerId gets a reference to the given int64 and assigns it to the OwnerId field.
func (o *VirtualImage) SetOwnerId(v int64) {
	o.OwnerId = &v
}

// GetTenant returns the Tenant field value if set, zero value otherwise.
func (o *VirtualImage) GetTenant() InlineResponse20040AppDeployInstance {
	if o == nil || o.Tenant == nil {
		var ret InlineResponse20040AppDeployInstance
		return ret
	}
	return *o.Tenant
}

// GetTenantOk returns a tuple with the Tenant field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualImage) GetTenantOk() (*InlineResponse20040AppDeployInstance, bool) {
	if o == nil || o.Tenant == nil {
		return nil, false
	}
	return o.Tenant, true
}

// HasTenant returns a boolean if a field has been set.
func (o *VirtualImage) HasTenant() bool {
	if o != nil && o.Tenant != nil {
		return true
	}

	return false
}

// SetTenant gets a reference to the given InlineResponse20040AppDeployInstance and assigns it to the Tenant field.
func (o *VirtualImage) SetTenant(v InlineResponse20040AppDeployInstance) {
	o.Tenant = &v
}

// GetImageType returns the ImageType field value if set, zero value otherwise.
func (o *VirtualImage) GetImageType() string {
	if o == nil || o.ImageType == nil {
		var ret string
		return ret
	}
	return *o.ImageType
}

// GetImageTypeOk returns a tuple with the ImageType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualImage) GetImageTypeOk() (*string, bool) {
	if o == nil || o.ImageType == nil {
		return nil, false
	}
	return o.ImageType, true
}

// HasImageType returns a boolean if a field has been set.
func (o *VirtualImage) HasImageType() bool {
	if o != nil && o.ImageType != nil {
		return true
	}

	return false
}

// SetImageType gets a reference to the given string and assigns it to the ImageType field.
func (o *VirtualImage) SetImageType(v string) {
	o.ImageType = &v
}

// GetUserUploaded returns the UserUploaded field value if set, zero value otherwise.
func (o *VirtualImage) GetUserUploaded() bool {
	if o == nil || o.UserUploaded == nil {
		var ret bool
		return ret
	}
	return *o.UserUploaded
}

// GetUserUploadedOk returns a tuple with the UserUploaded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualImage) GetUserUploadedOk() (*bool, bool) {
	if o == nil || o.UserUploaded == nil {
		return nil, false
	}
	return o.UserUploaded, true
}

// HasUserUploaded returns a boolean if a field has been set.
func (o *VirtualImage) HasUserUploaded() bool {
	if o != nil && o.UserUploaded != nil {
		return true
	}

	return false
}

// SetUserUploaded gets a reference to the given bool and assigns it to the UserUploaded field.
func (o *VirtualImage) SetUserUploaded(v bool) {
	o.UserUploaded = &v
}

// GetUserDefined returns the UserDefined field value if set, zero value otherwise.
func (o *VirtualImage) GetUserDefined() bool {
	if o == nil || o.UserDefined == nil {
		var ret bool
		return ret
	}
	return *o.UserDefined
}

// GetUserDefinedOk returns a tuple with the UserDefined field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualImage) GetUserDefinedOk() (*bool, bool) {
	if o == nil || o.UserDefined == nil {
		return nil, false
	}
	return o.UserDefined, true
}

// HasUserDefined returns a boolean if a field has been set.
func (o *VirtualImage) HasUserDefined() bool {
	if o != nil && o.UserDefined != nil {
		return true
	}

	return false
}

// SetUserDefined gets a reference to the given bool and assigns it to the UserDefined field.
func (o *VirtualImage) SetUserDefined(v bool) {
	o.UserDefined = &v
}

// GetSystemImage returns the SystemImage field value if set, zero value otherwise.
func (o *VirtualImage) GetSystemImage() bool {
	if o == nil || o.SystemImage == nil {
		var ret bool
		return ret
	}
	return *o.SystemImage
}

// GetSystemImageOk returns a tuple with the SystemImage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualImage) GetSystemImageOk() (*bool, bool) {
	if o == nil || o.SystemImage == nil {
		return nil, false
	}
	return o.SystemImage, true
}

// HasSystemImage returns a boolean if a field has been set.
func (o *VirtualImage) HasSystemImage() bool {
	if o != nil && o.SystemImage != nil {
		return true
	}

	return false
}

// SetSystemImage gets a reference to the given bool and assigns it to the SystemImage field.
func (o *VirtualImage) SetSystemImage(v bool) {
	o.SystemImage = &v
}

// GetIsCloudInit returns the IsCloudInit field value if set, zero value otherwise.
func (o *VirtualImage) GetIsCloudInit() bool {
	if o == nil || o.IsCloudInit == nil {
		var ret bool
		return ret
	}
	return *o.IsCloudInit
}

// GetIsCloudInitOk returns a tuple with the IsCloudInit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualImage) GetIsCloudInitOk() (*bool, bool) {
	if o == nil || o.IsCloudInit == nil {
		return nil, false
	}
	return o.IsCloudInit, true
}

// HasIsCloudInit returns a boolean if a field has been set.
func (o *VirtualImage) HasIsCloudInit() bool {
	if o != nil && o.IsCloudInit != nil {
		return true
	}

	return false
}

// SetIsCloudInit gets a reference to the given bool and assigns it to the IsCloudInit field.
func (o *VirtualImage) SetIsCloudInit(v bool) {
	o.IsCloudInit = &v
}

// GetSshUsername returns the SshUsername field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VirtualImage) GetSshUsername() string {
	if o == nil || o.SshUsername.Get() == nil {
		var ret string
		return ret
	}
	return *o.SshUsername.Get()
}

// GetSshUsernameOk returns a tuple with the SshUsername field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VirtualImage) GetSshUsernameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SshUsername.Get(), o.SshUsername.IsSet()
}

// HasSshUsername returns a boolean if a field has been set.
func (o *VirtualImage) HasSshUsername() bool {
	if o != nil && o.SshUsername.IsSet() {
		return true
	}

	return false
}

// SetSshUsername gets a reference to the given NullableString and assigns it to the SshUsername field.
func (o *VirtualImage) SetSshUsername(v string) {
	o.SshUsername.Set(&v)
}
// SetSshUsernameNil sets the value for SshUsername to be an explicit nil
func (o *VirtualImage) SetSshUsernameNil() {
	o.SshUsername.Set(nil)
}

// UnsetSshUsername ensures that no value is present for SshUsername, not even an explicit nil
func (o *VirtualImage) UnsetSshUsername() {
	o.SshUsername.Unset()
}

// GetSshPassword returns the SshPassword field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VirtualImage) GetSshPassword() string {
	if o == nil || o.SshPassword.Get() == nil {
		var ret string
		return ret
	}
	return *o.SshPassword.Get()
}

// GetSshPasswordOk returns a tuple with the SshPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VirtualImage) GetSshPasswordOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SshPassword.Get(), o.SshPassword.IsSet()
}

// HasSshPassword returns a boolean if a field has been set.
func (o *VirtualImage) HasSshPassword() bool {
	if o != nil && o.SshPassword.IsSet() {
		return true
	}

	return false
}

// SetSshPassword gets a reference to the given NullableString and assigns it to the SshPassword field.
func (o *VirtualImage) SetSshPassword(v string) {
	o.SshPassword.Set(&v)
}
// SetSshPasswordNil sets the value for SshPassword to be an explicit nil
func (o *VirtualImage) SetSshPasswordNil() {
	o.SshPassword.Set(nil)
}

// UnsetSshPassword ensures that no value is present for SshPassword, not even an explicit nil
func (o *VirtualImage) UnsetSshPassword() {
	o.SshPassword.Unset()
}

// GetSshPasswordHash returns the SshPasswordHash field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VirtualImage) GetSshPasswordHash() string {
	if o == nil || o.SshPasswordHash.Get() == nil {
		var ret string
		return ret
	}
	return *o.SshPasswordHash.Get()
}

// GetSshPasswordHashOk returns a tuple with the SshPasswordHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VirtualImage) GetSshPasswordHashOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SshPasswordHash.Get(), o.SshPasswordHash.IsSet()
}

// HasSshPasswordHash returns a boolean if a field has been set.
func (o *VirtualImage) HasSshPasswordHash() bool {
	if o != nil && o.SshPasswordHash.IsSet() {
		return true
	}

	return false
}

// SetSshPasswordHash gets a reference to the given NullableString and assigns it to the SshPasswordHash field.
func (o *VirtualImage) SetSshPasswordHash(v string) {
	o.SshPasswordHash.Set(&v)
}
// SetSshPasswordHashNil sets the value for SshPasswordHash to be an explicit nil
func (o *VirtualImage) SetSshPasswordHashNil() {
	o.SshPasswordHash.Set(nil)
}

// UnsetSshPasswordHash ensures that no value is present for SshPasswordHash, not even an explicit nil
func (o *VirtualImage) UnsetSshPasswordHash() {
	o.SshPasswordHash.Unset()
}

// GetSshKey returns the SshKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VirtualImage) GetSshKey() string {
	if o == nil || o.SshKey.Get() == nil {
		var ret string
		return ret
	}
	return *o.SshKey.Get()
}

// GetSshKeyOk returns a tuple with the SshKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VirtualImage) GetSshKeyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SshKey.Get(), o.SshKey.IsSet()
}

// HasSshKey returns a boolean if a field has been set.
func (o *VirtualImage) HasSshKey() bool {
	if o != nil && o.SshKey.IsSet() {
		return true
	}

	return false
}

// SetSshKey gets a reference to the given NullableString and assigns it to the SshKey field.
func (o *VirtualImage) SetSshKey(v string) {
	o.SshKey.Set(&v)
}
// SetSshKeyNil sets the value for SshKey to be an explicit nil
func (o *VirtualImage) SetSshKeyNil() {
	o.SshKey.Set(nil)
}

// UnsetSshKey ensures that no value is present for SshKey, not even an explicit nil
func (o *VirtualImage) UnsetSshKey() {
	o.SshKey.Unset()
}

// GetOsType returns the OsType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VirtualImage) GetOsType() VirtualImageOsType {
	if o == nil || o.OsType.Get() == nil {
		var ret VirtualImageOsType
		return ret
	}
	return *o.OsType.Get()
}

// GetOsTypeOk returns a tuple with the OsType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VirtualImage) GetOsTypeOk() (*VirtualImageOsType, bool) {
	if o == nil  {
		return nil, false
	}
	return o.OsType.Get(), o.OsType.IsSet()
}

// HasOsType returns a boolean if a field has been set.
func (o *VirtualImage) HasOsType() bool {
	if o != nil && o.OsType.IsSet() {
		return true
	}

	return false
}

// SetOsType gets a reference to the given NullableVirtualImageOsType and assigns it to the OsType field.
func (o *VirtualImage) SetOsType(v VirtualImageOsType) {
	o.OsType.Set(&v)
}
// SetOsTypeNil sets the value for OsType to be an explicit nil
func (o *VirtualImage) SetOsTypeNil() {
	o.OsType.Set(nil)
}

// UnsetOsType ensures that no value is present for OsType, not even an explicit nil
func (o *VirtualImage) UnsetOsType() {
	o.OsType.Unset()
}

// GetMinRam returns the MinRam field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VirtualImage) GetMinRam() int64 {
	if o == nil || o.MinRam.Get() == nil {
		var ret int64
		return ret
	}
	return *o.MinRam.Get()
}

// GetMinRamOk returns a tuple with the MinRam field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VirtualImage) GetMinRamOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MinRam.Get(), o.MinRam.IsSet()
}

// HasMinRam returns a boolean if a field has been set.
func (o *VirtualImage) HasMinRam() bool {
	if o != nil && o.MinRam.IsSet() {
		return true
	}

	return false
}

// SetMinRam gets a reference to the given NullableInt64 and assigns it to the MinRam field.
func (o *VirtualImage) SetMinRam(v int64) {
	o.MinRam.Set(&v)
}
// SetMinRamNil sets the value for MinRam to be an explicit nil
func (o *VirtualImage) SetMinRamNil() {
	o.MinRam.Set(nil)
}

// UnsetMinRam ensures that no value is present for MinRam, not even an explicit nil
func (o *VirtualImage) UnsetMinRam() {
	o.MinRam.Unset()
}

// GetMinRamGB returns the MinRamGB field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VirtualImage) GetMinRamGB() int64 {
	if o == nil || o.MinRamGB.Get() == nil {
		var ret int64
		return ret
	}
	return *o.MinRamGB.Get()
}

// GetMinRamGBOk returns a tuple with the MinRamGB field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VirtualImage) GetMinRamGBOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MinRamGB.Get(), o.MinRamGB.IsSet()
}

// HasMinRamGB returns a boolean if a field has been set.
func (o *VirtualImage) HasMinRamGB() bool {
	if o != nil && o.MinRamGB.IsSet() {
		return true
	}

	return false
}

// SetMinRamGB gets a reference to the given NullableInt64 and assigns it to the MinRamGB field.
func (o *VirtualImage) SetMinRamGB(v int64) {
	o.MinRamGB.Set(&v)
}
// SetMinRamGBNil sets the value for MinRamGB to be an explicit nil
func (o *VirtualImage) SetMinRamGBNil() {
	o.MinRamGB.Set(nil)
}

// UnsetMinRamGB ensures that no value is present for MinRamGB, not even an explicit nil
func (o *VirtualImage) UnsetMinRamGB() {
	o.MinRamGB.Unset()
}

// GetMinDisk returns the MinDisk field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VirtualImage) GetMinDisk() string {
	if o == nil || o.MinDisk.Get() == nil {
		var ret string
		return ret
	}
	return *o.MinDisk.Get()
}

// GetMinDiskOk returns a tuple with the MinDisk field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VirtualImage) GetMinDiskOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MinDisk.Get(), o.MinDisk.IsSet()
}

// HasMinDisk returns a boolean if a field has been set.
func (o *VirtualImage) HasMinDisk() bool {
	if o != nil && o.MinDisk.IsSet() {
		return true
	}

	return false
}

// SetMinDisk gets a reference to the given NullableString and assigns it to the MinDisk field.
func (o *VirtualImage) SetMinDisk(v string) {
	o.MinDisk.Set(&v)
}
// SetMinDiskNil sets the value for MinDisk to be an explicit nil
func (o *VirtualImage) SetMinDiskNil() {
	o.MinDisk.Set(nil)
}

// UnsetMinDisk ensures that no value is present for MinDisk, not even an explicit nil
func (o *VirtualImage) UnsetMinDisk() {
	o.MinDisk.Unset()
}

// GetMinDiskGB returns the MinDiskGB field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VirtualImage) GetMinDiskGB() string {
	if o == nil || o.MinDiskGB.Get() == nil {
		var ret string
		return ret
	}
	return *o.MinDiskGB.Get()
}

// GetMinDiskGBOk returns a tuple with the MinDiskGB field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VirtualImage) GetMinDiskGBOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MinDiskGB.Get(), o.MinDiskGB.IsSet()
}

// HasMinDiskGB returns a boolean if a field has been set.
func (o *VirtualImage) HasMinDiskGB() bool {
	if o != nil && o.MinDiskGB.IsSet() {
		return true
	}

	return false
}

// SetMinDiskGB gets a reference to the given NullableString and assigns it to the MinDiskGB field.
func (o *VirtualImage) SetMinDiskGB(v string) {
	o.MinDiskGB.Set(&v)
}
// SetMinDiskGBNil sets the value for MinDiskGB to be an explicit nil
func (o *VirtualImage) SetMinDiskGBNil() {
	o.MinDiskGB.Set(nil)
}

// UnsetMinDiskGB ensures that no value is present for MinDiskGB, not even an explicit nil
func (o *VirtualImage) UnsetMinDiskGB() {
	o.MinDiskGB.Unset()
}

// GetRawSize returns the RawSize field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VirtualImage) GetRawSize() int64 {
	if o == nil || o.RawSize.Get() == nil {
		var ret int64
		return ret
	}
	return *o.RawSize.Get()
}

// GetRawSizeOk returns a tuple with the RawSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VirtualImage) GetRawSizeOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RawSize.Get(), o.RawSize.IsSet()
}

// HasRawSize returns a boolean if a field has been set.
func (o *VirtualImage) HasRawSize() bool {
	if o != nil && o.RawSize.IsSet() {
		return true
	}

	return false
}

// SetRawSize gets a reference to the given NullableInt64 and assigns it to the RawSize field.
func (o *VirtualImage) SetRawSize(v int64) {
	o.RawSize.Set(&v)
}
// SetRawSizeNil sets the value for RawSize to be an explicit nil
func (o *VirtualImage) SetRawSizeNil() {
	o.RawSize.Set(nil)
}

// UnsetRawSize ensures that no value is present for RawSize, not even an explicit nil
func (o *VirtualImage) UnsetRawSize() {
	o.RawSize.Unset()
}

// GetRawSizeGB returns the RawSizeGB field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VirtualImage) GetRawSizeGB() float32 {
	if o == nil || o.RawSizeGB.Get() == nil {
		var ret float32
		return ret
	}
	return *o.RawSizeGB.Get()
}

// GetRawSizeGBOk returns a tuple with the RawSizeGB field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VirtualImage) GetRawSizeGBOk() (*float32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RawSizeGB.Get(), o.RawSizeGB.IsSet()
}

// HasRawSizeGB returns a boolean if a field has been set.
func (o *VirtualImage) HasRawSizeGB() bool {
	if o != nil && o.RawSizeGB.IsSet() {
		return true
	}

	return false
}

// SetRawSizeGB gets a reference to the given NullableFloat32 and assigns it to the RawSizeGB field.
func (o *VirtualImage) SetRawSizeGB(v float32) {
	o.RawSizeGB.Set(&v)
}
// SetRawSizeGBNil sets the value for RawSizeGB to be an explicit nil
func (o *VirtualImage) SetRawSizeGBNil() {
	o.RawSizeGB.Set(nil)
}

// UnsetRawSizeGB ensures that no value is present for RawSizeGB, not even an explicit nil
func (o *VirtualImage) UnsetRawSizeGB() {
	o.RawSizeGB.Unset()
}

// GetTrialVersion returns the TrialVersion field value if set, zero value otherwise.
func (o *VirtualImage) GetTrialVersion() bool {
	if o == nil || o.TrialVersion == nil {
		var ret bool
		return ret
	}
	return *o.TrialVersion
}

// GetTrialVersionOk returns a tuple with the TrialVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualImage) GetTrialVersionOk() (*bool, bool) {
	if o == nil || o.TrialVersion == nil {
		return nil, false
	}
	return o.TrialVersion, true
}

// HasTrialVersion returns a boolean if a field has been set.
func (o *VirtualImage) HasTrialVersion() bool {
	if o != nil && o.TrialVersion != nil {
		return true
	}

	return false
}

// SetTrialVersion gets a reference to the given bool and assigns it to the TrialVersion field.
func (o *VirtualImage) SetTrialVersion(v bool) {
	o.TrialVersion = &v
}

// GetVirtioSupported returns the VirtioSupported field value if set, zero value otherwise.
func (o *VirtualImage) GetVirtioSupported() bool {
	if o == nil || o.VirtioSupported == nil {
		var ret bool
		return ret
	}
	return *o.VirtioSupported
}

// GetVirtioSupportedOk returns a tuple with the VirtioSupported field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualImage) GetVirtioSupportedOk() (*bool, bool) {
	if o == nil || o.VirtioSupported == nil {
		return nil, false
	}
	return o.VirtioSupported, true
}

// HasVirtioSupported returns a boolean if a field has been set.
func (o *VirtualImage) HasVirtioSupported() bool {
	if o != nil && o.VirtioSupported != nil {
		return true
	}

	return false
}

// SetVirtioSupported gets a reference to the given bool and assigns it to the VirtioSupported field.
func (o *VirtualImage) SetVirtioSupported(v bool) {
	o.VirtioSupported = &v
}

// GetUefi returns the Uefi field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VirtualImage) GetUefi() string {
	if o == nil || o.Uefi.Get() == nil {
		var ret string
		return ret
	}
	return *o.Uefi.Get()
}

// GetUefiOk returns a tuple with the Uefi field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VirtualImage) GetUefiOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Uefi.Get(), o.Uefi.IsSet()
}

// HasUefi returns a boolean if a field has been set.
func (o *VirtualImage) HasUefi() bool {
	if o != nil && o.Uefi.IsSet() {
		return true
	}

	return false
}

// SetUefi gets a reference to the given NullableString and assigns it to the Uefi field.
func (o *VirtualImage) SetUefi(v string) {
	o.Uefi.Set(&v)
}
// SetUefiNil sets the value for Uefi to be an explicit nil
func (o *VirtualImage) SetUefiNil() {
	o.Uefi.Set(nil)
}

// UnsetUefi ensures that no value is present for Uefi, not even an explicit nil
func (o *VirtualImage) UnsetUefi() {
	o.Uefi.Unset()
}

// GetIsAutoJoinDomain returns the IsAutoJoinDomain field value if set, zero value otherwise.
func (o *VirtualImage) GetIsAutoJoinDomain() bool {
	if o == nil || o.IsAutoJoinDomain == nil {
		var ret bool
		return ret
	}
	return *o.IsAutoJoinDomain
}

// GetIsAutoJoinDomainOk returns a tuple with the IsAutoJoinDomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualImage) GetIsAutoJoinDomainOk() (*bool, bool) {
	if o == nil || o.IsAutoJoinDomain == nil {
		return nil, false
	}
	return o.IsAutoJoinDomain, true
}

// HasIsAutoJoinDomain returns a boolean if a field has been set.
func (o *VirtualImage) HasIsAutoJoinDomain() bool {
	if o != nil && o.IsAutoJoinDomain != nil {
		return true
	}

	return false
}

// SetIsAutoJoinDomain gets a reference to the given bool and assigns it to the IsAutoJoinDomain field.
func (o *VirtualImage) SetIsAutoJoinDomain(v bool) {
	o.IsAutoJoinDomain = &v
}

// GetVmToolsInstalled returns the VmToolsInstalled field value if set, zero value otherwise.
func (o *VirtualImage) GetVmToolsInstalled() bool {
	if o == nil || o.VmToolsInstalled == nil {
		var ret bool
		return ret
	}
	return *o.VmToolsInstalled
}

// GetVmToolsInstalledOk returns a tuple with the VmToolsInstalled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualImage) GetVmToolsInstalledOk() (*bool, bool) {
	if o == nil || o.VmToolsInstalled == nil {
		return nil, false
	}
	return o.VmToolsInstalled, true
}

// HasVmToolsInstalled returns a boolean if a field has been set.
func (o *VirtualImage) HasVmToolsInstalled() bool {
	if o != nil && o.VmToolsInstalled != nil {
		return true
	}

	return false
}

// SetVmToolsInstalled gets a reference to the given bool and assigns it to the VmToolsInstalled field.
func (o *VirtualImage) SetVmToolsInstalled(v bool) {
	o.VmToolsInstalled = &v
}

// GetInstallAgent returns the InstallAgent field value if set, zero value otherwise.
func (o *VirtualImage) GetInstallAgent() bool {
	if o == nil || o.InstallAgent == nil {
		var ret bool
		return ret
	}
	return *o.InstallAgent
}

// GetInstallAgentOk returns a tuple with the InstallAgent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualImage) GetInstallAgentOk() (*bool, bool) {
	if o == nil || o.InstallAgent == nil {
		return nil, false
	}
	return o.InstallAgent, true
}

// HasInstallAgent returns a boolean if a field has been set.
func (o *VirtualImage) HasInstallAgent() bool {
	if o != nil && o.InstallAgent != nil {
		return true
	}

	return false
}

// SetInstallAgent gets a reference to the given bool and assigns it to the InstallAgent field.
func (o *VirtualImage) SetInstallAgent(v bool) {
	o.InstallAgent = &v
}

// GetIsForceCustomization returns the IsForceCustomization field value if set, zero value otherwise.
func (o *VirtualImage) GetIsForceCustomization() bool {
	if o == nil || o.IsForceCustomization == nil {
		var ret bool
		return ret
	}
	return *o.IsForceCustomization
}

// GetIsForceCustomizationOk returns a tuple with the IsForceCustomization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualImage) GetIsForceCustomizationOk() (*bool, bool) {
	if o == nil || o.IsForceCustomization == nil {
		return nil, false
	}
	return o.IsForceCustomization, true
}

// HasIsForceCustomization returns a boolean if a field has been set.
func (o *VirtualImage) HasIsForceCustomization() bool {
	if o != nil && o.IsForceCustomization != nil {
		return true
	}

	return false
}

// SetIsForceCustomization gets a reference to the given bool and assigns it to the IsForceCustomization field.
func (o *VirtualImage) SetIsForceCustomization(v bool) {
	o.IsForceCustomization = &v
}

// GetIsSysprep returns the IsSysprep field value if set, zero value otherwise.
func (o *VirtualImage) GetIsSysprep() bool {
	if o == nil || o.IsSysprep == nil {
		var ret bool
		return ret
	}
	return *o.IsSysprep
}

// GetIsSysprepOk returns a tuple with the IsSysprep field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualImage) GetIsSysprepOk() (*bool, bool) {
	if o == nil || o.IsSysprep == nil {
		return nil, false
	}
	return o.IsSysprep, true
}

// HasIsSysprep returns a boolean if a field has been set.
func (o *VirtualImage) HasIsSysprep() bool {
	if o != nil && o.IsSysprep != nil {
		return true
	}

	return false
}

// SetIsSysprep gets a reference to the given bool and assigns it to the IsSysprep field.
func (o *VirtualImage) SetIsSysprep(v bool) {
	o.IsSysprep = &v
}

// GetFipsEnabled returns the FipsEnabled field value if set, zero value otherwise.
func (o *VirtualImage) GetFipsEnabled() bool {
	if o == nil || o.FipsEnabled == nil {
		var ret bool
		return ret
	}
	return *o.FipsEnabled
}

// GetFipsEnabledOk returns a tuple with the FipsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualImage) GetFipsEnabledOk() (*bool, bool) {
	if o == nil || o.FipsEnabled == nil {
		return nil, false
	}
	return o.FipsEnabled, true
}

// HasFipsEnabled returns a boolean if a field has been set.
func (o *VirtualImage) HasFipsEnabled() bool {
	if o != nil && o.FipsEnabled != nil {
		return true
	}

	return false
}

// SetFipsEnabled gets a reference to the given bool and assigns it to the FipsEnabled field.
func (o *VirtualImage) SetFipsEnabled(v bool) {
	o.FipsEnabled = &v
}

// GetUserData returns the UserData field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VirtualImage) GetUserData() string {
	if o == nil || o.UserData.Get() == nil {
		var ret string
		return ret
	}
	return *o.UserData.Get()
}

// GetUserDataOk returns a tuple with the UserData field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VirtualImage) GetUserDataOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UserData.Get(), o.UserData.IsSet()
}

// HasUserData returns a boolean if a field has been set.
func (o *VirtualImage) HasUserData() bool {
	if o != nil && o.UserData.IsSet() {
		return true
	}

	return false
}

// SetUserData gets a reference to the given NullableString and assigns it to the UserData field.
func (o *VirtualImage) SetUserData(v string) {
	o.UserData.Set(&v)
}
// SetUserDataNil sets the value for UserData to be an explicit nil
func (o *VirtualImage) SetUserDataNil() {
	o.UserData.Set(nil)
}

// UnsetUserData ensures that no value is present for UserData, not even an explicit nil
func (o *VirtualImage) UnsetUserData() {
	o.UserData.Unset()
}

// GetConsoleKeymap returns the ConsoleKeymap field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VirtualImage) GetConsoleKeymap() string {
	if o == nil || o.ConsoleKeymap.Get() == nil {
		var ret string
		return ret
	}
	return *o.ConsoleKeymap.Get()
}

// GetConsoleKeymapOk returns a tuple with the ConsoleKeymap field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VirtualImage) GetConsoleKeymapOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ConsoleKeymap.Get(), o.ConsoleKeymap.IsSet()
}

// HasConsoleKeymap returns a boolean if a field has been set.
func (o *VirtualImage) HasConsoleKeymap() bool {
	if o != nil && o.ConsoleKeymap.IsSet() {
		return true
	}

	return false
}

// SetConsoleKeymap gets a reference to the given NullableString and assigns it to the ConsoleKeymap field.
func (o *VirtualImage) SetConsoleKeymap(v string) {
	o.ConsoleKeymap.Set(&v)
}
// SetConsoleKeymapNil sets the value for ConsoleKeymap to be an explicit nil
func (o *VirtualImage) SetConsoleKeymapNil() {
	o.ConsoleKeymap.Set(nil)
}

// UnsetConsoleKeymap ensures that no value is present for ConsoleKeymap, not even an explicit nil
func (o *VirtualImage) UnsetConsoleKeymap() {
	o.ConsoleKeymap.Unset()
}

// GetStorageProvider returns the StorageProvider field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VirtualImage) GetStorageProvider() string {
	if o == nil || o.StorageProvider.Get() == nil {
		var ret string
		return ret
	}
	return *o.StorageProvider.Get()
}

// GetStorageProviderOk returns a tuple with the StorageProvider field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VirtualImage) GetStorageProviderOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.StorageProvider.Get(), o.StorageProvider.IsSet()
}

// HasStorageProvider returns a boolean if a field has been set.
func (o *VirtualImage) HasStorageProvider() bool {
	if o != nil && o.StorageProvider.IsSet() {
		return true
	}

	return false
}

// SetStorageProvider gets a reference to the given NullableString and assigns it to the StorageProvider field.
func (o *VirtualImage) SetStorageProvider(v string) {
	o.StorageProvider.Set(&v)
}
// SetStorageProviderNil sets the value for StorageProvider to be an explicit nil
func (o *VirtualImage) SetStorageProviderNil() {
	o.StorageProvider.Set(nil)
}

// UnsetStorageProvider ensures that no value is present for StorageProvider, not even an explicit nil
func (o *VirtualImage) UnsetStorageProvider() {
	o.StorageProvider.Unset()
}

// GetExternalId returns the ExternalId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VirtualImage) GetExternalId() string {
	if o == nil || o.ExternalId.Get() == nil {
		var ret string
		return ret
	}
	return *o.ExternalId.Get()
}

// GetExternalIdOk returns a tuple with the ExternalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VirtualImage) GetExternalIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ExternalId.Get(), o.ExternalId.IsSet()
}

// HasExternalId returns a boolean if a field has been set.
func (o *VirtualImage) HasExternalId() bool {
	if o != nil && o.ExternalId.IsSet() {
		return true
	}

	return false
}

// SetExternalId gets a reference to the given NullableString and assigns it to the ExternalId field.
func (o *VirtualImage) SetExternalId(v string) {
	o.ExternalId.Set(&v)
}
// SetExternalIdNil sets the value for ExternalId to be an explicit nil
func (o *VirtualImage) SetExternalIdNil() {
	o.ExternalId.Set(nil)
}

// UnsetExternalId ensures that no value is present for ExternalId, not even an explicit nil
func (o *VirtualImage) UnsetExternalId() {
	o.ExternalId.Unset()
}

// GetVisibility returns the Visibility field value if set, zero value otherwise.
func (o *VirtualImage) GetVisibility() string {
	if o == nil || o.Visibility == nil {
		var ret string
		return ret
	}
	return *o.Visibility
}

// GetVisibilityOk returns a tuple with the Visibility field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualImage) GetVisibilityOk() (*string, bool) {
	if o == nil || o.Visibility == nil {
		return nil, false
	}
	return o.Visibility, true
}

// HasVisibility returns a boolean if a field has been set.
func (o *VirtualImage) HasVisibility() bool {
	if o != nil && o.Visibility != nil {
		return true
	}

	return false
}

// SetVisibility gets a reference to the given string and assigns it to the Visibility field.
func (o *VirtualImage) SetVisibility(v string) {
	o.Visibility = &v
}

// GetAccounts returns the Accounts field value if set, zero value otherwise.
func (o *VirtualImage) GetAccounts() []InlineResponse20040AppDeployInstance {
	if o == nil || o.Accounts == nil {
		var ret []InlineResponse20040AppDeployInstance
		return ret
	}
	return *o.Accounts
}

// GetAccountsOk returns a tuple with the Accounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualImage) GetAccountsOk() (*[]InlineResponse20040AppDeployInstance, bool) {
	if o == nil || o.Accounts == nil {
		return nil, false
	}
	return o.Accounts, true
}

// HasAccounts returns a boolean if a field has been set.
func (o *VirtualImage) HasAccounts() bool {
	if o != nil && o.Accounts != nil {
		return true
	}

	return false
}

// SetAccounts gets a reference to the given []InlineResponse20040AppDeployInstance and assigns it to the Accounts field.
func (o *VirtualImage) SetAccounts(v []InlineResponse20040AppDeployInstance) {
	o.Accounts = &v
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *VirtualImage) GetConfig() VirtualImageConfig {
	if o == nil || o.Config == nil {
		var ret VirtualImageConfig
		return ret
	}
	return *o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualImage) GetConfigOk() (*VirtualImageConfig, bool) {
	if o == nil || o.Config == nil {
		return nil, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *VirtualImage) HasConfig() bool {
	if o != nil && o.Config != nil {
		return true
	}

	return false
}

// SetConfig gets a reference to the given VirtualImageConfig and assigns it to the Config field.
func (o *VirtualImage) SetConfig(v VirtualImageConfig) {
	o.Config = &v
}

// GetVolumes returns the Volumes field value if set, zero value otherwise.
func (o *VirtualImage) GetVolumes() []map[string]interface{} {
	if o == nil || o.Volumes == nil {
		var ret []map[string]interface{}
		return ret
	}
	return *o.Volumes
}

// GetVolumesOk returns a tuple with the Volumes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualImage) GetVolumesOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.Volumes == nil {
		return nil, false
	}
	return o.Volumes, true
}

// HasVolumes returns a boolean if a field has been set.
func (o *VirtualImage) HasVolumes() bool {
	if o != nil && o.Volumes != nil {
		return true
	}

	return false
}

// SetVolumes gets a reference to the given []map[string]interface{} and assigns it to the Volumes field.
func (o *VirtualImage) SetVolumes(v []map[string]interface{}) {
	o.Volumes = &v
}

// GetStorageControllers returns the StorageControllers field value if set, zero value otherwise.
func (o *VirtualImage) GetStorageControllers() []map[string]interface{} {
	if o == nil || o.StorageControllers == nil {
		var ret []map[string]interface{}
		return ret
	}
	return *o.StorageControllers
}

// GetStorageControllersOk returns a tuple with the StorageControllers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualImage) GetStorageControllersOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.StorageControllers == nil {
		return nil, false
	}
	return o.StorageControllers, true
}

// HasStorageControllers returns a boolean if a field has been set.
func (o *VirtualImage) HasStorageControllers() bool {
	if o != nil && o.StorageControllers != nil {
		return true
	}

	return false
}

// SetStorageControllers gets a reference to the given []map[string]interface{} and assigns it to the StorageControllers field.
func (o *VirtualImage) SetStorageControllers(v []map[string]interface{}) {
	o.StorageControllers = &v
}

// GetNetworkInterfaces returns the NetworkInterfaces field value if set, zero value otherwise.
func (o *VirtualImage) GetNetworkInterfaces() []map[string]interface{} {
	if o == nil || o.NetworkInterfaces == nil {
		var ret []map[string]interface{}
		return ret
	}
	return *o.NetworkInterfaces
}

// GetNetworkInterfacesOk returns a tuple with the NetworkInterfaces field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualImage) GetNetworkInterfacesOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.NetworkInterfaces == nil {
		return nil, false
	}
	return o.NetworkInterfaces, true
}

// HasNetworkInterfaces returns a boolean if a field has been set.
func (o *VirtualImage) HasNetworkInterfaces() bool {
	if o != nil && o.NetworkInterfaces != nil {
		return true
	}

	return false
}

// SetNetworkInterfaces gets a reference to the given []map[string]interface{} and assigns it to the NetworkInterfaces field.
func (o *VirtualImage) SetNetworkInterfaces(v []map[string]interface{}) {
	o.NetworkInterfaces = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *VirtualImage) GetTags() []map[string]interface{} {
	if o == nil || o.Tags == nil {
		var ret []map[string]interface{}
		return ret
	}
	return *o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualImage) GetTagsOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *VirtualImage) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given []map[string]interface{} and assigns it to the Tags field.
func (o *VirtualImage) SetTags(v []map[string]interface{}) {
	o.Tags = &v
}

// GetLocations returns the Locations field value if set, zero value otherwise.
func (o *VirtualImage) GetLocations() []map[string]interface{} {
	if o == nil || o.Locations == nil {
		var ret []map[string]interface{}
		return ret
	}
	return *o.Locations
}

// GetLocationsOk returns a tuple with the Locations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualImage) GetLocationsOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.Locations == nil {
		return nil, false
	}
	return o.Locations, true
}

// HasLocations returns a boolean if a field has been set.
func (o *VirtualImage) HasLocations() bool {
	if o != nil && o.Locations != nil {
		return true
	}

	return false
}

// SetLocations gets a reference to the given []map[string]interface{} and assigns it to the Locations field.
func (o *VirtualImage) SetLocations(v []map[string]interface{}) {
	o.Locations = &v
}

// GetDateCreated returns the DateCreated field value if set, zero value otherwise.
func (o *VirtualImage) GetDateCreated() time.Time {
	if o == nil || o.DateCreated == nil {
		var ret time.Time
		return ret
	}
	return *o.DateCreated
}

// GetDateCreatedOk returns a tuple with the DateCreated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualImage) GetDateCreatedOk() (*time.Time, bool) {
	if o == nil || o.DateCreated == nil {
		return nil, false
	}
	return o.DateCreated, true
}

// HasDateCreated returns a boolean if a field has been set.
func (o *VirtualImage) HasDateCreated() bool {
	if o != nil && o.DateCreated != nil {
		return true
	}

	return false
}

// SetDateCreated gets a reference to the given time.Time and assigns it to the DateCreated field.
func (o *VirtualImage) SetDateCreated(v time.Time) {
	o.DateCreated = &v
}

// GetLastUpdated returns the LastUpdated field value if set, zero value otherwise.
func (o *VirtualImage) GetLastUpdated() time.Time {
	if o == nil || o.LastUpdated == nil {
		var ret time.Time
		return ret
	}
	return *o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualImage) GetLastUpdatedOk() (*time.Time, bool) {
	if o == nil || o.LastUpdated == nil {
		return nil, false
	}
	return o.LastUpdated, true
}

// HasLastUpdated returns a boolean if a field has been set.
func (o *VirtualImage) HasLastUpdated() bool {
	if o != nil && o.LastUpdated != nil {
		return true
	}

	return false
}

// SetLastUpdated gets a reference to the given time.Time and assigns it to the LastUpdated field.
func (o *VirtualImage) SetLastUpdated(v time.Time) {
	o.LastUpdated = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *VirtualImage) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualImage) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *VirtualImage) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *VirtualImage) SetStatus(v string) {
	o.Status = &v
}

func (o VirtualImage) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.Labels != nil {
		toSerialize["labels"] = o.Labels
	}
	if o.OwnerId != nil {
		toSerialize["ownerId"] = o.OwnerId
	}
	if o.Tenant != nil {
		toSerialize["tenant"] = o.Tenant
	}
	if o.ImageType != nil {
		toSerialize["imageType"] = o.ImageType
	}
	if o.UserUploaded != nil {
		toSerialize["userUploaded"] = o.UserUploaded
	}
	if o.UserDefined != nil {
		toSerialize["userDefined"] = o.UserDefined
	}
	if o.SystemImage != nil {
		toSerialize["systemImage"] = o.SystemImage
	}
	if o.IsCloudInit != nil {
		toSerialize["isCloudInit"] = o.IsCloudInit
	}
	if o.SshUsername.IsSet() {
		toSerialize["sshUsername"] = o.SshUsername.Get()
	}
	if o.SshPassword.IsSet() {
		toSerialize["sshPassword"] = o.SshPassword.Get()
	}
	if o.SshPasswordHash.IsSet() {
		toSerialize["sshPasswordHash"] = o.SshPasswordHash.Get()
	}
	if o.SshKey.IsSet() {
		toSerialize["sshKey"] = o.SshKey.Get()
	}
	if o.OsType.IsSet() {
		toSerialize["osType"] = o.OsType.Get()
	}
	if o.MinRam.IsSet() {
		toSerialize["minRam"] = o.MinRam.Get()
	}
	if o.MinRamGB.IsSet() {
		toSerialize["minRamGB"] = o.MinRamGB.Get()
	}
	if o.MinDisk.IsSet() {
		toSerialize["minDisk"] = o.MinDisk.Get()
	}
	if o.MinDiskGB.IsSet() {
		toSerialize["minDiskGB"] = o.MinDiskGB.Get()
	}
	if o.RawSize.IsSet() {
		toSerialize["rawSize"] = o.RawSize.Get()
	}
	if o.RawSizeGB.IsSet() {
		toSerialize["rawSizeGB"] = o.RawSizeGB.Get()
	}
	if o.TrialVersion != nil {
		toSerialize["trialVersion"] = o.TrialVersion
	}
	if o.VirtioSupported != nil {
		toSerialize["virtioSupported"] = o.VirtioSupported
	}
	if o.Uefi.IsSet() {
		toSerialize["uefi"] = o.Uefi.Get()
	}
	if o.IsAutoJoinDomain != nil {
		toSerialize["isAutoJoinDomain"] = o.IsAutoJoinDomain
	}
	if o.VmToolsInstalled != nil {
		toSerialize["vmToolsInstalled"] = o.VmToolsInstalled
	}
	if o.InstallAgent != nil {
		toSerialize["installAgent"] = o.InstallAgent
	}
	if o.IsForceCustomization != nil {
		toSerialize["isForceCustomization"] = o.IsForceCustomization
	}
	if o.IsSysprep != nil {
		toSerialize["isSysprep"] = o.IsSysprep
	}
	if o.FipsEnabled != nil {
		toSerialize["fipsEnabled"] = o.FipsEnabled
	}
	if o.UserData.IsSet() {
		toSerialize["userData"] = o.UserData.Get()
	}
	if o.ConsoleKeymap.IsSet() {
		toSerialize["consoleKeymap"] = o.ConsoleKeymap.Get()
	}
	if o.StorageProvider.IsSet() {
		toSerialize["storageProvider"] = o.StorageProvider.Get()
	}
	if o.ExternalId.IsSet() {
		toSerialize["externalId"] = o.ExternalId.Get()
	}
	if o.Visibility != nil {
		toSerialize["visibility"] = o.Visibility
	}
	if o.Accounts != nil {
		toSerialize["accounts"] = o.Accounts
	}
	if o.Config != nil {
		toSerialize["config"] = o.Config
	}
	if o.Volumes != nil {
		toSerialize["volumes"] = o.Volumes
	}
	if o.StorageControllers != nil {
		toSerialize["storageControllers"] = o.StorageControllers
	}
	if o.NetworkInterfaces != nil {
		toSerialize["networkInterfaces"] = o.NetworkInterfaces
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	if o.Locations != nil {
		toSerialize["locations"] = o.Locations
	}
	if o.DateCreated != nil {
		toSerialize["dateCreated"] = o.DateCreated
	}
	if o.LastUpdated != nil {
		toSerialize["lastUpdated"] = o.LastUpdated
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	return json.Marshal(toSerialize)
}

type NullableVirtualImage struct {
	value *VirtualImage
	isSet bool
}

func (v NullableVirtualImage) Get() *VirtualImage {
	return v.value
}

func (v *NullableVirtualImage) Set(val *VirtualImage) {
	v.value = val
	v.isSet = true
}

func (v NullableVirtualImage) IsSet() bool {
	return v.isSet
}

func (v *NullableVirtualImage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVirtualImage(val *VirtualImage) *NullableVirtualImage {
	return &NullableVirtualImage{value: val, isSet: true}
}

func (v NullableVirtualImage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVirtualImage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


