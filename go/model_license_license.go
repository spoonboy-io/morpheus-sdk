/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// LicenseLicense struct for LicenseLicense
type LicenseLicense struct {
	ProductTier *string `json:"productTier,omitempty"`
	StartDate *time.Time `json:"startDate,omitempty"`
	EndDate *time.Time `json:"endDate,omitempty"`
	MaxInstances *int64 `json:"maxInstances,omitempty"`
	MaxMemory *int64 `json:"maxMemory,omitempty"`
	MaxStorage *int64 `json:"maxStorage,omitempty"`
	HardLimit *bool `json:"hardLimit,omitempty"`
	FreeTrial *bool `json:"freeTrial,omitempty"`
	MultiTenant *bool `json:"multiTenant,omitempty"`
	Whitelabel *bool `json:"whitelabel,omitempty"`
	ReportStatus *bool `json:"reportStatus,omitempty"`
	SupportLevel *string `json:"supportLevel,omitempty"`
	AccountName *string `json:"accountName,omitempty"`
	Config map[string]interface{} `json:"config,omitempty"`
	AmazonProductCodes NullableString `json:"amazonProductCodes,omitempty"`
	Features *LicenseLicenseFeatures `json:"features,omitempty"`
	ZoneTypes NullableString `json:"zoneTypes,omitempty"`
	LastUpdated *time.Time `json:"lastUpdated,omitempty"`
	DateCreated *time.Time `json:"dateCreated,omitempty"`
}

// NewLicenseLicense instantiates a new LicenseLicense object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLicenseLicense() *LicenseLicense {
	this := LicenseLicense{}
	return &this
}

// NewLicenseLicenseWithDefaults instantiates a new LicenseLicense object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLicenseLicenseWithDefaults() *LicenseLicense {
	this := LicenseLicense{}
	return &this
}

// GetProductTier returns the ProductTier field value if set, zero value otherwise.
func (o *LicenseLicense) GetProductTier() string {
	if o == nil || o.ProductTier == nil {
		var ret string
		return ret
	}
	return *o.ProductTier
}

// GetProductTierOk returns a tuple with the ProductTier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseLicense) GetProductTierOk() (*string, bool) {
	if o == nil || o.ProductTier == nil {
		return nil, false
	}
	return o.ProductTier, true
}

// HasProductTier returns a boolean if a field has been set.
func (o *LicenseLicense) HasProductTier() bool {
	if o != nil && o.ProductTier != nil {
		return true
	}

	return false
}

// SetProductTier gets a reference to the given string and assigns it to the ProductTier field.
func (o *LicenseLicense) SetProductTier(v string) {
	o.ProductTier = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *LicenseLicense) GetStartDate() time.Time {
	if o == nil || o.StartDate == nil {
		var ret time.Time
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseLicense) GetStartDateOk() (*time.Time, bool) {
	if o == nil || o.StartDate == nil {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *LicenseLicense) HasStartDate() bool {
	if o != nil && o.StartDate != nil {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given time.Time and assigns it to the StartDate field.
func (o *LicenseLicense) SetStartDate(v time.Time) {
	o.StartDate = &v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *LicenseLicense) GetEndDate() time.Time {
	if o == nil || o.EndDate == nil {
		var ret time.Time
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseLicense) GetEndDateOk() (*time.Time, bool) {
	if o == nil || o.EndDate == nil {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *LicenseLicense) HasEndDate() bool {
	if o != nil && o.EndDate != nil {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given time.Time and assigns it to the EndDate field.
func (o *LicenseLicense) SetEndDate(v time.Time) {
	o.EndDate = &v
}

// GetMaxInstances returns the MaxInstances field value if set, zero value otherwise.
func (o *LicenseLicense) GetMaxInstances() int64 {
	if o == nil || o.MaxInstances == nil {
		var ret int64
		return ret
	}
	return *o.MaxInstances
}

// GetMaxInstancesOk returns a tuple with the MaxInstances field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseLicense) GetMaxInstancesOk() (*int64, bool) {
	if o == nil || o.MaxInstances == nil {
		return nil, false
	}
	return o.MaxInstances, true
}

// HasMaxInstances returns a boolean if a field has been set.
func (o *LicenseLicense) HasMaxInstances() bool {
	if o != nil && o.MaxInstances != nil {
		return true
	}

	return false
}

// SetMaxInstances gets a reference to the given int64 and assigns it to the MaxInstances field.
func (o *LicenseLicense) SetMaxInstances(v int64) {
	o.MaxInstances = &v
}

// GetMaxMemory returns the MaxMemory field value if set, zero value otherwise.
func (o *LicenseLicense) GetMaxMemory() int64 {
	if o == nil || o.MaxMemory == nil {
		var ret int64
		return ret
	}
	return *o.MaxMemory
}

// GetMaxMemoryOk returns a tuple with the MaxMemory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseLicense) GetMaxMemoryOk() (*int64, bool) {
	if o == nil || o.MaxMemory == nil {
		return nil, false
	}
	return o.MaxMemory, true
}

// HasMaxMemory returns a boolean if a field has been set.
func (o *LicenseLicense) HasMaxMemory() bool {
	if o != nil && o.MaxMemory != nil {
		return true
	}

	return false
}

// SetMaxMemory gets a reference to the given int64 and assigns it to the MaxMemory field.
func (o *LicenseLicense) SetMaxMemory(v int64) {
	o.MaxMemory = &v
}

// GetMaxStorage returns the MaxStorage field value if set, zero value otherwise.
func (o *LicenseLicense) GetMaxStorage() int64 {
	if o == nil || o.MaxStorage == nil {
		var ret int64
		return ret
	}
	return *o.MaxStorage
}

// GetMaxStorageOk returns a tuple with the MaxStorage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseLicense) GetMaxStorageOk() (*int64, bool) {
	if o == nil || o.MaxStorage == nil {
		return nil, false
	}
	return o.MaxStorage, true
}

// HasMaxStorage returns a boolean if a field has been set.
func (o *LicenseLicense) HasMaxStorage() bool {
	if o != nil && o.MaxStorage != nil {
		return true
	}

	return false
}

// SetMaxStorage gets a reference to the given int64 and assigns it to the MaxStorage field.
func (o *LicenseLicense) SetMaxStorage(v int64) {
	o.MaxStorage = &v
}

// GetHardLimit returns the HardLimit field value if set, zero value otherwise.
func (o *LicenseLicense) GetHardLimit() bool {
	if o == nil || o.HardLimit == nil {
		var ret bool
		return ret
	}
	return *o.HardLimit
}

// GetHardLimitOk returns a tuple with the HardLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseLicense) GetHardLimitOk() (*bool, bool) {
	if o == nil || o.HardLimit == nil {
		return nil, false
	}
	return o.HardLimit, true
}

// HasHardLimit returns a boolean if a field has been set.
func (o *LicenseLicense) HasHardLimit() bool {
	if o != nil && o.HardLimit != nil {
		return true
	}

	return false
}

// SetHardLimit gets a reference to the given bool and assigns it to the HardLimit field.
func (o *LicenseLicense) SetHardLimit(v bool) {
	o.HardLimit = &v
}

// GetFreeTrial returns the FreeTrial field value if set, zero value otherwise.
func (o *LicenseLicense) GetFreeTrial() bool {
	if o == nil || o.FreeTrial == nil {
		var ret bool
		return ret
	}
	return *o.FreeTrial
}

// GetFreeTrialOk returns a tuple with the FreeTrial field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseLicense) GetFreeTrialOk() (*bool, bool) {
	if o == nil || o.FreeTrial == nil {
		return nil, false
	}
	return o.FreeTrial, true
}

// HasFreeTrial returns a boolean if a field has been set.
func (o *LicenseLicense) HasFreeTrial() bool {
	if o != nil && o.FreeTrial != nil {
		return true
	}

	return false
}

// SetFreeTrial gets a reference to the given bool and assigns it to the FreeTrial field.
func (o *LicenseLicense) SetFreeTrial(v bool) {
	o.FreeTrial = &v
}

// GetMultiTenant returns the MultiTenant field value if set, zero value otherwise.
func (o *LicenseLicense) GetMultiTenant() bool {
	if o == nil || o.MultiTenant == nil {
		var ret bool
		return ret
	}
	return *o.MultiTenant
}

// GetMultiTenantOk returns a tuple with the MultiTenant field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseLicense) GetMultiTenantOk() (*bool, bool) {
	if o == nil || o.MultiTenant == nil {
		return nil, false
	}
	return o.MultiTenant, true
}

// HasMultiTenant returns a boolean if a field has been set.
func (o *LicenseLicense) HasMultiTenant() bool {
	if o != nil && o.MultiTenant != nil {
		return true
	}

	return false
}

// SetMultiTenant gets a reference to the given bool and assigns it to the MultiTenant field.
func (o *LicenseLicense) SetMultiTenant(v bool) {
	o.MultiTenant = &v
}

// GetWhitelabel returns the Whitelabel field value if set, zero value otherwise.
func (o *LicenseLicense) GetWhitelabel() bool {
	if o == nil || o.Whitelabel == nil {
		var ret bool
		return ret
	}
	return *o.Whitelabel
}

// GetWhitelabelOk returns a tuple with the Whitelabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseLicense) GetWhitelabelOk() (*bool, bool) {
	if o == nil || o.Whitelabel == nil {
		return nil, false
	}
	return o.Whitelabel, true
}

// HasWhitelabel returns a boolean if a field has been set.
func (o *LicenseLicense) HasWhitelabel() bool {
	if o != nil && o.Whitelabel != nil {
		return true
	}

	return false
}

// SetWhitelabel gets a reference to the given bool and assigns it to the Whitelabel field.
func (o *LicenseLicense) SetWhitelabel(v bool) {
	o.Whitelabel = &v
}

// GetReportStatus returns the ReportStatus field value if set, zero value otherwise.
func (o *LicenseLicense) GetReportStatus() bool {
	if o == nil || o.ReportStatus == nil {
		var ret bool
		return ret
	}
	return *o.ReportStatus
}

// GetReportStatusOk returns a tuple with the ReportStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseLicense) GetReportStatusOk() (*bool, bool) {
	if o == nil || o.ReportStatus == nil {
		return nil, false
	}
	return o.ReportStatus, true
}

// HasReportStatus returns a boolean if a field has been set.
func (o *LicenseLicense) HasReportStatus() bool {
	if o != nil && o.ReportStatus != nil {
		return true
	}

	return false
}

// SetReportStatus gets a reference to the given bool and assigns it to the ReportStatus field.
func (o *LicenseLicense) SetReportStatus(v bool) {
	o.ReportStatus = &v
}

// GetSupportLevel returns the SupportLevel field value if set, zero value otherwise.
func (o *LicenseLicense) GetSupportLevel() string {
	if o == nil || o.SupportLevel == nil {
		var ret string
		return ret
	}
	return *o.SupportLevel
}

// GetSupportLevelOk returns a tuple with the SupportLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseLicense) GetSupportLevelOk() (*string, bool) {
	if o == nil || o.SupportLevel == nil {
		return nil, false
	}
	return o.SupportLevel, true
}

// HasSupportLevel returns a boolean if a field has been set.
func (o *LicenseLicense) HasSupportLevel() bool {
	if o != nil && o.SupportLevel != nil {
		return true
	}

	return false
}

// SetSupportLevel gets a reference to the given string and assigns it to the SupportLevel field.
func (o *LicenseLicense) SetSupportLevel(v string) {
	o.SupportLevel = &v
}

// GetAccountName returns the AccountName field value if set, zero value otherwise.
func (o *LicenseLicense) GetAccountName() string {
	if o == nil || o.AccountName == nil {
		var ret string
		return ret
	}
	return *o.AccountName
}

// GetAccountNameOk returns a tuple with the AccountName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseLicense) GetAccountNameOk() (*string, bool) {
	if o == nil || o.AccountName == nil {
		return nil, false
	}
	return o.AccountName, true
}

// HasAccountName returns a boolean if a field has been set.
func (o *LicenseLicense) HasAccountName() bool {
	if o != nil && o.AccountName != nil {
		return true
	}

	return false
}

// SetAccountName gets a reference to the given string and assigns it to the AccountName field.
func (o *LicenseLicense) SetAccountName(v string) {
	o.AccountName = &v
}

// GetConfig returns the Config field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LicenseLicense) GetConfig() map[string]interface{} {
	if o == nil  {
		var ret map[string]interface{}
		return ret
	}
	return o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LicenseLicense) GetConfigOk() (*map[string]interface{}, bool) {
	if o == nil || o.Config == nil {
		return nil, false
	}
	return &o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *LicenseLicense) HasConfig() bool {
	if o != nil && o.Config != nil {
		return true
	}

	return false
}

// SetConfig gets a reference to the given map[string]interface{} and assigns it to the Config field.
func (o *LicenseLicense) SetConfig(v map[string]interface{}) {
	o.Config = v
}

// GetAmazonProductCodes returns the AmazonProductCodes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LicenseLicense) GetAmazonProductCodes() string {
	if o == nil || o.AmazonProductCodes.Get() == nil {
		var ret string
		return ret
	}
	return *o.AmazonProductCodes.Get()
}

// GetAmazonProductCodesOk returns a tuple with the AmazonProductCodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LicenseLicense) GetAmazonProductCodesOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AmazonProductCodes.Get(), o.AmazonProductCodes.IsSet()
}

// HasAmazonProductCodes returns a boolean if a field has been set.
func (o *LicenseLicense) HasAmazonProductCodes() bool {
	if o != nil && o.AmazonProductCodes.IsSet() {
		return true
	}

	return false
}

// SetAmazonProductCodes gets a reference to the given NullableString and assigns it to the AmazonProductCodes field.
func (o *LicenseLicense) SetAmazonProductCodes(v string) {
	o.AmazonProductCodes.Set(&v)
}
// SetAmazonProductCodesNil sets the value for AmazonProductCodes to be an explicit nil
func (o *LicenseLicense) SetAmazonProductCodesNil() {
	o.AmazonProductCodes.Set(nil)
}

// UnsetAmazonProductCodes ensures that no value is present for AmazonProductCodes, not even an explicit nil
func (o *LicenseLicense) UnsetAmazonProductCodes() {
	o.AmazonProductCodes.Unset()
}

// GetFeatures returns the Features field value if set, zero value otherwise.
func (o *LicenseLicense) GetFeatures() LicenseLicenseFeatures {
	if o == nil || o.Features == nil {
		var ret LicenseLicenseFeatures
		return ret
	}
	return *o.Features
}

// GetFeaturesOk returns a tuple with the Features field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseLicense) GetFeaturesOk() (*LicenseLicenseFeatures, bool) {
	if o == nil || o.Features == nil {
		return nil, false
	}
	return o.Features, true
}

// HasFeatures returns a boolean if a field has been set.
func (o *LicenseLicense) HasFeatures() bool {
	if o != nil && o.Features != nil {
		return true
	}

	return false
}

// SetFeatures gets a reference to the given LicenseLicenseFeatures and assigns it to the Features field.
func (o *LicenseLicense) SetFeatures(v LicenseLicenseFeatures) {
	o.Features = &v
}

// GetZoneTypes returns the ZoneTypes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LicenseLicense) GetZoneTypes() string {
	if o == nil || o.ZoneTypes.Get() == nil {
		var ret string
		return ret
	}
	return *o.ZoneTypes.Get()
}

// GetZoneTypesOk returns a tuple with the ZoneTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LicenseLicense) GetZoneTypesOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ZoneTypes.Get(), o.ZoneTypes.IsSet()
}

// HasZoneTypes returns a boolean if a field has been set.
func (o *LicenseLicense) HasZoneTypes() bool {
	if o != nil && o.ZoneTypes.IsSet() {
		return true
	}

	return false
}

// SetZoneTypes gets a reference to the given NullableString and assigns it to the ZoneTypes field.
func (o *LicenseLicense) SetZoneTypes(v string) {
	o.ZoneTypes.Set(&v)
}
// SetZoneTypesNil sets the value for ZoneTypes to be an explicit nil
func (o *LicenseLicense) SetZoneTypesNil() {
	o.ZoneTypes.Set(nil)
}

// UnsetZoneTypes ensures that no value is present for ZoneTypes, not even an explicit nil
func (o *LicenseLicense) UnsetZoneTypes() {
	o.ZoneTypes.Unset()
}

// GetLastUpdated returns the LastUpdated field value if set, zero value otherwise.
func (o *LicenseLicense) GetLastUpdated() time.Time {
	if o == nil || o.LastUpdated == nil {
		var ret time.Time
		return ret
	}
	return *o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseLicense) GetLastUpdatedOk() (*time.Time, bool) {
	if o == nil || o.LastUpdated == nil {
		return nil, false
	}
	return o.LastUpdated, true
}

// HasLastUpdated returns a boolean if a field has been set.
func (o *LicenseLicense) HasLastUpdated() bool {
	if o != nil && o.LastUpdated != nil {
		return true
	}

	return false
}

// SetLastUpdated gets a reference to the given time.Time and assigns it to the LastUpdated field.
func (o *LicenseLicense) SetLastUpdated(v time.Time) {
	o.LastUpdated = &v
}

// GetDateCreated returns the DateCreated field value if set, zero value otherwise.
func (o *LicenseLicense) GetDateCreated() time.Time {
	if o == nil || o.DateCreated == nil {
		var ret time.Time
		return ret
	}
	return *o.DateCreated
}

// GetDateCreatedOk returns a tuple with the DateCreated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseLicense) GetDateCreatedOk() (*time.Time, bool) {
	if o == nil || o.DateCreated == nil {
		return nil, false
	}
	return o.DateCreated, true
}

// HasDateCreated returns a boolean if a field has been set.
func (o *LicenseLicense) HasDateCreated() bool {
	if o != nil && o.DateCreated != nil {
		return true
	}

	return false
}

// SetDateCreated gets a reference to the given time.Time and assigns it to the DateCreated field.
func (o *LicenseLicense) SetDateCreated(v time.Time) {
	o.DateCreated = &v
}

func (o LicenseLicense) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ProductTier != nil {
		toSerialize["productTier"] = o.ProductTier
	}
	if o.StartDate != nil {
		toSerialize["startDate"] = o.StartDate
	}
	if o.EndDate != nil {
		toSerialize["endDate"] = o.EndDate
	}
	if o.MaxInstances != nil {
		toSerialize["maxInstances"] = o.MaxInstances
	}
	if o.MaxMemory != nil {
		toSerialize["maxMemory"] = o.MaxMemory
	}
	if o.MaxStorage != nil {
		toSerialize["maxStorage"] = o.MaxStorage
	}
	if o.HardLimit != nil {
		toSerialize["hardLimit"] = o.HardLimit
	}
	if o.FreeTrial != nil {
		toSerialize["freeTrial"] = o.FreeTrial
	}
	if o.MultiTenant != nil {
		toSerialize["multiTenant"] = o.MultiTenant
	}
	if o.Whitelabel != nil {
		toSerialize["whitelabel"] = o.Whitelabel
	}
	if o.ReportStatus != nil {
		toSerialize["reportStatus"] = o.ReportStatus
	}
	if o.SupportLevel != nil {
		toSerialize["supportLevel"] = o.SupportLevel
	}
	if o.AccountName != nil {
		toSerialize["accountName"] = o.AccountName
	}
	if o.Config != nil {
		toSerialize["config"] = o.Config
	}
	if o.AmazonProductCodes.IsSet() {
		toSerialize["amazonProductCodes"] = o.AmazonProductCodes.Get()
	}
	if o.Features != nil {
		toSerialize["features"] = o.Features
	}
	if o.ZoneTypes.IsSet() {
		toSerialize["zoneTypes"] = o.ZoneTypes.Get()
	}
	if o.LastUpdated != nil {
		toSerialize["lastUpdated"] = o.LastUpdated
	}
	if o.DateCreated != nil {
		toSerialize["dateCreated"] = o.DateCreated
	}
	return json.Marshal(toSerialize)
}

type NullableLicenseLicense struct {
	value *LicenseLicense
	isSet bool
}

func (v NullableLicenseLicense) Get() *LicenseLicense {
	return v.value
}

func (v *NullableLicenseLicense) Set(val *LicenseLicense) {
	v.value = val
	v.isSet = true
}

func (v NullableLicenseLicense) IsSet() bool {
	return v.isSet
}

func (v *NullableLicenseLicense) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLicenseLicense(val *LicenseLicense) *NullableLicenseLicense {
	return &NullableLicenseLicense{value: val, isSet: true}
}

func (v NullableLicenseLicense) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLicenseLicense) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


