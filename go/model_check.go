/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 6.1.1
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the Check type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Check{}

// Check struct for Check
type Check struct {
	Id *int64 `json:"id,omitempty"`
	Account *UpdateBlueprintPermissionsRequestResourcePermissionSitesInner `json:"account,omitempty"`
	Active *bool `json:"active,omitempty"`
	ApiKey *string `json:"apiKey,omitempty"`
	Availability *float32 `json:"availability,omitempty"`
	CheckAgent NullableString `json:"checkAgent,omitempty"`
	CheckInterval NullableInt64 `json:"checkInterval,omitempty"`
	CheckSpec NullableString `json:"checkSpec,omitempty"`
	CheckType *CheckCheckType `json:"checkType,omitempty"`
	Config *CheckConfig `json:"config,omitempty"`
	Container NullableCheckContainer `json:"container,omitempty"`
	CreateIncident *bool `json:"createIncident,omitempty"`
	Muted *bool `json:"muted,omitempty"`
	CreatedBy NullableCheckCreatedBy `json:"createdBy,omitempty"`
	DateCreated *time.Time `json:"dateCreated,omitempty"`
	Description NullableString `json:"description,omitempty"`
	EndDate NullableTime `json:"endDate,omitempty"`
	Health *int64 `json:"health,omitempty"`
	InUptime *bool `json:"inUptime,omitempty"`
	LastBoxStats NullableString `json:"lastBoxStats,omitempty"`
	LastCheckStatus NullableString `json:"lastCheckStatus,omitempty"`
	LastError NullableString `json:"lastError,omitempty"`
	LastErrorDate NullableTime `json:"lastErrorDate,omitempty"`
	LastMessage NullableString `json:"lastMessage,omitempty"`
	LastMetric NullableString `json:"lastMetric,omitempty"`
	LastRunDate NullableTime `json:"lastRunDate,omitempty"`
	LastStats NullableString `json:"lastStats,omitempty"`
	LastSuccessDate NullableTime `json:"lastSuccessDate,omitempty"`
	LastTimer NullableInt64 `json:"lastTimer,omitempty"`
	LastUpdated NullableTime `json:"lastUpdated,omitempty"`
	LastWarningDate NullableTime `json:"lastWarningDate,omitempty"`
	Name *string `json:"name,omitempty"`
	NextRunDate NullableTime `json:"nextRunDate,omitempty"`
	OutageTime *int64 `json:"outageTime,omitempty"`
	Severity *string `json:"severity,omitempty"`
	StartDate NullableTime `json:"startDate,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
}

// NewCheck instantiates a new Check object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCheck() *Check {
	this := Check{}
	return &this
}

// NewCheckWithDefaults instantiates a new Check object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCheckWithDefaults() *Check {
	this := Check{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Check) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Check) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Check) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *Check) SetId(v int64) {
	o.Id = &v
}

// GetAccount returns the Account field value if set, zero value otherwise.
func (o *Check) GetAccount() UpdateBlueprintPermissionsRequestResourcePermissionSitesInner {
	if o == nil || IsNil(o.Account) {
		var ret UpdateBlueprintPermissionsRequestResourcePermissionSitesInner
		return ret
	}
	return *o.Account
}

// GetAccountOk returns a tuple with the Account field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Check) GetAccountOk() (*UpdateBlueprintPermissionsRequestResourcePermissionSitesInner, bool) {
	if o == nil || IsNil(o.Account) {
		return nil, false
	}
	return o.Account, true
}

// HasAccount returns a boolean if a field has been set.
func (o *Check) HasAccount() bool {
	if o != nil && !IsNil(o.Account) {
		return true
	}

	return false
}

// SetAccount gets a reference to the given UpdateBlueprintPermissionsRequestResourcePermissionSitesInner and assigns it to the Account field.
func (o *Check) SetAccount(v UpdateBlueprintPermissionsRequestResourcePermissionSitesInner) {
	o.Account = &v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *Check) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Check) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *Check) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *Check) SetActive(v bool) {
	o.Active = &v
}

// GetApiKey returns the ApiKey field value if set, zero value otherwise.
func (o *Check) GetApiKey() string {
	if o == nil || IsNil(o.ApiKey) {
		var ret string
		return ret
	}
	return *o.ApiKey
}

// GetApiKeyOk returns a tuple with the ApiKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Check) GetApiKeyOk() (*string, bool) {
	if o == nil || IsNil(o.ApiKey) {
		return nil, false
	}
	return o.ApiKey, true
}

// HasApiKey returns a boolean if a field has been set.
func (o *Check) HasApiKey() bool {
	if o != nil && !IsNil(o.ApiKey) {
		return true
	}

	return false
}

// SetApiKey gets a reference to the given string and assigns it to the ApiKey field.
func (o *Check) SetApiKey(v string) {
	o.ApiKey = &v
}

// GetAvailability returns the Availability field value if set, zero value otherwise.
func (o *Check) GetAvailability() float32 {
	if o == nil || IsNil(o.Availability) {
		var ret float32
		return ret
	}
	return *o.Availability
}

// GetAvailabilityOk returns a tuple with the Availability field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Check) GetAvailabilityOk() (*float32, bool) {
	if o == nil || IsNil(o.Availability) {
		return nil, false
	}
	return o.Availability, true
}

// HasAvailability returns a boolean if a field has been set.
func (o *Check) HasAvailability() bool {
	if o != nil && !IsNil(o.Availability) {
		return true
	}

	return false
}

// SetAvailability gets a reference to the given float32 and assigns it to the Availability field.
func (o *Check) SetAvailability(v float32) {
	o.Availability = &v
}

// GetCheckAgent returns the CheckAgent field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Check) GetCheckAgent() string {
	if o == nil || IsNil(o.CheckAgent.Get()) {
		var ret string
		return ret
	}
	return *o.CheckAgent.Get()
}

// GetCheckAgentOk returns a tuple with the CheckAgent field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Check) GetCheckAgentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CheckAgent.Get(), o.CheckAgent.IsSet()
}

// HasCheckAgent returns a boolean if a field has been set.
func (o *Check) HasCheckAgent() bool {
	if o != nil && o.CheckAgent.IsSet() {
		return true
	}

	return false
}

// SetCheckAgent gets a reference to the given NullableString and assigns it to the CheckAgent field.
func (o *Check) SetCheckAgent(v string) {
	o.CheckAgent.Set(&v)
}
// SetCheckAgentNil sets the value for CheckAgent to be an explicit nil
func (o *Check) SetCheckAgentNil() {
	o.CheckAgent.Set(nil)
}

// UnsetCheckAgent ensures that no value is present for CheckAgent, not even an explicit nil
func (o *Check) UnsetCheckAgent() {
	o.CheckAgent.Unset()
}

// GetCheckInterval returns the CheckInterval field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Check) GetCheckInterval() int64 {
	if o == nil || IsNil(o.CheckInterval.Get()) {
		var ret int64
		return ret
	}
	return *o.CheckInterval.Get()
}

// GetCheckIntervalOk returns a tuple with the CheckInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Check) GetCheckIntervalOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.CheckInterval.Get(), o.CheckInterval.IsSet()
}

// HasCheckInterval returns a boolean if a field has been set.
func (o *Check) HasCheckInterval() bool {
	if o != nil && o.CheckInterval.IsSet() {
		return true
	}

	return false
}

// SetCheckInterval gets a reference to the given NullableInt64 and assigns it to the CheckInterval field.
func (o *Check) SetCheckInterval(v int64) {
	o.CheckInterval.Set(&v)
}
// SetCheckIntervalNil sets the value for CheckInterval to be an explicit nil
func (o *Check) SetCheckIntervalNil() {
	o.CheckInterval.Set(nil)
}

// UnsetCheckInterval ensures that no value is present for CheckInterval, not even an explicit nil
func (o *Check) UnsetCheckInterval() {
	o.CheckInterval.Unset()
}

// GetCheckSpec returns the CheckSpec field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Check) GetCheckSpec() string {
	if o == nil || IsNil(o.CheckSpec.Get()) {
		var ret string
		return ret
	}
	return *o.CheckSpec.Get()
}

// GetCheckSpecOk returns a tuple with the CheckSpec field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Check) GetCheckSpecOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CheckSpec.Get(), o.CheckSpec.IsSet()
}

// HasCheckSpec returns a boolean if a field has been set.
func (o *Check) HasCheckSpec() bool {
	if o != nil && o.CheckSpec.IsSet() {
		return true
	}

	return false
}

// SetCheckSpec gets a reference to the given NullableString and assigns it to the CheckSpec field.
func (o *Check) SetCheckSpec(v string) {
	o.CheckSpec.Set(&v)
}
// SetCheckSpecNil sets the value for CheckSpec to be an explicit nil
func (o *Check) SetCheckSpecNil() {
	o.CheckSpec.Set(nil)
}

// UnsetCheckSpec ensures that no value is present for CheckSpec, not even an explicit nil
func (o *Check) UnsetCheckSpec() {
	o.CheckSpec.Unset()
}

// GetCheckType returns the CheckType field value if set, zero value otherwise.
func (o *Check) GetCheckType() CheckCheckType {
	if o == nil || IsNil(o.CheckType) {
		var ret CheckCheckType
		return ret
	}
	return *o.CheckType
}

// GetCheckTypeOk returns a tuple with the CheckType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Check) GetCheckTypeOk() (*CheckCheckType, bool) {
	if o == nil || IsNil(o.CheckType) {
		return nil, false
	}
	return o.CheckType, true
}

// HasCheckType returns a boolean if a field has been set.
func (o *Check) HasCheckType() bool {
	if o != nil && !IsNil(o.CheckType) {
		return true
	}

	return false
}

// SetCheckType gets a reference to the given CheckCheckType and assigns it to the CheckType field.
func (o *Check) SetCheckType(v CheckCheckType) {
	o.CheckType = &v
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *Check) GetConfig() CheckConfig {
	if o == nil || IsNil(o.Config) {
		var ret CheckConfig
		return ret
	}
	return *o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Check) GetConfigOk() (*CheckConfig, bool) {
	if o == nil || IsNil(o.Config) {
		return nil, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *Check) HasConfig() bool {
	if o != nil && !IsNil(o.Config) {
		return true
	}

	return false
}

// SetConfig gets a reference to the given CheckConfig and assigns it to the Config field.
func (o *Check) SetConfig(v CheckConfig) {
	o.Config = &v
}

// GetContainer returns the Container field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Check) GetContainer() CheckContainer {
	if o == nil || IsNil(o.Container.Get()) {
		var ret CheckContainer
		return ret
	}
	return *o.Container.Get()
}

// GetContainerOk returns a tuple with the Container field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Check) GetContainerOk() (*CheckContainer, bool) {
	if o == nil {
		return nil, false
	}
	return o.Container.Get(), o.Container.IsSet()
}

// HasContainer returns a boolean if a field has been set.
func (o *Check) HasContainer() bool {
	if o != nil && o.Container.IsSet() {
		return true
	}

	return false
}

// SetContainer gets a reference to the given NullableCheckContainer and assigns it to the Container field.
func (o *Check) SetContainer(v CheckContainer) {
	o.Container.Set(&v)
}
// SetContainerNil sets the value for Container to be an explicit nil
func (o *Check) SetContainerNil() {
	o.Container.Set(nil)
}

// UnsetContainer ensures that no value is present for Container, not even an explicit nil
func (o *Check) UnsetContainer() {
	o.Container.Unset()
}

// GetCreateIncident returns the CreateIncident field value if set, zero value otherwise.
func (o *Check) GetCreateIncident() bool {
	if o == nil || IsNil(o.CreateIncident) {
		var ret bool
		return ret
	}
	return *o.CreateIncident
}

// GetCreateIncidentOk returns a tuple with the CreateIncident field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Check) GetCreateIncidentOk() (*bool, bool) {
	if o == nil || IsNil(o.CreateIncident) {
		return nil, false
	}
	return o.CreateIncident, true
}

// HasCreateIncident returns a boolean if a field has been set.
func (o *Check) HasCreateIncident() bool {
	if o != nil && !IsNil(o.CreateIncident) {
		return true
	}

	return false
}

// SetCreateIncident gets a reference to the given bool and assigns it to the CreateIncident field.
func (o *Check) SetCreateIncident(v bool) {
	o.CreateIncident = &v
}

// GetMuted returns the Muted field value if set, zero value otherwise.
func (o *Check) GetMuted() bool {
	if o == nil || IsNil(o.Muted) {
		var ret bool
		return ret
	}
	return *o.Muted
}

// GetMutedOk returns a tuple with the Muted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Check) GetMutedOk() (*bool, bool) {
	if o == nil || IsNil(o.Muted) {
		return nil, false
	}
	return o.Muted, true
}

// HasMuted returns a boolean if a field has been set.
func (o *Check) HasMuted() bool {
	if o != nil && !IsNil(o.Muted) {
		return true
	}

	return false
}

// SetMuted gets a reference to the given bool and assigns it to the Muted field.
func (o *Check) SetMuted(v bool) {
	o.Muted = &v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Check) GetCreatedBy() CheckCreatedBy {
	if o == nil || IsNil(o.CreatedBy.Get()) {
		var ret CheckCreatedBy
		return ret
	}
	return *o.CreatedBy.Get()
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Check) GetCreatedByOk() (*CheckCreatedBy, bool) {
	if o == nil {
		return nil, false
	}
	return o.CreatedBy.Get(), o.CreatedBy.IsSet()
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *Check) HasCreatedBy() bool {
	if o != nil && o.CreatedBy.IsSet() {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given NullableCheckCreatedBy and assigns it to the CreatedBy field.
func (o *Check) SetCreatedBy(v CheckCreatedBy) {
	o.CreatedBy.Set(&v)
}
// SetCreatedByNil sets the value for CreatedBy to be an explicit nil
func (o *Check) SetCreatedByNil() {
	o.CreatedBy.Set(nil)
}

// UnsetCreatedBy ensures that no value is present for CreatedBy, not even an explicit nil
func (o *Check) UnsetCreatedBy() {
	o.CreatedBy.Unset()
}

// GetDateCreated returns the DateCreated field value if set, zero value otherwise.
func (o *Check) GetDateCreated() time.Time {
	if o == nil || IsNil(o.DateCreated) {
		var ret time.Time
		return ret
	}
	return *o.DateCreated
}

// GetDateCreatedOk returns a tuple with the DateCreated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Check) GetDateCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DateCreated) {
		return nil, false
	}
	return o.DateCreated, true
}

// HasDateCreated returns a boolean if a field has been set.
func (o *Check) HasDateCreated() bool {
	if o != nil && !IsNil(o.DateCreated) {
		return true
	}

	return false
}

// SetDateCreated gets a reference to the given time.Time and assigns it to the DateCreated field.
func (o *Check) SetDateCreated(v time.Time) {
	o.DateCreated = &v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Check) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Check) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *Check) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *Check) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *Check) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *Check) UnsetDescription() {
	o.Description.Unset()
}

// GetEndDate returns the EndDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Check) GetEndDate() time.Time {
	if o == nil || IsNil(o.EndDate.Get()) {
		var ret time.Time
		return ret
	}
	return *o.EndDate.Get()
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Check) GetEndDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.EndDate.Get(), o.EndDate.IsSet()
}

// HasEndDate returns a boolean if a field has been set.
func (o *Check) HasEndDate() bool {
	if o != nil && o.EndDate.IsSet() {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given NullableTime and assigns it to the EndDate field.
func (o *Check) SetEndDate(v time.Time) {
	o.EndDate.Set(&v)
}
// SetEndDateNil sets the value for EndDate to be an explicit nil
func (o *Check) SetEndDateNil() {
	o.EndDate.Set(nil)
}

// UnsetEndDate ensures that no value is present for EndDate, not even an explicit nil
func (o *Check) UnsetEndDate() {
	o.EndDate.Unset()
}

// GetHealth returns the Health field value if set, zero value otherwise.
func (o *Check) GetHealth() int64 {
	if o == nil || IsNil(o.Health) {
		var ret int64
		return ret
	}
	return *o.Health
}

// GetHealthOk returns a tuple with the Health field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Check) GetHealthOk() (*int64, bool) {
	if o == nil || IsNil(o.Health) {
		return nil, false
	}
	return o.Health, true
}

// HasHealth returns a boolean if a field has been set.
func (o *Check) HasHealth() bool {
	if o != nil && !IsNil(o.Health) {
		return true
	}

	return false
}

// SetHealth gets a reference to the given int64 and assigns it to the Health field.
func (o *Check) SetHealth(v int64) {
	o.Health = &v
}

// GetInUptime returns the InUptime field value if set, zero value otherwise.
func (o *Check) GetInUptime() bool {
	if o == nil || IsNil(o.InUptime) {
		var ret bool
		return ret
	}
	return *o.InUptime
}

// GetInUptimeOk returns a tuple with the InUptime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Check) GetInUptimeOk() (*bool, bool) {
	if o == nil || IsNil(o.InUptime) {
		return nil, false
	}
	return o.InUptime, true
}

// HasInUptime returns a boolean if a field has been set.
func (o *Check) HasInUptime() bool {
	if o != nil && !IsNil(o.InUptime) {
		return true
	}

	return false
}

// SetInUptime gets a reference to the given bool and assigns it to the InUptime field.
func (o *Check) SetInUptime(v bool) {
	o.InUptime = &v
}

// GetLastBoxStats returns the LastBoxStats field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Check) GetLastBoxStats() string {
	if o == nil || IsNil(o.LastBoxStats.Get()) {
		var ret string
		return ret
	}
	return *o.LastBoxStats.Get()
}

// GetLastBoxStatsOk returns a tuple with the LastBoxStats field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Check) GetLastBoxStatsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastBoxStats.Get(), o.LastBoxStats.IsSet()
}

// HasLastBoxStats returns a boolean if a field has been set.
func (o *Check) HasLastBoxStats() bool {
	if o != nil && o.LastBoxStats.IsSet() {
		return true
	}

	return false
}

// SetLastBoxStats gets a reference to the given NullableString and assigns it to the LastBoxStats field.
func (o *Check) SetLastBoxStats(v string) {
	o.LastBoxStats.Set(&v)
}
// SetLastBoxStatsNil sets the value for LastBoxStats to be an explicit nil
func (o *Check) SetLastBoxStatsNil() {
	o.LastBoxStats.Set(nil)
}

// UnsetLastBoxStats ensures that no value is present for LastBoxStats, not even an explicit nil
func (o *Check) UnsetLastBoxStats() {
	o.LastBoxStats.Unset()
}

// GetLastCheckStatus returns the LastCheckStatus field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Check) GetLastCheckStatus() string {
	if o == nil || IsNil(o.LastCheckStatus.Get()) {
		var ret string
		return ret
	}
	return *o.LastCheckStatus.Get()
}

// GetLastCheckStatusOk returns a tuple with the LastCheckStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Check) GetLastCheckStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastCheckStatus.Get(), o.LastCheckStatus.IsSet()
}

// HasLastCheckStatus returns a boolean if a field has been set.
func (o *Check) HasLastCheckStatus() bool {
	if o != nil && o.LastCheckStatus.IsSet() {
		return true
	}

	return false
}

// SetLastCheckStatus gets a reference to the given NullableString and assigns it to the LastCheckStatus field.
func (o *Check) SetLastCheckStatus(v string) {
	o.LastCheckStatus.Set(&v)
}
// SetLastCheckStatusNil sets the value for LastCheckStatus to be an explicit nil
func (o *Check) SetLastCheckStatusNil() {
	o.LastCheckStatus.Set(nil)
}

// UnsetLastCheckStatus ensures that no value is present for LastCheckStatus, not even an explicit nil
func (o *Check) UnsetLastCheckStatus() {
	o.LastCheckStatus.Unset()
}

// GetLastError returns the LastError field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Check) GetLastError() string {
	if o == nil || IsNil(o.LastError.Get()) {
		var ret string
		return ret
	}
	return *o.LastError.Get()
}

// GetLastErrorOk returns a tuple with the LastError field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Check) GetLastErrorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastError.Get(), o.LastError.IsSet()
}

// HasLastError returns a boolean if a field has been set.
func (o *Check) HasLastError() bool {
	if o != nil && o.LastError.IsSet() {
		return true
	}

	return false
}

// SetLastError gets a reference to the given NullableString and assigns it to the LastError field.
func (o *Check) SetLastError(v string) {
	o.LastError.Set(&v)
}
// SetLastErrorNil sets the value for LastError to be an explicit nil
func (o *Check) SetLastErrorNil() {
	o.LastError.Set(nil)
}

// UnsetLastError ensures that no value is present for LastError, not even an explicit nil
func (o *Check) UnsetLastError() {
	o.LastError.Unset()
}

// GetLastErrorDate returns the LastErrorDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Check) GetLastErrorDate() time.Time {
	if o == nil || IsNil(o.LastErrorDate.Get()) {
		var ret time.Time
		return ret
	}
	return *o.LastErrorDate.Get()
}

// GetLastErrorDateOk returns a tuple with the LastErrorDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Check) GetLastErrorDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastErrorDate.Get(), o.LastErrorDate.IsSet()
}

// HasLastErrorDate returns a boolean if a field has been set.
func (o *Check) HasLastErrorDate() bool {
	if o != nil && o.LastErrorDate.IsSet() {
		return true
	}

	return false
}

// SetLastErrorDate gets a reference to the given NullableTime and assigns it to the LastErrorDate field.
func (o *Check) SetLastErrorDate(v time.Time) {
	o.LastErrorDate.Set(&v)
}
// SetLastErrorDateNil sets the value for LastErrorDate to be an explicit nil
func (o *Check) SetLastErrorDateNil() {
	o.LastErrorDate.Set(nil)
}

// UnsetLastErrorDate ensures that no value is present for LastErrorDate, not even an explicit nil
func (o *Check) UnsetLastErrorDate() {
	o.LastErrorDate.Unset()
}

// GetLastMessage returns the LastMessage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Check) GetLastMessage() string {
	if o == nil || IsNil(o.LastMessage.Get()) {
		var ret string
		return ret
	}
	return *o.LastMessage.Get()
}

// GetLastMessageOk returns a tuple with the LastMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Check) GetLastMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastMessage.Get(), o.LastMessage.IsSet()
}

// HasLastMessage returns a boolean if a field has been set.
func (o *Check) HasLastMessage() bool {
	if o != nil && o.LastMessage.IsSet() {
		return true
	}

	return false
}

// SetLastMessage gets a reference to the given NullableString and assigns it to the LastMessage field.
func (o *Check) SetLastMessage(v string) {
	o.LastMessage.Set(&v)
}
// SetLastMessageNil sets the value for LastMessage to be an explicit nil
func (o *Check) SetLastMessageNil() {
	o.LastMessage.Set(nil)
}

// UnsetLastMessage ensures that no value is present for LastMessage, not even an explicit nil
func (o *Check) UnsetLastMessage() {
	o.LastMessage.Unset()
}

// GetLastMetric returns the LastMetric field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Check) GetLastMetric() string {
	if o == nil || IsNil(o.LastMetric.Get()) {
		var ret string
		return ret
	}
	return *o.LastMetric.Get()
}

// GetLastMetricOk returns a tuple with the LastMetric field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Check) GetLastMetricOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastMetric.Get(), o.LastMetric.IsSet()
}

// HasLastMetric returns a boolean if a field has been set.
func (o *Check) HasLastMetric() bool {
	if o != nil && o.LastMetric.IsSet() {
		return true
	}

	return false
}

// SetLastMetric gets a reference to the given NullableString and assigns it to the LastMetric field.
func (o *Check) SetLastMetric(v string) {
	o.LastMetric.Set(&v)
}
// SetLastMetricNil sets the value for LastMetric to be an explicit nil
func (o *Check) SetLastMetricNil() {
	o.LastMetric.Set(nil)
}

// UnsetLastMetric ensures that no value is present for LastMetric, not even an explicit nil
func (o *Check) UnsetLastMetric() {
	o.LastMetric.Unset()
}

// GetLastRunDate returns the LastRunDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Check) GetLastRunDate() time.Time {
	if o == nil || IsNil(o.LastRunDate.Get()) {
		var ret time.Time
		return ret
	}
	return *o.LastRunDate.Get()
}

// GetLastRunDateOk returns a tuple with the LastRunDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Check) GetLastRunDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastRunDate.Get(), o.LastRunDate.IsSet()
}

// HasLastRunDate returns a boolean if a field has been set.
func (o *Check) HasLastRunDate() bool {
	if o != nil && o.LastRunDate.IsSet() {
		return true
	}

	return false
}

// SetLastRunDate gets a reference to the given NullableTime and assigns it to the LastRunDate field.
func (o *Check) SetLastRunDate(v time.Time) {
	o.LastRunDate.Set(&v)
}
// SetLastRunDateNil sets the value for LastRunDate to be an explicit nil
func (o *Check) SetLastRunDateNil() {
	o.LastRunDate.Set(nil)
}

// UnsetLastRunDate ensures that no value is present for LastRunDate, not even an explicit nil
func (o *Check) UnsetLastRunDate() {
	o.LastRunDate.Unset()
}

// GetLastStats returns the LastStats field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Check) GetLastStats() string {
	if o == nil || IsNil(o.LastStats.Get()) {
		var ret string
		return ret
	}
	return *o.LastStats.Get()
}

// GetLastStatsOk returns a tuple with the LastStats field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Check) GetLastStatsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastStats.Get(), o.LastStats.IsSet()
}

// HasLastStats returns a boolean if a field has been set.
func (o *Check) HasLastStats() bool {
	if o != nil && o.LastStats.IsSet() {
		return true
	}

	return false
}

// SetLastStats gets a reference to the given NullableString and assigns it to the LastStats field.
func (o *Check) SetLastStats(v string) {
	o.LastStats.Set(&v)
}
// SetLastStatsNil sets the value for LastStats to be an explicit nil
func (o *Check) SetLastStatsNil() {
	o.LastStats.Set(nil)
}

// UnsetLastStats ensures that no value is present for LastStats, not even an explicit nil
func (o *Check) UnsetLastStats() {
	o.LastStats.Unset()
}

// GetLastSuccessDate returns the LastSuccessDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Check) GetLastSuccessDate() time.Time {
	if o == nil || IsNil(o.LastSuccessDate.Get()) {
		var ret time.Time
		return ret
	}
	return *o.LastSuccessDate.Get()
}

// GetLastSuccessDateOk returns a tuple with the LastSuccessDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Check) GetLastSuccessDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastSuccessDate.Get(), o.LastSuccessDate.IsSet()
}

// HasLastSuccessDate returns a boolean if a field has been set.
func (o *Check) HasLastSuccessDate() bool {
	if o != nil && o.LastSuccessDate.IsSet() {
		return true
	}

	return false
}

// SetLastSuccessDate gets a reference to the given NullableTime and assigns it to the LastSuccessDate field.
func (o *Check) SetLastSuccessDate(v time.Time) {
	o.LastSuccessDate.Set(&v)
}
// SetLastSuccessDateNil sets the value for LastSuccessDate to be an explicit nil
func (o *Check) SetLastSuccessDateNil() {
	o.LastSuccessDate.Set(nil)
}

// UnsetLastSuccessDate ensures that no value is present for LastSuccessDate, not even an explicit nil
func (o *Check) UnsetLastSuccessDate() {
	o.LastSuccessDate.Unset()
}

// GetLastTimer returns the LastTimer field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Check) GetLastTimer() int64 {
	if o == nil || IsNil(o.LastTimer.Get()) {
		var ret int64
		return ret
	}
	return *o.LastTimer.Get()
}

// GetLastTimerOk returns a tuple with the LastTimer field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Check) GetLastTimerOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastTimer.Get(), o.LastTimer.IsSet()
}

// HasLastTimer returns a boolean if a field has been set.
func (o *Check) HasLastTimer() bool {
	if o != nil && o.LastTimer.IsSet() {
		return true
	}

	return false
}

// SetLastTimer gets a reference to the given NullableInt64 and assigns it to the LastTimer field.
func (o *Check) SetLastTimer(v int64) {
	o.LastTimer.Set(&v)
}
// SetLastTimerNil sets the value for LastTimer to be an explicit nil
func (o *Check) SetLastTimerNil() {
	o.LastTimer.Set(nil)
}

// UnsetLastTimer ensures that no value is present for LastTimer, not even an explicit nil
func (o *Check) UnsetLastTimer() {
	o.LastTimer.Unset()
}

// GetLastUpdated returns the LastUpdated field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Check) GetLastUpdated() time.Time {
	if o == nil || IsNil(o.LastUpdated.Get()) {
		var ret time.Time
		return ret
	}
	return *o.LastUpdated.Get()
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Check) GetLastUpdatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastUpdated.Get(), o.LastUpdated.IsSet()
}

// HasLastUpdated returns a boolean if a field has been set.
func (o *Check) HasLastUpdated() bool {
	if o != nil && o.LastUpdated.IsSet() {
		return true
	}

	return false
}

// SetLastUpdated gets a reference to the given NullableTime and assigns it to the LastUpdated field.
func (o *Check) SetLastUpdated(v time.Time) {
	o.LastUpdated.Set(&v)
}
// SetLastUpdatedNil sets the value for LastUpdated to be an explicit nil
func (o *Check) SetLastUpdatedNil() {
	o.LastUpdated.Set(nil)
}

// UnsetLastUpdated ensures that no value is present for LastUpdated, not even an explicit nil
func (o *Check) UnsetLastUpdated() {
	o.LastUpdated.Unset()
}

// GetLastWarningDate returns the LastWarningDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Check) GetLastWarningDate() time.Time {
	if o == nil || IsNil(o.LastWarningDate.Get()) {
		var ret time.Time
		return ret
	}
	return *o.LastWarningDate.Get()
}

// GetLastWarningDateOk returns a tuple with the LastWarningDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Check) GetLastWarningDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastWarningDate.Get(), o.LastWarningDate.IsSet()
}

// HasLastWarningDate returns a boolean if a field has been set.
func (o *Check) HasLastWarningDate() bool {
	if o != nil && o.LastWarningDate.IsSet() {
		return true
	}

	return false
}

// SetLastWarningDate gets a reference to the given NullableTime and assigns it to the LastWarningDate field.
func (o *Check) SetLastWarningDate(v time.Time) {
	o.LastWarningDate.Set(&v)
}
// SetLastWarningDateNil sets the value for LastWarningDate to be an explicit nil
func (o *Check) SetLastWarningDateNil() {
	o.LastWarningDate.Set(nil)
}

// UnsetLastWarningDate ensures that no value is present for LastWarningDate, not even an explicit nil
func (o *Check) UnsetLastWarningDate() {
	o.LastWarningDate.Unset()
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Check) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Check) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Check) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Check) SetName(v string) {
	o.Name = &v
}

// GetNextRunDate returns the NextRunDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Check) GetNextRunDate() time.Time {
	if o == nil || IsNil(o.NextRunDate.Get()) {
		var ret time.Time
		return ret
	}
	return *o.NextRunDate.Get()
}

// GetNextRunDateOk returns a tuple with the NextRunDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Check) GetNextRunDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.NextRunDate.Get(), o.NextRunDate.IsSet()
}

// HasNextRunDate returns a boolean if a field has been set.
func (o *Check) HasNextRunDate() bool {
	if o != nil && o.NextRunDate.IsSet() {
		return true
	}

	return false
}

// SetNextRunDate gets a reference to the given NullableTime and assigns it to the NextRunDate field.
func (o *Check) SetNextRunDate(v time.Time) {
	o.NextRunDate.Set(&v)
}
// SetNextRunDateNil sets the value for NextRunDate to be an explicit nil
func (o *Check) SetNextRunDateNil() {
	o.NextRunDate.Set(nil)
}

// UnsetNextRunDate ensures that no value is present for NextRunDate, not even an explicit nil
func (o *Check) UnsetNextRunDate() {
	o.NextRunDate.Unset()
}

// GetOutageTime returns the OutageTime field value if set, zero value otherwise.
func (o *Check) GetOutageTime() int64 {
	if o == nil || IsNil(o.OutageTime) {
		var ret int64
		return ret
	}
	return *o.OutageTime
}

// GetOutageTimeOk returns a tuple with the OutageTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Check) GetOutageTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.OutageTime) {
		return nil, false
	}
	return o.OutageTime, true
}

// HasOutageTime returns a boolean if a field has been set.
func (o *Check) HasOutageTime() bool {
	if o != nil && !IsNil(o.OutageTime) {
		return true
	}

	return false
}

// SetOutageTime gets a reference to the given int64 and assigns it to the OutageTime field.
func (o *Check) SetOutageTime(v int64) {
	o.OutageTime = &v
}

// GetSeverity returns the Severity field value if set, zero value otherwise.
func (o *Check) GetSeverity() string {
	if o == nil || IsNil(o.Severity) {
		var ret string
		return ret
	}
	return *o.Severity
}

// GetSeverityOk returns a tuple with the Severity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Check) GetSeverityOk() (*string, bool) {
	if o == nil || IsNil(o.Severity) {
		return nil, false
	}
	return o.Severity, true
}

// HasSeverity returns a boolean if a field has been set.
func (o *Check) HasSeverity() bool {
	if o != nil && !IsNil(o.Severity) {
		return true
	}

	return false
}

// SetSeverity gets a reference to the given string and assigns it to the Severity field.
func (o *Check) SetSeverity(v string) {
	o.Severity = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Check) GetStartDate() time.Time {
	if o == nil || IsNil(o.StartDate.Get()) {
		var ret time.Time
		return ret
	}
	return *o.StartDate.Get()
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Check) GetStartDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.StartDate.Get(), o.StartDate.IsSet()
}

// HasStartDate returns a boolean if a field has been set.
func (o *Check) HasStartDate() bool {
	if o != nil && o.StartDate.IsSet() {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given NullableTime and assigns it to the StartDate field.
func (o *Check) SetStartDate(v time.Time) {
	o.StartDate.Set(&v)
}
// SetStartDateNil sets the value for StartDate to be an explicit nil
func (o *Check) SetStartDateNil() {
	o.StartDate.Set(nil)
}

// UnsetStartDate ensures that no value is present for StartDate, not even an explicit nil
func (o *Check) UnsetStartDate() {
	o.StartDate.Unset()
}

// GetDeleted returns the Deleted field value if set, zero value otherwise.
func (o *Check) GetDeleted() bool {
	if o == nil || IsNil(o.Deleted) {
		var ret bool
		return ret
	}
	return *o.Deleted
}

// GetDeletedOk returns a tuple with the Deleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Check) GetDeletedOk() (*bool, bool) {
	if o == nil || IsNil(o.Deleted) {
		return nil, false
	}
	return o.Deleted, true
}

// HasDeleted returns a boolean if a field has been set.
func (o *Check) HasDeleted() bool {
	if o != nil && !IsNil(o.Deleted) {
		return true
	}

	return false
}

// SetDeleted gets a reference to the given bool and assigns it to the Deleted field.
func (o *Check) SetDeleted(v bool) {
	o.Deleted = &v
}

func (o Check) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Check) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Account) {
		toSerialize["account"] = o.Account
	}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.ApiKey) {
		toSerialize["apiKey"] = o.ApiKey
	}
	if !IsNil(o.Availability) {
		toSerialize["availability"] = o.Availability
	}
	if o.CheckAgent.IsSet() {
		toSerialize["checkAgent"] = o.CheckAgent.Get()
	}
	if o.CheckInterval.IsSet() {
		toSerialize["checkInterval"] = o.CheckInterval.Get()
	}
	if o.CheckSpec.IsSet() {
		toSerialize["checkSpec"] = o.CheckSpec.Get()
	}
	if !IsNil(o.CheckType) {
		toSerialize["checkType"] = o.CheckType
	}
	if !IsNil(o.Config) {
		toSerialize["config"] = o.Config
	}
	if o.Container.IsSet() {
		toSerialize["container"] = o.Container.Get()
	}
	if !IsNil(o.CreateIncident) {
		toSerialize["createIncident"] = o.CreateIncident
	}
	if !IsNil(o.Muted) {
		toSerialize["muted"] = o.Muted
	}
	if o.CreatedBy.IsSet() {
		toSerialize["createdBy"] = o.CreatedBy.Get()
	}
	if !IsNil(o.DateCreated) {
		toSerialize["dateCreated"] = o.DateCreated
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.EndDate.IsSet() {
		toSerialize["endDate"] = o.EndDate.Get()
	}
	if !IsNil(o.Health) {
		toSerialize["health"] = o.Health
	}
	if !IsNil(o.InUptime) {
		toSerialize["inUptime"] = o.InUptime
	}
	if o.LastBoxStats.IsSet() {
		toSerialize["lastBoxStats"] = o.LastBoxStats.Get()
	}
	if o.LastCheckStatus.IsSet() {
		toSerialize["lastCheckStatus"] = o.LastCheckStatus.Get()
	}
	if o.LastError.IsSet() {
		toSerialize["lastError"] = o.LastError.Get()
	}
	if o.LastErrorDate.IsSet() {
		toSerialize["lastErrorDate"] = o.LastErrorDate.Get()
	}
	if o.LastMessage.IsSet() {
		toSerialize["lastMessage"] = o.LastMessage.Get()
	}
	if o.LastMetric.IsSet() {
		toSerialize["lastMetric"] = o.LastMetric.Get()
	}
	if o.LastRunDate.IsSet() {
		toSerialize["lastRunDate"] = o.LastRunDate.Get()
	}
	if o.LastStats.IsSet() {
		toSerialize["lastStats"] = o.LastStats.Get()
	}
	if o.LastSuccessDate.IsSet() {
		toSerialize["lastSuccessDate"] = o.LastSuccessDate.Get()
	}
	if o.LastTimer.IsSet() {
		toSerialize["lastTimer"] = o.LastTimer.Get()
	}
	if o.LastUpdated.IsSet() {
		toSerialize["lastUpdated"] = o.LastUpdated.Get()
	}
	if o.LastWarningDate.IsSet() {
		toSerialize["lastWarningDate"] = o.LastWarningDate.Get()
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if o.NextRunDate.IsSet() {
		toSerialize["nextRunDate"] = o.NextRunDate.Get()
	}
	if !IsNil(o.OutageTime) {
		toSerialize["outageTime"] = o.OutageTime
	}
	if !IsNil(o.Severity) {
		toSerialize["severity"] = o.Severity
	}
	if o.StartDate.IsSet() {
		toSerialize["startDate"] = o.StartDate.Get()
	}
	if !IsNil(o.Deleted) {
		toSerialize["deleted"] = o.Deleted
	}
	return toSerialize, nil
}

type NullableCheck struct {
	value *Check
	isSet bool
}

func (v NullableCheck) Get() *Check {
	return v.value
}

func (v *NullableCheck) Set(val *Check) {
	v.value = val
	v.isSet = true
}

func (v NullableCheck) IsSet() bool {
	return v.isSet
}

func (v *NullableCheck) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCheck(val *Check) *NullableCheck {
	return &NullableCheck{value: val, isSet: true}
}

func (v NullableCheck) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCheck) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


