/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// IntegrationAnsibleConfig struct for IntegrationAnsibleConfig
type IntegrationAnsibleConfig struct {
	Inventory NullableString `json:"inventory,omitempty"`
	DefaultBranch *string `json:"defaultBranch,omitempty"`
	CacheEnabled NullableString `json:"cacheEnabled,omitempty"`
	AnsiblePlaybooks *string `json:"ansiblePlaybooks,omitempty"`
	AnsibleRoles *string `json:"ansibleRoles,omitempty"`
	AnsibleGroupVars *string `json:"ansibleGroupVars,omitempty"`
	AnsibleHostVars *string `json:"ansibleHostVars,omitempty"`
	AnsibleCommandBus *bool `json:"ansibleCommandBus,omitempty"`
	AnsibleVerbose *bool `json:"ansibleVerbose,omitempty"`
	AnsibleGalaxyEnabled *bool `json:"ansibleGalaxyEnabled,omitempty"`
	AnsibleDefaultBranch *string `json:"ansibleDefaultBranch,omitempty"`
}

// NewIntegrationAnsibleConfig instantiates a new IntegrationAnsibleConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIntegrationAnsibleConfig() *IntegrationAnsibleConfig {
	this := IntegrationAnsibleConfig{}
	return &this
}

// NewIntegrationAnsibleConfigWithDefaults instantiates a new IntegrationAnsibleConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIntegrationAnsibleConfigWithDefaults() *IntegrationAnsibleConfig {
	this := IntegrationAnsibleConfig{}
	return &this
}

// GetInventory returns the Inventory field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IntegrationAnsibleConfig) GetInventory() string {
	if o == nil || o.Inventory.Get() == nil {
		var ret string
		return ret
	}
	return *o.Inventory.Get()
}

// GetInventoryOk returns a tuple with the Inventory field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IntegrationAnsibleConfig) GetInventoryOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Inventory.Get(), o.Inventory.IsSet()
}

// HasInventory returns a boolean if a field has been set.
func (o *IntegrationAnsibleConfig) HasInventory() bool {
	if o != nil && o.Inventory.IsSet() {
		return true
	}

	return false
}

// SetInventory gets a reference to the given NullableString and assigns it to the Inventory field.
func (o *IntegrationAnsibleConfig) SetInventory(v string) {
	o.Inventory.Set(&v)
}
// SetInventoryNil sets the value for Inventory to be an explicit nil
func (o *IntegrationAnsibleConfig) SetInventoryNil() {
	o.Inventory.Set(nil)
}

// UnsetInventory ensures that no value is present for Inventory, not even an explicit nil
func (o *IntegrationAnsibleConfig) UnsetInventory() {
	o.Inventory.Unset()
}

// GetDefaultBranch returns the DefaultBranch field value if set, zero value otherwise.
func (o *IntegrationAnsibleConfig) GetDefaultBranch() string {
	if o == nil || o.DefaultBranch == nil {
		var ret string
		return ret
	}
	return *o.DefaultBranch
}

// GetDefaultBranchOk returns a tuple with the DefaultBranch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationAnsibleConfig) GetDefaultBranchOk() (*string, bool) {
	if o == nil || o.DefaultBranch == nil {
		return nil, false
	}
	return o.DefaultBranch, true
}

// HasDefaultBranch returns a boolean if a field has been set.
func (o *IntegrationAnsibleConfig) HasDefaultBranch() bool {
	if o != nil && o.DefaultBranch != nil {
		return true
	}

	return false
}

// SetDefaultBranch gets a reference to the given string and assigns it to the DefaultBranch field.
func (o *IntegrationAnsibleConfig) SetDefaultBranch(v string) {
	o.DefaultBranch = &v
}

// GetCacheEnabled returns the CacheEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IntegrationAnsibleConfig) GetCacheEnabled() string {
	if o == nil || o.CacheEnabled.Get() == nil {
		var ret string
		return ret
	}
	return *o.CacheEnabled.Get()
}

// GetCacheEnabledOk returns a tuple with the CacheEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IntegrationAnsibleConfig) GetCacheEnabledOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CacheEnabled.Get(), o.CacheEnabled.IsSet()
}

// HasCacheEnabled returns a boolean if a field has been set.
func (o *IntegrationAnsibleConfig) HasCacheEnabled() bool {
	if o != nil && o.CacheEnabled.IsSet() {
		return true
	}

	return false
}

// SetCacheEnabled gets a reference to the given NullableString and assigns it to the CacheEnabled field.
func (o *IntegrationAnsibleConfig) SetCacheEnabled(v string) {
	o.CacheEnabled.Set(&v)
}
// SetCacheEnabledNil sets the value for CacheEnabled to be an explicit nil
func (o *IntegrationAnsibleConfig) SetCacheEnabledNil() {
	o.CacheEnabled.Set(nil)
}

// UnsetCacheEnabled ensures that no value is present for CacheEnabled, not even an explicit nil
func (o *IntegrationAnsibleConfig) UnsetCacheEnabled() {
	o.CacheEnabled.Unset()
}

// GetAnsiblePlaybooks returns the AnsiblePlaybooks field value if set, zero value otherwise.
func (o *IntegrationAnsibleConfig) GetAnsiblePlaybooks() string {
	if o == nil || o.AnsiblePlaybooks == nil {
		var ret string
		return ret
	}
	return *o.AnsiblePlaybooks
}

// GetAnsiblePlaybooksOk returns a tuple with the AnsiblePlaybooks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationAnsibleConfig) GetAnsiblePlaybooksOk() (*string, bool) {
	if o == nil || o.AnsiblePlaybooks == nil {
		return nil, false
	}
	return o.AnsiblePlaybooks, true
}

// HasAnsiblePlaybooks returns a boolean if a field has been set.
func (o *IntegrationAnsibleConfig) HasAnsiblePlaybooks() bool {
	if o != nil && o.AnsiblePlaybooks != nil {
		return true
	}

	return false
}

// SetAnsiblePlaybooks gets a reference to the given string and assigns it to the AnsiblePlaybooks field.
func (o *IntegrationAnsibleConfig) SetAnsiblePlaybooks(v string) {
	o.AnsiblePlaybooks = &v
}

// GetAnsibleRoles returns the AnsibleRoles field value if set, zero value otherwise.
func (o *IntegrationAnsibleConfig) GetAnsibleRoles() string {
	if o == nil || o.AnsibleRoles == nil {
		var ret string
		return ret
	}
	return *o.AnsibleRoles
}

// GetAnsibleRolesOk returns a tuple with the AnsibleRoles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationAnsibleConfig) GetAnsibleRolesOk() (*string, bool) {
	if o == nil || o.AnsibleRoles == nil {
		return nil, false
	}
	return o.AnsibleRoles, true
}

// HasAnsibleRoles returns a boolean if a field has been set.
func (o *IntegrationAnsibleConfig) HasAnsibleRoles() bool {
	if o != nil && o.AnsibleRoles != nil {
		return true
	}

	return false
}

// SetAnsibleRoles gets a reference to the given string and assigns it to the AnsibleRoles field.
func (o *IntegrationAnsibleConfig) SetAnsibleRoles(v string) {
	o.AnsibleRoles = &v
}

// GetAnsibleGroupVars returns the AnsibleGroupVars field value if set, zero value otherwise.
func (o *IntegrationAnsibleConfig) GetAnsibleGroupVars() string {
	if o == nil || o.AnsibleGroupVars == nil {
		var ret string
		return ret
	}
	return *o.AnsibleGroupVars
}

// GetAnsibleGroupVarsOk returns a tuple with the AnsibleGroupVars field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationAnsibleConfig) GetAnsibleGroupVarsOk() (*string, bool) {
	if o == nil || o.AnsibleGroupVars == nil {
		return nil, false
	}
	return o.AnsibleGroupVars, true
}

// HasAnsibleGroupVars returns a boolean if a field has been set.
func (o *IntegrationAnsibleConfig) HasAnsibleGroupVars() bool {
	if o != nil && o.AnsibleGroupVars != nil {
		return true
	}

	return false
}

// SetAnsibleGroupVars gets a reference to the given string and assigns it to the AnsibleGroupVars field.
func (o *IntegrationAnsibleConfig) SetAnsibleGroupVars(v string) {
	o.AnsibleGroupVars = &v
}

// GetAnsibleHostVars returns the AnsibleHostVars field value if set, zero value otherwise.
func (o *IntegrationAnsibleConfig) GetAnsibleHostVars() string {
	if o == nil || o.AnsibleHostVars == nil {
		var ret string
		return ret
	}
	return *o.AnsibleHostVars
}

// GetAnsibleHostVarsOk returns a tuple with the AnsibleHostVars field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationAnsibleConfig) GetAnsibleHostVarsOk() (*string, bool) {
	if o == nil || o.AnsibleHostVars == nil {
		return nil, false
	}
	return o.AnsibleHostVars, true
}

// HasAnsibleHostVars returns a boolean if a field has been set.
func (o *IntegrationAnsibleConfig) HasAnsibleHostVars() bool {
	if o != nil && o.AnsibleHostVars != nil {
		return true
	}

	return false
}

// SetAnsibleHostVars gets a reference to the given string and assigns it to the AnsibleHostVars field.
func (o *IntegrationAnsibleConfig) SetAnsibleHostVars(v string) {
	o.AnsibleHostVars = &v
}

// GetAnsibleCommandBus returns the AnsibleCommandBus field value if set, zero value otherwise.
func (o *IntegrationAnsibleConfig) GetAnsibleCommandBus() bool {
	if o == nil || o.AnsibleCommandBus == nil {
		var ret bool
		return ret
	}
	return *o.AnsibleCommandBus
}

// GetAnsibleCommandBusOk returns a tuple with the AnsibleCommandBus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationAnsibleConfig) GetAnsibleCommandBusOk() (*bool, bool) {
	if o == nil || o.AnsibleCommandBus == nil {
		return nil, false
	}
	return o.AnsibleCommandBus, true
}

// HasAnsibleCommandBus returns a boolean if a field has been set.
func (o *IntegrationAnsibleConfig) HasAnsibleCommandBus() bool {
	if o != nil && o.AnsibleCommandBus != nil {
		return true
	}

	return false
}

// SetAnsibleCommandBus gets a reference to the given bool and assigns it to the AnsibleCommandBus field.
func (o *IntegrationAnsibleConfig) SetAnsibleCommandBus(v bool) {
	o.AnsibleCommandBus = &v
}

// GetAnsibleVerbose returns the AnsibleVerbose field value if set, zero value otherwise.
func (o *IntegrationAnsibleConfig) GetAnsibleVerbose() bool {
	if o == nil || o.AnsibleVerbose == nil {
		var ret bool
		return ret
	}
	return *o.AnsibleVerbose
}

// GetAnsibleVerboseOk returns a tuple with the AnsibleVerbose field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationAnsibleConfig) GetAnsibleVerboseOk() (*bool, bool) {
	if o == nil || o.AnsibleVerbose == nil {
		return nil, false
	}
	return o.AnsibleVerbose, true
}

// HasAnsibleVerbose returns a boolean if a field has been set.
func (o *IntegrationAnsibleConfig) HasAnsibleVerbose() bool {
	if o != nil && o.AnsibleVerbose != nil {
		return true
	}

	return false
}

// SetAnsibleVerbose gets a reference to the given bool and assigns it to the AnsibleVerbose field.
func (o *IntegrationAnsibleConfig) SetAnsibleVerbose(v bool) {
	o.AnsibleVerbose = &v
}

// GetAnsibleGalaxyEnabled returns the AnsibleGalaxyEnabled field value if set, zero value otherwise.
func (o *IntegrationAnsibleConfig) GetAnsibleGalaxyEnabled() bool {
	if o == nil || o.AnsibleGalaxyEnabled == nil {
		var ret bool
		return ret
	}
	return *o.AnsibleGalaxyEnabled
}

// GetAnsibleGalaxyEnabledOk returns a tuple with the AnsibleGalaxyEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationAnsibleConfig) GetAnsibleGalaxyEnabledOk() (*bool, bool) {
	if o == nil || o.AnsibleGalaxyEnabled == nil {
		return nil, false
	}
	return o.AnsibleGalaxyEnabled, true
}

// HasAnsibleGalaxyEnabled returns a boolean if a field has been set.
func (o *IntegrationAnsibleConfig) HasAnsibleGalaxyEnabled() bool {
	if o != nil && o.AnsibleGalaxyEnabled != nil {
		return true
	}

	return false
}

// SetAnsibleGalaxyEnabled gets a reference to the given bool and assigns it to the AnsibleGalaxyEnabled field.
func (o *IntegrationAnsibleConfig) SetAnsibleGalaxyEnabled(v bool) {
	o.AnsibleGalaxyEnabled = &v
}

// GetAnsibleDefaultBranch returns the AnsibleDefaultBranch field value if set, zero value otherwise.
func (o *IntegrationAnsibleConfig) GetAnsibleDefaultBranch() string {
	if o == nil || o.AnsibleDefaultBranch == nil {
		var ret string
		return ret
	}
	return *o.AnsibleDefaultBranch
}

// GetAnsibleDefaultBranchOk returns a tuple with the AnsibleDefaultBranch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationAnsibleConfig) GetAnsibleDefaultBranchOk() (*string, bool) {
	if o == nil || o.AnsibleDefaultBranch == nil {
		return nil, false
	}
	return o.AnsibleDefaultBranch, true
}

// HasAnsibleDefaultBranch returns a boolean if a field has been set.
func (o *IntegrationAnsibleConfig) HasAnsibleDefaultBranch() bool {
	if o != nil && o.AnsibleDefaultBranch != nil {
		return true
	}

	return false
}

// SetAnsibleDefaultBranch gets a reference to the given string and assigns it to the AnsibleDefaultBranch field.
func (o *IntegrationAnsibleConfig) SetAnsibleDefaultBranch(v string) {
	o.AnsibleDefaultBranch = &v
}

func (o IntegrationAnsibleConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Inventory.IsSet() {
		toSerialize["inventory"] = o.Inventory.Get()
	}
	if o.DefaultBranch != nil {
		toSerialize["defaultBranch"] = o.DefaultBranch
	}
	if o.CacheEnabled.IsSet() {
		toSerialize["cacheEnabled"] = o.CacheEnabled.Get()
	}
	if o.AnsiblePlaybooks != nil {
		toSerialize["ansiblePlaybooks"] = o.AnsiblePlaybooks
	}
	if o.AnsibleRoles != nil {
		toSerialize["ansibleRoles"] = o.AnsibleRoles
	}
	if o.AnsibleGroupVars != nil {
		toSerialize["ansibleGroupVars"] = o.AnsibleGroupVars
	}
	if o.AnsibleHostVars != nil {
		toSerialize["ansibleHostVars"] = o.AnsibleHostVars
	}
	if o.AnsibleCommandBus != nil {
		toSerialize["ansibleCommandBus"] = o.AnsibleCommandBus
	}
	if o.AnsibleVerbose != nil {
		toSerialize["ansibleVerbose"] = o.AnsibleVerbose
	}
	if o.AnsibleGalaxyEnabled != nil {
		toSerialize["ansibleGalaxyEnabled"] = o.AnsibleGalaxyEnabled
	}
	if o.AnsibleDefaultBranch != nil {
		toSerialize["ansibleDefaultBranch"] = o.AnsibleDefaultBranch
	}
	return json.Marshal(toSerialize)
}

type NullableIntegrationAnsibleConfig struct {
	value *IntegrationAnsibleConfig
	isSet bool
}

func (v NullableIntegrationAnsibleConfig) Get() *IntegrationAnsibleConfig {
	return v.value
}

func (v *NullableIntegrationAnsibleConfig) Set(val *IntegrationAnsibleConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableIntegrationAnsibleConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableIntegrationAnsibleConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntegrationAnsibleConfig(val *IntegrationAnsibleConfig) *NullableIntegrationAnsibleConfig {
	return &NullableIntegrationAnsibleConfig{value: val, isSet: true}
}

func (v NullableIntegrationAnsibleConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntegrationAnsibleConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


