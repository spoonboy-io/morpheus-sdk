/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InstanceCreateVolume struct for InstanceCreateVolume
type InstanceCreateVolume struct {
	// The id for the LV configuration being created.
	Id *int64 `json:"id,omitempty"`
	// If set to false then a non-root LV will be created.
	RootVolume *bool `json:"rootVolume,omitempty"`
	// Name/type of the LV being created.
	Name *string `json:"name,omitempty"`
	// Size of the LV to be created in GBs.  Uses default from service plan.
	Size *int64 `json:"size,omitempty"`
	// Can be used to select pre-existing LV choices from Morpheus.
	SizeId NullableInt64 `json:"sizeId,omitempty"`
	// Identifier for LV type
	StorageType NullableInt64 `json:"storageType,omitempty"`
	// The ID of the specific datastore. Auto selection can be specified as auto or autoCluster (for clusters).
	DatastoreId *AnyOfstringlong `json:"datastoreId,omitempty"`
}

// NewInstanceCreateVolume instantiates a new InstanceCreateVolume object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstanceCreateVolume() *InstanceCreateVolume {
	this := InstanceCreateVolume{}
	var id int64 = -1
	this.Id = &id
	var rootVolume bool = true
	this.RootVolume = &rootVolume
	var name string = "root"
	this.Name = &name
	return &this
}

// NewInstanceCreateVolumeWithDefaults instantiates a new InstanceCreateVolume object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstanceCreateVolumeWithDefaults() *InstanceCreateVolume {
	this := InstanceCreateVolume{}
	var id int64 = -1
	this.Id = &id
	var rootVolume bool = true
	this.RootVolume = &rootVolume
	var name string = "root"
	this.Name = &name
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *InstanceCreateVolume) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceCreateVolume) GetIdOk() (*int64, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *InstanceCreateVolume) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *InstanceCreateVolume) SetId(v int64) {
	o.Id = &v
}

// GetRootVolume returns the RootVolume field value if set, zero value otherwise.
func (o *InstanceCreateVolume) GetRootVolume() bool {
	if o == nil || o.RootVolume == nil {
		var ret bool
		return ret
	}
	return *o.RootVolume
}

// GetRootVolumeOk returns a tuple with the RootVolume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceCreateVolume) GetRootVolumeOk() (*bool, bool) {
	if o == nil || o.RootVolume == nil {
		return nil, false
	}
	return o.RootVolume, true
}

// HasRootVolume returns a boolean if a field has been set.
func (o *InstanceCreateVolume) HasRootVolume() bool {
	if o != nil && o.RootVolume != nil {
		return true
	}

	return false
}

// SetRootVolume gets a reference to the given bool and assigns it to the RootVolume field.
func (o *InstanceCreateVolume) SetRootVolume(v bool) {
	o.RootVolume = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *InstanceCreateVolume) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceCreateVolume) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *InstanceCreateVolume) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *InstanceCreateVolume) SetName(v string) {
	o.Name = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *InstanceCreateVolume) GetSize() int64 {
	if o == nil || o.Size == nil {
		var ret int64
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceCreateVolume) GetSizeOk() (*int64, bool) {
	if o == nil || o.Size == nil {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *InstanceCreateVolume) HasSize() bool {
	if o != nil && o.Size != nil {
		return true
	}

	return false
}

// SetSize gets a reference to the given int64 and assigns it to the Size field.
func (o *InstanceCreateVolume) SetSize(v int64) {
	o.Size = &v
}

// GetSizeId returns the SizeId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InstanceCreateVolume) GetSizeId() int64 {
	if o == nil || o.SizeId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.SizeId.Get()
}

// GetSizeIdOk returns a tuple with the SizeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InstanceCreateVolume) GetSizeIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SizeId.Get(), o.SizeId.IsSet()
}

// HasSizeId returns a boolean if a field has been set.
func (o *InstanceCreateVolume) HasSizeId() bool {
	if o != nil && o.SizeId.IsSet() {
		return true
	}

	return false
}

// SetSizeId gets a reference to the given NullableInt64 and assigns it to the SizeId field.
func (o *InstanceCreateVolume) SetSizeId(v int64) {
	o.SizeId.Set(&v)
}
// SetSizeIdNil sets the value for SizeId to be an explicit nil
func (o *InstanceCreateVolume) SetSizeIdNil() {
	o.SizeId.Set(nil)
}

// UnsetSizeId ensures that no value is present for SizeId, not even an explicit nil
func (o *InstanceCreateVolume) UnsetSizeId() {
	o.SizeId.Unset()
}

// GetStorageType returns the StorageType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InstanceCreateVolume) GetStorageType() int64 {
	if o == nil || o.StorageType.Get() == nil {
		var ret int64
		return ret
	}
	return *o.StorageType.Get()
}

// GetStorageTypeOk returns a tuple with the StorageType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InstanceCreateVolume) GetStorageTypeOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.StorageType.Get(), o.StorageType.IsSet()
}

// HasStorageType returns a boolean if a field has been set.
func (o *InstanceCreateVolume) HasStorageType() bool {
	if o != nil && o.StorageType.IsSet() {
		return true
	}

	return false
}

// SetStorageType gets a reference to the given NullableInt64 and assigns it to the StorageType field.
func (o *InstanceCreateVolume) SetStorageType(v int64) {
	o.StorageType.Set(&v)
}
// SetStorageTypeNil sets the value for StorageType to be an explicit nil
func (o *InstanceCreateVolume) SetStorageTypeNil() {
	o.StorageType.Set(nil)
}

// UnsetStorageType ensures that no value is present for StorageType, not even an explicit nil
func (o *InstanceCreateVolume) UnsetStorageType() {
	o.StorageType.Unset()
}

// GetDatastoreId returns the DatastoreId field value if set, zero value otherwise.
func (o *InstanceCreateVolume) GetDatastoreId() AnyOfstringlong {
	if o == nil || o.DatastoreId == nil {
		var ret AnyOfstringlong
		return ret
	}
	return *o.DatastoreId
}

// GetDatastoreIdOk returns a tuple with the DatastoreId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceCreateVolume) GetDatastoreIdOk() (*AnyOfstringlong, bool) {
	if o == nil || o.DatastoreId == nil {
		return nil, false
	}
	return o.DatastoreId, true
}

// HasDatastoreId returns a boolean if a field has been set.
func (o *InstanceCreateVolume) HasDatastoreId() bool {
	if o != nil && o.DatastoreId != nil {
		return true
	}

	return false
}

// SetDatastoreId gets a reference to the given AnyOfstringlong and assigns it to the DatastoreId field.
func (o *InstanceCreateVolume) SetDatastoreId(v AnyOfstringlong) {
	o.DatastoreId = &v
}

func (o InstanceCreateVolume) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.RootVolume != nil {
		toSerialize["rootVolume"] = o.RootVolume
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Size != nil {
		toSerialize["size"] = o.Size
	}
	if o.SizeId.IsSet() {
		toSerialize["sizeId"] = o.SizeId.Get()
	}
	if o.StorageType.IsSet() {
		toSerialize["storageType"] = o.StorageType.Get()
	}
	if o.DatastoreId != nil {
		toSerialize["datastoreId"] = o.DatastoreId
	}
	return json.Marshal(toSerialize)
}

type NullableInstanceCreateVolume struct {
	value *InstanceCreateVolume
	isSet bool
}

func (v NullableInstanceCreateVolume) Get() *InstanceCreateVolume {
	return v.value
}

func (v *NullableInstanceCreateVolume) Set(val *InstanceCreateVolume) {
	v.value = val
	v.isSet = true
}

func (v NullableInstanceCreateVolume) IsSet() bool {
	return v.isSet
}

func (v *NullableInstanceCreateVolume) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstanceCreateVolume(val *InstanceCreateVolume) *NullableInstanceCreateVolume {
	return &NullableInstanceCreateVolume{value: val, isSet: true}
}

func (v NullableInstanceCreateVolume) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstanceCreateVolume) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


