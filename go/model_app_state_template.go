/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// AppStateTemplate struct for AppStateTemplate
type AppStateTemplate struct {
	Name *string `json:"name,omitempty"`
	Type *string `json:"type,omitempty"`
}

// NewAppStateTemplate instantiates a new AppStateTemplate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppStateTemplate() *AppStateTemplate {
	this := AppStateTemplate{}
	return &this
}

// NewAppStateTemplateWithDefaults instantiates a new AppStateTemplate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppStateTemplateWithDefaults() *AppStateTemplate {
	this := AppStateTemplate{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AppStateTemplate) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppStateTemplate) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AppStateTemplate) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AppStateTemplate) SetName(v string) {
	o.Name = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *AppStateTemplate) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppStateTemplate) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *AppStateTemplate) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *AppStateTemplate) SetType(v string) {
	o.Type = &v
}

func (o AppStateTemplate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableAppStateTemplate struct {
	value *AppStateTemplate
	isSet bool
}

func (v NullableAppStateTemplate) Get() *AppStateTemplate {
	return v.value
}

func (v *NullableAppStateTemplate) Set(val *AppStateTemplate) {
	v.value = val
	v.isSet = true
}

func (v NullableAppStateTemplate) IsSet() bool {
	return v.isSet
}

func (v *NullableAppStateTemplate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppStateTemplate(val *AppStateTemplate) *NullableAppStateTemplate {
	return &NullableAppStateTemplate{value: val, isSet: true}
}

func (v NullableAppStateTemplate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppStateTemplate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


