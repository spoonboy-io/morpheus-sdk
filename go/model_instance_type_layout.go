/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InstanceTypeLayout struct for InstanceTypeLayout
type InstanceTypeLayout struct {
	Id *int64 `json:"id,omitempty"`
	InstanceType *InlineResponse20094Network `json:"instanceType,omitempty"`
	Account NullableInlineResponse20082LoadBalancerInstanceSslCert `json:"account,omitempty"`
	Code *string `json:"code,omitempty"`
	Name *string `json:"name,omitempty"`
	// Array of label strings, can be used for filtering.
	Labels []string `json:"labels,omitempty"`
	InstanceVersion *string `json:"instanceVersion,omitempty"`
	Description NullableString `json:"description,omitempty"`
	Creatable *bool `json:"creatable,omitempty"`
	MemoryRequirement NullableInt64 `json:"memoryRequirement,omitempty"`
	SortOrder *int64 `json:"sortOrder,omitempty"`
	SupportsConvertToManaged NullableBool `json:"supportsConvertToManaged,omitempty"`
	ProvisionType *ProvisionType `json:"provisionType,omitempty"`
	TaskSets []map[string]interface{} `json:"taskSets,omitempty"`
	ContainerTypes *[]ContainerType `json:"containerTypes,omitempty"`
	Mounts []map[string]interface{} `json:"mounts,omitempty"`
	Ports []map[string]interface{} `json:"ports,omitempty"`
	OptionTypes []map[string]interface{} `json:"optionTypes,omitempty"`
	EnvironmentVariables []map[string]interface{} `json:"environmentVariables,omitempty"`
	PriceSets []map[string]interface{} `json:"priceSets,omitempty"`
	SpecTemplates []map[string]interface{} `json:"specTemplates,omitempty"`
	TfvarSecret []map[string]interface{} `json:"tfvarSecret,omitempty"`
	Permissions *InstanceTypeLayoutPermissions `json:"permissions,omitempty"`
}

// NewInstanceTypeLayout instantiates a new InstanceTypeLayout object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstanceTypeLayout() *InstanceTypeLayout {
	this := InstanceTypeLayout{}
	return &this
}

// NewInstanceTypeLayoutWithDefaults instantiates a new InstanceTypeLayout object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstanceTypeLayoutWithDefaults() *InstanceTypeLayout {
	this := InstanceTypeLayout{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *InstanceTypeLayout) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceTypeLayout) GetIdOk() (*int64, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *InstanceTypeLayout) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *InstanceTypeLayout) SetId(v int64) {
	o.Id = &v
}

// GetInstanceType returns the InstanceType field value if set, zero value otherwise.
func (o *InstanceTypeLayout) GetInstanceType() InlineResponse20094Network {
	if o == nil || o.InstanceType == nil {
		var ret InlineResponse20094Network
		return ret
	}
	return *o.InstanceType
}

// GetInstanceTypeOk returns a tuple with the InstanceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceTypeLayout) GetInstanceTypeOk() (*InlineResponse20094Network, bool) {
	if o == nil || o.InstanceType == nil {
		return nil, false
	}
	return o.InstanceType, true
}

// HasInstanceType returns a boolean if a field has been set.
func (o *InstanceTypeLayout) HasInstanceType() bool {
	if o != nil && o.InstanceType != nil {
		return true
	}

	return false
}

// SetInstanceType gets a reference to the given InlineResponse20094Network and assigns it to the InstanceType field.
func (o *InstanceTypeLayout) SetInstanceType(v InlineResponse20094Network) {
	o.InstanceType = &v
}

// GetAccount returns the Account field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InstanceTypeLayout) GetAccount() InlineResponse20082LoadBalancerInstanceSslCert {
	if o == nil || o.Account.Get() == nil {
		var ret InlineResponse20082LoadBalancerInstanceSslCert
		return ret
	}
	return *o.Account.Get()
}

// GetAccountOk returns a tuple with the Account field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InstanceTypeLayout) GetAccountOk() (*InlineResponse20082LoadBalancerInstanceSslCert, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Account.Get(), o.Account.IsSet()
}

// HasAccount returns a boolean if a field has been set.
func (o *InstanceTypeLayout) HasAccount() bool {
	if o != nil && o.Account.IsSet() {
		return true
	}

	return false
}

// SetAccount gets a reference to the given NullableInlineResponse20082LoadBalancerInstanceSslCert and assigns it to the Account field.
func (o *InstanceTypeLayout) SetAccount(v InlineResponse20082LoadBalancerInstanceSslCert) {
	o.Account.Set(&v)
}
// SetAccountNil sets the value for Account to be an explicit nil
func (o *InstanceTypeLayout) SetAccountNil() {
	o.Account.Set(nil)
}

// UnsetAccount ensures that no value is present for Account, not even an explicit nil
func (o *InstanceTypeLayout) UnsetAccount() {
	o.Account.Unset()
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *InstanceTypeLayout) GetCode() string {
	if o == nil || o.Code == nil {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceTypeLayout) GetCodeOk() (*string, bool) {
	if o == nil || o.Code == nil {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *InstanceTypeLayout) HasCode() bool {
	if o != nil && o.Code != nil {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *InstanceTypeLayout) SetCode(v string) {
	o.Code = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *InstanceTypeLayout) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceTypeLayout) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *InstanceTypeLayout) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *InstanceTypeLayout) SetName(v string) {
	o.Name = &v
}

// GetLabels returns the Labels field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InstanceTypeLayout) GetLabels() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InstanceTypeLayout) GetLabelsOk() (*[]string, bool) {
	if o == nil || o.Labels == nil {
		return nil, false
	}
	return &o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *InstanceTypeLayout) HasLabels() bool {
	if o != nil && o.Labels != nil {
		return true
	}

	return false
}

// SetLabels gets a reference to the given []string and assigns it to the Labels field.
func (o *InstanceTypeLayout) SetLabels(v []string) {
	o.Labels = v
}

// GetInstanceVersion returns the InstanceVersion field value if set, zero value otherwise.
func (o *InstanceTypeLayout) GetInstanceVersion() string {
	if o == nil || o.InstanceVersion == nil {
		var ret string
		return ret
	}
	return *o.InstanceVersion
}

// GetInstanceVersionOk returns a tuple with the InstanceVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceTypeLayout) GetInstanceVersionOk() (*string, bool) {
	if o == nil || o.InstanceVersion == nil {
		return nil, false
	}
	return o.InstanceVersion, true
}

// HasInstanceVersion returns a boolean if a field has been set.
func (o *InstanceTypeLayout) HasInstanceVersion() bool {
	if o != nil && o.InstanceVersion != nil {
		return true
	}

	return false
}

// SetInstanceVersion gets a reference to the given string and assigns it to the InstanceVersion field.
func (o *InstanceTypeLayout) SetInstanceVersion(v string) {
	o.InstanceVersion = &v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InstanceTypeLayout) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InstanceTypeLayout) GetDescriptionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *InstanceTypeLayout) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *InstanceTypeLayout) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *InstanceTypeLayout) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *InstanceTypeLayout) UnsetDescription() {
	o.Description.Unset()
}

// GetCreatable returns the Creatable field value if set, zero value otherwise.
func (o *InstanceTypeLayout) GetCreatable() bool {
	if o == nil || o.Creatable == nil {
		var ret bool
		return ret
	}
	return *o.Creatable
}

// GetCreatableOk returns a tuple with the Creatable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceTypeLayout) GetCreatableOk() (*bool, bool) {
	if o == nil || o.Creatable == nil {
		return nil, false
	}
	return o.Creatable, true
}

// HasCreatable returns a boolean if a field has been set.
func (o *InstanceTypeLayout) HasCreatable() bool {
	if o != nil && o.Creatable != nil {
		return true
	}

	return false
}

// SetCreatable gets a reference to the given bool and assigns it to the Creatable field.
func (o *InstanceTypeLayout) SetCreatable(v bool) {
	o.Creatable = &v
}

// GetMemoryRequirement returns the MemoryRequirement field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InstanceTypeLayout) GetMemoryRequirement() int64 {
	if o == nil || o.MemoryRequirement.Get() == nil {
		var ret int64
		return ret
	}
	return *o.MemoryRequirement.Get()
}

// GetMemoryRequirementOk returns a tuple with the MemoryRequirement field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InstanceTypeLayout) GetMemoryRequirementOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MemoryRequirement.Get(), o.MemoryRequirement.IsSet()
}

// HasMemoryRequirement returns a boolean if a field has been set.
func (o *InstanceTypeLayout) HasMemoryRequirement() bool {
	if o != nil && o.MemoryRequirement.IsSet() {
		return true
	}

	return false
}

// SetMemoryRequirement gets a reference to the given NullableInt64 and assigns it to the MemoryRequirement field.
func (o *InstanceTypeLayout) SetMemoryRequirement(v int64) {
	o.MemoryRequirement.Set(&v)
}
// SetMemoryRequirementNil sets the value for MemoryRequirement to be an explicit nil
func (o *InstanceTypeLayout) SetMemoryRequirementNil() {
	o.MemoryRequirement.Set(nil)
}

// UnsetMemoryRequirement ensures that no value is present for MemoryRequirement, not even an explicit nil
func (o *InstanceTypeLayout) UnsetMemoryRequirement() {
	o.MemoryRequirement.Unset()
}

// GetSortOrder returns the SortOrder field value if set, zero value otherwise.
func (o *InstanceTypeLayout) GetSortOrder() int64 {
	if o == nil || o.SortOrder == nil {
		var ret int64
		return ret
	}
	return *o.SortOrder
}

// GetSortOrderOk returns a tuple with the SortOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceTypeLayout) GetSortOrderOk() (*int64, bool) {
	if o == nil || o.SortOrder == nil {
		return nil, false
	}
	return o.SortOrder, true
}

// HasSortOrder returns a boolean if a field has been set.
func (o *InstanceTypeLayout) HasSortOrder() bool {
	if o != nil && o.SortOrder != nil {
		return true
	}

	return false
}

// SetSortOrder gets a reference to the given int64 and assigns it to the SortOrder field.
func (o *InstanceTypeLayout) SetSortOrder(v int64) {
	o.SortOrder = &v
}

// GetSupportsConvertToManaged returns the SupportsConvertToManaged field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InstanceTypeLayout) GetSupportsConvertToManaged() bool {
	if o == nil || o.SupportsConvertToManaged.Get() == nil {
		var ret bool
		return ret
	}
	return *o.SupportsConvertToManaged.Get()
}

// GetSupportsConvertToManagedOk returns a tuple with the SupportsConvertToManaged field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InstanceTypeLayout) GetSupportsConvertToManagedOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SupportsConvertToManaged.Get(), o.SupportsConvertToManaged.IsSet()
}

// HasSupportsConvertToManaged returns a boolean if a field has been set.
func (o *InstanceTypeLayout) HasSupportsConvertToManaged() bool {
	if o != nil && o.SupportsConvertToManaged.IsSet() {
		return true
	}

	return false
}

// SetSupportsConvertToManaged gets a reference to the given NullableBool and assigns it to the SupportsConvertToManaged field.
func (o *InstanceTypeLayout) SetSupportsConvertToManaged(v bool) {
	o.SupportsConvertToManaged.Set(&v)
}
// SetSupportsConvertToManagedNil sets the value for SupportsConvertToManaged to be an explicit nil
func (o *InstanceTypeLayout) SetSupportsConvertToManagedNil() {
	o.SupportsConvertToManaged.Set(nil)
}

// UnsetSupportsConvertToManaged ensures that no value is present for SupportsConvertToManaged, not even an explicit nil
func (o *InstanceTypeLayout) UnsetSupportsConvertToManaged() {
	o.SupportsConvertToManaged.Unset()
}

// GetProvisionType returns the ProvisionType field value if set, zero value otherwise.
func (o *InstanceTypeLayout) GetProvisionType() ProvisionType {
	if o == nil || o.ProvisionType == nil {
		var ret ProvisionType
		return ret
	}
	return *o.ProvisionType
}

// GetProvisionTypeOk returns a tuple with the ProvisionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceTypeLayout) GetProvisionTypeOk() (*ProvisionType, bool) {
	if o == nil || o.ProvisionType == nil {
		return nil, false
	}
	return o.ProvisionType, true
}

// HasProvisionType returns a boolean if a field has been set.
func (o *InstanceTypeLayout) HasProvisionType() bool {
	if o != nil && o.ProvisionType != nil {
		return true
	}

	return false
}

// SetProvisionType gets a reference to the given ProvisionType and assigns it to the ProvisionType field.
func (o *InstanceTypeLayout) SetProvisionType(v ProvisionType) {
	o.ProvisionType = &v
}

// GetTaskSets returns the TaskSets field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InstanceTypeLayout) GetTaskSets() []map[string]interface{} {
	if o == nil  {
		var ret []map[string]interface{}
		return ret
	}
	return o.TaskSets
}

// GetTaskSetsOk returns a tuple with the TaskSets field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InstanceTypeLayout) GetTaskSetsOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.TaskSets == nil {
		return nil, false
	}
	return &o.TaskSets, true
}

// HasTaskSets returns a boolean if a field has been set.
func (o *InstanceTypeLayout) HasTaskSets() bool {
	if o != nil && o.TaskSets != nil {
		return true
	}

	return false
}

// SetTaskSets gets a reference to the given []map[string]interface{} and assigns it to the TaskSets field.
func (o *InstanceTypeLayout) SetTaskSets(v []map[string]interface{}) {
	o.TaskSets = v
}

// GetContainerTypes returns the ContainerTypes field value if set, zero value otherwise.
func (o *InstanceTypeLayout) GetContainerTypes() []ContainerType {
	if o == nil || o.ContainerTypes == nil {
		var ret []ContainerType
		return ret
	}
	return *o.ContainerTypes
}

// GetContainerTypesOk returns a tuple with the ContainerTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceTypeLayout) GetContainerTypesOk() (*[]ContainerType, bool) {
	if o == nil || o.ContainerTypes == nil {
		return nil, false
	}
	return o.ContainerTypes, true
}

// HasContainerTypes returns a boolean if a field has been set.
func (o *InstanceTypeLayout) HasContainerTypes() bool {
	if o != nil && o.ContainerTypes != nil {
		return true
	}

	return false
}

// SetContainerTypes gets a reference to the given []ContainerType and assigns it to the ContainerTypes field.
func (o *InstanceTypeLayout) SetContainerTypes(v []ContainerType) {
	o.ContainerTypes = &v
}

// GetMounts returns the Mounts field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InstanceTypeLayout) GetMounts() []map[string]interface{} {
	if o == nil  {
		var ret []map[string]interface{}
		return ret
	}
	return o.Mounts
}

// GetMountsOk returns a tuple with the Mounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InstanceTypeLayout) GetMountsOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.Mounts == nil {
		return nil, false
	}
	return &o.Mounts, true
}

// HasMounts returns a boolean if a field has been set.
func (o *InstanceTypeLayout) HasMounts() bool {
	if o != nil && o.Mounts != nil {
		return true
	}

	return false
}

// SetMounts gets a reference to the given []map[string]interface{} and assigns it to the Mounts field.
func (o *InstanceTypeLayout) SetMounts(v []map[string]interface{}) {
	o.Mounts = v
}

// GetPorts returns the Ports field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InstanceTypeLayout) GetPorts() []map[string]interface{} {
	if o == nil  {
		var ret []map[string]interface{}
		return ret
	}
	return o.Ports
}

// GetPortsOk returns a tuple with the Ports field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InstanceTypeLayout) GetPortsOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.Ports == nil {
		return nil, false
	}
	return &o.Ports, true
}

// HasPorts returns a boolean if a field has been set.
func (o *InstanceTypeLayout) HasPorts() bool {
	if o != nil && o.Ports != nil {
		return true
	}

	return false
}

// SetPorts gets a reference to the given []map[string]interface{} and assigns it to the Ports field.
func (o *InstanceTypeLayout) SetPorts(v []map[string]interface{}) {
	o.Ports = v
}

// GetOptionTypes returns the OptionTypes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InstanceTypeLayout) GetOptionTypes() []map[string]interface{} {
	if o == nil  {
		var ret []map[string]interface{}
		return ret
	}
	return o.OptionTypes
}

// GetOptionTypesOk returns a tuple with the OptionTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InstanceTypeLayout) GetOptionTypesOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.OptionTypes == nil {
		return nil, false
	}
	return &o.OptionTypes, true
}

// HasOptionTypes returns a boolean if a field has been set.
func (o *InstanceTypeLayout) HasOptionTypes() bool {
	if o != nil && o.OptionTypes != nil {
		return true
	}

	return false
}

// SetOptionTypes gets a reference to the given []map[string]interface{} and assigns it to the OptionTypes field.
func (o *InstanceTypeLayout) SetOptionTypes(v []map[string]interface{}) {
	o.OptionTypes = v
}

// GetEnvironmentVariables returns the EnvironmentVariables field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InstanceTypeLayout) GetEnvironmentVariables() []map[string]interface{} {
	if o == nil  {
		var ret []map[string]interface{}
		return ret
	}
	return o.EnvironmentVariables
}

// GetEnvironmentVariablesOk returns a tuple with the EnvironmentVariables field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InstanceTypeLayout) GetEnvironmentVariablesOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.EnvironmentVariables == nil {
		return nil, false
	}
	return &o.EnvironmentVariables, true
}

// HasEnvironmentVariables returns a boolean if a field has been set.
func (o *InstanceTypeLayout) HasEnvironmentVariables() bool {
	if o != nil && o.EnvironmentVariables != nil {
		return true
	}

	return false
}

// SetEnvironmentVariables gets a reference to the given []map[string]interface{} and assigns it to the EnvironmentVariables field.
func (o *InstanceTypeLayout) SetEnvironmentVariables(v []map[string]interface{}) {
	o.EnvironmentVariables = v
}

// GetPriceSets returns the PriceSets field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InstanceTypeLayout) GetPriceSets() []map[string]interface{} {
	if o == nil  {
		var ret []map[string]interface{}
		return ret
	}
	return o.PriceSets
}

// GetPriceSetsOk returns a tuple with the PriceSets field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InstanceTypeLayout) GetPriceSetsOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.PriceSets == nil {
		return nil, false
	}
	return &o.PriceSets, true
}

// HasPriceSets returns a boolean if a field has been set.
func (o *InstanceTypeLayout) HasPriceSets() bool {
	if o != nil && o.PriceSets != nil {
		return true
	}

	return false
}

// SetPriceSets gets a reference to the given []map[string]interface{} and assigns it to the PriceSets field.
func (o *InstanceTypeLayout) SetPriceSets(v []map[string]interface{}) {
	o.PriceSets = v
}

// GetSpecTemplates returns the SpecTemplates field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InstanceTypeLayout) GetSpecTemplates() []map[string]interface{} {
	if o == nil  {
		var ret []map[string]interface{}
		return ret
	}
	return o.SpecTemplates
}

// GetSpecTemplatesOk returns a tuple with the SpecTemplates field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InstanceTypeLayout) GetSpecTemplatesOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.SpecTemplates == nil {
		return nil, false
	}
	return &o.SpecTemplates, true
}

// HasSpecTemplates returns a boolean if a field has been set.
func (o *InstanceTypeLayout) HasSpecTemplates() bool {
	if o != nil && o.SpecTemplates != nil {
		return true
	}

	return false
}

// SetSpecTemplates gets a reference to the given []map[string]interface{} and assigns it to the SpecTemplates field.
func (o *InstanceTypeLayout) SetSpecTemplates(v []map[string]interface{}) {
	o.SpecTemplates = v
}

// GetTfvarSecret returns the TfvarSecret field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InstanceTypeLayout) GetTfvarSecret() []map[string]interface{} {
	if o == nil  {
		var ret []map[string]interface{}
		return ret
	}
	return o.TfvarSecret
}

// GetTfvarSecretOk returns a tuple with the TfvarSecret field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InstanceTypeLayout) GetTfvarSecretOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.TfvarSecret == nil {
		return nil, false
	}
	return &o.TfvarSecret, true
}

// HasTfvarSecret returns a boolean if a field has been set.
func (o *InstanceTypeLayout) HasTfvarSecret() bool {
	if o != nil && o.TfvarSecret != nil {
		return true
	}

	return false
}

// SetTfvarSecret gets a reference to the given []map[string]interface{} and assigns it to the TfvarSecret field.
func (o *InstanceTypeLayout) SetTfvarSecret(v []map[string]interface{}) {
	o.TfvarSecret = v
}

// GetPermissions returns the Permissions field value if set, zero value otherwise.
func (o *InstanceTypeLayout) GetPermissions() InstanceTypeLayoutPermissions {
	if o == nil || o.Permissions == nil {
		var ret InstanceTypeLayoutPermissions
		return ret
	}
	return *o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceTypeLayout) GetPermissionsOk() (*InstanceTypeLayoutPermissions, bool) {
	if o == nil || o.Permissions == nil {
		return nil, false
	}
	return o.Permissions, true
}

// HasPermissions returns a boolean if a field has been set.
func (o *InstanceTypeLayout) HasPermissions() bool {
	if o != nil && o.Permissions != nil {
		return true
	}

	return false
}

// SetPermissions gets a reference to the given InstanceTypeLayoutPermissions and assigns it to the Permissions field.
func (o *InstanceTypeLayout) SetPermissions(v InstanceTypeLayoutPermissions) {
	o.Permissions = &v
}

func (o InstanceTypeLayout) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.InstanceType != nil {
		toSerialize["instanceType"] = o.InstanceType
	}
	if o.Account.IsSet() {
		toSerialize["account"] = o.Account.Get()
	}
	if o.Code != nil {
		toSerialize["code"] = o.Code
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Labels != nil {
		toSerialize["labels"] = o.Labels
	}
	if o.InstanceVersion != nil {
		toSerialize["instanceVersion"] = o.InstanceVersion
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.Creatable != nil {
		toSerialize["creatable"] = o.Creatable
	}
	if o.MemoryRequirement.IsSet() {
		toSerialize["memoryRequirement"] = o.MemoryRequirement.Get()
	}
	if o.SortOrder != nil {
		toSerialize["sortOrder"] = o.SortOrder
	}
	if o.SupportsConvertToManaged.IsSet() {
		toSerialize["supportsConvertToManaged"] = o.SupportsConvertToManaged.Get()
	}
	if o.ProvisionType != nil {
		toSerialize["provisionType"] = o.ProvisionType
	}
	if o.TaskSets != nil {
		toSerialize["taskSets"] = o.TaskSets
	}
	if o.ContainerTypes != nil {
		toSerialize["containerTypes"] = o.ContainerTypes
	}
	if o.Mounts != nil {
		toSerialize["mounts"] = o.Mounts
	}
	if o.Ports != nil {
		toSerialize["ports"] = o.Ports
	}
	if o.OptionTypes != nil {
		toSerialize["optionTypes"] = o.OptionTypes
	}
	if o.EnvironmentVariables != nil {
		toSerialize["environmentVariables"] = o.EnvironmentVariables
	}
	if o.PriceSets != nil {
		toSerialize["priceSets"] = o.PriceSets
	}
	if o.SpecTemplates != nil {
		toSerialize["specTemplates"] = o.SpecTemplates
	}
	if o.TfvarSecret != nil {
		toSerialize["tfvarSecret"] = o.TfvarSecret
	}
	if o.Permissions != nil {
		toSerialize["permissions"] = o.Permissions
	}
	return json.Marshal(toSerialize)
}

type NullableInstanceTypeLayout struct {
	value *InstanceTypeLayout
	isSet bool
}

func (v NullableInstanceTypeLayout) Get() *InstanceTypeLayout {
	return v.value
}

func (v *NullableInstanceTypeLayout) Set(val *InstanceTypeLayout) {
	v.value = val
	v.isSet = true
}

func (v NullableInstanceTypeLayout) IsSet() bool {
	return v.isSet
}

func (v *NullableInstanceTypeLayout) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstanceTypeLayout(val *InstanceTypeLayout) *NullableInstanceTypeLayout {
	return &NullableInstanceTypeLayout{value: val, isSet: true}
}

func (v NullableInstanceTypeLayout) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstanceTypeLayout) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


