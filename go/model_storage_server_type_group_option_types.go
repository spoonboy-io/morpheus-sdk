/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// StorageServerTypeGroupOptionTypes struct for StorageServerTypeGroupOptionTypes
type StorageServerTypeGroupOptionTypes struct {
	Id *int64 `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Description NullableString `json:"description,omitempty"`
	Code *string `json:"code,omitempty"`
	FieldName *string `json:"fieldName,omitempty"`
	FieldLabel *string `json:"fieldLabel,omitempty"`
	FieldCode *string `json:"fieldCode,omitempty"`
	FieldContext *string `json:"fieldContext,omitempty"`
	FieldGroup *string `json:"fieldGroup,omitempty"`
	FieldClass NullableString `json:"fieldClass,omitempty"`
	FieldAddOn NullableString `json:"fieldAddOn,omitempty"`
	FieldComponent NullableString `json:"fieldComponent,omitempty"`
	FieldInput NullableString `json:"fieldInput,omitempty"`
	PlaceHolder NullableString `json:"placeHolder,omitempty"`
	VerifyPattern NullableString `json:"verifyPattern,omitempty"`
	HelpBlock *string `json:"helpBlock,omitempty"`
	HelpBlockFieldCode NullableString `json:"helpBlockFieldCode,omitempty"`
	DefaultValue NullableString `json:"defaultValue,omitempty"`
	OptionSource NullableString `json:"optionSource,omitempty"`
	OptionSourceType NullableString `json:"optionSourceType,omitempty"`
	OptionList NullableString `json:"optionList,omitempty"`
	Type *string `json:"type,omitempty"`
	Advanced *bool `json:"advanced,omitempty"`
	Required *bool `json:"required,omitempty"`
	ExportMeta *bool `json:"exportMeta,omitempty"`
	Editable *bool `json:"editable,omitempty"`
	Creatable *bool `json:"creatable,omitempty"`
	Config map[string]interface{} `json:"config,omitempty"`
	DisplayOrder *int64 `json:"displayOrder,omitempty"`
	WrapperClass NullableString `json:"wrapperClass,omitempty"`
	Enabled *bool `json:"enabled,omitempty"`
	NoBlank *bool `json:"noBlank,omitempty"`
	DependsOnCode NullableString `json:"dependsOnCode,omitempty"`
	VisibleOnCode NullableString `json:"visibleOnCode,omitempty"`
	RequireOnCode NullableString `json:"requireOnCode,omitempty"`
	ContextualDefault *bool `json:"contextualDefault,omitempty"`
	DisplayValueOnDetails NullableBool `json:"displayValueOnDetails,omitempty"`
	ShowOnCreate NullableBool `json:"showOnCreate,omitempty"`
	ShowOnEdit NullableBool `json:"showOnEdit,omitempty"`
	LocalCredential NullableBool `json:"localCredential,omitempty"`
}

// NewStorageServerTypeGroupOptionTypes instantiates a new StorageServerTypeGroupOptionTypes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStorageServerTypeGroupOptionTypes() *StorageServerTypeGroupOptionTypes {
	this := StorageServerTypeGroupOptionTypes{}
	return &this
}

// NewStorageServerTypeGroupOptionTypesWithDefaults instantiates a new StorageServerTypeGroupOptionTypes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStorageServerTypeGroupOptionTypesWithDefaults() *StorageServerTypeGroupOptionTypes {
	this := StorageServerTypeGroupOptionTypes{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *StorageServerTypeGroupOptionTypes) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageServerTypeGroupOptionTypes) GetIdOk() (*int64, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *StorageServerTypeGroupOptionTypes) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *StorageServerTypeGroupOptionTypes) SetId(v int64) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *StorageServerTypeGroupOptionTypes) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageServerTypeGroupOptionTypes) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *StorageServerTypeGroupOptionTypes) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *StorageServerTypeGroupOptionTypes) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageServerTypeGroupOptionTypes) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageServerTypeGroupOptionTypes) GetDescriptionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *StorageServerTypeGroupOptionTypes) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *StorageServerTypeGroupOptionTypes) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *StorageServerTypeGroupOptionTypes) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *StorageServerTypeGroupOptionTypes) UnsetDescription() {
	o.Description.Unset()
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *StorageServerTypeGroupOptionTypes) GetCode() string {
	if o == nil || o.Code == nil {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageServerTypeGroupOptionTypes) GetCodeOk() (*string, bool) {
	if o == nil || o.Code == nil {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *StorageServerTypeGroupOptionTypes) HasCode() bool {
	if o != nil && o.Code != nil {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *StorageServerTypeGroupOptionTypes) SetCode(v string) {
	o.Code = &v
}

// GetFieldName returns the FieldName field value if set, zero value otherwise.
func (o *StorageServerTypeGroupOptionTypes) GetFieldName() string {
	if o == nil || o.FieldName == nil {
		var ret string
		return ret
	}
	return *o.FieldName
}

// GetFieldNameOk returns a tuple with the FieldName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageServerTypeGroupOptionTypes) GetFieldNameOk() (*string, bool) {
	if o == nil || o.FieldName == nil {
		return nil, false
	}
	return o.FieldName, true
}

// HasFieldName returns a boolean if a field has been set.
func (o *StorageServerTypeGroupOptionTypes) HasFieldName() bool {
	if o != nil && o.FieldName != nil {
		return true
	}

	return false
}

// SetFieldName gets a reference to the given string and assigns it to the FieldName field.
func (o *StorageServerTypeGroupOptionTypes) SetFieldName(v string) {
	o.FieldName = &v
}

// GetFieldLabel returns the FieldLabel field value if set, zero value otherwise.
func (o *StorageServerTypeGroupOptionTypes) GetFieldLabel() string {
	if o == nil || o.FieldLabel == nil {
		var ret string
		return ret
	}
	return *o.FieldLabel
}

// GetFieldLabelOk returns a tuple with the FieldLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageServerTypeGroupOptionTypes) GetFieldLabelOk() (*string, bool) {
	if o == nil || o.FieldLabel == nil {
		return nil, false
	}
	return o.FieldLabel, true
}

// HasFieldLabel returns a boolean if a field has been set.
func (o *StorageServerTypeGroupOptionTypes) HasFieldLabel() bool {
	if o != nil && o.FieldLabel != nil {
		return true
	}

	return false
}

// SetFieldLabel gets a reference to the given string and assigns it to the FieldLabel field.
func (o *StorageServerTypeGroupOptionTypes) SetFieldLabel(v string) {
	o.FieldLabel = &v
}

// GetFieldCode returns the FieldCode field value if set, zero value otherwise.
func (o *StorageServerTypeGroupOptionTypes) GetFieldCode() string {
	if o == nil || o.FieldCode == nil {
		var ret string
		return ret
	}
	return *o.FieldCode
}

// GetFieldCodeOk returns a tuple with the FieldCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageServerTypeGroupOptionTypes) GetFieldCodeOk() (*string, bool) {
	if o == nil || o.FieldCode == nil {
		return nil, false
	}
	return o.FieldCode, true
}

// HasFieldCode returns a boolean if a field has been set.
func (o *StorageServerTypeGroupOptionTypes) HasFieldCode() bool {
	if o != nil && o.FieldCode != nil {
		return true
	}

	return false
}

// SetFieldCode gets a reference to the given string and assigns it to the FieldCode field.
func (o *StorageServerTypeGroupOptionTypes) SetFieldCode(v string) {
	o.FieldCode = &v
}

// GetFieldContext returns the FieldContext field value if set, zero value otherwise.
func (o *StorageServerTypeGroupOptionTypes) GetFieldContext() string {
	if o == nil || o.FieldContext == nil {
		var ret string
		return ret
	}
	return *o.FieldContext
}

// GetFieldContextOk returns a tuple with the FieldContext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageServerTypeGroupOptionTypes) GetFieldContextOk() (*string, bool) {
	if o == nil || o.FieldContext == nil {
		return nil, false
	}
	return o.FieldContext, true
}

// HasFieldContext returns a boolean if a field has been set.
func (o *StorageServerTypeGroupOptionTypes) HasFieldContext() bool {
	if o != nil && o.FieldContext != nil {
		return true
	}

	return false
}

// SetFieldContext gets a reference to the given string and assigns it to the FieldContext field.
func (o *StorageServerTypeGroupOptionTypes) SetFieldContext(v string) {
	o.FieldContext = &v
}

// GetFieldGroup returns the FieldGroup field value if set, zero value otherwise.
func (o *StorageServerTypeGroupOptionTypes) GetFieldGroup() string {
	if o == nil || o.FieldGroup == nil {
		var ret string
		return ret
	}
	return *o.FieldGroup
}

// GetFieldGroupOk returns a tuple with the FieldGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageServerTypeGroupOptionTypes) GetFieldGroupOk() (*string, bool) {
	if o == nil || o.FieldGroup == nil {
		return nil, false
	}
	return o.FieldGroup, true
}

// HasFieldGroup returns a boolean if a field has been set.
func (o *StorageServerTypeGroupOptionTypes) HasFieldGroup() bool {
	if o != nil && o.FieldGroup != nil {
		return true
	}

	return false
}

// SetFieldGroup gets a reference to the given string and assigns it to the FieldGroup field.
func (o *StorageServerTypeGroupOptionTypes) SetFieldGroup(v string) {
	o.FieldGroup = &v
}

// GetFieldClass returns the FieldClass field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageServerTypeGroupOptionTypes) GetFieldClass() string {
	if o == nil || o.FieldClass.Get() == nil {
		var ret string
		return ret
	}
	return *o.FieldClass.Get()
}

// GetFieldClassOk returns a tuple with the FieldClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageServerTypeGroupOptionTypes) GetFieldClassOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FieldClass.Get(), o.FieldClass.IsSet()
}

// HasFieldClass returns a boolean if a field has been set.
func (o *StorageServerTypeGroupOptionTypes) HasFieldClass() bool {
	if o != nil && o.FieldClass.IsSet() {
		return true
	}

	return false
}

// SetFieldClass gets a reference to the given NullableString and assigns it to the FieldClass field.
func (o *StorageServerTypeGroupOptionTypes) SetFieldClass(v string) {
	o.FieldClass.Set(&v)
}
// SetFieldClassNil sets the value for FieldClass to be an explicit nil
func (o *StorageServerTypeGroupOptionTypes) SetFieldClassNil() {
	o.FieldClass.Set(nil)
}

// UnsetFieldClass ensures that no value is present for FieldClass, not even an explicit nil
func (o *StorageServerTypeGroupOptionTypes) UnsetFieldClass() {
	o.FieldClass.Unset()
}

// GetFieldAddOn returns the FieldAddOn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageServerTypeGroupOptionTypes) GetFieldAddOn() string {
	if o == nil || o.FieldAddOn.Get() == nil {
		var ret string
		return ret
	}
	return *o.FieldAddOn.Get()
}

// GetFieldAddOnOk returns a tuple with the FieldAddOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageServerTypeGroupOptionTypes) GetFieldAddOnOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FieldAddOn.Get(), o.FieldAddOn.IsSet()
}

// HasFieldAddOn returns a boolean if a field has been set.
func (o *StorageServerTypeGroupOptionTypes) HasFieldAddOn() bool {
	if o != nil && o.FieldAddOn.IsSet() {
		return true
	}

	return false
}

// SetFieldAddOn gets a reference to the given NullableString and assigns it to the FieldAddOn field.
func (o *StorageServerTypeGroupOptionTypes) SetFieldAddOn(v string) {
	o.FieldAddOn.Set(&v)
}
// SetFieldAddOnNil sets the value for FieldAddOn to be an explicit nil
func (o *StorageServerTypeGroupOptionTypes) SetFieldAddOnNil() {
	o.FieldAddOn.Set(nil)
}

// UnsetFieldAddOn ensures that no value is present for FieldAddOn, not even an explicit nil
func (o *StorageServerTypeGroupOptionTypes) UnsetFieldAddOn() {
	o.FieldAddOn.Unset()
}

// GetFieldComponent returns the FieldComponent field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageServerTypeGroupOptionTypes) GetFieldComponent() string {
	if o == nil || o.FieldComponent.Get() == nil {
		var ret string
		return ret
	}
	return *o.FieldComponent.Get()
}

// GetFieldComponentOk returns a tuple with the FieldComponent field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageServerTypeGroupOptionTypes) GetFieldComponentOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FieldComponent.Get(), o.FieldComponent.IsSet()
}

// HasFieldComponent returns a boolean if a field has been set.
func (o *StorageServerTypeGroupOptionTypes) HasFieldComponent() bool {
	if o != nil && o.FieldComponent.IsSet() {
		return true
	}

	return false
}

// SetFieldComponent gets a reference to the given NullableString and assigns it to the FieldComponent field.
func (o *StorageServerTypeGroupOptionTypes) SetFieldComponent(v string) {
	o.FieldComponent.Set(&v)
}
// SetFieldComponentNil sets the value for FieldComponent to be an explicit nil
func (o *StorageServerTypeGroupOptionTypes) SetFieldComponentNil() {
	o.FieldComponent.Set(nil)
}

// UnsetFieldComponent ensures that no value is present for FieldComponent, not even an explicit nil
func (o *StorageServerTypeGroupOptionTypes) UnsetFieldComponent() {
	o.FieldComponent.Unset()
}

// GetFieldInput returns the FieldInput field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageServerTypeGroupOptionTypes) GetFieldInput() string {
	if o == nil || o.FieldInput.Get() == nil {
		var ret string
		return ret
	}
	return *o.FieldInput.Get()
}

// GetFieldInputOk returns a tuple with the FieldInput field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageServerTypeGroupOptionTypes) GetFieldInputOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FieldInput.Get(), o.FieldInput.IsSet()
}

// HasFieldInput returns a boolean if a field has been set.
func (o *StorageServerTypeGroupOptionTypes) HasFieldInput() bool {
	if o != nil && o.FieldInput.IsSet() {
		return true
	}

	return false
}

// SetFieldInput gets a reference to the given NullableString and assigns it to the FieldInput field.
func (o *StorageServerTypeGroupOptionTypes) SetFieldInput(v string) {
	o.FieldInput.Set(&v)
}
// SetFieldInputNil sets the value for FieldInput to be an explicit nil
func (o *StorageServerTypeGroupOptionTypes) SetFieldInputNil() {
	o.FieldInput.Set(nil)
}

// UnsetFieldInput ensures that no value is present for FieldInput, not even an explicit nil
func (o *StorageServerTypeGroupOptionTypes) UnsetFieldInput() {
	o.FieldInput.Unset()
}

// GetPlaceHolder returns the PlaceHolder field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageServerTypeGroupOptionTypes) GetPlaceHolder() string {
	if o == nil || o.PlaceHolder.Get() == nil {
		var ret string
		return ret
	}
	return *o.PlaceHolder.Get()
}

// GetPlaceHolderOk returns a tuple with the PlaceHolder field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageServerTypeGroupOptionTypes) GetPlaceHolderOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PlaceHolder.Get(), o.PlaceHolder.IsSet()
}

// HasPlaceHolder returns a boolean if a field has been set.
func (o *StorageServerTypeGroupOptionTypes) HasPlaceHolder() bool {
	if o != nil && o.PlaceHolder.IsSet() {
		return true
	}

	return false
}

// SetPlaceHolder gets a reference to the given NullableString and assigns it to the PlaceHolder field.
func (o *StorageServerTypeGroupOptionTypes) SetPlaceHolder(v string) {
	o.PlaceHolder.Set(&v)
}
// SetPlaceHolderNil sets the value for PlaceHolder to be an explicit nil
func (o *StorageServerTypeGroupOptionTypes) SetPlaceHolderNil() {
	o.PlaceHolder.Set(nil)
}

// UnsetPlaceHolder ensures that no value is present for PlaceHolder, not even an explicit nil
func (o *StorageServerTypeGroupOptionTypes) UnsetPlaceHolder() {
	o.PlaceHolder.Unset()
}

// GetVerifyPattern returns the VerifyPattern field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageServerTypeGroupOptionTypes) GetVerifyPattern() string {
	if o == nil || o.VerifyPattern.Get() == nil {
		var ret string
		return ret
	}
	return *o.VerifyPattern.Get()
}

// GetVerifyPatternOk returns a tuple with the VerifyPattern field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageServerTypeGroupOptionTypes) GetVerifyPatternOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.VerifyPattern.Get(), o.VerifyPattern.IsSet()
}

// HasVerifyPattern returns a boolean if a field has been set.
func (o *StorageServerTypeGroupOptionTypes) HasVerifyPattern() bool {
	if o != nil && o.VerifyPattern.IsSet() {
		return true
	}

	return false
}

// SetVerifyPattern gets a reference to the given NullableString and assigns it to the VerifyPattern field.
func (o *StorageServerTypeGroupOptionTypes) SetVerifyPattern(v string) {
	o.VerifyPattern.Set(&v)
}
// SetVerifyPatternNil sets the value for VerifyPattern to be an explicit nil
func (o *StorageServerTypeGroupOptionTypes) SetVerifyPatternNil() {
	o.VerifyPattern.Set(nil)
}

// UnsetVerifyPattern ensures that no value is present for VerifyPattern, not even an explicit nil
func (o *StorageServerTypeGroupOptionTypes) UnsetVerifyPattern() {
	o.VerifyPattern.Unset()
}

// GetHelpBlock returns the HelpBlock field value if set, zero value otherwise.
func (o *StorageServerTypeGroupOptionTypes) GetHelpBlock() string {
	if o == nil || o.HelpBlock == nil {
		var ret string
		return ret
	}
	return *o.HelpBlock
}

// GetHelpBlockOk returns a tuple with the HelpBlock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageServerTypeGroupOptionTypes) GetHelpBlockOk() (*string, bool) {
	if o == nil || o.HelpBlock == nil {
		return nil, false
	}
	return o.HelpBlock, true
}

// HasHelpBlock returns a boolean if a field has been set.
func (o *StorageServerTypeGroupOptionTypes) HasHelpBlock() bool {
	if o != nil && o.HelpBlock != nil {
		return true
	}

	return false
}

// SetHelpBlock gets a reference to the given string and assigns it to the HelpBlock field.
func (o *StorageServerTypeGroupOptionTypes) SetHelpBlock(v string) {
	o.HelpBlock = &v
}

// GetHelpBlockFieldCode returns the HelpBlockFieldCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageServerTypeGroupOptionTypes) GetHelpBlockFieldCode() string {
	if o == nil || o.HelpBlockFieldCode.Get() == nil {
		var ret string
		return ret
	}
	return *o.HelpBlockFieldCode.Get()
}

// GetHelpBlockFieldCodeOk returns a tuple with the HelpBlockFieldCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageServerTypeGroupOptionTypes) GetHelpBlockFieldCodeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.HelpBlockFieldCode.Get(), o.HelpBlockFieldCode.IsSet()
}

// HasHelpBlockFieldCode returns a boolean if a field has been set.
func (o *StorageServerTypeGroupOptionTypes) HasHelpBlockFieldCode() bool {
	if o != nil && o.HelpBlockFieldCode.IsSet() {
		return true
	}

	return false
}

// SetHelpBlockFieldCode gets a reference to the given NullableString and assigns it to the HelpBlockFieldCode field.
func (o *StorageServerTypeGroupOptionTypes) SetHelpBlockFieldCode(v string) {
	o.HelpBlockFieldCode.Set(&v)
}
// SetHelpBlockFieldCodeNil sets the value for HelpBlockFieldCode to be an explicit nil
func (o *StorageServerTypeGroupOptionTypes) SetHelpBlockFieldCodeNil() {
	o.HelpBlockFieldCode.Set(nil)
}

// UnsetHelpBlockFieldCode ensures that no value is present for HelpBlockFieldCode, not even an explicit nil
func (o *StorageServerTypeGroupOptionTypes) UnsetHelpBlockFieldCode() {
	o.HelpBlockFieldCode.Unset()
}

// GetDefaultValue returns the DefaultValue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageServerTypeGroupOptionTypes) GetDefaultValue() string {
	if o == nil || o.DefaultValue.Get() == nil {
		var ret string
		return ret
	}
	return *o.DefaultValue.Get()
}

// GetDefaultValueOk returns a tuple with the DefaultValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageServerTypeGroupOptionTypes) GetDefaultValueOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DefaultValue.Get(), o.DefaultValue.IsSet()
}

// HasDefaultValue returns a boolean if a field has been set.
func (o *StorageServerTypeGroupOptionTypes) HasDefaultValue() bool {
	if o != nil && o.DefaultValue.IsSet() {
		return true
	}

	return false
}

// SetDefaultValue gets a reference to the given NullableString and assigns it to the DefaultValue field.
func (o *StorageServerTypeGroupOptionTypes) SetDefaultValue(v string) {
	o.DefaultValue.Set(&v)
}
// SetDefaultValueNil sets the value for DefaultValue to be an explicit nil
func (o *StorageServerTypeGroupOptionTypes) SetDefaultValueNil() {
	o.DefaultValue.Set(nil)
}

// UnsetDefaultValue ensures that no value is present for DefaultValue, not even an explicit nil
func (o *StorageServerTypeGroupOptionTypes) UnsetDefaultValue() {
	o.DefaultValue.Unset()
}

// GetOptionSource returns the OptionSource field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageServerTypeGroupOptionTypes) GetOptionSource() string {
	if o == nil || o.OptionSource.Get() == nil {
		var ret string
		return ret
	}
	return *o.OptionSource.Get()
}

// GetOptionSourceOk returns a tuple with the OptionSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageServerTypeGroupOptionTypes) GetOptionSourceOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.OptionSource.Get(), o.OptionSource.IsSet()
}

// HasOptionSource returns a boolean if a field has been set.
func (o *StorageServerTypeGroupOptionTypes) HasOptionSource() bool {
	if o != nil && o.OptionSource.IsSet() {
		return true
	}

	return false
}

// SetOptionSource gets a reference to the given NullableString and assigns it to the OptionSource field.
func (o *StorageServerTypeGroupOptionTypes) SetOptionSource(v string) {
	o.OptionSource.Set(&v)
}
// SetOptionSourceNil sets the value for OptionSource to be an explicit nil
func (o *StorageServerTypeGroupOptionTypes) SetOptionSourceNil() {
	o.OptionSource.Set(nil)
}

// UnsetOptionSource ensures that no value is present for OptionSource, not even an explicit nil
func (o *StorageServerTypeGroupOptionTypes) UnsetOptionSource() {
	o.OptionSource.Unset()
}

// GetOptionSourceType returns the OptionSourceType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageServerTypeGroupOptionTypes) GetOptionSourceType() string {
	if o == nil || o.OptionSourceType.Get() == nil {
		var ret string
		return ret
	}
	return *o.OptionSourceType.Get()
}

// GetOptionSourceTypeOk returns a tuple with the OptionSourceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageServerTypeGroupOptionTypes) GetOptionSourceTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.OptionSourceType.Get(), o.OptionSourceType.IsSet()
}

// HasOptionSourceType returns a boolean if a field has been set.
func (o *StorageServerTypeGroupOptionTypes) HasOptionSourceType() bool {
	if o != nil && o.OptionSourceType.IsSet() {
		return true
	}

	return false
}

// SetOptionSourceType gets a reference to the given NullableString and assigns it to the OptionSourceType field.
func (o *StorageServerTypeGroupOptionTypes) SetOptionSourceType(v string) {
	o.OptionSourceType.Set(&v)
}
// SetOptionSourceTypeNil sets the value for OptionSourceType to be an explicit nil
func (o *StorageServerTypeGroupOptionTypes) SetOptionSourceTypeNil() {
	o.OptionSourceType.Set(nil)
}

// UnsetOptionSourceType ensures that no value is present for OptionSourceType, not even an explicit nil
func (o *StorageServerTypeGroupOptionTypes) UnsetOptionSourceType() {
	o.OptionSourceType.Unset()
}

// GetOptionList returns the OptionList field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageServerTypeGroupOptionTypes) GetOptionList() string {
	if o == nil || o.OptionList.Get() == nil {
		var ret string
		return ret
	}
	return *o.OptionList.Get()
}

// GetOptionListOk returns a tuple with the OptionList field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageServerTypeGroupOptionTypes) GetOptionListOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.OptionList.Get(), o.OptionList.IsSet()
}

// HasOptionList returns a boolean if a field has been set.
func (o *StorageServerTypeGroupOptionTypes) HasOptionList() bool {
	if o != nil && o.OptionList.IsSet() {
		return true
	}

	return false
}

// SetOptionList gets a reference to the given NullableString and assigns it to the OptionList field.
func (o *StorageServerTypeGroupOptionTypes) SetOptionList(v string) {
	o.OptionList.Set(&v)
}
// SetOptionListNil sets the value for OptionList to be an explicit nil
func (o *StorageServerTypeGroupOptionTypes) SetOptionListNil() {
	o.OptionList.Set(nil)
}

// UnsetOptionList ensures that no value is present for OptionList, not even an explicit nil
func (o *StorageServerTypeGroupOptionTypes) UnsetOptionList() {
	o.OptionList.Unset()
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *StorageServerTypeGroupOptionTypes) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageServerTypeGroupOptionTypes) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *StorageServerTypeGroupOptionTypes) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *StorageServerTypeGroupOptionTypes) SetType(v string) {
	o.Type = &v
}

// GetAdvanced returns the Advanced field value if set, zero value otherwise.
func (o *StorageServerTypeGroupOptionTypes) GetAdvanced() bool {
	if o == nil || o.Advanced == nil {
		var ret bool
		return ret
	}
	return *o.Advanced
}

// GetAdvancedOk returns a tuple with the Advanced field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageServerTypeGroupOptionTypes) GetAdvancedOk() (*bool, bool) {
	if o == nil || o.Advanced == nil {
		return nil, false
	}
	return o.Advanced, true
}

// HasAdvanced returns a boolean if a field has been set.
func (o *StorageServerTypeGroupOptionTypes) HasAdvanced() bool {
	if o != nil && o.Advanced != nil {
		return true
	}

	return false
}

// SetAdvanced gets a reference to the given bool and assigns it to the Advanced field.
func (o *StorageServerTypeGroupOptionTypes) SetAdvanced(v bool) {
	o.Advanced = &v
}

// GetRequired returns the Required field value if set, zero value otherwise.
func (o *StorageServerTypeGroupOptionTypes) GetRequired() bool {
	if o == nil || o.Required == nil {
		var ret bool
		return ret
	}
	return *o.Required
}

// GetRequiredOk returns a tuple with the Required field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageServerTypeGroupOptionTypes) GetRequiredOk() (*bool, bool) {
	if o == nil || o.Required == nil {
		return nil, false
	}
	return o.Required, true
}

// HasRequired returns a boolean if a field has been set.
func (o *StorageServerTypeGroupOptionTypes) HasRequired() bool {
	if o != nil && o.Required != nil {
		return true
	}

	return false
}

// SetRequired gets a reference to the given bool and assigns it to the Required field.
func (o *StorageServerTypeGroupOptionTypes) SetRequired(v bool) {
	o.Required = &v
}

// GetExportMeta returns the ExportMeta field value if set, zero value otherwise.
func (o *StorageServerTypeGroupOptionTypes) GetExportMeta() bool {
	if o == nil || o.ExportMeta == nil {
		var ret bool
		return ret
	}
	return *o.ExportMeta
}

// GetExportMetaOk returns a tuple with the ExportMeta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageServerTypeGroupOptionTypes) GetExportMetaOk() (*bool, bool) {
	if o == nil || o.ExportMeta == nil {
		return nil, false
	}
	return o.ExportMeta, true
}

// HasExportMeta returns a boolean if a field has been set.
func (o *StorageServerTypeGroupOptionTypes) HasExportMeta() bool {
	if o != nil && o.ExportMeta != nil {
		return true
	}

	return false
}

// SetExportMeta gets a reference to the given bool and assigns it to the ExportMeta field.
func (o *StorageServerTypeGroupOptionTypes) SetExportMeta(v bool) {
	o.ExportMeta = &v
}

// GetEditable returns the Editable field value if set, zero value otherwise.
func (o *StorageServerTypeGroupOptionTypes) GetEditable() bool {
	if o == nil || o.Editable == nil {
		var ret bool
		return ret
	}
	return *o.Editable
}

// GetEditableOk returns a tuple with the Editable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageServerTypeGroupOptionTypes) GetEditableOk() (*bool, bool) {
	if o == nil || o.Editable == nil {
		return nil, false
	}
	return o.Editable, true
}

// HasEditable returns a boolean if a field has been set.
func (o *StorageServerTypeGroupOptionTypes) HasEditable() bool {
	if o != nil && o.Editable != nil {
		return true
	}

	return false
}

// SetEditable gets a reference to the given bool and assigns it to the Editable field.
func (o *StorageServerTypeGroupOptionTypes) SetEditable(v bool) {
	o.Editable = &v
}

// GetCreatable returns the Creatable field value if set, zero value otherwise.
func (o *StorageServerTypeGroupOptionTypes) GetCreatable() bool {
	if o == nil || o.Creatable == nil {
		var ret bool
		return ret
	}
	return *o.Creatable
}

// GetCreatableOk returns a tuple with the Creatable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageServerTypeGroupOptionTypes) GetCreatableOk() (*bool, bool) {
	if o == nil || o.Creatable == nil {
		return nil, false
	}
	return o.Creatable, true
}

// HasCreatable returns a boolean if a field has been set.
func (o *StorageServerTypeGroupOptionTypes) HasCreatable() bool {
	if o != nil && o.Creatable != nil {
		return true
	}

	return false
}

// SetCreatable gets a reference to the given bool and assigns it to the Creatable field.
func (o *StorageServerTypeGroupOptionTypes) SetCreatable(v bool) {
	o.Creatable = &v
}

// GetConfig returns the Config field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageServerTypeGroupOptionTypes) GetConfig() map[string]interface{} {
	if o == nil  {
		var ret map[string]interface{}
		return ret
	}
	return o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageServerTypeGroupOptionTypes) GetConfigOk() (*map[string]interface{}, bool) {
	if o == nil || o.Config == nil {
		return nil, false
	}
	return &o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *StorageServerTypeGroupOptionTypes) HasConfig() bool {
	if o != nil && o.Config != nil {
		return true
	}

	return false
}

// SetConfig gets a reference to the given map[string]interface{} and assigns it to the Config field.
func (o *StorageServerTypeGroupOptionTypes) SetConfig(v map[string]interface{}) {
	o.Config = v
}

// GetDisplayOrder returns the DisplayOrder field value if set, zero value otherwise.
func (o *StorageServerTypeGroupOptionTypes) GetDisplayOrder() int64 {
	if o == nil || o.DisplayOrder == nil {
		var ret int64
		return ret
	}
	return *o.DisplayOrder
}

// GetDisplayOrderOk returns a tuple with the DisplayOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageServerTypeGroupOptionTypes) GetDisplayOrderOk() (*int64, bool) {
	if o == nil || o.DisplayOrder == nil {
		return nil, false
	}
	return o.DisplayOrder, true
}

// HasDisplayOrder returns a boolean if a field has been set.
func (o *StorageServerTypeGroupOptionTypes) HasDisplayOrder() bool {
	if o != nil && o.DisplayOrder != nil {
		return true
	}

	return false
}

// SetDisplayOrder gets a reference to the given int64 and assigns it to the DisplayOrder field.
func (o *StorageServerTypeGroupOptionTypes) SetDisplayOrder(v int64) {
	o.DisplayOrder = &v
}

// GetWrapperClass returns the WrapperClass field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageServerTypeGroupOptionTypes) GetWrapperClass() string {
	if o == nil || o.WrapperClass.Get() == nil {
		var ret string
		return ret
	}
	return *o.WrapperClass.Get()
}

// GetWrapperClassOk returns a tuple with the WrapperClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageServerTypeGroupOptionTypes) GetWrapperClassOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.WrapperClass.Get(), o.WrapperClass.IsSet()
}

// HasWrapperClass returns a boolean if a field has been set.
func (o *StorageServerTypeGroupOptionTypes) HasWrapperClass() bool {
	if o != nil && o.WrapperClass.IsSet() {
		return true
	}

	return false
}

// SetWrapperClass gets a reference to the given NullableString and assigns it to the WrapperClass field.
func (o *StorageServerTypeGroupOptionTypes) SetWrapperClass(v string) {
	o.WrapperClass.Set(&v)
}
// SetWrapperClassNil sets the value for WrapperClass to be an explicit nil
func (o *StorageServerTypeGroupOptionTypes) SetWrapperClassNil() {
	o.WrapperClass.Set(nil)
}

// UnsetWrapperClass ensures that no value is present for WrapperClass, not even an explicit nil
func (o *StorageServerTypeGroupOptionTypes) UnsetWrapperClass() {
	o.WrapperClass.Unset()
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *StorageServerTypeGroupOptionTypes) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageServerTypeGroupOptionTypes) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *StorageServerTypeGroupOptionTypes) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *StorageServerTypeGroupOptionTypes) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetNoBlank returns the NoBlank field value if set, zero value otherwise.
func (o *StorageServerTypeGroupOptionTypes) GetNoBlank() bool {
	if o == nil || o.NoBlank == nil {
		var ret bool
		return ret
	}
	return *o.NoBlank
}

// GetNoBlankOk returns a tuple with the NoBlank field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageServerTypeGroupOptionTypes) GetNoBlankOk() (*bool, bool) {
	if o == nil || o.NoBlank == nil {
		return nil, false
	}
	return o.NoBlank, true
}

// HasNoBlank returns a boolean if a field has been set.
func (o *StorageServerTypeGroupOptionTypes) HasNoBlank() bool {
	if o != nil && o.NoBlank != nil {
		return true
	}

	return false
}

// SetNoBlank gets a reference to the given bool and assigns it to the NoBlank field.
func (o *StorageServerTypeGroupOptionTypes) SetNoBlank(v bool) {
	o.NoBlank = &v
}

// GetDependsOnCode returns the DependsOnCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageServerTypeGroupOptionTypes) GetDependsOnCode() string {
	if o == nil || o.DependsOnCode.Get() == nil {
		var ret string
		return ret
	}
	return *o.DependsOnCode.Get()
}

// GetDependsOnCodeOk returns a tuple with the DependsOnCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageServerTypeGroupOptionTypes) GetDependsOnCodeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DependsOnCode.Get(), o.DependsOnCode.IsSet()
}

// HasDependsOnCode returns a boolean if a field has been set.
func (o *StorageServerTypeGroupOptionTypes) HasDependsOnCode() bool {
	if o != nil && o.DependsOnCode.IsSet() {
		return true
	}

	return false
}

// SetDependsOnCode gets a reference to the given NullableString and assigns it to the DependsOnCode field.
func (o *StorageServerTypeGroupOptionTypes) SetDependsOnCode(v string) {
	o.DependsOnCode.Set(&v)
}
// SetDependsOnCodeNil sets the value for DependsOnCode to be an explicit nil
func (o *StorageServerTypeGroupOptionTypes) SetDependsOnCodeNil() {
	o.DependsOnCode.Set(nil)
}

// UnsetDependsOnCode ensures that no value is present for DependsOnCode, not even an explicit nil
func (o *StorageServerTypeGroupOptionTypes) UnsetDependsOnCode() {
	o.DependsOnCode.Unset()
}

// GetVisibleOnCode returns the VisibleOnCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageServerTypeGroupOptionTypes) GetVisibleOnCode() string {
	if o == nil || o.VisibleOnCode.Get() == nil {
		var ret string
		return ret
	}
	return *o.VisibleOnCode.Get()
}

// GetVisibleOnCodeOk returns a tuple with the VisibleOnCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageServerTypeGroupOptionTypes) GetVisibleOnCodeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.VisibleOnCode.Get(), o.VisibleOnCode.IsSet()
}

// HasVisibleOnCode returns a boolean if a field has been set.
func (o *StorageServerTypeGroupOptionTypes) HasVisibleOnCode() bool {
	if o != nil && o.VisibleOnCode.IsSet() {
		return true
	}

	return false
}

// SetVisibleOnCode gets a reference to the given NullableString and assigns it to the VisibleOnCode field.
func (o *StorageServerTypeGroupOptionTypes) SetVisibleOnCode(v string) {
	o.VisibleOnCode.Set(&v)
}
// SetVisibleOnCodeNil sets the value for VisibleOnCode to be an explicit nil
func (o *StorageServerTypeGroupOptionTypes) SetVisibleOnCodeNil() {
	o.VisibleOnCode.Set(nil)
}

// UnsetVisibleOnCode ensures that no value is present for VisibleOnCode, not even an explicit nil
func (o *StorageServerTypeGroupOptionTypes) UnsetVisibleOnCode() {
	o.VisibleOnCode.Unset()
}

// GetRequireOnCode returns the RequireOnCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageServerTypeGroupOptionTypes) GetRequireOnCode() string {
	if o == nil || o.RequireOnCode.Get() == nil {
		var ret string
		return ret
	}
	return *o.RequireOnCode.Get()
}

// GetRequireOnCodeOk returns a tuple with the RequireOnCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageServerTypeGroupOptionTypes) GetRequireOnCodeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RequireOnCode.Get(), o.RequireOnCode.IsSet()
}

// HasRequireOnCode returns a boolean if a field has been set.
func (o *StorageServerTypeGroupOptionTypes) HasRequireOnCode() bool {
	if o != nil && o.RequireOnCode.IsSet() {
		return true
	}

	return false
}

// SetRequireOnCode gets a reference to the given NullableString and assigns it to the RequireOnCode field.
func (o *StorageServerTypeGroupOptionTypes) SetRequireOnCode(v string) {
	o.RequireOnCode.Set(&v)
}
// SetRequireOnCodeNil sets the value for RequireOnCode to be an explicit nil
func (o *StorageServerTypeGroupOptionTypes) SetRequireOnCodeNil() {
	o.RequireOnCode.Set(nil)
}

// UnsetRequireOnCode ensures that no value is present for RequireOnCode, not even an explicit nil
func (o *StorageServerTypeGroupOptionTypes) UnsetRequireOnCode() {
	o.RequireOnCode.Unset()
}

// GetContextualDefault returns the ContextualDefault field value if set, zero value otherwise.
func (o *StorageServerTypeGroupOptionTypes) GetContextualDefault() bool {
	if o == nil || o.ContextualDefault == nil {
		var ret bool
		return ret
	}
	return *o.ContextualDefault
}

// GetContextualDefaultOk returns a tuple with the ContextualDefault field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageServerTypeGroupOptionTypes) GetContextualDefaultOk() (*bool, bool) {
	if o == nil || o.ContextualDefault == nil {
		return nil, false
	}
	return o.ContextualDefault, true
}

// HasContextualDefault returns a boolean if a field has been set.
func (o *StorageServerTypeGroupOptionTypes) HasContextualDefault() bool {
	if o != nil && o.ContextualDefault != nil {
		return true
	}

	return false
}

// SetContextualDefault gets a reference to the given bool and assigns it to the ContextualDefault field.
func (o *StorageServerTypeGroupOptionTypes) SetContextualDefault(v bool) {
	o.ContextualDefault = &v
}

// GetDisplayValueOnDetails returns the DisplayValueOnDetails field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageServerTypeGroupOptionTypes) GetDisplayValueOnDetails() bool {
	if o == nil || o.DisplayValueOnDetails.Get() == nil {
		var ret bool
		return ret
	}
	return *o.DisplayValueOnDetails.Get()
}

// GetDisplayValueOnDetailsOk returns a tuple with the DisplayValueOnDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageServerTypeGroupOptionTypes) GetDisplayValueOnDetailsOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DisplayValueOnDetails.Get(), o.DisplayValueOnDetails.IsSet()
}

// HasDisplayValueOnDetails returns a boolean if a field has been set.
func (o *StorageServerTypeGroupOptionTypes) HasDisplayValueOnDetails() bool {
	if o != nil && o.DisplayValueOnDetails.IsSet() {
		return true
	}

	return false
}

// SetDisplayValueOnDetails gets a reference to the given NullableBool and assigns it to the DisplayValueOnDetails field.
func (o *StorageServerTypeGroupOptionTypes) SetDisplayValueOnDetails(v bool) {
	o.DisplayValueOnDetails.Set(&v)
}
// SetDisplayValueOnDetailsNil sets the value for DisplayValueOnDetails to be an explicit nil
func (o *StorageServerTypeGroupOptionTypes) SetDisplayValueOnDetailsNil() {
	o.DisplayValueOnDetails.Set(nil)
}

// UnsetDisplayValueOnDetails ensures that no value is present for DisplayValueOnDetails, not even an explicit nil
func (o *StorageServerTypeGroupOptionTypes) UnsetDisplayValueOnDetails() {
	o.DisplayValueOnDetails.Unset()
}

// GetShowOnCreate returns the ShowOnCreate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageServerTypeGroupOptionTypes) GetShowOnCreate() bool {
	if o == nil || o.ShowOnCreate.Get() == nil {
		var ret bool
		return ret
	}
	return *o.ShowOnCreate.Get()
}

// GetShowOnCreateOk returns a tuple with the ShowOnCreate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageServerTypeGroupOptionTypes) GetShowOnCreateOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ShowOnCreate.Get(), o.ShowOnCreate.IsSet()
}

// HasShowOnCreate returns a boolean if a field has been set.
func (o *StorageServerTypeGroupOptionTypes) HasShowOnCreate() bool {
	if o != nil && o.ShowOnCreate.IsSet() {
		return true
	}

	return false
}

// SetShowOnCreate gets a reference to the given NullableBool and assigns it to the ShowOnCreate field.
func (o *StorageServerTypeGroupOptionTypes) SetShowOnCreate(v bool) {
	o.ShowOnCreate.Set(&v)
}
// SetShowOnCreateNil sets the value for ShowOnCreate to be an explicit nil
func (o *StorageServerTypeGroupOptionTypes) SetShowOnCreateNil() {
	o.ShowOnCreate.Set(nil)
}

// UnsetShowOnCreate ensures that no value is present for ShowOnCreate, not even an explicit nil
func (o *StorageServerTypeGroupOptionTypes) UnsetShowOnCreate() {
	o.ShowOnCreate.Unset()
}

// GetShowOnEdit returns the ShowOnEdit field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageServerTypeGroupOptionTypes) GetShowOnEdit() bool {
	if o == nil || o.ShowOnEdit.Get() == nil {
		var ret bool
		return ret
	}
	return *o.ShowOnEdit.Get()
}

// GetShowOnEditOk returns a tuple with the ShowOnEdit field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageServerTypeGroupOptionTypes) GetShowOnEditOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ShowOnEdit.Get(), o.ShowOnEdit.IsSet()
}

// HasShowOnEdit returns a boolean if a field has been set.
func (o *StorageServerTypeGroupOptionTypes) HasShowOnEdit() bool {
	if o != nil && o.ShowOnEdit.IsSet() {
		return true
	}

	return false
}

// SetShowOnEdit gets a reference to the given NullableBool and assigns it to the ShowOnEdit field.
func (o *StorageServerTypeGroupOptionTypes) SetShowOnEdit(v bool) {
	o.ShowOnEdit.Set(&v)
}
// SetShowOnEditNil sets the value for ShowOnEdit to be an explicit nil
func (o *StorageServerTypeGroupOptionTypes) SetShowOnEditNil() {
	o.ShowOnEdit.Set(nil)
}

// UnsetShowOnEdit ensures that no value is present for ShowOnEdit, not even an explicit nil
func (o *StorageServerTypeGroupOptionTypes) UnsetShowOnEdit() {
	o.ShowOnEdit.Unset()
}

// GetLocalCredential returns the LocalCredential field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageServerTypeGroupOptionTypes) GetLocalCredential() bool {
	if o == nil || o.LocalCredential.Get() == nil {
		var ret bool
		return ret
	}
	return *o.LocalCredential.Get()
}

// GetLocalCredentialOk returns a tuple with the LocalCredential field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageServerTypeGroupOptionTypes) GetLocalCredentialOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LocalCredential.Get(), o.LocalCredential.IsSet()
}

// HasLocalCredential returns a boolean if a field has been set.
func (o *StorageServerTypeGroupOptionTypes) HasLocalCredential() bool {
	if o != nil && o.LocalCredential.IsSet() {
		return true
	}

	return false
}

// SetLocalCredential gets a reference to the given NullableBool and assigns it to the LocalCredential field.
func (o *StorageServerTypeGroupOptionTypes) SetLocalCredential(v bool) {
	o.LocalCredential.Set(&v)
}
// SetLocalCredentialNil sets the value for LocalCredential to be an explicit nil
func (o *StorageServerTypeGroupOptionTypes) SetLocalCredentialNil() {
	o.LocalCredential.Set(nil)
}

// UnsetLocalCredential ensures that no value is present for LocalCredential, not even an explicit nil
func (o *StorageServerTypeGroupOptionTypes) UnsetLocalCredential() {
	o.LocalCredential.Unset()
}

func (o StorageServerTypeGroupOptionTypes) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.Code != nil {
		toSerialize["code"] = o.Code
	}
	if o.FieldName != nil {
		toSerialize["fieldName"] = o.FieldName
	}
	if o.FieldLabel != nil {
		toSerialize["fieldLabel"] = o.FieldLabel
	}
	if o.FieldCode != nil {
		toSerialize["fieldCode"] = o.FieldCode
	}
	if o.FieldContext != nil {
		toSerialize["fieldContext"] = o.FieldContext
	}
	if o.FieldGroup != nil {
		toSerialize["fieldGroup"] = o.FieldGroup
	}
	if o.FieldClass.IsSet() {
		toSerialize["fieldClass"] = o.FieldClass.Get()
	}
	if o.FieldAddOn.IsSet() {
		toSerialize["fieldAddOn"] = o.FieldAddOn.Get()
	}
	if o.FieldComponent.IsSet() {
		toSerialize["fieldComponent"] = o.FieldComponent.Get()
	}
	if o.FieldInput.IsSet() {
		toSerialize["fieldInput"] = o.FieldInput.Get()
	}
	if o.PlaceHolder.IsSet() {
		toSerialize["placeHolder"] = o.PlaceHolder.Get()
	}
	if o.VerifyPattern.IsSet() {
		toSerialize["verifyPattern"] = o.VerifyPattern.Get()
	}
	if o.HelpBlock != nil {
		toSerialize["helpBlock"] = o.HelpBlock
	}
	if o.HelpBlockFieldCode.IsSet() {
		toSerialize["helpBlockFieldCode"] = o.HelpBlockFieldCode.Get()
	}
	if o.DefaultValue.IsSet() {
		toSerialize["defaultValue"] = o.DefaultValue.Get()
	}
	if o.OptionSource.IsSet() {
		toSerialize["optionSource"] = o.OptionSource.Get()
	}
	if o.OptionSourceType.IsSet() {
		toSerialize["optionSourceType"] = o.OptionSourceType.Get()
	}
	if o.OptionList.IsSet() {
		toSerialize["optionList"] = o.OptionList.Get()
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Advanced != nil {
		toSerialize["advanced"] = o.Advanced
	}
	if o.Required != nil {
		toSerialize["required"] = o.Required
	}
	if o.ExportMeta != nil {
		toSerialize["exportMeta"] = o.ExportMeta
	}
	if o.Editable != nil {
		toSerialize["editable"] = o.Editable
	}
	if o.Creatable != nil {
		toSerialize["creatable"] = o.Creatable
	}
	if o.Config != nil {
		toSerialize["config"] = o.Config
	}
	if o.DisplayOrder != nil {
		toSerialize["displayOrder"] = o.DisplayOrder
	}
	if o.WrapperClass.IsSet() {
		toSerialize["wrapperClass"] = o.WrapperClass.Get()
	}
	if o.Enabled != nil {
		toSerialize["enabled"] = o.Enabled
	}
	if o.NoBlank != nil {
		toSerialize["noBlank"] = o.NoBlank
	}
	if o.DependsOnCode.IsSet() {
		toSerialize["dependsOnCode"] = o.DependsOnCode.Get()
	}
	if o.VisibleOnCode.IsSet() {
		toSerialize["visibleOnCode"] = o.VisibleOnCode.Get()
	}
	if o.RequireOnCode.IsSet() {
		toSerialize["requireOnCode"] = o.RequireOnCode.Get()
	}
	if o.ContextualDefault != nil {
		toSerialize["contextualDefault"] = o.ContextualDefault
	}
	if o.DisplayValueOnDetails.IsSet() {
		toSerialize["displayValueOnDetails"] = o.DisplayValueOnDetails.Get()
	}
	if o.ShowOnCreate.IsSet() {
		toSerialize["showOnCreate"] = o.ShowOnCreate.Get()
	}
	if o.ShowOnEdit.IsSet() {
		toSerialize["showOnEdit"] = o.ShowOnEdit.Get()
	}
	if o.LocalCredential.IsSet() {
		toSerialize["localCredential"] = o.LocalCredential.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableStorageServerTypeGroupOptionTypes struct {
	value *StorageServerTypeGroupOptionTypes
	isSet bool
}

func (v NullableStorageServerTypeGroupOptionTypes) Get() *StorageServerTypeGroupOptionTypes {
	return v.value
}

func (v *NullableStorageServerTypeGroupOptionTypes) Set(val *StorageServerTypeGroupOptionTypes) {
	v.value = val
	v.isSet = true
}

func (v NullableStorageServerTypeGroupOptionTypes) IsSet() bool {
	return v.isSet
}

func (v *NullableStorageServerTypeGroupOptionTypes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStorageServerTypeGroupOptionTypes(val *StorageServerTypeGroupOptionTypes) *NullableStorageServerTypeGroupOptionTypes {
	return &NullableStorageServerTypeGroupOptionTypes{value: val, isSet: true}
}

func (v NullableStorageServerTypeGroupOptionTypes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStorageServerTypeGroupOptionTypes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


