/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// NetworkRoutersUpdate struct for NetworkRoutersUpdate
type NetworkRoutersUpdate struct {
	// Name
	Name *string `json:"name,omitempty"`
	Type *NetworkRoutersUpdateType `json:"type,omitempty"`
	Site *NetworkRoutersUpdateSite `json:"site,omitempty"`
	// Can be used to enable / disable the network router (true, false). Default is on
	Enabled *bool `json:"enabled,omitempty"`
	Zone *NetworkRoutersUpdateZone `json:"zone,omitempty"`
	NetworkServer *NetworkRoutersUpdateNetworkServer `json:"networkServer,omitempty"`
}

// NewNetworkRoutersUpdate instantiates a new NetworkRoutersUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkRoutersUpdate() *NetworkRoutersUpdate {
	this := NetworkRoutersUpdate{}
	return &this
}

// NewNetworkRoutersUpdateWithDefaults instantiates a new NetworkRoutersUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkRoutersUpdateWithDefaults() *NetworkRoutersUpdate {
	this := NetworkRoutersUpdate{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *NetworkRoutersUpdate) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkRoutersUpdate) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *NetworkRoutersUpdate) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *NetworkRoutersUpdate) SetName(v string) {
	o.Name = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *NetworkRoutersUpdate) GetType() NetworkRoutersUpdateType {
	if o == nil || o.Type == nil {
		var ret NetworkRoutersUpdateType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkRoutersUpdate) GetTypeOk() (*NetworkRoutersUpdateType, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *NetworkRoutersUpdate) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given NetworkRoutersUpdateType and assigns it to the Type field.
func (o *NetworkRoutersUpdate) SetType(v NetworkRoutersUpdateType) {
	o.Type = &v
}

// GetSite returns the Site field value if set, zero value otherwise.
func (o *NetworkRoutersUpdate) GetSite() NetworkRoutersUpdateSite {
	if o == nil || o.Site == nil {
		var ret NetworkRoutersUpdateSite
		return ret
	}
	return *o.Site
}

// GetSiteOk returns a tuple with the Site field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkRoutersUpdate) GetSiteOk() (*NetworkRoutersUpdateSite, bool) {
	if o == nil || o.Site == nil {
		return nil, false
	}
	return o.Site, true
}

// HasSite returns a boolean if a field has been set.
func (o *NetworkRoutersUpdate) HasSite() bool {
	if o != nil && o.Site != nil {
		return true
	}

	return false
}

// SetSite gets a reference to the given NetworkRoutersUpdateSite and assigns it to the Site field.
func (o *NetworkRoutersUpdate) SetSite(v NetworkRoutersUpdateSite) {
	o.Site = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *NetworkRoutersUpdate) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkRoutersUpdate) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *NetworkRoutersUpdate) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *NetworkRoutersUpdate) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetZone returns the Zone field value if set, zero value otherwise.
func (o *NetworkRoutersUpdate) GetZone() NetworkRoutersUpdateZone {
	if o == nil || o.Zone == nil {
		var ret NetworkRoutersUpdateZone
		return ret
	}
	return *o.Zone
}

// GetZoneOk returns a tuple with the Zone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkRoutersUpdate) GetZoneOk() (*NetworkRoutersUpdateZone, bool) {
	if o == nil || o.Zone == nil {
		return nil, false
	}
	return o.Zone, true
}

// HasZone returns a boolean if a field has been set.
func (o *NetworkRoutersUpdate) HasZone() bool {
	if o != nil && o.Zone != nil {
		return true
	}

	return false
}

// SetZone gets a reference to the given NetworkRoutersUpdateZone and assigns it to the Zone field.
func (o *NetworkRoutersUpdate) SetZone(v NetworkRoutersUpdateZone) {
	o.Zone = &v
}

// GetNetworkServer returns the NetworkServer field value if set, zero value otherwise.
func (o *NetworkRoutersUpdate) GetNetworkServer() NetworkRoutersUpdateNetworkServer {
	if o == nil || o.NetworkServer == nil {
		var ret NetworkRoutersUpdateNetworkServer
		return ret
	}
	return *o.NetworkServer
}

// GetNetworkServerOk returns a tuple with the NetworkServer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkRoutersUpdate) GetNetworkServerOk() (*NetworkRoutersUpdateNetworkServer, bool) {
	if o == nil || o.NetworkServer == nil {
		return nil, false
	}
	return o.NetworkServer, true
}

// HasNetworkServer returns a boolean if a field has been set.
func (o *NetworkRoutersUpdate) HasNetworkServer() bool {
	if o != nil && o.NetworkServer != nil {
		return true
	}

	return false
}

// SetNetworkServer gets a reference to the given NetworkRoutersUpdateNetworkServer and assigns it to the NetworkServer field.
func (o *NetworkRoutersUpdate) SetNetworkServer(v NetworkRoutersUpdateNetworkServer) {
	o.NetworkServer = &v
}

func (o NetworkRoutersUpdate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Site != nil {
		toSerialize["site"] = o.Site
	}
	if o.Enabled != nil {
		toSerialize["enabled"] = o.Enabled
	}
	if o.Zone != nil {
		toSerialize["zone"] = o.Zone
	}
	if o.NetworkServer != nil {
		toSerialize["networkServer"] = o.NetworkServer
	}
	return json.Marshal(toSerialize)
}

type NullableNetworkRoutersUpdate struct {
	value *NetworkRoutersUpdate
	isSet bool
}

func (v NullableNetworkRoutersUpdate) Get() *NetworkRoutersUpdate {
	return v.value
}

func (v *NullableNetworkRoutersUpdate) Set(val *NetworkRoutersUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkRoutersUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkRoutersUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkRoutersUpdate(val *NetworkRoutersUpdate) *NullableNetworkRoutersUpdate {
	return &NullableNetworkRoutersUpdate{value: val, isSet: true}
}

func (v NullableNetworkRoutersUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkRoutersUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


