/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 6.1.1
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UpdateCatalogItemType200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateCatalogItemType200Response{}

// UpdateCatalogItemType200Response struct for UpdateCatalogItemType200Response
type UpdateCatalogItemType200Response struct {
	Success *bool `json:"success,omitempty"`
	CatalogItemType *CatalogItemType `json:"catalogItemType,omitempty"`
}

// NewUpdateCatalogItemType200Response instantiates a new UpdateCatalogItemType200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateCatalogItemType200Response() *UpdateCatalogItemType200Response {
	this := UpdateCatalogItemType200Response{}
	return &this
}

// NewUpdateCatalogItemType200ResponseWithDefaults instantiates a new UpdateCatalogItemType200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateCatalogItemType200ResponseWithDefaults() *UpdateCatalogItemType200Response {
	this := UpdateCatalogItemType200Response{}
	return &this
}

// GetSuccess returns the Success field value if set, zero value otherwise.
func (o *UpdateCatalogItemType200Response) GetSuccess() bool {
	if o == nil || IsNil(o.Success) {
		var ret bool
		return ret
	}
	return *o.Success
}

// GetSuccessOk returns a tuple with the Success field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateCatalogItemType200Response) GetSuccessOk() (*bool, bool) {
	if o == nil || IsNil(o.Success) {
		return nil, false
	}
	return o.Success, true
}

// HasSuccess returns a boolean if a field has been set.
func (o *UpdateCatalogItemType200Response) HasSuccess() bool {
	if o != nil && !IsNil(o.Success) {
		return true
	}

	return false
}

// SetSuccess gets a reference to the given bool and assigns it to the Success field.
func (o *UpdateCatalogItemType200Response) SetSuccess(v bool) {
	o.Success = &v
}

// GetCatalogItemType returns the CatalogItemType field value if set, zero value otherwise.
func (o *UpdateCatalogItemType200Response) GetCatalogItemType() CatalogItemType {
	if o == nil || IsNil(o.CatalogItemType) {
		var ret CatalogItemType
		return ret
	}
	return *o.CatalogItemType
}

// GetCatalogItemTypeOk returns a tuple with the CatalogItemType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateCatalogItemType200Response) GetCatalogItemTypeOk() (*CatalogItemType, bool) {
	if o == nil || IsNil(o.CatalogItemType) {
		return nil, false
	}
	return o.CatalogItemType, true
}

// HasCatalogItemType returns a boolean if a field has been set.
func (o *UpdateCatalogItemType200Response) HasCatalogItemType() bool {
	if o != nil && !IsNil(o.CatalogItemType) {
		return true
	}

	return false
}

// SetCatalogItemType gets a reference to the given CatalogItemType and assigns it to the CatalogItemType field.
func (o *UpdateCatalogItemType200Response) SetCatalogItemType(v CatalogItemType) {
	o.CatalogItemType = &v
}

func (o UpdateCatalogItemType200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateCatalogItemType200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Success) {
		toSerialize["success"] = o.Success
	}
	if !IsNil(o.CatalogItemType) {
		toSerialize["catalogItemType"] = o.CatalogItemType
	}
	return toSerialize, nil
}

type NullableUpdateCatalogItemType200Response struct {
	value *UpdateCatalogItemType200Response
	isSet bool
}

func (v NullableUpdateCatalogItemType200Response) Get() *UpdateCatalogItemType200Response {
	return v.value
}

func (v *NullableUpdateCatalogItemType200Response) Set(val *UpdateCatalogItemType200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateCatalogItemType200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateCatalogItemType200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateCatalogItemType200Response(val *UpdateCatalogItemType200Response) *NullableUpdateCatalogItemType200Response {
	return &NullableUpdateCatalogItemType200Response{value: val, isSet: true}
}

func (v NullableUpdateCatalogItemType200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateCatalogItemType200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


