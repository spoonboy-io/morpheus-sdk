/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InlineObject123 struct for InlineObject123
type InlineObject123 struct {
	SpecTemplate *SpecTemplateCreate `json:"specTemplate,omitempty"`
}

// NewInlineObject123 instantiates a new InlineObject123 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineObject123() *InlineObject123 {
	this := InlineObject123{}
	return &this
}

// NewInlineObject123WithDefaults instantiates a new InlineObject123 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineObject123WithDefaults() *InlineObject123 {
	this := InlineObject123{}
	return &this
}

// GetSpecTemplate returns the SpecTemplate field value if set, zero value otherwise.
func (o *InlineObject123) GetSpecTemplate() SpecTemplateCreate {
	if o == nil || o.SpecTemplate == nil {
		var ret SpecTemplateCreate
		return ret
	}
	return *o.SpecTemplate
}

// GetSpecTemplateOk returns a tuple with the SpecTemplate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject123) GetSpecTemplateOk() (*SpecTemplateCreate, bool) {
	if o == nil || o.SpecTemplate == nil {
		return nil, false
	}
	return o.SpecTemplate, true
}

// HasSpecTemplate returns a boolean if a field has been set.
func (o *InlineObject123) HasSpecTemplate() bool {
	if o != nil && o.SpecTemplate != nil {
		return true
	}

	return false
}

// SetSpecTemplate gets a reference to the given SpecTemplateCreate and assigns it to the SpecTemplate field.
func (o *InlineObject123) SetSpecTemplate(v SpecTemplateCreate) {
	o.SpecTemplate = &v
}

func (o InlineObject123) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SpecTemplate != nil {
		toSerialize["specTemplate"] = o.SpecTemplate
	}
	return json.Marshal(toSerialize)
}

type NullableInlineObject123 struct {
	value *InlineObject123
	isSet bool
}

func (v NullableInlineObject123) Get() *InlineObject123 {
	return v.value
}

func (v *NullableInlineObject123) Set(val *InlineObject123) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineObject123) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineObject123) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineObject123(val *InlineObject123) *NullableInlineObject123 {
	return &NullableInlineObject123{value: val, isSet: true}
}

func (v NullableInlineObject123) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineObject123) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


