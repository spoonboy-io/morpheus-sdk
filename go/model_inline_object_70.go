/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InlineObject70 struct for InlineObject70
type InlineObject70 struct {
	Version *DeploymentVersionCreate `json:"version,omitempty"`
}

// NewInlineObject70 instantiates a new InlineObject70 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineObject70() *InlineObject70 {
	this := InlineObject70{}
	return &this
}

// NewInlineObject70WithDefaults instantiates a new InlineObject70 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineObject70WithDefaults() *InlineObject70 {
	this := InlineObject70{}
	return &this
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *InlineObject70) GetVersion() DeploymentVersionCreate {
	if o == nil || o.Version == nil {
		var ret DeploymentVersionCreate
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject70) GetVersionOk() (*DeploymentVersionCreate, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *InlineObject70) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given DeploymentVersionCreate and assigns it to the Version field.
func (o *InlineObject70) SetVersion(v DeploymentVersionCreate) {
	o.Version = &v
}

func (o InlineObject70) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	return json.Marshal(toSerialize)
}

type NullableInlineObject70 struct {
	value *InlineObject70
	isSet bool
}

func (v NullableInlineObject70) Get() *InlineObject70 {
	return v.value
}

func (v *NullableInlineObject70) Set(val *InlineObject70) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineObject70) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineObject70) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineObject70(val *InlineObject70) *NullableInlineObject70 {
	return &NullableInlineObject70{value: val, isSet: true}
}

func (v NullableInlineObject70) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineObject70) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


