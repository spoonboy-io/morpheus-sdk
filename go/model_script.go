/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Script struct for Script
type Script struct {
	Id *int64 `json:"id,omitempty"`
	Code *string `json:"code,omitempty"`
	Account NullableString `json:"account,omitempty"`
	Name *string `json:"name,omitempty"`
	Labels []string `json:"labels,omitempty"`
	Category NullableString `json:"category,omitempty"`
	SortOrder *int64 `json:"sortOrder,omitempty"`
	ScriptVersion *string `json:"scriptVersion,omitempty"`
	ScriptPhase *string `json:"scriptPhase,omitempty"`
	ScriptType *string `json:"scriptType,omitempty"`
	Script *string `json:"script,omitempty"`
	ScriptService NullableString `json:"scriptService,omitempty"`
	ScriptMethod NullableString `json:"scriptMethod,omitempty"`
	RunAsUser NullableString `json:"runAsUser,omitempty"`
	RunAsPassword NullableString `json:"runAsPassword,omitempty"`
	SudoUser *bool `json:"sudoUser,omitempty"`
	FailOnError *bool `json:"failOnError,omitempty"`
}

// NewScript instantiates a new Script object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScript() *Script {
	this := Script{}
	return &this
}

// NewScriptWithDefaults instantiates a new Script object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScriptWithDefaults() *Script {
	this := Script{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Script) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Script) GetIdOk() (*int64, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Script) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *Script) SetId(v int64) {
	o.Id = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *Script) GetCode() string {
	if o == nil || o.Code == nil {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Script) GetCodeOk() (*string, bool) {
	if o == nil || o.Code == nil {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *Script) HasCode() bool {
	if o != nil && o.Code != nil {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *Script) SetCode(v string) {
	o.Code = &v
}

// GetAccount returns the Account field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Script) GetAccount() string {
	if o == nil || o.Account.Get() == nil {
		var ret string
		return ret
	}
	return *o.Account.Get()
}

// GetAccountOk returns a tuple with the Account field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Script) GetAccountOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Account.Get(), o.Account.IsSet()
}

// HasAccount returns a boolean if a field has been set.
func (o *Script) HasAccount() bool {
	if o != nil && o.Account.IsSet() {
		return true
	}

	return false
}

// SetAccount gets a reference to the given NullableString and assigns it to the Account field.
func (o *Script) SetAccount(v string) {
	o.Account.Set(&v)
}
// SetAccountNil sets the value for Account to be an explicit nil
func (o *Script) SetAccountNil() {
	o.Account.Set(nil)
}

// UnsetAccount ensures that no value is present for Account, not even an explicit nil
func (o *Script) UnsetAccount() {
	o.Account.Unset()
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Script) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Script) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Script) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Script) SetName(v string) {
	o.Name = &v
}

// GetLabels returns the Labels field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Script) GetLabels() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Script) GetLabelsOk() (*[]string, bool) {
	if o == nil || o.Labels == nil {
		return nil, false
	}
	return &o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *Script) HasLabels() bool {
	if o != nil && o.Labels != nil {
		return true
	}

	return false
}

// SetLabels gets a reference to the given []string and assigns it to the Labels field.
func (o *Script) SetLabels(v []string) {
	o.Labels = v
}

// GetCategory returns the Category field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Script) GetCategory() string {
	if o == nil || o.Category.Get() == nil {
		var ret string
		return ret
	}
	return *o.Category.Get()
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Script) GetCategoryOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Category.Get(), o.Category.IsSet()
}

// HasCategory returns a boolean if a field has been set.
func (o *Script) HasCategory() bool {
	if o != nil && o.Category.IsSet() {
		return true
	}

	return false
}

// SetCategory gets a reference to the given NullableString and assigns it to the Category field.
func (o *Script) SetCategory(v string) {
	o.Category.Set(&v)
}
// SetCategoryNil sets the value for Category to be an explicit nil
func (o *Script) SetCategoryNil() {
	o.Category.Set(nil)
}

// UnsetCategory ensures that no value is present for Category, not even an explicit nil
func (o *Script) UnsetCategory() {
	o.Category.Unset()
}

// GetSortOrder returns the SortOrder field value if set, zero value otherwise.
func (o *Script) GetSortOrder() int64 {
	if o == nil || o.SortOrder == nil {
		var ret int64
		return ret
	}
	return *o.SortOrder
}

// GetSortOrderOk returns a tuple with the SortOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Script) GetSortOrderOk() (*int64, bool) {
	if o == nil || o.SortOrder == nil {
		return nil, false
	}
	return o.SortOrder, true
}

// HasSortOrder returns a boolean if a field has been set.
func (o *Script) HasSortOrder() bool {
	if o != nil && o.SortOrder != nil {
		return true
	}

	return false
}

// SetSortOrder gets a reference to the given int64 and assigns it to the SortOrder field.
func (o *Script) SetSortOrder(v int64) {
	o.SortOrder = &v
}

// GetScriptVersion returns the ScriptVersion field value if set, zero value otherwise.
func (o *Script) GetScriptVersion() string {
	if o == nil || o.ScriptVersion == nil {
		var ret string
		return ret
	}
	return *o.ScriptVersion
}

// GetScriptVersionOk returns a tuple with the ScriptVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Script) GetScriptVersionOk() (*string, bool) {
	if o == nil || o.ScriptVersion == nil {
		return nil, false
	}
	return o.ScriptVersion, true
}

// HasScriptVersion returns a boolean if a field has been set.
func (o *Script) HasScriptVersion() bool {
	if o != nil && o.ScriptVersion != nil {
		return true
	}

	return false
}

// SetScriptVersion gets a reference to the given string and assigns it to the ScriptVersion field.
func (o *Script) SetScriptVersion(v string) {
	o.ScriptVersion = &v
}

// GetScriptPhase returns the ScriptPhase field value if set, zero value otherwise.
func (o *Script) GetScriptPhase() string {
	if o == nil || o.ScriptPhase == nil {
		var ret string
		return ret
	}
	return *o.ScriptPhase
}

// GetScriptPhaseOk returns a tuple with the ScriptPhase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Script) GetScriptPhaseOk() (*string, bool) {
	if o == nil || o.ScriptPhase == nil {
		return nil, false
	}
	return o.ScriptPhase, true
}

// HasScriptPhase returns a boolean if a field has been set.
func (o *Script) HasScriptPhase() bool {
	if o != nil && o.ScriptPhase != nil {
		return true
	}

	return false
}

// SetScriptPhase gets a reference to the given string and assigns it to the ScriptPhase field.
func (o *Script) SetScriptPhase(v string) {
	o.ScriptPhase = &v
}

// GetScriptType returns the ScriptType field value if set, zero value otherwise.
func (o *Script) GetScriptType() string {
	if o == nil || o.ScriptType == nil {
		var ret string
		return ret
	}
	return *o.ScriptType
}

// GetScriptTypeOk returns a tuple with the ScriptType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Script) GetScriptTypeOk() (*string, bool) {
	if o == nil || o.ScriptType == nil {
		return nil, false
	}
	return o.ScriptType, true
}

// HasScriptType returns a boolean if a field has been set.
func (o *Script) HasScriptType() bool {
	if o != nil && o.ScriptType != nil {
		return true
	}

	return false
}

// SetScriptType gets a reference to the given string and assigns it to the ScriptType field.
func (o *Script) SetScriptType(v string) {
	o.ScriptType = &v
}

// GetScript returns the Script field value if set, zero value otherwise.
func (o *Script) GetScript() string {
	if o == nil || o.Script == nil {
		var ret string
		return ret
	}
	return *o.Script
}

// GetScriptOk returns a tuple with the Script field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Script) GetScriptOk() (*string, bool) {
	if o == nil || o.Script == nil {
		return nil, false
	}
	return o.Script, true
}

// HasScript returns a boolean if a field has been set.
func (o *Script) HasScript() bool {
	if o != nil && o.Script != nil {
		return true
	}

	return false
}

// SetScript gets a reference to the given string and assigns it to the Script field.
func (o *Script) SetScript(v string) {
	o.Script = &v
}

// GetScriptService returns the ScriptService field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Script) GetScriptService() string {
	if o == nil || o.ScriptService.Get() == nil {
		var ret string
		return ret
	}
	return *o.ScriptService.Get()
}

// GetScriptServiceOk returns a tuple with the ScriptService field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Script) GetScriptServiceOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ScriptService.Get(), o.ScriptService.IsSet()
}

// HasScriptService returns a boolean if a field has been set.
func (o *Script) HasScriptService() bool {
	if o != nil && o.ScriptService.IsSet() {
		return true
	}

	return false
}

// SetScriptService gets a reference to the given NullableString and assigns it to the ScriptService field.
func (o *Script) SetScriptService(v string) {
	o.ScriptService.Set(&v)
}
// SetScriptServiceNil sets the value for ScriptService to be an explicit nil
func (o *Script) SetScriptServiceNil() {
	o.ScriptService.Set(nil)
}

// UnsetScriptService ensures that no value is present for ScriptService, not even an explicit nil
func (o *Script) UnsetScriptService() {
	o.ScriptService.Unset()
}

// GetScriptMethod returns the ScriptMethod field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Script) GetScriptMethod() string {
	if o == nil || o.ScriptMethod.Get() == nil {
		var ret string
		return ret
	}
	return *o.ScriptMethod.Get()
}

// GetScriptMethodOk returns a tuple with the ScriptMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Script) GetScriptMethodOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ScriptMethod.Get(), o.ScriptMethod.IsSet()
}

// HasScriptMethod returns a boolean if a field has been set.
func (o *Script) HasScriptMethod() bool {
	if o != nil && o.ScriptMethod.IsSet() {
		return true
	}

	return false
}

// SetScriptMethod gets a reference to the given NullableString and assigns it to the ScriptMethod field.
func (o *Script) SetScriptMethod(v string) {
	o.ScriptMethod.Set(&v)
}
// SetScriptMethodNil sets the value for ScriptMethod to be an explicit nil
func (o *Script) SetScriptMethodNil() {
	o.ScriptMethod.Set(nil)
}

// UnsetScriptMethod ensures that no value is present for ScriptMethod, not even an explicit nil
func (o *Script) UnsetScriptMethod() {
	o.ScriptMethod.Unset()
}

// GetRunAsUser returns the RunAsUser field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Script) GetRunAsUser() string {
	if o == nil || o.RunAsUser.Get() == nil {
		var ret string
		return ret
	}
	return *o.RunAsUser.Get()
}

// GetRunAsUserOk returns a tuple with the RunAsUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Script) GetRunAsUserOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RunAsUser.Get(), o.RunAsUser.IsSet()
}

// HasRunAsUser returns a boolean if a field has been set.
func (o *Script) HasRunAsUser() bool {
	if o != nil && o.RunAsUser.IsSet() {
		return true
	}

	return false
}

// SetRunAsUser gets a reference to the given NullableString and assigns it to the RunAsUser field.
func (o *Script) SetRunAsUser(v string) {
	o.RunAsUser.Set(&v)
}
// SetRunAsUserNil sets the value for RunAsUser to be an explicit nil
func (o *Script) SetRunAsUserNil() {
	o.RunAsUser.Set(nil)
}

// UnsetRunAsUser ensures that no value is present for RunAsUser, not even an explicit nil
func (o *Script) UnsetRunAsUser() {
	o.RunAsUser.Unset()
}

// GetRunAsPassword returns the RunAsPassword field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Script) GetRunAsPassword() string {
	if o == nil || o.RunAsPassword.Get() == nil {
		var ret string
		return ret
	}
	return *o.RunAsPassword.Get()
}

// GetRunAsPasswordOk returns a tuple with the RunAsPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Script) GetRunAsPasswordOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RunAsPassword.Get(), o.RunAsPassword.IsSet()
}

// HasRunAsPassword returns a boolean if a field has been set.
func (o *Script) HasRunAsPassword() bool {
	if o != nil && o.RunAsPassword.IsSet() {
		return true
	}

	return false
}

// SetRunAsPassword gets a reference to the given NullableString and assigns it to the RunAsPassword field.
func (o *Script) SetRunAsPassword(v string) {
	o.RunAsPassword.Set(&v)
}
// SetRunAsPasswordNil sets the value for RunAsPassword to be an explicit nil
func (o *Script) SetRunAsPasswordNil() {
	o.RunAsPassword.Set(nil)
}

// UnsetRunAsPassword ensures that no value is present for RunAsPassword, not even an explicit nil
func (o *Script) UnsetRunAsPassword() {
	o.RunAsPassword.Unset()
}

// GetSudoUser returns the SudoUser field value if set, zero value otherwise.
func (o *Script) GetSudoUser() bool {
	if o == nil || o.SudoUser == nil {
		var ret bool
		return ret
	}
	return *o.SudoUser
}

// GetSudoUserOk returns a tuple with the SudoUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Script) GetSudoUserOk() (*bool, bool) {
	if o == nil || o.SudoUser == nil {
		return nil, false
	}
	return o.SudoUser, true
}

// HasSudoUser returns a boolean if a field has been set.
func (o *Script) HasSudoUser() bool {
	if o != nil && o.SudoUser != nil {
		return true
	}

	return false
}

// SetSudoUser gets a reference to the given bool and assigns it to the SudoUser field.
func (o *Script) SetSudoUser(v bool) {
	o.SudoUser = &v
}

// GetFailOnError returns the FailOnError field value if set, zero value otherwise.
func (o *Script) GetFailOnError() bool {
	if o == nil || o.FailOnError == nil {
		var ret bool
		return ret
	}
	return *o.FailOnError
}

// GetFailOnErrorOk returns a tuple with the FailOnError field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Script) GetFailOnErrorOk() (*bool, bool) {
	if o == nil || o.FailOnError == nil {
		return nil, false
	}
	return o.FailOnError, true
}

// HasFailOnError returns a boolean if a field has been set.
func (o *Script) HasFailOnError() bool {
	if o != nil && o.FailOnError != nil {
		return true
	}

	return false
}

// SetFailOnError gets a reference to the given bool and assigns it to the FailOnError field.
func (o *Script) SetFailOnError(v bool) {
	o.FailOnError = &v
}

func (o Script) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Code != nil {
		toSerialize["code"] = o.Code
	}
	if o.Account.IsSet() {
		toSerialize["account"] = o.Account.Get()
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Labels != nil {
		toSerialize["labels"] = o.Labels
	}
	if o.Category.IsSet() {
		toSerialize["category"] = o.Category.Get()
	}
	if o.SortOrder != nil {
		toSerialize["sortOrder"] = o.SortOrder
	}
	if o.ScriptVersion != nil {
		toSerialize["scriptVersion"] = o.ScriptVersion
	}
	if o.ScriptPhase != nil {
		toSerialize["scriptPhase"] = o.ScriptPhase
	}
	if o.ScriptType != nil {
		toSerialize["scriptType"] = o.ScriptType
	}
	if o.Script != nil {
		toSerialize["script"] = o.Script
	}
	if o.ScriptService.IsSet() {
		toSerialize["scriptService"] = o.ScriptService.Get()
	}
	if o.ScriptMethod.IsSet() {
		toSerialize["scriptMethod"] = o.ScriptMethod.Get()
	}
	if o.RunAsUser.IsSet() {
		toSerialize["runAsUser"] = o.RunAsUser.Get()
	}
	if o.RunAsPassword.IsSet() {
		toSerialize["runAsPassword"] = o.RunAsPassword.Get()
	}
	if o.SudoUser != nil {
		toSerialize["sudoUser"] = o.SudoUser
	}
	if o.FailOnError != nil {
		toSerialize["failOnError"] = o.FailOnError
	}
	return json.Marshal(toSerialize)
}

type NullableScript struct {
	value *Script
	isSet bool
}

func (v NullableScript) Get() *Script {
	return v.value
}

func (v *NullableScript) Set(val *Script) {
	v.value = val
	v.isSet = true
}

func (v NullableScript) IsSet() bool {
	return v.isSet
}

func (v *NullableScript) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScript(val *Script) *NullableScript {
	return &NullableScript{value: val, isSet: true}
}

func (v NullableScript) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScript) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


