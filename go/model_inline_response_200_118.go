/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InlineResponse200118 struct for InlineResponse200118
type InlineResponse200118 struct {
	NetworkScope *map[string]interface{} `json:"networkScope,omitempty"`
}

// NewInlineResponse200118 instantiates a new InlineResponse200118 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse200118() *InlineResponse200118 {
	this := InlineResponse200118{}
	return &this
}

// NewInlineResponse200118WithDefaults instantiates a new InlineResponse200118 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse200118WithDefaults() *InlineResponse200118 {
	this := InlineResponse200118{}
	return &this
}

// GetNetworkScope returns the NetworkScope field value if set, zero value otherwise.
func (o *InlineResponse200118) GetNetworkScope() map[string]interface{} {
	if o == nil || o.NetworkScope == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.NetworkScope
}

// GetNetworkScopeOk returns a tuple with the NetworkScope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200118) GetNetworkScopeOk() (*map[string]interface{}, bool) {
	if o == nil || o.NetworkScope == nil {
		return nil, false
	}
	return o.NetworkScope, true
}

// HasNetworkScope returns a boolean if a field has been set.
func (o *InlineResponse200118) HasNetworkScope() bool {
	if o != nil && o.NetworkScope != nil {
		return true
	}

	return false
}

// SetNetworkScope gets a reference to the given map[string]interface{} and assigns it to the NetworkScope field.
func (o *InlineResponse200118) SetNetworkScope(v map[string]interface{}) {
	o.NetworkScope = &v
}

func (o InlineResponse200118) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.NetworkScope != nil {
		toSerialize["networkScope"] = o.NetworkScope
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse200118 struct {
	value *InlineResponse200118
	isSet bool
}

func (v NullableInlineResponse200118) Get() *InlineResponse200118 {
	return v.value
}

func (v *NullableInlineResponse200118) Set(val *InlineResponse200118) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse200118) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse200118) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse200118(val *InlineResponse200118) *NullableInlineResponse200118 {
	return &NullableInlineResponse200118{value: val, isSet: true}
}

func (v NullableInlineResponse200118) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse200118) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


