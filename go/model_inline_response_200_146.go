/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InlineResponse200146 struct for InlineResponse200146
type InlineResponse200146 struct {
	StorageServerType *StorageServerType `json:"storageServerType,omitempty"`
}

// NewInlineResponse200146 instantiates a new InlineResponse200146 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse200146() *InlineResponse200146 {
	this := InlineResponse200146{}
	return &this
}

// NewInlineResponse200146WithDefaults instantiates a new InlineResponse200146 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse200146WithDefaults() *InlineResponse200146 {
	this := InlineResponse200146{}
	return &this
}

// GetStorageServerType returns the StorageServerType field value if set, zero value otherwise.
func (o *InlineResponse200146) GetStorageServerType() StorageServerType {
	if o == nil || o.StorageServerType == nil {
		var ret StorageServerType
		return ret
	}
	return *o.StorageServerType
}

// GetStorageServerTypeOk returns a tuple with the StorageServerType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200146) GetStorageServerTypeOk() (*StorageServerType, bool) {
	if o == nil || o.StorageServerType == nil {
		return nil, false
	}
	return o.StorageServerType, true
}

// HasStorageServerType returns a boolean if a field has been set.
func (o *InlineResponse200146) HasStorageServerType() bool {
	if o != nil && o.StorageServerType != nil {
		return true
	}

	return false
}

// SetStorageServerType gets a reference to the given StorageServerType and assigns it to the StorageServerType field.
func (o *InlineResponse200146) SetStorageServerType(v StorageServerType) {
	o.StorageServerType = &v
}

func (o InlineResponse200146) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.StorageServerType != nil {
		toSerialize["storageServerType"] = o.StorageServerType
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse200146 struct {
	value *InlineResponse200146
	isSet bool
}

func (v NullableInlineResponse200146) Get() *InlineResponse200146 {
	return v.value
}

func (v *NullableInlineResponse200146) Set(val *InlineResponse200146) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse200146) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse200146) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse200146(val *InlineResponse200146) *NullableInlineResponse200146 {
	return &NullableInlineResponse200146{value: val, isSet: true}
}

func (v NullableInlineResponse200146) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse200146) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


