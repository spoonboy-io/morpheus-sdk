/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// AppStateInputVariables struct for AppStateInputVariables
type AppStateInputVariables struct {
	Name *string `json:"name,omitempty"`
	Value NullableString `json:"value,omitempty"`
	Sensitive *bool `json:"sensitive,omitempty"`
	Type *string `json:"type,omitempty"`
}

// NewAppStateInputVariables instantiates a new AppStateInputVariables object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppStateInputVariables() *AppStateInputVariables {
	this := AppStateInputVariables{}
	return &this
}

// NewAppStateInputVariablesWithDefaults instantiates a new AppStateInputVariables object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppStateInputVariablesWithDefaults() *AppStateInputVariables {
	this := AppStateInputVariables{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AppStateInputVariables) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppStateInputVariables) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AppStateInputVariables) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AppStateInputVariables) SetName(v string) {
	o.Name = &v
}

// GetValue returns the Value field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AppStateInputVariables) GetValue() string {
	if o == nil || o.Value.Get() == nil {
		var ret string
		return ret
	}
	return *o.Value.Get()
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AppStateInputVariables) GetValueOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Value.Get(), o.Value.IsSet()
}

// HasValue returns a boolean if a field has been set.
func (o *AppStateInputVariables) HasValue() bool {
	if o != nil && o.Value.IsSet() {
		return true
	}

	return false
}

// SetValue gets a reference to the given NullableString and assigns it to the Value field.
func (o *AppStateInputVariables) SetValue(v string) {
	o.Value.Set(&v)
}
// SetValueNil sets the value for Value to be an explicit nil
func (o *AppStateInputVariables) SetValueNil() {
	o.Value.Set(nil)
}

// UnsetValue ensures that no value is present for Value, not even an explicit nil
func (o *AppStateInputVariables) UnsetValue() {
	o.Value.Unset()
}

// GetSensitive returns the Sensitive field value if set, zero value otherwise.
func (o *AppStateInputVariables) GetSensitive() bool {
	if o == nil || o.Sensitive == nil {
		var ret bool
		return ret
	}
	return *o.Sensitive
}

// GetSensitiveOk returns a tuple with the Sensitive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppStateInputVariables) GetSensitiveOk() (*bool, bool) {
	if o == nil || o.Sensitive == nil {
		return nil, false
	}
	return o.Sensitive, true
}

// HasSensitive returns a boolean if a field has been set.
func (o *AppStateInputVariables) HasSensitive() bool {
	if o != nil && o.Sensitive != nil {
		return true
	}

	return false
}

// SetSensitive gets a reference to the given bool and assigns it to the Sensitive field.
func (o *AppStateInputVariables) SetSensitive(v bool) {
	o.Sensitive = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *AppStateInputVariables) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppStateInputVariables) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *AppStateInputVariables) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *AppStateInputVariables) SetType(v string) {
	o.Type = &v
}

func (o AppStateInputVariables) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Value.IsSet() {
		toSerialize["value"] = o.Value.Get()
	}
	if o.Sensitive != nil {
		toSerialize["sensitive"] = o.Sensitive
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableAppStateInputVariables struct {
	value *AppStateInputVariables
	isSet bool
}

func (v NullableAppStateInputVariables) Get() *AppStateInputVariables {
	return v.value
}

func (v *NullableAppStateInputVariables) Set(val *AppStateInputVariables) {
	v.value = val
	v.isSet = true
}

func (v NullableAppStateInputVariables) IsSet() bool {
	return v.isSet
}

func (v *NullableAppStateInputVariables) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppStateInputVariables(val *AppStateInputVariables) *NullableAppStateInputVariables {
	return &NullableAppStateInputVariables{value: val, isSet: true}
}

func (v NullableAppStateInputVariables) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppStateInputVariables) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


