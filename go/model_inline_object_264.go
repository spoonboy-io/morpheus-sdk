/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InlineObject264 struct for InlineObject264
type InlineObject264 struct {
	VirtualImage VirtualImageUpdate `json:"virtualImage"`
}

// NewInlineObject264 instantiates a new InlineObject264 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineObject264(virtualImage VirtualImageUpdate, ) *InlineObject264 {
	this := InlineObject264{}
	this.VirtualImage = virtualImage
	return &this
}

// NewInlineObject264WithDefaults instantiates a new InlineObject264 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineObject264WithDefaults() *InlineObject264 {
	this := InlineObject264{}
	return &this
}

// GetVirtualImage returns the VirtualImage field value
func (o *InlineObject264) GetVirtualImage() VirtualImageUpdate {
	if o == nil  {
		var ret VirtualImageUpdate
		return ret
	}

	return o.VirtualImage
}

// GetVirtualImageOk returns a tuple with the VirtualImage field value
// and a boolean to check if the value has been set.
func (o *InlineObject264) GetVirtualImageOk() (*VirtualImageUpdate, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.VirtualImage, true
}

// SetVirtualImage sets field value
func (o *InlineObject264) SetVirtualImage(v VirtualImageUpdate) {
	o.VirtualImage = v
}

func (o InlineObject264) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["virtualImage"] = o.VirtualImage
	}
	return json.Marshal(toSerialize)
}

type NullableInlineObject264 struct {
	value *InlineObject264
	isSet bool
}

func (v NullableInlineObject264) Get() *InlineObject264 {
	return v.value
}

func (v *NullableInlineObject264) Set(val *InlineObject264) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineObject264) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineObject264) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineObject264(val *InlineObject264) *NullableInlineObject264 {
	return &NullableInlineObject264{value: val, isSet: true}
}

func (v NullableInlineObject264) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineObject264) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


