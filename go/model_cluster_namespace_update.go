/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ClusterNamespaceUpdate struct for ClusterNamespaceUpdate
type ClusterNamespaceUpdate struct {
	// Namespace name
	Name *string `json:"name,omitempty"`
	// Namespace description
	Description *string `json:"description,omitempty"`
	// Namespace active
	Active *bool `json:"active,omitempty"`
	Permissions *ClusterNamespaceUpdatePermissions `json:"permissions,omitempty"`
}

// NewClusterNamespaceUpdate instantiates a new ClusterNamespaceUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClusterNamespaceUpdate() *ClusterNamespaceUpdate {
	this := ClusterNamespaceUpdate{}
	var active bool = false
	this.Active = &active
	return &this
}

// NewClusterNamespaceUpdateWithDefaults instantiates a new ClusterNamespaceUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClusterNamespaceUpdateWithDefaults() *ClusterNamespaceUpdate {
	this := ClusterNamespaceUpdate{}
	var active bool = false
	this.Active = &active
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ClusterNamespaceUpdate) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterNamespaceUpdate) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ClusterNamespaceUpdate) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ClusterNamespaceUpdate) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ClusterNamespaceUpdate) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterNamespaceUpdate) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ClusterNamespaceUpdate) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ClusterNamespaceUpdate) SetDescription(v string) {
	o.Description = &v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *ClusterNamespaceUpdate) GetActive() bool {
	if o == nil || o.Active == nil {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterNamespaceUpdate) GetActiveOk() (*bool, bool) {
	if o == nil || o.Active == nil {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *ClusterNamespaceUpdate) HasActive() bool {
	if o != nil && o.Active != nil {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *ClusterNamespaceUpdate) SetActive(v bool) {
	o.Active = &v
}

// GetPermissions returns the Permissions field value if set, zero value otherwise.
func (o *ClusterNamespaceUpdate) GetPermissions() ClusterNamespaceUpdatePermissions {
	if o == nil || o.Permissions == nil {
		var ret ClusterNamespaceUpdatePermissions
		return ret
	}
	return *o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterNamespaceUpdate) GetPermissionsOk() (*ClusterNamespaceUpdatePermissions, bool) {
	if o == nil || o.Permissions == nil {
		return nil, false
	}
	return o.Permissions, true
}

// HasPermissions returns a boolean if a field has been set.
func (o *ClusterNamespaceUpdate) HasPermissions() bool {
	if o != nil && o.Permissions != nil {
		return true
	}

	return false
}

// SetPermissions gets a reference to the given ClusterNamespaceUpdatePermissions and assigns it to the Permissions field.
func (o *ClusterNamespaceUpdate) SetPermissions(v ClusterNamespaceUpdatePermissions) {
	o.Permissions = &v
}

func (o ClusterNamespaceUpdate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Active != nil {
		toSerialize["active"] = o.Active
	}
	if o.Permissions != nil {
		toSerialize["permissions"] = o.Permissions
	}
	return json.Marshal(toSerialize)
}

type NullableClusterNamespaceUpdate struct {
	value *ClusterNamespaceUpdate
	isSet bool
}

func (v NullableClusterNamespaceUpdate) Get() *ClusterNamespaceUpdate {
	return v.value
}

func (v *NullableClusterNamespaceUpdate) Set(val *ClusterNamespaceUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterNamespaceUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterNamespaceUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterNamespaceUpdate(val *ClusterNamespaceUpdate) *NullableClusterNamespaceUpdate {
	return &NullableClusterNamespaceUpdate{value: val, isSet: true}
}

func (v NullableClusterNamespaceUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterNamespaceUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


