/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// HubRegisterObject Object for registering with the [Morpheus Hub](https://morpheushub.com). This is only required for `hubmode=register`.
type HubRegisterObject struct {
	Hub HubRegisterObjectHub `json:"hub"`
}

// NewHubRegisterObject instantiates a new HubRegisterObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHubRegisterObject(hub HubRegisterObjectHub, ) *HubRegisterObject {
	this := HubRegisterObject{}
	this.Hub = hub
	return &this
}

// NewHubRegisterObjectWithDefaults instantiates a new HubRegisterObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHubRegisterObjectWithDefaults() *HubRegisterObject {
	this := HubRegisterObject{}
	return &this
}

// GetHub returns the Hub field value
func (o *HubRegisterObject) GetHub() HubRegisterObjectHub {
	if o == nil  {
		var ret HubRegisterObjectHub
		return ret
	}

	return o.Hub
}

// GetHubOk returns a tuple with the Hub field value
// and a boolean to check if the value has been set.
func (o *HubRegisterObject) GetHubOk() (*HubRegisterObjectHub, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Hub, true
}

// SetHub sets field value
func (o *HubRegisterObject) SetHub(v HubRegisterObjectHub) {
	o.Hub = v
}

func (o HubRegisterObject) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["hub"] = o.Hub
	}
	return json.Marshal(toSerialize)
}

type NullableHubRegisterObject struct {
	value *HubRegisterObject
	isSet bool
}

func (v NullableHubRegisterObject) Get() *HubRegisterObject {
	return v.value
}

func (v *NullableHubRegisterObject) Set(val *HubRegisterObject) {
	v.value = val
	v.isSet = true
}

func (v NullableHubRegisterObject) IsSet() bool {
	return v.isSet
}

func (v *NullableHubRegisterObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHubRegisterObject(val *HubRegisterObject) *NullableHubRegisterObject {
	return &NullableHubRegisterObject{value: val, isSet: true}
}

func (v NullableHubRegisterObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHubRegisterObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


