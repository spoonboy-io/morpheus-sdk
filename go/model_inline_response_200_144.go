/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InlineResponse200144 struct for InlineResponse200144
type InlineResponse200144 struct {
	Certificate *InlineResponse200143Certificates `json:"certificate,omitempty"`
}

// NewInlineResponse200144 instantiates a new InlineResponse200144 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse200144() *InlineResponse200144 {
	this := InlineResponse200144{}
	return &this
}

// NewInlineResponse200144WithDefaults instantiates a new InlineResponse200144 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse200144WithDefaults() *InlineResponse200144 {
	this := InlineResponse200144{}
	return &this
}

// GetCertificate returns the Certificate field value if set, zero value otherwise.
func (o *InlineResponse200144) GetCertificate() InlineResponse200143Certificates {
	if o == nil || o.Certificate == nil {
		var ret InlineResponse200143Certificates
		return ret
	}
	return *o.Certificate
}

// GetCertificateOk returns a tuple with the Certificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200144) GetCertificateOk() (*InlineResponse200143Certificates, bool) {
	if o == nil || o.Certificate == nil {
		return nil, false
	}
	return o.Certificate, true
}

// HasCertificate returns a boolean if a field has been set.
func (o *InlineResponse200144) HasCertificate() bool {
	if o != nil && o.Certificate != nil {
		return true
	}

	return false
}

// SetCertificate gets a reference to the given InlineResponse200143Certificates and assigns it to the Certificate field.
func (o *InlineResponse200144) SetCertificate(v InlineResponse200143Certificates) {
	o.Certificate = &v
}

func (o InlineResponse200144) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Certificate != nil {
		toSerialize["certificate"] = o.Certificate
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse200144 struct {
	value *InlineResponse200144
	isSet bool
}

func (v NullableInlineResponse200144) Get() *InlineResponse200144 {
	return v.value
}

func (v *NullableInlineResponse200144) Set(val *InlineResponse200144) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse200144) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse200144) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse200144(val *InlineResponse200144) *NullableInlineResponse200144 {
	return &NullableInlineResponse200144{value: val, isSet: true}
}

func (v NullableInlineResponse200144) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse200144) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


