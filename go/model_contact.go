/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Contact struct for Contact
type Contact struct {
	Id *int64 `json:"id,omitempty"`
	EmailAddress *string `json:"emailAddress,omitempty"`
	Name *string `json:"name,omitempty"`
	SmsAddress *string `json:"smsAddress,omitempty"`
	SlackHook *string `json:"slackHook,omitempty"`
}

// NewContact instantiates a new Contact object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContact() *Contact {
	this := Contact{}
	return &this
}

// NewContactWithDefaults instantiates a new Contact object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContactWithDefaults() *Contact {
	this := Contact{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Contact) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contact) GetIdOk() (*int64, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Contact) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *Contact) SetId(v int64) {
	o.Id = &v
}

// GetEmailAddress returns the EmailAddress field value if set, zero value otherwise.
func (o *Contact) GetEmailAddress() string {
	if o == nil || o.EmailAddress == nil {
		var ret string
		return ret
	}
	return *o.EmailAddress
}

// GetEmailAddressOk returns a tuple with the EmailAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contact) GetEmailAddressOk() (*string, bool) {
	if o == nil || o.EmailAddress == nil {
		return nil, false
	}
	return o.EmailAddress, true
}

// HasEmailAddress returns a boolean if a field has been set.
func (o *Contact) HasEmailAddress() bool {
	if o != nil && o.EmailAddress != nil {
		return true
	}

	return false
}

// SetEmailAddress gets a reference to the given string and assigns it to the EmailAddress field.
func (o *Contact) SetEmailAddress(v string) {
	o.EmailAddress = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Contact) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contact) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Contact) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Contact) SetName(v string) {
	o.Name = &v
}

// GetSmsAddress returns the SmsAddress field value if set, zero value otherwise.
func (o *Contact) GetSmsAddress() string {
	if o == nil || o.SmsAddress == nil {
		var ret string
		return ret
	}
	return *o.SmsAddress
}

// GetSmsAddressOk returns a tuple with the SmsAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contact) GetSmsAddressOk() (*string, bool) {
	if o == nil || o.SmsAddress == nil {
		return nil, false
	}
	return o.SmsAddress, true
}

// HasSmsAddress returns a boolean if a field has been set.
func (o *Contact) HasSmsAddress() bool {
	if o != nil && o.SmsAddress != nil {
		return true
	}

	return false
}

// SetSmsAddress gets a reference to the given string and assigns it to the SmsAddress field.
func (o *Contact) SetSmsAddress(v string) {
	o.SmsAddress = &v
}

// GetSlackHook returns the SlackHook field value if set, zero value otherwise.
func (o *Contact) GetSlackHook() string {
	if o == nil || o.SlackHook == nil {
		var ret string
		return ret
	}
	return *o.SlackHook
}

// GetSlackHookOk returns a tuple with the SlackHook field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contact) GetSlackHookOk() (*string, bool) {
	if o == nil || o.SlackHook == nil {
		return nil, false
	}
	return o.SlackHook, true
}

// HasSlackHook returns a boolean if a field has been set.
func (o *Contact) HasSlackHook() bool {
	if o != nil && o.SlackHook != nil {
		return true
	}

	return false
}

// SetSlackHook gets a reference to the given string and assigns it to the SlackHook field.
func (o *Contact) SetSlackHook(v string) {
	o.SlackHook = &v
}

func (o Contact) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.EmailAddress != nil {
		toSerialize["emailAddress"] = o.EmailAddress
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.SmsAddress != nil {
		toSerialize["smsAddress"] = o.SmsAddress
	}
	if o.SlackHook != nil {
		toSerialize["slackHook"] = o.SlackHook
	}
	return json.Marshal(toSerialize)
}

type NullableContact struct {
	value *Contact
	isSet bool
}

func (v NullableContact) Get() *Contact {
	return v.value
}

func (v *NullableContact) Set(val *Contact) {
	v.value = val
	v.isSet = true
}

func (v NullableContact) IsSet() bool {
	return v.isSet
}

func (v *NullableContact) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContact(val *Contact) *NullableContact {
	return &NullableContact{value: val, isSet: true}
}

func (v NullableContact) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContact) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


