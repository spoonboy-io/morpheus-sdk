/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VirtualImageUpdate struct for VirtualImageUpdate
type VirtualImageUpdate struct {
	// A name for the virtual image
	Name *string `json:"name,omitempty"`
	// Array of label strings, can be used for filtering.
	Labels []string `json:"labels,omitempty"`
	// Code of image type. eg. vmware, ami, etc.
	ImageType *string `json:"imageType,omitempty"`
	StorageProvider NullableVirtualImageCreateStorageProvider `json:"storageProvider,omitempty"`
	// Cloud Init Enabled?
	IsCloudInit *bool `json:"isCloudInit,omitempty"`
	// Cloud-Init User Data, a bash script
	UserData NullableString `json:"userData,omitempty"`
	// Install Agent?
	InstallAgent *bool `json:"installAgent,omitempty"`
	// SSH Username
	SshUsername NullableString `json:"sshUsername,omitempty"`
	// SSH Password
	SshPassword NullableString `json:"sshPassword,omitempty"`
	// SSH Key
	SshKey NullableString `json:"sshKey,omitempty"`
	// A Map containing the id of the OS Type. This can also be passed as a string (code or name) instead.
	OsType *OneOfobjectstring `json:"osType,omitempty"`
	// private or public
	Visibility *string `json:"visibility,omitempty"`
	Accounts *[]int64 `json:"accounts,omitempty"`
	// Auto Join Domain?
	IsAutoJoinDomain *bool `json:"isAutoJoinDomain,omitempty"`
	// VirtIO Drivers Loaded?
	VirtioSupported *bool `json:"virtioSupported,omitempty"`
	// VM Tools Installed?
	VmToolsInstalled *bool `json:"vmToolsInstalled,omitempty"`
	// Force Guest Customization?
	IsForceCustomization *bool `json:"isForceCustomization,omitempty"`
	// Trial Version
	TrialVersion *bool `json:"trialVersion,omitempty"`
	// Sysprep Enabled?
	IsSysprep *bool `json:"isSysprep,omitempty"`
	// Map of configuration properties, varies by image type.
	Config *OneOfobjectobject `json:"config,omitempty"`
	// Metadata tags, Array of objects having a name and value, this adds or updates the specified tags and removes any tags not specified.
	Tags *[]VirtualImageCreateTags `json:"tags,omitempty"`
	// Add or update value of Metadata tags, Array of objects having a name and value.
	AddTags *[]VirtualImageCreateTags `json:"addTags,omitempty"`
	// Remove Metadata tags, Array of objects having a name and an optional value. If value is passed, it must match to be removed.
	RemoveTags *[]VirtualImageUpdateRemoveTags `json:"removeTags,omitempty"`
}

// NewVirtualImageUpdate instantiates a new VirtualImageUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVirtualImageUpdate() *VirtualImageUpdate {
	this := VirtualImageUpdate{}
	var isCloudInit bool = false
	this.IsCloudInit = &isCloudInit
	var installAgent bool = false
	this.InstallAgent = &installAgent
	var visibility string = "private"
	this.Visibility = &visibility
	var isAutoJoinDomain bool = false
	this.IsAutoJoinDomain = &isAutoJoinDomain
	var virtioSupported bool = true
	this.VirtioSupported = &virtioSupported
	var vmToolsInstalled bool = true
	this.VmToolsInstalled = &vmToolsInstalled
	var isForceCustomization bool = false
	this.IsForceCustomization = &isForceCustomization
	var trialVersion bool = false
	this.TrialVersion = &trialVersion
	var isSysprep bool = false
	this.IsSysprep = &isSysprep
	return &this
}

// NewVirtualImageUpdateWithDefaults instantiates a new VirtualImageUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVirtualImageUpdateWithDefaults() *VirtualImageUpdate {
	this := VirtualImageUpdate{}
	var isCloudInit bool = false
	this.IsCloudInit = &isCloudInit
	var installAgent bool = false
	this.InstallAgent = &installAgent
	var visibility string = "private"
	this.Visibility = &visibility
	var isAutoJoinDomain bool = false
	this.IsAutoJoinDomain = &isAutoJoinDomain
	var virtioSupported bool = true
	this.VirtioSupported = &virtioSupported
	var vmToolsInstalled bool = true
	this.VmToolsInstalled = &vmToolsInstalled
	var isForceCustomization bool = false
	this.IsForceCustomization = &isForceCustomization
	var trialVersion bool = false
	this.TrialVersion = &trialVersion
	var isSysprep bool = false
	this.IsSysprep = &isSysprep
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *VirtualImageUpdate) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualImageUpdate) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *VirtualImageUpdate) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *VirtualImageUpdate) SetName(v string) {
	o.Name = &v
}

// GetLabels returns the Labels field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VirtualImageUpdate) GetLabels() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VirtualImageUpdate) GetLabelsOk() (*[]string, bool) {
	if o == nil || o.Labels == nil {
		return nil, false
	}
	return &o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *VirtualImageUpdate) HasLabels() bool {
	if o != nil && o.Labels != nil {
		return true
	}

	return false
}

// SetLabels gets a reference to the given []string and assigns it to the Labels field.
func (o *VirtualImageUpdate) SetLabels(v []string) {
	o.Labels = v
}

// GetImageType returns the ImageType field value if set, zero value otherwise.
func (o *VirtualImageUpdate) GetImageType() string {
	if o == nil || o.ImageType == nil {
		var ret string
		return ret
	}
	return *o.ImageType
}

// GetImageTypeOk returns a tuple with the ImageType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualImageUpdate) GetImageTypeOk() (*string, bool) {
	if o == nil || o.ImageType == nil {
		return nil, false
	}
	return o.ImageType, true
}

// HasImageType returns a boolean if a field has been set.
func (o *VirtualImageUpdate) HasImageType() bool {
	if o != nil && o.ImageType != nil {
		return true
	}

	return false
}

// SetImageType gets a reference to the given string and assigns it to the ImageType field.
func (o *VirtualImageUpdate) SetImageType(v string) {
	o.ImageType = &v
}

// GetStorageProvider returns the StorageProvider field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VirtualImageUpdate) GetStorageProvider() VirtualImageCreateStorageProvider {
	if o == nil || o.StorageProvider.Get() == nil {
		var ret VirtualImageCreateStorageProvider
		return ret
	}
	return *o.StorageProvider.Get()
}

// GetStorageProviderOk returns a tuple with the StorageProvider field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VirtualImageUpdate) GetStorageProviderOk() (*VirtualImageCreateStorageProvider, bool) {
	if o == nil  {
		return nil, false
	}
	return o.StorageProvider.Get(), o.StorageProvider.IsSet()
}

// HasStorageProvider returns a boolean if a field has been set.
func (o *VirtualImageUpdate) HasStorageProvider() bool {
	if o != nil && o.StorageProvider.IsSet() {
		return true
	}

	return false
}

// SetStorageProvider gets a reference to the given NullableVirtualImageCreateStorageProvider and assigns it to the StorageProvider field.
func (o *VirtualImageUpdate) SetStorageProvider(v VirtualImageCreateStorageProvider) {
	o.StorageProvider.Set(&v)
}
// SetStorageProviderNil sets the value for StorageProvider to be an explicit nil
func (o *VirtualImageUpdate) SetStorageProviderNil() {
	o.StorageProvider.Set(nil)
}

// UnsetStorageProvider ensures that no value is present for StorageProvider, not even an explicit nil
func (o *VirtualImageUpdate) UnsetStorageProvider() {
	o.StorageProvider.Unset()
}

// GetIsCloudInit returns the IsCloudInit field value if set, zero value otherwise.
func (o *VirtualImageUpdate) GetIsCloudInit() bool {
	if o == nil || o.IsCloudInit == nil {
		var ret bool
		return ret
	}
	return *o.IsCloudInit
}

// GetIsCloudInitOk returns a tuple with the IsCloudInit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualImageUpdate) GetIsCloudInitOk() (*bool, bool) {
	if o == nil || o.IsCloudInit == nil {
		return nil, false
	}
	return o.IsCloudInit, true
}

// HasIsCloudInit returns a boolean if a field has been set.
func (o *VirtualImageUpdate) HasIsCloudInit() bool {
	if o != nil && o.IsCloudInit != nil {
		return true
	}

	return false
}

// SetIsCloudInit gets a reference to the given bool and assigns it to the IsCloudInit field.
func (o *VirtualImageUpdate) SetIsCloudInit(v bool) {
	o.IsCloudInit = &v
}

// GetUserData returns the UserData field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VirtualImageUpdate) GetUserData() string {
	if o == nil || o.UserData.Get() == nil {
		var ret string
		return ret
	}
	return *o.UserData.Get()
}

// GetUserDataOk returns a tuple with the UserData field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VirtualImageUpdate) GetUserDataOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UserData.Get(), o.UserData.IsSet()
}

// HasUserData returns a boolean if a field has been set.
func (o *VirtualImageUpdate) HasUserData() bool {
	if o != nil && o.UserData.IsSet() {
		return true
	}

	return false
}

// SetUserData gets a reference to the given NullableString and assigns it to the UserData field.
func (o *VirtualImageUpdate) SetUserData(v string) {
	o.UserData.Set(&v)
}
// SetUserDataNil sets the value for UserData to be an explicit nil
func (o *VirtualImageUpdate) SetUserDataNil() {
	o.UserData.Set(nil)
}

// UnsetUserData ensures that no value is present for UserData, not even an explicit nil
func (o *VirtualImageUpdate) UnsetUserData() {
	o.UserData.Unset()
}

// GetInstallAgent returns the InstallAgent field value if set, zero value otherwise.
func (o *VirtualImageUpdate) GetInstallAgent() bool {
	if o == nil || o.InstallAgent == nil {
		var ret bool
		return ret
	}
	return *o.InstallAgent
}

// GetInstallAgentOk returns a tuple with the InstallAgent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualImageUpdate) GetInstallAgentOk() (*bool, bool) {
	if o == nil || o.InstallAgent == nil {
		return nil, false
	}
	return o.InstallAgent, true
}

// HasInstallAgent returns a boolean if a field has been set.
func (o *VirtualImageUpdate) HasInstallAgent() bool {
	if o != nil && o.InstallAgent != nil {
		return true
	}

	return false
}

// SetInstallAgent gets a reference to the given bool and assigns it to the InstallAgent field.
func (o *VirtualImageUpdate) SetInstallAgent(v bool) {
	o.InstallAgent = &v
}

// GetSshUsername returns the SshUsername field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VirtualImageUpdate) GetSshUsername() string {
	if o == nil || o.SshUsername.Get() == nil {
		var ret string
		return ret
	}
	return *o.SshUsername.Get()
}

// GetSshUsernameOk returns a tuple with the SshUsername field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VirtualImageUpdate) GetSshUsernameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SshUsername.Get(), o.SshUsername.IsSet()
}

// HasSshUsername returns a boolean if a field has been set.
func (o *VirtualImageUpdate) HasSshUsername() bool {
	if o != nil && o.SshUsername.IsSet() {
		return true
	}

	return false
}

// SetSshUsername gets a reference to the given NullableString and assigns it to the SshUsername field.
func (o *VirtualImageUpdate) SetSshUsername(v string) {
	o.SshUsername.Set(&v)
}
// SetSshUsernameNil sets the value for SshUsername to be an explicit nil
func (o *VirtualImageUpdate) SetSshUsernameNil() {
	o.SshUsername.Set(nil)
}

// UnsetSshUsername ensures that no value is present for SshUsername, not even an explicit nil
func (o *VirtualImageUpdate) UnsetSshUsername() {
	o.SshUsername.Unset()
}

// GetSshPassword returns the SshPassword field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VirtualImageUpdate) GetSshPassword() string {
	if o == nil || o.SshPassword.Get() == nil {
		var ret string
		return ret
	}
	return *o.SshPassword.Get()
}

// GetSshPasswordOk returns a tuple with the SshPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VirtualImageUpdate) GetSshPasswordOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SshPassword.Get(), o.SshPassword.IsSet()
}

// HasSshPassword returns a boolean if a field has been set.
func (o *VirtualImageUpdate) HasSshPassword() bool {
	if o != nil && o.SshPassword.IsSet() {
		return true
	}

	return false
}

// SetSshPassword gets a reference to the given NullableString and assigns it to the SshPassword field.
func (o *VirtualImageUpdate) SetSshPassword(v string) {
	o.SshPassword.Set(&v)
}
// SetSshPasswordNil sets the value for SshPassword to be an explicit nil
func (o *VirtualImageUpdate) SetSshPasswordNil() {
	o.SshPassword.Set(nil)
}

// UnsetSshPassword ensures that no value is present for SshPassword, not even an explicit nil
func (o *VirtualImageUpdate) UnsetSshPassword() {
	o.SshPassword.Unset()
}

// GetSshKey returns the SshKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VirtualImageUpdate) GetSshKey() string {
	if o == nil || o.SshKey.Get() == nil {
		var ret string
		return ret
	}
	return *o.SshKey.Get()
}

// GetSshKeyOk returns a tuple with the SshKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VirtualImageUpdate) GetSshKeyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SshKey.Get(), o.SshKey.IsSet()
}

// HasSshKey returns a boolean if a field has been set.
func (o *VirtualImageUpdate) HasSshKey() bool {
	if o != nil && o.SshKey.IsSet() {
		return true
	}

	return false
}

// SetSshKey gets a reference to the given NullableString and assigns it to the SshKey field.
func (o *VirtualImageUpdate) SetSshKey(v string) {
	o.SshKey.Set(&v)
}
// SetSshKeyNil sets the value for SshKey to be an explicit nil
func (o *VirtualImageUpdate) SetSshKeyNil() {
	o.SshKey.Set(nil)
}

// UnsetSshKey ensures that no value is present for SshKey, not even an explicit nil
func (o *VirtualImageUpdate) UnsetSshKey() {
	o.SshKey.Unset()
}

// GetOsType returns the OsType field value if set, zero value otherwise.
func (o *VirtualImageUpdate) GetOsType() OneOfobjectstring {
	if o == nil || o.OsType == nil {
		var ret OneOfobjectstring
		return ret
	}
	return *o.OsType
}

// GetOsTypeOk returns a tuple with the OsType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualImageUpdate) GetOsTypeOk() (*OneOfobjectstring, bool) {
	if o == nil || o.OsType == nil {
		return nil, false
	}
	return o.OsType, true
}

// HasOsType returns a boolean if a field has been set.
func (o *VirtualImageUpdate) HasOsType() bool {
	if o != nil && o.OsType != nil {
		return true
	}

	return false
}

// SetOsType gets a reference to the given OneOfobjectstring and assigns it to the OsType field.
func (o *VirtualImageUpdate) SetOsType(v OneOfobjectstring) {
	o.OsType = &v
}

// GetVisibility returns the Visibility field value if set, zero value otherwise.
func (o *VirtualImageUpdate) GetVisibility() string {
	if o == nil || o.Visibility == nil {
		var ret string
		return ret
	}
	return *o.Visibility
}

// GetVisibilityOk returns a tuple with the Visibility field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualImageUpdate) GetVisibilityOk() (*string, bool) {
	if o == nil || o.Visibility == nil {
		return nil, false
	}
	return o.Visibility, true
}

// HasVisibility returns a boolean if a field has been set.
func (o *VirtualImageUpdate) HasVisibility() bool {
	if o != nil && o.Visibility != nil {
		return true
	}

	return false
}

// SetVisibility gets a reference to the given string and assigns it to the Visibility field.
func (o *VirtualImageUpdate) SetVisibility(v string) {
	o.Visibility = &v
}

// GetAccounts returns the Accounts field value if set, zero value otherwise.
func (o *VirtualImageUpdate) GetAccounts() []int64 {
	if o == nil || o.Accounts == nil {
		var ret []int64
		return ret
	}
	return *o.Accounts
}

// GetAccountsOk returns a tuple with the Accounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualImageUpdate) GetAccountsOk() (*[]int64, bool) {
	if o == nil || o.Accounts == nil {
		return nil, false
	}
	return o.Accounts, true
}

// HasAccounts returns a boolean if a field has been set.
func (o *VirtualImageUpdate) HasAccounts() bool {
	if o != nil && o.Accounts != nil {
		return true
	}

	return false
}

// SetAccounts gets a reference to the given []int64 and assigns it to the Accounts field.
func (o *VirtualImageUpdate) SetAccounts(v []int64) {
	o.Accounts = &v
}

// GetIsAutoJoinDomain returns the IsAutoJoinDomain field value if set, zero value otherwise.
func (o *VirtualImageUpdate) GetIsAutoJoinDomain() bool {
	if o == nil || o.IsAutoJoinDomain == nil {
		var ret bool
		return ret
	}
	return *o.IsAutoJoinDomain
}

// GetIsAutoJoinDomainOk returns a tuple with the IsAutoJoinDomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualImageUpdate) GetIsAutoJoinDomainOk() (*bool, bool) {
	if o == nil || o.IsAutoJoinDomain == nil {
		return nil, false
	}
	return o.IsAutoJoinDomain, true
}

// HasIsAutoJoinDomain returns a boolean if a field has been set.
func (o *VirtualImageUpdate) HasIsAutoJoinDomain() bool {
	if o != nil && o.IsAutoJoinDomain != nil {
		return true
	}

	return false
}

// SetIsAutoJoinDomain gets a reference to the given bool and assigns it to the IsAutoJoinDomain field.
func (o *VirtualImageUpdate) SetIsAutoJoinDomain(v bool) {
	o.IsAutoJoinDomain = &v
}

// GetVirtioSupported returns the VirtioSupported field value if set, zero value otherwise.
func (o *VirtualImageUpdate) GetVirtioSupported() bool {
	if o == nil || o.VirtioSupported == nil {
		var ret bool
		return ret
	}
	return *o.VirtioSupported
}

// GetVirtioSupportedOk returns a tuple with the VirtioSupported field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualImageUpdate) GetVirtioSupportedOk() (*bool, bool) {
	if o == nil || o.VirtioSupported == nil {
		return nil, false
	}
	return o.VirtioSupported, true
}

// HasVirtioSupported returns a boolean if a field has been set.
func (o *VirtualImageUpdate) HasVirtioSupported() bool {
	if o != nil && o.VirtioSupported != nil {
		return true
	}

	return false
}

// SetVirtioSupported gets a reference to the given bool and assigns it to the VirtioSupported field.
func (o *VirtualImageUpdate) SetVirtioSupported(v bool) {
	o.VirtioSupported = &v
}

// GetVmToolsInstalled returns the VmToolsInstalled field value if set, zero value otherwise.
func (o *VirtualImageUpdate) GetVmToolsInstalled() bool {
	if o == nil || o.VmToolsInstalled == nil {
		var ret bool
		return ret
	}
	return *o.VmToolsInstalled
}

// GetVmToolsInstalledOk returns a tuple with the VmToolsInstalled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualImageUpdate) GetVmToolsInstalledOk() (*bool, bool) {
	if o == nil || o.VmToolsInstalled == nil {
		return nil, false
	}
	return o.VmToolsInstalled, true
}

// HasVmToolsInstalled returns a boolean if a field has been set.
func (o *VirtualImageUpdate) HasVmToolsInstalled() bool {
	if o != nil && o.VmToolsInstalled != nil {
		return true
	}

	return false
}

// SetVmToolsInstalled gets a reference to the given bool and assigns it to the VmToolsInstalled field.
func (o *VirtualImageUpdate) SetVmToolsInstalled(v bool) {
	o.VmToolsInstalled = &v
}

// GetIsForceCustomization returns the IsForceCustomization field value if set, zero value otherwise.
func (o *VirtualImageUpdate) GetIsForceCustomization() bool {
	if o == nil || o.IsForceCustomization == nil {
		var ret bool
		return ret
	}
	return *o.IsForceCustomization
}

// GetIsForceCustomizationOk returns a tuple with the IsForceCustomization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualImageUpdate) GetIsForceCustomizationOk() (*bool, bool) {
	if o == nil || o.IsForceCustomization == nil {
		return nil, false
	}
	return o.IsForceCustomization, true
}

// HasIsForceCustomization returns a boolean if a field has been set.
func (o *VirtualImageUpdate) HasIsForceCustomization() bool {
	if o != nil && o.IsForceCustomization != nil {
		return true
	}

	return false
}

// SetIsForceCustomization gets a reference to the given bool and assigns it to the IsForceCustomization field.
func (o *VirtualImageUpdate) SetIsForceCustomization(v bool) {
	o.IsForceCustomization = &v
}

// GetTrialVersion returns the TrialVersion field value if set, zero value otherwise.
func (o *VirtualImageUpdate) GetTrialVersion() bool {
	if o == nil || o.TrialVersion == nil {
		var ret bool
		return ret
	}
	return *o.TrialVersion
}

// GetTrialVersionOk returns a tuple with the TrialVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualImageUpdate) GetTrialVersionOk() (*bool, bool) {
	if o == nil || o.TrialVersion == nil {
		return nil, false
	}
	return o.TrialVersion, true
}

// HasTrialVersion returns a boolean if a field has been set.
func (o *VirtualImageUpdate) HasTrialVersion() bool {
	if o != nil && o.TrialVersion != nil {
		return true
	}

	return false
}

// SetTrialVersion gets a reference to the given bool and assigns it to the TrialVersion field.
func (o *VirtualImageUpdate) SetTrialVersion(v bool) {
	o.TrialVersion = &v
}

// GetIsSysprep returns the IsSysprep field value if set, zero value otherwise.
func (o *VirtualImageUpdate) GetIsSysprep() bool {
	if o == nil || o.IsSysprep == nil {
		var ret bool
		return ret
	}
	return *o.IsSysprep
}

// GetIsSysprepOk returns a tuple with the IsSysprep field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualImageUpdate) GetIsSysprepOk() (*bool, bool) {
	if o == nil || o.IsSysprep == nil {
		return nil, false
	}
	return o.IsSysprep, true
}

// HasIsSysprep returns a boolean if a field has been set.
func (o *VirtualImageUpdate) HasIsSysprep() bool {
	if o != nil && o.IsSysprep != nil {
		return true
	}

	return false
}

// SetIsSysprep gets a reference to the given bool and assigns it to the IsSysprep field.
func (o *VirtualImageUpdate) SetIsSysprep(v bool) {
	o.IsSysprep = &v
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *VirtualImageUpdate) GetConfig() OneOfobjectobject {
	if o == nil || o.Config == nil {
		var ret OneOfobjectobject
		return ret
	}
	return *o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualImageUpdate) GetConfigOk() (*OneOfobjectobject, bool) {
	if o == nil || o.Config == nil {
		return nil, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *VirtualImageUpdate) HasConfig() bool {
	if o != nil && o.Config != nil {
		return true
	}

	return false
}

// SetConfig gets a reference to the given OneOfobjectobject and assigns it to the Config field.
func (o *VirtualImageUpdate) SetConfig(v OneOfobjectobject) {
	o.Config = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *VirtualImageUpdate) GetTags() []VirtualImageCreateTags {
	if o == nil || o.Tags == nil {
		var ret []VirtualImageCreateTags
		return ret
	}
	return *o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualImageUpdate) GetTagsOk() (*[]VirtualImageCreateTags, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *VirtualImageUpdate) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given []VirtualImageCreateTags and assigns it to the Tags field.
func (o *VirtualImageUpdate) SetTags(v []VirtualImageCreateTags) {
	o.Tags = &v
}

// GetAddTags returns the AddTags field value if set, zero value otherwise.
func (o *VirtualImageUpdate) GetAddTags() []VirtualImageCreateTags {
	if o == nil || o.AddTags == nil {
		var ret []VirtualImageCreateTags
		return ret
	}
	return *o.AddTags
}

// GetAddTagsOk returns a tuple with the AddTags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualImageUpdate) GetAddTagsOk() (*[]VirtualImageCreateTags, bool) {
	if o == nil || o.AddTags == nil {
		return nil, false
	}
	return o.AddTags, true
}

// HasAddTags returns a boolean if a field has been set.
func (o *VirtualImageUpdate) HasAddTags() bool {
	if o != nil && o.AddTags != nil {
		return true
	}

	return false
}

// SetAddTags gets a reference to the given []VirtualImageCreateTags and assigns it to the AddTags field.
func (o *VirtualImageUpdate) SetAddTags(v []VirtualImageCreateTags) {
	o.AddTags = &v
}

// GetRemoveTags returns the RemoveTags field value if set, zero value otherwise.
func (o *VirtualImageUpdate) GetRemoveTags() []VirtualImageUpdateRemoveTags {
	if o == nil || o.RemoveTags == nil {
		var ret []VirtualImageUpdateRemoveTags
		return ret
	}
	return *o.RemoveTags
}

// GetRemoveTagsOk returns a tuple with the RemoveTags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualImageUpdate) GetRemoveTagsOk() (*[]VirtualImageUpdateRemoveTags, bool) {
	if o == nil || o.RemoveTags == nil {
		return nil, false
	}
	return o.RemoveTags, true
}

// HasRemoveTags returns a boolean if a field has been set.
func (o *VirtualImageUpdate) HasRemoveTags() bool {
	if o != nil && o.RemoveTags != nil {
		return true
	}

	return false
}

// SetRemoveTags gets a reference to the given []VirtualImageUpdateRemoveTags and assigns it to the RemoveTags field.
func (o *VirtualImageUpdate) SetRemoveTags(v []VirtualImageUpdateRemoveTags) {
	o.RemoveTags = &v
}

func (o VirtualImageUpdate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Labels != nil {
		toSerialize["labels"] = o.Labels
	}
	if o.ImageType != nil {
		toSerialize["imageType"] = o.ImageType
	}
	if o.StorageProvider.IsSet() {
		toSerialize["storageProvider"] = o.StorageProvider.Get()
	}
	if o.IsCloudInit != nil {
		toSerialize["isCloudInit"] = o.IsCloudInit
	}
	if o.UserData.IsSet() {
		toSerialize["userData"] = o.UserData.Get()
	}
	if o.InstallAgent != nil {
		toSerialize["installAgent"] = o.InstallAgent
	}
	if o.SshUsername.IsSet() {
		toSerialize["sshUsername"] = o.SshUsername.Get()
	}
	if o.SshPassword.IsSet() {
		toSerialize["sshPassword"] = o.SshPassword.Get()
	}
	if o.SshKey.IsSet() {
		toSerialize["sshKey"] = o.SshKey.Get()
	}
	if o.OsType != nil {
		toSerialize["osType"] = o.OsType
	}
	if o.Visibility != nil {
		toSerialize["visibility"] = o.Visibility
	}
	if o.Accounts != nil {
		toSerialize["accounts"] = o.Accounts
	}
	if o.IsAutoJoinDomain != nil {
		toSerialize["isAutoJoinDomain"] = o.IsAutoJoinDomain
	}
	if o.VirtioSupported != nil {
		toSerialize["virtioSupported"] = o.VirtioSupported
	}
	if o.VmToolsInstalled != nil {
		toSerialize["vmToolsInstalled"] = o.VmToolsInstalled
	}
	if o.IsForceCustomization != nil {
		toSerialize["isForceCustomization"] = o.IsForceCustomization
	}
	if o.TrialVersion != nil {
		toSerialize["trialVersion"] = o.TrialVersion
	}
	if o.IsSysprep != nil {
		toSerialize["isSysprep"] = o.IsSysprep
	}
	if o.Config != nil {
		toSerialize["config"] = o.Config
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	if o.AddTags != nil {
		toSerialize["addTags"] = o.AddTags
	}
	if o.RemoveTags != nil {
		toSerialize["removeTags"] = o.RemoveTags
	}
	return json.Marshal(toSerialize)
}

type NullableVirtualImageUpdate struct {
	value *VirtualImageUpdate
	isSet bool
}

func (v NullableVirtualImageUpdate) Get() *VirtualImageUpdate {
	return v.value
}

func (v *NullableVirtualImageUpdate) Set(val *VirtualImageUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableVirtualImageUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableVirtualImageUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVirtualImageUpdate(val *VirtualImageUpdate) *NullableVirtualImageUpdate {
	return &NullableVirtualImageUpdate{value: val, isSet: true}
}

func (v NullableVirtualImageUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVirtualImageUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


