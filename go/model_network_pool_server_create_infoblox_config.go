/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// NetworkPoolServerCreateInfobloxConfig struct for NetworkPoolServerCreateInfobloxConfig
type NetworkPoolServerCreateInfobloxConfig struct {
	// Inventory Existing
	InventoryExisting NullableString `json:"inventoryExisting,omitempty"`
	// Extra Attributes
	ExtraAttributes NullableString `json:"extraAttributes,omitempty"`
}

// NewNetworkPoolServerCreateInfobloxConfig instantiates a new NetworkPoolServerCreateInfobloxConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkPoolServerCreateInfobloxConfig() *NetworkPoolServerCreateInfobloxConfig {
	this := NetworkPoolServerCreateInfobloxConfig{}
	var inventoryExisting INVENTORY_EXISTING = "off"
	this.InventoryExisting = *NewNullableString(&inventoryExisting)
	return &this
}

// NewNetworkPoolServerCreateInfobloxConfigWithDefaults instantiates a new NetworkPoolServerCreateInfobloxConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkPoolServerCreateInfobloxConfigWithDefaults() *NetworkPoolServerCreateInfobloxConfig {
	this := NetworkPoolServerCreateInfobloxConfig{}
	var inventoryExisting INVENTORY_EXISTING = "off"
	this.InventoryExisting = *NewNullableString(&inventoryExisting)
	return &this
}

// GetInventoryExisting returns the InventoryExisting field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetworkPoolServerCreateInfobloxConfig) GetInventoryExisting() string {
	if o == nil || o.InventoryExisting.Get() == nil {
		var ret string
		return ret
	}
	return *o.InventoryExisting.Get()
}

// GetInventoryExistingOk returns a tuple with the InventoryExisting field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetworkPoolServerCreateInfobloxConfig) GetInventoryExistingOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.InventoryExisting.Get(), o.InventoryExisting.IsSet()
}

// HasInventoryExisting returns a boolean if a field has been set.
func (o *NetworkPoolServerCreateInfobloxConfig) HasInventoryExisting() bool {
	if o != nil && o.InventoryExisting.IsSet() {
		return true
	}

	return false
}

// SetInventoryExisting gets a reference to the given NullableString and assigns it to the InventoryExisting field.
func (o *NetworkPoolServerCreateInfobloxConfig) SetInventoryExisting(v string) {
	o.InventoryExisting.Set(&v)
}
// SetInventoryExistingNil sets the value for InventoryExisting to be an explicit nil
func (o *NetworkPoolServerCreateInfobloxConfig) SetInventoryExistingNil() {
	o.InventoryExisting.Set(nil)
}

// UnsetInventoryExisting ensures that no value is present for InventoryExisting, not even an explicit nil
func (o *NetworkPoolServerCreateInfobloxConfig) UnsetInventoryExisting() {
	o.InventoryExisting.Unset()
}

// GetExtraAttributes returns the ExtraAttributes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetworkPoolServerCreateInfobloxConfig) GetExtraAttributes() string {
	if o == nil || o.ExtraAttributes.Get() == nil {
		var ret string
		return ret
	}
	return *o.ExtraAttributes.Get()
}

// GetExtraAttributesOk returns a tuple with the ExtraAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetworkPoolServerCreateInfobloxConfig) GetExtraAttributesOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ExtraAttributes.Get(), o.ExtraAttributes.IsSet()
}

// HasExtraAttributes returns a boolean if a field has been set.
func (o *NetworkPoolServerCreateInfobloxConfig) HasExtraAttributes() bool {
	if o != nil && o.ExtraAttributes.IsSet() {
		return true
	}

	return false
}

// SetExtraAttributes gets a reference to the given NullableString and assigns it to the ExtraAttributes field.
func (o *NetworkPoolServerCreateInfobloxConfig) SetExtraAttributes(v string) {
	o.ExtraAttributes.Set(&v)
}
// SetExtraAttributesNil sets the value for ExtraAttributes to be an explicit nil
func (o *NetworkPoolServerCreateInfobloxConfig) SetExtraAttributesNil() {
	o.ExtraAttributes.Set(nil)
}

// UnsetExtraAttributes ensures that no value is present for ExtraAttributes, not even an explicit nil
func (o *NetworkPoolServerCreateInfobloxConfig) UnsetExtraAttributes() {
	o.ExtraAttributes.Unset()
}

func (o NetworkPoolServerCreateInfobloxConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.InventoryExisting.IsSet() {
		toSerialize["inventoryExisting"] = o.InventoryExisting.Get()
	}
	if o.ExtraAttributes.IsSet() {
		toSerialize["extraAttributes"] = o.ExtraAttributes.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableNetworkPoolServerCreateInfobloxConfig struct {
	value *NetworkPoolServerCreateInfobloxConfig
	isSet bool
}

func (v NullableNetworkPoolServerCreateInfobloxConfig) Get() *NetworkPoolServerCreateInfobloxConfig {
	return v.value
}

func (v *NullableNetworkPoolServerCreateInfobloxConfig) Set(val *NetworkPoolServerCreateInfobloxConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkPoolServerCreateInfobloxConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkPoolServerCreateInfobloxConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkPoolServerCreateInfobloxConfig(val *NetworkPoolServerCreateInfobloxConfig) *NullableNetworkPoolServerCreateInfobloxConfig {
	return &NullableNetworkPoolServerCreateInfobloxConfig{value: val, isSet: true}
}

func (v NullableNetworkPoolServerCreateInfobloxConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkPoolServerCreateInfobloxConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


