/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// HealthRabbit struct for HealthRabbit
type HealthRabbit struct {
	Success *bool `json:"success,omitempty"`
	BusyQueues []map[string]interface{} `json:"busyQueues,omitempty"`
	ErrorQueues []map[string]interface{} `json:"errorQueues,omitempty"`
	Status *string `json:"status,omitempty"`
	Queues *[]HealthRabbitQueues `json:"queues,omitempty"`
}

// NewHealthRabbit instantiates a new HealthRabbit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHealthRabbit() *HealthRabbit {
	this := HealthRabbit{}
	return &this
}

// NewHealthRabbitWithDefaults instantiates a new HealthRabbit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHealthRabbitWithDefaults() *HealthRabbit {
	this := HealthRabbit{}
	return &this
}

// GetSuccess returns the Success field value if set, zero value otherwise.
func (o *HealthRabbit) GetSuccess() bool {
	if o == nil || o.Success == nil {
		var ret bool
		return ret
	}
	return *o.Success
}

// GetSuccessOk returns a tuple with the Success field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HealthRabbit) GetSuccessOk() (*bool, bool) {
	if o == nil || o.Success == nil {
		return nil, false
	}
	return o.Success, true
}

// HasSuccess returns a boolean if a field has been set.
func (o *HealthRabbit) HasSuccess() bool {
	if o != nil && o.Success != nil {
		return true
	}

	return false
}

// SetSuccess gets a reference to the given bool and assigns it to the Success field.
func (o *HealthRabbit) SetSuccess(v bool) {
	o.Success = &v
}

// GetBusyQueues returns the BusyQueues field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HealthRabbit) GetBusyQueues() []map[string]interface{} {
	if o == nil  {
		var ret []map[string]interface{}
		return ret
	}
	return o.BusyQueues
}

// GetBusyQueuesOk returns a tuple with the BusyQueues field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HealthRabbit) GetBusyQueuesOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.BusyQueues == nil {
		return nil, false
	}
	return &o.BusyQueues, true
}

// HasBusyQueues returns a boolean if a field has been set.
func (o *HealthRabbit) HasBusyQueues() bool {
	if o != nil && o.BusyQueues != nil {
		return true
	}

	return false
}

// SetBusyQueues gets a reference to the given []map[string]interface{} and assigns it to the BusyQueues field.
func (o *HealthRabbit) SetBusyQueues(v []map[string]interface{}) {
	o.BusyQueues = v
}

// GetErrorQueues returns the ErrorQueues field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HealthRabbit) GetErrorQueues() []map[string]interface{} {
	if o == nil  {
		var ret []map[string]interface{}
		return ret
	}
	return o.ErrorQueues
}

// GetErrorQueuesOk returns a tuple with the ErrorQueues field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HealthRabbit) GetErrorQueuesOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.ErrorQueues == nil {
		return nil, false
	}
	return &o.ErrorQueues, true
}

// HasErrorQueues returns a boolean if a field has been set.
func (o *HealthRabbit) HasErrorQueues() bool {
	if o != nil && o.ErrorQueues != nil {
		return true
	}

	return false
}

// SetErrorQueues gets a reference to the given []map[string]interface{} and assigns it to the ErrorQueues field.
func (o *HealthRabbit) SetErrorQueues(v []map[string]interface{}) {
	o.ErrorQueues = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *HealthRabbit) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HealthRabbit) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *HealthRabbit) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *HealthRabbit) SetStatus(v string) {
	o.Status = &v
}

// GetQueues returns the Queues field value if set, zero value otherwise.
func (o *HealthRabbit) GetQueues() []HealthRabbitQueues {
	if o == nil || o.Queues == nil {
		var ret []HealthRabbitQueues
		return ret
	}
	return *o.Queues
}

// GetQueuesOk returns a tuple with the Queues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HealthRabbit) GetQueuesOk() (*[]HealthRabbitQueues, bool) {
	if o == nil || o.Queues == nil {
		return nil, false
	}
	return o.Queues, true
}

// HasQueues returns a boolean if a field has been set.
func (o *HealthRabbit) HasQueues() bool {
	if o != nil && o.Queues != nil {
		return true
	}

	return false
}

// SetQueues gets a reference to the given []HealthRabbitQueues and assigns it to the Queues field.
func (o *HealthRabbit) SetQueues(v []HealthRabbitQueues) {
	o.Queues = &v
}

func (o HealthRabbit) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Success != nil {
		toSerialize["success"] = o.Success
	}
	if o.BusyQueues != nil {
		toSerialize["busyQueues"] = o.BusyQueues
	}
	if o.ErrorQueues != nil {
		toSerialize["errorQueues"] = o.ErrorQueues
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.Queues != nil {
		toSerialize["queues"] = o.Queues
	}
	return json.Marshal(toSerialize)
}

type NullableHealthRabbit struct {
	value *HealthRabbit
	isSet bool
}

func (v NullableHealthRabbit) Get() *HealthRabbit {
	return v.value
}

func (v *NullableHealthRabbit) Set(val *HealthRabbit) {
	v.value = val
	v.isSet = true
}

func (v NullableHealthRabbit) IsSet() bool {
	return v.isSet
}

func (v *NullableHealthRabbit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHealthRabbit(val *HealthRabbit) *NullableHealthRabbit {
	return &NullableHealthRabbit{value: val, isSet: true}
}

func (v NullableHealthRabbit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHealthRabbit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


