/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Setup struct for Setup
type Setup struct {
	Success *bool `json:"success,omitempty"`
	// Morpheus build version that the server is running.
	BuildVersion *string `json:"buildVersion,omitempty"`
	// The Appliance Server URL as defined under Appliance Settings.
	ApplianceUrl *string `json:"applianceUrl,omitempty"`
	// Flag to determine if the appliance has been setup, only true when appliance is a fresh install and has not been initialized.
	SetupNeeded *bool `json:"setupNeeded,omitempty"`
}

// NewSetup instantiates a new Setup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSetup() *Setup {
	this := Setup{}
	return &this
}

// NewSetupWithDefaults instantiates a new Setup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSetupWithDefaults() *Setup {
	this := Setup{}
	return &this
}

// GetSuccess returns the Success field value if set, zero value otherwise.
func (o *Setup) GetSuccess() bool {
	if o == nil || o.Success == nil {
		var ret bool
		return ret
	}
	return *o.Success
}

// GetSuccessOk returns a tuple with the Success field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Setup) GetSuccessOk() (*bool, bool) {
	if o == nil || o.Success == nil {
		return nil, false
	}
	return o.Success, true
}

// HasSuccess returns a boolean if a field has been set.
func (o *Setup) HasSuccess() bool {
	if o != nil && o.Success != nil {
		return true
	}

	return false
}

// SetSuccess gets a reference to the given bool and assigns it to the Success field.
func (o *Setup) SetSuccess(v bool) {
	o.Success = &v
}

// GetBuildVersion returns the BuildVersion field value if set, zero value otherwise.
func (o *Setup) GetBuildVersion() string {
	if o == nil || o.BuildVersion == nil {
		var ret string
		return ret
	}
	return *o.BuildVersion
}

// GetBuildVersionOk returns a tuple with the BuildVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Setup) GetBuildVersionOk() (*string, bool) {
	if o == nil || o.BuildVersion == nil {
		return nil, false
	}
	return o.BuildVersion, true
}

// HasBuildVersion returns a boolean if a field has been set.
func (o *Setup) HasBuildVersion() bool {
	if o != nil && o.BuildVersion != nil {
		return true
	}

	return false
}

// SetBuildVersion gets a reference to the given string and assigns it to the BuildVersion field.
func (o *Setup) SetBuildVersion(v string) {
	o.BuildVersion = &v
}

// GetApplianceUrl returns the ApplianceUrl field value if set, zero value otherwise.
func (o *Setup) GetApplianceUrl() string {
	if o == nil || o.ApplianceUrl == nil {
		var ret string
		return ret
	}
	return *o.ApplianceUrl
}

// GetApplianceUrlOk returns a tuple with the ApplianceUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Setup) GetApplianceUrlOk() (*string, bool) {
	if o == nil || o.ApplianceUrl == nil {
		return nil, false
	}
	return o.ApplianceUrl, true
}

// HasApplianceUrl returns a boolean if a field has been set.
func (o *Setup) HasApplianceUrl() bool {
	if o != nil && o.ApplianceUrl != nil {
		return true
	}

	return false
}

// SetApplianceUrl gets a reference to the given string and assigns it to the ApplianceUrl field.
func (o *Setup) SetApplianceUrl(v string) {
	o.ApplianceUrl = &v
}

// GetSetupNeeded returns the SetupNeeded field value if set, zero value otherwise.
func (o *Setup) GetSetupNeeded() bool {
	if o == nil || o.SetupNeeded == nil {
		var ret bool
		return ret
	}
	return *o.SetupNeeded
}

// GetSetupNeededOk returns a tuple with the SetupNeeded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Setup) GetSetupNeededOk() (*bool, bool) {
	if o == nil || o.SetupNeeded == nil {
		return nil, false
	}
	return o.SetupNeeded, true
}

// HasSetupNeeded returns a boolean if a field has been set.
func (o *Setup) HasSetupNeeded() bool {
	if o != nil && o.SetupNeeded != nil {
		return true
	}

	return false
}

// SetSetupNeeded gets a reference to the given bool and assigns it to the SetupNeeded field.
func (o *Setup) SetSetupNeeded(v bool) {
	o.SetupNeeded = &v
}

func (o Setup) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Success != nil {
		toSerialize["success"] = o.Success
	}
	if o.BuildVersion != nil {
		toSerialize["buildVersion"] = o.BuildVersion
	}
	if o.ApplianceUrl != nil {
		toSerialize["applianceUrl"] = o.ApplianceUrl
	}
	if o.SetupNeeded != nil {
		toSerialize["setupNeeded"] = o.SetupNeeded
	}
	return json.Marshal(toSerialize)
}

type NullableSetup struct {
	value *Setup
	isSet bool
}

func (v NullableSetup) Get() *Setup {
	return v.value
}

func (v *NullableSetup) Set(val *Setup) {
	v.value = val
	v.isSet = true
}

func (v NullableSetup) IsSet() bool {
	return v.isSet
}

func (v *NullableSetup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSetup(val *Setup) *NullableSetup {
	return &NullableSetup{value: val, isSet: true}
}

func (v NullableSetup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSetup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


