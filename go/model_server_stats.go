/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// ServerStats struct for ServerStats
type ServerStats struct {
	Ts *time.Time `json:"ts,omitempty"`
	FreeSwap *int64 `json:"freeSwap,omitempty"`
	UsedSwap *int64 `json:"usedSwap,omitempty"`
	CpuIdleTime *int64 `json:"cpuIdleTime,omitempty"`
	CpuSystemTime *int64 `json:"cpuSystemTime,omitempty"`
	CpuUserTime *int64 `json:"cpuUserTime,omitempty"`
	CpuTotalTime *int64 `json:"cpuTotalTime,omitempty"`
	MaxMemory *int64 `json:"maxMemory,omitempty"`
	UsedMemory *int64 `json:"usedMemory,omitempty"`
	MaxStorage *int64 `json:"maxStorage,omitempty"`
	UsedStorage *int64 `json:"usedStorage,omitempty"`
	ReservedStorage *int64 `json:"reservedStorage,omitempty"`
	CpuUsage *float32 `json:"cpuUsage,omitempty"`
	FreeMemory *int64 `json:"freeMemory,omitempty"`
	NetTxUsage *int64 `json:"netTxUsage,omitempty"`
	NetRxUsage *int64 `json:"netRxUsage,omitempty"`
	NetworkBandwidth *int64 `json:"networkBandwidth,omitempty"`
}

// NewServerStats instantiates a new ServerStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerStats() *ServerStats {
	this := ServerStats{}
	return &this
}

// NewServerStatsWithDefaults instantiates a new ServerStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerStatsWithDefaults() *ServerStats {
	this := ServerStats{}
	return &this
}

// GetTs returns the Ts field value if set, zero value otherwise.
func (o *ServerStats) GetTs() time.Time {
	if o == nil || o.Ts == nil {
		var ret time.Time
		return ret
	}
	return *o.Ts
}

// GetTsOk returns a tuple with the Ts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerStats) GetTsOk() (*time.Time, bool) {
	if o == nil || o.Ts == nil {
		return nil, false
	}
	return o.Ts, true
}

// HasTs returns a boolean if a field has been set.
func (o *ServerStats) HasTs() bool {
	if o != nil && o.Ts != nil {
		return true
	}

	return false
}

// SetTs gets a reference to the given time.Time and assigns it to the Ts field.
func (o *ServerStats) SetTs(v time.Time) {
	o.Ts = &v
}

// GetFreeSwap returns the FreeSwap field value if set, zero value otherwise.
func (o *ServerStats) GetFreeSwap() int64 {
	if o == nil || o.FreeSwap == nil {
		var ret int64
		return ret
	}
	return *o.FreeSwap
}

// GetFreeSwapOk returns a tuple with the FreeSwap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerStats) GetFreeSwapOk() (*int64, bool) {
	if o == nil || o.FreeSwap == nil {
		return nil, false
	}
	return o.FreeSwap, true
}

// HasFreeSwap returns a boolean if a field has been set.
func (o *ServerStats) HasFreeSwap() bool {
	if o != nil && o.FreeSwap != nil {
		return true
	}

	return false
}

// SetFreeSwap gets a reference to the given int64 and assigns it to the FreeSwap field.
func (o *ServerStats) SetFreeSwap(v int64) {
	o.FreeSwap = &v
}

// GetUsedSwap returns the UsedSwap field value if set, zero value otherwise.
func (o *ServerStats) GetUsedSwap() int64 {
	if o == nil || o.UsedSwap == nil {
		var ret int64
		return ret
	}
	return *o.UsedSwap
}

// GetUsedSwapOk returns a tuple with the UsedSwap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerStats) GetUsedSwapOk() (*int64, bool) {
	if o == nil || o.UsedSwap == nil {
		return nil, false
	}
	return o.UsedSwap, true
}

// HasUsedSwap returns a boolean if a field has been set.
func (o *ServerStats) HasUsedSwap() bool {
	if o != nil && o.UsedSwap != nil {
		return true
	}

	return false
}

// SetUsedSwap gets a reference to the given int64 and assigns it to the UsedSwap field.
func (o *ServerStats) SetUsedSwap(v int64) {
	o.UsedSwap = &v
}

// GetCpuIdleTime returns the CpuIdleTime field value if set, zero value otherwise.
func (o *ServerStats) GetCpuIdleTime() int64 {
	if o == nil || o.CpuIdleTime == nil {
		var ret int64
		return ret
	}
	return *o.CpuIdleTime
}

// GetCpuIdleTimeOk returns a tuple with the CpuIdleTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerStats) GetCpuIdleTimeOk() (*int64, bool) {
	if o == nil || o.CpuIdleTime == nil {
		return nil, false
	}
	return o.CpuIdleTime, true
}

// HasCpuIdleTime returns a boolean if a field has been set.
func (o *ServerStats) HasCpuIdleTime() bool {
	if o != nil && o.CpuIdleTime != nil {
		return true
	}

	return false
}

// SetCpuIdleTime gets a reference to the given int64 and assigns it to the CpuIdleTime field.
func (o *ServerStats) SetCpuIdleTime(v int64) {
	o.CpuIdleTime = &v
}

// GetCpuSystemTime returns the CpuSystemTime field value if set, zero value otherwise.
func (o *ServerStats) GetCpuSystemTime() int64 {
	if o == nil || o.CpuSystemTime == nil {
		var ret int64
		return ret
	}
	return *o.CpuSystemTime
}

// GetCpuSystemTimeOk returns a tuple with the CpuSystemTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerStats) GetCpuSystemTimeOk() (*int64, bool) {
	if o == nil || o.CpuSystemTime == nil {
		return nil, false
	}
	return o.CpuSystemTime, true
}

// HasCpuSystemTime returns a boolean if a field has been set.
func (o *ServerStats) HasCpuSystemTime() bool {
	if o != nil && o.CpuSystemTime != nil {
		return true
	}

	return false
}

// SetCpuSystemTime gets a reference to the given int64 and assigns it to the CpuSystemTime field.
func (o *ServerStats) SetCpuSystemTime(v int64) {
	o.CpuSystemTime = &v
}

// GetCpuUserTime returns the CpuUserTime field value if set, zero value otherwise.
func (o *ServerStats) GetCpuUserTime() int64 {
	if o == nil || o.CpuUserTime == nil {
		var ret int64
		return ret
	}
	return *o.CpuUserTime
}

// GetCpuUserTimeOk returns a tuple with the CpuUserTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerStats) GetCpuUserTimeOk() (*int64, bool) {
	if o == nil || o.CpuUserTime == nil {
		return nil, false
	}
	return o.CpuUserTime, true
}

// HasCpuUserTime returns a boolean if a field has been set.
func (o *ServerStats) HasCpuUserTime() bool {
	if o != nil && o.CpuUserTime != nil {
		return true
	}

	return false
}

// SetCpuUserTime gets a reference to the given int64 and assigns it to the CpuUserTime field.
func (o *ServerStats) SetCpuUserTime(v int64) {
	o.CpuUserTime = &v
}

// GetCpuTotalTime returns the CpuTotalTime field value if set, zero value otherwise.
func (o *ServerStats) GetCpuTotalTime() int64 {
	if o == nil || o.CpuTotalTime == nil {
		var ret int64
		return ret
	}
	return *o.CpuTotalTime
}

// GetCpuTotalTimeOk returns a tuple with the CpuTotalTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerStats) GetCpuTotalTimeOk() (*int64, bool) {
	if o == nil || o.CpuTotalTime == nil {
		return nil, false
	}
	return o.CpuTotalTime, true
}

// HasCpuTotalTime returns a boolean if a field has been set.
func (o *ServerStats) HasCpuTotalTime() bool {
	if o != nil && o.CpuTotalTime != nil {
		return true
	}

	return false
}

// SetCpuTotalTime gets a reference to the given int64 and assigns it to the CpuTotalTime field.
func (o *ServerStats) SetCpuTotalTime(v int64) {
	o.CpuTotalTime = &v
}

// GetMaxMemory returns the MaxMemory field value if set, zero value otherwise.
func (o *ServerStats) GetMaxMemory() int64 {
	if o == nil || o.MaxMemory == nil {
		var ret int64
		return ret
	}
	return *o.MaxMemory
}

// GetMaxMemoryOk returns a tuple with the MaxMemory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerStats) GetMaxMemoryOk() (*int64, bool) {
	if o == nil || o.MaxMemory == nil {
		return nil, false
	}
	return o.MaxMemory, true
}

// HasMaxMemory returns a boolean if a field has been set.
func (o *ServerStats) HasMaxMemory() bool {
	if o != nil && o.MaxMemory != nil {
		return true
	}

	return false
}

// SetMaxMemory gets a reference to the given int64 and assigns it to the MaxMemory field.
func (o *ServerStats) SetMaxMemory(v int64) {
	o.MaxMemory = &v
}

// GetUsedMemory returns the UsedMemory field value if set, zero value otherwise.
func (o *ServerStats) GetUsedMemory() int64 {
	if o == nil || o.UsedMemory == nil {
		var ret int64
		return ret
	}
	return *o.UsedMemory
}

// GetUsedMemoryOk returns a tuple with the UsedMemory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerStats) GetUsedMemoryOk() (*int64, bool) {
	if o == nil || o.UsedMemory == nil {
		return nil, false
	}
	return o.UsedMemory, true
}

// HasUsedMemory returns a boolean if a field has been set.
func (o *ServerStats) HasUsedMemory() bool {
	if o != nil && o.UsedMemory != nil {
		return true
	}

	return false
}

// SetUsedMemory gets a reference to the given int64 and assigns it to the UsedMemory field.
func (o *ServerStats) SetUsedMemory(v int64) {
	o.UsedMemory = &v
}

// GetMaxStorage returns the MaxStorage field value if set, zero value otherwise.
func (o *ServerStats) GetMaxStorage() int64 {
	if o == nil || o.MaxStorage == nil {
		var ret int64
		return ret
	}
	return *o.MaxStorage
}

// GetMaxStorageOk returns a tuple with the MaxStorage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerStats) GetMaxStorageOk() (*int64, bool) {
	if o == nil || o.MaxStorage == nil {
		return nil, false
	}
	return o.MaxStorage, true
}

// HasMaxStorage returns a boolean if a field has been set.
func (o *ServerStats) HasMaxStorage() bool {
	if o != nil && o.MaxStorage != nil {
		return true
	}

	return false
}

// SetMaxStorage gets a reference to the given int64 and assigns it to the MaxStorage field.
func (o *ServerStats) SetMaxStorage(v int64) {
	o.MaxStorage = &v
}

// GetUsedStorage returns the UsedStorage field value if set, zero value otherwise.
func (o *ServerStats) GetUsedStorage() int64 {
	if o == nil || o.UsedStorage == nil {
		var ret int64
		return ret
	}
	return *o.UsedStorage
}

// GetUsedStorageOk returns a tuple with the UsedStorage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerStats) GetUsedStorageOk() (*int64, bool) {
	if o == nil || o.UsedStorage == nil {
		return nil, false
	}
	return o.UsedStorage, true
}

// HasUsedStorage returns a boolean if a field has been set.
func (o *ServerStats) HasUsedStorage() bool {
	if o != nil && o.UsedStorage != nil {
		return true
	}

	return false
}

// SetUsedStorage gets a reference to the given int64 and assigns it to the UsedStorage field.
func (o *ServerStats) SetUsedStorage(v int64) {
	o.UsedStorage = &v
}

// GetReservedStorage returns the ReservedStorage field value if set, zero value otherwise.
func (o *ServerStats) GetReservedStorage() int64 {
	if o == nil || o.ReservedStorage == nil {
		var ret int64
		return ret
	}
	return *o.ReservedStorage
}

// GetReservedStorageOk returns a tuple with the ReservedStorage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerStats) GetReservedStorageOk() (*int64, bool) {
	if o == nil || o.ReservedStorage == nil {
		return nil, false
	}
	return o.ReservedStorage, true
}

// HasReservedStorage returns a boolean if a field has been set.
func (o *ServerStats) HasReservedStorage() bool {
	if o != nil && o.ReservedStorage != nil {
		return true
	}

	return false
}

// SetReservedStorage gets a reference to the given int64 and assigns it to the ReservedStorage field.
func (o *ServerStats) SetReservedStorage(v int64) {
	o.ReservedStorage = &v
}

// GetCpuUsage returns the CpuUsage field value if set, zero value otherwise.
func (o *ServerStats) GetCpuUsage() float32 {
	if o == nil || o.CpuUsage == nil {
		var ret float32
		return ret
	}
	return *o.CpuUsage
}

// GetCpuUsageOk returns a tuple with the CpuUsage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerStats) GetCpuUsageOk() (*float32, bool) {
	if o == nil || o.CpuUsage == nil {
		return nil, false
	}
	return o.CpuUsage, true
}

// HasCpuUsage returns a boolean if a field has been set.
func (o *ServerStats) HasCpuUsage() bool {
	if o != nil && o.CpuUsage != nil {
		return true
	}

	return false
}

// SetCpuUsage gets a reference to the given float32 and assigns it to the CpuUsage field.
func (o *ServerStats) SetCpuUsage(v float32) {
	o.CpuUsage = &v
}

// GetFreeMemory returns the FreeMemory field value if set, zero value otherwise.
func (o *ServerStats) GetFreeMemory() int64 {
	if o == nil || o.FreeMemory == nil {
		var ret int64
		return ret
	}
	return *o.FreeMemory
}

// GetFreeMemoryOk returns a tuple with the FreeMemory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerStats) GetFreeMemoryOk() (*int64, bool) {
	if o == nil || o.FreeMemory == nil {
		return nil, false
	}
	return o.FreeMemory, true
}

// HasFreeMemory returns a boolean if a field has been set.
func (o *ServerStats) HasFreeMemory() bool {
	if o != nil && o.FreeMemory != nil {
		return true
	}

	return false
}

// SetFreeMemory gets a reference to the given int64 and assigns it to the FreeMemory field.
func (o *ServerStats) SetFreeMemory(v int64) {
	o.FreeMemory = &v
}

// GetNetTxUsage returns the NetTxUsage field value if set, zero value otherwise.
func (o *ServerStats) GetNetTxUsage() int64 {
	if o == nil || o.NetTxUsage == nil {
		var ret int64
		return ret
	}
	return *o.NetTxUsage
}

// GetNetTxUsageOk returns a tuple with the NetTxUsage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerStats) GetNetTxUsageOk() (*int64, bool) {
	if o == nil || o.NetTxUsage == nil {
		return nil, false
	}
	return o.NetTxUsage, true
}

// HasNetTxUsage returns a boolean if a field has been set.
func (o *ServerStats) HasNetTxUsage() bool {
	if o != nil && o.NetTxUsage != nil {
		return true
	}

	return false
}

// SetNetTxUsage gets a reference to the given int64 and assigns it to the NetTxUsage field.
func (o *ServerStats) SetNetTxUsage(v int64) {
	o.NetTxUsage = &v
}

// GetNetRxUsage returns the NetRxUsage field value if set, zero value otherwise.
func (o *ServerStats) GetNetRxUsage() int64 {
	if o == nil || o.NetRxUsage == nil {
		var ret int64
		return ret
	}
	return *o.NetRxUsage
}

// GetNetRxUsageOk returns a tuple with the NetRxUsage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerStats) GetNetRxUsageOk() (*int64, bool) {
	if o == nil || o.NetRxUsage == nil {
		return nil, false
	}
	return o.NetRxUsage, true
}

// HasNetRxUsage returns a boolean if a field has been set.
func (o *ServerStats) HasNetRxUsage() bool {
	if o != nil && o.NetRxUsage != nil {
		return true
	}

	return false
}

// SetNetRxUsage gets a reference to the given int64 and assigns it to the NetRxUsage field.
func (o *ServerStats) SetNetRxUsage(v int64) {
	o.NetRxUsage = &v
}

// GetNetworkBandwidth returns the NetworkBandwidth field value if set, zero value otherwise.
func (o *ServerStats) GetNetworkBandwidth() int64 {
	if o == nil || o.NetworkBandwidth == nil {
		var ret int64
		return ret
	}
	return *o.NetworkBandwidth
}

// GetNetworkBandwidthOk returns a tuple with the NetworkBandwidth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerStats) GetNetworkBandwidthOk() (*int64, bool) {
	if o == nil || o.NetworkBandwidth == nil {
		return nil, false
	}
	return o.NetworkBandwidth, true
}

// HasNetworkBandwidth returns a boolean if a field has been set.
func (o *ServerStats) HasNetworkBandwidth() bool {
	if o != nil && o.NetworkBandwidth != nil {
		return true
	}

	return false
}

// SetNetworkBandwidth gets a reference to the given int64 and assigns it to the NetworkBandwidth field.
func (o *ServerStats) SetNetworkBandwidth(v int64) {
	o.NetworkBandwidth = &v
}

func (o ServerStats) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Ts != nil {
		toSerialize["ts"] = o.Ts
	}
	if o.FreeSwap != nil {
		toSerialize["freeSwap"] = o.FreeSwap
	}
	if o.UsedSwap != nil {
		toSerialize["usedSwap"] = o.UsedSwap
	}
	if o.CpuIdleTime != nil {
		toSerialize["cpuIdleTime"] = o.CpuIdleTime
	}
	if o.CpuSystemTime != nil {
		toSerialize["cpuSystemTime"] = o.CpuSystemTime
	}
	if o.CpuUserTime != nil {
		toSerialize["cpuUserTime"] = o.CpuUserTime
	}
	if o.CpuTotalTime != nil {
		toSerialize["cpuTotalTime"] = o.CpuTotalTime
	}
	if o.MaxMemory != nil {
		toSerialize["maxMemory"] = o.MaxMemory
	}
	if o.UsedMemory != nil {
		toSerialize["usedMemory"] = o.UsedMemory
	}
	if o.MaxStorage != nil {
		toSerialize["maxStorage"] = o.MaxStorage
	}
	if o.UsedStorage != nil {
		toSerialize["usedStorage"] = o.UsedStorage
	}
	if o.ReservedStorage != nil {
		toSerialize["reservedStorage"] = o.ReservedStorage
	}
	if o.CpuUsage != nil {
		toSerialize["cpuUsage"] = o.CpuUsage
	}
	if o.FreeMemory != nil {
		toSerialize["freeMemory"] = o.FreeMemory
	}
	if o.NetTxUsage != nil {
		toSerialize["netTxUsage"] = o.NetTxUsage
	}
	if o.NetRxUsage != nil {
		toSerialize["netRxUsage"] = o.NetRxUsage
	}
	if o.NetworkBandwidth != nil {
		toSerialize["networkBandwidth"] = o.NetworkBandwidth
	}
	return json.Marshal(toSerialize)
}

type NullableServerStats struct {
	value *ServerStats
	isSet bool
}

func (v NullableServerStats) Get() *ServerStats {
	return v.value
}

func (v *NullableServerStats) Set(val *ServerStats) {
	v.value = val
	v.isSet = true
}

func (v NullableServerStats) IsSet() bool {
	return v.isSet
}

func (v *NullableServerStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerStats(val *ServerStats) *NullableServerStats {
	return &NullableServerStats{value: val, isSet: true}
}

func (v NullableServerStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


