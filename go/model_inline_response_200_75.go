/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InlineResponse20075 struct for InlineResponse20075
type InlineResponse20075 struct {
	OptionType *OptionType `json:"optionType,omitempty"`
}

// NewInlineResponse20075 instantiates a new InlineResponse20075 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse20075() *InlineResponse20075 {
	this := InlineResponse20075{}
	return &this
}

// NewInlineResponse20075WithDefaults instantiates a new InlineResponse20075 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse20075WithDefaults() *InlineResponse20075 {
	this := InlineResponse20075{}
	return &this
}

// GetOptionType returns the OptionType field value if set, zero value otherwise.
func (o *InlineResponse20075) GetOptionType() OptionType {
	if o == nil || o.OptionType == nil {
		var ret OptionType
		return ret
	}
	return *o.OptionType
}

// GetOptionTypeOk returns a tuple with the OptionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse20075) GetOptionTypeOk() (*OptionType, bool) {
	if o == nil || o.OptionType == nil {
		return nil, false
	}
	return o.OptionType, true
}

// HasOptionType returns a boolean if a field has been set.
func (o *InlineResponse20075) HasOptionType() bool {
	if o != nil && o.OptionType != nil {
		return true
	}

	return false
}

// SetOptionType gets a reference to the given OptionType and assigns it to the OptionType field.
func (o *InlineResponse20075) SetOptionType(v OptionType) {
	o.OptionType = &v
}

func (o InlineResponse20075) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.OptionType != nil {
		toSerialize["optionType"] = o.OptionType
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse20075 struct {
	value *InlineResponse20075
	isSet bool
}

func (v NullableInlineResponse20075) Get() *InlineResponse20075 {
	return v.value
}

func (v *NullableInlineResponse20075) Set(val *InlineResponse20075) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse20075) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse20075) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse20075(val *InlineResponse20075) *NullableInlineResponse20075 {
	return &NullableInlineResponse20075{value: val, isSet: true}
}

func (v NullableInlineResponse20075) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse20075) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


