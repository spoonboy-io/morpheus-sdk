/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// Incident struct for Incident
type Incident struct {
	Id *int64 `json:"id,omitempty"`
	Account *ApiBlueprintsIdUpdatePermissionsResourcePermissionSites `json:"account,omitempty"`
	App NullableString `json:"app,omitempty"`
	AutoClose *bool `json:"autoClose,omitempty"`
	ChannelId *string `json:"channelId,omitempty"`
	CheckGroups *[]InlineResponse20040AppDeployInstance `json:"checkGroups,omitempty"`
	Checks *[]Check `json:"checks,omitempty"`
	Comment NullableString `json:"comment,omitempty"`
	DisplayName *string `json:"displayName,omitempty"`
	Duration NullableString `json:"duration,omitempty"`
	EndDate NullableTime `json:"endDate,omitempty"`
	InUptime *bool `json:"inUptime,omitempty"`
	Muted *bool `json:"muted,omitempty"`
	LastCheckTime *time.Time `json:"lastCheckTime,omitempty"`
	LastError *string `json:"lastError,omitempty"`
	LastMessage NullableString `json:"lastMessage,omitempty"`
	Name *string `json:"name,omitempty"`
	Resolution NullableString `json:"resolution,omitempty"`
	Severity *string `json:"severity,omitempty"`
	SeverityId *int64 `json:"severityId,omitempty"`
	StartDate *time.Time `json:"startDate,omitempty"`
	Status *string `json:"status,omitempty"`
	Visibility *string `json:"visibility,omitempty"`
}

// NewIncident instantiates a new Incident object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIncident() *Incident {
	this := Incident{}
	return &this
}

// NewIncidentWithDefaults instantiates a new Incident object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIncidentWithDefaults() *Incident {
	this := Incident{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Incident) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Incident) GetIdOk() (*int64, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Incident) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *Incident) SetId(v int64) {
	o.Id = &v
}

// GetAccount returns the Account field value if set, zero value otherwise.
func (o *Incident) GetAccount() ApiBlueprintsIdUpdatePermissionsResourcePermissionSites {
	if o == nil || o.Account == nil {
		var ret ApiBlueprintsIdUpdatePermissionsResourcePermissionSites
		return ret
	}
	return *o.Account
}

// GetAccountOk returns a tuple with the Account field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Incident) GetAccountOk() (*ApiBlueprintsIdUpdatePermissionsResourcePermissionSites, bool) {
	if o == nil || o.Account == nil {
		return nil, false
	}
	return o.Account, true
}

// HasAccount returns a boolean if a field has been set.
func (o *Incident) HasAccount() bool {
	if o != nil && o.Account != nil {
		return true
	}

	return false
}

// SetAccount gets a reference to the given ApiBlueprintsIdUpdatePermissionsResourcePermissionSites and assigns it to the Account field.
func (o *Incident) SetAccount(v ApiBlueprintsIdUpdatePermissionsResourcePermissionSites) {
	o.Account = &v
}

// GetApp returns the App field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Incident) GetApp() string {
	if o == nil || o.App.Get() == nil {
		var ret string
		return ret
	}
	return *o.App.Get()
}

// GetAppOk returns a tuple with the App field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Incident) GetAppOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.App.Get(), o.App.IsSet()
}

// HasApp returns a boolean if a field has been set.
func (o *Incident) HasApp() bool {
	if o != nil && o.App.IsSet() {
		return true
	}

	return false
}

// SetApp gets a reference to the given NullableString and assigns it to the App field.
func (o *Incident) SetApp(v string) {
	o.App.Set(&v)
}
// SetAppNil sets the value for App to be an explicit nil
func (o *Incident) SetAppNil() {
	o.App.Set(nil)
}

// UnsetApp ensures that no value is present for App, not even an explicit nil
func (o *Incident) UnsetApp() {
	o.App.Unset()
}

// GetAutoClose returns the AutoClose field value if set, zero value otherwise.
func (o *Incident) GetAutoClose() bool {
	if o == nil || o.AutoClose == nil {
		var ret bool
		return ret
	}
	return *o.AutoClose
}

// GetAutoCloseOk returns a tuple with the AutoClose field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Incident) GetAutoCloseOk() (*bool, bool) {
	if o == nil || o.AutoClose == nil {
		return nil, false
	}
	return o.AutoClose, true
}

// HasAutoClose returns a boolean if a field has been set.
func (o *Incident) HasAutoClose() bool {
	if o != nil && o.AutoClose != nil {
		return true
	}

	return false
}

// SetAutoClose gets a reference to the given bool and assigns it to the AutoClose field.
func (o *Incident) SetAutoClose(v bool) {
	o.AutoClose = &v
}

// GetChannelId returns the ChannelId field value if set, zero value otherwise.
func (o *Incident) GetChannelId() string {
	if o == nil || o.ChannelId == nil {
		var ret string
		return ret
	}
	return *o.ChannelId
}

// GetChannelIdOk returns a tuple with the ChannelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Incident) GetChannelIdOk() (*string, bool) {
	if o == nil || o.ChannelId == nil {
		return nil, false
	}
	return o.ChannelId, true
}

// HasChannelId returns a boolean if a field has been set.
func (o *Incident) HasChannelId() bool {
	if o != nil && o.ChannelId != nil {
		return true
	}

	return false
}

// SetChannelId gets a reference to the given string and assigns it to the ChannelId field.
func (o *Incident) SetChannelId(v string) {
	o.ChannelId = &v
}

// GetCheckGroups returns the CheckGroups field value if set, zero value otherwise.
func (o *Incident) GetCheckGroups() []InlineResponse20040AppDeployInstance {
	if o == nil || o.CheckGroups == nil {
		var ret []InlineResponse20040AppDeployInstance
		return ret
	}
	return *o.CheckGroups
}

// GetCheckGroupsOk returns a tuple with the CheckGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Incident) GetCheckGroupsOk() (*[]InlineResponse20040AppDeployInstance, bool) {
	if o == nil || o.CheckGroups == nil {
		return nil, false
	}
	return o.CheckGroups, true
}

// HasCheckGroups returns a boolean if a field has been set.
func (o *Incident) HasCheckGroups() bool {
	if o != nil && o.CheckGroups != nil {
		return true
	}

	return false
}

// SetCheckGroups gets a reference to the given []InlineResponse20040AppDeployInstance and assigns it to the CheckGroups field.
func (o *Incident) SetCheckGroups(v []InlineResponse20040AppDeployInstance) {
	o.CheckGroups = &v
}

// GetChecks returns the Checks field value if set, zero value otherwise.
func (o *Incident) GetChecks() []Check {
	if o == nil || o.Checks == nil {
		var ret []Check
		return ret
	}
	return *o.Checks
}

// GetChecksOk returns a tuple with the Checks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Incident) GetChecksOk() (*[]Check, bool) {
	if o == nil || o.Checks == nil {
		return nil, false
	}
	return o.Checks, true
}

// HasChecks returns a boolean if a field has been set.
func (o *Incident) HasChecks() bool {
	if o != nil && o.Checks != nil {
		return true
	}

	return false
}

// SetChecks gets a reference to the given []Check and assigns it to the Checks field.
func (o *Incident) SetChecks(v []Check) {
	o.Checks = &v
}

// GetComment returns the Comment field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Incident) GetComment() string {
	if o == nil || o.Comment.Get() == nil {
		var ret string
		return ret
	}
	return *o.Comment.Get()
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Incident) GetCommentOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Comment.Get(), o.Comment.IsSet()
}

// HasComment returns a boolean if a field has been set.
func (o *Incident) HasComment() bool {
	if o != nil && o.Comment.IsSet() {
		return true
	}

	return false
}

// SetComment gets a reference to the given NullableString and assigns it to the Comment field.
func (o *Incident) SetComment(v string) {
	o.Comment.Set(&v)
}
// SetCommentNil sets the value for Comment to be an explicit nil
func (o *Incident) SetCommentNil() {
	o.Comment.Set(nil)
}

// UnsetComment ensures that no value is present for Comment, not even an explicit nil
func (o *Incident) UnsetComment() {
	o.Comment.Unset()
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *Incident) GetDisplayName() string {
	if o == nil || o.DisplayName == nil {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Incident) GetDisplayNameOk() (*string, bool) {
	if o == nil || o.DisplayName == nil {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *Incident) HasDisplayName() bool {
	if o != nil && o.DisplayName != nil {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *Incident) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetDuration returns the Duration field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Incident) GetDuration() string {
	if o == nil || o.Duration.Get() == nil {
		var ret string
		return ret
	}
	return *o.Duration.Get()
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Incident) GetDurationOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Duration.Get(), o.Duration.IsSet()
}

// HasDuration returns a boolean if a field has been set.
func (o *Incident) HasDuration() bool {
	if o != nil && o.Duration.IsSet() {
		return true
	}

	return false
}

// SetDuration gets a reference to the given NullableString and assigns it to the Duration field.
func (o *Incident) SetDuration(v string) {
	o.Duration.Set(&v)
}
// SetDurationNil sets the value for Duration to be an explicit nil
func (o *Incident) SetDurationNil() {
	o.Duration.Set(nil)
}

// UnsetDuration ensures that no value is present for Duration, not even an explicit nil
func (o *Incident) UnsetDuration() {
	o.Duration.Unset()
}

// GetEndDate returns the EndDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Incident) GetEndDate() time.Time {
	if o == nil || o.EndDate.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.EndDate.Get()
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Incident) GetEndDateOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EndDate.Get(), o.EndDate.IsSet()
}

// HasEndDate returns a boolean if a field has been set.
func (o *Incident) HasEndDate() bool {
	if o != nil && o.EndDate.IsSet() {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given NullableTime and assigns it to the EndDate field.
func (o *Incident) SetEndDate(v time.Time) {
	o.EndDate.Set(&v)
}
// SetEndDateNil sets the value for EndDate to be an explicit nil
func (o *Incident) SetEndDateNil() {
	o.EndDate.Set(nil)
}

// UnsetEndDate ensures that no value is present for EndDate, not even an explicit nil
func (o *Incident) UnsetEndDate() {
	o.EndDate.Unset()
}

// GetInUptime returns the InUptime field value if set, zero value otherwise.
func (o *Incident) GetInUptime() bool {
	if o == nil || o.InUptime == nil {
		var ret bool
		return ret
	}
	return *o.InUptime
}

// GetInUptimeOk returns a tuple with the InUptime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Incident) GetInUptimeOk() (*bool, bool) {
	if o == nil || o.InUptime == nil {
		return nil, false
	}
	return o.InUptime, true
}

// HasInUptime returns a boolean if a field has been set.
func (o *Incident) HasInUptime() bool {
	if o != nil && o.InUptime != nil {
		return true
	}

	return false
}

// SetInUptime gets a reference to the given bool and assigns it to the InUptime field.
func (o *Incident) SetInUptime(v bool) {
	o.InUptime = &v
}

// GetMuted returns the Muted field value if set, zero value otherwise.
func (o *Incident) GetMuted() bool {
	if o == nil || o.Muted == nil {
		var ret bool
		return ret
	}
	return *o.Muted
}

// GetMutedOk returns a tuple with the Muted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Incident) GetMutedOk() (*bool, bool) {
	if o == nil || o.Muted == nil {
		return nil, false
	}
	return o.Muted, true
}

// HasMuted returns a boolean if a field has been set.
func (o *Incident) HasMuted() bool {
	if o != nil && o.Muted != nil {
		return true
	}

	return false
}

// SetMuted gets a reference to the given bool and assigns it to the Muted field.
func (o *Incident) SetMuted(v bool) {
	o.Muted = &v
}

// GetLastCheckTime returns the LastCheckTime field value if set, zero value otherwise.
func (o *Incident) GetLastCheckTime() time.Time {
	if o == nil || o.LastCheckTime == nil {
		var ret time.Time
		return ret
	}
	return *o.LastCheckTime
}

// GetLastCheckTimeOk returns a tuple with the LastCheckTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Incident) GetLastCheckTimeOk() (*time.Time, bool) {
	if o == nil || o.LastCheckTime == nil {
		return nil, false
	}
	return o.LastCheckTime, true
}

// HasLastCheckTime returns a boolean if a field has been set.
func (o *Incident) HasLastCheckTime() bool {
	if o != nil && o.LastCheckTime != nil {
		return true
	}

	return false
}

// SetLastCheckTime gets a reference to the given time.Time and assigns it to the LastCheckTime field.
func (o *Incident) SetLastCheckTime(v time.Time) {
	o.LastCheckTime = &v
}

// GetLastError returns the LastError field value if set, zero value otherwise.
func (o *Incident) GetLastError() string {
	if o == nil || o.LastError == nil {
		var ret string
		return ret
	}
	return *o.LastError
}

// GetLastErrorOk returns a tuple with the LastError field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Incident) GetLastErrorOk() (*string, bool) {
	if o == nil || o.LastError == nil {
		return nil, false
	}
	return o.LastError, true
}

// HasLastError returns a boolean if a field has been set.
func (o *Incident) HasLastError() bool {
	if o != nil && o.LastError != nil {
		return true
	}

	return false
}

// SetLastError gets a reference to the given string and assigns it to the LastError field.
func (o *Incident) SetLastError(v string) {
	o.LastError = &v
}

// GetLastMessage returns the LastMessage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Incident) GetLastMessage() string {
	if o == nil || o.LastMessage.Get() == nil {
		var ret string
		return ret
	}
	return *o.LastMessage.Get()
}

// GetLastMessageOk returns a tuple with the LastMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Incident) GetLastMessageOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LastMessage.Get(), o.LastMessage.IsSet()
}

// HasLastMessage returns a boolean if a field has been set.
func (o *Incident) HasLastMessage() bool {
	if o != nil && o.LastMessage.IsSet() {
		return true
	}

	return false
}

// SetLastMessage gets a reference to the given NullableString and assigns it to the LastMessage field.
func (o *Incident) SetLastMessage(v string) {
	o.LastMessage.Set(&v)
}
// SetLastMessageNil sets the value for LastMessage to be an explicit nil
func (o *Incident) SetLastMessageNil() {
	o.LastMessage.Set(nil)
}

// UnsetLastMessage ensures that no value is present for LastMessage, not even an explicit nil
func (o *Incident) UnsetLastMessage() {
	o.LastMessage.Unset()
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Incident) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Incident) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Incident) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Incident) SetName(v string) {
	o.Name = &v
}

// GetResolution returns the Resolution field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Incident) GetResolution() string {
	if o == nil || o.Resolution.Get() == nil {
		var ret string
		return ret
	}
	return *o.Resolution.Get()
}

// GetResolutionOk returns a tuple with the Resolution field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Incident) GetResolutionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Resolution.Get(), o.Resolution.IsSet()
}

// HasResolution returns a boolean if a field has been set.
func (o *Incident) HasResolution() bool {
	if o != nil && o.Resolution.IsSet() {
		return true
	}

	return false
}

// SetResolution gets a reference to the given NullableString and assigns it to the Resolution field.
func (o *Incident) SetResolution(v string) {
	o.Resolution.Set(&v)
}
// SetResolutionNil sets the value for Resolution to be an explicit nil
func (o *Incident) SetResolutionNil() {
	o.Resolution.Set(nil)
}

// UnsetResolution ensures that no value is present for Resolution, not even an explicit nil
func (o *Incident) UnsetResolution() {
	o.Resolution.Unset()
}

// GetSeverity returns the Severity field value if set, zero value otherwise.
func (o *Incident) GetSeverity() string {
	if o == nil || o.Severity == nil {
		var ret string
		return ret
	}
	return *o.Severity
}

// GetSeverityOk returns a tuple with the Severity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Incident) GetSeverityOk() (*string, bool) {
	if o == nil || o.Severity == nil {
		return nil, false
	}
	return o.Severity, true
}

// HasSeverity returns a boolean if a field has been set.
func (o *Incident) HasSeverity() bool {
	if o != nil && o.Severity != nil {
		return true
	}

	return false
}

// SetSeverity gets a reference to the given string and assigns it to the Severity field.
func (o *Incident) SetSeverity(v string) {
	o.Severity = &v
}

// GetSeverityId returns the SeverityId field value if set, zero value otherwise.
func (o *Incident) GetSeverityId() int64 {
	if o == nil || o.SeverityId == nil {
		var ret int64
		return ret
	}
	return *o.SeverityId
}

// GetSeverityIdOk returns a tuple with the SeverityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Incident) GetSeverityIdOk() (*int64, bool) {
	if o == nil || o.SeverityId == nil {
		return nil, false
	}
	return o.SeverityId, true
}

// HasSeverityId returns a boolean if a field has been set.
func (o *Incident) HasSeverityId() bool {
	if o != nil && o.SeverityId != nil {
		return true
	}

	return false
}

// SetSeverityId gets a reference to the given int64 and assigns it to the SeverityId field.
func (o *Incident) SetSeverityId(v int64) {
	o.SeverityId = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *Incident) GetStartDate() time.Time {
	if o == nil || o.StartDate == nil {
		var ret time.Time
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Incident) GetStartDateOk() (*time.Time, bool) {
	if o == nil || o.StartDate == nil {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *Incident) HasStartDate() bool {
	if o != nil && o.StartDate != nil {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given time.Time and assigns it to the StartDate field.
func (o *Incident) SetStartDate(v time.Time) {
	o.StartDate = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Incident) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Incident) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Incident) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *Incident) SetStatus(v string) {
	o.Status = &v
}

// GetVisibility returns the Visibility field value if set, zero value otherwise.
func (o *Incident) GetVisibility() string {
	if o == nil || o.Visibility == nil {
		var ret string
		return ret
	}
	return *o.Visibility
}

// GetVisibilityOk returns a tuple with the Visibility field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Incident) GetVisibilityOk() (*string, bool) {
	if o == nil || o.Visibility == nil {
		return nil, false
	}
	return o.Visibility, true
}

// HasVisibility returns a boolean if a field has been set.
func (o *Incident) HasVisibility() bool {
	if o != nil && o.Visibility != nil {
		return true
	}

	return false
}

// SetVisibility gets a reference to the given string and assigns it to the Visibility field.
func (o *Incident) SetVisibility(v string) {
	o.Visibility = &v
}

func (o Incident) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Account != nil {
		toSerialize["account"] = o.Account
	}
	if o.App.IsSet() {
		toSerialize["app"] = o.App.Get()
	}
	if o.AutoClose != nil {
		toSerialize["autoClose"] = o.AutoClose
	}
	if o.ChannelId != nil {
		toSerialize["channelId"] = o.ChannelId
	}
	if o.CheckGroups != nil {
		toSerialize["checkGroups"] = o.CheckGroups
	}
	if o.Checks != nil {
		toSerialize["checks"] = o.Checks
	}
	if o.Comment.IsSet() {
		toSerialize["comment"] = o.Comment.Get()
	}
	if o.DisplayName != nil {
		toSerialize["displayName"] = o.DisplayName
	}
	if o.Duration.IsSet() {
		toSerialize["duration"] = o.Duration.Get()
	}
	if o.EndDate.IsSet() {
		toSerialize["endDate"] = o.EndDate.Get()
	}
	if o.InUptime != nil {
		toSerialize["inUptime"] = o.InUptime
	}
	if o.Muted != nil {
		toSerialize["muted"] = o.Muted
	}
	if o.LastCheckTime != nil {
		toSerialize["lastCheckTime"] = o.LastCheckTime
	}
	if o.LastError != nil {
		toSerialize["lastError"] = o.LastError
	}
	if o.LastMessage.IsSet() {
		toSerialize["lastMessage"] = o.LastMessage.Get()
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Resolution.IsSet() {
		toSerialize["resolution"] = o.Resolution.Get()
	}
	if o.Severity != nil {
		toSerialize["severity"] = o.Severity
	}
	if o.SeverityId != nil {
		toSerialize["severityId"] = o.SeverityId
	}
	if o.StartDate != nil {
		toSerialize["startDate"] = o.StartDate
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.Visibility != nil {
		toSerialize["visibility"] = o.Visibility
	}
	return json.Marshal(toSerialize)
}

type NullableIncident struct {
	value *Incident
	isSet bool
}

func (v NullableIncident) Get() *Incident {
	return v.value
}

func (v *NullableIncident) Set(val *Incident) {
	v.value = val
	v.isSet = true
}

func (v NullableIncident) IsSet() bool {
	return v.isSet
}

func (v *NullableIncident) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIncident(val *Incident) *NullableIncident {
	return &NullableIncident{value: val, isSet: true}
}

func (v NullableIncident) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIncident) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


