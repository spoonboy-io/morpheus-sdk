/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// HealthThreads struct for HealthThreads
type HealthThreads struct {
	Success *bool `json:"success,omitempty"`
	ThreadList []map[string]interface{} `json:"threadList,omitempty"`
	BusyThreads *[]HealthThreadsBusyThreads `json:"busyThreads,omitempty"`
	BlockedThreads []map[string]interface{} `json:"blockedThreads,omitempty"`
	RunningThreads []map[string]interface{} `json:"runningThreads,omitempty"`
	TotalCpuTime *int64 `json:"totalCpuTime,omitempty"`
	TotalThreads *int64 `json:"totalThreads,omitempty"`
	RunningWebThreads *int64 `json:"runningWebThreads,omitempty"`
	Status *string `json:"status,omitempty"`
}

// NewHealthThreads instantiates a new HealthThreads object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHealthThreads() *HealthThreads {
	this := HealthThreads{}
	return &this
}

// NewHealthThreadsWithDefaults instantiates a new HealthThreads object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHealthThreadsWithDefaults() *HealthThreads {
	this := HealthThreads{}
	return &this
}

// GetSuccess returns the Success field value if set, zero value otherwise.
func (o *HealthThreads) GetSuccess() bool {
	if o == nil || o.Success == nil {
		var ret bool
		return ret
	}
	return *o.Success
}

// GetSuccessOk returns a tuple with the Success field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HealthThreads) GetSuccessOk() (*bool, bool) {
	if o == nil || o.Success == nil {
		return nil, false
	}
	return o.Success, true
}

// HasSuccess returns a boolean if a field has been set.
func (o *HealthThreads) HasSuccess() bool {
	if o != nil && o.Success != nil {
		return true
	}

	return false
}

// SetSuccess gets a reference to the given bool and assigns it to the Success field.
func (o *HealthThreads) SetSuccess(v bool) {
	o.Success = &v
}

// GetThreadList returns the ThreadList field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HealthThreads) GetThreadList() []map[string]interface{} {
	if o == nil  {
		var ret []map[string]interface{}
		return ret
	}
	return o.ThreadList
}

// GetThreadListOk returns a tuple with the ThreadList field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HealthThreads) GetThreadListOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.ThreadList == nil {
		return nil, false
	}
	return &o.ThreadList, true
}

// HasThreadList returns a boolean if a field has been set.
func (o *HealthThreads) HasThreadList() bool {
	if o != nil && o.ThreadList != nil {
		return true
	}

	return false
}

// SetThreadList gets a reference to the given []map[string]interface{} and assigns it to the ThreadList field.
func (o *HealthThreads) SetThreadList(v []map[string]interface{}) {
	o.ThreadList = v
}

// GetBusyThreads returns the BusyThreads field value if set, zero value otherwise.
func (o *HealthThreads) GetBusyThreads() []HealthThreadsBusyThreads {
	if o == nil || o.BusyThreads == nil {
		var ret []HealthThreadsBusyThreads
		return ret
	}
	return *o.BusyThreads
}

// GetBusyThreadsOk returns a tuple with the BusyThreads field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HealthThreads) GetBusyThreadsOk() (*[]HealthThreadsBusyThreads, bool) {
	if o == nil || o.BusyThreads == nil {
		return nil, false
	}
	return o.BusyThreads, true
}

// HasBusyThreads returns a boolean if a field has been set.
func (o *HealthThreads) HasBusyThreads() bool {
	if o != nil && o.BusyThreads != nil {
		return true
	}

	return false
}

// SetBusyThreads gets a reference to the given []HealthThreadsBusyThreads and assigns it to the BusyThreads field.
func (o *HealthThreads) SetBusyThreads(v []HealthThreadsBusyThreads) {
	o.BusyThreads = &v
}

// GetBlockedThreads returns the BlockedThreads field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HealthThreads) GetBlockedThreads() []map[string]interface{} {
	if o == nil  {
		var ret []map[string]interface{}
		return ret
	}
	return o.BlockedThreads
}

// GetBlockedThreadsOk returns a tuple with the BlockedThreads field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HealthThreads) GetBlockedThreadsOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.BlockedThreads == nil {
		return nil, false
	}
	return &o.BlockedThreads, true
}

// HasBlockedThreads returns a boolean if a field has been set.
func (o *HealthThreads) HasBlockedThreads() bool {
	if o != nil && o.BlockedThreads != nil {
		return true
	}

	return false
}

// SetBlockedThreads gets a reference to the given []map[string]interface{} and assigns it to the BlockedThreads field.
func (o *HealthThreads) SetBlockedThreads(v []map[string]interface{}) {
	o.BlockedThreads = v
}

// GetRunningThreads returns the RunningThreads field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HealthThreads) GetRunningThreads() []map[string]interface{} {
	if o == nil  {
		var ret []map[string]interface{}
		return ret
	}
	return o.RunningThreads
}

// GetRunningThreadsOk returns a tuple with the RunningThreads field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HealthThreads) GetRunningThreadsOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.RunningThreads == nil {
		return nil, false
	}
	return &o.RunningThreads, true
}

// HasRunningThreads returns a boolean if a field has been set.
func (o *HealthThreads) HasRunningThreads() bool {
	if o != nil && o.RunningThreads != nil {
		return true
	}

	return false
}

// SetRunningThreads gets a reference to the given []map[string]interface{} and assigns it to the RunningThreads field.
func (o *HealthThreads) SetRunningThreads(v []map[string]interface{}) {
	o.RunningThreads = v
}

// GetTotalCpuTime returns the TotalCpuTime field value if set, zero value otherwise.
func (o *HealthThreads) GetTotalCpuTime() int64 {
	if o == nil || o.TotalCpuTime == nil {
		var ret int64
		return ret
	}
	return *o.TotalCpuTime
}

// GetTotalCpuTimeOk returns a tuple with the TotalCpuTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HealthThreads) GetTotalCpuTimeOk() (*int64, bool) {
	if o == nil || o.TotalCpuTime == nil {
		return nil, false
	}
	return o.TotalCpuTime, true
}

// HasTotalCpuTime returns a boolean if a field has been set.
func (o *HealthThreads) HasTotalCpuTime() bool {
	if o != nil && o.TotalCpuTime != nil {
		return true
	}

	return false
}

// SetTotalCpuTime gets a reference to the given int64 and assigns it to the TotalCpuTime field.
func (o *HealthThreads) SetTotalCpuTime(v int64) {
	o.TotalCpuTime = &v
}

// GetTotalThreads returns the TotalThreads field value if set, zero value otherwise.
func (o *HealthThreads) GetTotalThreads() int64 {
	if o == nil || o.TotalThreads == nil {
		var ret int64
		return ret
	}
	return *o.TotalThreads
}

// GetTotalThreadsOk returns a tuple with the TotalThreads field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HealthThreads) GetTotalThreadsOk() (*int64, bool) {
	if o == nil || o.TotalThreads == nil {
		return nil, false
	}
	return o.TotalThreads, true
}

// HasTotalThreads returns a boolean if a field has been set.
func (o *HealthThreads) HasTotalThreads() bool {
	if o != nil && o.TotalThreads != nil {
		return true
	}

	return false
}

// SetTotalThreads gets a reference to the given int64 and assigns it to the TotalThreads field.
func (o *HealthThreads) SetTotalThreads(v int64) {
	o.TotalThreads = &v
}

// GetRunningWebThreads returns the RunningWebThreads field value if set, zero value otherwise.
func (o *HealthThreads) GetRunningWebThreads() int64 {
	if o == nil || o.RunningWebThreads == nil {
		var ret int64
		return ret
	}
	return *o.RunningWebThreads
}

// GetRunningWebThreadsOk returns a tuple with the RunningWebThreads field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HealthThreads) GetRunningWebThreadsOk() (*int64, bool) {
	if o == nil || o.RunningWebThreads == nil {
		return nil, false
	}
	return o.RunningWebThreads, true
}

// HasRunningWebThreads returns a boolean if a field has been set.
func (o *HealthThreads) HasRunningWebThreads() bool {
	if o != nil && o.RunningWebThreads != nil {
		return true
	}

	return false
}

// SetRunningWebThreads gets a reference to the given int64 and assigns it to the RunningWebThreads field.
func (o *HealthThreads) SetRunningWebThreads(v int64) {
	o.RunningWebThreads = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *HealthThreads) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HealthThreads) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *HealthThreads) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *HealthThreads) SetStatus(v string) {
	o.Status = &v
}

func (o HealthThreads) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Success != nil {
		toSerialize["success"] = o.Success
	}
	if o.ThreadList != nil {
		toSerialize["threadList"] = o.ThreadList
	}
	if o.BusyThreads != nil {
		toSerialize["busyThreads"] = o.BusyThreads
	}
	if o.BlockedThreads != nil {
		toSerialize["blockedThreads"] = o.BlockedThreads
	}
	if o.RunningThreads != nil {
		toSerialize["runningThreads"] = o.RunningThreads
	}
	if o.TotalCpuTime != nil {
		toSerialize["totalCpuTime"] = o.TotalCpuTime
	}
	if o.TotalThreads != nil {
		toSerialize["totalThreads"] = o.TotalThreads
	}
	if o.RunningWebThreads != nil {
		toSerialize["runningWebThreads"] = o.RunningWebThreads
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	return json.Marshal(toSerialize)
}

type NullableHealthThreads struct {
	value *HealthThreads
	isSet bool
}

func (v NullableHealthThreads) Get() *HealthThreads {
	return v.value
}

func (v *NullableHealthThreads) Set(val *HealthThreads) {
	v.value = val
	v.isSet = true
}

func (v NullableHealthThreads) IsSet() bool {
	return v.isSet
}

func (v *NullableHealthThreads) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHealthThreads(val *HealthThreads) *NullableHealthThreads {
	return &NullableHealthThreads{value: val, isSet: true}
}

func (v NullableHealthThreads) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHealthThreads) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


