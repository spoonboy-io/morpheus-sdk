/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// BackupRestore struct for BackupRestore
type BackupRestore struct {
	// Backup Result ID
	Id *int64 `json:"id,omitempty"`
	BackupResultId *int64 `json:"backupResultId,omitempty"`
	BackupId *int64 `json:"backupId,omitempty"`
	Backup NullableBackupRestoreBackup `json:"backup,omitempty"`
	ContainerId NullableInt64 `json:"containerId,omitempty"`
	Container NullableBackupRestoreContainer `json:"container,omitempty"`
	Instance NullableBackupInstance `json:"instance,omitempty"`
	RestoreToNew *bool `json:"restoreToNew,omitempty"`
	Status NullableString `json:"status,omitempty"`
	ErrorMessage NullableString `json:"errorMessage,omitempty"`
	StartDate NullableTime `json:"startDate,omitempty"`
	EndDate NullableTime `json:"endDate,omitempty"`
	DurationMillis NullableInt64 `json:"durationMillis,omitempty"`
	ExternalId NullableString `json:"externalId,omitempty"`
	ExternalStatusRef NullableString `json:"externalStatusRef,omitempty"`
	// Date Created
	DateCreated *time.Time `json:"dateCreated,omitempty"`
	// Last Updated
	LastUpdated *time.Time `json:"lastUpdated,omitempty"`
}

// NewBackupRestore instantiates a new BackupRestore object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBackupRestore() *BackupRestore {
	this := BackupRestore{}
	return &this
}

// NewBackupRestoreWithDefaults instantiates a new BackupRestore object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBackupRestoreWithDefaults() *BackupRestore {
	this := BackupRestore{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *BackupRestore) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupRestore) GetIdOk() (*int64, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *BackupRestore) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *BackupRestore) SetId(v int64) {
	o.Id = &v
}

// GetBackupResultId returns the BackupResultId field value if set, zero value otherwise.
func (o *BackupRestore) GetBackupResultId() int64 {
	if o == nil || o.BackupResultId == nil {
		var ret int64
		return ret
	}
	return *o.BackupResultId
}

// GetBackupResultIdOk returns a tuple with the BackupResultId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupRestore) GetBackupResultIdOk() (*int64, bool) {
	if o == nil || o.BackupResultId == nil {
		return nil, false
	}
	return o.BackupResultId, true
}

// HasBackupResultId returns a boolean if a field has been set.
func (o *BackupRestore) HasBackupResultId() bool {
	if o != nil && o.BackupResultId != nil {
		return true
	}

	return false
}

// SetBackupResultId gets a reference to the given int64 and assigns it to the BackupResultId field.
func (o *BackupRestore) SetBackupResultId(v int64) {
	o.BackupResultId = &v
}

// GetBackupId returns the BackupId field value if set, zero value otherwise.
func (o *BackupRestore) GetBackupId() int64 {
	if o == nil || o.BackupId == nil {
		var ret int64
		return ret
	}
	return *o.BackupId
}

// GetBackupIdOk returns a tuple with the BackupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupRestore) GetBackupIdOk() (*int64, bool) {
	if o == nil || o.BackupId == nil {
		return nil, false
	}
	return o.BackupId, true
}

// HasBackupId returns a boolean if a field has been set.
func (o *BackupRestore) HasBackupId() bool {
	if o != nil && o.BackupId != nil {
		return true
	}

	return false
}

// SetBackupId gets a reference to the given int64 and assigns it to the BackupId field.
func (o *BackupRestore) SetBackupId(v int64) {
	o.BackupId = &v
}

// GetBackup returns the Backup field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupRestore) GetBackup() BackupRestoreBackup {
	if o == nil || o.Backup.Get() == nil {
		var ret BackupRestoreBackup
		return ret
	}
	return *o.Backup.Get()
}

// GetBackupOk returns a tuple with the Backup field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupRestore) GetBackupOk() (*BackupRestoreBackup, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Backup.Get(), o.Backup.IsSet()
}

// HasBackup returns a boolean if a field has been set.
func (o *BackupRestore) HasBackup() bool {
	if o != nil && o.Backup.IsSet() {
		return true
	}

	return false
}

// SetBackup gets a reference to the given NullableBackupRestoreBackup and assigns it to the Backup field.
func (o *BackupRestore) SetBackup(v BackupRestoreBackup) {
	o.Backup.Set(&v)
}
// SetBackupNil sets the value for Backup to be an explicit nil
func (o *BackupRestore) SetBackupNil() {
	o.Backup.Set(nil)
}

// UnsetBackup ensures that no value is present for Backup, not even an explicit nil
func (o *BackupRestore) UnsetBackup() {
	o.Backup.Unset()
}

// GetContainerId returns the ContainerId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupRestore) GetContainerId() int64 {
	if o == nil || o.ContainerId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ContainerId.Get()
}

// GetContainerIdOk returns a tuple with the ContainerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupRestore) GetContainerIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ContainerId.Get(), o.ContainerId.IsSet()
}

// HasContainerId returns a boolean if a field has been set.
func (o *BackupRestore) HasContainerId() bool {
	if o != nil && o.ContainerId.IsSet() {
		return true
	}

	return false
}

// SetContainerId gets a reference to the given NullableInt64 and assigns it to the ContainerId field.
func (o *BackupRestore) SetContainerId(v int64) {
	o.ContainerId.Set(&v)
}
// SetContainerIdNil sets the value for ContainerId to be an explicit nil
func (o *BackupRestore) SetContainerIdNil() {
	o.ContainerId.Set(nil)
}

// UnsetContainerId ensures that no value is present for ContainerId, not even an explicit nil
func (o *BackupRestore) UnsetContainerId() {
	o.ContainerId.Unset()
}

// GetContainer returns the Container field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupRestore) GetContainer() BackupRestoreContainer {
	if o == nil || o.Container.Get() == nil {
		var ret BackupRestoreContainer
		return ret
	}
	return *o.Container.Get()
}

// GetContainerOk returns a tuple with the Container field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupRestore) GetContainerOk() (*BackupRestoreContainer, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Container.Get(), o.Container.IsSet()
}

// HasContainer returns a boolean if a field has been set.
func (o *BackupRestore) HasContainer() bool {
	if o != nil && o.Container.IsSet() {
		return true
	}

	return false
}

// SetContainer gets a reference to the given NullableBackupRestoreContainer and assigns it to the Container field.
func (o *BackupRestore) SetContainer(v BackupRestoreContainer) {
	o.Container.Set(&v)
}
// SetContainerNil sets the value for Container to be an explicit nil
func (o *BackupRestore) SetContainerNil() {
	o.Container.Set(nil)
}

// UnsetContainer ensures that no value is present for Container, not even an explicit nil
func (o *BackupRestore) UnsetContainer() {
	o.Container.Unset()
}

// GetInstance returns the Instance field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupRestore) GetInstance() BackupInstance {
	if o == nil || o.Instance.Get() == nil {
		var ret BackupInstance
		return ret
	}
	return *o.Instance.Get()
}

// GetInstanceOk returns a tuple with the Instance field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupRestore) GetInstanceOk() (*BackupInstance, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Instance.Get(), o.Instance.IsSet()
}

// HasInstance returns a boolean if a field has been set.
func (o *BackupRestore) HasInstance() bool {
	if o != nil && o.Instance.IsSet() {
		return true
	}

	return false
}

// SetInstance gets a reference to the given NullableBackupInstance and assigns it to the Instance field.
func (o *BackupRestore) SetInstance(v BackupInstance) {
	o.Instance.Set(&v)
}
// SetInstanceNil sets the value for Instance to be an explicit nil
func (o *BackupRestore) SetInstanceNil() {
	o.Instance.Set(nil)
}

// UnsetInstance ensures that no value is present for Instance, not even an explicit nil
func (o *BackupRestore) UnsetInstance() {
	o.Instance.Unset()
}

// GetRestoreToNew returns the RestoreToNew field value if set, zero value otherwise.
func (o *BackupRestore) GetRestoreToNew() bool {
	if o == nil || o.RestoreToNew == nil {
		var ret bool
		return ret
	}
	return *o.RestoreToNew
}

// GetRestoreToNewOk returns a tuple with the RestoreToNew field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupRestore) GetRestoreToNewOk() (*bool, bool) {
	if o == nil || o.RestoreToNew == nil {
		return nil, false
	}
	return o.RestoreToNew, true
}

// HasRestoreToNew returns a boolean if a field has been set.
func (o *BackupRestore) HasRestoreToNew() bool {
	if o != nil && o.RestoreToNew != nil {
		return true
	}

	return false
}

// SetRestoreToNew gets a reference to the given bool and assigns it to the RestoreToNew field.
func (o *BackupRestore) SetRestoreToNew(v bool) {
	o.RestoreToNew = &v
}

// GetStatus returns the Status field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupRestore) GetStatus() string {
	if o == nil || o.Status.Get() == nil {
		var ret string
		return ret
	}
	return *o.Status.Get()
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupRestore) GetStatusOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Status.Get(), o.Status.IsSet()
}

// HasStatus returns a boolean if a field has been set.
func (o *BackupRestore) HasStatus() bool {
	if o != nil && o.Status.IsSet() {
		return true
	}

	return false
}

// SetStatus gets a reference to the given NullableString and assigns it to the Status field.
func (o *BackupRestore) SetStatus(v string) {
	o.Status.Set(&v)
}
// SetStatusNil sets the value for Status to be an explicit nil
func (o *BackupRestore) SetStatusNil() {
	o.Status.Set(nil)
}

// UnsetStatus ensures that no value is present for Status, not even an explicit nil
func (o *BackupRestore) UnsetStatus() {
	o.Status.Unset()
}

// GetErrorMessage returns the ErrorMessage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupRestore) GetErrorMessage() string {
	if o == nil || o.ErrorMessage.Get() == nil {
		var ret string
		return ret
	}
	return *o.ErrorMessage.Get()
}

// GetErrorMessageOk returns a tuple with the ErrorMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupRestore) GetErrorMessageOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ErrorMessage.Get(), o.ErrorMessage.IsSet()
}

// HasErrorMessage returns a boolean if a field has been set.
func (o *BackupRestore) HasErrorMessage() bool {
	if o != nil && o.ErrorMessage.IsSet() {
		return true
	}

	return false
}

// SetErrorMessage gets a reference to the given NullableString and assigns it to the ErrorMessage field.
func (o *BackupRestore) SetErrorMessage(v string) {
	o.ErrorMessage.Set(&v)
}
// SetErrorMessageNil sets the value for ErrorMessage to be an explicit nil
func (o *BackupRestore) SetErrorMessageNil() {
	o.ErrorMessage.Set(nil)
}

// UnsetErrorMessage ensures that no value is present for ErrorMessage, not even an explicit nil
func (o *BackupRestore) UnsetErrorMessage() {
	o.ErrorMessage.Unset()
}

// GetStartDate returns the StartDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupRestore) GetStartDate() time.Time {
	if o == nil || o.StartDate.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.StartDate.Get()
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupRestore) GetStartDateOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.StartDate.Get(), o.StartDate.IsSet()
}

// HasStartDate returns a boolean if a field has been set.
func (o *BackupRestore) HasStartDate() bool {
	if o != nil && o.StartDate.IsSet() {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given NullableTime and assigns it to the StartDate field.
func (o *BackupRestore) SetStartDate(v time.Time) {
	o.StartDate.Set(&v)
}
// SetStartDateNil sets the value for StartDate to be an explicit nil
func (o *BackupRestore) SetStartDateNil() {
	o.StartDate.Set(nil)
}

// UnsetStartDate ensures that no value is present for StartDate, not even an explicit nil
func (o *BackupRestore) UnsetStartDate() {
	o.StartDate.Unset()
}

// GetEndDate returns the EndDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupRestore) GetEndDate() time.Time {
	if o == nil || o.EndDate.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.EndDate.Get()
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupRestore) GetEndDateOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EndDate.Get(), o.EndDate.IsSet()
}

// HasEndDate returns a boolean if a field has been set.
func (o *BackupRestore) HasEndDate() bool {
	if o != nil && o.EndDate.IsSet() {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given NullableTime and assigns it to the EndDate field.
func (o *BackupRestore) SetEndDate(v time.Time) {
	o.EndDate.Set(&v)
}
// SetEndDateNil sets the value for EndDate to be an explicit nil
func (o *BackupRestore) SetEndDateNil() {
	o.EndDate.Set(nil)
}

// UnsetEndDate ensures that no value is present for EndDate, not even an explicit nil
func (o *BackupRestore) UnsetEndDate() {
	o.EndDate.Unset()
}

// GetDurationMillis returns the DurationMillis field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupRestore) GetDurationMillis() int64 {
	if o == nil || o.DurationMillis.Get() == nil {
		var ret int64
		return ret
	}
	return *o.DurationMillis.Get()
}

// GetDurationMillisOk returns a tuple with the DurationMillis field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupRestore) GetDurationMillisOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DurationMillis.Get(), o.DurationMillis.IsSet()
}

// HasDurationMillis returns a boolean if a field has been set.
func (o *BackupRestore) HasDurationMillis() bool {
	if o != nil && o.DurationMillis.IsSet() {
		return true
	}

	return false
}

// SetDurationMillis gets a reference to the given NullableInt64 and assigns it to the DurationMillis field.
func (o *BackupRestore) SetDurationMillis(v int64) {
	o.DurationMillis.Set(&v)
}
// SetDurationMillisNil sets the value for DurationMillis to be an explicit nil
func (o *BackupRestore) SetDurationMillisNil() {
	o.DurationMillis.Set(nil)
}

// UnsetDurationMillis ensures that no value is present for DurationMillis, not even an explicit nil
func (o *BackupRestore) UnsetDurationMillis() {
	o.DurationMillis.Unset()
}

// GetExternalId returns the ExternalId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupRestore) GetExternalId() string {
	if o == nil || o.ExternalId.Get() == nil {
		var ret string
		return ret
	}
	return *o.ExternalId.Get()
}

// GetExternalIdOk returns a tuple with the ExternalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupRestore) GetExternalIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ExternalId.Get(), o.ExternalId.IsSet()
}

// HasExternalId returns a boolean if a field has been set.
func (o *BackupRestore) HasExternalId() bool {
	if o != nil && o.ExternalId.IsSet() {
		return true
	}

	return false
}

// SetExternalId gets a reference to the given NullableString and assigns it to the ExternalId field.
func (o *BackupRestore) SetExternalId(v string) {
	o.ExternalId.Set(&v)
}
// SetExternalIdNil sets the value for ExternalId to be an explicit nil
func (o *BackupRestore) SetExternalIdNil() {
	o.ExternalId.Set(nil)
}

// UnsetExternalId ensures that no value is present for ExternalId, not even an explicit nil
func (o *BackupRestore) UnsetExternalId() {
	o.ExternalId.Unset()
}

// GetExternalStatusRef returns the ExternalStatusRef field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupRestore) GetExternalStatusRef() string {
	if o == nil || o.ExternalStatusRef.Get() == nil {
		var ret string
		return ret
	}
	return *o.ExternalStatusRef.Get()
}

// GetExternalStatusRefOk returns a tuple with the ExternalStatusRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupRestore) GetExternalStatusRefOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ExternalStatusRef.Get(), o.ExternalStatusRef.IsSet()
}

// HasExternalStatusRef returns a boolean if a field has been set.
func (o *BackupRestore) HasExternalStatusRef() bool {
	if o != nil && o.ExternalStatusRef.IsSet() {
		return true
	}

	return false
}

// SetExternalStatusRef gets a reference to the given NullableString and assigns it to the ExternalStatusRef field.
func (o *BackupRestore) SetExternalStatusRef(v string) {
	o.ExternalStatusRef.Set(&v)
}
// SetExternalStatusRefNil sets the value for ExternalStatusRef to be an explicit nil
func (o *BackupRestore) SetExternalStatusRefNil() {
	o.ExternalStatusRef.Set(nil)
}

// UnsetExternalStatusRef ensures that no value is present for ExternalStatusRef, not even an explicit nil
func (o *BackupRestore) UnsetExternalStatusRef() {
	o.ExternalStatusRef.Unset()
}

// GetDateCreated returns the DateCreated field value if set, zero value otherwise.
func (o *BackupRestore) GetDateCreated() time.Time {
	if o == nil || o.DateCreated == nil {
		var ret time.Time
		return ret
	}
	return *o.DateCreated
}

// GetDateCreatedOk returns a tuple with the DateCreated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupRestore) GetDateCreatedOk() (*time.Time, bool) {
	if o == nil || o.DateCreated == nil {
		return nil, false
	}
	return o.DateCreated, true
}

// HasDateCreated returns a boolean if a field has been set.
func (o *BackupRestore) HasDateCreated() bool {
	if o != nil && o.DateCreated != nil {
		return true
	}

	return false
}

// SetDateCreated gets a reference to the given time.Time and assigns it to the DateCreated field.
func (o *BackupRestore) SetDateCreated(v time.Time) {
	o.DateCreated = &v
}

// GetLastUpdated returns the LastUpdated field value if set, zero value otherwise.
func (o *BackupRestore) GetLastUpdated() time.Time {
	if o == nil || o.LastUpdated == nil {
		var ret time.Time
		return ret
	}
	return *o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupRestore) GetLastUpdatedOk() (*time.Time, bool) {
	if o == nil || o.LastUpdated == nil {
		return nil, false
	}
	return o.LastUpdated, true
}

// HasLastUpdated returns a boolean if a field has been set.
func (o *BackupRestore) HasLastUpdated() bool {
	if o != nil && o.LastUpdated != nil {
		return true
	}

	return false
}

// SetLastUpdated gets a reference to the given time.Time and assigns it to the LastUpdated field.
func (o *BackupRestore) SetLastUpdated(v time.Time) {
	o.LastUpdated = &v
}

func (o BackupRestore) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.BackupResultId != nil {
		toSerialize["backupResultId"] = o.BackupResultId
	}
	if o.BackupId != nil {
		toSerialize["backupId"] = o.BackupId
	}
	if o.Backup.IsSet() {
		toSerialize["backup"] = o.Backup.Get()
	}
	if o.ContainerId.IsSet() {
		toSerialize["containerId"] = o.ContainerId.Get()
	}
	if o.Container.IsSet() {
		toSerialize["container"] = o.Container.Get()
	}
	if o.Instance.IsSet() {
		toSerialize["instance"] = o.Instance.Get()
	}
	if o.RestoreToNew != nil {
		toSerialize["restoreToNew"] = o.RestoreToNew
	}
	if o.Status.IsSet() {
		toSerialize["status"] = o.Status.Get()
	}
	if o.ErrorMessage.IsSet() {
		toSerialize["errorMessage"] = o.ErrorMessage.Get()
	}
	if o.StartDate.IsSet() {
		toSerialize["startDate"] = o.StartDate.Get()
	}
	if o.EndDate.IsSet() {
		toSerialize["endDate"] = o.EndDate.Get()
	}
	if o.DurationMillis.IsSet() {
		toSerialize["durationMillis"] = o.DurationMillis.Get()
	}
	if o.ExternalId.IsSet() {
		toSerialize["externalId"] = o.ExternalId.Get()
	}
	if o.ExternalStatusRef.IsSet() {
		toSerialize["externalStatusRef"] = o.ExternalStatusRef.Get()
	}
	if o.DateCreated != nil {
		toSerialize["dateCreated"] = o.DateCreated
	}
	if o.LastUpdated != nil {
		toSerialize["lastUpdated"] = o.LastUpdated
	}
	return json.Marshal(toSerialize)
}

type NullableBackupRestore struct {
	value *BackupRestore
	isSet bool
}

func (v NullableBackupRestore) Get() *BackupRestore {
	return v.value
}

func (v *NullableBackupRestore) Set(val *BackupRestore) {
	v.value = val
	v.isSet = true
}

func (v NullableBackupRestore) IsSet() bool {
	return v.isSet
}

func (v *NullableBackupRestore) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBackupRestore(val *BackupRestore) *NullableBackupRestore {
	return &NullableBackupRestore{value: val, isSet: true}
}

func (v NullableBackupRestore) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBackupRestore) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


