/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Model200SuccessExpanded A response object
type Model200SuccessExpanded struct {
	// Success indicator, true when the request succeeded and false when an error occurred
	Success *bool `json:"success,omitempty"`
	// Message containing a description of the result, usually a message about the error that occurred
	Msg NullableString `json:"msg,omitempty"`
	// Validation errors, with a key for Object containing error messages for each invalid parameter (key)
	Errors map[string]interface{} `json:"errors,omitempty"`
}

// NewModel200SuccessExpanded instantiates a new Model200SuccessExpanded object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModel200SuccessExpanded() *Model200SuccessExpanded {
	this := Model200SuccessExpanded{}
	var success bool = true
	this.Success = &success
	return &this
}

// NewModel200SuccessExpandedWithDefaults instantiates a new Model200SuccessExpanded object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModel200SuccessExpandedWithDefaults() *Model200SuccessExpanded {
	this := Model200SuccessExpanded{}
	var success bool = true
	this.Success = &success
	return &this
}

// GetSuccess returns the Success field value if set, zero value otherwise.
func (o *Model200SuccessExpanded) GetSuccess() bool {
	if o == nil || o.Success == nil {
		var ret bool
		return ret
	}
	return *o.Success
}

// GetSuccessOk returns a tuple with the Success field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Model200SuccessExpanded) GetSuccessOk() (*bool, bool) {
	if o == nil || o.Success == nil {
		return nil, false
	}
	return o.Success, true
}

// HasSuccess returns a boolean if a field has been set.
func (o *Model200SuccessExpanded) HasSuccess() bool {
	if o != nil && o.Success != nil {
		return true
	}

	return false
}

// SetSuccess gets a reference to the given bool and assigns it to the Success field.
func (o *Model200SuccessExpanded) SetSuccess(v bool) {
	o.Success = &v
}

// GetMsg returns the Msg field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Model200SuccessExpanded) GetMsg() string {
	if o == nil || o.Msg.Get() == nil {
		var ret string
		return ret
	}
	return *o.Msg.Get()
}

// GetMsgOk returns a tuple with the Msg field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Model200SuccessExpanded) GetMsgOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Msg.Get(), o.Msg.IsSet()
}

// HasMsg returns a boolean if a field has been set.
func (o *Model200SuccessExpanded) HasMsg() bool {
	if o != nil && o.Msg.IsSet() {
		return true
	}

	return false
}

// SetMsg gets a reference to the given NullableString and assigns it to the Msg field.
func (o *Model200SuccessExpanded) SetMsg(v string) {
	o.Msg.Set(&v)
}
// SetMsgNil sets the value for Msg to be an explicit nil
func (o *Model200SuccessExpanded) SetMsgNil() {
	o.Msg.Set(nil)
}

// UnsetMsg ensures that no value is present for Msg, not even an explicit nil
func (o *Model200SuccessExpanded) UnsetMsg() {
	o.Msg.Unset()
}

// GetErrors returns the Errors field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Model200SuccessExpanded) GetErrors() map[string]interface{} {
	if o == nil  {
		var ret map[string]interface{}
		return ret
	}
	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Model200SuccessExpanded) GetErrorsOk() (*map[string]interface{}, bool) {
	if o == nil || o.Errors == nil {
		return nil, false
	}
	return &o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *Model200SuccessExpanded) HasErrors() bool {
	if o != nil && o.Errors != nil {
		return true
	}

	return false
}

// SetErrors gets a reference to the given map[string]interface{} and assigns it to the Errors field.
func (o *Model200SuccessExpanded) SetErrors(v map[string]interface{}) {
	o.Errors = v
}

func (o Model200SuccessExpanded) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Success != nil {
		toSerialize["success"] = o.Success
	}
	if o.Msg.IsSet() {
		toSerialize["msg"] = o.Msg.Get()
	}
	if o.Errors != nil {
		toSerialize["errors"] = o.Errors
	}
	return json.Marshal(toSerialize)
}

type NullableModel200SuccessExpanded struct {
	value *Model200SuccessExpanded
	isSet bool
}

func (v NullableModel200SuccessExpanded) Get() *Model200SuccessExpanded {
	return v.value
}

func (v *NullableModel200SuccessExpanded) Set(val *Model200SuccessExpanded) {
	v.value = val
	v.isSet = true
}

func (v NullableModel200SuccessExpanded) IsSet() bool {
	return v.isSet
}

func (v *NullableModel200SuccessExpanded) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModel200SuccessExpanded(val *Model200SuccessExpanded) *NullableModel200SuccessExpanded {
	return &NullableModel200SuccessExpanded{value: val, isSet: true}
}

func (v NullableModel200SuccessExpanded) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModel200SuccessExpanded) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


