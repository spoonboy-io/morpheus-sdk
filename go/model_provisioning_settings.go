/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ProvisioningSettings struct for ProvisioningSettings
type ProvisioningSettings struct {
	AllowZoneSelection *bool `json:"allowZoneSelection,omitempty"`
	AllowServerSelection *bool `json:"allowServerSelection,omitempty"`
	RequireEnvironments *bool `json:"requireEnvironments,omitempty"`
	ShowPricing *bool `json:"showPricing,omitempty"`
	HideDatastoreStats *bool `json:"hideDatastoreStats,omitempty"`
	CrossTenantNamingPolicies *bool `json:"crossTenantNamingPolicies,omitempty"`
	ReuseSequence *bool `json:"reuseSequence,omitempty"`
	CloudInitUsername *string `json:"cloudInitUsername,omitempty"`
	CloudInitPassword *string `json:"cloudInitPassword,omitempty"`
	CloudInitKeyPair *InlineResponse20040AppDeployInstance `json:"cloudInitKeyPair,omitempty"`
	WindowsPassword NullableString `json:"windowsPassword,omitempty"`
	PxeRootPassword NullableString `json:"pxeRootPassword,omitempty"`
	DefaultTemplateType *InlineResponse20094Network `json:"defaultTemplateType,omitempty"`
	DeployStorageProvider *InlineResponse20040AppDeployInstance `json:"deployStorageProvider,omitempty"`
}

// NewProvisioningSettings instantiates a new ProvisioningSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProvisioningSettings() *ProvisioningSettings {
	this := ProvisioningSettings{}
	return &this
}

// NewProvisioningSettingsWithDefaults instantiates a new ProvisioningSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProvisioningSettingsWithDefaults() *ProvisioningSettings {
	this := ProvisioningSettings{}
	return &this
}

// GetAllowZoneSelection returns the AllowZoneSelection field value if set, zero value otherwise.
func (o *ProvisioningSettings) GetAllowZoneSelection() bool {
	if o == nil || o.AllowZoneSelection == nil {
		var ret bool
		return ret
	}
	return *o.AllowZoneSelection
}

// GetAllowZoneSelectionOk returns a tuple with the AllowZoneSelection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisioningSettings) GetAllowZoneSelectionOk() (*bool, bool) {
	if o == nil || o.AllowZoneSelection == nil {
		return nil, false
	}
	return o.AllowZoneSelection, true
}

// HasAllowZoneSelection returns a boolean if a field has been set.
func (o *ProvisioningSettings) HasAllowZoneSelection() bool {
	if o != nil && o.AllowZoneSelection != nil {
		return true
	}

	return false
}

// SetAllowZoneSelection gets a reference to the given bool and assigns it to the AllowZoneSelection field.
func (o *ProvisioningSettings) SetAllowZoneSelection(v bool) {
	o.AllowZoneSelection = &v
}

// GetAllowServerSelection returns the AllowServerSelection field value if set, zero value otherwise.
func (o *ProvisioningSettings) GetAllowServerSelection() bool {
	if o == nil || o.AllowServerSelection == nil {
		var ret bool
		return ret
	}
	return *o.AllowServerSelection
}

// GetAllowServerSelectionOk returns a tuple with the AllowServerSelection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisioningSettings) GetAllowServerSelectionOk() (*bool, bool) {
	if o == nil || o.AllowServerSelection == nil {
		return nil, false
	}
	return o.AllowServerSelection, true
}

// HasAllowServerSelection returns a boolean if a field has been set.
func (o *ProvisioningSettings) HasAllowServerSelection() bool {
	if o != nil && o.AllowServerSelection != nil {
		return true
	}

	return false
}

// SetAllowServerSelection gets a reference to the given bool and assigns it to the AllowServerSelection field.
func (o *ProvisioningSettings) SetAllowServerSelection(v bool) {
	o.AllowServerSelection = &v
}

// GetRequireEnvironments returns the RequireEnvironments field value if set, zero value otherwise.
func (o *ProvisioningSettings) GetRequireEnvironments() bool {
	if o == nil || o.RequireEnvironments == nil {
		var ret bool
		return ret
	}
	return *o.RequireEnvironments
}

// GetRequireEnvironmentsOk returns a tuple with the RequireEnvironments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisioningSettings) GetRequireEnvironmentsOk() (*bool, bool) {
	if o == nil || o.RequireEnvironments == nil {
		return nil, false
	}
	return o.RequireEnvironments, true
}

// HasRequireEnvironments returns a boolean if a field has been set.
func (o *ProvisioningSettings) HasRequireEnvironments() bool {
	if o != nil && o.RequireEnvironments != nil {
		return true
	}

	return false
}

// SetRequireEnvironments gets a reference to the given bool and assigns it to the RequireEnvironments field.
func (o *ProvisioningSettings) SetRequireEnvironments(v bool) {
	o.RequireEnvironments = &v
}

// GetShowPricing returns the ShowPricing field value if set, zero value otherwise.
func (o *ProvisioningSettings) GetShowPricing() bool {
	if o == nil || o.ShowPricing == nil {
		var ret bool
		return ret
	}
	return *o.ShowPricing
}

// GetShowPricingOk returns a tuple with the ShowPricing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisioningSettings) GetShowPricingOk() (*bool, bool) {
	if o == nil || o.ShowPricing == nil {
		return nil, false
	}
	return o.ShowPricing, true
}

// HasShowPricing returns a boolean if a field has been set.
func (o *ProvisioningSettings) HasShowPricing() bool {
	if o != nil && o.ShowPricing != nil {
		return true
	}

	return false
}

// SetShowPricing gets a reference to the given bool and assigns it to the ShowPricing field.
func (o *ProvisioningSettings) SetShowPricing(v bool) {
	o.ShowPricing = &v
}

// GetHideDatastoreStats returns the HideDatastoreStats field value if set, zero value otherwise.
func (o *ProvisioningSettings) GetHideDatastoreStats() bool {
	if o == nil || o.HideDatastoreStats == nil {
		var ret bool
		return ret
	}
	return *o.HideDatastoreStats
}

// GetHideDatastoreStatsOk returns a tuple with the HideDatastoreStats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisioningSettings) GetHideDatastoreStatsOk() (*bool, bool) {
	if o == nil || o.HideDatastoreStats == nil {
		return nil, false
	}
	return o.HideDatastoreStats, true
}

// HasHideDatastoreStats returns a boolean if a field has been set.
func (o *ProvisioningSettings) HasHideDatastoreStats() bool {
	if o != nil && o.HideDatastoreStats != nil {
		return true
	}

	return false
}

// SetHideDatastoreStats gets a reference to the given bool and assigns it to the HideDatastoreStats field.
func (o *ProvisioningSettings) SetHideDatastoreStats(v bool) {
	o.HideDatastoreStats = &v
}

// GetCrossTenantNamingPolicies returns the CrossTenantNamingPolicies field value if set, zero value otherwise.
func (o *ProvisioningSettings) GetCrossTenantNamingPolicies() bool {
	if o == nil || o.CrossTenantNamingPolicies == nil {
		var ret bool
		return ret
	}
	return *o.CrossTenantNamingPolicies
}

// GetCrossTenantNamingPoliciesOk returns a tuple with the CrossTenantNamingPolicies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisioningSettings) GetCrossTenantNamingPoliciesOk() (*bool, bool) {
	if o == nil || o.CrossTenantNamingPolicies == nil {
		return nil, false
	}
	return o.CrossTenantNamingPolicies, true
}

// HasCrossTenantNamingPolicies returns a boolean if a field has been set.
func (o *ProvisioningSettings) HasCrossTenantNamingPolicies() bool {
	if o != nil && o.CrossTenantNamingPolicies != nil {
		return true
	}

	return false
}

// SetCrossTenantNamingPolicies gets a reference to the given bool and assigns it to the CrossTenantNamingPolicies field.
func (o *ProvisioningSettings) SetCrossTenantNamingPolicies(v bool) {
	o.CrossTenantNamingPolicies = &v
}

// GetReuseSequence returns the ReuseSequence field value if set, zero value otherwise.
func (o *ProvisioningSettings) GetReuseSequence() bool {
	if o == nil || o.ReuseSequence == nil {
		var ret bool
		return ret
	}
	return *o.ReuseSequence
}

// GetReuseSequenceOk returns a tuple with the ReuseSequence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisioningSettings) GetReuseSequenceOk() (*bool, bool) {
	if o == nil || o.ReuseSequence == nil {
		return nil, false
	}
	return o.ReuseSequence, true
}

// HasReuseSequence returns a boolean if a field has been set.
func (o *ProvisioningSettings) HasReuseSequence() bool {
	if o != nil && o.ReuseSequence != nil {
		return true
	}

	return false
}

// SetReuseSequence gets a reference to the given bool and assigns it to the ReuseSequence field.
func (o *ProvisioningSettings) SetReuseSequence(v bool) {
	o.ReuseSequence = &v
}

// GetCloudInitUsername returns the CloudInitUsername field value if set, zero value otherwise.
func (o *ProvisioningSettings) GetCloudInitUsername() string {
	if o == nil || o.CloudInitUsername == nil {
		var ret string
		return ret
	}
	return *o.CloudInitUsername
}

// GetCloudInitUsernameOk returns a tuple with the CloudInitUsername field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisioningSettings) GetCloudInitUsernameOk() (*string, bool) {
	if o == nil || o.CloudInitUsername == nil {
		return nil, false
	}
	return o.CloudInitUsername, true
}

// HasCloudInitUsername returns a boolean if a field has been set.
func (o *ProvisioningSettings) HasCloudInitUsername() bool {
	if o != nil && o.CloudInitUsername != nil {
		return true
	}

	return false
}

// SetCloudInitUsername gets a reference to the given string and assigns it to the CloudInitUsername field.
func (o *ProvisioningSettings) SetCloudInitUsername(v string) {
	o.CloudInitUsername = &v
}

// GetCloudInitPassword returns the CloudInitPassword field value if set, zero value otherwise.
func (o *ProvisioningSettings) GetCloudInitPassword() string {
	if o == nil || o.CloudInitPassword == nil {
		var ret string
		return ret
	}
	return *o.CloudInitPassword
}

// GetCloudInitPasswordOk returns a tuple with the CloudInitPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisioningSettings) GetCloudInitPasswordOk() (*string, bool) {
	if o == nil || o.CloudInitPassword == nil {
		return nil, false
	}
	return o.CloudInitPassword, true
}

// HasCloudInitPassword returns a boolean if a field has been set.
func (o *ProvisioningSettings) HasCloudInitPassword() bool {
	if o != nil && o.CloudInitPassword != nil {
		return true
	}

	return false
}

// SetCloudInitPassword gets a reference to the given string and assigns it to the CloudInitPassword field.
func (o *ProvisioningSettings) SetCloudInitPassword(v string) {
	o.CloudInitPassword = &v
}

// GetCloudInitKeyPair returns the CloudInitKeyPair field value if set, zero value otherwise.
func (o *ProvisioningSettings) GetCloudInitKeyPair() InlineResponse20040AppDeployInstance {
	if o == nil || o.CloudInitKeyPair == nil {
		var ret InlineResponse20040AppDeployInstance
		return ret
	}
	return *o.CloudInitKeyPair
}

// GetCloudInitKeyPairOk returns a tuple with the CloudInitKeyPair field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisioningSettings) GetCloudInitKeyPairOk() (*InlineResponse20040AppDeployInstance, bool) {
	if o == nil || o.CloudInitKeyPair == nil {
		return nil, false
	}
	return o.CloudInitKeyPair, true
}

// HasCloudInitKeyPair returns a boolean if a field has been set.
func (o *ProvisioningSettings) HasCloudInitKeyPair() bool {
	if o != nil && o.CloudInitKeyPair != nil {
		return true
	}

	return false
}

// SetCloudInitKeyPair gets a reference to the given InlineResponse20040AppDeployInstance and assigns it to the CloudInitKeyPair field.
func (o *ProvisioningSettings) SetCloudInitKeyPair(v InlineResponse20040AppDeployInstance) {
	o.CloudInitKeyPair = &v
}

// GetWindowsPassword returns the WindowsPassword field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProvisioningSettings) GetWindowsPassword() string {
	if o == nil || o.WindowsPassword.Get() == nil {
		var ret string
		return ret
	}
	return *o.WindowsPassword.Get()
}

// GetWindowsPasswordOk returns a tuple with the WindowsPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProvisioningSettings) GetWindowsPasswordOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.WindowsPassword.Get(), o.WindowsPassword.IsSet()
}

// HasWindowsPassword returns a boolean if a field has been set.
func (o *ProvisioningSettings) HasWindowsPassword() bool {
	if o != nil && o.WindowsPassword.IsSet() {
		return true
	}

	return false
}

// SetWindowsPassword gets a reference to the given NullableString and assigns it to the WindowsPassword field.
func (o *ProvisioningSettings) SetWindowsPassword(v string) {
	o.WindowsPassword.Set(&v)
}
// SetWindowsPasswordNil sets the value for WindowsPassword to be an explicit nil
func (o *ProvisioningSettings) SetWindowsPasswordNil() {
	o.WindowsPassword.Set(nil)
}

// UnsetWindowsPassword ensures that no value is present for WindowsPassword, not even an explicit nil
func (o *ProvisioningSettings) UnsetWindowsPassword() {
	o.WindowsPassword.Unset()
}

// GetPxeRootPassword returns the PxeRootPassword field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProvisioningSettings) GetPxeRootPassword() string {
	if o == nil || o.PxeRootPassword.Get() == nil {
		var ret string
		return ret
	}
	return *o.PxeRootPassword.Get()
}

// GetPxeRootPasswordOk returns a tuple with the PxeRootPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProvisioningSettings) GetPxeRootPasswordOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PxeRootPassword.Get(), o.PxeRootPassword.IsSet()
}

// HasPxeRootPassword returns a boolean if a field has been set.
func (o *ProvisioningSettings) HasPxeRootPassword() bool {
	if o != nil && o.PxeRootPassword.IsSet() {
		return true
	}

	return false
}

// SetPxeRootPassword gets a reference to the given NullableString and assigns it to the PxeRootPassword field.
func (o *ProvisioningSettings) SetPxeRootPassword(v string) {
	o.PxeRootPassword.Set(&v)
}
// SetPxeRootPasswordNil sets the value for PxeRootPassword to be an explicit nil
func (o *ProvisioningSettings) SetPxeRootPasswordNil() {
	o.PxeRootPassword.Set(nil)
}

// UnsetPxeRootPassword ensures that no value is present for PxeRootPassword, not even an explicit nil
func (o *ProvisioningSettings) UnsetPxeRootPassword() {
	o.PxeRootPassword.Unset()
}

// GetDefaultTemplateType returns the DefaultTemplateType field value if set, zero value otherwise.
func (o *ProvisioningSettings) GetDefaultTemplateType() InlineResponse20094Network {
	if o == nil || o.DefaultTemplateType == nil {
		var ret InlineResponse20094Network
		return ret
	}
	return *o.DefaultTemplateType
}

// GetDefaultTemplateTypeOk returns a tuple with the DefaultTemplateType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisioningSettings) GetDefaultTemplateTypeOk() (*InlineResponse20094Network, bool) {
	if o == nil || o.DefaultTemplateType == nil {
		return nil, false
	}
	return o.DefaultTemplateType, true
}

// HasDefaultTemplateType returns a boolean if a field has been set.
func (o *ProvisioningSettings) HasDefaultTemplateType() bool {
	if o != nil && o.DefaultTemplateType != nil {
		return true
	}

	return false
}

// SetDefaultTemplateType gets a reference to the given InlineResponse20094Network and assigns it to the DefaultTemplateType field.
func (o *ProvisioningSettings) SetDefaultTemplateType(v InlineResponse20094Network) {
	o.DefaultTemplateType = &v
}

// GetDeployStorageProvider returns the DeployStorageProvider field value if set, zero value otherwise.
func (o *ProvisioningSettings) GetDeployStorageProvider() InlineResponse20040AppDeployInstance {
	if o == nil || o.DeployStorageProvider == nil {
		var ret InlineResponse20040AppDeployInstance
		return ret
	}
	return *o.DeployStorageProvider
}

// GetDeployStorageProviderOk returns a tuple with the DeployStorageProvider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisioningSettings) GetDeployStorageProviderOk() (*InlineResponse20040AppDeployInstance, bool) {
	if o == nil || o.DeployStorageProvider == nil {
		return nil, false
	}
	return o.DeployStorageProvider, true
}

// HasDeployStorageProvider returns a boolean if a field has been set.
func (o *ProvisioningSettings) HasDeployStorageProvider() bool {
	if o != nil && o.DeployStorageProvider != nil {
		return true
	}

	return false
}

// SetDeployStorageProvider gets a reference to the given InlineResponse20040AppDeployInstance and assigns it to the DeployStorageProvider field.
func (o *ProvisioningSettings) SetDeployStorageProvider(v InlineResponse20040AppDeployInstance) {
	o.DeployStorageProvider = &v
}

func (o ProvisioningSettings) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AllowZoneSelection != nil {
		toSerialize["allowZoneSelection"] = o.AllowZoneSelection
	}
	if o.AllowServerSelection != nil {
		toSerialize["allowServerSelection"] = o.AllowServerSelection
	}
	if o.RequireEnvironments != nil {
		toSerialize["requireEnvironments"] = o.RequireEnvironments
	}
	if o.ShowPricing != nil {
		toSerialize["showPricing"] = o.ShowPricing
	}
	if o.HideDatastoreStats != nil {
		toSerialize["hideDatastoreStats"] = o.HideDatastoreStats
	}
	if o.CrossTenantNamingPolicies != nil {
		toSerialize["crossTenantNamingPolicies"] = o.CrossTenantNamingPolicies
	}
	if o.ReuseSequence != nil {
		toSerialize["reuseSequence"] = o.ReuseSequence
	}
	if o.CloudInitUsername != nil {
		toSerialize["cloudInitUsername"] = o.CloudInitUsername
	}
	if o.CloudInitPassword != nil {
		toSerialize["cloudInitPassword"] = o.CloudInitPassword
	}
	if o.CloudInitKeyPair != nil {
		toSerialize["cloudInitKeyPair"] = o.CloudInitKeyPair
	}
	if o.WindowsPassword.IsSet() {
		toSerialize["windowsPassword"] = o.WindowsPassword.Get()
	}
	if o.PxeRootPassword.IsSet() {
		toSerialize["pxeRootPassword"] = o.PxeRootPassword.Get()
	}
	if o.DefaultTemplateType != nil {
		toSerialize["defaultTemplateType"] = o.DefaultTemplateType
	}
	if o.DeployStorageProvider != nil {
		toSerialize["deployStorageProvider"] = o.DeployStorageProvider
	}
	return json.Marshal(toSerialize)
}

type NullableProvisioningSettings struct {
	value *ProvisioningSettings
	isSet bool
}

func (v NullableProvisioningSettings) Get() *ProvisioningSettings {
	return v.value
}

func (v *NullableProvisioningSettings) Set(val *ProvisioningSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableProvisioningSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableProvisioningSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProvisioningSettings(val *ProvisioningSettings) *NullableProvisioningSettings {
	return &NullableProvisioningSettings{value: val, isSet: true}
}

func (v NullableProvisioningSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProvisioningSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


