/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// IntegrationBindDNSConfig struct for IntegrationBindDNSConfig
type IntegrationBindDNSConfig struct {
	Zones *[]IntegrationBindDNSConfigZones `json:"zones,omitempty"`
}

// NewIntegrationBindDNSConfig instantiates a new IntegrationBindDNSConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIntegrationBindDNSConfig() *IntegrationBindDNSConfig {
	this := IntegrationBindDNSConfig{}
	return &this
}

// NewIntegrationBindDNSConfigWithDefaults instantiates a new IntegrationBindDNSConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIntegrationBindDNSConfigWithDefaults() *IntegrationBindDNSConfig {
	this := IntegrationBindDNSConfig{}
	return &this
}

// GetZones returns the Zones field value if set, zero value otherwise.
func (o *IntegrationBindDNSConfig) GetZones() []IntegrationBindDNSConfigZones {
	if o == nil || o.Zones == nil {
		var ret []IntegrationBindDNSConfigZones
		return ret
	}
	return *o.Zones
}

// GetZonesOk returns a tuple with the Zones field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationBindDNSConfig) GetZonesOk() (*[]IntegrationBindDNSConfigZones, bool) {
	if o == nil || o.Zones == nil {
		return nil, false
	}
	return o.Zones, true
}

// HasZones returns a boolean if a field has been set.
func (o *IntegrationBindDNSConfig) HasZones() bool {
	if o != nil && o.Zones != nil {
		return true
	}

	return false
}

// SetZones gets a reference to the given []IntegrationBindDNSConfigZones and assigns it to the Zones field.
func (o *IntegrationBindDNSConfig) SetZones(v []IntegrationBindDNSConfigZones) {
	o.Zones = &v
}

func (o IntegrationBindDNSConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Zones != nil {
		toSerialize["zones"] = o.Zones
	}
	return json.Marshal(toSerialize)
}

type NullableIntegrationBindDNSConfig struct {
	value *IntegrationBindDNSConfig
	isSet bool
}

func (v NullableIntegrationBindDNSConfig) Get() *IntegrationBindDNSConfig {
	return v.value
}

func (v *NullableIntegrationBindDNSConfig) Set(val *IntegrationBindDNSConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableIntegrationBindDNSConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableIntegrationBindDNSConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntegrationBindDNSConfig(val *IntegrationBindDNSConfig) *NullableIntegrationBindDNSConfig {
	return &NullableIntegrationBindDNSConfig{value: val, isSet: true}
}

func (v NullableIntegrationBindDNSConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntegrationBindDNSConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


