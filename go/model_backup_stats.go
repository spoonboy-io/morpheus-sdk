/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// BackupStats Backup Result Statistics
type BackupStats struct {
	// Total size of all backups in bytes
	TotalSize *int64 `json:"totalSize,omitempty"`
	// Average size of each backup in bytes
	AvgSize *int64 `json:"avgSize,omitempty"`
	// Total completed count
	TotalCompleted *int64 `json:"totalCompleted,omitempty"`
	// Successful backup count
	Success *int64 `json:"success,omitempty"`
	// Failed backup count
	Failed *int64 `json:"failed,omitempty"`
	// Success rate 0-1
	SuccessRate *float64 `json:"successRate,omitempty"`
	// Failure rate 0-1
	FailRate *float64 `json:"failRate,omitempty"`
	// List of the last 5 backup result statuses
	LastFiveResults *[]string `json:"lastFiveResults,omitempty"`
}

// NewBackupStats instantiates a new BackupStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBackupStats() *BackupStats {
	this := BackupStats{}
	return &this
}

// NewBackupStatsWithDefaults instantiates a new BackupStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBackupStatsWithDefaults() *BackupStats {
	this := BackupStats{}
	return &this
}

// GetTotalSize returns the TotalSize field value if set, zero value otherwise.
func (o *BackupStats) GetTotalSize() int64 {
	if o == nil || o.TotalSize == nil {
		var ret int64
		return ret
	}
	return *o.TotalSize
}

// GetTotalSizeOk returns a tuple with the TotalSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupStats) GetTotalSizeOk() (*int64, bool) {
	if o == nil || o.TotalSize == nil {
		return nil, false
	}
	return o.TotalSize, true
}

// HasTotalSize returns a boolean if a field has been set.
func (o *BackupStats) HasTotalSize() bool {
	if o != nil && o.TotalSize != nil {
		return true
	}

	return false
}

// SetTotalSize gets a reference to the given int64 and assigns it to the TotalSize field.
func (o *BackupStats) SetTotalSize(v int64) {
	o.TotalSize = &v
}

// GetAvgSize returns the AvgSize field value if set, zero value otherwise.
func (o *BackupStats) GetAvgSize() int64 {
	if o == nil || o.AvgSize == nil {
		var ret int64
		return ret
	}
	return *o.AvgSize
}

// GetAvgSizeOk returns a tuple with the AvgSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupStats) GetAvgSizeOk() (*int64, bool) {
	if o == nil || o.AvgSize == nil {
		return nil, false
	}
	return o.AvgSize, true
}

// HasAvgSize returns a boolean if a field has been set.
func (o *BackupStats) HasAvgSize() bool {
	if o != nil && o.AvgSize != nil {
		return true
	}

	return false
}

// SetAvgSize gets a reference to the given int64 and assigns it to the AvgSize field.
func (o *BackupStats) SetAvgSize(v int64) {
	o.AvgSize = &v
}

// GetTotalCompleted returns the TotalCompleted field value if set, zero value otherwise.
func (o *BackupStats) GetTotalCompleted() int64 {
	if o == nil || o.TotalCompleted == nil {
		var ret int64
		return ret
	}
	return *o.TotalCompleted
}

// GetTotalCompletedOk returns a tuple with the TotalCompleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupStats) GetTotalCompletedOk() (*int64, bool) {
	if o == nil || o.TotalCompleted == nil {
		return nil, false
	}
	return o.TotalCompleted, true
}

// HasTotalCompleted returns a boolean if a field has been set.
func (o *BackupStats) HasTotalCompleted() bool {
	if o != nil && o.TotalCompleted != nil {
		return true
	}

	return false
}

// SetTotalCompleted gets a reference to the given int64 and assigns it to the TotalCompleted field.
func (o *BackupStats) SetTotalCompleted(v int64) {
	o.TotalCompleted = &v
}

// GetSuccess returns the Success field value if set, zero value otherwise.
func (o *BackupStats) GetSuccess() int64 {
	if o == nil || o.Success == nil {
		var ret int64
		return ret
	}
	return *o.Success
}

// GetSuccessOk returns a tuple with the Success field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupStats) GetSuccessOk() (*int64, bool) {
	if o == nil || o.Success == nil {
		return nil, false
	}
	return o.Success, true
}

// HasSuccess returns a boolean if a field has been set.
func (o *BackupStats) HasSuccess() bool {
	if o != nil && o.Success != nil {
		return true
	}

	return false
}

// SetSuccess gets a reference to the given int64 and assigns it to the Success field.
func (o *BackupStats) SetSuccess(v int64) {
	o.Success = &v
}

// GetFailed returns the Failed field value if set, zero value otherwise.
func (o *BackupStats) GetFailed() int64 {
	if o == nil || o.Failed == nil {
		var ret int64
		return ret
	}
	return *o.Failed
}

// GetFailedOk returns a tuple with the Failed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupStats) GetFailedOk() (*int64, bool) {
	if o == nil || o.Failed == nil {
		return nil, false
	}
	return o.Failed, true
}

// HasFailed returns a boolean if a field has been set.
func (o *BackupStats) HasFailed() bool {
	if o != nil && o.Failed != nil {
		return true
	}

	return false
}

// SetFailed gets a reference to the given int64 and assigns it to the Failed field.
func (o *BackupStats) SetFailed(v int64) {
	o.Failed = &v
}

// GetSuccessRate returns the SuccessRate field value if set, zero value otherwise.
func (o *BackupStats) GetSuccessRate() float64 {
	if o == nil || o.SuccessRate == nil {
		var ret float64
		return ret
	}
	return *o.SuccessRate
}

// GetSuccessRateOk returns a tuple with the SuccessRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupStats) GetSuccessRateOk() (*float64, bool) {
	if o == nil || o.SuccessRate == nil {
		return nil, false
	}
	return o.SuccessRate, true
}

// HasSuccessRate returns a boolean if a field has been set.
func (o *BackupStats) HasSuccessRate() bool {
	if o != nil && o.SuccessRate != nil {
		return true
	}

	return false
}

// SetSuccessRate gets a reference to the given float64 and assigns it to the SuccessRate field.
func (o *BackupStats) SetSuccessRate(v float64) {
	o.SuccessRate = &v
}

// GetFailRate returns the FailRate field value if set, zero value otherwise.
func (o *BackupStats) GetFailRate() float64 {
	if o == nil || o.FailRate == nil {
		var ret float64
		return ret
	}
	return *o.FailRate
}

// GetFailRateOk returns a tuple with the FailRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupStats) GetFailRateOk() (*float64, bool) {
	if o == nil || o.FailRate == nil {
		return nil, false
	}
	return o.FailRate, true
}

// HasFailRate returns a boolean if a field has been set.
func (o *BackupStats) HasFailRate() bool {
	if o != nil && o.FailRate != nil {
		return true
	}

	return false
}

// SetFailRate gets a reference to the given float64 and assigns it to the FailRate field.
func (o *BackupStats) SetFailRate(v float64) {
	o.FailRate = &v
}

// GetLastFiveResults returns the LastFiveResults field value if set, zero value otherwise.
func (o *BackupStats) GetLastFiveResults() []string {
	if o == nil || o.LastFiveResults == nil {
		var ret []string
		return ret
	}
	return *o.LastFiveResults
}

// GetLastFiveResultsOk returns a tuple with the LastFiveResults field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupStats) GetLastFiveResultsOk() (*[]string, bool) {
	if o == nil || o.LastFiveResults == nil {
		return nil, false
	}
	return o.LastFiveResults, true
}

// HasLastFiveResults returns a boolean if a field has been set.
func (o *BackupStats) HasLastFiveResults() bool {
	if o != nil && o.LastFiveResults != nil {
		return true
	}

	return false
}

// SetLastFiveResults gets a reference to the given []string and assigns it to the LastFiveResults field.
func (o *BackupStats) SetLastFiveResults(v []string) {
	o.LastFiveResults = &v
}

func (o BackupStats) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.TotalSize != nil {
		toSerialize["totalSize"] = o.TotalSize
	}
	if o.AvgSize != nil {
		toSerialize["avgSize"] = o.AvgSize
	}
	if o.TotalCompleted != nil {
		toSerialize["totalCompleted"] = o.TotalCompleted
	}
	if o.Success != nil {
		toSerialize["success"] = o.Success
	}
	if o.Failed != nil {
		toSerialize["failed"] = o.Failed
	}
	if o.SuccessRate != nil {
		toSerialize["successRate"] = o.SuccessRate
	}
	if o.FailRate != nil {
		toSerialize["failRate"] = o.FailRate
	}
	if o.LastFiveResults != nil {
		toSerialize["lastFiveResults"] = o.LastFiveResults
	}
	return json.Marshal(toSerialize)
}

type NullableBackupStats struct {
	value *BackupStats
	isSet bool
}

func (v NullableBackupStats) Get() *BackupStats {
	return v.value
}

func (v *NullableBackupStats) Set(val *BackupStats) {
	v.value = val
	v.isSet = true
}

func (v NullableBackupStats) IsSet() bool {
	return v.isSet
}

func (v *NullableBackupStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBackupStats(val *BackupStats) *NullableBackupStats {
	return &NullableBackupStats{value: val, isSet: true}
}

func (v NullableBackupStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBackupStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


