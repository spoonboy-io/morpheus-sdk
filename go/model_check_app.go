/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// CheckApp struct for CheckApp
type CheckApp struct {
	Id *int64 `json:"id,omitempty"`
	Account *ApiBlueprintsIdUpdatePermissionsResourcePermissionSites `json:"account,omitempty"`
	Active *bool `json:"active,omitempty"`
	App NullableInlineResponse20082LoadBalancerInstanceSslCert `json:"app,omitempty"`
	Name *string `json:"name,omitempty"`
	Description NullableString `json:"description,omitempty"`
	InUptime *bool `json:"inUptime,omitempty"`
	LastCheckStatus NullableString `json:"lastCheckStatus,omitempty"`
	LastWarningDate NullableTime `json:"lastWarningDate,omitempty"`
	LastErrorDate NullableTime `json:"lastErrorDate,omitempty"`
	LastSuccessDate NullableTime `json:"lastSuccessDate,omitempty"`
	LastRunDate NullableTime `json:"lastRunDate,omitempty"`
	LastError NullableString `json:"lastError,omitempty"`
	LastTimer *int64 `json:"lastTimer,omitempty"`
	Health *int64 `json:"health,omitempty"`
	History NullableString `json:"history,omitempty"`
	Severity *string `json:"severity,omitempty"`
	CreateIncident *bool `json:"createIncident,omitempty"`
	Muted *bool `json:"muted,omitempty"`
	CreatedBy *InlineResponse200107NetworkPoolCreatedBy `json:"createdBy,omitempty"`
	DateCreated *time.Time `json:"dateCreated,omitempty"`
	LastUpdated *time.Time `json:"lastUpdated,omitempty"`
	Availability NullableString `json:"availability,omitempty"`
	Checks *[]int64 `json:"checks,omitempty"`
	CheckGroups *[]int64 `json:"checkGroups,omitempty"`
}

// NewCheckApp instantiates a new CheckApp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCheckApp() *CheckApp {
	this := CheckApp{}
	return &this
}

// NewCheckAppWithDefaults instantiates a new CheckApp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCheckAppWithDefaults() *CheckApp {
	this := CheckApp{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CheckApp) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckApp) GetIdOk() (*int64, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CheckApp) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *CheckApp) SetId(v int64) {
	o.Id = &v
}

// GetAccount returns the Account field value if set, zero value otherwise.
func (o *CheckApp) GetAccount() ApiBlueprintsIdUpdatePermissionsResourcePermissionSites {
	if o == nil || o.Account == nil {
		var ret ApiBlueprintsIdUpdatePermissionsResourcePermissionSites
		return ret
	}
	return *o.Account
}

// GetAccountOk returns a tuple with the Account field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckApp) GetAccountOk() (*ApiBlueprintsIdUpdatePermissionsResourcePermissionSites, bool) {
	if o == nil || o.Account == nil {
		return nil, false
	}
	return o.Account, true
}

// HasAccount returns a boolean if a field has been set.
func (o *CheckApp) HasAccount() bool {
	if o != nil && o.Account != nil {
		return true
	}

	return false
}

// SetAccount gets a reference to the given ApiBlueprintsIdUpdatePermissionsResourcePermissionSites and assigns it to the Account field.
func (o *CheckApp) SetAccount(v ApiBlueprintsIdUpdatePermissionsResourcePermissionSites) {
	o.Account = &v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *CheckApp) GetActive() bool {
	if o == nil || o.Active == nil {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckApp) GetActiveOk() (*bool, bool) {
	if o == nil || o.Active == nil {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *CheckApp) HasActive() bool {
	if o != nil && o.Active != nil {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *CheckApp) SetActive(v bool) {
	o.Active = &v
}

// GetApp returns the App field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CheckApp) GetApp() InlineResponse20082LoadBalancerInstanceSslCert {
	if o == nil || o.App.Get() == nil {
		var ret InlineResponse20082LoadBalancerInstanceSslCert
		return ret
	}
	return *o.App.Get()
}

// GetAppOk returns a tuple with the App field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CheckApp) GetAppOk() (*InlineResponse20082LoadBalancerInstanceSslCert, bool) {
	if o == nil  {
		return nil, false
	}
	return o.App.Get(), o.App.IsSet()
}

// HasApp returns a boolean if a field has been set.
func (o *CheckApp) HasApp() bool {
	if o != nil && o.App.IsSet() {
		return true
	}

	return false
}

// SetApp gets a reference to the given NullableInlineResponse20082LoadBalancerInstanceSslCert and assigns it to the App field.
func (o *CheckApp) SetApp(v InlineResponse20082LoadBalancerInstanceSslCert) {
	o.App.Set(&v)
}
// SetAppNil sets the value for App to be an explicit nil
func (o *CheckApp) SetAppNil() {
	o.App.Set(nil)
}

// UnsetApp ensures that no value is present for App, not even an explicit nil
func (o *CheckApp) UnsetApp() {
	o.App.Unset()
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CheckApp) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckApp) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CheckApp) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CheckApp) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CheckApp) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CheckApp) GetDescriptionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *CheckApp) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *CheckApp) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *CheckApp) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *CheckApp) UnsetDescription() {
	o.Description.Unset()
}

// GetInUptime returns the InUptime field value if set, zero value otherwise.
func (o *CheckApp) GetInUptime() bool {
	if o == nil || o.InUptime == nil {
		var ret bool
		return ret
	}
	return *o.InUptime
}

// GetInUptimeOk returns a tuple with the InUptime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckApp) GetInUptimeOk() (*bool, bool) {
	if o == nil || o.InUptime == nil {
		return nil, false
	}
	return o.InUptime, true
}

// HasInUptime returns a boolean if a field has been set.
func (o *CheckApp) HasInUptime() bool {
	if o != nil && o.InUptime != nil {
		return true
	}

	return false
}

// SetInUptime gets a reference to the given bool and assigns it to the InUptime field.
func (o *CheckApp) SetInUptime(v bool) {
	o.InUptime = &v
}

// GetLastCheckStatus returns the LastCheckStatus field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CheckApp) GetLastCheckStatus() string {
	if o == nil || o.LastCheckStatus.Get() == nil {
		var ret string
		return ret
	}
	return *o.LastCheckStatus.Get()
}

// GetLastCheckStatusOk returns a tuple with the LastCheckStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CheckApp) GetLastCheckStatusOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LastCheckStatus.Get(), o.LastCheckStatus.IsSet()
}

// HasLastCheckStatus returns a boolean if a field has been set.
func (o *CheckApp) HasLastCheckStatus() bool {
	if o != nil && o.LastCheckStatus.IsSet() {
		return true
	}

	return false
}

// SetLastCheckStatus gets a reference to the given NullableString and assigns it to the LastCheckStatus field.
func (o *CheckApp) SetLastCheckStatus(v string) {
	o.LastCheckStatus.Set(&v)
}
// SetLastCheckStatusNil sets the value for LastCheckStatus to be an explicit nil
func (o *CheckApp) SetLastCheckStatusNil() {
	o.LastCheckStatus.Set(nil)
}

// UnsetLastCheckStatus ensures that no value is present for LastCheckStatus, not even an explicit nil
func (o *CheckApp) UnsetLastCheckStatus() {
	o.LastCheckStatus.Unset()
}

// GetLastWarningDate returns the LastWarningDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CheckApp) GetLastWarningDate() time.Time {
	if o == nil || o.LastWarningDate.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.LastWarningDate.Get()
}

// GetLastWarningDateOk returns a tuple with the LastWarningDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CheckApp) GetLastWarningDateOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LastWarningDate.Get(), o.LastWarningDate.IsSet()
}

// HasLastWarningDate returns a boolean if a field has been set.
func (o *CheckApp) HasLastWarningDate() bool {
	if o != nil && o.LastWarningDate.IsSet() {
		return true
	}

	return false
}

// SetLastWarningDate gets a reference to the given NullableTime and assigns it to the LastWarningDate field.
func (o *CheckApp) SetLastWarningDate(v time.Time) {
	o.LastWarningDate.Set(&v)
}
// SetLastWarningDateNil sets the value for LastWarningDate to be an explicit nil
func (o *CheckApp) SetLastWarningDateNil() {
	o.LastWarningDate.Set(nil)
}

// UnsetLastWarningDate ensures that no value is present for LastWarningDate, not even an explicit nil
func (o *CheckApp) UnsetLastWarningDate() {
	o.LastWarningDate.Unset()
}

// GetLastErrorDate returns the LastErrorDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CheckApp) GetLastErrorDate() time.Time {
	if o == nil || o.LastErrorDate.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.LastErrorDate.Get()
}

// GetLastErrorDateOk returns a tuple with the LastErrorDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CheckApp) GetLastErrorDateOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LastErrorDate.Get(), o.LastErrorDate.IsSet()
}

// HasLastErrorDate returns a boolean if a field has been set.
func (o *CheckApp) HasLastErrorDate() bool {
	if o != nil && o.LastErrorDate.IsSet() {
		return true
	}

	return false
}

// SetLastErrorDate gets a reference to the given NullableTime and assigns it to the LastErrorDate field.
func (o *CheckApp) SetLastErrorDate(v time.Time) {
	o.LastErrorDate.Set(&v)
}
// SetLastErrorDateNil sets the value for LastErrorDate to be an explicit nil
func (o *CheckApp) SetLastErrorDateNil() {
	o.LastErrorDate.Set(nil)
}

// UnsetLastErrorDate ensures that no value is present for LastErrorDate, not even an explicit nil
func (o *CheckApp) UnsetLastErrorDate() {
	o.LastErrorDate.Unset()
}

// GetLastSuccessDate returns the LastSuccessDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CheckApp) GetLastSuccessDate() time.Time {
	if o == nil || o.LastSuccessDate.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.LastSuccessDate.Get()
}

// GetLastSuccessDateOk returns a tuple with the LastSuccessDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CheckApp) GetLastSuccessDateOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LastSuccessDate.Get(), o.LastSuccessDate.IsSet()
}

// HasLastSuccessDate returns a boolean if a field has been set.
func (o *CheckApp) HasLastSuccessDate() bool {
	if o != nil && o.LastSuccessDate.IsSet() {
		return true
	}

	return false
}

// SetLastSuccessDate gets a reference to the given NullableTime and assigns it to the LastSuccessDate field.
func (o *CheckApp) SetLastSuccessDate(v time.Time) {
	o.LastSuccessDate.Set(&v)
}
// SetLastSuccessDateNil sets the value for LastSuccessDate to be an explicit nil
func (o *CheckApp) SetLastSuccessDateNil() {
	o.LastSuccessDate.Set(nil)
}

// UnsetLastSuccessDate ensures that no value is present for LastSuccessDate, not even an explicit nil
func (o *CheckApp) UnsetLastSuccessDate() {
	o.LastSuccessDate.Unset()
}

// GetLastRunDate returns the LastRunDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CheckApp) GetLastRunDate() time.Time {
	if o == nil || o.LastRunDate.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.LastRunDate.Get()
}

// GetLastRunDateOk returns a tuple with the LastRunDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CheckApp) GetLastRunDateOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LastRunDate.Get(), o.LastRunDate.IsSet()
}

// HasLastRunDate returns a boolean if a field has been set.
func (o *CheckApp) HasLastRunDate() bool {
	if o != nil && o.LastRunDate.IsSet() {
		return true
	}

	return false
}

// SetLastRunDate gets a reference to the given NullableTime and assigns it to the LastRunDate field.
func (o *CheckApp) SetLastRunDate(v time.Time) {
	o.LastRunDate.Set(&v)
}
// SetLastRunDateNil sets the value for LastRunDate to be an explicit nil
func (o *CheckApp) SetLastRunDateNil() {
	o.LastRunDate.Set(nil)
}

// UnsetLastRunDate ensures that no value is present for LastRunDate, not even an explicit nil
func (o *CheckApp) UnsetLastRunDate() {
	o.LastRunDate.Unset()
}

// GetLastError returns the LastError field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CheckApp) GetLastError() string {
	if o == nil || o.LastError.Get() == nil {
		var ret string
		return ret
	}
	return *o.LastError.Get()
}

// GetLastErrorOk returns a tuple with the LastError field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CheckApp) GetLastErrorOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LastError.Get(), o.LastError.IsSet()
}

// HasLastError returns a boolean if a field has been set.
func (o *CheckApp) HasLastError() bool {
	if o != nil && o.LastError.IsSet() {
		return true
	}

	return false
}

// SetLastError gets a reference to the given NullableString and assigns it to the LastError field.
func (o *CheckApp) SetLastError(v string) {
	o.LastError.Set(&v)
}
// SetLastErrorNil sets the value for LastError to be an explicit nil
func (o *CheckApp) SetLastErrorNil() {
	o.LastError.Set(nil)
}

// UnsetLastError ensures that no value is present for LastError, not even an explicit nil
func (o *CheckApp) UnsetLastError() {
	o.LastError.Unset()
}

// GetLastTimer returns the LastTimer field value if set, zero value otherwise.
func (o *CheckApp) GetLastTimer() int64 {
	if o == nil || o.LastTimer == nil {
		var ret int64
		return ret
	}
	return *o.LastTimer
}

// GetLastTimerOk returns a tuple with the LastTimer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckApp) GetLastTimerOk() (*int64, bool) {
	if o == nil || o.LastTimer == nil {
		return nil, false
	}
	return o.LastTimer, true
}

// HasLastTimer returns a boolean if a field has been set.
func (o *CheckApp) HasLastTimer() bool {
	if o != nil && o.LastTimer != nil {
		return true
	}

	return false
}

// SetLastTimer gets a reference to the given int64 and assigns it to the LastTimer field.
func (o *CheckApp) SetLastTimer(v int64) {
	o.LastTimer = &v
}

// GetHealth returns the Health field value if set, zero value otherwise.
func (o *CheckApp) GetHealth() int64 {
	if o == nil || o.Health == nil {
		var ret int64
		return ret
	}
	return *o.Health
}

// GetHealthOk returns a tuple with the Health field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckApp) GetHealthOk() (*int64, bool) {
	if o == nil || o.Health == nil {
		return nil, false
	}
	return o.Health, true
}

// HasHealth returns a boolean if a field has been set.
func (o *CheckApp) HasHealth() bool {
	if o != nil && o.Health != nil {
		return true
	}

	return false
}

// SetHealth gets a reference to the given int64 and assigns it to the Health field.
func (o *CheckApp) SetHealth(v int64) {
	o.Health = &v
}

// GetHistory returns the History field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CheckApp) GetHistory() string {
	if o == nil || o.History.Get() == nil {
		var ret string
		return ret
	}
	return *o.History.Get()
}

// GetHistoryOk returns a tuple with the History field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CheckApp) GetHistoryOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.History.Get(), o.History.IsSet()
}

// HasHistory returns a boolean if a field has been set.
func (o *CheckApp) HasHistory() bool {
	if o != nil && o.History.IsSet() {
		return true
	}

	return false
}

// SetHistory gets a reference to the given NullableString and assigns it to the History field.
func (o *CheckApp) SetHistory(v string) {
	o.History.Set(&v)
}
// SetHistoryNil sets the value for History to be an explicit nil
func (o *CheckApp) SetHistoryNil() {
	o.History.Set(nil)
}

// UnsetHistory ensures that no value is present for History, not even an explicit nil
func (o *CheckApp) UnsetHistory() {
	o.History.Unset()
}

// GetSeverity returns the Severity field value if set, zero value otherwise.
func (o *CheckApp) GetSeverity() string {
	if o == nil || o.Severity == nil {
		var ret string
		return ret
	}
	return *o.Severity
}

// GetSeverityOk returns a tuple with the Severity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckApp) GetSeverityOk() (*string, bool) {
	if o == nil || o.Severity == nil {
		return nil, false
	}
	return o.Severity, true
}

// HasSeverity returns a boolean if a field has been set.
func (o *CheckApp) HasSeverity() bool {
	if o != nil && o.Severity != nil {
		return true
	}

	return false
}

// SetSeverity gets a reference to the given string and assigns it to the Severity field.
func (o *CheckApp) SetSeverity(v string) {
	o.Severity = &v
}

// GetCreateIncident returns the CreateIncident field value if set, zero value otherwise.
func (o *CheckApp) GetCreateIncident() bool {
	if o == nil || o.CreateIncident == nil {
		var ret bool
		return ret
	}
	return *o.CreateIncident
}

// GetCreateIncidentOk returns a tuple with the CreateIncident field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckApp) GetCreateIncidentOk() (*bool, bool) {
	if o == nil || o.CreateIncident == nil {
		return nil, false
	}
	return o.CreateIncident, true
}

// HasCreateIncident returns a boolean if a field has been set.
func (o *CheckApp) HasCreateIncident() bool {
	if o != nil && o.CreateIncident != nil {
		return true
	}

	return false
}

// SetCreateIncident gets a reference to the given bool and assigns it to the CreateIncident field.
func (o *CheckApp) SetCreateIncident(v bool) {
	o.CreateIncident = &v
}

// GetMuted returns the Muted field value if set, zero value otherwise.
func (o *CheckApp) GetMuted() bool {
	if o == nil || o.Muted == nil {
		var ret bool
		return ret
	}
	return *o.Muted
}

// GetMutedOk returns a tuple with the Muted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckApp) GetMutedOk() (*bool, bool) {
	if o == nil || o.Muted == nil {
		return nil, false
	}
	return o.Muted, true
}

// HasMuted returns a boolean if a field has been set.
func (o *CheckApp) HasMuted() bool {
	if o != nil && o.Muted != nil {
		return true
	}

	return false
}

// SetMuted gets a reference to the given bool and assigns it to the Muted field.
func (o *CheckApp) SetMuted(v bool) {
	o.Muted = &v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *CheckApp) GetCreatedBy() InlineResponse200107NetworkPoolCreatedBy {
	if o == nil || o.CreatedBy == nil {
		var ret InlineResponse200107NetworkPoolCreatedBy
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckApp) GetCreatedByOk() (*InlineResponse200107NetworkPoolCreatedBy, bool) {
	if o == nil || o.CreatedBy == nil {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *CheckApp) HasCreatedBy() bool {
	if o != nil && o.CreatedBy != nil {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given InlineResponse200107NetworkPoolCreatedBy and assigns it to the CreatedBy field.
func (o *CheckApp) SetCreatedBy(v InlineResponse200107NetworkPoolCreatedBy) {
	o.CreatedBy = &v
}

// GetDateCreated returns the DateCreated field value if set, zero value otherwise.
func (o *CheckApp) GetDateCreated() time.Time {
	if o == nil || o.DateCreated == nil {
		var ret time.Time
		return ret
	}
	return *o.DateCreated
}

// GetDateCreatedOk returns a tuple with the DateCreated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckApp) GetDateCreatedOk() (*time.Time, bool) {
	if o == nil || o.DateCreated == nil {
		return nil, false
	}
	return o.DateCreated, true
}

// HasDateCreated returns a boolean if a field has been set.
func (o *CheckApp) HasDateCreated() bool {
	if o != nil && o.DateCreated != nil {
		return true
	}

	return false
}

// SetDateCreated gets a reference to the given time.Time and assigns it to the DateCreated field.
func (o *CheckApp) SetDateCreated(v time.Time) {
	o.DateCreated = &v
}

// GetLastUpdated returns the LastUpdated field value if set, zero value otherwise.
func (o *CheckApp) GetLastUpdated() time.Time {
	if o == nil || o.LastUpdated == nil {
		var ret time.Time
		return ret
	}
	return *o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckApp) GetLastUpdatedOk() (*time.Time, bool) {
	if o == nil || o.LastUpdated == nil {
		return nil, false
	}
	return o.LastUpdated, true
}

// HasLastUpdated returns a boolean if a field has been set.
func (o *CheckApp) HasLastUpdated() bool {
	if o != nil && o.LastUpdated != nil {
		return true
	}

	return false
}

// SetLastUpdated gets a reference to the given time.Time and assigns it to the LastUpdated field.
func (o *CheckApp) SetLastUpdated(v time.Time) {
	o.LastUpdated = &v
}

// GetAvailability returns the Availability field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CheckApp) GetAvailability() string {
	if o == nil || o.Availability.Get() == nil {
		var ret string
		return ret
	}
	return *o.Availability.Get()
}

// GetAvailabilityOk returns a tuple with the Availability field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CheckApp) GetAvailabilityOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Availability.Get(), o.Availability.IsSet()
}

// HasAvailability returns a boolean if a field has been set.
func (o *CheckApp) HasAvailability() bool {
	if o != nil && o.Availability.IsSet() {
		return true
	}

	return false
}

// SetAvailability gets a reference to the given NullableString and assigns it to the Availability field.
func (o *CheckApp) SetAvailability(v string) {
	o.Availability.Set(&v)
}
// SetAvailabilityNil sets the value for Availability to be an explicit nil
func (o *CheckApp) SetAvailabilityNil() {
	o.Availability.Set(nil)
}

// UnsetAvailability ensures that no value is present for Availability, not even an explicit nil
func (o *CheckApp) UnsetAvailability() {
	o.Availability.Unset()
}

// GetChecks returns the Checks field value if set, zero value otherwise.
func (o *CheckApp) GetChecks() []int64 {
	if o == nil || o.Checks == nil {
		var ret []int64
		return ret
	}
	return *o.Checks
}

// GetChecksOk returns a tuple with the Checks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckApp) GetChecksOk() (*[]int64, bool) {
	if o == nil || o.Checks == nil {
		return nil, false
	}
	return o.Checks, true
}

// HasChecks returns a boolean if a field has been set.
func (o *CheckApp) HasChecks() bool {
	if o != nil && o.Checks != nil {
		return true
	}

	return false
}

// SetChecks gets a reference to the given []int64 and assigns it to the Checks field.
func (o *CheckApp) SetChecks(v []int64) {
	o.Checks = &v
}

// GetCheckGroups returns the CheckGroups field value if set, zero value otherwise.
func (o *CheckApp) GetCheckGroups() []int64 {
	if o == nil || o.CheckGroups == nil {
		var ret []int64
		return ret
	}
	return *o.CheckGroups
}

// GetCheckGroupsOk returns a tuple with the CheckGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckApp) GetCheckGroupsOk() (*[]int64, bool) {
	if o == nil || o.CheckGroups == nil {
		return nil, false
	}
	return o.CheckGroups, true
}

// HasCheckGroups returns a boolean if a field has been set.
func (o *CheckApp) HasCheckGroups() bool {
	if o != nil && o.CheckGroups != nil {
		return true
	}

	return false
}

// SetCheckGroups gets a reference to the given []int64 and assigns it to the CheckGroups field.
func (o *CheckApp) SetCheckGroups(v []int64) {
	o.CheckGroups = &v
}

func (o CheckApp) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Account != nil {
		toSerialize["account"] = o.Account
	}
	if o.Active != nil {
		toSerialize["active"] = o.Active
	}
	if o.App.IsSet() {
		toSerialize["app"] = o.App.Get()
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.InUptime != nil {
		toSerialize["inUptime"] = o.InUptime
	}
	if o.LastCheckStatus.IsSet() {
		toSerialize["lastCheckStatus"] = o.LastCheckStatus.Get()
	}
	if o.LastWarningDate.IsSet() {
		toSerialize["lastWarningDate"] = o.LastWarningDate.Get()
	}
	if o.LastErrorDate.IsSet() {
		toSerialize["lastErrorDate"] = o.LastErrorDate.Get()
	}
	if o.LastSuccessDate.IsSet() {
		toSerialize["lastSuccessDate"] = o.LastSuccessDate.Get()
	}
	if o.LastRunDate.IsSet() {
		toSerialize["lastRunDate"] = o.LastRunDate.Get()
	}
	if o.LastError.IsSet() {
		toSerialize["lastError"] = o.LastError.Get()
	}
	if o.LastTimer != nil {
		toSerialize["lastTimer"] = o.LastTimer
	}
	if o.Health != nil {
		toSerialize["health"] = o.Health
	}
	if o.History.IsSet() {
		toSerialize["history"] = o.History.Get()
	}
	if o.Severity != nil {
		toSerialize["severity"] = o.Severity
	}
	if o.CreateIncident != nil {
		toSerialize["createIncident"] = o.CreateIncident
	}
	if o.Muted != nil {
		toSerialize["muted"] = o.Muted
	}
	if o.CreatedBy != nil {
		toSerialize["createdBy"] = o.CreatedBy
	}
	if o.DateCreated != nil {
		toSerialize["dateCreated"] = o.DateCreated
	}
	if o.LastUpdated != nil {
		toSerialize["lastUpdated"] = o.LastUpdated
	}
	if o.Availability.IsSet() {
		toSerialize["availability"] = o.Availability.Get()
	}
	if o.Checks != nil {
		toSerialize["checks"] = o.Checks
	}
	if o.CheckGroups != nil {
		toSerialize["checkGroups"] = o.CheckGroups
	}
	return json.Marshal(toSerialize)
}

type NullableCheckApp struct {
	value *CheckApp
	isSet bool
}

func (v NullableCheckApp) Get() *CheckApp {
	return v.value
}

func (v *NullableCheckApp) Set(val *CheckApp) {
	v.value = val
	v.isSet = true
}

func (v NullableCheckApp) IsSet() bool {
	return v.isSet
}

func (v *NullableCheckApp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCheckApp(val *CheckApp) *NullableCheckApp {
	return &NullableCheckApp{value: val, isSet: true}
}

func (v NullableCheckApp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCheckApp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


