/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// Issue struct for Issue
type Issue struct {
	Id *int64 `json:"id,omitempty"`
	AttachmentType *string `json:"attachmentType,omitempty"`
	App NullableString `json:"app,omitempty"`
	Available *bool `json:"available,omitempty"`
	Check NullableString `json:"check,omitempty"`
	CheckGroup *InlineResponse20040AppDeployInstance `json:"checkGroup,omitempty"`
	CheckStatus NullableString `json:"checkStatus,omitempty"`
	EndDate NullableTime `json:"endDate,omitempty"`
	Health *int64 `json:"health,omitempty"`
	InUptime *bool `json:"inUptime,omitempty"`
	Incident *ApiBlueprintsIdUpdatePermissionsResourcePermissionSites `json:"incident,omitempty"`
	LastCheckTime NullableTime `json:"lastCheckTime,omitempty"`
	LastError NullableString `json:"lastError,omitempty"`
	LastMessage NullableString `json:"lastMessage,omitempty"`
	Name *string `json:"name,omitempty"`
	Severity *string `json:"severity,omitempty"`
	SeverityId *int64 `json:"severityId,omitempty"`
	StartDate *time.Time `json:"startDate,omitempty"`
	Status *string `json:"status,omitempty"`
}

// NewIssue instantiates a new Issue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIssue() *Issue {
	this := Issue{}
	return &this
}

// NewIssueWithDefaults instantiates a new Issue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIssueWithDefaults() *Issue {
	this := Issue{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Issue) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Issue) GetIdOk() (*int64, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Issue) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *Issue) SetId(v int64) {
	o.Id = &v
}

// GetAttachmentType returns the AttachmentType field value if set, zero value otherwise.
func (o *Issue) GetAttachmentType() string {
	if o == nil || o.AttachmentType == nil {
		var ret string
		return ret
	}
	return *o.AttachmentType
}

// GetAttachmentTypeOk returns a tuple with the AttachmentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Issue) GetAttachmentTypeOk() (*string, bool) {
	if o == nil || o.AttachmentType == nil {
		return nil, false
	}
	return o.AttachmentType, true
}

// HasAttachmentType returns a boolean if a field has been set.
func (o *Issue) HasAttachmentType() bool {
	if o != nil && o.AttachmentType != nil {
		return true
	}

	return false
}

// SetAttachmentType gets a reference to the given string and assigns it to the AttachmentType field.
func (o *Issue) SetAttachmentType(v string) {
	o.AttachmentType = &v
}

// GetApp returns the App field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Issue) GetApp() string {
	if o == nil || o.App.Get() == nil {
		var ret string
		return ret
	}
	return *o.App.Get()
}

// GetAppOk returns a tuple with the App field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Issue) GetAppOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.App.Get(), o.App.IsSet()
}

// HasApp returns a boolean if a field has been set.
func (o *Issue) HasApp() bool {
	if o != nil && o.App.IsSet() {
		return true
	}

	return false
}

// SetApp gets a reference to the given NullableString and assigns it to the App field.
func (o *Issue) SetApp(v string) {
	o.App.Set(&v)
}
// SetAppNil sets the value for App to be an explicit nil
func (o *Issue) SetAppNil() {
	o.App.Set(nil)
}

// UnsetApp ensures that no value is present for App, not even an explicit nil
func (o *Issue) UnsetApp() {
	o.App.Unset()
}

// GetAvailable returns the Available field value if set, zero value otherwise.
func (o *Issue) GetAvailable() bool {
	if o == nil || o.Available == nil {
		var ret bool
		return ret
	}
	return *o.Available
}

// GetAvailableOk returns a tuple with the Available field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Issue) GetAvailableOk() (*bool, bool) {
	if o == nil || o.Available == nil {
		return nil, false
	}
	return o.Available, true
}

// HasAvailable returns a boolean if a field has been set.
func (o *Issue) HasAvailable() bool {
	if o != nil && o.Available != nil {
		return true
	}

	return false
}

// SetAvailable gets a reference to the given bool and assigns it to the Available field.
func (o *Issue) SetAvailable(v bool) {
	o.Available = &v
}

// GetCheck returns the Check field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Issue) GetCheck() string {
	if o == nil || o.Check.Get() == nil {
		var ret string
		return ret
	}
	return *o.Check.Get()
}

// GetCheckOk returns a tuple with the Check field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Issue) GetCheckOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Check.Get(), o.Check.IsSet()
}

// HasCheck returns a boolean if a field has been set.
func (o *Issue) HasCheck() bool {
	if o != nil && o.Check.IsSet() {
		return true
	}

	return false
}

// SetCheck gets a reference to the given NullableString and assigns it to the Check field.
func (o *Issue) SetCheck(v string) {
	o.Check.Set(&v)
}
// SetCheckNil sets the value for Check to be an explicit nil
func (o *Issue) SetCheckNil() {
	o.Check.Set(nil)
}

// UnsetCheck ensures that no value is present for Check, not even an explicit nil
func (o *Issue) UnsetCheck() {
	o.Check.Unset()
}

// GetCheckGroup returns the CheckGroup field value if set, zero value otherwise.
func (o *Issue) GetCheckGroup() InlineResponse20040AppDeployInstance {
	if o == nil || o.CheckGroup == nil {
		var ret InlineResponse20040AppDeployInstance
		return ret
	}
	return *o.CheckGroup
}

// GetCheckGroupOk returns a tuple with the CheckGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Issue) GetCheckGroupOk() (*InlineResponse20040AppDeployInstance, bool) {
	if o == nil || o.CheckGroup == nil {
		return nil, false
	}
	return o.CheckGroup, true
}

// HasCheckGroup returns a boolean if a field has been set.
func (o *Issue) HasCheckGroup() bool {
	if o != nil && o.CheckGroup != nil {
		return true
	}

	return false
}

// SetCheckGroup gets a reference to the given InlineResponse20040AppDeployInstance and assigns it to the CheckGroup field.
func (o *Issue) SetCheckGroup(v InlineResponse20040AppDeployInstance) {
	o.CheckGroup = &v
}

// GetCheckStatus returns the CheckStatus field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Issue) GetCheckStatus() string {
	if o == nil || o.CheckStatus.Get() == nil {
		var ret string
		return ret
	}
	return *o.CheckStatus.Get()
}

// GetCheckStatusOk returns a tuple with the CheckStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Issue) GetCheckStatusOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CheckStatus.Get(), o.CheckStatus.IsSet()
}

// HasCheckStatus returns a boolean if a field has been set.
func (o *Issue) HasCheckStatus() bool {
	if o != nil && o.CheckStatus.IsSet() {
		return true
	}

	return false
}

// SetCheckStatus gets a reference to the given NullableString and assigns it to the CheckStatus field.
func (o *Issue) SetCheckStatus(v string) {
	o.CheckStatus.Set(&v)
}
// SetCheckStatusNil sets the value for CheckStatus to be an explicit nil
func (o *Issue) SetCheckStatusNil() {
	o.CheckStatus.Set(nil)
}

// UnsetCheckStatus ensures that no value is present for CheckStatus, not even an explicit nil
func (o *Issue) UnsetCheckStatus() {
	o.CheckStatus.Unset()
}

// GetEndDate returns the EndDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Issue) GetEndDate() time.Time {
	if o == nil || o.EndDate.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.EndDate.Get()
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Issue) GetEndDateOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EndDate.Get(), o.EndDate.IsSet()
}

// HasEndDate returns a boolean if a field has been set.
func (o *Issue) HasEndDate() bool {
	if o != nil && o.EndDate.IsSet() {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given NullableTime and assigns it to the EndDate field.
func (o *Issue) SetEndDate(v time.Time) {
	o.EndDate.Set(&v)
}
// SetEndDateNil sets the value for EndDate to be an explicit nil
func (o *Issue) SetEndDateNil() {
	o.EndDate.Set(nil)
}

// UnsetEndDate ensures that no value is present for EndDate, not even an explicit nil
func (o *Issue) UnsetEndDate() {
	o.EndDate.Unset()
}

// GetHealth returns the Health field value if set, zero value otherwise.
func (o *Issue) GetHealth() int64 {
	if o == nil || o.Health == nil {
		var ret int64
		return ret
	}
	return *o.Health
}

// GetHealthOk returns a tuple with the Health field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Issue) GetHealthOk() (*int64, bool) {
	if o == nil || o.Health == nil {
		return nil, false
	}
	return o.Health, true
}

// HasHealth returns a boolean if a field has been set.
func (o *Issue) HasHealth() bool {
	if o != nil && o.Health != nil {
		return true
	}

	return false
}

// SetHealth gets a reference to the given int64 and assigns it to the Health field.
func (o *Issue) SetHealth(v int64) {
	o.Health = &v
}

// GetInUptime returns the InUptime field value if set, zero value otherwise.
func (o *Issue) GetInUptime() bool {
	if o == nil || o.InUptime == nil {
		var ret bool
		return ret
	}
	return *o.InUptime
}

// GetInUptimeOk returns a tuple with the InUptime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Issue) GetInUptimeOk() (*bool, bool) {
	if o == nil || o.InUptime == nil {
		return nil, false
	}
	return o.InUptime, true
}

// HasInUptime returns a boolean if a field has been set.
func (o *Issue) HasInUptime() bool {
	if o != nil && o.InUptime != nil {
		return true
	}

	return false
}

// SetInUptime gets a reference to the given bool and assigns it to the InUptime field.
func (o *Issue) SetInUptime(v bool) {
	o.InUptime = &v
}

// GetIncident returns the Incident field value if set, zero value otherwise.
func (o *Issue) GetIncident() ApiBlueprintsIdUpdatePermissionsResourcePermissionSites {
	if o == nil || o.Incident == nil {
		var ret ApiBlueprintsIdUpdatePermissionsResourcePermissionSites
		return ret
	}
	return *o.Incident
}

// GetIncidentOk returns a tuple with the Incident field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Issue) GetIncidentOk() (*ApiBlueprintsIdUpdatePermissionsResourcePermissionSites, bool) {
	if o == nil || o.Incident == nil {
		return nil, false
	}
	return o.Incident, true
}

// HasIncident returns a boolean if a field has been set.
func (o *Issue) HasIncident() bool {
	if o != nil && o.Incident != nil {
		return true
	}

	return false
}

// SetIncident gets a reference to the given ApiBlueprintsIdUpdatePermissionsResourcePermissionSites and assigns it to the Incident field.
func (o *Issue) SetIncident(v ApiBlueprintsIdUpdatePermissionsResourcePermissionSites) {
	o.Incident = &v
}

// GetLastCheckTime returns the LastCheckTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Issue) GetLastCheckTime() time.Time {
	if o == nil || o.LastCheckTime.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.LastCheckTime.Get()
}

// GetLastCheckTimeOk returns a tuple with the LastCheckTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Issue) GetLastCheckTimeOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LastCheckTime.Get(), o.LastCheckTime.IsSet()
}

// HasLastCheckTime returns a boolean if a field has been set.
func (o *Issue) HasLastCheckTime() bool {
	if o != nil && o.LastCheckTime.IsSet() {
		return true
	}

	return false
}

// SetLastCheckTime gets a reference to the given NullableTime and assigns it to the LastCheckTime field.
func (o *Issue) SetLastCheckTime(v time.Time) {
	o.LastCheckTime.Set(&v)
}
// SetLastCheckTimeNil sets the value for LastCheckTime to be an explicit nil
func (o *Issue) SetLastCheckTimeNil() {
	o.LastCheckTime.Set(nil)
}

// UnsetLastCheckTime ensures that no value is present for LastCheckTime, not even an explicit nil
func (o *Issue) UnsetLastCheckTime() {
	o.LastCheckTime.Unset()
}

// GetLastError returns the LastError field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Issue) GetLastError() string {
	if o == nil || o.LastError.Get() == nil {
		var ret string
		return ret
	}
	return *o.LastError.Get()
}

// GetLastErrorOk returns a tuple with the LastError field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Issue) GetLastErrorOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LastError.Get(), o.LastError.IsSet()
}

// HasLastError returns a boolean if a field has been set.
func (o *Issue) HasLastError() bool {
	if o != nil && o.LastError.IsSet() {
		return true
	}

	return false
}

// SetLastError gets a reference to the given NullableString and assigns it to the LastError field.
func (o *Issue) SetLastError(v string) {
	o.LastError.Set(&v)
}
// SetLastErrorNil sets the value for LastError to be an explicit nil
func (o *Issue) SetLastErrorNil() {
	o.LastError.Set(nil)
}

// UnsetLastError ensures that no value is present for LastError, not even an explicit nil
func (o *Issue) UnsetLastError() {
	o.LastError.Unset()
}

// GetLastMessage returns the LastMessage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Issue) GetLastMessage() string {
	if o == nil || o.LastMessage.Get() == nil {
		var ret string
		return ret
	}
	return *o.LastMessage.Get()
}

// GetLastMessageOk returns a tuple with the LastMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Issue) GetLastMessageOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LastMessage.Get(), o.LastMessage.IsSet()
}

// HasLastMessage returns a boolean if a field has been set.
func (o *Issue) HasLastMessage() bool {
	if o != nil && o.LastMessage.IsSet() {
		return true
	}

	return false
}

// SetLastMessage gets a reference to the given NullableString and assigns it to the LastMessage field.
func (o *Issue) SetLastMessage(v string) {
	o.LastMessage.Set(&v)
}
// SetLastMessageNil sets the value for LastMessage to be an explicit nil
func (o *Issue) SetLastMessageNil() {
	o.LastMessage.Set(nil)
}

// UnsetLastMessage ensures that no value is present for LastMessage, not even an explicit nil
func (o *Issue) UnsetLastMessage() {
	o.LastMessage.Unset()
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Issue) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Issue) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Issue) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Issue) SetName(v string) {
	o.Name = &v
}

// GetSeverity returns the Severity field value if set, zero value otherwise.
func (o *Issue) GetSeverity() string {
	if o == nil || o.Severity == nil {
		var ret string
		return ret
	}
	return *o.Severity
}

// GetSeverityOk returns a tuple with the Severity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Issue) GetSeverityOk() (*string, bool) {
	if o == nil || o.Severity == nil {
		return nil, false
	}
	return o.Severity, true
}

// HasSeverity returns a boolean if a field has been set.
func (o *Issue) HasSeverity() bool {
	if o != nil && o.Severity != nil {
		return true
	}

	return false
}

// SetSeverity gets a reference to the given string and assigns it to the Severity field.
func (o *Issue) SetSeverity(v string) {
	o.Severity = &v
}

// GetSeverityId returns the SeverityId field value if set, zero value otherwise.
func (o *Issue) GetSeverityId() int64 {
	if o == nil || o.SeverityId == nil {
		var ret int64
		return ret
	}
	return *o.SeverityId
}

// GetSeverityIdOk returns a tuple with the SeverityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Issue) GetSeverityIdOk() (*int64, bool) {
	if o == nil || o.SeverityId == nil {
		return nil, false
	}
	return o.SeverityId, true
}

// HasSeverityId returns a boolean if a field has been set.
func (o *Issue) HasSeverityId() bool {
	if o != nil && o.SeverityId != nil {
		return true
	}

	return false
}

// SetSeverityId gets a reference to the given int64 and assigns it to the SeverityId field.
func (o *Issue) SetSeverityId(v int64) {
	o.SeverityId = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *Issue) GetStartDate() time.Time {
	if o == nil || o.StartDate == nil {
		var ret time.Time
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Issue) GetStartDateOk() (*time.Time, bool) {
	if o == nil || o.StartDate == nil {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *Issue) HasStartDate() bool {
	if o != nil && o.StartDate != nil {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given time.Time and assigns it to the StartDate field.
func (o *Issue) SetStartDate(v time.Time) {
	o.StartDate = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Issue) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Issue) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Issue) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *Issue) SetStatus(v string) {
	o.Status = &v
}

func (o Issue) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.AttachmentType != nil {
		toSerialize["attachmentType"] = o.AttachmentType
	}
	if o.App.IsSet() {
		toSerialize["app"] = o.App.Get()
	}
	if o.Available != nil {
		toSerialize["available"] = o.Available
	}
	if o.Check.IsSet() {
		toSerialize["check"] = o.Check.Get()
	}
	if o.CheckGroup != nil {
		toSerialize["checkGroup"] = o.CheckGroup
	}
	if o.CheckStatus.IsSet() {
		toSerialize["checkStatus"] = o.CheckStatus.Get()
	}
	if o.EndDate.IsSet() {
		toSerialize["endDate"] = o.EndDate.Get()
	}
	if o.Health != nil {
		toSerialize["health"] = o.Health
	}
	if o.InUptime != nil {
		toSerialize["inUptime"] = o.InUptime
	}
	if o.Incident != nil {
		toSerialize["incident"] = o.Incident
	}
	if o.LastCheckTime.IsSet() {
		toSerialize["lastCheckTime"] = o.LastCheckTime.Get()
	}
	if o.LastError.IsSet() {
		toSerialize["lastError"] = o.LastError.Get()
	}
	if o.LastMessage.IsSet() {
		toSerialize["lastMessage"] = o.LastMessage.Get()
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Severity != nil {
		toSerialize["severity"] = o.Severity
	}
	if o.SeverityId != nil {
		toSerialize["severityId"] = o.SeverityId
	}
	if o.StartDate != nil {
		toSerialize["startDate"] = o.StartDate
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	return json.Marshal(toSerialize)
}

type NullableIssue struct {
	value *Issue
	isSet bool
}

func (v NullableIssue) Get() *Issue {
	return v.value
}

func (v *NullableIssue) Set(val *Issue) {
	v.value = val
	v.isSet = true
}

func (v NullableIssue) IsSet() bool {
	return v.isSet
}

func (v *NullableIssue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIssue(val *Issue) *NullableIssue {
	return &NullableIssue{value: val, isSet: true}
}

func (v NullableIssue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIssue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


