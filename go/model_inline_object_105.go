/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InlineObject105 struct for InlineObject105
type InlineObject105 struct {
	KeyPair ApiKeyPairsKeyPair `json:"keyPair"`
}

// NewInlineObject105 instantiates a new InlineObject105 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineObject105(keyPair ApiKeyPairsKeyPair, ) *InlineObject105 {
	this := InlineObject105{}
	this.KeyPair = keyPair
	return &this
}

// NewInlineObject105WithDefaults instantiates a new InlineObject105 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineObject105WithDefaults() *InlineObject105 {
	this := InlineObject105{}
	return &this
}

// GetKeyPair returns the KeyPair field value
func (o *InlineObject105) GetKeyPair() ApiKeyPairsKeyPair {
	if o == nil  {
		var ret ApiKeyPairsKeyPair
		return ret
	}

	return o.KeyPair
}

// GetKeyPairOk returns a tuple with the KeyPair field value
// and a boolean to check if the value has been set.
func (o *InlineObject105) GetKeyPairOk() (*ApiKeyPairsKeyPair, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.KeyPair, true
}

// SetKeyPair sets field value
func (o *InlineObject105) SetKeyPair(v ApiKeyPairsKeyPair) {
	o.KeyPair = v
}

func (o InlineObject105) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["keyPair"] = o.KeyPair
	}
	return json.Marshal(toSerialize)
}

type NullableInlineObject105 struct {
	value *InlineObject105
	isSet bool
}

func (v NullableInlineObject105) Get() *InlineObject105 {
	return v.value
}

func (v *NullableInlineObject105) Set(val *InlineObject105) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineObject105) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineObject105) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineObject105(val *InlineObject105) *NullableInlineObject105 {
	return &NullableInlineObject105{value: val, isSet: true}
}

func (v NullableInlineObject105) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineObject105) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


