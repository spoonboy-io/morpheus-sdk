/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// SpecTemplateCreate struct for SpecTemplateCreate
type SpecTemplateCreate struct {
	// Spec template name
	Name string `json:"name"`
	// Array of label strings, can be used for filtering.
	Labels []string `json:"labels,omitempty"`
	Type SpecTemplateCreateType `json:"type"`
	File SpecTemplateCreateFile `json:"file"`
	Config *SpecTemplateCreateConfig `json:"config,omitempty"`
}

// NewSpecTemplateCreate instantiates a new SpecTemplateCreate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpecTemplateCreate(name string, type_ SpecTemplateCreateType, file SpecTemplateCreateFile, ) *SpecTemplateCreate {
	this := SpecTemplateCreate{}
	this.Name = name
	this.Type = type_
	this.File = file
	return &this
}

// NewSpecTemplateCreateWithDefaults instantiates a new SpecTemplateCreate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpecTemplateCreateWithDefaults() *SpecTemplateCreate {
	this := SpecTemplateCreate{}
	return &this
}

// GetName returns the Name field value
func (o *SpecTemplateCreate) GetName() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SpecTemplateCreate) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SpecTemplateCreate) SetName(v string) {
	o.Name = v
}

// GetLabels returns the Labels field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SpecTemplateCreate) GetLabels() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SpecTemplateCreate) GetLabelsOk() (*[]string, bool) {
	if o == nil || o.Labels == nil {
		return nil, false
	}
	return &o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *SpecTemplateCreate) HasLabels() bool {
	if o != nil && o.Labels != nil {
		return true
	}

	return false
}

// SetLabels gets a reference to the given []string and assigns it to the Labels field.
func (o *SpecTemplateCreate) SetLabels(v []string) {
	o.Labels = v
}

// GetType returns the Type field value
func (o *SpecTemplateCreate) GetType() SpecTemplateCreateType {
	if o == nil  {
		var ret SpecTemplateCreateType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *SpecTemplateCreate) GetTypeOk() (*SpecTemplateCreateType, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *SpecTemplateCreate) SetType(v SpecTemplateCreateType) {
	o.Type = v
}

// GetFile returns the File field value
func (o *SpecTemplateCreate) GetFile() SpecTemplateCreateFile {
	if o == nil  {
		var ret SpecTemplateCreateFile
		return ret
	}

	return o.File
}

// GetFileOk returns a tuple with the File field value
// and a boolean to check if the value has been set.
func (o *SpecTemplateCreate) GetFileOk() (*SpecTemplateCreateFile, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.File, true
}

// SetFile sets field value
func (o *SpecTemplateCreate) SetFile(v SpecTemplateCreateFile) {
	o.File = v
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *SpecTemplateCreate) GetConfig() SpecTemplateCreateConfig {
	if o == nil || o.Config == nil {
		var ret SpecTemplateCreateConfig
		return ret
	}
	return *o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecTemplateCreate) GetConfigOk() (*SpecTemplateCreateConfig, bool) {
	if o == nil || o.Config == nil {
		return nil, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *SpecTemplateCreate) HasConfig() bool {
	if o != nil && o.Config != nil {
		return true
	}

	return false
}

// SetConfig gets a reference to the given SpecTemplateCreateConfig and assigns it to the Config field.
func (o *SpecTemplateCreate) SetConfig(v SpecTemplateCreateConfig) {
	o.Config = &v
}

func (o SpecTemplateCreate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.Labels != nil {
		toSerialize["labels"] = o.Labels
	}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["file"] = o.File
	}
	if o.Config != nil {
		toSerialize["config"] = o.Config
	}
	return json.Marshal(toSerialize)
}

type NullableSpecTemplateCreate struct {
	value *SpecTemplateCreate
	isSet bool
}

func (v NullableSpecTemplateCreate) Get() *SpecTemplateCreate {
	return v.value
}

func (v *NullableSpecTemplateCreate) Set(val *SpecTemplateCreate) {
	v.value = val
	v.isSet = true
}

func (v NullableSpecTemplateCreate) IsSet() bool {
	return v.isSet
}

func (v *NullableSpecTemplateCreate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpecTemplateCreate(val *SpecTemplateCreate) *NullableSpecTemplateCreate {
	return &NullableSpecTemplateCreate{value: val, isSet: true}
}

func (v NullableSpecTemplateCreate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpecTemplateCreate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


