/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// AppStateInputData struct for AppStateInputData
type AppStateInputData struct {
	Key *string `json:"key,omitempty"`
	Name *OneOfstringobject `json:"name,omitempty"`
	Type *string `json:"type,omitempty"`
}

// NewAppStateInputData instantiates a new AppStateInputData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppStateInputData() *AppStateInputData {
	this := AppStateInputData{}
	return &this
}

// NewAppStateInputDataWithDefaults instantiates a new AppStateInputData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppStateInputDataWithDefaults() *AppStateInputData {
	this := AppStateInputData{}
	return &this
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *AppStateInputData) GetKey() string {
	if o == nil || o.Key == nil {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppStateInputData) GetKeyOk() (*string, bool) {
	if o == nil || o.Key == nil {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *AppStateInputData) HasKey() bool {
	if o != nil && o.Key != nil {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *AppStateInputData) SetKey(v string) {
	o.Key = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AppStateInputData) GetName() OneOfstringobject {
	if o == nil || o.Name == nil {
		var ret OneOfstringobject
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppStateInputData) GetNameOk() (*OneOfstringobject, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AppStateInputData) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given OneOfstringobject and assigns it to the Name field.
func (o *AppStateInputData) SetName(v OneOfstringobject) {
	o.Name = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *AppStateInputData) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppStateInputData) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *AppStateInputData) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *AppStateInputData) SetType(v string) {
	o.Type = &v
}

func (o AppStateInputData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Key != nil {
		toSerialize["key"] = o.Key
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableAppStateInputData struct {
	value *AppStateInputData
	isSet bool
}

func (v NullableAppStateInputData) Get() *AppStateInputData {
	return v.value
}

func (v *NullableAppStateInputData) Set(val *AppStateInputData) {
	v.value = val
	v.isSet = true
}

func (v NullableAppStateInputData) IsSet() bool {
	return v.isSet
}

func (v *NullableAppStateInputData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppStateInputData(val *AppStateInputData) *NullableAppStateInputData {
	return &NullableAppStateInputData{value: val, isSet: true}
}

func (v NullableAppStateInputData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppStateInputData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


