/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InlineObject168 The parameters for update a Network DHCP Relay is type dependent. The following lists the common parameters. Get a specific network type to list available options for the network relay type. 
type InlineObject168 struct {
	NetworkDhcpRelay *map[string]interface{} `json:"networkDhcpRelay,omitempty"`
}

// NewInlineObject168 instantiates a new InlineObject168 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineObject168() *InlineObject168 {
	this := InlineObject168{}
	return &this
}

// NewInlineObject168WithDefaults instantiates a new InlineObject168 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineObject168WithDefaults() *InlineObject168 {
	this := InlineObject168{}
	return &this
}

// GetNetworkDhcpRelay returns the NetworkDhcpRelay field value if set, zero value otherwise.
func (o *InlineObject168) GetNetworkDhcpRelay() map[string]interface{} {
	if o == nil || o.NetworkDhcpRelay == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.NetworkDhcpRelay
}

// GetNetworkDhcpRelayOk returns a tuple with the NetworkDhcpRelay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject168) GetNetworkDhcpRelayOk() (*map[string]interface{}, bool) {
	if o == nil || o.NetworkDhcpRelay == nil {
		return nil, false
	}
	return o.NetworkDhcpRelay, true
}

// HasNetworkDhcpRelay returns a boolean if a field has been set.
func (o *InlineObject168) HasNetworkDhcpRelay() bool {
	if o != nil && o.NetworkDhcpRelay != nil {
		return true
	}

	return false
}

// SetNetworkDhcpRelay gets a reference to the given map[string]interface{} and assigns it to the NetworkDhcpRelay field.
func (o *InlineObject168) SetNetworkDhcpRelay(v map[string]interface{}) {
	o.NetworkDhcpRelay = &v
}

func (o InlineObject168) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.NetworkDhcpRelay != nil {
		toSerialize["networkDhcpRelay"] = o.NetworkDhcpRelay
	}
	return json.Marshal(toSerialize)
}

type NullableInlineObject168 struct {
	value *InlineObject168
	isSet bool
}

func (v NullableInlineObject168) Get() *InlineObject168 {
	return v.value
}

func (v *NullableInlineObject168) Set(val *InlineObject168) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineObject168) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineObject168) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineObject168(val *InlineObject168) *NullableInlineObject168 {
	return &NullableInlineObject168{value: val, isSet: true}
}

func (v NullableInlineObject168) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineObject168) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


