/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InlineResponse2004 struct for InlineResponse2004
type InlineResponse2004 struct {
	ArchiveBucket *ArchiveBucket `json:"archiveBucket,omitempty"`
	IsOwner *bool `json:"isOwner,omitempty"`
	ParentDirectory NullableString `json:"parentDirectory,omitempty"`
	ArchiveFiles *[]ArchiveBucketFile `json:"archiveFiles,omitempty"`
	ArchiveFileCount *int64 `json:"archiveFileCount,omitempty"`
}

// NewInlineResponse2004 instantiates a new InlineResponse2004 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse2004() *InlineResponse2004 {
	this := InlineResponse2004{}
	return &this
}

// NewInlineResponse2004WithDefaults instantiates a new InlineResponse2004 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse2004WithDefaults() *InlineResponse2004 {
	this := InlineResponse2004{}
	return &this
}

// GetArchiveBucket returns the ArchiveBucket field value if set, zero value otherwise.
func (o *InlineResponse2004) GetArchiveBucket() ArchiveBucket {
	if o == nil || o.ArchiveBucket == nil {
		var ret ArchiveBucket
		return ret
	}
	return *o.ArchiveBucket
}

// GetArchiveBucketOk returns a tuple with the ArchiveBucket field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2004) GetArchiveBucketOk() (*ArchiveBucket, bool) {
	if o == nil || o.ArchiveBucket == nil {
		return nil, false
	}
	return o.ArchiveBucket, true
}

// HasArchiveBucket returns a boolean if a field has been set.
func (o *InlineResponse2004) HasArchiveBucket() bool {
	if o != nil && o.ArchiveBucket != nil {
		return true
	}

	return false
}

// SetArchiveBucket gets a reference to the given ArchiveBucket and assigns it to the ArchiveBucket field.
func (o *InlineResponse2004) SetArchiveBucket(v ArchiveBucket) {
	o.ArchiveBucket = &v
}

// GetIsOwner returns the IsOwner field value if set, zero value otherwise.
func (o *InlineResponse2004) GetIsOwner() bool {
	if o == nil || o.IsOwner == nil {
		var ret bool
		return ret
	}
	return *o.IsOwner
}

// GetIsOwnerOk returns a tuple with the IsOwner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2004) GetIsOwnerOk() (*bool, bool) {
	if o == nil || o.IsOwner == nil {
		return nil, false
	}
	return o.IsOwner, true
}

// HasIsOwner returns a boolean if a field has been set.
func (o *InlineResponse2004) HasIsOwner() bool {
	if o != nil && o.IsOwner != nil {
		return true
	}

	return false
}

// SetIsOwner gets a reference to the given bool and assigns it to the IsOwner field.
func (o *InlineResponse2004) SetIsOwner(v bool) {
	o.IsOwner = &v
}

// GetParentDirectory returns the ParentDirectory field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InlineResponse2004) GetParentDirectory() string {
	if o == nil || o.ParentDirectory.Get() == nil {
		var ret string
		return ret
	}
	return *o.ParentDirectory.Get()
}

// GetParentDirectoryOk returns a tuple with the ParentDirectory field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InlineResponse2004) GetParentDirectoryOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ParentDirectory.Get(), o.ParentDirectory.IsSet()
}

// HasParentDirectory returns a boolean if a field has been set.
func (o *InlineResponse2004) HasParentDirectory() bool {
	if o != nil && o.ParentDirectory.IsSet() {
		return true
	}

	return false
}

// SetParentDirectory gets a reference to the given NullableString and assigns it to the ParentDirectory field.
func (o *InlineResponse2004) SetParentDirectory(v string) {
	o.ParentDirectory.Set(&v)
}
// SetParentDirectoryNil sets the value for ParentDirectory to be an explicit nil
func (o *InlineResponse2004) SetParentDirectoryNil() {
	o.ParentDirectory.Set(nil)
}

// UnsetParentDirectory ensures that no value is present for ParentDirectory, not even an explicit nil
func (o *InlineResponse2004) UnsetParentDirectory() {
	o.ParentDirectory.Unset()
}

// GetArchiveFiles returns the ArchiveFiles field value if set, zero value otherwise.
func (o *InlineResponse2004) GetArchiveFiles() []ArchiveBucketFile {
	if o == nil || o.ArchiveFiles == nil {
		var ret []ArchiveBucketFile
		return ret
	}
	return *o.ArchiveFiles
}

// GetArchiveFilesOk returns a tuple with the ArchiveFiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2004) GetArchiveFilesOk() (*[]ArchiveBucketFile, bool) {
	if o == nil || o.ArchiveFiles == nil {
		return nil, false
	}
	return o.ArchiveFiles, true
}

// HasArchiveFiles returns a boolean if a field has been set.
func (o *InlineResponse2004) HasArchiveFiles() bool {
	if o != nil && o.ArchiveFiles != nil {
		return true
	}

	return false
}

// SetArchiveFiles gets a reference to the given []ArchiveBucketFile and assigns it to the ArchiveFiles field.
func (o *InlineResponse2004) SetArchiveFiles(v []ArchiveBucketFile) {
	o.ArchiveFiles = &v
}

// GetArchiveFileCount returns the ArchiveFileCount field value if set, zero value otherwise.
func (o *InlineResponse2004) GetArchiveFileCount() int64 {
	if o == nil || o.ArchiveFileCount == nil {
		var ret int64
		return ret
	}
	return *o.ArchiveFileCount
}

// GetArchiveFileCountOk returns a tuple with the ArchiveFileCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2004) GetArchiveFileCountOk() (*int64, bool) {
	if o == nil || o.ArchiveFileCount == nil {
		return nil, false
	}
	return o.ArchiveFileCount, true
}

// HasArchiveFileCount returns a boolean if a field has been set.
func (o *InlineResponse2004) HasArchiveFileCount() bool {
	if o != nil && o.ArchiveFileCount != nil {
		return true
	}

	return false
}

// SetArchiveFileCount gets a reference to the given int64 and assigns it to the ArchiveFileCount field.
func (o *InlineResponse2004) SetArchiveFileCount(v int64) {
	o.ArchiveFileCount = &v
}

func (o InlineResponse2004) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ArchiveBucket != nil {
		toSerialize["archiveBucket"] = o.ArchiveBucket
	}
	if o.IsOwner != nil {
		toSerialize["isOwner"] = o.IsOwner
	}
	if o.ParentDirectory.IsSet() {
		toSerialize["parentDirectory"] = o.ParentDirectory.Get()
	}
	if o.ArchiveFiles != nil {
		toSerialize["archiveFiles"] = o.ArchiveFiles
	}
	if o.ArchiveFileCount != nil {
		toSerialize["archiveFileCount"] = o.ArchiveFileCount
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse2004 struct {
	value *InlineResponse2004
	isSet bool
}

func (v NullableInlineResponse2004) Get() *InlineResponse2004 {
	return v.value
}

func (v *NullableInlineResponse2004) Set(val *InlineResponse2004) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse2004) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse2004) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse2004(val *InlineResponse2004) *NullableInlineResponse2004 {
	return &NullableInlineResponse2004{value: val, isSet: true}
}

func (v NullableInlineResponse2004) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse2004) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


