/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// BillingServersServers struct for BillingServersServers
type BillingServersServers struct {
	RefType *string `json:"refType,omitempty"`
	RefUUID *string `json:"refUUID,omitempty"`
	RefId *int64 `json:"refId,omitempty"`
	StartDate *time.Time `json:"startDate,omitempty"`
	EndDate *time.Time `json:"endDate,omitempty"`
	Cost *float32 `json:"cost,omitempty"`
	Price *float32 `json:"price,omitempty"`
	NumUnits *float32 `json:"numUnits,omitempty"`
	Unit *string `json:"unit,omitempty"`
	Currency *string `json:"currency,omitempty"`
	Usages *[]BillingServersUsages `json:"usages,omitempty"`
	NumUsages *int64 `json:"numUsages,omitempty"`
	TotalUsages *int64 `json:"totalUsages,omitempty"`
	HasMoreUsages *bool `json:"hasMoreUsages,omitempty"`
	FoundPricing *bool `json:"foundPricing,omitempty"`
	Name *string `json:"name,omitempty"`
	ServerUUID *string `json:"serverUUID,omitempty"`
	ServerUniqueId NullableString `json:"serverUniqueId,omitempty"`
	ServerExternalId NullableString `json:"serverExternalId,omitempty"`
	ServerInternalId NullableString `json:"serverInternalId,omitempty"`
	ResourcePoolId NullableString `json:"resourcePoolId,omitempty"`
	ResourcePoolName NullableString `json:"resourcePoolName,omitempty"`
}

// NewBillingServersServers instantiates a new BillingServersServers object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBillingServersServers() *BillingServersServers {
	this := BillingServersServers{}
	return &this
}

// NewBillingServersServersWithDefaults instantiates a new BillingServersServers object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBillingServersServersWithDefaults() *BillingServersServers {
	this := BillingServersServers{}
	return &this
}

// GetRefType returns the RefType field value if set, zero value otherwise.
func (o *BillingServersServers) GetRefType() string {
	if o == nil || o.RefType == nil {
		var ret string
		return ret
	}
	return *o.RefType
}

// GetRefTypeOk returns a tuple with the RefType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingServersServers) GetRefTypeOk() (*string, bool) {
	if o == nil || o.RefType == nil {
		return nil, false
	}
	return o.RefType, true
}

// HasRefType returns a boolean if a field has been set.
func (o *BillingServersServers) HasRefType() bool {
	if o != nil && o.RefType != nil {
		return true
	}

	return false
}

// SetRefType gets a reference to the given string and assigns it to the RefType field.
func (o *BillingServersServers) SetRefType(v string) {
	o.RefType = &v
}

// GetRefUUID returns the RefUUID field value if set, zero value otherwise.
func (o *BillingServersServers) GetRefUUID() string {
	if o == nil || o.RefUUID == nil {
		var ret string
		return ret
	}
	return *o.RefUUID
}

// GetRefUUIDOk returns a tuple with the RefUUID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingServersServers) GetRefUUIDOk() (*string, bool) {
	if o == nil || o.RefUUID == nil {
		return nil, false
	}
	return o.RefUUID, true
}

// HasRefUUID returns a boolean if a field has been set.
func (o *BillingServersServers) HasRefUUID() bool {
	if o != nil && o.RefUUID != nil {
		return true
	}

	return false
}

// SetRefUUID gets a reference to the given string and assigns it to the RefUUID field.
func (o *BillingServersServers) SetRefUUID(v string) {
	o.RefUUID = &v
}

// GetRefId returns the RefId field value if set, zero value otherwise.
func (o *BillingServersServers) GetRefId() int64 {
	if o == nil || o.RefId == nil {
		var ret int64
		return ret
	}
	return *o.RefId
}

// GetRefIdOk returns a tuple with the RefId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingServersServers) GetRefIdOk() (*int64, bool) {
	if o == nil || o.RefId == nil {
		return nil, false
	}
	return o.RefId, true
}

// HasRefId returns a boolean if a field has been set.
func (o *BillingServersServers) HasRefId() bool {
	if o != nil && o.RefId != nil {
		return true
	}

	return false
}

// SetRefId gets a reference to the given int64 and assigns it to the RefId field.
func (o *BillingServersServers) SetRefId(v int64) {
	o.RefId = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *BillingServersServers) GetStartDate() time.Time {
	if o == nil || o.StartDate == nil {
		var ret time.Time
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingServersServers) GetStartDateOk() (*time.Time, bool) {
	if o == nil || o.StartDate == nil {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *BillingServersServers) HasStartDate() bool {
	if o != nil && o.StartDate != nil {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given time.Time and assigns it to the StartDate field.
func (o *BillingServersServers) SetStartDate(v time.Time) {
	o.StartDate = &v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *BillingServersServers) GetEndDate() time.Time {
	if o == nil || o.EndDate == nil {
		var ret time.Time
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingServersServers) GetEndDateOk() (*time.Time, bool) {
	if o == nil || o.EndDate == nil {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *BillingServersServers) HasEndDate() bool {
	if o != nil && o.EndDate != nil {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given time.Time and assigns it to the EndDate field.
func (o *BillingServersServers) SetEndDate(v time.Time) {
	o.EndDate = &v
}

// GetCost returns the Cost field value if set, zero value otherwise.
func (o *BillingServersServers) GetCost() float32 {
	if o == nil || o.Cost == nil {
		var ret float32
		return ret
	}
	return *o.Cost
}

// GetCostOk returns a tuple with the Cost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingServersServers) GetCostOk() (*float32, bool) {
	if o == nil || o.Cost == nil {
		return nil, false
	}
	return o.Cost, true
}

// HasCost returns a boolean if a field has been set.
func (o *BillingServersServers) HasCost() bool {
	if o != nil && o.Cost != nil {
		return true
	}

	return false
}

// SetCost gets a reference to the given float32 and assigns it to the Cost field.
func (o *BillingServersServers) SetCost(v float32) {
	o.Cost = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *BillingServersServers) GetPrice() float32 {
	if o == nil || o.Price == nil {
		var ret float32
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingServersServers) GetPriceOk() (*float32, bool) {
	if o == nil || o.Price == nil {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *BillingServersServers) HasPrice() bool {
	if o != nil && o.Price != nil {
		return true
	}

	return false
}

// SetPrice gets a reference to the given float32 and assigns it to the Price field.
func (o *BillingServersServers) SetPrice(v float32) {
	o.Price = &v
}

// GetNumUnits returns the NumUnits field value if set, zero value otherwise.
func (o *BillingServersServers) GetNumUnits() float32 {
	if o == nil || o.NumUnits == nil {
		var ret float32
		return ret
	}
	return *o.NumUnits
}

// GetNumUnitsOk returns a tuple with the NumUnits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingServersServers) GetNumUnitsOk() (*float32, bool) {
	if o == nil || o.NumUnits == nil {
		return nil, false
	}
	return o.NumUnits, true
}

// HasNumUnits returns a boolean if a field has been set.
func (o *BillingServersServers) HasNumUnits() bool {
	if o != nil && o.NumUnits != nil {
		return true
	}

	return false
}

// SetNumUnits gets a reference to the given float32 and assigns it to the NumUnits field.
func (o *BillingServersServers) SetNumUnits(v float32) {
	o.NumUnits = &v
}

// GetUnit returns the Unit field value if set, zero value otherwise.
func (o *BillingServersServers) GetUnit() string {
	if o == nil || o.Unit == nil {
		var ret string
		return ret
	}
	return *o.Unit
}

// GetUnitOk returns a tuple with the Unit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingServersServers) GetUnitOk() (*string, bool) {
	if o == nil || o.Unit == nil {
		return nil, false
	}
	return o.Unit, true
}

// HasUnit returns a boolean if a field has been set.
func (o *BillingServersServers) HasUnit() bool {
	if o != nil && o.Unit != nil {
		return true
	}

	return false
}

// SetUnit gets a reference to the given string and assigns it to the Unit field.
func (o *BillingServersServers) SetUnit(v string) {
	o.Unit = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *BillingServersServers) GetCurrency() string {
	if o == nil || o.Currency == nil {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingServersServers) GetCurrencyOk() (*string, bool) {
	if o == nil || o.Currency == nil {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *BillingServersServers) HasCurrency() bool {
	if o != nil && o.Currency != nil {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *BillingServersServers) SetCurrency(v string) {
	o.Currency = &v
}

// GetUsages returns the Usages field value if set, zero value otherwise.
func (o *BillingServersServers) GetUsages() []BillingServersUsages {
	if o == nil || o.Usages == nil {
		var ret []BillingServersUsages
		return ret
	}
	return *o.Usages
}

// GetUsagesOk returns a tuple with the Usages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingServersServers) GetUsagesOk() (*[]BillingServersUsages, bool) {
	if o == nil || o.Usages == nil {
		return nil, false
	}
	return o.Usages, true
}

// HasUsages returns a boolean if a field has been set.
func (o *BillingServersServers) HasUsages() bool {
	if o != nil && o.Usages != nil {
		return true
	}

	return false
}

// SetUsages gets a reference to the given []BillingServersUsages and assigns it to the Usages field.
func (o *BillingServersServers) SetUsages(v []BillingServersUsages) {
	o.Usages = &v
}

// GetNumUsages returns the NumUsages field value if set, zero value otherwise.
func (o *BillingServersServers) GetNumUsages() int64 {
	if o == nil || o.NumUsages == nil {
		var ret int64
		return ret
	}
	return *o.NumUsages
}

// GetNumUsagesOk returns a tuple with the NumUsages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingServersServers) GetNumUsagesOk() (*int64, bool) {
	if o == nil || o.NumUsages == nil {
		return nil, false
	}
	return o.NumUsages, true
}

// HasNumUsages returns a boolean if a field has been set.
func (o *BillingServersServers) HasNumUsages() bool {
	if o != nil && o.NumUsages != nil {
		return true
	}

	return false
}

// SetNumUsages gets a reference to the given int64 and assigns it to the NumUsages field.
func (o *BillingServersServers) SetNumUsages(v int64) {
	o.NumUsages = &v
}

// GetTotalUsages returns the TotalUsages field value if set, zero value otherwise.
func (o *BillingServersServers) GetTotalUsages() int64 {
	if o == nil || o.TotalUsages == nil {
		var ret int64
		return ret
	}
	return *o.TotalUsages
}

// GetTotalUsagesOk returns a tuple with the TotalUsages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingServersServers) GetTotalUsagesOk() (*int64, bool) {
	if o == nil || o.TotalUsages == nil {
		return nil, false
	}
	return o.TotalUsages, true
}

// HasTotalUsages returns a boolean if a field has been set.
func (o *BillingServersServers) HasTotalUsages() bool {
	if o != nil && o.TotalUsages != nil {
		return true
	}

	return false
}

// SetTotalUsages gets a reference to the given int64 and assigns it to the TotalUsages field.
func (o *BillingServersServers) SetTotalUsages(v int64) {
	o.TotalUsages = &v
}

// GetHasMoreUsages returns the HasMoreUsages field value if set, zero value otherwise.
func (o *BillingServersServers) GetHasMoreUsages() bool {
	if o == nil || o.HasMoreUsages == nil {
		var ret bool
		return ret
	}
	return *o.HasMoreUsages
}

// GetHasMoreUsagesOk returns a tuple with the HasMoreUsages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingServersServers) GetHasMoreUsagesOk() (*bool, bool) {
	if o == nil || o.HasMoreUsages == nil {
		return nil, false
	}
	return o.HasMoreUsages, true
}

// HasHasMoreUsages returns a boolean if a field has been set.
func (o *BillingServersServers) HasHasMoreUsages() bool {
	if o != nil && o.HasMoreUsages != nil {
		return true
	}

	return false
}

// SetHasMoreUsages gets a reference to the given bool and assigns it to the HasMoreUsages field.
func (o *BillingServersServers) SetHasMoreUsages(v bool) {
	o.HasMoreUsages = &v
}

// GetFoundPricing returns the FoundPricing field value if set, zero value otherwise.
func (o *BillingServersServers) GetFoundPricing() bool {
	if o == nil || o.FoundPricing == nil {
		var ret bool
		return ret
	}
	return *o.FoundPricing
}

// GetFoundPricingOk returns a tuple with the FoundPricing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingServersServers) GetFoundPricingOk() (*bool, bool) {
	if o == nil || o.FoundPricing == nil {
		return nil, false
	}
	return o.FoundPricing, true
}

// HasFoundPricing returns a boolean if a field has been set.
func (o *BillingServersServers) HasFoundPricing() bool {
	if o != nil && o.FoundPricing != nil {
		return true
	}

	return false
}

// SetFoundPricing gets a reference to the given bool and assigns it to the FoundPricing field.
func (o *BillingServersServers) SetFoundPricing(v bool) {
	o.FoundPricing = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *BillingServersServers) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingServersServers) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *BillingServersServers) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *BillingServersServers) SetName(v string) {
	o.Name = &v
}

// GetServerUUID returns the ServerUUID field value if set, zero value otherwise.
func (o *BillingServersServers) GetServerUUID() string {
	if o == nil || o.ServerUUID == nil {
		var ret string
		return ret
	}
	return *o.ServerUUID
}

// GetServerUUIDOk returns a tuple with the ServerUUID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingServersServers) GetServerUUIDOk() (*string, bool) {
	if o == nil || o.ServerUUID == nil {
		return nil, false
	}
	return o.ServerUUID, true
}

// HasServerUUID returns a boolean if a field has been set.
func (o *BillingServersServers) HasServerUUID() bool {
	if o != nil && o.ServerUUID != nil {
		return true
	}

	return false
}

// SetServerUUID gets a reference to the given string and assigns it to the ServerUUID field.
func (o *BillingServersServers) SetServerUUID(v string) {
	o.ServerUUID = &v
}

// GetServerUniqueId returns the ServerUniqueId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BillingServersServers) GetServerUniqueId() string {
	if o == nil || o.ServerUniqueId.Get() == nil {
		var ret string
		return ret
	}
	return *o.ServerUniqueId.Get()
}

// GetServerUniqueIdOk returns a tuple with the ServerUniqueId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BillingServersServers) GetServerUniqueIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ServerUniqueId.Get(), o.ServerUniqueId.IsSet()
}

// HasServerUniqueId returns a boolean if a field has been set.
func (o *BillingServersServers) HasServerUniqueId() bool {
	if o != nil && o.ServerUniqueId.IsSet() {
		return true
	}

	return false
}

// SetServerUniqueId gets a reference to the given NullableString and assigns it to the ServerUniqueId field.
func (o *BillingServersServers) SetServerUniqueId(v string) {
	o.ServerUniqueId.Set(&v)
}
// SetServerUniqueIdNil sets the value for ServerUniqueId to be an explicit nil
func (o *BillingServersServers) SetServerUniqueIdNil() {
	o.ServerUniqueId.Set(nil)
}

// UnsetServerUniqueId ensures that no value is present for ServerUniqueId, not even an explicit nil
func (o *BillingServersServers) UnsetServerUniqueId() {
	o.ServerUniqueId.Unset()
}

// GetServerExternalId returns the ServerExternalId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BillingServersServers) GetServerExternalId() string {
	if o == nil || o.ServerExternalId.Get() == nil {
		var ret string
		return ret
	}
	return *o.ServerExternalId.Get()
}

// GetServerExternalIdOk returns a tuple with the ServerExternalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BillingServersServers) GetServerExternalIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ServerExternalId.Get(), o.ServerExternalId.IsSet()
}

// HasServerExternalId returns a boolean if a field has been set.
func (o *BillingServersServers) HasServerExternalId() bool {
	if o != nil && o.ServerExternalId.IsSet() {
		return true
	}

	return false
}

// SetServerExternalId gets a reference to the given NullableString and assigns it to the ServerExternalId field.
func (o *BillingServersServers) SetServerExternalId(v string) {
	o.ServerExternalId.Set(&v)
}
// SetServerExternalIdNil sets the value for ServerExternalId to be an explicit nil
func (o *BillingServersServers) SetServerExternalIdNil() {
	o.ServerExternalId.Set(nil)
}

// UnsetServerExternalId ensures that no value is present for ServerExternalId, not even an explicit nil
func (o *BillingServersServers) UnsetServerExternalId() {
	o.ServerExternalId.Unset()
}

// GetServerInternalId returns the ServerInternalId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BillingServersServers) GetServerInternalId() string {
	if o == nil || o.ServerInternalId.Get() == nil {
		var ret string
		return ret
	}
	return *o.ServerInternalId.Get()
}

// GetServerInternalIdOk returns a tuple with the ServerInternalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BillingServersServers) GetServerInternalIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ServerInternalId.Get(), o.ServerInternalId.IsSet()
}

// HasServerInternalId returns a boolean if a field has been set.
func (o *BillingServersServers) HasServerInternalId() bool {
	if o != nil && o.ServerInternalId.IsSet() {
		return true
	}

	return false
}

// SetServerInternalId gets a reference to the given NullableString and assigns it to the ServerInternalId field.
func (o *BillingServersServers) SetServerInternalId(v string) {
	o.ServerInternalId.Set(&v)
}
// SetServerInternalIdNil sets the value for ServerInternalId to be an explicit nil
func (o *BillingServersServers) SetServerInternalIdNil() {
	o.ServerInternalId.Set(nil)
}

// UnsetServerInternalId ensures that no value is present for ServerInternalId, not even an explicit nil
func (o *BillingServersServers) UnsetServerInternalId() {
	o.ServerInternalId.Unset()
}

// GetResourcePoolId returns the ResourcePoolId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BillingServersServers) GetResourcePoolId() string {
	if o == nil || o.ResourcePoolId.Get() == nil {
		var ret string
		return ret
	}
	return *o.ResourcePoolId.Get()
}

// GetResourcePoolIdOk returns a tuple with the ResourcePoolId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BillingServersServers) GetResourcePoolIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ResourcePoolId.Get(), o.ResourcePoolId.IsSet()
}

// HasResourcePoolId returns a boolean if a field has been set.
func (o *BillingServersServers) HasResourcePoolId() bool {
	if o != nil && o.ResourcePoolId.IsSet() {
		return true
	}

	return false
}

// SetResourcePoolId gets a reference to the given NullableString and assigns it to the ResourcePoolId field.
func (o *BillingServersServers) SetResourcePoolId(v string) {
	o.ResourcePoolId.Set(&v)
}
// SetResourcePoolIdNil sets the value for ResourcePoolId to be an explicit nil
func (o *BillingServersServers) SetResourcePoolIdNil() {
	o.ResourcePoolId.Set(nil)
}

// UnsetResourcePoolId ensures that no value is present for ResourcePoolId, not even an explicit nil
func (o *BillingServersServers) UnsetResourcePoolId() {
	o.ResourcePoolId.Unset()
}

// GetResourcePoolName returns the ResourcePoolName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BillingServersServers) GetResourcePoolName() string {
	if o == nil || o.ResourcePoolName.Get() == nil {
		var ret string
		return ret
	}
	return *o.ResourcePoolName.Get()
}

// GetResourcePoolNameOk returns a tuple with the ResourcePoolName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BillingServersServers) GetResourcePoolNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ResourcePoolName.Get(), o.ResourcePoolName.IsSet()
}

// HasResourcePoolName returns a boolean if a field has been set.
func (o *BillingServersServers) HasResourcePoolName() bool {
	if o != nil && o.ResourcePoolName.IsSet() {
		return true
	}

	return false
}

// SetResourcePoolName gets a reference to the given NullableString and assigns it to the ResourcePoolName field.
func (o *BillingServersServers) SetResourcePoolName(v string) {
	o.ResourcePoolName.Set(&v)
}
// SetResourcePoolNameNil sets the value for ResourcePoolName to be an explicit nil
func (o *BillingServersServers) SetResourcePoolNameNil() {
	o.ResourcePoolName.Set(nil)
}

// UnsetResourcePoolName ensures that no value is present for ResourcePoolName, not even an explicit nil
func (o *BillingServersServers) UnsetResourcePoolName() {
	o.ResourcePoolName.Unset()
}

func (o BillingServersServers) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.RefType != nil {
		toSerialize["refType"] = o.RefType
	}
	if o.RefUUID != nil {
		toSerialize["refUUID"] = o.RefUUID
	}
	if o.RefId != nil {
		toSerialize["refId"] = o.RefId
	}
	if o.StartDate != nil {
		toSerialize["startDate"] = o.StartDate
	}
	if o.EndDate != nil {
		toSerialize["endDate"] = o.EndDate
	}
	if o.Cost != nil {
		toSerialize["cost"] = o.Cost
	}
	if o.Price != nil {
		toSerialize["price"] = o.Price
	}
	if o.NumUnits != nil {
		toSerialize["numUnits"] = o.NumUnits
	}
	if o.Unit != nil {
		toSerialize["unit"] = o.Unit
	}
	if o.Currency != nil {
		toSerialize["currency"] = o.Currency
	}
	if o.Usages != nil {
		toSerialize["usages"] = o.Usages
	}
	if o.NumUsages != nil {
		toSerialize["numUsages"] = o.NumUsages
	}
	if o.TotalUsages != nil {
		toSerialize["totalUsages"] = o.TotalUsages
	}
	if o.HasMoreUsages != nil {
		toSerialize["hasMoreUsages"] = o.HasMoreUsages
	}
	if o.FoundPricing != nil {
		toSerialize["foundPricing"] = o.FoundPricing
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.ServerUUID != nil {
		toSerialize["serverUUID"] = o.ServerUUID
	}
	if o.ServerUniqueId.IsSet() {
		toSerialize["serverUniqueId"] = o.ServerUniqueId.Get()
	}
	if o.ServerExternalId.IsSet() {
		toSerialize["serverExternalId"] = o.ServerExternalId.Get()
	}
	if o.ServerInternalId.IsSet() {
		toSerialize["serverInternalId"] = o.ServerInternalId.Get()
	}
	if o.ResourcePoolId.IsSet() {
		toSerialize["resourcePoolId"] = o.ResourcePoolId.Get()
	}
	if o.ResourcePoolName.IsSet() {
		toSerialize["resourcePoolName"] = o.ResourcePoolName.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableBillingServersServers struct {
	value *BillingServersServers
	isSet bool
}

func (v NullableBillingServersServers) Get() *BillingServersServers {
	return v.value
}

func (v *NullableBillingServersServers) Set(val *BillingServersServers) {
	v.value = val
	v.isSet = true
}

func (v NullableBillingServersServers) IsSet() bool {
	return v.isSet
}

func (v *NullableBillingServersServers) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBillingServersServers(val *BillingServersServers) *NullableBillingServersServers {
	return &NullableBillingServersServers{value: val, isSet: true}
}

func (v NullableBillingServersServers) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBillingServersServers) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


