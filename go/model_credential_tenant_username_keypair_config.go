/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CredentialTenantUsernameKeypairConfig struct for CredentialTenantUsernameKeypairConfig
type CredentialTenantUsernameKeypairConfig struct {
	// Credential Type Code
	Type string `json:"type"`
	// A unique name scoped to your account for the credential
	Name string `json:"name"`
	// Optional Description
	Description *string `json:"description,omitempty"`
	// Credential enabled
	Enabled *bool `json:"enabled,omitempty"`
	Integration NullableCredentialAccessSecretKeyConfigIntegration `json:"integration,omitempty"`
	// Tenant name
	AuthPath string `json:"authPath"`
	// Username
	Username string `json:"username"`
	AuthKey CredentialEmailPrivateKeyConfigAuthKey `json:"authKey"`
}

// NewCredentialTenantUsernameKeypairConfig instantiates a new CredentialTenantUsernameKeypairConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCredentialTenantUsernameKeypairConfig(type_ string, name string, authPath string, username string, authKey CredentialEmailPrivateKeyConfigAuthKey, ) *CredentialTenantUsernameKeypairConfig {
	this := CredentialTenantUsernameKeypairConfig{}
	this.Type = type_
	this.Name = name
	var enabled bool = true
	this.Enabled = &enabled
	this.AuthPath = authPath
	this.Username = username
	this.AuthKey = authKey
	return &this
}

// NewCredentialTenantUsernameKeypairConfigWithDefaults instantiates a new CredentialTenantUsernameKeypairConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCredentialTenantUsernameKeypairConfigWithDefaults() *CredentialTenantUsernameKeypairConfig {
	this := CredentialTenantUsernameKeypairConfig{}
	var enabled bool = true
	this.Enabled = &enabled
	return &this
}

// GetType returns the Type field value
func (o *CredentialTenantUsernameKeypairConfig) GetType() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *CredentialTenantUsernameKeypairConfig) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *CredentialTenantUsernameKeypairConfig) SetType(v string) {
	o.Type = v
}

// GetName returns the Name field value
func (o *CredentialTenantUsernameKeypairConfig) GetName() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CredentialTenantUsernameKeypairConfig) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CredentialTenantUsernameKeypairConfig) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CredentialTenantUsernameKeypairConfig) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CredentialTenantUsernameKeypairConfig) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CredentialTenantUsernameKeypairConfig) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CredentialTenantUsernameKeypairConfig) SetDescription(v string) {
	o.Description = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *CredentialTenantUsernameKeypairConfig) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CredentialTenantUsernameKeypairConfig) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *CredentialTenantUsernameKeypairConfig) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *CredentialTenantUsernameKeypairConfig) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetIntegration returns the Integration field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CredentialTenantUsernameKeypairConfig) GetIntegration() CredentialAccessSecretKeyConfigIntegration {
	if o == nil || o.Integration.Get() == nil {
		var ret CredentialAccessSecretKeyConfigIntegration
		return ret
	}
	return *o.Integration.Get()
}

// GetIntegrationOk returns a tuple with the Integration field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CredentialTenantUsernameKeypairConfig) GetIntegrationOk() (*CredentialAccessSecretKeyConfigIntegration, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Integration.Get(), o.Integration.IsSet()
}

// HasIntegration returns a boolean if a field has been set.
func (o *CredentialTenantUsernameKeypairConfig) HasIntegration() bool {
	if o != nil && o.Integration.IsSet() {
		return true
	}

	return false
}

// SetIntegration gets a reference to the given NullableCredentialAccessSecretKeyConfigIntegration and assigns it to the Integration field.
func (o *CredentialTenantUsernameKeypairConfig) SetIntegration(v CredentialAccessSecretKeyConfigIntegration) {
	o.Integration.Set(&v)
}
// SetIntegrationNil sets the value for Integration to be an explicit nil
func (o *CredentialTenantUsernameKeypairConfig) SetIntegrationNil() {
	o.Integration.Set(nil)
}

// UnsetIntegration ensures that no value is present for Integration, not even an explicit nil
func (o *CredentialTenantUsernameKeypairConfig) UnsetIntegration() {
	o.Integration.Unset()
}

// GetAuthPath returns the AuthPath field value
func (o *CredentialTenantUsernameKeypairConfig) GetAuthPath() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.AuthPath
}

// GetAuthPathOk returns a tuple with the AuthPath field value
// and a boolean to check if the value has been set.
func (o *CredentialTenantUsernameKeypairConfig) GetAuthPathOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.AuthPath, true
}

// SetAuthPath sets field value
func (o *CredentialTenantUsernameKeypairConfig) SetAuthPath(v string) {
	o.AuthPath = v
}

// GetUsername returns the Username field value
func (o *CredentialTenantUsernameKeypairConfig) GetUsername() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *CredentialTenantUsernameKeypairConfig) GetUsernameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *CredentialTenantUsernameKeypairConfig) SetUsername(v string) {
	o.Username = v
}

// GetAuthKey returns the AuthKey field value
func (o *CredentialTenantUsernameKeypairConfig) GetAuthKey() CredentialEmailPrivateKeyConfigAuthKey {
	if o == nil  {
		var ret CredentialEmailPrivateKeyConfigAuthKey
		return ret
	}

	return o.AuthKey
}

// GetAuthKeyOk returns a tuple with the AuthKey field value
// and a boolean to check if the value has been set.
func (o *CredentialTenantUsernameKeypairConfig) GetAuthKeyOk() (*CredentialEmailPrivateKeyConfigAuthKey, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.AuthKey, true
}

// SetAuthKey sets field value
func (o *CredentialTenantUsernameKeypairConfig) SetAuthKey(v CredentialEmailPrivateKeyConfigAuthKey) {
	o.AuthKey = v
}

func (o CredentialTenantUsernameKeypairConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Enabled != nil {
		toSerialize["enabled"] = o.Enabled
	}
	if o.Integration.IsSet() {
		toSerialize["integration"] = o.Integration.Get()
	}
	if true {
		toSerialize["authPath"] = o.AuthPath
	}
	if true {
		toSerialize["username"] = o.Username
	}
	if true {
		toSerialize["authKey"] = o.AuthKey
	}
	return json.Marshal(toSerialize)
}

type NullableCredentialTenantUsernameKeypairConfig struct {
	value *CredentialTenantUsernameKeypairConfig
	isSet bool
}

func (v NullableCredentialTenantUsernameKeypairConfig) Get() *CredentialTenantUsernameKeypairConfig {
	return v.value
}

func (v *NullableCredentialTenantUsernameKeypairConfig) Set(val *CredentialTenantUsernameKeypairConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableCredentialTenantUsernameKeypairConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableCredentialTenantUsernameKeypairConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCredentialTenantUsernameKeypairConfig(val *CredentialTenantUsernameKeypairConfig) *NullableCredentialTenantUsernameKeypairConfig {
	return &NullableCredentialTenantUsernameKeypairConfig{value: val, isSet: true}
}

func (v NullableCredentialTenantUsernameKeypairConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCredentialTenantUsernameKeypairConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


