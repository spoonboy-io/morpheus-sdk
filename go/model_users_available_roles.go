/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// UsersAvailableRoles struct for UsersAvailableRoles
type UsersAvailableRoles struct {
	Roles *[]UsersAvailableRolesRoles `json:"roles,omitempty"`
}

// NewUsersAvailableRoles instantiates a new UsersAvailableRoles object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUsersAvailableRoles() *UsersAvailableRoles {
	this := UsersAvailableRoles{}
	return &this
}

// NewUsersAvailableRolesWithDefaults instantiates a new UsersAvailableRoles object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUsersAvailableRolesWithDefaults() *UsersAvailableRoles {
	this := UsersAvailableRoles{}
	return &this
}

// GetRoles returns the Roles field value if set, zero value otherwise.
func (o *UsersAvailableRoles) GetRoles() []UsersAvailableRolesRoles {
	if o == nil || o.Roles == nil {
		var ret []UsersAvailableRolesRoles
		return ret
	}
	return *o.Roles
}

// GetRolesOk returns a tuple with the Roles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsersAvailableRoles) GetRolesOk() (*[]UsersAvailableRolesRoles, bool) {
	if o == nil || o.Roles == nil {
		return nil, false
	}
	return o.Roles, true
}

// HasRoles returns a boolean if a field has been set.
func (o *UsersAvailableRoles) HasRoles() bool {
	if o != nil && o.Roles != nil {
		return true
	}

	return false
}

// SetRoles gets a reference to the given []UsersAvailableRolesRoles and assigns it to the Roles field.
func (o *UsersAvailableRoles) SetRoles(v []UsersAvailableRolesRoles) {
	o.Roles = &v
}

func (o UsersAvailableRoles) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Roles != nil {
		toSerialize["roles"] = o.Roles
	}
	return json.Marshal(toSerialize)
}

type NullableUsersAvailableRoles struct {
	value *UsersAvailableRoles
	isSet bool
}

func (v NullableUsersAvailableRoles) Get() *UsersAvailableRoles {
	return v.value
}

func (v *NullableUsersAvailableRoles) Set(val *UsersAvailableRoles) {
	v.value = val
	v.isSet = true
}

func (v NullableUsersAvailableRoles) IsSet() bool {
	return v.isSet
}

func (v *NullableUsersAvailableRoles) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsersAvailableRoles(val *UsersAvailableRoles) *NullableUsersAvailableRoles {
	return &NullableUsersAvailableRoles{value: val, isSet: true}
}

func (v NullableUsersAvailableRoles) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsersAvailableRoles) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


