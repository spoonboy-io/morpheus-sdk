/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ApiBackupsIdBackup struct for ApiBackupsIdBackup
type ApiBackupsIdBackup struct {
	// A name for the backup
	Name *string `json:"name,omitempty"`
	// The Backup Job ID to assign the backup to. This determines when the backup is run.
	JobId *int64 `json:"jobId,omitempty"`
	// Can be used to enable or disable the backup
	Enabled *bool `json:"enabled,omitempty"`
}

// NewApiBackupsIdBackup instantiates a new ApiBackupsIdBackup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiBackupsIdBackup() *ApiBackupsIdBackup {
	this := ApiBackupsIdBackup{}
	return &this
}

// NewApiBackupsIdBackupWithDefaults instantiates a new ApiBackupsIdBackup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiBackupsIdBackupWithDefaults() *ApiBackupsIdBackup {
	this := ApiBackupsIdBackup{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ApiBackupsIdBackup) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiBackupsIdBackup) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ApiBackupsIdBackup) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ApiBackupsIdBackup) SetName(v string) {
	o.Name = &v
}

// GetJobId returns the JobId field value if set, zero value otherwise.
func (o *ApiBackupsIdBackup) GetJobId() int64 {
	if o == nil || o.JobId == nil {
		var ret int64
		return ret
	}
	return *o.JobId
}

// GetJobIdOk returns a tuple with the JobId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiBackupsIdBackup) GetJobIdOk() (*int64, bool) {
	if o == nil || o.JobId == nil {
		return nil, false
	}
	return o.JobId, true
}

// HasJobId returns a boolean if a field has been set.
func (o *ApiBackupsIdBackup) HasJobId() bool {
	if o != nil && o.JobId != nil {
		return true
	}

	return false
}

// SetJobId gets a reference to the given int64 and assigns it to the JobId field.
func (o *ApiBackupsIdBackup) SetJobId(v int64) {
	o.JobId = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *ApiBackupsIdBackup) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiBackupsIdBackup) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *ApiBackupsIdBackup) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *ApiBackupsIdBackup) SetEnabled(v bool) {
	o.Enabled = &v
}

func (o ApiBackupsIdBackup) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.JobId != nil {
		toSerialize["jobId"] = o.JobId
	}
	if o.Enabled != nil {
		toSerialize["enabled"] = o.Enabled
	}
	return json.Marshal(toSerialize)
}

type NullableApiBackupsIdBackup struct {
	value *ApiBackupsIdBackup
	isSet bool
}

func (v NullableApiBackupsIdBackup) Get() *ApiBackupsIdBackup {
	return v.value
}

func (v *NullableApiBackupsIdBackup) Set(val *ApiBackupsIdBackup) {
	v.value = val
	v.isSet = true
}

func (v NullableApiBackupsIdBackup) IsSet() bool {
	return v.isSet
}

func (v *NullableApiBackupsIdBackup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiBackupsIdBackup(val *ApiBackupsIdBackup) *NullableApiBackupsIdBackup {
	return &NullableApiBackupsIdBackup{value: val, isSet: true}
}

func (v NullableApiBackupsIdBackup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiBackupsIdBackup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


