/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InlineObject93 struct for InlineObject93
type InlineObject93 struct {
	// Optional storage provider to use.
	StorageProviderId NullableInt64 `json:"storageProviderId,omitempty"`
}

// NewInlineObject93 instantiates a new InlineObject93 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineObject93() *InlineObject93 {
	this := InlineObject93{}
	return &this
}

// NewInlineObject93WithDefaults instantiates a new InlineObject93 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineObject93WithDefaults() *InlineObject93 {
	this := InlineObject93{}
	return &this
}

// GetStorageProviderId returns the StorageProviderId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InlineObject93) GetStorageProviderId() int64 {
	if o == nil || o.StorageProviderId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.StorageProviderId.Get()
}

// GetStorageProviderIdOk returns a tuple with the StorageProviderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InlineObject93) GetStorageProviderIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.StorageProviderId.Get(), o.StorageProviderId.IsSet()
}

// HasStorageProviderId returns a boolean if a field has been set.
func (o *InlineObject93) HasStorageProviderId() bool {
	if o != nil && o.StorageProviderId.IsSet() {
		return true
	}

	return false
}

// SetStorageProviderId gets a reference to the given NullableInt64 and assigns it to the StorageProviderId field.
func (o *InlineObject93) SetStorageProviderId(v int64) {
	o.StorageProviderId.Set(&v)
}
// SetStorageProviderIdNil sets the value for StorageProviderId to be an explicit nil
func (o *InlineObject93) SetStorageProviderIdNil() {
	o.StorageProviderId.Set(nil)
}

// UnsetStorageProviderId ensures that no value is present for StorageProviderId, not even an explicit nil
func (o *InlineObject93) UnsetStorageProviderId() {
	o.StorageProviderId.Unset()
}

func (o InlineObject93) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.StorageProviderId.IsSet() {
		toSerialize["storageProviderId"] = o.StorageProviderId.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableInlineObject93 struct {
	value *InlineObject93
	isSet bool
}

func (v NullableInlineObject93) Get() *InlineObject93 {
	return v.value
}

func (v *NullableInlineObject93) Set(val *InlineObject93) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineObject93) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineObject93) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineObject93(val *InlineObject93) *NullableInlineObject93 {
	return &NullableInlineObject93{value: val, isSet: true}
}

func (v NullableInlineObject93) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineObject93) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


