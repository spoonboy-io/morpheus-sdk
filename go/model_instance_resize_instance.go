/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InstanceResizeInstance The map containing the id of the service plan you wish to apply to the containers in this instance.
type InstanceResizeInstance struct {
	Plan *InstanceResizeInstancePlan `json:"plan,omitempty"`
}

// NewInstanceResizeInstance instantiates a new InstanceResizeInstance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstanceResizeInstance() *InstanceResizeInstance {
	this := InstanceResizeInstance{}
	return &this
}

// NewInstanceResizeInstanceWithDefaults instantiates a new InstanceResizeInstance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstanceResizeInstanceWithDefaults() *InstanceResizeInstance {
	this := InstanceResizeInstance{}
	return &this
}

// GetPlan returns the Plan field value if set, zero value otherwise.
func (o *InstanceResizeInstance) GetPlan() InstanceResizeInstancePlan {
	if o == nil || o.Plan == nil {
		var ret InstanceResizeInstancePlan
		return ret
	}
	return *o.Plan
}

// GetPlanOk returns a tuple with the Plan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceResizeInstance) GetPlanOk() (*InstanceResizeInstancePlan, bool) {
	if o == nil || o.Plan == nil {
		return nil, false
	}
	return o.Plan, true
}

// HasPlan returns a boolean if a field has been set.
func (o *InstanceResizeInstance) HasPlan() bool {
	if o != nil && o.Plan != nil {
		return true
	}

	return false
}

// SetPlan gets a reference to the given InstanceResizeInstancePlan and assigns it to the Plan field.
func (o *InstanceResizeInstance) SetPlan(v InstanceResizeInstancePlan) {
	o.Plan = &v
}

func (o InstanceResizeInstance) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Plan != nil {
		toSerialize["plan"] = o.Plan
	}
	return json.Marshal(toSerialize)
}

type NullableInstanceResizeInstance struct {
	value *InstanceResizeInstance
	isSet bool
}

func (v NullableInstanceResizeInstance) Get() *InstanceResizeInstance {
	return v.value
}

func (v *NullableInstanceResizeInstance) Set(val *InstanceResizeInstance) {
	v.value = val
	v.isSet = true
}

func (v NullableInstanceResizeInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableInstanceResizeInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstanceResizeInstance(val *InstanceResizeInstance) *NullableInstanceResizeInstance {
	return &NullableInstanceResizeInstance{value: val, isSet: true}
}

func (v NullableInstanceResizeInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstanceResizeInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


