/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Dashboard struct for Dashboard
type Dashboard struct {
	Success *bool `json:"success,omitempty"`
	InstanceStats *DashboardInstanceStats `json:"instanceStats,omitempty"`
	Provisioning *DashboardProvisioning `json:"provisioning,omitempty"`
	Monitoring *DashboardMonitoring `json:"monitoring,omitempty"`
	Backups *DashboardBackups `json:"backups,omitempty"`
	Activity *[]DashboardActivity `json:"activity,omitempty"`
	LogStats *DashboardLogStats `json:"logStats,omitempty"`
}

// NewDashboard instantiates a new Dashboard object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDashboard() *Dashboard {
	this := Dashboard{}
	return &this
}

// NewDashboardWithDefaults instantiates a new Dashboard object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDashboardWithDefaults() *Dashboard {
	this := Dashboard{}
	return &this
}

// GetSuccess returns the Success field value if set, zero value otherwise.
func (o *Dashboard) GetSuccess() bool {
	if o == nil || o.Success == nil {
		var ret bool
		return ret
	}
	return *o.Success
}

// GetSuccessOk returns a tuple with the Success field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dashboard) GetSuccessOk() (*bool, bool) {
	if o == nil || o.Success == nil {
		return nil, false
	}
	return o.Success, true
}

// HasSuccess returns a boolean if a field has been set.
func (o *Dashboard) HasSuccess() bool {
	if o != nil && o.Success != nil {
		return true
	}

	return false
}

// SetSuccess gets a reference to the given bool and assigns it to the Success field.
func (o *Dashboard) SetSuccess(v bool) {
	o.Success = &v
}

// GetInstanceStats returns the InstanceStats field value if set, zero value otherwise.
func (o *Dashboard) GetInstanceStats() DashboardInstanceStats {
	if o == nil || o.InstanceStats == nil {
		var ret DashboardInstanceStats
		return ret
	}
	return *o.InstanceStats
}

// GetInstanceStatsOk returns a tuple with the InstanceStats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dashboard) GetInstanceStatsOk() (*DashboardInstanceStats, bool) {
	if o == nil || o.InstanceStats == nil {
		return nil, false
	}
	return o.InstanceStats, true
}

// HasInstanceStats returns a boolean if a field has been set.
func (o *Dashboard) HasInstanceStats() bool {
	if o != nil && o.InstanceStats != nil {
		return true
	}

	return false
}

// SetInstanceStats gets a reference to the given DashboardInstanceStats and assigns it to the InstanceStats field.
func (o *Dashboard) SetInstanceStats(v DashboardInstanceStats) {
	o.InstanceStats = &v
}

// GetProvisioning returns the Provisioning field value if set, zero value otherwise.
func (o *Dashboard) GetProvisioning() DashboardProvisioning {
	if o == nil || o.Provisioning == nil {
		var ret DashboardProvisioning
		return ret
	}
	return *o.Provisioning
}

// GetProvisioningOk returns a tuple with the Provisioning field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dashboard) GetProvisioningOk() (*DashboardProvisioning, bool) {
	if o == nil || o.Provisioning == nil {
		return nil, false
	}
	return o.Provisioning, true
}

// HasProvisioning returns a boolean if a field has been set.
func (o *Dashboard) HasProvisioning() bool {
	if o != nil && o.Provisioning != nil {
		return true
	}

	return false
}

// SetProvisioning gets a reference to the given DashboardProvisioning and assigns it to the Provisioning field.
func (o *Dashboard) SetProvisioning(v DashboardProvisioning) {
	o.Provisioning = &v
}

// GetMonitoring returns the Monitoring field value if set, zero value otherwise.
func (o *Dashboard) GetMonitoring() DashboardMonitoring {
	if o == nil || o.Monitoring == nil {
		var ret DashboardMonitoring
		return ret
	}
	return *o.Monitoring
}

// GetMonitoringOk returns a tuple with the Monitoring field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dashboard) GetMonitoringOk() (*DashboardMonitoring, bool) {
	if o == nil || o.Monitoring == nil {
		return nil, false
	}
	return o.Monitoring, true
}

// HasMonitoring returns a boolean if a field has been set.
func (o *Dashboard) HasMonitoring() bool {
	if o != nil && o.Monitoring != nil {
		return true
	}

	return false
}

// SetMonitoring gets a reference to the given DashboardMonitoring and assigns it to the Monitoring field.
func (o *Dashboard) SetMonitoring(v DashboardMonitoring) {
	o.Monitoring = &v
}

// GetBackups returns the Backups field value if set, zero value otherwise.
func (o *Dashboard) GetBackups() DashboardBackups {
	if o == nil || o.Backups == nil {
		var ret DashboardBackups
		return ret
	}
	return *o.Backups
}

// GetBackupsOk returns a tuple with the Backups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dashboard) GetBackupsOk() (*DashboardBackups, bool) {
	if o == nil || o.Backups == nil {
		return nil, false
	}
	return o.Backups, true
}

// HasBackups returns a boolean if a field has been set.
func (o *Dashboard) HasBackups() bool {
	if o != nil && o.Backups != nil {
		return true
	}

	return false
}

// SetBackups gets a reference to the given DashboardBackups and assigns it to the Backups field.
func (o *Dashboard) SetBackups(v DashboardBackups) {
	o.Backups = &v
}

// GetActivity returns the Activity field value if set, zero value otherwise.
func (o *Dashboard) GetActivity() []DashboardActivity {
	if o == nil || o.Activity == nil {
		var ret []DashboardActivity
		return ret
	}
	return *o.Activity
}

// GetActivityOk returns a tuple with the Activity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dashboard) GetActivityOk() (*[]DashboardActivity, bool) {
	if o == nil || o.Activity == nil {
		return nil, false
	}
	return o.Activity, true
}

// HasActivity returns a boolean if a field has been set.
func (o *Dashboard) HasActivity() bool {
	if o != nil && o.Activity != nil {
		return true
	}

	return false
}

// SetActivity gets a reference to the given []DashboardActivity and assigns it to the Activity field.
func (o *Dashboard) SetActivity(v []DashboardActivity) {
	o.Activity = &v
}

// GetLogStats returns the LogStats field value if set, zero value otherwise.
func (o *Dashboard) GetLogStats() DashboardLogStats {
	if o == nil || o.LogStats == nil {
		var ret DashboardLogStats
		return ret
	}
	return *o.LogStats
}

// GetLogStatsOk returns a tuple with the LogStats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dashboard) GetLogStatsOk() (*DashboardLogStats, bool) {
	if o == nil || o.LogStats == nil {
		return nil, false
	}
	return o.LogStats, true
}

// HasLogStats returns a boolean if a field has been set.
func (o *Dashboard) HasLogStats() bool {
	if o != nil && o.LogStats != nil {
		return true
	}

	return false
}

// SetLogStats gets a reference to the given DashboardLogStats and assigns it to the LogStats field.
func (o *Dashboard) SetLogStats(v DashboardLogStats) {
	o.LogStats = &v
}

func (o Dashboard) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Success != nil {
		toSerialize["success"] = o.Success
	}
	if o.InstanceStats != nil {
		toSerialize["instanceStats"] = o.InstanceStats
	}
	if o.Provisioning != nil {
		toSerialize["provisioning"] = o.Provisioning
	}
	if o.Monitoring != nil {
		toSerialize["monitoring"] = o.Monitoring
	}
	if o.Backups != nil {
		toSerialize["backups"] = o.Backups
	}
	if o.Activity != nil {
		toSerialize["activity"] = o.Activity
	}
	if o.LogStats != nil {
		toSerialize["logStats"] = o.LogStats
	}
	return json.Marshal(toSerialize)
}

type NullableDashboard struct {
	value *Dashboard
	isSet bool
}

func (v NullableDashboard) Get() *Dashboard {
	return v.value
}

func (v *NullableDashboard) Set(val *Dashboard) {
	v.value = val
	v.isSet = true
}

func (v NullableDashboard) IsSet() bool {
	return v.isSet
}

func (v *NullableDashboard) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDashboard(val *Dashboard) *NullableDashboard {
	return &NullableDashboard{value: val, isSet: true}
}

func (v NullableDashboard) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDashboard) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


