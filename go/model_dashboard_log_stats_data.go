/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// DashboardLogStatsData struct for DashboardLogStatsData
type DashboardLogStatsData struct {
	Key *string `json:"key,omitempty"`
	Values *map[string]int32 `json:"values,omitempty"`
	Count *int64 `json:"count,omitempty"`
}

// NewDashboardLogStatsData instantiates a new DashboardLogStatsData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDashboardLogStatsData() *DashboardLogStatsData {
	this := DashboardLogStatsData{}
	return &this
}

// NewDashboardLogStatsDataWithDefaults instantiates a new DashboardLogStatsData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDashboardLogStatsDataWithDefaults() *DashboardLogStatsData {
	this := DashboardLogStatsData{}
	return &this
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *DashboardLogStatsData) GetKey() string {
	if o == nil || o.Key == nil {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardLogStatsData) GetKeyOk() (*string, bool) {
	if o == nil || o.Key == nil {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *DashboardLogStatsData) HasKey() bool {
	if o != nil && o.Key != nil {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *DashboardLogStatsData) SetKey(v string) {
	o.Key = &v
}

// GetValues returns the Values field value if set, zero value otherwise.
func (o *DashboardLogStatsData) GetValues() map[string]int32 {
	if o == nil || o.Values == nil {
		var ret map[string]int32
		return ret
	}
	return *o.Values
}

// GetValuesOk returns a tuple with the Values field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardLogStatsData) GetValuesOk() (*map[string]int32, bool) {
	if o == nil || o.Values == nil {
		return nil, false
	}
	return o.Values, true
}

// HasValues returns a boolean if a field has been set.
func (o *DashboardLogStatsData) HasValues() bool {
	if o != nil && o.Values != nil {
		return true
	}

	return false
}

// SetValues gets a reference to the given map[string]int32 and assigns it to the Values field.
func (o *DashboardLogStatsData) SetValues(v map[string]int32) {
	o.Values = &v
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *DashboardLogStatsData) GetCount() int64 {
	if o == nil || o.Count == nil {
		var ret int64
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardLogStatsData) GetCountOk() (*int64, bool) {
	if o == nil || o.Count == nil {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *DashboardLogStatsData) HasCount() bool {
	if o != nil && o.Count != nil {
		return true
	}

	return false
}

// SetCount gets a reference to the given int64 and assigns it to the Count field.
func (o *DashboardLogStatsData) SetCount(v int64) {
	o.Count = &v
}

func (o DashboardLogStatsData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Key != nil {
		toSerialize["key"] = o.Key
	}
	if o.Values != nil {
		toSerialize["values"] = o.Values
	}
	if o.Count != nil {
		toSerialize["count"] = o.Count
	}
	return json.Marshal(toSerialize)
}

type NullableDashboardLogStatsData struct {
	value *DashboardLogStatsData
	isSet bool
}

func (v NullableDashboardLogStatsData) Get() *DashboardLogStatsData {
	return v.value
}

func (v *NullableDashboardLogStatsData) Set(val *DashboardLogStatsData) {
	v.value = val
	v.isSet = true
}

func (v NullableDashboardLogStatsData) IsSet() bool {
	return v.isSet
}

func (v *NullableDashboardLogStatsData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDashboardLogStatsData(val *DashboardLogStatsData) *NullableDashboardLogStatsData {
	return &NullableDashboardLogStatsData{value: val, isSet: true}
}

func (v NullableDashboardLogStatsData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDashboardLogStatsData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


