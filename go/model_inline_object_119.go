/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InlineObject119 struct for InlineObject119
type InlineObject119 struct {
	OptionTypeList *OptionTypeListCreate `json:"optionTypeList,omitempty"`
}

// NewInlineObject119 instantiates a new InlineObject119 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineObject119() *InlineObject119 {
	this := InlineObject119{}
	return &this
}

// NewInlineObject119WithDefaults instantiates a new InlineObject119 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineObject119WithDefaults() *InlineObject119 {
	this := InlineObject119{}
	return &this
}

// GetOptionTypeList returns the OptionTypeList field value if set, zero value otherwise.
func (o *InlineObject119) GetOptionTypeList() OptionTypeListCreate {
	if o == nil || o.OptionTypeList == nil {
		var ret OptionTypeListCreate
		return ret
	}
	return *o.OptionTypeList
}

// GetOptionTypeListOk returns a tuple with the OptionTypeList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject119) GetOptionTypeListOk() (*OptionTypeListCreate, bool) {
	if o == nil || o.OptionTypeList == nil {
		return nil, false
	}
	return o.OptionTypeList, true
}

// HasOptionTypeList returns a boolean if a field has been set.
func (o *InlineObject119) HasOptionTypeList() bool {
	if o != nil && o.OptionTypeList != nil {
		return true
	}

	return false
}

// SetOptionTypeList gets a reference to the given OptionTypeListCreate and assigns it to the OptionTypeList field.
func (o *InlineObject119) SetOptionTypeList(v OptionTypeListCreate) {
	o.OptionTypeList = &v
}

func (o InlineObject119) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.OptionTypeList != nil {
		toSerialize["optionTypeList"] = o.OptionTypeList
	}
	return json.Marshal(toSerialize)
}

type NullableInlineObject119 struct {
	value *InlineObject119
	isSet bool
}

func (v NullableInlineObject119) Get() *InlineObject119 {
	return v.value
}

func (v *NullableInlineObject119) Set(val *InlineObject119) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineObject119) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineObject119) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineObject119(val *InlineObject119) *NullableInlineObject119 {
	return &NullableInlineObject119{value: val, isSet: true}
}

func (v NullableInlineObject119) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineObject119) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


