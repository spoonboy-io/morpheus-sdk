/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ZoneGcpConfig struct for ZoneGcpConfig
type ZoneGcpConfig struct {
	PrivateKey *string `json:"privateKey,omitempty"`
	ClientEmail *string `json:"clientEmail,omitempty"`
	ProjectId *string `json:"projectId,omitempty"`
	GoogleRegionId *string `json:"googleRegionId,omitempty"`
	ImportExisting *string `json:"_importExisting,omitempty"`
	ImportExisting *string `json:"importExisting,omitempty"`
	ApplianceUrl *string `json:"applianceUrl,omitempty"`
	DatacenterName *string `json:"datacenterName,omitempty"`
	NetworkServerId *string `json:"networkServer.id,omitempty"`
	NetworkServer *ZoneVcenterConfigNetworkServer `json:"networkServer,omitempty"`
	SecurityServer NullableString `json:"securityServer,omitempty"`
	CertificateProvider NullableString `json:"certificateProvider,omitempty"`
	BackupMode NullableString `json:"backupMode,omitempty"`
	ReplicationMode NullableString `json:"replicationMode,omitempty"`
	DnsIntegrationId NullableString `json:"dnsIntegrationId,omitempty"`
	ServiceRegistryId NullableString `json:"serviceRegistryId,omitempty"`
	ConfigManagementId NullableString `json:"configManagementId,omitempty"`
	PrivateKeyHash NullableString `json:"privateKeyHash,omitempty"`
}

// NewZoneGcpConfig instantiates a new ZoneGcpConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewZoneGcpConfig() *ZoneGcpConfig {
	this := ZoneGcpConfig{}
	return &this
}

// NewZoneGcpConfigWithDefaults instantiates a new ZoneGcpConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewZoneGcpConfigWithDefaults() *ZoneGcpConfig {
	this := ZoneGcpConfig{}
	return &this
}

// GetPrivateKey returns the PrivateKey field value if set, zero value otherwise.
func (o *ZoneGcpConfig) GetPrivateKey() string {
	if o == nil || o.PrivateKey == nil {
		var ret string
		return ret
	}
	return *o.PrivateKey
}

// GetPrivateKeyOk returns a tuple with the PrivateKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneGcpConfig) GetPrivateKeyOk() (*string, bool) {
	if o == nil || o.PrivateKey == nil {
		return nil, false
	}
	return o.PrivateKey, true
}

// HasPrivateKey returns a boolean if a field has been set.
func (o *ZoneGcpConfig) HasPrivateKey() bool {
	if o != nil && o.PrivateKey != nil {
		return true
	}

	return false
}

// SetPrivateKey gets a reference to the given string and assigns it to the PrivateKey field.
func (o *ZoneGcpConfig) SetPrivateKey(v string) {
	o.PrivateKey = &v
}

// GetClientEmail returns the ClientEmail field value if set, zero value otherwise.
func (o *ZoneGcpConfig) GetClientEmail() string {
	if o == nil || o.ClientEmail == nil {
		var ret string
		return ret
	}
	return *o.ClientEmail
}

// GetClientEmailOk returns a tuple with the ClientEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneGcpConfig) GetClientEmailOk() (*string, bool) {
	if o == nil || o.ClientEmail == nil {
		return nil, false
	}
	return o.ClientEmail, true
}

// HasClientEmail returns a boolean if a field has been set.
func (o *ZoneGcpConfig) HasClientEmail() bool {
	if o != nil && o.ClientEmail != nil {
		return true
	}

	return false
}

// SetClientEmail gets a reference to the given string and assigns it to the ClientEmail field.
func (o *ZoneGcpConfig) SetClientEmail(v string) {
	o.ClientEmail = &v
}

// GetProjectId returns the ProjectId field value if set, zero value otherwise.
func (o *ZoneGcpConfig) GetProjectId() string {
	if o == nil || o.ProjectId == nil {
		var ret string
		return ret
	}
	return *o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneGcpConfig) GetProjectIdOk() (*string, bool) {
	if o == nil || o.ProjectId == nil {
		return nil, false
	}
	return o.ProjectId, true
}

// HasProjectId returns a boolean if a field has been set.
func (o *ZoneGcpConfig) HasProjectId() bool {
	if o != nil && o.ProjectId != nil {
		return true
	}

	return false
}

// SetProjectId gets a reference to the given string and assigns it to the ProjectId field.
func (o *ZoneGcpConfig) SetProjectId(v string) {
	o.ProjectId = &v
}

// GetGoogleRegionId returns the GoogleRegionId field value if set, zero value otherwise.
func (o *ZoneGcpConfig) GetGoogleRegionId() string {
	if o == nil || o.GoogleRegionId == nil {
		var ret string
		return ret
	}
	return *o.GoogleRegionId
}

// GetGoogleRegionIdOk returns a tuple with the GoogleRegionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneGcpConfig) GetGoogleRegionIdOk() (*string, bool) {
	if o == nil || o.GoogleRegionId == nil {
		return nil, false
	}
	return o.GoogleRegionId, true
}

// HasGoogleRegionId returns a boolean if a field has been set.
func (o *ZoneGcpConfig) HasGoogleRegionId() bool {
	if o != nil && o.GoogleRegionId != nil {
		return true
	}

	return false
}

// SetGoogleRegionId gets a reference to the given string and assigns it to the GoogleRegionId field.
func (o *ZoneGcpConfig) SetGoogleRegionId(v string) {
	o.GoogleRegionId = &v
}

// GetImportExisting returns the ImportExisting field value if set, zero value otherwise.
func (o *ZoneGcpConfig) GetImportExisting() string {
	if o == nil || o.ImportExisting == nil {
		var ret string
		return ret
	}
	return *o.ImportExisting
}

// GetImportExistingOk returns a tuple with the ImportExisting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneGcpConfig) GetImportExistingOk() (*string, bool) {
	if o == nil || o.ImportExisting == nil {
		return nil, false
	}
	return o.ImportExisting, true
}

// HasImportExisting returns a boolean if a field has been set.
func (o *ZoneGcpConfig) HasImportExisting() bool {
	if o != nil && o.ImportExisting != nil {
		return true
	}

	return false
}

// SetImportExisting gets a reference to the given string and assigns it to the ImportExisting field.
func (o *ZoneGcpConfig) SetImportExisting(v string) {
	o.ImportExisting = &v
}

// GetImportExisting returns the ImportExisting field value if set, zero value otherwise.
func (o *ZoneGcpConfig) GetImportExisting() string {
	if o == nil || o.ImportExisting == nil {
		var ret string
		return ret
	}
	return *o.ImportExisting
}

// GetImportExistingOk returns a tuple with the ImportExisting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneGcpConfig) GetImportExistingOk() (*string, bool) {
	if o == nil || o.ImportExisting == nil {
		return nil, false
	}
	return o.ImportExisting, true
}

// HasImportExisting returns a boolean if a field has been set.
func (o *ZoneGcpConfig) HasImportExisting() bool {
	if o != nil && o.ImportExisting != nil {
		return true
	}

	return false
}

// SetImportExisting gets a reference to the given string and assigns it to the ImportExisting field.
func (o *ZoneGcpConfig) SetImportExisting(v string) {
	o.ImportExisting = &v
}

// GetApplianceUrl returns the ApplianceUrl field value if set, zero value otherwise.
func (o *ZoneGcpConfig) GetApplianceUrl() string {
	if o == nil || o.ApplianceUrl == nil {
		var ret string
		return ret
	}
	return *o.ApplianceUrl
}

// GetApplianceUrlOk returns a tuple with the ApplianceUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneGcpConfig) GetApplianceUrlOk() (*string, bool) {
	if o == nil || o.ApplianceUrl == nil {
		return nil, false
	}
	return o.ApplianceUrl, true
}

// HasApplianceUrl returns a boolean if a field has been set.
func (o *ZoneGcpConfig) HasApplianceUrl() bool {
	if o != nil && o.ApplianceUrl != nil {
		return true
	}

	return false
}

// SetApplianceUrl gets a reference to the given string and assigns it to the ApplianceUrl field.
func (o *ZoneGcpConfig) SetApplianceUrl(v string) {
	o.ApplianceUrl = &v
}

// GetDatacenterName returns the DatacenterName field value if set, zero value otherwise.
func (o *ZoneGcpConfig) GetDatacenterName() string {
	if o == nil || o.DatacenterName == nil {
		var ret string
		return ret
	}
	return *o.DatacenterName
}

// GetDatacenterNameOk returns a tuple with the DatacenterName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneGcpConfig) GetDatacenterNameOk() (*string, bool) {
	if o == nil || o.DatacenterName == nil {
		return nil, false
	}
	return o.DatacenterName, true
}

// HasDatacenterName returns a boolean if a field has been set.
func (o *ZoneGcpConfig) HasDatacenterName() bool {
	if o != nil && o.DatacenterName != nil {
		return true
	}

	return false
}

// SetDatacenterName gets a reference to the given string and assigns it to the DatacenterName field.
func (o *ZoneGcpConfig) SetDatacenterName(v string) {
	o.DatacenterName = &v
}

// GetNetworkServerId returns the NetworkServerId field value if set, zero value otherwise.
func (o *ZoneGcpConfig) GetNetworkServerId() string {
	if o == nil || o.NetworkServerId == nil {
		var ret string
		return ret
	}
	return *o.NetworkServerId
}

// GetNetworkServerIdOk returns a tuple with the NetworkServerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneGcpConfig) GetNetworkServerIdOk() (*string, bool) {
	if o == nil || o.NetworkServerId == nil {
		return nil, false
	}
	return o.NetworkServerId, true
}

// HasNetworkServerId returns a boolean if a field has been set.
func (o *ZoneGcpConfig) HasNetworkServerId() bool {
	if o != nil && o.NetworkServerId != nil {
		return true
	}

	return false
}

// SetNetworkServerId gets a reference to the given string and assigns it to the NetworkServerId field.
func (o *ZoneGcpConfig) SetNetworkServerId(v string) {
	o.NetworkServerId = &v
}

// GetNetworkServer returns the NetworkServer field value if set, zero value otherwise.
func (o *ZoneGcpConfig) GetNetworkServer() ZoneVcenterConfigNetworkServer {
	if o == nil || o.NetworkServer == nil {
		var ret ZoneVcenterConfigNetworkServer
		return ret
	}
	return *o.NetworkServer
}

// GetNetworkServerOk returns a tuple with the NetworkServer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneGcpConfig) GetNetworkServerOk() (*ZoneVcenterConfigNetworkServer, bool) {
	if o == nil || o.NetworkServer == nil {
		return nil, false
	}
	return o.NetworkServer, true
}

// HasNetworkServer returns a boolean if a field has been set.
func (o *ZoneGcpConfig) HasNetworkServer() bool {
	if o != nil && o.NetworkServer != nil {
		return true
	}

	return false
}

// SetNetworkServer gets a reference to the given ZoneVcenterConfigNetworkServer and assigns it to the NetworkServer field.
func (o *ZoneGcpConfig) SetNetworkServer(v ZoneVcenterConfigNetworkServer) {
	o.NetworkServer = &v
}

// GetSecurityServer returns the SecurityServer field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ZoneGcpConfig) GetSecurityServer() string {
	if o == nil || o.SecurityServer.Get() == nil {
		var ret string
		return ret
	}
	return *o.SecurityServer.Get()
}

// GetSecurityServerOk returns a tuple with the SecurityServer field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ZoneGcpConfig) GetSecurityServerOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SecurityServer.Get(), o.SecurityServer.IsSet()
}

// HasSecurityServer returns a boolean if a field has been set.
func (o *ZoneGcpConfig) HasSecurityServer() bool {
	if o != nil && o.SecurityServer.IsSet() {
		return true
	}

	return false
}

// SetSecurityServer gets a reference to the given NullableString and assigns it to the SecurityServer field.
func (o *ZoneGcpConfig) SetSecurityServer(v string) {
	o.SecurityServer.Set(&v)
}
// SetSecurityServerNil sets the value for SecurityServer to be an explicit nil
func (o *ZoneGcpConfig) SetSecurityServerNil() {
	o.SecurityServer.Set(nil)
}

// UnsetSecurityServer ensures that no value is present for SecurityServer, not even an explicit nil
func (o *ZoneGcpConfig) UnsetSecurityServer() {
	o.SecurityServer.Unset()
}

// GetCertificateProvider returns the CertificateProvider field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ZoneGcpConfig) GetCertificateProvider() string {
	if o == nil || o.CertificateProvider.Get() == nil {
		var ret string
		return ret
	}
	return *o.CertificateProvider.Get()
}

// GetCertificateProviderOk returns a tuple with the CertificateProvider field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ZoneGcpConfig) GetCertificateProviderOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CertificateProvider.Get(), o.CertificateProvider.IsSet()
}

// HasCertificateProvider returns a boolean if a field has been set.
func (o *ZoneGcpConfig) HasCertificateProvider() bool {
	if o != nil && o.CertificateProvider.IsSet() {
		return true
	}

	return false
}

// SetCertificateProvider gets a reference to the given NullableString and assigns it to the CertificateProvider field.
func (o *ZoneGcpConfig) SetCertificateProvider(v string) {
	o.CertificateProvider.Set(&v)
}
// SetCertificateProviderNil sets the value for CertificateProvider to be an explicit nil
func (o *ZoneGcpConfig) SetCertificateProviderNil() {
	o.CertificateProvider.Set(nil)
}

// UnsetCertificateProvider ensures that no value is present for CertificateProvider, not even an explicit nil
func (o *ZoneGcpConfig) UnsetCertificateProvider() {
	o.CertificateProvider.Unset()
}

// GetBackupMode returns the BackupMode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ZoneGcpConfig) GetBackupMode() string {
	if o == nil || o.BackupMode.Get() == nil {
		var ret string
		return ret
	}
	return *o.BackupMode.Get()
}

// GetBackupModeOk returns a tuple with the BackupMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ZoneGcpConfig) GetBackupModeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.BackupMode.Get(), o.BackupMode.IsSet()
}

// HasBackupMode returns a boolean if a field has been set.
func (o *ZoneGcpConfig) HasBackupMode() bool {
	if o != nil && o.BackupMode.IsSet() {
		return true
	}

	return false
}

// SetBackupMode gets a reference to the given NullableString and assigns it to the BackupMode field.
func (o *ZoneGcpConfig) SetBackupMode(v string) {
	o.BackupMode.Set(&v)
}
// SetBackupModeNil sets the value for BackupMode to be an explicit nil
func (o *ZoneGcpConfig) SetBackupModeNil() {
	o.BackupMode.Set(nil)
}

// UnsetBackupMode ensures that no value is present for BackupMode, not even an explicit nil
func (o *ZoneGcpConfig) UnsetBackupMode() {
	o.BackupMode.Unset()
}

// GetReplicationMode returns the ReplicationMode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ZoneGcpConfig) GetReplicationMode() string {
	if o == nil || o.ReplicationMode.Get() == nil {
		var ret string
		return ret
	}
	return *o.ReplicationMode.Get()
}

// GetReplicationModeOk returns a tuple with the ReplicationMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ZoneGcpConfig) GetReplicationModeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ReplicationMode.Get(), o.ReplicationMode.IsSet()
}

// HasReplicationMode returns a boolean if a field has been set.
func (o *ZoneGcpConfig) HasReplicationMode() bool {
	if o != nil && o.ReplicationMode.IsSet() {
		return true
	}

	return false
}

// SetReplicationMode gets a reference to the given NullableString and assigns it to the ReplicationMode field.
func (o *ZoneGcpConfig) SetReplicationMode(v string) {
	o.ReplicationMode.Set(&v)
}
// SetReplicationModeNil sets the value for ReplicationMode to be an explicit nil
func (o *ZoneGcpConfig) SetReplicationModeNil() {
	o.ReplicationMode.Set(nil)
}

// UnsetReplicationMode ensures that no value is present for ReplicationMode, not even an explicit nil
func (o *ZoneGcpConfig) UnsetReplicationMode() {
	o.ReplicationMode.Unset()
}

// GetDnsIntegrationId returns the DnsIntegrationId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ZoneGcpConfig) GetDnsIntegrationId() string {
	if o == nil || o.DnsIntegrationId.Get() == nil {
		var ret string
		return ret
	}
	return *o.DnsIntegrationId.Get()
}

// GetDnsIntegrationIdOk returns a tuple with the DnsIntegrationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ZoneGcpConfig) GetDnsIntegrationIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DnsIntegrationId.Get(), o.DnsIntegrationId.IsSet()
}

// HasDnsIntegrationId returns a boolean if a field has been set.
func (o *ZoneGcpConfig) HasDnsIntegrationId() bool {
	if o != nil && o.DnsIntegrationId.IsSet() {
		return true
	}

	return false
}

// SetDnsIntegrationId gets a reference to the given NullableString and assigns it to the DnsIntegrationId field.
func (o *ZoneGcpConfig) SetDnsIntegrationId(v string) {
	o.DnsIntegrationId.Set(&v)
}
// SetDnsIntegrationIdNil sets the value for DnsIntegrationId to be an explicit nil
func (o *ZoneGcpConfig) SetDnsIntegrationIdNil() {
	o.DnsIntegrationId.Set(nil)
}

// UnsetDnsIntegrationId ensures that no value is present for DnsIntegrationId, not even an explicit nil
func (o *ZoneGcpConfig) UnsetDnsIntegrationId() {
	o.DnsIntegrationId.Unset()
}

// GetServiceRegistryId returns the ServiceRegistryId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ZoneGcpConfig) GetServiceRegistryId() string {
	if o == nil || o.ServiceRegistryId.Get() == nil {
		var ret string
		return ret
	}
	return *o.ServiceRegistryId.Get()
}

// GetServiceRegistryIdOk returns a tuple with the ServiceRegistryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ZoneGcpConfig) GetServiceRegistryIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ServiceRegistryId.Get(), o.ServiceRegistryId.IsSet()
}

// HasServiceRegistryId returns a boolean if a field has been set.
func (o *ZoneGcpConfig) HasServiceRegistryId() bool {
	if o != nil && o.ServiceRegistryId.IsSet() {
		return true
	}

	return false
}

// SetServiceRegistryId gets a reference to the given NullableString and assigns it to the ServiceRegistryId field.
func (o *ZoneGcpConfig) SetServiceRegistryId(v string) {
	o.ServiceRegistryId.Set(&v)
}
// SetServiceRegistryIdNil sets the value for ServiceRegistryId to be an explicit nil
func (o *ZoneGcpConfig) SetServiceRegistryIdNil() {
	o.ServiceRegistryId.Set(nil)
}

// UnsetServiceRegistryId ensures that no value is present for ServiceRegistryId, not even an explicit nil
func (o *ZoneGcpConfig) UnsetServiceRegistryId() {
	o.ServiceRegistryId.Unset()
}

// GetConfigManagementId returns the ConfigManagementId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ZoneGcpConfig) GetConfigManagementId() string {
	if o == nil || o.ConfigManagementId.Get() == nil {
		var ret string
		return ret
	}
	return *o.ConfigManagementId.Get()
}

// GetConfigManagementIdOk returns a tuple with the ConfigManagementId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ZoneGcpConfig) GetConfigManagementIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ConfigManagementId.Get(), o.ConfigManagementId.IsSet()
}

// HasConfigManagementId returns a boolean if a field has been set.
func (o *ZoneGcpConfig) HasConfigManagementId() bool {
	if o != nil && o.ConfigManagementId.IsSet() {
		return true
	}

	return false
}

// SetConfigManagementId gets a reference to the given NullableString and assigns it to the ConfigManagementId field.
func (o *ZoneGcpConfig) SetConfigManagementId(v string) {
	o.ConfigManagementId.Set(&v)
}
// SetConfigManagementIdNil sets the value for ConfigManagementId to be an explicit nil
func (o *ZoneGcpConfig) SetConfigManagementIdNil() {
	o.ConfigManagementId.Set(nil)
}

// UnsetConfigManagementId ensures that no value is present for ConfigManagementId, not even an explicit nil
func (o *ZoneGcpConfig) UnsetConfigManagementId() {
	o.ConfigManagementId.Unset()
}

// GetPrivateKeyHash returns the PrivateKeyHash field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ZoneGcpConfig) GetPrivateKeyHash() string {
	if o == nil || o.PrivateKeyHash.Get() == nil {
		var ret string
		return ret
	}
	return *o.PrivateKeyHash.Get()
}

// GetPrivateKeyHashOk returns a tuple with the PrivateKeyHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ZoneGcpConfig) GetPrivateKeyHashOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PrivateKeyHash.Get(), o.PrivateKeyHash.IsSet()
}

// HasPrivateKeyHash returns a boolean if a field has been set.
func (o *ZoneGcpConfig) HasPrivateKeyHash() bool {
	if o != nil && o.PrivateKeyHash.IsSet() {
		return true
	}

	return false
}

// SetPrivateKeyHash gets a reference to the given NullableString and assigns it to the PrivateKeyHash field.
func (o *ZoneGcpConfig) SetPrivateKeyHash(v string) {
	o.PrivateKeyHash.Set(&v)
}
// SetPrivateKeyHashNil sets the value for PrivateKeyHash to be an explicit nil
func (o *ZoneGcpConfig) SetPrivateKeyHashNil() {
	o.PrivateKeyHash.Set(nil)
}

// UnsetPrivateKeyHash ensures that no value is present for PrivateKeyHash, not even an explicit nil
func (o *ZoneGcpConfig) UnsetPrivateKeyHash() {
	o.PrivateKeyHash.Unset()
}

func (o ZoneGcpConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.PrivateKey != nil {
		toSerialize["privateKey"] = o.PrivateKey
	}
	if o.ClientEmail != nil {
		toSerialize["clientEmail"] = o.ClientEmail
	}
	if o.ProjectId != nil {
		toSerialize["projectId"] = o.ProjectId
	}
	if o.GoogleRegionId != nil {
		toSerialize["googleRegionId"] = o.GoogleRegionId
	}
	if o.ImportExisting != nil {
		toSerialize["_importExisting"] = o.ImportExisting
	}
	if o.ImportExisting != nil {
		toSerialize["importExisting"] = o.ImportExisting
	}
	if o.ApplianceUrl != nil {
		toSerialize["applianceUrl"] = o.ApplianceUrl
	}
	if o.DatacenterName != nil {
		toSerialize["datacenterName"] = o.DatacenterName
	}
	if o.NetworkServerId != nil {
		toSerialize["networkServer.id"] = o.NetworkServerId
	}
	if o.NetworkServer != nil {
		toSerialize["networkServer"] = o.NetworkServer
	}
	if o.SecurityServer.IsSet() {
		toSerialize["securityServer"] = o.SecurityServer.Get()
	}
	if o.CertificateProvider.IsSet() {
		toSerialize["certificateProvider"] = o.CertificateProvider.Get()
	}
	if o.BackupMode.IsSet() {
		toSerialize["backupMode"] = o.BackupMode.Get()
	}
	if o.ReplicationMode.IsSet() {
		toSerialize["replicationMode"] = o.ReplicationMode.Get()
	}
	if o.DnsIntegrationId.IsSet() {
		toSerialize["dnsIntegrationId"] = o.DnsIntegrationId.Get()
	}
	if o.ServiceRegistryId.IsSet() {
		toSerialize["serviceRegistryId"] = o.ServiceRegistryId.Get()
	}
	if o.ConfigManagementId.IsSet() {
		toSerialize["configManagementId"] = o.ConfigManagementId.Get()
	}
	if o.PrivateKeyHash.IsSet() {
		toSerialize["privateKeyHash"] = o.PrivateKeyHash.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableZoneGcpConfig struct {
	value *ZoneGcpConfig
	isSet bool
}

func (v NullableZoneGcpConfig) Get() *ZoneGcpConfig {
	return v.value
}

func (v *NullableZoneGcpConfig) Set(val *ZoneGcpConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableZoneGcpConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableZoneGcpConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableZoneGcpConfig(val *ZoneGcpConfig) *NullableZoneGcpConfig {
	return &NullableZoneGcpConfig{value: val, isSet: true}
}

func (v NullableZoneGcpConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableZoneGcpConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


