/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ApplianceSettings struct for ApplianceSettings
type ApplianceSettings struct {
	ApplianceUrl *string `json:"applianceUrl,omitempty"`
	InternalApplianceUrl *string `json:"internalApplianceUrl,omitempty"`
	CorsAllowed *string `json:"corsAllowed,omitempty"`
	RegistrationEnabled *bool `json:"registrationEnabled,omitempty"`
	DefaultRoleId *string `json:"defaultRoleId,omitempty"`
	DefaultUserRoleId NullableString `json:"defaultUserRoleId,omitempty"`
	DockerPrivilegedMode *bool `json:"dockerPrivilegedMode,omitempty"`
	ExpirePwdDays NullableString `json:"expirePwdDays,omitempty"`
	DisableAfterAttempts NullableString `json:"disableAfterAttempts,omitempty"`
	DisableAfterDaysInactive NullableString `json:"disableAfterDaysInactive,omitempty"`
	WarnUserDaysBefore NullableString `json:"warnUserDaysBefore,omitempty"`
	SmtpMailFrom NullableString `json:"smtpMailFrom,omitempty"`
	SmtpServer NullableString `json:"smtpServer,omitempty"`
	SmtpPort NullableString `json:"smtpPort,omitempty"`
	SmtpSSL *bool `json:"smtpSSL,omitempty"`
	SmtpTLS *bool `json:"smtpTLS,omitempty"`
	SmtpUser NullableString `json:"smtpUser,omitempty"`
	SmtpPassword NullableString `json:"smtpPassword,omitempty"`
	SmtpPasswordHash NullableString `json:"smtpPasswordHash,omitempty"`
	ProxyHost NullableString `json:"proxyHost,omitempty"`
	ProxyPort NullableString `json:"proxyPort,omitempty"`
	ProxyUser NullableString `json:"proxyUser,omitempty"`
	ProxyPassword NullableString `json:"proxyPassword,omitempty"`
	ProxyPasswordHash NullableString `json:"proxyPasswordHash,omitempty"`
	ProxyDomain NullableString `json:"proxyDomain,omitempty"`
	ProxyWorkstation NullableString `json:"proxyWorkstation,omitempty"`
	CurrencyProvider NullableString `json:"currencyProvider,omitempty"`
	CurrencyKey NullableString `json:"currencyKey,omitempty"`
	EnabledZoneTypes []InlineResponse20040AppDeployInstance `json:"enabledZoneTypes,omitempty"`
	StatsRetainmentPeriod *int64 `json:"statsRetainmentPeriod,omitempty"`
}

// NewApplianceSettings instantiates a new ApplianceSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApplianceSettings() *ApplianceSettings {
	this := ApplianceSettings{}
	return &this
}

// NewApplianceSettingsWithDefaults instantiates a new ApplianceSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplianceSettingsWithDefaults() *ApplianceSettings {
	this := ApplianceSettings{}
	return &this
}

// GetApplianceUrl returns the ApplianceUrl field value if set, zero value otherwise.
func (o *ApplianceSettings) GetApplianceUrl() string {
	if o == nil || o.ApplianceUrl == nil {
		var ret string
		return ret
	}
	return *o.ApplianceUrl
}

// GetApplianceUrlOk returns a tuple with the ApplianceUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceSettings) GetApplianceUrlOk() (*string, bool) {
	if o == nil || o.ApplianceUrl == nil {
		return nil, false
	}
	return o.ApplianceUrl, true
}

// HasApplianceUrl returns a boolean if a field has been set.
func (o *ApplianceSettings) HasApplianceUrl() bool {
	if o != nil && o.ApplianceUrl != nil {
		return true
	}

	return false
}

// SetApplianceUrl gets a reference to the given string and assigns it to the ApplianceUrl field.
func (o *ApplianceSettings) SetApplianceUrl(v string) {
	o.ApplianceUrl = &v
}

// GetInternalApplianceUrl returns the InternalApplianceUrl field value if set, zero value otherwise.
func (o *ApplianceSettings) GetInternalApplianceUrl() string {
	if o == nil || o.InternalApplianceUrl == nil {
		var ret string
		return ret
	}
	return *o.InternalApplianceUrl
}

// GetInternalApplianceUrlOk returns a tuple with the InternalApplianceUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceSettings) GetInternalApplianceUrlOk() (*string, bool) {
	if o == nil || o.InternalApplianceUrl == nil {
		return nil, false
	}
	return o.InternalApplianceUrl, true
}

// HasInternalApplianceUrl returns a boolean if a field has been set.
func (o *ApplianceSettings) HasInternalApplianceUrl() bool {
	if o != nil && o.InternalApplianceUrl != nil {
		return true
	}

	return false
}

// SetInternalApplianceUrl gets a reference to the given string and assigns it to the InternalApplianceUrl field.
func (o *ApplianceSettings) SetInternalApplianceUrl(v string) {
	o.InternalApplianceUrl = &v
}

// GetCorsAllowed returns the CorsAllowed field value if set, zero value otherwise.
func (o *ApplianceSettings) GetCorsAllowed() string {
	if o == nil || o.CorsAllowed == nil {
		var ret string
		return ret
	}
	return *o.CorsAllowed
}

// GetCorsAllowedOk returns a tuple with the CorsAllowed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceSettings) GetCorsAllowedOk() (*string, bool) {
	if o == nil || o.CorsAllowed == nil {
		return nil, false
	}
	return o.CorsAllowed, true
}

// HasCorsAllowed returns a boolean if a field has been set.
func (o *ApplianceSettings) HasCorsAllowed() bool {
	if o != nil && o.CorsAllowed != nil {
		return true
	}

	return false
}

// SetCorsAllowed gets a reference to the given string and assigns it to the CorsAllowed field.
func (o *ApplianceSettings) SetCorsAllowed(v string) {
	o.CorsAllowed = &v
}

// GetRegistrationEnabled returns the RegistrationEnabled field value if set, zero value otherwise.
func (o *ApplianceSettings) GetRegistrationEnabled() bool {
	if o == nil || o.RegistrationEnabled == nil {
		var ret bool
		return ret
	}
	return *o.RegistrationEnabled
}

// GetRegistrationEnabledOk returns a tuple with the RegistrationEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceSettings) GetRegistrationEnabledOk() (*bool, bool) {
	if o == nil || o.RegistrationEnabled == nil {
		return nil, false
	}
	return o.RegistrationEnabled, true
}

// HasRegistrationEnabled returns a boolean if a field has been set.
func (o *ApplianceSettings) HasRegistrationEnabled() bool {
	if o != nil && o.RegistrationEnabled != nil {
		return true
	}

	return false
}

// SetRegistrationEnabled gets a reference to the given bool and assigns it to the RegistrationEnabled field.
func (o *ApplianceSettings) SetRegistrationEnabled(v bool) {
	o.RegistrationEnabled = &v
}

// GetDefaultRoleId returns the DefaultRoleId field value if set, zero value otherwise.
func (o *ApplianceSettings) GetDefaultRoleId() string {
	if o == nil || o.DefaultRoleId == nil {
		var ret string
		return ret
	}
	return *o.DefaultRoleId
}

// GetDefaultRoleIdOk returns a tuple with the DefaultRoleId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceSettings) GetDefaultRoleIdOk() (*string, bool) {
	if o == nil || o.DefaultRoleId == nil {
		return nil, false
	}
	return o.DefaultRoleId, true
}

// HasDefaultRoleId returns a boolean if a field has been set.
func (o *ApplianceSettings) HasDefaultRoleId() bool {
	if o != nil && o.DefaultRoleId != nil {
		return true
	}

	return false
}

// SetDefaultRoleId gets a reference to the given string and assigns it to the DefaultRoleId field.
func (o *ApplianceSettings) SetDefaultRoleId(v string) {
	o.DefaultRoleId = &v
}

// GetDefaultUserRoleId returns the DefaultUserRoleId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApplianceSettings) GetDefaultUserRoleId() string {
	if o == nil || o.DefaultUserRoleId.Get() == nil {
		var ret string
		return ret
	}
	return *o.DefaultUserRoleId.Get()
}

// GetDefaultUserRoleIdOk returns a tuple with the DefaultUserRoleId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApplianceSettings) GetDefaultUserRoleIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DefaultUserRoleId.Get(), o.DefaultUserRoleId.IsSet()
}

// HasDefaultUserRoleId returns a boolean if a field has been set.
func (o *ApplianceSettings) HasDefaultUserRoleId() bool {
	if o != nil && o.DefaultUserRoleId.IsSet() {
		return true
	}

	return false
}

// SetDefaultUserRoleId gets a reference to the given NullableString and assigns it to the DefaultUserRoleId field.
func (o *ApplianceSettings) SetDefaultUserRoleId(v string) {
	o.DefaultUserRoleId.Set(&v)
}
// SetDefaultUserRoleIdNil sets the value for DefaultUserRoleId to be an explicit nil
func (o *ApplianceSettings) SetDefaultUserRoleIdNil() {
	o.DefaultUserRoleId.Set(nil)
}

// UnsetDefaultUserRoleId ensures that no value is present for DefaultUserRoleId, not even an explicit nil
func (o *ApplianceSettings) UnsetDefaultUserRoleId() {
	o.DefaultUserRoleId.Unset()
}

// GetDockerPrivilegedMode returns the DockerPrivilegedMode field value if set, zero value otherwise.
func (o *ApplianceSettings) GetDockerPrivilegedMode() bool {
	if o == nil || o.DockerPrivilegedMode == nil {
		var ret bool
		return ret
	}
	return *o.DockerPrivilegedMode
}

// GetDockerPrivilegedModeOk returns a tuple with the DockerPrivilegedMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceSettings) GetDockerPrivilegedModeOk() (*bool, bool) {
	if o == nil || o.DockerPrivilegedMode == nil {
		return nil, false
	}
	return o.DockerPrivilegedMode, true
}

// HasDockerPrivilegedMode returns a boolean if a field has been set.
func (o *ApplianceSettings) HasDockerPrivilegedMode() bool {
	if o != nil && o.DockerPrivilegedMode != nil {
		return true
	}

	return false
}

// SetDockerPrivilegedMode gets a reference to the given bool and assigns it to the DockerPrivilegedMode field.
func (o *ApplianceSettings) SetDockerPrivilegedMode(v bool) {
	o.DockerPrivilegedMode = &v
}

// GetExpirePwdDays returns the ExpirePwdDays field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApplianceSettings) GetExpirePwdDays() string {
	if o == nil || o.ExpirePwdDays.Get() == nil {
		var ret string
		return ret
	}
	return *o.ExpirePwdDays.Get()
}

// GetExpirePwdDaysOk returns a tuple with the ExpirePwdDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApplianceSettings) GetExpirePwdDaysOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ExpirePwdDays.Get(), o.ExpirePwdDays.IsSet()
}

// HasExpirePwdDays returns a boolean if a field has been set.
func (o *ApplianceSettings) HasExpirePwdDays() bool {
	if o != nil && o.ExpirePwdDays.IsSet() {
		return true
	}

	return false
}

// SetExpirePwdDays gets a reference to the given NullableString and assigns it to the ExpirePwdDays field.
func (o *ApplianceSettings) SetExpirePwdDays(v string) {
	o.ExpirePwdDays.Set(&v)
}
// SetExpirePwdDaysNil sets the value for ExpirePwdDays to be an explicit nil
func (o *ApplianceSettings) SetExpirePwdDaysNil() {
	o.ExpirePwdDays.Set(nil)
}

// UnsetExpirePwdDays ensures that no value is present for ExpirePwdDays, not even an explicit nil
func (o *ApplianceSettings) UnsetExpirePwdDays() {
	o.ExpirePwdDays.Unset()
}

// GetDisableAfterAttempts returns the DisableAfterAttempts field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApplianceSettings) GetDisableAfterAttempts() string {
	if o == nil || o.DisableAfterAttempts.Get() == nil {
		var ret string
		return ret
	}
	return *o.DisableAfterAttempts.Get()
}

// GetDisableAfterAttemptsOk returns a tuple with the DisableAfterAttempts field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApplianceSettings) GetDisableAfterAttemptsOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DisableAfterAttempts.Get(), o.DisableAfterAttempts.IsSet()
}

// HasDisableAfterAttempts returns a boolean if a field has been set.
func (o *ApplianceSettings) HasDisableAfterAttempts() bool {
	if o != nil && o.DisableAfterAttempts.IsSet() {
		return true
	}

	return false
}

// SetDisableAfterAttempts gets a reference to the given NullableString and assigns it to the DisableAfterAttempts field.
func (o *ApplianceSettings) SetDisableAfterAttempts(v string) {
	o.DisableAfterAttempts.Set(&v)
}
// SetDisableAfterAttemptsNil sets the value for DisableAfterAttempts to be an explicit nil
func (o *ApplianceSettings) SetDisableAfterAttemptsNil() {
	o.DisableAfterAttempts.Set(nil)
}

// UnsetDisableAfterAttempts ensures that no value is present for DisableAfterAttempts, not even an explicit nil
func (o *ApplianceSettings) UnsetDisableAfterAttempts() {
	o.DisableAfterAttempts.Unset()
}

// GetDisableAfterDaysInactive returns the DisableAfterDaysInactive field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApplianceSettings) GetDisableAfterDaysInactive() string {
	if o == nil || o.DisableAfterDaysInactive.Get() == nil {
		var ret string
		return ret
	}
	return *o.DisableAfterDaysInactive.Get()
}

// GetDisableAfterDaysInactiveOk returns a tuple with the DisableAfterDaysInactive field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApplianceSettings) GetDisableAfterDaysInactiveOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DisableAfterDaysInactive.Get(), o.DisableAfterDaysInactive.IsSet()
}

// HasDisableAfterDaysInactive returns a boolean if a field has been set.
func (o *ApplianceSettings) HasDisableAfterDaysInactive() bool {
	if o != nil && o.DisableAfterDaysInactive.IsSet() {
		return true
	}

	return false
}

// SetDisableAfterDaysInactive gets a reference to the given NullableString and assigns it to the DisableAfterDaysInactive field.
func (o *ApplianceSettings) SetDisableAfterDaysInactive(v string) {
	o.DisableAfterDaysInactive.Set(&v)
}
// SetDisableAfterDaysInactiveNil sets the value for DisableAfterDaysInactive to be an explicit nil
func (o *ApplianceSettings) SetDisableAfterDaysInactiveNil() {
	o.DisableAfterDaysInactive.Set(nil)
}

// UnsetDisableAfterDaysInactive ensures that no value is present for DisableAfterDaysInactive, not even an explicit nil
func (o *ApplianceSettings) UnsetDisableAfterDaysInactive() {
	o.DisableAfterDaysInactive.Unset()
}

// GetWarnUserDaysBefore returns the WarnUserDaysBefore field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApplianceSettings) GetWarnUserDaysBefore() string {
	if o == nil || o.WarnUserDaysBefore.Get() == nil {
		var ret string
		return ret
	}
	return *o.WarnUserDaysBefore.Get()
}

// GetWarnUserDaysBeforeOk returns a tuple with the WarnUserDaysBefore field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApplianceSettings) GetWarnUserDaysBeforeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.WarnUserDaysBefore.Get(), o.WarnUserDaysBefore.IsSet()
}

// HasWarnUserDaysBefore returns a boolean if a field has been set.
func (o *ApplianceSettings) HasWarnUserDaysBefore() bool {
	if o != nil && o.WarnUserDaysBefore.IsSet() {
		return true
	}

	return false
}

// SetWarnUserDaysBefore gets a reference to the given NullableString and assigns it to the WarnUserDaysBefore field.
func (o *ApplianceSettings) SetWarnUserDaysBefore(v string) {
	o.WarnUserDaysBefore.Set(&v)
}
// SetWarnUserDaysBeforeNil sets the value for WarnUserDaysBefore to be an explicit nil
func (o *ApplianceSettings) SetWarnUserDaysBeforeNil() {
	o.WarnUserDaysBefore.Set(nil)
}

// UnsetWarnUserDaysBefore ensures that no value is present for WarnUserDaysBefore, not even an explicit nil
func (o *ApplianceSettings) UnsetWarnUserDaysBefore() {
	o.WarnUserDaysBefore.Unset()
}

// GetSmtpMailFrom returns the SmtpMailFrom field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApplianceSettings) GetSmtpMailFrom() string {
	if o == nil || o.SmtpMailFrom.Get() == nil {
		var ret string
		return ret
	}
	return *o.SmtpMailFrom.Get()
}

// GetSmtpMailFromOk returns a tuple with the SmtpMailFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApplianceSettings) GetSmtpMailFromOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SmtpMailFrom.Get(), o.SmtpMailFrom.IsSet()
}

// HasSmtpMailFrom returns a boolean if a field has been set.
func (o *ApplianceSettings) HasSmtpMailFrom() bool {
	if o != nil && o.SmtpMailFrom.IsSet() {
		return true
	}

	return false
}

// SetSmtpMailFrom gets a reference to the given NullableString and assigns it to the SmtpMailFrom field.
func (o *ApplianceSettings) SetSmtpMailFrom(v string) {
	o.SmtpMailFrom.Set(&v)
}
// SetSmtpMailFromNil sets the value for SmtpMailFrom to be an explicit nil
func (o *ApplianceSettings) SetSmtpMailFromNil() {
	o.SmtpMailFrom.Set(nil)
}

// UnsetSmtpMailFrom ensures that no value is present for SmtpMailFrom, not even an explicit nil
func (o *ApplianceSettings) UnsetSmtpMailFrom() {
	o.SmtpMailFrom.Unset()
}

// GetSmtpServer returns the SmtpServer field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApplianceSettings) GetSmtpServer() string {
	if o == nil || o.SmtpServer.Get() == nil {
		var ret string
		return ret
	}
	return *o.SmtpServer.Get()
}

// GetSmtpServerOk returns a tuple with the SmtpServer field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApplianceSettings) GetSmtpServerOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SmtpServer.Get(), o.SmtpServer.IsSet()
}

// HasSmtpServer returns a boolean if a field has been set.
func (o *ApplianceSettings) HasSmtpServer() bool {
	if o != nil && o.SmtpServer.IsSet() {
		return true
	}

	return false
}

// SetSmtpServer gets a reference to the given NullableString and assigns it to the SmtpServer field.
func (o *ApplianceSettings) SetSmtpServer(v string) {
	o.SmtpServer.Set(&v)
}
// SetSmtpServerNil sets the value for SmtpServer to be an explicit nil
func (o *ApplianceSettings) SetSmtpServerNil() {
	o.SmtpServer.Set(nil)
}

// UnsetSmtpServer ensures that no value is present for SmtpServer, not even an explicit nil
func (o *ApplianceSettings) UnsetSmtpServer() {
	o.SmtpServer.Unset()
}

// GetSmtpPort returns the SmtpPort field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApplianceSettings) GetSmtpPort() string {
	if o == nil || o.SmtpPort.Get() == nil {
		var ret string
		return ret
	}
	return *o.SmtpPort.Get()
}

// GetSmtpPortOk returns a tuple with the SmtpPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApplianceSettings) GetSmtpPortOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SmtpPort.Get(), o.SmtpPort.IsSet()
}

// HasSmtpPort returns a boolean if a field has been set.
func (o *ApplianceSettings) HasSmtpPort() bool {
	if o != nil && o.SmtpPort.IsSet() {
		return true
	}

	return false
}

// SetSmtpPort gets a reference to the given NullableString and assigns it to the SmtpPort field.
func (o *ApplianceSettings) SetSmtpPort(v string) {
	o.SmtpPort.Set(&v)
}
// SetSmtpPortNil sets the value for SmtpPort to be an explicit nil
func (o *ApplianceSettings) SetSmtpPortNil() {
	o.SmtpPort.Set(nil)
}

// UnsetSmtpPort ensures that no value is present for SmtpPort, not even an explicit nil
func (o *ApplianceSettings) UnsetSmtpPort() {
	o.SmtpPort.Unset()
}

// GetSmtpSSL returns the SmtpSSL field value if set, zero value otherwise.
func (o *ApplianceSettings) GetSmtpSSL() bool {
	if o == nil || o.SmtpSSL == nil {
		var ret bool
		return ret
	}
	return *o.SmtpSSL
}

// GetSmtpSSLOk returns a tuple with the SmtpSSL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceSettings) GetSmtpSSLOk() (*bool, bool) {
	if o == nil || o.SmtpSSL == nil {
		return nil, false
	}
	return o.SmtpSSL, true
}

// HasSmtpSSL returns a boolean if a field has been set.
func (o *ApplianceSettings) HasSmtpSSL() bool {
	if o != nil && o.SmtpSSL != nil {
		return true
	}

	return false
}

// SetSmtpSSL gets a reference to the given bool and assigns it to the SmtpSSL field.
func (o *ApplianceSettings) SetSmtpSSL(v bool) {
	o.SmtpSSL = &v
}

// GetSmtpTLS returns the SmtpTLS field value if set, zero value otherwise.
func (o *ApplianceSettings) GetSmtpTLS() bool {
	if o == nil || o.SmtpTLS == nil {
		var ret bool
		return ret
	}
	return *o.SmtpTLS
}

// GetSmtpTLSOk returns a tuple with the SmtpTLS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceSettings) GetSmtpTLSOk() (*bool, bool) {
	if o == nil || o.SmtpTLS == nil {
		return nil, false
	}
	return o.SmtpTLS, true
}

// HasSmtpTLS returns a boolean if a field has been set.
func (o *ApplianceSettings) HasSmtpTLS() bool {
	if o != nil && o.SmtpTLS != nil {
		return true
	}

	return false
}

// SetSmtpTLS gets a reference to the given bool and assigns it to the SmtpTLS field.
func (o *ApplianceSettings) SetSmtpTLS(v bool) {
	o.SmtpTLS = &v
}

// GetSmtpUser returns the SmtpUser field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApplianceSettings) GetSmtpUser() string {
	if o == nil || o.SmtpUser.Get() == nil {
		var ret string
		return ret
	}
	return *o.SmtpUser.Get()
}

// GetSmtpUserOk returns a tuple with the SmtpUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApplianceSettings) GetSmtpUserOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SmtpUser.Get(), o.SmtpUser.IsSet()
}

// HasSmtpUser returns a boolean if a field has been set.
func (o *ApplianceSettings) HasSmtpUser() bool {
	if o != nil && o.SmtpUser.IsSet() {
		return true
	}

	return false
}

// SetSmtpUser gets a reference to the given NullableString and assigns it to the SmtpUser field.
func (o *ApplianceSettings) SetSmtpUser(v string) {
	o.SmtpUser.Set(&v)
}
// SetSmtpUserNil sets the value for SmtpUser to be an explicit nil
func (o *ApplianceSettings) SetSmtpUserNil() {
	o.SmtpUser.Set(nil)
}

// UnsetSmtpUser ensures that no value is present for SmtpUser, not even an explicit nil
func (o *ApplianceSettings) UnsetSmtpUser() {
	o.SmtpUser.Unset()
}

// GetSmtpPassword returns the SmtpPassword field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApplianceSettings) GetSmtpPassword() string {
	if o == nil || o.SmtpPassword.Get() == nil {
		var ret string
		return ret
	}
	return *o.SmtpPassword.Get()
}

// GetSmtpPasswordOk returns a tuple with the SmtpPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApplianceSettings) GetSmtpPasswordOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SmtpPassword.Get(), o.SmtpPassword.IsSet()
}

// HasSmtpPassword returns a boolean if a field has been set.
func (o *ApplianceSettings) HasSmtpPassword() bool {
	if o != nil && o.SmtpPassword.IsSet() {
		return true
	}

	return false
}

// SetSmtpPassword gets a reference to the given NullableString and assigns it to the SmtpPassword field.
func (o *ApplianceSettings) SetSmtpPassword(v string) {
	o.SmtpPassword.Set(&v)
}
// SetSmtpPasswordNil sets the value for SmtpPassword to be an explicit nil
func (o *ApplianceSettings) SetSmtpPasswordNil() {
	o.SmtpPassword.Set(nil)
}

// UnsetSmtpPassword ensures that no value is present for SmtpPassword, not even an explicit nil
func (o *ApplianceSettings) UnsetSmtpPassword() {
	o.SmtpPassword.Unset()
}

// GetSmtpPasswordHash returns the SmtpPasswordHash field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApplianceSettings) GetSmtpPasswordHash() string {
	if o == nil || o.SmtpPasswordHash.Get() == nil {
		var ret string
		return ret
	}
	return *o.SmtpPasswordHash.Get()
}

// GetSmtpPasswordHashOk returns a tuple with the SmtpPasswordHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApplianceSettings) GetSmtpPasswordHashOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SmtpPasswordHash.Get(), o.SmtpPasswordHash.IsSet()
}

// HasSmtpPasswordHash returns a boolean if a field has been set.
func (o *ApplianceSettings) HasSmtpPasswordHash() bool {
	if o != nil && o.SmtpPasswordHash.IsSet() {
		return true
	}

	return false
}

// SetSmtpPasswordHash gets a reference to the given NullableString and assigns it to the SmtpPasswordHash field.
func (o *ApplianceSettings) SetSmtpPasswordHash(v string) {
	o.SmtpPasswordHash.Set(&v)
}
// SetSmtpPasswordHashNil sets the value for SmtpPasswordHash to be an explicit nil
func (o *ApplianceSettings) SetSmtpPasswordHashNil() {
	o.SmtpPasswordHash.Set(nil)
}

// UnsetSmtpPasswordHash ensures that no value is present for SmtpPasswordHash, not even an explicit nil
func (o *ApplianceSettings) UnsetSmtpPasswordHash() {
	o.SmtpPasswordHash.Unset()
}

// GetProxyHost returns the ProxyHost field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApplianceSettings) GetProxyHost() string {
	if o == nil || o.ProxyHost.Get() == nil {
		var ret string
		return ret
	}
	return *o.ProxyHost.Get()
}

// GetProxyHostOk returns a tuple with the ProxyHost field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApplianceSettings) GetProxyHostOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ProxyHost.Get(), o.ProxyHost.IsSet()
}

// HasProxyHost returns a boolean if a field has been set.
func (o *ApplianceSettings) HasProxyHost() bool {
	if o != nil && o.ProxyHost.IsSet() {
		return true
	}

	return false
}

// SetProxyHost gets a reference to the given NullableString and assigns it to the ProxyHost field.
func (o *ApplianceSettings) SetProxyHost(v string) {
	o.ProxyHost.Set(&v)
}
// SetProxyHostNil sets the value for ProxyHost to be an explicit nil
func (o *ApplianceSettings) SetProxyHostNil() {
	o.ProxyHost.Set(nil)
}

// UnsetProxyHost ensures that no value is present for ProxyHost, not even an explicit nil
func (o *ApplianceSettings) UnsetProxyHost() {
	o.ProxyHost.Unset()
}

// GetProxyPort returns the ProxyPort field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApplianceSettings) GetProxyPort() string {
	if o == nil || o.ProxyPort.Get() == nil {
		var ret string
		return ret
	}
	return *o.ProxyPort.Get()
}

// GetProxyPortOk returns a tuple with the ProxyPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApplianceSettings) GetProxyPortOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ProxyPort.Get(), o.ProxyPort.IsSet()
}

// HasProxyPort returns a boolean if a field has been set.
func (o *ApplianceSettings) HasProxyPort() bool {
	if o != nil && o.ProxyPort.IsSet() {
		return true
	}

	return false
}

// SetProxyPort gets a reference to the given NullableString and assigns it to the ProxyPort field.
func (o *ApplianceSettings) SetProxyPort(v string) {
	o.ProxyPort.Set(&v)
}
// SetProxyPortNil sets the value for ProxyPort to be an explicit nil
func (o *ApplianceSettings) SetProxyPortNil() {
	o.ProxyPort.Set(nil)
}

// UnsetProxyPort ensures that no value is present for ProxyPort, not even an explicit nil
func (o *ApplianceSettings) UnsetProxyPort() {
	o.ProxyPort.Unset()
}

// GetProxyUser returns the ProxyUser field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApplianceSettings) GetProxyUser() string {
	if o == nil || o.ProxyUser.Get() == nil {
		var ret string
		return ret
	}
	return *o.ProxyUser.Get()
}

// GetProxyUserOk returns a tuple with the ProxyUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApplianceSettings) GetProxyUserOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ProxyUser.Get(), o.ProxyUser.IsSet()
}

// HasProxyUser returns a boolean if a field has been set.
func (o *ApplianceSettings) HasProxyUser() bool {
	if o != nil && o.ProxyUser.IsSet() {
		return true
	}

	return false
}

// SetProxyUser gets a reference to the given NullableString and assigns it to the ProxyUser field.
func (o *ApplianceSettings) SetProxyUser(v string) {
	o.ProxyUser.Set(&v)
}
// SetProxyUserNil sets the value for ProxyUser to be an explicit nil
func (o *ApplianceSettings) SetProxyUserNil() {
	o.ProxyUser.Set(nil)
}

// UnsetProxyUser ensures that no value is present for ProxyUser, not even an explicit nil
func (o *ApplianceSettings) UnsetProxyUser() {
	o.ProxyUser.Unset()
}

// GetProxyPassword returns the ProxyPassword field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApplianceSettings) GetProxyPassword() string {
	if o == nil || o.ProxyPassword.Get() == nil {
		var ret string
		return ret
	}
	return *o.ProxyPassword.Get()
}

// GetProxyPasswordOk returns a tuple with the ProxyPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApplianceSettings) GetProxyPasswordOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ProxyPassword.Get(), o.ProxyPassword.IsSet()
}

// HasProxyPassword returns a boolean if a field has been set.
func (o *ApplianceSettings) HasProxyPassword() bool {
	if o != nil && o.ProxyPassword.IsSet() {
		return true
	}

	return false
}

// SetProxyPassword gets a reference to the given NullableString and assigns it to the ProxyPassword field.
func (o *ApplianceSettings) SetProxyPassword(v string) {
	o.ProxyPassword.Set(&v)
}
// SetProxyPasswordNil sets the value for ProxyPassword to be an explicit nil
func (o *ApplianceSettings) SetProxyPasswordNil() {
	o.ProxyPassword.Set(nil)
}

// UnsetProxyPassword ensures that no value is present for ProxyPassword, not even an explicit nil
func (o *ApplianceSettings) UnsetProxyPassword() {
	o.ProxyPassword.Unset()
}

// GetProxyPasswordHash returns the ProxyPasswordHash field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApplianceSettings) GetProxyPasswordHash() string {
	if o == nil || o.ProxyPasswordHash.Get() == nil {
		var ret string
		return ret
	}
	return *o.ProxyPasswordHash.Get()
}

// GetProxyPasswordHashOk returns a tuple with the ProxyPasswordHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApplianceSettings) GetProxyPasswordHashOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ProxyPasswordHash.Get(), o.ProxyPasswordHash.IsSet()
}

// HasProxyPasswordHash returns a boolean if a field has been set.
func (o *ApplianceSettings) HasProxyPasswordHash() bool {
	if o != nil && o.ProxyPasswordHash.IsSet() {
		return true
	}

	return false
}

// SetProxyPasswordHash gets a reference to the given NullableString and assigns it to the ProxyPasswordHash field.
func (o *ApplianceSettings) SetProxyPasswordHash(v string) {
	o.ProxyPasswordHash.Set(&v)
}
// SetProxyPasswordHashNil sets the value for ProxyPasswordHash to be an explicit nil
func (o *ApplianceSettings) SetProxyPasswordHashNil() {
	o.ProxyPasswordHash.Set(nil)
}

// UnsetProxyPasswordHash ensures that no value is present for ProxyPasswordHash, not even an explicit nil
func (o *ApplianceSettings) UnsetProxyPasswordHash() {
	o.ProxyPasswordHash.Unset()
}

// GetProxyDomain returns the ProxyDomain field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApplianceSettings) GetProxyDomain() string {
	if o == nil || o.ProxyDomain.Get() == nil {
		var ret string
		return ret
	}
	return *o.ProxyDomain.Get()
}

// GetProxyDomainOk returns a tuple with the ProxyDomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApplianceSettings) GetProxyDomainOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ProxyDomain.Get(), o.ProxyDomain.IsSet()
}

// HasProxyDomain returns a boolean if a field has been set.
func (o *ApplianceSettings) HasProxyDomain() bool {
	if o != nil && o.ProxyDomain.IsSet() {
		return true
	}

	return false
}

// SetProxyDomain gets a reference to the given NullableString and assigns it to the ProxyDomain field.
func (o *ApplianceSettings) SetProxyDomain(v string) {
	o.ProxyDomain.Set(&v)
}
// SetProxyDomainNil sets the value for ProxyDomain to be an explicit nil
func (o *ApplianceSettings) SetProxyDomainNil() {
	o.ProxyDomain.Set(nil)
}

// UnsetProxyDomain ensures that no value is present for ProxyDomain, not even an explicit nil
func (o *ApplianceSettings) UnsetProxyDomain() {
	o.ProxyDomain.Unset()
}

// GetProxyWorkstation returns the ProxyWorkstation field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApplianceSettings) GetProxyWorkstation() string {
	if o == nil || o.ProxyWorkstation.Get() == nil {
		var ret string
		return ret
	}
	return *o.ProxyWorkstation.Get()
}

// GetProxyWorkstationOk returns a tuple with the ProxyWorkstation field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApplianceSettings) GetProxyWorkstationOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ProxyWorkstation.Get(), o.ProxyWorkstation.IsSet()
}

// HasProxyWorkstation returns a boolean if a field has been set.
func (o *ApplianceSettings) HasProxyWorkstation() bool {
	if o != nil && o.ProxyWorkstation.IsSet() {
		return true
	}

	return false
}

// SetProxyWorkstation gets a reference to the given NullableString and assigns it to the ProxyWorkstation field.
func (o *ApplianceSettings) SetProxyWorkstation(v string) {
	o.ProxyWorkstation.Set(&v)
}
// SetProxyWorkstationNil sets the value for ProxyWorkstation to be an explicit nil
func (o *ApplianceSettings) SetProxyWorkstationNil() {
	o.ProxyWorkstation.Set(nil)
}

// UnsetProxyWorkstation ensures that no value is present for ProxyWorkstation, not even an explicit nil
func (o *ApplianceSettings) UnsetProxyWorkstation() {
	o.ProxyWorkstation.Unset()
}

// GetCurrencyProvider returns the CurrencyProvider field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApplianceSettings) GetCurrencyProvider() string {
	if o == nil || o.CurrencyProvider.Get() == nil {
		var ret string
		return ret
	}
	return *o.CurrencyProvider.Get()
}

// GetCurrencyProviderOk returns a tuple with the CurrencyProvider field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApplianceSettings) GetCurrencyProviderOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CurrencyProvider.Get(), o.CurrencyProvider.IsSet()
}

// HasCurrencyProvider returns a boolean if a field has been set.
func (o *ApplianceSettings) HasCurrencyProvider() bool {
	if o != nil && o.CurrencyProvider.IsSet() {
		return true
	}

	return false
}

// SetCurrencyProvider gets a reference to the given NullableString and assigns it to the CurrencyProvider field.
func (o *ApplianceSettings) SetCurrencyProvider(v string) {
	o.CurrencyProvider.Set(&v)
}
// SetCurrencyProviderNil sets the value for CurrencyProvider to be an explicit nil
func (o *ApplianceSettings) SetCurrencyProviderNil() {
	o.CurrencyProvider.Set(nil)
}

// UnsetCurrencyProvider ensures that no value is present for CurrencyProvider, not even an explicit nil
func (o *ApplianceSettings) UnsetCurrencyProvider() {
	o.CurrencyProvider.Unset()
}

// GetCurrencyKey returns the CurrencyKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApplianceSettings) GetCurrencyKey() string {
	if o == nil || o.CurrencyKey.Get() == nil {
		var ret string
		return ret
	}
	return *o.CurrencyKey.Get()
}

// GetCurrencyKeyOk returns a tuple with the CurrencyKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApplianceSettings) GetCurrencyKeyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CurrencyKey.Get(), o.CurrencyKey.IsSet()
}

// HasCurrencyKey returns a boolean if a field has been set.
func (o *ApplianceSettings) HasCurrencyKey() bool {
	if o != nil && o.CurrencyKey.IsSet() {
		return true
	}

	return false
}

// SetCurrencyKey gets a reference to the given NullableString and assigns it to the CurrencyKey field.
func (o *ApplianceSettings) SetCurrencyKey(v string) {
	o.CurrencyKey.Set(&v)
}
// SetCurrencyKeyNil sets the value for CurrencyKey to be an explicit nil
func (o *ApplianceSettings) SetCurrencyKeyNil() {
	o.CurrencyKey.Set(nil)
}

// UnsetCurrencyKey ensures that no value is present for CurrencyKey, not even an explicit nil
func (o *ApplianceSettings) UnsetCurrencyKey() {
	o.CurrencyKey.Unset()
}

// GetEnabledZoneTypes returns the EnabledZoneTypes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApplianceSettings) GetEnabledZoneTypes() []InlineResponse20040AppDeployInstance {
	if o == nil  {
		var ret []InlineResponse20040AppDeployInstance
		return ret
	}
	return o.EnabledZoneTypes
}

// GetEnabledZoneTypesOk returns a tuple with the EnabledZoneTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApplianceSettings) GetEnabledZoneTypesOk() (*[]InlineResponse20040AppDeployInstance, bool) {
	if o == nil || o.EnabledZoneTypes == nil {
		return nil, false
	}
	return &o.EnabledZoneTypes, true
}

// HasEnabledZoneTypes returns a boolean if a field has been set.
func (o *ApplianceSettings) HasEnabledZoneTypes() bool {
	if o != nil && o.EnabledZoneTypes != nil {
		return true
	}

	return false
}

// SetEnabledZoneTypes gets a reference to the given []InlineResponse20040AppDeployInstance and assigns it to the EnabledZoneTypes field.
func (o *ApplianceSettings) SetEnabledZoneTypes(v []InlineResponse20040AppDeployInstance) {
	o.EnabledZoneTypes = v
}

// GetStatsRetainmentPeriod returns the StatsRetainmentPeriod field value if set, zero value otherwise.
func (o *ApplianceSettings) GetStatsRetainmentPeriod() int64 {
	if o == nil || o.StatsRetainmentPeriod == nil {
		var ret int64
		return ret
	}
	return *o.StatsRetainmentPeriod
}

// GetStatsRetainmentPeriodOk returns a tuple with the StatsRetainmentPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceSettings) GetStatsRetainmentPeriodOk() (*int64, bool) {
	if o == nil || o.StatsRetainmentPeriod == nil {
		return nil, false
	}
	return o.StatsRetainmentPeriod, true
}

// HasStatsRetainmentPeriod returns a boolean if a field has been set.
func (o *ApplianceSettings) HasStatsRetainmentPeriod() bool {
	if o != nil && o.StatsRetainmentPeriod != nil {
		return true
	}

	return false
}

// SetStatsRetainmentPeriod gets a reference to the given int64 and assigns it to the StatsRetainmentPeriod field.
func (o *ApplianceSettings) SetStatsRetainmentPeriod(v int64) {
	o.StatsRetainmentPeriod = &v
}

func (o ApplianceSettings) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ApplianceUrl != nil {
		toSerialize["applianceUrl"] = o.ApplianceUrl
	}
	if o.InternalApplianceUrl != nil {
		toSerialize["internalApplianceUrl"] = o.InternalApplianceUrl
	}
	if o.CorsAllowed != nil {
		toSerialize["corsAllowed"] = o.CorsAllowed
	}
	if o.RegistrationEnabled != nil {
		toSerialize["registrationEnabled"] = o.RegistrationEnabled
	}
	if o.DefaultRoleId != nil {
		toSerialize["defaultRoleId"] = o.DefaultRoleId
	}
	if o.DefaultUserRoleId.IsSet() {
		toSerialize["defaultUserRoleId"] = o.DefaultUserRoleId.Get()
	}
	if o.DockerPrivilegedMode != nil {
		toSerialize["dockerPrivilegedMode"] = o.DockerPrivilegedMode
	}
	if o.ExpirePwdDays.IsSet() {
		toSerialize["expirePwdDays"] = o.ExpirePwdDays.Get()
	}
	if o.DisableAfterAttempts.IsSet() {
		toSerialize["disableAfterAttempts"] = o.DisableAfterAttempts.Get()
	}
	if o.DisableAfterDaysInactive.IsSet() {
		toSerialize["disableAfterDaysInactive"] = o.DisableAfterDaysInactive.Get()
	}
	if o.WarnUserDaysBefore.IsSet() {
		toSerialize["warnUserDaysBefore"] = o.WarnUserDaysBefore.Get()
	}
	if o.SmtpMailFrom.IsSet() {
		toSerialize["smtpMailFrom"] = o.SmtpMailFrom.Get()
	}
	if o.SmtpServer.IsSet() {
		toSerialize["smtpServer"] = o.SmtpServer.Get()
	}
	if o.SmtpPort.IsSet() {
		toSerialize["smtpPort"] = o.SmtpPort.Get()
	}
	if o.SmtpSSL != nil {
		toSerialize["smtpSSL"] = o.SmtpSSL
	}
	if o.SmtpTLS != nil {
		toSerialize["smtpTLS"] = o.SmtpTLS
	}
	if o.SmtpUser.IsSet() {
		toSerialize["smtpUser"] = o.SmtpUser.Get()
	}
	if o.SmtpPassword.IsSet() {
		toSerialize["smtpPassword"] = o.SmtpPassword.Get()
	}
	if o.SmtpPasswordHash.IsSet() {
		toSerialize["smtpPasswordHash"] = o.SmtpPasswordHash.Get()
	}
	if o.ProxyHost.IsSet() {
		toSerialize["proxyHost"] = o.ProxyHost.Get()
	}
	if o.ProxyPort.IsSet() {
		toSerialize["proxyPort"] = o.ProxyPort.Get()
	}
	if o.ProxyUser.IsSet() {
		toSerialize["proxyUser"] = o.ProxyUser.Get()
	}
	if o.ProxyPassword.IsSet() {
		toSerialize["proxyPassword"] = o.ProxyPassword.Get()
	}
	if o.ProxyPasswordHash.IsSet() {
		toSerialize["proxyPasswordHash"] = o.ProxyPasswordHash.Get()
	}
	if o.ProxyDomain.IsSet() {
		toSerialize["proxyDomain"] = o.ProxyDomain.Get()
	}
	if o.ProxyWorkstation.IsSet() {
		toSerialize["proxyWorkstation"] = o.ProxyWorkstation.Get()
	}
	if o.CurrencyProvider.IsSet() {
		toSerialize["currencyProvider"] = o.CurrencyProvider.Get()
	}
	if o.CurrencyKey.IsSet() {
		toSerialize["currencyKey"] = o.CurrencyKey.Get()
	}
	if o.EnabledZoneTypes != nil {
		toSerialize["enabledZoneTypes"] = o.EnabledZoneTypes
	}
	if o.StatsRetainmentPeriod != nil {
		toSerialize["statsRetainmentPeriod"] = o.StatsRetainmentPeriod
	}
	return json.Marshal(toSerialize)
}

type NullableApplianceSettings struct {
	value *ApplianceSettings
	isSet bool
}

func (v NullableApplianceSettings) Get() *ApplianceSettings {
	return v.value
}

func (v *NullableApplianceSettings) Set(val *ApplianceSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableApplianceSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableApplianceSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplianceSettings(val *ApplianceSettings) *NullableApplianceSettings {
	return &NullableApplianceSettings{value: val, isSet: true}
}

func (v NullableApplianceSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplianceSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


