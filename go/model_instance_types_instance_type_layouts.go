/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InstanceTypesInstanceTypeLayouts struct for InstanceTypesInstanceTypeLayouts
type InstanceTypesInstanceTypeLayouts struct {
	Id *int64 `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	ProvisionTypeCode NullableString `json:"provisionTypeCode,omitempty"`
}

// NewInstanceTypesInstanceTypeLayouts instantiates a new InstanceTypesInstanceTypeLayouts object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstanceTypesInstanceTypeLayouts() *InstanceTypesInstanceTypeLayouts {
	this := InstanceTypesInstanceTypeLayouts{}
	return &this
}

// NewInstanceTypesInstanceTypeLayoutsWithDefaults instantiates a new InstanceTypesInstanceTypeLayouts object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstanceTypesInstanceTypeLayoutsWithDefaults() *InstanceTypesInstanceTypeLayouts {
	this := InstanceTypesInstanceTypeLayouts{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *InstanceTypesInstanceTypeLayouts) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceTypesInstanceTypeLayouts) GetIdOk() (*int64, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *InstanceTypesInstanceTypeLayouts) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *InstanceTypesInstanceTypeLayouts) SetId(v int64) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *InstanceTypesInstanceTypeLayouts) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceTypesInstanceTypeLayouts) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *InstanceTypesInstanceTypeLayouts) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *InstanceTypesInstanceTypeLayouts) SetName(v string) {
	o.Name = &v
}

// GetProvisionTypeCode returns the ProvisionTypeCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InstanceTypesInstanceTypeLayouts) GetProvisionTypeCode() string {
	if o == nil || o.ProvisionTypeCode.Get() == nil {
		var ret string
		return ret
	}
	return *o.ProvisionTypeCode.Get()
}

// GetProvisionTypeCodeOk returns a tuple with the ProvisionTypeCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InstanceTypesInstanceTypeLayouts) GetProvisionTypeCodeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ProvisionTypeCode.Get(), o.ProvisionTypeCode.IsSet()
}

// HasProvisionTypeCode returns a boolean if a field has been set.
func (o *InstanceTypesInstanceTypeLayouts) HasProvisionTypeCode() bool {
	if o != nil && o.ProvisionTypeCode.IsSet() {
		return true
	}

	return false
}

// SetProvisionTypeCode gets a reference to the given NullableString and assigns it to the ProvisionTypeCode field.
func (o *InstanceTypesInstanceTypeLayouts) SetProvisionTypeCode(v string) {
	o.ProvisionTypeCode.Set(&v)
}
// SetProvisionTypeCodeNil sets the value for ProvisionTypeCode to be an explicit nil
func (o *InstanceTypesInstanceTypeLayouts) SetProvisionTypeCodeNil() {
	o.ProvisionTypeCode.Set(nil)
}

// UnsetProvisionTypeCode ensures that no value is present for ProvisionTypeCode, not even an explicit nil
func (o *InstanceTypesInstanceTypeLayouts) UnsetProvisionTypeCode() {
	o.ProvisionTypeCode.Unset()
}

func (o InstanceTypesInstanceTypeLayouts) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.ProvisionTypeCode.IsSet() {
		toSerialize["provisionTypeCode"] = o.ProvisionTypeCode.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableInstanceTypesInstanceTypeLayouts struct {
	value *InstanceTypesInstanceTypeLayouts
	isSet bool
}

func (v NullableInstanceTypesInstanceTypeLayouts) Get() *InstanceTypesInstanceTypeLayouts {
	return v.value
}

func (v *NullableInstanceTypesInstanceTypeLayouts) Set(val *InstanceTypesInstanceTypeLayouts) {
	v.value = val
	v.isSet = true
}

func (v NullableInstanceTypesInstanceTypeLayouts) IsSet() bool {
	return v.isSet
}

func (v *NullableInstanceTypesInstanceTypeLayouts) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstanceTypesInstanceTypeLayouts(val *InstanceTypesInstanceTypeLayouts) *NullableInstanceTypesInstanceTypeLayouts {
	return &NullableInstanceTypesInstanceTypeLayouts{value: val, isSet: true}
}

func (v NullableInstanceTypesInstanceTypeLayouts) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstanceTypesInstanceTypeLayouts) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


