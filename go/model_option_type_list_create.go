/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// OptionTypeListCreate struct for OptionTypeListCreate
type OptionTypeListCreate struct {
	// Name
	Name string `json:"name"`
	// Description
	Description NullableString `json:"description,omitempty"`
	// Array of label strings, can be used for filtering.
	Labels []string `json:"labels,omitempty"`
	// Option List Type eg. `rest`, `api`, `ldap` or `manual`.
	Type *string `json:"type,omitempty"`
	// Source URL, the http(s) URL to request data from. Required when type is rest.
	SourceUrl *string `json:"sourceUrl,omitempty"`
	// Visibility
	Visibility *string `json:"visibility,omitempty"`
	// Source Method, the HTTP method.
	SourceMethod *string `json:"sourceMethod,omitempty"`
	// Api Type, The code of the api option list to use, eg. clouds, environments, groups, instances, instance-wiki, networks, servicePlans, resourcePools, securityGroups, servers, server-wiki. Required when type is api.
	ApiType NullableString `json:"apiType,omitempty"`
	// Ignore SSL Errors.
	IgnoreSSLErrors *bool `json:"ignoreSSLErrors,omitempty"`
	// Real Time.
	RealTime *bool `json:"realTime,omitempty"`
	Credential *OptionTypeListCreateCredential `json:"credential,omitempty"`
	// Username for authenticating with Basic Auth when type is rest or ldap username.
	ServiceUsername NullableString `json:"serviceUsername,omitempty"`
	// Password for authenticating with Basic Auth when type is rest or ldap password.
	ServicePassword NullableString `json:"servicePassword,omitempty"`
	// Initial Dataset. Create an initial JSON or CSV dataset to be used as the collection for this option list. It should be a list containing objects with properties 'name', and 'value'. Required when type is manual.
	InitialDataset NullableString `json:"initialDataset,omitempty"`
	// Translation Script. Create a js script to translate the result data object into an Array containing objects with properties 'name' and 'value'. The input data is provided as data and the result should be put on the global variable results.
	TranslationScript NullableString `json:"translationScript,omitempty"`
	// Request Script. Create a js script to prepare the request. Return a data object as the body for a post, and return an array containing properties 'name' and 'value' for a get. The input data is provided as data and the result should be put on the global variable results.
	RequestScript NullableString `json:"requestScript,omitempty"`
	Config *OptionTypeListCreateConfig `json:"config,omitempty"`
}

// NewOptionTypeListCreate instantiates a new OptionTypeListCreate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOptionTypeListCreate(name string, ) *OptionTypeListCreate {
	this := OptionTypeListCreate{}
	this.Name = name
	var type_ string = "rest"
	this.Type = &type_
	var visibility string = "private"
	this.Visibility = &visibility
	var sourceMethod string = "GET"
	this.SourceMethod = &sourceMethod
	var ignoreSSLErrors bool = false
	this.IgnoreSSLErrors = &ignoreSSLErrors
	var realTime bool = false
	this.RealTime = &realTime
	return &this
}

// NewOptionTypeListCreateWithDefaults instantiates a new OptionTypeListCreate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOptionTypeListCreateWithDefaults() *OptionTypeListCreate {
	this := OptionTypeListCreate{}
	var type_ string = "rest"
	this.Type = &type_
	var visibility string = "private"
	this.Visibility = &visibility
	var sourceMethod string = "GET"
	this.SourceMethod = &sourceMethod
	var ignoreSSLErrors bool = false
	this.IgnoreSSLErrors = &ignoreSSLErrors
	var realTime bool = false
	this.RealTime = &realTime
	return &this
}

// GetName returns the Name field value
func (o *OptionTypeListCreate) GetName() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *OptionTypeListCreate) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *OptionTypeListCreate) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OptionTypeListCreate) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OptionTypeListCreate) GetDescriptionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *OptionTypeListCreate) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *OptionTypeListCreate) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *OptionTypeListCreate) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *OptionTypeListCreate) UnsetDescription() {
	o.Description.Unset()
}

// GetLabels returns the Labels field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OptionTypeListCreate) GetLabels() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OptionTypeListCreate) GetLabelsOk() (*[]string, bool) {
	if o == nil || o.Labels == nil {
		return nil, false
	}
	return &o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *OptionTypeListCreate) HasLabels() bool {
	if o != nil && o.Labels != nil {
		return true
	}

	return false
}

// SetLabels gets a reference to the given []string and assigns it to the Labels field.
func (o *OptionTypeListCreate) SetLabels(v []string) {
	o.Labels = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *OptionTypeListCreate) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionTypeListCreate) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *OptionTypeListCreate) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *OptionTypeListCreate) SetType(v string) {
	o.Type = &v
}

// GetSourceUrl returns the SourceUrl field value if set, zero value otherwise.
func (o *OptionTypeListCreate) GetSourceUrl() string {
	if o == nil || o.SourceUrl == nil {
		var ret string
		return ret
	}
	return *o.SourceUrl
}

// GetSourceUrlOk returns a tuple with the SourceUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionTypeListCreate) GetSourceUrlOk() (*string, bool) {
	if o == nil || o.SourceUrl == nil {
		return nil, false
	}
	return o.SourceUrl, true
}

// HasSourceUrl returns a boolean if a field has been set.
func (o *OptionTypeListCreate) HasSourceUrl() bool {
	if o != nil && o.SourceUrl != nil {
		return true
	}

	return false
}

// SetSourceUrl gets a reference to the given string and assigns it to the SourceUrl field.
func (o *OptionTypeListCreate) SetSourceUrl(v string) {
	o.SourceUrl = &v
}

// GetVisibility returns the Visibility field value if set, zero value otherwise.
func (o *OptionTypeListCreate) GetVisibility() string {
	if o == nil || o.Visibility == nil {
		var ret string
		return ret
	}
	return *o.Visibility
}

// GetVisibilityOk returns a tuple with the Visibility field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionTypeListCreate) GetVisibilityOk() (*string, bool) {
	if o == nil || o.Visibility == nil {
		return nil, false
	}
	return o.Visibility, true
}

// HasVisibility returns a boolean if a field has been set.
func (o *OptionTypeListCreate) HasVisibility() bool {
	if o != nil && o.Visibility != nil {
		return true
	}

	return false
}

// SetVisibility gets a reference to the given string and assigns it to the Visibility field.
func (o *OptionTypeListCreate) SetVisibility(v string) {
	o.Visibility = &v
}

// GetSourceMethod returns the SourceMethod field value if set, zero value otherwise.
func (o *OptionTypeListCreate) GetSourceMethod() string {
	if o == nil || o.SourceMethod == nil {
		var ret string
		return ret
	}
	return *o.SourceMethod
}

// GetSourceMethodOk returns a tuple with the SourceMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionTypeListCreate) GetSourceMethodOk() (*string, bool) {
	if o == nil || o.SourceMethod == nil {
		return nil, false
	}
	return o.SourceMethod, true
}

// HasSourceMethod returns a boolean if a field has been set.
func (o *OptionTypeListCreate) HasSourceMethod() bool {
	if o != nil && o.SourceMethod != nil {
		return true
	}

	return false
}

// SetSourceMethod gets a reference to the given string and assigns it to the SourceMethod field.
func (o *OptionTypeListCreate) SetSourceMethod(v string) {
	o.SourceMethod = &v
}

// GetApiType returns the ApiType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OptionTypeListCreate) GetApiType() string {
	if o == nil || o.ApiType.Get() == nil {
		var ret string
		return ret
	}
	return *o.ApiType.Get()
}

// GetApiTypeOk returns a tuple with the ApiType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OptionTypeListCreate) GetApiTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ApiType.Get(), o.ApiType.IsSet()
}

// HasApiType returns a boolean if a field has been set.
func (o *OptionTypeListCreate) HasApiType() bool {
	if o != nil && o.ApiType.IsSet() {
		return true
	}

	return false
}

// SetApiType gets a reference to the given NullableString and assigns it to the ApiType field.
func (o *OptionTypeListCreate) SetApiType(v string) {
	o.ApiType.Set(&v)
}
// SetApiTypeNil sets the value for ApiType to be an explicit nil
func (o *OptionTypeListCreate) SetApiTypeNil() {
	o.ApiType.Set(nil)
}

// UnsetApiType ensures that no value is present for ApiType, not even an explicit nil
func (o *OptionTypeListCreate) UnsetApiType() {
	o.ApiType.Unset()
}

// GetIgnoreSSLErrors returns the IgnoreSSLErrors field value if set, zero value otherwise.
func (o *OptionTypeListCreate) GetIgnoreSSLErrors() bool {
	if o == nil || o.IgnoreSSLErrors == nil {
		var ret bool
		return ret
	}
	return *o.IgnoreSSLErrors
}

// GetIgnoreSSLErrorsOk returns a tuple with the IgnoreSSLErrors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionTypeListCreate) GetIgnoreSSLErrorsOk() (*bool, bool) {
	if o == nil || o.IgnoreSSLErrors == nil {
		return nil, false
	}
	return o.IgnoreSSLErrors, true
}

// HasIgnoreSSLErrors returns a boolean if a field has been set.
func (o *OptionTypeListCreate) HasIgnoreSSLErrors() bool {
	if o != nil && o.IgnoreSSLErrors != nil {
		return true
	}

	return false
}

// SetIgnoreSSLErrors gets a reference to the given bool and assigns it to the IgnoreSSLErrors field.
func (o *OptionTypeListCreate) SetIgnoreSSLErrors(v bool) {
	o.IgnoreSSLErrors = &v
}

// GetRealTime returns the RealTime field value if set, zero value otherwise.
func (o *OptionTypeListCreate) GetRealTime() bool {
	if o == nil || o.RealTime == nil {
		var ret bool
		return ret
	}
	return *o.RealTime
}

// GetRealTimeOk returns a tuple with the RealTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionTypeListCreate) GetRealTimeOk() (*bool, bool) {
	if o == nil || o.RealTime == nil {
		return nil, false
	}
	return o.RealTime, true
}

// HasRealTime returns a boolean if a field has been set.
func (o *OptionTypeListCreate) HasRealTime() bool {
	if o != nil && o.RealTime != nil {
		return true
	}

	return false
}

// SetRealTime gets a reference to the given bool and assigns it to the RealTime field.
func (o *OptionTypeListCreate) SetRealTime(v bool) {
	o.RealTime = &v
}

// GetCredential returns the Credential field value if set, zero value otherwise.
func (o *OptionTypeListCreate) GetCredential() OptionTypeListCreateCredential {
	if o == nil || o.Credential == nil {
		var ret OptionTypeListCreateCredential
		return ret
	}
	return *o.Credential
}

// GetCredentialOk returns a tuple with the Credential field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionTypeListCreate) GetCredentialOk() (*OptionTypeListCreateCredential, bool) {
	if o == nil || o.Credential == nil {
		return nil, false
	}
	return o.Credential, true
}

// HasCredential returns a boolean if a field has been set.
func (o *OptionTypeListCreate) HasCredential() bool {
	if o != nil && o.Credential != nil {
		return true
	}

	return false
}

// SetCredential gets a reference to the given OptionTypeListCreateCredential and assigns it to the Credential field.
func (o *OptionTypeListCreate) SetCredential(v OptionTypeListCreateCredential) {
	o.Credential = &v
}

// GetServiceUsername returns the ServiceUsername field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OptionTypeListCreate) GetServiceUsername() string {
	if o == nil || o.ServiceUsername.Get() == nil {
		var ret string
		return ret
	}
	return *o.ServiceUsername.Get()
}

// GetServiceUsernameOk returns a tuple with the ServiceUsername field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OptionTypeListCreate) GetServiceUsernameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ServiceUsername.Get(), o.ServiceUsername.IsSet()
}

// HasServiceUsername returns a boolean if a field has been set.
func (o *OptionTypeListCreate) HasServiceUsername() bool {
	if o != nil && o.ServiceUsername.IsSet() {
		return true
	}

	return false
}

// SetServiceUsername gets a reference to the given NullableString and assigns it to the ServiceUsername field.
func (o *OptionTypeListCreate) SetServiceUsername(v string) {
	o.ServiceUsername.Set(&v)
}
// SetServiceUsernameNil sets the value for ServiceUsername to be an explicit nil
func (o *OptionTypeListCreate) SetServiceUsernameNil() {
	o.ServiceUsername.Set(nil)
}

// UnsetServiceUsername ensures that no value is present for ServiceUsername, not even an explicit nil
func (o *OptionTypeListCreate) UnsetServiceUsername() {
	o.ServiceUsername.Unset()
}

// GetServicePassword returns the ServicePassword field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OptionTypeListCreate) GetServicePassword() string {
	if o == nil || o.ServicePassword.Get() == nil {
		var ret string
		return ret
	}
	return *o.ServicePassword.Get()
}

// GetServicePasswordOk returns a tuple with the ServicePassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OptionTypeListCreate) GetServicePasswordOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ServicePassword.Get(), o.ServicePassword.IsSet()
}

// HasServicePassword returns a boolean if a field has been set.
func (o *OptionTypeListCreate) HasServicePassword() bool {
	if o != nil && o.ServicePassword.IsSet() {
		return true
	}

	return false
}

// SetServicePassword gets a reference to the given NullableString and assigns it to the ServicePassword field.
func (o *OptionTypeListCreate) SetServicePassword(v string) {
	o.ServicePassword.Set(&v)
}
// SetServicePasswordNil sets the value for ServicePassword to be an explicit nil
func (o *OptionTypeListCreate) SetServicePasswordNil() {
	o.ServicePassword.Set(nil)
}

// UnsetServicePassword ensures that no value is present for ServicePassword, not even an explicit nil
func (o *OptionTypeListCreate) UnsetServicePassword() {
	o.ServicePassword.Unset()
}

// GetInitialDataset returns the InitialDataset field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OptionTypeListCreate) GetInitialDataset() string {
	if o == nil || o.InitialDataset.Get() == nil {
		var ret string
		return ret
	}
	return *o.InitialDataset.Get()
}

// GetInitialDatasetOk returns a tuple with the InitialDataset field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OptionTypeListCreate) GetInitialDatasetOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.InitialDataset.Get(), o.InitialDataset.IsSet()
}

// HasInitialDataset returns a boolean if a field has been set.
func (o *OptionTypeListCreate) HasInitialDataset() bool {
	if o != nil && o.InitialDataset.IsSet() {
		return true
	}

	return false
}

// SetInitialDataset gets a reference to the given NullableString and assigns it to the InitialDataset field.
func (o *OptionTypeListCreate) SetInitialDataset(v string) {
	o.InitialDataset.Set(&v)
}
// SetInitialDatasetNil sets the value for InitialDataset to be an explicit nil
func (o *OptionTypeListCreate) SetInitialDatasetNil() {
	o.InitialDataset.Set(nil)
}

// UnsetInitialDataset ensures that no value is present for InitialDataset, not even an explicit nil
func (o *OptionTypeListCreate) UnsetInitialDataset() {
	o.InitialDataset.Unset()
}

// GetTranslationScript returns the TranslationScript field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OptionTypeListCreate) GetTranslationScript() string {
	if o == nil || o.TranslationScript.Get() == nil {
		var ret string
		return ret
	}
	return *o.TranslationScript.Get()
}

// GetTranslationScriptOk returns a tuple with the TranslationScript field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OptionTypeListCreate) GetTranslationScriptOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TranslationScript.Get(), o.TranslationScript.IsSet()
}

// HasTranslationScript returns a boolean if a field has been set.
func (o *OptionTypeListCreate) HasTranslationScript() bool {
	if o != nil && o.TranslationScript.IsSet() {
		return true
	}

	return false
}

// SetTranslationScript gets a reference to the given NullableString and assigns it to the TranslationScript field.
func (o *OptionTypeListCreate) SetTranslationScript(v string) {
	o.TranslationScript.Set(&v)
}
// SetTranslationScriptNil sets the value for TranslationScript to be an explicit nil
func (o *OptionTypeListCreate) SetTranslationScriptNil() {
	o.TranslationScript.Set(nil)
}

// UnsetTranslationScript ensures that no value is present for TranslationScript, not even an explicit nil
func (o *OptionTypeListCreate) UnsetTranslationScript() {
	o.TranslationScript.Unset()
}

// GetRequestScript returns the RequestScript field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OptionTypeListCreate) GetRequestScript() string {
	if o == nil || o.RequestScript.Get() == nil {
		var ret string
		return ret
	}
	return *o.RequestScript.Get()
}

// GetRequestScriptOk returns a tuple with the RequestScript field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OptionTypeListCreate) GetRequestScriptOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RequestScript.Get(), o.RequestScript.IsSet()
}

// HasRequestScript returns a boolean if a field has been set.
func (o *OptionTypeListCreate) HasRequestScript() bool {
	if o != nil && o.RequestScript.IsSet() {
		return true
	}

	return false
}

// SetRequestScript gets a reference to the given NullableString and assigns it to the RequestScript field.
func (o *OptionTypeListCreate) SetRequestScript(v string) {
	o.RequestScript.Set(&v)
}
// SetRequestScriptNil sets the value for RequestScript to be an explicit nil
func (o *OptionTypeListCreate) SetRequestScriptNil() {
	o.RequestScript.Set(nil)
}

// UnsetRequestScript ensures that no value is present for RequestScript, not even an explicit nil
func (o *OptionTypeListCreate) UnsetRequestScript() {
	o.RequestScript.Unset()
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *OptionTypeListCreate) GetConfig() OptionTypeListCreateConfig {
	if o == nil || o.Config == nil {
		var ret OptionTypeListCreateConfig
		return ret
	}
	return *o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionTypeListCreate) GetConfigOk() (*OptionTypeListCreateConfig, bool) {
	if o == nil || o.Config == nil {
		return nil, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *OptionTypeListCreate) HasConfig() bool {
	if o != nil && o.Config != nil {
		return true
	}

	return false
}

// SetConfig gets a reference to the given OptionTypeListCreateConfig and assigns it to the Config field.
func (o *OptionTypeListCreate) SetConfig(v OptionTypeListCreateConfig) {
	o.Config = &v
}

func (o OptionTypeListCreate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.Labels != nil {
		toSerialize["labels"] = o.Labels
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.SourceUrl != nil {
		toSerialize["sourceUrl"] = o.SourceUrl
	}
	if o.Visibility != nil {
		toSerialize["visibility"] = o.Visibility
	}
	if o.SourceMethod != nil {
		toSerialize["sourceMethod"] = o.SourceMethod
	}
	if o.ApiType.IsSet() {
		toSerialize["apiType"] = o.ApiType.Get()
	}
	if o.IgnoreSSLErrors != nil {
		toSerialize["ignoreSSLErrors"] = o.IgnoreSSLErrors
	}
	if o.RealTime != nil {
		toSerialize["realTime"] = o.RealTime
	}
	if o.Credential != nil {
		toSerialize["credential"] = o.Credential
	}
	if o.ServiceUsername.IsSet() {
		toSerialize["serviceUsername"] = o.ServiceUsername.Get()
	}
	if o.ServicePassword.IsSet() {
		toSerialize["servicePassword"] = o.ServicePassword.Get()
	}
	if o.InitialDataset.IsSet() {
		toSerialize["initialDataset"] = o.InitialDataset.Get()
	}
	if o.TranslationScript.IsSet() {
		toSerialize["translationScript"] = o.TranslationScript.Get()
	}
	if o.RequestScript.IsSet() {
		toSerialize["requestScript"] = o.RequestScript.Get()
	}
	if o.Config != nil {
		toSerialize["config"] = o.Config
	}
	return json.Marshal(toSerialize)
}

type NullableOptionTypeListCreate struct {
	value *OptionTypeListCreate
	isSet bool
}

func (v NullableOptionTypeListCreate) Get() *OptionTypeListCreate {
	return v.value
}

func (v *NullableOptionTypeListCreate) Set(val *OptionTypeListCreate) {
	v.value = val
	v.isSet = true
}

func (v NullableOptionTypeListCreate) IsSet() bool {
	return v.isSet
}

func (v *NullableOptionTypeListCreate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOptionTypeListCreate(val *OptionTypeListCreate) *NullableOptionTypeListCreate {
	return &NullableOptionTypeListCreate{value: val, isSet: true}
}

func (v NullableOptionTypeListCreate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOptionTypeListCreate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


