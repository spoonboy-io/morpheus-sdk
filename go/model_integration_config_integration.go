/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// IntegrationConfigIntegration struct for IntegrationConfigIntegration
type IntegrationConfigIntegration struct {
	// Name, a unique identifier for the integration
	Name string `json:"name"`
	// Integration Type Code
	Type string `json:"type"`
	// Set `true` to enable integration
	Enabled *bool `json:"enabled,omitempty"`
	// Pass `false` to skip refresh.  By default, refresh is done on update, when it is supported by the integration type. 
	Refresh *bool `json:"refresh,omitempty"`
	// Map containing Credential ID or the default {\"type\": \"local\"}  which means use the values set in the local task options username and password instead of associating a credential. 
	Credential *OneOfobjectobject `json:"credential,omitempty"`
}

// NewIntegrationConfigIntegration instantiates a new IntegrationConfigIntegration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIntegrationConfigIntegration(name string, type_ string, ) *IntegrationConfigIntegration {
	this := IntegrationConfigIntegration{}
	this.Name = name
	this.Type = type_
	var refresh bool = true
	this.Refresh = &refresh
	return &this
}

// NewIntegrationConfigIntegrationWithDefaults instantiates a new IntegrationConfigIntegration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIntegrationConfigIntegrationWithDefaults() *IntegrationConfigIntegration {
	this := IntegrationConfigIntegration{}
	var refresh bool = true
	this.Refresh = &refresh
	return &this
}

// GetName returns the Name field value
func (o *IntegrationConfigIntegration) GetName() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *IntegrationConfigIntegration) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *IntegrationConfigIntegration) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value
func (o *IntegrationConfigIntegration) GetType() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *IntegrationConfigIntegration) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *IntegrationConfigIntegration) SetType(v string) {
	o.Type = v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *IntegrationConfigIntegration) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationConfigIntegration) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *IntegrationConfigIntegration) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *IntegrationConfigIntegration) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetRefresh returns the Refresh field value if set, zero value otherwise.
func (o *IntegrationConfigIntegration) GetRefresh() bool {
	if o == nil || o.Refresh == nil {
		var ret bool
		return ret
	}
	return *o.Refresh
}

// GetRefreshOk returns a tuple with the Refresh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationConfigIntegration) GetRefreshOk() (*bool, bool) {
	if o == nil || o.Refresh == nil {
		return nil, false
	}
	return o.Refresh, true
}

// HasRefresh returns a boolean if a field has been set.
func (o *IntegrationConfigIntegration) HasRefresh() bool {
	if o != nil && o.Refresh != nil {
		return true
	}

	return false
}

// SetRefresh gets a reference to the given bool and assigns it to the Refresh field.
func (o *IntegrationConfigIntegration) SetRefresh(v bool) {
	o.Refresh = &v
}

// GetCredential returns the Credential field value if set, zero value otherwise.
func (o *IntegrationConfigIntegration) GetCredential() OneOfobjectobject {
	if o == nil || o.Credential == nil {
		var ret OneOfobjectobject
		return ret
	}
	return *o.Credential
}

// GetCredentialOk returns a tuple with the Credential field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationConfigIntegration) GetCredentialOk() (*OneOfobjectobject, bool) {
	if o == nil || o.Credential == nil {
		return nil, false
	}
	return o.Credential, true
}

// HasCredential returns a boolean if a field has been set.
func (o *IntegrationConfigIntegration) HasCredential() bool {
	if o != nil && o.Credential != nil {
		return true
	}

	return false
}

// SetCredential gets a reference to the given OneOfobjectobject and assigns it to the Credential field.
func (o *IntegrationConfigIntegration) SetCredential(v OneOfobjectobject) {
	o.Credential = &v
}

func (o IntegrationConfigIntegration) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["type"] = o.Type
	}
	if o.Enabled != nil {
		toSerialize["enabled"] = o.Enabled
	}
	if o.Refresh != nil {
		toSerialize["refresh"] = o.Refresh
	}
	if o.Credential != nil {
		toSerialize["credential"] = o.Credential
	}
	return json.Marshal(toSerialize)
}

type NullableIntegrationConfigIntegration struct {
	value *IntegrationConfigIntegration
	isSet bool
}

func (v NullableIntegrationConfigIntegration) Get() *IntegrationConfigIntegration {
	return v.value
}

func (v *NullableIntegrationConfigIntegration) Set(val *IntegrationConfigIntegration) {
	v.value = val
	v.isSet = true
}

func (v NullableIntegrationConfigIntegration) IsSet() bool {
	return v.isSet
}

func (v *NullableIntegrationConfigIntegration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntegrationConfigIntegration(val *IntegrationConfigIntegration) *NullableIntegrationConfigIntegration {
	return &NullableIntegrationConfigIntegration{value: val, isSet: true}
}

func (v NullableIntegrationConfigIntegration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntegrationConfigIntegration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


