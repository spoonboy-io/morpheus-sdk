/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// StorageServer struct for StorageServer
type StorageServer struct {
	Id *int64 `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Type *InlineResponse20079LoadBalancerMonitorLoadBalancerType `json:"type,omitempty"`
	Chassis NullableString `json:"chassis,omitempty"`
	Visibility *string `json:"visibility,omitempty"`
	Description NullableString `json:"description,omitempty"`
	InternalId NullableString `json:"internalId,omitempty"`
	ExternalId NullableString `json:"externalId,omitempty"`
	ServiceUrl NullableString `json:"serviceUrl,omitempty"`
	ServiceHost NullableString `json:"serviceHost,omitempty"`
	ServicePath NullableString `json:"servicePath,omitempty"`
	ServiceToken NullableString `json:"serviceToken,omitempty"`
	ServiceTokenHash NullableString `json:"serviceTokenHash,omitempty"`
	ServiceVersion NullableString `json:"serviceVersion,omitempty"`
	ServiceUsername NullableString `json:"serviceUsername,omitempty"`
	ServicePassword NullableString `json:"servicePassword,omitempty"`
	ServicePasswordHash NullableString `json:"servicePasswordHash,omitempty"`
	InternalIp NullableString `json:"internalIp,omitempty"`
	ExternalIp NullableString `json:"externalIp,omitempty"`
	ApiPort NullableString `json:"apiPort,omitempty"`
	AdminPort NullableString `json:"adminPort,omitempty"`
	Config *map[string]interface{} `json:"config,omitempty"`
	RefType *string `json:"refType,omitempty"`
	RefId *int64 `json:"refId,omitempty"`
	Category NullableString `json:"category,omitempty"`
	ServerVendor NullableString `json:"serverVendor,omitempty"`
	ServerModel NullableString `json:"serverModel,omitempty"`
	SerialNumber NullableString `json:"serialNumber,omitempty"`
	Status *string `json:"status,omitempty"`
	StatusMessage NullableString `json:"statusMessage,omitempty"`
	StatusDate *time.Time `json:"statusDate,omitempty"`
	ErrorMessage NullableString `json:"errorMessage,omitempty"`
	MaxStorage NullableString `json:"maxStorage,omitempty"`
	UsedStorage NullableString `json:"usedStorage,omitempty"`
	DiskCount NullableString `json:"diskCount,omitempty"`
	DateCreated *time.Time `json:"dateCreated,omitempty"`
	LastUpdated *time.Time `json:"lastUpdated,omitempty"`
	Enabled *bool `json:"enabled,omitempty"`
	Groups *[]map[string]interface{} `json:"groups,omitempty"`
	HostGroups *[]map[string]interface{} `json:"hostGroups,omitempty"`
	Hosts *[]map[string]interface{} `json:"hosts,omitempty"`
	Tenants *[]map[string]interface{} `json:"tenants,omitempty"`
	Owner *InlineResponse20040AppDeployInstance `json:"owner,omitempty"`
	Credential *map[string]interface{} `json:"credential,omitempty"`
}

// NewStorageServer instantiates a new StorageServer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStorageServer() *StorageServer {
	this := StorageServer{}
	return &this
}

// NewStorageServerWithDefaults instantiates a new StorageServer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStorageServerWithDefaults() *StorageServer {
	this := StorageServer{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *StorageServer) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageServer) GetIdOk() (*int64, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *StorageServer) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *StorageServer) SetId(v int64) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *StorageServer) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageServer) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *StorageServer) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *StorageServer) SetName(v string) {
	o.Name = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *StorageServer) GetType() InlineResponse20079LoadBalancerMonitorLoadBalancerType {
	if o == nil || o.Type == nil {
		var ret InlineResponse20079LoadBalancerMonitorLoadBalancerType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageServer) GetTypeOk() (*InlineResponse20079LoadBalancerMonitorLoadBalancerType, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *StorageServer) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given InlineResponse20079LoadBalancerMonitorLoadBalancerType and assigns it to the Type field.
func (o *StorageServer) SetType(v InlineResponse20079LoadBalancerMonitorLoadBalancerType) {
	o.Type = &v
}

// GetChassis returns the Chassis field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageServer) GetChassis() string {
	if o == nil || o.Chassis.Get() == nil {
		var ret string
		return ret
	}
	return *o.Chassis.Get()
}

// GetChassisOk returns a tuple with the Chassis field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageServer) GetChassisOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Chassis.Get(), o.Chassis.IsSet()
}

// HasChassis returns a boolean if a field has been set.
func (o *StorageServer) HasChassis() bool {
	if o != nil && o.Chassis.IsSet() {
		return true
	}

	return false
}

// SetChassis gets a reference to the given NullableString and assigns it to the Chassis field.
func (o *StorageServer) SetChassis(v string) {
	o.Chassis.Set(&v)
}
// SetChassisNil sets the value for Chassis to be an explicit nil
func (o *StorageServer) SetChassisNil() {
	o.Chassis.Set(nil)
}

// UnsetChassis ensures that no value is present for Chassis, not even an explicit nil
func (o *StorageServer) UnsetChassis() {
	o.Chassis.Unset()
}

// GetVisibility returns the Visibility field value if set, zero value otherwise.
func (o *StorageServer) GetVisibility() string {
	if o == nil || o.Visibility == nil {
		var ret string
		return ret
	}
	return *o.Visibility
}

// GetVisibilityOk returns a tuple with the Visibility field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageServer) GetVisibilityOk() (*string, bool) {
	if o == nil || o.Visibility == nil {
		return nil, false
	}
	return o.Visibility, true
}

// HasVisibility returns a boolean if a field has been set.
func (o *StorageServer) HasVisibility() bool {
	if o != nil && o.Visibility != nil {
		return true
	}

	return false
}

// SetVisibility gets a reference to the given string and assigns it to the Visibility field.
func (o *StorageServer) SetVisibility(v string) {
	o.Visibility = &v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageServer) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageServer) GetDescriptionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *StorageServer) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *StorageServer) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *StorageServer) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *StorageServer) UnsetDescription() {
	o.Description.Unset()
}

// GetInternalId returns the InternalId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageServer) GetInternalId() string {
	if o == nil || o.InternalId.Get() == nil {
		var ret string
		return ret
	}
	return *o.InternalId.Get()
}

// GetInternalIdOk returns a tuple with the InternalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageServer) GetInternalIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.InternalId.Get(), o.InternalId.IsSet()
}

// HasInternalId returns a boolean if a field has been set.
func (o *StorageServer) HasInternalId() bool {
	if o != nil && o.InternalId.IsSet() {
		return true
	}

	return false
}

// SetInternalId gets a reference to the given NullableString and assigns it to the InternalId field.
func (o *StorageServer) SetInternalId(v string) {
	o.InternalId.Set(&v)
}
// SetInternalIdNil sets the value for InternalId to be an explicit nil
func (o *StorageServer) SetInternalIdNil() {
	o.InternalId.Set(nil)
}

// UnsetInternalId ensures that no value is present for InternalId, not even an explicit nil
func (o *StorageServer) UnsetInternalId() {
	o.InternalId.Unset()
}

// GetExternalId returns the ExternalId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageServer) GetExternalId() string {
	if o == nil || o.ExternalId.Get() == nil {
		var ret string
		return ret
	}
	return *o.ExternalId.Get()
}

// GetExternalIdOk returns a tuple with the ExternalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageServer) GetExternalIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ExternalId.Get(), o.ExternalId.IsSet()
}

// HasExternalId returns a boolean if a field has been set.
func (o *StorageServer) HasExternalId() bool {
	if o != nil && o.ExternalId.IsSet() {
		return true
	}

	return false
}

// SetExternalId gets a reference to the given NullableString and assigns it to the ExternalId field.
func (o *StorageServer) SetExternalId(v string) {
	o.ExternalId.Set(&v)
}
// SetExternalIdNil sets the value for ExternalId to be an explicit nil
func (o *StorageServer) SetExternalIdNil() {
	o.ExternalId.Set(nil)
}

// UnsetExternalId ensures that no value is present for ExternalId, not even an explicit nil
func (o *StorageServer) UnsetExternalId() {
	o.ExternalId.Unset()
}

// GetServiceUrl returns the ServiceUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageServer) GetServiceUrl() string {
	if o == nil || o.ServiceUrl.Get() == nil {
		var ret string
		return ret
	}
	return *o.ServiceUrl.Get()
}

// GetServiceUrlOk returns a tuple with the ServiceUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageServer) GetServiceUrlOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ServiceUrl.Get(), o.ServiceUrl.IsSet()
}

// HasServiceUrl returns a boolean if a field has been set.
func (o *StorageServer) HasServiceUrl() bool {
	if o != nil && o.ServiceUrl.IsSet() {
		return true
	}

	return false
}

// SetServiceUrl gets a reference to the given NullableString and assigns it to the ServiceUrl field.
func (o *StorageServer) SetServiceUrl(v string) {
	o.ServiceUrl.Set(&v)
}
// SetServiceUrlNil sets the value for ServiceUrl to be an explicit nil
func (o *StorageServer) SetServiceUrlNil() {
	o.ServiceUrl.Set(nil)
}

// UnsetServiceUrl ensures that no value is present for ServiceUrl, not even an explicit nil
func (o *StorageServer) UnsetServiceUrl() {
	o.ServiceUrl.Unset()
}

// GetServiceHost returns the ServiceHost field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageServer) GetServiceHost() string {
	if o == nil || o.ServiceHost.Get() == nil {
		var ret string
		return ret
	}
	return *o.ServiceHost.Get()
}

// GetServiceHostOk returns a tuple with the ServiceHost field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageServer) GetServiceHostOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ServiceHost.Get(), o.ServiceHost.IsSet()
}

// HasServiceHost returns a boolean if a field has been set.
func (o *StorageServer) HasServiceHost() bool {
	if o != nil && o.ServiceHost.IsSet() {
		return true
	}

	return false
}

// SetServiceHost gets a reference to the given NullableString and assigns it to the ServiceHost field.
func (o *StorageServer) SetServiceHost(v string) {
	o.ServiceHost.Set(&v)
}
// SetServiceHostNil sets the value for ServiceHost to be an explicit nil
func (o *StorageServer) SetServiceHostNil() {
	o.ServiceHost.Set(nil)
}

// UnsetServiceHost ensures that no value is present for ServiceHost, not even an explicit nil
func (o *StorageServer) UnsetServiceHost() {
	o.ServiceHost.Unset()
}

// GetServicePath returns the ServicePath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageServer) GetServicePath() string {
	if o == nil || o.ServicePath.Get() == nil {
		var ret string
		return ret
	}
	return *o.ServicePath.Get()
}

// GetServicePathOk returns a tuple with the ServicePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageServer) GetServicePathOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ServicePath.Get(), o.ServicePath.IsSet()
}

// HasServicePath returns a boolean if a field has been set.
func (o *StorageServer) HasServicePath() bool {
	if o != nil && o.ServicePath.IsSet() {
		return true
	}

	return false
}

// SetServicePath gets a reference to the given NullableString and assigns it to the ServicePath field.
func (o *StorageServer) SetServicePath(v string) {
	o.ServicePath.Set(&v)
}
// SetServicePathNil sets the value for ServicePath to be an explicit nil
func (o *StorageServer) SetServicePathNil() {
	o.ServicePath.Set(nil)
}

// UnsetServicePath ensures that no value is present for ServicePath, not even an explicit nil
func (o *StorageServer) UnsetServicePath() {
	o.ServicePath.Unset()
}

// GetServiceToken returns the ServiceToken field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageServer) GetServiceToken() string {
	if o == nil || o.ServiceToken.Get() == nil {
		var ret string
		return ret
	}
	return *o.ServiceToken.Get()
}

// GetServiceTokenOk returns a tuple with the ServiceToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageServer) GetServiceTokenOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ServiceToken.Get(), o.ServiceToken.IsSet()
}

// HasServiceToken returns a boolean if a field has been set.
func (o *StorageServer) HasServiceToken() bool {
	if o != nil && o.ServiceToken.IsSet() {
		return true
	}

	return false
}

// SetServiceToken gets a reference to the given NullableString and assigns it to the ServiceToken field.
func (o *StorageServer) SetServiceToken(v string) {
	o.ServiceToken.Set(&v)
}
// SetServiceTokenNil sets the value for ServiceToken to be an explicit nil
func (o *StorageServer) SetServiceTokenNil() {
	o.ServiceToken.Set(nil)
}

// UnsetServiceToken ensures that no value is present for ServiceToken, not even an explicit nil
func (o *StorageServer) UnsetServiceToken() {
	o.ServiceToken.Unset()
}

// GetServiceTokenHash returns the ServiceTokenHash field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageServer) GetServiceTokenHash() string {
	if o == nil || o.ServiceTokenHash.Get() == nil {
		var ret string
		return ret
	}
	return *o.ServiceTokenHash.Get()
}

// GetServiceTokenHashOk returns a tuple with the ServiceTokenHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageServer) GetServiceTokenHashOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ServiceTokenHash.Get(), o.ServiceTokenHash.IsSet()
}

// HasServiceTokenHash returns a boolean if a field has been set.
func (o *StorageServer) HasServiceTokenHash() bool {
	if o != nil && o.ServiceTokenHash.IsSet() {
		return true
	}

	return false
}

// SetServiceTokenHash gets a reference to the given NullableString and assigns it to the ServiceTokenHash field.
func (o *StorageServer) SetServiceTokenHash(v string) {
	o.ServiceTokenHash.Set(&v)
}
// SetServiceTokenHashNil sets the value for ServiceTokenHash to be an explicit nil
func (o *StorageServer) SetServiceTokenHashNil() {
	o.ServiceTokenHash.Set(nil)
}

// UnsetServiceTokenHash ensures that no value is present for ServiceTokenHash, not even an explicit nil
func (o *StorageServer) UnsetServiceTokenHash() {
	o.ServiceTokenHash.Unset()
}

// GetServiceVersion returns the ServiceVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageServer) GetServiceVersion() string {
	if o == nil || o.ServiceVersion.Get() == nil {
		var ret string
		return ret
	}
	return *o.ServiceVersion.Get()
}

// GetServiceVersionOk returns a tuple with the ServiceVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageServer) GetServiceVersionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ServiceVersion.Get(), o.ServiceVersion.IsSet()
}

// HasServiceVersion returns a boolean if a field has been set.
func (o *StorageServer) HasServiceVersion() bool {
	if o != nil && o.ServiceVersion.IsSet() {
		return true
	}

	return false
}

// SetServiceVersion gets a reference to the given NullableString and assigns it to the ServiceVersion field.
func (o *StorageServer) SetServiceVersion(v string) {
	o.ServiceVersion.Set(&v)
}
// SetServiceVersionNil sets the value for ServiceVersion to be an explicit nil
func (o *StorageServer) SetServiceVersionNil() {
	o.ServiceVersion.Set(nil)
}

// UnsetServiceVersion ensures that no value is present for ServiceVersion, not even an explicit nil
func (o *StorageServer) UnsetServiceVersion() {
	o.ServiceVersion.Unset()
}

// GetServiceUsername returns the ServiceUsername field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageServer) GetServiceUsername() string {
	if o == nil || o.ServiceUsername.Get() == nil {
		var ret string
		return ret
	}
	return *o.ServiceUsername.Get()
}

// GetServiceUsernameOk returns a tuple with the ServiceUsername field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageServer) GetServiceUsernameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ServiceUsername.Get(), o.ServiceUsername.IsSet()
}

// HasServiceUsername returns a boolean if a field has been set.
func (o *StorageServer) HasServiceUsername() bool {
	if o != nil && o.ServiceUsername.IsSet() {
		return true
	}

	return false
}

// SetServiceUsername gets a reference to the given NullableString and assigns it to the ServiceUsername field.
func (o *StorageServer) SetServiceUsername(v string) {
	o.ServiceUsername.Set(&v)
}
// SetServiceUsernameNil sets the value for ServiceUsername to be an explicit nil
func (o *StorageServer) SetServiceUsernameNil() {
	o.ServiceUsername.Set(nil)
}

// UnsetServiceUsername ensures that no value is present for ServiceUsername, not even an explicit nil
func (o *StorageServer) UnsetServiceUsername() {
	o.ServiceUsername.Unset()
}

// GetServicePassword returns the ServicePassword field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageServer) GetServicePassword() string {
	if o == nil || o.ServicePassword.Get() == nil {
		var ret string
		return ret
	}
	return *o.ServicePassword.Get()
}

// GetServicePasswordOk returns a tuple with the ServicePassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageServer) GetServicePasswordOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ServicePassword.Get(), o.ServicePassword.IsSet()
}

// HasServicePassword returns a boolean if a field has been set.
func (o *StorageServer) HasServicePassword() bool {
	if o != nil && o.ServicePassword.IsSet() {
		return true
	}

	return false
}

// SetServicePassword gets a reference to the given NullableString and assigns it to the ServicePassword field.
func (o *StorageServer) SetServicePassword(v string) {
	o.ServicePassword.Set(&v)
}
// SetServicePasswordNil sets the value for ServicePassword to be an explicit nil
func (o *StorageServer) SetServicePasswordNil() {
	o.ServicePassword.Set(nil)
}

// UnsetServicePassword ensures that no value is present for ServicePassword, not even an explicit nil
func (o *StorageServer) UnsetServicePassword() {
	o.ServicePassword.Unset()
}

// GetServicePasswordHash returns the ServicePasswordHash field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageServer) GetServicePasswordHash() string {
	if o == nil || o.ServicePasswordHash.Get() == nil {
		var ret string
		return ret
	}
	return *o.ServicePasswordHash.Get()
}

// GetServicePasswordHashOk returns a tuple with the ServicePasswordHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageServer) GetServicePasswordHashOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ServicePasswordHash.Get(), o.ServicePasswordHash.IsSet()
}

// HasServicePasswordHash returns a boolean if a field has been set.
func (o *StorageServer) HasServicePasswordHash() bool {
	if o != nil && o.ServicePasswordHash.IsSet() {
		return true
	}

	return false
}

// SetServicePasswordHash gets a reference to the given NullableString and assigns it to the ServicePasswordHash field.
func (o *StorageServer) SetServicePasswordHash(v string) {
	o.ServicePasswordHash.Set(&v)
}
// SetServicePasswordHashNil sets the value for ServicePasswordHash to be an explicit nil
func (o *StorageServer) SetServicePasswordHashNil() {
	o.ServicePasswordHash.Set(nil)
}

// UnsetServicePasswordHash ensures that no value is present for ServicePasswordHash, not even an explicit nil
func (o *StorageServer) UnsetServicePasswordHash() {
	o.ServicePasswordHash.Unset()
}

// GetInternalIp returns the InternalIp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageServer) GetInternalIp() string {
	if o == nil || o.InternalIp.Get() == nil {
		var ret string
		return ret
	}
	return *o.InternalIp.Get()
}

// GetInternalIpOk returns a tuple with the InternalIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageServer) GetInternalIpOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.InternalIp.Get(), o.InternalIp.IsSet()
}

// HasInternalIp returns a boolean if a field has been set.
func (o *StorageServer) HasInternalIp() bool {
	if o != nil && o.InternalIp.IsSet() {
		return true
	}

	return false
}

// SetInternalIp gets a reference to the given NullableString and assigns it to the InternalIp field.
func (o *StorageServer) SetInternalIp(v string) {
	o.InternalIp.Set(&v)
}
// SetInternalIpNil sets the value for InternalIp to be an explicit nil
func (o *StorageServer) SetInternalIpNil() {
	o.InternalIp.Set(nil)
}

// UnsetInternalIp ensures that no value is present for InternalIp, not even an explicit nil
func (o *StorageServer) UnsetInternalIp() {
	o.InternalIp.Unset()
}

// GetExternalIp returns the ExternalIp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageServer) GetExternalIp() string {
	if o == nil || o.ExternalIp.Get() == nil {
		var ret string
		return ret
	}
	return *o.ExternalIp.Get()
}

// GetExternalIpOk returns a tuple with the ExternalIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageServer) GetExternalIpOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ExternalIp.Get(), o.ExternalIp.IsSet()
}

// HasExternalIp returns a boolean if a field has been set.
func (o *StorageServer) HasExternalIp() bool {
	if o != nil && o.ExternalIp.IsSet() {
		return true
	}

	return false
}

// SetExternalIp gets a reference to the given NullableString and assigns it to the ExternalIp field.
func (o *StorageServer) SetExternalIp(v string) {
	o.ExternalIp.Set(&v)
}
// SetExternalIpNil sets the value for ExternalIp to be an explicit nil
func (o *StorageServer) SetExternalIpNil() {
	o.ExternalIp.Set(nil)
}

// UnsetExternalIp ensures that no value is present for ExternalIp, not even an explicit nil
func (o *StorageServer) UnsetExternalIp() {
	o.ExternalIp.Unset()
}

// GetApiPort returns the ApiPort field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageServer) GetApiPort() string {
	if o == nil || o.ApiPort.Get() == nil {
		var ret string
		return ret
	}
	return *o.ApiPort.Get()
}

// GetApiPortOk returns a tuple with the ApiPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageServer) GetApiPortOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ApiPort.Get(), o.ApiPort.IsSet()
}

// HasApiPort returns a boolean if a field has been set.
func (o *StorageServer) HasApiPort() bool {
	if o != nil && o.ApiPort.IsSet() {
		return true
	}

	return false
}

// SetApiPort gets a reference to the given NullableString and assigns it to the ApiPort field.
func (o *StorageServer) SetApiPort(v string) {
	o.ApiPort.Set(&v)
}
// SetApiPortNil sets the value for ApiPort to be an explicit nil
func (o *StorageServer) SetApiPortNil() {
	o.ApiPort.Set(nil)
}

// UnsetApiPort ensures that no value is present for ApiPort, not even an explicit nil
func (o *StorageServer) UnsetApiPort() {
	o.ApiPort.Unset()
}

// GetAdminPort returns the AdminPort field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageServer) GetAdminPort() string {
	if o == nil || o.AdminPort.Get() == nil {
		var ret string
		return ret
	}
	return *o.AdminPort.Get()
}

// GetAdminPortOk returns a tuple with the AdminPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageServer) GetAdminPortOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AdminPort.Get(), o.AdminPort.IsSet()
}

// HasAdminPort returns a boolean if a field has been set.
func (o *StorageServer) HasAdminPort() bool {
	if o != nil && o.AdminPort.IsSet() {
		return true
	}

	return false
}

// SetAdminPort gets a reference to the given NullableString and assigns it to the AdminPort field.
func (o *StorageServer) SetAdminPort(v string) {
	o.AdminPort.Set(&v)
}
// SetAdminPortNil sets the value for AdminPort to be an explicit nil
func (o *StorageServer) SetAdminPortNil() {
	o.AdminPort.Set(nil)
}

// UnsetAdminPort ensures that no value is present for AdminPort, not even an explicit nil
func (o *StorageServer) UnsetAdminPort() {
	o.AdminPort.Unset()
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *StorageServer) GetConfig() map[string]interface{} {
	if o == nil || o.Config == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageServer) GetConfigOk() (*map[string]interface{}, bool) {
	if o == nil || o.Config == nil {
		return nil, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *StorageServer) HasConfig() bool {
	if o != nil && o.Config != nil {
		return true
	}

	return false
}

// SetConfig gets a reference to the given map[string]interface{} and assigns it to the Config field.
func (o *StorageServer) SetConfig(v map[string]interface{}) {
	o.Config = &v
}

// GetRefType returns the RefType field value if set, zero value otherwise.
func (o *StorageServer) GetRefType() string {
	if o == nil || o.RefType == nil {
		var ret string
		return ret
	}
	return *o.RefType
}

// GetRefTypeOk returns a tuple with the RefType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageServer) GetRefTypeOk() (*string, bool) {
	if o == nil || o.RefType == nil {
		return nil, false
	}
	return o.RefType, true
}

// HasRefType returns a boolean if a field has been set.
func (o *StorageServer) HasRefType() bool {
	if o != nil && o.RefType != nil {
		return true
	}

	return false
}

// SetRefType gets a reference to the given string and assigns it to the RefType field.
func (o *StorageServer) SetRefType(v string) {
	o.RefType = &v
}

// GetRefId returns the RefId field value if set, zero value otherwise.
func (o *StorageServer) GetRefId() int64 {
	if o == nil || o.RefId == nil {
		var ret int64
		return ret
	}
	return *o.RefId
}

// GetRefIdOk returns a tuple with the RefId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageServer) GetRefIdOk() (*int64, bool) {
	if o == nil || o.RefId == nil {
		return nil, false
	}
	return o.RefId, true
}

// HasRefId returns a boolean if a field has been set.
func (o *StorageServer) HasRefId() bool {
	if o != nil && o.RefId != nil {
		return true
	}

	return false
}

// SetRefId gets a reference to the given int64 and assigns it to the RefId field.
func (o *StorageServer) SetRefId(v int64) {
	o.RefId = &v
}

// GetCategory returns the Category field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageServer) GetCategory() string {
	if o == nil || o.Category.Get() == nil {
		var ret string
		return ret
	}
	return *o.Category.Get()
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageServer) GetCategoryOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Category.Get(), o.Category.IsSet()
}

// HasCategory returns a boolean if a field has been set.
func (o *StorageServer) HasCategory() bool {
	if o != nil && o.Category.IsSet() {
		return true
	}

	return false
}

// SetCategory gets a reference to the given NullableString and assigns it to the Category field.
func (o *StorageServer) SetCategory(v string) {
	o.Category.Set(&v)
}
// SetCategoryNil sets the value for Category to be an explicit nil
func (o *StorageServer) SetCategoryNil() {
	o.Category.Set(nil)
}

// UnsetCategory ensures that no value is present for Category, not even an explicit nil
func (o *StorageServer) UnsetCategory() {
	o.Category.Unset()
}

// GetServerVendor returns the ServerVendor field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageServer) GetServerVendor() string {
	if o == nil || o.ServerVendor.Get() == nil {
		var ret string
		return ret
	}
	return *o.ServerVendor.Get()
}

// GetServerVendorOk returns a tuple with the ServerVendor field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageServer) GetServerVendorOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ServerVendor.Get(), o.ServerVendor.IsSet()
}

// HasServerVendor returns a boolean if a field has been set.
func (o *StorageServer) HasServerVendor() bool {
	if o != nil && o.ServerVendor.IsSet() {
		return true
	}

	return false
}

// SetServerVendor gets a reference to the given NullableString and assigns it to the ServerVendor field.
func (o *StorageServer) SetServerVendor(v string) {
	o.ServerVendor.Set(&v)
}
// SetServerVendorNil sets the value for ServerVendor to be an explicit nil
func (o *StorageServer) SetServerVendorNil() {
	o.ServerVendor.Set(nil)
}

// UnsetServerVendor ensures that no value is present for ServerVendor, not even an explicit nil
func (o *StorageServer) UnsetServerVendor() {
	o.ServerVendor.Unset()
}

// GetServerModel returns the ServerModel field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageServer) GetServerModel() string {
	if o == nil || o.ServerModel.Get() == nil {
		var ret string
		return ret
	}
	return *o.ServerModel.Get()
}

// GetServerModelOk returns a tuple with the ServerModel field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageServer) GetServerModelOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ServerModel.Get(), o.ServerModel.IsSet()
}

// HasServerModel returns a boolean if a field has been set.
func (o *StorageServer) HasServerModel() bool {
	if o != nil && o.ServerModel.IsSet() {
		return true
	}

	return false
}

// SetServerModel gets a reference to the given NullableString and assigns it to the ServerModel field.
func (o *StorageServer) SetServerModel(v string) {
	o.ServerModel.Set(&v)
}
// SetServerModelNil sets the value for ServerModel to be an explicit nil
func (o *StorageServer) SetServerModelNil() {
	o.ServerModel.Set(nil)
}

// UnsetServerModel ensures that no value is present for ServerModel, not even an explicit nil
func (o *StorageServer) UnsetServerModel() {
	o.ServerModel.Unset()
}

// GetSerialNumber returns the SerialNumber field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageServer) GetSerialNumber() string {
	if o == nil || o.SerialNumber.Get() == nil {
		var ret string
		return ret
	}
	return *o.SerialNumber.Get()
}

// GetSerialNumberOk returns a tuple with the SerialNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageServer) GetSerialNumberOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SerialNumber.Get(), o.SerialNumber.IsSet()
}

// HasSerialNumber returns a boolean if a field has been set.
func (o *StorageServer) HasSerialNumber() bool {
	if o != nil && o.SerialNumber.IsSet() {
		return true
	}

	return false
}

// SetSerialNumber gets a reference to the given NullableString and assigns it to the SerialNumber field.
func (o *StorageServer) SetSerialNumber(v string) {
	o.SerialNumber.Set(&v)
}
// SetSerialNumberNil sets the value for SerialNumber to be an explicit nil
func (o *StorageServer) SetSerialNumberNil() {
	o.SerialNumber.Set(nil)
}

// UnsetSerialNumber ensures that no value is present for SerialNumber, not even an explicit nil
func (o *StorageServer) UnsetSerialNumber() {
	o.SerialNumber.Unset()
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *StorageServer) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageServer) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *StorageServer) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *StorageServer) SetStatus(v string) {
	o.Status = &v
}

// GetStatusMessage returns the StatusMessage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageServer) GetStatusMessage() string {
	if o == nil || o.StatusMessage.Get() == nil {
		var ret string
		return ret
	}
	return *o.StatusMessage.Get()
}

// GetStatusMessageOk returns a tuple with the StatusMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageServer) GetStatusMessageOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.StatusMessage.Get(), o.StatusMessage.IsSet()
}

// HasStatusMessage returns a boolean if a field has been set.
func (o *StorageServer) HasStatusMessage() bool {
	if o != nil && o.StatusMessage.IsSet() {
		return true
	}

	return false
}

// SetStatusMessage gets a reference to the given NullableString and assigns it to the StatusMessage field.
func (o *StorageServer) SetStatusMessage(v string) {
	o.StatusMessage.Set(&v)
}
// SetStatusMessageNil sets the value for StatusMessage to be an explicit nil
func (o *StorageServer) SetStatusMessageNil() {
	o.StatusMessage.Set(nil)
}

// UnsetStatusMessage ensures that no value is present for StatusMessage, not even an explicit nil
func (o *StorageServer) UnsetStatusMessage() {
	o.StatusMessage.Unset()
}

// GetStatusDate returns the StatusDate field value if set, zero value otherwise.
func (o *StorageServer) GetStatusDate() time.Time {
	if o == nil || o.StatusDate == nil {
		var ret time.Time
		return ret
	}
	return *o.StatusDate
}

// GetStatusDateOk returns a tuple with the StatusDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageServer) GetStatusDateOk() (*time.Time, bool) {
	if o == nil || o.StatusDate == nil {
		return nil, false
	}
	return o.StatusDate, true
}

// HasStatusDate returns a boolean if a field has been set.
func (o *StorageServer) HasStatusDate() bool {
	if o != nil && o.StatusDate != nil {
		return true
	}

	return false
}

// SetStatusDate gets a reference to the given time.Time and assigns it to the StatusDate field.
func (o *StorageServer) SetStatusDate(v time.Time) {
	o.StatusDate = &v
}

// GetErrorMessage returns the ErrorMessage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageServer) GetErrorMessage() string {
	if o == nil || o.ErrorMessage.Get() == nil {
		var ret string
		return ret
	}
	return *o.ErrorMessage.Get()
}

// GetErrorMessageOk returns a tuple with the ErrorMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageServer) GetErrorMessageOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ErrorMessage.Get(), o.ErrorMessage.IsSet()
}

// HasErrorMessage returns a boolean if a field has been set.
func (o *StorageServer) HasErrorMessage() bool {
	if o != nil && o.ErrorMessage.IsSet() {
		return true
	}

	return false
}

// SetErrorMessage gets a reference to the given NullableString and assigns it to the ErrorMessage field.
func (o *StorageServer) SetErrorMessage(v string) {
	o.ErrorMessage.Set(&v)
}
// SetErrorMessageNil sets the value for ErrorMessage to be an explicit nil
func (o *StorageServer) SetErrorMessageNil() {
	o.ErrorMessage.Set(nil)
}

// UnsetErrorMessage ensures that no value is present for ErrorMessage, not even an explicit nil
func (o *StorageServer) UnsetErrorMessage() {
	o.ErrorMessage.Unset()
}

// GetMaxStorage returns the MaxStorage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageServer) GetMaxStorage() string {
	if o == nil || o.MaxStorage.Get() == nil {
		var ret string
		return ret
	}
	return *o.MaxStorage.Get()
}

// GetMaxStorageOk returns a tuple with the MaxStorage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageServer) GetMaxStorageOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MaxStorage.Get(), o.MaxStorage.IsSet()
}

// HasMaxStorage returns a boolean if a field has been set.
func (o *StorageServer) HasMaxStorage() bool {
	if o != nil && o.MaxStorage.IsSet() {
		return true
	}

	return false
}

// SetMaxStorage gets a reference to the given NullableString and assigns it to the MaxStorage field.
func (o *StorageServer) SetMaxStorage(v string) {
	o.MaxStorage.Set(&v)
}
// SetMaxStorageNil sets the value for MaxStorage to be an explicit nil
func (o *StorageServer) SetMaxStorageNil() {
	o.MaxStorage.Set(nil)
}

// UnsetMaxStorage ensures that no value is present for MaxStorage, not even an explicit nil
func (o *StorageServer) UnsetMaxStorage() {
	o.MaxStorage.Unset()
}

// GetUsedStorage returns the UsedStorage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageServer) GetUsedStorage() string {
	if o == nil || o.UsedStorage.Get() == nil {
		var ret string
		return ret
	}
	return *o.UsedStorage.Get()
}

// GetUsedStorageOk returns a tuple with the UsedStorage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageServer) GetUsedStorageOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UsedStorage.Get(), o.UsedStorage.IsSet()
}

// HasUsedStorage returns a boolean if a field has been set.
func (o *StorageServer) HasUsedStorage() bool {
	if o != nil && o.UsedStorage.IsSet() {
		return true
	}

	return false
}

// SetUsedStorage gets a reference to the given NullableString and assigns it to the UsedStorage field.
func (o *StorageServer) SetUsedStorage(v string) {
	o.UsedStorage.Set(&v)
}
// SetUsedStorageNil sets the value for UsedStorage to be an explicit nil
func (o *StorageServer) SetUsedStorageNil() {
	o.UsedStorage.Set(nil)
}

// UnsetUsedStorage ensures that no value is present for UsedStorage, not even an explicit nil
func (o *StorageServer) UnsetUsedStorage() {
	o.UsedStorage.Unset()
}

// GetDiskCount returns the DiskCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageServer) GetDiskCount() string {
	if o == nil || o.DiskCount.Get() == nil {
		var ret string
		return ret
	}
	return *o.DiskCount.Get()
}

// GetDiskCountOk returns a tuple with the DiskCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageServer) GetDiskCountOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DiskCount.Get(), o.DiskCount.IsSet()
}

// HasDiskCount returns a boolean if a field has been set.
func (o *StorageServer) HasDiskCount() bool {
	if o != nil && o.DiskCount.IsSet() {
		return true
	}

	return false
}

// SetDiskCount gets a reference to the given NullableString and assigns it to the DiskCount field.
func (o *StorageServer) SetDiskCount(v string) {
	o.DiskCount.Set(&v)
}
// SetDiskCountNil sets the value for DiskCount to be an explicit nil
func (o *StorageServer) SetDiskCountNil() {
	o.DiskCount.Set(nil)
}

// UnsetDiskCount ensures that no value is present for DiskCount, not even an explicit nil
func (o *StorageServer) UnsetDiskCount() {
	o.DiskCount.Unset()
}

// GetDateCreated returns the DateCreated field value if set, zero value otherwise.
func (o *StorageServer) GetDateCreated() time.Time {
	if o == nil || o.DateCreated == nil {
		var ret time.Time
		return ret
	}
	return *o.DateCreated
}

// GetDateCreatedOk returns a tuple with the DateCreated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageServer) GetDateCreatedOk() (*time.Time, bool) {
	if o == nil || o.DateCreated == nil {
		return nil, false
	}
	return o.DateCreated, true
}

// HasDateCreated returns a boolean if a field has been set.
func (o *StorageServer) HasDateCreated() bool {
	if o != nil && o.DateCreated != nil {
		return true
	}

	return false
}

// SetDateCreated gets a reference to the given time.Time and assigns it to the DateCreated field.
func (o *StorageServer) SetDateCreated(v time.Time) {
	o.DateCreated = &v
}

// GetLastUpdated returns the LastUpdated field value if set, zero value otherwise.
func (o *StorageServer) GetLastUpdated() time.Time {
	if o == nil || o.LastUpdated == nil {
		var ret time.Time
		return ret
	}
	return *o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageServer) GetLastUpdatedOk() (*time.Time, bool) {
	if o == nil || o.LastUpdated == nil {
		return nil, false
	}
	return o.LastUpdated, true
}

// HasLastUpdated returns a boolean if a field has been set.
func (o *StorageServer) HasLastUpdated() bool {
	if o != nil && o.LastUpdated != nil {
		return true
	}

	return false
}

// SetLastUpdated gets a reference to the given time.Time and assigns it to the LastUpdated field.
func (o *StorageServer) SetLastUpdated(v time.Time) {
	o.LastUpdated = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *StorageServer) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageServer) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *StorageServer) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *StorageServer) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetGroups returns the Groups field value if set, zero value otherwise.
func (o *StorageServer) GetGroups() []map[string]interface{} {
	if o == nil || o.Groups == nil {
		var ret []map[string]interface{}
		return ret
	}
	return *o.Groups
}

// GetGroupsOk returns a tuple with the Groups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageServer) GetGroupsOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.Groups == nil {
		return nil, false
	}
	return o.Groups, true
}

// HasGroups returns a boolean if a field has been set.
func (o *StorageServer) HasGroups() bool {
	if o != nil && o.Groups != nil {
		return true
	}

	return false
}

// SetGroups gets a reference to the given []map[string]interface{} and assigns it to the Groups field.
func (o *StorageServer) SetGroups(v []map[string]interface{}) {
	o.Groups = &v
}

// GetHostGroups returns the HostGroups field value if set, zero value otherwise.
func (o *StorageServer) GetHostGroups() []map[string]interface{} {
	if o == nil || o.HostGroups == nil {
		var ret []map[string]interface{}
		return ret
	}
	return *o.HostGroups
}

// GetHostGroupsOk returns a tuple with the HostGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageServer) GetHostGroupsOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.HostGroups == nil {
		return nil, false
	}
	return o.HostGroups, true
}

// HasHostGroups returns a boolean if a field has been set.
func (o *StorageServer) HasHostGroups() bool {
	if o != nil && o.HostGroups != nil {
		return true
	}

	return false
}

// SetHostGroups gets a reference to the given []map[string]interface{} and assigns it to the HostGroups field.
func (o *StorageServer) SetHostGroups(v []map[string]interface{}) {
	o.HostGroups = &v
}

// GetHosts returns the Hosts field value if set, zero value otherwise.
func (o *StorageServer) GetHosts() []map[string]interface{} {
	if o == nil || o.Hosts == nil {
		var ret []map[string]interface{}
		return ret
	}
	return *o.Hosts
}

// GetHostsOk returns a tuple with the Hosts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageServer) GetHostsOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.Hosts == nil {
		return nil, false
	}
	return o.Hosts, true
}

// HasHosts returns a boolean if a field has been set.
func (o *StorageServer) HasHosts() bool {
	if o != nil && o.Hosts != nil {
		return true
	}

	return false
}

// SetHosts gets a reference to the given []map[string]interface{} and assigns it to the Hosts field.
func (o *StorageServer) SetHosts(v []map[string]interface{}) {
	o.Hosts = &v
}

// GetTenants returns the Tenants field value if set, zero value otherwise.
func (o *StorageServer) GetTenants() []map[string]interface{} {
	if o == nil || o.Tenants == nil {
		var ret []map[string]interface{}
		return ret
	}
	return *o.Tenants
}

// GetTenantsOk returns a tuple with the Tenants field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageServer) GetTenantsOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.Tenants == nil {
		return nil, false
	}
	return o.Tenants, true
}

// HasTenants returns a boolean if a field has been set.
func (o *StorageServer) HasTenants() bool {
	if o != nil && o.Tenants != nil {
		return true
	}

	return false
}

// SetTenants gets a reference to the given []map[string]interface{} and assigns it to the Tenants field.
func (o *StorageServer) SetTenants(v []map[string]interface{}) {
	o.Tenants = &v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *StorageServer) GetOwner() InlineResponse20040AppDeployInstance {
	if o == nil || o.Owner == nil {
		var ret InlineResponse20040AppDeployInstance
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageServer) GetOwnerOk() (*InlineResponse20040AppDeployInstance, bool) {
	if o == nil || o.Owner == nil {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *StorageServer) HasOwner() bool {
	if o != nil && o.Owner != nil {
		return true
	}

	return false
}

// SetOwner gets a reference to the given InlineResponse20040AppDeployInstance and assigns it to the Owner field.
func (o *StorageServer) SetOwner(v InlineResponse20040AppDeployInstance) {
	o.Owner = &v
}

// GetCredential returns the Credential field value if set, zero value otherwise.
func (o *StorageServer) GetCredential() map[string]interface{} {
	if o == nil || o.Credential == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Credential
}

// GetCredentialOk returns a tuple with the Credential field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageServer) GetCredentialOk() (*map[string]interface{}, bool) {
	if o == nil || o.Credential == nil {
		return nil, false
	}
	return o.Credential, true
}

// HasCredential returns a boolean if a field has been set.
func (o *StorageServer) HasCredential() bool {
	if o != nil && o.Credential != nil {
		return true
	}

	return false
}

// SetCredential gets a reference to the given map[string]interface{} and assigns it to the Credential field.
func (o *StorageServer) SetCredential(v map[string]interface{}) {
	o.Credential = &v
}

func (o StorageServer) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Chassis.IsSet() {
		toSerialize["chassis"] = o.Chassis.Get()
	}
	if o.Visibility != nil {
		toSerialize["visibility"] = o.Visibility
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.InternalId.IsSet() {
		toSerialize["internalId"] = o.InternalId.Get()
	}
	if o.ExternalId.IsSet() {
		toSerialize["externalId"] = o.ExternalId.Get()
	}
	if o.ServiceUrl.IsSet() {
		toSerialize["serviceUrl"] = o.ServiceUrl.Get()
	}
	if o.ServiceHost.IsSet() {
		toSerialize["serviceHost"] = o.ServiceHost.Get()
	}
	if o.ServicePath.IsSet() {
		toSerialize["servicePath"] = o.ServicePath.Get()
	}
	if o.ServiceToken.IsSet() {
		toSerialize["serviceToken"] = o.ServiceToken.Get()
	}
	if o.ServiceTokenHash.IsSet() {
		toSerialize["serviceTokenHash"] = o.ServiceTokenHash.Get()
	}
	if o.ServiceVersion.IsSet() {
		toSerialize["serviceVersion"] = o.ServiceVersion.Get()
	}
	if o.ServiceUsername.IsSet() {
		toSerialize["serviceUsername"] = o.ServiceUsername.Get()
	}
	if o.ServicePassword.IsSet() {
		toSerialize["servicePassword"] = o.ServicePassword.Get()
	}
	if o.ServicePasswordHash.IsSet() {
		toSerialize["servicePasswordHash"] = o.ServicePasswordHash.Get()
	}
	if o.InternalIp.IsSet() {
		toSerialize["internalIp"] = o.InternalIp.Get()
	}
	if o.ExternalIp.IsSet() {
		toSerialize["externalIp"] = o.ExternalIp.Get()
	}
	if o.ApiPort.IsSet() {
		toSerialize["apiPort"] = o.ApiPort.Get()
	}
	if o.AdminPort.IsSet() {
		toSerialize["adminPort"] = o.AdminPort.Get()
	}
	if o.Config != nil {
		toSerialize["config"] = o.Config
	}
	if o.RefType != nil {
		toSerialize["refType"] = o.RefType
	}
	if o.RefId != nil {
		toSerialize["refId"] = o.RefId
	}
	if o.Category.IsSet() {
		toSerialize["category"] = o.Category.Get()
	}
	if o.ServerVendor.IsSet() {
		toSerialize["serverVendor"] = o.ServerVendor.Get()
	}
	if o.ServerModel.IsSet() {
		toSerialize["serverModel"] = o.ServerModel.Get()
	}
	if o.SerialNumber.IsSet() {
		toSerialize["serialNumber"] = o.SerialNumber.Get()
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.StatusMessage.IsSet() {
		toSerialize["statusMessage"] = o.StatusMessage.Get()
	}
	if o.StatusDate != nil {
		toSerialize["statusDate"] = o.StatusDate
	}
	if o.ErrorMessage.IsSet() {
		toSerialize["errorMessage"] = o.ErrorMessage.Get()
	}
	if o.MaxStorage.IsSet() {
		toSerialize["maxStorage"] = o.MaxStorage.Get()
	}
	if o.UsedStorage.IsSet() {
		toSerialize["usedStorage"] = o.UsedStorage.Get()
	}
	if o.DiskCount.IsSet() {
		toSerialize["diskCount"] = o.DiskCount.Get()
	}
	if o.DateCreated != nil {
		toSerialize["dateCreated"] = o.DateCreated
	}
	if o.LastUpdated != nil {
		toSerialize["lastUpdated"] = o.LastUpdated
	}
	if o.Enabled != nil {
		toSerialize["enabled"] = o.Enabled
	}
	if o.Groups != nil {
		toSerialize["groups"] = o.Groups
	}
	if o.HostGroups != nil {
		toSerialize["hostGroups"] = o.HostGroups
	}
	if o.Hosts != nil {
		toSerialize["hosts"] = o.Hosts
	}
	if o.Tenants != nil {
		toSerialize["tenants"] = o.Tenants
	}
	if o.Owner != nil {
		toSerialize["owner"] = o.Owner
	}
	if o.Credential != nil {
		toSerialize["credential"] = o.Credential
	}
	return json.Marshal(toSerialize)
}

type NullableStorageServer struct {
	value *StorageServer
	isSet bool
}

func (v NullableStorageServer) Get() *StorageServer {
	return v.value
}

func (v *NullableStorageServer) Set(val *StorageServer) {
	v.value = val
	v.isSet = true
}

func (v NullableStorageServer) IsSet() bool {
	return v.isSet
}

func (v *NullableStorageServer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStorageServer(val *StorageServer) *NullableStorageServer {
	return &NullableStorageServer{value: val, isSet: true}
}

func (v NullableStorageServer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStorageServer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


