/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// SpecTemplateUpdate struct for SpecTemplateUpdate
type SpecTemplateUpdate struct {
	// Spec template name
	Name *string `json:"name,omitempty"`
	// Array of label strings, can be used for filtering.
	Labels []string `json:"labels,omitempty"`
	Type *SpecTemplateUpdateType `json:"type,omitempty"`
	File *SpecTemplateUpdateFile `json:"file,omitempty"`
	Config *SpecTemplateUpdateConfig `json:"config,omitempty"`
}

// NewSpecTemplateUpdate instantiates a new SpecTemplateUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpecTemplateUpdate() *SpecTemplateUpdate {
	this := SpecTemplateUpdate{}
	return &this
}

// NewSpecTemplateUpdateWithDefaults instantiates a new SpecTemplateUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpecTemplateUpdateWithDefaults() *SpecTemplateUpdate {
	this := SpecTemplateUpdate{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SpecTemplateUpdate) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecTemplateUpdate) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SpecTemplateUpdate) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SpecTemplateUpdate) SetName(v string) {
	o.Name = &v
}

// GetLabels returns the Labels field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SpecTemplateUpdate) GetLabels() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SpecTemplateUpdate) GetLabelsOk() (*[]string, bool) {
	if o == nil || o.Labels == nil {
		return nil, false
	}
	return &o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *SpecTemplateUpdate) HasLabels() bool {
	if o != nil && o.Labels != nil {
		return true
	}

	return false
}

// SetLabels gets a reference to the given []string and assigns it to the Labels field.
func (o *SpecTemplateUpdate) SetLabels(v []string) {
	o.Labels = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SpecTemplateUpdate) GetType() SpecTemplateUpdateType {
	if o == nil || o.Type == nil {
		var ret SpecTemplateUpdateType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecTemplateUpdate) GetTypeOk() (*SpecTemplateUpdateType, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SpecTemplateUpdate) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given SpecTemplateUpdateType and assigns it to the Type field.
func (o *SpecTemplateUpdate) SetType(v SpecTemplateUpdateType) {
	o.Type = &v
}

// GetFile returns the File field value if set, zero value otherwise.
func (o *SpecTemplateUpdate) GetFile() SpecTemplateUpdateFile {
	if o == nil || o.File == nil {
		var ret SpecTemplateUpdateFile
		return ret
	}
	return *o.File
}

// GetFileOk returns a tuple with the File field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecTemplateUpdate) GetFileOk() (*SpecTemplateUpdateFile, bool) {
	if o == nil || o.File == nil {
		return nil, false
	}
	return o.File, true
}

// HasFile returns a boolean if a field has been set.
func (o *SpecTemplateUpdate) HasFile() bool {
	if o != nil && o.File != nil {
		return true
	}

	return false
}

// SetFile gets a reference to the given SpecTemplateUpdateFile and assigns it to the File field.
func (o *SpecTemplateUpdate) SetFile(v SpecTemplateUpdateFile) {
	o.File = &v
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *SpecTemplateUpdate) GetConfig() SpecTemplateUpdateConfig {
	if o == nil || o.Config == nil {
		var ret SpecTemplateUpdateConfig
		return ret
	}
	return *o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecTemplateUpdate) GetConfigOk() (*SpecTemplateUpdateConfig, bool) {
	if o == nil || o.Config == nil {
		return nil, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *SpecTemplateUpdate) HasConfig() bool {
	if o != nil && o.Config != nil {
		return true
	}

	return false
}

// SetConfig gets a reference to the given SpecTemplateUpdateConfig and assigns it to the Config field.
func (o *SpecTemplateUpdate) SetConfig(v SpecTemplateUpdateConfig) {
	o.Config = &v
}

func (o SpecTemplateUpdate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Labels != nil {
		toSerialize["labels"] = o.Labels
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.File != nil {
		toSerialize["file"] = o.File
	}
	if o.Config != nil {
		toSerialize["config"] = o.Config
	}
	return json.Marshal(toSerialize)
}

type NullableSpecTemplateUpdate struct {
	value *SpecTemplateUpdate
	isSet bool
}

func (v NullableSpecTemplateUpdate) Get() *SpecTemplateUpdate {
	return v.value
}

func (v *NullableSpecTemplateUpdate) Set(val *SpecTemplateUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableSpecTemplateUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableSpecTemplateUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpecTemplateUpdate(val *SpecTemplateUpdate) *NullableSpecTemplateUpdate {
	return &NullableSpecTemplateUpdate{value: val, isSet: true}
}

func (v NullableSpecTemplateUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpecTemplateUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


