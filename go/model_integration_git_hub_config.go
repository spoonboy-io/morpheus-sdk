/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// IntegrationGitHubConfig struct for IntegrationGitHubConfig
type IntegrationGitHubConfig struct {
	Integration IntegrationGitHubConfigIntegration `json:"integration"`
}

// NewIntegrationGitHubConfig instantiates a new IntegrationGitHubConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIntegrationGitHubConfig(integration IntegrationGitHubConfigIntegration, ) *IntegrationGitHubConfig {
	this := IntegrationGitHubConfig{}
	this.Integration = integration
	return &this
}

// NewIntegrationGitHubConfigWithDefaults instantiates a new IntegrationGitHubConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIntegrationGitHubConfigWithDefaults() *IntegrationGitHubConfig {
	this := IntegrationGitHubConfig{}
	return &this
}

// GetIntegration returns the Integration field value
func (o *IntegrationGitHubConfig) GetIntegration() IntegrationGitHubConfigIntegration {
	if o == nil  {
		var ret IntegrationGitHubConfigIntegration
		return ret
	}

	return o.Integration
}

// GetIntegrationOk returns a tuple with the Integration field value
// and a boolean to check if the value has been set.
func (o *IntegrationGitHubConfig) GetIntegrationOk() (*IntegrationGitHubConfigIntegration, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Integration, true
}

// SetIntegration sets field value
func (o *IntegrationGitHubConfig) SetIntegration(v IntegrationGitHubConfigIntegration) {
	o.Integration = v
}

func (o IntegrationGitHubConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["integration"] = o.Integration
	}
	return json.Marshal(toSerialize)
}

type NullableIntegrationGitHubConfig struct {
	value *IntegrationGitHubConfig
	isSet bool
}

func (v NullableIntegrationGitHubConfig) Get() *IntegrationGitHubConfig {
	return v.value
}

func (v *NullableIntegrationGitHubConfig) Set(val *IntegrationGitHubConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableIntegrationGitHubConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableIntegrationGitHubConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntegrationGitHubConfig(val *IntegrationGitHubConfig) *NullableIntegrationGitHubConfig {
	return &NullableIntegrationGitHubConfig{value: val, isSet: true}
}

func (v NullableIntegrationGitHubConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntegrationGitHubConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


