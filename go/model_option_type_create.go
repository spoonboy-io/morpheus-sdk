/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// OptionTypeCreate struct for OptionTypeCreate
type OptionTypeCreate struct {
	// The name of the option type for handy reference
	Name string `json:"name"`
	// Short description of the option type
	Description NullableString `json:"description,omitempty"`
	// Array of label strings, can be used for filtering.
	Labels []string `json:"labels,omitempty"`
	// Field Name, the name for user input. This along with fieldContext determines the configuration property name.  The property key for when posting this option type to a JSON POST request
	FieldName *string `json:"fieldName,omitempty"`
	// Type, the type of input. eg. text, checkbox, select, etc.
	Type *string `json:"type,omitempty"`
	// Field Label, the label for user input.
	FieldLabel *string `json:"fieldLabel,omitempty"`
	// Any placeholder text when nothing is yet entered
	Placeholder *string `json:"placeholder,omitempty"`
	// Verify Pattern, A regexp string that validates the input, use (?i) to make the matcher case insensitive
	VerifyPattern *string `json:"verifyPattern,omitempty"`
	// The default value if no user entry is specified. This value should be passed to the desired JSON Map if nothing else is entered
	DefaultValue *string `json:"defaultValue,omitempty"`
	// Is this field entry required for the request
	Required *bool `json:"required,omitempty"`
	// Export as Tag
	ExportMeta *bool `json:"exportMeta,omitempty"`
	// Used primarily on tasks and workflows. Basically wether or not the field can be overridden optionally when the object is run
	Editable *bool `json:"editable,omitempty"`
	OptionList *OptionTypeCreateOptionList `json:"optionList,omitempty"`
}

// NewOptionTypeCreate instantiates a new OptionTypeCreate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOptionTypeCreate(name string, ) *OptionTypeCreate {
	this := OptionTypeCreate{}
	this.Name = name
	var type_ string = "text"
	this.Type = &type_
	var required bool = false
	this.Required = &required
	var exportMeta bool = false
	this.ExportMeta = &exportMeta
	var editable bool = false
	this.Editable = &editable
	return &this
}

// NewOptionTypeCreateWithDefaults instantiates a new OptionTypeCreate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOptionTypeCreateWithDefaults() *OptionTypeCreate {
	this := OptionTypeCreate{}
	var type_ string = "text"
	this.Type = &type_
	var required bool = false
	this.Required = &required
	var exportMeta bool = false
	this.ExportMeta = &exportMeta
	var editable bool = false
	this.Editable = &editable
	return &this
}

// GetName returns the Name field value
func (o *OptionTypeCreate) GetName() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *OptionTypeCreate) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *OptionTypeCreate) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OptionTypeCreate) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OptionTypeCreate) GetDescriptionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *OptionTypeCreate) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *OptionTypeCreate) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *OptionTypeCreate) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *OptionTypeCreate) UnsetDescription() {
	o.Description.Unset()
}

// GetLabels returns the Labels field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OptionTypeCreate) GetLabels() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OptionTypeCreate) GetLabelsOk() (*[]string, bool) {
	if o == nil || o.Labels == nil {
		return nil, false
	}
	return &o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *OptionTypeCreate) HasLabels() bool {
	if o != nil && o.Labels != nil {
		return true
	}

	return false
}

// SetLabels gets a reference to the given []string and assigns it to the Labels field.
func (o *OptionTypeCreate) SetLabels(v []string) {
	o.Labels = v
}

// GetFieldName returns the FieldName field value if set, zero value otherwise.
func (o *OptionTypeCreate) GetFieldName() string {
	if o == nil || o.FieldName == nil {
		var ret string
		return ret
	}
	return *o.FieldName
}

// GetFieldNameOk returns a tuple with the FieldName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionTypeCreate) GetFieldNameOk() (*string, bool) {
	if o == nil || o.FieldName == nil {
		return nil, false
	}
	return o.FieldName, true
}

// HasFieldName returns a boolean if a field has been set.
func (o *OptionTypeCreate) HasFieldName() bool {
	if o != nil && o.FieldName != nil {
		return true
	}

	return false
}

// SetFieldName gets a reference to the given string and assigns it to the FieldName field.
func (o *OptionTypeCreate) SetFieldName(v string) {
	o.FieldName = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *OptionTypeCreate) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionTypeCreate) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *OptionTypeCreate) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *OptionTypeCreate) SetType(v string) {
	o.Type = &v
}

// GetFieldLabel returns the FieldLabel field value if set, zero value otherwise.
func (o *OptionTypeCreate) GetFieldLabel() string {
	if o == nil || o.FieldLabel == nil {
		var ret string
		return ret
	}
	return *o.FieldLabel
}

// GetFieldLabelOk returns a tuple with the FieldLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionTypeCreate) GetFieldLabelOk() (*string, bool) {
	if o == nil || o.FieldLabel == nil {
		return nil, false
	}
	return o.FieldLabel, true
}

// HasFieldLabel returns a boolean if a field has been set.
func (o *OptionTypeCreate) HasFieldLabel() bool {
	if o != nil && o.FieldLabel != nil {
		return true
	}

	return false
}

// SetFieldLabel gets a reference to the given string and assigns it to the FieldLabel field.
func (o *OptionTypeCreate) SetFieldLabel(v string) {
	o.FieldLabel = &v
}

// GetPlaceholder returns the Placeholder field value if set, zero value otherwise.
func (o *OptionTypeCreate) GetPlaceholder() string {
	if o == nil || o.Placeholder == nil {
		var ret string
		return ret
	}
	return *o.Placeholder
}

// GetPlaceholderOk returns a tuple with the Placeholder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionTypeCreate) GetPlaceholderOk() (*string, bool) {
	if o == nil || o.Placeholder == nil {
		return nil, false
	}
	return o.Placeholder, true
}

// HasPlaceholder returns a boolean if a field has been set.
func (o *OptionTypeCreate) HasPlaceholder() bool {
	if o != nil && o.Placeholder != nil {
		return true
	}

	return false
}

// SetPlaceholder gets a reference to the given string and assigns it to the Placeholder field.
func (o *OptionTypeCreate) SetPlaceholder(v string) {
	o.Placeholder = &v
}

// GetVerifyPattern returns the VerifyPattern field value if set, zero value otherwise.
func (o *OptionTypeCreate) GetVerifyPattern() string {
	if o == nil || o.VerifyPattern == nil {
		var ret string
		return ret
	}
	return *o.VerifyPattern
}

// GetVerifyPatternOk returns a tuple with the VerifyPattern field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionTypeCreate) GetVerifyPatternOk() (*string, bool) {
	if o == nil || o.VerifyPattern == nil {
		return nil, false
	}
	return o.VerifyPattern, true
}

// HasVerifyPattern returns a boolean if a field has been set.
func (o *OptionTypeCreate) HasVerifyPattern() bool {
	if o != nil && o.VerifyPattern != nil {
		return true
	}

	return false
}

// SetVerifyPattern gets a reference to the given string and assigns it to the VerifyPattern field.
func (o *OptionTypeCreate) SetVerifyPattern(v string) {
	o.VerifyPattern = &v
}

// GetDefaultValue returns the DefaultValue field value if set, zero value otherwise.
func (o *OptionTypeCreate) GetDefaultValue() string {
	if o == nil || o.DefaultValue == nil {
		var ret string
		return ret
	}
	return *o.DefaultValue
}

// GetDefaultValueOk returns a tuple with the DefaultValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionTypeCreate) GetDefaultValueOk() (*string, bool) {
	if o == nil || o.DefaultValue == nil {
		return nil, false
	}
	return o.DefaultValue, true
}

// HasDefaultValue returns a boolean if a field has been set.
func (o *OptionTypeCreate) HasDefaultValue() bool {
	if o != nil && o.DefaultValue != nil {
		return true
	}

	return false
}

// SetDefaultValue gets a reference to the given string and assigns it to the DefaultValue field.
func (o *OptionTypeCreate) SetDefaultValue(v string) {
	o.DefaultValue = &v
}

// GetRequired returns the Required field value if set, zero value otherwise.
func (o *OptionTypeCreate) GetRequired() bool {
	if o == nil || o.Required == nil {
		var ret bool
		return ret
	}
	return *o.Required
}

// GetRequiredOk returns a tuple with the Required field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionTypeCreate) GetRequiredOk() (*bool, bool) {
	if o == nil || o.Required == nil {
		return nil, false
	}
	return o.Required, true
}

// HasRequired returns a boolean if a field has been set.
func (o *OptionTypeCreate) HasRequired() bool {
	if o != nil && o.Required != nil {
		return true
	}

	return false
}

// SetRequired gets a reference to the given bool and assigns it to the Required field.
func (o *OptionTypeCreate) SetRequired(v bool) {
	o.Required = &v
}

// GetExportMeta returns the ExportMeta field value if set, zero value otherwise.
func (o *OptionTypeCreate) GetExportMeta() bool {
	if o == nil || o.ExportMeta == nil {
		var ret bool
		return ret
	}
	return *o.ExportMeta
}

// GetExportMetaOk returns a tuple with the ExportMeta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionTypeCreate) GetExportMetaOk() (*bool, bool) {
	if o == nil || o.ExportMeta == nil {
		return nil, false
	}
	return o.ExportMeta, true
}

// HasExportMeta returns a boolean if a field has been set.
func (o *OptionTypeCreate) HasExportMeta() bool {
	if o != nil && o.ExportMeta != nil {
		return true
	}

	return false
}

// SetExportMeta gets a reference to the given bool and assigns it to the ExportMeta field.
func (o *OptionTypeCreate) SetExportMeta(v bool) {
	o.ExportMeta = &v
}

// GetEditable returns the Editable field value if set, zero value otherwise.
func (o *OptionTypeCreate) GetEditable() bool {
	if o == nil || o.Editable == nil {
		var ret bool
		return ret
	}
	return *o.Editable
}

// GetEditableOk returns a tuple with the Editable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionTypeCreate) GetEditableOk() (*bool, bool) {
	if o == nil || o.Editable == nil {
		return nil, false
	}
	return o.Editable, true
}

// HasEditable returns a boolean if a field has been set.
func (o *OptionTypeCreate) HasEditable() bool {
	if o != nil && o.Editable != nil {
		return true
	}

	return false
}

// SetEditable gets a reference to the given bool and assigns it to the Editable field.
func (o *OptionTypeCreate) SetEditable(v bool) {
	o.Editable = &v
}

// GetOptionList returns the OptionList field value if set, zero value otherwise.
func (o *OptionTypeCreate) GetOptionList() OptionTypeCreateOptionList {
	if o == nil || o.OptionList == nil {
		var ret OptionTypeCreateOptionList
		return ret
	}
	return *o.OptionList
}

// GetOptionListOk returns a tuple with the OptionList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionTypeCreate) GetOptionListOk() (*OptionTypeCreateOptionList, bool) {
	if o == nil || o.OptionList == nil {
		return nil, false
	}
	return o.OptionList, true
}

// HasOptionList returns a boolean if a field has been set.
func (o *OptionTypeCreate) HasOptionList() bool {
	if o != nil && o.OptionList != nil {
		return true
	}

	return false
}

// SetOptionList gets a reference to the given OptionTypeCreateOptionList and assigns it to the OptionList field.
func (o *OptionTypeCreate) SetOptionList(v OptionTypeCreateOptionList) {
	o.OptionList = &v
}

func (o OptionTypeCreate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.Labels != nil {
		toSerialize["labels"] = o.Labels
	}
	if o.FieldName != nil {
		toSerialize["fieldName"] = o.FieldName
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.FieldLabel != nil {
		toSerialize["fieldLabel"] = o.FieldLabel
	}
	if o.Placeholder != nil {
		toSerialize["placeholder"] = o.Placeholder
	}
	if o.VerifyPattern != nil {
		toSerialize["verifyPattern"] = o.VerifyPattern
	}
	if o.DefaultValue != nil {
		toSerialize["defaultValue"] = o.DefaultValue
	}
	if o.Required != nil {
		toSerialize["required"] = o.Required
	}
	if o.ExportMeta != nil {
		toSerialize["exportMeta"] = o.ExportMeta
	}
	if o.Editable != nil {
		toSerialize["editable"] = o.Editable
	}
	if o.OptionList != nil {
		toSerialize["optionList"] = o.OptionList
	}
	return json.Marshal(toSerialize)
}

type NullableOptionTypeCreate struct {
	value *OptionTypeCreate
	isSet bool
}

func (v NullableOptionTypeCreate) Get() *OptionTypeCreate {
	return v.value
}

func (v *NullableOptionTypeCreate) Set(val *OptionTypeCreate) {
	v.value = val
	v.isSet = true
}

func (v NullableOptionTypeCreate) IsSet() bool {
	return v.isSet
}

func (v *NullableOptionTypeCreate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOptionTypeCreate(val *OptionTypeCreate) *NullableOptionTypeCreate {
	return &NullableOptionTypeCreate{value: val, isSet: true}
}

func (v NullableOptionTypeCreate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOptionTypeCreate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


