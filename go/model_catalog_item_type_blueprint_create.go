/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CatalogItemTypeBlueprintCreate struct for CatalogItemTypeBlueprintCreate
type CatalogItemTypeBlueprintCreate struct {
	// Catalog Item Type name
	Name *string `json:"name,omitempty"`
	// Useful shortcode for provisioning naming schemes and export reference.
	Code NullableString `json:"code,omitempty"`
	// Catalog Item Type category
	Category NullableString `json:"category,omitempty"`
	// Catalog Item Type description
	Description *string `json:"description,omitempty"`
	// Array of label strings, can be used for filtering.
	Labels []string `json:"labels,omitempty"`
	// Type, `instance`, `blueprint` or `workflow`. This determines whether an Instance or App will be provisioned. Instance types require a config and blueprint requires a blueprint and appSpec, while workflow types requires a workflow and context.
	Type *string `json:"type,omitempty"`
	// Visibility - Set to public to allow all tenants
	Visibility *string `json:"visibility,omitempty"`
	// Identifier primarily used for Plugin Catalog Item Types
	LayoutCode NullableString `json:"layoutCode,omitempty"`
	// Icon Path, relative location of an icon image, eg. /assets/containers-png/nginx.png.
	IconPath *string `json:"iconPath,omitempty"`
	// Can users order more than one of this item at a time.
	AllowQuantity *bool `json:"allowQuantity,omitempty"`
	Blueprint CatalogItemTypeBlueprintCreateBlueprint `json:"blueprint"`
	// The appSpec for blueprint type catalog items is a string in the Scribe YAML format with fields
	AppSpec *string `json:"appSpec,omitempty"`
	// Array of option type IDs, see Inputs. Only applies to type instance and blueprint.
	OptionTypes *[]int64 `json:"optionTypes,omitempty"`
}

// NewCatalogItemTypeBlueprintCreate instantiates a new CatalogItemTypeBlueprintCreate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCatalogItemTypeBlueprintCreate(blueprint CatalogItemTypeBlueprintCreateBlueprint, ) *CatalogItemTypeBlueprintCreate {
	this := CatalogItemTypeBlueprintCreate{}
	var visibility string = "private"
	this.Visibility = &visibility
	this.Blueprint = blueprint
	return &this
}

// NewCatalogItemTypeBlueprintCreateWithDefaults instantiates a new CatalogItemTypeBlueprintCreate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCatalogItemTypeBlueprintCreateWithDefaults() *CatalogItemTypeBlueprintCreate {
	this := CatalogItemTypeBlueprintCreate{}
	var visibility string = "private"
	this.Visibility = &visibility
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CatalogItemTypeBlueprintCreate) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogItemTypeBlueprintCreate) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CatalogItemTypeBlueprintCreate) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CatalogItemTypeBlueprintCreate) SetName(v string) {
	o.Name = &v
}

// GetCode returns the Code field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CatalogItemTypeBlueprintCreate) GetCode() string {
	if o == nil || o.Code.Get() == nil {
		var ret string
		return ret
	}
	return *o.Code.Get()
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CatalogItemTypeBlueprintCreate) GetCodeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Code.Get(), o.Code.IsSet()
}

// HasCode returns a boolean if a field has been set.
func (o *CatalogItemTypeBlueprintCreate) HasCode() bool {
	if o != nil && o.Code.IsSet() {
		return true
	}

	return false
}

// SetCode gets a reference to the given NullableString and assigns it to the Code field.
func (o *CatalogItemTypeBlueprintCreate) SetCode(v string) {
	o.Code.Set(&v)
}
// SetCodeNil sets the value for Code to be an explicit nil
func (o *CatalogItemTypeBlueprintCreate) SetCodeNil() {
	o.Code.Set(nil)
}

// UnsetCode ensures that no value is present for Code, not even an explicit nil
func (o *CatalogItemTypeBlueprintCreate) UnsetCode() {
	o.Code.Unset()
}

// GetCategory returns the Category field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CatalogItemTypeBlueprintCreate) GetCategory() string {
	if o == nil || o.Category.Get() == nil {
		var ret string
		return ret
	}
	return *o.Category.Get()
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CatalogItemTypeBlueprintCreate) GetCategoryOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Category.Get(), o.Category.IsSet()
}

// HasCategory returns a boolean if a field has been set.
func (o *CatalogItemTypeBlueprintCreate) HasCategory() bool {
	if o != nil && o.Category.IsSet() {
		return true
	}

	return false
}

// SetCategory gets a reference to the given NullableString and assigns it to the Category field.
func (o *CatalogItemTypeBlueprintCreate) SetCategory(v string) {
	o.Category.Set(&v)
}
// SetCategoryNil sets the value for Category to be an explicit nil
func (o *CatalogItemTypeBlueprintCreate) SetCategoryNil() {
	o.Category.Set(nil)
}

// UnsetCategory ensures that no value is present for Category, not even an explicit nil
func (o *CatalogItemTypeBlueprintCreate) UnsetCategory() {
	o.Category.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CatalogItemTypeBlueprintCreate) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogItemTypeBlueprintCreate) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CatalogItemTypeBlueprintCreate) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CatalogItemTypeBlueprintCreate) SetDescription(v string) {
	o.Description = &v
}

// GetLabels returns the Labels field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CatalogItemTypeBlueprintCreate) GetLabels() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CatalogItemTypeBlueprintCreate) GetLabelsOk() (*[]string, bool) {
	if o == nil || o.Labels == nil {
		return nil, false
	}
	return &o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *CatalogItemTypeBlueprintCreate) HasLabels() bool {
	if o != nil && o.Labels != nil {
		return true
	}

	return false
}

// SetLabels gets a reference to the given []string and assigns it to the Labels field.
func (o *CatalogItemTypeBlueprintCreate) SetLabels(v []string) {
	o.Labels = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *CatalogItemTypeBlueprintCreate) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogItemTypeBlueprintCreate) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *CatalogItemTypeBlueprintCreate) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *CatalogItemTypeBlueprintCreate) SetType(v string) {
	o.Type = &v
}

// GetVisibility returns the Visibility field value if set, zero value otherwise.
func (o *CatalogItemTypeBlueprintCreate) GetVisibility() string {
	if o == nil || o.Visibility == nil {
		var ret string
		return ret
	}
	return *o.Visibility
}

// GetVisibilityOk returns a tuple with the Visibility field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogItemTypeBlueprintCreate) GetVisibilityOk() (*string, bool) {
	if o == nil || o.Visibility == nil {
		return nil, false
	}
	return o.Visibility, true
}

// HasVisibility returns a boolean if a field has been set.
func (o *CatalogItemTypeBlueprintCreate) HasVisibility() bool {
	if o != nil && o.Visibility != nil {
		return true
	}

	return false
}

// SetVisibility gets a reference to the given string and assigns it to the Visibility field.
func (o *CatalogItemTypeBlueprintCreate) SetVisibility(v string) {
	o.Visibility = &v
}

// GetLayoutCode returns the LayoutCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CatalogItemTypeBlueprintCreate) GetLayoutCode() string {
	if o == nil || o.LayoutCode.Get() == nil {
		var ret string
		return ret
	}
	return *o.LayoutCode.Get()
}

// GetLayoutCodeOk returns a tuple with the LayoutCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CatalogItemTypeBlueprintCreate) GetLayoutCodeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LayoutCode.Get(), o.LayoutCode.IsSet()
}

// HasLayoutCode returns a boolean if a field has been set.
func (o *CatalogItemTypeBlueprintCreate) HasLayoutCode() bool {
	if o != nil && o.LayoutCode.IsSet() {
		return true
	}

	return false
}

// SetLayoutCode gets a reference to the given NullableString and assigns it to the LayoutCode field.
func (o *CatalogItemTypeBlueprintCreate) SetLayoutCode(v string) {
	o.LayoutCode.Set(&v)
}
// SetLayoutCodeNil sets the value for LayoutCode to be an explicit nil
func (o *CatalogItemTypeBlueprintCreate) SetLayoutCodeNil() {
	o.LayoutCode.Set(nil)
}

// UnsetLayoutCode ensures that no value is present for LayoutCode, not even an explicit nil
func (o *CatalogItemTypeBlueprintCreate) UnsetLayoutCode() {
	o.LayoutCode.Unset()
}

// GetIconPath returns the IconPath field value if set, zero value otherwise.
func (o *CatalogItemTypeBlueprintCreate) GetIconPath() string {
	if o == nil || o.IconPath == nil {
		var ret string
		return ret
	}
	return *o.IconPath
}

// GetIconPathOk returns a tuple with the IconPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogItemTypeBlueprintCreate) GetIconPathOk() (*string, bool) {
	if o == nil || o.IconPath == nil {
		return nil, false
	}
	return o.IconPath, true
}

// HasIconPath returns a boolean if a field has been set.
func (o *CatalogItemTypeBlueprintCreate) HasIconPath() bool {
	if o != nil && o.IconPath != nil {
		return true
	}

	return false
}

// SetIconPath gets a reference to the given string and assigns it to the IconPath field.
func (o *CatalogItemTypeBlueprintCreate) SetIconPath(v string) {
	o.IconPath = &v
}

// GetAllowQuantity returns the AllowQuantity field value if set, zero value otherwise.
func (o *CatalogItemTypeBlueprintCreate) GetAllowQuantity() bool {
	if o == nil || o.AllowQuantity == nil {
		var ret bool
		return ret
	}
	return *o.AllowQuantity
}

// GetAllowQuantityOk returns a tuple with the AllowQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogItemTypeBlueprintCreate) GetAllowQuantityOk() (*bool, bool) {
	if o == nil || o.AllowQuantity == nil {
		return nil, false
	}
	return o.AllowQuantity, true
}

// HasAllowQuantity returns a boolean if a field has been set.
func (o *CatalogItemTypeBlueprintCreate) HasAllowQuantity() bool {
	if o != nil && o.AllowQuantity != nil {
		return true
	}

	return false
}

// SetAllowQuantity gets a reference to the given bool and assigns it to the AllowQuantity field.
func (o *CatalogItemTypeBlueprintCreate) SetAllowQuantity(v bool) {
	o.AllowQuantity = &v
}

// GetBlueprint returns the Blueprint field value
func (o *CatalogItemTypeBlueprintCreate) GetBlueprint() CatalogItemTypeBlueprintCreateBlueprint {
	if o == nil  {
		var ret CatalogItemTypeBlueprintCreateBlueprint
		return ret
	}

	return o.Blueprint
}

// GetBlueprintOk returns a tuple with the Blueprint field value
// and a boolean to check if the value has been set.
func (o *CatalogItemTypeBlueprintCreate) GetBlueprintOk() (*CatalogItemTypeBlueprintCreateBlueprint, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Blueprint, true
}

// SetBlueprint sets field value
func (o *CatalogItemTypeBlueprintCreate) SetBlueprint(v CatalogItemTypeBlueprintCreateBlueprint) {
	o.Blueprint = v
}

// GetAppSpec returns the AppSpec field value if set, zero value otherwise.
func (o *CatalogItemTypeBlueprintCreate) GetAppSpec() string {
	if o == nil || o.AppSpec == nil {
		var ret string
		return ret
	}
	return *o.AppSpec
}

// GetAppSpecOk returns a tuple with the AppSpec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogItemTypeBlueprintCreate) GetAppSpecOk() (*string, bool) {
	if o == nil || o.AppSpec == nil {
		return nil, false
	}
	return o.AppSpec, true
}

// HasAppSpec returns a boolean if a field has been set.
func (o *CatalogItemTypeBlueprintCreate) HasAppSpec() bool {
	if o != nil && o.AppSpec != nil {
		return true
	}

	return false
}

// SetAppSpec gets a reference to the given string and assigns it to the AppSpec field.
func (o *CatalogItemTypeBlueprintCreate) SetAppSpec(v string) {
	o.AppSpec = &v
}

// GetOptionTypes returns the OptionTypes field value if set, zero value otherwise.
func (o *CatalogItemTypeBlueprintCreate) GetOptionTypes() []int64 {
	if o == nil || o.OptionTypes == nil {
		var ret []int64
		return ret
	}
	return *o.OptionTypes
}

// GetOptionTypesOk returns a tuple with the OptionTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogItemTypeBlueprintCreate) GetOptionTypesOk() (*[]int64, bool) {
	if o == nil || o.OptionTypes == nil {
		return nil, false
	}
	return o.OptionTypes, true
}

// HasOptionTypes returns a boolean if a field has been set.
func (o *CatalogItemTypeBlueprintCreate) HasOptionTypes() bool {
	if o != nil && o.OptionTypes != nil {
		return true
	}

	return false
}

// SetOptionTypes gets a reference to the given []int64 and assigns it to the OptionTypes field.
func (o *CatalogItemTypeBlueprintCreate) SetOptionTypes(v []int64) {
	o.OptionTypes = &v
}

func (o CatalogItemTypeBlueprintCreate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Code.IsSet() {
		toSerialize["code"] = o.Code.Get()
	}
	if o.Category.IsSet() {
		toSerialize["category"] = o.Category.Get()
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Labels != nil {
		toSerialize["labels"] = o.Labels
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Visibility != nil {
		toSerialize["visibility"] = o.Visibility
	}
	if o.LayoutCode.IsSet() {
		toSerialize["layoutCode"] = o.LayoutCode.Get()
	}
	if o.IconPath != nil {
		toSerialize["iconPath"] = o.IconPath
	}
	if o.AllowQuantity != nil {
		toSerialize["allowQuantity"] = o.AllowQuantity
	}
	if true {
		toSerialize["blueprint"] = o.Blueprint
	}
	if o.AppSpec != nil {
		toSerialize["appSpec"] = o.AppSpec
	}
	if o.OptionTypes != nil {
		toSerialize["optionTypes"] = o.OptionTypes
	}
	return json.Marshal(toSerialize)
}

type NullableCatalogItemTypeBlueprintCreate struct {
	value *CatalogItemTypeBlueprintCreate
	isSet bool
}

func (v NullableCatalogItemTypeBlueprintCreate) Get() *CatalogItemTypeBlueprintCreate {
	return v.value
}

func (v *NullableCatalogItemTypeBlueprintCreate) Set(val *CatalogItemTypeBlueprintCreate) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogItemTypeBlueprintCreate) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogItemTypeBlueprintCreate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogItemTypeBlueprintCreate(val *CatalogItemTypeBlueprintCreate) *NullableCatalogItemTypeBlueprintCreate {
	return &NullableCatalogItemTypeBlueprintCreate{value: val, isSet: true}
}

func (v NullableCatalogItemTypeBlueprintCreate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogItemTypeBlueprintCreate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


