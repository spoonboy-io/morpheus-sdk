/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// BudgetStatsIntervals struct for BudgetStatsIntervals
type BudgetStatsIntervals struct {
	Index *int64 `json:"index,omitempty"`
	Month *string `json:"month,omitempty"`
	ShortName *string `json:"shortName,omitempty"`
	ChartName *string `json:"chartName,omitempty"`
	Budget *int64 `json:"budget,omitempty"`
	Cost *float32 `json:"cost,omitempty"`
	StartDate *time.Time `json:"startDate,omitempty"`
	EndDate *time.Time `json:"endDate,omitempty"`
}

// NewBudgetStatsIntervals instantiates a new BudgetStatsIntervals object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBudgetStatsIntervals() *BudgetStatsIntervals {
	this := BudgetStatsIntervals{}
	return &this
}

// NewBudgetStatsIntervalsWithDefaults instantiates a new BudgetStatsIntervals object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBudgetStatsIntervalsWithDefaults() *BudgetStatsIntervals {
	this := BudgetStatsIntervals{}
	return &this
}

// GetIndex returns the Index field value if set, zero value otherwise.
func (o *BudgetStatsIntervals) GetIndex() int64 {
	if o == nil || o.Index == nil {
		var ret int64
		return ret
	}
	return *o.Index
}

// GetIndexOk returns a tuple with the Index field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BudgetStatsIntervals) GetIndexOk() (*int64, bool) {
	if o == nil || o.Index == nil {
		return nil, false
	}
	return o.Index, true
}

// HasIndex returns a boolean if a field has been set.
func (o *BudgetStatsIntervals) HasIndex() bool {
	if o != nil && o.Index != nil {
		return true
	}

	return false
}

// SetIndex gets a reference to the given int64 and assigns it to the Index field.
func (o *BudgetStatsIntervals) SetIndex(v int64) {
	o.Index = &v
}

// GetMonth returns the Month field value if set, zero value otherwise.
func (o *BudgetStatsIntervals) GetMonth() string {
	if o == nil || o.Month == nil {
		var ret string
		return ret
	}
	return *o.Month
}

// GetMonthOk returns a tuple with the Month field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BudgetStatsIntervals) GetMonthOk() (*string, bool) {
	if o == nil || o.Month == nil {
		return nil, false
	}
	return o.Month, true
}

// HasMonth returns a boolean if a field has been set.
func (o *BudgetStatsIntervals) HasMonth() bool {
	if o != nil && o.Month != nil {
		return true
	}

	return false
}

// SetMonth gets a reference to the given string and assigns it to the Month field.
func (o *BudgetStatsIntervals) SetMonth(v string) {
	o.Month = &v
}

// GetShortName returns the ShortName field value if set, zero value otherwise.
func (o *BudgetStatsIntervals) GetShortName() string {
	if o == nil || o.ShortName == nil {
		var ret string
		return ret
	}
	return *o.ShortName
}

// GetShortNameOk returns a tuple with the ShortName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BudgetStatsIntervals) GetShortNameOk() (*string, bool) {
	if o == nil || o.ShortName == nil {
		return nil, false
	}
	return o.ShortName, true
}

// HasShortName returns a boolean if a field has been set.
func (o *BudgetStatsIntervals) HasShortName() bool {
	if o != nil && o.ShortName != nil {
		return true
	}

	return false
}

// SetShortName gets a reference to the given string and assigns it to the ShortName field.
func (o *BudgetStatsIntervals) SetShortName(v string) {
	o.ShortName = &v
}

// GetChartName returns the ChartName field value if set, zero value otherwise.
func (o *BudgetStatsIntervals) GetChartName() string {
	if o == nil || o.ChartName == nil {
		var ret string
		return ret
	}
	return *o.ChartName
}

// GetChartNameOk returns a tuple with the ChartName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BudgetStatsIntervals) GetChartNameOk() (*string, bool) {
	if o == nil || o.ChartName == nil {
		return nil, false
	}
	return o.ChartName, true
}

// HasChartName returns a boolean if a field has been set.
func (o *BudgetStatsIntervals) HasChartName() bool {
	if o != nil && o.ChartName != nil {
		return true
	}

	return false
}

// SetChartName gets a reference to the given string and assigns it to the ChartName field.
func (o *BudgetStatsIntervals) SetChartName(v string) {
	o.ChartName = &v
}

// GetBudget returns the Budget field value if set, zero value otherwise.
func (o *BudgetStatsIntervals) GetBudget() int64 {
	if o == nil || o.Budget == nil {
		var ret int64
		return ret
	}
	return *o.Budget
}

// GetBudgetOk returns a tuple with the Budget field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BudgetStatsIntervals) GetBudgetOk() (*int64, bool) {
	if o == nil || o.Budget == nil {
		return nil, false
	}
	return o.Budget, true
}

// HasBudget returns a boolean if a field has been set.
func (o *BudgetStatsIntervals) HasBudget() bool {
	if o != nil && o.Budget != nil {
		return true
	}

	return false
}

// SetBudget gets a reference to the given int64 and assigns it to the Budget field.
func (o *BudgetStatsIntervals) SetBudget(v int64) {
	o.Budget = &v
}

// GetCost returns the Cost field value if set, zero value otherwise.
func (o *BudgetStatsIntervals) GetCost() float32 {
	if o == nil || o.Cost == nil {
		var ret float32
		return ret
	}
	return *o.Cost
}

// GetCostOk returns a tuple with the Cost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BudgetStatsIntervals) GetCostOk() (*float32, bool) {
	if o == nil || o.Cost == nil {
		return nil, false
	}
	return o.Cost, true
}

// HasCost returns a boolean if a field has been set.
func (o *BudgetStatsIntervals) HasCost() bool {
	if o != nil && o.Cost != nil {
		return true
	}

	return false
}

// SetCost gets a reference to the given float32 and assigns it to the Cost field.
func (o *BudgetStatsIntervals) SetCost(v float32) {
	o.Cost = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *BudgetStatsIntervals) GetStartDate() time.Time {
	if o == nil || o.StartDate == nil {
		var ret time.Time
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BudgetStatsIntervals) GetStartDateOk() (*time.Time, bool) {
	if o == nil || o.StartDate == nil {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *BudgetStatsIntervals) HasStartDate() bool {
	if o != nil && o.StartDate != nil {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given time.Time and assigns it to the StartDate field.
func (o *BudgetStatsIntervals) SetStartDate(v time.Time) {
	o.StartDate = &v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *BudgetStatsIntervals) GetEndDate() time.Time {
	if o == nil || o.EndDate == nil {
		var ret time.Time
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BudgetStatsIntervals) GetEndDateOk() (*time.Time, bool) {
	if o == nil || o.EndDate == nil {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *BudgetStatsIntervals) HasEndDate() bool {
	if o != nil && o.EndDate != nil {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given time.Time and assigns it to the EndDate field.
func (o *BudgetStatsIntervals) SetEndDate(v time.Time) {
	o.EndDate = &v
}

func (o BudgetStatsIntervals) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Index != nil {
		toSerialize["index"] = o.Index
	}
	if o.Month != nil {
		toSerialize["month"] = o.Month
	}
	if o.ShortName != nil {
		toSerialize["shortName"] = o.ShortName
	}
	if o.ChartName != nil {
		toSerialize["chartName"] = o.ChartName
	}
	if o.Budget != nil {
		toSerialize["budget"] = o.Budget
	}
	if o.Cost != nil {
		toSerialize["cost"] = o.Cost
	}
	if o.StartDate != nil {
		toSerialize["startDate"] = o.StartDate
	}
	if o.EndDate != nil {
		toSerialize["endDate"] = o.EndDate
	}
	return json.Marshal(toSerialize)
}

type NullableBudgetStatsIntervals struct {
	value *BudgetStatsIntervals
	isSet bool
}

func (v NullableBudgetStatsIntervals) Get() *BudgetStatsIntervals {
	return v.value
}

func (v *NullableBudgetStatsIntervals) Set(val *BudgetStatsIntervals) {
	v.value = val
	v.isSet = true
}

func (v NullableBudgetStatsIntervals) IsSet() bool {
	return v.isSet
}

func (v *NullableBudgetStatsIntervals) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBudgetStatsIntervals(val *BudgetStatsIntervals) *NullableBudgetStatsIntervals {
	return &NullableBudgetStatsIntervals{value: val, isSet: true}
}

func (v NullableBudgetStatsIntervals) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBudgetStatsIntervals) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


