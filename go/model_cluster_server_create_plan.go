/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ClusterServerCreatePlan struct for ClusterServerCreatePlan
type ClusterServerCreatePlan struct {
	// The id for the memory and storage option pre-configured within Morpheus.
	Id *int64 `json:"id,omitempty"`
	// The code for the memory and storage option pre-configured within Morpheus.
	Code *string `json:"code,omitempty"`
	// Map of custom options depending on selected service plan . An example would be `maxMemory`, or `maxCores`.
	Options *map[string]interface{} `json:"options,omitempty"`
}

// NewClusterServerCreatePlan instantiates a new ClusterServerCreatePlan object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClusterServerCreatePlan() *ClusterServerCreatePlan {
	this := ClusterServerCreatePlan{}
	return &this
}

// NewClusterServerCreatePlanWithDefaults instantiates a new ClusterServerCreatePlan object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClusterServerCreatePlanWithDefaults() *ClusterServerCreatePlan {
	this := ClusterServerCreatePlan{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ClusterServerCreatePlan) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterServerCreatePlan) GetIdOk() (*int64, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ClusterServerCreatePlan) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *ClusterServerCreatePlan) SetId(v int64) {
	o.Id = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *ClusterServerCreatePlan) GetCode() string {
	if o == nil || o.Code == nil {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterServerCreatePlan) GetCodeOk() (*string, bool) {
	if o == nil || o.Code == nil {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *ClusterServerCreatePlan) HasCode() bool {
	if o != nil && o.Code != nil {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *ClusterServerCreatePlan) SetCode(v string) {
	o.Code = &v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *ClusterServerCreatePlan) GetOptions() map[string]interface{} {
	if o == nil || o.Options == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterServerCreatePlan) GetOptionsOk() (*map[string]interface{}, bool) {
	if o == nil || o.Options == nil {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *ClusterServerCreatePlan) HasOptions() bool {
	if o != nil && o.Options != nil {
		return true
	}

	return false
}

// SetOptions gets a reference to the given map[string]interface{} and assigns it to the Options field.
func (o *ClusterServerCreatePlan) SetOptions(v map[string]interface{}) {
	o.Options = &v
}

func (o ClusterServerCreatePlan) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Code != nil {
		toSerialize["code"] = o.Code
	}
	if o.Options != nil {
		toSerialize["options"] = o.Options
	}
	return json.Marshal(toSerialize)
}

type NullableClusterServerCreatePlan struct {
	value *ClusterServerCreatePlan
	isSet bool
}

func (v NullableClusterServerCreatePlan) Get() *ClusterServerCreatePlan {
	return v.value
}

func (v *NullableClusterServerCreatePlan) Set(val *ClusterServerCreatePlan) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterServerCreatePlan) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterServerCreatePlan) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterServerCreatePlan(val *ClusterServerCreatePlan) *NullableClusterServerCreatePlan {
	return &NullableClusterServerCreatePlan{value: val, isSet: true}
}

func (v NullableClusterServerCreatePlan) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterServerCreatePlan) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


