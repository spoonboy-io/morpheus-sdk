/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InlineResponse200126 struct for InlineResponse200126
type InlineResponse200126 struct {
	License *ProvisioningLicense `json:"license,omitempty"`
}

// NewInlineResponse200126 instantiates a new InlineResponse200126 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse200126() *InlineResponse200126 {
	this := InlineResponse200126{}
	return &this
}

// NewInlineResponse200126WithDefaults instantiates a new InlineResponse200126 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse200126WithDefaults() *InlineResponse200126 {
	this := InlineResponse200126{}
	return &this
}

// GetLicense returns the License field value if set, zero value otherwise.
func (o *InlineResponse200126) GetLicense() ProvisioningLicense {
	if o == nil || o.License == nil {
		var ret ProvisioningLicense
		return ret
	}
	return *o.License
}

// GetLicenseOk returns a tuple with the License field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200126) GetLicenseOk() (*ProvisioningLicense, bool) {
	if o == nil || o.License == nil {
		return nil, false
	}
	return o.License, true
}

// HasLicense returns a boolean if a field has been set.
func (o *InlineResponse200126) HasLicense() bool {
	if o != nil && o.License != nil {
		return true
	}

	return false
}

// SetLicense gets a reference to the given ProvisioningLicense and assigns it to the License field.
func (o *InlineResponse200126) SetLicense(v ProvisioningLicense) {
	o.License = &v
}

func (o InlineResponse200126) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.License != nil {
		toSerialize["license"] = o.License
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse200126 struct {
	value *InlineResponse200126
	isSet bool
}

func (v NullableInlineResponse200126) Get() *InlineResponse200126 {
	return v.value
}

func (v *NullableInlineResponse200126) Set(val *InlineResponse200126) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse200126) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse200126) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse200126(val *InlineResponse200126) *NullableInlineResponse200126 {
	return &NullableInlineResponse200126{value: val, isSet: true}
}

func (v NullableInlineResponse200126) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse200126) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


