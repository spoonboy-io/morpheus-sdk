/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// LineItem struct for LineItem
type LineItem struct {
	Id *int64 `json:"id,omitempty"`
	InvoiceId *int64 `json:"invoiceId,omitempty"`
	RefType *string `json:"refType,omitempty"`
	RefId *int64 `json:"refId,omitempty"`
	RefName *string `json:"refName,omitempty"`
	StartDate *time.Time `json:"startDate,omitempty"`
	EndDate *time.Time `json:"endDate,omitempty"`
	ItemId NullableString `json:"itemId,omitempty"`
	ItemType NullableString `json:"itemType,omitempty"`
	ItemName NullableString `json:"itemName,omitempty"`
	ItemDescription NullableString `json:"itemDescription,omitempty"`
	ProductId NullableString `json:"productId,omitempty"`
	ProductCode NullableString `json:"productCode,omitempty"`
	ProductName NullableString `json:"productName,omitempty"`
	ItemSeller NullableString `json:"itemSeller,omitempty"`
	ItemAction NullableString `json:"itemAction,omitempty"`
	ExternalId *string `json:"externalId,omitempty"`
	RateId NullableString `json:"rateId,omitempty"`
	RateClass NullableString `json:"rateClass,omitempty"`
	RateUnit *string `json:"rateUnit,omitempty"`
	RateTerm NullableString `json:"rateTerm,omitempty"`
	UsageType *string `json:"usageType,omitempty"`
	UsageCategory *string `json:"usageCategory,omitempty"`
	UsageService NullableString `json:"usageService,omitempty"`
	ItemUsage *int64 `json:"itemUsage,omitempty"`
	ItemRate *float32 `json:"itemRate,omitempty"`
	ItemCost *float32 `json:"itemCost,omitempty"`
	ItemPriceRate *float32 `json:"itemPriceRate,omitempty"`
	ItemPrice *float32 `json:"itemPrice,omitempty"`
	ItemTax *int64 `json:"itemTax,omitempty"`
	ItemTerm NullableString `json:"itemTerm,omitempty"`
	TaxType NullableString `json:"taxType,omitempty"`
	RegionCode NullableString `json:"regionCode,omitempty"`
	Currency *string `json:"currency,omitempty"`
	ConversionRate *int64 `json:"conversionRate,omitempty"`
	DateCreated *time.Time `json:"dateCreated,omitempty"`
	LastUpdated *time.Time `json:"lastUpdated,omitempty"`
}

// NewLineItem instantiates a new LineItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLineItem() *LineItem {
	this := LineItem{}
	return &this
}

// NewLineItemWithDefaults instantiates a new LineItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLineItemWithDefaults() *LineItem {
	this := LineItem{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *LineItem) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LineItem) GetIdOk() (*int64, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *LineItem) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *LineItem) SetId(v int64) {
	o.Id = &v
}

// GetInvoiceId returns the InvoiceId field value if set, zero value otherwise.
func (o *LineItem) GetInvoiceId() int64 {
	if o == nil || o.InvoiceId == nil {
		var ret int64
		return ret
	}
	return *o.InvoiceId
}

// GetInvoiceIdOk returns a tuple with the InvoiceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LineItem) GetInvoiceIdOk() (*int64, bool) {
	if o == nil || o.InvoiceId == nil {
		return nil, false
	}
	return o.InvoiceId, true
}

// HasInvoiceId returns a boolean if a field has been set.
func (o *LineItem) HasInvoiceId() bool {
	if o != nil && o.InvoiceId != nil {
		return true
	}

	return false
}

// SetInvoiceId gets a reference to the given int64 and assigns it to the InvoiceId field.
func (o *LineItem) SetInvoiceId(v int64) {
	o.InvoiceId = &v
}

// GetRefType returns the RefType field value if set, zero value otherwise.
func (o *LineItem) GetRefType() string {
	if o == nil || o.RefType == nil {
		var ret string
		return ret
	}
	return *o.RefType
}

// GetRefTypeOk returns a tuple with the RefType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LineItem) GetRefTypeOk() (*string, bool) {
	if o == nil || o.RefType == nil {
		return nil, false
	}
	return o.RefType, true
}

// HasRefType returns a boolean if a field has been set.
func (o *LineItem) HasRefType() bool {
	if o != nil && o.RefType != nil {
		return true
	}

	return false
}

// SetRefType gets a reference to the given string and assigns it to the RefType field.
func (o *LineItem) SetRefType(v string) {
	o.RefType = &v
}

// GetRefId returns the RefId field value if set, zero value otherwise.
func (o *LineItem) GetRefId() int64 {
	if o == nil || o.RefId == nil {
		var ret int64
		return ret
	}
	return *o.RefId
}

// GetRefIdOk returns a tuple with the RefId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LineItem) GetRefIdOk() (*int64, bool) {
	if o == nil || o.RefId == nil {
		return nil, false
	}
	return o.RefId, true
}

// HasRefId returns a boolean if a field has been set.
func (o *LineItem) HasRefId() bool {
	if o != nil && o.RefId != nil {
		return true
	}

	return false
}

// SetRefId gets a reference to the given int64 and assigns it to the RefId field.
func (o *LineItem) SetRefId(v int64) {
	o.RefId = &v
}

// GetRefName returns the RefName field value if set, zero value otherwise.
func (o *LineItem) GetRefName() string {
	if o == nil || o.RefName == nil {
		var ret string
		return ret
	}
	return *o.RefName
}

// GetRefNameOk returns a tuple with the RefName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LineItem) GetRefNameOk() (*string, bool) {
	if o == nil || o.RefName == nil {
		return nil, false
	}
	return o.RefName, true
}

// HasRefName returns a boolean if a field has been set.
func (o *LineItem) HasRefName() bool {
	if o != nil && o.RefName != nil {
		return true
	}

	return false
}

// SetRefName gets a reference to the given string and assigns it to the RefName field.
func (o *LineItem) SetRefName(v string) {
	o.RefName = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *LineItem) GetStartDate() time.Time {
	if o == nil || o.StartDate == nil {
		var ret time.Time
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LineItem) GetStartDateOk() (*time.Time, bool) {
	if o == nil || o.StartDate == nil {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *LineItem) HasStartDate() bool {
	if o != nil && o.StartDate != nil {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given time.Time and assigns it to the StartDate field.
func (o *LineItem) SetStartDate(v time.Time) {
	o.StartDate = &v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *LineItem) GetEndDate() time.Time {
	if o == nil || o.EndDate == nil {
		var ret time.Time
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LineItem) GetEndDateOk() (*time.Time, bool) {
	if o == nil || o.EndDate == nil {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *LineItem) HasEndDate() bool {
	if o != nil && o.EndDate != nil {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given time.Time and assigns it to the EndDate field.
func (o *LineItem) SetEndDate(v time.Time) {
	o.EndDate = &v
}

// GetItemId returns the ItemId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LineItem) GetItemId() string {
	if o == nil || o.ItemId.Get() == nil {
		var ret string
		return ret
	}
	return *o.ItemId.Get()
}

// GetItemIdOk returns a tuple with the ItemId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LineItem) GetItemIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ItemId.Get(), o.ItemId.IsSet()
}

// HasItemId returns a boolean if a field has been set.
func (o *LineItem) HasItemId() bool {
	if o != nil && o.ItemId.IsSet() {
		return true
	}

	return false
}

// SetItemId gets a reference to the given NullableString and assigns it to the ItemId field.
func (o *LineItem) SetItemId(v string) {
	o.ItemId.Set(&v)
}
// SetItemIdNil sets the value for ItemId to be an explicit nil
func (o *LineItem) SetItemIdNil() {
	o.ItemId.Set(nil)
}

// UnsetItemId ensures that no value is present for ItemId, not even an explicit nil
func (o *LineItem) UnsetItemId() {
	o.ItemId.Unset()
}

// GetItemType returns the ItemType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LineItem) GetItemType() string {
	if o == nil || o.ItemType.Get() == nil {
		var ret string
		return ret
	}
	return *o.ItemType.Get()
}

// GetItemTypeOk returns a tuple with the ItemType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LineItem) GetItemTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ItemType.Get(), o.ItemType.IsSet()
}

// HasItemType returns a boolean if a field has been set.
func (o *LineItem) HasItemType() bool {
	if o != nil && o.ItemType.IsSet() {
		return true
	}

	return false
}

// SetItemType gets a reference to the given NullableString and assigns it to the ItemType field.
func (o *LineItem) SetItemType(v string) {
	o.ItemType.Set(&v)
}
// SetItemTypeNil sets the value for ItemType to be an explicit nil
func (o *LineItem) SetItemTypeNil() {
	o.ItemType.Set(nil)
}

// UnsetItemType ensures that no value is present for ItemType, not even an explicit nil
func (o *LineItem) UnsetItemType() {
	o.ItemType.Unset()
}

// GetItemName returns the ItemName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LineItem) GetItemName() string {
	if o == nil || o.ItemName.Get() == nil {
		var ret string
		return ret
	}
	return *o.ItemName.Get()
}

// GetItemNameOk returns a tuple with the ItemName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LineItem) GetItemNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ItemName.Get(), o.ItemName.IsSet()
}

// HasItemName returns a boolean if a field has been set.
func (o *LineItem) HasItemName() bool {
	if o != nil && o.ItemName.IsSet() {
		return true
	}

	return false
}

// SetItemName gets a reference to the given NullableString and assigns it to the ItemName field.
func (o *LineItem) SetItemName(v string) {
	o.ItemName.Set(&v)
}
// SetItemNameNil sets the value for ItemName to be an explicit nil
func (o *LineItem) SetItemNameNil() {
	o.ItemName.Set(nil)
}

// UnsetItemName ensures that no value is present for ItemName, not even an explicit nil
func (o *LineItem) UnsetItemName() {
	o.ItemName.Unset()
}

// GetItemDescription returns the ItemDescription field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LineItem) GetItemDescription() string {
	if o == nil || o.ItemDescription.Get() == nil {
		var ret string
		return ret
	}
	return *o.ItemDescription.Get()
}

// GetItemDescriptionOk returns a tuple with the ItemDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LineItem) GetItemDescriptionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ItemDescription.Get(), o.ItemDescription.IsSet()
}

// HasItemDescription returns a boolean if a field has been set.
func (o *LineItem) HasItemDescription() bool {
	if o != nil && o.ItemDescription.IsSet() {
		return true
	}

	return false
}

// SetItemDescription gets a reference to the given NullableString and assigns it to the ItemDescription field.
func (o *LineItem) SetItemDescription(v string) {
	o.ItemDescription.Set(&v)
}
// SetItemDescriptionNil sets the value for ItemDescription to be an explicit nil
func (o *LineItem) SetItemDescriptionNil() {
	o.ItemDescription.Set(nil)
}

// UnsetItemDescription ensures that no value is present for ItemDescription, not even an explicit nil
func (o *LineItem) UnsetItemDescription() {
	o.ItemDescription.Unset()
}

// GetProductId returns the ProductId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LineItem) GetProductId() string {
	if o == nil || o.ProductId.Get() == nil {
		var ret string
		return ret
	}
	return *o.ProductId.Get()
}

// GetProductIdOk returns a tuple with the ProductId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LineItem) GetProductIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ProductId.Get(), o.ProductId.IsSet()
}

// HasProductId returns a boolean if a field has been set.
func (o *LineItem) HasProductId() bool {
	if o != nil && o.ProductId.IsSet() {
		return true
	}

	return false
}

// SetProductId gets a reference to the given NullableString and assigns it to the ProductId field.
func (o *LineItem) SetProductId(v string) {
	o.ProductId.Set(&v)
}
// SetProductIdNil sets the value for ProductId to be an explicit nil
func (o *LineItem) SetProductIdNil() {
	o.ProductId.Set(nil)
}

// UnsetProductId ensures that no value is present for ProductId, not even an explicit nil
func (o *LineItem) UnsetProductId() {
	o.ProductId.Unset()
}

// GetProductCode returns the ProductCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LineItem) GetProductCode() string {
	if o == nil || o.ProductCode.Get() == nil {
		var ret string
		return ret
	}
	return *o.ProductCode.Get()
}

// GetProductCodeOk returns a tuple with the ProductCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LineItem) GetProductCodeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ProductCode.Get(), o.ProductCode.IsSet()
}

// HasProductCode returns a boolean if a field has been set.
func (o *LineItem) HasProductCode() bool {
	if o != nil && o.ProductCode.IsSet() {
		return true
	}

	return false
}

// SetProductCode gets a reference to the given NullableString and assigns it to the ProductCode field.
func (o *LineItem) SetProductCode(v string) {
	o.ProductCode.Set(&v)
}
// SetProductCodeNil sets the value for ProductCode to be an explicit nil
func (o *LineItem) SetProductCodeNil() {
	o.ProductCode.Set(nil)
}

// UnsetProductCode ensures that no value is present for ProductCode, not even an explicit nil
func (o *LineItem) UnsetProductCode() {
	o.ProductCode.Unset()
}

// GetProductName returns the ProductName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LineItem) GetProductName() string {
	if o == nil || o.ProductName.Get() == nil {
		var ret string
		return ret
	}
	return *o.ProductName.Get()
}

// GetProductNameOk returns a tuple with the ProductName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LineItem) GetProductNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ProductName.Get(), o.ProductName.IsSet()
}

// HasProductName returns a boolean if a field has been set.
func (o *LineItem) HasProductName() bool {
	if o != nil && o.ProductName.IsSet() {
		return true
	}

	return false
}

// SetProductName gets a reference to the given NullableString and assigns it to the ProductName field.
func (o *LineItem) SetProductName(v string) {
	o.ProductName.Set(&v)
}
// SetProductNameNil sets the value for ProductName to be an explicit nil
func (o *LineItem) SetProductNameNil() {
	o.ProductName.Set(nil)
}

// UnsetProductName ensures that no value is present for ProductName, not even an explicit nil
func (o *LineItem) UnsetProductName() {
	o.ProductName.Unset()
}

// GetItemSeller returns the ItemSeller field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LineItem) GetItemSeller() string {
	if o == nil || o.ItemSeller.Get() == nil {
		var ret string
		return ret
	}
	return *o.ItemSeller.Get()
}

// GetItemSellerOk returns a tuple with the ItemSeller field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LineItem) GetItemSellerOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ItemSeller.Get(), o.ItemSeller.IsSet()
}

// HasItemSeller returns a boolean if a field has been set.
func (o *LineItem) HasItemSeller() bool {
	if o != nil && o.ItemSeller.IsSet() {
		return true
	}

	return false
}

// SetItemSeller gets a reference to the given NullableString and assigns it to the ItemSeller field.
func (o *LineItem) SetItemSeller(v string) {
	o.ItemSeller.Set(&v)
}
// SetItemSellerNil sets the value for ItemSeller to be an explicit nil
func (o *LineItem) SetItemSellerNil() {
	o.ItemSeller.Set(nil)
}

// UnsetItemSeller ensures that no value is present for ItemSeller, not even an explicit nil
func (o *LineItem) UnsetItemSeller() {
	o.ItemSeller.Unset()
}

// GetItemAction returns the ItemAction field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LineItem) GetItemAction() string {
	if o == nil || o.ItemAction.Get() == nil {
		var ret string
		return ret
	}
	return *o.ItemAction.Get()
}

// GetItemActionOk returns a tuple with the ItemAction field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LineItem) GetItemActionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ItemAction.Get(), o.ItemAction.IsSet()
}

// HasItemAction returns a boolean if a field has been set.
func (o *LineItem) HasItemAction() bool {
	if o != nil && o.ItemAction.IsSet() {
		return true
	}

	return false
}

// SetItemAction gets a reference to the given NullableString and assigns it to the ItemAction field.
func (o *LineItem) SetItemAction(v string) {
	o.ItemAction.Set(&v)
}
// SetItemActionNil sets the value for ItemAction to be an explicit nil
func (o *LineItem) SetItemActionNil() {
	o.ItemAction.Set(nil)
}

// UnsetItemAction ensures that no value is present for ItemAction, not even an explicit nil
func (o *LineItem) UnsetItemAction() {
	o.ItemAction.Unset()
}

// GetExternalId returns the ExternalId field value if set, zero value otherwise.
func (o *LineItem) GetExternalId() string {
	if o == nil || o.ExternalId == nil {
		var ret string
		return ret
	}
	return *o.ExternalId
}

// GetExternalIdOk returns a tuple with the ExternalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LineItem) GetExternalIdOk() (*string, bool) {
	if o == nil || o.ExternalId == nil {
		return nil, false
	}
	return o.ExternalId, true
}

// HasExternalId returns a boolean if a field has been set.
func (o *LineItem) HasExternalId() bool {
	if o != nil && o.ExternalId != nil {
		return true
	}

	return false
}

// SetExternalId gets a reference to the given string and assigns it to the ExternalId field.
func (o *LineItem) SetExternalId(v string) {
	o.ExternalId = &v
}

// GetRateId returns the RateId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LineItem) GetRateId() string {
	if o == nil || o.RateId.Get() == nil {
		var ret string
		return ret
	}
	return *o.RateId.Get()
}

// GetRateIdOk returns a tuple with the RateId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LineItem) GetRateIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RateId.Get(), o.RateId.IsSet()
}

// HasRateId returns a boolean if a field has been set.
func (o *LineItem) HasRateId() bool {
	if o != nil && o.RateId.IsSet() {
		return true
	}

	return false
}

// SetRateId gets a reference to the given NullableString and assigns it to the RateId field.
func (o *LineItem) SetRateId(v string) {
	o.RateId.Set(&v)
}
// SetRateIdNil sets the value for RateId to be an explicit nil
func (o *LineItem) SetRateIdNil() {
	o.RateId.Set(nil)
}

// UnsetRateId ensures that no value is present for RateId, not even an explicit nil
func (o *LineItem) UnsetRateId() {
	o.RateId.Unset()
}

// GetRateClass returns the RateClass field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LineItem) GetRateClass() string {
	if o == nil || o.RateClass.Get() == nil {
		var ret string
		return ret
	}
	return *o.RateClass.Get()
}

// GetRateClassOk returns a tuple with the RateClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LineItem) GetRateClassOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RateClass.Get(), o.RateClass.IsSet()
}

// HasRateClass returns a boolean if a field has been set.
func (o *LineItem) HasRateClass() bool {
	if o != nil && o.RateClass.IsSet() {
		return true
	}

	return false
}

// SetRateClass gets a reference to the given NullableString and assigns it to the RateClass field.
func (o *LineItem) SetRateClass(v string) {
	o.RateClass.Set(&v)
}
// SetRateClassNil sets the value for RateClass to be an explicit nil
func (o *LineItem) SetRateClassNil() {
	o.RateClass.Set(nil)
}

// UnsetRateClass ensures that no value is present for RateClass, not even an explicit nil
func (o *LineItem) UnsetRateClass() {
	o.RateClass.Unset()
}

// GetRateUnit returns the RateUnit field value if set, zero value otherwise.
func (o *LineItem) GetRateUnit() string {
	if o == nil || o.RateUnit == nil {
		var ret string
		return ret
	}
	return *o.RateUnit
}

// GetRateUnitOk returns a tuple with the RateUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LineItem) GetRateUnitOk() (*string, bool) {
	if o == nil || o.RateUnit == nil {
		return nil, false
	}
	return o.RateUnit, true
}

// HasRateUnit returns a boolean if a field has been set.
func (o *LineItem) HasRateUnit() bool {
	if o != nil && o.RateUnit != nil {
		return true
	}

	return false
}

// SetRateUnit gets a reference to the given string and assigns it to the RateUnit field.
func (o *LineItem) SetRateUnit(v string) {
	o.RateUnit = &v
}

// GetRateTerm returns the RateTerm field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LineItem) GetRateTerm() string {
	if o == nil || o.RateTerm.Get() == nil {
		var ret string
		return ret
	}
	return *o.RateTerm.Get()
}

// GetRateTermOk returns a tuple with the RateTerm field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LineItem) GetRateTermOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RateTerm.Get(), o.RateTerm.IsSet()
}

// HasRateTerm returns a boolean if a field has been set.
func (o *LineItem) HasRateTerm() bool {
	if o != nil && o.RateTerm.IsSet() {
		return true
	}

	return false
}

// SetRateTerm gets a reference to the given NullableString and assigns it to the RateTerm field.
func (o *LineItem) SetRateTerm(v string) {
	o.RateTerm.Set(&v)
}
// SetRateTermNil sets the value for RateTerm to be an explicit nil
func (o *LineItem) SetRateTermNil() {
	o.RateTerm.Set(nil)
}

// UnsetRateTerm ensures that no value is present for RateTerm, not even an explicit nil
func (o *LineItem) UnsetRateTerm() {
	o.RateTerm.Unset()
}

// GetUsageType returns the UsageType field value if set, zero value otherwise.
func (o *LineItem) GetUsageType() string {
	if o == nil || o.UsageType == nil {
		var ret string
		return ret
	}
	return *o.UsageType
}

// GetUsageTypeOk returns a tuple with the UsageType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LineItem) GetUsageTypeOk() (*string, bool) {
	if o == nil || o.UsageType == nil {
		return nil, false
	}
	return o.UsageType, true
}

// HasUsageType returns a boolean if a field has been set.
func (o *LineItem) HasUsageType() bool {
	if o != nil && o.UsageType != nil {
		return true
	}

	return false
}

// SetUsageType gets a reference to the given string and assigns it to the UsageType field.
func (o *LineItem) SetUsageType(v string) {
	o.UsageType = &v
}

// GetUsageCategory returns the UsageCategory field value if set, zero value otherwise.
func (o *LineItem) GetUsageCategory() string {
	if o == nil || o.UsageCategory == nil {
		var ret string
		return ret
	}
	return *o.UsageCategory
}

// GetUsageCategoryOk returns a tuple with the UsageCategory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LineItem) GetUsageCategoryOk() (*string, bool) {
	if o == nil || o.UsageCategory == nil {
		return nil, false
	}
	return o.UsageCategory, true
}

// HasUsageCategory returns a boolean if a field has been set.
func (o *LineItem) HasUsageCategory() bool {
	if o != nil && o.UsageCategory != nil {
		return true
	}

	return false
}

// SetUsageCategory gets a reference to the given string and assigns it to the UsageCategory field.
func (o *LineItem) SetUsageCategory(v string) {
	o.UsageCategory = &v
}

// GetUsageService returns the UsageService field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LineItem) GetUsageService() string {
	if o == nil || o.UsageService.Get() == nil {
		var ret string
		return ret
	}
	return *o.UsageService.Get()
}

// GetUsageServiceOk returns a tuple with the UsageService field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LineItem) GetUsageServiceOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UsageService.Get(), o.UsageService.IsSet()
}

// HasUsageService returns a boolean if a field has been set.
func (o *LineItem) HasUsageService() bool {
	if o != nil && o.UsageService.IsSet() {
		return true
	}

	return false
}

// SetUsageService gets a reference to the given NullableString and assigns it to the UsageService field.
func (o *LineItem) SetUsageService(v string) {
	o.UsageService.Set(&v)
}
// SetUsageServiceNil sets the value for UsageService to be an explicit nil
func (o *LineItem) SetUsageServiceNil() {
	o.UsageService.Set(nil)
}

// UnsetUsageService ensures that no value is present for UsageService, not even an explicit nil
func (o *LineItem) UnsetUsageService() {
	o.UsageService.Unset()
}

// GetItemUsage returns the ItemUsage field value if set, zero value otherwise.
func (o *LineItem) GetItemUsage() int64 {
	if o == nil || o.ItemUsage == nil {
		var ret int64
		return ret
	}
	return *o.ItemUsage
}

// GetItemUsageOk returns a tuple with the ItemUsage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LineItem) GetItemUsageOk() (*int64, bool) {
	if o == nil || o.ItemUsage == nil {
		return nil, false
	}
	return o.ItemUsage, true
}

// HasItemUsage returns a boolean if a field has been set.
func (o *LineItem) HasItemUsage() bool {
	if o != nil && o.ItemUsage != nil {
		return true
	}

	return false
}

// SetItemUsage gets a reference to the given int64 and assigns it to the ItemUsage field.
func (o *LineItem) SetItemUsage(v int64) {
	o.ItemUsage = &v
}

// GetItemRate returns the ItemRate field value if set, zero value otherwise.
func (o *LineItem) GetItemRate() float32 {
	if o == nil || o.ItemRate == nil {
		var ret float32
		return ret
	}
	return *o.ItemRate
}

// GetItemRateOk returns a tuple with the ItemRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LineItem) GetItemRateOk() (*float32, bool) {
	if o == nil || o.ItemRate == nil {
		return nil, false
	}
	return o.ItemRate, true
}

// HasItemRate returns a boolean if a field has been set.
func (o *LineItem) HasItemRate() bool {
	if o != nil && o.ItemRate != nil {
		return true
	}

	return false
}

// SetItemRate gets a reference to the given float32 and assigns it to the ItemRate field.
func (o *LineItem) SetItemRate(v float32) {
	o.ItemRate = &v
}

// GetItemCost returns the ItemCost field value if set, zero value otherwise.
func (o *LineItem) GetItemCost() float32 {
	if o == nil || o.ItemCost == nil {
		var ret float32
		return ret
	}
	return *o.ItemCost
}

// GetItemCostOk returns a tuple with the ItemCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LineItem) GetItemCostOk() (*float32, bool) {
	if o == nil || o.ItemCost == nil {
		return nil, false
	}
	return o.ItemCost, true
}

// HasItemCost returns a boolean if a field has been set.
func (o *LineItem) HasItemCost() bool {
	if o != nil && o.ItemCost != nil {
		return true
	}

	return false
}

// SetItemCost gets a reference to the given float32 and assigns it to the ItemCost field.
func (o *LineItem) SetItemCost(v float32) {
	o.ItemCost = &v
}

// GetItemPriceRate returns the ItemPriceRate field value if set, zero value otherwise.
func (o *LineItem) GetItemPriceRate() float32 {
	if o == nil || o.ItemPriceRate == nil {
		var ret float32
		return ret
	}
	return *o.ItemPriceRate
}

// GetItemPriceRateOk returns a tuple with the ItemPriceRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LineItem) GetItemPriceRateOk() (*float32, bool) {
	if o == nil || o.ItemPriceRate == nil {
		return nil, false
	}
	return o.ItemPriceRate, true
}

// HasItemPriceRate returns a boolean if a field has been set.
func (o *LineItem) HasItemPriceRate() bool {
	if o != nil && o.ItemPriceRate != nil {
		return true
	}

	return false
}

// SetItemPriceRate gets a reference to the given float32 and assigns it to the ItemPriceRate field.
func (o *LineItem) SetItemPriceRate(v float32) {
	o.ItemPriceRate = &v
}

// GetItemPrice returns the ItemPrice field value if set, zero value otherwise.
func (o *LineItem) GetItemPrice() float32 {
	if o == nil || o.ItemPrice == nil {
		var ret float32
		return ret
	}
	return *o.ItemPrice
}

// GetItemPriceOk returns a tuple with the ItemPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LineItem) GetItemPriceOk() (*float32, bool) {
	if o == nil || o.ItemPrice == nil {
		return nil, false
	}
	return o.ItemPrice, true
}

// HasItemPrice returns a boolean if a field has been set.
func (o *LineItem) HasItemPrice() bool {
	if o != nil && o.ItemPrice != nil {
		return true
	}

	return false
}

// SetItemPrice gets a reference to the given float32 and assigns it to the ItemPrice field.
func (o *LineItem) SetItemPrice(v float32) {
	o.ItemPrice = &v
}

// GetItemTax returns the ItemTax field value if set, zero value otherwise.
func (o *LineItem) GetItemTax() int64 {
	if o == nil || o.ItemTax == nil {
		var ret int64
		return ret
	}
	return *o.ItemTax
}

// GetItemTaxOk returns a tuple with the ItemTax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LineItem) GetItemTaxOk() (*int64, bool) {
	if o == nil || o.ItemTax == nil {
		return nil, false
	}
	return o.ItemTax, true
}

// HasItemTax returns a boolean if a field has been set.
func (o *LineItem) HasItemTax() bool {
	if o != nil && o.ItemTax != nil {
		return true
	}

	return false
}

// SetItemTax gets a reference to the given int64 and assigns it to the ItemTax field.
func (o *LineItem) SetItemTax(v int64) {
	o.ItemTax = &v
}

// GetItemTerm returns the ItemTerm field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LineItem) GetItemTerm() string {
	if o == nil || o.ItemTerm.Get() == nil {
		var ret string
		return ret
	}
	return *o.ItemTerm.Get()
}

// GetItemTermOk returns a tuple with the ItemTerm field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LineItem) GetItemTermOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ItemTerm.Get(), o.ItemTerm.IsSet()
}

// HasItemTerm returns a boolean if a field has been set.
func (o *LineItem) HasItemTerm() bool {
	if o != nil && o.ItemTerm.IsSet() {
		return true
	}

	return false
}

// SetItemTerm gets a reference to the given NullableString and assigns it to the ItemTerm field.
func (o *LineItem) SetItemTerm(v string) {
	o.ItemTerm.Set(&v)
}
// SetItemTermNil sets the value for ItemTerm to be an explicit nil
func (o *LineItem) SetItemTermNil() {
	o.ItemTerm.Set(nil)
}

// UnsetItemTerm ensures that no value is present for ItemTerm, not even an explicit nil
func (o *LineItem) UnsetItemTerm() {
	o.ItemTerm.Unset()
}

// GetTaxType returns the TaxType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LineItem) GetTaxType() string {
	if o == nil || o.TaxType.Get() == nil {
		var ret string
		return ret
	}
	return *o.TaxType.Get()
}

// GetTaxTypeOk returns a tuple with the TaxType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LineItem) GetTaxTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TaxType.Get(), o.TaxType.IsSet()
}

// HasTaxType returns a boolean if a field has been set.
func (o *LineItem) HasTaxType() bool {
	if o != nil && o.TaxType.IsSet() {
		return true
	}

	return false
}

// SetTaxType gets a reference to the given NullableString and assigns it to the TaxType field.
func (o *LineItem) SetTaxType(v string) {
	o.TaxType.Set(&v)
}
// SetTaxTypeNil sets the value for TaxType to be an explicit nil
func (o *LineItem) SetTaxTypeNil() {
	o.TaxType.Set(nil)
}

// UnsetTaxType ensures that no value is present for TaxType, not even an explicit nil
func (o *LineItem) UnsetTaxType() {
	o.TaxType.Unset()
}

// GetRegionCode returns the RegionCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LineItem) GetRegionCode() string {
	if o == nil || o.RegionCode.Get() == nil {
		var ret string
		return ret
	}
	return *o.RegionCode.Get()
}

// GetRegionCodeOk returns a tuple with the RegionCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LineItem) GetRegionCodeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RegionCode.Get(), o.RegionCode.IsSet()
}

// HasRegionCode returns a boolean if a field has been set.
func (o *LineItem) HasRegionCode() bool {
	if o != nil && o.RegionCode.IsSet() {
		return true
	}

	return false
}

// SetRegionCode gets a reference to the given NullableString and assigns it to the RegionCode field.
func (o *LineItem) SetRegionCode(v string) {
	o.RegionCode.Set(&v)
}
// SetRegionCodeNil sets the value for RegionCode to be an explicit nil
func (o *LineItem) SetRegionCodeNil() {
	o.RegionCode.Set(nil)
}

// UnsetRegionCode ensures that no value is present for RegionCode, not even an explicit nil
func (o *LineItem) UnsetRegionCode() {
	o.RegionCode.Unset()
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *LineItem) GetCurrency() string {
	if o == nil || o.Currency == nil {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LineItem) GetCurrencyOk() (*string, bool) {
	if o == nil || o.Currency == nil {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *LineItem) HasCurrency() bool {
	if o != nil && o.Currency != nil {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *LineItem) SetCurrency(v string) {
	o.Currency = &v
}

// GetConversionRate returns the ConversionRate field value if set, zero value otherwise.
func (o *LineItem) GetConversionRate() int64 {
	if o == nil || o.ConversionRate == nil {
		var ret int64
		return ret
	}
	return *o.ConversionRate
}

// GetConversionRateOk returns a tuple with the ConversionRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LineItem) GetConversionRateOk() (*int64, bool) {
	if o == nil || o.ConversionRate == nil {
		return nil, false
	}
	return o.ConversionRate, true
}

// HasConversionRate returns a boolean if a field has been set.
func (o *LineItem) HasConversionRate() bool {
	if o != nil && o.ConversionRate != nil {
		return true
	}

	return false
}

// SetConversionRate gets a reference to the given int64 and assigns it to the ConversionRate field.
func (o *LineItem) SetConversionRate(v int64) {
	o.ConversionRate = &v
}

// GetDateCreated returns the DateCreated field value if set, zero value otherwise.
func (o *LineItem) GetDateCreated() time.Time {
	if o == nil || o.DateCreated == nil {
		var ret time.Time
		return ret
	}
	return *o.DateCreated
}

// GetDateCreatedOk returns a tuple with the DateCreated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LineItem) GetDateCreatedOk() (*time.Time, bool) {
	if o == nil || o.DateCreated == nil {
		return nil, false
	}
	return o.DateCreated, true
}

// HasDateCreated returns a boolean if a field has been set.
func (o *LineItem) HasDateCreated() bool {
	if o != nil && o.DateCreated != nil {
		return true
	}

	return false
}

// SetDateCreated gets a reference to the given time.Time and assigns it to the DateCreated field.
func (o *LineItem) SetDateCreated(v time.Time) {
	o.DateCreated = &v
}

// GetLastUpdated returns the LastUpdated field value if set, zero value otherwise.
func (o *LineItem) GetLastUpdated() time.Time {
	if o == nil || o.LastUpdated == nil {
		var ret time.Time
		return ret
	}
	return *o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LineItem) GetLastUpdatedOk() (*time.Time, bool) {
	if o == nil || o.LastUpdated == nil {
		return nil, false
	}
	return o.LastUpdated, true
}

// HasLastUpdated returns a boolean if a field has been set.
func (o *LineItem) HasLastUpdated() bool {
	if o != nil && o.LastUpdated != nil {
		return true
	}

	return false
}

// SetLastUpdated gets a reference to the given time.Time and assigns it to the LastUpdated field.
func (o *LineItem) SetLastUpdated(v time.Time) {
	o.LastUpdated = &v
}

func (o LineItem) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.InvoiceId != nil {
		toSerialize["invoiceId"] = o.InvoiceId
	}
	if o.RefType != nil {
		toSerialize["refType"] = o.RefType
	}
	if o.RefId != nil {
		toSerialize["refId"] = o.RefId
	}
	if o.RefName != nil {
		toSerialize["refName"] = o.RefName
	}
	if o.StartDate != nil {
		toSerialize["startDate"] = o.StartDate
	}
	if o.EndDate != nil {
		toSerialize["endDate"] = o.EndDate
	}
	if o.ItemId.IsSet() {
		toSerialize["itemId"] = o.ItemId.Get()
	}
	if o.ItemType.IsSet() {
		toSerialize["itemType"] = o.ItemType.Get()
	}
	if o.ItemName.IsSet() {
		toSerialize["itemName"] = o.ItemName.Get()
	}
	if o.ItemDescription.IsSet() {
		toSerialize["itemDescription"] = o.ItemDescription.Get()
	}
	if o.ProductId.IsSet() {
		toSerialize["productId"] = o.ProductId.Get()
	}
	if o.ProductCode.IsSet() {
		toSerialize["productCode"] = o.ProductCode.Get()
	}
	if o.ProductName.IsSet() {
		toSerialize["productName"] = o.ProductName.Get()
	}
	if o.ItemSeller.IsSet() {
		toSerialize["itemSeller"] = o.ItemSeller.Get()
	}
	if o.ItemAction.IsSet() {
		toSerialize["itemAction"] = o.ItemAction.Get()
	}
	if o.ExternalId != nil {
		toSerialize["externalId"] = o.ExternalId
	}
	if o.RateId.IsSet() {
		toSerialize["rateId"] = o.RateId.Get()
	}
	if o.RateClass.IsSet() {
		toSerialize["rateClass"] = o.RateClass.Get()
	}
	if o.RateUnit != nil {
		toSerialize["rateUnit"] = o.RateUnit
	}
	if o.RateTerm.IsSet() {
		toSerialize["rateTerm"] = o.RateTerm.Get()
	}
	if o.UsageType != nil {
		toSerialize["usageType"] = o.UsageType
	}
	if o.UsageCategory != nil {
		toSerialize["usageCategory"] = o.UsageCategory
	}
	if o.UsageService.IsSet() {
		toSerialize["usageService"] = o.UsageService.Get()
	}
	if o.ItemUsage != nil {
		toSerialize["itemUsage"] = o.ItemUsage
	}
	if o.ItemRate != nil {
		toSerialize["itemRate"] = o.ItemRate
	}
	if o.ItemCost != nil {
		toSerialize["itemCost"] = o.ItemCost
	}
	if o.ItemPriceRate != nil {
		toSerialize["itemPriceRate"] = o.ItemPriceRate
	}
	if o.ItemPrice != nil {
		toSerialize["itemPrice"] = o.ItemPrice
	}
	if o.ItemTax != nil {
		toSerialize["itemTax"] = o.ItemTax
	}
	if o.ItemTerm.IsSet() {
		toSerialize["itemTerm"] = o.ItemTerm.Get()
	}
	if o.TaxType.IsSet() {
		toSerialize["taxType"] = o.TaxType.Get()
	}
	if o.RegionCode.IsSet() {
		toSerialize["regionCode"] = o.RegionCode.Get()
	}
	if o.Currency != nil {
		toSerialize["currency"] = o.Currency
	}
	if o.ConversionRate != nil {
		toSerialize["conversionRate"] = o.ConversionRate
	}
	if o.DateCreated != nil {
		toSerialize["dateCreated"] = o.DateCreated
	}
	if o.LastUpdated != nil {
		toSerialize["lastUpdated"] = o.LastUpdated
	}
	return json.Marshal(toSerialize)
}

type NullableLineItem struct {
	value *LineItem
	isSet bool
}

func (v NullableLineItem) Get() *LineItem {
	return v.value
}

func (v *NullableLineItem) Set(val *LineItem) {
	v.value = val
	v.isSet = true
}

func (v NullableLineItem) IsSet() bool {
	return v.isSet
}

func (v *NullableLineItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLineItem(val *LineItem) *NullableLineItem {
	return &NullableLineItem{value: val, isSet: true}
}

func (v NullableLineItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLineItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


