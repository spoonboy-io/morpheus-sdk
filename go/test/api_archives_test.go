/*
Morpheus API

Testing ArchivesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_ArchivesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ArchivesAPIService AddArchiveBucket", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ArchivesAPI.AddArchiveBucket(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ArchivesAPIService AddArchiveFile", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var bucket string
		var filepath string

		resp, httpRes, err := apiClient.ArchivesAPI.AddArchiveFile(context.Background(), bucket, filepath).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ArchivesAPIService AddArchiveFileLink", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int64

		resp, httpRes, err := apiClient.ArchivesAPI.AddArchiveFileLink(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ArchivesAPIService DeleteArchiveBucket", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int64

		resp, httpRes, err := apiClient.ArchivesAPI.DeleteArchiveBucket(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ArchivesAPIService DeleteArchiveFile", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int64

		resp, httpRes, err := apiClient.ArchivesAPI.DeleteArchiveFile(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ArchivesAPIService DeleteArchiveFileLink", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int64
		var linkId int64

		resp, httpRes, err := apiClient.ArchivesAPI.DeleteArchiveFileLink(context.Background(), id, linkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ArchivesAPIService GetArchiveBucket", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int64

		resp, httpRes, err := apiClient.ArchivesAPI.GetArchiveBucket(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ArchivesAPIService GetArchiveFile", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var bucket string
		var filepath string

		httpRes, err := apiClient.ArchivesAPI.GetArchiveFile(context.Background(), bucket, filepath).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ArchivesAPIService GetArchiveFileDetail", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int64

		resp, httpRes, err := apiClient.ArchivesAPI.GetArchiveFileDetail(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ArchivesAPIService GetArchiveFileLinks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int64

		resp, httpRes, err := apiClient.ArchivesAPI.GetArchiveFileLinks(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ArchivesAPIService ListArchiveBuckets", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ArchivesAPI.ListArchiveBuckets(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ArchivesAPIService ListArchiveFiles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var bucket string
		var filepath string

		resp, httpRes, err := apiClient.ArchivesAPI.ListArchiveFiles(context.Background(), bucket, filepath).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ArchivesAPIService UpdateArchiveBucket", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int64

		resp, httpRes, err := apiClient.ArchivesAPI.UpdateArchiveBucket(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
