/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InlineResponse200143 struct for InlineResponse200143
type InlineResponse200143 struct {
	Certificates *[]InlineResponse200143Certificates `json:"certificates,omitempty"`
	CertificateCount *int64 `json:"certificateCount,omitempty"`
}

// NewInlineResponse200143 instantiates a new InlineResponse200143 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse200143() *InlineResponse200143 {
	this := InlineResponse200143{}
	return &this
}

// NewInlineResponse200143WithDefaults instantiates a new InlineResponse200143 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse200143WithDefaults() *InlineResponse200143 {
	this := InlineResponse200143{}
	return &this
}

// GetCertificates returns the Certificates field value if set, zero value otherwise.
func (o *InlineResponse200143) GetCertificates() []InlineResponse200143Certificates {
	if o == nil || o.Certificates == nil {
		var ret []InlineResponse200143Certificates
		return ret
	}
	return *o.Certificates
}

// GetCertificatesOk returns a tuple with the Certificates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200143) GetCertificatesOk() (*[]InlineResponse200143Certificates, bool) {
	if o == nil || o.Certificates == nil {
		return nil, false
	}
	return o.Certificates, true
}

// HasCertificates returns a boolean if a field has been set.
func (o *InlineResponse200143) HasCertificates() bool {
	if o != nil && o.Certificates != nil {
		return true
	}

	return false
}

// SetCertificates gets a reference to the given []InlineResponse200143Certificates and assigns it to the Certificates field.
func (o *InlineResponse200143) SetCertificates(v []InlineResponse200143Certificates) {
	o.Certificates = &v
}

// GetCertificateCount returns the CertificateCount field value if set, zero value otherwise.
func (o *InlineResponse200143) GetCertificateCount() int64 {
	if o == nil || o.CertificateCount == nil {
		var ret int64
		return ret
	}
	return *o.CertificateCount
}

// GetCertificateCountOk returns a tuple with the CertificateCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200143) GetCertificateCountOk() (*int64, bool) {
	if o == nil || o.CertificateCount == nil {
		return nil, false
	}
	return o.CertificateCount, true
}

// HasCertificateCount returns a boolean if a field has been set.
func (o *InlineResponse200143) HasCertificateCount() bool {
	if o != nil && o.CertificateCount != nil {
		return true
	}

	return false
}

// SetCertificateCount gets a reference to the given int64 and assigns it to the CertificateCount field.
func (o *InlineResponse200143) SetCertificateCount(v int64) {
	o.CertificateCount = &v
}

func (o InlineResponse200143) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Certificates != nil {
		toSerialize["certificates"] = o.Certificates
	}
	if o.CertificateCount != nil {
		toSerialize["certificateCount"] = o.CertificateCount
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse200143 struct {
	value *InlineResponse200143
	isSet bool
}

func (v NullableInlineResponse200143) Get() *InlineResponse200143 {
	return v.value
}

func (v *NullableInlineResponse200143) Set(val *InlineResponse200143) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse200143) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse200143) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse200143(val *InlineResponse200143) *NullableInlineResponse200143 {
	return &NullableInlineResponse200143{value: val, isSet: true}
}

func (v NullableInlineResponse200143) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse200143) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


