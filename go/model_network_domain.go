/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// NetworkDomain struct for NetworkDomain
type NetworkDomain struct {
	Id *int64 `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Active *bool `json:"active,omitempty"`
	Fqdn NullableString `json:"fqdn,omitempty"`
	Description NullableString `json:"description,omitempty"`
	Visibility *string `json:"visibility,omitempty"`
	DomainController *bool `json:"domainController,omitempty"`
	PublicZone *bool `json:"publicZone,omitempty"`
	DomainUsername NullableString `json:"domainUsername,omitempty"`
	DomainPassword NullableString `json:"domainPassword,omitempty"`
	RefType NullableString `json:"refType,omitempty"`
	RefId NullableInt64 `json:"refId,omitempty"`
	RefSource NullableString `json:"refSource,omitempty"`
	InternalId NullableString `json:"internalId,omitempty"`
	OuPath NullableString `json:"ouPath,omitempty"`
	DcServer NullableString `json:"dcServer,omitempty"`
	ZoneType NullableString `json:"zoneType,omitempty"`
	Dnssec NullableString `json:"dnssec,omitempty"`
	DomainSerial NullableString `json:"domainSerial,omitempty"`
	Account *InlineResponse20040AppDeployInstance `json:"account,omitempty"`
	Owner *InlineResponse20040AppDeployInstance `json:"owner,omitempty"`
}

// NewNetworkDomain instantiates a new NetworkDomain object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkDomain() *NetworkDomain {
	this := NetworkDomain{}
	return &this
}

// NewNetworkDomainWithDefaults instantiates a new NetworkDomain object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkDomainWithDefaults() *NetworkDomain {
	this := NetworkDomain{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *NetworkDomain) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkDomain) GetIdOk() (*int64, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *NetworkDomain) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *NetworkDomain) SetId(v int64) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *NetworkDomain) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkDomain) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *NetworkDomain) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *NetworkDomain) SetName(v string) {
	o.Name = &v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *NetworkDomain) GetActive() bool {
	if o == nil || o.Active == nil {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkDomain) GetActiveOk() (*bool, bool) {
	if o == nil || o.Active == nil {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *NetworkDomain) HasActive() bool {
	if o != nil && o.Active != nil {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *NetworkDomain) SetActive(v bool) {
	o.Active = &v
}

// GetFqdn returns the Fqdn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetworkDomain) GetFqdn() string {
	if o == nil || o.Fqdn.Get() == nil {
		var ret string
		return ret
	}
	return *o.Fqdn.Get()
}

// GetFqdnOk returns a tuple with the Fqdn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetworkDomain) GetFqdnOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Fqdn.Get(), o.Fqdn.IsSet()
}

// HasFqdn returns a boolean if a field has been set.
func (o *NetworkDomain) HasFqdn() bool {
	if o != nil && o.Fqdn.IsSet() {
		return true
	}

	return false
}

// SetFqdn gets a reference to the given NullableString and assigns it to the Fqdn field.
func (o *NetworkDomain) SetFqdn(v string) {
	o.Fqdn.Set(&v)
}
// SetFqdnNil sets the value for Fqdn to be an explicit nil
func (o *NetworkDomain) SetFqdnNil() {
	o.Fqdn.Set(nil)
}

// UnsetFqdn ensures that no value is present for Fqdn, not even an explicit nil
func (o *NetworkDomain) UnsetFqdn() {
	o.Fqdn.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetworkDomain) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetworkDomain) GetDescriptionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *NetworkDomain) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *NetworkDomain) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *NetworkDomain) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *NetworkDomain) UnsetDescription() {
	o.Description.Unset()
}

// GetVisibility returns the Visibility field value if set, zero value otherwise.
func (o *NetworkDomain) GetVisibility() string {
	if o == nil || o.Visibility == nil {
		var ret string
		return ret
	}
	return *o.Visibility
}

// GetVisibilityOk returns a tuple with the Visibility field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkDomain) GetVisibilityOk() (*string, bool) {
	if o == nil || o.Visibility == nil {
		return nil, false
	}
	return o.Visibility, true
}

// HasVisibility returns a boolean if a field has been set.
func (o *NetworkDomain) HasVisibility() bool {
	if o != nil && o.Visibility != nil {
		return true
	}

	return false
}

// SetVisibility gets a reference to the given string and assigns it to the Visibility field.
func (o *NetworkDomain) SetVisibility(v string) {
	o.Visibility = &v
}

// GetDomainController returns the DomainController field value if set, zero value otherwise.
func (o *NetworkDomain) GetDomainController() bool {
	if o == nil || o.DomainController == nil {
		var ret bool
		return ret
	}
	return *o.DomainController
}

// GetDomainControllerOk returns a tuple with the DomainController field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkDomain) GetDomainControllerOk() (*bool, bool) {
	if o == nil || o.DomainController == nil {
		return nil, false
	}
	return o.DomainController, true
}

// HasDomainController returns a boolean if a field has been set.
func (o *NetworkDomain) HasDomainController() bool {
	if o != nil && o.DomainController != nil {
		return true
	}

	return false
}

// SetDomainController gets a reference to the given bool and assigns it to the DomainController field.
func (o *NetworkDomain) SetDomainController(v bool) {
	o.DomainController = &v
}

// GetPublicZone returns the PublicZone field value if set, zero value otherwise.
func (o *NetworkDomain) GetPublicZone() bool {
	if o == nil || o.PublicZone == nil {
		var ret bool
		return ret
	}
	return *o.PublicZone
}

// GetPublicZoneOk returns a tuple with the PublicZone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkDomain) GetPublicZoneOk() (*bool, bool) {
	if o == nil || o.PublicZone == nil {
		return nil, false
	}
	return o.PublicZone, true
}

// HasPublicZone returns a boolean if a field has been set.
func (o *NetworkDomain) HasPublicZone() bool {
	if o != nil && o.PublicZone != nil {
		return true
	}

	return false
}

// SetPublicZone gets a reference to the given bool and assigns it to the PublicZone field.
func (o *NetworkDomain) SetPublicZone(v bool) {
	o.PublicZone = &v
}

// GetDomainUsername returns the DomainUsername field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetworkDomain) GetDomainUsername() string {
	if o == nil || o.DomainUsername.Get() == nil {
		var ret string
		return ret
	}
	return *o.DomainUsername.Get()
}

// GetDomainUsernameOk returns a tuple with the DomainUsername field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetworkDomain) GetDomainUsernameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DomainUsername.Get(), o.DomainUsername.IsSet()
}

// HasDomainUsername returns a boolean if a field has been set.
func (o *NetworkDomain) HasDomainUsername() bool {
	if o != nil && o.DomainUsername.IsSet() {
		return true
	}

	return false
}

// SetDomainUsername gets a reference to the given NullableString and assigns it to the DomainUsername field.
func (o *NetworkDomain) SetDomainUsername(v string) {
	o.DomainUsername.Set(&v)
}
// SetDomainUsernameNil sets the value for DomainUsername to be an explicit nil
func (o *NetworkDomain) SetDomainUsernameNil() {
	o.DomainUsername.Set(nil)
}

// UnsetDomainUsername ensures that no value is present for DomainUsername, not even an explicit nil
func (o *NetworkDomain) UnsetDomainUsername() {
	o.DomainUsername.Unset()
}

// GetDomainPassword returns the DomainPassword field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetworkDomain) GetDomainPassword() string {
	if o == nil || o.DomainPassword.Get() == nil {
		var ret string
		return ret
	}
	return *o.DomainPassword.Get()
}

// GetDomainPasswordOk returns a tuple with the DomainPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetworkDomain) GetDomainPasswordOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DomainPassword.Get(), o.DomainPassword.IsSet()
}

// HasDomainPassword returns a boolean if a field has been set.
func (o *NetworkDomain) HasDomainPassword() bool {
	if o != nil && o.DomainPassword.IsSet() {
		return true
	}

	return false
}

// SetDomainPassword gets a reference to the given NullableString and assigns it to the DomainPassword field.
func (o *NetworkDomain) SetDomainPassword(v string) {
	o.DomainPassword.Set(&v)
}
// SetDomainPasswordNil sets the value for DomainPassword to be an explicit nil
func (o *NetworkDomain) SetDomainPasswordNil() {
	o.DomainPassword.Set(nil)
}

// UnsetDomainPassword ensures that no value is present for DomainPassword, not even an explicit nil
func (o *NetworkDomain) UnsetDomainPassword() {
	o.DomainPassword.Unset()
}

// GetRefType returns the RefType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetworkDomain) GetRefType() string {
	if o == nil || o.RefType.Get() == nil {
		var ret string
		return ret
	}
	return *o.RefType.Get()
}

// GetRefTypeOk returns a tuple with the RefType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetworkDomain) GetRefTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RefType.Get(), o.RefType.IsSet()
}

// HasRefType returns a boolean if a field has been set.
func (o *NetworkDomain) HasRefType() bool {
	if o != nil && o.RefType.IsSet() {
		return true
	}

	return false
}

// SetRefType gets a reference to the given NullableString and assigns it to the RefType field.
func (o *NetworkDomain) SetRefType(v string) {
	o.RefType.Set(&v)
}
// SetRefTypeNil sets the value for RefType to be an explicit nil
func (o *NetworkDomain) SetRefTypeNil() {
	o.RefType.Set(nil)
}

// UnsetRefType ensures that no value is present for RefType, not even an explicit nil
func (o *NetworkDomain) UnsetRefType() {
	o.RefType.Unset()
}

// GetRefId returns the RefId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetworkDomain) GetRefId() int64 {
	if o == nil || o.RefId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.RefId.Get()
}

// GetRefIdOk returns a tuple with the RefId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetworkDomain) GetRefIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RefId.Get(), o.RefId.IsSet()
}

// HasRefId returns a boolean if a field has been set.
func (o *NetworkDomain) HasRefId() bool {
	if o != nil && o.RefId.IsSet() {
		return true
	}

	return false
}

// SetRefId gets a reference to the given NullableInt64 and assigns it to the RefId field.
func (o *NetworkDomain) SetRefId(v int64) {
	o.RefId.Set(&v)
}
// SetRefIdNil sets the value for RefId to be an explicit nil
func (o *NetworkDomain) SetRefIdNil() {
	o.RefId.Set(nil)
}

// UnsetRefId ensures that no value is present for RefId, not even an explicit nil
func (o *NetworkDomain) UnsetRefId() {
	o.RefId.Unset()
}

// GetRefSource returns the RefSource field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetworkDomain) GetRefSource() string {
	if o == nil || o.RefSource.Get() == nil {
		var ret string
		return ret
	}
	return *o.RefSource.Get()
}

// GetRefSourceOk returns a tuple with the RefSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetworkDomain) GetRefSourceOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RefSource.Get(), o.RefSource.IsSet()
}

// HasRefSource returns a boolean if a field has been set.
func (o *NetworkDomain) HasRefSource() bool {
	if o != nil && o.RefSource.IsSet() {
		return true
	}

	return false
}

// SetRefSource gets a reference to the given NullableString and assigns it to the RefSource field.
func (o *NetworkDomain) SetRefSource(v string) {
	o.RefSource.Set(&v)
}
// SetRefSourceNil sets the value for RefSource to be an explicit nil
func (o *NetworkDomain) SetRefSourceNil() {
	o.RefSource.Set(nil)
}

// UnsetRefSource ensures that no value is present for RefSource, not even an explicit nil
func (o *NetworkDomain) UnsetRefSource() {
	o.RefSource.Unset()
}

// GetInternalId returns the InternalId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetworkDomain) GetInternalId() string {
	if o == nil || o.InternalId.Get() == nil {
		var ret string
		return ret
	}
	return *o.InternalId.Get()
}

// GetInternalIdOk returns a tuple with the InternalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetworkDomain) GetInternalIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.InternalId.Get(), o.InternalId.IsSet()
}

// HasInternalId returns a boolean if a field has been set.
func (o *NetworkDomain) HasInternalId() bool {
	if o != nil && o.InternalId.IsSet() {
		return true
	}

	return false
}

// SetInternalId gets a reference to the given NullableString and assigns it to the InternalId field.
func (o *NetworkDomain) SetInternalId(v string) {
	o.InternalId.Set(&v)
}
// SetInternalIdNil sets the value for InternalId to be an explicit nil
func (o *NetworkDomain) SetInternalIdNil() {
	o.InternalId.Set(nil)
}

// UnsetInternalId ensures that no value is present for InternalId, not even an explicit nil
func (o *NetworkDomain) UnsetInternalId() {
	o.InternalId.Unset()
}

// GetOuPath returns the OuPath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetworkDomain) GetOuPath() string {
	if o == nil || o.OuPath.Get() == nil {
		var ret string
		return ret
	}
	return *o.OuPath.Get()
}

// GetOuPathOk returns a tuple with the OuPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetworkDomain) GetOuPathOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.OuPath.Get(), o.OuPath.IsSet()
}

// HasOuPath returns a boolean if a field has been set.
func (o *NetworkDomain) HasOuPath() bool {
	if o != nil && o.OuPath.IsSet() {
		return true
	}

	return false
}

// SetOuPath gets a reference to the given NullableString and assigns it to the OuPath field.
func (o *NetworkDomain) SetOuPath(v string) {
	o.OuPath.Set(&v)
}
// SetOuPathNil sets the value for OuPath to be an explicit nil
func (o *NetworkDomain) SetOuPathNil() {
	o.OuPath.Set(nil)
}

// UnsetOuPath ensures that no value is present for OuPath, not even an explicit nil
func (o *NetworkDomain) UnsetOuPath() {
	o.OuPath.Unset()
}

// GetDcServer returns the DcServer field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetworkDomain) GetDcServer() string {
	if o == nil || o.DcServer.Get() == nil {
		var ret string
		return ret
	}
	return *o.DcServer.Get()
}

// GetDcServerOk returns a tuple with the DcServer field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetworkDomain) GetDcServerOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DcServer.Get(), o.DcServer.IsSet()
}

// HasDcServer returns a boolean if a field has been set.
func (o *NetworkDomain) HasDcServer() bool {
	if o != nil && o.DcServer.IsSet() {
		return true
	}

	return false
}

// SetDcServer gets a reference to the given NullableString and assigns it to the DcServer field.
func (o *NetworkDomain) SetDcServer(v string) {
	o.DcServer.Set(&v)
}
// SetDcServerNil sets the value for DcServer to be an explicit nil
func (o *NetworkDomain) SetDcServerNil() {
	o.DcServer.Set(nil)
}

// UnsetDcServer ensures that no value is present for DcServer, not even an explicit nil
func (o *NetworkDomain) UnsetDcServer() {
	o.DcServer.Unset()
}

// GetZoneType returns the ZoneType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetworkDomain) GetZoneType() string {
	if o == nil || o.ZoneType.Get() == nil {
		var ret string
		return ret
	}
	return *o.ZoneType.Get()
}

// GetZoneTypeOk returns a tuple with the ZoneType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetworkDomain) GetZoneTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ZoneType.Get(), o.ZoneType.IsSet()
}

// HasZoneType returns a boolean if a field has been set.
func (o *NetworkDomain) HasZoneType() bool {
	if o != nil && o.ZoneType.IsSet() {
		return true
	}

	return false
}

// SetZoneType gets a reference to the given NullableString and assigns it to the ZoneType field.
func (o *NetworkDomain) SetZoneType(v string) {
	o.ZoneType.Set(&v)
}
// SetZoneTypeNil sets the value for ZoneType to be an explicit nil
func (o *NetworkDomain) SetZoneTypeNil() {
	o.ZoneType.Set(nil)
}

// UnsetZoneType ensures that no value is present for ZoneType, not even an explicit nil
func (o *NetworkDomain) UnsetZoneType() {
	o.ZoneType.Unset()
}

// GetDnssec returns the Dnssec field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetworkDomain) GetDnssec() string {
	if o == nil || o.Dnssec.Get() == nil {
		var ret string
		return ret
	}
	return *o.Dnssec.Get()
}

// GetDnssecOk returns a tuple with the Dnssec field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetworkDomain) GetDnssecOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Dnssec.Get(), o.Dnssec.IsSet()
}

// HasDnssec returns a boolean if a field has been set.
func (o *NetworkDomain) HasDnssec() bool {
	if o != nil && o.Dnssec.IsSet() {
		return true
	}

	return false
}

// SetDnssec gets a reference to the given NullableString and assigns it to the Dnssec field.
func (o *NetworkDomain) SetDnssec(v string) {
	o.Dnssec.Set(&v)
}
// SetDnssecNil sets the value for Dnssec to be an explicit nil
func (o *NetworkDomain) SetDnssecNil() {
	o.Dnssec.Set(nil)
}

// UnsetDnssec ensures that no value is present for Dnssec, not even an explicit nil
func (o *NetworkDomain) UnsetDnssec() {
	o.Dnssec.Unset()
}

// GetDomainSerial returns the DomainSerial field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetworkDomain) GetDomainSerial() string {
	if o == nil || o.DomainSerial.Get() == nil {
		var ret string
		return ret
	}
	return *o.DomainSerial.Get()
}

// GetDomainSerialOk returns a tuple with the DomainSerial field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetworkDomain) GetDomainSerialOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DomainSerial.Get(), o.DomainSerial.IsSet()
}

// HasDomainSerial returns a boolean if a field has been set.
func (o *NetworkDomain) HasDomainSerial() bool {
	if o != nil && o.DomainSerial.IsSet() {
		return true
	}

	return false
}

// SetDomainSerial gets a reference to the given NullableString and assigns it to the DomainSerial field.
func (o *NetworkDomain) SetDomainSerial(v string) {
	o.DomainSerial.Set(&v)
}
// SetDomainSerialNil sets the value for DomainSerial to be an explicit nil
func (o *NetworkDomain) SetDomainSerialNil() {
	o.DomainSerial.Set(nil)
}

// UnsetDomainSerial ensures that no value is present for DomainSerial, not even an explicit nil
func (o *NetworkDomain) UnsetDomainSerial() {
	o.DomainSerial.Unset()
}

// GetAccount returns the Account field value if set, zero value otherwise.
func (o *NetworkDomain) GetAccount() InlineResponse20040AppDeployInstance {
	if o == nil || o.Account == nil {
		var ret InlineResponse20040AppDeployInstance
		return ret
	}
	return *o.Account
}

// GetAccountOk returns a tuple with the Account field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkDomain) GetAccountOk() (*InlineResponse20040AppDeployInstance, bool) {
	if o == nil || o.Account == nil {
		return nil, false
	}
	return o.Account, true
}

// HasAccount returns a boolean if a field has been set.
func (o *NetworkDomain) HasAccount() bool {
	if o != nil && o.Account != nil {
		return true
	}

	return false
}

// SetAccount gets a reference to the given InlineResponse20040AppDeployInstance and assigns it to the Account field.
func (o *NetworkDomain) SetAccount(v InlineResponse20040AppDeployInstance) {
	o.Account = &v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *NetworkDomain) GetOwner() InlineResponse20040AppDeployInstance {
	if o == nil || o.Owner == nil {
		var ret InlineResponse20040AppDeployInstance
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkDomain) GetOwnerOk() (*InlineResponse20040AppDeployInstance, bool) {
	if o == nil || o.Owner == nil {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *NetworkDomain) HasOwner() bool {
	if o != nil && o.Owner != nil {
		return true
	}

	return false
}

// SetOwner gets a reference to the given InlineResponse20040AppDeployInstance and assigns it to the Owner field.
func (o *NetworkDomain) SetOwner(v InlineResponse20040AppDeployInstance) {
	o.Owner = &v
}

func (o NetworkDomain) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Active != nil {
		toSerialize["active"] = o.Active
	}
	if o.Fqdn.IsSet() {
		toSerialize["fqdn"] = o.Fqdn.Get()
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.Visibility != nil {
		toSerialize["visibility"] = o.Visibility
	}
	if o.DomainController != nil {
		toSerialize["domainController"] = o.DomainController
	}
	if o.PublicZone != nil {
		toSerialize["publicZone"] = o.PublicZone
	}
	if o.DomainUsername.IsSet() {
		toSerialize["domainUsername"] = o.DomainUsername.Get()
	}
	if o.DomainPassword.IsSet() {
		toSerialize["domainPassword"] = o.DomainPassword.Get()
	}
	if o.RefType.IsSet() {
		toSerialize["refType"] = o.RefType.Get()
	}
	if o.RefId.IsSet() {
		toSerialize["refId"] = o.RefId.Get()
	}
	if o.RefSource.IsSet() {
		toSerialize["refSource"] = o.RefSource.Get()
	}
	if o.InternalId.IsSet() {
		toSerialize["internalId"] = o.InternalId.Get()
	}
	if o.OuPath.IsSet() {
		toSerialize["ouPath"] = o.OuPath.Get()
	}
	if o.DcServer.IsSet() {
		toSerialize["dcServer"] = o.DcServer.Get()
	}
	if o.ZoneType.IsSet() {
		toSerialize["zoneType"] = o.ZoneType.Get()
	}
	if o.Dnssec.IsSet() {
		toSerialize["dnssec"] = o.Dnssec.Get()
	}
	if o.DomainSerial.IsSet() {
		toSerialize["domainSerial"] = o.DomainSerial.Get()
	}
	if o.Account != nil {
		toSerialize["account"] = o.Account
	}
	if o.Owner != nil {
		toSerialize["owner"] = o.Owner
	}
	return json.Marshal(toSerialize)
}

type NullableNetworkDomain struct {
	value *NetworkDomain
	isSet bool
}

func (v NullableNetworkDomain) Get() *NetworkDomain {
	return v.value
}

func (v *NullableNetworkDomain) Set(val *NetworkDomain) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkDomain) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkDomain) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkDomain(val *NetworkDomain) *NullableNetworkDomain {
	return &NullableNetworkDomain{value: val, isSet: true}
}

func (v NullableNetworkDomain) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkDomain) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


