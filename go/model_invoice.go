/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// Invoice struct for Invoice
type Invoice struct {
	Id *int64 `json:"id,omitempty"`
	OwnerId *int64 `json:"ownerId,omitempty"`
	Account *InlineResponse20040AppDeployInstance `json:"account,omitempty"`
	Group map[string]interface{} `json:"group,omitempty"`
	Cloud *InvoiceCloud `json:"cloud,omitempty"`
	Instance map[string]interface{} `json:"instance,omitempty"`
	Server NullableString `json:"server,omitempty"`
	Cluster NullableString `json:"cluster,omitempty"`
	User map[string]interface{} `json:"user,omitempty"`
	Plan map[string]interface{} `json:"plan,omitempty"`
	Tags []map[string]interface{} `json:"tags,omitempty"`
	Project NullableString `json:"project,omitempty"`
	RefType *string `json:"refType,omitempty"`
	RefId *int64 `json:"refId,omitempty"`
	RefUuid NullableString `json:"refUuid,omitempty"`
	RefName *string `json:"refName,omitempty"`
	RefCategory *string `json:"refCategory,omitempty"`
	ResourceId NullableString `json:"resourceId,omitempty"`
	ResourceUuid NullableString `json:"resourceUuid,omitempty"`
	ResourceType NullableString `json:"resourceType,omitempty"`
	ResourceName NullableString `json:"resourceName,omitempty"`
	ResourceExternalId NullableString `json:"resourceExternalId,omitempty"`
	ResourceInternalId NullableString `json:"resourceInternalId,omitempty"`
	Interval *string `json:"interval,omitempty"`
	Period *string `json:"period,omitempty"`
	Estimate *bool `json:"estimate,omitempty"`
	SummaryInvoice *bool `json:"summaryInvoice,omitempty"`
	Active *bool `json:"active,omitempty"`
	StartDate *time.Time `json:"startDate,omitempty"`
	EndDate *time.Time `json:"endDate,omitempty"`
	RefStart *time.Time `json:"refStart,omitempty"`
	RefEnd *time.Time `json:"refEnd,omitempty"`
	EstimatedComputePrice *float32 `json:"estimatedComputePrice,omitempty"`
	EstimatedComputeCost *float32 `json:"estimatedComputeCost,omitempty"`
	EstimatedMemoryPrice *float32 `json:"estimatedMemoryPrice,omitempty"`
	EstimatedMemoryCost *float32 `json:"estimatedMemoryCost,omitempty"`
	EstimatedStoragePrice *float32 `json:"estimatedStoragePrice,omitempty"`
	EstimatedStorageCost *float32 `json:"estimatedStorageCost,omitempty"`
	EstimatedNetworkPrice *float32 `json:"estimatedNetworkPrice,omitempty"`
	EstimatedNetworkCost *float32 `json:"estimatedNetworkCost,omitempty"`
	EstimatedLicensePrice *float32 `json:"estimatedLicensePrice,omitempty"`
	EstimatedLicenseCost *float32 `json:"estimatedLicenseCost,omitempty"`
	EstimatedExtraPrice *float32 `json:"estimatedExtraPrice,omitempty"`
	EstimatedExtraCost *float32 `json:"estimatedExtraCost,omitempty"`
	EstimatedTotalPrice *float32 `json:"estimatedTotalPrice,omitempty"`
	EstimatedTotalCost *float32 `json:"estimatedTotalCost,omitempty"`
	EstimatedRunningPrice *float32 `json:"estimatedRunningPrice,omitempty"`
	EstimatedRunningCost *float32 `json:"estimatedRunningCost,omitempty"`
	EstimatedCurrency *string `json:"estimatedCurrency,omitempty"`
	EstimatedConversionRate *float32 `json:"estimatedConversionRate,omitempty"`
	ActualComputePrice *float32 `json:"actualComputePrice,omitempty"`
	ActualComputeCost *float32 `json:"actualComputeCost,omitempty"`
	ActualMemoryPrice *float32 `json:"actualMemoryPrice,omitempty"`
	ActualMemoryCost *float32 `json:"actualMemoryCost,omitempty"`
	ActualStoragePrice *float32 `json:"actualStoragePrice,omitempty"`
	ActualStorageCost *float32 `json:"actualStorageCost,omitempty"`
	ActualNetworkPrice *float32 `json:"actualNetworkPrice,omitempty"`
	ActualNetworkCost *float32 `json:"actualNetworkCost,omitempty"`
	ActualLicensePrice *float32 `json:"actualLicensePrice,omitempty"`
	ActualLicenseCost *float32 `json:"actualLicenseCost,omitempty"`
	ActualExtraPrice *float32 `json:"actualExtraPrice,omitempty"`
	ActualExtraCost *float32 `json:"actualExtraCost,omitempty"`
	ActualTotalPrice *float32 `json:"actualTotalPrice,omitempty"`
	ActualTotalCost *float32 `json:"actualTotalCost,omitempty"`
	ActualRunningPrice *float32 `json:"actualRunningPrice,omitempty"`
	ActualRunningCost *float32 `json:"actualRunningCost,omitempty"`
	ActualCurrency *string `json:"actualCurrency,omitempty"`
	ActualConversionRate *float32 `json:"actualConversionRate,omitempty"`
	ComputePrice *float32 `json:"computePrice,omitempty"`
	ComputeCost *float32 `json:"computeCost,omitempty"`
	MemoryPrice *float32 `json:"memoryPrice,omitempty"`
	MemoryCost *float32 `json:"memoryCost,omitempty"`
	StoragePrice *float32 `json:"storagePrice,omitempty"`
	StorageCost *float32 `json:"storageCost,omitempty"`
	NetworkPrice *float32 `json:"networkPrice,omitempty"`
	NetworkCost *float32 `json:"networkCost,omitempty"`
	LicensePrice *float32 `json:"licensePrice,omitempty"`
	LicenseCost *float32 `json:"licenseCost,omitempty"`
	ExtraPrice *float32 `json:"extraPrice,omitempty"`
	ExtraCost *float32 `json:"extraCost,omitempty"`
	TotalPrice *float32 `json:"totalPrice,omitempty"`
	TotalCost *float32 `json:"totalCost,omitempty"`
	RunningPrice *float32 `json:"runningPrice,omitempty"`
	RunningCost *float32 `json:"runningCost,omitempty"`
	Currency *string `json:"currency,omitempty"`
	ConversionRate *float32 `json:"conversionRate,omitempty"`
	CostType *string `json:"costType,omitempty"`
	OffTime *int64 `json:"offTime,omitempty"`
	PowerState NullableString `json:"powerState,omitempty"`
	PowerDate *time.Time `json:"powerDate,omitempty"`
	RunningMultiplier *float32 `json:"runningMultiplier,omitempty"`
	UsageType NullableString `json:"usageType,omitempty"`
	UsageCategory NullableString `json:"usageCategory,omitempty"`
	LastCostDate NullableTime `json:"lastCostDate,omitempty"`
	LastActualDate NullableTime `json:"lastActualDate,omitempty"`
	DateCreated *time.Time `json:"dateCreated,omitempty"`
	LastUpdated *time.Time `json:"lastUpdated,omitempty"`
	LineItemCount *int64 `json:"lineItemCount,omitempty"`
	LineItems *[]InvoiceLineItems `json:"lineItems,omitempty"`
}

// NewInvoice instantiates a new Invoice object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInvoice() *Invoice {
	this := Invoice{}
	return &this
}

// NewInvoiceWithDefaults instantiates a new Invoice object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInvoiceWithDefaults() *Invoice {
	this := Invoice{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Invoice) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetIdOk() (*int64, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Invoice) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *Invoice) SetId(v int64) {
	o.Id = &v
}

// GetOwnerId returns the OwnerId field value if set, zero value otherwise.
func (o *Invoice) GetOwnerId() int64 {
	if o == nil || o.OwnerId == nil {
		var ret int64
		return ret
	}
	return *o.OwnerId
}

// GetOwnerIdOk returns a tuple with the OwnerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetOwnerIdOk() (*int64, bool) {
	if o == nil || o.OwnerId == nil {
		return nil, false
	}
	return o.OwnerId, true
}

// HasOwnerId returns a boolean if a field has been set.
func (o *Invoice) HasOwnerId() bool {
	if o != nil && o.OwnerId != nil {
		return true
	}

	return false
}

// SetOwnerId gets a reference to the given int64 and assigns it to the OwnerId field.
func (o *Invoice) SetOwnerId(v int64) {
	o.OwnerId = &v
}

// GetAccount returns the Account field value if set, zero value otherwise.
func (o *Invoice) GetAccount() InlineResponse20040AppDeployInstance {
	if o == nil || o.Account == nil {
		var ret InlineResponse20040AppDeployInstance
		return ret
	}
	return *o.Account
}

// GetAccountOk returns a tuple with the Account field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetAccountOk() (*InlineResponse20040AppDeployInstance, bool) {
	if o == nil || o.Account == nil {
		return nil, false
	}
	return o.Account, true
}

// HasAccount returns a boolean if a field has been set.
func (o *Invoice) HasAccount() bool {
	if o != nil && o.Account != nil {
		return true
	}

	return false
}

// SetAccount gets a reference to the given InlineResponse20040AppDeployInstance and assigns it to the Account field.
func (o *Invoice) SetAccount(v InlineResponse20040AppDeployInstance) {
	o.Account = &v
}

// GetGroup returns the Group field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Invoice) GetGroup() map[string]interface{} {
	if o == nil  {
		var ret map[string]interface{}
		return ret
	}
	return o.Group
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Invoice) GetGroupOk() (*map[string]interface{}, bool) {
	if o == nil || o.Group == nil {
		return nil, false
	}
	return &o.Group, true
}

// HasGroup returns a boolean if a field has been set.
func (o *Invoice) HasGroup() bool {
	if o != nil && o.Group != nil {
		return true
	}

	return false
}

// SetGroup gets a reference to the given map[string]interface{} and assigns it to the Group field.
func (o *Invoice) SetGroup(v map[string]interface{}) {
	o.Group = v
}

// GetCloud returns the Cloud field value if set, zero value otherwise.
func (o *Invoice) GetCloud() InvoiceCloud {
	if o == nil || o.Cloud == nil {
		var ret InvoiceCloud
		return ret
	}
	return *o.Cloud
}

// GetCloudOk returns a tuple with the Cloud field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetCloudOk() (*InvoiceCloud, bool) {
	if o == nil || o.Cloud == nil {
		return nil, false
	}
	return o.Cloud, true
}

// HasCloud returns a boolean if a field has been set.
func (o *Invoice) HasCloud() bool {
	if o != nil && o.Cloud != nil {
		return true
	}

	return false
}

// SetCloud gets a reference to the given InvoiceCloud and assigns it to the Cloud field.
func (o *Invoice) SetCloud(v InvoiceCloud) {
	o.Cloud = &v
}

// GetInstance returns the Instance field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Invoice) GetInstance() map[string]interface{} {
	if o == nil  {
		var ret map[string]interface{}
		return ret
	}
	return o.Instance
}

// GetInstanceOk returns a tuple with the Instance field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Invoice) GetInstanceOk() (*map[string]interface{}, bool) {
	if o == nil || o.Instance == nil {
		return nil, false
	}
	return &o.Instance, true
}

// HasInstance returns a boolean if a field has been set.
func (o *Invoice) HasInstance() bool {
	if o != nil && o.Instance != nil {
		return true
	}

	return false
}

// SetInstance gets a reference to the given map[string]interface{} and assigns it to the Instance field.
func (o *Invoice) SetInstance(v map[string]interface{}) {
	o.Instance = v
}

// GetServer returns the Server field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Invoice) GetServer() string {
	if o == nil || o.Server.Get() == nil {
		var ret string
		return ret
	}
	return *o.Server.Get()
}

// GetServerOk returns a tuple with the Server field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Invoice) GetServerOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Server.Get(), o.Server.IsSet()
}

// HasServer returns a boolean if a field has been set.
func (o *Invoice) HasServer() bool {
	if o != nil && o.Server.IsSet() {
		return true
	}

	return false
}

// SetServer gets a reference to the given NullableString and assigns it to the Server field.
func (o *Invoice) SetServer(v string) {
	o.Server.Set(&v)
}
// SetServerNil sets the value for Server to be an explicit nil
func (o *Invoice) SetServerNil() {
	o.Server.Set(nil)
}

// UnsetServer ensures that no value is present for Server, not even an explicit nil
func (o *Invoice) UnsetServer() {
	o.Server.Unset()
}

// GetCluster returns the Cluster field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Invoice) GetCluster() string {
	if o == nil || o.Cluster.Get() == nil {
		var ret string
		return ret
	}
	return *o.Cluster.Get()
}

// GetClusterOk returns a tuple with the Cluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Invoice) GetClusterOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Cluster.Get(), o.Cluster.IsSet()
}

// HasCluster returns a boolean if a field has been set.
func (o *Invoice) HasCluster() bool {
	if o != nil && o.Cluster.IsSet() {
		return true
	}

	return false
}

// SetCluster gets a reference to the given NullableString and assigns it to the Cluster field.
func (o *Invoice) SetCluster(v string) {
	o.Cluster.Set(&v)
}
// SetClusterNil sets the value for Cluster to be an explicit nil
func (o *Invoice) SetClusterNil() {
	o.Cluster.Set(nil)
}

// UnsetCluster ensures that no value is present for Cluster, not even an explicit nil
func (o *Invoice) UnsetCluster() {
	o.Cluster.Unset()
}

// GetUser returns the User field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Invoice) GetUser() map[string]interface{} {
	if o == nil  {
		var ret map[string]interface{}
		return ret
	}
	return o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Invoice) GetUserOk() (*map[string]interface{}, bool) {
	if o == nil || o.User == nil {
		return nil, false
	}
	return &o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *Invoice) HasUser() bool {
	if o != nil && o.User != nil {
		return true
	}

	return false
}

// SetUser gets a reference to the given map[string]interface{} and assigns it to the User field.
func (o *Invoice) SetUser(v map[string]interface{}) {
	o.User = v
}

// GetPlan returns the Plan field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Invoice) GetPlan() map[string]interface{} {
	if o == nil  {
		var ret map[string]interface{}
		return ret
	}
	return o.Plan
}

// GetPlanOk returns a tuple with the Plan field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Invoice) GetPlanOk() (*map[string]interface{}, bool) {
	if o == nil || o.Plan == nil {
		return nil, false
	}
	return &o.Plan, true
}

// HasPlan returns a boolean if a field has been set.
func (o *Invoice) HasPlan() bool {
	if o != nil && o.Plan != nil {
		return true
	}

	return false
}

// SetPlan gets a reference to the given map[string]interface{} and assigns it to the Plan field.
func (o *Invoice) SetPlan(v map[string]interface{}) {
	o.Plan = v
}

// GetTags returns the Tags field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Invoice) GetTags() []map[string]interface{} {
	if o == nil  {
		var ret []map[string]interface{}
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Invoice) GetTagsOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return &o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *Invoice) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given []map[string]interface{} and assigns it to the Tags field.
func (o *Invoice) SetTags(v []map[string]interface{}) {
	o.Tags = v
}

// GetProject returns the Project field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Invoice) GetProject() string {
	if o == nil || o.Project.Get() == nil {
		var ret string
		return ret
	}
	return *o.Project.Get()
}

// GetProjectOk returns a tuple with the Project field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Invoice) GetProjectOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Project.Get(), o.Project.IsSet()
}

// HasProject returns a boolean if a field has been set.
func (o *Invoice) HasProject() bool {
	if o != nil && o.Project.IsSet() {
		return true
	}

	return false
}

// SetProject gets a reference to the given NullableString and assigns it to the Project field.
func (o *Invoice) SetProject(v string) {
	o.Project.Set(&v)
}
// SetProjectNil sets the value for Project to be an explicit nil
func (o *Invoice) SetProjectNil() {
	o.Project.Set(nil)
}

// UnsetProject ensures that no value is present for Project, not even an explicit nil
func (o *Invoice) UnsetProject() {
	o.Project.Unset()
}

// GetRefType returns the RefType field value if set, zero value otherwise.
func (o *Invoice) GetRefType() string {
	if o == nil || o.RefType == nil {
		var ret string
		return ret
	}
	return *o.RefType
}

// GetRefTypeOk returns a tuple with the RefType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetRefTypeOk() (*string, bool) {
	if o == nil || o.RefType == nil {
		return nil, false
	}
	return o.RefType, true
}

// HasRefType returns a boolean if a field has been set.
func (o *Invoice) HasRefType() bool {
	if o != nil && o.RefType != nil {
		return true
	}

	return false
}

// SetRefType gets a reference to the given string and assigns it to the RefType field.
func (o *Invoice) SetRefType(v string) {
	o.RefType = &v
}

// GetRefId returns the RefId field value if set, zero value otherwise.
func (o *Invoice) GetRefId() int64 {
	if o == nil || o.RefId == nil {
		var ret int64
		return ret
	}
	return *o.RefId
}

// GetRefIdOk returns a tuple with the RefId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetRefIdOk() (*int64, bool) {
	if o == nil || o.RefId == nil {
		return nil, false
	}
	return o.RefId, true
}

// HasRefId returns a boolean if a field has been set.
func (o *Invoice) HasRefId() bool {
	if o != nil && o.RefId != nil {
		return true
	}

	return false
}

// SetRefId gets a reference to the given int64 and assigns it to the RefId field.
func (o *Invoice) SetRefId(v int64) {
	o.RefId = &v
}

// GetRefUuid returns the RefUuid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Invoice) GetRefUuid() string {
	if o == nil || o.RefUuid.Get() == nil {
		var ret string
		return ret
	}
	return *o.RefUuid.Get()
}

// GetRefUuidOk returns a tuple with the RefUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Invoice) GetRefUuidOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RefUuid.Get(), o.RefUuid.IsSet()
}

// HasRefUuid returns a boolean if a field has been set.
func (o *Invoice) HasRefUuid() bool {
	if o != nil && o.RefUuid.IsSet() {
		return true
	}

	return false
}

// SetRefUuid gets a reference to the given NullableString and assigns it to the RefUuid field.
func (o *Invoice) SetRefUuid(v string) {
	o.RefUuid.Set(&v)
}
// SetRefUuidNil sets the value for RefUuid to be an explicit nil
func (o *Invoice) SetRefUuidNil() {
	o.RefUuid.Set(nil)
}

// UnsetRefUuid ensures that no value is present for RefUuid, not even an explicit nil
func (o *Invoice) UnsetRefUuid() {
	o.RefUuid.Unset()
}

// GetRefName returns the RefName field value if set, zero value otherwise.
func (o *Invoice) GetRefName() string {
	if o == nil || o.RefName == nil {
		var ret string
		return ret
	}
	return *o.RefName
}

// GetRefNameOk returns a tuple with the RefName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetRefNameOk() (*string, bool) {
	if o == nil || o.RefName == nil {
		return nil, false
	}
	return o.RefName, true
}

// HasRefName returns a boolean if a field has been set.
func (o *Invoice) HasRefName() bool {
	if o != nil && o.RefName != nil {
		return true
	}

	return false
}

// SetRefName gets a reference to the given string and assigns it to the RefName field.
func (o *Invoice) SetRefName(v string) {
	o.RefName = &v
}

// GetRefCategory returns the RefCategory field value if set, zero value otherwise.
func (o *Invoice) GetRefCategory() string {
	if o == nil || o.RefCategory == nil {
		var ret string
		return ret
	}
	return *o.RefCategory
}

// GetRefCategoryOk returns a tuple with the RefCategory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetRefCategoryOk() (*string, bool) {
	if o == nil || o.RefCategory == nil {
		return nil, false
	}
	return o.RefCategory, true
}

// HasRefCategory returns a boolean if a field has been set.
func (o *Invoice) HasRefCategory() bool {
	if o != nil && o.RefCategory != nil {
		return true
	}

	return false
}

// SetRefCategory gets a reference to the given string and assigns it to the RefCategory field.
func (o *Invoice) SetRefCategory(v string) {
	o.RefCategory = &v
}

// GetResourceId returns the ResourceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Invoice) GetResourceId() string {
	if o == nil || o.ResourceId.Get() == nil {
		var ret string
		return ret
	}
	return *o.ResourceId.Get()
}

// GetResourceIdOk returns a tuple with the ResourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Invoice) GetResourceIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ResourceId.Get(), o.ResourceId.IsSet()
}

// HasResourceId returns a boolean if a field has been set.
func (o *Invoice) HasResourceId() bool {
	if o != nil && o.ResourceId.IsSet() {
		return true
	}

	return false
}

// SetResourceId gets a reference to the given NullableString and assigns it to the ResourceId field.
func (o *Invoice) SetResourceId(v string) {
	o.ResourceId.Set(&v)
}
// SetResourceIdNil sets the value for ResourceId to be an explicit nil
func (o *Invoice) SetResourceIdNil() {
	o.ResourceId.Set(nil)
}

// UnsetResourceId ensures that no value is present for ResourceId, not even an explicit nil
func (o *Invoice) UnsetResourceId() {
	o.ResourceId.Unset()
}

// GetResourceUuid returns the ResourceUuid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Invoice) GetResourceUuid() string {
	if o == nil || o.ResourceUuid.Get() == nil {
		var ret string
		return ret
	}
	return *o.ResourceUuid.Get()
}

// GetResourceUuidOk returns a tuple with the ResourceUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Invoice) GetResourceUuidOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ResourceUuid.Get(), o.ResourceUuid.IsSet()
}

// HasResourceUuid returns a boolean if a field has been set.
func (o *Invoice) HasResourceUuid() bool {
	if o != nil && o.ResourceUuid.IsSet() {
		return true
	}

	return false
}

// SetResourceUuid gets a reference to the given NullableString and assigns it to the ResourceUuid field.
func (o *Invoice) SetResourceUuid(v string) {
	o.ResourceUuid.Set(&v)
}
// SetResourceUuidNil sets the value for ResourceUuid to be an explicit nil
func (o *Invoice) SetResourceUuidNil() {
	o.ResourceUuid.Set(nil)
}

// UnsetResourceUuid ensures that no value is present for ResourceUuid, not even an explicit nil
func (o *Invoice) UnsetResourceUuid() {
	o.ResourceUuid.Unset()
}

// GetResourceType returns the ResourceType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Invoice) GetResourceType() string {
	if o == nil || o.ResourceType.Get() == nil {
		var ret string
		return ret
	}
	return *o.ResourceType.Get()
}

// GetResourceTypeOk returns a tuple with the ResourceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Invoice) GetResourceTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ResourceType.Get(), o.ResourceType.IsSet()
}

// HasResourceType returns a boolean if a field has been set.
func (o *Invoice) HasResourceType() bool {
	if o != nil && o.ResourceType.IsSet() {
		return true
	}

	return false
}

// SetResourceType gets a reference to the given NullableString and assigns it to the ResourceType field.
func (o *Invoice) SetResourceType(v string) {
	o.ResourceType.Set(&v)
}
// SetResourceTypeNil sets the value for ResourceType to be an explicit nil
func (o *Invoice) SetResourceTypeNil() {
	o.ResourceType.Set(nil)
}

// UnsetResourceType ensures that no value is present for ResourceType, not even an explicit nil
func (o *Invoice) UnsetResourceType() {
	o.ResourceType.Unset()
}

// GetResourceName returns the ResourceName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Invoice) GetResourceName() string {
	if o == nil || o.ResourceName.Get() == nil {
		var ret string
		return ret
	}
	return *o.ResourceName.Get()
}

// GetResourceNameOk returns a tuple with the ResourceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Invoice) GetResourceNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ResourceName.Get(), o.ResourceName.IsSet()
}

// HasResourceName returns a boolean if a field has been set.
func (o *Invoice) HasResourceName() bool {
	if o != nil && o.ResourceName.IsSet() {
		return true
	}

	return false
}

// SetResourceName gets a reference to the given NullableString and assigns it to the ResourceName field.
func (o *Invoice) SetResourceName(v string) {
	o.ResourceName.Set(&v)
}
// SetResourceNameNil sets the value for ResourceName to be an explicit nil
func (o *Invoice) SetResourceNameNil() {
	o.ResourceName.Set(nil)
}

// UnsetResourceName ensures that no value is present for ResourceName, not even an explicit nil
func (o *Invoice) UnsetResourceName() {
	o.ResourceName.Unset()
}

// GetResourceExternalId returns the ResourceExternalId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Invoice) GetResourceExternalId() string {
	if o == nil || o.ResourceExternalId.Get() == nil {
		var ret string
		return ret
	}
	return *o.ResourceExternalId.Get()
}

// GetResourceExternalIdOk returns a tuple with the ResourceExternalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Invoice) GetResourceExternalIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ResourceExternalId.Get(), o.ResourceExternalId.IsSet()
}

// HasResourceExternalId returns a boolean if a field has been set.
func (o *Invoice) HasResourceExternalId() bool {
	if o != nil && o.ResourceExternalId.IsSet() {
		return true
	}

	return false
}

// SetResourceExternalId gets a reference to the given NullableString and assigns it to the ResourceExternalId field.
func (o *Invoice) SetResourceExternalId(v string) {
	o.ResourceExternalId.Set(&v)
}
// SetResourceExternalIdNil sets the value for ResourceExternalId to be an explicit nil
func (o *Invoice) SetResourceExternalIdNil() {
	o.ResourceExternalId.Set(nil)
}

// UnsetResourceExternalId ensures that no value is present for ResourceExternalId, not even an explicit nil
func (o *Invoice) UnsetResourceExternalId() {
	o.ResourceExternalId.Unset()
}

// GetResourceInternalId returns the ResourceInternalId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Invoice) GetResourceInternalId() string {
	if o == nil || o.ResourceInternalId.Get() == nil {
		var ret string
		return ret
	}
	return *o.ResourceInternalId.Get()
}

// GetResourceInternalIdOk returns a tuple with the ResourceInternalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Invoice) GetResourceInternalIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ResourceInternalId.Get(), o.ResourceInternalId.IsSet()
}

// HasResourceInternalId returns a boolean if a field has been set.
func (o *Invoice) HasResourceInternalId() bool {
	if o != nil && o.ResourceInternalId.IsSet() {
		return true
	}

	return false
}

// SetResourceInternalId gets a reference to the given NullableString and assigns it to the ResourceInternalId field.
func (o *Invoice) SetResourceInternalId(v string) {
	o.ResourceInternalId.Set(&v)
}
// SetResourceInternalIdNil sets the value for ResourceInternalId to be an explicit nil
func (o *Invoice) SetResourceInternalIdNil() {
	o.ResourceInternalId.Set(nil)
}

// UnsetResourceInternalId ensures that no value is present for ResourceInternalId, not even an explicit nil
func (o *Invoice) UnsetResourceInternalId() {
	o.ResourceInternalId.Unset()
}

// GetInterval returns the Interval field value if set, zero value otherwise.
func (o *Invoice) GetInterval() string {
	if o == nil || o.Interval == nil {
		var ret string
		return ret
	}
	return *o.Interval
}

// GetIntervalOk returns a tuple with the Interval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetIntervalOk() (*string, bool) {
	if o == nil || o.Interval == nil {
		return nil, false
	}
	return o.Interval, true
}

// HasInterval returns a boolean if a field has been set.
func (o *Invoice) HasInterval() bool {
	if o != nil && o.Interval != nil {
		return true
	}

	return false
}

// SetInterval gets a reference to the given string and assigns it to the Interval field.
func (o *Invoice) SetInterval(v string) {
	o.Interval = &v
}

// GetPeriod returns the Period field value if set, zero value otherwise.
func (o *Invoice) GetPeriod() string {
	if o == nil || o.Period == nil {
		var ret string
		return ret
	}
	return *o.Period
}

// GetPeriodOk returns a tuple with the Period field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetPeriodOk() (*string, bool) {
	if o == nil || o.Period == nil {
		return nil, false
	}
	return o.Period, true
}

// HasPeriod returns a boolean if a field has been set.
func (o *Invoice) HasPeriod() bool {
	if o != nil && o.Period != nil {
		return true
	}

	return false
}

// SetPeriod gets a reference to the given string and assigns it to the Period field.
func (o *Invoice) SetPeriod(v string) {
	o.Period = &v
}

// GetEstimate returns the Estimate field value if set, zero value otherwise.
func (o *Invoice) GetEstimate() bool {
	if o == nil || o.Estimate == nil {
		var ret bool
		return ret
	}
	return *o.Estimate
}

// GetEstimateOk returns a tuple with the Estimate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetEstimateOk() (*bool, bool) {
	if o == nil || o.Estimate == nil {
		return nil, false
	}
	return o.Estimate, true
}

// HasEstimate returns a boolean if a field has been set.
func (o *Invoice) HasEstimate() bool {
	if o != nil && o.Estimate != nil {
		return true
	}

	return false
}

// SetEstimate gets a reference to the given bool and assigns it to the Estimate field.
func (o *Invoice) SetEstimate(v bool) {
	o.Estimate = &v
}

// GetSummaryInvoice returns the SummaryInvoice field value if set, zero value otherwise.
func (o *Invoice) GetSummaryInvoice() bool {
	if o == nil || o.SummaryInvoice == nil {
		var ret bool
		return ret
	}
	return *o.SummaryInvoice
}

// GetSummaryInvoiceOk returns a tuple with the SummaryInvoice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetSummaryInvoiceOk() (*bool, bool) {
	if o == nil || o.SummaryInvoice == nil {
		return nil, false
	}
	return o.SummaryInvoice, true
}

// HasSummaryInvoice returns a boolean if a field has been set.
func (o *Invoice) HasSummaryInvoice() bool {
	if o != nil && o.SummaryInvoice != nil {
		return true
	}

	return false
}

// SetSummaryInvoice gets a reference to the given bool and assigns it to the SummaryInvoice field.
func (o *Invoice) SetSummaryInvoice(v bool) {
	o.SummaryInvoice = &v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *Invoice) GetActive() bool {
	if o == nil || o.Active == nil {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetActiveOk() (*bool, bool) {
	if o == nil || o.Active == nil {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *Invoice) HasActive() bool {
	if o != nil && o.Active != nil {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *Invoice) SetActive(v bool) {
	o.Active = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *Invoice) GetStartDate() time.Time {
	if o == nil || o.StartDate == nil {
		var ret time.Time
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetStartDateOk() (*time.Time, bool) {
	if o == nil || o.StartDate == nil {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *Invoice) HasStartDate() bool {
	if o != nil && o.StartDate != nil {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given time.Time and assigns it to the StartDate field.
func (o *Invoice) SetStartDate(v time.Time) {
	o.StartDate = &v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *Invoice) GetEndDate() time.Time {
	if o == nil || o.EndDate == nil {
		var ret time.Time
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetEndDateOk() (*time.Time, bool) {
	if o == nil || o.EndDate == nil {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *Invoice) HasEndDate() bool {
	if o != nil && o.EndDate != nil {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given time.Time and assigns it to the EndDate field.
func (o *Invoice) SetEndDate(v time.Time) {
	o.EndDate = &v
}

// GetRefStart returns the RefStart field value if set, zero value otherwise.
func (o *Invoice) GetRefStart() time.Time {
	if o == nil || o.RefStart == nil {
		var ret time.Time
		return ret
	}
	return *o.RefStart
}

// GetRefStartOk returns a tuple with the RefStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetRefStartOk() (*time.Time, bool) {
	if o == nil || o.RefStart == nil {
		return nil, false
	}
	return o.RefStart, true
}

// HasRefStart returns a boolean if a field has been set.
func (o *Invoice) HasRefStart() bool {
	if o != nil && o.RefStart != nil {
		return true
	}

	return false
}

// SetRefStart gets a reference to the given time.Time and assigns it to the RefStart field.
func (o *Invoice) SetRefStart(v time.Time) {
	o.RefStart = &v
}

// GetRefEnd returns the RefEnd field value if set, zero value otherwise.
func (o *Invoice) GetRefEnd() time.Time {
	if o == nil || o.RefEnd == nil {
		var ret time.Time
		return ret
	}
	return *o.RefEnd
}

// GetRefEndOk returns a tuple with the RefEnd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetRefEndOk() (*time.Time, bool) {
	if o == nil || o.RefEnd == nil {
		return nil, false
	}
	return o.RefEnd, true
}

// HasRefEnd returns a boolean if a field has been set.
func (o *Invoice) HasRefEnd() bool {
	if o != nil && o.RefEnd != nil {
		return true
	}

	return false
}

// SetRefEnd gets a reference to the given time.Time and assigns it to the RefEnd field.
func (o *Invoice) SetRefEnd(v time.Time) {
	o.RefEnd = &v
}

// GetEstimatedComputePrice returns the EstimatedComputePrice field value if set, zero value otherwise.
func (o *Invoice) GetEstimatedComputePrice() float32 {
	if o == nil || o.EstimatedComputePrice == nil {
		var ret float32
		return ret
	}
	return *o.EstimatedComputePrice
}

// GetEstimatedComputePriceOk returns a tuple with the EstimatedComputePrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetEstimatedComputePriceOk() (*float32, bool) {
	if o == nil || o.EstimatedComputePrice == nil {
		return nil, false
	}
	return o.EstimatedComputePrice, true
}

// HasEstimatedComputePrice returns a boolean if a field has been set.
func (o *Invoice) HasEstimatedComputePrice() bool {
	if o != nil && o.EstimatedComputePrice != nil {
		return true
	}

	return false
}

// SetEstimatedComputePrice gets a reference to the given float32 and assigns it to the EstimatedComputePrice field.
func (o *Invoice) SetEstimatedComputePrice(v float32) {
	o.EstimatedComputePrice = &v
}

// GetEstimatedComputeCost returns the EstimatedComputeCost field value if set, zero value otherwise.
func (o *Invoice) GetEstimatedComputeCost() float32 {
	if o == nil || o.EstimatedComputeCost == nil {
		var ret float32
		return ret
	}
	return *o.EstimatedComputeCost
}

// GetEstimatedComputeCostOk returns a tuple with the EstimatedComputeCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetEstimatedComputeCostOk() (*float32, bool) {
	if o == nil || o.EstimatedComputeCost == nil {
		return nil, false
	}
	return o.EstimatedComputeCost, true
}

// HasEstimatedComputeCost returns a boolean if a field has been set.
func (o *Invoice) HasEstimatedComputeCost() bool {
	if o != nil && o.EstimatedComputeCost != nil {
		return true
	}

	return false
}

// SetEstimatedComputeCost gets a reference to the given float32 and assigns it to the EstimatedComputeCost field.
func (o *Invoice) SetEstimatedComputeCost(v float32) {
	o.EstimatedComputeCost = &v
}

// GetEstimatedMemoryPrice returns the EstimatedMemoryPrice field value if set, zero value otherwise.
func (o *Invoice) GetEstimatedMemoryPrice() float32 {
	if o == nil || o.EstimatedMemoryPrice == nil {
		var ret float32
		return ret
	}
	return *o.EstimatedMemoryPrice
}

// GetEstimatedMemoryPriceOk returns a tuple with the EstimatedMemoryPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetEstimatedMemoryPriceOk() (*float32, bool) {
	if o == nil || o.EstimatedMemoryPrice == nil {
		return nil, false
	}
	return o.EstimatedMemoryPrice, true
}

// HasEstimatedMemoryPrice returns a boolean if a field has been set.
func (o *Invoice) HasEstimatedMemoryPrice() bool {
	if o != nil && o.EstimatedMemoryPrice != nil {
		return true
	}

	return false
}

// SetEstimatedMemoryPrice gets a reference to the given float32 and assigns it to the EstimatedMemoryPrice field.
func (o *Invoice) SetEstimatedMemoryPrice(v float32) {
	o.EstimatedMemoryPrice = &v
}

// GetEstimatedMemoryCost returns the EstimatedMemoryCost field value if set, zero value otherwise.
func (o *Invoice) GetEstimatedMemoryCost() float32 {
	if o == nil || o.EstimatedMemoryCost == nil {
		var ret float32
		return ret
	}
	return *o.EstimatedMemoryCost
}

// GetEstimatedMemoryCostOk returns a tuple with the EstimatedMemoryCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetEstimatedMemoryCostOk() (*float32, bool) {
	if o == nil || o.EstimatedMemoryCost == nil {
		return nil, false
	}
	return o.EstimatedMemoryCost, true
}

// HasEstimatedMemoryCost returns a boolean if a field has been set.
func (o *Invoice) HasEstimatedMemoryCost() bool {
	if o != nil && o.EstimatedMemoryCost != nil {
		return true
	}

	return false
}

// SetEstimatedMemoryCost gets a reference to the given float32 and assigns it to the EstimatedMemoryCost field.
func (o *Invoice) SetEstimatedMemoryCost(v float32) {
	o.EstimatedMemoryCost = &v
}

// GetEstimatedStoragePrice returns the EstimatedStoragePrice field value if set, zero value otherwise.
func (o *Invoice) GetEstimatedStoragePrice() float32 {
	if o == nil || o.EstimatedStoragePrice == nil {
		var ret float32
		return ret
	}
	return *o.EstimatedStoragePrice
}

// GetEstimatedStoragePriceOk returns a tuple with the EstimatedStoragePrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetEstimatedStoragePriceOk() (*float32, bool) {
	if o == nil || o.EstimatedStoragePrice == nil {
		return nil, false
	}
	return o.EstimatedStoragePrice, true
}

// HasEstimatedStoragePrice returns a boolean if a field has been set.
func (o *Invoice) HasEstimatedStoragePrice() bool {
	if o != nil && o.EstimatedStoragePrice != nil {
		return true
	}

	return false
}

// SetEstimatedStoragePrice gets a reference to the given float32 and assigns it to the EstimatedStoragePrice field.
func (o *Invoice) SetEstimatedStoragePrice(v float32) {
	o.EstimatedStoragePrice = &v
}

// GetEstimatedStorageCost returns the EstimatedStorageCost field value if set, zero value otherwise.
func (o *Invoice) GetEstimatedStorageCost() float32 {
	if o == nil || o.EstimatedStorageCost == nil {
		var ret float32
		return ret
	}
	return *o.EstimatedStorageCost
}

// GetEstimatedStorageCostOk returns a tuple with the EstimatedStorageCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetEstimatedStorageCostOk() (*float32, bool) {
	if o == nil || o.EstimatedStorageCost == nil {
		return nil, false
	}
	return o.EstimatedStorageCost, true
}

// HasEstimatedStorageCost returns a boolean if a field has been set.
func (o *Invoice) HasEstimatedStorageCost() bool {
	if o != nil && o.EstimatedStorageCost != nil {
		return true
	}

	return false
}

// SetEstimatedStorageCost gets a reference to the given float32 and assigns it to the EstimatedStorageCost field.
func (o *Invoice) SetEstimatedStorageCost(v float32) {
	o.EstimatedStorageCost = &v
}

// GetEstimatedNetworkPrice returns the EstimatedNetworkPrice field value if set, zero value otherwise.
func (o *Invoice) GetEstimatedNetworkPrice() float32 {
	if o == nil || o.EstimatedNetworkPrice == nil {
		var ret float32
		return ret
	}
	return *o.EstimatedNetworkPrice
}

// GetEstimatedNetworkPriceOk returns a tuple with the EstimatedNetworkPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetEstimatedNetworkPriceOk() (*float32, bool) {
	if o == nil || o.EstimatedNetworkPrice == nil {
		return nil, false
	}
	return o.EstimatedNetworkPrice, true
}

// HasEstimatedNetworkPrice returns a boolean if a field has been set.
func (o *Invoice) HasEstimatedNetworkPrice() bool {
	if o != nil && o.EstimatedNetworkPrice != nil {
		return true
	}

	return false
}

// SetEstimatedNetworkPrice gets a reference to the given float32 and assigns it to the EstimatedNetworkPrice field.
func (o *Invoice) SetEstimatedNetworkPrice(v float32) {
	o.EstimatedNetworkPrice = &v
}

// GetEstimatedNetworkCost returns the EstimatedNetworkCost field value if set, zero value otherwise.
func (o *Invoice) GetEstimatedNetworkCost() float32 {
	if o == nil || o.EstimatedNetworkCost == nil {
		var ret float32
		return ret
	}
	return *o.EstimatedNetworkCost
}

// GetEstimatedNetworkCostOk returns a tuple with the EstimatedNetworkCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetEstimatedNetworkCostOk() (*float32, bool) {
	if o == nil || o.EstimatedNetworkCost == nil {
		return nil, false
	}
	return o.EstimatedNetworkCost, true
}

// HasEstimatedNetworkCost returns a boolean if a field has been set.
func (o *Invoice) HasEstimatedNetworkCost() bool {
	if o != nil && o.EstimatedNetworkCost != nil {
		return true
	}

	return false
}

// SetEstimatedNetworkCost gets a reference to the given float32 and assigns it to the EstimatedNetworkCost field.
func (o *Invoice) SetEstimatedNetworkCost(v float32) {
	o.EstimatedNetworkCost = &v
}

// GetEstimatedLicensePrice returns the EstimatedLicensePrice field value if set, zero value otherwise.
func (o *Invoice) GetEstimatedLicensePrice() float32 {
	if o == nil || o.EstimatedLicensePrice == nil {
		var ret float32
		return ret
	}
	return *o.EstimatedLicensePrice
}

// GetEstimatedLicensePriceOk returns a tuple with the EstimatedLicensePrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetEstimatedLicensePriceOk() (*float32, bool) {
	if o == nil || o.EstimatedLicensePrice == nil {
		return nil, false
	}
	return o.EstimatedLicensePrice, true
}

// HasEstimatedLicensePrice returns a boolean if a field has been set.
func (o *Invoice) HasEstimatedLicensePrice() bool {
	if o != nil && o.EstimatedLicensePrice != nil {
		return true
	}

	return false
}

// SetEstimatedLicensePrice gets a reference to the given float32 and assigns it to the EstimatedLicensePrice field.
func (o *Invoice) SetEstimatedLicensePrice(v float32) {
	o.EstimatedLicensePrice = &v
}

// GetEstimatedLicenseCost returns the EstimatedLicenseCost field value if set, zero value otherwise.
func (o *Invoice) GetEstimatedLicenseCost() float32 {
	if o == nil || o.EstimatedLicenseCost == nil {
		var ret float32
		return ret
	}
	return *o.EstimatedLicenseCost
}

// GetEstimatedLicenseCostOk returns a tuple with the EstimatedLicenseCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetEstimatedLicenseCostOk() (*float32, bool) {
	if o == nil || o.EstimatedLicenseCost == nil {
		return nil, false
	}
	return o.EstimatedLicenseCost, true
}

// HasEstimatedLicenseCost returns a boolean if a field has been set.
func (o *Invoice) HasEstimatedLicenseCost() bool {
	if o != nil && o.EstimatedLicenseCost != nil {
		return true
	}

	return false
}

// SetEstimatedLicenseCost gets a reference to the given float32 and assigns it to the EstimatedLicenseCost field.
func (o *Invoice) SetEstimatedLicenseCost(v float32) {
	o.EstimatedLicenseCost = &v
}

// GetEstimatedExtraPrice returns the EstimatedExtraPrice field value if set, zero value otherwise.
func (o *Invoice) GetEstimatedExtraPrice() float32 {
	if o == nil || o.EstimatedExtraPrice == nil {
		var ret float32
		return ret
	}
	return *o.EstimatedExtraPrice
}

// GetEstimatedExtraPriceOk returns a tuple with the EstimatedExtraPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetEstimatedExtraPriceOk() (*float32, bool) {
	if o == nil || o.EstimatedExtraPrice == nil {
		return nil, false
	}
	return o.EstimatedExtraPrice, true
}

// HasEstimatedExtraPrice returns a boolean if a field has been set.
func (o *Invoice) HasEstimatedExtraPrice() bool {
	if o != nil && o.EstimatedExtraPrice != nil {
		return true
	}

	return false
}

// SetEstimatedExtraPrice gets a reference to the given float32 and assigns it to the EstimatedExtraPrice field.
func (o *Invoice) SetEstimatedExtraPrice(v float32) {
	o.EstimatedExtraPrice = &v
}

// GetEstimatedExtraCost returns the EstimatedExtraCost field value if set, zero value otherwise.
func (o *Invoice) GetEstimatedExtraCost() float32 {
	if o == nil || o.EstimatedExtraCost == nil {
		var ret float32
		return ret
	}
	return *o.EstimatedExtraCost
}

// GetEstimatedExtraCostOk returns a tuple with the EstimatedExtraCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetEstimatedExtraCostOk() (*float32, bool) {
	if o == nil || o.EstimatedExtraCost == nil {
		return nil, false
	}
	return o.EstimatedExtraCost, true
}

// HasEstimatedExtraCost returns a boolean if a field has been set.
func (o *Invoice) HasEstimatedExtraCost() bool {
	if o != nil && o.EstimatedExtraCost != nil {
		return true
	}

	return false
}

// SetEstimatedExtraCost gets a reference to the given float32 and assigns it to the EstimatedExtraCost field.
func (o *Invoice) SetEstimatedExtraCost(v float32) {
	o.EstimatedExtraCost = &v
}

// GetEstimatedTotalPrice returns the EstimatedTotalPrice field value if set, zero value otherwise.
func (o *Invoice) GetEstimatedTotalPrice() float32 {
	if o == nil || o.EstimatedTotalPrice == nil {
		var ret float32
		return ret
	}
	return *o.EstimatedTotalPrice
}

// GetEstimatedTotalPriceOk returns a tuple with the EstimatedTotalPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetEstimatedTotalPriceOk() (*float32, bool) {
	if o == nil || o.EstimatedTotalPrice == nil {
		return nil, false
	}
	return o.EstimatedTotalPrice, true
}

// HasEstimatedTotalPrice returns a boolean if a field has been set.
func (o *Invoice) HasEstimatedTotalPrice() bool {
	if o != nil && o.EstimatedTotalPrice != nil {
		return true
	}

	return false
}

// SetEstimatedTotalPrice gets a reference to the given float32 and assigns it to the EstimatedTotalPrice field.
func (o *Invoice) SetEstimatedTotalPrice(v float32) {
	o.EstimatedTotalPrice = &v
}

// GetEstimatedTotalCost returns the EstimatedTotalCost field value if set, zero value otherwise.
func (o *Invoice) GetEstimatedTotalCost() float32 {
	if o == nil || o.EstimatedTotalCost == nil {
		var ret float32
		return ret
	}
	return *o.EstimatedTotalCost
}

// GetEstimatedTotalCostOk returns a tuple with the EstimatedTotalCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetEstimatedTotalCostOk() (*float32, bool) {
	if o == nil || o.EstimatedTotalCost == nil {
		return nil, false
	}
	return o.EstimatedTotalCost, true
}

// HasEstimatedTotalCost returns a boolean if a field has been set.
func (o *Invoice) HasEstimatedTotalCost() bool {
	if o != nil && o.EstimatedTotalCost != nil {
		return true
	}

	return false
}

// SetEstimatedTotalCost gets a reference to the given float32 and assigns it to the EstimatedTotalCost field.
func (o *Invoice) SetEstimatedTotalCost(v float32) {
	o.EstimatedTotalCost = &v
}

// GetEstimatedRunningPrice returns the EstimatedRunningPrice field value if set, zero value otherwise.
func (o *Invoice) GetEstimatedRunningPrice() float32 {
	if o == nil || o.EstimatedRunningPrice == nil {
		var ret float32
		return ret
	}
	return *o.EstimatedRunningPrice
}

// GetEstimatedRunningPriceOk returns a tuple with the EstimatedRunningPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetEstimatedRunningPriceOk() (*float32, bool) {
	if o == nil || o.EstimatedRunningPrice == nil {
		return nil, false
	}
	return o.EstimatedRunningPrice, true
}

// HasEstimatedRunningPrice returns a boolean if a field has been set.
func (o *Invoice) HasEstimatedRunningPrice() bool {
	if o != nil && o.EstimatedRunningPrice != nil {
		return true
	}

	return false
}

// SetEstimatedRunningPrice gets a reference to the given float32 and assigns it to the EstimatedRunningPrice field.
func (o *Invoice) SetEstimatedRunningPrice(v float32) {
	o.EstimatedRunningPrice = &v
}

// GetEstimatedRunningCost returns the EstimatedRunningCost field value if set, zero value otherwise.
func (o *Invoice) GetEstimatedRunningCost() float32 {
	if o == nil || o.EstimatedRunningCost == nil {
		var ret float32
		return ret
	}
	return *o.EstimatedRunningCost
}

// GetEstimatedRunningCostOk returns a tuple with the EstimatedRunningCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetEstimatedRunningCostOk() (*float32, bool) {
	if o == nil || o.EstimatedRunningCost == nil {
		return nil, false
	}
	return o.EstimatedRunningCost, true
}

// HasEstimatedRunningCost returns a boolean if a field has been set.
func (o *Invoice) HasEstimatedRunningCost() bool {
	if o != nil && o.EstimatedRunningCost != nil {
		return true
	}

	return false
}

// SetEstimatedRunningCost gets a reference to the given float32 and assigns it to the EstimatedRunningCost field.
func (o *Invoice) SetEstimatedRunningCost(v float32) {
	o.EstimatedRunningCost = &v
}

// GetEstimatedCurrency returns the EstimatedCurrency field value if set, zero value otherwise.
func (o *Invoice) GetEstimatedCurrency() string {
	if o == nil || o.EstimatedCurrency == nil {
		var ret string
		return ret
	}
	return *o.EstimatedCurrency
}

// GetEstimatedCurrencyOk returns a tuple with the EstimatedCurrency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetEstimatedCurrencyOk() (*string, bool) {
	if o == nil || o.EstimatedCurrency == nil {
		return nil, false
	}
	return o.EstimatedCurrency, true
}

// HasEstimatedCurrency returns a boolean if a field has been set.
func (o *Invoice) HasEstimatedCurrency() bool {
	if o != nil && o.EstimatedCurrency != nil {
		return true
	}

	return false
}

// SetEstimatedCurrency gets a reference to the given string and assigns it to the EstimatedCurrency field.
func (o *Invoice) SetEstimatedCurrency(v string) {
	o.EstimatedCurrency = &v
}

// GetEstimatedConversionRate returns the EstimatedConversionRate field value if set, zero value otherwise.
func (o *Invoice) GetEstimatedConversionRate() float32 {
	if o == nil || o.EstimatedConversionRate == nil {
		var ret float32
		return ret
	}
	return *o.EstimatedConversionRate
}

// GetEstimatedConversionRateOk returns a tuple with the EstimatedConversionRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetEstimatedConversionRateOk() (*float32, bool) {
	if o == nil || o.EstimatedConversionRate == nil {
		return nil, false
	}
	return o.EstimatedConversionRate, true
}

// HasEstimatedConversionRate returns a boolean if a field has been set.
func (o *Invoice) HasEstimatedConversionRate() bool {
	if o != nil && o.EstimatedConversionRate != nil {
		return true
	}

	return false
}

// SetEstimatedConversionRate gets a reference to the given float32 and assigns it to the EstimatedConversionRate field.
func (o *Invoice) SetEstimatedConversionRate(v float32) {
	o.EstimatedConversionRate = &v
}

// GetActualComputePrice returns the ActualComputePrice field value if set, zero value otherwise.
func (o *Invoice) GetActualComputePrice() float32 {
	if o == nil || o.ActualComputePrice == nil {
		var ret float32
		return ret
	}
	return *o.ActualComputePrice
}

// GetActualComputePriceOk returns a tuple with the ActualComputePrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetActualComputePriceOk() (*float32, bool) {
	if o == nil || o.ActualComputePrice == nil {
		return nil, false
	}
	return o.ActualComputePrice, true
}

// HasActualComputePrice returns a boolean if a field has been set.
func (o *Invoice) HasActualComputePrice() bool {
	if o != nil && o.ActualComputePrice != nil {
		return true
	}

	return false
}

// SetActualComputePrice gets a reference to the given float32 and assigns it to the ActualComputePrice field.
func (o *Invoice) SetActualComputePrice(v float32) {
	o.ActualComputePrice = &v
}

// GetActualComputeCost returns the ActualComputeCost field value if set, zero value otherwise.
func (o *Invoice) GetActualComputeCost() float32 {
	if o == nil || o.ActualComputeCost == nil {
		var ret float32
		return ret
	}
	return *o.ActualComputeCost
}

// GetActualComputeCostOk returns a tuple with the ActualComputeCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetActualComputeCostOk() (*float32, bool) {
	if o == nil || o.ActualComputeCost == nil {
		return nil, false
	}
	return o.ActualComputeCost, true
}

// HasActualComputeCost returns a boolean if a field has been set.
func (o *Invoice) HasActualComputeCost() bool {
	if o != nil && o.ActualComputeCost != nil {
		return true
	}

	return false
}

// SetActualComputeCost gets a reference to the given float32 and assigns it to the ActualComputeCost field.
func (o *Invoice) SetActualComputeCost(v float32) {
	o.ActualComputeCost = &v
}

// GetActualMemoryPrice returns the ActualMemoryPrice field value if set, zero value otherwise.
func (o *Invoice) GetActualMemoryPrice() float32 {
	if o == nil || o.ActualMemoryPrice == nil {
		var ret float32
		return ret
	}
	return *o.ActualMemoryPrice
}

// GetActualMemoryPriceOk returns a tuple with the ActualMemoryPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetActualMemoryPriceOk() (*float32, bool) {
	if o == nil || o.ActualMemoryPrice == nil {
		return nil, false
	}
	return o.ActualMemoryPrice, true
}

// HasActualMemoryPrice returns a boolean if a field has been set.
func (o *Invoice) HasActualMemoryPrice() bool {
	if o != nil && o.ActualMemoryPrice != nil {
		return true
	}

	return false
}

// SetActualMemoryPrice gets a reference to the given float32 and assigns it to the ActualMemoryPrice field.
func (o *Invoice) SetActualMemoryPrice(v float32) {
	o.ActualMemoryPrice = &v
}

// GetActualMemoryCost returns the ActualMemoryCost field value if set, zero value otherwise.
func (o *Invoice) GetActualMemoryCost() float32 {
	if o == nil || o.ActualMemoryCost == nil {
		var ret float32
		return ret
	}
	return *o.ActualMemoryCost
}

// GetActualMemoryCostOk returns a tuple with the ActualMemoryCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetActualMemoryCostOk() (*float32, bool) {
	if o == nil || o.ActualMemoryCost == nil {
		return nil, false
	}
	return o.ActualMemoryCost, true
}

// HasActualMemoryCost returns a boolean if a field has been set.
func (o *Invoice) HasActualMemoryCost() bool {
	if o != nil && o.ActualMemoryCost != nil {
		return true
	}

	return false
}

// SetActualMemoryCost gets a reference to the given float32 and assigns it to the ActualMemoryCost field.
func (o *Invoice) SetActualMemoryCost(v float32) {
	o.ActualMemoryCost = &v
}

// GetActualStoragePrice returns the ActualStoragePrice field value if set, zero value otherwise.
func (o *Invoice) GetActualStoragePrice() float32 {
	if o == nil || o.ActualStoragePrice == nil {
		var ret float32
		return ret
	}
	return *o.ActualStoragePrice
}

// GetActualStoragePriceOk returns a tuple with the ActualStoragePrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetActualStoragePriceOk() (*float32, bool) {
	if o == nil || o.ActualStoragePrice == nil {
		return nil, false
	}
	return o.ActualStoragePrice, true
}

// HasActualStoragePrice returns a boolean if a field has been set.
func (o *Invoice) HasActualStoragePrice() bool {
	if o != nil && o.ActualStoragePrice != nil {
		return true
	}

	return false
}

// SetActualStoragePrice gets a reference to the given float32 and assigns it to the ActualStoragePrice field.
func (o *Invoice) SetActualStoragePrice(v float32) {
	o.ActualStoragePrice = &v
}

// GetActualStorageCost returns the ActualStorageCost field value if set, zero value otherwise.
func (o *Invoice) GetActualStorageCost() float32 {
	if o == nil || o.ActualStorageCost == nil {
		var ret float32
		return ret
	}
	return *o.ActualStorageCost
}

// GetActualStorageCostOk returns a tuple with the ActualStorageCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetActualStorageCostOk() (*float32, bool) {
	if o == nil || o.ActualStorageCost == nil {
		return nil, false
	}
	return o.ActualStorageCost, true
}

// HasActualStorageCost returns a boolean if a field has been set.
func (o *Invoice) HasActualStorageCost() bool {
	if o != nil && o.ActualStorageCost != nil {
		return true
	}

	return false
}

// SetActualStorageCost gets a reference to the given float32 and assigns it to the ActualStorageCost field.
func (o *Invoice) SetActualStorageCost(v float32) {
	o.ActualStorageCost = &v
}

// GetActualNetworkPrice returns the ActualNetworkPrice field value if set, zero value otherwise.
func (o *Invoice) GetActualNetworkPrice() float32 {
	if o == nil || o.ActualNetworkPrice == nil {
		var ret float32
		return ret
	}
	return *o.ActualNetworkPrice
}

// GetActualNetworkPriceOk returns a tuple with the ActualNetworkPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetActualNetworkPriceOk() (*float32, bool) {
	if o == nil || o.ActualNetworkPrice == nil {
		return nil, false
	}
	return o.ActualNetworkPrice, true
}

// HasActualNetworkPrice returns a boolean if a field has been set.
func (o *Invoice) HasActualNetworkPrice() bool {
	if o != nil && o.ActualNetworkPrice != nil {
		return true
	}

	return false
}

// SetActualNetworkPrice gets a reference to the given float32 and assigns it to the ActualNetworkPrice field.
func (o *Invoice) SetActualNetworkPrice(v float32) {
	o.ActualNetworkPrice = &v
}

// GetActualNetworkCost returns the ActualNetworkCost field value if set, zero value otherwise.
func (o *Invoice) GetActualNetworkCost() float32 {
	if o == nil || o.ActualNetworkCost == nil {
		var ret float32
		return ret
	}
	return *o.ActualNetworkCost
}

// GetActualNetworkCostOk returns a tuple with the ActualNetworkCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetActualNetworkCostOk() (*float32, bool) {
	if o == nil || o.ActualNetworkCost == nil {
		return nil, false
	}
	return o.ActualNetworkCost, true
}

// HasActualNetworkCost returns a boolean if a field has been set.
func (o *Invoice) HasActualNetworkCost() bool {
	if o != nil && o.ActualNetworkCost != nil {
		return true
	}

	return false
}

// SetActualNetworkCost gets a reference to the given float32 and assigns it to the ActualNetworkCost field.
func (o *Invoice) SetActualNetworkCost(v float32) {
	o.ActualNetworkCost = &v
}

// GetActualLicensePrice returns the ActualLicensePrice field value if set, zero value otherwise.
func (o *Invoice) GetActualLicensePrice() float32 {
	if o == nil || o.ActualLicensePrice == nil {
		var ret float32
		return ret
	}
	return *o.ActualLicensePrice
}

// GetActualLicensePriceOk returns a tuple with the ActualLicensePrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetActualLicensePriceOk() (*float32, bool) {
	if o == nil || o.ActualLicensePrice == nil {
		return nil, false
	}
	return o.ActualLicensePrice, true
}

// HasActualLicensePrice returns a boolean if a field has been set.
func (o *Invoice) HasActualLicensePrice() bool {
	if o != nil && o.ActualLicensePrice != nil {
		return true
	}

	return false
}

// SetActualLicensePrice gets a reference to the given float32 and assigns it to the ActualLicensePrice field.
func (o *Invoice) SetActualLicensePrice(v float32) {
	o.ActualLicensePrice = &v
}

// GetActualLicenseCost returns the ActualLicenseCost field value if set, zero value otherwise.
func (o *Invoice) GetActualLicenseCost() float32 {
	if o == nil || o.ActualLicenseCost == nil {
		var ret float32
		return ret
	}
	return *o.ActualLicenseCost
}

// GetActualLicenseCostOk returns a tuple with the ActualLicenseCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetActualLicenseCostOk() (*float32, bool) {
	if o == nil || o.ActualLicenseCost == nil {
		return nil, false
	}
	return o.ActualLicenseCost, true
}

// HasActualLicenseCost returns a boolean if a field has been set.
func (o *Invoice) HasActualLicenseCost() bool {
	if o != nil && o.ActualLicenseCost != nil {
		return true
	}

	return false
}

// SetActualLicenseCost gets a reference to the given float32 and assigns it to the ActualLicenseCost field.
func (o *Invoice) SetActualLicenseCost(v float32) {
	o.ActualLicenseCost = &v
}

// GetActualExtraPrice returns the ActualExtraPrice field value if set, zero value otherwise.
func (o *Invoice) GetActualExtraPrice() float32 {
	if o == nil || o.ActualExtraPrice == nil {
		var ret float32
		return ret
	}
	return *o.ActualExtraPrice
}

// GetActualExtraPriceOk returns a tuple with the ActualExtraPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetActualExtraPriceOk() (*float32, bool) {
	if o == nil || o.ActualExtraPrice == nil {
		return nil, false
	}
	return o.ActualExtraPrice, true
}

// HasActualExtraPrice returns a boolean if a field has been set.
func (o *Invoice) HasActualExtraPrice() bool {
	if o != nil && o.ActualExtraPrice != nil {
		return true
	}

	return false
}

// SetActualExtraPrice gets a reference to the given float32 and assigns it to the ActualExtraPrice field.
func (o *Invoice) SetActualExtraPrice(v float32) {
	o.ActualExtraPrice = &v
}

// GetActualExtraCost returns the ActualExtraCost field value if set, zero value otherwise.
func (o *Invoice) GetActualExtraCost() float32 {
	if o == nil || o.ActualExtraCost == nil {
		var ret float32
		return ret
	}
	return *o.ActualExtraCost
}

// GetActualExtraCostOk returns a tuple with the ActualExtraCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetActualExtraCostOk() (*float32, bool) {
	if o == nil || o.ActualExtraCost == nil {
		return nil, false
	}
	return o.ActualExtraCost, true
}

// HasActualExtraCost returns a boolean if a field has been set.
func (o *Invoice) HasActualExtraCost() bool {
	if o != nil && o.ActualExtraCost != nil {
		return true
	}

	return false
}

// SetActualExtraCost gets a reference to the given float32 and assigns it to the ActualExtraCost field.
func (o *Invoice) SetActualExtraCost(v float32) {
	o.ActualExtraCost = &v
}

// GetActualTotalPrice returns the ActualTotalPrice field value if set, zero value otherwise.
func (o *Invoice) GetActualTotalPrice() float32 {
	if o == nil || o.ActualTotalPrice == nil {
		var ret float32
		return ret
	}
	return *o.ActualTotalPrice
}

// GetActualTotalPriceOk returns a tuple with the ActualTotalPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetActualTotalPriceOk() (*float32, bool) {
	if o == nil || o.ActualTotalPrice == nil {
		return nil, false
	}
	return o.ActualTotalPrice, true
}

// HasActualTotalPrice returns a boolean if a field has been set.
func (o *Invoice) HasActualTotalPrice() bool {
	if o != nil && o.ActualTotalPrice != nil {
		return true
	}

	return false
}

// SetActualTotalPrice gets a reference to the given float32 and assigns it to the ActualTotalPrice field.
func (o *Invoice) SetActualTotalPrice(v float32) {
	o.ActualTotalPrice = &v
}

// GetActualTotalCost returns the ActualTotalCost field value if set, zero value otherwise.
func (o *Invoice) GetActualTotalCost() float32 {
	if o == nil || o.ActualTotalCost == nil {
		var ret float32
		return ret
	}
	return *o.ActualTotalCost
}

// GetActualTotalCostOk returns a tuple with the ActualTotalCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetActualTotalCostOk() (*float32, bool) {
	if o == nil || o.ActualTotalCost == nil {
		return nil, false
	}
	return o.ActualTotalCost, true
}

// HasActualTotalCost returns a boolean if a field has been set.
func (o *Invoice) HasActualTotalCost() bool {
	if o != nil && o.ActualTotalCost != nil {
		return true
	}

	return false
}

// SetActualTotalCost gets a reference to the given float32 and assigns it to the ActualTotalCost field.
func (o *Invoice) SetActualTotalCost(v float32) {
	o.ActualTotalCost = &v
}

// GetActualRunningPrice returns the ActualRunningPrice field value if set, zero value otherwise.
func (o *Invoice) GetActualRunningPrice() float32 {
	if o == nil || o.ActualRunningPrice == nil {
		var ret float32
		return ret
	}
	return *o.ActualRunningPrice
}

// GetActualRunningPriceOk returns a tuple with the ActualRunningPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetActualRunningPriceOk() (*float32, bool) {
	if o == nil || o.ActualRunningPrice == nil {
		return nil, false
	}
	return o.ActualRunningPrice, true
}

// HasActualRunningPrice returns a boolean if a field has been set.
func (o *Invoice) HasActualRunningPrice() bool {
	if o != nil && o.ActualRunningPrice != nil {
		return true
	}

	return false
}

// SetActualRunningPrice gets a reference to the given float32 and assigns it to the ActualRunningPrice field.
func (o *Invoice) SetActualRunningPrice(v float32) {
	o.ActualRunningPrice = &v
}

// GetActualRunningCost returns the ActualRunningCost field value if set, zero value otherwise.
func (o *Invoice) GetActualRunningCost() float32 {
	if o == nil || o.ActualRunningCost == nil {
		var ret float32
		return ret
	}
	return *o.ActualRunningCost
}

// GetActualRunningCostOk returns a tuple with the ActualRunningCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetActualRunningCostOk() (*float32, bool) {
	if o == nil || o.ActualRunningCost == nil {
		return nil, false
	}
	return o.ActualRunningCost, true
}

// HasActualRunningCost returns a boolean if a field has been set.
func (o *Invoice) HasActualRunningCost() bool {
	if o != nil && o.ActualRunningCost != nil {
		return true
	}

	return false
}

// SetActualRunningCost gets a reference to the given float32 and assigns it to the ActualRunningCost field.
func (o *Invoice) SetActualRunningCost(v float32) {
	o.ActualRunningCost = &v
}

// GetActualCurrency returns the ActualCurrency field value if set, zero value otherwise.
func (o *Invoice) GetActualCurrency() string {
	if o == nil || o.ActualCurrency == nil {
		var ret string
		return ret
	}
	return *o.ActualCurrency
}

// GetActualCurrencyOk returns a tuple with the ActualCurrency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetActualCurrencyOk() (*string, bool) {
	if o == nil || o.ActualCurrency == nil {
		return nil, false
	}
	return o.ActualCurrency, true
}

// HasActualCurrency returns a boolean if a field has been set.
func (o *Invoice) HasActualCurrency() bool {
	if o != nil && o.ActualCurrency != nil {
		return true
	}

	return false
}

// SetActualCurrency gets a reference to the given string and assigns it to the ActualCurrency field.
func (o *Invoice) SetActualCurrency(v string) {
	o.ActualCurrency = &v
}

// GetActualConversionRate returns the ActualConversionRate field value if set, zero value otherwise.
func (o *Invoice) GetActualConversionRate() float32 {
	if o == nil || o.ActualConversionRate == nil {
		var ret float32
		return ret
	}
	return *o.ActualConversionRate
}

// GetActualConversionRateOk returns a tuple with the ActualConversionRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetActualConversionRateOk() (*float32, bool) {
	if o == nil || o.ActualConversionRate == nil {
		return nil, false
	}
	return o.ActualConversionRate, true
}

// HasActualConversionRate returns a boolean if a field has been set.
func (o *Invoice) HasActualConversionRate() bool {
	if o != nil && o.ActualConversionRate != nil {
		return true
	}

	return false
}

// SetActualConversionRate gets a reference to the given float32 and assigns it to the ActualConversionRate field.
func (o *Invoice) SetActualConversionRate(v float32) {
	o.ActualConversionRate = &v
}

// GetComputePrice returns the ComputePrice field value if set, zero value otherwise.
func (o *Invoice) GetComputePrice() float32 {
	if o == nil || o.ComputePrice == nil {
		var ret float32
		return ret
	}
	return *o.ComputePrice
}

// GetComputePriceOk returns a tuple with the ComputePrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetComputePriceOk() (*float32, bool) {
	if o == nil || o.ComputePrice == nil {
		return nil, false
	}
	return o.ComputePrice, true
}

// HasComputePrice returns a boolean if a field has been set.
func (o *Invoice) HasComputePrice() bool {
	if o != nil && o.ComputePrice != nil {
		return true
	}

	return false
}

// SetComputePrice gets a reference to the given float32 and assigns it to the ComputePrice field.
func (o *Invoice) SetComputePrice(v float32) {
	o.ComputePrice = &v
}

// GetComputeCost returns the ComputeCost field value if set, zero value otherwise.
func (o *Invoice) GetComputeCost() float32 {
	if o == nil || o.ComputeCost == nil {
		var ret float32
		return ret
	}
	return *o.ComputeCost
}

// GetComputeCostOk returns a tuple with the ComputeCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetComputeCostOk() (*float32, bool) {
	if o == nil || o.ComputeCost == nil {
		return nil, false
	}
	return o.ComputeCost, true
}

// HasComputeCost returns a boolean if a field has been set.
func (o *Invoice) HasComputeCost() bool {
	if o != nil && o.ComputeCost != nil {
		return true
	}

	return false
}

// SetComputeCost gets a reference to the given float32 and assigns it to the ComputeCost field.
func (o *Invoice) SetComputeCost(v float32) {
	o.ComputeCost = &v
}

// GetMemoryPrice returns the MemoryPrice field value if set, zero value otherwise.
func (o *Invoice) GetMemoryPrice() float32 {
	if o == nil || o.MemoryPrice == nil {
		var ret float32
		return ret
	}
	return *o.MemoryPrice
}

// GetMemoryPriceOk returns a tuple with the MemoryPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetMemoryPriceOk() (*float32, bool) {
	if o == nil || o.MemoryPrice == nil {
		return nil, false
	}
	return o.MemoryPrice, true
}

// HasMemoryPrice returns a boolean if a field has been set.
func (o *Invoice) HasMemoryPrice() bool {
	if o != nil && o.MemoryPrice != nil {
		return true
	}

	return false
}

// SetMemoryPrice gets a reference to the given float32 and assigns it to the MemoryPrice field.
func (o *Invoice) SetMemoryPrice(v float32) {
	o.MemoryPrice = &v
}

// GetMemoryCost returns the MemoryCost field value if set, zero value otherwise.
func (o *Invoice) GetMemoryCost() float32 {
	if o == nil || o.MemoryCost == nil {
		var ret float32
		return ret
	}
	return *o.MemoryCost
}

// GetMemoryCostOk returns a tuple with the MemoryCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetMemoryCostOk() (*float32, bool) {
	if o == nil || o.MemoryCost == nil {
		return nil, false
	}
	return o.MemoryCost, true
}

// HasMemoryCost returns a boolean if a field has been set.
func (o *Invoice) HasMemoryCost() bool {
	if o != nil && o.MemoryCost != nil {
		return true
	}

	return false
}

// SetMemoryCost gets a reference to the given float32 and assigns it to the MemoryCost field.
func (o *Invoice) SetMemoryCost(v float32) {
	o.MemoryCost = &v
}

// GetStoragePrice returns the StoragePrice field value if set, zero value otherwise.
func (o *Invoice) GetStoragePrice() float32 {
	if o == nil || o.StoragePrice == nil {
		var ret float32
		return ret
	}
	return *o.StoragePrice
}

// GetStoragePriceOk returns a tuple with the StoragePrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetStoragePriceOk() (*float32, bool) {
	if o == nil || o.StoragePrice == nil {
		return nil, false
	}
	return o.StoragePrice, true
}

// HasStoragePrice returns a boolean if a field has been set.
func (o *Invoice) HasStoragePrice() bool {
	if o != nil && o.StoragePrice != nil {
		return true
	}

	return false
}

// SetStoragePrice gets a reference to the given float32 and assigns it to the StoragePrice field.
func (o *Invoice) SetStoragePrice(v float32) {
	o.StoragePrice = &v
}

// GetStorageCost returns the StorageCost field value if set, zero value otherwise.
func (o *Invoice) GetStorageCost() float32 {
	if o == nil || o.StorageCost == nil {
		var ret float32
		return ret
	}
	return *o.StorageCost
}

// GetStorageCostOk returns a tuple with the StorageCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetStorageCostOk() (*float32, bool) {
	if o == nil || o.StorageCost == nil {
		return nil, false
	}
	return o.StorageCost, true
}

// HasStorageCost returns a boolean if a field has been set.
func (o *Invoice) HasStorageCost() bool {
	if o != nil && o.StorageCost != nil {
		return true
	}

	return false
}

// SetStorageCost gets a reference to the given float32 and assigns it to the StorageCost field.
func (o *Invoice) SetStorageCost(v float32) {
	o.StorageCost = &v
}

// GetNetworkPrice returns the NetworkPrice field value if set, zero value otherwise.
func (o *Invoice) GetNetworkPrice() float32 {
	if o == nil || o.NetworkPrice == nil {
		var ret float32
		return ret
	}
	return *o.NetworkPrice
}

// GetNetworkPriceOk returns a tuple with the NetworkPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetNetworkPriceOk() (*float32, bool) {
	if o == nil || o.NetworkPrice == nil {
		return nil, false
	}
	return o.NetworkPrice, true
}

// HasNetworkPrice returns a boolean if a field has been set.
func (o *Invoice) HasNetworkPrice() bool {
	if o != nil && o.NetworkPrice != nil {
		return true
	}

	return false
}

// SetNetworkPrice gets a reference to the given float32 and assigns it to the NetworkPrice field.
func (o *Invoice) SetNetworkPrice(v float32) {
	o.NetworkPrice = &v
}

// GetNetworkCost returns the NetworkCost field value if set, zero value otherwise.
func (o *Invoice) GetNetworkCost() float32 {
	if o == nil || o.NetworkCost == nil {
		var ret float32
		return ret
	}
	return *o.NetworkCost
}

// GetNetworkCostOk returns a tuple with the NetworkCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetNetworkCostOk() (*float32, bool) {
	if o == nil || o.NetworkCost == nil {
		return nil, false
	}
	return o.NetworkCost, true
}

// HasNetworkCost returns a boolean if a field has been set.
func (o *Invoice) HasNetworkCost() bool {
	if o != nil && o.NetworkCost != nil {
		return true
	}

	return false
}

// SetNetworkCost gets a reference to the given float32 and assigns it to the NetworkCost field.
func (o *Invoice) SetNetworkCost(v float32) {
	o.NetworkCost = &v
}

// GetLicensePrice returns the LicensePrice field value if set, zero value otherwise.
func (o *Invoice) GetLicensePrice() float32 {
	if o == nil || o.LicensePrice == nil {
		var ret float32
		return ret
	}
	return *o.LicensePrice
}

// GetLicensePriceOk returns a tuple with the LicensePrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetLicensePriceOk() (*float32, bool) {
	if o == nil || o.LicensePrice == nil {
		return nil, false
	}
	return o.LicensePrice, true
}

// HasLicensePrice returns a boolean if a field has been set.
func (o *Invoice) HasLicensePrice() bool {
	if o != nil && o.LicensePrice != nil {
		return true
	}

	return false
}

// SetLicensePrice gets a reference to the given float32 and assigns it to the LicensePrice field.
func (o *Invoice) SetLicensePrice(v float32) {
	o.LicensePrice = &v
}

// GetLicenseCost returns the LicenseCost field value if set, zero value otherwise.
func (o *Invoice) GetLicenseCost() float32 {
	if o == nil || o.LicenseCost == nil {
		var ret float32
		return ret
	}
	return *o.LicenseCost
}

// GetLicenseCostOk returns a tuple with the LicenseCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetLicenseCostOk() (*float32, bool) {
	if o == nil || o.LicenseCost == nil {
		return nil, false
	}
	return o.LicenseCost, true
}

// HasLicenseCost returns a boolean if a field has been set.
func (o *Invoice) HasLicenseCost() bool {
	if o != nil && o.LicenseCost != nil {
		return true
	}

	return false
}

// SetLicenseCost gets a reference to the given float32 and assigns it to the LicenseCost field.
func (o *Invoice) SetLicenseCost(v float32) {
	o.LicenseCost = &v
}

// GetExtraPrice returns the ExtraPrice field value if set, zero value otherwise.
func (o *Invoice) GetExtraPrice() float32 {
	if o == nil || o.ExtraPrice == nil {
		var ret float32
		return ret
	}
	return *o.ExtraPrice
}

// GetExtraPriceOk returns a tuple with the ExtraPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetExtraPriceOk() (*float32, bool) {
	if o == nil || o.ExtraPrice == nil {
		return nil, false
	}
	return o.ExtraPrice, true
}

// HasExtraPrice returns a boolean if a field has been set.
func (o *Invoice) HasExtraPrice() bool {
	if o != nil && o.ExtraPrice != nil {
		return true
	}

	return false
}

// SetExtraPrice gets a reference to the given float32 and assigns it to the ExtraPrice field.
func (o *Invoice) SetExtraPrice(v float32) {
	o.ExtraPrice = &v
}

// GetExtraCost returns the ExtraCost field value if set, zero value otherwise.
func (o *Invoice) GetExtraCost() float32 {
	if o == nil || o.ExtraCost == nil {
		var ret float32
		return ret
	}
	return *o.ExtraCost
}

// GetExtraCostOk returns a tuple with the ExtraCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetExtraCostOk() (*float32, bool) {
	if o == nil || o.ExtraCost == nil {
		return nil, false
	}
	return o.ExtraCost, true
}

// HasExtraCost returns a boolean if a field has been set.
func (o *Invoice) HasExtraCost() bool {
	if o != nil && o.ExtraCost != nil {
		return true
	}

	return false
}

// SetExtraCost gets a reference to the given float32 and assigns it to the ExtraCost field.
func (o *Invoice) SetExtraCost(v float32) {
	o.ExtraCost = &v
}

// GetTotalPrice returns the TotalPrice field value if set, zero value otherwise.
func (o *Invoice) GetTotalPrice() float32 {
	if o == nil || o.TotalPrice == nil {
		var ret float32
		return ret
	}
	return *o.TotalPrice
}

// GetTotalPriceOk returns a tuple with the TotalPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetTotalPriceOk() (*float32, bool) {
	if o == nil || o.TotalPrice == nil {
		return nil, false
	}
	return o.TotalPrice, true
}

// HasTotalPrice returns a boolean if a field has been set.
func (o *Invoice) HasTotalPrice() bool {
	if o != nil && o.TotalPrice != nil {
		return true
	}

	return false
}

// SetTotalPrice gets a reference to the given float32 and assigns it to the TotalPrice field.
func (o *Invoice) SetTotalPrice(v float32) {
	o.TotalPrice = &v
}

// GetTotalCost returns the TotalCost field value if set, zero value otherwise.
func (o *Invoice) GetTotalCost() float32 {
	if o == nil || o.TotalCost == nil {
		var ret float32
		return ret
	}
	return *o.TotalCost
}

// GetTotalCostOk returns a tuple with the TotalCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetTotalCostOk() (*float32, bool) {
	if o == nil || o.TotalCost == nil {
		return nil, false
	}
	return o.TotalCost, true
}

// HasTotalCost returns a boolean if a field has been set.
func (o *Invoice) HasTotalCost() bool {
	if o != nil && o.TotalCost != nil {
		return true
	}

	return false
}

// SetTotalCost gets a reference to the given float32 and assigns it to the TotalCost field.
func (o *Invoice) SetTotalCost(v float32) {
	o.TotalCost = &v
}

// GetRunningPrice returns the RunningPrice field value if set, zero value otherwise.
func (o *Invoice) GetRunningPrice() float32 {
	if o == nil || o.RunningPrice == nil {
		var ret float32
		return ret
	}
	return *o.RunningPrice
}

// GetRunningPriceOk returns a tuple with the RunningPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetRunningPriceOk() (*float32, bool) {
	if o == nil || o.RunningPrice == nil {
		return nil, false
	}
	return o.RunningPrice, true
}

// HasRunningPrice returns a boolean if a field has been set.
func (o *Invoice) HasRunningPrice() bool {
	if o != nil && o.RunningPrice != nil {
		return true
	}

	return false
}

// SetRunningPrice gets a reference to the given float32 and assigns it to the RunningPrice field.
func (o *Invoice) SetRunningPrice(v float32) {
	o.RunningPrice = &v
}

// GetRunningCost returns the RunningCost field value if set, zero value otherwise.
func (o *Invoice) GetRunningCost() float32 {
	if o == nil || o.RunningCost == nil {
		var ret float32
		return ret
	}
	return *o.RunningCost
}

// GetRunningCostOk returns a tuple with the RunningCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetRunningCostOk() (*float32, bool) {
	if o == nil || o.RunningCost == nil {
		return nil, false
	}
	return o.RunningCost, true
}

// HasRunningCost returns a boolean if a field has been set.
func (o *Invoice) HasRunningCost() bool {
	if o != nil && o.RunningCost != nil {
		return true
	}

	return false
}

// SetRunningCost gets a reference to the given float32 and assigns it to the RunningCost field.
func (o *Invoice) SetRunningCost(v float32) {
	o.RunningCost = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *Invoice) GetCurrency() string {
	if o == nil || o.Currency == nil {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetCurrencyOk() (*string, bool) {
	if o == nil || o.Currency == nil {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *Invoice) HasCurrency() bool {
	if o != nil && o.Currency != nil {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *Invoice) SetCurrency(v string) {
	o.Currency = &v
}

// GetConversionRate returns the ConversionRate field value if set, zero value otherwise.
func (o *Invoice) GetConversionRate() float32 {
	if o == nil || o.ConversionRate == nil {
		var ret float32
		return ret
	}
	return *o.ConversionRate
}

// GetConversionRateOk returns a tuple with the ConversionRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetConversionRateOk() (*float32, bool) {
	if o == nil || o.ConversionRate == nil {
		return nil, false
	}
	return o.ConversionRate, true
}

// HasConversionRate returns a boolean if a field has been set.
func (o *Invoice) HasConversionRate() bool {
	if o != nil && o.ConversionRate != nil {
		return true
	}

	return false
}

// SetConversionRate gets a reference to the given float32 and assigns it to the ConversionRate field.
func (o *Invoice) SetConversionRate(v float32) {
	o.ConversionRate = &v
}

// GetCostType returns the CostType field value if set, zero value otherwise.
func (o *Invoice) GetCostType() string {
	if o == nil || o.CostType == nil {
		var ret string
		return ret
	}
	return *o.CostType
}

// GetCostTypeOk returns a tuple with the CostType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetCostTypeOk() (*string, bool) {
	if o == nil || o.CostType == nil {
		return nil, false
	}
	return o.CostType, true
}

// HasCostType returns a boolean if a field has been set.
func (o *Invoice) HasCostType() bool {
	if o != nil && o.CostType != nil {
		return true
	}

	return false
}

// SetCostType gets a reference to the given string and assigns it to the CostType field.
func (o *Invoice) SetCostType(v string) {
	o.CostType = &v
}

// GetOffTime returns the OffTime field value if set, zero value otherwise.
func (o *Invoice) GetOffTime() int64 {
	if o == nil || o.OffTime == nil {
		var ret int64
		return ret
	}
	return *o.OffTime
}

// GetOffTimeOk returns a tuple with the OffTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetOffTimeOk() (*int64, bool) {
	if o == nil || o.OffTime == nil {
		return nil, false
	}
	return o.OffTime, true
}

// HasOffTime returns a boolean if a field has been set.
func (o *Invoice) HasOffTime() bool {
	if o != nil && o.OffTime != nil {
		return true
	}

	return false
}

// SetOffTime gets a reference to the given int64 and assigns it to the OffTime field.
func (o *Invoice) SetOffTime(v int64) {
	o.OffTime = &v
}

// GetPowerState returns the PowerState field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Invoice) GetPowerState() string {
	if o == nil || o.PowerState.Get() == nil {
		var ret string
		return ret
	}
	return *o.PowerState.Get()
}

// GetPowerStateOk returns a tuple with the PowerState field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Invoice) GetPowerStateOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PowerState.Get(), o.PowerState.IsSet()
}

// HasPowerState returns a boolean if a field has been set.
func (o *Invoice) HasPowerState() bool {
	if o != nil && o.PowerState.IsSet() {
		return true
	}

	return false
}

// SetPowerState gets a reference to the given NullableString and assigns it to the PowerState field.
func (o *Invoice) SetPowerState(v string) {
	o.PowerState.Set(&v)
}
// SetPowerStateNil sets the value for PowerState to be an explicit nil
func (o *Invoice) SetPowerStateNil() {
	o.PowerState.Set(nil)
}

// UnsetPowerState ensures that no value is present for PowerState, not even an explicit nil
func (o *Invoice) UnsetPowerState() {
	o.PowerState.Unset()
}

// GetPowerDate returns the PowerDate field value if set, zero value otherwise.
func (o *Invoice) GetPowerDate() time.Time {
	if o == nil || o.PowerDate == nil {
		var ret time.Time
		return ret
	}
	return *o.PowerDate
}

// GetPowerDateOk returns a tuple with the PowerDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetPowerDateOk() (*time.Time, bool) {
	if o == nil || o.PowerDate == nil {
		return nil, false
	}
	return o.PowerDate, true
}

// HasPowerDate returns a boolean if a field has been set.
func (o *Invoice) HasPowerDate() bool {
	if o != nil && o.PowerDate != nil {
		return true
	}

	return false
}

// SetPowerDate gets a reference to the given time.Time and assigns it to the PowerDate field.
func (o *Invoice) SetPowerDate(v time.Time) {
	o.PowerDate = &v
}

// GetRunningMultiplier returns the RunningMultiplier field value if set, zero value otherwise.
func (o *Invoice) GetRunningMultiplier() float32 {
	if o == nil || o.RunningMultiplier == nil {
		var ret float32
		return ret
	}
	return *o.RunningMultiplier
}

// GetRunningMultiplierOk returns a tuple with the RunningMultiplier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetRunningMultiplierOk() (*float32, bool) {
	if o == nil || o.RunningMultiplier == nil {
		return nil, false
	}
	return o.RunningMultiplier, true
}

// HasRunningMultiplier returns a boolean if a field has been set.
func (o *Invoice) HasRunningMultiplier() bool {
	if o != nil && o.RunningMultiplier != nil {
		return true
	}

	return false
}

// SetRunningMultiplier gets a reference to the given float32 and assigns it to the RunningMultiplier field.
func (o *Invoice) SetRunningMultiplier(v float32) {
	o.RunningMultiplier = &v
}

// GetUsageType returns the UsageType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Invoice) GetUsageType() string {
	if o == nil || o.UsageType.Get() == nil {
		var ret string
		return ret
	}
	return *o.UsageType.Get()
}

// GetUsageTypeOk returns a tuple with the UsageType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Invoice) GetUsageTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UsageType.Get(), o.UsageType.IsSet()
}

// HasUsageType returns a boolean if a field has been set.
func (o *Invoice) HasUsageType() bool {
	if o != nil && o.UsageType.IsSet() {
		return true
	}

	return false
}

// SetUsageType gets a reference to the given NullableString and assigns it to the UsageType field.
func (o *Invoice) SetUsageType(v string) {
	o.UsageType.Set(&v)
}
// SetUsageTypeNil sets the value for UsageType to be an explicit nil
func (o *Invoice) SetUsageTypeNil() {
	o.UsageType.Set(nil)
}

// UnsetUsageType ensures that no value is present for UsageType, not even an explicit nil
func (o *Invoice) UnsetUsageType() {
	o.UsageType.Unset()
}

// GetUsageCategory returns the UsageCategory field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Invoice) GetUsageCategory() string {
	if o == nil || o.UsageCategory.Get() == nil {
		var ret string
		return ret
	}
	return *o.UsageCategory.Get()
}

// GetUsageCategoryOk returns a tuple with the UsageCategory field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Invoice) GetUsageCategoryOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UsageCategory.Get(), o.UsageCategory.IsSet()
}

// HasUsageCategory returns a boolean if a field has been set.
func (o *Invoice) HasUsageCategory() bool {
	if o != nil && o.UsageCategory.IsSet() {
		return true
	}

	return false
}

// SetUsageCategory gets a reference to the given NullableString and assigns it to the UsageCategory field.
func (o *Invoice) SetUsageCategory(v string) {
	o.UsageCategory.Set(&v)
}
// SetUsageCategoryNil sets the value for UsageCategory to be an explicit nil
func (o *Invoice) SetUsageCategoryNil() {
	o.UsageCategory.Set(nil)
}

// UnsetUsageCategory ensures that no value is present for UsageCategory, not even an explicit nil
func (o *Invoice) UnsetUsageCategory() {
	o.UsageCategory.Unset()
}

// GetLastCostDate returns the LastCostDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Invoice) GetLastCostDate() time.Time {
	if o == nil || o.LastCostDate.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.LastCostDate.Get()
}

// GetLastCostDateOk returns a tuple with the LastCostDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Invoice) GetLastCostDateOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LastCostDate.Get(), o.LastCostDate.IsSet()
}

// HasLastCostDate returns a boolean if a field has been set.
func (o *Invoice) HasLastCostDate() bool {
	if o != nil && o.LastCostDate.IsSet() {
		return true
	}

	return false
}

// SetLastCostDate gets a reference to the given NullableTime and assigns it to the LastCostDate field.
func (o *Invoice) SetLastCostDate(v time.Time) {
	o.LastCostDate.Set(&v)
}
// SetLastCostDateNil sets the value for LastCostDate to be an explicit nil
func (o *Invoice) SetLastCostDateNil() {
	o.LastCostDate.Set(nil)
}

// UnsetLastCostDate ensures that no value is present for LastCostDate, not even an explicit nil
func (o *Invoice) UnsetLastCostDate() {
	o.LastCostDate.Unset()
}

// GetLastActualDate returns the LastActualDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Invoice) GetLastActualDate() time.Time {
	if o == nil || o.LastActualDate.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.LastActualDate.Get()
}

// GetLastActualDateOk returns a tuple with the LastActualDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Invoice) GetLastActualDateOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LastActualDate.Get(), o.LastActualDate.IsSet()
}

// HasLastActualDate returns a boolean if a field has been set.
func (o *Invoice) HasLastActualDate() bool {
	if o != nil && o.LastActualDate.IsSet() {
		return true
	}

	return false
}

// SetLastActualDate gets a reference to the given NullableTime and assigns it to the LastActualDate field.
func (o *Invoice) SetLastActualDate(v time.Time) {
	o.LastActualDate.Set(&v)
}
// SetLastActualDateNil sets the value for LastActualDate to be an explicit nil
func (o *Invoice) SetLastActualDateNil() {
	o.LastActualDate.Set(nil)
}

// UnsetLastActualDate ensures that no value is present for LastActualDate, not even an explicit nil
func (o *Invoice) UnsetLastActualDate() {
	o.LastActualDate.Unset()
}

// GetDateCreated returns the DateCreated field value if set, zero value otherwise.
func (o *Invoice) GetDateCreated() time.Time {
	if o == nil || o.DateCreated == nil {
		var ret time.Time
		return ret
	}
	return *o.DateCreated
}

// GetDateCreatedOk returns a tuple with the DateCreated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetDateCreatedOk() (*time.Time, bool) {
	if o == nil || o.DateCreated == nil {
		return nil, false
	}
	return o.DateCreated, true
}

// HasDateCreated returns a boolean if a field has been set.
func (o *Invoice) HasDateCreated() bool {
	if o != nil && o.DateCreated != nil {
		return true
	}

	return false
}

// SetDateCreated gets a reference to the given time.Time and assigns it to the DateCreated field.
func (o *Invoice) SetDateCreated(v time.Time) {
	o.DateCreated = &v
}

// GetLastUpdated returns the LastUpdated field value if set, zero value otherwise.
func (o *Invoice) GetLastUpdated() time.Time {
	if o == nil || o.LastUpdated == nil {
		var ret time.Time
		return ret
	}
	return *o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetLastUpdatedOk() (*time.Time, bool) {
	if o == nil || o.LastUpdated == nil {
		return nil, false
	}
	return o.LastUpdated, true
}

// HasLastUpdated returns a boolean if a field has been set.
func (o *Invoice) HasLastUpdated() bool {
	if o != nil && o.LastUpdated != nil {
		return true
	}

	return false
}

// SetLastUpdated gets a reference to the given time.Time and assigns it to the LastUpdated field.
func (o *Invoice) SetLastUpdated(v time.Time) {
	o.LastUpdated = &v
}

// GetLineItemCount returns the LineItemCount field value if set, zero value otherwise.
func (o *Invoice) GetLineItemCount() int64 {
	if o == nil || o.LineItemCount == nil {
		var ret int64
		return ret
	}
	return *o.LineItemCount
}

// GetLineItemCountOk returns a tuple with the LineItemCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetLineItemCountOk() (*int64, bool) {
	if o == nil || o.LineItemCount == nil {
		return nil, false
	}
	return o.LineItemCount, true
}

// HasLineItemCount returns a boolean if a field has been set.
func (o *Invoice) HasLineItemCount() bool {
	if o != nil && o.LineItemCount != nil {
		return true
	}

	return false
}

// SetLineItemCount gets a reference to the given int64 and assigns it to the LineItemCount field.
func (o *Invoice) SetLineItemCount(v int64) {
	o.LineItemCount = &v
}

// GetLineItems returns the LineItems field value if set, zero value otherwise.
func (o *Invoice) GetLineItems() []InvoiceLineItems {
	if o == nil || o.LineItems == nil {
		var ret []InvoiceLineItems
		return ret
	}
	return *o.LineItems
}

// GetLineItemsOk returns a tuple with the LineItems field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetLineItemsOk() (*[]InvoiceLineItems, bool) {
	if o == nil || o.LineItems == nil {
		return nil, false
	}
	return o.LineItems, true
}

// HasLineItems returns a boolean if a field has been set.
func (o *Invoice) HasLineItems() bool {
	if o != nil && o.LineItems != nil {
		return true
	}

	return false
}

// SetLineItems gets a reference to the given []InvoiceLineItems and assigns it to the LineItems field.
func (o *Invoice) SetLineItems(v []InvoiceLineItems) {
	o.LineItems = &v
}

func (o Invoice) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.OwnerId != nil {
		toSerialize["ownerId"] = o.OwnerId
	}
	if o.Account != nil {
		toSerialize["account"] = o.Account
	}
	if o.Group != nil {
		toSerialize["group"] = o.Group
	}
	if o.Cloud != nil {
		toSerialize["cloud"] = o.Cloud
	}
	if o.Instance != nil {
		toSerialize["instance"] = o.Instance
	}
	if o.Server.IsSet() {
		toSerialize["server"] = o.Server.Get()
	}
	if o.Cluster.IsSet() {
		toSerialize["cluster"] = o.Cluster.Get()
	}
	if o.User != nil {
		toSerialize["user"] = o.User
	}
	if o.Plan != nil {
		toSerialize["plan"] = o.Plan
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	if o.Project.IsSet() {
		toSerialize["project"] = o.Project.Get()
	}
	if o.RefType != nil {
		toSerialize["refType"] = o.RefType
	}
	if o.RefId != nil {
		toSerialize["refId"] = o.RefId
	}
	if o.RefUuid.IsSet() {
		toSerialize["refUuid"] = o.RefUuid.Get()
	}
	if o.RefName != nil {
		toSerialize["refName"] = o.RefName
	}
	if o.RefCategory != nil {
		toSerialize["refCategory"] = o.RefCategory
	}
	if o.ResourceId.IsSet() {
		toSerialize["resourceId"] = o.ResourceId.Get()
	}
	if o.ResourceUuid.IsSet() {
		toSerialize["resourceUuid"] = o.ResourceUuid.Get()
	}
	if o.ResourceType.IsSet() {
		toSerialize["resourceType"] = o.ResourceType.Get()
	}
	if o.ResourceName.IsSet() {
		toSerialize["resourceName"] = o.ResourceName.Get()
	}
	if o.ResourceExternalId.IsSet() {
		toSerialize["resourceExternalId"] = o.ResourceExternalId.Get()
	}
	if o.ResourceInternalId.IsSet() {
		toSerialize["resourceInternalId"] = o.ResourceInternalId.Get()
	}
	if o.Interval != nil {
		toSerialize["interval"] = o.Interval
	}
	if o.Period != nil {
		toSerialize["period"] = o.Period
	}
	if o.Estimate != nil {
		toSerialize["estimate"] = o.Estimate
	}
	if o.SummaryInvoice != nil {
		toSerialize["summaryInvoice"] = o.SummaryInvoice
	}
	if o.Active != nil {
		toSerialize["active"] = o.Active
	}
	if o.StartDate != nil {
		toSerialize["startDate"] = o.StartDate
	}
	if o.EndDate != nil {
		toSerialize["endDate"] = o.EndDate
	}
	if o.RefStart != nil {
		toSerialize["refStart"] = o.RefStart
	}
	if o.RefEnd != nil {
		toSerialize["refEnd"] = o.RefEnd
	}
	if o.EstimatedComputePrice != nil {
		toSerialize["estimatedComputePrice"] = o.EstimatedComputePrice
	}
	if o.EstimatedComputeCost != nil {
		toSerialize["estimatedComputeCost"] = o.EstimatedComputeCost
	}
	if o.EstimatedMemoryPrice != nil {
		toSerialize["estimatedMemoryPrice"] = o.EstimatedMemoryPrice
	}
	if o.EstimatedMemoryCost != nil {
		toSerialize["estimatedMemoryCost"] = o.EstimatedMemoryCost
	}
	if o.EstimatedStoragePrice != nil {
		toSerialize["estimatedStoragePrice"] = o.EstimatedStoragePrice
	}
	if o.EstimatedStorageCost != nil {
		toSerialize["estimatedStorageCost"] = o.EstimatedStorageCost
	}
	if o.EstimatedNetworkPrice != nil {
		toSerialize["estimatedNetworkPrice"] = o.EstimatedNetworkPrice
	}
	if o.EstimatedNetworkCost != nil {
		toSerialize["estimatedNetworkCost"] = o.EstimatedNetworkCost
	}
	if o.EstimatedLicensePrice != nil {
		toSerialize["estimatedLicensePrice"] = o.EstimatedLicensePrice
	}
	if o.EstimatedLicenseCost != nil {
		toSerialize["estimatedLicenseCost"] = o.EstimatedLicenseCost
	}
	if o.EstimatedExtraPrice != nil {
		toSerialize["estimatedExtraPrice"] = o.EstimatedExtraPrice
	}
	if o.EstimatedExtraCost != nil {
		toSerialize["estimatedExtraCost"] = o.EstimatedExtraCost
	}
	if o.EstimatedTotalPrice != nil {
		toSerialize["estimatedTotalPrice"] = o.EstimatedTotalPrice
	}
	if o.EstimatedTotalCost != nil {
		toSerialize["estimatedTotalCost"] = o.EstimatedTotalCost
	}
	if o.EstimatedRunningPrice != nil {
		toSerialize["estimatedRunningPrice"] = o.EstimatedRunningPrice
	}
	if o.EstimatedRunningCost != nil {
		toSerialize["estimatedRunningCost"] = o.EstimatedRunningCost
	}
	if o.EstimatedCurrency != nil {
		toSerialize["estimatedCurrency"] = o.EstimatedCurrency
	}
	if o.EstimatedConversionRate != nil {
		toSerialize["estimatedConversionRate"] = o.EstimatedConversionRate
	}
	if o.ActualComputePrice != nil {
		toSerialize["actualComputePrice"] = o.ActualComputePrice
	}
	if o.ActualComputeCost != nil {
		toSerialize["actualComputeCost"] = o.ActualComputeCost
	}
	if o.ActualMemoryPrice != nil {
		toSerialize["actualMemoryPrice"] = o.ActualMemoryPrice
	}
	if o.ActualMemoryCost != nil {
		toSerialize["actualMemoryCost"] = o.ActualMemoryCost
	}
	if o.ActualStoragePrice != nil {
		toSerialize["actualStoragePrice"] = o.ActualStoragePrice
	}
	if o.ActualStorageCost != nil {
		toSerialize["actualStorageCost"] = o.ActualStorageCost
	}
	if o.ActualNetworkPrice != nil {
		toSerialize["actualNetworkPrice"] = o.ActualNetworkPrice
	}
	if o.ActualNetworkCost != nil {
		toSerialize["actualNetworkCost"] = o.ActualNetworkCost
	}
	if o.ActualLicensePrice != nil {
		toSerialize["actualLicensePrice"] = o.ActualLicensePrice
	}
	if o.ActualLicenseCost != nil {
		toSerialize["actualLicenseCost"] = o.ActualLicenseCost
	}
	if o.ActualExtraPrice != nil {
		toSerialize["actualExtraPrice"] = o.ActualExtraPrice
	}
	if o.ActualExtraCost != nil {
		toSerialize["actualExtraCost"] = o.ActualExtraCost
	}
	if o.ActualTotalPrice != nil {
		toSerialize["actualTotalPrice"] = o.ActualTotalPrice
	}
	if o.ActualTotalCost != nil {
		toSerialize["actualTotalCost"] = o.ActualTotalCost
	}
	if o.ActualRunningPrice != nil {
		toSerialize["actualRunningPrice"] = o.ActualRunningPrice
	}
	if o.ActualRunningCost != nil {
		toSerialize["actualRunningCost"] = o.ActualRunningCost
	}
	if o.ActualCurrency != nil {
		toSerialize["actualCurrency"] = o.ActualCurrency
	}
	if o.ActualConversionRate != nil {
		toSerialize["actualConversionRate"] = o.ActualConversionRate
	}
	if o.ComputePrice != nil {
		toSerialize["computePrice"] = o.ComputePrice
	}
	if o.ComputeCost != nil {
		toSerialize["computeCost"] = o.ComputeCost
	}
	if o.MemoryPrice != nil {
		toSerialize["memoryPrice"] = o.MemoryPrice
	}
	if o.MemoryCost != nil {
		toSerialize["memoryCost"] = o.MemoryCost
	}
	if o.StoragePrice != nil {
		toSerialize["storagePrice"] = o.StoragePrice
	}
	if o.StorageCost != nil {
		toSerialize["storageCost"] = o.StorageCost
	}
	if o.NetworkPrice != nil {
		toSerialize["networkPrice"] = o.NetworkPrice
	}
	if o.NetworkCost != nil {
		toSerialize["networkCost"] = o.NetworkCost
	}
	if o.LicensePrice != nil {
		toSerialize["licensePrice"] = o.LicensePrice
	}
	if o.LicenseCost != nil {
		toSerialize["licenseCost"] = o.LicenseCost
	}
	if o.ExtraPrice != nil {
		toSerialize["extraPrice"] = o.ExtraPrice
	}
	if o.ExtraCost != nil {
		toSerialize["extraCost"] = o.ExtraCost
	}
	if o.TotalPrice != nil {
		toSerialize["totalPrice"] = o.TotalPrice
	}
	if o.TotalCost != nil {
		toSerialize["totalCost"] = o.TotalCost
	}
	if o.RunningPrice != nil {
		toSerialize["runningPrice"] = o.RunningPrice
	}
	if o.RunningCost != nil {
		toSerialize["runningCost"] = o.RunningCost
	}
	if o.Currency != nil {
		toSerialize["currency"] = o.Currency
	}
	if o.ConversionRate != nil {
		toSerialize["conversionRate"] = o.ConversionRate
	}
	if o.CostType != nil {
		toSerialize["costType"] = o.CostType
	}
	if o.OffTime != nil {
		toSerialize["offTime"] = o.OffTime
	}
	if o.PowerState.IsSet() {
		toSerialize["powerState"] = o.PowerState.Get()
	}
	if o.PowerDate != nil {
		toSerialize["powerDate"] = o.PowerDate
	}
	if o.RunningMultiplier != nil {
		toSerialize["runningMultiplier"] = o.RunningMultiplier
	}
	if o.UsageType.IsSet() {
		toSerialize["usageType"] = o.UsageType.Get()
	}
	if o.UsageCategory.IsSet() {
		toSerialize["usageCategory"] = o.UsageCategory.Get()
	}
	if o.LastCostDate.IsSet() {
		toSerialize["lastCostDate"] = o.LastCostDate.Get()
	}
	if o.LastActualDate.IsSet() {
		toSerialize["lastActualDate"] = o.LastActualDate.Get()
	}
	if o.DateCreated != nil {
		toSerialize["dateCreated"] = o.DateCreated
	}
	if o.LastUpdated != nil {
		toSerialize["lastUpdated"] = o.LastUpdated
	}
	if o.LineItemCount != nil {
		toSerialize["lineItemCount"] = o.LineItemCount
	}
	if o.LineItems != nil {
		toSerialize["lineItems"] = o.LineItems
	}
	return json.Marshal(toSerialize)
}

type NullableInvoice struct {
	value *Invoice
	isSet bool
}

func (v NullableInvoice) Get() *Invoice {
	return v.value
}

func (v *NullableInvoice) Set(val *Invoice) {
	v.value = val
	v.isSet = true
}

func (v NullableInvoice) IsSet() bool {
	return v.isSet
}

func (v *NullableInvoice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInvoice(val *Invoice) *NullableInvoice {
	return &NullableInvoice{value: val, isSet: true}
}

func (v NullableInvoice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInvoice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


