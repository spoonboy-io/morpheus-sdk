/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// DeploymentVersion struct for DeploymentVersion
type DeploymentVersion struct {
	Id *int64 `json:"id,omitempty"`
	DeployType *string `json:"deployType,omitempty"`
	DeploymentId *int64 `json:"deploymentId,omitempty"`
	FetchUrl NullableString `json:"fetchUrl,omitempty"`
	GitUrl NullableString `json:"gitUrl,omitempty"`
	GitRef NullableString `json:"gitRef,omitempty"`
	UserVersion *string `json:"userVersion,omitempty"`
	Version *string `json:"version,omitempty"`
	Status *string `json:"status,omitempty"`
	DateCreated *time.Time `json:"dateCreated,omitempty"`
	LastUpdated *time.Time `json:"lastUpdated,omitempty"`
}

// NewDeploymentVersion instantiates a new DeploymentVersion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeploymentVersion() *DeploymentVersion {
	this := DeploymentVersion{}
	return &this
}

// NewDeploymentVersionWithDefaults instantiates a new DeploymentVersion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeploymentVersionWithDefaults() *DeploymentVersion {
	this := DeploymentVersion{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DeploymentVersion) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeploymentVersion) GetIdOk() (*int64, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DeploymentVersion) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *DeploymentVersion) SetId(v int64) {
	o.Id = &v
}

// GetDeployType returns the DeployType field value if set, zero value otherwise.
func (o *DeploymentVersion) GetDeployType() string {
	if o == nil || o.DeployType == nil {
		var ret string
		return ret
	}
	return *o.DeployType
}

// GetDeployTypeOk returns a tuple with the DeployType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeploymentVersion) GetDeployTypeOk() (*string, bool) {
	if o == nil || o.DeployType == nil {
		return nil, false
	}
	return o.DeployType, true
}

// HasDeployType returns a boolean if a field has been set.
func (o *DeploymentVersion) HasDeployType() bool {
	if o != nil && o.DeployType != nil {
		return true
	}

	return false
}

// SetDeployType gets a reference to the given string and assigns it to the DeployType field.
func (o *DeploymentVersion) SetDeployType(v string) {
	o.DeployType = &v
}

// GetDeploymentId returns the DeploymentId field value if set, zero value otherwise.
func (o *DeploymentVersion) GetDeploymentId() int64 {
	if o == nil || o.DeploymentId == nil {
		var ret int64
		return ret
	}
	return *o.DeploymentId
}

// GetDeploymentIdOk returns a tuple with the DeploymentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeploymentVersion) GetDeploymentIdOk() (*int64, bool) {
	if o == nil || o.DeploymentId == nil {
		return nil, false
	}
	return o.DeploymentId, true
}

// HasDeploymentId returns a boolean if a field has been set.
func (o *DeploymentVersion) HasDeploymentId() bool {
	if o != nil && o.DeploymentId != nil {
		return true
	}

	return false
}

// SetDeploymentId gets a reference to the given int64 and assigns it to the DeploymentId field.
func (o *DeploymentVersion) SetDeploymentId(v int64) {
	o.DeploymentId = &v
}

// GetFetchUrl returns the FetchUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeploymentVersion) GetFetchUrl() string {
	if o == nil || o.FetchUrl.Get() == nil {
		var ret string
		return ret
	}
	return *o.FetchUrl.Get()
}

// GetFetchUrlOk returns a tuple with the FetchUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeploymentVersion) GetFetchUrlOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FetchUrl.Get(), o.FetchUrl.IsSet()
}

// HasFetchUrl returns a boolean if a field has been set.
func (o *DeploymentVersion) HasFetchUrl() bool {
	if o != nil && o.FetchUrl.IsSet() {
		return true
	}

	return false
}

// SetFetchUrl gets a reference to the given NullableString and assigns it to the FetchUrl field.
func (o *DeploymentVersion) SetFetchUrl(v string) {
	o.FetchUrl.Set(&v)
}
// SetFetchUrlNil sets the value for FetchUrl to be an explicit nil
func (o *DeploymentVersion) SetFetchUrlNil() {
	o.FetchUrl.Set(nil)
}

// UnsetFetchUrl ensures that no value is present for FetchUrl, not even an explicit nil
func (o *DeploymentVersion) UnsetFetchUrl() {
	o.FetchUrl.Unset()
}

// GetGitUrl returns the GitUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeploymentVersion) GetGitUrl() string {
	if o == nil || o.GitUrl.Get() == nil {
		var ret string
		return ret
	}
	return *o.GitUrl.Get()
}

// GetGitUrlOk returns a tuple with the GitUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeploymentVersion) GetGitUrlOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.GitUrl.Get(), o.GitUrl.IsSet()
}

// HasGitUrl returns a boolean if a field has been set.
func (o *DeploymentVersion) HasGitUrl() bool {
	if o != nil && o.GitUrl.IsSet() {
		return true
	}

	return false
}

// SetGitUrl gets a reference to the given NullableString and assigns it to the GitUrl field.
func (o *DeploymentVersion) SetGitUrl(v string) {
	o.GitUrl.Set(&v)
}
// SetGitUrlNil sets the value for GitUrl to be an explicit nil
func (o *DeploymentVersion) SetGitUrlNil() {
	o.GitUrl.Set(nil)
}

// UnsetGitUrl ensures that no value is present for GitUrl, not even an explicit nil
func (o *DeploymentVersion) UnsetGitUrl() {
	o.GitUrl.Unset()
}

// GetGitRef returns the GitRef field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeploymentVersion) GetGitRef() string {
	if o == nil || o.GitRef.Get() == nil {
		var ret string
		return ret
	}
	return *o.GitRef.Get()
}

// GetGitRefOk returns a tuple with the GitRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeploymentVersion) GetGitRefOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.GitRef.Get(), o.GitRef.IsSet()
}

// HasGitRef returns a boolean if a field has been set.
func (o *DeploymentVersion) HasGitRef() bool {
	if o != nil && o.GitRef.IsSet() {
		return true
	}

	return false
}

// SetGitRef gets a reference to the given NullableString and assigns it to the GitRef field.
func (o *DeploymentVersion) SetGitRef(v string) {
	o.GitRef.Set(&v)
}
// SetGitRefNil sets the value for GitRef to be an explicit nil
func (o *DeploymentVersion) SetGitRefNil() {
	o.GitRef.Set(nil)
}

// UnsetGitRef ensures that no value is present for GitRef, not even an explicit nil
func (o *DeploymentVersion) UnsetGitRef() {
	o.GitRef.Unset()
}

// GetUserVersion returns the UserVersion field value if set, zero value otherwise.
func (o *DeploymentVersion) GetUserVersion() string {
	if o == nil || o.UserVersion == nil {
		var ret string
		return ret
	}
	return *o.UserVersion
}

// GetUserVersionOk returns a tuple with the UserVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeploymentVersion) GetUserVersionOk() (*string, bool) {
	if o == nil || o.UserVersion == nil {
		return nil, false
	}
	return o.UserVersion, true
}

// HasUserVersion returns a boolean if a field has been set.
func (o *DeploymentVersion) HasUserVersion() bool {
	if o != nil && o.UserVersion != nil {
		return true
	}

	return false
}

// SetUserVersion gets a reference to the given string and assigns it to the UserVersion field.
func (o *DeploymentVersion) SetUserVersion(v string) {
	o.UserVersion = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *DeploymentVersion) GetVersion() string {
	if o == nil || o.Version == nil {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeploymentVersion) GetVersionOk() (*string, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *DeploymentVersion) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *DeploymentVersion) SetVersion(v string) {
	o.Version = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *DeploymentVersion) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeploymentVersion) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *DeploymentVersion) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *DeploymentVersion) SetStatus(v string) {
	o.Status = &v
}

// GetDateCreated returns the DateCreated field value if set, zero value otherwise.
func (o *DeploymentVersion) GetDateCreated() time.Time {
	if o == nil || o.DateCreated == nil {
		var ret time.Time
		return ret
	}
	return *o.DateCreated
}

// GetDateCreatedOk returns a tuple with the DateCreated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeploymentVersion) GetDateCreatedOk() (*time.Time, bool) {
	if o == nil || o.DateCreated == nil {
		return nil, false
	}
	return o.DateCreated, true
}

// HasDateCreated returns a boolean if a field has been set.
func (o *DeploymentVersion) HasDateCreated() bool {
	if o != nil && o.DateCreated != nil {
		return true
	}

	return false
}

// SetDateCreated gets a reference to the given time.Time and assigns it to the DateCreated field.
func (o *DeploymentVersion) SetDateCreated(v time.Time) {
	o.DateCreated = &v
}

// GetLastUpdated returns the LastUpdated field value if set, zero value otherwise.
func (o *DeploymentVersion) GetLastUpdated() time.Time {
	if o == nil || o.LastUpdated == nil {
		var ret time.Time
		return ret
	}
	return *o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeploymentVersion) GetLastUpdatedOk() (*time.Time, bool) {
	if o == nil || o.LastUpdated == nil {
		return nil, false
	}
	return o.LastUpdated, true
}

// HasLastUpdated returns a boolean if a field has been set.
func (o *DeploymentVersion) HasLastUpdated() bool {
	if o != nil && o.LastUpdated != nil {
		return true
	}

	return false
}

// SetLastUpdated gets a reference to the given time.Time and assigns it to the LastUpdated field.
func (o *DeploymentVersion) SetLastUpdated(v time.Time) {
	o.LastUpdated = &v
}

func (o DeploymentVersion) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.DeployType != nil {
		toSerialize["deployType"] = o.DeployType
	}
	if o.DeploymentId != nil {
		toSerialize["deploymentId"] = o.DeploymentId
	}
	if o.FetchUrl.IsSet() {
		toSerialize["fetchUrl"] = o.FetchUrl.Get()
	}
	if o.GitUrl.IsSet() {
		toSerialize["gitUrl"] = o.GitUrl.Get()
	}
	if o.GitRef.IsSet() {
		toSerialize["gitRef"] = o.GitRef.Get()
	}
	if o.UserVersion != nil {
		toSerialize["userVersion"] = o.UserVersion
	}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.DateCreated != nil {
		toSerialize["dateCreated"] = o.DateCreated
	}
	if o.LastUpdated != nil {
		toSerialize["lastUpdated"] = o.LastUpdated
	}
	return json.Marshal(toSerialize)
}

type NullableDeploymentVersion struct {
	value *DeploymentVersion
	isSet bool
}

func (v NullableDeploymentVersion) Get() *DeploymentVersion {
	return v.value
}

func (v *NullableDeploymentVersion) Set(val *DeploymentVersion) {
	v.value = val
	v.isSet = true
}

func (v NullableDeploymentVersion) IsSet() bool {
	return v.isSet
}

func (v *NullableDeploymentVersion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeploymentVersion(val *DeploymentVersion) *NullableDeploymentVersion {
	return &NullableDeploymentVersion{value: val, isSet: true}
}

func (v NullableDeploymentVersion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeploymentVersion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


