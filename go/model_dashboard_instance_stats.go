/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// DashboardInstanceStats struct for DashboardInstanceStats
type DashboardInstanceStats struct {
	MaxCpu *float32 `json:"maxCpu,omitempty"`
	MaxCores *float32 `json:"maxCores,omitempty"`
	CpuUsage *float32 `json:"cpuUsage,omitempty"`
	CpuUsageAverage *float32 `json:"cpuUsageAverage,omitempty"`
	CpuUsagePeak *float32 `json:"cpuUsagePeak,omitempty"`
	UsedMemory *float32 `json:"usedMemory,omitempty"`
	MaxMemory *float32 `json:"maxMemory,omitempty"`
	UsedStorage *float32 `json:"usedStorage,omitempty"`
	MaxStorage *float32 `json:"maxStorage,omitempty"`
	Running *float32 `json:"running,omitempty"`
	Total *float32 `json:"total,omitempty"`
	TotalContainers *float32 `json:"totalContainers,omitempty"`
}

// NewDashboardInstanceStats instantiates a new DashboardInstanceStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDashboardInstanceStats() *DashboardInstanceStats {
	this := DashboardInstanceStats{}
	return &this
}

// NewDashboardInstanceStatsWithDefaults instantiates a new DashboardInstanceStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDashboardInstanceStatsWithDefaults() *DashboardInstanceStats {
	this := DashboardInstanceStats{}
	return &this
}

// GetMaxCpu returns the MaxCpu field value if set, zero value otherwise.
func (o *DashboardInstanceStats) GetMaxCpu() float32 {
	if o == nil || o.MaxCpu == nil {
		var ret float32
		return ret
	}
	return *o.MaxCpu
}

// GetMaxCpuOk returns a tuple with the MaxCpu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardInstanceStats) GetMaxCpuOk() (*float32, bool) {
	if o == nil || o.MaxCpu == nil {
		return nil, false
	}
	return o.MaxCpu, true
}

// HasMaxCpu returns a boolean if a field has been set.
func (o *DashboardInstanceStats) HasMaxCpu() bool {
	if o != nil && o.MaxCpu != nil {
		return true
	}

	return false
}

// SetMaxCpu gets a reference to the given float32 and assigns it to the MaxCpu field.
func (o *DashboardInstanceStats) SetMaxCpu(v float32) {
	o.MaxCpu = &v
}

// GetMaxCores returns the MaxCores field value if set, zero value otherwise.
func (o *DashboardInstanceStats) GetMaxCores() float32 {
	if o == nil || o.MaxCores == nil {
		var ret float32
		return ret
	}
	return *o.MaxCores
}

// GetMaxCoresOk returns a tuple with the MaxCores field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardInstanceStats) GetMaxCoresOk() (*float32, bool) {
	if o == nil || o.MaxCores == nil {
		return nil, false
	}
	return o.MaxCores, true
}

// HasMaxCores returns a boolean if a field has been set.
func (o *DashboardInstanceStats) HasMaxCores() bool {
	if o != nil && o.MaxCores != nil {
		return true
	}

	return false
}

// SetMaxCores gets a reference to the given float32 and assigns it to the MaxCores field.
func (o *DashboardInstanceStats) SetMaxCores(v float32) {
	o.MaxCores = &v
}

// GetCpuUsage returns the CpuUsage field value if set, zero value otherwise.
func (o *DashboardInstanceStats) GetCpuUsage() float32 {
	if o == nil || o.CpuUsage == nil {
		var ret float32
		return ret
	}
	return *o.CpuUsage
}

// GetCpuUsageOk returns a tuple with the CpuUsage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardInstanceStats) GetCpuUsageOk() (*float32, bool) {
	if o == nil || o.CpuUsage == nil {
		return nil, false
	}
	return o.CpuUsage, true
}

// HasCpuUsage returns a boolean if a field has been set.
func (o *DashboardInstanceStats) HasCpuUsage() bool {
	if o != nil && o.CpuUsage != nil {
		return true
	}

	return false
}

// SetCpuUsage gets a reference to the given float32 and assigns it to the CpuUsage field.
func (o *DashboardInstanceStats) SetCpuUsage(v float32) {
	o.CpuUsage = &v
}

// GetCpuUsageAverage returns the CpuUsageAverage field value if set, zero value otherwise.
func (o *DashboardInstanceStats) GetCpuUsageAverage() float32 {
	if o == nil || o.CpuUsageAverage == nil {
		var ret float32
		return ret
	}
	return *o.CpuUsageAverage
}

// GetCpuUsageAverageOk returns a tuple with the CpuUsageAverage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardInstanceStats) GetCpuUsageAverageOk() (*float32, bool) {
	if o == nil || o.CpuUsageAverage == nil {
		return nil, false
	}
	return o.CpuUsageAverage, true
}

// HasCpuUsageAverage returns a boolean if a field has been set.
func (o *DashboardInstanceStats) HasCpuUsageAverage() bool {
	if o != nil && o.CpuUsageAverage != nil {
		return true
	}

	return false
}

// SetCpuUsageAverage gets a reference to the given float32 and assigns it to the CpuUsageAverage field.
func (o *DashboardInstanceStats) SetCpuUsageAverage(v float32) {
	o.CpuUsageAverage = &v
}

// GetCpuUsagePeak returns the CpuUsagePeak field value if set, zero value otherwise.
func (o *DashboardInstanceStats) GetCpuUsagePeak() float32 {
	if o == nil || o.CpuUsagePeak == nil {
		var ret float32
		return ret
	}
	return *o.CpuUsagePeak
}

// GetCpuUsagePeakOk returns a tuple with the CpuUsagePeak field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardInstanceStats) GetCpuUsagePeakOk() (*float32, bool) {
	if o == nil || o.CpuUsagePeak == nil {
		return nil, false
	}
	return o.CpuUsagePeak, true
}

// HasCpuUsagePeak returns a boolean if a field has been set.
func (o *DashboardInstanceStats) HasCpuUsagePeak() bool {
	if o != nil && o.CpuUsagePeak != nil {
		return true
	}

	return false
}

// SetCpuUsagePeak gets a reference to the given float32 and assigns it to the CpuUsagePeak field.
func (o *DashboardInstanceStats) SetCpuUsagePeak(v float32) {
	o.CpuUsagePeak = &v
}

// GetUsedMemory returns the UsedMemory field value if set, zero value otherwise.
func (o *DashboardInstanceStats) GetUsedMemory() float32 {
	if o == nil || o.UsedMemory == nil {
		var ret float32
		return ret
	}
	return *o.UsedMemory
}

// GetUsedMemoryOk returns a tuple with the UsedMemory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardInstanceStats) GetUsedMemoryOk() (*float32, bool) {
	if o == nil || o.UsedMemory == nil {
		return nil, false
	}
	return o.UsedMemory, true
}

// HasUsedMemory returns a boolean if a field has been set.
func (o *DashboardInstanceStats) HasUsedMemory() bool {
	if o != nil && o.UsedMemory != nil {
		return true
	}

	return false
}

// SetUsedMemory gets a reference to the given float32 and assigns it to the UsedMemory field.
func (o *DashboardInstanceStats) SetUsedMemory(v float32) {
	o.UsedMemory = &v
}

// GetMaxMemory returns the MaxMemory field value if set, zero value otherwise.
func (o *DashboardInstanceStats) GetMaxMemory() float32 {
	if o == nil || o.MaxMemory == nil {
		var ret float32
		return ret
	}
	return *o.MaxMemory
}

// GetMaxMemoryOk returns a tuple with the MaxMemory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardInstanceStats) GetMaxMemoryOk() (*float32, bool) {
	if o == nil || o.MaxMemory == nil {
		return nil, false
	}
	return o.MaxMemory, true
}

// HasMaxMemory returns a boolean if a field has been set.
func (o *DashboardInstanceStats) HasMaxMemory() bool {
	if o != nil && o.MaxMemory != nil {
		return true
	}

	return false
}

// SetMaxMemory gets a reference to the given float32 and assigns it to the MaxMemory field.
func (o *DashboardInstanceStats) SetMaxMemory(v float32) {
	o.MaxMemory = &v
}

// GetUsedStorage returns the UsedStorage field value if set, zero value otherwise.
func (o *DashboardInstanceStats) GetUsedStorage() float32 {
	if o == nil || o.UsedStorage == nil {
		var ret float32
		return ret
	}
	return *o.UsedStorage
}

// GetUsedStorageOk returns a tuple with the UsedStorage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardInstanceStats) GetUsedStorageOk() (*float32, bool) {
	if o == nil || o.UsedStorage == nil {
		return nil, false
	}
	return o.UsedStorage, true
}

// HasUsedStorage returns a boolean if a field has been set.
func (o *DashboardInstanceStats) HasUsedStorage() bool {
	if o != nil && o.UsedStorage != nil {
		return true
	}

	return false
}

// SetUsedStorage gets a reference to the given float32 and assigns it to the UsedStorage field.
func (o *DashboardInstanceStats) SetUsedStorage(v float32) {
	o.UsedStorage = &v
}

// GetMaxStorage returns the MaxStorage field value if set, zero value otherwise.
func (o *DashboardInstanceStats) GetMaxStorage() float32 {
	if o == nil || o.MaxStorage == nil {
		var ret float32
		return ret
	}
	return *o.MaxStorage
}

// GetMaxStorageOk returns a tuple with the MaxStorage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardInstanceStats) GetMaxStorageOk() (*float32, bool) {
	if o == nil || o.MaxStorage == nil {
		return nil, false
	}
	return o.MaxStorage, true
}

// HasMaxStorage returns a boolean if a field has been set.
func (o *DashboardInstanceStats) HasMaxStorage() bool {
	if o != nil && o.MaxStorage != nil {
		return true
	}

	return false
}

// SetMaxStorage gets a reference to the given float32 and assigns it to the MaxStorage field.
func (o *DashboardInstanceStats) SetMaxStorage(v float32) {
	o.MaxStorage = &v
}

// GetRunning returns the Running field value if set, zero value otherwise.
func (o *DashboardInstanceStats) GetRunning() float32 {
	if o == nil || o.Running == nil {
		var ret float32
		return ret
	}
	return *o.Running
}

// GetRunningOk returns a tuple with the Running field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardInstanceStats) GetRunningOk() (*float32, bool) {
	if o == nil || o.Running == nil {
		return nil, false
	}
	return o.Running, true
}

// HasRunning returns a boolean if a field has been set.
func (o *DashboardInstanceStats) HasRunning() bool {
	if o != nil && o.Running != nil {
		return true
	}

	return false
}

// SetRunning gets a reference to the given float32 and assigns it to the Running field.
func (o *DashboardInstanceStats) SetRunning(v float32) {
	o.Running = &v
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *DashboardInstanceStats) GetTotal() float32 {
	if o == nil || o.Total == nil {
		var ret float32
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardInstanceStats) GetTotalOk() (*float32, bool) {
	if o == nil || o.Total == nil {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *DashboardInstanceStats) HasTotal() bool {
	if o != nil && o.Total != nil {
		return true
	}

	return false
}

// SetTotal gets a reference to the given float32 and assigns it to the Total field.
func (o *DashboardInstanceStats) SetTotal(v float32) {
	o.Total = &v
}

// GetTotalContainers returns the TotalContainers field value if set, zero value otherwise.
func (o *DashboardInstanceStats) GetTotalContainers() float32 {
	if o == nil || o.TotalContainers == nil {
		var ret float32
		return ret
	}
	return *o.TotalContainers
}

// GetTotalContainersOk returns a tuple with the TotalContainers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardInstanceStats) GetTotalContainersOk() (*float32, bool) {
	if o == nil || o.TotalContainers == nil {
		return nil, false
	}
	return o.TotalContainers, true
}

// HasTotalContainers returns a boolean if a field has been set.
func (o *DashboardInstanceStats) HasTotalContainers() bool {
	if o != nil && o.TotalContainers != nil {
		return true
	}

	return false
}

// SetTotalContainers gets a reference to the given float32 and assigns it to the TotalContainers field.
func (o *DashboardInstanceStats) SetTotalContainers(v float32) {
	o.TotalContainers = &v
}

func (o DashboardInstanceStats) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.MaxCpu != nil {
		toSerialize["maxCpu"] = o.MaxCpu
	}
	if o.MaxCores != nil {
		toSerialize["maxCores"] = o.MaxCores
	}
	if o.CpuUsage != nil {
		toSerialize["cpuUsage"] = o.CpuUsage
	}
	if o.CpuUsageAverage != nil {
		toSerialize["cpuUsageAverage"] = o.CpuUsageAverage
	}
	if o.CpuUsagePeak != nil {
		toSerialize["cpuUsagePeak"] = o.CpuUsagePeak
	}
	if o.UsedMemory != nil {
		toSerialize["usedMemory"] = o.UsedMemory
	}
	if o.MaxMemory != nil {
		toSerialize["maxMemory"] = o.MaxMemory
	}
	if o.UsedStorage != nil {
		toSerialize["usedStorage"] = o.UsedStorage
	}
	if o.MaxStorage != nil {
		toSerialize["maxStorage"] = o.MaxStorage
	}
	if o.Running != nil {
		toSerialize["running"] = o.Running
	}
	if o.Total != nil {
		toSerialize["total"] = o.Total
	}
	if o.TotalContainers != nil {
		toSerialize["totalContainers"] = o.TotalContainers
	}
	return json.Marshal(toSerialize)
}

type NullableDashboardInstanceStats struct {
	value *DashboardInstanceStats
	isSet bool
}

func (v NullableDashboardInstanceStats) Get() *DashboardInstanceStats {
	return v.value
}

func (v *NullableDashboardInstanceStats) Set(val *DashboardInstanceStats) {
	v.value = val
	v.isSet = true
}

func (v NullableDashboardInstanceStats) IsSet() bool {
	return v.isSet
}

func (v *NullableDashboardInstanceStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDashboardInstanceStats(val *DashboardInstanceStats) *NullableDashboardInstanceStats {
	return &NullableDashboardInstanceStats{value: val, isSet: true}
}

func (v NullableDashboardInstanceStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDashboardInstanceStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


