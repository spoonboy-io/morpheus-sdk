/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InstancesCloneImage struct for InstancesCloneImage
type InstancesCloneImage struct {
	// Image Template Name
	TemplateName *string `json:"templateName,omitempty"`
	// Zone Folder externalId. This is required for VMware
	ZoneFolder *string `json:"zoneFolder,omitempty"`
}

// NewInstancesCloneImage instantiates a new InstancesCloneImage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstancesCloneImage() *InstancesCloneImage {
	this := InstancesCloneImage{}
	var templateName string = "{server.name}-{timestamp}"
	this.TemplateName = &templateName
	return &this
}

// NewInstancesCloneImageWithDefaults instantiates a new InstancesCloneImage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstancesCloneImageWithDefaults() *InstancesCloneImage {
	this := InstancesCloneImage{}
	var templateName string = "{server.name}-{timestamp}"
	this.TemplateName = &templateName
	return &this
}

// GetTemplateName returns the TemplateName field value if set, zero value otherwise.
func (o *InstancesCloneImage) GetTemplateName() string {
	if o == nil || o.TemplateName == nil {
		var ret string
		return ret
	}
	return *o.TemplateName
}

// GetTemplateNameOk returns a tuple with the TemplateName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstancesCloneImage) GetTemplateNameOk() (*string, bool) {
	if o == nil || o.TemplateName == nil {
		return nil, false
	}
	return o.TemplateName, true
}

// HasTemplateName returns a boolean if a field has been set.
func (o *InstancesCloneImage) HasTemplateName() bool {
	if o != nil && o.TemplateName != nil {
		return true
	}

	return false
}

// SetTemplateName gets a reference to the given string and assigns it to the TemplateName field.
func (o *InstancesCloneImage) SetTemplateName(v string) {
	o.TemplateName = &v
}

// GetZoneFolder returns the ZoneFolder field value if set, zero value otherwise.
func (o *InstancesCloneImage) GetZoneFolder() string {
	if o == nil || o.ZoneFolder == nil {
		var ret string
		return ret
	}
	return *o.ZoneFolder
}

// GetZoneFolderOk returns a tuple with the ZoneFolder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstancesCloneImage) GetZoneFolderOk() (*string, bool) {
	if o == nil || o.ZoneFolder == nil {
		return nil, false
	}
	return o.ZoneFolder, true
}

// HasZoneFolder returns a boolean if a field has been set.
func (o *InstancesCloneImage) HasZoneFolder() bool {
	if o != nil && o.ZoneFolder != nil {
		return true
	}

	return false
}

// SetZoneFolder gets a reference to the given string and assigns it to the ZoneFolder field.
func (o *InstancesCloneImage) SetZoneFolder(v string) {
	o.ZoneFolder = &v
}

func (o InstancesCloneImage) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.TemplateName != nil {
		toSerialize["templateName"] = o.TemplateName
	}
	if o.ZoneFolder != nil {
		toSerialize["zoneFolder"] = o.ZoneFolder
	}
	return json.Marshal(toSerialize)
}

type NullableInstancesCloneImage struct {
	value *InstancesCloneImage
	isSet bool
}

func (v NullableInstancesCloneImage) Get() *InstancesCloneImage {
	return v.value
}

func (v *NullableInstancesCloneImage) Set(val *InstancesCloneImage) {
	v.value = val
	v.isSet = true
}

func (v NullableInstancesCloneImage) IsSet() bool {
	return v.isSet
}

func (v *NullableInstancesCloneImage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstancesCloneImage(val *InstancesCloneImage) *NullableInstancesCloneImage {
	return &NullableInstancesCloneImage{value: val, isSet: true}
}

func (v NullableInstancesCloneImage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstancesCloneImage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


