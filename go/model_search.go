/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Search struct for Search
type Search struct {
	Hits *[]SearchHits `json:"hits,omitempty"`
	Query *string `json:"query,omitempty"`
	Took *int64 `json:"took,omitempty"`
	Meta *MetaObject `json:"meta,omitempty"`
}

// NewSearch instantiates a new Search object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearch() *Search {
	this := Search{}
	return &this
}

// NewSearchWithDefaults instantiates a new Search object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchWithDefaults() *Search {
	this := Search{}
	return &this
}

// GetHits returns the Hits field value if set, zero value otherwise.
func (o *Search) GetHits() []SearchHits {
	if o == nil || o.Hits == nil {
		var ret []SearchHits
		return ret
	}
	return *o.Hits
}

// GetHitsOk returns a tuple with the Hits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Search) GetHitsOk() (*[]SearchHits, bool) {
	if o == nil || o.Hits == nil {
		return nil, false
	}
	return o.Hits, true
}

// HasHits returns a boolean if a field has been set.
func (o *Search) HasHits() bool {
	if o != nil && o.Hits != nil {
		return true
	}

	return false
}

// SetHits gets a reference to the given []SearchHits and assigns it to the Hits field.
func (o *Search) SetHits(v []SearchHits) {
	o.Hits = &v
}

// GetQuery returns the Query field value if set, zero value otherwise.
func (o *Search) GetQuery() string {
	if o == nil || o.Query == nil {
		var ret string
		return ret
	}
	return *o.Query
}

// GetQueryOk returns a tuple with the Query field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Search) GetQueryOk() (*string, bool) {
	if o == nil || o.Query == nil {
		return nil, false
	}
	return o.Query, true
}

// HasQuery returns a boolean if a field has been set.
func (o *Search) HasQuery() bool {
	if o != nil && o.Query != nil {
		return true
	}

	return false
}

// SetQuery gets a reference to the given string and assigns it to the Query field.
func (o *Search) SetQuery(v string) {
	o.Query = &v
}

// GetTook returns the Took field value if set, zero value otherwise.
func (o *Search) GetTook() int64 {
	if o == nil || o.Took == nil {
		var ret int64
		return ret
	}
	return *o.Took
}

// GetTookOk returns a tuple with the Took field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Search) GetTookOk() (*int64, bool) {
	if o == nil || o.Took == nil {
		return nil, false
	}
	return o.Took, true
}

// HasTook returns a boolean if a field has been set.
func (o *Search) HasTook() bool {
	if o != nil && o.Took != nil {
		return true
	}

	return false
}

// SetTook gets a reference to the given int64 and assigns it to the Took field.
func (o *Search) SetTook(v int64) {
	o.Took = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *Search) GetMeta() MetaObject {
	if o == nil || o.Meta == nil {
		var ret MetaObject
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Search) GetMetaOk() (*MetaObject, bool) {
	if o == nil || o.Meta == nil {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *Search) HasMeta() bool {
	if o != nil && o.Meta != nil {
		return true
	}

	return false
}

// SetMeta gets a reference to the given MetaObject and assigns it to the Meta field.
func (o *Search) SetMeta(v MetaObject) {
	o.Meta = &v
}

func (o Search) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Hits != nil {
		toSerialize["hits"] = o.Hits
	}
	if o.Query != nil {
		toSerialize["query"] = o.Query
	}
	if o.Took != nil {
		toSerialize["took"] = o.Took
	}
	if o.Meta != nil {
		toSerialize["meta"] = o.Meta
	}
	return json.Marshal(toSerialize)
}

type NullableSearch struct {
	value *Search
	isSet bool
}

func (v NullableSearch) Get() *Search {
	return v.value
}

func (v *NullableSearch) Set(val *Search) {
	v.value = val
	v.isSet = true
}

func (v NullableSearch) IsSet() bool {
	return v.isSet
}

func (v *NullableSearch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearch(val *Search) *NullableSearch {
	return &NullableSearch{value: val, isSet: true}
}

func (v NullableSearch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


