/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 6.1.1
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// AddCatalogItemTypeRequestCatalogItemType - struct for AddCatalogItemTypeRequestCatalogItemType
type AddCatalogItemTypeRequestCatalogItemType struct {
	CatalogItemTypeBlueprintCreate *CatalogItemTypeBlueprintCreate
	CatalogItemTypeInstanceCreate *CatalogItemTypeInstanceCreate
	CatalogItemTypeWorkflowCreate *CatalogItemTypeWorkflowCreate
}

// CatalogItemTypeBlueprintCreateAsAddCatalogItemTypeRequestCatalogItemType is a convenience function that returns CatalogItemTypeBlueprintCreate wrapped in AddCatalogItemTypeRequestCatalogItemType
func CatalogItemTypeBlueprintCreateAsAddCatalogItemTypeRequestCatalogItemType(v *CatalogItemTypeBlueprintCreate) AddCatalogItemTypeRequestCatalogItemType {
	return AddCatalogItemTypeRequestCatalogItemType{
		CatalogItemTypeBlueprintCreate: v,
	}
}

// CatalogItemTypeInstanceCreateAsAddCatalogItemTypeRequestCatalogItemType is a convenience function that returns CatalogItemTypeInstanceCreate wrapped in AddCatalogItemTypeRequestCatalogItemType
func CatalogItemTypeInstanceCreateAsAddCatalogItemTypeRequestCatalogItemType(v *CatalogItemTypeInstanceCreate) AddCatalogItemTypeRequestCatalogItemType {
	return AddCatalogItemTypeRequestCatalogItemType{
		CatalogItemTypeInstanceCreate: v,
	}
}

// CatalogItemTypeWorkflowCreateAsAddCatalogItemTypeRequestCatalogItemType is a convenience function that returns CatalogItemTypeWorkflowCreate wrapped in AddCatalogItemTypeRequestCatalogItemType
func CatalogItemTypeWorkflowCreateAsAddCatalogItemTypeRequestCatalogItemType(v *CatalogItemTypeWorkflowCreate) AddCatalogItemTypeRequestCatalogItemType {
	return AddCatalogItemTypeRequestCatalogItemType{
		CatalogItemTypeWorkflowCreate: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *AddCatalogItemTypeRequestCatalogItemType) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into CatalogItemTypeBlueprintCreate
	err = newStrictDecoder(data).Decode(&dst.CatalogItemTypeBlueprintCreate)
	if err == nil {
		jsonCatalogItemTypeBlueprintCreate, _ := json.Marshal(dst.CatalogItemTypeBlueprintCreate)
		if string(jsonCatalogItemTypeBlueprintCreate) == "{}" { // empty struct
			dst.CatalogItemTypeBlueprintCreate = nil
		} else {
			match++
		}
	} else {
		dst.CatalogItemTypeBlueprintCreate = nil
	}

	// try to unmarshal data into CatalogItemTypeInstanceCreate
	err = newStrictDecoder(data).Decode(&dst.CatalogItemTypeInstanceCreate)
	if err == nil {
		jsonCatalogItemTypeInstanceCreate, _ := json.Marshal(dst.CatalogItemTypeInstanceCreate)
		if string(jsonCatalogItemTypeInstanceCreate) == "{}" { // empty struct
			dst.CatalogItemTypeInstanceCreate = nil
		} else {
			match++
		}
	} else {
		dst.CatalogItemTypeInstanceCreate = nil
	}

	// try to unmarshal data into CatalogItemTypeWorkflowCreate
	err = newStrictDecoder(data).Decode(&dst.CatalogItemTypeWorkflowCreate)
	if err == nil {
		jsonCatalogItemTypeWorkflowCreate, _ := json.Marshal(dst.CatalogItemTypeWorkflowCreate)
		if string(jsonCatalogItemTypeWorkflowCreate) == "{}" { // empty struct
			dst.CatalogItemTypeWorkflowCreate = nil
		} else {
			match++
		}
	} else {
		dst.CatalogItemTypeWorkflowCreate = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.CatalogItemTypeBlueprintCreate = nil
		dst.CatalogItemTypeInstanceCreate = nil
		dst.CatalogItemTypeWorkflowCreate = nil

		return fmt.Errorf("data matches more than one schema in oneOf(AddCatalogItemTypeRequestCatalogItemType)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(AddCatalogItemTypeRequestCatalogItemType)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AddCatalogItemTypeRequestCatalogItemType) MarshalJSON() ([]byte, error) {
	if src.CatalogItemTypeBlueprintCreate != nil {
		return json.Marshal(&src.CatalogItemTypeBlueprintCreate)
	}

	if src.CatalogItemTypeInstanceCreate != nil {
		return json.Marshal(&src.CatalogItemTypeInstanceCreate)
	}

	if src.CatalogItemTypeWorkflowCreate != nil {
		return json.Marshal(&src.CatalogItemTypeWorkflowCreate)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *AddCatalogItemTypeRequestCatalogItemType) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.CatalogItemTypeBlueprintCreate != nil {
		return obj.CatalogItemTypeBlueprintCreate
	}

	if obj.CatalogItemTypeInstanceCreate != nil {
		return obj.CatalogItemTypeInstanceCreate
	}

	if obj.CatalogItemTypeWorkflowCreate != nil {
		return obj.CatalogItemTypeWorkflowCreate
	}

	// all schemas are nil
	return nil
}

type NullableAddCatalogItemTypeRequestCatalogItemType struct {
	value *AddCatalogItemTypeRequestCatalogItemType
	isSet bool
}

func (v NullableAddCatalogItemTypeRequestCatalogItemType) Get() *AddCatalogItemTypeRequestCatalogItemType {
	return v.value
}

func (v *NullableAddCatalogItemTypeRequestCatalogItemType) Set(val *AddCatalogItemTypeRequestCatalogItemType) {
	v.value = val
	v.isSet = true
}

func (v NullableAddCatalogItemTypeRequestCatalogItemType) IsSet() bool {
	return v.isSet
}

func (v *NullableAddCatalogItemTypeRequestCatalogItemType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddCatalogItemTypeRequestCatalogItemType(val *AddCatalogItemTypeRequestCatalogItemType) *NullableAddCatalogItemTypeRequestCatalogItemType {
	return &NullableAddCatalogItemTypeRequestCatalogItemType{value: val, isSet: true}
}

func (v NullableAddCatalogItemTypeRequestCatalogItemType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddCatalogItemTypeRequestCatalogItemType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


