/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InstanceNetwork struct for InstanceNetwork
type InstanceNetwork struct {
	Id NullableInt64 `json:"id,omitempty"`
	Group NullableInt32 `json:"group,omitempty"`
	Subnet NullableString `json:"subnet,omitempty"`
	DhcpServer NullableBool `json:"dhcpServer,omitempty"`
	Name NullableString `json:"name,omitempty"`
	Pool NullableInlineResponse20082LoadBalancerInstanceSslCert `json:"pool,omitempty"`
}

// NewInstanceNetwork instantiates a new InstanceNetwork object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstanceNetwork() *InstanceNetwork {
	this := InstanceNetwork{}
	return &this
}

// NewInstanceNetworkWithDefaults instantiates a new InstanceNetwork object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstanceNetworkWithDefaults() *InstanceNetwork {
	this := InstanceNetwork{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InstanceNetwork) GetId() int64 {
	if o == nil || o.Id.Get() == nil {
		var ret int64
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InstanceNetwork) GetIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *InstanceNetwork) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableInt64 and assigns it to the Id field.
func (o *InstanceNetwork) SetId(v int64) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *InstanceNetwork) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *InstanceNetwork) UnsetId() {
	o.Id.Unset()
}

// GetGroup returns the Group field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InstanceNetwork) GetGroup() int32 {
	if o == nil || o.Group.Get() == nil {
		var ret int32
		return ret
	}
	return *o.Group.Get()
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InstanceNetwork) GetGroupOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Group.Get(), o.Group.IsSet()
}

// HasGroup returns a boolean if a field has been set.
func (o *InstanceNetwork) HasGroup() bool {
	if o != nil && o.Group.IsSet() {
		return true
	}

	return false
}

// SetGroup gets a reference to the given NullableInt32 and assigns it to the Group field.
func (o *InstanceNetwork) SetGroup(v int32) {
	o.Group.Set(&v)
}
// SetGroupNil sets the value for Group to be an explicit nil
func (o *InstanceNetwork) SetGroupNil() {
	o.Group.Set(nil)
}

// UnsetGroup ensures that no value is present for Group, not even an explicit nil
func (o *InstanceNetwork) UnsetGroup() {
	o.Group.Unset()
}

// GetSubnet returns the Subnet field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InstanceNetwork) GetSubnet() string {
	if o == nil || o.Subnet.Get() == nil {
		var ret string
		return ret
	}
	return *o.Subnet.Get()
}

// GetSubnetOk returns a tuple with the Subnet field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InstanceNetwork) GetSubnetOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Subnet.Get(), o.Subnet.IsSet()
}

// HasSubnet returns a boolean if a field has been set.
func (o *InstanceNetwork) HasSubnet() bool {
	if o != nil && o.Subnet.IsSet() {
		return true
	}

	return false
}

// SetSubnet gets a reference to the given NullableString and assigns it to the Subnet field.
func (o *InstanceNetwork) SetSubnet(v string) {
	o.Subnet.Set(&v)
}
// SetSubnetNil sets the value for Subnet to be an explicit nil
func (o *InstanceNetwork) SetSubnetNil() {
	o.Subnet.Set(nil)
}

// UnsetSubnet ensures that no value is present for Subnet, not even an explicit nil
func (o *InstanceNetwork) UnsetSubnet() {
	o.Subnet.Unset()
}

// GetDhcpServer returns the DhcpServer field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InstanceNetwork) GetDhcpServer() bool {
	if o == nil || o.DhcpServer.Get() == nil {
		var ret bool
		return ret
	}
	return *o.DhcpServer.Get()
}

// GetDhcpServerOk returns a tuple with the DhcpServer field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InstanceNetwork) GetDhcpServerOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DhcpServer.Get(), o.DhcpServer.IsSet()
}

// HasDhcpServer returns a boolean if a field has been set.
func (o *InstanceNetwork) HasDhcpServer() bool {
	if o != nil && o.DhcpServer.IsSet() {
		return true
	}

	return false
}

// SetDhcpServer gets a reference to the given NullableBool and assigns it to the DhcpServer field.
func (o *InstanceNetwork) SetDhcpServer(v bool) {
	o.DhcpServer.Set(&v)
}
// SetDhcpServerNil sets the value for DhcpServer to be an explicit nil
func (o *InstanceNetwork) SetDhcpServerNil() {
	o.DhcpServer.Set(nil)
}

// UnsetDhcpServer ensures that no value is present for DhcpServer, not even an explicit nil
func (o *InstanceNetwork) UnsetDhcpServer() {
	o.DhcpServer.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InstanceNetwork) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InstanceNetwork) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *InstanceNetwork) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *InstanceNetwork) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *InstanceNetwork) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *InstanceNetwork) UnsetName() {
	o.Name.Unset()
}

// GetPool returns the Pool field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InstanceNetwork) GetPool() InlineResponse20082LoadBalancerInstanceSslCert {
	if o == nil || o.Pool.Get() == nil {
		var ret InlineResponse20082LoadBalancerInstanceSslCert
		return ret
	}
	return *o.Pool.Get()
}

// GetPoolOk returns a tuple with the Pool field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InstanceNetwork) GetPoolOk() (*InlineResponse20082LoadBalancerInstanceSslCert, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Pool.Get(), o.Pool.IsSet()
}

// HasPool returns a boolean if a field has been set.
func (o *InstanceNetwork) HasPool() bool {
	if o != nil && o.Pool.IsSet() {
		return true
	}

	return false
}

// SetPool gets a reference to the given NullableInlineResponse20082LoadBalancerInstanceSslCert and assigns it to the Pool field.
func (o *InstanceNetwork) SetPool(v InlineResponse20082LoadBalancerInstanceSslCert) {
	o.Pool.Set(&v)
}
// SetPoolNil sets the value for Pool to be an explicit nil
func (o *InstanceNetwork) SetPoolNil() {
	o.Pool.Set(nil)
}

// UnsetPool ensures that no value is present for Pool, not even an explicit nil
func (o *InstanceNetwork) UnsetPool() {
	o.Pool.Unset()
}

func (o InstanceNetwork) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.Group.IsSet() {
		toSerialize["group"] = o.Group.Get()
	}
	if o.Subnet.IsSet() {
		toSerialize["subnet"] = o.Subnet.Get()
	}
	if o.DhcpServer.IsSet() {
		toSerialize["dhcpServer"] = o.DhcpServer.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Pool.IsSet() {
		toSerialize["pool"] = o.Pool.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableInstanceNetwork struct {
	value *InstanceNetwork
	isSet bool
}

func (v NullableInstanceNetwork) Get() *InstanceNetwork {
	return v.value
}

func (v *NullableInstanceNetwork) Set(val *InstanceNetwork) {
	v.value = val
	v.isSet = true
}

func (v NullableInstanceNetwork) IsSet() bool {
	return v.isSet
}

func (v *NullableInstanceNetwork) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstanceNetwork(val *InstanceNetwork) *NullableInstanceNetwork {
	return &NullableInstanceNetwork{value: val, isSet: true}
}

func (v NullableInstanceNetwork) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstanceNetwork) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


