/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// PolicyGroupCreate struct for PolicyGroupCreate
type PolicyGroupCreate struct {
	// A name for the policy
	Name string `json:"name"`
	// A description for the policy
	Description *string `json:"description,omitempty"`
	PolicyType PolicyGroupCreatePolicyType `json:"policyType"`
}

// NewPolicyGroupCreate instantiates a new PolicyGroupCreate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPolicyGroupCreate(name string, policyType PolicyGroupCreatePolicyType, ) *PolicyGroupCreate {
	this := PolicyGroupCreate{}
	this.Name = name
	this.PolicyType = policyType
	return &this
}

// NewPolicyGroupCreateWithDefaults instantiates a new PolicyGroupCreate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPolicyGroupCreateWithDefaults() *PolicyGroupCreate {
	this := PolicyGroupCreate{}
	return &this
}

// GetName returns the Name field value
func (o *PolicyGroupCreate) GetName() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *PolicyGroupCreate) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *PolicyGroupCreate) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *PolicyGroupCreate) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyGroupCreate) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *PolicyGroupCreate) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *PolicyGroupCreate) SetDescription(v string) {
	o.Description = &v
}

// GetPolicyType returns the PolicyType field value
func (o *PolicyGroupCreate) GetPolicyType() PolicyGroupCreatePolicyType {
	if o == nil  {
		var ret PolicyGroupCreatePolicyType
		return ret
	}

	return o.PolicyType
}

// GetPolicyTypeOk returns a tuple with the PolicyType field value
// and a boolean to check if the value has been set.
func (o *PolicyGroupCreate) GetPolicyTypeOk() (*PolicyGroupCreatePolicyType, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.PolicyType, true
}

// SetPolicyType sets field value
func (o *PolicyGroupCreate) SetPolicyType(v PolicyGroupCreatePolicyType) {
	o.PolicyType = v
}

func (o PolicyGroupCreate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if true {
		toSerialize["policyType"] = o.PolicyType
	}
	return json.Marshal(toSerialize)
}

type NullablePolicyGroupCreate struct {
	value *PolicyGroupCreate
	isSet bool
}

func (v NullablePolicyGroupCreate) Get() *PolicyGroupCreate {
	return v.value
}

func (v *NullablePolicyGroupCreate) Set(val *PolicyGroupCreate) {
	v.value = val
	v.isSet = true
}

func (v NullablePolicyGroupCreate) IsSet() bool {
	return v.isSet
}

func (v *NullablePolicyGroupCreate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePolicyGroupCreate(val *PolicyGroupCreate) *NullablePolicyGroupCreate {
	return &NullablePolicyGroupCreate{value: val, isSet: true}
}

func (v NullablePolicyGroupCreate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePolicyGroupCreate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


