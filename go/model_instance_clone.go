/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InstanceClone struct for InstanceClone
type InstanceClone struct {
	// A name for the new cloned instance. If none is specified the existing name will be duplicated with the 'clone' suffix added.
	Name *string `json:"name,omitempty"`
	Group *InstanceCloneGroup `json:"group,omitempty"`
}

// NewInstanceClone instantiates a new InstanceClone object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstanceClone() *InstanceClone {
	this := InstanceClone{}
	return &this
}

// NewInstanceCloneWithDefaults instantiates a new InstanceClone object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstanceCloneWithDefaults() *InstanceClone {
	this := InstanceClone{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *InstanceClone) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceClone) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *InstanceClone) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *InstanceClone) SetName(v string) {
	o.Name = &v
}

// GetGroup returns the Group field value if set, zero value otherwise.
func (o *InstanceClone) GetGroup() InstanceCloneGroup {
	if o == nil || o.Group == nil {
		var ret InstanceCloneGroup
		return ret
	}
	return *o.Group
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceClone) GetGroupOk() (*InstanceCloneGroup, bool) {
	if o == nil || o.Group == nil {
		return nil, false
	}
	return o.Group, true
}

// HasGroup returns a boolean if a field has been set.
func (o *InstanceClone) HasGroup() bool {
	if o != nil && o.Group != nil {
		return true
	}

	return false
}

// SetGroup gets a reference to the given InstanceCloneGroup and assigns it to the Group field.
func (o *InstanceClone) SetGroup(v InstanceCloneGroup) {
	o.Group = &v
}

func (o InstanceClone) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Group != nil {
		toSerialize["group"] = o.Group
	}
	return json.Marshal(toSerialize)
}

type NullableInstanceClone struct {
	value *InstanceClone
	isSet bool
}

func (v NullableInstanceClone) Get() *InstanceClone {
	return v.value
}

func (v *NullableInstanceClone) Set(val *InstanceClone) {
	v.value = val
	v.isSet = true
}

func (v NullableInstanceClone) IsSet() bool {
	return v.isSet
}

func (v *NullableInstanceClone) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstanceClone(val *InstanceClone) *NullableInstanceClone {
	return &NullableInstanceClone{value: val, isSet: true}
}

func (v NullableInstanceClone) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstanceClone) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


