/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// TaskChefBootstrapConfigTaskOptions struct for TaskChefBootstrapConfigTaskOptions
type TaskChefBootstrapConfigTaskOptions struct {
	ChefDataKey NullableString `json:"chefDataKey,omitempty"`
	ChefDataKeyHash NullableString `json:"chefDataKeyHash,omitempty"`
	ChefRunList NullableString `json:"chefRunList,omitempty"`
	LocalScriptGitRef NullableString `json:"localScriptGitRef,omitempty"`
	ChefDataKeyPath NullableString `json:"chefDataKeyPath,omitempty"`
	LocalScriptGitId NullableString `json:"localScriptGitId,omitempty"`
	Port NullableString `json:"port,omitempty"`
	ChefEnv NullableString `json:"chefEnv,omitempty"`
	ChefNodeName NullableString `json:"chefNodeName,omitempty"`
	Host NullableString `json:"host,omitempty"`
	SshKey NullableString `json:"sshKey,omitempty"`
	Username NullableString `json:"username,omitempty"`
	Password NullableString `json:"password,omitempty"`
	PasswordHash NullableString `json:"passwordHash,omitempty"`
	ChefAttributes *string `json:"chefAttributes,omitempty"`
}

// NewTaskChefBootstrapConfigTaskOptions instantiates a new TaskChefBootstrapConfigTaskOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaskChefBootstrapConfigTaskOptions() *TaskChefBootstrapConfigTaskOptions {
	this := TaskChefBootstrapConfigTaskOptions{}
	return &this
}

// NewTaskChefBootstrapConfigTaskOptionsWithDefaults instantiates a new TaskChefBootstrapConfigTaskOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaskChefBootstrapConfigTaskOptionsWithDefaults() *TaskChefBootstrapConfigTaskOptions {
	this := TaskChefBootstrapConfigTaskOptions{}
	return &this
}

// GetChefDataKey returns the ChefDataKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskChefBootstrapConfigTaskOptions) GetChefDataKey() string {
	if o == nil || o.ChefDataKey.Get() == nil {
		var ret string
		return ret
	}
	return *o.ChefDataKey.Get()
}

// GetChefDataKeyOk returns a tuple with the ChefDataKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskChefBootstrapConfigTaskOptions) GetChefDataKeyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ChefDataKey.Get(), o.ChefDataKey.IsSet()
}

// HasChefDataKey returns a boolean if a field has been set.
func (o *TaskChefBootstrapConfigTaskOptions) HasChefDataKey() bool {
	if o != nil && o.ChefDataKey.IsSet() {
		return true
	}

	return false
}

// SetChefDataKey gets a reference to the given NullableString and assigns it to the ChefDataKey field.
func (o *TaskChefBootstrapConfigTaskOptions) SetChefDataKey(v string) {
	o.ChefDataKey.Set(&v)
}
// SetChefDataKeyNil sets the value for ChefDataKey to be an explicit nil
func (o *TaskChefBootstrapConfigTaskOptions) SetChefDataKeyNil() {
	o.ChefDataKey.Set(nil)
}

// UnsetChefDataKey ensures that no value is present for ChefDataKey, not even an explicit nil
func (o *TaskChefBootstrapConfigTaskOptions) UnsetChefDataKey() {
	o.ChefDataKey.Unset()
}

// GetChefDataKeyHash returns the ChefDataKeyHash field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskChefBootstrapConfigTaskOptions) GetChefDataKeyHash() string {
	if o == nil || o.ChefDataKeyHash.Get() == nil {
		var ret string
		return ret
	}
	return *o.ChefDataKeyHash.Get()
}

// GetChefDataKeyHashOk returns a tuple with the ChefDataKeyHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskChefBootstrapConfigTaskOptions) GetChefDataKeyHashOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ChefDataKeyHash.Get(), o.ChefDataKeyHash.IsSet()
}

// HasChefDataKeyHash returns a boolean if a field has been set.
func (o *TaskChefBootstrapConfigTaskOptions) HasChefDataKeyHash() bool {
	if o != nil && o.ChefDataKeyHash.IsSet() {
		return true
	}

	return false
}

// SetChefDataKeyHash gets a reference to the given NullableString and assigns it to the ChefDataKeyHash field.
func (o *TaskChefBootstrapConfigTaskOptions) SetChefDataKeyHash(v string) {
	o.ChefDataKeyHash.Set(&v)
}
// SetChefDataKeyHashNil sets the value for ChefDataKeyHash to be an explicit nil
func (o *TaskChefBootstrapConfigTaskOptions) SetChefDataKeyHashNil() {
	o.ChefDataKeyHash.Set(nil)
}

// UnsetChefDataKeyHash ensures that no value is present for ChefDataKeyHash, not even an explicit nil
func (o *TaskChefBootstrapConfigTaskOptions) UnsetChefDataKeyHash() {
	o.ChefDataKeyHash.Unset()
}

// GetChefRunList returns the ChefRunList field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskChefBootstrapConfigTaskOptions) GetChefRunList() string {
	if o == nil || o.ChefRunList.Get() == nil {
		var ret string
		return ret
	}
	return *o.ChefRunList.Get()
}

// GetChefRunListOk returns a tuple with the ChefRunList field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskChefBootstrapConfigTaskOptions) GetChefRunListOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ChefRunList.Get(), o.ChefRunList.IsSet()
}

// HasChefRunList returns a boolean if a field has been set.
func (o *TaskChefBootstrapConfigTaskOptions) HasChefRunList() bool {
	if o != nil && o.ChefRunList.IsSet() {
		return true
	}

	return false
}

// SetChefRunList gets a reference to the given NullableString and assigns it to the ChefRunList field.
func (o *TaskChefBootstrapConfigTaskOptions) SetChefRunList(v string) {
	o.ChefRunList.Set(&v)
}
// SetChefRunListNil sets the value for ChefRunList to be an explicit nil
func (o *TaskChefBootstrapConfigTaskOptions) SetChefRunListNil() {
	o.ChefRunList.Set(nil)
}

// UnsetChefRunList ensures that no value is present for ChefRunList, not even an explicit nil
func (o *TaskChefBootstrapConfigTaskOptions) UnsetChefRunList() {
	o.ChefRunList.Unset()
}

// GetLocalScriptGitRef returns the LocalScriptGitRef field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskChefBootstrapConfigTaskOptions) GetLocalScriptGitRef() string {
	if o == nil || o.LocalScriptGitRef.Get() == nil {
		var ret string
		return ret
	}
	return *o.LocalScriptGitRef.Get()
}

// GetLocalScriptGitRefOk returns a tuple with the LocalScriptGitRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskChefBootstrapConfigTaskOptions) GetLocalScriptGitRefOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LocalScriptGitRef.Get(), o.LocalScriptGitRef.IsSet()
}

// HasLocalScriptGitRef returns a boolean if a field has been set.
func (o *TaskChefBootstrapConfigTaskOptions) HasLocalScriptGitRef() bool {
	if o != nil && o.LocalScriptGitRef.IsSet() {
		return true
	}

	return false
}

// SetLocalScriptGitRef gets a reference to the given NullableString and assigns it to the LocalScriptGitRef field.
func (o *TaskChefBootstrapConfigTaskOptions) SetLocalScriptGitRef(v string) {
	o.LocalScriptGitRef.Set(&v)
}
// SetLocalScriptGitRefNil sets the value for LocalScriptGitRef to be an explicit nil
func (o *TaskChefBootstrapConfigTaskOptions) SetLocalScriptGitRefNil() {
	o.LocalScriptGitRef.Set(nil)
}

// UnsetLocalScriptGitRef ensures that no value is present for LocalScriptGitRef, not even an explicit nil
func (o *TaskChefBootstrapConfigTaskOptions) UnsetLocalScriptGitRef() {
	o.LocalScriptGitRef.Unset()
}

// GetChefDataKeyPath returns the ChefDataKeyPath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskChefBootstrapConfigTaskOptions) GetChefDataKeyPath() string {
	if o == nil || o.ChefDataKeyPath.Get() == nil {
		var ret string
		return ret
	}
	return *o.ChefDataKeyPath.Get()
}

// GetChefDataKeyPathOk returns a tuple with the ChefDataKeyPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskChefBootstrapConfigTaskOptions) GetChefDataKeyPathOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ChefDataKeyPath.Get(), o.ChefDataKeyPath.IsSet()
}

// HasChefDataKeyPath returns a boolean if a field has been set.
func (o *TaskChefBootstrapConfigTaskOptions) HasChefDataKeyPath() bool {
	if o != nil && o.ChefDataKeyPath.IsSet() {
		return true
	}

	return false
}

// SetChefDataKeyPath gets a reference to the given NullableString and assigns it to the ChefDataKeyPath field.
func (o *TaskChefBootstrapConfigTaskOptions) SetChefDataKeyPath(v string) {
	o.ChefDataKeyPath.Set(&v)
}
// SetChefDataKeyPathNil sets the value for ChefDataKeyPath to be an explicit nil
func (o *TaskChefBootstrapConfigTaskOptions) SetChefDataKeyPathNil() {
	o.ChefDataKeyPath.Set(nil)
}

// UnsetChefDataKeyPath ensures that no value is present for ChefDataKeyPath, not even an explicit nil
func (o *TaskChefBootstrapConfigTaskOptions) UnsetChefDataKeyPath() {
	o.ChefDataKeyPath.Unset()
}

// GetLocalScriptGitId returns the LocalScriptGitId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskChefBootstrapConfigTaskOptions) GetLocalScriptGitId() string {
	if o == nil || o.LocalScriptGitId.Get() == nil {
		var ret string
		return ret
	}
	return *o.LocalScriptGitId.Get()
}

// GetLocalScriptGitIdOk returns a tuple with the LocalScriptGitId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskChefBootstrapConfigTaskOptions) GetLocalScriptGitIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LocalScriptGitId.Get(), o.LocalScriptGitId.IsSet()
}

// HasLocalScriptGitId returns a boolean if a field has been set.
func (o *TaskChefBootstrapConfigTaskOptions) HasLocalScriptGitId() bool {
	if o != nil && o.LocalScriptGitId.IsSet() {
		return true
	}

	return false
}

// SetLocalScriptGitId gets a reference to the given NullableString and assigns it to the LocalScriptGitId field.
func (o *TaskChefBootstrapConfigTaskOptions) SetLocalScriptGitId(v string) {
	o.LocalScriptGitId.Set(&v)
}
// SetLocalScriptGitIdNil sets the value for LocalScriptGitId to be an explicit nil
func (o *TaskChefBootstrapConfigTaskOptions) SetLocalScriptGitIdNil() {
	o.LocalScriptGitId.Set(nil)
}

// UnsetLocalScriptGitId ensures that no value is present for LocalScriptGitId, not even an explicit nil
func (o *TaskChefBootstrapConfigTaskOptions) UnsetLocalScriptGitId() {
	o.LocalScriptGitId.Unset()
}

// GetPort returns the Port field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskChefBootstrapConfigTaskOptions) GetPort() string {
	if o == nil || o.Port.Get() == nil {
		var ret string
		return ret
	}
	return *o.Port.Get()
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskChefBootstrapConfigTaskOptions) GetPortOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Port.Get(), o.Port.IsSet()
}

// HasPort returns a boolean if a field has been set.
func (o *TaskChefBootstrapConfigTaskOptions) HasPort() bool {
	if o != nil && o.Port.IsSet() {
		return true
	}

	return false
}

// SetPort gets a reference to the given NullableString and assigns it to the Port field.
func (o *TaskChefBootstrapConfigTaskOptions) SetPort(v string) {
	o.Port.Set(&v)
}
// SetPortNil sets the value for Port to be an explicit nil
func (o *TaskChefBootstrapConfigTaskOptions) SetPortNil() {
	o.Port.Set(nil)
}

// UnsetPort ensures that no value is present for Port, not even an explicit nil
func (o *TaskChefBootstrapConfigTaskOptions) UnsetPort() {
	o.Port.Unset()
}

// GetChefEnv returns the ChefEnv field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskChefBootstrapConfigTaskOptions) GetChefEnv() string {
	if o == nil || o.ChefEnv.Get() == nil {
		var ret string
		return ret
	}
	return *o.ChefEnv.Get()
}

// GetChefEnvOk returns a tuple with the ChefEnv field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskChefBootstrapConfigTaskOptions) GetChefEnvOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ChefEnv.Get(), o.ChefEnv.IsSet()
}

// HasChefEnv returns a boolean if a field has been set.
func (o *TaskChefBootstrapConfigTaskOptions) HasChefEnv() bool {
	if o != nil && o.ChefEnv.IsSet() {
		return true
	}

	return false
}

// SetChefEnv gets a reference to the given NullableString and assigns it to the ChefEnv field.
func (o *TaskChefBootstrapConfigTaskOptions) SetChefEnv(v string) {
	o.ChefEnv.Set(&v)
}
// SetChefEnvNil sets the value for ChefEnv to be an explicit nil
func (o *TaskChefBootstrapConfigTaskOptions) SetChefEnvNil() {
	o.ChefEnv.Set(nil)
}

// UnsetChefEnv ensures that no value is present for ChefEnv, not even an explicit nil
func (o *TaskChefBootstrapConfigTaskOptions) UnsetChefEnv() {
	o.ChefEnv.Unset()
}

// GetChefNodeName returns the ChefNodeName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskChefBootstrapConfigTaskOptions) GetChefNodeName() string {
	if o == nil || o.ChefNodeName.Get() == nil {
		var ret string
		return ret
	}
	return *o.ChefNodeName.Get()
}

// GetChefNodeNameOk returns a tuple with the ChefNodeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskChefBootstrapConfigTaskOptions) GetChefNodeNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ChefNodeName.Get(), o.ChefNodeName.IsSet()
}

// HasChefNodeName returns a boolean if a field has been set.
func (o *TaskChefBootstrapConfigTaskOptions) HasChefNodeName() bool {
	if o != nil && o.ChefNodeName.IsSet() {
		return true
	}

	return false
}

// SetChefNodeName gets a reference to the given NullableString and assigns it to the ChefNodeName field.
func (o *TaskChefBootstrapConfigTaskOptions) SetChefNodeName(v string) {
	o.ChefNodeName.Set(&v)
}
// SetChefNodeNameNil sets the value for ChefNodeName to be an explicit nil
func (o *TaskChefBootstrapConfigTaskOptions) SetChefNodeNameNil() {
	o.ChefNodeName.Set(nil)
}

// UnsetChefNodeName ensures that no value is present for ChefNodeName, not even an explicit nil
func (o *TaskChefBootstrapConfigTaskOptions) UnsetChefNodeName() {
	o.ChefNodeName.Unset()
}

// GetHost returns the Host field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskChefBootstrapConfigTaskOptions) GetHost() string {
	if o == nil || o.Host.Get() == nil {
		var ret string
		return ret
	}
	return *o.Host.Get()
}

// GetHostOk returns a tuple with the Host field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskChefBootstrapConfigTaskOptions) GetHostOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Host.Get(), o.Host.IsSet()
}

// HasHost returns a boolean if a field has been set.
func (o *TaskChefBootstrapConfigTaskOptions) HasHost() bool {
	if o != nil && o.Host.IsSet() {
		return true
	}

	return false
}

// SetHost gets a reference to the given NullableString and assigns it to the Host field.
func (o *TaskChefBootstrapConfigTaskOptions) SetHost(v string) {
	o.Host.Set(&v)
}
// SetHostNil sets the value for Host to be an explicit nil
func (o *TaskChefBootstrapConfigTaskOptions) SetHostNil() {
	o.Host.Set(nil)
}

// UnsetHost ensures that no value is present for Host, not even an explicit nil
func (o *TaskChefBootstrapConfigTaskOptions) UnsetHost() {
	o.Host.Unset()
}

// GetSshKey returns the SshKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskChefBootstrapConfigTaskOptions) GetSshKey() string {
	if o == nil || o.SshKey.Get() == nil {
		var ret string
		return ret
	}
	return *o.SshKey.Get()
}

// GetSshKeyOk returns a tuple with the SshKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskChefBootstrapConfigTaskOptions) GetSshKeyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SshKey.Get(), o.SshKey.IsSet()
}

// HasSshKey returns a boolean if a field has been set.
func (o *TaskChefBootstrapConfigTaskOptions) HasSshKey() bool {
	if o != nil && o.SshKey.IsSet() {
		return true
	}

	return false
}

// SetSshKey gets a reference to the given NullableString and assigns it to the SshKey field.
func (o *TaskChefBootstrapConfigTaskOptions) SetSshKey(v string) {
	o.SshKey.Set(&v)
}
// SetSshKeyNil sets the value for SshKey to be an explicit nil
func (o *TaskChefBootstrapConfigTaskOptions) SetSshKeyNil() {
	o.SshKey.Set(nil)
}

// UnsetSshKey ensures that no value is present for SshKey, not even an explicit nil
func (o *TaskChefBootstrapConfigTaskOptions) UnsetSshKey() {
	o.SshKey.Unset()
}

// GetUsername returns the Username field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskChefBootstrapConfigTaskOptions) GetUsername() string {
	if o == nil || o.Username.Get() == nil {
		var ret string
		return ret
	}
	return *o.Username.Get()
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskChefBootstrapConfigTaskOptions) GetUsernameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Username.Get(), o.Username.IsSet()
}

// HasUsername returns a boolean if a field has been set.
func (o *TaskChefBootstrapConfigTaskOptions) HasUsername() bool {
	if o != nil && o.Username.IsSet() {
		return true
	}

	return false
}

// SetUsername gets a reference to the given NullableString and assigns it to the Username field.
func (o *TaskChefBootstrapConfigTaskOptions) SetUsername(v string) {
	o.Username.Set(&v)
}
// SetUsernameNil sets the value for Username to be an explicit nil
func (o *TaskChefBootstrapConfigTaskOptions) SetUsernameNil() {
	o.Username.Set(nil)
}

// UnsetUsername ensures that no value is present for Username, not even an explicit nil
func (o *TaskChefBootstrapConfigTaskOptions) UnsetUsername() {
	o.Username.Unset()
}

// GetPassword returns the Password field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskChefBootstrapConfigTaskOptions) GetPassword() string {
	if o == nil || o.Password.Get() == nil {
		var ret string
		return ret
	}
	return *o.Password.Get()
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskChefBootstrapConfigTaskOptions) GetPasswordOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Password.Get(), o.Password.IsSet()
}

// HasPassword returns a boolean if a field has been set.
func (o *TaskChefBootstrapConfigTaskOptions) HasPassword() bool {
	if o != nil && o.Password.IsSet() {
		return true
	}

	return false
}

// SetPassword gets a reference to the given NullableString and assigns it to the Password field.
func (o *TaskChefBootstrapConfigTaskOptions) SetPassword(v string) {
	o.Password.Set(&v)
}
// SetPasswordNil sets the value for Password to be an explicit nil
func (o *TaskChefBootstrapConfigTaskOptions) SetPasswordNil() {
	o.Password.Set(nil)
}

// UnsetPassword ensures that no value is present for Password, not even an explicit nil
func (o *TaskChefBootstrapConfigTaskOptions) UnsetPassword() {
	o.Password.Unset()
}

// GetPasswordHash returns the PasswordHash field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskChefBootstrapConfigTaskOptions) GetPasswordHash() string {
	if o == nil || o.PasswordHash.Get() == nil {
		var ret string
		return ret
	}
	return *o.PasswordHash.Get()
}

// GetPasswordHashOk returns a tuple with the PasswordHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskChefBootstrapConfigTaskOptions) GetPasswordHashOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PasswordHash.Get(), o.PasswordHash.IsSet()
}

// HasPasswordHash returns a boolean if a field has been set.
func (o *TaskChefBootstrapConfigTaskOptions) HasPasswordHash() bool {
	if o != nil && o.PasswordHash.IsSet() {
		return true
	}

	return false
}

// SetPasswordHash gets a reference to the given NullableString and assigns it to the PasswordHash field.
func (o *TaskChefBootstrapConfigTaskOptions) SetPasswordHash(v string) {
	o.PasswordHash.Set(&v)
}
// SetPasswordHashNil sets the value for PasswordHash to be an explicit nil
func (o *TaskChefBootstrapConfigTaskOptions) SetPasswordHashNil() {
	o.PasswordHash.Set(nil)
}

// UnsetPasswordHash ensures that no value is present for PasswordHash, not even an explicit nil
func (o *TaskChefBootstrapConfigTaskOptions) UnsetPasswordHash() {
	o.PasswordHash.Unset()
}

// GetChefAttributes returns the ChefAttributes field value if set, zero value otherwise.
func (o *TaskChefBootstrapConfigTaskOptions) GetChefAttributes() string {
	if o == nil || o.ChefAttributes == nil {
		var ret string
		return ret
	}
	return *o.ChefAttributes
}

// GetChefAttributesOk returns a tuple with the ChefAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskChefBootstrapConfigTaskOptions) GetChefAttributesOk() (*string, bool) {
	if o == nil || o.ChefAttributes == nil {
		return nil, false
	}
	return o.ChefAttributes, true
}

// HasChefAttributes returns a boolean if a field has been set.
func (o *TaskChefBootstrapConfigTaskOptions) HasChefAttributes() bool {
	if o != nil && o.ChefAttributes != nil {
		return true
	}

	return false
}

// SetChefAttributes gets a reference to the given string and assigns it to the ChefAttributes field.
func (o *TaskChefBootstrapConfigTaskOptions) SetChefAttributes(v string) {
	o.ChefAttributes = &v
}

func (o TaskChefBootstrapConfigTaskOptions) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ChefDataKey.IsSet() {
		toSerialize["chefDataKey"] = o.ChefDataKey.Get()
	}
	if o.ChefDataKeyHash.IsSet() {
		toSerialize["chefDataKeyHash"] = o.ChefDataKeyHash.Get()
	}
	if o.ChefRunList.IsSet() {
		toSerialize["chefRunList"] = o.ChefRunList.Get()
	}
	if o.LocalScriptGitRef.IsSet() {
		toSerialize["localScriptGitRef"] = o.LocalScriptGitRef.Get()
	}
	if o.ChefDataKeyPath.IsSet() {
		toSerialize["chefDataKeyPath"] = o.ChefDataKeyPath.Get()
	}
	if o.LocalScriptGitId.IsSet() {
		toSerialize["localScriptGitId"] = o.LocalScriptGitId.Get()
	}
	if o.Port.IsSet() {
		toSerialize["port"] = o.Port.Get()
	}
	if o.ChefEnv.IsSet() {
		toSerialize["chefEnv"] = o.ChefEnv.Get()
	}
	if o.ChefNodeName.IsSet() {
		toSerialize["chefNodeName"] = o.ChefNodeName.Get()
	}
	if o.Host.IsSet() {
		toSerialize["host"] = o.Host.Get()
	}
	if o.SshKey.IsSet() {
		toSerialize["sshKey"] = o.SshKey.Get()
	}
	if o.Username.IsSet() {
		toSerialize["username"] = o.Username.Get()
	}
	if o.Password.IsSet() {
		toSerialize["password"] = o.Password.Get()
	}
	if o.PasswordHash.IsSet() {
		toSerialize["passwordHash"] = o.PasswordHash.Get()
	}
	if o.ChefAttributes != nil {
		toSerialize["chefAttributes"] = o.ChefAttributes
	}
	return json.Marshal(toSerialize)
}

type NullableTaskChefBootstrapConfigTaskOptions struct {
	value *TaskChefBootstrapConfigTaskOptions
	isSet bool
}

func (v NullableTaskChefBootstrapConfigTaskOptions) Get() *TaskChefBootstrapConfigTaskOptions {
	return v.value
}

func (v *NullableTaskChefBootstrapConfigTaskOptions) Set(val *TaskChefBootstrapConfigTaskOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableTaskChefBootstrapConfigTaskOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableTaskChefBootstrapConfigTaskOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaskChefBootstrapConfigTaskOptions(val *TaskChefBootstrapConfigTaskOptions) *NullableTaskChefBootstrapConfigTaskOptions {
	return &NullableTaskChefBootstrapConfigTaskOptions{value: val, isSet: true}
}

func (v NullableTaskChefBootstrapConfigTaskOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaskChefBootstrapConfigTaskOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


