/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InlineObject124 struct for InlineObject124
type InlineObject124 struct {
	SpecTemplate *SpecTemplateUpdate `json:"specTemplate,omitempty"`
}

// NewInlineObject124 instantiates a new InlineObject124 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineObject124() *InlineObject124 {
	this := InlineObject124{}
	return &this
}

// NewInlineObject124WithDefaults instantiates a new InlineObject124 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineObject124WithDefaults() *InlineObject124 {
	this := InlineObject124{}
	return &this
}

// GetSpecTemplate returns the SpecTemplate field value if set, zero value otherwise.
func (o *InlineObject124) GetSpecTemplate() SpecTemplateUpdate {
	if o == nil || o.SpecTemplate == nil {
		var ret SpecTemplateUpdate
		return ret
	}
	return *o.SpecTemplate
}

// GetSpecTemplateOk returns a tuple with the SpecTemplate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject124) GetSpecTemplateOk() (*SpecTemplateUpdate, bool) {
	if o == nil || o.SpecTemplate == nil {
		return nil, false
	}
	return o.SpecTemplate, true
}

// HasSpecTemplate returns a boolean if a field has been set.
func (o *InlineObject124) HasSpecTemplate() bool {
	if o != nil && o.SpecTemplate != nil {
		return true
	}

	return false
}

// SetSpecTemplate gets a reference to the given SpecTemplateUpdate and assigns it to the SpecTemplate field.
func (o *InlineObject124) SetSpecTemplate(v SpecTemplateUpdate) {
	o.SpecTemplate = &v
}

func (o InlineObject124) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SpecTemplate != nil {
		toSerialize["specTemplate"] = o.SpecTemplate
	}
	return json.Marshal(toSerialize)
}

type NullableInlineObject124 struct {
	value *InlineObject124
	isSet bool
}

func (v NullableInlineObject124) Get() *InlineObject124 {
	return v.value
}

func (v *NullableInlineObject124) Set(val *InlineObject124) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineObject124) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineObject124) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineObject124(val *InlineObject124) *NullableInlineObject124 {
	return &NullableInlineObject124{value: val, isSet: true}
}

func (v NullableInlineObject124) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineObject124) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


