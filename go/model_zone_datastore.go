/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ZoneDatastore struct for ZoneDatastore
type ZoneDatastore struct {
	Id *int64 `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Zone *InlineResponse20040AppDeployInstance `json:"zone,omitempty"`
	Type *string `json:"type,omitempty"`
	FreeSpace *int64 `json:"freeSpace,omitempty"`
	Online *bool `json:"online,omitempty"`
	Active *bool `json:"active,omitempty"`
	Visibility *string `json:"visibility,omitempty"`
	Tenants []ZoneDatastoreTenants `json:"tenants,omitempty"`
	ResourcePermission *ResourcePermissions `json:"resourcePermission,omitempty"`
}

// NewZoneDatastore instantiates a new ZoneDatastore object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewZoneDatastore() *ZoneDatastore {
	this := ZoneDatastore{}
	return &this
}

// NewZoneDatastoreWithDefaults instantiates a new ZoneDatastore object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewZoneDatastoreWithDefaults() *ZoneDatastore {
	this := ZoneDatastore{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ZoneDatastore) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneDatastore) GetIdOk() (*int64, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ZoneDatastore) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *ZoneDatastore) SetId(v int64) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ZoneDatastore) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneDatastore) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ZoneDatastore) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ZoneDatastore) SetName(v string) {
	o.Name = &v
}

// GetZone returns the Zone field value if set, zero value otherwise.
func (o *ZoneDatastore) GetZone() InlineResponse20040AppDeployInstance {
	if o == nil || o.Zone == nil {
		var ret InlineResponse20040AppDeployInstance
		return ret
	}
	return *o.Zone
}

// GetZoneOk returns a tuple with the Zone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneDatastore) GetZoneOk() (*InlineResponse20040AppDeployInstance, bool) {
	if o == nil || o.Zone == nil {
		return nil, false
	}
	return o.Zone, true
}

// HasZone returns a boolean if a field has been set.
func (o *ZoneDatastore) HasZone() bool {
	if o != nil && o.Zone != nil {
		return true
	}

	return false
}

// SetZone gets a reference to the given InlineResponse20040AppDeployInstance and assigns it to the Zone field.
func (o *ZoneDatastore) SetZone(v InlineResponse20040AppDeployInstance) {
	o.Zone = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ZoneDatastore) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneDatastore) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ZoneDatastore) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ZoneDatastore) SetType(v string) {
	o.Type = &v
}

// GetFreeSpace returns the FreeSpace field value if set, zero value otherwise.
func (o *ZoneDatastore) GetFreeSpace() int64 {
	if o == nil || o.FreeSpace == nil {
		var ret int64
		return ret
	}
	return *o.FreeSpace
}

// GetFreeSpaceOk returns a tuple with the FreeSpace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneDatastore) GetFreeSpaceOk() (*int64, bool) {
	if o == nil || o.FreeSpace == nil {
		return nil, false
	}
	return o.FreeSpace, true
}

// HasFreeSpace returns a boolean if a field has been set.
func (o *ZoneDatastore) HasFreeSpace() bool {
	if o != nil && o.FreeSpace != nil {
		return true
	}

	return false
}

// SetFreeSpace gets a reference to the given int64 and assigns it to the FreeSpace field.
func (o *ZoneDatastore) SetFreeSpace(v int64) {
	o.FreeSpace = &v
}

// GetOnline returns the Online field value if set, zero value otherwise.
func (o *ZoneDatastore) GetOnline() bool {
	if o == nil || o.Online == nil {
		var ret bool
		return ret
	}
	return *o.Online
}

// GetOnlineOk returns a tuple with the Online field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneDatastore) GetOnlineOk() (*bool, bool) {
	if o == nil || o.Online == nil {
		return nil, false
	}
	return o.Online, true
}

// HasOnline returns a boolean if a field has been set.
func (o *ZoneDatastore) HasOnline() bool {
	if o != nil && o.Online != nil {
		return true
	}

	return false
}

// SetOnline gets a reference to the given bool and assigns it to the Online field.
func (o *ZoneDatastore) SetOnline(v bool) {
	o.Online = &v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *ZoneDatastore) GetActive() bool {
	if o == nil || o.Active == nil {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneDatastore) GetActiveOk() (*bool, bool) {
	if o == nil || o.Active == nil {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *ZoneDatastore) HasActive() bool {
	if o != nil && o.Active != nil {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *ZoneDatastore) SetActive(v bool) {
	o.Active = &v
}

// GetVisibility returns the Visibility field value if set, zero value otherwise.
func (o *ZoneDatastore) GetVisibility() string {
	if o == nil || o.Visibility == nil {
		var ret string
		return ret
	}
	return *o.Visibility
}

// GetVisibilityOk returns a tuple with the Visibility field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneDatastore) GetVisibilityOk() (*string, bool) {
	if o == nil || o.Visibility == nil {
		return nil, false
	}
	return o.Visibility, true
}

// HasVisibility returns a boolean if a field has been set.
func (o *ZoneDatastore) HasVisibility() bool {
	if o != nil && o.Visibility != nil {
		return true
	}

	return false
}

// SetVisibility gets a reference to the given string and assigns it to the Visibility field.
func (o *ZoneDatastore) SetVisibility(v string) {
	o.Visibility = &v
}

// GetTenants returns the Tenants field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ZoneDatastore) GetTenants() []ZoneDatastoreTenants {
	if o == nil  {
		var ret []ZoneDatastoreTenants
		return ret
	}
	return o.Tenants
}

// GetTenantsOk returns a tuple with the Tenants field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ZoneDatastore) GetTenantsOk() (*[]ZoneDatastoreTenants, bool) {
	if o == nil || o.Tenants == nil {
		return nil, false
	}
	return &o.Tenants, true
}

// HasTenants returns a boolean if a field has been set.
func (o *ZoneDatastore) HasTenants() bool {
	if o != nil && o.Tenants != nil {
		return true
	}

	return false
}

// SetTenants gets a reference to the given []ZoneDatastoreTenants and assigns it to the Tenants field.
func (o *ZoneDatastore) SetTenants(v []ZoneDatastoreTenants) {
	o.Tenants = v
}

// GetResourcePermission returns the ResourcePermission field value if set, zero value otherwise.
func (o *ZoneDatastore) GetResourcePermission() ResourcePermissions {
	if o == nil || o.ResourcePermission == nil {
		var ret ResourcePermissions
		return ret
	}
	return *o.ResourcePermission
}

// GetResourcePermissionOk returns a tuple with the ResourcePermission field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneDatastore) GetResourcePermissionOk() (*ResourcePermissions, bool) {
	if o == nil || o.ResourcePermission == nil {
		return nil, false
	}
	return o.ResourcePermission, true
}

// HasResourcePermission returns a boolean if a field has been set.
func (o *ZoneDatastore) HasResourcePermission() bool {
	if o != nil && o.ResourcePermission != nil {
		return true
	}

	return false
}

// SetResourcePermission gets a reference to the given ResourcePermissions and assigns it to the ResourcePermission field.
func (o *ZoneDatastore) SetResourcePermission(v ResourcePermissions) {
	o.ResourcePermission = &v
}

func (o ZoneDatastore) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Zone != nil {
		toSerialize["zone"] = o.Zone
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.FreeSpace != nil {
		toSerialize["freeSpace"] = o.FreeSpace
	}
	if o.Online != nil {
		toSerialize["online"] = o.Online
	}
	if o.Active != nil {
		toSerialize["active"] = o.Active
	}
	if o.Visibility != nil {
		toSerialize["visibility"] = o.Visibility
	}
	if o.Tenants != nil {
		toSerialize["tenants"] = o.Tenants
	}
	if o.ResourcePermission != nil {
		toSerialize["resourcePermission"] = o.ResourcePermission
	}
	return json.Marshal(toSerialize)
}

type NullableZoneDatastore struct {
	value *ZoneDatastore
	isSet bool
}

func (v NullableZoneDatastore) Get() *ZoneDatastore {
	return v.value
}

func (v *NullableZoneDatastore) Set(val *ZoneDatastore) {
	v.value = val
	v.isSet = true
}

func (v NullableZoneDatastore) IsSet() bool {
	return v.isSet
}

func (v *NullableZoneDatastore) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableZoneDatastore(val *ZoneDatastore) *NullableZoneDatastore {
	return &NullableZoneDatastore{value: val, isSet: true}
}

func (v NullableZoneDatastore) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableZoneDatastore) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


