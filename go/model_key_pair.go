/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// KeyPair struct for KeyPair
type KeyPair struct {
	Id *int64 `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	AccountId *int64 `json:"accountId,omitempty"`
	PublicKey NullableString `json:"publicKey,omitempty"`
	HasPrivateKey *bool `json:"hasPrivateKey,omitempty"`
	PrivateKeyHash NullableString `json:"privateKeyHash,omitempty"`
	// Only present in response to generate
	PrivateKey NullableString `json:"privateKey,omitempty"`
	Fingerprint NullableString `json:"fingerprint,omitempty"`
	DateCreated *time.Time `json:"dateCreated,omitempty"`
	LastUpdated *time.Time `json:"lastUpdated,omitempty"`
}

// NewKeyPair instantiates a new KeyPair object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeyPair() *KeyPair {
	this := KeyPair{}
	return &this
}

// NewKeyPairWithDefaults instantiates a new KeyPair object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeyPairWithDefaults() *KeyPair {
	this := KeyPair{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *KeyPair) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyPair) GetIdOk() (*int64, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *KeyPair) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *KeyPair) SetId(v int64) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *KeyPair) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyPair) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *KeyPair) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *KeyPair) SetName(v string) {
	o.Name = &v
}

// GetAccountId returns the AccountId field value if set, zero value otherwise.
func (o *KeyPair) GetAccountId() int64 {
	if o == nil || o.AccountId == nil {
		var ret int64
		return ret
	}
	return *o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyPair) GetAccountIdOk() (*int64, bool) {
	if o == nil || o.AccountId == nil {
		return nil, false
	}
	return o.AccountId, true
}

// HasAccountId returns a boolean if a field has been set.
func (o *KeyPair) HasAccountId() bool {
	if o != nil && o.AccountId != nil {
		return true
	}

	return false
}

// SetAccountId gets a reference to the given int64 and assigns it to the AccountId field.
func (o *KeyPair) SetAccountId(v int64) {
	o.AccountId = &v
}

// GetPublicKey returns the PublicKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KeyPair) GetPublicKey() string {
	if o == nil || o.PublicKey.Get() == nil {
		var ret string
		return ret
	}
	return *o.PublicKey.Get()
}

// GetPublicKeyOk returns a tuple with the PublicKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KeyPair) GetPublicKeyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PublicKey.Get(), o.PublicKey.IsSet()
}

// HasPublicKey returns a boolean if a field has been set.
func (o *KeyPair) HasPublicKey() bool {
	if o != nil && o.PublicKey.IsSet() {
		return true
	}

	return false
}

// SetPublicKey gets a reference to the given NullableString and assigns it to the PublicKey field.
func (o *KeyPair) SetPublicKey(v string) {
	o.PublicKey.Set(&v)
}
// SetPublicKeyNil sets the value for PublicKey to be an explicit nil
func (o *KeyPair) SetPublicKeyNil() {
	o.PublicKey.Set(nil)
}

// UnsetPublicKey ensures that no value is present for PublicKey, not even an explicit nil
func (o *KeyPair) UnsetPublicKey() {
	o.PublicKey.Unset()
}

// GetHasPrivateKey returns the HasPrivateKey field value if set, zero value otherwise.
func (o *KeyPair) GetHasPrivateKey() bool {
	if o == nil || o.HasPrivateKey == nil {
		var ret bool
		return ret
	}
	return *o.HasPrivateKey
}

// GetHasPrivateKeyOk returns a tuple with the HasPrivateKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyPair) GetHasPrivateKeyOk() (*bool, bool) {
	if o == nil || o.HasPrivateKey == nil {
		return nil, false
	}
	return o.HasPrivateKey, true
}

// HasHasPrivateKey returns a boolean if a field has been set.
func (o *KeyPair) HasHasPrivateKey() bool {
	if o != nil && o.HasPrivateKey != nil {
		return true
	}

	return false
}

// SetHasPrivateKey gets a reference to the given bool and assigns it to the HasPrivateKey field.
func (o *KeyPair) SetHasPrivateKey(v bool) {
	o.HasPrivateKey = &v
}

// GetPrivateKeyHash returns the PrivateKeyHash field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KeyPair) GetPrivateKeyHash() string {
	if o == nil || o.PrivateKeyHash.Get() == nil {
		var ret string
		return ret
	}
	return *o.PrivateKeyHash.Get()
}

// GetPrivateKeyHashOk returns a tuple with the PrivateKeyHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KeyPair) GetPrivateKeyHashOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PrivateKeyHash.Get(), o.PrivateKeyHash.IsSet()
}

// HasPrivateKeyHash returns a boolean if a field has been set.
func (o *KeyPair) HasPrivateKeyHash() bool {
	if o != nil && o.PrivateKeyHash.IsSet() {
		return true
	}

	return false
}

// SetPrivateKeyHash gets a reference to the given NullableString and assigns it to the PrivateKeyHash field.
func (o *KeyPair) SetPrivateKeyHash(v string) {
	o.PrivateKeyHash.Set(&v)
}
// SetPrivateKeyHashNil sets the value for PrivateKeyHash to be an explicit nil
func (o *KeyPair) SetPrivateKeyHashNil() {
	o.PrivateKeyHash.Set(nil)
}

// UnsetPrivateKeyHash ensures that no value is present for PrivateKeyHash, not even an explicit nil
func (o *KeyPair) UnsetPrivateKeyHash() {
	o.PrivateKeyHash.Unset()
}

// GetPrivateKey returns the PrivateKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KeyPair) GetPrivateKey() string {
	if o == nil || o.PrivateKey.Get() == nil {
		var ret string
		return ret
	}
	return *o.PrivateKey.Get()
}

// GetPrivateKeyOk returns a tuple with the PrivateKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KeyPair) GetPrivateKeyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PrivateKey.Get(), o.PrivateKey.IsSet()
}

// HasPrivateKey returns a boolean if a field has been set.
func (o *KeyPair) HasPrivateKey() bool {
	if o != nil && o.PrivateKey.IsSet() {
		return true
	}

	return false
}

// SetPrivateKey gets a reference to the given NullableString and assigns it to the PrivateKey field.
func (o *KeyPair) SetPrivateKey(v string) {
	o.PrivateKey.Set(&v)
}
// SetPrivateKeyNil sets the value for PrivateKey to be an explicit nil
func (o *KeyPair) SetPrivateKeyNil() {
	o.PrivateKey.Set(nil)
}

// UnsetPrivateKey ensures that no value is present for PrivateKey, not even an explicit nil
func (o *KeyPair) UnsetPrivateKey() {
	o.PrivateKey.Unset()
}

// GetFingerprint returns the Fingerprint field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KeyPair) GetFingerprint() string {
	if o == nil || o.Fingerprint.Get() == nil {
		var ret string
		return ret
	}
	return *o.Fingerprint.Get()
}

// GetFingerprintOk returns a tuple with the Fingerprint field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KeyPair) GetFingerprintOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Fingerprint.Get(), o.Fingerprint.IsSet()
}

// HasFingerprint returns a boolean if a field has been set.
func (o *KeyPair) HasFingerprint() bool {
	if o != nil && o.Fingerprint.IsSet() {
		return true
	}

	return false
}

// SetFingerprint gets a reference to the given NullableString and assigns it to the Fingerprint field.
func (o *KeyPair) SetFingerprint(v string) {
	o.Fingerprint.Set(&v)
}
// SetFingerprintNil sets the value for Fingerprint to be an explicit nil
func (o *KeyPair) SetFingerprintNil() {
	o.Fingerprint.Set(nil)
}

// UnsetFingerprint ensures that no value is present for Fingerprint, not even an explicit nil
func (o *KeyPair) UnsetFingerprint() {
	o.Fingerprint.Unset()
}

// GetDateCreated returns the DateCreated field value if set, zero value otherwise.
func (o *KeyPair) GetDateCreated() time.Time {
	if o == nil || o.DateCreated == nil {
		var ret time.Time
		return ret
	}
	return *o.DateCreated
}

// GetDateCreatedOk returns a tuple with the DateCreated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyPair) GetDateCreatedOk() (*time.Time, bool) {
	if o == nil || o.DateCreated == nil {
		return nil, false
	}
	return o.DateCreated, true
}

// HasDateCreated returns a boolean if a field has been set.
func (o *KeyPair) HasDateCreated() bool {
	if o != nil && o.DateCreated != nil {
		return true
	}

	return false
}

// SetDateCreated gets a reference to the given time.Time and assigns it to the DateCreated field.
func (o *KeyPair) SetDateCreated(v time.Time) {
	o.DateCreated = &v
}

// GetLastUpdated returns the LastUpdated field value if set, zero value otherwise.
func (o *KeyPair) GetLastUpdated() time.Time {
	if o == nil || o.LastUpdated == nil {
		var ret time.Time
		return ret
	}
	return *o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyPair) GetLastUpdatedOk() (*time.Time, bool) {
	if o == nil || o.LastUpdated == nil {
		return nil, false
	}
	return o.LastUpdated, true
}

// HasLastUpdated returns a boolean if a field has been set.
func (o *KeyPair) HasLastUpdated() bool {
	if o != nil && o.LastUpdated != nil {
		return true
	}

	return false
}

// SetLastUpdated gets a reference to the given time.Time and assigns it to the LastUpdated field.
func (o *KeyPair) SetLastUpdated(v time.Time) {
	o.LastUpdated = &v
}

func (o KeyPair) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.AccountId != nil {
		toSerialize["accountId"] = o.AccountId
	}
	if o.PublicKey.IsSet() {
		toSerialize["publicKey"] = o.PublicKey.Get()
	}
	if o.HasPrivateKey != nil {
		toSerialize["hasPrivateKey"] = o.HasPrivateKey
	}
	if o.PrivateKeyHash.IsSet() {
		toSerialize["privateKeyHash"] = o.PrivateKeyHash.Get()
	}
	if o.PrivateKey.IsSet() {
		toSerialize["privateKey"] = o.PrivateKey.Get()
	}
	if o.Fingerprint.IsSet() {
		toSerialize["fingerprint"] = o.Fingerprint.Get()
	}
	if o.DateCreated != nil {
		toSerialize["dateCreated"] = o.DateCreated
	}
	if o.LastUpdated != nil {
		toSerialize["lastUpdated"] = o.LastUpdated
	}
	return json.Marshal(toSerialize)
}

type NullableKeyPair struct {
	value *KeyPair
	isSet bool
}

func (v NullableKeyPair) Get() *KeyPair {
	return v.value
}

func (v *NullableKeyPair) Set(val *KeyPair) {
	v.value = val
	v.isSet = true
}

func (v NullableKeyPair) IsSet() bool {
	return v.isSet
}

func (v *NullableKeyPair) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeyPair(val *KeyPair) *NullableKeyPair {
	return &NullableKeyPair{value: val, isSet: true}
}

func (v NullableKeyPair) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeyPair) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


