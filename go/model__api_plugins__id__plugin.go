/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ApiPluginsIdPlugin struct for ApiPluginsIdPlugin
type ApiPluginsIdPlugin struct {
	// Can be used to disable the plugin
	Enabled *bool `json:"enabled,omitempty"`
	// Configuration object that contains settings for the applicable option types.
	Config *map[string]interface{} `json:"config,omitempty"`
}

// NewApiPluginsIdPlugin instantiates a new ApiPluginsIdPlugin object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiPluginsIdPlugin() *ApiPluginsIdPlugin {
	this := ApiPluginsIdPlugin{}
	return &this
}

// NewApiPluginsIdPluginWithDefaults instantiates a new ApiPluginsIdPlugin object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiPluginsIdPluginWithDefaults() *ApiPluginsIdPlugin {
	this := ApiPluginsIdPlugin{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *ApiPluginsIdPlugin) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiPluginsIdPlugin) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *ApiPluginsIdPlugin) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *ApiPluginsIdPlugin) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *ApiPluginsIdPlugin) GetConfig() map[string]interface{} {
	if o == nil || o.Config == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiPluginsIdPlugin) GetConfigOk() (*map[string]interface{}, bool) {
	if o == nil || o.Config == nil {
		return nil, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *ApiPluginsIdPlugin) HasConfig() bool {
	if o != nil && o.Config != nil {
		return true
	}

	return false
}

// SetConfig gets a reference to the given map[string]interface{} and assigns it to the Config field.
func (o *ApiPluginsIdPlugin) SetConfig(v map[string]interface{}) {
	o.Config = &v
}

func (o ApiPluginsIdPlugin) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Enabled != nil {
		toSerialize["enabled"] = o.Enabled
	}
	if o.Config != nil {
		toSerialize["config"] = o.Config
	}
	return json.Marshal(toSerialize)
}

type NullableApiPluginsIdPlugin struct {
	value *ApiPluginsIdPlugin
	isSet bool
}

func (v NullableApiPluginsIdPlugin) Get() *ApiPluginsIdPlugin {
	return v.value
}

func (v *NullableApiPluginsIdPlugin) Set(val *ApiPluginsIdPlugin) {
	v.value = val
	v.isSet = true
}

func (v NullableApiPluginsIdPlugin) IsSet() bool {
	return v.isSet
}

func (v *NullableApiPluginsIdPlugin) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiPluginsIdPlugin(val *ApiPluginsIdPlugin) *NullableApiPluginsIdPlugin {
	return &NullableApiPluginsIdPlugin{value: val, isSet: true}
}

func (v NullableApiPluginsIdPlugin) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiPluginsIdPlugin) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


