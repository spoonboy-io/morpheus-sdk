/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// BillingSnapshots struct for BillingSnapshots
type BillingSnapshots struct {
	Price *float32 `json:"price,omitempty"`
	Cost *float32 `json:"cost,omitempty"`
	Snapshots *[]map[string]interface{} `json:"snapshots,omitempty"`
	Count *int64 `json:"count,omitempty"`
}

// NewBillingSnapshots instantiates a new BillingSnapshots object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBillingSnapshots() *BillingSnapshots {
	this := BillingSnapshots{}
	return &this
}

// NewBillingSnapshotsWithDefaults instantiates a new BillingSnapshots object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBillingSnapshotsWithDefaults() *BillingSnapshots {
	this := BillingSnapshots{}
	return &this
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *BillingSnapshots) GetPrice() float32 {
	if o == nil || o.Price == nil {
		var ret float32
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingSnapshots) GetPriceOk() (*float32, bool) {
	if o == nil || o.Price == nil {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *BillingSnapshots) HasPrice() bool {
	if o != nil && o.Price != nil {
		return true
	}

	return false
}

// SetPrice gets a reference to the given float32 and assigns it to the Price field.
func (o *BillingSnapshots) SetPrice(v float32) {
	o.Price = &v
}

// GetCost returns the Cost field value if set, zero value otherwise.
func (o *BillingSnapshots) GetCost() float32 {
	if o == nil || o.Cost == nil {
		var ret float32
		return ret
	}
	return *o.Cost
}

// GetCostOk returns a tuple with the Cost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingSnapshots) GetCostOk() (*float32, bool) {
	if o == nil || o.Cost == nil {
		return nil, false
	}
	return o.Cost, true
}

// HasCost returns a boolean if a field has been set.
func (o *BillingSnapshots) HasCost() bool {
	if o != nil && o.Cost != nil {
		return true
	}

	return false
}

// SetCost gets a reference to the given float32 and assigns it to the Cost field.
func (o *BillingSnapshots) SetCost(v float32) {
	o.Cost = &v
}

// GetSnapshots returns the Snapshots field value if set, zero value otherwise.
func (o *BillingSnapshots) GetSnapshots() []map[string]interface{} {
	if o == nil || o.Snapshots == nil {
		var ret []map[string]interface{}
		return ret
	}
	return *o.Snapshots
}

// GetSnapshotsOk returns a tuple with the Snapshots field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingSnapshots) GetSnapshotsOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.Snapshots == nil {
		return nil, false
	}
	return o.Snapshots, true
}

// HasSnapshots returns a boolean if a field has been set.
func (o *BillingSnapshots) HasSnapshots() bool {
	if o != nil && o.Snapshots != nil {
		return true
	}

	return false
}

// SetSnapshots gets a reference to the given []map[string]interface{} and assigns it to the Snapshots field.
func (o *BillingSnapshots) SetSnapshots(v []map[string]interface{}) {
	o.Snapshots = &v
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *BillingSnapshots) GetCount() int64 {
	if o == nil || o.Count == nil {
		var ret int64
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingSnapshots) GetCountOk() (*int64, bool) {
	if o == nil || o.Count == nil {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *BillingSnapshots) HasCount() bool {
	if o != nil && o.Count != nil {
		return true
	}

	return false
}

// SetCount gets a reference to the given int64 and assigns it to the Count field.
func (o *BillingSnapshots) SetCount(v int64) {
	o.Count = &v
}

func (o BillingSnapshots) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Price != nil {
		toSerialize["price"] = o.Price
	}
	if o.Cost != nil {
		toSerialize["cost"] = o.Cost
	}
	if o.Snapshots != nil {
		toSerialize["snapshots"] = o.Snapshots
	}
	if o.Count != nil {
		toSerialize["count"] = o.Count
	}
	return json.Marshal(toSerialize)
}

type NullableBillingSnapshots struct {
	value *BillingSnapshots
	isSet bool
}

func (v NullableBillingSnapshots) Get() *BillingSnapshots {
	return v.value
}

func (v *NullableBillingSnapshots) Set(val *BillingSnapshots) {
	v.value = val
	v.isSet = true
}

func (v NullableBillingSnapshots) IsSet() bool {
	return v.isSet
}

func (v *NullableBillingSnapshots) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBillingSnapshots(val *BillingSnapshots) *NullableBillingSnapshots {
	return &NullableBillingSnapshots{value: val, isSet: true}
}

func (v NullableBillingSnapshots) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBillingSnapshots) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


