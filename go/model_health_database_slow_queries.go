/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// HealthDatabaseSlowQueries struct for HealthDatabaseSlowQueries
type HealthDatabaseSlowQueries struct {
	Count *int64 `json:"count,omitempty"`
	Time *int64 `json:"time,omitempty"`
	Query *string `json:"query,omitempty"`
}

// NewHealthDatabaseSlowQueries instantiates a new HealthDatabaseSlowQueries object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHealthDatabaseSlowQueries() *HealthDatabaseSlowQueries {
	this := HealthDatabaseSlowQueries{}
	return &this
}

// NewHealthDatabaseSlowQueriesWithDefaults instantiates a new HealthDatabaseSlowQueries object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHealthDatabaseSlowQueriesWithDefaults() *HealthDatabaseSlowQueries {
	this := HealthDatabaseSlowQueries{}
	return &this
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *HealthDatabaseSlowQueries) GetCount() int64 {
	if o == nil || o.Count == nil {
		var ret int64
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HealthDatabaseSlowQueries) GetCountOk() (*int64, bool) {
	if o == nil || o.Count == nil {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *HealthDatabaseSlowQueries) HasCount() bool {
	if o != nil && o.Count != nil {
		return true
	}

	return false
}

// SetCount gets a reference to the given int64 and assigns it to the Count field.
func (o *HealthDatabaseSlowQueries) SetCount(v int64) {
	o.Count = &v
}

// GetTime returns the Time field value if set, zero value otherwise.
func (o *HealthDatabaseSlowQueries) GetTime() int64 {
	if o == nil || o.Time == nil {
		var ret int64
		return ret
	}
	return *o.Time
}

// GetTimeOk returns a tuple with the Time field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HealthDatabaseSlowQueries) GetTimeOk() (*int64, bool) {
	if o == nil || o.Time == nil {
		return nil, false
	}
	return o.Time, true
}

// HasTime returns a boolean if a field has been set.
func (o *HealthDatabaseSlowQueries) HasTime() bool {
	if o != nil && o.Time != nil {
		return true
	}

	return false
}

// SetTime gets a reference to the given int64 and assigns it to the Time field.
func (o *HealthDatabaseSlowQueries) SetTime(v int64) {
	o.Time = &v
}

// GetQuery returns the Query field value if set, zero value otherwise.
func (o *HealthDatabaseSlowQueries) GetQuery() string {
	if o == nil || o.Query == nil {
		var ret string
		return ret
	}
	return *o.Query
}

// GetQueryOk returns a tuple with the Query field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HealthDatabaseSlowQueries) GetQueryOk() (*string, bool) {
	if o == nil || o.Query == nil {
		return nil, false
	}
	return o.Query, true
}

// HasQuery returns a boolean if a field has been set.
func (o *HealthDatabaseSlowQueries) HasQuery() bool {
	if o != nil && o.Query != nil {
		return true
	}

	return false
}

// SetQuery gets a reference to the given string and assigns it to the Query field.
func (o *HealthDatabaseSlowQueries) SetQuery(v string) {
	o.Query = &v
}

func (o HealthDatabaseSlowQueries) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Count != nil {
		toSerialize["count"] = o.Count
	}
	if o.Time != nil {
		toSerialize["time"] = o.Time
	}
	if o.Query != nil {
		toSerialize["query"] = o.Query
	}
	return json.Marshal(toSerialize)
}

type NullableHealthDatabaseSlowQueries struct {
	value *HealthDatabaseSlowQueries
	isSet bool
}

func (v NullableHealthDatabaseSlowQueries) Get() *HealthDatabaseSlowQueries {
	return v.value
}

func (v *NullableHealthDatabaseSlowQueries) Set(val *HealthDatabaseSlowQueries) {
	v.value = val
	v.isSet = true
}

func (v NullableHealthDatabaseSlowQueries) IsSet() bool {
	return v.isSet
}

func (v *NullableHealthDatabaseSlowQueries) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHealthDatabaseSlowQueries(val *HealthDatabaseSlowQueries) *NullableHealthDatabaseSlowQueries {
	return &NullableHealthDatabaseSlowQueries{value: val, isSet: true}
}

func (v NullableHealthDatabaseSlowQueries) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHealthDatabaseSlowQueries) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


