/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InlineResponse200108 struct for InlineResponse200108
type InlineResponse200108 struct {
	NetworkFloatingIp *InlineResponse200108NetworkFloatingIp `json:"networkFloatingIp,omitempty"`
}

// NewInlineResponse200108 instantiates a new InlineResponse200108 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse200108() *InlineResponse200108 {
	this := InlineResponse200108{}
	return &this
}

// NewInlineResponse200108WithDefaults instantiates a new InlineResponse200108 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse200108WithDefaults() *InlineResponse200108 {
	this := InlineResponse200108{}
	return &this
}

// GetNetworkFloatingIp returns the NetworkFloatingIp field value if set, zero value otherwise.
func (o *InlineResponse200108) GetNetworkFloatingIp() InlineResponse200108NetworkFloatingIp {
	if o == nil || o.NetworkFloatingIp == nil {
		var ret InlineResponse200108NetworkFloatingIp
		return ret
	}
	return *o.NetworkFloatingIp
}

// GetNetworkFloatingIpOk returns a tuple with the NetworkFloatingIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200108) GetNetworkFloatingIpOk() (*InlineResponse200108NetworkFloatingIp, bool) {
	if o == nil || o.NetworkFloatingIp == nil {
		return nil, false
	}
	return o.NetworkFloatingIp, true
}

// HasNetworkFloatingIp returns a boolean if a field has been set.
func (o *InlineResponse200108) HasNetworkFloatingIp() bool {
	if o != nil && o.NetworkFloatingIp != nil {
		return true
	}

	return false
}

// SetNetworkFloatingIp gets a reference to the given InlineResponse200108NetworkFloatingIp and assigns it to the NetworkFloatingIp field.
func (o *InlineResponse200108) SetNetworkFloatingIp(v InlineResponse200108NetworkFloatingIp) {
	o.NetworkFloatingIp = &v
}

func (o InlineResponse200108) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.NetworkFloatingIp != nil {
		toSerialize["networkFloatingIp"] = o.NetworkFloatingIp
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse200108 struct {
	value *InlineResponse200108
	isSet bool
}

func (v NullableInlineResponse200108) Get() *InlineResponse200108 {
	return v.value
}

func (v *NullableInlineResponse200108) Set(val *InlineResponse200108) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse200108) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse200108) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse200108(val *InlineResponse200108) *NullableInlineResponse200108 {
	return &NullableInlineResponse200108{value: val, isSet: true}
}

func (v NullableInlineResponse200108) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse200108) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


