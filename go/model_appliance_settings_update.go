/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 6.1.1
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ApplianceSettingsUpdate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApplianceSettingsUpdate{}

// ApplianceSettingsUpdate struct for ApplianceSettingsUpdate
type ApplianceSettingsUpdate struct {
	// Appliance URL
	ApplianceUrl *string `json:"applianceUrl,omitempty"`
	// Internal Appliance URL (PXE)
	InternalApplianceUrl NullableString `json:"internalApplianceUrl,omitempty"`
	// API Allowed Origins
	CorsAllowed NullableString `json:"corsAllowed,omitempty"`
	// Registration enabled (true, false)
	RegistrationEnabled *bool `json:"registrationEnabled,omitempty"`
	// Default tenant role ID
	DefaultRoleId *int64 `json:"defaultRoleId,omitempty"`
	// Default user role ID
	DefaultUserRoleId *int64 `json:"defaultUserRoleId,omitempty"`
	// Docker privileged mode (true, false)
	DockerPrivilegedMode *bool `json:"dockerPrivilegedMode,omitempty"`
	// Min Password Length
	PasswordMinLength *string `json:"passwordMinLength,omitempty"`
	// Min Password Uppercase
	PasswordMinUpperCase *string `json:"passwordMinUpperCase,omitempty"`
	// Min Password Numbers
	PasswordMinNumbers *string `json:"passwordMinNumbers,omitempty"`
	// Min Password Symbols
	PasswordMinSymbols *string `json:"passwordMinSymbols,omitempty"`
	// User Browser Session Timeout (Minutes)
	UserBrowserSessionTimeout *string `json:"userBrowserSessionTimeout,omitempty"`
	// User Browser Session Warning (Minutes)
	UserBrowserSessionWarning *string `json:"userBrowserSessionWarning,omitempty"`
	// Expire password after days. Setting to 0 disabled this feature
	ExpirePwdDays *int64 `json:"expirePwdDays,omitempty"`
	// Disable user after number of attempts. Set to 0 to disable this feature
	DisableAfterAttempts *int64 `json:"disableAfterAttempts,omitempty"`
	// Disable user if inactive for specified days. Set to 0 to disable this feature
	DisableAfterDaysInactive *int64 `json:"disableAfterDaysInactive,omitempty"`
	// Send warning email number of days in advance before deactivating. Set to 0 to disable this feature
	WarnUserDaysBefore *int64 `json:"warnUserDaysBefore,omitempty"`
	// From email address
	SmtpMailFrom *string `json:"smtpMailFrom,omitempty"`
	// SMTP server / host
	SmtpServer *string `json:"smtpServer,omitempty"`
	// SMTP port
	SmtpPort *int64 `json:"smtpPort,omitempty"`
	// Use SSL for SMTP connection
	SmtpSSL *bool `json:"smtpSSL,omitempty"`
	// Use TLS for SMTP connections
	SmtpTLS *bool `json:"smtpTLS,omitempty"`
	// SMTP username
	SmtpUser *string `json:"smtpUser,omitempty"`
	// SMTP password
	SmtpPassword *string `json:"smtpPassword,omitempty"`
	// Proxy host
	ProxyHost NullableString `json:"proxyHost,omitempty"`
	// Proxy port
	ProxyPort NullableString `json:"proxyPort,omitempty"`
	// Proxy username
	ProxyUser *string `json:"proxyUser,omitempty"`
	// Proxy password
	ProxyPassword *string `json:"proxyPassword,omitempty"`
	// Proxy domain
	ProxyDomain NullableString `json:"proxyDomain,omitempty"`
	// Proxy workstation
	ProxyWorkstation NullableString `json:"proxyWorkstation,omitempty"`
	// Currency provider
	CurrencyProvider *string `json:"currencyProvider,omitempty"`
	// Currency provider API key
	CurrencyKey NullableString `json:"currencyKey,omitempty"`
	// Set all cloud types enabled status on, overrides enableZoneTypes and disableZoneTypes parameters
	EnableAllZoneTypes *bool `json:"enableAllZoneTypes,omitempty"`
	// List of cloud type IDs to set enabled status on
	EnableZoneTypes []int64 `json:"enableZoneTypes,omitempty"`
	// List of cloud type IDs to set enabled status off
	DisableZoneTypes []int64 `json:"disableZoneTypes,omitempty"`
	// Set all cloud types enabled status off, can be used in conjunction with enableZoneTypes
	DisableAllZoneTypes *bool `json:"disableAllZoneTypes,omitempty"`
}

// NewApplianceSettingsUpdate instantiates a new ApplianceSettingsUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApplianceSettingsUpdate() *ApplianceSettingsUpdate {
	this := ApplianceSettingsUpdate{}
	return &this
}

// NewApplianceSettingsUpdateWithDefaults instantiates a new ApplianceSettingsUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplianceSettingsUpdateWithDefaults() *ApplianceSettingsUpdate {
	this := ApplianceSettingsUpdate{}
	return &this
}

// GetApplianceUrl returns the ApplianceUrl field value if set, zero value otherwise.
func (o *ApplianceSettingsUpdate) GetApplianceUrl() string {
	if o == nil || IsNil(o.ApplianceUrl) {
		var ret string
		return ret
	}
	return *o.ApplianceUrl
}

// GetApplianceUrlOk returns a tuple with the ApplianceUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceSettingsUpdate) GetApplianceUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ApplianceUrl) {
		return nil, false
	}
	return o.ApplianceUrl, true
}

// HasApplianceUrl returns a boolean if a field has been set.
func (o *ApplianceSettingsUpdate) HasApplianceUrl() bool {
	if o != nil && !IsNil(o.ApplianceUrl) {
		return true
	}

	return false
}

// SetApplianceUrl gets a reference to the given string and assigns it to the ApplianceUrl field.
func (o *ApplianceSettingsUpdate) SetApplianceUrl(v string) {
	o.ApplianceUrl = &v
}

// GetInternalApplianceUrl returns the InternalApplianceUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApplianceSettingsUpdate) GetInternalApplianceUrl() string {
	if o == nil || IsNil(o.InternalApplianceUrl.Get()) {
		var ret string
		return ret
	}
	return *o.InternalApplianceUrl.Get()
}

// GetInternalApplianceUrlOk returns a tuple with the InternalApplianceUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApplianceSettingsUpdate) GetInternalApplianceUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.InternalApplianceUrl.Get(), o.InternalApplianceUrl.IsSet()
}

// HasInternalApplianceUrl returns a boolean if a field has been set.
func (o *ApplianceSettingsUpdate) HasInternalApplianceUrl() bool {
	if o != nil && o.InternalApplianceUrl.IsSet() {
		return true
	}

	return false
}

// SetInternalApplianceUrl gets a reference to the given NullableString and assigns it to the InternalApplianceUrl field.
func (o *ApplianceSettingsUpdate) SetInternalApplianceUrl(v string) {
	o.InternalApplianceUrl.Set(&v)
}
// SetInternalApplianceUrlNil sets the value for InternalApplianceUrl to be an explicit nil
func (o *ApplianceSettingsUpdate) SetInternalApplianceUrlNil() {
	o.InternalApplianceUrl.Set(nil)
}

// UnsetInternalApplianceUrl ensures that no value is present for InternalApplianceUrl, not even an explicit nil
func (o *ApplianceSettingsUpdate) UnsetInternalApplianceUrl() {
	o.InternalApplianceUrl.Unset()
}

// GetCorsAllowed returns the CorsAllowed field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApplianceSettingsUpdate) GetCorsAllowed() string {
	if o == nil || IsNil(o.CorsAllowed.Get()) {
		var ret string
		return ret
	}
	return *o.CorsAllowed.Get()
}

// GetCorsAllowedOk returns a tuple with the CorsAllowed field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApplianceSettingsUpdate) GetCorsAllowedOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CorsAllowed.Get(), o.CorsAllowed.IsSet()
}

// HasCorsAllowed returns a boolean if a field has been set.
func (o *ApplianceSettingsUpdate) HasCorsAllowed() bool {
	if o != nil && o.CorsAllowed.IsSet() {
		return true
	}

	return false
}

// SetCorsAllowed gets a reference to the given NullableString and assigns it to the CorsAllowed field.
func (o *ApplianceSettingsUpdate) SetCorsAllowed(v string) {
	o.CorsAllowed.Set(&v)
}
// SetCorsAllowedNil sets the value for CorsAllowed to be an explicit nil
func (o *ApplianceSettingsUpdate) SetCorsAllowedNil() {
	o.CorsAllowed.Set(nil)
}

// UnsetCorsAllowed ensures that no value is present for CorsAllowed, not even an explicit nil
func (o *ApplianceSettingsUpdate) UnsetCorsAllowed() {
	o.CorsAllowed.Unset()
}

// GetRegistrationEnabled returns the RegistrationEnabled field value if set, zero value otherwise.
func (o *ApplianceSettingsUpdate) GetRegistrationEnabled() bool {
	if o == nil || IsNil(o.RegistrationEnabled) {
		var ret bool
		return ret
	}
	return *o.RegistrationEnabled
}

// GetRegistrationEnabledOk returns a tuple with the RegistrationEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceSettingsUpdate) GetRegistrationEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.RegistrationEnabled) {
		return nil, false
	}
	return o.RegistrationEnabled, true
}

// HasRegistrationEnabled returns a boolean if a field has been set.
func (o *ApplianceSettingsUpdate) HasRegistrationEnabled() bool {
	if o != nil && !IsNil(o.RegistrationEnabled) {
		return true
	}

	return false
}

// SetRegistrationEnabled gets a reference to the given bool and assigns it to the RegistrationEnabled field.
func (o *ApplianceSettingsUpdate) SetRegistrationEnabled(v bool) {
	o.RegistrationEnabled = &v
}

// GetDefaultRoleId returns the DefaultRoleId field value if set, zero value otherwise.
func (o *ApplianceSettingsUpdate) GetDefaultRoleId() int64 {
	if o == nil || IsNil(o.DefaultRoleId) {
		var ret int64
		return ret
	}
	return *o.DefaultRoleId
}

// GetDefaultRoleIdOk returns a tuple with the DefaultRoleId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceSettingsUpdate) GetDefaultRoleIdOk() (*int64, bool) {
	if o == nil || IsNil(o.DefaultRoleId) {
		return nil, false
	}
	return o.DefaultRoleId, true
}

// HasDefaultRoleId returns a boolean if a field has been set.
func (o *ApplianceSettingsUpdate) HasDefaultRoleId() bool {
	if o != nil && !IsNil(o.DefaultRoleId) {
		return true
	}

	return false
}

// SetDefaultRoleId gets a reference to the given int64 and assigns it to the DefaultRoleId field.
func (o *ApplianceSettingsUpdate) SetDefaultRoleId(v int64) {
	o.DefaultRoleId = &v
}

// GetDefaultUserRoleId returns the DefaultUserRoleId field value if set, zero value otherwise.
func (o *ApplianceSettingsUpdate) GetDefaultUserRoleId() int64 {
	if o == nil || IsNil(o.DefaultUserRoleId) {
		var ret int64
		return ret
	}
	return *o.DefaultUserRoleId
}

// GetDefaultUserRoleIdOk returns a tuple with the DefaultUserRoleId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceSettingsUpdate) GetDefaultUserRoleIdOk() (*int64, bool) {
	if o == nil || IsNil(o.DefaultUserRoleId) {
		return nil, false
	}
	return o.DefaultUserRoleId, true
}

// HasDefaultUserRoleId returns a boolean if a field has been set.
func (o *ApplianceSettingsUpdate) HasDefaultUserRoleId() bool {
	if o != nil && !IsNil(o.DefaultUserRoleId) {
		return true
	}

	return false
}

// SetDefaultUserRoleId gets a reference to the given int64 and assigns it to the DefaultUserRoleId field.
func (o *ApplianceSettingsUpdate) SetDefaultUserRoleId(v int64) {
	o.DefaultUserRoleId = &v
}

// GetDockerPrivilegedMode returns the DockerPrivilegedMode field value if set, zero value otherwise.
func (o *ApplianceSettingsUpdate) GetDockerPrivilegedMode() bool {
	if o == nil || IsNil(o.DockerPrivilegedMode) {
		var ret bool
		return ret
	}
	return *o.DockerPrivilegedMode
}

// GetDockerPrivilegedModeOk returns a tuple with the DockerPrivilegedMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceSettingsUpdate) GetDockerPrivilegedModeOk() (*bool, bool) {
	if o == nil || IsNil(o.DockerPrivilegedMode) {
		return nil, false
	}
	return o.DockerPrivilegedMode, true
}

// HasDockerPrivilegedMode returns a boolean if a field has been set.
func (o *ApplianceSettingsUpdate) HasDockerPrivilegedMode() bool {
	if o != nil && !IsNil(o.DockerPrivilegedMode) {
		return true
	}

	return false
}

// SetDockerPrivilegedMode gets a reference to the given bool and assigns it to the DockerPrivilegedMode field.
func (o *ApplianceSettingsUpdate) SetDockerPrivilegedMode(v bool) {
	o.DockerPrivilegedMode = &v
}

// GetPasswordMinLength returns the PasswordMinLength field value if set, zero value otherwise.
func (o *ApplianceSettingsUpdate) GetPasswordMinLength() string {
	if o == nil || IsNil(o.PasswordMinLength) {
		var ret string
		return ret
	}
	return *o.PasswordMinLength
}

// GetPasswordMinLengthOk returns a tuple with the PasswordMinLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceSettingsUpdate) GetPasswordMinLengthOk() (*string, bool) {
	if o == nil || IsNil(o.PasswordMinLength) {
		return nil, false
	}
	return o.PasswordMinLength, true
}

// HasPasswordMinLength returns a boolean if a field has been set.
func (o *ApplianceSettingsUpdate) HasPasswordMinLength() bool {
	if o != nil && !IsNil(o.PasswordMinLength) {
		return true
	}

	return false
}

// SetPasswordMinLength gets a reference to the given string and assigns it to the PasswordMinLength field.
func (o *ApplianceSettingsUpdate) SetPasswordMinLength(v string) {
	o.PasswordMinLength = &v
}

// GetPasswordMinUpperCase returns the PasswordMinUpperCase field value if set, zero value otherwise.
func (o *ApplianceSettingsUpdate) GetPasswordMinUpperCase() string {
	if o == nil || IsNil(o.PasswordMinUpperCase) {
		var ret string
		return ret
	}
	return *o.PasswordMinUpperCase
}

// GetPasswordMinUpperCaseOk returns a tuple with the PasswordMinUpperCase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceSettingsUpdate) GetPasswordMinUpperCaseOk() (*string, bool) {
	if o == nil || IsNil(o.PasswordMinUpperCase) {
		return nil, false
	}
	return o.PasswordMinUpperCase, true
}

// HasPasswordMinUpperCase returns a boolean if a field has been set.
func (o *ApplianceSettingsUpdate) HasPasswordMinUpperCase() bool {
	if o != nil && !IsNil(o.PasswordMinUpperCase) {
		return true
	}

	return false
}

// SetPasswordMinUpperCase gets a reference to the given string and assigns it to the PasswordMinUpperCase field.
func (o *ApplianceSettingsUpdate) SetPasswordMinUpperCase(v string) {
	o.PasswordMinUpperCase = &v
}

// GetPasswordMinNumbers returns the PasswordMinNumbers field value if set, zero value otherwise.
func (o *ApplianceSettingsUpdate) GetPasswordMinNumbers() string {
	if o == nil || IsNil(o.PasswordMinNumbers) {
		var ret string
		return ret
	}
	return *o.PasswordMinNumbers
}

// GetPasswordMinNumbersOk returns a tuple with the PasswordMinNumbers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceSettingsUpdate) GetPasswordMinNumbersOk() (*string, bool) {
	if o == nil || IsNil(o.PasswordMinNumbers) {
		return nil, false
	}
	return o.PasswordMinNumbers, true
}

// HasPasswordMinNumbers returns a boolean if a field has been set.
func (o *ApplianceSettingsUpdate) HasPasswordMinNumbers() bool {
	if o != nil && !IsNil(o.PasswordMinNumbers) {
		return true
	}

	return false
}

// SetPasswordMinNumbers gets a reference to the given string and assigns it to the PasswordMinNumbers field.
func (o *ApplianceSettingsUpdate) SetPasswordMinNumbers(v string) {
	o.PasswordMinNumbers = &v
}

// GetPasswordMinSymbols returns the PasswordMinSymbols field value if set, zero value otherwise.
func (o *ApplianceSettingsUpdate) GetPasswordMinSymbols() string {
	if o == nil || IsNil(o.PasswordMinSymbols) {
		var ret string
		return ret
	}
	return *o.PasswordMinSymbols
}

// GetPasswordMinSymbolsOk returns a tuple with the PasswordMinSymbols field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceSettingsUpdate) GetPasswordMinSymbolsOk() (*string, bool) {
	if o == nil || IsNil(o.PasswordMinSymbols) {
		return nil, false
	}
	return o.PasswordMinSymbols, true
}

// HasPasswordMinSymbols returns a boolean if a field has been set.
func (o *ApplianceSettingsUpdate) HasPasswordMinSymbols() bool {
	if o != nil && !IsNil(o.PasswordMinSymbols) {
		return true
	}

	return false
}

// SetPasswordMinSymbols gets a reference to the given string and assigns it to the PasswordMinSymbols field.
func (o *ApplianceSettingsUpdate) SetPasswordMinSymbols(v string) {
	o.PasswordMinSymbols = &v
}

// GetUserBrowserSessionTimeout returns the UserBrowserSessionTimeout field value if set, zero value otherwise.
func (o *ApplianceSettingsUpdate) GetUserBrowserSessionTimeout() string {
	if o == nil || IsNil(o.UserBrowserSessionTimeout) {
		var ret string
		return ret
	}
	return *o.UserBrowserSessionTimeout
}

// GetUserBrowserSessionTimeoutOk returns a tuple with the UserBrowserSessionTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceSettingsUpdate) GetUserBrowserSessionTimeoutOk() (*string, bool) {
	if o == nil || IsNil(o.UserBrowserSessionTimeout) {
		return nil, false
	}
	return o.UserBrowserSessionTimeout, true
}

// HasUserBrowserSessionTimeout returns a boolean if a field has been set.
func (o *ApplianceSettingsUpdate) HasUserBrowserSessionTimeout() bool {
	if o != nil && !IsNil(o.UserBrowserSessionTimeout) {
		return true
	}

	return false
}

// SetUserBrowserSessionTimeout gets a reference to the given string and assigns it to the UserBrowserSessionTimeout field.
func (o *ApplianceSettingsUpdate) SetUserBrowserSessionTimeout(v string) {
	o.UserBrowserSessionTimeout = &v
}

// GetUserBrowserSessionWarning returns the UserBrowserSessionWarning field value if set, zero value otherwise.
func (o *ApplianceSettingsUpdate) GetUserBrowserSessionWarning() string {
	if o == nil || IsNil(o.UserBrowserSessionWarning) {
		var ret string
		return ret
	}
	return *o.UserBrowserSessionWarning
}

// GetUserBrowserSessionWarningOk returns a tuple with the UserBrowserSessionWarning field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceSettingsUpdate) GetUserBrowserSessionWarningOk() (*string, bool) {
	if o == nil || IsNil(o.UserBrowserSessionWarning) {
		return nil, false
	}
	return o.UserBrowserSessionWarning, true
}

// HasUserBrowserSessionWarning returns a boolean if a field has been set.
func (o *ApplianceSettingsUpdate) HasUserBrowserSessionWarning() bool {
	if o != nil && !IsNil(o.UserBrowserSessionWarning) {
		return true
	}

	return false
}

// SetUserBrowserSessionWarning gets a reference to the given string and assigns it to the UserBrowserSessionWarning field.
func (o *ApplianceSettingsUpdate) SetUserBrowserSessionWarning(v string) {
	o.UserBrowserSessionWarning = &v
}

// GetExpirePwdDays returns the ExpirePwdDays field value if set, zero value otherwise.
func (o *ApplianceSettingsUpdate) GetExpirePwdDays() int64 {
	if o == nil || IsNil(o.ExpirePwdDays) {
		var ret int64
		return ret
	}
	return *o.ExpirePwdDays
}

// GetExpirePwdDaysOk returns a tuple with the ExpirePwdDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceSettingsUpdate) GetExpirePwdDaysOk() (*int64, bool) {
	if o == nil || IsNil(o.ExpirePwdDays) {
		return nil, false
	}
	return o.ExpirePwdDays, true
}

// HasExpirePwdDays returns a boolean if a field has been set.
func (o *ApplianceSettingsUpdate) HasExpirePwdDays() bool {
	if o != nil && !IsNil(o.ExpirePwdDays) {
		return true
	}

	return false
}

// SetExpirePwdDays gets a reference to the given int64 and assigns it to the ExpirePwdDays field.
func (o *ApplianceSettingsUpdate) SetExpirePwdDays(v int64) {
	o.ExpirePwdDays = &v
}

// GetDisableAfterAttempts returns the DisableAfterAttempts field value if set, zero value otherwise.
func (o *ApplianceSettingsUpdate) GetDisableAfterAttempts() int64 {
	if o == nil || IsNil(o.DisableAfterAttempts) {
		var ret int64
		return ret
	}
	return *o.DisableAfterAttempts
}

// GetDisableAfterAttemptsOk returns a tuple with the DisableAfterAttempts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceSettingsUpdate) GetDisableAfterAttemptsOk() (*int64, bool) {
	if o == nil || IsNil(o.DisableAfterAttempts) {
		return nil, false
	}
	return o.DisableAfterAttempts, true
}

// HasDisableAfterAttempts returns a boolean if a field has been set.
func (o *ApplianceSettingsUpdate) HasDisableAfterAttempts() bool {
	if o != nil && !IsNil(o.DisableAfterAttempts) {
		return true
	}

	return false
}

// SetDisableAfterAttempts gets a reference to the given int64 and assigns it to the DisableAfterAttempts field.
func (o *ApplianceSettingsUpdate) SetDisableAfterAttempts(v int64) {
	o.DisableAfterAttempts = &v
}

// GetDisableAfterDaysInactive returns the DisableAfterDaysInactive field value if set, zero value otherwise.
func (o *ApplianceSettingsUpdate) GetDisableAfterDaysInactive() int64 {
	if o == nil || IsNil(o.DisableAfterDaysInactive) {
		var ret int64
		return ret
	}
	return *o.DisableAfterDaysInactive
}

// GetDisableAfterDaysInactiveOk returns a tuple with the DisableAfterDaysInactive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceSettingsUpdate) GetDisableAfterDaysInactiveOk() (*int64, bool) {
	if o == nil || IsNil(o.DisableAfterDaysInactive) {
		return nil, false
	}
	return o.DisableAfterDaysInactive, true
}

// HasDisableAfterDaysInactive returns a boolean if a field has been set.
func (o *ApplianceSettingsUpdate) HasDisableAfterDaysInactive() bool {
	if o != nil && !IsNil(o.DisableAfterDaysInactive) {
		return true
	}

	return false
}

// SetDisableAfterDaysInactive gets a reference to the given int64 and assigns it to the DisableAfterDaysInactive field.
func (o *ApplianceSettingsUpdate) SetDisableAfterDaysInactive(v int64) {
	o.DisableAfterDaysInactive = &v
}

// GetWarnUserDaysBefore returns the WarnUserDaysBefore field value if set, zero value otherwise.
func (o *ApplianceSettingsUpdate) GetWarnUserDaysBefore() int64 {
	if o == nil || IsNil(o.WarnUserDaysBefore) {
		var ret int64
		return ret
	}
	return *o.WarnUserDaysBefore
}

// GetWarnUserDaysBeforeOk returns a tuple with the WarnUserDaysBefore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceSettingsUpdate) GetWarnUserDaysBeforeOk() (*int64, bool) {
	if o == nil || IsNil(o.WarnUserDaysBefore) {
		return nil, false
	}
	return o.WarnUserDaysBefore, true
}

// HasWarnUserDaysBefore returns a boolean if a field has been set.
func (o *ApplianceSettingsUpdate) HasWarnUserDaysBefore() bool {
	if o != nil && !IsNil(o.WarnUserDaysBefore) {
		return true
	}

	return false
}

// SetWarnUserDaysBefore gets a reference to the given int64 and assigns it to the WarnUserDaysBefore field.
func (o *ApplianceSettingsUpdate) SetWarnUserDaysBefore(v int64) {
	o.WarnUserDaysBefore = &v
}

// GetSmtpMailFrom returns the SmtpMailFrom field value if set, zero value otherwise.
func (o *ApplianceSettingsUpdate) GetSmtpMailFrom() string {
	if o == nil || IsNil(o.SmtpMailFrom) {
		var ret string
		return ret
	}
	return *o.SmtpMailFrom
}

// GetSmtpMailFromOk returns a tuple with the SmtpMailFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceSettingsUpdate) GetSmtpMailFromOk() (*string, bool) {
	if o == nil || IsNil(o.SmtpMailFrom) {
		return nil, false
	}
	return o.SmtpMailFrom, true
}

// HasSmtpMailFrom returns a boolean if a field has been set.
func (o *ApplianceSettingsUpdate) HasSmtpMailFrom() bool {
	if o != nil && !IsNil(o.SmtpMailFrom) {
		return true
	}

	return false
}

// SetSmtpMailFrom gets a reference to the given string and assigns it to the SmtpMailFrom field.
func (o *ApplianceSettingsUpdate) SetSmtpMailFrom(v string) {
	o.SmtpMailFrom = &v
}

// GetSmtpServer returns the SmtpServer field value if set, zero value otherwise.
func (o *ApplianceSettingsUpdate) GetSmtpServer() string {
	if o == nil || IsNil(o.SmtpServer) {
		var ret string
		return ret
	}
	return *o.SmtpServer
}

// GetSmtpServerOk returns a tuple with the SmtpServer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceSettingsUpdate) GetSmtpServerOk() (*string, bool) {
	if o == nil || IsNil(o.SmtpServer) {
		return nil, false
	}
	return o.SmtpServer, true
}

// HasSmtpServer returns a boolean if a field has been set.
func (o *ApplianceSettingsUpdate) HasSmtpServer() bool {
	if o != nil && !IsNil(o.SmtpServer) {
		return true
	}

	return false
}

// SetSmtpServer gets a reference to the given string and assigns it to the SmtpServer field.
func (o *ApplianceSettingsUpdate) SetSmtpServer(v string) {
	o.SmtpServer = &v
}

// GetSmtpPort returns the SmtpPort field value if set, zero value otherwise.
func (o *ApplianceSettingsUpdate) GetSmtpPort() int64 {
	if o == nil || IsNil(o.SmtpPort) {
		var ret int64
		return ret
	}
	return *o.SmtpPort
}

// GetSmtpPortOk returns a tuple with the SmtpPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceSettingsUpdate) GetSmtpPortOk() (*int64, bool) {
	if o == nil || IsNil(o.SmtpPort) {
		return nil, false
	}
	return o.SmtpPort, true
}

// HasSmtpPort returns a boolean if a field has been set.
func (o *ApplianceSettingsUpdate) HasSmtpPort() bool {
	if o != nil && !IsNil(o.SmtpPort) {
		return true
	}

	return false
}

// SetSmtpPort gets a reference to the given int64 and assigns it to the SmtpPort field.
func (o *ApplianceSettingsUpdate) SetSmtpPort(v int64) {
	o.SmtpPort = &v
}

// GetSmtpSSL returns the SmtpSSL field value if set, zero value otherwise.
func (o *ApplianceSettingsUpdate) GetSmtpSSL() bool {
	if o == nil || IsNil(o.SmtpSSL) {
		var ret bool
		return ret
	}
	return *o.SmtpSSL
}

// GetSmtpSSLOk returns a tuple with the SmtpSSL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceSettingsUpdate) GetSmtpSSLOk() (*bool, bool) {
	if o == nil || IsNil(o.SmtpSSL) {
		return nil, false
	}
	return o.SmtpSSL, true
}

// HasSmtpSSL returns a boolean if a field has been set.
func (o *ApplianceSettingsUpdate) HasSmtpSSL() bool {
	if o != nil && !IsNil(o.SmtpSSL) {
		return true
	}

	return false
}

// SetSmtpSSL gets a reference to the given bool and assigns it to the SmtpSSL field.
func (o *ApplianceSettingsUpdate) SetSmtpSSL(v bool) {
	o.SmtpSSL = &v
}

// GetSmtpTLS returns the SmtpTLS field value if set, zero value otherwise.
func (o *ApplianceSettingsUpdate) GetSmtpTLS() bool {
	if o == nil || IsNil(o.SmtpTLS) {
		var ret bool
		return ret
	}
	return *o.SmtpTLS
}

// GetSmtpTLSOk returns a tuple with the SmtpTLS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceSettingsUpdate) GetSmtpTLSOk() (*bool, bool) {
	if o == nil || IsNil(o.SmtpTLS) {
		return nil, false
	}
	return o.SmtpTLS, true
}

// HasSmtpTLS returns a boolean if a field has been set.
func (o *ApplianceSettingsUpdate) HasSmtpTLS() bool {
	if o != nil && !IsNil(o.SmtpTLS) {
		return true
	}

	return false
}

// SetSmtpTLS gets a reference to the given bool and assigns it to the SmtpTLS field.
func (o *ApplianceSettingsUpdate) SetSmtpTLS(v bool) {
	o.SmtpTLS = &v
}

// GetSmtpUser returns the SmtpUser field value if set, zero value otherwise.
func (o *ApplianceSettingsUpdate) GetSmtpUser() string {
	if o == nil || IsNil(o.SmtpUser) {
		var ret string
		return ret
	}
	return *o.SmtpUser
}

// GetSmtpUserOk returns a tuple with the SmtpUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceSettingsUpdate) GetSmtpUserOk() (*string, bool) {
	if o == nil || IsNil(o.SmtpUser) {
		return nil, false
	}
	return o.SmtpUser, true
}

// HasSmtpUser returns a boolean if a field has been set.
func (o *ApplianceSettingsUpdate) HasSmtpUser() bool {
	if o != nil && !IsNil(o.SmtpUser) {
		return true
	}

	return false
}

// SetSmtpUser gets a reference to the given string and assigns it to the SmtpUser field.
func (o *ApplianceSettingsUpdate) SetSmtpUser(v string) {
	o.SmtpUser = &v
}

// GetSmtpPassword returns the SmtpPassword field value if set, zero value otherwise.
func (o *ApplianceSettingsUpdate) GetSmtpPassword() string {
	if o == nil || IsNil(o.SmtpPassword) {
		var ret string
		return ret
	}
	return *o.SmtpPassword
}

// GetSmtpPasswordOk returns a tuple with the SmtpPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceSettingsUpdate) GetSmtpPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.SmtpPassword) {
		return nil, false
	}
	return o.SmtpPassword, true
}

// HasSmtpPassword returns a boolean if a field has been set.
func (o *ApplianceSettingsUpdate) HasSmtpPassword() bool {
	if o != nil && !IsNil(o.SmtpPassword) {
		return true
	}

	return false
}

// SetSmtpPassword gets a reference to the given string and assigns it to the SmtpPassword field.
func (o *ApplianceSettingsUpdate) SetSmtpPassword(v string) {
	o.SmtpPassword = &v
}

// GetProxyHost returns the ProxyHost field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApplianceSettingsUpdate) GetProxyHost() string {
	if o == nil || IsNil(o.ProxyHost.Get()) {
		var ret string
		return ret
	}
	return *o.ProxyHost.Get()
}

// GetProxyHostOk returns a tuple with the ProxyHost field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApplianceSettingsUpdate) GetProxyHostOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProxyHost.Get(), o.ProxyHost.IsSet()
}

// HasProxyHost returns a boolean if a field has been set.
func (o *ApplianceSettingsUpdate) HasProxyHost() bool {
	if o != nil && o.ProxyHost.IsSet() {
		return true
	}

	return false
}

// SetProxyHost gets a reference to the given NullableString and assigns it to the ProxyHost field.
func (o *ApplianceSettingsUpdate) SetProxyHost(v string) {
	o.ProxyHost.Set(&v)
}
// SetProxyHostNil sets the value for ProxyHost to be an explicit nil
func (o *ApplianceSettingsUpdate) SetProxyHostNil() {
	o.ProxyHost.Set(nil)
}

// UnsetProxyHost ensures that no value is present for ProxyHost, not even an explicit nil
func (o *ApplianceSettingsUpdate) UnsetProxyHost() {
	o.ProxyHost.Unset()
}

// GetProxyPort returns the ProxyPort field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApplianceSettingsUpdate) GetProxyPort() string {
	if o == nil || IsNil(o.ProxyPort.Get()) {
		var ret string
		return ret
	}
	return *o.ProxyPort.Get()
}

// GetProxyPortOk returns a tuple with the ProxyPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApplianceSettingsUpdate) GetProxyPortOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProxyPort.Get(), o.ProxyPort.IsSet()
}

// HasProxyPort returns a boolean if a field has been set.
func (o *ApplianceSettingsUpdate) HasProxyPort() bool {
	if o != nil && o.ProxyPort.IsSet() {
		return true
	}

	return false
}

// SetProxyPort gets a reference to the given NullableString and assigns it to the ProxyPort field.
func (o *ApplianceSettingsUpdate) SetProxyPort(v string) {
	o.ProxyPort.Set(&v)
}
// SetProxyPortNil sets the value for ProxyPort to be an explicit nil
func (o *ApplianceSettingsUpdate) SetProxyPortNil() {
	o.ProxyPort.Set(nil)
}

// UnsetProxyPort ensures that no value is present for ProxyPort, not even an explicit nil
func (o *ApplianceSettingsUpdate) UnsetProxyPort() {
	o.ProxyPort.Unset()
}

// GetProxyUser returns the ProxyUser field value if set, zero value otherwise.
func (o *ApplianceSettingsUpdate) GetProxyUser() string {
	if o == nil || IsNil(o.ProxyUser) {
		var ret string
		return ret
	}
	return *o.ProxyUser
}

// GetProxyUserOk returns a tuple with the ProxyUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceSettingsUpdate) GetProxyUserOk() (*string, bool) {
	if o == nil || IsNil(o.ProxyUser) {
		return nil, false
	}
	return o.ProxyUser, true
}

// HasProxyUser returns a boolean if a field has been set.
func (o *ApplianceSettingsUpdate) HasProxyUser() bool {
	if o != nil && !IsNil(o.ProxyUser) {
		return true
	}

	return false
}

// SetProxyUser gets a reference to the given string and assigns it to the ProxyUser field.
func (o *ApplianceSettingsUpdate) SetProxyUser(v string) {
	o.ProxyUser = &v
}

// GetProxyPassword returns the ProxyPassword field value if set, zero value otherwise.
func (o *ApplianceSettingsUpdate) GetProxyPassword() string {
	if o == nil || IsNil(o.ProxyPassword) {
		var ret string
		return ret
	}
	return *o.ProxyPassword
}

// GetProxyPasswordOk returns a tuple with the ProxyPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceSettingsUpdate) GetProxyPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.ProxyPassword) {
		return nil, false
	}
	return o.ProxyPassword, true
}

// HasProxyPassword returns a boolean if a field has been set.
func (o *ApplianceSettingsUpdate) HasProxyPassword() bool {
	if o != nil && !IsNil(o.ProxyPassword) {
		return true
	}

	return false
}

// SetProxyPassword gets a reference to the given string and assigns it to the ProxyPassword field.
func (o *ApplianceSettingsUpdate) SetProxyPassword(v string) {
	o.ProxyPassword = &v
}

// GetProxyDomain returns the ProxyDomain field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApplianceSettingsUpdate) GetProxyDomain() string {
	if o == nil || IsNil(o.ProxyDomain.Get()) {
		var ret string
		return ret
	}
	return *o.ProxyDomain.Get()
}

// GetProxyDomainOk returns a tuple with the ProxyDomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApplianceSettingsUpdate) GetProxyDomainOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProxyDomain.Get(), o.ProxyDomain.IsSet()
}

// HasProxyDomain returns a boolean if a field has been set.
func (o *ApplianceSettingsUpdate) HasProxyDomain() bool {
	if o != nil && o.ProxyDomain.IsSet() {
		return true
	}

	return false
}

// SetProxyDomain gets a reference to the given NullableString and assigns it to the ProxyDomain field.
func (o *ApplianceSettingsUpdate) SetProxyDomain(v string) {
	o.ProxyDomain.Set(&v)
}
// SetProxyDomainNil sets the value for ProxyDomain to be an explicit nil
func (o *ApplianceSettingsUpdate) SetProxyDomainNil() {
	o.ProxyDomain.Set(nil)
}

// UnsetProxyDomain ensures that no value is present for ProxyDomain, not even an explicit nil
func (o *ApplianceSettingsUpdate) UnsetProxyDomain() {
	o.ProxyDomain.Unset()
}

// GetProxyWorkstation returns the ProxyWorkstation field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApplianceSettingsUpdate) GetProxyWorkstation() string {
	if o == nil || IsNil(o.ProxyWorkstation.Get()) {
		var ret string
		return ret
	}
	return *o.ProxyWorkstation.Get()
}

// GetProxyWorkstationOk returns a tuple with the ProxyWorkstation field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApplianceSettingsUpdate) GetProxyWorkstationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProxyWorkstation.Get(), o.ProxyWorkstation.IsSet()
}

// HasProxyWorkstation returns a boolean if a field has been set.
func (o *ApplianceSettingsUpdate) HasProxyWorkstation() bool {
	if o != nil && o.ProxyWorkstation.IsSet() {
		return true
	}

	return false
}

// SetProxyWorkstation gets a reference to the given NullableString and assigns it to the ProxyWorkstation field.
func (o *ApplianceSettingsUpdate) SetProxyWorkstation(v string) {
	o.ProxyWorkstation.Set(&v)
}
// SetProxyWorkstationNil sets the value for ProxyWorkstation to be an explicit nil
func (o *ApplianceSettingsUpdate) SetProxyWorkstationNil() {
	o.ProxyWorkstation.Set(nil)
}

// UnsetProxyWorkstation ensures that no value is present for ProxyWorkstation, not even an explicit nil
func (o *ApplianceSettingsUpdate) UnsetProxyWorkstation() {
	o.ProxyWorkstation.Unset()
}

// GetCurrencyProvider returns the CurrencyProvider field value if set, zero value otherwise.
func (o *ApplianceSettingsUpdate) GetCurrencyProvider() string {
	if o == nil || IsNil(o.CurrencyProvider) {
		var ret string
		return ret
	}
	return *o.CurrencyProvider
}

// GetCurrencyProviderOk returns a tuple with the CurrencyProvider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceSettingsUpdate) GetCurrencyProviderOk() (*string, bool) {
	if o == nil || IsNil(o.CurrencyProvider) {
		return nil, false
	}
	return o.CurrencyProvider, true
}

// HasCurrencyProvider returns a boolean if a field has been set.
func (o *ApplianceSettingsUpdate) HasCurrencyProvider() bool {
	if o != nil && !IsNil(o.CurrencyProvider) {
		return true
	}

	return false
}

// SetCurrencyProvider gets a reference to the given string and assigns it to the CurrencyProvider field.
func (o *ApplianceSettingsUpdate) SetCurrencyProvider(v string) {
	o.CurrencyProvider = &v
}

// GetCurrencyKey returns the CurrencyKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApplianceSettingsUpdate) GetCurrencyKey() string {
	if o == nil || IsNil(o.CurrencyKey.Get()) {
		var ret string
		return ret
	}
	return *o.CurrencyKey.Get()
}

// GetCurrencyKeyOk returns a tuple with the CurrencyKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApplianceSettingsUpdate) GetCurrencyKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CurrencyKey.Get(), o.CurrencyKey.IsSet()
}

// HasCurrencyKey returns a boolean if a field has been set.
func (o *ApplianceSettingsUpdate) HasCurrencyKey() bool {
	if o != nil && o.CurrencyKey.IsSet() {
		return true
	}

	return false
}

// SetCurrencyKey gets a reference to the given NullableString and assigns it to the CurrencyKey field.
func (o *ApplianceSettingsUpdate) SetCurrencyKey(v string) {
	o.CurrencyKey.Set(&v)
}
// SetCurrencyKeyNil sets the value for CurrencyKey to be an explicit nil
func (o *ApplianceSettingsUpdate) SetCurrencyKeyNil() {
	o.CurrencyKey.Set(nil)
}

// UnsetCurrencyKey ensures that no value is present for CurrencyKey, not even an explicit nil
func (o *ApplianceSettingsUpdate) UnsetCurrencyKey() {
	o.CurrencyKey.Unset()
}

// GetEnableAllZoneTypes returns the EnableAllZoneTypes field value if set, zero value otherwise.
func (o *ApplianceSettingsUpdate) GetEnableAllZoneTypes() bool {
	if o == nil || IsNil(o.EnableAllZoneTypes) {
		var ret bool
		return ret
	}
	return *o.EnableAllZoneTypes
}

// GetEnableAllZoneTypesOk returns a tuple with the EnableAllZoneTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceSettingsUpdate) GetEnableAllZoneTypesOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableAllZoneTypes) {
		return nil, false
	}
	return o.EnableAllZoneTypes, true
}

// HasEnableAllZoneTypes returns a boolean if a field has been set.
func (o *ApplianceSettingsUpdate) HasEnableAllZoneTypes() bool {
	if o != nil && !IsNil(o.EnableAllZoneTypes) {
		return true
	}

	return false
}

// SetEnableAllZoneTypes gets a reference to the given bool and assigns it to the EnableAllZoneTypes field.
func (o *ApplianceSettingsUpdate) SetEnableAllZoneTypes(v bool) {
	o.EnableAllZoneTypes = &v
}

// GetEnableZoneTypes returns the EnableZoneTypes field value if set, zero value otherwise.
func (o *ApplianceSettingsUpdate) GetEnableZoneTypes() []int64 {
	if o == nil || IsNil(o.EnableZoneTypes) {
		var ret []int64
		return ret
	}
	return o.EnableZoneTypes
}

// GetEnableZoneTypesOk returns a tuple with the EnableZoneTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceSettingsUpdate) GetEnableZoneTypesOk() ([]int64, bool) {
	if o == nil || IsNil(o.EnableZoneTypes) {
		return nil, false
	}
	return o.EnableZoneTypes, true
}

// HasEnableZoneTypes returns a boolean if a field has been set.
func (o *ApplianceSettingsUpdate) HasEnableZoneTypes() bool {
	if o != nil && !IsNil(o.EnableZoneTypes) {
		return true
	}

	return false
}

// SetEnableZoneTypes gets a reference to the given []int64 and assigns it to the EnableZoneTypes field.
func (o *ApplianceSettingsUpdate) SetEnableZoneTypes(v []int64) {
	o.EnableZoneTypes = v
}

// GetDisableZoneTypes returns the DisableZoneTypes field value if set, zero value otherwise.
func (o *ApplianceSettingsUpdate) GetDisableZoneTypes() []int64 {
	if o == nil || IsNil(o.DisableZoneTypes) {
		var ret []int64
		return ret
	}
	return o.DisableZoneTypes
}

// GetDisableZoneTypesOk returns a tuple with the DisableZoneTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceSettingsUpdate) GetDisableZoneTypesOk() ([]int64, bool) {
	if o == nil || IsNil(o.DisableZoneTypes) {
		return nil, false
	}
	return o.DisableZoneTypes, true
}

// HasDisableZoneTypes returns a boolean if a field has been set.
func (o *ApplianceSettingsUpdate) HasDisableZoneTypes() bool {
	if o != nil && !IsNil(o.DisableZoneTypes) {
		return true
	}

	return false
}

// SetDisableZoneTypes gets a reference to the given []int64 and assigns it to the DisableZoneTypes field.
func (o *ApplianceSettingsUpdate) SetDisableZoneTypes(v []int64) {
	o.DisableZoneTypes = v
}

// GetDisableAllZoneTypes returns the DisableAllZoneTypes field value if set, zero value otherwise.
func (o *ApplianceSettingsUpdate) GetDisableAllZoneTypes() bool {
	if o == nil || IsNil(o.DisableAllZoneTypes) {
		var ret bool
		return ret
	}
	return *o.DisableAllZoneTypes
}

// GetDisableAllZoneTypesOk returns a tuple with the DisableAllZoneTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceSettingsUpdate) GetDisableAllZoneTypesOk() (*bool, bool) {
	if o == nil || IsNil(o.DisableAllZoneTypes) {
		return nil, false
	}
	return o.DisableAllZoneTypes, true
}

// HasDisableAllZoneTypes returns a boolean if a field has been set.
func (o *ApplianceSettingsUpdate) HasDisableAllZoneTypes() bool {
	if o != nil && !IsNil(o.DisableAllZoneTypes) {
		return true
	}

	return false
}

// SetDisableAllZoneTypes gets a reference to the given bool and assigns it to the DisableAllZoneTypes field.
func (o *ApplianceSettingsUpdate) SetDisableAllZoneTypes(v bool) {
	o.DisableAllZoneTypes = &v
}

func (o ApplianceSettingsUpdate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApplianceSettingsUpdate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ApplianceUrl) {
		toSerialize["applianceUrl"] = o.ApplianceUrl
	}
	if o.InternalApplianceUrl.IsSet() {
		toSerialize["internalApplianceUrl"] = o.InternalApplianceUrl.Get()
	}
	if o.CorsAllowed.IsSet() {
		toSerialize["corsAllowed"] = o.CorsAllowed.Get()
	}
	if !IsNil(o.RegistrationEnabled) {
		toSerialize["registrationEnabled"] = o.RegistrationEnabled
	}
	if !IsNil(o.DefaultRoleId) {
		toSerialize["defaultRoleId"] = o.DefaultRoleId
	}
	if !IsNil(o.DefaultUserRoleId) {
		toSerialize["defaultUserRoleId"] = o.DefaultUserRoleId
	}
	if !IsNil(o.DockerPrivilegedMode) {
		toSerialize["dockerPrivilegedMode"] = o.DockerPrivilegedMode
	}
	if !IsNil(o.PasswordMinLength) {
		toSerialize["passwordMinLength"] = o.PasswordMinLength
	}
	if !IsNil(o.PasswordMinUpperCase) {
		toSerialize["passwordMinUpperCase"] = o.PasswordMinUpperCase
	}
	if !IsNil(o.PasswordMinNumbers) {
		toSerialize["passwordMinNumbers"] = o.PasswordMinNumbers
	}
	if !IsNil(o.PasswordMinSymbols) {
		toSerialize["passwordMinSymbols"] = o.PasswordMinSymbols
	}
	if !IsNil(o.UserBrowserSessionTimeout) {
		toSerialize["userBrowserSessionTimeout"] = o.UserBrowserSessionTimeout
	}
	if !IsNil(o.UserBrowserSessionWarning) {
		toSerialize["userBrowserSessionWarning"] = o.UserBrowserSessionWarning
	}
	if !IsNil(o.ExpirePwdDays) {
		toSerialize["expirePwdDays"] = o.ExpirePwdDays
	}
	if !IsNil(o.DisableAfterAttempts) {
		toSerialize["disableAfterAttempts"] = o.DisableAfterAttempts
	}
	if !IsNil(o.DisableAfterDaysInactive) {
		toSerialize["disableAfterDaysInactive"] = o.DisableAfterDaysInactive
	}
	if !IsNil(o.WarnUserDaysBefore) {
		toSerialize["warnUserDaysBefore"] = o.WarnUserDaysBefore
	}
	if !IsNil(o.SmtpMailFrom) {
		toSerialize["smtpMailFrom"] = o.SmtpMailFrom
	}
	if !IsNil(o.SmtpServer) {
		toSerialize["smtpServer"] = o.SmtpServer
	}
	if !IsNil(o.SmtpPort) {
		toSerialize["smtpPort"] = o.SmtpPort
	}
	if !IsNil(o.SmtpSSL) {
		toSerialize["smtpSSL"] = o.SmtpSSL
	}
	if !IsNil(o.SmtpTLS) {
		toSerialize["smtpTLS"] = o.SmtpTLS
	}
	if !IsNil(o.SmtpUser) {
		toSerialize["smtpUser"] = o.SmtpUser
	}
	if !IsNil(o.SmtpPassword) {
		toSerialize["smtpPassword"] = o.SmtpPassword
	}
	if o.ProxyHost.IsSet() {
		toSerialize["proxyHost"] = o.ProxyHost.Get()
	}
	if o.ProxyPort.IsSet() {
		toSerialize["proxyPort"] = o.ProxyPort.Get()
	}
	if !IsNil(o.ProxyUser) {
		toSerialize["proxyUser"] = o.ProxyUser
	}
	if !IsNil(o.ProxyPassword) {
		toSerialize["proxyPassword"] = o.ProxyPassword
	}
	if o.ProxyDomain.IsSet() {
		toSerialize["proxyDomain"] = o.ProxyDomain.Get()
	}
	if o.ProxyWorkstation.IsSet() {
		toSerialize["proxyWorkstation"] = o.ProxyWorkstation.Get()
	}
	if !IsNil(o.CurrencyProvider) {
		toSerialize["currencyProvider"] = o.CurrencyProvider
	}
	if o.CurrencyKey.IsSet() {
		toSerialize["currencyKey"] = o.CurrencyKey.Get()
	}
	if !IsNil(o.EnableAllZoneTypes) {
		toSerialize["enableAllZoneTypes"] = o.EnableAllZoneTypes
	}
	if !IsNil(o.EnableZoneTypes) {
		toSerialize["enableZoneTypes"] = o.EnableZoneTypes
	}
	if !IsNil(o.DisableZoneTypes) {
		toSerialize["disableZoneTypes"] = o.DisableZoneTypes
	}
	if !IsNil(o.DisableAllZoneTypes) {
		toSerialize["disableAllZoneTypes"] = o.DisableAllZoneTypes
	}
	return toSerialize, nil
}

type NullableApplianceSettingsUpdate struct {
	value *ApplianceSettingsUpdate
	isSet bool
}

func (v NullableApplianceSettingsUpdate) Get() *ApplianceSettingsUpdate {
	return v.value
}

func (v *NullableApplianceSettingsUpdate) Set(val *ApplianceSettingsUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableApplianceSettingsUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableApplianceSettingsUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplianceSettingsUpdate(val *ApplianceSettingsUpdate) *NullableApplianceSettingsUpdate {
	return &NullableApplianceSettingsUpdate{value: val, isSet: true}
}

func (v NullableApplianceSettingsUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplianceSettingsUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


