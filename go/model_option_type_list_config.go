/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// OptionTypeListConfig struct for OptionTypeListConfig
type OptionTypeListConfig struct {
	SourceHeaders *[]OptionTypeListConfigSourceHeaders `json:"sourceHeaders,omitempty"`
}

// NewOptionTypeListConfig instantiates a new OptionTypeListConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOptionTypeListConfig() *OptionTypeListConfig {
	this := OptionTypeListConfig{}
	return &this
}

// NewOptionTypeListConfigWithDefaults instantiates a new OptionTypeListConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOptionTypeListConfigWithDefaults() *OptionTypeListConfig {
	this := OptionTypeListConfig{}
	return &this
}

// GetSourceHeaders returns the SourceHeaders field value if set, zero value otherwise.
func (o *OptionTypeListConfig) GetSourceHeaders() []OptionTypeListConfigSourceHeaders {
	if o == nil || o.SourceHeaders == nil {
		var ret []OptionTypeListConfigSourceHeaders
		return ret
	}
	return *o.SourceHeaders
}

// GetSourceHeadersOk returns a tuple with the SourceHeaders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionTypeListConfig) GetSourceHeadersOk() (*[]OptionTypeListConfigSourceHeaders, bool) {
	if o == nil || o.SourceHeaders == nil {
		return nil, false
	}
	return o.SourceHeaders, true
}

// HasSourceHeaders returns a boolean if a field has been set.
func (o *OptionTypeListConfig) HasSourceHeaders() bool {
	if o != nil && o.SourceHeaders != nil {
		return true
	}

	return false
}

// SetSourceHeaders gets a reference to the given []OptionTypeListConfigSourceHeaders and assigns it to the SourceHeaders field.
func (o *OptionTypeListConfig) SetSourceHeaders(v []OptionTypeListConfigSourceHeaders) {
	o.SourceHeaders = &v
}

func (o OptionTypeListConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SourceHeaders != nil {
		toSerialize["sourceHeaders"] = o.SourceHeaders
	}
	return json.Marshal(toSerialize)
}

type NullableOptionTypeListConfig struct {
	value *OptionTypeListConfig
	isSet bool
}

func (v NullableOptionTypeListConfig) Get() *OptionTypeListConfig {
	return v.value
}

func (v *NullableOptionTypeListConfig) Set(val *OptionTypeListConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableOptionTypeListConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableOptionTypeListConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOptionTypeListConfig(val *OptionTypeListConfig) *NullableOptionTypeListConfig {
	return &NullableOptionTypeListConfig{value: val, isSet: true}
}

func (v NullableOptionTypeListConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOptionTypeListConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


