/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// HostUpdate struct for HostUpdate
type HostUpdate struct {
	// Unique name scoped to your account for the server.
	Name *string `json:"name,omitempty"`
	// Optional description field.
	Description *string `json:"description,omitempty"`
	// SSH Username
	SshUsername *string `json:"sshUsername,omitempty"`
	// SSH Password
	SshPassword *string `json:"sshPassword,omitempty"`
	// Power schedule ID.
	PowerScheduleType *int64 `json:"powerScheduleType,omitempty"`
	Labels *[]string `json:"labels,omitempty"`
	// Metadata tags, Array of objects having a name and value.
	Tags *[]ApiServersIdMakeManagedServerTags `json:"tags,omitempty"`
	// Add or update value of Metadata tags, Array of objects having a name and value.
	AddTags *[]ApiServersIdMakeManagedServerTags `json:"addTags,omitempty"`
	// Remove Metadata tags, Array of objects having a name and an optional value. If value is passed, it must match to be removed.
	RemoveTags *[]InstanceUpdateInstanceRemoveTags `json:"removeTags,omitempty"`
	// The Type of guest console this server provides such as disabled, vnc, rdp, ssh
	GuestConsoleType *string `json:"guestConsoleType,omitempty"`
	// The optional guest console username if you don't want to use the user defaults
	GuestConsoleUsername *string `json:"guestConsoleUsername,omitempty"`
	// The optional guest console password if not using the accessing users creds
	GuestConsolePassword *string `json:"guestConsolePassword,omitempty"`
	// The port the guest console is being accessed from
	GuestConsolePort *string `json:"guestConsolePort,omitempty"`
	// Can turn off guest console preferences on server in favor of hypervisor console
	GuestConsolePreferred *bool `json:"guestConsolePreferred,omitempty"`
}

// NewHostUpdate instantiates a new HostUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHostUpdate() *HostUpdate {
	this := HostUpdate{}
	var guestConsolePreferred bool = true
	this.GuestConsolePreferred = &guestConsolePreferred
	return &this
}

// NewHostUpdateWithDefaults instantiates a new HostUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHostUpdateWithDefaults() *HostUpdate {
	this := HostUpdate{}
	var guestConsolePreferred bool = true
	this.GuestConsolePreferred = &guestConsolePreferred
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *HostUpdate) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HostUpdate) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *HostUpdate) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *HostUpdate) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *HostUpdate) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HostUpdate) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *HostUpdate) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *HostUpdate) SetDescription(v string) {
	o.Description = &v
}

// GetSshUsername returns the SshUsername field value if set, zero value otherwise.
func (o *HostUpdate) GetSshUsername() string {
	if o == nil || o.SshUsername == nil {
		var ret string
		return ret
	}
	return *o.SshUsername
}

// GetSshUsernameOk returns a tuple with the SshUsername field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HostUpdate) GetSshUsernameOk() (*string, bool) {
	if o == nil || o.SshUsername == nil {
		return nil, false
	}
	return o.SshUsername, true
}

// HasSshUsername returns a boolean if a field has been set.
func (o *HostUpdate) HasSshUsername() bool {
	if o != nil && o.SshUsername != nil {
		return true
	}

	return false
}

// SetSshUsername gets a reference to the given string and assigns it to the SshUsername field.
func (o *HostUpdate) SetSshUsername(v string) {
	o.SshUsername = &v
}

// GetSshPassword returns the SshPassword field value if set, zero value otherwise.
func (o *HostUpdate) GetSshPassword() string {
	if o == nil || o.SshPassword == nil {
		var ret string
		return ret
	}
	return *o.SshPassword
}

// GetSshPasswordOk returns a tuple with the SshPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HostUpdate) GetSshPasswordOk() (*string, bool) {
	if o == nil || o.SshPassword == nil {
		return nil, false
	}
	return o.SshPassword, true
}

// HasSshPassword returns a boolean if a field has been set.
func (o *HostUpdate) HasSshPassword() bool {
	if o != nil && o.SshPassword != nil {
		return true
	}

	return false
}

// SetSshPassword gets a reference to the given string and assigns it to the SshPassword field.
func (o *HostUpdate) SetSshPassword(v string) {
	o.SshPassword = &v
}

// GetPowerScheduleType returns the PowerScheduleType field value if set, zero value otherwise.
func (o *HostUpdate) GetPowerScheduleType() int64 {
	if o == nil || o.PowerScheduleType == nil {
		var ret int64
		return ret
	}
	return *o.PowerScheduleType
}

// GetPowerScheduleTypeOk returns a tuple with the PowerScheduleType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HostUpdate) GetPowerScheduleTypeOk() (*int64, bool) {
	if o == nil || o.PowerScheduleType == nil {
		return nil, false
	}
	return o.PowerScheduleType, true
}

// HasPowerScheduleType returns a boolean if a field has been set.
func (o *HostUpdate) HasPowerScheduleType() bool {
	if o != nil && o.PowerScheduleType != nil {
		return true
	}

	return false
}

// SetPowerScheduleType gets a reference to the given int64 and assigns it to the PowerScheduleType field.
func (o *HostUpdate) SetPowerScheduleType(v int64) {
	o.PowerScheduleType = &v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *HostUpdate) GetLabels() []string {
	if o == nil || o.Labels == nil {
		var ret []string
		return ret
	}
	return *o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HostUpdate) GetLabelsOk() (*[]string, bool) {
	if o == nil || o.Labels == nil {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *HostUpdate) HasLabels() bool {
	if o != nil && o.Labels != nil {
		return true
	}

	return false
}

// SetLabels gets a reference to the given []string and assigns it to the Labels field.
func (o *HostUpdate) SetLabels(v []string) {
	o.Labels = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *HostUpdate) GetTags() []ApiServersIdMakeManagedServerTags {
	if o == nil || o.Tags == nil {
		var ret []ApiServersIdMakeManagedServerTags
		return ret
	}
	return *o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HostUpdate) GetTagsOk() (*[]ApiServersIdMakeManagedServerTags, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *HostUpdate) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given []ApiServersIdMakeManagedServerTags and assigns it to the Tags field.
func (o *HostUpdate) SetTags(v []ApiServersIdMakeManagedServerTags) {
	o.Tags = &v
}

// GetAddTags returns the AddTags field value if set, zero value otherwise.
func (o *HostUpdate) GetAddTags() []ApiServersIdMakeManagedServerTags {
	if o == nil || o.AddTags == nil {
		var ret []ApiServersIdMakeManagedServerTags
		return ret
	}
	return *o.AddTags
}

// GetAddTagsOk returns a tuple with the AddTags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HostUpdate) GetAddTagsOk() (*[]ApiServersIdMakeManagedServerTags, bool) {
	if o == nil || o.AddTags == nil {
		return nil, false
	}
	return o.AddTags, true
}

// HasAddTags returns a boolean if a field has been set.
func (o *HostUpdate) HasAddTags() bool {
	if o != nil && o.AddTags != nil {
		return true
	}

	return false
}

// SetAddTags gets a reference to the given []ApiServersIdMakeManagedServerTags and assigns it to the AddTags field.
func (o *HostUpdate) SetAddTags(v []ApiServersIdMakeManagedServerTags) {
	o.AddTags = &v
}

// GetRemoveTags returns the RemoveTags field value if set, zero value otherwise.
func (o *HostUpdate) GetRemoveTags() []InstanceUpdateInstanceRemoveTags {
	if o == nil || o.RemoveTags == nil {
		var ret []InstanceUpdateInstanceRemoveTags
		return ret
	}
	return *o.RemoveTags
}

// GetRemoveTagsOk returns a tuple with the RemoveTags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HostUpdate) GetRemoveTagsOk() (*[]InstanceUpdateInstanceRemoveTags, bool) {
	if o == nil || o.RemoveTags == nil {
		return nil, false
	}
	return o.RemoveTags, true
}

// HasRemoveTags returns a boolean if a field has been set.
func (o *HostUpdate) HasRemoveTags() bool {
	if o != nil && o.RemoveTags != nil {
		return true
	}

	return false
}

// SetRemoveTags gets a reference to the given []InstanceUpdateInstanceRemoveTags and assigns it to the RemoveTags field.
func (o *HostUpdate) SetRemoveTags(v []InstanceUpdateInstanceRemoveTags) {
	o.RemoveTags = &v
}

// GetGuestConsoleType returns the GuestConsoleType field value if set, zero value otherwise.
func (o *HostUpdate) GetGuestConsoleType() string {
	if o == nil || o.GuestConsoleType == nil {
		var ret string
		return ret
	}
	return *o.GuestConsoleType
}

// GetGuestConsoleTypeOk returns a tuple with the GuestConsoleType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HostUpdate) GetGuestConsoleTypeOk() (*string, bool) {
	if o == nil || o.GuestConsoleType == nil {
		return nil, false
	}
	return o.GuestConsoleType, true
}

// HasGuestConsoleType returns a boolean if a field has been set.
func (o *HostUpdate) HasGuestConsoleType() bool {
	if o != nil && o.GuestConsoleType != nil {
		return true
	}

	return false
}

// SetGuestConsoleType gets a reference to the given string and assigns it to the GuestConsoleType field.
func (o *HostUpdate) SetGuestConsoleType(v string) {
	o.GuestConsoleType = &v
}

// GetGuestConsoleUsername returns the GuestConsoleUsername field value if set, zero value otherwise.
func (o *HostUpdate) GetGuestConsoleUsername() string {
	if o == nil || o.GuestConsoleUsername == nil {
		var ret string
		return ret
	}
	return *o.GuestConsoleUsername
}

// GetGuestConsoleUsernameOk returns a tuple with the GuestConsoleUsername field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HostUpdate) GetGuestConsoleUsernameOk() (*string, bool) {
	if o == nil || o.GuestConsoleUsername == nil {
		return nil, false
	}
	return o.GuestConsoleUsername, true
}

// HasGuestConsoleUsername returns a boolean if a field has been set.
func (o *HostUpdate) HasGuestConsoleUsername() bool {
	if o != nil && o.GuestConsoleUsername != nil {
		return true
	}

	return false
}

// SetGuestConsoleUsername gets a reference to the given string and assigns it to the GuestConsoleUsername field.
func (o *HostUpdate) SetGuestConsoleUsername(v string) {
	o.GuestConsoleUsername = &v
}

// GetGuestConsolePassword returns the GuestConsolePassword field value if set, zero value otherwise.
func (o *HostUpdate) GetGuestConsolePassword() string {
	if o == nil || o.GuestConsolePassword == nil {
		var ret string
		return ret
	}
	return *o.GuestConsolePassword
}

// GetGuestConsolePasswordOk returns a tuple with the GuestConsolePassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HostUpdate) GetGuestConsolePasswordOk() (*string, bool) {
	if o == nil || o.GuestConsolePassword == nil {
		return nil, false
	}
	return o.GuestConsolePassword, true
}

// HasGuestConsolePassword returns a boolean if a field has been set.
func (o *HostUpdate) HasGuestConsolePassword() bool {
	if o != nil && o.GuestConsolePassword != nil {
		return true
	}

	return false
}

// SetGuestConsolePassword gets a reference to the given string and assigns it to the GuestConsolePassword field.
func (o *HostUpdate) SetGuestConsolePassword(v string) {
	o.GuestConsolePassword = &v
}

// GetGuestConsolePort returns the GuestConsolePort field value if set, zero value otherwise.
func (o *HostUpdate) GetGuestConsolePort() string {
	if o == nil || o.GuestConsolePort == nil {
		var ret string
		return ret
	}
	return *o.GuestConsolePort
}

// GetGuestConsolePortOk returns a tuple with the GuestConsolePort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HostUpdate) GetGuestConsolePortOk() (*string, bool) {
	if o == nil || o.GuestConsolePort == nil {
		return nil, false
	}
	return o.GuestConsolePort, true
}

// HasGuestConsolePort returns a boolean if a field has been set.
func (o *HostUpdate) HasGuestConsolePort() bool {
	if o != nil && o.GuestConsolePort != nil {
		return true
	}

	return false
}

// SetGuestConsolePort gets a reference to the given string and assigns it to the GuestConsolePort field.
func (o *HostUpdate) SetGuestConsolePort(v string) {
	o.GuestConsolePort = &v
}

// GetGuestConsolePreferred returns the GuestConsolePreferred field value if set, zero value otherwise.
func (o *HostUpdate) GetGuestConsolePreferred() bool {
	if o == nil || o.GuestConsolePreferred == nil {
		var ret bool
		return ret
	}
	return *o.GuestConsolePreferred
}

// GetGuestConsolePreferredOk returns a tuple with the GuestConsolePreferred field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HostUpdate) GetGuestConsolePreferredOk() (*bool, bool) {
	if o == nil || o.GuestConsolePreferred == nil {
		return nil, false
	}
	return o.GuestConsolePreferred, true
}

// HasGuestConsolePreferred returns a boolean if a field has been set.
func (o *HostUpdate) HasGuestConsolePreferred() bool {
	if o != nil && o.GuestConsolePreferred != nil {
		return true
	}

	return false
}

// SetGuestConsolePreferred gets a reference to the given bool and assigns it to the GuestConsolePreferred field.
func (o *HostUpdate) SetGuestConsolePreferred(v bool) {
	o.GuestConsolePreferred = &v
}

func (o HostUpdate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.SshUsername != nil {
		toSerialize["sshUsername"] = o.SshUsername
	}
	if o.SshPassword != nil {
		toSerialize["sshPassword"] = o.SshPassword
	}
	if o.PowerScheduleType != nil {
		toSerialize["powerScheduleType"] = o.PowerScheduleType
	}
	if o.Labels != nil {
		toSerialize["labels"] = o.Labels
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	if o.AddTags != nil {
		toSerialize["addTags"] = o.AddTags
	}
	if o.RemoveTags != nil {
		toSerialize["removeTags"] = o.RemoveTags
	}
	if o.GuestConsoleType != nil {
		toSerialize["guestConsoleType"] = o.GuestConsoleType
	}
	if o.GuestConsoleUsername != nil {
		toSerialize["guestConsoleUsername"] = o.GuestConsoleUsername
	}
	if o.GuestConsolePassword != nil {
		toSerialize["guestConsolePassword"] = o.GuestConsolePassword
	}
	if o.GuestConsolePort != nil {
		toSerialize["guestConsolePort"] = o.GuestConsolePort
	}
	if o.GuestConsolePreferred != nil {
		toSerialize["guestConsolePreferred"] = o.GuestConsolePreferred
	}
	return json.Marshal(toSerialize)
}

type NullableHostUpdate struct {
	value *HostUpdate
	isSet bool
}

func (v NullableHostUpdate) Get() *HostUpdate {
	return v.value
}

func (v *NullableHostUpdate) Set(val *HostUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableHostUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableHostUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHostUpdate(val *HostUpdate) *NullableHostUpdate {
	return &NullableHostUpdate{value: val, isSet: true}
}

func (v NullableHostUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHostUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


