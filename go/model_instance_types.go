/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InstanceTypes struct for InstanceTypes
type InstanceTypes struct {
	Id *int64 `json:"id,omitempty"`
	Account NullableInlineResponse20082LoadBalancerInstanceSslCert `json:"account,omitempty"`
	Name *string `json:"name,omitempty"`
	Labels []string `json:"labels,omitempty"`
	Code *string `json:"code,omitempty"`
	Description NullableString `json:"description,omitempty"`
	ProvisionTypeCode NullableString `json:"provisionTypeCode,omitempty"`
	Category *string `json:"category,omitempty"`
	Active *bool `json:"active,omitempty"`
	EnvironmentPrefix *string `json:"environmentPrefix,omitempty"`
	Visibility *string `json:"visibility,omitempty"`
	Featured *bool `json:"featured,omitempty"`
	Versions *[]string `json:"versions,omitempty"`
	InstanceTypeLayouts *[]InstanceTypesInstanceTypeLayouts `json:"instanceTypeLayouts,omitempty"`
	// Logo image URL
	ImagePath NullableString `json:"imagePath,omitempty"`
	// Dark logo image URL
	DarkImagePath NullableString `json:"darkImagePath,omitempty"`
}

// NewInstanceTypes instantiates a new InstanceTypes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstanceTypes() *InstanceTypes {
	this := InstanceTypes{}
	return &this
}

// NewInstanceTypesWithDefaults instantiates a new InstanceTypes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstanceTypesWithDefaults() *InstanceTypes {
	this := InstanceTypes{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *InstanceTypes) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceTypes) GetIdOk() (*int64, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *InstanceTypes) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *InstanceTypes) SetId(v int64) {
	o.Id = &v
}

// GetAccount returns the Account field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InstanceTypes) GetAccount() InlineResponse20082LoadBalancerInstanceSslCert {
	if o == nil || o.Account.Get() == nil {
		var ret InlineResponse20082LoadBalancerInstanceSslCert
		return ret
	}
	return *o.Account.Get()
}

// GetAccountOk returns a tuple with the Account field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InstanceTypes) GetAccountOk() (*InlineResponse20082LoadBalancerInstanceSslCert, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Account.Get(), o.Account.IsSet()
}

// HasAccount returns a boolean if a field has been set.
func (o *InstanceTypes) HasAccount() bool {
	if o != nil && o.Account.IsSet() {
		return true
	}

	return false
}

// SetAccount gets a reference to the given NullableInlineResponse20082LoadBalancerInstanceSslCert and assigns it to the Account field.
func (o *InstanceTypes) SetAccount(v InlineResponse20082LoadBalancerInstanceSslCert) {
	o.Account.Set(&v)
}
// SetAccountNil sets the value for Account to be an explicit nil
func (o *InstanceTypes) SetAccountNil() {
	o.Account.Set(nil)
}

// UnsetAccount ensures that no value is present for Account, not even an explicit nil
func (o *InstanceTypes) UnsetAccount() {
	o.Account.Unset()
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *InstanceTypes) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceTypes) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *InstanceTypes) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *InstanceTypes) SetName(v string) {
	o.Name = &v
}

// GetLabels returns the Labels field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InstanceTypes) GetLabels() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InstanceTypes) GetLabelsOk() (*[]string, bool) {
	if o == nil || o.Labels == nil {
		return nil, false
	}
	return &o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *InstanceTypes) HasLabels() bool {
	if o != nil && o.Labels != nil {
		return true
	}

	return false
}

// SetLabels gets a reference to the given []string and assigns it to the Labels field.
func (o *InstanceTypes) SetLabels(v []string) {
	o.Labels = v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *InstanceTypes) GetCode() string {
	if o == nil || o.Code == nil {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceTypes) GetCodeOk() (*string, bool) {
	if o == nil || o.Code == nil {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *InstanceTypes) HasCode() bool {
	if o != nil && o.Code != nil {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *InstanceTypes) SetCode(v string) {
	o.Code = &v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InstanceTypes) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InstanceTypes) GetDescriptionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *InstanceTypes) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *InstanceTypes) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *InstanceTypes) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *InstanceTypes) UnsetDescription() {
	o.Description.Unset()
}

// GetProvisionTypeCode returns the ProvisionTypeCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InstanceTypes) GetProvisionTypeCode() string {
	if o == nil || o.ProvisionTypeCode.Get() == nil {
		var ret string
		return ret
	}
	return *o.ProvisionTypeCode.Get()
}

// GetProvisionTypeCodeOk returns a tuple with the ProvisionTypeCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InstanceTypes) GetProvisionTypeCodeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ProvisionTypeCode.Get(), o.ProvisionTypeCode.IsSet()
}

// HasProvisionTypeCode returns a boolean if a field has been set.
func (o *InstanceTypes) HasProvisionTypeCode() bool {
	if o != nil && o.ProvisionTypeCode.IsSet() {
		return true
	}

	return false
}

// SetProvisionTypeCode gets a reference to the given NullableString and assigns it to the ProvisionTypeCode field.
func (o *InstanceTypes) SetProvisionTypeCode(v string) {
	o.ProvisionTypeCode.Set(&v)
}
// SetProvisionTypeCodeNil sets the value for ProvisionTypeCode to be an explicit nil
func (o *InstanceTypes) SetProvisionTypeCodeNil() {
	o.ProvisionTypeCode.Set(nil)
}

// UnsetProvisionTypeCode ensures that no value is present for ProvisionTypeCode, not even an explicit nil
func (o *InstanceTypes) UnsetProvisionTypeCode() {
	o.ProvisionTypeCode.Unset()
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *InstanceTypes) GetCategory() string {
	if o == nil || o.Category == nil {
		var ret string
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceTypes) GetCategoryOk() (*string, bool) {
	if o == nil || o.Category == nil {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *InstanceTypes) HasCategory() bool {
	if o != nil && o.Category != nil {
		return true
	}

	return false
}

// SetCategory gets a reference to the given string and assigns it to the Category field.
func (o *InstanceTypes) SetCategory(v string) {
	o.Category = &v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *InstanceTypes) GetActive() bool {
	if o == nil || o.Active == nil {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceTypes) GetActiveOk() (*bool, bool) {
	if o == nil || o.Active == nil {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *InstanceTypes) HasActive() bool {
	if o != nil && o.Active != nil {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *InstanceTypes) SetActive(v bool) {
	o.Active = &v
}

// GetEnvironmentPrefix returns the EnvironmentPrefix field value if set, zero value otherwise.
func (o *InstanceTypes) GetEnvironmentPrefix() string {
	if o == nil || o.EnvironmentPrefix == nil {
		var ret string
		return ret
	}
	return *o.EnvironmentPrefix
}

// GetEnvironmentPrefixOk returns a tuple with the EnvironmentPrefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceTypes) GetEnvironmentPrefixOk() (*string, bool) {
	if o == nil || o.EnvironmentPrefix == nil {
		return nil, false
	}
	return o.EnvironmentPrefix, true
}

// HasEnvironmentPrefix returns a boolean if a field has been set.
func (o *InstanceTypes) HasEnvironmentPrefix() bool {
	if o != nil && o.EnvironmentPrefix != nil {
		return true
	}

	return false
}

// SetEnvironmentPrefix gets a reference to the given string and assigns it to the EnvironmentPrefix field.
func (o *InstanceTypes) SetEnvironmentPrefix(v string) {
	o.EnvironmentPrefix = &v
}

// GetVisibility returns the Visibility field value if set, zero value otherwise.
func (o *InstanceTypes) GetVisibility() string {
	if o == nil || o.Visibility == nil {
		var ret string
		return ret
	}
	return *o.Visibility
}

// GetVisibilityOk returns a tuple with the Visibility field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceTypes) GetVisibilityOk() (*string, bool) {
	if o == nil || o.Visibility == nil {
		return nil, false
	}
	return o.Visibility, true
}

// HasVisibility returns a boolean if a field has been set.
func (o *InstanceTypes) HasVisibility() bool {
	if o != nil && o.Visibility != nil {
		return true
	}

	return false
}

// SetVisibility gets a reference to the given string and assigns it to the Visibility field.
func (o *InstanceTypes) SetVisibility(v string) {
	o.Visibility = &v
}

// GetFeatured returns the Featured field value if set, zero value otherwise.
func (o *InstanceTypes) GetFeatured() bool {
	if o == nil || o.Featured == nil {
		var ret bool
		return ret
	}
	return *o.Featured
}

// GetFeaturedOk returns a tuple with the Featured field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceTypes) GetFeaturedOk() (*bool, bool) {
	if o == nil || o.Featured == nil {
		return nil, false
	}
	return o.Featured, true
}

// HasFeatured returns a boolean if a field has been set.
func (o *InstanceTypes) HasFeatured() bool {
	if o != nil && o.Featured != nil {
		return true
	}

	return false
}

// SetFeatured gets a reference to the given bool and assigns it to the Featured field.
func (o *InstanceTypes) SetFeatured(v bool) {
	o.Featured = &v
}

// GetVersions returns the Versions field value if set, zero value otherwise.
func (o *InstanceTypes) GetVersions() []string {
	if o == nil || o.Versions == nil {
		var ret []string
		return ret
	}
	return *o.Versions
}

// GetVersionsOk returns a tuple with the Versions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceTypes) GetVersionsOk() (*[]string, bool) {
	if o == nil || o.Versions == nil {
		return nil, false
	}
	return o.Versions, true
}

// HasVersions returns a boolean if a field has been set.
func (o *InstanceTypes) HasVersions() bool {
	if o != nil && o.Versions != nil {
		return true
	}

	return false
}

// SetVersions gets a reference to the given []string and assigns it to the Versions field.
func (o *InstanceTypes) SetVersions(v []string) {
	o.Versions = &v
}

// GetInstanceTypeLayouts returns the InstanceTypeLayouts field value if set, zero value otherwise.
func (o *InstanceTypes) GetInstanceTypeLayouts() []InstanceTypesInstanceTypeLayouts {
	if o == nil || o.InstanceTypeLayouts == nil {
		var ret []InstanceTypesInstanceTypeLayouts
		return ret
	}
	return *o.InstanceTypeLayouts
}

// GetInstanceTypeLayoutsOk returns a tuple with the InstanceTypeLayouts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceTypes) GetInstanceTypeLayoutsOk() (*[]InstanceTypesInstanceTypeLayouts, bool) {
	if o == nil || o.InstanceTypeLayouts == nil {
		return nil, false
	}
	return o.InstanceTypeLayouts, true
}

// HasInstanceTypeLayouts returns a boolean if a field has been set.
func (o *InstanceTypes) HasInstanceTypeLayouts() bool {
	if o != nil && o.InstanceTypeLayouts != nil {
		return true
	}

	return false
}

// SetInstanceTypeLayouts gets a reference to the given []InstanceTypesInstanceTypeLayouts and assigns it to the InstanceTypeLayouts field.
func (o *InstanceTypes) SetInstanceTypeLayouts(v []InstanceTypesInstanceTypeLayouts) {
	o.InstanceTypeLayouts = &v
}

// GetImagePath returns the ImagePath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InstanceTypes) GetImagePath() string {
	if o == nil || o.ImagePath.Get() == nil {
		var ret string
		return ret
	}
	return *o.ImagePath.Get()
}

// GetImagePathOk returns a tuple with the ImagePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InstanceTypes) GetImagePathOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ImagePath.Get(), o.ImagePath.IsSet()
}

// HasImagePath returns a boolean if a field has been set.
func (o *InstanceTypes) HasImagePath() bool {
	if o != nil && o.ImagePath.IsSet() {
		return true
	}

	return false
}

// SetImagePath gets a reference to the given NullableString and assigns it to the ImagePath field.
func (o *InstanceTypes) SetImagePath(v string) {
	o.ImagePath.Set(&v)
}
// SetImagePathNil sets the value for ImagePath to be an explicit nil
func (o *InstanceTypes) SetImagePathNil() {
	o.ImagePath.Set(nil)
}

// UnsetImagePath ensures that no value is present for ImagePath, not even an explicit nil
func (o *InstanceTypes) UnsetImagePath() {
	o.ImagePath.Unset()
}

// GetDarkImagePath returns the DarkImagePath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InstanceTypes) GetDarkImagePath() string {
	if o == nil || o.DarkImagePath.Get() == nil {
		var ret string
		return ret
	}
	return *o.DarkImagePath.Get()
}

// GetDarkImagePathOk returns a tuple with the DarkImagePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InstanceTypes) GetDarkImagePathOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DarkImagePath.Get(), o.DarkImagePath.IsSet()
}

// HasDarkImagePath returns a boolean if a field has been set.
func (o *InstanceTypes) HasDarkImagePath() bool {
	if o != nil && o.DarkImagePath.IsSet() {
		return true
	}

	return false
}

// SetDarkImagePath gets a reference to the given NullableString and assigns it to the DarkImagePath field.
func (o *InstanceTypes) SetDarkImagePath(v string) {
	o.DarkImagePath.Set(&v)
}
// SetDarkImagePathNil sets the value for DarkImagePath to be an explicit nil
func (o *InstanceTypes) SetDarkImagePathNil() {
	o.DarkImagePath.Set(nil)
}

// UnsetDarkImagePath ensures that no value is present for DarkImagePath, not even an explicit nil
func (o *InstanceTypes) UnsetDarkImagePath() {
	o.DarkImagePath.Unset()
}

func (o InstanceTypes) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Account.IsSet() {
		toSerialize["account"] = o.Account.Get()
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Labels != nil {
		toSerialize["labels"] = o.Labels
	}
	if o.Code != nil {
		toSerialize["code"] = o.Code
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.ProvisionTypeCode.IsSet() {
		toSerialize["provisionTypeCode"] = o.ProvisionTypeCode.Get()
	}
	if o.Category != nil {
		toSerialize["category"] = o.Category
	}
	if o.Active != nil {
		toSerialize["active"] = o.Active
	}
	if o.EnvironmentPrefix != nil {
		toSerialize["environmentPrefix"] = o.EnvironmentPrefix
	}
	if o.Visibility != nil {
		toSerialize["visibility"] = o.Visibility
	}
	if o.Featured != nil {
		toSerialize["featured"] = o.Featured
	}
	if o.Versions != nil {
		toSerialize["versions"] = o.Versions
	}
	if o.InstanceTypeLayouts != nil {
		toSerialize["instanceTypeLayouts"] = o.InstanceTypeLayouts
	}
	if o.ImagePath.IsSet() {
		toSerialize["imagePath"] = o.ImagePath.Get()
	}
	if o.DarkImagePath.IsSet() {
		toSerialize["darkImagePath"] = o.DarkImagePath.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableInstanceTypes struct {
	value *InstanceTypes
	isSet bool
}

func (v NullableInstanceTypes) Get() *InstanceTypes {
	return v.value
}

func (v *NullableInstanceTypes) Set(val *InstanceTypes) {
	v.value = val
	v.isSet = true
}

func (v NullableInstanceTypes) IsSet() bool {
	return v.isSet
}

func (v *NullableInstanceTypes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstanceTypes(val *InstanceTypes) *NullableInstanceTypes {
	return &NullableInstanceTypes{value: val, isSet: true}
}

func (v NullableInstanceTypes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstanceTypes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


