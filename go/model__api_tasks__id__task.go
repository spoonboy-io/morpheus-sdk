/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ApiTasksIdTask struct for ApiTasksIdTask
type ApiTasksIdTask struct {
	// A unique name for the task
	Name *string `json:"name,omitempty"`
	// A unique code for the task
	Code *string `json:"code,omitempty"`
	// Visibility
	Visibility *string `json:"visibility,omitempty"`
	TaskType *ApiTasksTaskTaskType `json:"taskType,omitempty"`
	// An array of Category labels for filtering
	Labels *[]string `json:"labels,omitempty"`
	// Map of options specific to each `task type`. eg. script
	TaskOptions *map[string]interface{} `json:"taskOptions,omitempty"`
	ResultType NullableString `json:"resultType,omitempty"`
	// The execution target. eg. local,remote,resource. The default value varies by task type. 
	ExecuteTarget *string `json:"executeTarget,omitempty"`
	// If the task should be retried or not.
	Retryable *bool `json:"retryable,omitempty"`
	// The number of times to retry.
	RetryCount *int32 `json:"retryCount,omitempty"`
	// The delay, between retries.
	RetryDelaySeconds *float32 `json:"retryDelaySeconds,omitempty"`
	File *ApiTasksTaskFile `json:"file,omitempty"`
	// Map containing Credential ID or the default {\"type\": \"local\"}  which means use the values set in the local task options username and password instead of associating a credential. 
	Credential *OneOfobjectobject `json:"credential,omitempty"`
}

// NewApiTasksIdTask instantiates a new ApiTasksIdTask object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiTasksIdTask() *ApiTasksIdTask {
	this := ApiTasksIdTask{}
	var visibility string = "private"
	this.Visibility = &visibility
	var retryable bool = false
	this.Retryable = &retryable
	return &this
}

// NewApiTasksIdTaskWithDefaults instantiates a new ApiTasksIdTask object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiTasksIdTaskWithDefaults() *ApiTasksIdTask {
	this := ApiTasksIdTask{}
	var visibility string = "private"
	this.Visibility = &visibility
	var retryable bool = false
	this.Retryable = &retryable
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ApiTasksIdTask) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiTasksIdTask) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ApiTasksIdTask) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ApiTasksIdTask) SetName(v string) {
	o.Name = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *ApiTasksIdTask) GetCode() string {
	if o == nil || o.Code == nil {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiTasksIdTask) GetCodeOk() (*string, bool) {
	if o == nil || o.Code == nil {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *ApiTasksIdTask) HasCode() bool {
	if o != nil && o.Code != nil {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *ApiTasksIdTask) SetCode(v string) {
	o.Code = &v
}

// GetVisibility returns the Visibility field value if set, zero value otherwise.
func (o *ApiTasksIdTask) GetVisibility() string {
	if o == nil || o.Visibility == nil {
		var ret string
		return ret
	}
	return *o.Visibility
}

// GetVisibilityOk returns a tuple with the Visibility field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiTasksIdTask) GetVisibilityOk() (*string, bool) {
	if o == nil || o.Visibility == nil {
		return nil, false
	}
	return o.Visibility, true
}

// HasVisibility returns a boolean if a field has been set.
func (o *ApiTasksIdTask) HasVisibility() bool {
	if o != nil && o.Visibility != nil {
		return true
	}

	return false
}

// SetVisibility gets a reference to the given string and assigns it to the Visibility field.
func (o *ApiTasksIdTask) SetVisibility(v string) {
	o.Visibility = &v
}

// GetTaskType returns the TaskType field value if set, zero value otherwise.
func (o *ApiTasksIdTask) GetTaskType() ApiTasksTaskTaskType {
	if o == nil || o.TaskType == nil {
		var ret ApiTasksTaskTaskType
		return ret
	}
	return *o.TaskType
}

// GetTaskTypeOk returns a tuple with the TaskType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiTasksIdTask) GetTaskTypeOk() (*ApiTasksTaskTaskType, bool) {
	if o == nil || o.TaskType == nil {
		return nil, false
	}
	return o.TaskType, true
}

// HasTaskType returns a boolean if a field has been set.
func (o *ApiTasksIdTask) HasTaskType() bool {
	if o != nil && o.TaskType != nil {
		return true
	}

	return false
}

// SetTaskType gets a reference to the given ApiTasksTaskTaskType and assigns it to the TaskType field.
func (o *ApiTasksIdTask) SetTaskType(v ApiTasksTaskTaskType) {
	o.TaskType = &v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *ApiTasksIdTask) GetLabels() []string {
	if o == nil || o.Labels == nil {
		var ret []string
		return ret
	}
	return *o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiTasksIdTask) GetLabelsOk() (*[]string, bool) {
	if o == nil || o.Labels == nil {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *ApiTasksIdTask) HasLabels() bool {
	if o != nil && o.Labels != nil {
		return true
	}

	return false
}

// SetLabels gets a reference to the given []string and assigns it to the Labels field.
func (o *ApiTasksIdTask) SetLabels(v []string) {
	o.Labels = &v
}

// GetTaskOptions returns the TaskOptions field value if set, zero value otherwise.
func (o *ApiTasksIdTask) GetTaskOptions() map[string]interface{} {
	if o == nil || o.TaskOptions == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.TaskOptions
}

// GetTaskOptionsOk returns a tuple with the TaskOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiTasksIdTask) GetTaskOptionsOk() (*map[string]interface{}, bool) {
	if o == nil || o.TaskOptions == nil {
		return nil, false
	}
	return o.TaskOptions, true
}

// HasTaskOptions returns a boolean if a field has been set.
func (o *ApiTasksIdTask) HasTaskOptions() bool {
	if o != nil && o.TaskOptions != nil {
		return true
	}

	return false
}

// SetTaskOptions gets a reference to the given map[string]interface{} and assigns it to the TaskOptions field.
func (o *ApiTasksIdTask) SetTaskOptions(v map[string]interface{}) {
	o.TaskOptions = &v
}

// GetResultType returns the ResultType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApiTasksIdTask) GetResultType() string {
	if o == nil || o.ResultType.Get() == nil {
		var ret string
		return ret
	}
	return *o.ResultType.Get()
}

// GetResultTypeOk returns a tuple with the ResultType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApiTasksIdTask) GetResultTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ResultType.Get(), o.ResultType.IsSet()
}

// HasResultType returns a boolean if a field has been set.
func (o *ApiTasksIdTask) HasResultType() bool {
	if o != nil && o.ResultType.IsSet() {
		return true
	}

	return false
}

// SetResultType gets a reference to the given NullableString and assigns it to the ResultType field.
func (o *ApiTasksIdTask) SetResultType(v string) {
	o.ResultType.Set(&v)
}
// SetResultTypeNil sets the value for ResultType to be an explicit nil
func (o *ApiTasksIdTask) SetResultTypeNil() {
	o.ResultType.Set(nil)
}

// UnsetResultType ensures that no value is present for ResultType, not even an explicit nil
func (o *ApiTasksIdTask) UnsetResultType() {
	o.ResultType.Unset()
}

// GetExecuteTarget returns the ExecuteTarget field value if set, zero value otherwise.
func (o *ApiTasksIdTask) GetExecuteTarget() string {
	if o == nil || o.ExecuteTarget == nil {
		var ret string
		return ret
	}
	return *o.ExecuteTarget
}

// GetExecuteTargetOk returns a tuple with the ExecuteTarget field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiTasksIdTask) GetExecuteTargetOk() (*string, bool) {
	if o == nil || o.ExecuteTarget == nil {
		return nil, false
	}
	return o.ExecuteTarget, true
}

// HasExecuteTarget returns a boolean if a field has been set.
func (o *ApiTasksIdTask) HasExecuteTarget() bool {
	if o != nil && o.ExecuteTarget != nil {
		return true
	}

	return false
}

// SetExecuteTarget gets a reference to the given string and assigns it to the ExecuteTarget field.
func (o *ApiTasksIdTask) SetExecuteTarget(v string) {
	o.ExecuteTarget = &v
}

// GetRetryable returns the Retryable field value if set, zero value otherwise.
func (o *ApiTasksIdTask) GetRetryable() bool {
	if o == nil || o.Retryable == nil {
		var ret bool
		return ret
	}
	return *o.Retryable
}

// GetRetryableOk returns a tuple with the Retryable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiTasksIdTask) GetRetryableOk() (*bool, bool) {
	if o == nil || o.Retryable == nil {
		return nil, false
	}
	return o.Retryable, true
}

// HasRetryable returns a boolean if a field has been set.
func (o *ApiTasksIdTask) HasRetryable() bool {
	if o != nil && o.Retryable != nil {
		return true
	}

	return false
}

// SetRetryable gets a reference to the given bool and assigns it to the Retryable field.
func (o *ApiTasksIdTask) SetRetryable(v bool) {
	o.Retryable = &v
}

// GetRetryCount returns the RetryCount field value if set, zero value otherwise.
func (o *ApiTasksIdTask) GetRetryCount() int32 {
	if o == nil || o.RetryCount == nil {
		var ret int32
		return ret
	}
	return *o.RetryCount
}

// GetRetryCountOk returns a tuple with the RetryCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiTasksIdTask) GetRetryCountOk() (*int32, bool) {
	if o == nil || o.RetryCount == nil {
		return nil, false
	}
	return o.RetryCount, true
}

// HasRetryCount returns a boolean if a field has been set.
func (o *ApiTasksIdTask) HasRetryCount() bool {
	if o != nil && o.RetryCount != nil {
		return true
	}

	return false
}

// SetRetryCount gets a reference to the given int32 and assigns it to the RetryCount field.
func (o *ApiTasksIdTask) SetRetryCount(v int32) {
	o.RetryCount = &v
}

// GetRetryDelaySeconds returns the RetryDelaySeconds field value if set, zero value otherwise.
func (o *ApiTasksIdTask) GetRetryDelaySeconds() float32 {
	if o == nil || o.RetryDelaySeconds == nil {
		var ret float32
		return ret
	}
	return *o.RetryDelaySeconds
}

// GetRetryDelaySecondsOk returns a tuple with the RetryDelaySeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiTasksIdTask) GetRetryDelaySecondsOk() (*float32, bool) {
	if o == nil || o.RetryDelaySeconds == nil {
		return nil, false
	}
	return o.RetryDelaySeconds, true
}

// HasRetryDelaySeconds returns a boolean if a field has been set.
func (o *ApiTasksIdTask) HasRetryDelaySeconds() bool {
	if o != nil && o.RetryDelaySeconds != nil {
		return true
	}

	return false
}

// SetRetryDelaySeconds gets a reference to the given float32 and assigns it to the RetryDelaySeconds field.
func (o *ApiTasksIdTask) SetRetryDelaySeconds(v float32) {
	o.RetryDelaySeconds = &v
}

// GetFile returns the File field value if set, zero value otherwise.
func (o *ApiTasksIdTask) GetFile() ApiTasksTaskFile {
	if o == nil || o.File == nil {
		var ret ApiTasksTaskFile
		return ret
	}
	return *o.File
}

// GetFileOk returns a tuple with the File field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiTasksIdTask) GetFileOk() (*ApiTasksTaskFile, bool) {
	if o == nil || o.File == nil {
		return nil, false
	}
	return o.File, true
}

// HasFile returns a boolean if a field has been set.
func (o *ApiTasksIdTask) HasFile() bool {
	if o != nil && o.File != nil {
		return true
	}

	return false
}

// SetFile gets a reference to the given ApiTasksTaskFile and assigns it to the File field.
func (o *ApiTasksIdTask) SetFile(v ApiTasksTaskFile) {
	o.File = &v
}

// GetCredential returns the Credential field value if set, zero value otherwise.
func (o *ApiTasksIdTask) GetCredential() OneOfobjectobject {
	if o == nil || o.Credential == nil {
		var ret OneOfobjectobject
		return ret
	}
	return *o.Credential
}

// GetCredentialOk returns a tuple with the Credential field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiTasksIdTask) GetCredentialOk() (*OneOfobjectobject, bool) {
	if o == nil || o.Credential == nil {
		return nil, false
	}
	return o.Credential, true
}

// HasCredential returns a boolean if a field has been set.
func (o *ApiTasksIdTask) HasCredential() bool {
	if o != nil && o.Credential != nil {
		return true
	}

	return false
}

// SetCredential gets a reference to the given OneOfobjectobject and assigns it to the Credential field.
func (o *ApiTasksIdTask) SetCredential(v OneOfobjectobject) {
	o.Credential = &v
}

func (o ApiTasksIdTask) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Code != nil {
		toSerialize["code"] = o.Code
	}
	if o.Visibility != nil {
		toSerialize["visibility"] = o.Visibility
	}
	if o.TaskType != nil {
		toSerialize["taskType"] = o.TaskType
	}
	if o.Labels != nil {
		toSerialize["labels"] = o.Labels
	}
	if o.TaskOptions != nil {
		toSerialize["taskOptions"] = o.TaskOptions
	}
	if o.ResultType.IsSet() {
		toSerialize["resultType"] = o.ResultType.Get()
	}
	if o.ExecuteTarget != nil {
		toSerialize["executeTarget"] = o.ExecuteTarget
	}
	if o.Retryable != nil {
		toSerialize["retryable"] = o.Retryable
	}
	if o.RetryCount != nil {
		toSerialize["retryCount"] = o.RetryCount
	}
	if o.RetryDelaySeconds != nil {
		toSerialize["retryDelaySeconds"] = o.RetryDelaySeconds
	}
	if o.File != nil {
		toSerialize["file"] = o.File
	}
	if o.Credential != nil {
		toSerialize["credential"] = o.Credential
	}
	return json.Marshal(toSerialize)
}

type NullableApiTasksIdTask struct {
	value *ApiTasksIdTask
	isSet bool
}

func (v NullableApiTasksIdTask) Get() *ApiTasksIdTask {
	return v.value
}

func (v *NullableApiTasksIdTask) Set(val *ApiTasksIdTask) {
	v.value = val
	v.isSet = true
}

func (v NullableApiTasksIdTask) IsSet() bool {
	return v.isSet
}

func (v *NullableApiTasksIdTask) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiTasksIdTask(val *ApiTasksIdTask) *NullableApiTasksIdTask {
	return &NullableApiTasksIdTask{value: val, isSet: true}
}

func (v NullableApiTasksIdTask) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiTasksIdTask) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


