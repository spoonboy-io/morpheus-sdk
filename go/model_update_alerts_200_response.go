/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 6.1.1
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UpdateAlerts200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateAlerts200Response{}

// UpdateAlerts200Response struct for UpdateAlerts200Response
type UpdateAlerts200Response struct {
	Success *bool `json:"success,omitempty"`
	Alert *Alert `json:"alert,omitempty"`
}

// NewUpdateAlerts200Response instantiates a new UpdateAlerts200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateAlerts200Response() *UpdateAlerts200Response {
	this := UpdateAlerts200Response{}
	return &this
}

// NewUpdateAlerts200ResponseWithDefaults instantiates a new UpdateAlerts200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateAlerts200ResponseWithDefaults() *UpdateAlerts200Response {
	this := UpdateAlerts200Response{}
	return &this
}

// GetSuccess returns the Success field value if set, zero value otherwise.
func (o *UpdateAlerts200Response) GetSuccess() bool {
	if o == nil || IsNil(o.Success) {
		var ret bool
		return ret
	}
	return *o.Success
}

// GetSuccessOk returns a tuple with the Success field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateAlerts200Response) GetSuccessOk() (*bool, bool) {
	if o == nil || IsNil(o.Success) {
		return nil, false
	}
	return o.Success, true
}

// HasSuccess returns a boolean if a field has been set.
func (o *UpdateAlerts200Response) HasSuccess() bool {
	if o != nil && !IsNil(o.Success) {
		return true
	}

	return false
}

// SetSuccess gets a reference to the given bool and assigns it to the Success field.
func (o *UpdateAlerts200Response) SetSuccess(v bool) {
	o.Success = &v
}

// GetAlert returns the Alert field value if set, zero value otherwise.
func (o *UpdateAlerts200Response) GetAlert() Alert {
	if o == nil || IsNil(o.Alert) {
		var ret Alert
		return ret
	}
	return *o.Alert
}

// GetAlertOk returns a tuple with the Alert field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateAlerts200Response) GetAlertOk() (*Alert, bool) {
	if o == nil || IsNil(o.Alert) {
		return nil, false
	}
	return o.Alert, true
}

// HasAlert returns a boolean if a field has been set.
func (o *UpdateAlerts200Response) HasAlert() bool {
	if o != nil && !IsNil(o.Alert) {
		return true
	}

	return false
}

// SetAlert gets a reference to the given Alert and assigns it to the Alert field.
func (o *UpdateAlerts200Response) SetAlert(v Alert) {
	o.Alert = &v
}

func (o UpdateAlerts200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateAlerts200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Success) {
		toSerialize["success"] = o.Success
	}
	if !IsNil(o.Alert) {
		toSerialize["alert"] = o.Alert
	}
	return toSerialize, nil
}

type NullableUpdateAlerts200Response struct {
	value *UpdateAlerts200Response
	isSet bool
}

func (v NullableUpdateAlerts200Response) Get() *UpdateAlerts200Response {
	return v.value
}

func (v *NullableUpdateAlerts200Response) Set(val *UpdateAlerts200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateAlerts200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateAlerts200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateAlerts200Response(val *UpdateAlerts200Response) *NullableUpdateAlerts200Response {
	return &NullableUpdateAlerts200Response{value: val, isSet: true}
}

func (v NullableUpdateAlerts200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateAlerts200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


