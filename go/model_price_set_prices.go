/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// PriceSetPrices struct for PriceSetPrices
type PriceSetPrices struct {
	Id *int64 `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Code *string `json:"code,omitempty"`
	Active *bool `json:"active,omitempty"`
	PriceType *string `json:"priceType,omitempty"`
	PriceUnit *string `json:"priceUnit,omitempty"`
	AdditionalPriceUnit NullableString `json:"additionalPriceUnit,omitempty"`
	Price NullableFloat32 `json:"price,omitempty"`
	CustomPrice NullableFloat32 `json:"customPrice,omitempty"`
	MarkupType NullableString `json:"markupType,omitempty"`
	Markup *int64 `json:"markup,omitempty"`
	MarkupPercent NullableFloat32 `json:"markupPercent,omitempty"`
	Cost NullableFloat32 `json:"cost,omitempty"`
	Currency NullableString `json:"currency,omitempty"`
	IncurCharges *string `json:"incurCharges,omitempty"`
	Platform NullableString `json:"platform,omitempty"`
	Software NullableString `json:"software,omitempty"`
	VolumeType NullablePriceSetVolumeType `json:"volumeType,omitempty"`
	Datastore NullableString `json:"datastore,omitempty"`
	CrossCloudApply NullableBool `json:"crossCloudApply,omitempty"`
	Account NullableString `json:"account,omitempty"`
}

// NewPriceSetPrices instantiates a new PriceSetPrices object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPriceSetPrices() *PriceSetPrices {
	this := PriceSetPrices{}
	return &this
}

// NewPriceSetPricesWithDefaults instantiates a new PriceSetPrices object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPriceSetPricesWithDefaults() *PriceSetPrices {
	this := PriceSetPrices{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PriceSetPrices) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceSetPrices) GetIdOk() (*int64, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PriceSetPrices) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *PriceSetPrices) SetId(v int64) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PriceSetPrices) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceSetPrices) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PriceSetPrices) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PriceSetPrices) SetName(v string) {
	o.Name = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *PriceSetPrices) GetCode() string {
	if o == nil || o.Code == nil {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceSetPrices) GetCodeOk() (*string, bool) {
	if o == nil || o.Code == nil {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *PriceSetPrices) HasCode() bool {
	if o != nil && o.Code != nil {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *PriceSetPrices) SetCode(v string) {
	o.Code = &v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *PriceSetPrices) GetActive() bool {
	if o == nil || o.Active == nil {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceSetPrices) GetActiveOk() (*bool, bool) {
	if o == nil || o.Active == nil {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *PriceSetPrices) HasActive() bool {
	if o != nil && o.Active != nil {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *PriceSetPrices) SetActive(v bool) {
	o.Active = &v
}

// GetPriceType returns the PriceType field value if set, zero value otherwise.
func (o *PriceSetPrices) GetPriceType() string {
	if o == nil || o.PriceType == nil {
		var ret string
		return ret
	}
	return *o.PriceType
}

// GetPriceTypeOk returns a tuple with the PriceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceSetPrices) GetPriceTypeOk() (*string, bool) {
	if o == nil || o.PriceType == nil {
		return nil, false
	}
	return o.PriceType, true
}

// HasPriceType returns a boolean if a field has been set.
func (o *PriceSetPrices) HasPriceType() bool {
	if o != nil && o.PriceType != nil {
		return true
	}

	return false
}

// SetPriceType gets a reference to the given string and assigns it to the PriceType field.
func (o *PriceSetPrices) SetPriceType(v string) {
	o.PriceType = &v
}

// GetPriceUnit returns the PriceUnit field value if set, zero value otherwise.
func (o *PriceSetPrices) GetPriceUnit() string {
	if o == nil || o.PriceUnit == nil {
		var ret string
		return ret
	}
	return *o.PriceUnit
}

// GetPriceUnitOk returns a tuple with the PriceUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceSetPrices) GetPriceUnitOk() (*string, bool) {
	if o == nil || o.PriceUnit == nil {
		return nil, false
	}
	return o.PriceUnit, true
}

// HasPriceUnit returns a boolean if a field has been set.
func (o *PriceSetPrices) HasPriceUnit() bool {
	if o != nil && o.PriceUnit != nil {
		return true
	}

	return false
}

// SetPriceUnit gets a reference to the given string and assigns it to the PriceUnit field.
func (o *PriceSetPrices) SetPriceUnit(v string) {
	o.PriceUnit = &v
}

// GetAdditionalPriceUnit returns the AdditionalPriceUnit field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PriceSetPrices) GetAdditionalPriceUnit() string {
	if o == nil || o.AdditionalPriceUnit.Get() == nil {
		var ret string
		return ret
	}
	return *o.AdditionalPriceUnit.Get()
}

// GetAdditionalPriceUnitOk returns a tuple with the AdditionalPriceUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PriceSetPrices) GetAdditionalPriceUnitOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AdditionalPriceUnit.Get(), o.AdditionalPriceUnit.IsSet()
}

// HasAdditionalPriceUnit returns a boolean if a field has been set.
func (o *PriceSetPrices) HasAdditionalPriceUnit() bool {
	if o != nil && o.AdditionalPriceUnit.IsSet() {
		return true
	}

	return false
}

// SetAdditionalPriceUnit gets a reference to the given NullableString and assigns it to the AdditionalPriceUnit field.
func (o *PriceSetPrices) SetAdditionalPriceUnit(v string) {
	o.AdditionalPriceUnit.Set(&v)
}
// SetAdditionalPriceUnitNil sets the value for AdditionalPriceUnit to be an explicit nil
func (o *PriceSetPrices) SetAdditionalPriceUnitNil() {
	o.AdditionalPriceUnit.Set(nil)
}

// UnsetAdditionalPriceUnit ensures that no value is present for AdditionalPriceUnit, not even an explicit nil
func (o *PriceSetPrices) UnsetAdditionalPriceUnit() {
	o.AdditionalPriceUnit.Unset()
}

// GetPrice returns the Price field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PriceSetPrices) GetPrice() float32 {
	if o == nil || o.Price.Get() == nil {
		var ret float32
		return ret
	}
	return *o.Price.Get()
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PriceSetPrices) GetPriceOk() (*float32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Price.Get(), o.Price.IsSet()
}

// HasPrice returns a boolean if a field has been set.
func (o *PriceSetPrices) HasPrice() bool {
	if o != nil && o.Price.IsSet() {
		return true
	}

	return false
}

// SetPrice gets a reference to the given NullableFloat32 and assigns it to the Price field.
func (o *PriceSetPrices) SetPrice(v float32) {
	o.Price.Set(&v)
}
// SetPriceNil sets the value for Price to be an explicit nil
func (o *PriceSetPrices) SetPriceNil() {
	o.Price.Set(nil)
}

// UnsetPrice ensures that no value is present for Price, not even an explicit nil
func (o *PriceSetPrices) UnsetPrice() {
	o.Price.Unset()
}

// GetCustomPrice returns the CustomPrice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PriceSetPrices) GetCustomPrice() float32 {
	if o == nil || o.CustomPrice.Get() == nil {
		var ret float32
		return ret
	}
	return *o.CustomPrice.Get()
}

// GetCustomPriceOk returns a tuple with the CustomPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PriceSetPrices) GetCustomPriceOk() (*float32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CustomPrice.Get(), o.CustomPrice.IsSet()
}

// HasCustomPrice returns a boolean if a field has been set.
func (o *PriceSetPrices) HasCustomPrice() bool {
	if o != nil && o.CustomPrice.IsSet() {
		return true
	}

	return false
}

// SetCustomPrice gets a reference to the given NullableFloat32 and assigns it to the CustomPrice field.
func (o *PriceSetPrices) SetCustomPrice(v float32) {
	o.CustomPrice.Set(&v)
}
// SetCustomPriceNil sets the value for CustomPrice to be an explicit nil
func (o *PriceSetPrices) SetCustomPriceNil() {
	o.CustomPrice.Set(nil)
}

// UnsetCustomPrice ensures that no value is present for CustomPrice, not even an explicit nil
func (o *PriceSetPrices) UnsetCustomPrice() {
	o.CustomPrice.Unset()
}

// GetMarkupType returns the MarkupType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PriceSetPrices) GetMarkupType() string {
	if o == nil || o.MarkupType.Get() == nil {
		var ret string
		return ret
	}
	return *o.MarkupType.Get()
}

// GetMarkupTypeOk returns a tuple with the MarkupType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PriceSetPrices) GetMarkupTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MarkupType.Get(), o.MarkupType.IsSet()
}

// HasMarkupType returns a boolean if a field has been set.
func (o *PriceSetPrices) HasMarkupType() bool {
	if o != nil && o.MarkupType.IsSet() {
		return true
	}

	return false
}

// SetMarkupType gets a reference to the given NullableString and assigns it to the MarkupType field.
func (o *PriceSetPrices) SetMarkupType(v string) {
	o.MarkupType.Set(&v)
}
// SetMarkupTypeNil sets the value for MarkupType to be an explicit nil
func (o *PriceSetPrices) SetMarkupTypeNil() {
	o.MarkupType.Set(nil)
}

// UnsetMarkupType ensures that no value is present for MarkupType, not even an explicit nil
func (o *PriceSetPrices) UnsetMarkupType() {
	o.MarkupType.Unset()
}

// GetMarkup returns the Markup field value if set, zero value otherwise.
func (o *PriceSetPrices) GetMarkup() int64 {
	if o == nil || o.Markup == nil {
		var ret int64
		return ret
	}
	return *o.Markup
}

// GetMarkupOk returns a tuple with the Markup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceSetPrices) GetMarkupOk() (*int64, bool) {
	if o == nil || o.Markup == nil {
		return nil, false
	}
	return o.Markup, true
}

// HasMarkup returns a boolean if a field has been set.
func (o *PriceSetPrices) HasMarkup() bool {
	if o != nil && o.Markup != nil {
		return true
	}

	return false
}

// SetMarkup gets a reference to the given int64 and assigns it to the Markup field.
func (o *PriceSetPrices) SetMarkup(v int64) {
	o.Markup = &v
}

// GetMarkupPercent returns the MarkupPercent field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PriceSetPrices) GetMarkupPercent() float32 {
	if o == nil || o.MarkupPercent.Get() == nil {
		var ret float32
		return ret
	}
	return *o.MarkupPercent.Get()
}

// GetMarkupPercentOk returns a tuple with the MarkupPercent field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PriceSetPrices) GetMarkupPercentOk() (*float32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MarkupPercent.Get(), o.MarkupPercent.IsSet()
}

// HasMarkupPercent returns a boolean if a field has been set.
func (o *PriceSetPrices) HasMarkupPercent() bool {
	if o != nil && o.MarkupPercent.IsSet() {
		return true
	}

	return false
}

// SetMarkupPercent gets a reference to the given NullableFloat32 and assigns it to the MarkupPercent field.
func (o *PriceSetPrices) SetMarkupPercent(v float32) {
	o.MarkupPercent.Set(&v)
}
// SetMarkupPercentNil sets the value for MarkupPercent to be an explicit nil
func (o *PriceSetPrices) SetMarkupPercentNil() {
	o.MarkupPercent.Set(nil)
}

// UnsetMarkupPercent ensures that no value is present for MarkupPercent, not even an explicit nil
func (o *PriceSetPrices) UnsetMarkupPercent() {
	o.MarkupPercent.Unset()
}

// GetCost returns the Cost field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PriceSetPrices) GetCost() float32 {
	if o == nil || o.Cost.Get() == nil {
		var ret float32
		return ret
	}
	return *o.Cost.Get()
}

// GetCostOk returns a tuple with the Cost field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PriceSetPrices) GetCostOk() (*float32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Cost.Get(), o.Cost.IsSet()
}

// HasCost returns a boolean if a field has been set.
func (o *PriceSetPrices) HasCost() bool {
	if o != nil && o.Cost.IsSet() {
		return true
	}

	return false
}

// SetCost gets a reference to the given NullableFloat32 and assigns it to the Cost field.
func (o *PriceSetPrices) SetCost(v float32) {
	o.Cost.Set(&v)
}
// SetCostNil sets the value for Cost to be an explicit nil
func (o *PriceSetPrices) SetCostNil() {
	o.Cost.Set(nil)
}

// UnsetCost ensures that no value is present for Cost, not even an explicit nil
func (o *PriceSetPrices) UnsetCost() {
	o.Cost.Unset()
}

// GetCurrency returns the Currency field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PriceSetPrices) GetCurrency() string {
	if o == nil || o.Currency.Get() == nil {
		var ret string
		return ret
	}
	return *o.Currency.Get()
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PriceSetPrices) GetCurrencyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Currency.Get(), o.Currency.IsSet()
}

// HasCurrency returns a boolean if a field has been set.
func (o *PriceSetPrices) HasCurrency() bool {
	if o != nil && o.Currency.IsSet() {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given NullableString and assigns it to the Currency field.
func (o *PriceSetPrices) SetCurrency(v string) {
	o.Currency.Set(&v)
}
// SetCurrencyNil sets the value for Currency to be an explicit nil
func (o *PriceSetPrices) SetCurrencyNil() {
	o.Currency.Set(nil)
}

// UnsetCurrency ensures that no value is present for Currency, not even an explicit nil
func (o *PriceSetPrices) UnsetCurrency() {
	o.Currency.Unset()
}

// GetIncurCharges returns the IncurCharges field value if set, zero value otherwise.
func (o *PriceSetPrices) GetIncurCharges() string {
	if o == nil || o.IncurCharges == nil {
		var ret string
		return ret
	}
	return *o.IncurCharges
}

// GetIncurChargesOk returns a tuple with the IncurCharges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceSetPrices) GetIncurChargesOk() (*string, bool) {
	if o == nil || o.IncurCharges == nil {
		return nil, false
	}
	return o.IncurCharges, true
}

// HasIncurCharges returns a boolean if a field has been set.
func (o *PriceSetPrices) HasIncurCharges() bool {
	if o != nil && o.IncurCharges != nil {
		return true
	}

	return false
}

// SetIncurCharges gets a reference to the given string and assigns it to the IncurCharges field.
func (o *PriceSetPrices) SetIncurCharges(v string) {
	o.IncurCharges = &v
}

// GetPlatform returns the Platform field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PriceSetPrices) GetPlatform() string {
	if o == nil || o.Platform.Get() == nil {
		var ret string
		return ret
	}
	return *o.Platform.Get()
}

// GetPlatformOk returns a tuple with the Platform field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PriceSetPrices) GetPlatformOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Platform.Get(), o.Platform.IsSet()
}

// HasPlatform returns a boolean if a field has been set.
func (o *PriceSetPrices) HasPlatform() bool {
	if o != nil && o.Platform.IsSet() {
		return true
	}

	return false
}

// SetPlatform gets a reference to the given NullableString and assigns it to the Platform field.
func (o *PriceSetPrices) SetPlatform(v string) {
	o.Platform.Set(&v)
}
// SetPlatformNil sets the value for Platform to be an explicit nil
func (o *PriceSetPrices) SetPlatformNil() {
	o.Platform.Set(nil)
}

// UnsetPlatform ensures that no value is present for Platform, not even an explicit nil
func (o *PriceSetPrices) UnsetPlatform() {
	o.Platform.Unset()
}

// GetSoftware returns the Software field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PriceSetPrices) GetSoftware() string {
	if o == nil || o.Software.Get() == nil {
		var ret string
		return ret
	}
	return *o.Software.Get()
}

// GetSoftwareOk returns a tuple with the Software field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PriceSetPrices) GetSoftwareOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Software.Get(), o.Software.IsSet()
}

// HasSoftware returns a boolean if a field has been set.
func (o *PriceSetPrices) HasSoftware() bool {
	if o != nil && o.Software.IsSet() {
		return true
	}

	return false
}

// SetSoftware gets a reference to the given NullableString and assigns it to the Software field.
func (o *PriceSetPrices) SetSoftware(v string) {
	o.Software.Set(&v)
}
// SetSoftwareNil sets the value for Software to be an explicit nil
func (o *PriceSetPrices) SetSoftwareNil() {
	o.Software.Set(nil)
}

// UnsetSoftware ensures that no value is present for Software, not even an explicit nil
func (o *PriceSetPrices) UnsetSoftware() {
	o.Software.Unset()
}

// GetVolumeType returns the VolumeType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PriceSetPrices) GetVolumeType() PriceSetVolumeType {
	if o == nil || o.VolumeType.Get() == nil {
		var ret PriceSetVolumeType
		return ret
	}
	return *o.VolumeType.Get()
}

// GetVolumeTypeOk returns a tuple with the VolumeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PriceSetPrices) GetVolumeTypeOk() (*PriceSetVolumeType, bool) {
	if o == nil  {
		return nil, false
	}
	return o.VolumeType.Get(), o.VolumeType.IsSet()
}

// HasVolumeType returns a boolean if a field has been set.
func (o *PriceSetPrices) HasVolumeType() bool {
	if o != nil && o.VolumeType.IsSet() {
		return true
	}

	return false
}

// SetVolumeType gets a reference to the given NullablePriceSetVolumeType and assigns it to the VolumeType field.
func (o *PriceSetPrices) SetVolumeType(v PriceSetVolumeType) {
	o.VolumeType.Set(&v)
}
// SetVolumeTypeNil sets the value for VolumeType to be an explicit nil
func (o *PriceSetPrices) SetVolumeTypeNil() {
	o.VolumeType.Set(nil)
}

// UnsetVolumeType ensures that no value is present for VolumeType, not even an explicit nil
func (o *PriceSetPrices) UnsetVolumeType() {
	o.VolumeType.Unset()
}

// GetDatastore returns the Datastore field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PriceSetPrices) GetDatastore() string {
	if o == nil || o.Datastore.Get() == nil {
		var ret string
		return ret
	}
	return *o.Datastore.Get()
}

// GetDatastoreOk returns a tuple with the Datastore field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PriceSetPrices) GetDatastoreOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Datastore.Get(), o.Datastore.IsSet()
}

// HasDatastore returns a boolean if a field has been set.
func (o *PriceSetPrices) HasDatastore() bool {
	if o != nil && o.Datastore.IsSet() {
		return true
	}

	return false
}

// SetDatastore gets a reference to the given NullableString and assigns it to the Datastore field.
func (o *PriceSetPrices) SetDatastore(v string) {
	o.Datastore.Set(&v)
}
// SetDatastoreNil sets the value for Datastore to be an explicit nil
func (o *PriceSetPrices) SetDatastoreNil() {
	o.Datastore.Set(nil)
}

// UnsetDatastore ensures that no value is present for Datastore, not even an explicit nil
func (o *PriceSetPrices) UnsetDatastore() {
	o.Datastore.Unset()
}

// GetCrossCloudApply returns the CrossCloudApply field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PriceSetPrices) GetCrossCloudApply() bool {
	if o == nil || o.CrossCloudApply.Get() == nil {
		var ret bool
		return ret
	}
	return *o.CrossCloudApply.Get()
}

// GetCrossCloudApplyOk returns a tuple with the CrossCloudApply field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PriceSetPrices) GetCrossCloudApplyOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CrossCloudApply.Get(), o.CrossCloudApply.IsSet()
}

// HasCrossCloudApply returns a boolean if a field has been set.
func (o *PriceSetPrices) HasCrossCloudApply() bool {
	if o != nil && o.CrossCloudApply.IsSet() {
		return true
	}

	return false
}

// SetCrossCloudApply gets a reference to the given NullableBool and assigns it to the CrossCloudApply field.
func (o *PriceSetPrices) SetCrossCloudApply(v bool) {
	o.CrossCloudApply.Set(&v)
}
// SetCrossCloudApplyNil sets the value for CrossCloudApply to be an explicit nil
func (o *PriceSetPrices) SetCrossCloudApplyNil() {
	o.CrossCloudApply.Set(nil)
}

// UnsetCrossCloudApply ensures that no value is present for CrossCloudApply, not even an explicit nil
func (o *PriceSetPrices) UnsetCrossCloudApply() {
	o.CrossCloudApply.Unset()
}

// GetAccount returns the Account field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PriceSetPrices) GetAccount() string {
	if o == nil || o.Account.Get() == nil {
		var ret string
		return ret
	}
	return *o.Account.Get()
}

// GetAccountOk returns a tuple with the Account field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PriceSetPrices) GetAccountOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Account.Get(), o.Account.IsSet()
}

// HasAccount returns a boolean if a field has been set.
func (o *PriceSetPrices) HasAccount() bool {
	if o != nil && o.Account.IsSet() {
		return true
	}

	return false
}

// SetAccount gets a reference to the given NullableString and assigns it to the Account field.
func (o *PriceSetPrices) SetAccount(v string) {
	o.Account.Set(&v)
}
// SetAccountNil sets the value for Account to be an explicit nil
func (o *PriceSetPrices) SetAccountNil() {
	o.Account.Set(nil)
}

// UnsetAccount ensures that no value is present for Account, not even an explicit nil
func (o *PriceSetPrices) UnsetAccount() {
	o.Account.Unset()
}

func (o PriceSetPrices) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Code != nil {
		toSerialize["code"] = o.Code
	}
	if o.Active != nil {
		toSerialize["active"] = o.Active
	}
	if o.PriceType != nil {
		toSerialize["priceType"] = o.PriceType
	}
	if o.PriceUnit != nil {
		toSerialize["priceUnit"] = o.PriceUnit
	}
	if o.AdditionalPriceUnit.IsSet() {
		toSerialize["additionalPriceUnit"] = o.AdditionalPriceUnit.Get()
	}
	if o.Price.IsSet() {
		toSerialize["price"] = o.Price.Get()
	}
	if o.CustomPrice.IsSet() {
		toSerialize["customPrice"] = o.CustomPrice.Get()
	}
	if o.MarkupType.IsSet() {
		toSerialize["markupType"] = o.MarkupType.Get()
	}
	if o.Markup != nil {
		toSerialize["markup"] = o.Markup
	}
	if o.MarkupPercent.IsSet() {
		toSerialize["markupPercent"] = o.MarkupPercent.Get()
	}
	if o.Cost.IsSet() {
		toSerialize["cost"] = o.Cost.Get()
	}
	if o.Currency.IsSet() {
		toSerialize["currency"] = o.Currency.Get()
	}
	if o.IncurCharges != nil {
		toSerialize["incurCharges"] = o.IncurCharges
	}
	if o.Platform.IsSet() {
		toSerialize["platform"] = o.Platform.Get()
	}
	if o.Software.IsSet() {
		toSerialize["software"] = o.Software.Get()
	}
	if o.VolumeType.IsSet() {
		toSerialize["volumeType"] = o.VolumeType.Get()
	}
	if o.Datastore.IsSet() {
		toSerialize["datastore"] = o.Datastore.Get()
	}
	if o.CrossCloudApply.IsSet() {
		toSerialize["crossCloudApply"] = o.CrossCloudApply.Get()
	}
	if o.Account.IsSet() {
		toSerialize["account"] = o.Account.Get()
	}
	return json.Marshal(toSerialize)
}

type NullablePriceSetPrices struct {
	value *PriceSetPrices
	isSet bool
}

func (v NullablePriceSetPrices) Get() *PriceSetPrices {
	return v.value
}

func (v *NullablePriceSetPrices) Set(val *PriceSetPrices) {
	v.value = val
	v.isSet = true
}

func (v NullablePriceSetPrices) IsSet() bool {
	return v.isSet
}

func (v *NullablePriceSetPrices) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePriceSetPrices(val *PriceSetPrices) *NullablePriceSetPrices {
	return &NullablePriceSetPrices{value: val, isSet: true}
}

func (v NullablePriceSetPrices) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePriceSetPrices) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


