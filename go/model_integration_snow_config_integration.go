/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// IntegrationSNOWConfigIntegration struct for IntegrationSNOWConfigIntegration
type IntegrationSNOWConfigIntegration struct {
	// Name, a unique identifier for the integration
	Name string `json:"name"`
	// Integration Type Code
	Type string `json:"type"`
	// Set `true` to enable integration
	Enabled *bool `json:"enabled,omitempty"`
	// Pass `false` to skip refresh.  By default, refresh is done on update, when it is supported by the integration type. 
	Refresh *bool `json:"refresh,omitempty"`
	// ServiceNow Host
	ServiceUrl string `json:"serviceUrl"`
	// ServiceNow Username
	ServiceUsername string `json:"serviceUsername"`
	// ServiceNow Password
	ServicePassword string `json:"servicePassword"`
	Config *IntegrationSNOWConfigIntegrationConfig `json:"config,omitempty"`
}

// NewIntegrationSNOWConfigIntegration instantiates a new IntegrationSNOWConfigIntegration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIntegrationSNOWConfigIntegration(name string, type_ string, serviceUrl string, serviceUsername string, servicePassword string, ) *IntegrationSNOWConfigIntegration {
	this := IntegrationSNOWConfigIntegration{}
	this.Name = name
	this.Type = type_
	var refresh bool = true
	this.Refresh = &refresh
	this.ServiceUrl = serviceUrl
	this.ServiceUsername = serviceUsername
	this.ServicePassword = servicePassword
	return &this
}

// NewIntegrationSNOWConfigIntegrationWithDefaults instantiates a new IntegrationSNOWConfigIntegration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIntegrationSNOWConfigIntegrationWithDefaults() *IntegrationSNOWConfigIntegration {
	this := IntegrationSNOWConfigIntegration{}
	var refresh bool = true
	this.Refresh = &refresh
	return &this
}

// GetName returns the Name field value
func (o *IntegrationSNOWConfigIntegration) GetName() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *IntegrationSNOWConfigIntegration) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *IntegrationSNOWConfigIntegration) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value
func (o *IntegrationSNOWConfigIntegration) GetType() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *IntegrationSNOWConfigIntegration) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *IntegrationSNOWConfigIntegration) SetType(v string) {
	o.Type = v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *IntegrationSNOWConfigIntegration) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationSNOWConfigIntegration) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *IntegrationSNOWConfigIntegration) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *IntegrationSNOWConfigIntegration) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetRefresh returns the Refresh field value if set, zero value otherwise.
func (o *IntegrationSNOWConfigIntegration) GetRefresh() bool {
	if o == nil || o.Refresh == nil {
		var ret bool
		return ret
	}
	return *o.Refresh
}

// GetRefreshOk returns a tuple with the Refresh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationSNOWConfigIntegration) GetRefreshOk() (*bool, bool) {
	if o == nil || o.Refresh == nil {
		return nil, false
	}
	return o.Refresh, true
}

// HasRefresh returns a boolean if a field has been set.
func (o *IntegrationSNOWConfigIntegration) HasRefresh() bool {
	if o != nil && o.Refresh != nil {
		return true
	}

	return false
}

// SetRefresh gets a reference to the given bool and assigns it to the Refresh field.
func (o *IntegrationSNOWConfigIntegration) SetRefresh(v bool) {
	o.Refresh = &v
}

// GetServiceUrl returns the ServiceUrl field value
func (o *IntegrationSNOWConfigIntegration) GetServiceUrl() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.ServiceUrl
}

// GetServiceUrlOk returns a tuple with the ServiceUrl field value
// and a boolean to check if the value has been set.
func (o *IntegrationSNOWConfigIntegration) GetServiceUrlOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ServiceUrl, true
}

// SetServiceUrl sets field value
func (o *IntegrationSNOWConfigIntegration) SetServiceUrl(v string) {
	o.ServiceUrl = v
}

// GetServiceUsername returns the ServiceUsername field value
func (o *IntegrationSNOWConfigIntegration) GetServiceUsername() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.ServiceUsername
}

// GetServiceUsernameOk returns a tuple with the ServiceUsername field value
// and a boolean to check if the value has been set.
func (o *IntegrationSNOWConfigIntegration) GetServiceUsernameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ServiceUsername, true
}

// SetServiceUsername sets field value
func (o *IntegrationSNOWConfigIntegration) SetServiceUsername(v string) {
	o.ServiceUsername = v
}

// GetServicePassword returns the ServicePassword field value
func (o *IntegrationSNOWConfigIntegration) GetServicePassword() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.ServicePassword
}

// GetServicePasswordOk returns a tuple with the ServicePassword field value
// and a boolean to check if the value has been set.
func (o *IntegrationSNOWConfigIntegration) GetServicePasswordOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ServicePassword, true
}

// SetServicePassword sets field value
func (o *IntegrationSNOWConfigIntegration) SetServicePassword(v string) {
	o.ServicePassword = v
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *IntegrationSNOWConfigIntegration) GetConfig() IntegrationSNOWConfigIntegrationConfig {
	if o == nil || o.Config == nil {
		var ret IntegrationSNOWConfigIntegrationConfig
		return ret
	}
	return *o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationSNOWConfigIntegration) GetConfigOk() (*IntegrationSNOWConfigIntegrationConfig, bool) {
	if o == nil || o.Config == nil {
		return nil, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *IntegrationSNOWConfigIntegration) HasConfig() bool {
	if o != nil && o.Config != nil {
		return true
	}

	return false
}

// SetConfig gets a reference to the given IntegrationSNOWConfigIntegrationConfig and assigns it to the Config field.
func (o *IntegrationSNOWConfigIntegration) SetConfig(v IntegrationSNOWConfigIntegrationConfig) {
	o.Config = &v
}

func (o IntegrationSNOWConfigIntegration) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["type"] = o.Type
	}
	if o.Enabled != nil {
		toSerialize["enabled"] = o.Enabled
	}
	if o.Refresh != nil {
		toSerialize["refresh"] = o.Refresh
	}
	if true {
		toSerialize["serviceUrl"] = o.ServiceUrl
	}
	if true {
		toSerialize["serviceUsername"] = o.ServiceUsername
	}
	if true {
		toSerialize["servicePassword"] = o.ServicePassword
	}
	if o.Config != nil {
		toSerialize["config"] = o.Config
	}
	return json.Marshal(toSerialize)
}

type NullableIntegrationSNOWConfigIntegration struct {
	value *IntegrationSNOWConfigIntegration
	isSet bool
}

func (v NullableIntegrationSNOWConfigIntegration) Get() *IntegrationSNOWConfigIntegration {
	return v.value
}

func (v *NullableIntegrationSNOWConfigIntegration) Set(val *IntegrationSNOWConfigIntegration) {
	v.value = val
	v.isSet = true
}

func (v NullableIntegrationSNOWConfigIntegration) IsSet() bool {
	return v.isSet
}

func (v *NullableIntegrationSNOWConfigIntegration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntegrationSNOWConfigIntegration(val *IntegrationSNOWConfigIntegration) *NullableIntegrationSNOWConfigIntegration {
	return &NullableIntegrationSNOWConfigIntegration{value: val, isSet: true}
}

func (v NullableIntegrationSNOWConfigIntegration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntegrationSNOWConfigIntegration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


