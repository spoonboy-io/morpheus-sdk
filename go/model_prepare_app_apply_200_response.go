/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 6.1.1
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PrepareAppApply200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PrepareAppApply200Response{}

// PrepareAppApply200Response struct for PrepareAppApply200Response
type PrepareAppApply200Response struct {
	Data *AppPrepareApplyData `json:"data,omitempty"`
	Success *bool `json:"success,omitempty"`
}

// NewPrepareAppApply200Response instantiates a new PrepareAppApply200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPrepareAppApply200Response() *PrepareAppApply200Response {
	this := PrepareAppApply200Response{}
	return &this
}

// NewPrepareAppApply200ResponseWithDefaults instantiates a new PrepareAppApply200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPrepareAppApply200ResponseWithDefaults() *PrepareAppApply200Response {
	this := PrepareAppApply200Response{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *PrepareAppApply200Response) GetData() AppPrepareApplyData {
	if o == nil || IsNil(o.Data) {
		var ret AppPrepareApplyData
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrepareAppApply200Response) GetDataOk() (*AppPrepareApplyData, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *PrepareAppApply200Response) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given AppPrepareApplyData and assigns it to the Data field.
func (o *PrepareAppApply200Response) SetData(v AppPrepareApplyData) {
	o.Data = &v
}

// GetSuccess returns the Success field value if set, zero value otherwise.
func (o *PrepareAppApply200Response) GetSuccess() bool {
	if o == nil || IsNil(o.Success) {
		var ret bool
		return ret
	}
	return *o.Success
}

// GetSuccessOk returns a tuple with the Success field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrepareAppApply200Response) GetSuccessOk() (*bool, bool) {
	if o == nil || IsNil(o.Success) {
		return nil, false
	}
	return o.Success, true
}

// HasSuccess returns a boolean if a field has been set.
func (o *PrepareAppApply200Response) HasSuccess() bool {
	if o != nil && !IsNil(o.Success) {
		return true
	}

	return false
}

// SetSuccess gets a reference to the given bool and assigns it to the Success field.
func (o *PrepareAppApply200Response) SetSuccess(v bool) {
	o.Success = &v
}

func (o PrepareAppApply200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PrepareAppApply200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	if !IsNil(o.Success) {
		toSerialize["success"] = o.Success
	}
	return toSerialize, nil
}

type NullablePrepareAppApply200Response struct {
	value *PrepareAppApply200Response
	isSet bool
}

func (v NullablePrepareAppApply200Response) Get() *PrepareAppApply200Response {
	return v.value
}

func (v *NullablePrepareAppApply200Response) Set(val *PrepareAppApply200Response) {
	v.value = val
	v.isSet = true
}

func (v NullablePrepareAppApply200Response) IsSet() bool {
	return v.isSet
}

func (v *NullablePrepareAppApply200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrepareAppApply200Response(val *PrepareAppApply200Response) *NullablePrepareAppApply200Response {
	return &NullablePrepareAppApply200Response{value: val, isSet: true}
}

func (v NullablePrepareAppApply200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrepareAppApply200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


