/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// PolicyType struct for PolicyType
type PolicyType struct {
	Id *int64 `json:"id,omitempty"`
	Code *string `json:"code,omitempty"`
	Name *string `json:"name,omitempty"`
	Description NullableString `json:"description,omitempty"`
	Category *string `json:"category,omitempty"`
	LoadMethod NullableString `json:"loadMethod,omitempty"`
	EnforceMethod NullableString `json:"enforceMethod,omitempty"`
	PrepareMethod NullableString `json:"prepareMethod,omitempty"`
	ValidateMethod NullableString `json:"validateMethod,omitempty"`
	EnforceOnProvision *bool `json:"enforceOnProvision,omitempty"`
	EnforceOnManaged *bool `json:"enforceOnManaged,omitempty"`
	OptionTypes *[]OptionType `json:"optionTypes,omitempty"`
}

// NewPolicyType instantiates a new PolicyType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPolicyType() *PolicyType {
	this := PolicyType{}
	return &this
}

// NewPolicyTypeWithDefaults instantiates a new PolicyType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPolicyTypeWithDefaults() *PolicyType {
	this := PolicyType{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PolicyType) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyType) GetIdOk() (*int64, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PolicyType) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *PolicyType) SetId(v int64) {
	o.Id = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *PolicyType) GetCode() string {
	if o == nil || o.Code == nil {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyType) GetCodeOk() (*string, bool) {
	if o == nil || o.Code == nil {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *PolicyType) HasCode() bool {
	if o != nil && o.Code != nil {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *PolicyType) SetCode(v string) {
	o.Code = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PolicyType) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyType) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PolicyType) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PolicyType) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PolicyType) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PolicyType) GetDescriptionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *PolicyType) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *PolicyType) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *PolicyType) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *PolicyType) UnsetDescription() {
	o.Description.Unset()
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *PolicyType) GetCategory() string {
	if o == nil || o.Category == nil {
		var ret string
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyType) GetCategoryOk() (*string, bool) {
	if o == nil || o.Category == nil {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *PolicyType) HasCategory() bool {
	if o != nil && o.Category != nil {
		return true
	}

	return false
}

// SetCategory gets a reference to the given string and assigns it to the Category field.
func (o *PolicyType) SetCategory(v string) {
	o.Category = &v
}

// GetLoadMethod returns the LoadMethod field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PolicyType) GetLoadMethod() string {
	if o == nil || o.LoadMethod.Get() == nil {
		var ret string
		return ret
	}
	return *o.LoadMethod.Get()
}

// GetLoadMethodOk returns a tuple with the LoadMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PolicyType) GetLoadMethodOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LoadMethod.Get(), o.LoadMethod.IsSet()
}

// HasLoadMethod returns a boolean if a field has been set.
func (o *PolicyType) HasLoadMethod() bool {
	if o != nil && o.LoadMethod.IsSet() {
		return true
	}

	return false
}

// SetLoadMethod gets a reference to the given NullableString and assigns it to the LoadMethod field.
func (o *PolicyType) SetLoadMethod(v string) {
	o.LoadMethod.Set(&v)
}
// SetLoadMethodNil sets the value for LoadMethod to be an explicit nil
func (o *PolicyType) SetLoadMethodNil() {
	o.LoadMethod.Set(nil)
}

// UnsetLoadMethod ensures that no value is present for LoadMethod, not even an explicit nil
func (o *PolicyType) UnsetLoadMethod() {
	o.LoadMethod.Unset()
}

// GetEnforceMethod returns the EnforceMethod field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PolicyType) GetEnforceMethod() string {
	if o == nil || o.EnforceMethod.Get() == nil {
		var ret string
		return ret
	}
	return *o.EnforceMethod.Get()
}

// GetEnforceMethodOk returns a tuple with the EnforceMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PolicyType) GetEnforceMethodOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EnforceMethod.Get(), o.EnforceMethod.IsSet()
}

// HasEnforceMethod returns a boolean if a field has been set.
func (o *PolicyType) HasEnforceMethod() bool {
	if o != nil && o.EnforceMethod.IsSet() {
		return true
	}

	return false
}

// SetEnforceMethod gets a reference to the given NullableString and assigns it to the EnforceMethod field.
func (o *PolicyType) SetEnforceMethod(v string) {
	o.EnforceMethod.Set(&v)
}
// SetEnforceMethodNil sets the value for EnforceMethod to be an explicit nil
func (o *PolicyType) SetEnforceMethodNil() {
	o.EnforceMethod.Set(nil)
}

// UnsetEnforceMethod ensures that no value is present for EnforceMethod, not even an explicit nil
func (o *PolicyType) UnsetEnforceMethod() {
	o.EnforceMethod.Unset()
}

// GetPrepareMethod returns the PrepareMethod field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PolicyType) GetPrepareMethod() string {
	if o == nil || o.PrepareMethod.Get() == nil {
		var ret string
		return ret
	}
	return *o.PrepareMethod.Get()
}

// GetPrepareMethodOk returns a tuple with the PrepareMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PolicyType) GetPrepareMethodOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PrepareMethod.Get(), o.PrepareMethod.IsSet()
}

// HasPrepareMethod returns a boolean if a field has been set.
func (o *PolicyType) HasPrepareMethod() bool {
	if o != nil && o.PrepareMethod.IsSet() {
		return true
	}

	return false
}

// SetPrepareMethod gets a reference to the given NullableString and assigns it to the PrepareMethod field.
func (o *PolicyType) SetPrepareMethod(v string) {
	o.PrepareMethod.Set(&v)
}
// SetPrepareMethodNil sets the value for PrepareMethod to be an explicit nil
func (o *PolicyType) SetPrepareMethodNil() {
	o.PrepareMethod.Set(nil)
}

// UnsetPrepareMethod ensures that no value is present for PrepareMethod, not even an explicit nil
func (o *PolicyType) UnsetPrepareMethod() {
	o.PrepareMethod.Unset()
}

// GetValidateMethod returns the ValidateMethod field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PolicyType) GetValidateMethod() string {
	if o == nil || o.ValidateMethod.Get() == nil {
		var ret string
		return ret
	}
	return *o.ValidateMethod.Get()
}

// GetValidateMethodOk returns a tuple with the ValidateMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PolicyType) GetValidateMethodOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ValidateMethod.Get(), o.ValidateMethod.IsSet()
}

// HasValidateMethod returns a boolean if a field has been set.
func (o *PolicyType) HasValidateMethod() bool {
	if o != nil && o.ValidateMethod.IsSet() {
		return true
	}

	return false
}

// SetValidateMethod gets a reference to the given NullableString and assigns it to the ValidateMethod field.
func (o *PolicyType) SetValidateMethod(v string) {
	o.ValidateMethod.Set(&v)
}
// SetValidateMethodNil sets the value for ValidateMethod to be an explicit nil
func (o *PolicyType) SetValidateMethodNil() {
	o.ValidateMethod.Set(nil)
}

// UnsetValidateMethod ensures that no value is present for ValidateMethod, not even an explicit nil
func (o *PolicyType) UnsetValidateMethod() {
	o.ValidateMethod.Unset()
}

// GetEnforceOnProvision returns the EnforceOnProvision field value if set, zero value otherwise.
func (o *PolicyType) GetEnforceOnProvision() bool {
	if o == nil || o.EnforceOnProvision == nil {
		var ret bool
		return ret
	}
	return *o.EnforceOnProvision
}

// GetEnforceOnProvisionOk returns a tuple with the EnforceOnProvision field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyType) GetEnforceOnProvisionOk() (*bool, bool) {
	if o == nil || o.EnforceOnProvision == nil {
		return nil, false
	}
	return o.EnforceOnProvision, true
}

// HasEnforceOnProvision returns a boolean if a field has been set.
func (o *PolicyType) HasEnforceOnProvision() bool {
	if o != nil && o.EnforceOnProvision != nil {
		return true
	}

	return false
}

// SetEnforceOnProvision gets a reference to the given bool and assigns it to the EnforceOnProvision field.
func (o *PolicyType) SetEnforceOnProvision(v bool) {
	o.EnforceOnProvision = &v
}

// GetEnforceOnManaged returns the EnforceOnManaged field value if set, zero value otherwise.
func (o *PolicyType) GetEnforceOnManaged() bool {
	if o == nil || o.EnforceOnManaged == nil {
		var ret bool
		return ret
	}
	return *o.EnforceOnManaged
}

// GetEnforceOnManagedOk returns a tuple with the EnforceOnManaged field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyType) GetEnforceOnManagedOk() (*bool, bool) {
	if o == nil || o.EnforceOnManaged == nil {
		return nil, false
	}
	return o.EnforceOnManaged, true
}

// HasEnforceOnManaged returns a boolean if a field has been set.
func (o *PolicyType) HasEnforceOnManaged() bool {
	if o != nil && o.EnforceOnManaged != nil {
		return true
	}

	return false
}

// SetEnforceOnManaged gets a reference to the given bool and assigns it to the EnforceOnManaged field.
func (o *PolicyType) SetEnforceOnManaged(v bool) {
	o.EnforceOnManaged = &v
}

// GetOptionTypes returns the OptionTypes field value if set, zero value otherwise.
func (o *PolicyType) GetOptionTypes() []OptionType {
	if o == nil || o.OptionTypes == nil {
		var ret []OptionType
		return ret
	}
	return *o.OptionTypes
}

// GetOptionTypesOk returns a tuple with the OptionTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyType) GetOptionTypesOk() (*[]OptionType, bool) {
	if o == nil || o.OptionTypes == nil {
		return nil, false
	}
	return o.OptionTypes, true
}

// HasOptionTypes returns a boolean if a field has been set.
func (o *PolicyType) HasOptionTypes() bool {
	if o != nil && o.OptionTypes != nil {
		return true
	}

	return false
}

// SetOptionTypes gets a reference to the given []OptionType and assigns it to the OptionTypes field.
func (o *PolicyType) SetOptionTypes(v []OptionType) {
	o.OptionTypes = &v
}

func (o PolicyType) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Code != nil {
		toSerialize["code"] = o.Code
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.Category != nil {
		toSerialize["category"] = o.Category
	}
	if o.LoadMethod.IsSet() {
		toSerialize["loadMethod"] = o.LoadMethod.Get()
	}
	if o.EnforceMethod.IsSet() {
		toSerialize["enforceMethod"] = o.EnforceMethod.Get()
	}
	if o.PrepareMethod.IsSet() {
		toSerialize["prepareMethod"] = o.PrepareMethod.Get()
	}
	if o.ValidateMethod.IsSet() {
		toSerialize["validateMethod"] = o.ValidateMethod.Get()
	}
	if o.EnforceOnProvision != nil {
		toSerialize["enforceOnProvision"] = o.EnforceOnProvision
	}
	if o.EnforceOnManaged != nil {
		toSerialize["enforceOnManaged"] = o.EnforceOnManaged
	}
	if o.OptionTypes != nil {
		toSerialize["optionTypes"] = o.OptionTypes
	}
	return json.Marshal(toSerialize)
}

type NullablePolicyType struct {
	value *PolicyType
	isSet bool
}

func (v NullablePolicyType) Get() *PolicyType {
	return v.value
}

func (v *NullablePolicyType) Set(val *PolicyType) {
	v.value = val
	v.isSet = true
}

func (v NullablePolicyType) IsSet() bool {
	return v.isSet
}

func (v *NullablePolicyType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePolicyType(val *PolicyType) *NullablePolicyType {
	return &NullablePolicyType{value: val, isSet: true}
}

func (v NullablePolicyType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePolicyType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


