/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InlineObject43 struct for InlineObject43
type InlineObject43 struct {
	Datastore ApiZonesZoneIdDataStoresIdDatastore `json:"datastore"`
}

// NewInlineObject43 instantiates a new InlineObject43 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineObject43(datastore ApiZonesZoneIdDataStoresIdDatastore, ) *InlineObject43 {
	this := InlineObject43{}
	this.Datastore = datastore
	return &this
}

// NewInlineObject43WithDefaults instantiates a new InlineObject43 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineObject43WithDefaults() *InlineObject43 {
	this := InlineObject43{}
	return &this
}

// GetDatastore returns the Datastore field value
func (o *InlineObject43) GetDatastore() ApiZonesZoneIdDataStoresIdDatastore {
	if o == nil  {
		var ret ApiZonesZoneIdDataStoresIdDatastore
		return ret
	}

	return o.Datastore
}

// GetDatastoreOk returns a tuple with the Datastore field value
// and a boolean to check if the value has been set.
func (o *InlineObject43) GetDatastoreOk() (*ApiZonesZoneIdDataStoresIdDatastore, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Datastore, true
}

// SetDatastore sets field value
func (o *InlineObject43) SetDatastore(v ApiZonesZoneIdDataStoresIdDatastore) {
	o.Datastore = v
}

func (o InlineObject43) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["datastore"] = o.Datastore
	}
	return json.Marshal(toSerialize)
}

type NullableInlineObject43 struct {
	value *InlineObject43
	isSet bool
}

func (v NullableInlineObject43) Get() *InlineObject43 {
	return v.value
}

func (v *NullableInlineObject43) Set(val *InlineObject43) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineObject43) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineObject43) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineObject43(val *InlineObject43) *NullableInlineObject43 {
	return &NullableInlineObject43{value: val, isSet: true}
}

func (v NullableInlineObject43) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineObject43) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


