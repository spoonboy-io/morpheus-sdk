/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// Report struct for Report
type Report struct {
	Id *int64 `json:"id,omitempty"`
	Type *ReportType `json:"type,omitempty"`
	ReportTitle NullableString `json:"reportTitle,omitempty"`
	FilterTitle NullableString `json:"filterTitle,omitempty"`
	Status *string `json:"status,omitempty"`
	DateCreated *time.Time `json:"dateCreated,omitempty"`
	LastUpdated *time.Time `json:"lastUpdated,omitempty"`
	StartDate NullableTime `json:"startDate,omitempty"`
	EndDate NullableTime `json:"endDate,omitempty"`
	Config *ReportConfig `json:"config,omitempty"`
	CreatedBy *InlineResponse200107NetworkPoolCreatedBy `json:"createdBy,omitempty"`
	Rows *[]ReportRows `json:"rows,omitempty"`
}

// NewReport instantiates a new Report object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReport() *Report {
	this := Report{}
	return &this
}

// NewReportWithDefaults instantiates a new Report object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReportWithDefaults() *Report {
	this := Report{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Report) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Report) GetIdOk() (*int64, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Report) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *Report) SetId(v int64) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Report) GetType() ReportType {
	if o == nil || o.Type == nil {
		var ret ReportType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Report) GetTypeOk() (*ReportType, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Report) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given ReportType and assigns it to the Type field.
func (o *Report) SetType(v ReportType) {
	o.Type = &v
}

// GetReportTitle returns the ReportTitle field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Report) GetReportTitle() string {
	if o == nil || o.ReportTitle.Get() == nil {
		var ret string
		return ret
	}
	return *o.ReportTitle.Get()
}

// GetReportTitleOk returns a tuple with the ReportTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Report) GetReportTitleOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ReportTitle.Get(), o.ReportTitle.IsSet()
}

// HasReportTitle returns a boolean if a field has been set.
func (o *Report) HasReportTitle() bool {
	if o != nil && o.ReportTitle.IsSet() {
		return true
	}

	return false
}

// SetReportTitle gets a reference to the given NullableString and assigns it to the ReportTitle field.
func (o *Report) SetReportTitle(v string) {
	o.ReportTitle.Set(&v)
}
// SetReportTitleNil sets the value for ReportTitle to be an explicit nil
func (o *Report) SetReportTitleNil() {
	o.ReportTitle.Set(nil)
}

// UnsetReportTitle ensures that no value is present for ReportTitle, not even an explicit nil
func (o *Report) UnsetReportTitle() {
	o.ReportTitle.Unset()
}

// GetFilterTitle returns the FilterTitle field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Report) GetFilterTitle() string {
	if o == nil || o.FilterTitle.Get() == nil {
		var ret string
		return ret
	}
	return *o.FilterTitle.Get()
}

// GetFilterTitleOk returns a tuple with the FilterTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Report) GetFilterTitleOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FilterTitle.Get(), o.FilterTitle.IsSet()
}

// HasFilterTitle returns a boolean if a field has been set.
func (o *Report) HasFilterTitle() bool {
	if o != nil && o.FilterTitle.IsSet() {
		return true
	}

	return false
}

// SetFilterTitle gets a reference to the given NullableString and assigns it to the FilterTitle field.
func (o *Report) SetFilterTitle(v string) {
	o.FilterTitle.Set(&v)
}
// SetFilterTitleNil sets the value for FilterTitle to be an explicit nil
func (o *Report) SetFilterTitleNil() {
	o.FilterTitle.Set(nil)
}

// UnsetFilterTitle ensures that no value is present for FilterTitle, not even an explicit nil
func (o *Report) UnsetFilterTitle() {
	o.FilterTitle.Unset()
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Report) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Report) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Report) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *Report) SetStatus(v string) {
	o.Status = &v
}

// GetDateCreated returns the DateCreated field value if set, zero value otherwise.
func (o *Report) GetDateCreated() time.Time {
	if o == nil || o.DateCreated == nil {
		var ret time.Time
		return ret
	}
	return *o.DateCreated
}

// GetDateCreatedOk returns a tuple with the DateCreated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Report) GetDateCreatedOk() (*time.Time, bool) {
	if o == nil || o.DateCreated == nil {
		return nil, false
	}
	return o.DateCreated, true
}

// HasDateCreated returns a boolean if a field has been set.
func (o *Report) HasDateCreated() bool {
	if o != nil && o.DateCreated != nil {
		return true
	}

	return false
}

// SetDateCreated gets a reference to the given time.Time and assigns it to the DateCreated field.
func (o *Report) SetDateCreated(v time.Time) {
	o.DateCreated = &v
}

// GetLastUpdated returns the LastUpdated field value if set, zero value otherwise.
func (o *Report) GetLastUpdated() time.Time {
	if o == nil || o.LastUpdated == nil {
		var ret time.Time
		return ret
	}
	return *o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Report) GetLastUpdatedOk() (*time.Time, bool) {
	if o == nil || o.LastUpdated == nil {
		return nil, false
	}
	return o.LastUpdated, true
}

// HasLastUpdated returns a boolean if a field has been set.
func (o *Report) HasLastUpdated() bool {
	if o != nil && o.LastUpdated != nil {
		return true
	}

	return false
}

// SetLastUpdated gets a reference to the given time.Time and assigns it to the LastUpdated field.
func (o *Report) SetLastUpdated(v time.Time) {
	o.LastUpdated = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Report) GetStartDate() time.Time {
	if o == nil || o.StartDate.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.StartDate.Get()
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Report) GetStartDateOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.StartDate.Get(), o.StartDate.IsSet()
}

// HasStartDate returns a boolean if a field has been set.
func (o *Report) HasStartDate() bool {
	if o != nil && o.StartDate.IsSet() {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given NullableTime and assigns it to the StartDate field.
func (o *Report) SetStartDate(v time.Time) {
	o.StartDate.Set(&v)
}
// SetStartDateNil sets the value for StartDate to be an explicit nil
func (o *Report) SetStartDateNil() {
	o.StartDate.Set(nil)
}

// UnsetStartDate ensures that no value is present for StartDate, not even an explicit nil
func (o *Report) UnsetStartDate() {
	o.StartDate.Unset()
}

// GetEndDate returns the EndDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Report) GetEndDate() time.Time {
	if o == nil || o.EndDate.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.EndDate.Get()
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Report) GetEndDateOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EndDate.Get(), o.EndDate.IsSet()
}

// HasEndDate returns a boolean if a field has been set.
func (o *Report) HasEndDate() bool {
	if o != nil && o.EndDate.IsSet() {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given NullableTime and assigns it to the EndDate field.
func (o *Report) SetEndDate(v time.Time) {
	o.EndDate.Set(&v)
}
// SetEndDateNil sets the value for EndDate to be an explicit nil
func (o *Report) SetEndDateNil() {
	o.EndDate.Set(nil)
}

// UnsetEndDate ensures that no value is present for EndDate, not even an explicit nil
func (o *Report) UnsetEndDate() {
	o.EndDate.Unset()
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *Report) GetConfig() ReportConfig {
	if o == nil || o.Config == nil {
		var ret ReportConfig
		return ret
	}
	return *o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Report) GetConfigOk() (*ReportConfig, bool) {
	if o == nil || o.Config == nil {
		return nil, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *Report) HasConfig() bool {
	if o != nil && o.Config != nil {
		return true
	}

	return false
}

// SetConfig gets a reference to the given ReportConfig and assigns it to the Config field.
func (o *Report) SetConfig(v ReportConfig) {
	o.Config = &v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *Report) GetCreatedBy() InlineResponse200107NetworkPoolCreatedBy {
	if o == nil || o.CreatedBy == nil {
		var ret InlineResponse200107NetworkPoolCreatedBy
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Report) GetCreatedByOk() (*InlineResponse200107NetworkPoolCreatedBy, bool) {
	if o == nil || o.CreatedBy == nil {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *Report) HasCreatedBy() bool {
	if o != nil && o.CreatedBy != nil {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given InlineResponse200107NetworkPoolCreatedBy and assigns it to the CreatedBy field.
func (o *Report) SetCreatedBy(v InlineResponse200107NetworkPoolCreatedBy) {
	o.CreatedBy = &v
}

// GetRows returns the Rows field value if set, zero value otherwise.
func (o *Report) GetRows() []ReportRows {
	if o == nil || o.Rows == nil {
		var ret []ReportRows
		return ret
	}
	return *o.Rows
}

// GetRowsOk returns a tuple with the Rows field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Report) GetRowsOk() (*[]ReportRows, bool) {
	if o == nil || o.Rows == nil {
		return nil, false
	}
	return o.Rows, true
}

// HasRows returns a boolean if a field has been set.
func (o *Report) HasRows() bool {
	if o != nil && o.Rows != nil {
		return true
	}

	return false
}

// SetRows gets a reference to the given []ReportRows and assigns it to the Rows field.
func (o *Report) SetRows(v []ReportRows) {
	o.Rows = &v
}

func (o Report) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.ReportTitle.IsSet() {
		toSerialize["reportTitle"] = o.ReportTitle.Get()
	}
	if o.FilterTitle.IsSet() {
		toSerialize["filterTitle"] = o.FilterTitle.Get()
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.DateCreated != nil {
		toSerialize["dateCreated"] = o.DateCreated
	}
	if o.LastUpdated != nil {
		toSerialize["lastUpdated"] = o.LastUpdated
	}
	if o.StartDate.IsSet() {
		toSerialize["startDate"] = o.StartDate.Get()
	}
	if o.EndDate.IsSet() {
		toSerialize["endDate"] = o.EndDate.Get()
	}
	if o.Config != nil {
		toSerialize["config"] = o.Config
	}
	if o.CreatedBy != nil {
		toSerialize["createdBy"] = o.CreatedBy
	}
	if o.Rows != nil {
		toSerialize["rows"] = o.Rows
	}
	return json.Marshal(toSerialize)
}

type NullableReport struct {
	value *Report
	isSet bool
}

func (v NullableReport) Get() *Report {
	return v.value
}

func (v *NullableReport) Set(val *Report) {
	v.value = val
	v.isSet = true
}

func (v NullableReport) IsSet() bool {
	return v.isSet
}

func (v *NullableReport) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReport(val *Report) *NullableReport {
	return &NullableReport{value: val, isSet: true}
}

func (v NullableReport) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReport) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


