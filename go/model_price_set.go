/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// PriceSet struct for PriceSet
type PriceSet struct {
	Id *int64 `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Code *string `json:"code,omitempty"`
	Active *bool `json:"active,omitempty"`
	PriceUnit *string `json:"priceUnit,omitempty"`
	Type *string `json:"type,omitempty"`
	RegionCode *string `json:"regionCode,omitempty"`
	SystemCreated *bool `json:"systemCreated,omitempty"`
	Zone NullableString `json:"zone,omitempty"`
	ZonePool NullableString `json:"zonePool,omitempty"`
	Account NullableString `json:"account,omitempty"`
	Prices *[]PriceSetPrices `json:"prices,omitempty"`
}

// NewPriceSet instantiates a new PriceSet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPriceSet() *PriceSet {
	this := PriceSet{}
	return &this
}

// NewPriceSetWithDefaults instantiates a new PriceSet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPriceSetWithDefaults() *PriceSet {
	this := PriceSet{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PriceSet) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceSet) GetIdOk() (*int64, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PriceSet) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *PriceSet) SetId(v int64) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PriceSet) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceSet) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PriceSet) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PriceSet) SetName(v string) {
	o.Name = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *PriceSet) GetCode() string {
	if o == nil || o.Code == nil {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceSet) GetCodeOk() (*string, bool) {
	if o == nil || o.Code == nil {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *PriceSet) HasCode() bool {
	if o != nil && o.Code != nil {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *PriceSet) SetCode(v string) {
	o.Code = &v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *PriceSet) GetActive() bool {
	if o == nil || o.Active == nil {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceSet) GetActiveOk() (*bool, bool) {
	if o == nil || o.Active == nil {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *PriceSet) HasActive() bool {
	if o != nil && o.Active != nil {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *PriceSet) SetActive(v bool) {
	o.Active = &v
}

// GetPriceUnit returns the PriceUnit field value if set, zero value otherwise.
func (o *PriceSet) GetPriceUnit() string {
	if o == nil || o.PriceUnit == nil {
		var ret string
		return ret
	}
	return *o.PriceUnit
}

// GetPriceUnitOk returns a tuple with the PriceUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceSet) GetPriceUnitOk() (*string, bool) {
	if o == nil || o.PriceUnit == nil {
		return nil, false
	}
	return o.PriceUnit, true
}

// HasPriceUnit returns a boolean if a field has been set.
func (o *PriceSet) HasPriceUnit() bool {
	if o != nil && o.PriceUnit != nil {
		return true
	}

	return false
}

// SetPriceUnit gets a reference to the given string and assigns it to the PriceUnit field.
func (o *PriceSet) SetPriceUnit(v string) {
	o.PriceUnit = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *PriceSet) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceSet) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *PriceSet) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *PriceSet) SetType(v string) {
	o.Type = &v
}

// GetRegionCode returns the RegionCode field value if set, zero value otherwise.
func (o *PriceSet) GetRegionCode() string {
	if o == nil || o.RegionCode == nil {
		var ret string
		return ret
	}
	return *o.RegionCode
}

// GetRegionCodeOk returns a tuple with the RegionCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceSet) GetRegionCodeOk() (*string, bool) {
	if o == nil || o.RegionCode == nil {
		return nil, false
	}
	return o.RegionCode, true
}

// HasRegionCode returns a boolean if a field has been set.
func (o *PriceSet) HasRegionCode() bool {
	if o != nil && o.RegionCode != nil {
		return true
	}

	return false
}

// SetRegionCode gets a reference to the given string and assigns it to the RegionCode field.
func (o *PriceSet) SetRegionCode(v string) {
	o.RegionCode = &v
}

// GetSystemCreated returns the SystemCreated field value if set, zero value otherwise.
func (o *PriceSet) GetSystemCreated() bool {
	if o == nil || o.SystemCreated == nil {
		var ret bool
		return ret
	}
	return *o.SystemCreated
}

// GetSystemCreatedOk returns a tuple with the SystemCreated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceSet) GetSystemCreatedOk() (*bool, bool) {
	if o == nil || o.SystemCreated == nil {
		return nil, false
	}
	return o.SystemCreated, true
}

// HasSystemCreated returns a boolean if a field has been set.
func (o *PriceSet) HasSystemCreated() bool {
	if o != nil && o.SystemCreated != nil {
		return true
	}

	return false
}

// SetSystemCreated gets a reference to the given bool and assigns it to the SystemCreated field.
func (o *PriceSet) SetSystemCreated(v bool) {
	o.SystemCreated = &v
}

// GetZone returns the Zone field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PriceSet) GetZone() string {
	if o == nil || o.Zone.Get() == nil {
		var ret string
		return ret
	}
	return *o.Zone.Get()
}

// GetZoneOk returns a tuple with the Zone field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PriceSet) GetZoneOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Zone.Get(), o.Zone.IsSet()
}

// HasZone returns a boolean if a field has been set.
func (o *PriceSet) HasZone() bool {
	if o != nil && o.Zone.IsSet() {
		return true
	}

	return false
}

// SetZone gets a reference to the given NullableString and assigns it to the Zone field.
func (o *PriceSet) SetZone(v string) {
	o.Zone.Set(&v)
}
// SetZoneNil sets the value for Zone to be an explicit nil
func (o *PriceSet) SetZoneNil() {
	o.Zone.Set(nil)
}

// UnsetZone ensures that no value is present for Zone, not even an explicit nil
func (o *PriceSet) UnsetZone() {
	o.Zone.Unset()
}

// GetZonePool returns the ZonePool field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PriceSet) GetZonePool() string {
	if o == nil || o.ZonePool.Get() == nil {
		var ret string
		return ret
	}
	return *o.ZonePool.Get()
}

// GetZonePoolOk returns a tuple with the ZonePool field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PriceSet) GetZonePoolOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ZonePool.Get(), o.ZonePool.IsSet()
}

// HasZonePool returns a boolean if a field has been set.
func (o *PriceSet) HasZonePool() bool {
	if o != nil && o.ZonePool.IsSet() {
		return true
	}

	return false
}

// SetZonePool gets a reference to the given NullableString and assigns it to the ZonePool field.
func (o *PriceSet) SetZonePool(v string) {
	o.ZonePool.Set(&v)
}
// SetZonePoolNil sets the value for ZonePool to be an explicit nil
func (o *PriceSet) SetZonePoolNil() {
	o.ZonePool.Set(nil)
}

// UnsetZonePool ensures that no value is present for ZonePool, not even an explicit nil
func (o *PriceSet) UnsetZonePool() {
	o.ZonePool.Unset()
}

// GetAccount returns the Account field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PriceSet) GetAccount() string {
	if o == nil || o.Account.Get() == nil {
		var ret string
		return ret
	}
	return *o.Account.Get()
}

// GetAccountOk returns a tuple with the Account field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PriceSet) GetAccountOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Account.Get(), o.Account.IsSet()
}

// HasAccount returns a boolean if a field has been set.
func (o *PriceSet) HasAccount() bool {
	if o != nil && o.Account.IsSet() {
		return true
	}

	return false
}

// SetAccount gets a reference to the given NullableString and assigns it to the Account field.
func (o *PriceSet) SetAccount(v string) {
	o.Account.Set(&v)
}
// SetAccountNil sets the value for Account to be an explicit nil
func (o *PriceSet) SetAccountNil() {
	o.Account.Set(nil)
}

// UnsetAccount ensures that no value is present for Account, not even an explicit nil
func (o *PriceSet) UnsetAccount() {
	o.Account.Unset()
}

// GetPrices returns the Prices field value if set, zero value otherwise.
func (o *PriceSet) GetPrices() []PriceSetPrices {
	if o == nil || o.Prices == nil {
		var ret []PriceSetPrices
		return ret
	}
	return *o.Prices
}

// GetPricesOk returns a tuple with the Prices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceSet) GetPricesOk() (*[]PriceSetPrices, bool) {
	if o == nil || o.Prices == nil {
		return nil, false
	}
	return o.Prices, true
}

// HasPrices returns a boolean if a field has been set.
func (o *PriceSet) HasPrices() bool {
	if o != nil && o.Prices != nil {
		return true
	}

	return false
}

// SetPrices gets a reference to the given []PriceSetPrices and assigns it to the Prices field.
func (o *PriceSet) SetPrices(v []PriceSetPrices) {
	o.Prices = &v
}

func (o PriceSet) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Code != nil {
		toSerialize["code"] = o.Code
	}
	if o.Active != nil {
		toSerialize["active"] = o.Active
	}
	if o.PriceUnit != nil {
		toSerialize["priceUnit"] = o.PriceUnit
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.RegionCode != nil {
		toSerialize["regionCode"] = o.RegionCode
	}
	if o.SystemCreated != nil {
		toSerialize["systemCreated"] = o.SystemCreated
	}
	if o.Zone.IsSet() {
		toSerialize["zone"] = o.Zone.Get()
	}
	if o.ZonePool.IsSet() {
		toSerialize["zonePool"] = o.ZonePool.Get()
	}
	if o.Account.IsSet() {
		toSerialize["account"] = o.Account.Get()
	}
	if o.Prices != nil {
		toSerialize["prices"] = o.Prices
	}
	return json.Marshal(toSerialize)
}

type NullablePriceSet struct {
	value *PriceSet
	isSet bool
}

func (v NullablePriceSet) Get() *PriceSet {
	return v.value
}

func (v *NullablePriceSet) Set(val *PriceSet) {
	v.value = val
	v.isSet = true
}

func (v NullablePriceSet) IsSet() bool {
	return v.isSet
}

func (v *NullablePriceSet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePriceSet(val *PriceSet) *NullablePriceSet {
	return &NullablePriceSet{value: val, isSet: true}
}

func (v NullablePriceSet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePriceSet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


