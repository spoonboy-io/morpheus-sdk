/*
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * API version: 6.2.1
 * Contact: dev@morpheusdata.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InlineObject149 The parameters for creating a network router is type dependent. The following lists the common parameters. See get a specific type to list available options for that network router type. 
type InlineObject149 struct {
	NetworkRouter *NetworkRoutersUpdate `json:"networkRouter,omitempty"`
}

// NewInlineObject149 instantiates a new InlineObject149 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineObject149() *InlineObject149 {
	this := InlineObject149{}
	return &this
}

// NewInlineObject149WithDefaults instantiates a new InlineObject149 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineObject149WithDefaults() *InlineObject149 {
	this := InlineObject149{}
	return &this
}

// GetNetworkRouter returns the NetworkRouter field value if set, zero value otherwise.
func (o *InlineObject149) GetNetworkRouter() NetworkRoutersUpdate {
	if o == nil || o.NetworkRouter == nil {
		var ret NetworkRoutersUpdate
		return ret
	}
	return *o.NetworkRouter
}

// GetNetworkRouterOk returns a tuple with the NetworkRouter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject149) GetNetworkRouterOk() (*NetworkRoutersUpdate, bool) {
	if o == nil || o.NetworkRouter == nil {
		return nil, false
	}
	return o.NetworkRouter, true
}

// HasNetworkRouter returns a boolean if a field has been set.
func (o *InlineObject149) HasNetworkRouter() bool {
	if o != nil && o.NetworkRouter != nil {
		return true
	}

	return false
}

// SetNetworkRouter gets a reference to the given NetworkRoutersUpdate and assigns it to the NetworkRouter field.
func (o *InlineObject149) SetNetworkRouter(v NetworkRoutersUpdate) {
	o.NetworkRouter = &v
}

func (o InlineObject149) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.NetworkRouter != nil {
		toSerialize["networkRouter"] = o.NetworkRouter
	}
	return json.Marshal(toSerialize)
}

type NullableInlineObject149 struct {
	value *InlineObject149
	isSet bool
}

func (v NullableInlineObject149) Get() *InlineObject149 {
	return v.value
}

func (v *NullableInlineObject149) Set(val *InlineObject149) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineObject149) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineObject149) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineObject149(val *InlineObject149) *NullableInlineObject149 {
	return &NullableInlineObject149{value: val, isSet: true}
}

func (v NullableInlineObject149) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineObject149) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


