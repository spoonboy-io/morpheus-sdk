"""
    Morpheus API

    Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.  # noqa: E501

    The version of the OpenAPI document: 6.2.1
    Contact: dev@morpheusdata.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from openapi_client.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from openapi_client.exceptions import ApiAttributeError


def lazy_import():
    from openapi_client.model.approve_policy_type_configuration import ApprovePolicyTypeConfiguration
    from openapi_client.model.backup_creation_policy_type_configuration import BackupCreationPolicyTypeConfiguration
    from openapi_client.model.backup_targets_policy_type_configuration import BackupTargetsPolicyTypeConfiguration
    from openapi_client.model.budget_policy_type_configuration import BudgetPolicyTypeConfiguration
    from openapi_client.model.cluster_resource_name_policy_type_configuration import ClusterResourceNamePolicyTypeConfiguration
    from openapi_client.model.cypher_access_policy_type_configuration import CypherAccessPolicyTypeConfiguration
    from openapi_client.model.delayed_delete_policy_type_configuration import DelayedDeletePolicyTypeConfiguration
    from openapi_client.model.expiration_policy_type_configuration import ExpirationPolicyTypeConfiguration
    from openapi_client.model.file_share_storage_quota_policy_type_configuration import FileShareStorageQuotaPolicyTypeConfiguration
    from openapi_client.model.hostname_policy_type_configuration import HostnamePolicyTypeConfiguration
    from openapi_client.model.instance_name_policy_type_configuration import InstanceNamePolicyTypeConfiguration
    from openapi_client.model.max_containers_policy_type_configuration import MaxContainersPolicyTypeConfiguration
    from openapi_client.model.max_cores_policy_type_configuration1 import MaxCoresPolicyTypeConfiguration1
    from openapi_client.model.max_hosts_policy_type_configuration import MaxHostsPolicyTypeConfiguration
    from openapi_client.model.max_load_balancer_pools_policy_type_configuration import MaxLoadBalancerPoolsPolicyTypeConfiguration
    from openapi_client.model.max_memory_policy_type_configuration1 import MaxMemoryPolicyTypeConfiguration1
    from openapi_client.model.max_memory_policy_type_configuration_max_memory import MaxMemoryPolicyTypeConfigurationMaxMemory
    from openapi_client.model.max_pool_members_policy_type_configuration import MaxPoolMembersPolicyTypeConfiguration
    from openapi_client.model.max_storage_and_object_storage_quota_policy_type_configuration1 import MaxStorageAndObjectStorageQuotaPolicyTypeConfiguration1
    from openapi_client.model.max_virtual_servers_policy_type_configuration import MaxVirtualServersPolicyTypeConfiguration
    from openapi_client.model.max_vms_policy_type_configuration import MaxVMsPolicyTypeConfiguration
    from openapi_client.model.message_of_the_day_policy_type_configuration import MessageOfTheDayPolicyTypeConfiguration
    from openapi_client.model.message_of_the_day_policy_type_configuration_motd import MessageOfTheDayPolicyTypeConfigurationMotd
    from openapi_client.model.network_quota_policy_type_configuration import NetworkQuotaPolicyTypeConfiguration
    from openapi_client.model.power_schedule_policy_type_configuration import PowerSchedulePolicyTypeConfiguration
    from openapi_client.model.router_quota_policy_type_configuration import RouterQuotaPolicyTypeConfiguration
    from openapi_client.model.shutdown_policy_type_configuration import ShutdownPolicyTypeConfiguration
    from openapi_client.model.storage_server_storage_quota_policy_type_configuration import StorageServerStorageQuotaPolicyTypeConfiguration
    from openapi_client.model.tags_policy_type_configuration import TagsPolicyTypeConfiguration
    from openapi_client.model.user_creation_policy_type_configuration import UserCreationPolicyTypeConfiguration
    from openapi_client.model.user_group_creation_policy_type_configuration import UserGroupCreationPolicyTypeConfiguration
    from openapi_client.model.workflow_policy_type_configuration import WorkflowPolicyTypeConfiguration
    globals()['ApprovePolicyTypeConfiguration'] = ApprovePolicyTypeConfiguration
    globals()['BackupCreationPolicyTypeConfiguration'] = BackupCreationPolicyTypeConfiguration
    globals()['BackupTargetsPolicyTypeConfiguration'] = BackupTargetsPolicyTypeConfiguration
    globals()['BudgetPolicyTypeConfiguration'] = BudgetPolicyTypeConfiguration
    globals()['ClusterResourceNamePolicyTypeConfiguration'] = ClusterResourceNamePolicyTypeConfiguration
    globals()['CypherAccessPolicyTypeConfiguration'] = CypherAccessPolicyTypeConfiguration
    globals()['DelayedDeletePolicyTypeConfiguration'] = DelayedDeletePolicyTypeConfiguration
    globals()['ExpirationPolicyTypeConfiguration'] = ExpirationPolicyTypeConfiguration
    globals()['FileShareStorageQuotaPolicyTypeConfiguration'] = FileShareStorageQuotaPolicyTypeConfiguration
    globals()['HostnamePolicyTypeConfiguration'] = HostnamePolicyTypeConfiguration
    globals()['InstanceNamePolicyTypeConfiguration'] = InstanceNamePolicyTypeConfiguration
    globals()['MaxContainersPolicyTypeConfiguration'] = MaxContainersPolicyTypeConfiguration
    globals()['MaxCoresPolicyTypeConfiguration1'] = MaxCoresPolicyTypeConfiguration1
    globals()['MaxHostsPolicyTypeConfiguration'] = MaxHostsPolicyTypeConfiguration
    globals()['MaxLoadBalancerPoolsPolicyTypeConfiguration'] = MaxLoadBalancerPoolsPolicyTypeConfiguration
    globals()['MaxMemoryPolicyTypeConfiguration1'] = MaxMemoryPolicyTypeConfiguration1
    globals()['MaxMemoryPolicyTypeConfigurationMaxMemory'] = MaxMemoryPolicyTypeConfigurationMaxMemory
    globals()['MaxPoolMembersPolicyTypeConfiguration'] = MaxPoolMembersPolicyTypeConfiguration
    globals()['MaxStorageAndObjectStorageQuotaPolicyTypeConfiguration1'] = MaxStorageAndObjectStorageQuotaPolicyTypeConfiguration1
    globals()['MaxVMsPolicyTypeConfiguration'] = MaxVMsPolicyTypeConfiguration
    globals()['MaxVirtualServersPolicyTypeConfiguration'] = MaxVirtualServersPolicyTypeConfiguration
    globals()['MessageOfTheDayPolicyTypeConfiguration'] = MessageOfTheDayPolicyTypeConfiguration
    globals()['MessageOfTheDayPolicyTypeConfigurationMotd'] = MessageOfTheDayPolicyTypeConfigurationMotd
    globals()['NetworkQuotaPolicyTypeConfiguration'] = NetworkQuotaPolicyTypeConfiguration
    globals()['PowerSchedulePolicyTypeConfiguration'] = PowerSchedulePolicyTypeConfiguration
    globals()['RouterQuotaPolicyTypeConfiguration'] = RouterQuotaPolicyTypeConfiguration
    globals()['ShutdownPolicyTypeConfiguration'] = ShutdownPolicyTypeConfiguration
    globals()['StorageServerStorageQuotaPolicyTypeConfiguration'] = StorageServerStorageQuotaPolicyTypeConfiguration
    globals()['TagsPolicyTypeConfiguration'] = TagsPolicyTypeConfiguration
    globals()['UserCreationPolicyTypeConfiguration'] = UserCreationPolicyTypeConfiguration
    globals()['UserGroupCreationPolicyTypeConfiguration'] = UserGroupCreationPolicyTypeConfiguration
    globals()['WorkflowPolicyTypeConfiguration'] = WorkflowPolicyTypeConfiguration


class PolicyUpdateConfig(ModelComposed):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'account_integration_id': (str,),  # noqa: E501
            'create_backup_type': (str,),  # noqa: E501
            'create_backup': (bool,),  # noqa: E501
            'backup_storage_ids': ([int],),  # noqa: E501
            'max_price': (float,),  # noqa: E501
            'max_price_currency': (str,),  # noqa: E501
            'max_price_unit': (str,),  # noqa: E501
            'server_naming_type': (str,),  # noqa: E501
            'server_naming_pattern': (str,),  # noqa: E501
            'server_naming_conflict': (bool,),  # noqa: E501
            'key_pattern': (str,),  # noqa: E501
            'read': (bool,),  # noqa: E501
            'write': (bool,),  # noqa: E501
            'update': (bool,),  # noqa: E501
            'delete': (bool,),  # noqa: E501
            'list': (bool,),  # noqa: E501
            'removal_age': (str,),  # noqa: E501
            'lifecycle_type': (str,),  # noqa: E501
            'lifecycle_age': (str,),  # noqa: E501
            'lifecycle_renewal': (str,),  # noqa: E501
            'lifecycle_notify': (str,),  # noqa: E501
            'lifecycle_message': (str,),  # noqa: E501
            'lifecycle_auto_renew': (bool,),  # noqa: E501
            'lifecycle_extensions_before_approval': (str,),  # noqa: E501
            'lifecycle_hide_fixed': (bool,),  # noqa: E501
            'max_storage': (str,),  # noqa: E501
            'host_naming_type': (str,),  # noqa: E501
            'host_naming_pattern': (str,),  # noqa: E501
            'naming_type': (str,),  # noqa: E501
            'naming_pattern': (str,),  # noqa: E501
            'naming_conflict': (bool,),  # noqa: E501
            'max_containers': (str,),  # noqa: E501
            'max_cores': (str,),  # noqa: E501
            'exclude_containers': (bool,),  # noqa: E501
            'max_hosts': (str,),  # noqa: E501
            'max_pools': (str,),  # noqa: E501
            'max_memory': (MaxMemoryPolicyTypeConfigurationMaxMemory,),  # noqa: E501
            'max_pool_members': (str,),  # noqa: E501
            'max_virtual_servers': (str,),  # noqa: E501
            'max_vms': (str,),  # noqa: E501
            'motd_title': (str,),  # noqa: E501
            'motd': (MessageOfTheDayPolicyTypeConfigurationMotd,),  # noqa: E501
            'motd_message': (str,),  # noqa: E501
            'motd_type': (str,),  # noqa: E501
            'motd__full_page': (bool, none_type,),  # noqa: E501
            'motd_date': (datetime,),  # noqa: E501
            'max_networks': (str,),  # noqa: E501
            'power_schedule_type': (str,),  # noqa: E501
            'power_schedule': (str,),  # noqa: E501
            'power_schedule_hide_fixed': (bool,),  # noqa: E501
            'max_routers': (str,),  # noqa: E501
            'shutdown_type': (str,),  # noqa: E501
            'shutdown_age': (str,),  # noqa: E501
            'shutdown_renewal': (str,),  # noqa: E501
            'shutdown_notify': (str,),  # noqa: E501
            'shutdown_message': (str,),  # noqa: E501
            'shutdown_auto_renew': (bool,),  # noqa: E501
            'shutdown_extensions_before_approval': (str,),  # noqa: E501
            'shutdown_hide_fixed': (bool,),  # noqa: E501
            'storage_server_id': (str,),  # noqa: E501
            'strict': (bool,),  # noqa: E501
            'key': (str,),  # noqa: E501
            'value_list_id': (str,),  # noqa: E501
            'value': (str,),  # noqa: E501
            'create_user_type': (str,),  # noqa: E501
            'create_user': (bool,),  # noqa: E501
            'user_group': (str,),  # noqa: E501
            'workflow_id': (str,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'account_integration_id': 'accountIntegrationId',  # noqa: E501
        'create_backup_type': 'createBackupType',  # noqa: E501
        'create_backup': 'createBackup',  # noqa: E501
        'backup_storage_ids': 'backupStorageIds',  # noqa: E501
        'max_price': 'maxPrice',  # noqa: E501
        'max_price_currency': 'maxPriceCurrency',  # noqa: E501
        'max_price_unit': 'maxPriceUnit',  # noqa: E501
        'server_naming_type': 'serverNamingType',  # noqa: E501
        'server_naming_pattern': 'serverNamingPattern',  # noqa: E501
        'server_naming_conflict': 'serverNamingConflict',  # noqa: E501
        'key_pattern': 'keyPattern',  # noqa: E501
        'read': 'read',  # noqa: E501
        'write': 'write',  # noqa: E501
        'update': 'update',  # noqa: E501
        'delete': 'delete',  # noqa: E501
        'list': 'list',  # noqa: E501
        'removal_age': 'removalAge',  # noqa: E501
        'lifecycle_type': 'lifecycleType',  # noqa: E501
        'lifecycle_age': 'lifecycleAge',  # noqa: E501
        'lifecycle_renewal': 'lifecycleRenewal',  # noqa: E501
        'lifecycle_notify': 'lifecycleNotify',  # noqa: E501
        'lifecycle_message': 'lifecycleMessage',  # noqa: E501
        'lifecycle_auto_renew': 'lifecycleAutoRenew',  # noqa: E501
        'lifecycle_extensions_before_approval': 'lifecycleExtensionsBeforeApproval',  # noqa: E501
        'lifecycle_hide_fixed': 'lifecycleHideFixed',  # noqa: E501
        'max_storage': 'maxStorage',  # noqa: E501
        'host_naming_type': 'hostNamingType',  # noqa: E501
        'host_naming_pattern': 'hostNamingPattern',  # noqa: E501
        'naming_type': 'namingType',  # noqa: E501
        'naming_pattern': 'namingPattern',  # noqa: E501
        'naming_conflict': 'namingConflict',  # noqa: E501
        'max_containers': 'maxContainers',  # noqa: E501
        'max_cores': 'maxCores',  # noqa: E501
        'exclude_containers': 'excludeContainers',  # noqa: E501
        'max_hosts': 'maxHosts',  # noqa: E501
        'max_pools': 'maxPools',  # noqa: E501
        'max_memory': 'maxMemory',  # noqa: E501
        'max_pool_members': 'maxPoolMembers',  # noqa: E501
        'max_virtual_servers': 'maxVirtualServers',  # noqa: E501
        'max_vms': 'maxVms',  # noqa: E501
        'motd_title': 'motd.title',  # noqa: E501
        'motd': 'motd',  # noqa: E501
        'motd_message': 'motd.message',  # noqa: E501
        'motd_type': 'motd.type',  # noqa: E501
        'motd__full_page': 'motd._fullPage',  # noqa: E501
        'motd_date': 'motd.date',  # noqa: E501
        'max_networks': 'maxNetworks',  # noqa: E501
        'power_schedule_type': 'powerScheduleType',  # noqa: E501
        'power_schedule': 'powerSchedule',  # noqa: E501
        'power_schedule_hide_fixed': 'powerScheduleHideFixed',  # noqa: E501
        'max_routers': 'maxRouters',  # noqa: E501
        'shutdown_type': 'shutdownType',  # noqa: E501
        'shutdown_age': 'shutdownAge',  # noqa: E501
        'shutdown_renewal': 'shutdownRenewal',  # noqa: E501
        'shutdown_notify': 'shutdownNotify',  # noqa: E501
        'shutdown_message': 'shutdownMessage',  # noqa: E501
        'shutdown_auto_renew': 'shutdownAutoRenew',  # noqa: E501
        'shutdown_extensions_before_approval': 'shutdownExtensionsBeforeApproval',  # noqa: E501
        'shutdown_hide_fixed': 'shutdownHideFixed',  # noqa: E501
        'storage_server_id': 'storageServerId',  # noqa: E501
        'strict': 'strict',  # noqa: E501
        'key': 'key',  # noqa: E501
        'value_list_id': 'valueListId',  # noqa: E501
        'value': 'value',  # noqa: E501
        'create_user_type': 'createUserType',  # noqa: E501
        'create_user': 'createUser',  # noqa: E501
        'user_group': 'userGroup',  # noqa: E501
        'workflow_id': 'workflowId',  # noqa: E501
    }

    read_only_vars = {
    }

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """PolicyUpdateConfig - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            account_integration_id (str): [optional]  # noqa: E501
            create_backup_type (str): [optional]  # noqa: E501
            create_backup (bool): [optional]  # noqa: E501
            backup_storage_ids ([int]): [optional]  # noqa: E501
            max_price (float): [optional]  # noqa: E501
            max_price_currency (str): [optional]  # noqa: E501
            max_price_unit (str): [optional]  # noqa: E501
            server_naming_type (str): [optional]  # noqa: E501
            server_naming_pattern (str): [optional]  # noqa: E501
            server_naming_conflict (bool): [optional]  # noqa: E501
            key_pattern (str): [optional]  # noqa: E501
            read (bool): [optional]  # noqa: E501
            write (bool): [optional]  # noqa: E501
            update (bool): [optional]  # noqa: E501
            delete (bool): [optional]  # noqa: E501
            list (bool): [optional]  # noqa: E501
            removal_age (str): [optional]  # noqa: E501
            lifecycle_type (str): [optional]  # noqa: E501
            lifecycle_age (str): [optional]  # noqa: E501
            lifecycle_renewal (str): [optional]  # noqa: E501
            lifecycle_notify (str): [optional]  # noqa: E501
            lifecycle_message (str): [optional]  # noqa: E501
            lifecycle_auto_renew (bool): [optional]  # noqa: E501
            lifecycle_extensions_before_approval (str): [optional]  # noqa: E501
            lifecycle_hide_fixed (bool): [optional]  # noqa: E501
            max_storage (str): [optional]  # noqa: E501
            host_naming_type (str): [optional]  # noqa: E501
            host_naming_pattern (str): [optional]  # noqa: E501
            naming_type (str): [optional]  # noqa: E501
            naming_pattern (str): [optional]  # noqa: E501
            naming_conflict (bool): [optional]  # noqa: E501
            max_containers (str): [optional]  # noqa: E501
            max_cores (str): [optional]  # noqa: E501
            exclude_containers (bool): [optional]  # noqa: E501
            max_hosts (str): [optional]  # noqa: E501
            max_pools (str): [optional]  # noqa: E501
            max_memory (MaxMemoryPolicyTypeConfigurationMaxMemory): [optional]  # noqa: E501
            max_pool_members (str): [optional]  # noqa: E501
            max_virtual_servers (str): [optional]  # noqa: E501
            max_vms (str): [optional]  # noqa: E501
            motd_title (str): [optional]  # noqa: E501
            motd (MessageOfTheDayPolicyTypeConfigurationMotd): [optional]  # noqa: E501
            motd_message (str): [optional]  # noqa: E501
            motd_type (str): [optional]  # noqa: E501
            motd__full_page (bool, none_type): [optional]  # noqa: E501
            motd_date (datetime): [optional]  # noqa: E501
            max_networks (str): [optional]  # noqa: E501
            power_schedule_type (str): [optional]  # noqa: E501
            power_schedule (str): [optional]  # noqa: E501
            power_schedule_hide_fixed (bool): [optional]  # noqa: E501
            max_routers (str): [optional]  # noqa: E501
            shutdown_type (str): [optional]  # noqa: E501
            shutdown_age (str): [optional]  # noqa: E501
            shutdown_renewal (str): [optional]  # noqa: E501
            shutdown_notify (str): [optional]  # noqa: E501
            shutdown_message (str): [optional]  # noqa: E501
            shutdown_auto_renew (bool): [optional]  # noqa: E501
            shutdown_extensions_before_approval (str): [optional]  # noqa: E501
            shutdown_hide_fixed (bool): [optional]  # noqa: E501
            storage_server_id (str): [optional]  # noqa: E501
            strict (bool): [optional]  # noqa: E501
            key (str): [optional]  # noqa: E501
            value_list_id (str): [optional]  # noqa: E501
            value (str): [optional]  # noqa: E501
            create_user_type (str): [optional]  # noqa: E501
            create_user (bool): [optional]  # noqa: E501
            user_group (str): [optional]  # noqa: E501
            workflow_id (str): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        constant_args = {
            '_check_type': _check_type,
            '_path_to_item': _path_to_item,
            '_spec_property_naming': _spec_property_naming,
            '_configuration': _configuration,
            '_visited_composed_classes': self._visited_composed_classes,
        }
        composed_info = validate_get_composed_info(
            constant_args, kwargs, self)
        self._composed_instances = composed_info[0]
        self._var_name_to_model_instances = composed_info[1]
        self._additional_properties_model_instances = composed_info[2]
        discarded_args = composed_info[3]

        for var_name, var_value in kwargs.items():
            if var_name in discarded_args and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self._additional_properties_model_instances:
                # discard variable.
                continue
            setattr(self, var_name, var_value)

        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
        '_composed_instances',
        '_var_name_to_model_instances',
        '_additional_properties_model_instances',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """PolicyUpdateConfig - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            account_integration_id (str): [optional]  # noqa: E501
            create_backup_type (str): [optional]  # noqa: E501
            create_backup (bool): [optional]  # noqa: E501
            backup_storage_ids ([int]): [optional]  # noqa: E501
            max_price (float): [optional]  # noqa: E501
            max_price_currency (str): [optional]  # noqa: E501
            max_price_unit (str): [optional]  # noqa: E501
            server_naming_type (str): [optional]  # noqa: E501
            server_naming_pattern (str): [optional]  # noqa: E501
            server_naming_conflict (bool): [optional]  # noqa: E501
            key_pattern (str): [optional]  # noqa: E501
            read (bool): [optional]  # noqa: E501
            write (bool): [optional]  # noqa: E501
            update (bool): [optional]  # noqa: E501
            delete (bool): [optional]  # noqa: E501
            list (bool): [optional]  # noqa: E501
            removal_age (str): [optional]  # noqa: E501
            lifecycle_type (str): [optional]  # noqa: E501
            lifecycle_age (str): [optional]  # noqa: E501
            lifecycle_renewal (str): [optional]  # noqa: E501
            lifecycle_notify (str): [optional]  # noqa: E501
            lifecycle_message (str): [optional]  # noqa: E501
            lifecycle_auto_renew (bool): [optional]  # noqa: E501
            lifecycle_extensions_before_approval (str): [optional]  # noqa: E501
            lifecycle_hide_fixed (bool): [optional]  # noqa: E501
            max_storage (str): [optional]  # noqa: E501
            host_naming_type (str): [optional]  # noqa: E501
            host_naming_pattern (str): [optional]  # noqa: E501
            naming_type (str): [optional]  # noqa: E501
            naming_pattern (str): [optional]  # noqa: E501
            naming_conflict (bool): [optional]  # noqa: E501
            max_containers (str): [optional]  # noqa: E501
            max_cores (str): [optional]  # noqa: E501
            exclude_containers (bool): [optional]  # noqa: E501
            max_hosts (str): [optional]  # noqa: E501
            max_pools (str): [optional]  # noqa: E501
            max_memory (MaxMemoryPolicyTypeConfigurationMaxMemory): [optional]  # noqa: E501
            max_pool_members (str): [optional]  # noqa: E501
            max_virtual_servers (str): [optional]  # noqa: E501
            max_vms (str): [optional]  # noqa: E501
            motd_title (str): [optional]  # noqa: E501
            motd (MessageOfTheDayPolicyTypeConfigurationMotd): [optional]  # noqa: E501
            motd_message (str): [optional]  # noqa: E501
            motd_type (str): [optional]  # noqa: E501
            motd__full_page (bool, none_type): [optional]  # noqa: E501
            motd_date (datetime): [optional]  # noqa: E501
            max_networks (str): [optional]  # noqa: E501
            power_schedule_type (str): [optional]  # noqa: E501
            power_schedule (str): [optional]  # noqa: E501
            power_schedule_hide_fixed (bool): [optional]  # noqa: E501
            max_routers (str): [optional]  # noqa: E501
            shutdown_type (str): [optional]  # noqa: E501
            shutdown_age (str): [optional]  # noqa: E501
            shutdown_renewal (str): [optional]  # noqa: E501
            shutdown_notify (str): [optional]  # noqa: E501
            shutdown_message (str): [optional]  # noqa: E501
            shutdown_auto_renew (bool): [optional]  # noqa: E501
            shutdown_extensions_before_approval (str): [optional]  # noqa: E501
            shutdown_hide_fixed (bool): [optional]  # noqa: E501
            storage_server_id (str): [optional]  # noqa: E501
            strict (bool): [optional]  # noqa: E501
            key (str): [optional]  # noqa: E501
            value_list_id (str): [optional]  # noqa: E501
            value (str): [optional]  # noqa: E501
            create_user_type (str): [optional]  # noqa: E501
            create_user (bool): [optional]  # noqa: E501
            user_group (str): [optional]  # noqa: E501
            workflow_id (str): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        constant_args = {
            '_check_type': _check_type,
            '_path_to_item': _path_to_item,
            '_spec_property_naming': _spec_property_naming,
            '_configuration': _configuration,
            '_visited_composed_classes': self._visited_composed_classes,
        }
        composed_info = validate_get_composed_info(
            constant_args, kwargs, self)
        self._composed_instances = composed_info[0]
        self._var_name_to_model_instances = composed_info[1]
        self._additional_properties_model_instances = composed_info[2]
        discarded_args = composed_info[3]

        for var_name, var_value in kwargs.items():
            if var_name in discarded_args and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self._additional_properties_model_instances:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")

    @cached_property
    def _composed_schemas():
        # we need this here to make our import statements work
        # we must store _composed_schemas in here so the code is only run
        # when we invoke this method. If we kept this at the class
        # level we would get an error because the class level
        # code would be run when this module is imported, and these composed
        # classes don't exist yet because their module has not finished
        # loading
        lazy_import()
        return {
          'anyOf': [
              ApprovePolicyTypeConfiguration,
              BackupCreationPolicyTypeConfiguration,
              BackupTargetsPolicyTypeConfiguration,
              BudgetPolicyTypeConfiguration,
              ClusterResourceNamePolicyTypeConfiguration,
              CypherAccessPolicyTypeConfiguration,
              DelayedDeletePolicyTypeConfiguration,
              ExpirationPolicyTypeConfiguration,
              FileShareStorageQuotaPolicyTypeConfiguration,
              HostnamePolicyTypeConfiguration,
              InstanceNamePolicyTypeConfiguration,
              MaxContainersPolicyTypeConfiguration,
              MaxCoresPolicyTypeConfiguration1,
              MaxHostsPolicyTypeConfiguration,
              MaxLoadBalancerPoolsPolicyTypeConfiguration,
              MaxMemoryPolicyTypeConfiguration1,
              MaxPoolMembersPolicyTypeConfiguration,
              MaxStorageAndObjectStorageQuotaPolicyTypeConfiguration1,
              MaxVMsPolicyTypeConfiguration,
              MaxVirtualServersPolicyTypeConfiguration,
              MessageOfTheDayPolicyTypeConfiguration,
              NetworkQuotaPolicyTypeConfiguration,
              PowerSchedulePolicyTypeConfiguration,
              RouterQuotaPolicyTypeConfiguration,
              ShutdownPolicyTypeConfiguration,
              StorageServerStorageQuotaPolicyTypeConfiguration,
              TagsPolicyTypeConfiguration,
              UserCreationPolicyTypeConfiguration,
              UserGroupCreationPolicyTypeConfiguration,
              WorkflowPolicyTypeConfiguration,
          ],
          'allOf': [
          ],
          'oneOf': [
          ],
        }
