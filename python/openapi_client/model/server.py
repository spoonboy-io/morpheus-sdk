"""
    Morpheus API

    Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.  # noqa: E501

    The version of the OpenAPI document: 6.2.1
    Contact: dev@morpheusdata.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from openapi_client.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from openapi_client.exceptions import ApiAttributeError


def lazy_import():
    from openapi_client.model.cluster_layout_compute_servers_inner_compute_server_type import ClusterLayoutComputeServersInnerComputeServerType
    from openapi_client.model.guidance_vmware_sizing_resource_controllers_inner import GuidanceVmwareSizingResourceControllersInner
    from openapi_client.model.list_deploys200_response_all_of_app_deploys_inner_instance import ListDeploys200ResponseAllOfAppDeploysInnerInstance
    from openapi_client.model.list_load_balancer_monitors200_response_all_of_load_balancer_monitors_inner_load_balancer_type import ListLoadBalancerMonitors200ResponseAllOfLoadBalancerMonitorsInnerLoadBalancerType
    from openapi_client.model.owner import Owner
    from openapi_client.model.price_set_prices_inner_volume_type import PriceSetPricesInnerVolumeType
    from openapi_client.model.server_config import ServerConfig
    from openapi_client.model.server_interfaces_inner import ServerInterfacesInner
    from openapi_client.model.server_server_os import ServerServerOs
    from openapi_client.model.server_stats import ServerStats
    from openapi_client.model.server_volumes_inner import ServerVolumesInner
    globals()['ClusterLayoutComputeServersInnerComputeServerType'] = ClusterLayoutComputeServersInnerComputeServerType
    globals()['GuidanceVmwareSizingResourceControllersInner'] = GuidanceVmwareSizingResourceControllersInner
    globals()['ListDeploys200ResponseAllOfAppDeploysInnerInstance'] = ListDeploys200ResponseAllOfAppDeploysInnerInstance
    globals()['ListLoadBalancerMonitors200ResponseAllOfLoadBalancerMonitorsInnerLoadBalancerType'] = ListLoadBalancerMonitors200ResponseAllOfLoadBalancerMonitorsInnerLoadBalancerType
    globals()['Owner'] = Owner
    globals()['PriceSetPricesInnerVolumeType'] = PriceSetPricesInnerVolumeType
    globals()['ServerConfig'] = ServerConfig
    globals()['ServerInterfacesInner'] = ServerInterfacesInner
    globals()['ServerServerOs'] = ServerServerOs
    globals()['ServerStats'] = ServerStats
    globals()['ServerVolumesInner'] = ServerVolumesInner


class Server(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'id': (int,),  # noqa: E501
            'uuid': (str,),  # noqa: E501
            'external_id': (str,),  # noqa: E501
            'internal_id': (str, none_type,),  # noqa: E501
            'external_unique_id': (str, none_type,),  # noqa: E501
            'name': (str,),  # noqa: E501
            'external_name': (str,),  # noqa: E501
            'hostname': (str,),  # noqa: E501
            'parent_server': (ListDeploys200ResponseAllOfAppDeploysInnerInstance,),  # noqa: E501
            'account_id': (int,),  # noqa: E501
            'account': (ListDeploys200ResponseAllOfAppDeploysInnerInstance,),  # noqa: E501
            'owner': (Owner,),  # noqa: E501
            'zone': (ListDeploys200ResponseAllOfAppDeploysInnerInstance,),  # noqa: E501
            'plan': (ListLoadBalancerMonitors200ResponseAllOfLoadBalancerMonitorsInnerLoadBalancerType,),  # noqa: E501
            'compute_server_type': (ClusterLayoutComputeServersInnerComputeServerType,),  # noqa: E501
            'visibility': (str,),  # noqa: E501
            'description': (str, none_type,),  # noqa: E501
            'zone_id': (int,),  # noqa: E501
            'site_id': (int,),  # noqa: E501
            'resource_pool_id': (int,),  # noqa: E501
            'folder_id': (int, none_type,),  # noqa: E501
            'ssh_host': (str,),  # noqa: E501
            'ssh_port': (int,),  # noqa: E501
            'external_ip': (str,),  # noqa: E501
            'internal_ip': (str,),  # noqa: E501
            'volume_id': (str, none_type,),  # noqa: E501
            'platform': (str, none_type,),  # noqa: E501
            'platform_version': (str, none_type,),  # noqa: E501
            'ssh_username': (str,),  # noqa: E501
            'ssh_password': (str, none_type,),  # noqa: E501
            'ssh_password_hash': (str, none_type,),  # noqa: E501
            'os_device': (str,),  # noqa: E501
            'os_type': (str,),  # noqa: E501
            'data_device': (str,),  # noqa: E501
            'lvm_enabled': (bool,),  # noqa: E501
            'api_key': (str,),  # noqa: E501
            'software_raid': (bool,),  # noqa: E501
            'date_created': (datetime,),  # noqa: E501
            'last_updated': (datetime,),  # noqa: E501
            'stats': (ServerStats,),  # noqa: E501
            'status': (str,),  # noqa: E501
            'status_message': (str, none_type,),  # noqa: E501
            'error_message': (str, none_type,),  # noqa: E501
            'status_date': (datetime, none_type,),  # noqa: E501
            'status_percent': (str, none_type,),  # noqa: E501
            'status_eta': (str, none_type,),  # noqa: E501
            'power_state': (str,),  # noqa: E501
            'agent_installed': (bool,),  # noqa: E501
            'last_agent_update': (str, none_type,),  # noqa: E501
            'agent_version': (str, none_type,),  # noqa: E501
            'max_cores': (int,),  # noqa: E501
            'cores_per_socket': (int, none_type,),  # noqa: E501
            'max_memory': (int,),  # noqa: E501
            'max_storage': (int,),  # noqa: E501
            'max_cpu': (int, none_type,),  # noqa: E501
            'hourly_cost': (float,),  # noqa: E501
            'hourly_price': (float,),  # noqa: E501
            'source_image': (PriceSetPricesInnerVolumeType,),  # noqa: E501
            'server_os': (ServerServerOs,),  # noqa: E501
            'volumes': ([ServerVolumesInner],),  # noqa: E501
            'controllers': ([GuidanceVmwareSizingResourceControllersInner],),  # noqa: E501
            'interfaces': ([ServerInterfacesInner],),  # noqa: E501
            'labels': ([{str: (bool, date, datetime, dict, float, int, list, str, none_type)}], none_type,),  # noqa: E501
            'tags': ([{str: (bool, date, datetime, dict, float, int, list, str, none_type)}], none_type,),  # noqa: E501
            'enabled': (bool,),  # noqa: E501
            'tag_compliant': (str, none_type,),  # noqa: E501
            'containers': ([int],),  # noqa: E501
            'config': (ServerConfig,),  # noqa: E501
            'guest_console_preferred': (bool,),  # noqa: E501
            'guest_console_type': (str, none_type,),  # noqa: E501
            'guest_console_username': (str, none_type,),  # noqa: E501
            'guest_console_password': (str, none_type,),  # noqa: E501
            'guest_console_password_hash': (str, none_type,),  # noqa: E501
            'guest_console_port': (str, none_type,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'id': 'id',  # noqa: E501
        'uuid': 'uuid',  # noqa: E501
        'external_id': 'externalId',  # noqa: E501
        'internal_id': 'internalId',  # noqa: E501
        'external_unique_id': 'externalUniqueId',  # noqa: E501
        'name': 'name',  # noqa: E501
        'external_name': 'externalName',  # noqa: E501
        'hostname': 'hostname',  # noqa: E501
        'parent_server': 'parentServer',  # noqa: E501
        'account_id': 'accountId',  # noqa: E501
        'account': 'account',  # noqa: E501
        'owner': 'owner',  # noqa: E501
        'zone': 'zone',  # noqa: E501
        'plan': 'plan',  # noqa: E501
        'compute_server_type': 'computeServerType',  # noqa: E501
        'visibility': 'visibility',  # noqa: E501
        'description': 'description',  # noqa: E501
        'zone_id': 'zoneId',  # noqa: E501
        'site_id': 'siteId',  # noqa: E501
        'resource_pool_id': 'resourcePoolId',  # noqa: E501
        'folder_id': 'folderId',  # noqa: E501
        'ssh_host': 'sshHost',  # noqa: E501
        'ssh_port': 'sshPort',  # noqa: E501
        'external_ip': 'externalIp',  # noqa: E501
        'internal_ip': 'internalIp',  # noqa: E501
        'volume_id': 'volumeId',  # noqa: E501
        'platform': 'platform',  # noqa: E501
        'platform_version': 'platformVersion',  # noqa: E501
        'ssh_username': 'sshUsername',  # noqa: E501
        'ssh_password': 'sshPassword',  # noqa: E501
        'ssh_password_hash': 'sshPasswordHash',  # noqa: E501
        'os_device': 'osDevice',  # noqa: E501
        'os_type': 'osType',  # noqa: E501
        'data_device': 'dataDevice',  # noqa: E501
        'lvm_enabled': 'lvmEnabled',  # noqa: E501
        'api_key': 'apiKey',  # noqa: E501
        'software_raid': 'softwareRaid',  # noqa: E501
        'date_created': 'dateCreated',  # noqa: E501
        'last_updated': 'lastUpdated',  # noqa: E501
        'stats': 'stats',  # noqa: E501
        'status': 'status',  # noqa: E501
        'status_message': 'statusMessage',  # noqa: E501
        'error_message': 'errorMessage',  # noqa: E501
        'status_date': 'statusDate',  # noqa: E501
        'status_percent': 'statusPercent',  # noqa: E501
        'status_eta': 'statusEta',  # noqa: E501
        'power_state': 'powerState',  # noqa: E501
        'agent_installed': 'agentInstalled',  # noqa: E501
        'last_agent_update': 'lastAgentUpdate',  # noqa: E501
        'agent_version': 'agentVersion',  # noqa: E501
        'max_cores': 'maxCores',  # noqa: E501
        'cores_per_socket': 'coresPerSocket',  # noqa: E501
        'max_memory': 'maxMemory',  # noqa: E501
        'max_storage': 'maxStorage',  # noqa: E501
        'max_cpu': 'maxCpu',  # noqa: E501
        'hourly_cost': 'hourlyCost',  # noqa: E501
        'hourly_price': 'hourlyPrice',  # noqa: E501
        'source_image': 'sourceImage',  # noqa: E501
        'server_os': 'serverOs',  # noqa: E501
        'volumes': 'volumes',  # noqa: E501
        'controllers': 'controllers',  # noqa: E501
        'interfaces': 'interfaces',  # noqa: E501
        'labels': 'labels',  # noqa: E501
        'tags': 'tags',  # noqa: E501
        'enabled': 'enabled',  # noqa: E501
        'tag_compliant': 'tagCompliant',  # noqa: E501
        'containers': 'containers',  # noqa: E501
        'config': 'config',  # noqa: E501
        'guest_console_preferred': 'guestConsolePreferred',  # noqa: E501
        'guest_console_type': 'guestConsoleType',  # noqa: E501
        'guest_console_username': 'guestConsoleUsername',  # noqa: E501
        'guest_console_password': 'guestConsolePassword',  # noqa: E501
        'guest_console_password_hash': 'guestConsolePasswordHash',  # noqa: E501
        'guest_console_port': 'guestConsolePort',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """Server - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            id (int): [optional]  # noqa: E501
            uuid (str): [optional]  # noqa: E501
            external_id (str): [optional]  # noqa: E501
            internal_id (str, none_type): [optional]  # noqa: E501
            external_unique_id (str, none_type): [optional]  # noqa: E501
            name (str): [optional]  # noqa: E501
            external_name (str): [optional]  # noqa: E501
            hostname (str): [optional]  # noqa: E501
            parent_server (ListDeploys200ResponseAllOfAppDeploysInnerInstance): [optional]  # noqa: E501
            account_id (int): [optional]  # noqa: E501
            account (ListDeploys200ResponseAllOfAppDeploysInnerInstance): [optional]  # noqa: E501
            owner (Owner): [optional]  # noqa: E501
            zone (ListDeploys200ResponseAllOfAppDeploysInnerInstance): [optional]  # noqa: E501
            plan (ListLoadBalancerMonitors200ResponseAllOfLoadBalancerMonitorsInnerLoadBalancerType): [optional]  # noqa: E501
            compute_server_type (ClusterLayoutComputeServersInnerComputeServerType): [optional]  # noqa: E501
            visibility (str): [optional]  # noqa: E501
            description (str, none_type): [optional]  # noqa: E501
            zone_id (int): [optional]  # noqa: E501
            site_id (int): [optional]  # noqa: E501
            resource_pool_id (int): [optional]  # noqa: E501
            folder_id (int, none_type): [optional]  # noqa: E501
            ssh_host (str): [optional]  # noqa: E501
            ssh_port (int): [optional]  # noqa: E501
            external_ip (str): [optional]  # noqa: E501
            internal_ip (str): [optional]  # noqa: E501
            volume_id (str, none_type): [optional]  # noqa: E501
            platform (str, none_type): [optional]  # noqa: E501
            platform_version (str, none_type): [optional]  # noqa: E501
            ssh_username (str): [optional]  # noqa: E501
            ssh_password (str, none_type): [optional]  # noqa: E501
            ssh_password_hash (str, none_type): [optional]  # noqa: E501
            os_device (str): [optional]  # noqa: E501
            os_type (str): [optional]  # noqa: E501
            data_device (str): [optional]  # noqa: E501
            lvm_enabled (bool): [optional]  # noqa: E501
            api_key (str): [optional]  # noqa: E501
            software_raid (bool): [optional]  # noqa: E501
            date_created (datetime): [optional]  # noqa: E501
            last_updated (datetime): [optional]  # noqa: E501
            stats (ServerStats): [optional]  # noqa: E501
            status (str): [optional]  # noqa: E501
            status_message (str, none_type): [optional]  # noqa: E501
            error_message (str, none_type): [optional]  # noqa: E501
            status_date (datetime, none_type): [optional]  # noqa: E501
            status_percent (str, none_type): [optional]  # noqa: E501
            status_eta (str, none_type): [optional]  # noqa: E501
            power_state (str): [optional]  # noqa: E501
            agent_installed (bool): [optional]  # noqa: E501
            last_agent_update (str, none_type): [optional]  # noqa: E501
            agent_version (str, none_type): [optional]  # noqa: E501
            max_cores (int): [optional]  # noqa: E501
            cores_per_socket (int, none_type): [optional]  # noqa: E501
            max_memory (int): [optional]  # noqa: E501
            max_storage (int): [optional]  # noqa: E501
            max_cpu (int, none_type): [optional]  # noqa: E501
            hourly_cost (float): [optional]  # noqa: E501
            hourly_price (float): [optional]  # noqa: E501
            source_image (PriceSetPricesInnerVolumeType): [optional]  # noqa: E501
            server_os (ServerServerOs): [optional]  # noqa: E501
            volumes ([ServerVolumesInner]): [optional]  # noqa: E501
            controllers ([GuidanceVmwareSizingResourceControllersInner]): [optional]  # noqa: E501
            interfaces ([ServerInterfacesInner]): [optional]  # noqa: E501
            labels ([{str: (bool, date, datetime, dict, float, int, list, str, none_type)}], none_type): [optional]  # noqa: E501
            tags ([{str: (bool, date, datetime, dict, float, int, list, str, none_type)}], none_type): [optional]  # noqa: E501
            enabled (bool): [optional]  # noqa: E501
            tag_compliant (str, none_type): [optional]  # noqa: E501
            containers ([int]): [optional]  # noqa: E501
            config (ServerConfig): [optional]  # noqa: E501
            guest_console_preferred (bool): [optional]  # noqa: E501
            guest_console_type (str, none_type): [optional]  # noqa: E501
            guest_console_username (str, none_type): [optional]  # noqa: E501
            guest_console_password (str, none_type): [optional]  # noqa: E501
            guest_console_password_hash (str, none_type): [optional]  # noqa: E501
            guest_console_port (str, none_type): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', True)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """Server - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            id (int): [optional]  # noqa: E501
            uuid (str): [optional]  # noqa: E501
            external_id (str): [optional]  # noqa: E501
            internal_id (str, none_type): [optional]  # noqa: E501
            external_unique_id (str, none_type): [optional]  # noqa: E501
            name (str): [optional]  # noqa: E501
            external_name (str): [optional]  # noqa: E501
            hostname (str): [optional]  # noqa: E501
            parent_server (ListDeploys200ResponseAllOfAppDeploysInnerInstance): [optional]  # noqa: E501
            account_id (int): [optional]  # noqa: E501
            account (ListDeploys200ResponseAllOfAppDeploysInnerInstance): [optional]  # noqa: E501
            owner (Owner): [optional]  # noqa: E501
            zone (ListDeploys200ResponseAllOfAppDeploysInnerInstance): [optional]  # noqa: E501
            plan (ListLoadBalancerMonitors200ResponseAllOfLoadBalancerMonitorsInnerLoadBalancerType): [optional]  # noqa: E501
            compute_server_type (ClusterLayoutComputeServersInnerComputeServerType): [optional]  # noqa: E501
            visibility (str): [optional]  # noqa: E501
            description (str, none_type): [optional]  # noqa: E501
            zone_id (int): [optional]  # noqa: E501
            site_id (int): [optional]  # noqa: E501
            resource_pool_id (int): [optional]  # noqa: E501
            folder_id (int, none_type): [optional]  # noqa: E501
            ssh_host (str): [optional]  # noqa: E501
            ssh_port (int): [optional]  # noqa: E501
            external_ip (str): [optional]  # noqa: E501
            internal_ip (str): [optional]  # noqa: E501
            volume_id (str, none_type): [optional]  # noqa: E501
            platform (str, none_type): [optional]  # noqa: E501
            platform_version (str, none_type): [optional]  # noqa: E501
            ssh_username (str): [optional]  # noqa: E501
            ssh_password (str, none_type): [optional]  # noqa: E501
            ssh_password_hash (str, none_type): [optional]  # noqa: E501
            os_device (str): [optional]  # noqa: E501
            os_type (str): [optional]  # noqa: E501
            data_device (str): [optional]  # noqa: E501
            lvm_enabled (bool): [optional]  # noqa: E501
            api_key (str): [optional]  # noqa: E501
            software_raid (bool): [optional]  # noqa: E501
            date_created (datetime): [optional]  # noqa: E501
            last_updated (datetime): [optional]  # noqa: E501
            stats (ServerStats): [optional]  # noqa: E501
            status (str): [optional]  # noqa: E501
            status_message (str, none_type): [optional]  # noqa: E501
            error_message (str, none_type): [optional]  # noqa: E501
            status_date (datetime, none_type): [optional]  # noqa: E501
            status_percent (str, none_type): [optional]  # noqa: E501
            status_eta (str, none_type): [optional]  # noqa: E501
            power_state (str): [optional]  # noqa: E501
            agent_installed (bool): [optional]  # noqa: E501
            last_agent_update (str, none_type): [optional]  # noqa: E501
            agent_version (str, none_type): [optional]  # noqa: E501
            max_cores (int): [optional]  # noqa: E501
            cores_per_socket (int, none_type): [optional]  # noqa: E501
            max_memory (int): [optional]  # noqa: E501
            max_storage (int): [optional]  # noqa: E501
            max_cpu (int, none_type): [optional]  # noqa: E501
            hourly_cost (float): [optional]  # noqa: E501
            hourly_price (float): [optional]  # noqa: E501
            source_image (PriceSetPricesInnerVolumeType): [optional]  # noqa: E501
            server_os (ServerServerOs): [optional]  # noqa: E501
            volumes ([ServerVolumesInner]): [optional]  # noqa: E501
            controllers ([GuidanceVmwareSizingResourceControllersInner]): [optional]  # noqa: E501
            interfaces ([ServerInterfacesInner]): [optional]  # noqa: E501
            labels ([{str: (bool, date, datetime, dict, float, int, list, str, none_type)}], none_type): [optional]  # noqa: E501
            tags ([{str: (bool, date, datetime, dict, float, int, list, str, none_type)}], none_type): [optional]  # noqa: E501
            enabled (bool): [optional]  # noqa: E501
            tag_compliant (str, none_type): [optional]  # noqa: E501
            containers ([int]): [optional]  # noqa: E501
            config (ServerConfig): [optional]  # noqa: E501
            guest_console_preferred (bool): [optional]  # noqa: E501
            guest_console_type (str, none_type): [optional]  # noqa: E501
            guest_console_username (str, none_type): [optional]  # noqa: E501
            guest_console_password (str, none_type): [optional]  # noqa: E501
            guest_console_password_hash (str, none_type): [optional]  # noqa: E501
            guest_console_port (str, none_type): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
