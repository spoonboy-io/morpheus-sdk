"""
    Morpheus API

    Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.  # noqa: E501

    The version of the OpenAPI document: 6.2.1
    Contact: dev@morpheusdata.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from openapi_client.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from openapi_client.exceptions import ApiAttributeError


def lazy_import():
    from openapi_client.model.add_prices_request_price_account import AddPricesRequestPriceAccount
    from openapi_client.model.add_prices_request_price_datastore import AddPricesRequestPriceDatastore
    from openapi_client.model.add_prices_request_price_volume_type import AddPricesRequestPriceVolumeType
    globals()['AddPricesRequestPriceAccount'] = AddPricesRequestPriceAccount
    globals()['AddPricesRequestPriceDatastore'] = AddPricesRequestPriceDatastore
    globals()['AddPricesRequestPriceVolumeType'] = AddPricesRequestPriceVolumeType


class AddPricesRequestPrice(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
        ('price_type',): {
            'FIXED': "fixed",
            'COMPUTE': "compute",
            'MEMORY': "memory",
            'CORES': "cores",
            'STORAGE': "storage",
            'DATASTORE': "datastore",
            'PLATFORM': "platform",
            'SOFTWARE': "software",
            'LOAD_BALANCER': "load_balancer",
            'LOAD_BALANCER_VIRTUAL_SERVER': "load_balancer_virtual_server",
        },
        ('price_unit',): {
            'MINUTE': "minute",
            'HOUR': "hour",
            'DAY': "day",
            'MONTH': "month",
            'YEAR': "year",
            'TWO_YEAR': "two year",
            'THREE_YEAR': "three year",
            'FOUR_YEAR': "four year",
            'FIVE_YEAR': "five year",
        },
        ('incur_charges',): {
            'RUNNING': "running",
            'STOPPED': "stopped",
            'ALWAYS': "always",
        },
        ('markup_type',): {
            'FIXED': "fixed",
            'PERCENT': "percent",
            'CUSTOM': "custom",
        },
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'name': (str,),  # noqa: E501
            'code': (str,),  # noqa: E501
            'price_type': (str,),  # noqa: E501
            'price_unit': (str,),  # noqa: E501
            'incur_charges': (str,),  # noqa: E501
            'currency': (str,),  # noqa: E501
            'cost': (float,),  # noqa: E501
            'account': (AddPricesRequestPriceAccount,),  # noqa: E501
            'markup_type': (str,),  # noqa: E501
            'markup': (float,),  # noqa: E501
            'markup_percent': (float,),  # noqa: E501
            'custom_price': (float,),  # noqa: E501
            'platform': (str,),  # noqa: E501
            'software': (str,),  # noqa: E501
            'volume_type': (AddPricesRequestPriceVolumeType,),  # noqa: E501
            'datastore': (AddPricesRequestPriceDatastore,),  # noqa: E501
            'cross_cloud_apply': (bool,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'name': 'name',  # noqa: E501
        'code': 'code',  # noqa: E501
        'price_type': 'priceType',  # noqa: E501
        'price_unit': 'priceUnit',  # noqa: E501
        'incur_charges': 'incurCharges',  # noqa: E501
        'currency': 'currency',  # noqa: E501
        'cost': 'cost',  # noqa: E501
        'account': 'account',  # noqa: E501
        'markup_type': 'markupType',  # noqa: E501
        'markup': 'markup',  # noqa: E501
        'markup_percent': 'markupPercent',  # noqa: E501
        'custom_price': 'customPrice',  # noqa: E501
        'platform': 'platform',  # noqa: E501
        'software': 'software',  # noqa: E501
        'volume_type': 'volumeType',  # noqa: E501
        'datastore': 'datastore',  # noqa: E501
        'cross_cloud_apply': 'crossCloudApply',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, name, code, price_type, price_unit, incur_charges, currency, cost, *args, **kwargs):  # noqa: E501
        """AddPricesRequestPrice - a model defined in OpenAPI

        Args:
            name (str): Price name
            code (str): Price code, must be unique
            price_type (str): Restricts query to only load only prices with specified priceType. * `fixed` - Everything * `compute` - Memory + CPU * `memory` - Memory * `cores` - Cores * `storage` - Storage * `datastore` - Datastore * `platform` - Platform * `software` - Software * `load_balancer` - Load Balancer * `load_balancer_virtual_server` - Load Balancer Virtual Server 
            price_unit (str): The unit of pricing
            incur_charges (str): Indicates when to incur charge
            currency (str): ISO Currency code
            cost (float): Cost

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            account (AddPricesRequestPriceAccount): [optional]  # noqa: E501
            markup_type (str): Price adjustment type. [optional]  # noqa: E501
            markup (float): Amount for `fixed` price adjustment type. [optional]  # noqa: E501
            markup_percent (float): Percent for `percent` price adjustment type. [optional]  # noqa: E501
            custom_price (float): Custom price for `custom` price adjustment type. [optional]  # noqa: E501
            platform (str): Platform.  Required for `platform` price type. [optional]  # noqa: E501
            software (str): Software.  Required for software price type. [optional]  # noqa: E501
            volume_type (AddPricesRequestPriceVolumeType): [optional]  # noqa: E501
            datastore (AddPricesRequestPriceDatastore): [optional]  # noqa: E501
            cross_cloud_apply (bool): Apply price across clouds, optional true/false flag for datastore price type. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', True)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.name = name
        self.code = code
        self.price_type = price_type
        self.price_unit = price_unit
        self.incur_charges = incur_charges
        self.currency = currency
        self.cost = cost
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, name, code, price_type, price_unit, incur_charges, currency, cost, *args, **kwargs):  # noqa: E501
        """AddPricesRequestPrice - a model defined in OpenAPI

        Args:
            name (str): Price name
            code (str): Price code, must be unique
            price_type (str): Restricts query to only load only prices with specified priceType. * `fixed` - Everything * `compute` - Memory + CPU * `memory` - Memory * `cores` - Cores * `storage` - Storage * `datastore` - Datastore * `platform` - Platform * `software` - Software * `load_balancer` - Load Balancer * `load_balancer_virtual_server` - Load Balancer Virtual Server 
            price_unit (str): The unit of pricing
            incur_charges (str): Indicates when to incur charge
            currency (str): ISO Currency code
            cost (float): Cost

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            account (AddPricesRequestPriceAccount): [optional]  # noqa: E501
            markup_type (str): Price adjustment type. [optional]  # noqa: E501
            markup (float): Amount for `fixed` price adjustment type. [optional]  # noqa: E501
            markup_percent (float): Percent for `percent` price adjustment type. [optional]  # noqa: E501
            custom_price (float): Custom price for `custom` price adjustment type. [optional]  # noqa: E501
            platform (str): Platform.  Required for `platform` price type. [optional]  # noqa: E501
            software (str): Software.  Required for software price type. [optional]  # noqa: E501
            volume_type (AddPricesRequestPriceVolumeType): [optional]  # noqa: E501
            datastore (AddPricesRequestPriceDatastore): [optional]  # noqa: E501
            cross_cloud_apply (bool): Apply price across clouds, optional true/false flag for datastore price type. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.name = name
        self.code = code
        self.price_type = price_type
        self.price_unit = price_unit
        self.incur_charges = incur_charges
        self.currency = currency
        self.cost = cost
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
