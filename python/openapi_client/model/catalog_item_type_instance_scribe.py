"""
    Morpheus API

    Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.  # noqa: E501

    The version of the OpenAPI document: 6.2.1
    Contact: dev@morpheusdata.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from openapi_client.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from openapi_client.exceptions import ApiAttributeError


def lazy_import():
    from openapi_client.model.catalog_item_type_instance_scribe_cloud import CatalogItemTypeInstanceScribeCloud
    from openapi_client.model.catalog_item_type_instance_scribe_config import CatalogItemTypeInstanceScribeConfig
    from openapi_client.model.catalog_item_type_instance_scribe_group import CatalogItemTypeInstanceScribeGroup
    from openapi_client.model.catalog_item_type_instance_scribe_layout import CatalogItemTypeInstanceScribeLayout
    from openapi_client.model.catalog_item_type_instance_scribe_plan import CatalogItemTypeInstanceScribePlan
    from openapi_client.model.catalog_item_type_instance_scribe_ports_inner import CatalogItemTypeInstanceScribePortsInner
    from openapi_client.model.catalog_item_type_instance_scribe_security_groups_inner import CatalogItemTypeInstanceScribeSecurityGroupsInner
    from openapi_client.model.instance_create_network import InstanceCreateNetwork
    from openapi_client.model.instance_create_volume import InstanceCreateVolume
    from openapi_client.model.service_plan_options import ServicePlanOptions
    from openapi_client.model.update_host_managed_request_server_tags_inner import UpdateHostManagedRequestServerTagsInner
    globals()['CatalogItemTypeInstanceScribeCloud'] = CatalogItemTypeInstanceScribeCloud
    globals()['CatalogItemTypeInstanceScribeConfig'] = CatalogItemTypeInstanceScribeConfig
    globals()['CatalogItemTypeInstanceScribeGroup'] = CatalogItemTypeInstanceScribeGroup
    globals()['CatalogItemTypeInstanceScribeLayout'] = CatalogItemTypeInstanceScribeLayout
    globals()['CatalogItemTypeInstanceScribePlan'] = CatalogItemTypeInstanceScribePlan
    globals()['CatalogItemTypeInstanceScribePortsInner'] = CatalogItemTypeInstanceScribePortsInner
    globals()['CatalogItemTypeInstanceScribeSecurityGroupsInner'] = CatalogItemTypeInstanceScribeSecurityGroupsInner
    globals()['InstanceCreateNetwork'] = InstanceCreateNetwork
    globals()['InstanceCreateVolume'] = InstanceCreateVolume
    globals()['ServicePlanOptions'] = ServicePlanOptions
    globals()['UpdateHostManagedRequestServerTagsInner'] = UpdateHostManagedRequestServerTagsInner


class CatalogItemTypeInstanceScribe(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'group': (CatalogItemTypeInstanceScribeGroup,),  # noqa: E501
            'cloud': (CatalogItemTypeInstanceScribeCloud,),  # noqa: E501
            'type': (str,),  # noqa: E501
            'name': (str,),  # noqa: E501
            'config': (CatalogItemTypeInstanceScribeConfig,),  # noqa: E501
            'volumes': ([InstanceCreateVolume],),  # noqa: E501
            'layout': (CatalogItemTypeInstanceScribeLayout,),  # noqa: E501
            'plan': (CatalogItemTypeInstanceScribePlan,),  # noqa: E501
            'host_name': (str,),  # noqa: E501
            'environment': (str,),  # noqa: E501
            'version': (str,),  # noqa: E501
            'evars': ([UpdateHostManagedRequestServerTagsInner],),  # noqa: E501
            'service_plan_options': (ServicePlanOptions,),  # noqa: E501
            'security_groups': ([CatalogItemTypeInstanceScribeSecurityGroupsInner], none_type,),  # noqa: E501
            'network_interfaces': ([InstanceCreateNetwork],),  # noqa: E501
            'labels': ([str],),  # noqa: E501
            'tags': ([UpdateHostManagedRequestServerTagsInner],),  # noqa: E501
            'metadata': ([UpdateHostManagedRequestServerTagsInner],),  # noqa: E501
            'ports': ([CatalogItemTypeInstanceScribePortsInner],),  # noqa: E501
            'task_set_id': (int,),  # noqa: E501
            'task_set_name': (str,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'group': 'group',  # noqa: E501
        'cloud': 'cloud',  # noqa: E501
        'type': 'type',  # noqa: E501
        'name': 'name',  # noqa: E501
        'config': 'config',  # noqa: E501
        'volumes': 'volumes',  # noqa: E501
        'layout': 'layout',  # noqa: E501
        'plan': 'plan',  # noqa: E501
        'host_name': 'hostName',  # noqa: E501
        'environment': 'environment',  # noqa: E501
        'version': 'version',  # noqa: E501
        'evars': 'evars',  # noqa: E501
        'service_plan_options': 'servicePlanOptions',  # noqa: E501
        'security_groups': 'securityGroups',  # noqa: E501
        'network_interfaces': 'networkInterfaces',  # noqa: E501
        'labels': 'labels',  # noqa: E501
        'tags': 'tags',  # noqa: E501
        'metadata': 'metadata',  # noqa: E501
        'ports': 'ports',  # noqa: E501
        'task_set_id': 'taskSetId',  # noqa: E501
        'task_set_name': 'taskSetName',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, group, cloud, type, name, config, volumes, layout, plan, *args, **kwargs):  # noqa: E501
        """CatalogItemTypeInstanceScribe - a model defined in OpenAPI

        Args:
            group (CatalogItemTypeInstanceScribeGroup):
            cloud (CatalogItemTypeInstanceScribeCloud):
            type (str): The type of instance by code we want to fetch.
            name (str): Name of the instance to be created.
            config (CatalogItemTypeInstanceScribeConfig):
            volumes ([InstanceCreateVolume]): The (optional) volumes parameter is for LV configuration, can create additional LVs at provision It should be passed as an array of
            layout (CatalogItemTypeInstanceScribeLayout):
            plan (CatalogItemTypeInstanceScribePlan):

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            host_name (str): Hostname of the instance to be created.  Can be the same as the instance name.. [optional]  # noqa: E501
            environment (str): Environment code. [optional]  # noqa: E501
            version (str): Version of the layout to create.. [optional]  # noqa: E501
            evars ([UpdateHostManagedRequestServerTagsInner]): Environment Variables, an array of objects that have name and value.. [optional]  # noqa: E501
            service_plan_options (ServicePlanOptions): [optional]  # noqa: E501
            security_groups ([CatalogItemTypeInstanceScribeSecurityGroupsInner], none_type): Key for security group configuration. It should be passed as an array of objects containing the id of the security group to assign the instance to.. [optional]  # noqa: E501
            network_interfaces ([InstanceCreateNetwork]): The networkInterfaces parameter is for network configuration.  The Options API `/api/options/zoneNetworkOptions?zoneId=5&provisionTypeId=10` can be used to see which options are available. . [optional]  # noqa: E501
            labels ([str]): Array of strings (keywords).. [optional]  # noqa: E501
            tags ([UpdateHostManagedRequestServerTagsInner]): Metadata tags, Array of objects having a name and value.. [optional]  # noqa: E501
            metadata ([UpdateHostManagedRequestServerTagsInner]): Alias for `tags`.. [optional]  # noqa: E501
            ports ([CatalogItemTypeInstanceScribePortsInner]): The ports parameter is for port configuration.  The layout may have default ports, which are defined in node types, that are always configured. This parameter will be for additional custom ports to be opened. . [optional]  # noqa: E501
            task_set_id (int): The Workflow ID to execute.. [optional]  # noqa: E501
            task_set_name (str): The Workflow Name to execute.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', True)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.group = group
        self.cloud = cloud
        self.type = type
        self.name = name
        self.config = config
        self.volumes = volumes
        self.layout = layout
        self.plan = plan
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, group, cloud, type, name, config, volumes, layout, plan, *args, **kwargs):  # noqa: E501
        """CatalogItemTypeInstanceScribe - a model defined in OpenAPI

        Args:
            group (CatalogItemTypeInstanceScribeGroup):
            cloud (CatalogItemTypeInstanceScribeCloud):
            type (str): The type of instance by code we want to fetch.
            name (str): Name of the instance to be created.
            config (CatalogItemTypeInstanceScribeConfig):
            volumes ([InstanceCreateVolume]): The (optional) volumes parameter is for LV configuration, can create additional LVs at provision It should be passed as an array of
            layout (CatalogItemTypeInstanceScribeLayout):
            plan (CatalogItemTypeInstanceScribePlan):

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            host_name (str): Hostname of the instance to be created.  Can be the same as the instance name.. [optional]  # noqa: E501
            environment (str): Environment code. [optional]  # noqa: E501
            version (str): Version of the layout to create.. [optional]  # noqa: E501
            evars ([UpdateHostManagedRequestServerTagsInner]): Environment Variables, an array of objects that have name and value.. [optional]  # noqa: E501
            service_plan_options (ServicePlanOptions): [optional]  # noqa: E501
            security_groups ([CatalogItemTypeInstanceScribeSecurityGroupsInner], none_type): Key for security group configuration. It should be passed as an array of objects containing the id of the security group to assign the instance to.. [optional]  # noqa: E501
            network_interfaces ([InstanceCreateNetwork]): The networkInterfaces parameter is for network configuration.  The Options API `/api/options/zoneNetworkOptions?zoneId=5&provisionTypeId=10` can be used to see which options are available. . [optional]  # noqa: E501
            labels ([str]): Array of strings (keywords).. [optional]  # noqa: E501
            tags ([UpdateHostManagedRequestServerTagsInner]): Metadata tags, Array of objects having a name and value.. [optional]  # noqa: E501
            metadata ([UpdateHostManagedRequestServerTagsInner]): Alias for `tags`.. [optional]  # noqa: E501
            ports ([CatalogItemTypeInstanceScribePortsInner]): The ports parameter is for port configuration.  The layout may have default ports, which are defined in node types, that are always configured. This parameter will be for additional custom ports to be opened. . [optional]  # noqa: E501
            task_set_id (int): The Workflow ID to execute.. [optional]  # noqa: E501
            task_set_name (str): The Workflow Name to execute.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.group = group
        self.cloud = cloud
        self.type = type
        self.name = name
        self.config = config
        self.volumes = volumes
        self.layout = layout
        self.plan = plan
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
