"""
    Morpheus API

    Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.  # noqa: E501

    The version of the OpenAPI document: 6.2.1
    Contact: dev@morpheusdata.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from openapi_client.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from openapi_client.exceptions import ApiAttributeError


def lazy_import():
    from openapi_client.model.creds import Creds
    from openapi_client.model.integration_ansible import IntegrationAnsible
    from openapi_client.model.integration_ansible_tower import IntegrationAnsibleTower
    from openapi_client.model.integration_bind_dns import IntegrationBindDNS
    from openapi_client.model.integration_chef import IntegrationChef
    from openapi_client.model.integration_cherwell import IntegrationCherwell
    from openapi_client.model.integration_cypher import IntegrationCypher
    from openapi_client.model.integration_docker_repo import IntegrationDockerRepo
    from openapi_client.model.integration_git_hub import IntegrationGitHub
    from openapi_client.model.integration_git_repo import IntegrationGitRepo
    from openapi_client.model.integration_microsoft_dns import IntegrationMicrosoftDNS
    from openapi_client.model.integration_power_dns import IntegrationPowerDNS
    from openapi_client.model.integration_puppet import IntegrationPuppet
    from openapi_client.model.integration_remedy import IntegrationRemedy
    from openapi_client.model.integration_route53 import IntegrationRoute53
    from openapi_client.model.integration_salt_master import IntegrationSaltMaster
    from openapi_client.model.integration_snow import IntegrationSNOW
    from openapi_client.model.integrationv_ro import IntegrationvRO
    from openapi_client.model.list_deploys200_response_all_of_app_deploys_inner_instance import ListDeploys200ResponseAllOfAppDeploysInnerInstance
    from openapi_client.model.list_load_balancer_monitors200_response_all_of_load_balancer_monitors_inner_load_balancer_type import ListLoadBalancerMonitors200ResponseAllOfLoadBalancerMonitorsInnerLoadBalancerType
    globals()['Creds'] = Creds
    globals()['IntegrationAnsible'] = IntegrationAnsible
    globals()['IntegrationAnsibleTower'] = IntegrationAnsibleTower
    globals()['IntegrationBindDNS'] = IntegrationBindDNS
    globals()['IntegrationChef'] = IntegrationChef
    globals()['IntegrationCherwell'] = IntegrationCherwell
    globals()['IntegrationCypher'] = IntegrationCypher
    globals()['IntegrationDockerRepo'] = IntegrationDockerRepo
    globals()['IntegrationGitHub'] = IntegrationGitHub
    globals()['IntegrationGitRepo'] = IntegrationGitRepo
    globals()['IntegrationMicrosoftDNS'] = IntegrationMicrosoftDNS
    globals()['IntegrationPowerDNS'] = IntegrationPowerDNS
    globals()['IntegrationPuppet'] = IntegrationPuppet
    globals()['IntegrationRemedy'] = IntegrationRemedy
    globals()['IntegrationRoute53'] = IntegrationRoute53
    globals()['IntegrationSNOW'] = IntegrationSNOW
    globals()['IntegrationSaltMaster'] = IntegrationSaltMaster
    globals()['IntegrationvRO'] = IntegrationvRO
    globals()['ListDeploys200ResponseAllOfAppDeploysInnerInstance'] = ListDeploys200ResponseAllOfAppDeploysInnerInstance
    globals()['ListLoadBalancerMonitors200ResponseAllOfLoadBalancerMonitorsInnerLoadBalancerType'] = ListLoadBalancerMonitors200ResponseAllOfLoadBalancerMonitorsInnerLoadBalancerType


class ListIntegrations200ResponseAnyOfIntegrationsInner(ModelComposed):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
        ('type',): {
            'VRO': "vro",
        },
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'id': (int,),  # noqa: E501
            'name': (str,),  # noqa: E501
            'enabled': (bool,),  # noqa: E501
            'type': (str,),  # noqa: E501
            'integration_type': (ListLoadBalancerMonitors200ResponseAllOfLoadBalancerMonitorsInnerLoadBalancerType,),  # noqa: E501
            'url': (str,),  # noqa: E501
            'service_key': (ListDeploys200ResponseAllOfAppDeploysInnerInstance,),  # noqa: E501
            'is_plugin': (bool,),  # noqa: E501
            'config': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}, none_type,),  # noqa: E501
            'status': (str,),  # noqa: E501
            'status_date': (datetime,),  # noqa: E501
            'status_message': (str, none_type,),  # noqa: E501
            'last_sync': (str, none_type,),  # noqa: E501
            'last_sync_duration': (str, none_type,),  # noqa: E501
            'credential': (Creds,),  # noqa: E501
            'version': (str,),  # noqa: E501
            'host': (str,),  # noqa: E501
            'username': (str,),  # noqa: E501
            'password': (str,),  # noqa: E501
            'password_hash': (str,),  # noqa: E501
            'token': (str,),  # noqa: E501
            'token_hash': (str,),  # noqa: E501
            'service_flag': (bool,),  # noqa: E501
            'port': (str,),  # noqa: E501
            'path': (str,),  # noqa: E501
            'windows_version': (str,),  # noqa: E501
            'repo_url': (str,),  # noqa: E501
            'service_mode': (str,),  # noqa: E501
            'auth_type': (str,),  # noqa: E501
            'auth_id': (str,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'id': 'id',  # noqa: E501
        'name': 'name',  # noqa: E501
        'enabled': 'enabled',  # noqa: E501
        'type': 'type',  # noqa: E501
        'integration_type': 'integrationType',  # noqa: E501
        'url': 'url',  # noqa: E501
        'service_key': 'serviceKey',  # noqa: E501
        'is_plugin': 'isPlugin',  # noqa: E501
        'config': 'config',  # noqa: E501
        'status': 'status',  # noqa: E501
        'status_date': 'statusDate',  # noqa: E501
        'status_message': 'statusMessage',  # noqa: E501
        'last_sync': 'lastSync',  # noqa: E501
        'last_sync_duration': 'lastSyncDuration',  # noqa: E501
        'credential': 'credential',  # noqa: E501
        'version': 'version',  # noqa: E501
        'host': 'host',  # noqa: E501
        'username': 'username',  # noqa: E501
        'password': 'password',  # noqa: E501
        'password_hash': 'passwordHash',  # noqa: E501
        'token': 'token',  # noqa: E501
        'token_hash': 'tokenHash',  # noqa: E501
        'service_flag': 'serviceFlag',  # noqa: E501
        'port': 'port',  # noqa: E501
        'path': 'path',  # noqa: E501
        'windows_version': 'windowsVersion',  # noqa: E501
        'repo_url': 'repoUrl',  # noqa: E501
        'service_mode': 'serviceMode',  # noqa: E501
        'auth_type': 'authType',  # noqa: E501
        'auth_id': 'authId',  # noqa: E501
    }

    read_only_vars = {
    }

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """ListIntegrations200ResponseAnyOfIntegrationsInner - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            id (int): [optional]  # noqa: E501
            name (str): [optional]  # noqa: E501
            enabled (bool): [optional]  # noqa: E501
            type (str): [optional] if omitted the server will use the default value of "vro"  # noqa: E501
            integration_type (ListLoadBalancerMonitors200ResponseAllOfLoadBalancerMonitorsInnerLoadBalancerType): [optional]  # noqa: E501
            url (str): [optional]  # noqa: E501
            service_key (ListDeploys200ResponseAllOfAppDeploysInnerInstance): [optional]  # noqa: E501
            is_plugin (bool): [optional]  # noqa: E501
            config ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}, none_type): [optional]  # noqa: E501
            status (str): [optional]  # noqa: E501
            status_date (datetime): [optional]  # noqa: E501
            status_message (str, none_type): [optional]  # noqa: E501
            last_sync (str, none_type): [optional]  # noqa: E501
            last_sync_duration (str, none_type): [optional]  # noqa: E501
            credential (Creds): [optional]  # noqa: E501
            version (str): [optional]  # noqa: E501
            host (str): [optional]  # noqa: E501
            username (str): [optional]  # noqa: E501
            password (str): [optional]  # noqa: E501
            password_hash (str): [optional]  # noqa: E501
            token (str): [optional]  # noqa: E501
            token_hash (str): [optional]  # noqa: E501
            service_flag (bool): [optional]  # noqa: E501
            port (str): [optional]  # noqa: E501
            path (str): [optional]  # noqa: E501
            windows_version (str): [optional]  # noqa: E501
            repo_url (str): [optional]  # noqa: E501
            service_mode (str): [optional]  # noqa: E501
            auth_type (str): [optional]  # noqa: E501
            auth_id (str): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        constant_args = {
            '_check_type': _check_type,
            '_path_to_item': _path_to_item,
            '_spec_property_naming': _spec_property_naming,
            '_configuration': _configuration,
            '_visited_composed_classes': self._visited_composed_classes,
        }
        composed_info = validate_get_composed_info(
            constant_args, kwargs, self)
        self._composed_instances = composed_info[0]
        self._var_name_to_model_instances = composed_info[1]
        self._additional_properties_model_instances = composed_info[2]
        discarded_args = composed_info[3]

        for var_name, var_value in kwargs.items():
            if var_name in discarded_args and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self._additional_properties_model_instances:
                # discard variable.
                continue
            setattr(self, var_name, var_value)

        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
        '_composed_instances',
        '_var_name_to_model_instances',
        '_additional_properties_model_instances',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """ListIntegrations200ResponseAnyOfIntegrationsInner - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            id (int): [optional]  # noqa: E501
            name (str): [optional]  # noqa: E501
            enabled (bool): [optional]  # noqa: E501
            type (str): [optional] if omitted the server will use the default value of "vro"  # noqa: E501
            integration_type (ListLoadBalancerMonitors200ResponseAllOfLoadBalancerMonitorsInnerLoadBalancerType): [optional]  # noqa: E501
            url (str): [optional]  # noqa: E501
            service_key (ListDeploys200ResponseAllOfAppDeploysInnerInstance): [optional]  # noqa: E501
            is_plugin (bool): [optional]  # noqa: E501
            config ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}, none_type): [optional]  # noqa: E501
            status (str): [optional]  # noqa: E501
            status_date (datetime): [optional]  # noqa: E501
            status_message (str, none_type): [optional]  # noqa: E501
            last_sync (str, none_type): [optional]  # noqa: E501
            last_sync_duration (str, none_type): [optional]  # noqa: E501
            credential (Creds): [optional]  # noqa: E501
            version (str): [optional]  # noqa: E501
            host (str): [optional]  # noqa: E501
            username (str): [optional]  # noqa: E501
            password (str): [optional]  # noqa: E501
            password_hash (str): [optional]  # noqa: E501
            token (str): [optional]  # noqa: E501
            token_hash (str): [optional]  # noqa: E501
            service_flag (bool): [optional]  # noqa: E501
            port (str): [optional]  # noqa: E501
            path (str): [optional]  # noqa: E501
            windows_version (str): [optional]  # noqa: E501
            repo_url (str): [optional]  # noqa: E501
            service_mode (str): [optional]  # noqa: E501
            auth_type (str): [optional]  # noqa: E501
            auth_id (str): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        constant_args = {
            '_check_type': _check_type,
            '_path_to_item': _path_to_item,
            '_spec_property_naming': _spec_property_naming,
            '_configuration': _configuration,
            '_visited_composed_classes': self._visited_composed_classes,
        }
        composed_info = validate_get_composed_info(
            constant_args, kwargs, self)
        self._composed_instances = composed_info[0]
        self._var_name_to_model_instances = composed_info[1]
        self._additional_properties_model_instances = composed_info[2]
        discarded_args = composed_info[3]

        for var_name, var_value in kwargs.items():
            if var_name in discarded_args and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self._additional_properties_model_instances:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")

    @cached_property
    def _composed_schemas():
        # we need this here to make our import statements work
        # we must store _composed_schemas in here so the code is only run
        # when we invoke this method. If we kept this at the class
        # level we would get an error because the class level
        # code would be run when this module is imported, and these composed
        # classes don't exist yet because their module has not finished
        # loading
        lazy_import()
        return {
          'anyOf': [
              IntegrationAnsible,
              IntegrationAnsibleTower,
              IntegrationBindDNS,
              IntegrationChef,
              IntegrationCherwell,
              IntegrationCypher,
              IntegrationDockerRepo,
              IntegrationGitHub,
              IntegrationGitRepo,
              IntegrationMicrosoftDNS,
              IntegrationPowerDNS,
              IntegrationPuppet,
              IntegrationRemedy,
              IntegrationRoute53,
              IntegrationSNOW,
              IntegrationSaltMaster,
              IntegrationvRO,
          ],
          'allOf': [
          ],
          'oneOf': [
          ],
        }
