"""
    Morpheus API

    Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.  # noqa: E501

    The version of the OpenAPI document: 6.2.1
    Contact: dev@morpheusdata.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from openapi_client.api_client import ApiClient, Endpoint as _Endpoint
from openapi_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from openapi_client.model.add_deployment_version200_response import AddDeploymentVersion200Response
from openapi_client.model.add_deployment_version200_response_all_of import AddDeploymentVersion200ResponseAllOf
from openapi_client.model.add_deployment_version_request import AddDeploymentVersionRequest
from openapi_client.model.add_deployments200_response import AddDeployments200Response
from openapi_client.model.add_deployments_request import AddDeploymentsRequest
from openapi_client.model.default_error import DefaultError
from openapi_client.model.get_deployment200_response import GetDeployment200Response
from openapi_client.model.list_deployment_versions200_response import ListDeploymentVersions200Response
from openapi_client.model.list_deployments200_response import ListDeployments200Response
from openapi_client.model.model200_success import Model200Success
from openapi_client.model.update_deployment200_response import UpdateDeployment200Response


class DeploymentsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.add_deployment_file_endpoint = _Endpoint(
            settings={
                'response_type': (Model200Success,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/api/deployments/{deploymentId}/versions/{id}/files{filepath}',
                'operation_id': 'add_deployment_file',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'deployment_id',
                    'id',
                    'filepath',
                    'file',
                ],
                'required': [
                    'deployment_id',
                    'id',
                    'filepath',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'deployment_id':
                        (int,),
                    'id':
                        (int,),
                    'filepath':
                        (str,),
                    'file':
                        (file_type,),
                },
                'attribute_map': {
                    'deployment_id': 'deploymentId',
                    'id': 'id',
                    'filepath': 'filepath',
                    'file': 'file',
                },
                'location_map': {
                    'deployment_id': 'path',
                    'id': 'path',
                    'filepath': 'path',
                    'file': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.add_deployment_version_endpoint = _Endpoint(
            settings={
                'response_type': (AddDeploymentVersion200Response,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/api/deployments/{deploymentId}/versions',
                'operation_id': 'add_deployment_version',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'deployment_id',
                    'add_deployment_version_request',
                ],
                'required': [
                    'deployment_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'deployment_id':
                        (int,),
                    'add_deployment_version_request':
                        (AddDeploymentVersionRequest,),
                },
                'attribute_map': {
                    'deployment_id': 'deploymentId',
                },
                'location_map': {
                    'deployment_id': 'path',
                    'add_deployment_version_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.add_deployments_endpoint = _Endpoint(
            settings={
                'response_type': (AddDeployments200Response,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/api/deployments',
                'operation_id': 'add_deployments',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'add_deployments_request',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'add_deployments_request':
                        (AddDeploymentsRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'add_deployments_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.delete_deployment_endpoint = _Endpoint(
            settings={
                'response_type': (Model200Success,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/api/deployments/{deploymentId}',
                'operation_id': 'delete_deployment',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'deployment_id',
                ],
                'required': [
                    'deployment_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'deployment_id':
                        (int,),
                },
                'attribute_map': {
                    'deployment_id': 'deploymentId',
                },
                'location_map': {
                    'deployment_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_deployment_file_endpoint = _Endpoint(
            settings={
                'response_type': (Model200Success,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/api/deployments/{deploymentId}/versions/{id}/files{filepath}',
                'operation_id': 'delete_deployment_file',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'deployment_id',
                    'id',
                    'filepath',
                    'force',
                ],
                'required': [
                    'deployment_id',
                    'id',
                    'filepath',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'deployment_id':
                        (int,),
                    'id':
                        (int,),
                    'filepath':
                        (str,),
                    'force':
                        (str,),
                },
                'attribute_map': {
                    'deployment_id': 'deploymentId',
                    'id': 'id',
                    'filepath': 'filepath',
                    'force': 'force',
                },
                'location_map': {
                    'deployment_id': 'path',
                    'id': 'path',
                    'filepath': 'path',
                    'force': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_deployment_version_endpoint = _Endpoint(
            settings={
                'response_type': (Model200Success,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/api/deployments/{deploymentId}/versions/{id}',
                'operation_id': 'delete_deployment_version',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'deployment_id',
                    'id',
                ],
                'required': [
                    'deployment_id',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'deployment_id':
                        (int,),
                    'id':
                        (int,),
                },
                'attribute_map': {
                    'deployment_id': 'deploymentId',
                    'id': 'id',
                },
                'location_map': {
                    'deployment_id': 'path',
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_deployment_endpoint = _Endpoint(
            settings={
                'response_type': (GetDeployment200Response,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/api/deployments/{deploymentId}',
                'operation_id': 'get_deployment',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'deployment_id',
                    'max_versions',
                ],
                'required': [
                    'deployment_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'deployment_id':
                        (int,),
                    'max_versions':
                        (int,),
                },
                'attribute_map': {
                    'deployment_id': 'deploymentId',
                    'max_versions': 'maxVersions',
                },
                'location_map': {
                    'deployment_id': 'path',
                    'max_versions': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_deployment_version_endpoint = _Endpoint(
            settings={
                'response_type': (AddDeploymentVersion200ResponseAllOf,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/api/deployments/{deploymentId}/versions/{id}',
                'operation_id': 'get_deployment_version',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'deployment_id',
                    'id',
                ],
                'required': [
                    'deployment_id',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'deployment_id':
                        (int,),
                    'id':
                        (int,),
                },
                'attribute_map': {
                    'deployment_id': 'deploymentId',
                    'id': 'id',
                },
                'location_map': {
                    'deployment_id': 'path',
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.list_deployment_files_endpoint = _Endpoint(
            settings={
                'response_type': (ListDeploymentVersions200Response,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/api/deployments/{deploymentId}/versions/{id}/files{filepath}',
                'operation_id': 'list_deployment_files',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'deployment_id',
                    'id',
                    'filepath',
                    'max',
                    'offset',
                    'phrase',
                    'version',
                ],
                'required': [
                    'deployment_id',
                    'id',
                    'filepath',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'deployment_id':
                        (int,),
                    'id':
                        (int,),
                    'filepath':
                        (str,),
                    'max':
                        (int,),
                    'offset':
                        (int,),
                    'phrase':
                        (str,),
                    'version':
                        (int,),
                },
                'attribute_map': {
                    'deployment_id': 'deploymentId',
                    'id': 'id',
                    'filepath': 'filepath',
                    'max': 'max',
                    'offset': 'offset',
                    'phrase': 'phrase',
                    'version': 'version',
                },
                'location_map': {
                    'deployment_id': 'path',
                    'id': 'path',
                    'filepath': 'path',
                    'max': 'query',
                    'offset': 'query',
                    'phrase': 'query',
                    'version': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.list_deployment_versions_endpoint = _Endpoint(
            settings={
                'response_type': (ListDeploymentVersions200Response,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/api/deployments/{deploymentId}/versions',
                'operation_id': 'list_deployment_versions',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'deployment_id',
                    'max',
                    'offset',
                    'phrase',
                    'version',
                    'type',
                    'date_created',
                    'last_updated',
                ],
                'required': [
                    'deployment_id',
                ],
                'nullable': [
                ],
                'enum': [
                    'type',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('type',): {

                        "FILE": "file",
                        "GIT": "git",
                        "FETCH": "fetch"
                    },
                },
                'openapi_types': {
                    'deployment_id':
                        (int,),
                    'max':
                        (int,),
                    'offset':
                        (int,),
                    'phrase':
                        (str,),
                    'version':
                        (int,),
                    'type':
                        (str,),
                    'date_created':
                        (str,),
                    'last_updated':
                        (datetime,),
                },
                'attribute_map': {
                    'deployment_id': 'deploymentId',
                    'max': 'max',
                    'offset': 'offset',
                    'phrase': 'phrase',
                    'version': 'version',
                    'type': 'type',
                    'date_created': 'dateCreated',
                    'last_updated': 'lastUpdated',
                },
                'location_map': {
                    'deployment_id': 'path',
                    'max': 'query',
                    'offset': 'query',
                    'phrase': 'query',
                    'version': 'query',
                    'type': 'query',
                    'date_created': 'query',
                    'last_updated': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.list_deployments_endpoint = _Endpoint(
            settings={
                'response_type': (ListDeployments200Response,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/api/deployments',
                'operation_id': 'list_deployments',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'max',
                    'offset',
                    'phrase',
                    'name',
                    'description',
                    'date_created',
                    'last_updated',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'max':
                        (int,),
                    'offset':
                        (int,),
                    'phrase':
                        (str,),
                    'name':
                        (str,),
                    'description':
                        (str,),
                    'date_created':
                        (str,),
                    'last_updated':
                        (datetime,),
                },
                'attribute_map': {
                    'max': 'max',
                    'offset': 'offset',
                    'phrase': 'phrase',
                    'name': 'name',
                    'description': 'description',
                    'date_created': 'dateCreated',
                    'last_updated': 'lastUpdated',
                },
                'location_map': {
                    'max': 'query',
                    'offset': 'query',
                    'phrase': 'query',
                    'name': 'query',
                    'description': 'query',
                    'date_created': 'query',
                    'last_updated': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.update_deployment_endpoint = _Endpoint(
            settings={
                'response_type': (UpdateDeployment200Response,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/api/deployments/{deploymentId}',
                'operation_id': 'update_deployment',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'deployment_id',
                    'add_deployments_request',
                ],
                'required': [
                    'deployment_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'deployment_id':
                        (int,),
                    'add_deployments_request':
                        (AddDeploymentsRequest,),
                },
                'attribute_map': {
                    'deployment_id': 'deploymentId',
                },
                'location_map': {
                    'deployment_id': 'path',
                    'add_deployments_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.update_deployment_version_endpoint = _Endpoint(
            settings={
                'response_type': (AddDeploymentVersion200Response,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/api/deployments/{deploymentId}/versions/{id}',
                'operation_id': 'update_deployment_version',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'deployment_id',
                    'id',
                    'add_deployment_version_request',
                ],
                'required': [
                    'deployment_id',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'deployment_id':
                        (int,),
                    'id':
                        (int,),
                    'add_deployment_version_request':
                        (AddDeploymentVersionRequest,),
                },
                'attribute_map': {
                    'deployment_id': 'deploymentId',
                    'id': 'id',
                },
                'location_map': {
                    'deployment_id': 'path',
                    'id': 'path',
                    'add_deployment_version_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

    def add_deployment_file(
        self,
        deployment_id,
        id,
        filepath="/",
        **kwargs
    ):
        """Upload a Deployment File  # noqa: E501

        This endpoint will upload a file for a specific deployment version. This will overwrite the file if one with the same name exists already.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.add_deployment_file(deployment_id, id, filepath="/", async_req=True)
        >>> result = thread.get()

        Args:
            deployment_id (int): Deployment ID
            id (int): Morpheus ID of the Object being referenced
            filepath (str): The path to to search for files under. Default is the root directory /.. defaults to "/", must be one of ["/"]

        Keyword Args:
            file (file_type): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Model200Success
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['deployment_id'] = \
            deployment_id
        kwargs['id'] = \
            id
        kwargs['filepath'] = \
            filepath
        return self.add_deployment_file_endpoint.call_with_http_info(**kwargs)

    def add_deployment_version(
        self,
        deployment_id,
        **kwargs
    ):
        """Create a new Deployment Version  # noqa: E501

        This endpoint will create a new deployment version that is ready to have files uploaded to it. The default type is file, which has files directly uploaded via Morpheus. Alternatively, the type git or fetch can be used to just point to a repository or remote url.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.add_deployment_version(deployment_id, async_req=True)
        >>> result = thread.get()

        Args:
            deployment_id (int): Deployment ID

        Keyword Args:
            add_deployment_version_request (AddDeploymentVersionRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            AddDeploymentVersion200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['deployment_id'] = \
            deployment_id
        return self.add_deployment_version_endpoint.call_with_http_info(**kwargs)

    def add_deployments(
        self,
        **kwargs
    ):
        """Create a new Deployment  # noqa: E501

        This endpoint will create a new deployment that is ready to have versions added to it.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.add_deployments(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            add_deployments_request (AddDeploymentsRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            AddDeployments200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.add_deployments_endpoint.call_with_http_info(**kwargs)

    def delete_deployment(
        self,
        deployment_id,
        **kwargs
    ):
        """Delete a Deployment  # noqa: E501

        This endpoint will delete an existing deployment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_deployment(deployment_id, async_req=True)
        >>> result = thread.get()

        Args:
            deployment_id (int): Deployment ID

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Model200Success
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['deployment_id'] = \
            deployment_id
        return self.delete_deployment_endpoint.call_with_http_info(**kwargs)

    def delete_deployment_file(
        self,
        deployment_id,
        id,
        filepath="/",
        **kwargs
    ):
        """Delete a Deployment File  # noqa: E501

        This endpoint will delete an existing deployment file. To recursively delete a directory and all of its contents, the force parameter must be specified.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_deployment_file(deployment_id, id, filepath="/", async_req=True)
        >>> result = thread.get()

        Args:
            deployment_id (int): Deployment ID
            id (int): Morpheus ID of the Object being referenced
            filepath (str): The path to to search for files under. Default is the root directory /.. defaults to "/", must be one of ["/"]

        Keyword Args:
            force (str): Force Delete. [optional] if omitted the server will use the default value of "off"
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Model200Success
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['deployment_id'] = \
            deployment_id
        kwargs['id'] = \
            id
        kwargs['filepath'] = \
            filepath
        return self.delete_deployment_file_endpoint.call_with_http_info(**kwargs)

    def delete_deployment_version(
        self,
        deployment_id,
        id,
        **kwargs
    ):
        """Delete a Deployment Version  # noqa: E501

        This endpoint will delete an existing deployment version.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_deployment_version(deployment_id, id, async_req=True)
        >>> result = thread.get()

        Args:
            deployment_id (int): Deployment ID
            id (int): Morpheus ID of the Object being referenced

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Model200Success
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['deployment_id'] = \
            deployment_id
        kwargs['id'] = \
            id
        return self.delete_deployment_version_endpoint.call_with_http_info(**kwargs)

    def get_deployment(
        self,
        deployment_id,
        **kwargs
    ):
        """Get a Specific Deployment  # noqa: E501

        This endpoint retrieves a specific deployment. By default the 5 most recent versions are returned, more can be returned by specifying the maxVersions parameter.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_deployment(deployment_id, async_req=True)
        >>> result = thread.get()

        Args:
            deployment_id (int): Deployment ID

        Keyword Args:
            max_versions (int): Max number of recent versions to return.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GetDeployment200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['deployment_id'] = \
            deployment_id
        return self.get_deployment_endpoint.call_with_http_info(**kwargs)

    def get_deployment_version(
        self,
        deployment_id,
        id,
        **kwargs
    ):
        """Get a Specific Deployment Version  # noqa: E501

        This endpoint retrieves a specific deployment version.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_deployment_version(deployment_id, id, async_req=True)
        >>> result = thread.get()

        Args:
            deployment_id (int): Deployment ID
            id (int): Morpheus ID of the Object being referenced

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            AddDeploymentVersion200ResponseAllOf
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['deployment_id'] = \
            deployment_id
        kwargs['id'] = \
            id
        return self.get_deployment_version_endpoint.call_with_http_info(**kwargs)

    def list_deployment_files(
        self,
        deployment_id,
        id,
        filepath="/",
        **kwargs
    ):
        """List Deployment Files  # noqa: E501

        This endpoint returns a list of files for a specific deployment version. This only applies to deploy type file. Files are sorted alphabetically, with directories appearing at the beginning of the list.  The filepath parameter can be specified to search for specific files or directories. To list files under a directory, use a trailing / in the filepath parameter.  To list a specific file, provide it's full path.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_deployment_files(deployment_id, id, filepath="/", async_req=True)
        >>> result = thread.get()

        Args:
            deployment_id (int): Deployment ID
            id (int): Morpheus ID of the Object being referenced
            filepath (str): The path to to search for files under. Default is the root directory /.. defaults to "/", must be one of ["/"]

        Keyword Args:
            max (int): Maximum number of records to return, -1 can be used to fetch all records. [optional] if omitted the server will use the default value of 25
            offset (int): Offset records, the number of records to skip, for paginating requests. [optional] if omitted the server will use the default value of 0
            phrase (str): Search phrase for partial matches on name or description. [optional]
            version (int): Filter by version number (userVersion). [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ListDeploymentVersions200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['deployment_id'] = \
            deployment_id
        kwargs['id'] = \
            id
        kwargs['filepath'] = \
            filepath
        return self.list_deployment_files_endpoint.call_with_http_info(**kwargs)

    def list_deployment_versions(
        self,
        deployment_id,
        **kwargs
    ):
        """Get All Versions For a Deployment  # noqa: E501

        This endpoint returns a paginated list of versions for a specific deployment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_deployment_versions(deployment_id, async_req=True)
        >>> result = thread.get()

        Args:
            deployment_id (int): Deployment ID

        Keyword Args:
            max (int): Maximum number of records to return, -1 can be used to fetch all records. [optional] if omitted the server will use the default value of 25
            offset (int): Offset records, the number of records to skip, for paginating requests. [optional] if omitted the server will use the default value of 0
            phrase (str): Search phrase for partial matches on name or description. [optional]
            version (int): Filter by version number (userVersion). [optional]
            type (str): Filter by type (deployType), file, git, fetch. [optional]
            date_created (str): Filter by dateCreated, the created timestamp is more recent or equal to the date specified. [optional]
            last_updated (datetime): Date filter, restricts query to only load resources updated more recently than the date specified (ISO 8601). [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ListDeploymentVersions200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['deployment_id'] = \
            deployment_id
        return self.list_deployment_versions_endpoint.call_with_http_info(**kwargs)

    def list_deployments(
        self,
        **kwargs
    ):
        """Get All Deployments  # noqa: E501

        This endpoint returns a paginated list of deployments.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_deployments(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            max (int): Maximum number of records to return, -1 can be used to fetch all records. [optional] if omitted the server will use the default value of 25
            offset (int): Offset records, the number of records to skip, for paginating requests. [optional] if omitted the server will use the default value of 0
            phrase (str): Search phrase for partial matches on name or description. [optional]
            name (str): Filter by name, wildcard may be specified as %, eg. example-%. [optional]
            description (str): Filter by description, wildcard may be specified as %. eg. `example-%`. [optional]
            date_created (str): Filter by dateCreated, the created timestamp is more recent or equal to the date specified. [optional]
            last_updated (datetime): Date filter, restricts query to only load resources updated more recently than the date specified (ISO 8601). [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ListDeployments200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.list_deployments_endpoint.call_with_http_info(**kwargs)

    def update_deployment(
        self,
        deployment_id,
        **kwargs
    ):
        """Updating a Deployment  # noqa: E501

        This endpoint will update an existing deployment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_deployment(deployment_id, async_req=True)
        >>> result = thread.get()

        Args:
            deployment_id (int): Deployment ID

        Keyword Args:
            add_deployments_request (AddDeploymentsRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            UpdateDeployment200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['deployment_id'] = \
            deployment_id
        return self.update_deployment_endpoint.call_with_http_info(**kwargs)

    def update_deployment_version(
        self,
        deployment_id,
        id,
        **kwargs
    ):
        """Updating a Deployment Version  # noqa: E501

        This endpoint will update an existing deployment version.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_deployment_version(deployment_id, id, async_req=True)
        >>> result = thread.get()

        Args:
            deployment_id (int): Deployment ID
            id (int): Morpheus ID of the Object being referenced

        Keyword Args:
            add_deployment_version_request (AddDeploymentVersionRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            AddDeploymentVersion200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['deployment_id'] = \
            deployment_id
        kwargs['id'] = \
            id
        return self.update_deployment_version_endpoint.call_with_http_info(**kwargs)

