"""
    Morpheus API

    Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.  # noqa: E501

    The version of the OpenAPI document: 6.2.1
    Contact: dev@morpheusdata.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from openapi_client.api_client import ApiClient, Endpoint as _Endpoint
from openapi_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from openapi_client.model.default_error import DefaultError
from openapi_client.model.list_whitelabel_settings200_response import ListWhitelabelSettings200Response
from openapi_client.model.model200_success import Model200Success
from openapi_client.model.update_whitelabel_settings_request import UpdateWhitelabelSettingsRequest


class WhitelabelSettingsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.get_whitelabel_image_endpoint = _Endpoint(
            settings={
                'response_type': (file_type,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/api/whitelabel-settings/images/{imageType}',
                'operation_id': 'get_whitelabel_image',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'image_type',
                ],
                'required': [
                    'image_type',
                ],
                'nullable': [
                ],
                'enum': [
                    'image_type',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('image_type',): {

                        "HEADERLOGO": "headerLogo",
                        "FOOTERLOGO": "footerLogo",
                        "LOGINLOGO": "loginLogo",
                        "FAVICON": "favicon"
                    },
                },
                'openapi_types': {
                    'image_type':
                        (str,),
                },
                'attribute_map': {
                    'image_type': 'imageType',
                },
                'location_map': {
                    'image_type': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'image/ico',
                    'image/jpeg',
                    'image/png',
                    'image/svg+xml',
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.list_whitelabel_settings_endpoint = _Endpoint(
            settings={
                'response_type': (ListWhitelabelSettings200Response,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/api/whitelabel-settings',
                'operation_id': 'list_whitelabel_settings',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.remove_whitelabel_image_endpoint = _Endpoint(
            settings={
                'response_type': (Model200Success,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/api/whitelabel-settings/images/{imageType}',
                'operation_id': 'remove_whitelabel_image',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'image_type',
                ],
                'required': [
                    'image_type',
                ],
                'nullable': [
                ],
                'enum': [
                    'image_type',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('image_type',): {

                        "HEADERLOGO": "headerLogo",
                        "FOOTERLOGO": "footerLogo",
                        "LOGINLOGO": "loginLogo",
                        "FAVICON": "favicon"
                    },
                },
                'openapi_types': {
                    'image_type':
                        (str,),
                },
                'attribute_map': {
                    'image_type': 'imageType',
                },
                'location_map': {
                    'image_type': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.update_whitelabel_images_endpoint = _Endpoint(
            settings={
                'response_type': (Model200Success,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/api/whitelabel-settings/images',
                'operation_id': 'update_whitelabel_images',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'header_logo_file',
                    'reset_header_logo',
                    'footer_logo_file',
                    'reset_footer_logo',
                    'login_logo_file',
                    'reset_login_logo',
                    'favicon_file',
                    'reset_favicon_logo',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'header_logo_file':
                        (file_type,),
                    'reset_header_logo':
                        (bool,),
                    'footer_logo_file':
                        (file_type,),
                    'reset_footer_logo':
                        (bool,),
                    'login_logo_file':
                        (file_type,),
                    'reset_login_logo':
                        (bool,),
                    'favicon_file':
                        (file_type,),
                    'reset_favicon_logo':
                        (bool,),
                },
                'attribute_map': {
                    'header_logo_file': 'headerLogo.file',
                    'reset_header_logo': 'resetHeaderLogo',
                    'footer_logo_file': 'footerLogo.file',
                    'reset_footer_logo': 'resetFooterLogo',
                    'login_logo_file': 'loginLogo.file',
                    'reset_login_logo': 'resetLoginLogo',
                    'favicon_file': 'favicon.file',
                    'reset_favicon_logo': 'resetFaviconLogo',
                },
                'location_map': {
                    'header_logo_file': 'form',
                    'reset_header_logo': 'form',
                    'footer_logo_file': 'form',
                    'reset_footer_logo': 'form',
                    'login_logo_file': 'form',
                    'reset_login_logo': 'form',
                    'favicon_file': 'form',
                    'reset_favicon_logo': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.update_whitelabel_settings_endpoint = _Endpoint(
            settings={
                'response_type': (Model200Success,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/api/whitelabel-settings',
                'operation_id': 'update_whitelabel_settings',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'update_whitelabel_settings_request',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'update_whitelabel_settings_request':
                        (UpdateWhitelabelSettingsRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'update_whitelabel_settings_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

    def get_whitelabel_image(
        self,
        image_type,
        **kwargs
    ):
        """Download Image  # noqa: E501

        Downloads the specified image.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_whitelabel_image(image_type, async_req=True)
        >>> result = thread.get()

        Args:
            image_type (str): Valid image types

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            file_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['image_type'] = \
            image_type
        return self.get_whitelabel_image_endpoint.call_with_http_info(**kwargs)

    def list_whitelabel_settings(
        self,
        **kwargs
    ):
        """Get Whitelabel Settings  # noqa: E501

        This endpoint retrieves whitelabel settings.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_whitelabel_settings(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ListWhitelabelSettings200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.list_whitelabel_settings_endpoint.call_with_http_info(**kwargs)

    def remove_whitelabel_image(
        self,
        image_type,
        **kwargs
    ):
        """Reset Image  # noqa: E501

        Resets the specified image to the Morpheus default.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.remove_whitelabel_image(image_type, async_req=True)
        >>> result = thread.get()

        Args:
            image_type (str): Valid image types

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Model200Success
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['image_type'] = \
            image_type
        return self.remove_whitelabel_image_endpoint.call_with_http_info(**kwargs)

    def update_whitelabel_images(
        self,
        **kwargs
    ):
        """Update Images  # noqa: E501

        Uploads whitelabel images. Expects multipart form data as the request format, not JSON.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_whitelabel_images(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            header_logo_file (file_type): Header logo image file, valid image types `png|jpg|svg`. [optional]
            reset_header_logo (bool): Resets header logo to default. [optional]
            footer_logo_file (file_type): Footer logo image file, valid image types `png|jpg|svg`. [optional]
            reset_footer_logo (bool): Resets footer logo to default. [optional]
            login_logo_file (file_type): Login logo image file, valid image types `png|jpg|svg`. [optional]
            reset_login_logo (bool): Resets login logo to default. [optional]
            favicon_file (file_type): Favicon image file, valid image type ico. [optional]
            reset_favicon_logo (bool): Resets favicon logo to default. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Model200Success
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.update_whitelabel_images_endpoint.call_with_http_info(**kwargs)

    def update_whitelabel_settings(
        self,
        **kwargs
    ):
        """Update Whitelabel Settings  # noqa: E501

        Update Whitelabel Settings  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_whitelabel_settings(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            update_whitelabel_settings_request (UpdateWhitelabelSettingsRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Model200Success
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.update_whitelabel_settings_endpoint.call_with_http_info(**kwargs)

