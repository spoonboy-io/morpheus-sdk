"""
    Morpheus API

    Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.  # noqa: E501

    The version of the OpenAPI document: 6.2.1
    Contact: dev@morpheusdata.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from openapi_client.api_client import ApiClient, Endpoint as _Endpoint
from openapi_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from openapi_client.model.add_instance_deploy_request import AddInstanceDeployRequest
from openapi_client.model.default_error import DefaultError
from openapi_client.model.list_deploys200_response import ListDeploys200Response
from openapi_client.model.model200_success import Model200Success
from openapi_client.model.update_deploy200_response import UpdateDeploy200Response
from openapi_client.model.update_deploy_request import UpdateDeployRequest


class DeploysApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.add_instance_deploy_endpoint = _Endpoint(
            settings={
                'response_type': (UpdateDeploy200Response,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/api/instances/{id}/deploys',
                'operation_id': 'add_instance_deploy',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'add_instance_deploy_request',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (int,),
                    'add_instance_deploy_request':
                        (AddInstanceDeployRequest,),
                },
                'attribute_map': {
                    'id': 'id',
                },
                'location_map': {
                    'id': 'path',
                    'add_instance_deploy_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.deletedeploy_endpoint = _Endpoint(
            settings={
                'response_type': (Model200Success,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/api/deploys/{id}',
                'operation_id': 'deletedeploy',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (int,),
                },
                'attribute_map': {
                    'id': 'id',
                },
                'location_map': {
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_instance_deploys_endpoint = _Endpoint(
            settings={
                'response_type': (ListDeploys200Response,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/api/instances/{id}/deploys',
                'operation_id': 'get_instance_deploys',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'max',
                    'offset',
                    'phrase',
                    'name',
                    'deployment_id',
                    'instance_name',
                    'instance_id',
                    'version',
                    'version_id',
                    'created_by_id',
                    'deploy_type',
                    'date_created',
                    'last_updated',
                    'deploy_date',
                    'status',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                    'deploy_type',
                    'status',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('deploy_type',): {

                        "FILE": "file",
                        "GIT": "git",
                        "FETCH": "fetch"
                    },
                    ('status',): {

                        "STAGED": "staged",
                        "DEPLOYING": "deploying",
                        "COMMITED": "commited",
                        "ARCHIVED": "archived"
                    },
                },
                'openapi_types': {
                    'id':
                        (int,),
                    'max':
                        (int,),
                    'offset':
                        (int,),
                    'phrase':
                        (str,),
                    'name':
                        (str,),
                    'deployment_id':
                        (int,),
                    'instance_name':
                        (str,),
                    'instance_id':
                        (int,),
                    'version':
                        (int,),
                    'version_id':
                        (int,),
                    'created_by_id':
                        (int,),
                    'deploy_type':
                        (str,),
                    'date_created':
                        (str,),
                    'last_updated':
                        (datetime,),
                    'deploy_date':
                        (str,),
                    'status':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'max': 'max',
                    'offset': 'offset',
                    'phrase': 'phrase',
                    'name': 'name',
                    'deployment_id': 'deploymentId',
                    'instance_name': 'instanceName',
                    'instance_id': 'instanceId',
                    'version': 'version',
                    'version_id': 'versionId',
                    'created_by_id': 'createdById',
                    'deploy_type': 'deployType',
                    'date_created': 'dateCreated',
                    'last_updated': 'lastUpdated',
                    'deploy_date': 'deployDate',
                    'status': 'status',
                },
                'location_map': {
                    'id': 'path',
                    'max': 'query',
                    'offset': 'query',
                    'phrase': 'query',
                    'name': 'query',
                    'deployment_id': 'query',
                    'instance_name': 'query',
                    'instance_id': 'query',
                    'version': 'query',
                    'version_id': 'query',
                    'created_by_id': 'query',
                    'deploy_type': 'query',
                    'date_created': 'query',
                    'last_updated': 'query',
                    'deploy_date': 'query',
                    'status': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.list_deploys_endpoint = _Endpoint(
            settings={
                'response_type': (ListDeploys200Response,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/api/deploys',
                'operation_id': 'list_deploys',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'max',
                    'offset',
                    'phrase',
                    'name',
                    'deployment_id',
                    'instance_name',
                    'instance_id',
                    'version',
                    'version_id',
                    'created_by_id',
                    'deploy_type',
                    'date_created',
                    'last_updated',
                    'deploy_date',
                    'status',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'deploy_type',
                    'status',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('deploy_type',): {

                        "FILE": "file",
                        "GIT": "git",
                        "FETCH": "fetch"
                    },
                    ('status',): {

                        "STAGED": "staged",
                        "DEPLOYING": "deploying",
                        "COMMITED": "commited",
                        "ARCHIVED": "archived"
                    },
                },
                'openapi_types': {
                    'max':
                        (int,),
                    'offset':
                        (int,),
                    'phrase':
                        (str,),
                    'name':
                        (str,),
                    'deployment_id':
                        (int,),
                    'instance_name':
                        (str,),
                    'instance_id':
                        (int,),
                    'version':
                        (int,),
                    'version_id':
                        (int,),
                    'created_by_id':
                        (int,),
                    'deploy_type':
                        (str,),
                    'date_created':
                        (str,),
                    'last_updated':
                        (datetime,),
                    'deploy_date':
                        (str,),
                    'status':
                        (str,),
                },
                'attribute_map': {
                    'max': 'max',
                    'offset': 'offset',
                    'phrase': 'phrase',
                    'name': 'name',
                    'deployment_id': 'deploymentId',
                    'instance_name': 'instanceName',
                    'instance_id': 'instanceId',
                    'version': 'version',
                    'version_id': 'versionId',
                    'created_by_id': 'createdById',
                    'deploy_type': 'deployType',
                    'date_created': 'dateCreated',
                    'last_updated': 'lastUpdated',
                    'deploy_date': 'deployDate',
                    'status': 'status',
                },
                'location_map': {
                    'max': 'query',
                    'offset': 'query',
                    'phrase': 'query',
                    'name': 'query',
                    'deployment_id': 'query',
                    'instance_name': 'query',
                    'instance_id': 'query',
                    'version': 'query',
                    'version_id': 'query',
                    'created_by_id': 'query',
                    'deploy_type': 'query',
                    'date_created': 'query',
                    'last_updated': 'query',
                    'deploy_date': 'query',
                    'status': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.run_deploy_endpoint = _Endpoint(
            settings={
                'response_type': (UpdateDeploy200Response,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/api/deploys/{id}/deploy',
                'operation_id': 'run_deploy',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'update_deploy_request',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (int,),
                    'update_deploy_request':
                        (UpdateDeployRequest,),
                },
                'attribute_map': {
                    'id': 'id',
                },
                'location_map': {
                    'id': 'path',
                    'update_deploy_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.update_deploy_endpoint = _Endpoint(
            settings={
                'response_type': (UpdateDeploy200Response,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/api/deploys/{id}',
                'operation_id': 'update_deploy',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'update_deploy_request',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (int,),
                    'update_deploy_request':
                        (UpdateDeployRequest,),
                },
                'attribute_map': {
                    'id': 'id',
                },
                'location_map': {
                    'id': 'path',
                    'update_deploy_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

    def add_instance_deploy(
        self,
        id,
        **kwargs
    ):
        """Deploy to an Instance  # noqa: E501

        This endpoint will deploy the specified deployment version to specified instance. The version to deploy can be identified with deploymentId and version or with versionId alone.  By default, the deployment is executed right away. To prevent this so that it can be run manually later on.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.add_instance_deploy(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (int): Morpheus ID of the Object being referenced

        Keyword Args:
            add_instance_deploy_request (AddInstanceDeployRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            UpdateDeploy200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        return self.add_instance_deploy_endpoint.call_with_http_info(**kwargs)

    def deletedeploy(
        self,
        id,
        **kwargs
    ):
        """Delete a Deploy  # noqa: E501

        This endpoint will delete an archived instance deploy.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.deletedeploy(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (int): Morpheus ID of the Object being referenced

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Model200Success
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        return self.deletedeploy_endpoint.call_with_http_info(**kwargs)

    def get_instance_deploys(
        self,
        id,
        **kwargs
    ):
        """Get all Deploys for an Instance  # noqa: E501

        This endpoint retrieves all deploys for a specific instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_instance_deploys(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (int): Morpheus ID of the Object being referenced

        Keyword Args:
            max (int): Maximum number of records to return, -1 can be used to fetch all records. [optional] if omitted the server will use the default value of 25
            offset (int): Offset records, the number of records to skip, for paginating requests. [optional] if omitted the server will use the default value of 0
            phrase (str): Search phrase for partial matches on name or description. [optional]
            name (str): Filter by name, wildcard may be specified as %, eg. example-%. [optional]
            deployment_id (int): Filter by deployment id. [optional]
            instance_name (str): Filter by instance name. [optional]
            instance_id (int): The Instance ID for Filtering. [optional]
            version (int): Filter by version number (userVersion). [optional]
            version_id (int): Filter by deployment version id. [optional]
            created_by_id (int): Filter by owner (user) id. [optional]
            deploy_type (str): Filter by type (deployType), file, git, fetch. [optional]
            date_created (str): Filter by dateCreated, the created timestamp is more recent or equal to the date specified. [optional]
            last_updated (datetime): Date filter, restricts query to only load resources updated more recently than the date specified (ISO 8601). [optional]
            deploy_date (str): Filter by deployDate, deployment completion timestamp is more recent or equal to the date specified. [optional]
            status (str): Filter by status. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ListDeploys200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        return self.get_instance_deploys_endpoint.call_with_http_info(**kwargs)

    def list_deploys(
        self,
        **kwargs
    ):
        """Get all Deploys  # noqa: E501

        This endpoint retrieves all deploys.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_deploys(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            max (int): Maximum number of records to return, -1 can be used to fetch all records. [optional] if omitted the server will use the default value of 25
            offset (int): Offset records, the number of records to skip, for paginating requests. [optional] if omitted the server will use the default value of 0
            phrase (str): Search phrase for partial matches on name or description. [optional]
            name (str): Filter by name, wildcard may be specified as %, eg. example-%. [optional]
            deployment_id (int): Filter by deployment id. [optional]
            instance_name (str): Filter by instance name. [optional]
            instance_id (int): The Instance ID for Filtering. [optional]
            version (int): Filter by version number (userVersion). [optional]
            version_id (int): Filter by deployment version id. [optional]
            created_by_id (int): Filter by owner (user) id. [optional]
            deploy_type (str): Filter by type (deployType), file, git, fetch. [optional]
            date_created (str): Filter by dateCreated, the created timestamp is more recent or equal to the date specified. [optional]
            last_updated (datetime): Date filter, restricts query to only load resources updated more recently than the date specified (ISO 8601). [optional]
            deploy_date (str): Filter by deployDate, deployment completion timestamp is more recent or equal to the date specified. [optional]
            status (str): Filter by status. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ListDeploys200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.list_deploys_endpoint.call_with_http_info(**kwargs)

    def run_deploy(
        self,
        id,
        **kwargs
    ):
        """Run a Deploy  # noqa: E501

        This endpoint will run an existing instance deploy. This is for running a new staged deploy or to rollback to previous version by re-running a deploy that is archived.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.run_deploy(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (int): Morpheus ID of the Object being referenced

        Keyword Args:
            update_deploy_request (UpdateDeployRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            UpdateDeploy200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        return self.run_deploy_endpoint.call_with_http_info(**kwargs)

    def update_deploy(
        self,
        id,
        **kwargs
    ):
        """Update a Deploy  # noqa: E501

        This endpoint will update an existing deploy. This is typically only needed to change settings on a deploy that is staged, before it is run.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_deploy(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (int): Morpheus ID of the Object being referenced

        Keyword Args:
            update_deploy_request (UpdateDeployRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            UpdateDeploy200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        return self.update_deploy_endpoint.call_with_http_info(**kwargs)

