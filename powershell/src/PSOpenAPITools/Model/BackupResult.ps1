#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
Backup Result ID
.PARAMETER Backup
No description available.
.PARAMETER BackupSetId
No description available.
.PARAMETER InstanceId
No description available.
.PARAMETER ContainerId
No description available.
.PARAMETER ServerId
No description available.
.PARAMETER Status
No description available.
.PARAMETER ErrorMessage
No description available.
.PARAMETER StartDate
No description available.
.PARAMETER EndDate
No description available.
.PARAMETER DurationMillis
No description available.
.PARAMETER SizeInBytes
No description available.
.PARAMETER SizeInMb
No description available.
.PARAMETER VolumePath
No description available.
.PARAMETER ResultArchive
No description available.
.PARAMETER ResultPath
No description available.
.PARAMETER ExternalId
No description available.
.PARAMETER SnapshotId
No description available.
.PARAMETER SnapshotExternalId
No description available.
.PARAMETER CreatedBy
No description available.
.PARAMETER DateCreated
Date Created
.PARAMETER LastUpdated
Last Updated
.OUTPUTS

BackupResult<PSCustomObject>
#>

function Initialize-BackupResult {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Backup},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${BackupSetId},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${InstanceId},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${ContainerId},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${ServerId},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Status},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ErrorMessage},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${StartDate},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${EndDate},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${DurationMillis},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${SizeInBytes},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${SizeInMb},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${VolumePath},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ResultArchive},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ResultPath},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ExternalId},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SnapshotId},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SnapshotExternalId},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${CreatedBy},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${DateCreated},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${LastUpdated}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => BackupResult' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "backup" = ${Backup}
            "backupSetId" = ${BackupSetId}
            "instanceId" = ${InstanceId}
            "containerId" = ${ContainerId}
            "serverId" = ${ServerId}
            "status" = ${Status}
            "errorMessage" = ${ErrorMessage}
            "startDate" = ${StartDate}
            "endDate" = ${EndDate}
            "durationMillis" = ${DurationMillis}
            "sizeInBytes" = ${SizeInBytes}
            "sizeInMb" = ${SizeInMb}
            "volumePath" = ${VolumePath}
            "resultArchive" = ${ResultArchive}
            "resultPath" = ${ResultPath}
            "externalId" = ${ExternalId}
            "snapshotId" = ${SnapshotId}
            "snapshotExternalId" = ${SnapshotExternalId}
            "createdBy" = ${CreatedBy}
            "dateCreated" = ${DateCreated}
            "lastUpdated" = ${LastUpdated}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to BackupResult<PSCustomObject>

.DESCRIPTION

Convert from JSON to BackupResult<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

BackupResult<PSCustomObject>
#>
function ConvertFrom-JsonToBackupResult {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => BackupResult' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in BackupResult
        $AllProperties = ("id", "backup", "backupSetId", "instanceId", "containerId", "serverId", "status", "errorMessage", "startDate", "endDate", "durationMillis", "sizeInBytes", "sizeInMb", "volumePath", "resultArchive", "resultPath", "externalId", "snapshotId", "snapshotExternalId", "createdBy", "dateCreated", "lastUpdated")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "backup"))) { #optional property not found
            $Backup = $null
        } else {
            $Backup = $JsonParameters.PSobject.Properties["backup"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "backupSetId"))) { #optional property not found
            $BackupSetId = $null
        } else {
            $BackupSetId = $JsonParameters.PSobject.Properties["backupSetId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "instanceId"))) { #optional property not found
            $InstanceId = $null
        } else {
            $InstanceId = $JsonParameters.PSobject.Properties["instanceId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "containerId"))) { #optional property not found
            $ContainerId = $null
        } else {
            $ContainerId = $JsonParameters.PSobject.Properties["containerId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "serverId"))) { #optional property not found
            $ServerId = $null
        } else {
            $ServerId = $JsonParameters.PSobject.Properties["serverId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "status"))) { #optional property not found
            $Status = $null
        } else {
            $Status = $JsonParameters.PSobject.Properties["status"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "errorMessage"))) { #optional property not found
            $ErrorMessage = $null
        } else {
            $ErrorMessage = $JsonParameters.PSobject.Properties["errorMessage"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "startDate"))) { #optional property not found
            $StartDate = $null
        } else {
            $StartDate = $JsonParameters.PSobject.Properties["startDate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "endDate"))) { #optional property not found
            $EndDate = $null
        } else {
            $EndDate = $JsonParameters.PSobject.Properties["endDate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "durationMillis"))) { #optional property not found
            $DurationMillis = $null
        } else {
            $DurationMillis = $JsonParameters.PSobject.Properties["durationMillis"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sizeInBytes"))) { #optional property not found
            $SizeInBytes = $null
        } else {
            $SizeInBytes = $JsonParameters.PSobject.Properties["sizeInBytes"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sizeInMb"))) { #optional property not found
            $SizeInMb = $null
        } else {
            $SizeInMb = $JsonParameters.PSobject.Properties["sizeInMb"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "volumePath"))) { #optional property not found
            $VolumePath = $null
        } else {
            $VolumePath = $JsonParameters.PSobject.Properties["volumePath"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "resultArchive"))) { #optional property not found
            $ResultArchive = $null
        } else {
            $ResultArchive = $JsonParameters.PSobject.Properties["resultArchive"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "resultPath"))) { #optional property not found
            $ResultPath = $null
        } else {
            $ResultPath = $JsonParameters.PSobject.Properties["resultPath"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "externalId"))) { #optional property not found
            $ExternalId = $null
        } else {
            $ExternalId = $JsonParameters.PSobject.Properties["externalId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "snapshotId"))) { #optional property not found
            $SnapshotId = $null
        } else {
            $SnapshotId = $JsonParameters.PSobject.Properties["snapshotId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "snapshotExternalId"))) { #optional property not found
            $SnapshotExternalId = $null
        } else {
            $SnapshotExternalId = $JsonParameters.PSobject.Properties["snapshotExternalId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "createdBy"))) { #optional property not found
            $CreatedBy = $null
        } else {
            $CreatedBy = $JsonParameters.PSobject.Properties["createdBy"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dateCreated"))) { #optional property not found
            $DateCreated = $null
        } else {
            $DateCreated = $JsonParameters.PSobject.Properties["dateCreated"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lastUpdated"))) { #optional property not found
            $LastUpdated = $null
        } else {
            $LastUpdated = $JsonParameters.PSobject.Properties["lastUpdated"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "backup" = ${Backup}
            "backupSetId" = ${BackupSetId}
            "instanceId" = ${InstanceId}
            "containerId" = ${ContainerId}
            "serverId" = ${ServerId}
            "status" = ${Status}
            "errorMessage" = ${ErrorMessage}
            "startDate" = ${StartDate}
            "endDate" = ${EndDate}
            "durationMillis" = ${DurationMillis}
            "sizeInBytes" = ${SizeInBytes}
            "sizeInMb" = ${SizeInMb}
            "volumePath" = ${VolumePath}
            "resultArchive" = ${ResultArchive}
            "resultPath" = ${ResultPath}
            "externalId" = ${ExternalId}
            "snapshotId" = ${SnapshotId}
            "snapshotExternalId" = ${SnapshotExternalId}
            "createdBy" = ${CreatedBy}
            "dateCreated" = ${DateCreated}
            "lastUpdated" = ${LastUpdated}
        }

        return $PSO
    }

}

