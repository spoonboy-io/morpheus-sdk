#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
No description available.
.PARAMETER Direction
No description available.
.PARAMETER SourceType
No description available.
.PARAMETER DestinationType
No description available.
.PARAMETER Name
No description available.
.PARAMETER Policy
No description available.
.PARAMETER Priority
No description available.
.PARAMETER Enabled
No description available.
.PARAMETER RuleGroup
No description available.
.PARAMETER GroupName
No description available.
.PARAMETER Config
No description available.
.PARAMETER Sources
No description available.
.PARAMETER Destinations
No description available.
.PARAMETER Applications
No description available.
.PARAMETER Scopes
No description available.
.PARAMETER Profiles
No description available.
.PARAMETER AppliedTargets
No description available.
.OUTPUTS

GetNetworkFirewallRule200ResponseRule<PSCustomObject>
#>

function Initialize-GetNetworkFirewallRule200ResponseRule {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Direction},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SourceType},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DestinationType},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Policy},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Priority},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Enabled},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${RuleGroup},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${GroupName},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Config},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Sources},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Destinations},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Applications},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Scopes},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Profiles},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${AppliedTargets}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => GetNetworkFirewallRule200ResponseRule' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "direction" = ${Direction}
            "sourceType" = ${SourceType}
            "destinationType" = ${DestinationType}
            "name" = ${Name}
            "policy" = ${Policy}
            "priority" = ${Priority}
            "enabled" = ${Enabled}
            "ruleGroup" = ${RuleGroup}
            "groupName" = ${GroupName}
            "config" = ${Config}
            "sources" = ${Sources}
            "destinations" = ${Destinations}
            "applications" = ${Applications}
            "scopes" = ${Scopes}
            "profiles" = ${Profiles}
            "appliedTargets" = ${AppliedTargets}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to GetNetworkFirewallRule200ResponseRule<PSCustomObject>

.DESCRIPTION

Convert from JSON to GetNetworkFirewallRule200ResponseRule<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

GetNetworkFirewallRule200ResponseRule<PSCustomObject>
#>
function ConvertFrom-JsonToGetNetworkFirewallRule200ResponseRule {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => GetNetworkFirewallRule200ResponseRule' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in GetNetworkFirewallRule200ResponseRule
        $AllProperties = ("id", "direction", "sourceType", "destinationType", "name", "policy", "priority", "enabled", "ruleGroup", "groupName", "config", "sources", "destinations", "applications", "scopes", "profiles", "appliedTargets")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "direction"))) { #optional property not found
            $Direction = $null
        } else {
            $Direction = $JsonParameters.PSobject.Properties["direction"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sourceType"))) { #optional property not found
            $SourceType = $null
        } else {
            $SourceType = $JsonParameters.PSobject.Properties["sourceType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "destinationType"))) { #optional property not found
            $DestinationType = $null
        } else {
            $DestinationType = $JsonParameters.PSobject.Properties["destinationType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "policy"))) { #optional property not found
            $Policy = $null
        } else {
            $Policy = $JsonParameters.PSobject.Properties["policy"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "priority"))) { #optional property not found
            $Priority = $null
        } else {
            $Priority = $JsonParameters.PSobject.Properties["priority"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "enabled"))) { #optional property not found
            $Enabled = $null
        } else {
            $Enabled = $JsonParameters.PSobject.Properties["enabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ruleGroup"))) { #optional property not found
            $RuleGroup = $null
        } else {
            $RuleGroup = $JsonParameters.PSobject.Properties["ruleGroup"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "groupName"))) { #optional property not found
            $GroupName = $null
        } else {
            $GroupName = $JsonParameters.PSobject.Properties["groupName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "config"))) { #optional property not found
            $Config = $null
        } else {
            $Config = $JsonParameters.PSobject.Properties["config"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sources"))) { #optional property not found
            $Sources = $null
        } else {
            $Sources = $JsonParameters.PSobject.Properties["sources"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "destinations"))) { #optional property not found
            $Destinations = $null
        } else {
            $Destinations = $JsonParameters.PSobject.Properties["destinations"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "applications"))) { #optional property not found
            $Applications = $null
        } else {
            $Applications = $JsonParameters.PSobject.Properties["applications"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "scopes"))) { #optional property not found
            $Scopes = $null
        } else {
            $Scopes = $JsonParameters.PSobject.Properties["scopes"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "profiles"))) { #optional property not found
            $Profiles = $null
        } else {
            $Profiles = $JsonParameters.PSobject.Properties["profiles"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "appliedTargets"))) { #optional property not found
            $AppliedTargets = $null
        } else {
            $AppliedTargets = $JsonParameters.PSobject.Properties["appliedTargets"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "direction" = ${Direction}
            "sourceType" = ${SourceType}
            "destinationType" = ${DestinationType}
            "name" = ${Name}
            "policy" = ${Policy}
            "priority" = ${Priority}
            "enabled" = ${Enabled}
            "ruleGroup" = ${RuleGroup}
            "groupName" = ${GroupName}
            "config" = ${Config}
            "sources" = ${Sources}
            "destinations" = ${Destinations}
            "applications" = ${Applications}
            "scopes" = ${Scopes}
            "profiles" = ${Profiles}
            "appliedTargets" = ${AppliedTargets}
        }

        return $PSO
    }

}

