#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Name
A name for the scale threshold
.PARAMETER AutoUp
Auto Upscale
.PARAMETER AutoDown
Auto Downscale
.PARAMETER MinCount
The minimum number of nodes to scale down to
.PARAMETER MaxCount
The maximum number of nodes to scale up to
.PARAMETER CpuEnabled
Enable CPU Threshold
.PARAMETER MinCpu
Min CPU (%)
.PARAMETER MaxCpu
Max CPU (%)
.PARAMETER MemoryEnabled
Enable Memory Threshold
.PARAMETER MinMemory
Min Memory (%)
.PARAMETER MaxMemory
Max Memory (%)
.PARAMETER DiskEnabled
Enable Disk Threshold
.PARAMETER MinDisk
Min Disk (%)
.PARAMETER MaxDisk
Max Disk (%)
.OUTPUTS

AddScaleThresholdsRequestScaleThreshold<PSCustomObject>
#>

function Initialize-AddScaleThresholdsRequestScaleThreshold {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${AutoUp} = $false,
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${AutoDown} = $false,
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${MinCount},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${MaxCount},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${CpuEnabled} = $false,
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${MinCpu} = 0,
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${MaxCpu} = 0,
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${MemoryEnabled} = $false,
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${MinMemory} = 0,
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${MaxMemory} = 0,
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${DiskEnabled} = $false,
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${MinDisk} = 0,
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${MaxDisk} = 0
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => AddScaleThresholdsRequestScaleThreshold' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Name) {
            throw "invalid value for 'Name', 'Name' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "autoUp" = ${AutoUp}
            "autoDown" = ${AutoDown}
            "minCount" = ${MinCount}
            "maxCount" = ${MaxCount}
            "cpuEnabled" = ${CpuEnabled}
            "minCpu" = ${MinCpu}
            "maxCpu" = ${MaxCpu}
            "memoryEnabled" = ${MemoryEnabled}
            "minMemory" = ${MinMemory}
            "maxMemory" = ${MaxMemory}
            "diskEnabled" = ${DiskEnabled}
            "minDisk" = ${MinDisk}
            "maxDisk" = ${MaxDisk}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to AddScaleThresholdsRequestScaleThreshold<PSCustomObject>

.DESCRIPTION

Convert from JSON to AddScaleThresholdsRequestScaleThreshold<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

AddScaleThresholdsRequestScaleThreshold<PSCustomObject>
#>
function ConvertFrom-JsonToAddScaleThresholdsRequestScaleThreshold {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => AddScaleThresholdsRequestScaleThreshold' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in AddScaleThresholdsRequestScaleThreshold
        $AllProperties = ("name", "autoUp", "autoDown", "minCount", "maxCount", "cpuEnabled", "minCpu", "maxCpu", "memoryEnabled", "minMemory", "maxMemory", "diskEnabled", "minDisk", "maxDisk")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'name' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) {
            throw "Error! JSON cannot be serialized due to the required property 'name' missing."
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "autoUp"))) { #optional property not found
            $AutoUp = $null
        } else {
            $AutoUp = $JsonParameters.PSobject.Properties["autoUp"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "autoDown"))) { #optional property not found
            $AutoDown = $null
        } else {
            $AutoDown = $JsonParameters.PSobject.Properties["autoDown"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "minCount"))) { #optional property not found
            $MinCount = $null
        } else {
            $MinCount = $JsonParameters.PSobject.Properties["minCount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "maxCount"))) { #optional property not found
            $MaxCount = $null
        } else {
            $MaxCount = $JsonParameters.PSobject.Properties["maxCount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cpuEnabled"))) { #optional property not found
            $CpuEnabled = $null
        } else {
            $CpuEnabled = $JsonParameters.PSobject.Properties["cpuEnabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "minCpu"))) { #optional property not found
            $MinCpu = $null
        } else {
            $MinCpu = $JsonParameters.PSobject.Properties["minCpu"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "maxCpu"))) { #optional property not found
            $MaxCpu = $null
        } else {
            $MaxCpu = $JsonParameters.PSobject.Properties["maxCpu"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "memoryEnabled"))) { #optional property not found
            $MemoryEnabled = $null
        } else {
            $MemoryEnabled = $JsonParameters.PSobject.Properties["memoryEnabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "minMemory"))) { #optional property not found
            $MinMemory = $null
        } else {
            $MinMemory = $JsonParameters.PSobject.Properties["minMemory"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "maxMemory"))) { #optional property not found
            $MaxMemory = $null
        } else {
            $MaxMemory = $JsonParameters.PSobject.Properties["maxMemory"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "diskEnabled"))) { #optional property not found
            $DiskEnabled = $null
        } else {
            $DiskEnabled = $JsonParameters.PSobject.Properties["diskEnabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "minDisk"))) { #optional property not found
            $MinDisk = $null
        } else {
            $MinDisk = $JsonParameters.PSobject.Properties["minDisk"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "maxDisk"))) { #optional property not found
            $MaxDisk = $null
        } else {
            $MaxDisk = $JsonParameters.PSobject.Properties["maxDisk"].value
        }

        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "autoUp" = ${AutoUp}
            "autoDown" = ${AutoDown}
            "minCount" = ${MinCount}
            "maxCount" = ${MaxCount}
            "cpuEnabled" = ${CpuEnabled}
            "minCpu" = ${MinCpu}
            "maxCpu" = ${MaxCpu}
            "memoryEnabled" = ${MemoryEnabled}
            "minMemory" = ${MinMemory}
            "maxMemory" = ${MaxMemory}
            "diskEnabled" = ${DiskEnabled}
            "minDisk" = ${MinDisk}
            "maxDisk" = ${MaxDisk}
        }

        return $PSO
    }

}

