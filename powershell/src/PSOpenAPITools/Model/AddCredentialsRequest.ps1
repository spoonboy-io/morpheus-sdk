#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Credential
No description available.
.OUTPUTS

AddCredentialsRequest<PSCustomObject>
#>

function Initialize-AddCredentialsRequest {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Credential}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => AddCredentialsRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Credential) {
            throw "invalid value for 'Credential', 'Credential' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "credential" = ${Credential}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to AddCredentialsRequest<PSCustomObject>

.DESCRIPTION

Convert from JSON to AddCredentialsRequest<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

AddCredentialsRequest<PSCustomObject>
#>
function ConvertFrom-JsonToAddCredentialsRequest {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => AddCredentialsRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in AddCredentialsRequest
        $AllProperties = ("credential")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'credential' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "credential"))) {
            throw "Error! JSON cannot be serialized due to the required property 'credential' missing."
        } else {
            $Credential = $JsonParameters.PSobject.Properties["credential"].value
        }

        $PSO = [PSCustomObject]@{
            "credential" = ${Credential}
        }

        return $PSO
    }

}

