#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Ip
No description available.
.PARAMETER HeapPercent
No description available.
.PARAMETER RamPercent
No description available.
.PARAMETER CpuCount
No description available.
.PARAMETER LoadOne
No description available.
.PARAMETER LoadFive
No description available.
.PARAMETER LoadFifteen
No description available.
.PARAMETER Role
No description available.
.PARAMETER Master
No description available.
.PARAMETER Name
No description available.
.OUTPUTS

HealthElasticNodes<PSCustomObject>
#>

function Initialize-HealthElasticNodes {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Ip},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${HeapPercent},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RamPercent},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CpuCount},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${LoadOne},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${LoadFive},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${LoadFifteen},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Role},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Master},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => HealthElasticNodes' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "ip" = ${Ip}
            "heapPercent" = ${HeapPercent}
            "ramPercent" = ${RamPercent}
            "cpuCount" = ${CpuCount}
            "loadOne" = ${LoadOne}
            "loadFive" = ${LoadFive}
            "loadFifteen" = ${LoadFifteen}
            "role" = ${Role}
            "master" = ${Master}
            "name" = ${Name}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to HealthElasticNodes<PSCustomObject>

.DESCRIPTION

Convert from JSON to HealthElasticNodes<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

HealthElasticNodes<PSCustomObject>
#>
function ConvertFrom-JsonToHealthElasticNodes {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => HealthElasticNodes' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in HealthElasticNodes
        $AllProperties = ("ip", "heapPercent", "ramPercent", "cpuCount", "loadOne", "loadFive", "loadFifteen", "role", "master", "name")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ip"))) { #optional property not found
            $Ip = $null
        } else {
            $Ip = $JsonParameters.PSobject.Properties["ip"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "heapPercent"))) { #optional property not found
            $HeapPercent = $null
        } else {
            $HeapPercent = $JsonParameters.PSobject.Properties["heapPercent"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ramPercent"))) { #optional property not found
            $RamPercent = $null
        } else {
            $RamPercent = $JsonParameters.PSobject.Properties["ramPercent"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cpuCount"))) { #optional property not found
            $CpuCount = $null
        } else {
            $CpuCount = $JsonParameters.PSobject.Properties["cpuCount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "loadOne"))) { #optional property not found
            $LoadOne = $null
        } else {
            $LoadOne = $JsonParameters.PSobject.Properties["loadOne"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "loadFive"))) { #optional property not found
            $LoadFive = $null
        } else {
            $LoadFive = $JsonParameters.PSobject.Properties["loadFive"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "loadFifteen"))) { #optional property not found
            $LoadFifteen = $null
        } else {
            $LoadFifteen = $JsonParameters.PSobject.Properties["loadFifteen"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "role"))) { #optional property not found
            $Role = $null
        } else {
            $Role = $JsonParameters.PSobject.Properties["role"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "master"))) { #optional property not found
            $Master = $null
        } else {
            $Master = $JsonParameters.PSobject.Properties["master"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        $PSO = [PSCustomObject]@{
            "ip" = ${Ip}
            "heapPercent" = ${HeapPercent}
            "ramPercent" = ${RamPercent}
            "cpuCount" = ${CpuCount}
            "loadOne" = ${LoadOne}
            "loadFive" = ${LoadFive}
            "loadFifteen" = ${LoadFifteen}
            "role" = ${Role}
            "master" = ${Master}
            "name" = ${Name}
        }

        return $PSO
    }

}

