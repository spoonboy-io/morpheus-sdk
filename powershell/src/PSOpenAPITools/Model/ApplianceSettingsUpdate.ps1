#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ApplianceUrl
Appliance URL
.PARAMETER InternalApplianceUrl
Internal Appliance URL (PXE)
.PARAMETER CorsAllowed
API Allowed Origins
.PARAMETER RegistrationEnabled
Registration enabled (true, false)
.PARAMETER DefaultRoleId
Default tenant role ID
.PARAMETER DefaultUserRoleId
Default user role ID
.PARAMETER DockerPrivilegedMode
Docker privileged mode (true, false)
.PARAMETER PasswordMinLength
Min Password Length
.PARAMETER PasswordMinUpperCase
Min Password Uppercase
.PARAMETER PasswordMinNumbers
Min Password Numbers
.PARAMETER PasswordMinSymbols
Min Password Symbols
.PARAMETER UserBrowserSessionTimeout
User Browser Session Timeout (Minutes)
.PARAMETER UserBrowserSessionWarning
User Browser Session Warning (Minutes)
.PARAMETER ExpirePwdDays
Expire password after days. Setting to 0 disabled this feature
.PARAMETER DisableAfterAttempts
Disable user after number of attempts. Set to 0 to disable this feature
.PARAMETER DisableAfterDaysInactive
Disable user if inactive for specified days. Set to 0 to disable this feature
.PARAMETER WarnUserDaysBefore
Send warning email number of days in advance before deactivating. Set to 0 to disable this feature
.PARAMETER SmtpMailFrom
From email address
.PARAMETER SmtpServer
SMTP server / host
.PARAMETER SmtpPort
SMTP port
.PARAMETER SmtpSSL
Use SSL for SMTP connection
.PARAMETER SmtpTLS
Use TLS for SMTP connections
.PARAMETER SmtpUser
SMTP username
.PARAMETER SmtpPassword
SMTP password
.PARAMETER ProxyHost
Proxy host
.PARAMETER ProxyPort
Proxy port
.PARAMETER ProxyUser
Proxy username
.PARAMETER ProxyPassword
Proxy password
.PARAMETER ProxyDomain
Proxy domain
.PARAMETER ProxyWorkstation
Proxy workstation
.PARAMETER CurrencyProvider
Currency provider
.PARAMETER CurrencyKey
Currency provider API key
.PARAMETER EnableAllZoneTypes
Set all cloud types enabled status on, overrides enableZoneTypes and disableZoneTypes parameters
.PARAMETER EnableZoneTypes
List of cloud type IDs to set enabled status on
.PARAMETER DisableZoneTypes
List of cloud type IDs to set enabled status off
.PARAMETER DisableAllZoneTypes
Set all cloud types enabled status off, can be used in conjunction with enableZoneTypes
.OUTPUTS

ApplianceSettingsUpdate<PSCustomObject>
#>

function Initialize-ApplianceSettingsUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ApplianceUrl},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${InternalApplianceUrl},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CorsAllowed},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${RegistrationEnabled},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${DefaultRoleId},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${DefaultUserRoleId},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${DockerPrivilegedMode},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PasswordMinLength},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PasswordMinUpperCase},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PasswordMinNumbers},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PasswordMinSymbols},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${UserBrowserSessionTimeout},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${UserBrowserSessionWarning},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${ExpirePwdDays},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${DisableAfterAttempts},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${DisableAfterDaysInactive},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${WarnUserDaysBefore},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SmtpMailFrom},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SmtpServer},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${SmtpPort},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${SmtpSSL},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${SmtpTLS},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SmtpUser},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SmtpPassword},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ProxyHost},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ProxyPort},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ProxyUser},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ProxyPassword},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ProxyDomain},
        [Parameter(Position = 29, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ProxyWorkstation},
        [Parameter(Position = 30, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CurrencyProvider},
        [Parameter(Position = 31, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CurrencyKey},
        [Parameter(Position = 32, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${EnableAllZoneTypes},
        [Parameter(Position = 33, ValueFromPipelineByPropertyName = $true)]
        [Int64[]]
        ${EnableZoneTypes},
        [Parameter(Position = 34, ValueFromPipelineByPropertyName = $true)]
        [Int64[]]
        ${DisableZoneTypes},
        [Parameter(Position = 35, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${DisableAllZoneTypes}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ApplianceSettingsUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "applianceUrl" = ${ApplianceUrl}
            "internalApplianceUrl" = ${InternalApplianceUrl}
            "corsAllowed" = ${CorsAllowed}
            "registrationEnabled" = ${RegistrationEnabled}
            "defaultRoleId" = ${DefaultRoleId}
            "defaultUserRoleId" = ${DefaultUserRoleId}
            "dockerPrivilegedMode" = ${DockerPrivilegedMode}
            "passwordMinLength" = ${PasswordMinLength}
            "passwordMinUpperCase" = ${PasswordMinUpperCase}
            "passwordMinNumbers" = ${PasswordMinNumbers}
            "passwordMinSymbols" = ${PasswordMinSymbols}
            "userBrowserSessionTimeout" = ${UserBrowserSessionTimeout}
            "userBrowserSessionWarning" = ${UserBrowserSessionWarning}
            "expirePwdDays" = ${ExpirePwdDays}
            "disableAfterAttempts" = ${DisableAfterAttempts}
            "disableAfterDaysInactive" = ${DisableAfterDaysInactive}
            "warnUserDaysBefore" = ${WarnUserDaysBefore}
            "smtpMailFrom" = ${SmtpMailFrom}
            "smtpServer" = ${SmtpServer}
            "smtpPort" = ${SmtpPort}
            "smtpSSL" = ${SmtpSSL}
            "smtpTLS" = ${SmtpTLS}
            "smtpUser" = ${SmtpUser}
            "smtpPassword" = ${SmtpPassword}
            "proxyHost" = ${ProxyHost}
            "proxyPort" = ${ProxyPort}
            "proxyUser" = ${ProxyUser}
            "proxyPassword" = ${ProxyPassword}
            "proxyDomain" = ${ProxyDomain}
            "proxyWorkstation" = ${ProxyWorkstation}
            "currencyProvider" = ${CurrencyProvider}
            "currencyKey" = ${CurrencyKey}
            "enableAllZoneTypes" = ${EnableAllZoneTypes}
            "enableZoneTypes" = ${EnableZoneTypes}
            "disableZoneTypes" = ${DisableZoneTypes}
            "disableAllZoneTypes" = ${DisableAllZoneTypes}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ApplianceSettingsUpdate<PSCustomObject>

.DESCRIPTION

Convert from JSON to ApplianceSettingsUpdate<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ApplianceSettingsUpdate<PSCustomObject>
#>
function ConvertFrom-JsonToApplianceSettingsUpdate {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ApplianceSettingsUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ApplianceSettingsUpdate
        $AllProperties = ("applianceUrl", "internalApplianceUrl", "corsAllowed", "registrationEnabled", "defaultRoleId", "defaultUserRoleId", "dockerPrivilegedMode", "passwordMinLength", "passwordMinUpperCase", "passwordMinNumbers", "passwordMinSymbols", "userBrowserSessionTimeout", "userBrowserSessionWarning", "expirePwdDays", "disableAfterAttempts", "disableAfterDaysInactive", "warnUserDaysBefore", "smtpMailFrom", "smtpServer", "smtpPort", "smtpSSL", "smtpTLS", "smtpUser", "smtpPassword", "proxyHost", "proxyPort", "proxyUser", "proxyPassword", "proxyDomain", "proxyWorkstation", "currencyProvider", "currencyKey", "enableAllZoneTypes", "enableZoneTypes", "disableZoneTypes", "disableAllZoneTypes")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "applianceUrl"))) { #optional property not found
            $ApplianceUrl = $null
        } else {
            $ApplianceUrl = $JsonParameters.PSobject.Properties["applianceUrl"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "internalApplianceUrl"))) { #optional property not found
            $InternalApplianceUrl = $null
        } else {
            $InternalApplianceUrl = $JsonParameters.PSobject.Properties["internalApplianceUrl"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "corsAllowed"))) { #optional property not found
            $CorsAllowed = $null
        } else {
            $CorsAllowed = $JsonParameters.PSobject.Properties["corsAllowed"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "registrationEnabled"))) { #optional property not found
            $RegistrationEnabled = $null
        } else {
            $RegistrationEnabled = $JsonParameters.PSobject.Properties["registrationEnabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "defaultRoleId"))) { #optional property not found
            $DefaultRoleId = $null
        } else {
            $DefaultRoleId = $JsonParameters.PSobject.Properties["defaultRoleId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "defaultUserRoleId"))) { #optional property not found
            $DefaultUserRoleId = $null
        } else {
            $DefaultUserRoleId = $JsonParameters.PSobject.Properties["defaultUserRoleId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dockerPrivilegedMode"))) { #optional property not found
            $DockerPrivilegedMode = $null
        } else {
            $DockerPrivilegedMode = $JsonParameters.PSobject.Properties["dockerPrivilegedMode"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "passwordMinLength"))) { #optional property not found
            $PasswordMinLength = $null
        } else {
            $PasswordMinLength = $JsonParameters.PSobject.Properties["passwordMinLength"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "passwordMinUpperCase"))) { #optional property not found
            $PasswordMinUpperCase = $null
        } else {
            $PasswordMinUpperCase = $JsonParameters.PSobject.Properties["passwordMinUpperCase"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "passwordMinNumbers"))) { #optional property not found
            $PasswordMinNumbers = $null
        } else {
            $PasswordMinNumbers = $JsonParameters.PSobject.Properties["passwordMinNumbers"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "passwordMinSymbols"))) { #optional property not found
            $PasswordMinSymbols = $null
        } else {
            $PasswordMinSymbols = $JsonParameters.PSobject.Properties["passwordMinSymbols"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "userBrowserSessionTimeout"))) { #optional property not found
            $UserBrowserSessionTimeout = $null
        } else {
            $UserBrowserSessionTimeout = $JsonParameters.PSobject.Properties["userBrowserSessionTimeout"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "userBrowserSessionWarning"))) { #optional property not found
            $UserBrowserSessionWarning = $null
        } else {
            $UserBrowserSessionWarning = $JsonParameters.PSobject.Properties["userBrowserSessionWarning"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "expirePwdDays"))) { #optional property not found
            $ExpirePwdDays = $null
        } else {
            $ExpirePwdDays = $JsonParameters.PSobject.Properties["expirePwdDays"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "disableAfterAttempts"))) { #optional property not found
            $DisableAfterAttempts = $null
        } else {
            $DisableAfterAttempts = $JsonParameters.PSobject.Properties["disableAfterAttempts"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "disableAfterDaysInactive"))) { #optional property not found
            $DisableAfterDaysInactive = $null
        } else {
            $DisableAfterDaysInactive = $JsonParameters.PSobject.Properties["disableAfterDaysInactive"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "warnUserDaysBefore"))) { #optional property not found
            $WarnUserDaysBefore = $null
        } else {
            $WarnUserDaysBefore = $JsonParameters.PSobject.Properties["warnUserDaysBefore"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "smtpMailFrom"))) { #optional property not found
            $SmtpMailFrom = $null
        } else {
            $SmtpMailFrom = $JsonParameters.PSobject.Properties["smtpMailFrom"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "smtpServer"))) { #optional property not found
            $SmtpServer = $null
        } else {
            $SmtpServer = $JsonParameters.PSobject.Properties["smtpServer"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "smtpPort"))) { #optional property not found
            $SmtpPort = $null
        } else {
            $SmtpPort = $JsonParameters.PSobject.Properties["smtpPort"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "smtpSSL"))) { #optional property not found
            $SmtpSSL = $null
        } else {
            $SmtpSSL = $JsonParameters.PSobject.Properties["smtpSSL"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "smtpTLS"))) { #optional property not found
            $SmtpTLS = $null
        } else {
            $SmtpTLS = $JsonParameters.PSobject.Properties["smtpTLS"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "smtpUser"))) { #optional property not found
            $SmtpUser = $null
        } else {
            $SmtpUser = $JsonParameters.PSobject.Properties["smtpUser"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "smtpPassword"))) { #optional property not found
            $SmtpPassword = $null
        } else {
            $SmtpPassword = $JsonParameters.PSobject.Properties["smtpPassword"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "proxyHost"))) { #optional property not found
            $ProxyHost = $null
        } else {
            $ProxyHost = $JsonParameters.PSobject.Properties["proxyHost"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "proxyPort"))) { #optional property not found
            $ProxyPort = $null
        } else {
            $ProxyPort = $JsonParameters.PSobject.Properties["proxyPort"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "proxyUser"))) { #optional property not found
            $ProxyUser = $null
        } else {
            $ProxyUser = $JsonParameters.PSobject.Properties["proxyUser"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "proxyPassword"))) { #optional property not found
            $ProxyPassword = $null
        } else {
            $ProxyPassword = $JsonParameters.PSobject.Properties["proxyPassword"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "proxyDomain"))) { #optional property not found
            $ProxyDomain = $null
        } else {
            $ProxyDomain = $JsonParameters.PSobject.Properties["proxyDomain"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "proxyWorkstation"))) { #optional property not found
            $ProxyWorkstation = $null
        } else {
            $ProxyWorkstation = $JsonParameters.PSobject.Properties["proxyWorkstation"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "currencyProvider"))) { #optional property not found
            $CurrencyProvider = $null
        } else {
            $CurrencyProvider = $JsonParameters.PSobject.Properties["currencyProvider"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "currencyKey"))) { #optional property not found
            $CurrencyKey = $null
        } else {
            $CurrencyKey = $JsonParameters.PSobject.Properties["currencyKey"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "enableAllZoneTypes"))) { #optional property not found
            $EnableAllZoneTypes = $null
        } else {
            $EnableAllZoneTypes = $JsonParameters.PSobject.Properties["enableAllZoneTypes"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "enableZoneTypes"))) { #optional property not found
            $EnableZoneTypes = $null
        } else {
            $EnableZoneTypes = $JsonParameters.PSobject.Properties["enableZoneTypes"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "disableZoneTypes"))) { #optional property not found
            $DisableZoneTypes = $null
        } else {
            $DisableZoneTypes = $JsonParameters.PSobject.Properties["disableZoneTypes"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "disableAllZoneTypes"))) { #optional property not found
            $DisableAllZoneTypes = $null
        } else {
            $DisableAllZoneTypes = $JsonParameters.PSobject.Properties["disableAllZoneTypes"].value
        }

        $PSO = [PSCustomObject]@{
            "applianceUrl" = ${ApplianceUrl}
            "internalApplianceUrl" = ${InternalApplianceUrl}
            "corsAllowed" = ${CorsAllowed}
            "registrationEnabled" = ${RegistrationEnabled}
            "defaultRoleId" = ${DefaultRoleId}
            "defaultUserRoleId" = ${DefaultUserRoleId}
            "dockerPrivilegedMode" = ${DockerPrivilegedMode}
            "passwordMinLength" = ${PasswordMinLength}
            "passwordMinUpperCase" = ${PasswordMinUpperCase}
            "passwordMinNumbers" = ${PasswordMinNumbers}
            "passwordMinSymbols" = ${PasswordMinSymbols}
            "userBrowserSessionTimeout" = ${UserBrowserSessionTimeout}
            "userBrowserSessionWarning" = ${UserBrowserSessionWarning}
            "expirePwdDays" = ${ExpirePwdDays}
            "disableAfterAttempts" = ${DisableAfterAttempts}
            "disableAfterDaysInactive" = ${DisableAfterDaysInactive}
            "warnUserDaysBefore" = ${WarnUserDaysBefore}
            "smtpMailFrom" = ${SmtpMailFrom}
            "smtpServer" = ${SmtpServer}
            "smtpPort" = ${SmtpPort}
            "smtpSSL" = ${SmtpSSL}
            "smtpTLS" = ${SmtpTLS}
            "smtpUser" = ${SmtpUser}
            "smtpPassword" = ${SmtpPassword}
            "proxyHost" = ${ProxyHost}
            "proxyPort" = ${ProxyPort}
            "proxyUser" = ${ProxyUser}
            "proxyPassword" = ${ProxyPassword}
            "proxyDomain" = ${ProxyDomain}
            "proxyWorkstation" = ${ProxyWorkstation}
            "currencyProvider" = ${CurrencyProvider}
            "currencyKey" = ${CurrencyKey}
            "enableAllZoneTypes" = ${EnableAllZoneTypes}
            "enableZoneTypes" = ${EnableZoneTypes}
            "disableZoneTypes" = ${DisableZoneTypes}
            "disableAllZoneTypes" = ${DisableAllZoneTypes}
        }

        return $PSO
    }

}

