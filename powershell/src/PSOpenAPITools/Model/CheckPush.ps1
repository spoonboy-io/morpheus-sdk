#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

A push Check is not polled regularly by the standard monitoring system. Instead it is expected that an external API push updates as to the status of the check timed closely with the configured check interval setting. This is used to throttle the push from performing too many status updates. To push an update using the api key one must send a json payload like so: `curl -XPOST https://<morpheus url>/api/monitoring/push?apiKey=<apiKey> -H 'Content-Type: application/json' -d '{""success"":true, ""message"": ""any comment goes here""}'` The API Key will be returned on successful creation or can be found by getting this check. 

.PARAMETER Name
Unique name scoped to your account for the check
.PARAMETER Description
Optional description field
.PARAMETER CheckType
No description available.
.PARAMETER CheckInterval
Number of seconds you want between check executions (minimum value is 60, depending on your subscription plan)
.PARAMETER InUptime
Used to determine if check should affect account wide availability calculations
.PARAMETER Active
Used to determine if check should be scheduled to execute
.PARAMETER Severity
Severity level threshold for sending notifications.
.OUTPUTS

CheckPush<PSCustomObject>
#>

function Initialize-CheckPush {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${CheckType},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${CheckInterval} = 300,
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${InUptime} = $true,
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Active} = $true,
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("info", "warning", "critical")]
        [String]
        ${Severity} = "critical"
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => CheckPush' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "description" = ${Description}
            "checkType" = ${CheckType}
            "checkInterval" = ${CheckInterval}
            "inUptime" = ${InUptime}
            "active" = ${Active}
            "severity" = ${Severity}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to CheckPush<PSCustomObject>

.DESCRIPTION

Convert from JSON to CheckPush<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

CheckPush<PSCustomObject>
#>
function ConvertFrom-JsonToCheckPush {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => CheckPush' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in CheckPush
        $AllProperties = ("name", "description", "checkType", "checkInterval", "inUptime", "active", "severity")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "checkType"))) { #optional property not found
            $CheckType = $null
        } else {
            $CheckType = $JsonParameters.PSobject.Properties["checkType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "checkInterval"))) { #optional property not found
            $CheckInterval = $null
        } else {
            $CheckInterval = $JsonParameters.PSobject.Properties["checkInterval"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "inUptime"))) { #optional property not found
            $InUptime = $null
        } else {
            $InUptime = $JsonParameters.PSobject.Properties["inUptime"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "active"))) { #optional property not found
            $Active = $null
        } else {
            $Active = $JsonParameters.PSobject.Properties["active"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "severity"))) { #optional property not found
            $Severity = $null
        } else {
            $Severity = $JsonParameters.PSobject.Properties["severity"].value
        }

        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "description" = ${Description}
            "checkType" = ${CheckType}
            "checkInterval" = ${CheckInterval}
            "inUptime" = ${InUptime}
            "active" = ${Active}
            "severity" = ${Severity}
        }

        return $PSO
    }

}

