#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Name
Name of Resource Pool
.PARAMETER DefaultPool
Set as the Default Pool
.PARAMETER DefaultImage
Set as the Default Image Target
.PARAMETER Active
Activate `true` or disable `false` the datastore
.PARAMETER Visibility
Setting `private` or `public`
.PARAMETER DisplayName
Optional Display Name (VMware only)
.PARAMETER Inventory
Enable `True` or disable `False` inventory sync for resource pool during cloud refresh
.PARAMETER Config
No description available.
.PARAMETER TenantPermissions
No description available.
.PARAMETER ResourcePermissions
No description available.
.OUTPUTS

ApiZonesZoneIdResourcePoolsResourcePool<PSCustomObject>
#>

function Initialize-ApiZonesZoneIdResourcePoolsResourcePool {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${DefaultPool} = $false,
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${DefaultImage} = $false,
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Active} = $true,
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("public", "private")]
        [String]
        ${Visibility} = "private",
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DisplayName},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Inventory} = $true,
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Config},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${TenantPermissions},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${ResourcePermissions}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ApiZonesZoneIdResourcePoolsResourcePool' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$Name) {
            throw "invalid value for 'Name', 'Name' cannot be null."
        }

        if (!$Config) {
            throw "invalid value for 'Config', 'Config' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "defaultPool" = ${DefaultPool}
            "defaultImage" = ${DefaultImage}
            "active" = ${Active}
            "visibility" = ${Visibility}
            "displayName" = ${DisplayName}
            "inventory" = ${Inventory}
            "config" = ${Config}
            "tenantPermissions" = ${TenantPermissions}
            "resourcePermissions" = ${ResourcePermissions}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ApiZonesZoneIdResourcePoolsResourcePool<PSCustomObject>

.DESCRIPTION

Convert from JSON to ApiZonesZoneIdResourcePoolsResourcePool<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ApiZonesZoneIdResourcePoolsResourcePool<PSCustomObject>
#>
function ConvertFrom-JsonToApiZonesZoneIdResourcePoolsResourcePool {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ApiZonesZoneIdResourcePoolsResourcePool' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ApiZonesZoneIdResourcePoolsResourcePool
        $AllProperties = ("name", "defaultPool", "defaultImage", "active", "visibility", "displayName", "inventory", "config", "tenantPermissions", "resourcePermissions")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property `name` missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) {
            throw "Error! JSON cannot be serialized due to the required property `name` missing."
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "config"))) {
            throw "Error! JSON cannot be serialized due to the required property `config` missing."
        } else {
            $Config = $JsonParameters.PSobject.Properties["config"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "defaultPool"))) { #optional property not found
            $DefaultPool = $null
        } else {
            $DefaultPool = $JsonParameters.PSobject.Properties["defaultPool"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "defaultImage"))) { #optional property not found
            $DefaultImage = $null
        } else {
            $DefaultImage = $JsonParameters.PSobject.Properties["defaultImage"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "active"))) { #optional property not found
            $Active = $null
        } else {
            $Active = $JsonParameters.PSobject.Properties["active"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "visibility"))) { #optional property not found
            $Visibility = $null
        } else {
            $Visibility = $JsonParameters.PSobject.Properties["visibility"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "displayName"))) { #optional property not found
            $DisplayName = $null
        } else {
            $DisplayName = $JsonParameters.PSobject.Properties["displayName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "inventory"))) { #optional property not found
            $Inventory = $null
        } else {
            $Inventory = $JsonParameters.PSobject.Properties["inventory"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tenantPermissions"))) { #optional property not found
            $TenantPermissions = $null
        } else {
            $TenantPermissions = $JsonParameters.PSobject.Properties["tenantPermissions"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "resourcePermissions"))) { #optional property not found
            $ResourcePermissions = $null
        } else {
            $ResourcePermissions = $JsonParameters.PSobject.Properties["resourcePermissions"].value
        }

        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "defaultPool" = ${DefaultPool}
            "defaultImage" = ${DefaultImage}
            "active" = ${Active}
            "visibility" = ${Visibility}
            "displayName" = ${DisplayName}
            "inventory" = ${Inventory}
            "config" = ${Config}
            "tenantPermissions" = ${TenantPermissions}
            "resourcePermissions" = ${ResourcePermissions}
        }

        return $PSO
    }

}

