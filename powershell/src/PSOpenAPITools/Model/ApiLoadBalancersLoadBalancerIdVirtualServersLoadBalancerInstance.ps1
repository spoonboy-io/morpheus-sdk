#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER VipName
VIP Name
.PARAMETER Description
Description
.PARAMETER VipAddress
VIP Address
.PARAMETER VipPort
VIP Port
.PARAMETER VipProtocol
VIP Protocol
.PARAMETER VipHostname
VIP Hostname
.PARAMETER SslCert
SSL Client Certificate ID
.PARAMETER SslServerCert
SSL Server Certificate ID
.PARAMETER Config
Configuration object with parameters that vary by type.
.OUTPUTS

ApiLoadBalancersLoadBalancerIdVirtualServersLoadBalancerInstance<PSCustomObject>
#>

function Initialize-ApiLoadBalancersLoadBalancerIdVirtualServersLoadBalancerInstance {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${VipName},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${VipAddress},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${VipPort},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${VipProtocol},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${VipHostname},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${SslCert},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${SslServerCert},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Config}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ApiLoadBalancersLoadBalancerIdVirtualServersLoadBalancerInstance' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "vipName" = ${VipName}
            "description" = ${Description}
            "vipAddress" = ${VipAddress}
            "vipPort" = ${VipPort}
            "vipProtocol" = ${VipProtocol}
            "vipHostname" = ${VipHostname}
            "sslCert" = ${SslCert}
            "sslServerCert" = ${SslServerCert}
            "config" = ${Config}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ApiLoadBalancersLoadBalancerIdVirtualServersLoadBalancerInstance<PSCustomObject>

.DESCRIPTION

Convert from JSON to ApiLoadBalancersLoadBalancerIdVirtualServersLoadBalancerInstance<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ApiLoadBalancersLoadBalancerIdVirtualServersLoadBalancerInstance<PSCustomObject>
#>
function ConvertFrom-JsonToApiLoadBalancersLoadBalancerIdVirtualServersLoadBalancerInstance {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ApiLoadBalancersLoadBalancerIdVirtualServersLoadBalancerInstance' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ApiLoadBalancersLoadBalancerIdVirtualServersLoadBalancerInstance
        $AllProperties = ("vipName", "description", "vipAddress", "vipPort", "vipProtocol", "vipHostname", "sslCert", "sslServerCert", "config")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vipName"))) { #optional property not found
            $VipName = $null
        } else {
            $VipName = $JsonParameters.PSobject.Properties["vipName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vipAddress"))) { #optional property not found
            $VipAddress = $null
        } else {
            $VipAddress = $JsonParameters.PSobject.Properties["vipAddress"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vipPort"))) { #optional property not found
            $VipPort = $null
        } else {
            $VipPort = $JsonParameters.PSobject.Properties["vipPort"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vipProtocol"))) { #optional property not found
            $VipProtocol = $null
        } else {
            $VipProtocol = $JsonParameters.PSobject.Properties["vipProtocol"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vipHostname"))) { #optional property not found
            $VipHostname = $null
        } else {
            $VipHostname = $JsonParameters.PSobject.Properties["vipHostname"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sslCert"))) { #optional property not found
            $SslCert = $null
        } else {
            $SslCert = $JsonParameters.PSobject.Properties["sslCert"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sslServerCert"))) { #optional property not found
            $SslServerCert = $null
        } else {
            $SslServerCert = $JsonParameters.PSobject.Properties["sslServerCert"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "config"))) { #optional property not found
            $Config = $null
        } else {
            $Config = $JsonParameters.PSobject.Properties["config"].value
        }

        $PSO = [PSCustomObject]@{
            "vipName" = ${VipName}
            "description" = ${Description}
            "vipAddress" = ${VipAddress}
            "vipPort" = ${VipPort}
            "vipProtocol" = ${VipProtocol}
            "vipHostname" = ${VipHostname}
            "sslCert" = ${SslCert}
            "sslServerCert" = ${SslServerCert}
            "config" = ${Config}
        }

        return $PSO
    }

}

