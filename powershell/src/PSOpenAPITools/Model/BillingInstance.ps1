#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.1.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER InstanceId
No description available.
.PARAMETER InstanceUUID
No description available.
.PARAMETER StartDate
No description available.
.PARAMETER EndDate
No description available.
.PARAMETER Name
No description available.
.PARAMETER Price
No description available.
.PARAMETER Cost
No description available.
.PARAMETER Currency
No description available.
.PARAMETER Containers
No description available.
.OUTPUTS

BillingInstance<PSCustomObject>
#>

function Initialize-BillingInstance {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${InstanceId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${InstanceUUID},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${StartDate},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${EndDate},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${Price},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${Cost},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Currency},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Containers}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => BillingInstance' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "instanceId" = ${InstanceId}
            "instanceUUID" = ${InstanceUUID}
            "startDate" = ${StartDate}
            "endDate" = ${EndDate}
            "name" = ${Name}
            "price" = ${Price}
            "cost" = ${Cost}
            "currency" = ${Currency}
            "containers" = ${Containers}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to BillingInstance<PSCustomObject>

.DESCRIPTION

Convert from JSON to BillingInstance<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

BillingInstance<PSCustomObject>
#>
function ConvertFrom-JsonToBillingInstance {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => BillingInstance' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in BillingInstance
        $AllProperties = ("instanceId", "instanceUUID", "startDate", "endDate", "name", "price", "cost", "currency", "containers")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "instanceId"))) { #optional property not found
            $InstanceId = $null
        } else {
            $InstanceId = $JsonParameters.PSobject.Properties["instanceId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "instanceUUID"))) { #optional property not found
            $InstanceUUID = $null
        } else {
            $InstanceUUID = $JsonParameters.PSobject.Properties["instanceUUID"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "startDate"))) { #optional property not found
            $StartDate = $null
        } else {
            $StartDate = $JsonParameters.PSobject.Properties["startDate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "endDate"))) { #optional property not found
            $EndDate = $null
        } else {
            $EndDate = $JsonParameters.PSobject.Properties["endDate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "price"))) { #optional property not found
            $Price = $null
        } else {
            $Price = $JsonParameters.PSobject.Properties["price"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cost"))) { #optional property not found
            $Cost = $null
        } else {
            $Cost = $JsonParameters.PSobject.Properties["cost"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "currency"))) { #optional property not found
            $Currency = $null
        } else {
            $Currency = $JsonParameters.PSobject.Properties["currency"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "containers"))) { #optional property not found
            $Containers = $null
        } else {
            $Containers = $JsonParameters.PSobject.Properties["containers"].value
        }

        $PSO = [PSCustomObject]@{
            "instanceId" = ${InstanceId}
            "instanceUUID" = ${InstanceUUID}
            "startDate" = ${StartDate}
            "endDate" = ${EndDate}
            "name" = ${Name}
            "price" = ${Price}
            "cost" = ${Cost}
            "currency" = ${Currency}
            "containers" = ${Containers}
        }

        return $PSO
    }

}

