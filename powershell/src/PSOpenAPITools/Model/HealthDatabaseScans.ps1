#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER HandlerReadFirst
No description available.
.PARAMETER HandlerReadKey
No description available.
.PARAMETER HandlerReadLast
No description available.
.PARAMETER HandlerReadNext
No description available.
.PARAMETER HandlerReadPrev
No description available.
.PARAMETER HandlerReadRnd
No description available.
.PARAMETER HandlerReadRndNext
No description available.
.OUTPUTS

HealthDatabaseScans<PSCustomObject>
#>

function Initialize-HealthDatabaseScans {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${HandlerReadFirst},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${HandlerReadKey},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${HandlerReadLast},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${HandlerReadNext},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${HandlerReadPrev},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${HandlerReadRnd},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${HandlerReadRndNext}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => HealthDatabaseScans' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "Handler_read_first" = ${HandlerReadFirst}
            "Handler_read_key" = ${HandlerReadKey}
            "Handler_read_last" = ${HandlerReadLast}
            "Handler_read_next" = ${HandlerReadNext}
            "Handler_read_prev" = ${HandlerReadPrev}
            "Handler_read_rnd" = ${HandlerReadRnd}
            "Handler_read_rnd_next" = ${HandlerReadRndNext}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to HealthDatabaseScans<PSCustomObject>

.DESCRIPTION

Convert from JSON to HealthDatabaseScans<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

HealthDatabaseScans<PSCustomObject>
#>
function ConvertFrom-JsonToHealthDatabaseScans {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => HealthDatabaseScans' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in HealthDatabaseScans
        $AllProperties = ("Handler_read_first", "Handler_read_key", "Handler_read_last", "Handler_read_next", "Handler_read_prev", "Handler_read_rnd", "Handler_read_rnd_next")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Handler_read_first"))) { #optional property not found
            $HandlerReadFirst = $null
        } else {
            $HandlerReadFirst = $JsonParameters.PSobject.Properties["Handler_read_first"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Handler_read_key"))) { #optional property not found
            $HandlerReadKey = $null
        } else {
            $HandlerReadKey = $JsonParameters.PSobject.Properties["Handler_read_key"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Handler_read_last"))) { #optional property not found
            $HandlerReadLast = $null
        } else {
            $HandlerReadLast = $JsonParameters.PSobject.Properties["Handler_read_last"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Handler_read_next"))) { #optional property not found
            $HandlerReadNext = $null
        } else {
            $HandlerReadNext = $JsonParameters.PSobject.Properties["Handler_read_next"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Handler_read_prev"))) { #optional property not found
            $HandlerReadPrev = $null
        } else {
            $HandlerReadPrev = $JsonParameters.PSobject.Properties["Handler_read_prev"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Handler_read_rnd"))) { #optional property not found
            $HandlerReadRnd = $null
        } else {
            $HandlerReadRnd = $JsonParameters.PSobject.Properties["Handler_read_rnd"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Handler_read_rnd_next"))) { #optional property not found
            $HandlerReadRndNext = $null
        } else {
            $HandlerReadRndNext = $JsonParameters.PSobject.Properties["Handler_read_rnd_next"].value
        }

        $PSO = [PSCustomObject]@{
            "Handler_read_first" = ${HandlerReadFirst}
            "Handler_read_key" = ${HandlerReadKey}
            "Handler_read_last" = ${HandlerReadLast}
            "Handler_read_next" = ${HandlerReadNext}
            "Handler_read_prev" = ${HandlerReadPrev}
            "Handler_read_rnd" = ${HandlerReadRnd}
            "Handler_read_rnd_next" = ${HandlerReadRndNext}
        }

        return $PSO
    }

}

