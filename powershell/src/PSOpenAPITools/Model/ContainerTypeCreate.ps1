#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Name
Node type name
.PARAMETER Labels
No description available.
.PARAMETER ShortName
The short name is a name with no spaces used for display in your container list.
.PARAMETER Description
Node type description
.PARAMETER ContainerVersion
Version of the node type
.PARAMETER ProvisionTypeCode
Provision type code, eg. `amazon`, etc.
.PARAMETER Scripts
Array of script IDs.
.PARAMETER Templates
Array of file template IDs.
.PARAMETER VirtualImageId
Virtual image ID
.PARAMETER StatTypeCode
Stat type code.  Varies with node type, see Provision Types (customOptionTypes) for allowed values within selected type.
.PARAMETER LogTypeCode
Log type code.  Varies with node type, see Provision Types (customOptionTypes) for allowed values within selected type.
.PARAMETER ServerType
Server type.  Always pass ""vm"".
.PARAMETER ContainerPorts
List of exposed port definitions in the format NAME=PORT|PROTOCOL
.PARAMETER EnvironmentVariables
The environmentVariables parameter is array of env objects.
.PARAMETER Config
Config object varies with node type.  If using docker, scvmm, ARM, hyperv, or cloudformation, look up provision type details (customOptionTypes) for information.
.OUTPUTS

ContainerTypeCreate<PSCustomObject>
#>

function Initialize-ContainerTypeCreate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${Labels},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ShortName},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ContainerVersion},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ProvisionTypeCode},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [Int64[]]
        ${Scripts},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [Int64[]]
        ${Templates},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${VirtualImageId},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${StatTypeCode},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${LogTypeCode},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ServerType},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${ContainerPorts},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${EnvironmentVariables},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Config}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ContainerTypeCreate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Name) {
            throw "invalid value for 'Name', 'Name' cannot be null."
        }

        if ($null -eq $ShortName) {
            throw "invalid value for 'ShortName', 'ShortName' cannot be null."
        }

        if ($null -eq $ContainerVersion) {
            throw "invalid value for 'ContainerVersion', 'ContainerVersion' cannot be null."
        }

        if ($null -eq $ProvisionTypeCode) {
            throw "invalid value for 'ProvisionTypeCode', 'ProvisionTypeCode' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "labels" = ${Labels}
            "shortName" = ${ShortName}
            "description" = ${Description}
            "containerVersion" = ${ContainerVersion}
            "provisionTypeCode" = ${ProvisionTypeCode}
            "scripts" = ${Scripts}
            "templates" = ${Templates}
            "virtualImageId" = ${VirtualImageId}
            "statTypeCode" = ${StatTypeCode}
            "logTypeCode" = ${LogTypeCode}
            "serverType" = ${ServerType}
            "containerPorts" = ${ContainerPorts}
            "environmentVariables" = ${EnvironmentVariables}
            "config" = ${Config}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ContainerTypeCreate<PSCustomObject>

.DESCRIPTION

Convert from JSON to ContainerTypeCreate<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ContainerTypeCreate<PSCustomObject>
#>
function ConvertFrom-JsonToContainerTypeCreate {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ContainerTypeCreate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ContainerTypeCreate
        $AllProperties = ("name", "labels", "shortName", "description", "containerVersion", "provisionTypeCode", "scripts", "templates", "virtualImageId", "statTypeCode", "logTypeCode", "serverType", "containerPorts", "environmentVariables", "config")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'name' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) {
            throw "Error! JSON cannot be serialized due to the required property 'name' missing."
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "shortName"))) {
            throw "Error! JSON cannot be serialized due to the required property 'shortName' missing."
        } else {
            $ShortName = $JsonParameters.PSobject.Properties["shortName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "containerVersion"))) {
            throw "Error! JSON cannot be serialized due to the required property 'containerVersion' missing."
        } else {
            $ContainerVersion = $JsonParameters.PSobject.Properties["containerVersion"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "provisionTypeCode"))) {
            throw "Error! JSON cannot be serialized due to the required property 'provisionTypeCode' missing."
        } else {
            $ProvisionTypeCode = $JsonParameters.PSobject.Properties["provisionTypeCode"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "labels"))) { #optional property not found
            $Labels = $null
        } else {
            $Labels = $JsonParameters.PSobject.Properties["labels"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "scripts"))) { #optional property not found
            $Scripts = $null
        } else {
            $Scripts = $JsonParameters.PSobject.Properties["scripts"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "templates"))) { #optional property not found
            $Templates = $null
        } else {
            $Templates = $JsonParameters.PSobject.Properties["templates"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "virtualImageId"))) { #optional property not found
            $VirtualImageId = $null
        } else {
            $VirtualImageId = $JsonParameters.PSobject.Properties["virtualImageId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "statTypeCode"))) { #optional property not found
            $StatTypeCode = $null
        } else {
            $StatTypeCode = $JsonParameters.PSobject.Properties["statTypeCode"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "logTypeCode"))) { #optional property not found
            $LogTypeCode = $null
        } else {
            $LogTypeCode = $JsonParameters.PSobject.Properties["logTypeCode"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "serverType"))) { #optional property not found
            $ServerType = $null
        } else {
            $ServerType = $JsonParameters.PSobject.Properties["serverType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "containerPorts"))) { #optional property not found
            $ContainerPorts = $null
        } else {
            $ContainerPorts = $JsonParameters.PSobject.Properties["containerPorts"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "environmentVariables"))) { #optional property not found
            $EnvironmentVariables = $null
        } else {
            $EnvironmentVariables = $JsonParameters.PSobject.Properties["environmentVariables"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "config"))) { #optional property not found
            $Config = $null
        } else {
            $Config = $JsonParameters.PSobject.Properties["config"].value
        }

        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "labels" = ${Labels}
            "shortName" = ${ShortName}
            "description" = ${Description}
            "containerVersion" = ${ContainerVersion}
            "provisionTypeCode" = ${ProvisionTypeCode}
            "scripts" = ${Scripts}
            "templates" = ${Templates}
            "virtualImageId" = ${VirtualImageId}
            "statTypeCode" = ${StatTypeCode}
            "logTypeCode" = ${LogTypeCode}
            "serverType" = ${ServerType}
            "containerPorts" = ${ContainerPorts}
            "environmentVariables" = ${EnvironmentVariables}
            "config" = ${Config}
        }

        return $PSO
    }

}

