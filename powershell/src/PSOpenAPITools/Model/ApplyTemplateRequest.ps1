#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ServiceUrl
Url of desired template to apply to cluster
.PARAMETER SpecTemplate
Name or ID of desired Spec Template to apply to cluster
.PARAMETER SpecYaml
Yaml of template to apply to cluster
.OUTPUTS

ApplyTemplateRequest<PSCustomObject>
#>

function Initialize-ApplyTemplateRequest {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ServiceUrl},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SpecTemplate},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SpecYaml}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ApplyTemplateRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "serviceUrl" = ${ServiceUrl}
            "specTemplate" = ${SpecTemplate}
            "specYaml" = ${SpecYaml}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ApplyTemplateRequest<PSCustomObject>

.DESCRIPTION

Convert from JSON to ApplyTemplateRequest<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ApplyTemplateRequest<PSCustomObject>
#>
function ConvertFrom-JsonToApplyTemplateRequest {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ApplyTemplateRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ApplyTemplateRequest
        $AllProperties = ("serviceUrl", "specTemplate", "specYaml")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "serviceUrl"))) { #optional property not found
            $ServiceUrl = $null
        } else {
            $ServiceUrl = $JsonParameters.PSobject.Properties["serviceUrl"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "specTemplate"))) { #optional property not found
            $SpecTemplate = $null
        } else {
            $SpecTemplate = $JsonParameters.PSobject.Properties["specTemplate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "specYaml"))) { #optional property not found
            $SpecYaml = $null
        } else {
            $SpecYaml = $JsonParameters.PSobject.Properties["specYaml"].value
        }

        $PSO = [PSCustomObject]@{
            "serviceUrl" = ${ServiceUrl}
            "specTemplate" = ${SpecTemplate}
            "specYaml" = ${SpecYaml}
        }

        return $PSO
    }

}

