#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER MaxCpu
No description available.
.PARAMETER MaxCores
No description available.
.PARAMETER CpuUsage
No description available.
.PARAMETER CpuUsageAverage
No description available.
.PARAMETER CpuUsagePeak
No description available.
.PARAMETER UsedMemory
No description available.
.PARAMETER MaxMemory
No description available.
.PARAMETER UsedStorage
No description available.
.PARAMETER MaxStorage
No description available.
.PARAMETER Running
No description available.
.PARAMETER Total
No description available.
.PARAMETER TotalContainers
No description available.
.OUTPUTS

DashboardInstanceStats<PSCustomObject>
#>

function Initialize-DashboardInstanceStats {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${MaxCpu},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${MaxCores},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${CpuUsage},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${CpuUsageAverage},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${CpuUsagePeak},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${UsedMemory},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${MaxMemory},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${UsedStorage},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${MaxStorage},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${Running},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${Total},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${TotalContainers}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => DashboardInstanceStats' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "maxCpu" = ${MaxCpu}
            "maxCores" = ${MaxCores}
            "cpuUsage" = ${CpuUsage}
            "cpuUsageAverage" = ${CpuUsageAverage}
            "cpuUsagePeak" = ${CpuUsagePeak}
            "usedMemory" = ${UsedMemory}
            "maxMemory" = ${MaxMemory}
            "usedStorage" = ${UsedStorage}
            "maxStorage" = ${MaxStorage}
            "running" = ${Running}
            "total" = ${Total}
            "totalContainers" = ${TotalContainers}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to DashboardInstanceStats<PSCustomObject>

.DESCRIPTION

Convert from JSON to DashboardInstanceStats<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

DashboardInstanceStats<PSCustomObject>
#>
function ConvertFrom-JsonToDashboardInstanceStats {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => DashboardInstanceStats' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in DashboardInstanceStats
        $AllProperties = ("maxCpu", "maxCores", "cpuUsage", "cpuUsageAverage", "cpuUsagePeak", "usedMemory", "maxMemory", "usedStorage", "maxStorage", "running", "total", "totalContainers")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "maxCpu"))) { #optional property not found
            $MaxCpu = $null
        } else {
            $MaxCpu = $JsonParameters.PSobject.Properties["maxCpu"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "maxCores"))) { #optional property not found
            $MaxCores = $null
        } else {
            $MaxCores = $JsonParameters.PSobject.Properties["maxCores"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cpuUsage"))) { #optional property not found
            $CpuUsage = $null
        } else {
            $CpuUsage = $JsonParameters.PSobject.Properties["cpuUsage"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cpuUsageAverage"))) { #optional property not found
            $CpuUsageAverage = $null
        } else {
            $CpuUsageAverage = $JsonParameters.PSobject.Properties["cpuUsageAverage"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cpuUsagePeak"))) { #optional property not found
            $CpuUsagePeak = $null
        } else {
            $CpuUsagePeak = $JsonParameters.PSobject.Properties["cpuUsagePeak"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "usedMemory"))) { #optional property not found
            $UsedMemory = $null
        } else {
            $UsedMemory = $JsonParameters.PSobject.Properties["usedMemory"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "maxMemory"))) { #optional property not found
            $MaxMemory = $null
        } else {
            $MaxMemory = $JsonParameters.PSobject.Properties["maxMemory"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "usedStorage"))) { #optional property not found
            $UsedStorage = $null
        } else {
            $UsedStorage = $JsonParameters.PSobject.Properties["usedStorage"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "maxStorage"))) { #optional property not found
            $MaxStorage = $null
        } else {
            $MaxStorage = $JsonParameters.PSobject.Properties["maxStorage"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "running"))) { #optional property not found
            $Running = $null
        } else {
            $Running = $JsonParameters.PSobject.Properties["running"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "total"))) { #optional property not found
            $Total = $null
        } else {
            $Total = $JsonParameters.PSobject.Properties["total"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "totalContainers"))) { #optional property not found
            $TotalContainers = $null
        } else {
            $TotalContainers = $JsonParameters.PSobject.Properties["totalContainers"].value
        }

        $PSO = [PSCustomObject]@{
            "maxCpu" = ${MaxCpu}
            "maxCores" = ${MaxCores}
            "cpuUsage" = ${CpuUsage}
            "cpuUsageAverage" = ${CpuUsageAverage}
            "cpuUsagePeak" = ${CpuUsagePeak}
            "usedMemory" = ${UsedMemory}
            "maxMemory" = ${MaxMemory}
            "usedStorage" = ${UsedStorage}
            "maxStorage" = ${MaxStorage}
            "running" = ${Running}
            "total" = ${Total}
            "totalContainers" = ${TotalContainers}
        }

        return $PSO
    }

}

