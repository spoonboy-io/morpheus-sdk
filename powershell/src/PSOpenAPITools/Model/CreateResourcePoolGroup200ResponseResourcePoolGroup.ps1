#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
No description available.
.PARAMETER Name
No description available.
.PARAMETER Description
No description available.
.PARAMETER Visibility
No description available.
.PARAMETER Mode
Pool selection mode. Valid values are `roundrobin` or `availablecapacity`.
.PARAMETER Pools
Array of Resource Pool IDs
.PARAMETER Tenants
No description available.
.PARAMETER ResourcePermission
No description available.
.OUTPUTS

CreateResourcePoolGroup200ResponseResourcePoolGroup<PSCustomObject>
#>

function Initialize-CreateResourcePoolGroup200ResponseResourcePoolGroup {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Visibility},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Mode},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [Int64[]]
        ${Pools},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Tenants},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${ResourcePermission}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => CreateResourcePoolGroup200ResponseResourcePoolGroup' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "name" = ${Name}
            "description" = ${Description}
            "visibility" = ${Visibility}
            "mode" = ${Mode}
            "pools" = ${Pools}
            "tenants" = ${Tenants}
            "resourcePermission" = ${ResourcePermission}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to CreateResourcePoolGroup200ResponseResourcePoolGroup<PSCustomObject>

.DESCRIPTION

Convert from JSON to CreateResourcePoolGroup200ResponseResourcePoolGroup<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

CreateResourcePoolGroup200ResponseResourcePoolGroup<PSCustomObject>
#>
function ConvertFrom-JsonToCreateResourcePoolGroup200ResponseResourcePoolGroup {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => CreateResourcePoolGroup200ResponseResourcePoolGroup' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in CreateResourcePoolGroup200ResponseResourcePoolGroup
        $AllProperties = ("id", "name", "description", "visibility", "mode", "pools", "tenants", "resourcePermission")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "visibility"))) { #optional property not found
            $Visibility = $null
        } else {
            $Visibility = $JsonParameters.PSobject.Properties["visibility"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "mode"))) { #optional property not found
            $Mode = $null
        } else {
            $Mode = $JsonParameters.PSobject.Properties["mode"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "pools"))) { #optional property not found
            $Pools = $null
        } else {
            $Pools = $JsonParameters.PSobject.Properties["pools"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tenants"))) { #optional property not found
            $Tenants = $null
        } else {
            $Tenants = $JsonParameters.PSobject.Properties["tenants"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "resourcePermission"))) { #optional property not found
            $ResourcePermission = $null
        } else {
            $ResourcePermission = $JsonParameters.PSobject.Properties["resourcePermission"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "name" = ${Name}
            "description" = ${Description}
            "visibility" = ${Visibility}
            "mode" = ${Mode}
            "pools" = ${Pools}
            "tenants" = ${Tenants}
            "resourcePermission" = ${ResourcePermission}
        }

        return $PSO
    }

}

