#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.1.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
No description available.
.PARAMETER ClientId
No description available.
.PARAMETER AccessTokenValiditySeconds
No description available.
.PARAMETER RefreshTokenValiditySeconds
No description available.
.PARAMETER Authorities
No description available.
.PARAMETER AuthorizedGrantTypes
No description available.
.PARAMETER Scopes
No description available.
.OUTPUTS

Client<PSCustomObject>
#>

function Initialize-Client {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ClientId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${AccessTokenValiditySeconds},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${RefreshTokenValiditySeconds},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${Authorities},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${AuthorizedGrantTypes},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${Scopes}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => Client' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "clientId" = ${ClientId}
            "accessTokenValiditySeconds" = ${AccessTokenValiditySeconds}
            "refreshTokenValiditySeconds" = ${RefreshTokenValiditySeconds}
            "authorities" = ${Authorities}
            "authorizedGrantTypes" = ${AuthorizedGrantTypes}
            "scopes" = ${Scopes}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to Client<PSCustomObject>

.DESCRIPTION

Convert from JSON to Client<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

Client<PSCustomObject>
#>
function ConvertFrom-JsonToClient {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => Client' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in Client
        $AllProperties = ("id", "clientId", "accessTokenValiditySeconds", "refreshTokenValiditySeconds", "authorities", "authorizedGrantTypes", "scopes")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "clientId"))) { #optional property not found
            $ClientId = $null
        } else {
            $ClientId = $JsonParameters.PSobject.Properties["clientId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "accessTokenValiditySeconds"))) { #optional property not found
            $AccessTokenValiditySeconds = $null
        } else {
            $AccessTokenValiditySeconds = $JsonParameters.PSobject.Properties["accessTokenValiditySeconds"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "refreshTokenValiditySeconds"))) { #optional property not found
            $RefreshTokenValiditySeconds = $null
        } else {
            $RefreshTokenValiditySeconds = $JsonParameters.PSobject.Properties["refreshTokenValiditySeconds"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "authorities"))) { #optional property not found
            $Authorities = $null
        } else {
            $Authorities = $JsonParameters.PSobject.Properties["authorities"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "authorizedGrantTypes"))) { #optional property not found
            $AuthorizedGrantTypes = $null
        } else {
            $AuthorizedGrantTypes = $JsonParameters.PSobject.Properties["authorizedGrantTypes"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "scopes"))) { #optional property not found
            $Scopes = $null
        } else {
            $Scopes = $JsonParameters.PSobject.Properties["scopes"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "clientId" = ${ClientId}
            "accessTokenValiditySeconds" = ${AccessTokenValiditySeconds}
            "refreshTokenValiditySeconds" = ${RefreshTokenValiditySeconds}
            "authorities" = ${Authorities}
            "authorizedGrantTypes" = ${AuthorizedGrantTypes}
            "scopes" = ${Scopes}
        }

        return $PSO
    }

}

