#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Name
A unique name scoped to your account for the cloud
.PARAMETER Description
Optional description field if you want to put more info there
.PARAMETER Code
Optional code for use with policies
.PARAMETER Location
Optional location for your cloud
.PARAMETER Visibility
private or public
.PARAMETER ZoneType
Map containing code or id of the cloud type
.PARAMETER GroupId
Specifies which Server group this cloud should be assigned to
.PARAMETER AccountId
Specifies which Tenant this cloud should be assigned to
.PARAMETER Enabled
Can be used to disable the cloud
.PARAMETER AutoRecoverPowerState
Automatically Power on VMs
.PARAMETER ScalePriority
Scale Priority
.PARAMETER LinkedAccountId
Linked Account ID (enter commercial ID to get costing for AWS Govcloud)
.PARAMETER Config
Map containing zone configuration settings. See the section on specific zone types for details.
.PARAMETER SecurityMode
host firewall. `off` or `internal`. a.k.a. ""local firewall""
.PARAMETER DefaultCloudLogos
Can be used to clear any custom logo and darkLogo, reverting to the defaults for the cloud type
.PARAMETER Credential
Map containing Credential ID. `local` means use the values set in the local cloud config instead of associating a credential.
.OUTPUTS

ApiZonesIdZone<PSCustomObject>
#>

function Initialize-ApiZonesIdZone {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Code},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Location},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("private", "public")]
        [String]
        ${Visibility} = "private",
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ZoneType} = "standard",
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [Int64]
        ${GroupId},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${AccountId},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Enabled} = $true,
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${AutoRecoverPowerState} = $false,
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${ScalePriority} = 1,
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${LinkedAccountId},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Config},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SecurityMode} = "off",
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${DefaultCloudLogos},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Credential}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ApiZonesIdZone' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$Name) {
            throw "invalid value for 'Name', 'Name' cannot be null."
        }

        if (!$ZoneType) {
            throw "invalid value for 'ZoneType', 'ZoneType' cannot be null."
        }

        if (!$GroupId) {
            throw "invalid value for 'GroupId', 'GroupId' cannot be null."
        }

        if (!$Credential) {
            throw "invalid value for 'Credential', 'Credential' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "description" = ${Description}
            "code" = ${Code}
            "location" = ${Location}
            "visibility" = ${Visibility}
            "zoneType" = ${ZoneType}
            "groupId" = ${GroupId}
            "accountId" = ${AccountId}
            "enabled" = ${Enabled}
            "autoRecoverPowerState" = ${AutoRecoverPowerState}
            "scalePriority" = ${ScalePriority}
            "linkedAccountId" = ${LinkedAccountId}
            "config" = ${Config}
            "securityMode" = ${SecurityMode}
            "defaultCloudLogos" = ${DefaultCloudLogos}
            "credential" = ${Credential}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ApiZonesIdZone<PSCustomObject>

.DESCRIPTION

Convert from JSON to ApiZonesIdZone<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ApiZonesIdZone<PSCustomObject>
#>
function ConvertFrom-JsonToApiZonesIdZone {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ApiZonesIdZone' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ApiZonesIdZone
        $AllProperties = ("name", "description", "code", "location", "visibility", "zoneType", "groupId", "accountId", "enabled", "autoRecoverPowerState", "scalePriority", "linkedAccountId", "config", "securityMode", "defaultCloudLogos", "credential")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property `name` missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) {
            throw "Error! JSON cannot be serialized due to the required property `name` missing."
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "zoneType"))) {
            throw "Error! JSON cannot be serialized due to the required property `zoneType` missing."
        } else {
            $ZoneType = $JsonParameters.PSobject.Properties["zoneType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "groupId"))) {
            throw "Error! JSON cannot be serialized due to the required property `groupId` missing."
        } else {
            $GroupId = $JsonParameters.PSobject.Properties["groupId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "credential"))) {
            throw "Error! JSON cannot be serialized due to the required property `credential` missing."
        } else {
            $Credential = $JsonParameters.PSobject.Properties["credential"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "code"))) { #optional property not found
            $Code = $null
        } else {
            $Code = $JsonParameters.PSobject.Properties["code"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "location"))) { #optional property not found
            $Location = $null
        } else {
            $Location = $JsonParameters.PSobject.Properties["location"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "visibility"))) { #optional property not found
            $Visibility = $null
        } else {
            $Visibility = $JsonParameters.PSobject.Properties["visibility"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "accountId"))) { #optional property not found
            $AccountId = $null
        } else {
            $AccountId = $JsonParameters.PSobject.Properties["accountId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "enabled"))) { #optional property not found
            $Enabled = $null
        } else {
            $Enabled = $JsonParameters.PSobject.Properties["enabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "autoRecoverPowerState"))) { #optional property not found
            $AutoRecoverPowerState = $null
        } else {
            $AutoRecoverPowerState = $JsonParameters.PSobject.Properties["autoRecoverPowerState"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "scalePriority"))) { #optional property not found
            $ScalePriority = $null
        } else {
            $ScalePriority = $JsonParameters.PSobject.Properties["scalePriority"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "linkedAccountId"))) { #optional property not found
            $LinkedAccountId = $null
        } else {
            $LinkedAccountId = $JsonParameters.PSobject.Properties["linkedAccountId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "config"))) { #optional property not found
            $Config = $null
        } else {
            $Config = $JsonParameters.PSobject.Properties["config"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "securityMode"))) { #optional property not found
            $SecurityMode = $null
        } else {
            $SecurityMode = $JsonParameters.PSobject.Properties["securityMode"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "defaultCloudLogos"))) { #optional property not found
            $DefaultCloudLogos = $null
        } else {
            $DefaultCloudLogos = $JsonParameters.PSobject.Properties["defaultCloudLogos"].value
        }

        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "description" = ${Description}
            "code" = ${Code}
            "location" = ${Location}
            "visibility" = ${Visibility}
            "zoneType" = ${ZoneType}
            "groupId" = ${GroupId}
            "accountId" = ${AccountId}
            "enabled" = ${Enabled}
            "autoRecoverPowerState" = ${AutoRecoverPowerState}
            "scalePriority" = ${ScalePriority}
            "linkedAccountId" = ${LinkedAccountId}
            "config" = ${Config}
            "securityMode" = ${SecurityMode}
            "defaultCloudLogos" = ${DefaultCloudLogos}
            "credential" = ${Credential}
        }

        return $PSO
    }

}

