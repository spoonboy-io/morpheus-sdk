#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER CidrBlock
Provide the base CIDR Block to use for this VPC (must be between a /16 and /28 Block)
.PARAMETER Tenancy
default or dedicated
.OUTPUTS

AwsResourcePoolConfig<PSCustomObject>
#>

function Initialize-AwsResourcePoolConfig {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CidrBlock},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("default", "dedicated")]
        [String]
        ${Tenancy} = "default"
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => AwsResourcePoolConfig' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "cidrBlock" = ${CidrBlock}
            "tenancy" = ${Tenancy}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to AwsResourcePoolConfig<PSCustomObject>

.DESCRIPTION

Convert from JSON to AwsResourcePoolConfig<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

AwsResourcePoolConfig<PSCustomObject>
#>
function ConvertFrom-JsonToAwsResourcePoolConfig {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => AwsResourcePoolConfig' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in AwsResourcePoolConfig
        $AllProperties = ("cidrBlock", "tenancy")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cidrBlock"))) { #optional property not found
            $CidrBlock = $null
        } else {
            $CidrBlock = $JsonParameters.PSobject.Properties["cidrBlock"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tenancy"))) { #optional property not found
            $Tenancy = $null
        } else {
            $Tenancy = $JsonParameters.PSobject.Properties["tenancy"].value
        }

        $PSO = [PSCustomObject]@{
            "cidrBlock" = ${CidrBlock}
            "tenancy" = ${Tenancy}
        }

        return $PSO
    }

}

