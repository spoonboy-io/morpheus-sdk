#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
No description available.
.PARAMETER PriorityOrder
No description available.
.PARAMETER NodeCount
No description available.
.PARAMETER NodeType
No description available.
.PARAMETER MinNodeCount
No description available.
.PARAMETER MaxNodeCount
No description available.
.PARAMETER DynamicCount
No description available.
.PARAMETER InstallContainerRuntime
No description available.
.PARAMETER InstallStorageRuntime
No description available.
.PARAMETER Name
No description available.
.PARAMETER Code
No description available.
.PARAMETER Category
No description available.
.PARAMETER Config
No description available.
.PARAMETER ContainerType
No description available.
.PARAMETER ComputeServerType
No description available.
.PARAMETER ProvisionService
No description available.
.PARAMETER PlanCategory
No description available.
.PARAMETER NamePrefix
No description available.
.PARAMETER NameSuffix
No description available.
.PARAMETER ForceNameIndex
No description available.
.PARAMETER LoadBalance
No description available.
.OUTPUTS

ClusterLayoutComputeServersInner<PSCustomObject>
#>

function Initialize-ClusterLayoutComputeServersInner {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${PriorityOrder},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${NodeCount},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${NodeType},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${MinNodeCount},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${MaxNodeCount},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${DynamicCount},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${InstallContainerRuntime},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${InstallStorageRuntime},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Code},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Category},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Config},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${ContainerType},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${ComputeServerType},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ProvisionService},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PlanCategory},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${NamePrefix},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${NameSuffix},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${ForceNameIndex},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${LoadBalance}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ClusterLayoutComputeServersInner' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "priorityOrder" = ${PriorityOrder}
            "nodeCount" = ${NodeCount}
            "nodeType" = ${NodeType}
            "minNodeCount" = ${MinNodeCount}
            "maxNodeCount" = ${MaxNodeCount}
            "dynamicCount" = ${DynamicCount}
            "installContainerRuntime" = ${InstallContainerRuntime}
            "installStorageRuntime" = ${InstallStorageRuntime}
            "name" = ${Name}
            "code" = ${Code}
            "category" = ${Category}
            "config" = ${Config}
            "containerType" = ${ContainerType}
            "computeServerType" = ${ComputeServerType}
            "provisionService" = ${ProvisionService}
            "planCategory" = ${PlanCategory}
            "namePrefix" = ${NamePrefix}
            "nameSuffix" = ${NameSuffix}
            "forceNameIndex" = ${ForceNameIndex}
            "loadBalance" = ${LoadBalance}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ClusterLayoutComputeServersInner<PSCustomObject>

.DESCRIPTION

Convert from JSON to ClusterLayoutComputeServersInner<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ClusterLayoutComputeServersInner<PSCustomObject>
#>
function ConvertFrom-JsonToClusterLayoutComputeServersInner {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ClusterLayoutComputeServersInner' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ClusterLayoutComputeServersInner
        $AllProperties = ("id", "priorityOrder", "nodeCount", "nodeType", "minNodeCount", "maxNodeCount", "dynamicCount", "installContainerRuntime", "installStorageRuntime", "name", "code", "category", "config", "containerType", "computeServerType", "provisionService", "planCategory", "namePrefix", "nameSuffix", "forceNameIndex", "loadBalance")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "priorityOrder"))) { #optional property not found
            $PriorityOrder = $null
        } else {
            $PriorityOrder = $JsonParameters.PSobject.Properties["priorityOrder"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "nodeCount"))) { #optional property not found
            $NodeCount = $null
        } else {
            $NodeCount = $JsonParameters.PSobject.Properties["nodeCount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "nodeType"))) { #optional property not found
            $NodeType = $null
        } else {
            $NodeType = $JsonParameters.PSobject.Properties["nodeType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "minNodeCount"))) { #optional property not found
            $MinNodeCount = $null
        } else {
            $MinNodeCount = $JsonParameters.PSobject.Properties["minNodeCount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "maxNodeCount"))) { #optional property not found
            $MaxNodeCount = $null
        } else {
            $MaxNodeCount = $JsonParameters.PSobject.Properties["maxNodeCount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dynamicCount"))) { #optional property not found
            $DynamicCount = $null
        } else {
            $DynamicCount = $JsonParameters.PSobject.Properties["dynamicCount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "installContainerRuntime"))) { #optional property not found
            $InstallContainerRuntime = $null
        } else {
            $InstallContainerRuntime = $JsonParameters.PSobject.Properties["installContainerRuntime"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "installStorageRuntime"))) { #optional property not found
            $InstallStorageRuntime = $null
        } else {
            $InstallStorageRuntime = $JsonParameters.PSobject.Properties["installStorageRuntime"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "code"))) { #optional property not found
            $Code = $null
        } else {
            $Code = $JsonParameters.PSobject.Properties["code"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "category"))) { #optional property not found
            $Category = $null
        } else {
            $Category = $JsonParameters.PSobject.Properties["category"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "config"))) { #optional property not found
            $Config = $null
        } else {
            $Config = $JsonParameters.PSobject.Properties["config"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "containerType"))) { #optional property not found
            $ContainerType = $null
        } else {
            $ContainerType = $JsonParameters.PSobject.Properties["containerType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "computeServerType"))) { #optional property not found
            $ComputeServerType = $null
        } else {
            $ComputeServerType = $JsonParameters.PSobject.Properties["computeServerType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "provisionService"))) { #optional property not found
            $ProvisionService = $null
        } else {
            $ProvisionService = $JsonParameters.PSobject.Properties["provisionService"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "planCategory"))) { #optional property not found
            $PlanCategory = $null
        } else {
            $PlanCategory = $JsonParameters.PSobject.Properties["planCategory"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "namePrefix"))) { #optional property not found
            $NamePrefix = $null
        } else {
            $NamePrefix = $JsonParameters.PSobject.Properties["namePrefix"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "nameSuffix"))) { #optional property not found
            $NameSuffix = $null
        } else {
            $NameSuffix = $JsonParameters.PSobject.Properties["nameSuffix"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "forceNameIndex"))) { #optional property not found
            $ForceNameIndex = $null
        } else {
            $ForceNameIndex = $JsonParameters.PSobject.Properties["forceNameIndex"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "loadBalance"))) { #optional property not found
            $LoadBalance = $null
        } else {
            $LoadBalance = $JsonParameters.PSobject.Properties["loadBalance"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "priorityOrder" = ${PriorityOrder}
            "nodeCount" = ${NodeCount}
            "nodeType" = ${NodeType}
            "minNodeCount" = ${MinNodeCount}
            "maxNodeCount" = ${MaxNodeCount}
            "dynamicCount" = ${DynamicCount}
            "installContainerRuntime" = ${InstallContainerRuntime}
            "installStorageRuntime" = ${InstallStorageRuntime}
            "name" = ${Name}
            "code" = ${Code}
            "category" = ${Category}
            "config" = ${Config}
            "containerType" = ${ContainerType}
            "computeServerType" = ${ComputeServerType}
            "provisionService" = ${ProvisionService}
            "planCategory" = ${PlanCategory}
            "namePrefix" = ${NamePrefix}
            "nameSuffix" = ${NameSuffix}
            "forceNameIndex" = ${ForceNameIndex}
            "loadBalance" = ${LoadBalance}
        }

        return $PSO
    }

}

