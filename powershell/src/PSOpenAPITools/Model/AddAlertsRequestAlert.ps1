#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.1.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Payload for creating a new monitoring alert

.PARAMETER Name
Unique name scoped to your account for the alert
.PARAMETER MinDuration
Duration in minutes of the delay before sending notification(s)
.PARAMETER MinSeverity
Severity level threshold for sending notifications.
.PARAMETER Active
Set to false to disable notifications
.PARAMETER AllChecks
Trigger for all checks
.PARAMETER AllGroups
Trigger for all check groups
.PARAMETER AllApps
Trigger for all monitor apps
.PARAMETER Checks
No description available.
.PARAMETER Groups
No description available.
.PARAMETER Apps
No description available.
.PARAMETER Contacts
No description available.
.OUTPUTS

AddAlertsRequestAlert<PSCustomObject>
#>

function Initialize-AddAlertsRequestAlert {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${MinDuration} = 0,
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("info", "warning", "critical")]
        [String]
        ${MinSeverity} = "critical",
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Active} = $true,
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${AllChecks} = $false,
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${AllGroups} = $false,
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${AllApps} = $false,
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [Int32[]]
        ${Checks},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [Int32[]]
        ${Groups},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [Int32[]]
        ${Apps},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Contacts}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => AddAlertsRequestAlert' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Name) {
            throw "invalid value for 'Name', 'Name' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "minDuration" = ${MinDuration}
            "minSeverity" = ${MinSeverity}
            "active" = ${Active}
            "allChecks" = ${AllChecks}
            "allGroups" = ${AllGroups}
            "allApps" = ${AllApps}
            "checks" = ${Checks}
            "groups" = ${Groups}
            "apps" = ${Apps}
            "contacts" = ${Contacts}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to AddAlertsRequestAlert<PSCustomObject>

.DESCRIPTION

Convert from JSON to AddAlertsRequestAlert<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

AddAlertsRequestAlert<PSCustomObject>
#>
function ConvertFrom-JsonToAddAlertsRequestAlert {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => AddAlertsRequestAlert' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in AddAlertsRequestAlert
        $AllProperties = ("name", "minDuration", "minSeverity", "active", "allChecks", "allGroups", "allApps", "checks", "groups", "apps", "contacts")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'name' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) {
            throw "Error! JSON cannot be serialized due to the required property 'name' missing."
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "minDuration"))) { #optional property not found
            $MinDuration = $null
        } else {
            $MinDuration = $JsonParameters.PSobject.Properties["minDuration"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "minSeverity"))) { #optional property not found
            $MinSeverity = $null
        } else {
            $MinSeverity = $JsonParameters.PSobject.Properties["minSeverity"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "active"))) { #optional property not found
            $Active = $null
        } else {
            $Active = $JsonParameters.PSobject.Properties["active"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "allChecks"))) { #optional property not found
            $AllChecks = $null
        } else {
            $AllChecks = $JsonParameters.PSobject.Properties["allChecks"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "allGroups"))) { #optional property not found
            $AllGroups = $null
        } else {
            $AllGroups = $JsonParameters.PSobject.Properties["allGroups"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "allApps"))) { #optional property not found
            $AllApps = $null
        } else {
            $AllApps = $JsonParameters.PSobject.Properties["allApps"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "checks"))) { #optional property not found
            $Checks = $null
        } else {
            $Checks = $JsonParameters.PSobject.Properties["checks"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "groups"))) { #optional property not found
            $Groups = $null
        } else {
            $Groups = $JsonParameters.PSobject.Properties["groups"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "apps"))) { #optional property not found
            $Apps = $null
        } else {
            $Apps = $JsonParameters.PSobject.Properties["apps"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "contacts"))) { #optional property not found
            $Contacts = $null
        } else {
            $Contacts = $JsonParameters.PSobject.Properties["contacts"].value
        }

        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "minDuration" = ${MinDuration}
            "minSeverity" = ${MinSeverity}
            "active" = ${Active}
            "allChecks" = ${AllChecks}
            "allGroups" = ${AllGroups}
            "allApps" = ${AllApps}
            "checks" = ${Checks}
            "groups" = ${Groups}
            "apps" = ${Apps}
            "contacts" = ${Contacts}
        }

        return $PSO
    }

}

