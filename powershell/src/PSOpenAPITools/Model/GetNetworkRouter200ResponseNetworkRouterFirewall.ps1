#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Enabled
No description available.
.PARAMETER Version
No description available.
.PARAMETER DefaultPolicy
No description available.
.PARAMETER Global
No description available.
.PARAMETER RuleGroups
No description available.
.OUTPUTS

GetNetworkRouter200ResponseNetworkRouterFirewall<PSCustomObject>
#>

function Initialize-GetNetworkRouter200ResponseNetworkRouterFirewall {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Enabled},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Version},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DefaultPolicy},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Global},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${RuleGroups}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => GetNetworkRouter200ResponseNetworkRouterFirewall' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "enabled" = ${Enabled}
            "version" = ${Version}
            "defaultPolicy" = ${DefaultPolicy}
            "global" = ${Global}
            "ruleGroups" = ${RuleGroups}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to GetNetworkRouter200ResponseNetworkRouterFirewall<PSCustomObject>

.DESCRIPTION

Convert from JSON to GetNetworkRouter200ResponseNetworkRouterFirewall<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

GetNetworkRouter200ResponseNetworkRouterFirewall<PSCustomObject>
#>
function ConvertFrom-JsonToGetNetworkRouter200ResponseNetworkRouterFirewall {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => GetNetworkRouter200ResponseNetworkRouterFirewall' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in GetNetworkRouter200ResponseNetworkRouterFirewall
        $AllProperties = ("enabled", "version", "defaultPolicy", "global", "ruleGroups")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "enabled"))) { #optional property not found
            $Enabled = $null
        } else {
            $Enabled = $JsonParameters.PSobject.Properties["enabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "version"))) { #optional property not found
            $Version = $null
        } else {
            $Version = $JsonParameters.PSobject.Properties["version"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "defaultPolicy"))) { #optional property not found
            $DefaultPolicy = $null
        } else {
            $DefaultPolicy = $JsonParameters.PSobject.Properties["defaultPolicy"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "global"))) { #optional property not found
            $Global = $null
        } else {
            $Global = $JsonParameters.PSobject.Properties["global"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ruleGroups"))) { #optional property not found
            $RuleGroups = $null
        } else {
            $RuleGroups = $JsonParameters.PSobject.Properties["ruleGroups"].value
        }

        $PSO = [PSCustomObject]@{
            "enabled" = ${Enabled}
            "version" = ${Version}
            "defaultPolicy" = ${DefaultPolicy}
            "global" = ${Global}
            "ruleGroups" = ${RuleGroups}
        }

        return $PSO
    }

}

