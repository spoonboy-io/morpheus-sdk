#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
No description available.
.PARAMETER Name
No description available.
.PARAMETER Code
No description available.
.PARAMETER Active
No description available.
.PARAMETER SortOrder
No description available.
.PARAMETER Description
No description available.
.PARAMETER MaxStorage
No description available.
.PARAMETER MaxMemory
No description available.
.PARAMETER MaxCpu
No description available.
.PARAMETER MaxCores
No description available.
.PARAMETER MaxDisks
No description available.
.PARAMETER CoresPerSocket
No description available.
.PARAMETER CustomCpu
No description available.
.PARAMETER CustomCores
No description available.
.PARAMETER CustomMaxStorage
No description available.
.PARAMETER CustomMaxDataStorage
No description available.
.PARAMETER CustomMaxMemory
No description available.
.PARAMETER AddVolumes
No description available.
.PARAMETER MemoryOptionSource
No description available.
.PARAMETER CpuOptionSource
No description available.
.PARAMETER DateCreated
No description available.
.PARAMETER LastUpdated
No description available.
.PARAMETER RegionCode
No description available.
.PARAMETER Visibility
No description available.
.PARAMETER Editable
No description available.
.PARAMETER ProvisionType
No description available.
.PARAMETER Tenants
No description available.
.PARAMETER PriceSets
No description available.
.PARAMETER Config
No description available.
.OUTPUTS

GuidanceVmwareSizingPlanBeforeAction<PSCustomObject>
#>

function Initialize-GuidanceVmwareSizingPlanBeforeAction {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Code},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Active},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${SortOrder},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${MaxStorage},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${MaxMemory},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${MaxCpu},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${MaxCores},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${MaxDisks},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${CoresPerSocket},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${CustomCpu},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${CustomCores},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${CustomMaxStorage},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${CustomMaxDataStorage},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${CustomMaxMemory},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${AddVolumes},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${MemoryOptionSource},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CpuOptionSource},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${DateCreated},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${LastUpdated},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RegionCode},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Visibility},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Editable},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${ProvisionType},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Tenants},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${PriceSets},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Config}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => GuidanceVmwareSizingPlanBeforeAction' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "name" = ${Name}
            "code" = ${Code}
            "active" = ${Active}
            "sortOrder" = ${SortOrder}
            "description" = ${Description}
            "maxStorage" = ${MaxStorage}
            "maxMemory" = ${MaxMemory}
            "maxCpu" = ${MaxCpu}
            "maxCores" = ${MaxCores}
            "maxDisks" = ${MaxDisks}
            "coresPerSocket" = ${CoresPerSocket}
            "customCpu" = ${CustomCpu}
            "customCores" = ${CustomCores}
            "customMaxStorage" = ${CustomMaxStorage}
            "customMaxDataStorage" = ${CustomMaxDataStorage}
            "customMaxMemory" = ${CustomMaxMemory}
            "addVolumes" = ${AddVolumes}
            "memoryOptionSource" = ${MemoryOptionSource}
            "cpuOptionSource" = ${CpuOptionSource}
            "dateCreated" = ${DateCreated}
            "lastUpdated" = ${LastUpdated}
            "regionCode" = ${RegionCode}
            "visibility" = ${Visibility}
            "editable" = ${Editable}
            "provisionType" = ${ProvisionType}
            "tenants" = ${Tenants}
            "priceSets" = ${PriceSets}
            "config" = ${Config}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to GuidanceVmwareSizingPlanBeforeAction<PSCustomObject>

.DESCRIPTION

Convert from JSON to GuidanceVmwareSizingPlanBeforeAction<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

GuidanceVmwareSizingPlanBeforeAction<PSCustomObject>
#>
function ConvertFrom-JsonToGuidanceVmwareSizingPlanBeforeAction {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => GuidanceVmwareSizingPlanBeforeAction' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in GuidanceVmwareSizingPlanBeforeAction
        $AllProperties = ("id", "name", "code", "active", "sortOrder", "description", "maxStorage", "maxMemory", "maxCpu", "maxCores", "maxDisks", "coresPerSocket", "customCpu", "customCores", "customMaxStorage", "customMaxDataStorage", "customMaxMemory", "addVolumes", "memoryOptionSource", "cpuOptionSource", "dateCreated", "lastUpdated", "regionCode", "visibility", "editable", "provisionType", "tenants", "priceSets", "config")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "code"))) { #optional property not found
            $Code = $null
        } else {
            $Code = $JsonParameters.PSobject.Properties["code"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "active"))) { #optional property not found
            $Active = $null
        } else {
            $Active = $JsonParameters.PSobject.Properties["active"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sortOrder"))) { #optional property not found
            $SortOrder = $null
        } else {
            $SortOrder = $JsonParameters.PSobject.Properties["sortOrder"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "maxStorage"))) { #optional property not found
            $MaxStorage = $null
        } else {
            $MaxStorage = $JsonParameters.PSobject.Properties["maxStorage"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "maxMemory"))) { #optional property not found
            $MaxMemory = $null
        } else {
            $MaxMemory = $JsonParameters.PSobject.Properties["maxMemory"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "maxCpu"))) { #optional property not found
            $MaxCpu = $null
        } else {
            $MaxCpu = $JsonParameters.PSobject.Properties["maxCpu"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "maxCores"))) { #optional property not found
            $MaxCores = $null
        } else {
            $MaxCores = $JsonParameters.PSobject.Properties["maxCores"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "maxDisks"))) { #optional property not found
            $MaxDisks = $null
        } else {
            $MaxDisks = $JsonParameters.PSobject.Properties["maxDisks"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "coresPerSocket"))) { #optional property not found
            $CoresPerSocket = $null
        } else {
            $CoresPerSocket = $JsonParameters.PSobject.Properties["coresPerSocket"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "customCpu"))) { #optional property not found
            $CustomCpu = $null
        } else {
            $CustomCpu = $JsonParameters.PSobject.Properties["customCpu"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "customCores"))) { #optional property not found
            $CustomCores = $null
        } else {
            $CustomCores = $JsonParameters.PSobject.Properties["customCores"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "customMaxStorage"))) { #optional property not found
            $CustomMaxStorage = $null
        } else {
            $CustomMaxStorage = $JsonParameters.PSobject.Properties["customMaxStorage"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "customMaxDataStorage"))) { #optional property not found
            $CustomMaxDataStorage = $null
        } else {
            $CustomMaxDataStorage = $JsonParameters.PSobject.Properties["customMaxDataStorage"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "customMaxMemory"))) { #optional property not found
            $CustomMaxMemory = $null
        } else {
            $CustomMaxMemory = $JsonParameters.PSobject.Properties["customMaxMemory"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "addVolumes"))) { #optional property not found
            $AddVolumes = $null
        } else {
            $AddVolumes = $JsonParameters.PSobject.Properties["addVolumes"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "memoryOptionSource"))) { #optional property not found
            $MemoryOptionSource = $null
        } else {
            $MemoryOptionSource = $JsonParameters.PSobject.Properties["memoryOptionSource"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cpuOptionSource"))) { #optional property not found
            $CpuOptionSource = $null
        } else {
            $CpuOptionSource = $JsonParameters.PSobject.Properties["cpuOptionSource"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dateCreated"))) { #optional property not found
            $DateCreated = $null
        } else {
            $DateCreated = $JsonParameters.PSobject.Properties["dateCreated"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lastUpdated"))) { #optional property not found
            $LastUpdated = $null
        } else {
            $LastUpdated = $JsonParameters.PSobject.Properties["lastUpdated"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "regionCode"))) { #optional property not found
            $RegionCode = $null
        } else {
            $RegionCode = $JsonParameters.PSobject.Properties["regionCode"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "visibility"))) { #optional property not found
            $Visibility = $null
        } else {
            $Visibility = $JsonParameters.PSobject.Properties["visibility"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "editable"))) { #optional property not found
            $Editable = $null
        } else {
            $Editable = $JsonParameters.PSobject.Properties["editable"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "provisionType"))) { #optional property not found
            $ProvisionType = $null
        } else {
            $ProvisionType = $JsonParameters.PSobject.Properties["provisionType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tenants"))) { #optional property not found
            $Tenants = $null
        } else {
            $Tenants = $JsonParameters.PSobject.Properties["tenants"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "priceSets"))) { #optional property not found
            $PriceSets = $null
        } else {
            $PriceSets = $JsonParameters.PSobject.Properties["priceSets"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "config"))) { #optional property not found
            $Config = $null
        } else {
            $Config = $JsonParameters.PSobject.Properties["config"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "name" = ${Name}
            "code" = ${Code}
            "active" = ${Active}
            "sortOrder" = ${SortOrder}
            "description" = ${Description}
            "maxStorage" = ${MaxStorage}
            "maxMemory" = ${MaxMemory}
            "maxCpu" = ${MaxCpu}
            "maxCores" = ${MaxCores}
            "maxDisks" = ${MaxDisks}
            "coresPerSocket" = ${CoresPerSocket}
            "customCpu" = ${CustomCpu}
            "customCores" = ${CustomCores}
            "customMaxStorage" = ${CustomMaxStorage}
            "customMaxDataStorage" = ${CustomMaxDataStorage}
            "customMaxMemory" = ${CustomMaxMemory}
            "addVolumes" = ${AddVolumes}
            "memoryOptionSource" = ${MemoryOptionSource}
            "cpuOptionSource" = ${CpuOptionSource}
            "dateCreated" = ${DateCreated}
            "lastUpdated" = ${LastUpdated}
            "regionCode" = ${RegionCode}
            "visibility" = ${Visibility}
            "editable" = ${Editable}
            "provisionType" = ${ProvisionType}
            "tenants" = ${Tenants}
            "priceSets" = ${PriceSets}
            "config" = ${Config}
        }

        return $PSO
    }

}

