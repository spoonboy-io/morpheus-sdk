#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
No description available.
.PARAMETER Name
No description available.
.PARAMETER Code
No description available.
.PARAMETER Enabled
No description available.
.PARAMETER GroupName
No description available.
.PARAMETER Direction
No description available.
.PARAMETER RuleType
No description available.
.PARAMETER Policy
No description available.
.PARAMETER Source
No description available.
.PARAMETER SourceType
No description available.
.PARAMETER Destination
No description available.
.PARAMETER DestinationType
No description available.
.PARAMETER Profiles
No description available.
.PARAMETER Protocol
No description available.
.PARAMETER Application
No description available.
.PARAMETER ApplicationType
No description available.
.PARAMETER PortRange
No description available.
.PARAMETER SourcePortRange
No description available.
.PARAMETER SourceGroup
No description available.
.PARAMETER SourceTier
No description available.
.PARAMETER Applications
No description available.
.OUTPUTS

GetNetworkRouter200ResponseNetworkRouterFirewallRuleGroupsInnerRulesInner<PSCustomObject>
#>

function Initialize-GetNetworkRouter200ResponseNetworkRouterFirewallRuleGroupsInnerRulesInner {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Code},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Enabled},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${GroupName},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Direction},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RuleType},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Policy},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${Source},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SourceType},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${Destination},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DestinationType},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${Profiles},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Protocol},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Application},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ApplicationType},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PortRange},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SourcePortRange},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SourceGroup},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SourceTier},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Applications}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => GetNetworkRouter200ResponseNetworkRouterFirewallRuleGroupsInnerRulesInner' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "name" = ${Name}
            "code" = ${Code}
            "enabled" = ${Enabled}
            "groupName" = ${GroupName}
            "direction" = ${Direction}
            "ruleType" = ${RuleType}
            "policy" = ${Policy}
            "source" = ${Source}
            "sourceType" = ${SourceType}
            "destination" = ${Destination}
            "destinationType" = ${DestinationType}
            "profiles" = ${Profiles}
            "protocol" = ${Protocol}
            "application" = ${Application}
            "applicationType" = ${ApplicationType}
            "portRange" = ${PortRange}
            "sourcePortRange" = ${SourcePortRange}
            "sourceGroup" = ${SourceGroup}
            "sourceTier" = ${SourceTier}
            "applications" = ${Applications}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to GetNetworkRouter200ResponseNetworkRouterFirewallRuleGroupsInnerRulesInner<PSCustomObject>

.DESCRIPTION

Convert from JSON to GetNetworkRouter200ResponseNetworkRouterFirewallRuleGroupsInnerRulesInner<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

GetNetworkRouter200ResponseNetworkRouterFirewallRuleGroupsInnerRulesInner<PSCustomObject>
#>
function ConvertFrom-JsonToGetNetworkRouter200ResponseNetworkRouterFirewallRuleGroupsInnerRulesInner {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => GetNetworkRouter200ResponseNetworkRouterFirewallRuleGroupsInnerRulesInner' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in GetNetworkRouter200ResponseNetworkRouterFirewallRuleGroupsInnerRulesInner
        $AllProperties = ("id", "name", "code", "enabled", "groupName", "direction", "ruleType", "policy", "source", "sourceType", "destination", "destinationType", "profiles", "protocol", "application", "applicationType", "portRange", "sourcePortRange", "sourceGroup", "sourceTier", "applications")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "code"))) { #optional property not found
            $Code = $null
        } else {
            $Code = $JsonParameters.PSobject.Properties["code"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "enabled"))) { #optional property not found
            $Enabled = $null
        } else {
            $Enabled = $JsonParameters.PSobject.Properties["enabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "groupName"))) { #optional property not found
            $GroupName = $null
        } else {
            $GroupName = $JsonParameters.PSobject.Properties["groupName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "direction"))) { #optional property not found
            $Direction = $null
        } else {
            $Direction = $JsonParameters.PSobject.Properties["direction"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ruleType"))) { #optional property not found
            $RuleType = $null
        } else {
            $RuleType = $JsonParameters.PSobject.Properties["ruleType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "policy"))) { #optional property not found
            $Policy = $null
        } else {
            $Policy = $JsonParameters.PSobject.Properties["policy"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "source"))) { #optional property not found
            $Source = $null
        } else {
            $Source = $JsonParameters.PSobject.Properties["source"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sourceType"))) { #optional property not found
            $SourceType = $null
        } else {
            $SourceType = $JsonParameters.PSobject.Properties["sourceType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "destination"))) { #optional property not found
            $Destination = $null
        } else {
            $Destination = $JsonParameters.PSobject.Properties["destination"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "destinationType"))) { #optional property not found
            $DestinationType = $null
        } else {
            $DestinationType = $JsonParameters.PSobject.Properties["destinationType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "profiles"))) { #optional property not found
            $Profiles = $null
        } else {
            $Profiles = $JsonParameters.PSobject.Properties["profiles"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "protocol"))) { #optional property not found
            $Protocol = $null
        } else {
            $Protocol = $JsonParameters.PSobject.Properties["protocol"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "application"))) { #optional property not found
            $Application = $null
        } else {
            $Application = $JsonParameters.PSobject.Properties["application"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "applicationType"))) { #optional property not found
            $ApplicationType = $null
        } else {
            $ApplicationType = $JsonParameters.PSobject.Properties["applicationType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "portRange"))) { #optional property not found
            $PortRange = $null
        } else {
            $PortRange = $JsonParameters.PSobject.Properties["portRange"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sourcePortRange"))) { #optional property not found
            $SourcePortRange = $null
        } else {
            $SourcePortRange = $JsonParameters.PSobject.Properties["sourcePortRange"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sourceGroup"))) { #optional property not found
            $SourceGroup = $null
        } else {
            $SourceGroup = $JsonParameters.PSobject.Properties["sourceGroup"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sourceTier"))) { #optional property not found
            $SourceTier = $null
        } else {
            $SourceTier = $JsonParameters.PSobject.Properties["sourceTier"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "applications"))) { #optional property not found
            $Applications = $null
        } else {
            $Applications = $JsonParameters.PSobject.Properties["applications"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "name" = ${Name}
            "code" = ${Code}
            "enabled" = ${Enabled}
            "groupName" = ${GroupName}
            "direction" = ${Direction}
            "ruleType" = ${RuleType}
            "policy" = ${Policy}
            "source" = ${Source}
            "sourceType" = ${SourceType}
            "destination" = ${Destination}
            "destinationType" = ${DestinationType}
            "profiles" = ${Profiles}
            "protocol" = ${Protocol}
            "application" = ${Application}
            "applicationType" = ${ApplicationType}
            "portRange" = ${PortRange}
            "sourcePortRange" = ${SourcePortRange}
            "sourceGroup" = ${SourceGroup}
            "sourceTier" = ${SourceTier}
            "applications" = ${Applications}
        }

        return $PSO
    }

}

