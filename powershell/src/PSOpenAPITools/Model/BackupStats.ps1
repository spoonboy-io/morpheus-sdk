#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Backup Result Statistics

.PARAMETER TotalSize
Total size of all backups in bytes
.PARAMETER AvgSize
Average size of each backup in bytes
.PARAMETER TotalCompleted
Total completed count
.PARAMETER Success
Successful backup count
.PARAMETER Failed
Failed backup count
.PARAMETER SuccessRate
Success rate 0-1
.PARAMETER FailRate
Failure rate 0-1
.PARAMETER LastFiveResults
List of the last 5 backup result statuses
.OUTPUTS

BackupStats<PSCustomObject>
#>

function Initialize-BackupStats {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${TotalSize},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${AvgSize},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${TotalCompleted},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Success},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Failed},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${SuccessRate},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${FailRate},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("SUCCEEDED", "FAILED", "IN_PROGRESS", "START_REQUESTED")]
        [String[]]
        ${LastFiveResults}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => BackupStats' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "totalSize" = ${TotalSize}
            "avgSize" = ${AvgSize}
            "totalCompleted" = ${TotalCompleted}
            "success" = ${Success}
            "failed" = ${Failed}
            "successRate" = ${SuccessRate}
            "failRate" = ${FailRate}
            "lastFiveResults" = ${LastFiveResults}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to BackupStats<PSCustomObject>

.DESCRIPTION

Convert from JSON to BackupStats<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

BackupStats<PSCustomObject>
#>
function ConvertFrom-JsonToBackupStats {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => BackupStats' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in BackupStats
        $AllProperties = ("totalSize", "avgSize", "totalCompleted", "success", "failed", "successRate", "failRate", "lastFiveResults")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "totalSize"))) { #optional property not found
            $TotalSize = $null
        } else {
            $TotalSize = $JsonParameters.PSobject.Properties["totalSize"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "avgSize"))) { #optional property not found
            $AvgSize = $null
        } else {
            $AvgSize = $JsonParameters.PSobject.Properties["avgSize"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "totalCompleted"))) { #optional property not found
            $TotalCompleted = $null
        } else {
            $TotalCompleted = $JsonParameters.PSobject.Properties["totalCompleted"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "success"))) { #optional property not found
            $Success = $null
        } else {
            $Success = $JsonParameters.PSobject.Properties["success"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "failed"))) { #optional property not found
            $Failed = $null
        } else {
            $Failed = $JsonParameters.PSobject.Properties["failed"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "successRate"))) { #optional property not found
            $SuccessRate = $null
        } else {
            $SuccessRate = $JsonParameters.PSobject.Properties["successRate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "failRate"))) { #optional property not found
            $FailRate = $null
        } else {
            $FailRate = $JsonParameters.PSobject.Properties["failRate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lastFiveResults"))) { #optional property not found
            $LastFiveResults = $null
        } else {
            $LastFiveResults = $JsonParameters.PSobject.Properties["lastFiveResults"].value
        }

        $PSO = [PSCustomObject]@{
            "totalSize" = ${TotalSize}
            "avgSize" = ${AvgSize}
            "totalCompleted" = ${TotalCompleted}
            "success" = ${Success}
            "failed" = ${Failed}
            "successRate" = ${SuccessRate}
            "failRate" = ${FailRate}
            "lastFiveResults" = ${LastFiveResults}
        }

        return $PSO
    }

}

