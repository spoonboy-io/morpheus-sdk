#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
No description available.
.PARAMETER StartAddress
No description available.
.PARAMETER EndAddress
No description available.
.PARAMETER InternalId
No description available.
.PARAMETER ExternalId
No description available.
.PARAMETER Description
No description available.
.PARAMETER AddressCount
No description available.
.PARAMETER Active
No description available.
.PARAMETER DateCreated
No description available.
.PARAMETER LastUpdated
No description available.
.PARAMETER Cidr
No description available.
.PARAMETER CidrIPv6
No description available.
.OUTPUTS

GetNetworkPools200ResponseAllOfNetworkPoolsInnerIpRangesInner<PSCustomObject>
#>

function Initialize-GetNetworkPools200ResponseAllOfNetworkPoolsInnerIpRangesInner {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${StartAddress},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${EndAddress},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${InternalId},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ExternalId},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${AddressCount},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Active},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${DateCreated},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${LastUpdated},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Cidr},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CidrIPv6}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => GetNetworkPools200ResponseAllOfNetworkPoolsInnerIpRangesInner' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "startAddress" = ${StartAddress}
            "endAddress" = ${EndAddress}
            "internalId" = ${InternalId}
            "externalId" = ${ExternalId}
            "description" = ${Description}
            "addressCount" = ${AddressCount}
            "active" = ${Active}
            "dateCreated" = ${DateCreated}
            "lastUpdated" = ${LastUpdated}
            "cidr" = ${Cidr}
            "cidrIPv6" = ${CidrIPv6}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to GetNetworkPools200ResponseAllOfNetworkPoolsInnerIpRangesInner<PSCustomObject>

.DESCRIPTION

Convert from JSON to GetNetworkPools200ResponseAllOfNetworkPoolsInnerIpRangesInner<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

GetNetworkPools200ResponseAllOfNetworkPoolsInnerIpRangesInner<PSCustomObject>
#>
function ConvertFrom-JsonToGetNetworkPools200ResponseAllOfNetworkPoolsInnerIpRangesInner {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => GetNetworkPools200ResponseAllOfNetworkPoolsInnerIpRangesInner' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in GetNetworkPools200ResponseAllOfNetworkPoolsInnerIpRangesInner
        $AllProperties = ("id", "startAddress", "endAddress", "internalId", "externalId", "description", "addressCount", "active", "dateCreated", "lastUpdated", "cidr", "cidrIPv6")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "startAddress"))) { #optional property not found
            $StartAddress = $null
        } else {
            $StartAddress = $JsonParameters.PSobject.Properties["startAddress"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "endAddress"))) { #optional property not found
            $EndAddress = $null
        } else {
            $EndAddress = $JsonParameters.PSobject.Properties["endAddress"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "internalId"))) { #optional property not found
            $InternalId = $null
        } else {
            $InternalId = $JsonParameters.PSobject.Properties["internalId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "externalId"))) { #optional property not found
            $ExternalId = $null
        } else {
            $ExternalId = $JsonParameters.PSobject.Properties["externalId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "addressCount"))) { #optional property not found
            $AddressCount = $null
        } else {
            $AddressCount = $JsonParameters.PSobject.Properties["addressCount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "active"))) { #optional property not found
            $Active = $null
        } else {
            $Active = $JsonParameters.PSobject.Properties["active"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dateCreated"))) { #optional property not found
            $DateCreated = $null
        } else {
            $DateCreated = $JsonParameters.PSobject.Properties["dateCreated"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lastUpdated"))) { #optional property not found
            $LastUpdated = $null
        } else {
            $LastUpdated = $JsonParameters.PSobject.Properties["lastUpdated"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cidr"))) { #optional property not found
            $Cidr = $null
        } else {
            $Cidr = $JsonParameters.PSobject.Properties["cidr"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cidrIPv6"))) { #optional property not found
            $CidrIPv6 = $null
        } else {
            $CidrIPv6 = $JsonParameters.PSobject.Properties["cidrIPv6"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "startAddress" = ${StartAddress}
            "endAddress" = ${EndAddress}
            "internalId" = ${InternalId}
            "externalId" = ${ExternalId}
            "description" = ${Description}
            "addressCount" = ${AddressCount}
            "active" = ${Active}
            "dateCreated" = ${DateCreated}
            "lastUpdated" = ${LastUpdated}
            "cidr" = ${Cidr}
            "cidrIPv6" = ${CidrIPv6}
        }

        return $PSO
    }

}

