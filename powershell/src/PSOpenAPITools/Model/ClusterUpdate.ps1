#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Name
Cluster name
.PARAMETER Description
Cluster description
.PARAMETER Labels
Array of label strings, can be used for filtering.
.PARAMETER Enabled
Cluster enabled
.PARAMETER ServiceUrl
Cluster API Url
.PARAMETER ServiceToken
Cluster API token
.PARAMETER Refresh
Queue cluster refresh
.PARAMETER Managed
Cluster managed
.OUTPUTS

ClusterUpdate<PSCustomObject>
#>

function Initialize-ClusterUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${Labels},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Enabled},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ServiceUrl},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ServiceToken},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Refresh},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Managed}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ClusterUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "description" = ${Description}
            "labels" = ${Labels}
            "enabled" = ${Enabled}
            "serviceUrl" = ${ServiceUrl}
            "serviceToken" = ${ServiceToken}
            "refresh" = ${Refresh}
            "managed" = ${Managed}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ClusterUpdate<PSCustomObject>

.DESCRIPTION

Convert from JSON to ClusterUpdate<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ClusterUpdate<PSCustomObject>
#>
function ConvertFrom-JsonToClusterUpdate {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ClusterUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ClusterUpdate
        $AllProperties = ("name", "description", "labels", "enabled", "serviceUrl", "serviceToken", "refresh", "managed")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "labels"))) { #optional property not found
            $Labels = $null
        } else {
            $Labels = $JsonParameters.PSobject.Properties["labels"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "enabled"))) { #optional property not found
            $Enabled = $null
        } else {
            $Enabled = $JsonParameters.PSobject.Properties["enabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "serviceUrl"))) { #optional property not found
            $ServiceUrl = $null
        } else {
            $ServiceUrl = $JsonParameters.PSobject.Properties["serviceUrl"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "serviceToken"))) { #optional property not found
            $ServiceToken = $null
        } else {
            $ServiceToken = $JsonParameters.PSobject.Properties["serviceToken"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "refresh"))) { #optional property not found
            $Refresh = $null
        } else {
            $Refresh = $JsonParameters.PSobject.Properties["refresh"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "managed"))) { #optional property not found
            $Managed = $null
        } else {
            $Managed = $JsonParameters.PSobject.Properties["managed"].value
        }

        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "description" = ${Description}
            "labels" = ${Labels}
            "enabled" = ${Enabled}
            "serviceUrl" = ${ServiceUrl}
            "serviceToken" = ${ServiceToken}
            "refresh" = ${Refresh}
            "managed" = ${Managed}
        }

        return $PSO
    }

}

