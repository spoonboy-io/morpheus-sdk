#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.1.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ApplianceUrl
No description available.
.PARAMETER InternalApplianceUrl
No description available.
.PARAMETER CorsAllowed
No description available.
.PARAMETER RegistrationEnabled
No description available.
.PARAMETER DefaultRoleId
No description available.
.PARAMETER DefaultUserRoleId
No description available.
.PARAMETER DockerPrivilegedMode
No description available.
.PARAMETER ExpirePwdDays
No description available.
.PARAMETER DisableAfterAttempts
No description available.
.PARAMETER DisableAfterDaysInactive
No description available.
.PARAMETER WarnUserDaysBefore
No description available.
.PARAMETER SmtpMailFrom
No description available.
.PARAMETER SmtpServer
No description available.
.PARAMETER SmtpPort
No description available.
.PARAMETER SmtpSSL
No description available.
.PARAMETER SmtpTLS
No description available.
.PARAMETER SmtpUser
No description available.
.PARAMETER SmtpPassword
No description available.
.PARAMETER SmtpPasswordHash
No description available.
.PARAMETER ProxyHost
No description available.
.PARAMETER ProxyPort
No description available.
.PARAMETER ProxyUser
No description available.
.PARAMETER ProxyPassword
No description available.
.PARAMETER ProxyPasswordHash
No description available.
.PARAMETER ProxyDomain
No description available.
.PARAMETER ProxyWorkstation
No description available.
.PARAMETER CurrencyProvider
No description available.
.PARAMETER CurrencyKey
No description available.
.PARAMETER EnabledZoneTypes
No description available.
.PARAMETER StatsRetainmentPeriod
No description available.
.OUTPUTS

ApplianceSettings<PSCustomObject>
#>

function Initialize-ApplianceSettings {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ApplianceUrl},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${InternalApplianceUrl},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CorsAllowed},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${RegistrationEnabled},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DefaultRoleId},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DefaultUserRoleId},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${DockerPrivilegedMode},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ExpirePwdDays},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DisableAfterAttempts},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DisableAfterDaysInactive},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${WarnUserDaysBefore},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SmtpMailFrom},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SmtpServer},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SmtpPort},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${SmtpSSL},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${SmtpTLS},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SmtpUser},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SmtpPassword},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SmtpPasswordHash},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ProxyHost},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ProxyPort},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ProxyUser},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ProxyPassword},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ProxyPasswordHash},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ProxyDomain},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ProxyWorkstation},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CurrencyProvider},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CurrencyKey},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${EnabledZoneTypes},
        [Parameter(Position = 29, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${StatsRetainmentPeriod}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ApplianceSettings' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "applianceUrl" = ${ApplianceUrl}
            "internalApplianceUrl" = ${InternalApplianceUrl}
            "corsAllowed" = ${CorsAllowed}
            "registrationEnabled" = ${RegistrationEnabled}
            "defaultRoleId" = ${DefaultRoleId}
            "defaultUserRoleId" = ${DefaultUserRoleId}
            "dockerPrivilegedMode" = ${DockerPrivilegedMode}
            "expirePwdDays" = ${ExpirePwdDays}
            "disableAfterAttempts" = ${DisableAfterAttempts}
            "disableAfterDaysInactive" = ${DisableAfterDaysInactive}
            "warnUserDaysBefore" = ${WarnUserDaysBefore}
            "smtpMailFrom" = ${SmtpMailFrom}
            "smtpServer" = ${SmtpServer}
            "smtpPort" = ${SmtpPort}
            "smtpSSL" = ${SmtpSSL}
            "smtpTLS" = ${SmtpTLS}
            "smtpUser" = ${SmtpUser}
            "smtpPassword" = ${SmtpPassword}
            "smtpPasswordHash" = ${SmtpPasswordHash}
            "proxyHost" = ${ProxyHost}
            "proxyPort" = ${ProxyPort}
            "proxyUser" = ${ProxyUser}
            "proxyPassword" = ${ProxyPassword}
            "proxyPasswordHash" = ${ProxyPasswordHash}
            "proxyDomain" = ${ProxyDomain}
            "proxyWorkstation" = ${ProxyWorkstation}
            "currencyProvider" = ${CurrencyProvider}
            "currencyKey" = ${CurrencyKey}
            "enabledZoneTypes" = ${EnabledZoneTypes}
            "statsRetainmentPeriod" = ${StatsRetainmentPeriod}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ApplianceSettings<PSCustomObject>

.DESCRIPTION

Convert from JSON to ApplianceSettings<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ApplianceSettings<PSCustomObject>
#>
function ConvertFrom-JsonToApplianceSettings {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ApplianceSettings' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ApplianceSettings
        $AllProperties = ("applianceUrl", "internalApplianceUrl", "corsAllowed", "registrationEnabled", "defaultRoleId", "defaultUserRoleId", "dockerPrivilegedMode", "expirePwdDays", "disableAfterAttempts", "disableAfterDaysInactive", "warnUserDaysBefore", "smtpMailFrom", "smtpServer", "smtpPort", "smtpSSL", "smtpTLS", "smtpUser", "smtpPassword", "smtpPasswordHash", "proxyHost", "proxyPort", "proxyUser", "proxyPassword", "proxyPasswordHash", "proxyDomain", "proxyWorkstation", "currencyProvider", "currencyKey", "enabledZoneTypes", "statsRetainmentPeriod")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "applianceUrl"))) { #optional property not found
            $ApplianceUrl = $null
        } else {
            $ApplianceUrl = $JsonParameters.PSobject.Properties["applianceUrl"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "internalApplianceUrl"))) { #optional property not found
            $InternalApplianceUrl = $null
        } else {
            $InternalApplianceUrl = $JsonParameters.PSobject.Properties["internalApplianceUrl"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "corsAllowed"))) { #optional property not found
            $CorsAllowed = $null
        } else {
            $CorsAllowed = $JsonParameters.PSobject.Properties["corsAllowed"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "registrationEnabled"))) { #optional property not found
            $RegistrationEnabled = $null
        } else {
            $RegistrationEnabled = $JsonParameters.PSobject.Properties["registrationEnabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "defaultRoleId"))) { #optional property not found
            $DefaultRoleId = $null
        } else {
            $DefaultRoleId = $JsonParameters.PSobject.Properties["defaultRoleId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "defaultUserRoleId"))) { #optional property not found
            $DefaultUserRoleId = $null
        } else {
            $DefaultUserRoleId = $JsonParameters.PSobject.Properties["defaultUserRoleId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dockerPrivilegedMode"))) { #optional property not found
            $DockerPrivilegedMode = $null
        } else {
            $DockerPrivilegedMode = $JsonParameters.PSobject.Properties["dockerPrivilegedMode"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "expirePwdDays"))) { #optional property not found
            $ExpirePwdDays = $null
        } else {
            $ExpirePwdDays = $JsonParameters.PSobject.Properties["expirePwdDays"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "disableAfterAttempts"))) { #optional property not found
            $DisableAfterAttempts = $null
        } else {
            $DisableAfterAttempts = $JsonParameters.PSobject.Properties["disableAfterAttempts"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "disableAfterDaysInactive"))) { #optional property not found
            $DisableAfterDaysInactive = $null
        } else {
            $DisableAfterDaysInactive = $JsonParameters.PSobject.Properties["disableAfterDaysInactive"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "warnUserDaysBefore"))) { #optional property not found
            $WarnUserDaysBefore = $null
        } else {
            $WarnUserDaysBefore = $JsonParameters.PSobject.Properties["warnUserDaysBefore"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "smtpMailFrom"))) { #optional property not found
            $SmtpMailFrom = $null
        } else {
            $SmtpMailFrom = $JsonParameters.PSobject.Properties["smtpMailFrom"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "smtpServer"))) { #optional property not found
            $SmtpServer = $null
        } else {
            $SmtpServer = $JsonParameters.PSobject.Properties["smtpServer"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "smtpPort"))) { #optional property not found
            $SmtpPort = $null
        } else {
            $SmtpPort = $JsonParameters.PSobject.Properties["smtpPort"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "smtpSSL"))) { #optional property not found
            $SmtpSSL = $null
        } else {
            $SmtpSSL = $JsonParameters.PSobject.Properties["smtpSSL"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "smtpTLS"))) { #optional property not found
            $SmtpTLS = $null
        } else {
            $SmtpTLS = $JsonParameters.PSobject.Properties["smtpTLS"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "smtpUser"))) { #optional property not found
            $SmtpUser = $null
        } else {
            $SmtpUser = $JsonParameters.PSobject.Properties["smtpUser"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "smtpPassword"))) { #optional property not found
            $SmtpPassword = $null
        } else {
            $SmtpPassword = $JsonParameters.PSobject.Properties["smtpPassword"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "smtpPasswordHash"))) { #optional property not found
            $SmtpPasswordHash = $null
        } else {
            $SmtpPasswordHash = $JsonParameters.PSobject.Properties["smtpPasswordHash"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "proxyHost"))) { #optional property not found
            $ProxyHost = $null
        } else {
            $ProxyHost = $JsonParameters.PSobject.Properties["proxyHost"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "proxyPort"))) { #optional property not found
            $ProxyPort = $null
        } else {
            $ProxyPort = $JsonParameters.PSobject.Properties["proxyPort"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "proxyUser"))) { #optional property not found
            $ProxyUser = $null
        } else {
            $ProxyUser = $JsonParameters.PSobject.Properties["proxyUser"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "proxyPassword"))) { #optional property not found
            $ProxyPassword = $null
        } else {
            $ProxyPassword = $JsonParameters.PSobject.Properties["proxyPassword"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "proxyPasswordHash"))) { #optional property not found
            $ProxyPasswordHash = $null
        } else {
            $ProxyPasswordHash = $JsonParameters.PSobject.Properties["proxyPasswordHash"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "proxyDomain"))) { #optional property not found
            $ProxyDomain = $null
        } else {
            $ProxyDomain = $JsonParameters.PSobject.Properties["proxyDomain"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "proxyWorkstation"))) { #optional property not found
            $ProxyWorkstation = $null
        } else {
            $ProxyWorkstation = $JsonParameters.PSobject.Properties["proxyWorkstation"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "currencyProvider"))) { #optional property not found
            $CurrencyProvider = $null
        } else {
            $CurrencyProvider = $JsonParameters.PSobject.Properties["currencyProvider"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "currencyKey"))) { #optional property not found
            $CurrencyKey = $null
        } else {
            $CurrencyKey = $JsonParameters.PSobject.Properties["currencyKey"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "enabledZoneTypes"))) { #optional property not found
            $EnabledZoneTypes = $null
        } else {
            $EnabledZoneTypes = $JsonParameters.PSobject.Properties["enabledZoneTypes"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "statsRetainmentPeriod"))) { #optional property not found
            $StatsRetainmentPeriod = $null
        } else {
            $StatsRetainmentPeriod = $JsonParameters.PSobject.Properties["statsRetainmentPeriod"].value
        }

        $PSO = [PSCustomObject]@{
            "applianceUrl" = ${ApplianceUrl}
            "internalApplianceUrl" = ${InternalApplianceUrl}
            "corsAllowed" = ${CorsAllowed}
            "registrationEnabled" = ${RegistrationEnabled}
            "defaultRoleId" = ${DefaultRoleId}
            "defaultUserRoleId" = ${DefaultUserRoleId}
            "dockerPrivilegedMode" = ${DockerPrivilegedMode}
            "expirePwdDays" = ${ExpirePwdDays}
            "disableAfterAttempts" = ${DisableAfterAttempts}
            "disableAfterDaysInactive" = ${DisableAfterDaysInactive}
            "warnUserDaysBefore" = ${WarnUserDaysBefore}
            "smtpMailFrom" = ${SmtpMailFrom}
            "smtpServer" = ${SmtpServer}
            "smtpPort" = ${SmtpPort}
            "smtpSSL" = ${SmtpSSL}
            "smtpTLS" = ${SmtpTLS}
            "smtpUser" = ${SmtpUser}
            "smtpPassword" = ${SmtpPassword}
            "smtpPasswordHash" = ${SmtpPasswordHash}
            "proxyHost" = ${ProxyHost}
            "proxyPort" = ${ProxyPort}
            "proxyUser" = ${ProxyUser}
            "proxyPassword" = ${ProxyPassword}
            "proxyPasswordHash" = ${ProxyPasswordHash}
            "proxyDomain" = ${ProxyDomain}
            "proxyWorkstation" = ${ProxyWorkstation}
            "currencyProvider" = ${CurrencyProvider}
            "currencyKey" = ${CurrencyKey}
            "enabledZoneTypes" = ${EnabledZoneTypes}
            "statsRetainmentPeriod" = ${StatsRetainmentPeriod}
        }

        return $PSO
    }

}

