#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER TotalSizeByDay
No description available.
.PARAMETER TotalSizeByDay7Days
No description available.
.PARAMETER FormattedTotalSize
No description available.
.PARAMETER BackupCount
No description available.
.PARAMETER TotalSize
No description available.
.PARAMETER Success
No description available.
.PARAMETER Failed
No description available.
.PARAMETER TotalCompleted
No description available.
.PARAMETER LastSevenDays
No description available.
.PARAMETER AvgSize
No description available.
.PARAMETER FailedRate
No description available.
.PARAMETER SuccessRate
No description available.
.PARAMETER NextFireTotal
No description available.
.PARAMETER BackupDayCount
No description available.
.PARAMETER BackupDayCountTotal
No description available.
.OUTPUTS

DashboardBackupsAccountStats<PSCustomObject>
#>

function Initialize-DashboardBackupsAccountStats {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [Decimal[]]
        ${TotalSizeByDay},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [Decimal[]]
        ${TotalSizeByDay7Days},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${FormattedTotalSize},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${BackupCount},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${TotalSize},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${Success},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${Failed},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${TotalCompleted},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${LastSevenDays},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${AvgSize},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${FailedRate},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${SuccessRate},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${NextFireTotal},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [Decimal[]]
        ${BackupDayCount},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${BackupDayCountTotal}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => DashboardBackupsAccountStats' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "totalSizeByDay" = ${TotalSizeByDay}
            "totalSizeByDay7Days" = ${TotalSizeByDay7Days}
            "formattedTotalSize" = ${FormattedTotalSize}
            "backupCount" = ${BackupCount}
            "totalSize" = ${TotalSize}
            "success" = ${Success}
            "failed" = ${Failed}
            "totalCompleted" = ${TotalCompleted}
            "lastSevenDays" = ${LastSevenDays}
            "avgSize" = ${AvgSize}
            "failedRate" = ${FailedRate}
            "successRate" = ${SuccessRate}
            "nextFireTotal" = ${NextFireTotal}
            "backupDayCount" = ${BackupDayCount}
            "backupDayCountTotal" = ${BackupDayCountTotal}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to DashboardBackupsAccountStats<PSCustomObject>

.DESCRIPTION

Convert from JSON to DashboardBackupsAccountStats<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

DashboardBackupsAccountStats<PSCustomObject>
#>
function ConvertFrom-JsonToDashboardBackupsAccountStats {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => DashboardBackupsAccountStats' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in DashboardBackupsAccountStats
        $AllProperties = ("totalSizeByDay", "totalSizeByDay7Days", "formattedTotalSize", "backupCount", "totalSize", "success", "failed", "totalCompleted", "lastSevenDays", "avgSize", "failedRate", "successRate", "nextFireTotal", "backupDayCount", "backupDayCountTotal")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "totalSizeByDay"))) { #optional property not found
            $TotalSizeByDay = $null
        } else {
            $TotalSizeByDay = $JsonParameters.PSobject.Properties["totalSizeByDay"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "totalSizeByDay7Days"))) { #optional property not found
            $TotalSizeByDay7Days = $null
        } else {
            $TotalSizeByDay7Days = $JsonParameters.PSobject.Properties["totalSizeByDay7Days"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "formattedTotalSize"))) { #optional property not found
            $FormattedTotalSize = $null
        } else {
            $FormattedTotalSize = $JsonParameters.PSobject.Properties["formattedTotalSize"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "backupCount"))) { #optional property not found
            $BackupCount = $null
        } else {
            $BackupCount = $JsonParameters.PSobject.Properties["backupCount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "totalSize"))) { #optional property not found
            $TotalSize = $null
        } else {
            $TotalSize = $JsonParameters.PSobject.Properties["totalSize"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "success"))) { #optional property not found
            $Success = $null
        } else {
            $Success = $JsonParameters.PSobject.Properties["success"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "failed"))) { #optional property not found
            $Failed = $null
        } else {
            $Failed = $JsonParameters.PSobject.Properties["failed"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "totalCompleted"))) { #optional property not found
            $TotalCompleted = $null
        } else {
            $TotalCompleted = $JsonParameters.PSobject.Properties["totalCompleted"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lastSevenDays"))) { #optional property not found
            $LastSevenDays = $null
        } else {
            $LastSevenDays = $JsonParameters.PSobject.Properties["lastSevenDays"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "avgSize"))) { #optional property not found
            $AvgSize = $null
        } else {
            $AvgSize = $JsonParameters.PSobject.Properties["avgSize"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "failedRate"))) { #optional property not found
            $FailedRate = $null
        } else {
            $FailedRate = $JsonParameters.PSobject.Properties["failedRate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "successRate"))) { #optional property not found
            $SuccessRate = $null
        } else {
            $SuccessRate = $JsonParameters.PSobject.Properties["successRate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "nextFireTotal"))) { #optional property not found
            $NextFireTotal = $null
        } else {
            $NextFireTotal = $JsonParameters.PSobject.Properties["nextFireTotal"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "backupDayCount"))) { #optional property not found
            $BackupDayCount = $null
        } else {
            $BackupDayCount = $JsonParameters.PSobject.Properties["backupDayCount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "backupDayCountTotal"))) { #optional property not found
            $BackupDayCountTotal = $null
        } else {
            $BackupDayCountTotal = $JsonParameters.PSobject.Properties["backupDayCountTotal"].value
        }

        $PSO = [PSCustomObject]@{
            "totalSizeByDay" = ${TotalSizeByDay}
            "totalSizeByDay7Days" = ${TotalSizeByDay7Days}
            "formattedTotalSize" = ${FormattedTotalSize}
            "backupCount" = ${BackupCount}
            "totalSize" = ${TotalSize}
            "success" = ${Success}
            "failed" = ${Failed}
            "totalCompleted" = ${TotalCompleted}
            "lastSevenDays" = ${LastSevenDays}
            "avgSize" = ${AvgSize}
            "failedRate" = ${FailedRate}
            "successRate" = ${SuccessRate}
            "nextFireTotal" = ${NextFireTotal}
            "backupDayCount" = ${BackupDayCount}
            "backupDayCountTotal" = ${BackupDayCountTotal}
        }

        return $PSO
    }

}

