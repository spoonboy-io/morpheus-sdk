#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
No description available.
.PARAMETER Code
No description available.
.PARAMETER Account
No description available.
.PARAMETER Name
No description available.
.PARAMETER Labels
No description available.
.PARAMETER FileName
No description available.
.PARAMETER FilePath
No description available.
.PARAMETER TemplateType
No description available.
.PARAMETER TemplatePhase
No description available.
.PARAMETER Template
No description available.
.PARAMETER Category
No description available.
.PARAMETER SettingCategory
No description available.
.PARAMETER SettingName
No description available.
.PARAMETER AutoRun
No description available.
.PARAMETER RunOnScale
No description available.
.PARAMETER RunOnDeploy
No description available.
.PARAMETER FileOwner
No description available.
.PARAMETER FileGroup
No description available.
.PARAMETER Permissions
No description available.
.PARAMETER DateCreated
No description available.
.PARAMETER LastUpdated
No description available.
.OUTPUTS

FileTemplate<PSCustomObject>
#>

function Initialize-FileTemplate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Code},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Account},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${Labels},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FileName},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FilePath},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TemplateType},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TemplatePhase},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Template},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Category},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SettingCategory},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SettingName},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${AutoRun},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${RunOnScale},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${RunOnDeploy},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FileOwner},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FileGroup},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Permissions},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${DateCreated},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${LastUpdated}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => FileTemplate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "code" = ${Code}
            "account" = ${Account}
            "name" = ${Name}
            "labels" = ${Labels}
            "fileName" = ${FileName}
            "filePath" = ${FilePath}
            "templateType" = ${TemplateType}
            "templatePhase" = ${TemplatePhase}
            "template" = ${Template}
            "category" = ${Category}
            "settingCategory" = ${SettingCategory}
            "settingName" = ${SettingName}
            "autoRun" = ${AutoRun}
            "runOnScale" = ${RunOnScale}
            "runOnDeploy" = ${RunOnDeploy}
            "fileOwner" = ${FileOwner}
            "fileGroup" = ${FileGroup}
            "permissions" = ${Permissions}
            "dateCreated" = ${DateCreated}
            "lastUpdated" = ${LastUpdated}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to FileTemplate<PSCustomObject>

.DESCRIPTION

Convert from JSON to FileTemplate<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

FileTemplate<PSCustomObject>
#>
function ConvertFrom-JsonToFileTemplate {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => FileTemplate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in FileTemplate
        $AllProperties = ("id", "code", "account", "name", "labels", "fileName", "filePath", "templateType", "templatePhase", "template", "category", "settingCategory", "settingName", "autoRun", "runOnScale", "runOnDeploy", "fileOwner", "fileGroup", "permissions", "dateCreated", "lastUpdated")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "code"))) { #optional property not found
            $Code = $null
        } else {
            $Code = $JsonParameters.PSobject.Properties["code"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "account"))) { #optional property not found
            $Account = $null
        } else {
            $Account = $JsonParameters.PSobject.Properties["account"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "labels"))) { #optional property not found
            $Labels = $null
        } else {
            $Labels = $JsonParameters.PSobject.Properties["labels"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "fileName"))) { #optional property not found
            $FileName = $null
        } else {
            $FileName = $JsonParameters.PSobject.Properties["fileName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "filePath"))) { #optional property not found
            $FilePath = $null
        } else {
            $FilePath = $JsonParameters.PSobject.Properties["filePath"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "templateType"))) { #optional property not found
            $TemplateType = $null
        } else {
            $TemplateType = $JsonParameters.PSobject.Properties["templateType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "templatePhase"))) { #optional property not found
            $TemplatePhase = $null
        } else {
            $TemplatePhase = $JsonParameters.PSobject.Properties["templatePhase"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "template"))) { #optional property not found
            $Template = $null
        } else {
            $Template = $JsonParameters.PSobject.Properties["template"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "category"))) { #optional property not found
            $Category = $null
        } else {
            $Category = $JsonParameters.PSobject.Properties["category"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "settingCategory"))) { #optional property not found
            $SettingCategory = $null
        } else {
            $SettingCategory = $JsonParameters.PSobject.Properties["settingCategory"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "settingName"))) { #optional property not found
            $SettingName = $null
        } else {
            $SettingName = $JsonParameters.PSobject.Properties["settingName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "autoRun"))) { #optional property not found
            $AutoRun = $null
        } else {
            $AutoRun = $JsonParameters.PSobject.Properties["autoRun"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "runOnScale"))) { #optional property not found
            $RunOnScale = $null
        } else {
            $RunOnScale = $JsonParameters.PSobject.Properties["runOnScale"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "runOnDeploy"))) { #optional property not found
            $RunOnDeploy = $null
        } else {
            $RunOnDeploy = $JsonParameters.PSobject.Properties["runOnDeploy"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "fileOwner"))) { #optional property not found
            $FileOwner = $null
        } else {
            $FileOwner = $JsonParameters.PSobject.Properties["fileOwner"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "fileGroup"))) { #optional property not found
            $FileGroup = $null
        } else {
            $FileGroup = $JsonParameters.PSobject.Properties["fileGroup"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "permissions"))) { #optional property not found
            $Permissions = $null
        } else {
            $Permissions = $JsonParameters.PSobject.Properties["permissions"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dateCreated"))) { #optional property not found
            $DateCreated = $null
        } else {
            $DateCreated = $JsonParameters.PSobject.Properties["dateCreated"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lastUpdated"))) { #optional property not found
            $LastUpdated = $null
        } else {
            $LastUpdated = $JsonParameters.PSobject.Properties["lastUpdated"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "code" = ${Code}
            "account" = ${Account}
            "name" = ${Name}
            "labels" = ${Labels}
            "fileName" = ${FileName}
            "filePath" = ${FilePath}
            "templateType" = ${TemplateType}
            "templatePhase" = ${TemplatePhase}
            "template" = ${Template}
            "category" = ${Category}
            "settingCategory" = ${SettingCategory}
            "settingName" = ${SettingName}
            "autoRun" = ${AutoRun}
            "runOnScale" = ${RunOnScale}
            "runOnDeploy" = ${RunOnDeploy}
            "fileOwner" = ${FileOwner}
            "fileGroup" = ${FileGroup}
            "permissions" = ${Permissions}
            "dateCreated" = ${DateCreated}
            "lastUpdated" = ${LastUpdated}
        }

        return $PSO
    }

}

