#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
No description available.
.PARAMETER InternalId
No description available.
.PARAMETER ServerCount
No description available.
.PARAMETER DateCreated
No description available.
.PARAMETER Code
No description available.
.PARAMETER LastUpdated
No description available.
.PARAMETER HasAutoScale
No description available.
.PARAMETER MemoryRequirement
No description available.
.PARAMETER ClusterVersion
No description available.
.PARAMETER ComputeVersion
No description available.
.PARAMETER HasSettings
No description available.
.PARAMETER SortOrder
No description available.
.PARAMETER HasConfig
No description available.
.PARAMETER Name
No description available.
.PARAMETER Creatable
No description available.
.PARAMETER Enabled
No description available.
.PARAMETER Description
No description available.
.PARAMETER GroupType
No description available.
.PARAMETER Labels
No description available.
.PARAMETER EnvironmentVariables
No description available.
.PARAMETER OptionTypes
No description available.
.PARAMETER Actions
No description available.
.PARAMETER ComputeServers
No description available.
.PARAMETER InstallContainerRuntime
No description available.
.PARAMETER ProvisionType
No description available.
.PARAMETER SpecTemplates
No description available.
.PARAMETER TaskSets
No description available.
.PARAMETER Type
No description available.
.OUTPUTS

ClusterLayout<PSCustomObject>
#>

function Initialize-ClusterLayout {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${InternalId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${ServerCount},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${DateCreated},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Code},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${LastUpdated},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${HasAutoScale},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${MemoryRequirement},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ClusterVersion},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ComputeVersion},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${HasSettings},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${SortOrder},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${HasConfig},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Creatable},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Enabled},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${GroupType},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${Labels},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${EnvironmentVariables},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${OptionTypes},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Actions},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${ComputeServers},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${InstallContainerRuntime},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${ProvisionType},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${SpecTemplates},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${TaskSets},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Type}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ClusterLayout' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "internalId" = ${InternalId}
            "serverCount" = ${ServerCount}
            "dateCreated" = ${DateCreated}
            "code" = ${Code}
            "lastUpdated" = ${LastUpdated}
            "hasAutoScale" = ${HasAutoScale}
            "memoryRequirement" = ${MemoryRequirement}
            "clusterVersion" = ${ClusterVersion}
            "computeVersion" = ${ComputeVersion}
            "hasSettings" = ${HasSettings}
            "sortOrder" = ${SortOrder}
            "hasConfig" = ${HasConfig}
            "name" = ${Name}
            "creatable" = ${Creatable}
            "enabled" = ${Enabled}
            "description" = ${Description}
            "groupType" = ${GroupType}
            "labels" = ${Labels}
            "environmentVariables" = ${EnvironmentVariables}
            "optionTypes" = ${OptionTypes}
            "actions" = ${Actions}
            "computeServers" = ${ComputeServers}
            "installContainerRuntime" = ${InstallContainerRuntime}
            "provisionType" = ${ProvisionType}
            "specTemplates" = ${SpecTemplates}
            "taskSets" = ${TaskSets}
            "type" = ${Type}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ClusterLayout<PSCustomObject>

.DESCRIPTION

Convert from JSON to ClusterLayout<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ClusterLayout<PSCustomObject>
#>
function ConvertFrom-JsonToClusterLayout {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ClusterLayout' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ClusterLayout
        $AllProperties = ("id", "internalId", "serverCount", "dateCreated", "code", "lastUpdated", "hasAutoScale", "memoryRequirement", "clusterVersion", "computeVersion", "hasSettings", "sortOrder", "hasConfig", "name", "creatable", "enabled", "description", "groupType", "labels", "environmentVariables", "optionTypes", "actions", "computeServers", "installContainerRuntime", "provisionType", "specTemplates", "taskSets", "type")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "internalId"))) { #optional property not found
            $InternalId = $null
        } else {
            $InternalId = $JsonParameters.PSobject.Properties["internalId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "serverCount"))) { #optional property not found
            $ServerCount = $null
        } else {
            $ServerCount = $JsonParameters.PSobject.Properties["serverCount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dateCreated"))) { #optional property not found
            $DateCreated = $null
        } else {
            $DateCreated = $JsonParameters.PSobject.Properties["dateCreated"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "code"))) { #optional property not found
            $Code = $null
        } else {
            $Code = $JsonParameters.PSobject.Properties["code"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lastUpdated"))) { #optional property not found
            $LastUpdated = $null
        } else {
            $LastUpdated = $JsonParameters.PSobject.Properties["lastUpdated"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "hasAutoScale"))) { #optional property not found
            $HasAutoScale = $null
        } else {
            $HasAutoScale = $JsonParameters.PSobject.Properties["hasAutoScale"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "memoryRequirement"))) { #optional property not found
            $MemoryRequirement = $null
        } else {
            $MemoryRequirement = $JsonParameters.PSobject.Properties["memoryRequirement"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "clusterVersion"))) { #optional property not found
            $ClusterVersion = $null
        } else {
            $ClusterVersion = $JsonParameters.PSobject.Properties["clusterVersion"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "computeVersion"))) { #optional property not found
            $ComputeVersion = $null
        } else {
            $ComputeVersion = $JsonParameters.PSobject.Properties["computeVersion"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "hasSettings"))) { #optional property not found
            $HasSettings = $null
        } else {
            $HasSettings = $JsonParameters.PSobject.Properties["hasSettings"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sortOrder"))) { #optional property not found
            $SortOrder = $null
        } else {
            $SortOrder = $JsonParameters.PSobject.Properties["sortOrder"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "hasConfig"))) { #optional property not found
            $HasConfig = $null
        } else {
            $HasConfig = $JsonParameters.PSobject.Properties["hasConfig"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "creatable"))) { #optional property not found
            $Creatable = $null
        } else {
            $Creatable = $JsonParameters.PSobject.Properties["creatable"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "enabled"))) { #optional property not found
            $Enabled = $null
        } else {
            $Enabled = $JsonParameters.PSobject.Properties["enabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "groupType"))) { #optional property not found
            $GroupType = $null
        } else {
            $GroupType = $JsonParameters.PSobject.Properties["groupType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "labels"))) { #optional property not found
            $Labels = $null
        } else {
            $Labels = $JsonParameters.PSobject.Properties["labels"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "environmentVariables"))) { #optional property not found
            $EnvironmentVariables = $null
        } else {
            $EnvironmentVariables = $JsonParameters.PSobject.Properties["environmentVariables"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "optionTypes"))) { #optional property not found
            $OptionTypes = $null
        } else {
            $OptionTypes = $JsonParameters.PSobject.Properties["optionTypes"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "actions"))) { #optional property not found
            $Actions = $null
        } else {
            $Actions = $JsonParameters.PSobject.Properties["actions"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "computeServers"))) { #optional property not found
            $ComputeServers = $null
        } else {
            $ComputeServers = $JsonParameters.PSobject.Properties["computeServers"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "installContainerRuntime"))) { #optional property not found
            $InstallContainerRuntime = $null
        } else {
            $InstallContainerRuntime = $JsonParameters.PSobject.Properties["installContainerRuntime"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "provisionType"))) { #optional property not found
            $ProvisionType = $null
        } else {
            $ProvisionType = $JsonParameters.PSobject.Properties["provisionType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "specTemplates"))) { #optional property not found
            $SpecTemplates = $null
        } else {
            $SpecTemplates = $JsonParameters.PSobject.Properties["specTemplates"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "taskSets"))) { #optional property not found
            $TaskSets = $null
        } else {
            $TaskSets = $JsonParameters.PSobject.Properties["taskSets"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "internalId" = ${InternalId}
            "serverCount" = ${ServerCount}
            "dateCreated" = ${DateCreated}
            "code" = ${Code}
            "lastUpdated" = ${LastUpdated}
            "hasAutoScale" = ${HasAutoScale}
            "memoryRequirement" = ${MemoryRequirement}
            "clusterVersion" = ${ClusterVersion}
            "computeVersion" = ${ComputeVersion}
            "hasSettings" = ${HasSettings}
            "sortOrder" = ${SortOrder}
            "hasConfig" = ${HasConfig}
            "name" = ${Name}
            "creatable" = ${Creatable}
            "enabled" = ${Enabled}
            "description" = ${Description}
            "groupType" = ${GroupType}
            "labels" = ${Labels}
            "environmentVariables" = ${EnvironmentVariables}
            "optionTypes" = ${OptionTypes}
            "actions" = ${Actions}
            "computeServers" = ${ComputeServers}
            "installContainerRuntime" = ${InstallContainerRuntime}
            "provisionType" = ${ProvisionType}
            "specTemplates" = ${SpecTemplates}
            "taskSets" = ${TaskSets}
            "type" = ${Type}
        }

        return $PSO
    }

}

