#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
No description available.
.PARAMETER Name
No description available.
.PARAMETER ExternalId
No description available.
.PARAMETER ExternalName
No description available.
.PARAMETER InternalId
No description available.
.PARAMETER ApprovedBy
No description available.
.PARAMETER DeniedBy
No description available.
.PARAMETER Status
No description available.
.PARAMETER ErrorMessage
No description available.
.PARAMETER DateCreated
No description available.
.PARAMETER LastUpdated
No description available.
.PARAMETER DateApproved
No description available.
.PARAMETER DateDenied
No description available.
.PARAMETER Approval
No description available.
.PARAMETER Reference
No description available.
.OUTPUTS

ApprovalItemApprovalItem<PSCustomObject>
#>

function Initialize-ApprovalItemApprovalItem {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ExternalId},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ExternalName},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${InternalId},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ApprovedBy},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DeniedBy},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Status},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ErrorMessage},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${DateCreated},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${LastUpdated},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${DateApproved},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${DateDenied},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Approval},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Reference}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ApprovalItemApprovalItem' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "name" = ${Name}
            "externalId" = ${ExternalId}
            "externalName" = ${ExternalName}
            "internalId" = ${InternalId}
            "approvedBy" = ${ApprovedBy}
            "deniedBy" = ${DeniedBy}
            "status" = ${Status}
            "errorMessage" = ${ErrorMessage}
            "dateCreated" = ${DateCreated}
            "lastUpdated" = ${LastUpdated}
            "dateApproved" = ${DateApproved}
            "dateDenied" = ${DateDenied}
            "approval" = ${Approval}
            "reference" = ${Reference}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ApprovalItemApprovalItem<PSCustomObject>

.DESCRIPTION

Convert from JSON to ApprovalItemApprovalItem<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ApprovalItemApprovalItem<PSCustomObject>
#>
function ConvertFrom-JsonToApprovalItemApprovalItem {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ApprovalItemApprovalItem' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ApprovalItemApprovalItem
        $AllProperties = ("id", "name", "externalId", "externalName", "internalId", "approvedBy", "deniedBy", "status", "errorMessage", "dateCreated", "lastUpdated", "dateApproved", "dateDenied", "approval", "reference")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "externalId"))) { #optional property not found
            $ExternalId = $null
        } else {
            $ExternalId = $JsonParameters.PSobject.Properties["externalId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "externalName"))) { #optional property not found
            $ExternalName = $null
        } else {
            $ExternalName = $JsonParameters.PSobject.Properties["externalName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "internalId"))) { #optional property not found
            $InternalId = $null
        } else {
            $InternalId = $JsonParameters.PSobject.Properties["internalId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "approvedBy"))) { #optional property not found
            $ApprovedBy = $null
        } else {
            $ApprovedBy = $JsonParameters.PSobject.Properties["approvedBy"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "deniedBy"))) { #optional property not found
            $DeniedBy = $null
        } else {
            $DeniedBy = $JsonParameters.PSobject.Properties["deniedBy"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "status"))) { #optional property not found
            $Status = $null
        } else {
            $Status = $JsonParameters.PSobject.Properties["status"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "errorMessage"))) { #optional property not found
            $ErrorMessage = $null
        } else {
            $ErrorMessage = $JsonParameters.PSobject.Properties["errorMessage"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dateCreated"))) { #optional property not found
            $DateCreated = $null
        } else {
            $DateCreated = $JsonParameters.PSobject.Properties["dateCreated"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lastUpdated"))) { #optional property not found
            $LastUpdated = $null
        } else {
            $LastUpdated = $JsonParameters.PSobject.Properties["lastUpdated"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dateApproved"))) { #optional property not found
            $DateApproved = $null
        } else {
            $DateApproved = $JsonParameters.PSobject.Properties["dateApproved"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dateDenied"))) { #optional property not found
            $DateDenied = $null
        } else {
            $DateDenied = $JsonParameters.PSobject.Properties["dateDenied"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "approval"))) { #optional property not found
            $Approval = $null
        } else {
            $Approval = $JsonParameters.PSobject.Properties["approval"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "reference"))) { #optional property not found
            $Reference = $null
        } else {
            $Reference = $JsonParameters.PSobject.Properties["reference"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "name" = ${Name}
            "externalId" = ${ExternalId}
            "externalName" = ${ExternalName}
            "internalId" = ${InternalId}
            "approvedBy" = ${ApprovedBy}
            "deniedBy" = ${DeniedBy}
            "status" = ${Status}
            "errorMessage" = ${ErrorMessage}
            "dateCreated" = ${DateCreated}
            "lastUpdated" = ${LastUpdated}
            "dateApproved" = ${DateApproved}
            "dateDenied" = ${DateDenied}
            "approval" = ${Approval}
            "reference" = ${Reference}
        }

        return $PSO
    }

}

