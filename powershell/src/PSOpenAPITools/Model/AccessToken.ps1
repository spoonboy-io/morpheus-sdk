#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER AccessToken
Token that grants API Access
.PARAMETER RefreshToken
Token that can request an new API access_token
.PARAMETER ExpiresIn
Epoch time when token expires
.PARAMETER TokenType
Token type granted
.PARAMETER Scope
Scope granted
.OUTPUTS

AccessToken<PSCustomObject>
#>

function Initialize-AccessToken {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AccessToken},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RefreshToken},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${ExpiresIn},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TokenType},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Scope}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => AccessToken' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "access_token" = ${AccessToken}
            "refresh_token" = ${RefreshToken}
            "expires_in" = ${ExpiresIn}
            "token_type" = ${TokenType}
            "scope" = ${Scope}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to AccessToken<PSCustomObject>

.DESCRIPTION

Convert from JSON to AccessToken<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

AccessToken<PSCustomObject>
#>
function ConvertFrom-JsonToAccessToken {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => AccessToken' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in AccessToken
        $AllProperties = ("access_token", "refresh_token", "expires_in", "token_type", "scope")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "access_token"))) { #optional property not found
            $AccessToken = $null
        } else {
            $AccessToken = $JsonParameters.PSobject.Properties["access_token"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "refresh_token"))) { #optional property not found
            $RefreshToken = $null
        } else {
            $RefreshToken = $JsonParameters.PSobject.Properties["refresh_token"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "expires_in"))) { #optional property not found
            $ExpiresIn = $null
        } else {
            $ExpiresIn = $JsonParameters.PSobject.Properties["expires_in"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "token_type"))) { #optional property not found
            $TokenType = $null
        } else {
            $TokenType = $JsonParameters.PSobject.Properties["token_type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "scope"))) { #optional property not found
            $Scope = $null
        } else {
            $Scope = $JsonParameters.PSobject.Properties["scope"].value
        }

        $PSO = [PSCustomObject]@{
            "access_token" = ${AccessToken}
            "refresh_token" = ${RefreshToken}
            "expires_in" = ${ExpiresIn}
            "token_type" = ${TokenType}
            "scope" = ${Scope}
        }

        return $PSO
    }

}

