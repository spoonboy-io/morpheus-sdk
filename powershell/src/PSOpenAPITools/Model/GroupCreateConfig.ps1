#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER DnsIntegrationId
Optional DNS Integration ID
.PARAMETER ConfigCmdbId
Optional CMDB Integration ID
.PARAMETER ConfigCmId
Optional Change Management Integration ID
.PARAMETER ServiceRegistryId
Optional Service Registry Integration ID
.PARAMETER ConfigManagementId
Optional Configuration Management Integration ID
.PARAMETER ConfigCmdbDiscovery
Enable or disable CMDB Discovery
.OUTPUTS

GroupCreateConfig<PSCustomObject>
#>

function Initialize-GroupCreateConfig {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DnsIntegrationId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ConfigCmdbId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ConfigCmId},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ServiceRegistryId},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ConfigManagementId},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${ConfigCmdbDiscovery}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => GroupCreateConfig' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "dnsIntegrationId" = ${DnsIntegrationId}
            "configCmdbId" = ${ConfigCmdbId}
            "configCmId" = ${ConfigCmId}
            "serviceRegistryId" = ${ServiceRegistryId}
            "configManagementId" = ${ConfigManagementId}
            "configCmdbDiscovery" = ${ConfigCmdbDiscovery}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to GroupCreateConfig<PSCustomObject>

.DESCRIPTION

Convert from JSON to GroupCreateConfig<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

GroupCreateConfig<PSCustomObject>
#>
function ConvertFrom-JsonToGroupCreateConfig {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => GroupCreateConfig' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in GroupCreateConfig
        $AllProperties = ("dnsIntegrationId", "configCmdbId", "configCmId", "serviceRegistryId", "configManagementId", "configCmdbDiscovery")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dnsIntegrationId"))) { #optional property not found
            $DnsIntegrationId = $null
        } else {
            $DnsIntegrationId = $JsonParameters.PSobject.Properties["dnsIntegrationId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "configCmdbId"))) { #optional property not found
            $ConfigCmdbId = $null
        } else {
            $ConfigCmdbId = $JsonParameters.PSobject.Properties["configCmdbId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "configCmId"))) { #optional property not found
            $ConfigCmId = $null
        } else {
            $ConfigCmId = $JsonParameters.PSobject.Properties["configCmId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "serviceRegistryId"))) { #optional property not found
            $ServiceRegistryId = $null
        } else {
            $ServiceRegistryId = $JsonParameters.PSobject.Properties["serviceRegistryId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "configManagementId"))) { #optional property not found
            $ConfigManagementId = $null
        } else {
            $ConfigManagementId = $JsonParameters.PSobject.Properties["configManagementId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "configCmdbDiscovery"))) { #optional property not found
            $ConfigCmdbDiscovery = $null
        } else {
            $ConfigCmdbDiscovery = $JsonParameters.PSobject.Properties["configCmdbDiscovery"].value
        }

        $PSO = [PSCustomObject]@{
            "dnsIntegrationId" = ${DnsIntegrationId}
            "configCmdbId" = ${ConfigCmdbId}
            "configCmId" = ${ConfigCmId}
            "serviceRegistryId" = ${ServiceRegistryId}
            "configManagementId" = ${ConfigManagementId}
            "configCmdbDiscovery" = ${ConfigCmdbDiscovery}
        }

        return $PSO
    }

}

