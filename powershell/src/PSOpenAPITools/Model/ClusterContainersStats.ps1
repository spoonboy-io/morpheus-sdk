#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Ts
No description available.
.PARAMETER Running
No description available.
.PARAMETER UserCpuUsage
No description available.
.PARAMETER SystemCpuUsage
No description available.
.PARAMETER UsedMemory
No description available.
.PARAMETER MaxMemory
No description available.
.PARAMETER CacheMemory
No description available.
.PARAMETER MaxStorage
No description available.
.PARAMETER UsedStorage
No description available.
.PARAMETER ReadIOPS
No description available.
.PARAMETER WriteIOPS
No description available.
.PARAMETER TotalIOPS
No description available.
.PARAMETER NetTxUsage
No description available.
.PARAMETER NetRxUsage
No description available.
.OUTPUTS

ClusterContainersStats<PSCustomObject>
#>

function Initialize-ClusterContainersStats {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${Ts},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Running},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${UserCpuUsage},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${SystemCpuUsage},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${UsedMemory},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${MaxMemory},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${CacheMemory},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${MaxStorage},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${UsedStorage},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${ReadIOPS},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${WriteIOPS},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${TotalIOPS},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${NetTxUsage},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${NetRxUsage}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ClusterContainersStats' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "ts" = ${Ts}
            "running" = ${Running}
            "userCpuUsage" = ${UserCpuUsage}
            "systemCpuUsage" = ${SystemCpuUsage}
            "usedMemory" = ${UsedMemory}
            "maxMemory" = ${MaxMemory}
            "cacheMemory" = ${CacheMemory}
            "maxStorage" = ${MaxStorage}
            "usedStorage" = ${UsedStorage}
            "readIOPS" = ${ReadIOPS}
            "writeIOPS" = ${WriteIOPS}
            "totalIOPS" = ${TotalIOPS}
            "netTxUsage" = ${NetTxUsage}
            "netRxUsage" = ${NetRxUsage}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ClusterContainersStats<PSCustomObject>

.DESCRIPTION

Convert from JSON to ClusterContainersStats<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ClusterContainersStats<PSCustomObject>
#>
function ConvertFrom-JsonToClusterContainersStats {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ClusterContainersStats' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ClusterContainersStats
        $AllProperties = ("ts", "running", "userCpuUsage", "systemCpuUsage", "usedMemory", "maxMemory", "cacheMemory", "maxStorage", "usedStorage", "readIOPS", "writeIOPS", "totalIOPS", "netTxUsage", "netRxUsage")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ts"))) { #optional property not found
            $Ts = $null
        } else {
            $Ts = $JsonParameters.PSobject.Properties["ts"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "running"))) { #optional property not found
            $Running = $null
        } else {
            $Running = $JsonParameters.PSobject.Properties["running"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "userCpuUsage"))) { #optional property not found
            $UserCpuUsage = $null
        } else {
            $UserCpuUsage = $JsonParameters.PSobject.Properties["userCpuUsage"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "systemCpuUsage"))) { #optional property not found
            $SystemCpuUsage = $null
        } else {
            $SystemCpuUsage = $JsonParameters.PSobject.Properties["systemCpuUsage"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "usedMemory"))) { #optional property not found
            $UsedMemory = $null
        } else {
            $UsedMemory = $JsonParameters.PSobject.Properties["usedMemory"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "maxMemory"))) { #optional property not found
            $MaxMemory = $null
        } else {
            $MaxMemory = $JsonParameters.PSobject.Properties["maxMemory"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cacheMemory"))) { #optional property not found
            $CacheMemory = $null
        } else {
            $CacheMemory = $JsonParameters.PSobject.Properties["cacheMemory"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "maxStorage"))) { #optional property not found
            $MaxStorage = $null
        } else {
            $MaxStorage = $JsonParameters.PSobject.Properties["maxStorage"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "usedStorage"))) { #optional property not found
            $UsedStorage = $null
        } else {
            $UsedStorage = $JsonParameters.PSobject.Properties["usedStorage"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "readIOPS"))) { #optional property not found
            $ReadIOPS = $null
        } else {
            $ReadIOPS = $JsonParameters.PSobject.Properties["readIOPS"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "writeIOPS"))) { #optional property not found
            $WriteIOPS = $null
        } else {
            $WriteIOPS = $JsonParameters.PSobject.Properties["writeIOPS"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "totalIOPS"))) { #optional property not found
            $TotalIOPS = $null
        } else {
            $TotalIOPS = $JsonParameters.PSobject.Properties["totalIOPS"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "netTxUsage"))) { #optional property not found
            $NetTxUsage = $null
        } else {
            $NetTxUsage = $JsonParameters.PSobject.Properties["netTxUsage"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "netRxUsage"))) { #optional property not found
            $NetRxUsage = $null
        } else {
            $NetRxUsage = $JsonParameters.PSobject.Properties["netRxUsage"].value
        }

        $PSO = [PSCustomObject]@{
            "ts" = ${Ts}
            "running" = ${Running}
            "userCpuUsage" = ${UserCpuUsage}
            "systemCpuUsage" = ${SystemCpuUsage}
            "usedMemory" = ${UsedMemory}
            "maxMemory" = ${MaxMemory}
            "cacheMemory" = ${CacheMemory}
            "maxStorage" = ${MaxStorage}
            "usedStorage" = ${UsedStorage}
            "readIOPS" = ${ReadIOPS}
            "writeIOPS" = ${WriteIOPS}
            "totalIOPS" = ${TotalIOPS}
            "netTxUsage" = ${NetTxUsage}
            "netRxUsage" = ${NetRxUsage}
        }

        return $PSO
    }

}

