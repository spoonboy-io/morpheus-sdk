#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Success
No description available.
.PARAMETER ConnectionList
No description available.
.PARAMETER BusyConnections
No description available.
.PARAMETER MaxConnections
No description available.
.PARAMETER MaxUsedConnections
No description available.
.PARAMETER UsedConnections
No description available.
.PARAMETER AbortedConnections
No description available.
.PARAMETER InnodbStatus
No description available.
.PARAMETER Stats
No description available.
.PARAMETER Scans
No description available.
.PARAMETER SlowQueries
No description available.
.PARAMETER InnodbStats
No description available.
.PARAMETER ScanPercent
No description available.
.PARAMETER Status
No description available.
.OUTPUTS

HealthDatabase<PSCustomObject>
#>

function Initialize-HealthDatabase {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Success},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${ConnectionList},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${BusyConnections},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${MaxConnections},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${MaxUsedConnections},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${UsedConnections},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${AbortedConnections},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${InnodbStatus},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Stats},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Scans},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${SlowQueries},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${InnodbStats},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${ScanPercent},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Status}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => HealthDatabase' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "success" = ${Success}
            "connectionList" = ${ConnectionList}
            "busyConnections" = ${BusyConnections}
            "maxConnections" = ${MaxConnections}
            "maxUsedConnections" = ${MaxUsedConnections}
            "usedConnections" = ${UsedConnections}
            "abortedConnections" = ${AbortedConnections}
            "innodbStatus" = ${InnodbStatus}
            "stats" = ${Stats}
            "scans" = ${Scans}
            "slowQueries" = ${SlowQueries}
            "innodbStats" = ${InnodbStats}
            "scanPercent" = ${ScanPercent}
            "status" = ${Status}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to HealthDatabase<PSCustomObject>

.DESCRIPTION

Convert from JSON to HealthDatabase<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

HealthDatabase<PSCustomObject>
#>
function ConvertFrom-JsonToHealthDatabase {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => HealthDatabase' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in HealthDatabase
        $AllProperties = ("success", "connectionList", "busyConnections", "maxConnections", "maxUsedConnections", "usedConnections", "abortedConnections", "innodbStatus", "stats", "scans", "slowQueries", "innodbStats", "scanPercent", "status")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "success"))) { #optional property not found
            $Success = $null
        } else {
            $Success = $JsonParameters.PSobject.Properties["success"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "connectionList"))) { #optional property not found
            $ConnectionList = $null
        } else {
            $ConnectionList = $JsonParameters.PSobject.Properties["connectionList"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "busyConnections"))) { #optional property not found
            $BusyConnections = $null
        } else {
            $BusyConnections = $JsonParameters.PSobject.Properties["busyConnections"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "maxConnections"))) { #optional property not found
            $MaxConnections = $null
        } else {
            $MaxConnections = $JsonParameters.PSobject.Properties["maxConnections"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "maxUsedConnections"))) { #optional property not found
            $MaxUsedConnections = $null
        } else {
            $MaxUsedConnections = $JsonParameters.PSobject.Properties["maxUsedConnections"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "usedConnections"))) { #optional property not found
            $UsedConnections = $null
        } else {
            $UsedConnections = $JsonParameters.PSobject.Properties["usedConnections"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "abortedConnections"))) { #optional property not found
            $AbortedConnections = $null
        } else {
            $AbortedConnections = $JsonParameters.PSobject.Properties["abortedConnections"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "innodbStatus"))) { #optional property not found
            $InnodbStatus = $null
        } else {
            $InnodbStatus = $JsonParameters.PSobject.Properties["innodbStatus"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "stats"))) { #optional property not found
            $Stats = $null
        } else {
            $Stats = $JsonParameters.PSobject.Properties["stats"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "scans"))) { #optional property not found
            $Scans = $null
        } else {
            $Scans = $JsonParameters.PSobject.Properties["scans"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "slowQueries"))) { #optional property not found
            $SlowQueries = $null
        } else {
            $SlowQueries = $JsonParameters.PSobject.Properties["slowQueries"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "innodbStats"))) { #optional property not found
            $InnodbStats = $null
        } else {
            $InnodbStats = $JsonParameters.PSobject.Properties["innodbStats"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "scanPercent"))) { #optional property not found
            $ScanPercent = $null
        } else {
            $ScanPercent = $JsonParameters.PSobject.Properties["scanPercent"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "status"))) { #optional property not found
            $Status = $null
        } else {
            $Status = $JsonParameters.PSobject.Properties["status"].value
        }

        $PSO = [PSCustomObject]@{
            "success" = ${Success}
            "connectionList" = ${ConnectionList}
            "busyConnections" = ${BusyConnections}
            "maxConnections" = ${MaxConnections}
            "maxUsedConnections" = ${MaxUsedConnections}
            "usedConnections" = ${UsedConnections}
            "abortedConnections" = ${AbortedConnections}
            "innodbStatus" = ${InnodbStatus}
            "stats" = ${Stats}
            "scans" = ${Scans}
            "slowQueries" = ${SlowQueries}
            "innodbStats" = ${InnodbStats}
            "scanPercent" = ${ScanPercent}
            "status" = ${Status}
        }

        return $PSO
    }

}

