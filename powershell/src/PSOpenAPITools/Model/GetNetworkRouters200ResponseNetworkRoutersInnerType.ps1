#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
No description available.
.PARAMETER Code
No description available.
.PARAMETER Name
No description available.
.PARAMETER Description
No description available.
.PARAMETER Enabled
No description available.
.PARAMETER Creatable
No description available.
.PARAMETER Selectable
No description available.
.PARAMETER HasFirewall
No description available.
.PARAMETER HasDhcp
No description available.
.PARAMETER HasRouting
No description available.
.PARAMETER HasNetworkServer
No description available.
.PARAMETER OptionTypes
No description available.
.PARAMETER RuleOptionTypes
No description available.
.OUTPUTS

GetNetworkRouters200ResponseNetworkRoutersInnerType<PSCustomObject>
#>

function Initialize-GetNetworkRouters200ResponseNetworkRoutersInnerType {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Code},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Enabled},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Creatable},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Selectable},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${HasFirewall},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${HasDhcp},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${HasRouting},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${HasNetworkServer},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${OptionTypes},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${RuleOptionTypes}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => GetNetworkRouters200ResponseNetworkRoutersInnerType' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "code" = ${Code}
            "name" = ${Name}
            "description" = ${Description}
            "enabled" = ${Enabled}
            "creatable" = ${Creatable}
            "selectable" = ${Selectable}
            "hasFirewall" = ${HasFirewall}
            "hasDhcp" = ${HasDhcp}
            "hasRouting" = ${HasRouting}
            "hasNetworkServer" = ${HasNetworkServer}
            "optionTypes" = ${OptionTypes}
            "ruleOptionTypes" = ${RuleOptionTypes}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to GetNetworkRouters200ResponseNetworkRoutersInnerType<PSCustomObject>

.DESCRIPTION

Convert from JSON to GetNetworkRouters200ResponseNetworkRoutersInnerType<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

GetNetworkRouters200ResponseNetworkRoutersInnerType<PSCustomObject>
#>
function ConvertFrom-JsonToGetNetworkRouters200ResponseNetworkRoutersInnerType {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => GetNetworkRouters200ResponseNetworkRoutersInnerType' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in GetNetworkRouters200ResponseNetworkRoutersInnerType
        $AllProperties = ("id", "code", "name", "description", "enabled", "creatable", "selectable", "hasFirewall", "hasDhcp", "hasRouting", "hasNetworkServer", "optionTypes", "ruleOptionTypes")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "code"))) { #optional property not found
            $Code = $null
        } else {
            $Code = $JsonParameters.PSobject.Properties["code"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "enabled"))) { #optional property not found
            $Enabled = $null
        } else {
            $Enabled = $JsonParameters.PSobject.Properties["enabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "creatable"))) { #optional property not found
            $Creatable = $null
        } else {
            $Creatable = $JsonParameters.PSobject.Properties["creatable"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "selectable"))) { #optional property not found
            $Selectable = $null
        } else {
            $Selectable = $JsonParameters.PSobject.Properties["selectable"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "hasFirewall"))) { #optional property not found
            $HasFirewall = $null
        } else {
            $HasFirewall = $JsonParameters.PSobject.Properties["hasFirewall"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "hasDhcp"))) { #optional property not found
            $HasDhcp = $null
        } else {
            $HasDhcp = $JsonParameters.PSobject.Properties["hasDhcp"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "hasRouting"))) { #optional property not found
            $HasRouting = $null
        } else {
            $HasRouting = $JsonParameters.PSobject.Properties["hasRouting"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "hasNetworkServer"))) { #optional property not found
            $HasNetworkServer = $null
        } else {
            $HasNetworkServer = $JsonParameters.PSobject.Properties["hasNetworkServer"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "optionTypes"))) { #optional property not found
            $OptionTypes = $null
        } else {
            $OptionTypes = $JsonParameters.PSobject.Properties["optionTypes"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ruleOptionTypes"))) { #optional property not found
            $RuleOptionTypes = $null
        } else {
            $RuleOptionTypes = $JsonParameters.PSobject.Properties["ruleOptionTypes"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "code" = ${Code}
            "name" = ${Name}
            "description" = ${Description}
            "enabled" = ${Enabled}
            "creatable" = ${Creatable}
            "selectable" = ${Selectable}
            "hasFirewall" = ${HasFirewall}
            "hasDhcp" = ${HasDhcp}
            "hasRouting" = ${HasRouting}
            "hasNetworkServer" = ${HasNetworkServer}
            "optionTypes" = ${OptionTypes}
            "ruleOptionTypes" = ${RuleOptionTypes}
        }

        return $PSO
    }

}

