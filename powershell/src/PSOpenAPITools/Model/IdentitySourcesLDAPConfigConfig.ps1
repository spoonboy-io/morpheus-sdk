#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Url
No description available.
.PARAMETER BindingUsername
No description available.
.PARAMETER BindingPassword
No description available.
.PARAMETER UserFqnExpression
No description available.
.PARAMETER RequiredRoleFqn
No description available.
.PARAMETER UsernameAttribute
No description available.
.PARAMETER CommonNameAttribute
No description available.
.PARAMETER FirstNameAttribute
No description available.
.PARAMETER LastNameAttribute
No description available.
.PARAMETER EmailAttribute
No description available.
.PARAMETER UniqueMemberAttribute
No description available.
.PARAMETER MemberOfAttribute
No description available.
.PARAMETER BindingPasswordHash
No description available.
.OUTPUTS

IdentitySourcesLDAPConfigConfig<PSCustomObject>
#>

function Initialize-IdentitySourcesLDAPConfigConfig {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Url},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${BindingUsername},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${BindingPassword},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${UserFqnExpression},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RequiredRoleFqn},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${UsernameAttribute},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CommonNameAttribute},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FirstNameAttribute},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${LastNameAttribute},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${EmailAttribute},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${UniqueMemberAttribute},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${MemberOfAttribute},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${BindingPasswordHash}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => IdentitySourcesLDAPConfigConfig' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "url" = ${Url}
            "bindingUsername" = ${BindingUsername}
            "bindingPassword" = ${BindingPassword}
            "userFqnExpression" = ${UserFqnExpression}
            "requiredRoleFqn" = ${RequiredRoleFqn}
            "usernameAttribute" = ${UsernameAttribute}
            "commonNameAttribute" = ${CommonNameAttribute}
            "firstNameAttribute" = ${FirstNameAttribute}
            "lastNameAttribute" = ${LastNameAttribute}
            "emailAttribute" = ${EmailAttribute}
            "uniqueMemberAttribute" = ${UniqueMemberAttribute}
            "memberOfAttribute" = ${MemberOfAttribute}
            "bindingPasswordHash" = ${BindingPasswordHash}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to IdentitySourcesLDAPConfigConfig<PSCustomObject>

.DESCRIPTION

Convert from JSON to IdentitySourcesLDAPConfigConfig<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

IdentitySourcesLDAPConfigConfig<PSCustomObject>
#>
function ConvertFrom-JsonToIdentitySourcesLDAPConfigConfig {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => IdentitySourcesLDAPConfigConfig' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in IdentitySourcesLDAPConfigConfig
        $AllProperties = ("url", "bindingUsername", "bindingPassword", "userFqnExpression", "requiredRoleFqn", "usernameAttribute", "commonNameAttribute", "firstNameAttribute", "lastNameAttribute", "emailAttribute", "uniqueMemberAttribute", "memberOfAttribute", "bindingPasswordHash")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "url"))) { #optional property not found
            $Url = $null
        } else {
            $Url = $JsonParameters.PSobject.Properties["url"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "bindingUsername"))) { #optional property not found
            $BindingUsername = $null
        } else {
            $BindingUsername = $JsonParameters.PSobject.Properties["bindingUsername"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "bindingPassword"))) { #optional property not found
            $BindingPassword = $null
        } else {
            $BindingPassword = $JsonParameters.PSobject.Properties["bindingPassword"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "userFqnExpression"))) { #optional property not found
            $UserFqnExpression = $null
        } else {
            $UserFqnExpression = $JsonParameters.PSobject.Properties["userFqnExpression"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "requiredRoleFqn"))) { #optional property not found
            $RequiredRoleFqn = $null
        } else {
            $RequiredRoleFqn = $JsonParameters.PSobject.Properties["requiredRoleFqn"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "usernameAttribute"))) { #optional property not found
            $UsernameAttribute = $null
        } else {
            $UsernameAttribute = $JsonParameters.PSobject.Properties["usernameAttribute"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "commonNameAttribute"))) { #optional property not found
            $CommonNameAttribute = $null
        } else {
            $CommonNameAttribute = $JsonParameters.PSobject.Properties["commonNameAttribute"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "firstNameAttribute"))) { #optional property not found
            $FirstNameAttribute = $null
        } else {
            $FirstNameAttribute = $JsonParameters.PSobject.Properties["firstNameAttribute"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lastNameAttribute"))) { #optional property not found
            $LastNameAttribute = $null
        } else {
            $LastNameAttribute = $JsonParameters.PSobject.Properties["lastNameAttribute"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "emailAttribute"))) { #optional property not found
            $EmailAttribute = $null
        } else {
            $EmailAttribute = $JsonParameters.PSobject.Properties["emailAttribute"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "uniqueMemberAttribute"))) { #optional property not found
            $UniqueMemberAttribute = $null
        } else {
            $UniqueMemberAttribute = $JsonParameters.PSobject.Properties["uniqueMemberAttribute"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "memberOfAttribute"))) { #optional property not found
            $MemberOfAttribute = $null
        } else {
            $MemberOfAttribute = $JsonParameters.PSobject.Properties["memberOfAttribute"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "bindingPasswordHash"))) { #optional property not found
            $BindingPasswordHash = $null
        } else {
            $BindingPasswordHash = $JsonParameters.PSobject.Properties["bindingPasswordHash"].value
        }

        $PSO = [PSCustomObject]@{
            "url" = ${Url}
            "bindingUsername" = ${BindingUsername}
            "bindingPassword" = ${BindingPassword}
            "userFqnExpression" = ${UserFqnExpression}
            "requiredRoleFqn" = ${RequiredRoleFqn}
            "usernameAttribute" = ${UsernameAttribute}
            "commonNameAttribute" = ${CommonNameAttribute}
            "firstNameAttribute" = ${FirstNameAttribute}
            "lastNameAttribute" = ${LastNameAttribute}
            "emailAttribute" = ${EmailAttribute}
            "uniqueMemberAttribute" = ${UniqueMemberAttribute}
            "memberOfAttribute" = ${MemberOfAttribute}
            "bindingPasswordHash" = ${BindingPasswordHash}
        }

        return $PSO
    }

}

