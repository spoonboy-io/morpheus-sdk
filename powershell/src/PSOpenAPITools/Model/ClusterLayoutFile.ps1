#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
No description available.
.PARAMETER SourceType
No description available.
.PARAMETER ContentRef
No description available.
.PARAMETER ContentPath
No description available.
.PARAMETER Repository
No description available.
.PARAMETER Content
No description available.
.OUTPUTS

ClusterLayoutFile<PSCustomObject>
#>

function Initialize-ClusterLayoutFile {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SourceType},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ContentRef},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ContentPath},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Repository},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Content}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ClusterLayoutFile' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "sourceType" = ${SourceType}
            "contentRef" = ${ContentRef}
            "contentPath" = ${ContentPath}
            "repository" = ${Repository}
            "content" = ${Content}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ClusterLayoutFile<PSCustomObject>

.DESCRIPTION

Convert from JSON to ClusterLayoutFile<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ClusterLayoutFile<PSCustomObject>
#>
function ConvertFrom-JsonToClusterLayoutFile {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ClusterLayoutFile' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ClusterLayoutFile
        $AllProperties = ("id", "sourceType", "contentRef", "contentPath", "repository", "content")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sourceType"))) { #optional property not found
            $SourceType = $null
        } else {
            $SourceType = $JsonParameters.PSobject.Properties["sourceType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "contentRef"))) { #optional property not found
            $ContentRef = $null
        } else {
            $ContentRef = $JsonParameters.PSobject.Properties["contentRef"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "contentPath"))) { #optional property not found
            $ContentPath = $null
        } else {
            $ContentPath = $JsonParameters.PSobject.Properties["contentPath"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "repository"))) { #optional property not found
            $Repository = $null
        } else {
            $Repository = $JsonParameters.PSobject.Properties["repository"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "content"))) { #optional property not found
            $Content = $null
        } else {
            $Content = $JsonParameters.PSobject.Properties["content"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "sourceType" = ${SourceType}
            "contentRef" = ${ContentRef}
            "contentPath" = ${ContentPath}
            "repository" = ${Repository}
            "content" = ${Content}
        }

        return $PSO
    }

}

