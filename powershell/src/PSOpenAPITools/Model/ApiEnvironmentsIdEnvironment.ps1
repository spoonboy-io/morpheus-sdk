#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Payload for updating a new environment

.PARAMETER Name
A unique name for the environment
.PARAMETER Description
A description of the environment
.PARAMETER Visibility
private or public
.PARAMETER SortOrder
Sort order
.PARAMETER Active
Set to false to deactivate the environment
.OUTPUTS

ApiEnvironmentsIdEnvironment<PSCustomObject>
#>

function Initialize-ApiEnvironmentsIdEnvironment {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Visibility} = "private",
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${SortOrder} = 0,
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Active}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ApiEnvironmentsIdEnvironment' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "description" = ${Description}
            "visibility" = ${Visibility}
            "sortOrder" = ${SortOrder}
            "active" = ${Active}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ApiEnvironmentsIdEnvironment<PSCustomObject>

.DESCRIPTION

Convert from JSON to ApiEnvironmentsIdEnvironment<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ApiEnvironmentsIdEnvironment<PSCustomObject>
#>
function ConvertFrom-JsonToApiEnvironmentsIdEnvironment {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ApiEnvironmentsIdEnvironment' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ApiEnvironmentsIdEnvironment
        $AllProperties = ("name", "description", "visibility", "sortOrder", "active")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "visibility"))) { #optional property not found
            $Visibility = $null
        } else {
            $Visibility = $JsonParameters.PSobject.Properties["visibility"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sortOrder"))) { #optional property not found
            $SortOrder = $null
        } else {
            $SortOrder = $JsonParameters.PSobject.Properties["sortOrder"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "active"))) { #optional property not found
            $Active = $null
        } else {
            $Active = $JsonParameters.PSobject.Properties["active"].value
        }

        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "description" = ${Description}
            "visibility" = ${Visibility}
            "sortOrder" = ${SortOrder}
            "active" = ${Active}
        }

        return $PSO
    }

}

