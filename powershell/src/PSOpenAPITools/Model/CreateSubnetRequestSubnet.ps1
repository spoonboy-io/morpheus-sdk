#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Type
No description available.
.PARAMETER Config
Configuration object. Settings vary by type.
.PARAMETER Tenants
Array of tenant account ID objects that are allowed access
.PARAMETER Visibility
private or public
.PARAMETER Labels
Array of label strings, can be used for filtering.
.OUTPUTS

CreateSubnetRequestSubnet<PSCustomObject>
#>

function Initialize-CreateSubnetRequestSubnet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Type},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Config},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Tenants},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Visibility} = "private",
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${Labels}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => CreateSubnetRequestSubnet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "type" = ${Type}
            "config" = ${Config}
            "tenants" = ${Tenants}
            "visibility" = ${Visibility}
            "labels" = ${Labels}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to CreateSubnetRequestSubnet<PSCustomObject>

.DESCRIPTION

Convert from JSON to CreateSubnetRequestSubnet<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

CreateSubnetRequestSubnet<PSCustomObject>
#>
function ConvertFrom-JsonToCreateSubnetRequestSubnet {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => CreateSubnetRequestSubnet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in CreateSubnetRequestSubnet
        $AllProperties = ("type", "config", "tenants", "visibility", "labels")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "config"))) { #optional property not found
            $Config = $null
        } else {
            $Config = $JsonParameters.PSobject.Properties["config"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tenants"))) { #optional property not found
            $Tenants = $null
        } else {
            $Tenants = $JsonParameters.PSobject.Properties["tenants"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "visibility"))) { #optional property not found
            $Visibility = $null
        } else {
            $Visibility = $JsonParameters.PSobject.Properties["visibility"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "labels"))) { #optional property not found
            $Labels = $null
        } else {
            $Labels = $JsonParameters.PSobject.Properties["labels"].value
        }

        $PSO = [PSCustomObject]@{
            "type" = ${Type}
            "config" = ${Config}
            "tenants" = ${Tenants}
            "visibility" = ${Visibility}
            "labels" = ${Labels}
        }

        return $PSO
    }

}

