#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Name
A name for the archive bucket. Must be globally unique.
.PARAMETER Description
A description for the archive bucket
.PARAMETER StorageProvider
No description available.
.PARAMETER Visibility
Visibility - Set to public to allow all tenants
.PARAMETER IsPublic
Public URL - Set to true to allow anonymous access
.PARAMETER Accounts
No description available.
.OUTPUTS

ArchiveBucketCreate<PSCustomObject>
#>

function Initialize-ArchiveBucketCreate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${StorageProvider},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("public", "private")]
        [String]
        ${Visibility} = "private",
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsPublic} = $false,
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Accounts}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ArchiveBucketCreate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "description" = ${Description}
            "storageProvider" = ${StorageProvider}
            "visibility" = ${Visibility}
            "isPublic" = ${IsPublic}
            "accounts" = ${Accounts}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ArchiveBucketCreate<PSCustomObject>

.DESCRIPTION

Convert from JSON to ArchiveBucketCreate<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ArchiveBucketCreate<PSCustomObject>
#>
function ConvertFrom-JsonToArchiveBucketCreate {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ArchiveBucketCreate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ArchiveBucketCreate
        $AllProperties = ("name", "description", "storageProvider", "visibility", "isPublic", "accounts")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "storageProvider"))) { #optional property not found
            $StorageProvider = $null
        } else {
            $StorageProvider = $JsonParameters.PSobject.Properties["storageProvider"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "visibility"))) { #optional property not found
            $Visibility = $null
        } else {
            $Visibility = $JsonParameters.PSobject.Properties["visibility"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "isPublic"))) { #optional property not found
            $IsPublic = $null
        } else {
            $IsPublic = $JsonParameters.PSobject.Properties["isPublic"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "accounts"))) { #optional property not found
            $Accounts = $null
        } else {
            $Accounts = $JsonParameters.PSobject.Properties["accounts"].value
        }

        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "description" = ${Description}
            "storageProvider" = ${StorageProvider}
            "visibility" = ${Visibility}
            "isPublic" = ${IsPublic}
            "accounts" = ${Accounts}
        }

        return $PSO
    }

}

