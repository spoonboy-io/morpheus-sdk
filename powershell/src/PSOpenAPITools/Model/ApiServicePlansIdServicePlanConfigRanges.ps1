#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER MinStorage
Custom min storage in GB (unless `storageSizeType` set to mb)
.PARAMETER MaxStorage
Custom max storage in GB (unless `storageSizeType` set to mb)
.PARAMETER MinMemory
Custom min memory in bytes
.PARAMETER MaxMemory
Custom max memory in bytes
.PARAMETER MinCores
Custom min cores
.PARAMETER MaxCores
Custom max cores
.PARAMETER MinSockets
Custom min sockets
.PARAMETER MaxSockets
Custom max sockets
.PARAMETER MinCoresPerSocket
Custom min cores allowed per socket
.PARAMETER MaxCoresPerSocket
Custom max cores allowed per socket
.OUTPUTS

ApiServicePlansIdServicePlanConfigRanges<PSCustomObject>
#>

function Initialize-ApiServicePlansIdServicePlanConfigRanges {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${MinStorage},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${MaxStorage},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${MinMemory},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${MaxMemory},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${MinCores},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${MaxCores},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${MinSockets},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${MaxSockets},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${MinCoresPerSocket},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${MaxCoresPerSocket}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ApiServicePlansIdServicePlanConfigRanges' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "minStorage" = ${MinStorage}
            "maxStorage" = ${MaxStorage}
            "minMemory" = ${MinMemory}
            "maxMemory" = ${MaxMemory}
            "minCores" = ${MinCores}
            "maxCores" = ${MaxCores}
            "minSockets" = ${MinSockets}
            "maxSockets" = ${MaxSockets}
            "minCoresPerSocket" = ${MinCoresPerSocket}
            "maxCoresPerSocket" = ${MaxCoresPerSocket}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ApiServicePlansIdServicePlanConfigRanges<PSCustomObject>

.DESCRIPTION

Convert from JSON to ApiServicePlansIdServicePlanConfigRanges<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ApiServicePlansIdServicePlanConfigRanges<PSCustomObject>
#>
function ConvertFrom-JsonToApiServicePlansIdServicePlanConfigRanges {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ApiServicePlansIdServicePlanConfigRanges' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ApiServicePlansIdServicePlanConfigRanges
        $AllProperties = ("minStorage", "maxStorage", "minMemory", "maxMemory", "minCores", "maxCores", "minSockets", "maxSockets", "minCoresPerSocket", "maxCoresPerSocket")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "minStorage"))) { #optional property not found
            $MinStorage = $null
        } else {
            $MinStorage = $JsonParameters.PSobject.Properties["minStorage"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "maxStorage"))) { #optional property not found
            $MaxStorage = $null
        } else {
            $MaxStorage = $JsonParameters.PSobject.Properties["maxStorage"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "minMemory"))) { #optional property not found
            $MinMemory = $null
        } else {
            $MinMemory = $JsonParameters.PSobject.Properties["minMemory"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "maxMemory"))) { #optional property not found
            $MaxMemory = $null
        } else {
            $MaxMemory = $JsonParameters.PSobject.Properties["maxMemory"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "minCores"))) { #optional property not found
            $MinCores = $null
        } else {
            $MinCores = $JsonParameters.PSobject.Properties["minCores"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "maxCores"))) { #optional property not found
            $MaxCores = $null
        } else {
            $MaxCores = $JsonParameters.PSobject.Properties["maxCores"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "minSockets"))) { #optional property not found
            $MinSockets = $null
        } else {
            $MinSockets = $JsonParameters.PSobject.Properties["minSockets"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "maxSockets"))) { #optional property not found
            $MaxSockets = $null
        } else {
            $MaxSockets = $JsonParameters.PSobject.Properties["maxSockets"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "minCoresPerSocket"))) { #optional property not found
            $MinCoresPerSocket = $null
        } else {
            $MinCoresPerSocket = $JsonParameters.PSobject.Properties["minCoresPerSocket"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "maxCoresPerSocket"))) { #optional property not found
            $MaxCoresPerSocket = $null
        } else {
            $MaxCoresPerSocket = $JsonParameters.PSobject.Properties["maxCoresPerSocket"].value
        }

        $PSO = [PSCustomObject]@{
            "minStorage" = ${MinStorage}
            "maxStorage" = ${MaxStorage}
            "minMemory" = ${MinMemory}
            "maxMemory" = ${MaxMemory}
            "minCores" = ${MinCores}
            "maxCores" = ${MaxCores}
            "minSockets" = ${MinSockets}
            "maxSockets" = ${MaxSockets}
            "minCoresPerSocket" = ${MinCoresPerSocket}
            "maxCoresPerSocket" = ${MaxCoresPerSocket}
        }

        return $PSO
    }

}

