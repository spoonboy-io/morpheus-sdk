#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Name
Cluster layout name
.PARAMETER Description
Cluster layout description
.PARAMETER Labels
Array of label strings, can be used for filtering.
.PARAMETER ComputeVersion
Version of the cluster layout
.PARAMETER Creatable
Can be used to enable / disable the creatability of the cluster layout.
.PARAMETER HasAutoScale
Can be used to enable / disable the horizontal scaling.
.PARAMETER InstallContainerRuntime
Install Docker (container runtime).
.PARAMETER MemoryRequirement
Memory requirement in bytes
.PARAMETER GroupType
No description available.
.PARAMETER ProvisionType
No description available.
.PARAMETER OptionTypes
Array of cluster layout option types
.PARAMETER TaskSets
Array of cluster layout task sets
.PARAMETER EnvironmentVariables
Array of cluster layout env variables
.PARAMETER Masters
Array of cluster layout master nodes
.PARAMETER Workers
Array of cluster layout worker nodes
.OUTPUTS

ClusterLayoutUpdate<PSCustomObject>
#>

function Initialize-ClusterLayoutUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${Labels},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ComputeVersion},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Creatable} = $true,
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${HasAutoScale} = $false,
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${InstallContainerRuntime} = $false,
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${MemoryRequirement},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${GroupType},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${ProvisionType},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${OptionTypes},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${TaskSets},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${EnvironmentVariables},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Masters},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Workers}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ClusterLayoutUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "description" = ${Description}
            "labels" = ${Labels}
            "computeVersion" = ${ComputeVersion}
            "creatable" = ${Creatable}
            "hasAutoScale" = ${HasAutoScale}
            "installContainerRuntime" = ${InstallContainerRuntime}
            "memoryRequirement" = ${MemoryRequirement}
            "groupType" = ${GroupType}
            "provisionType" = ${ProvisionType}
            "optionTypes" = ${OptionTypes}
            "taskSets" = ${TaskSets}
            "environmentVariables" = ${EnvironmentVariables}
            "masters" = ${Masters}
            "workers" = ${Workers}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ClusterLayoutUpdate<PSCustomObject>

.DESCRIPTION

Convert from JSON to ClusterLayoutUpdate<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ClusterLayoutUpdate<PSCustomObject>
#>
function ConvertFrom-JsonToClusterLayoutUpdate {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ClusterLayoutUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ClusterLayoutUpdate
        $AllProperties = ("name", "description", "labels", "computeVersion", "creatable", "hasAutoScale", "installContainerRuntime", "memoryRequirement", "groupType", "provisionType", "optionTypes", "taskSets", "environmentVariables", "masters", "workers")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "labels"))) { #optional property not found
            $Labels = $null
        } else {
            $Labels = $JsonParameters.PSobject.Properties["labels"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "computeVersion"))) { #optional property not found
            $ComputeVersion = $null
        } else {
            $ComputeVersion = $JsonParameters.PSobject.Properties["computeVersion"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "creatable"))) { #optional property not found
            $Creatable = $null
        } else {
            $Creatable = $JsonParameters.PSobject.Properties["creatable"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "hasAutoScale"))) { #optional property not found
            $HasAutoScale = $null
        } else {
            $HasAutoScale = $JsonParameters.PSobject.Properties["hasAutoScale"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "installContainerRuntime"))) { #optional property not found
            $InstallContainerRuntime = $null
        } else {
            $InstallContainerRuntime = $JsonParameters.PSobject.Properties["installContainerRuntime"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "memoryRequirement"))) { #optional property not found
            $MemoryRequirement = $null
        } else {
            $MemoryRequirement = $JsonParameters.PSobject.Properties["memoryRequirement"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "groupType"))) { #optional property not found
            $GroupType = $null
        } else {
            $GroupType = $JsonParameters.PSobject.Properties["groupType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "provisionType"))) { #optional property not found
            $ProvisionType = $null
        } else {
            $ProvisionType = $JsonParameters.PSobject.Properties["provisionType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "optionTypes"))) { #optional property not found
            $OptionTypes = $null
        } else {
            $OptionTypes = $JsonParameters.PSobject.Properties["optionTypes"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "taskSets"))) { #optional property not found
            $TaskSets = $null
        } else {
            $TaskSets = $JsonParameters.PSobject.Properties["taskSets"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "environmentVariables"))) { #optional property not found
            $EnvironmentVariables = $null
        } else {
            $EnvironmentVariables = $JsonParameters.PSobject.Properties["environmentVariables"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "masters"))) { #optional property not found
            $Masters = $null
        } else {
            $Masters = $JsonParameters.PSobject.Properties["masters"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "workers"))) { #optional property not found
            $Workers = $null
        } else {
            $Workers = $JsonParameters.PSobject.Properties["workers"].value
        }

        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "description" = ${Description}
            "labels" = ${Labels}
            "computeVersion" = ${ComputeVersion}
            "creatable" = ${Creatable}
            "hasAutoScale" = ${HasAutoScale}
            "installContainerRuntime" = ${InstallContainerRuntime}
            "memoryRequirement" = ${MemoryRequirement}
            "groupType" = ${GroupType}
            "provisionType" = ${ProvisionType}
            "optionTypes" = ${OptionTypes}
            "taskSets" = ${TaskSets}
            "environmentVariables" = ${EnvironmentVariables}
            "masters" = ${Masters}
            "workers" = ${Workers}
        }

        return $PSO
    }

}

