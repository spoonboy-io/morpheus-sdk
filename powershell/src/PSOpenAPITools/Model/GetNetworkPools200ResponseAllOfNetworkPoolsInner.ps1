#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
No description available.
.PARAMETER Type
No description available.
.PARAMETER Account
No description available.
.PARAMETER Category
No description available.
.PARAMETER Code
No description available.
.PARAMETER Name
No description available.
.PARAMETER DisplayName
No description available.
.PARAMETER InternalId
No description available.
.PARAMETER ExternalId
No description available.
.PARAMETER DnsDomain
No description available.
.PARAMETER DnsSearchPath
No description available.
.PARAMETER HostPrefix
No description available.
.PARAMETER HttpProxy
No description available.
.PARAMETER DnsServers
No description available.
.PARAMETER DnsSuffixList
No description available.
.PARAMETER DhcpServer
No description available.
.PARAMETER DhcpIp
No description available.
.PARAMETER Gateway
No description available.
.PARAMETER Netmask
No description available.
.PARAMETER SubnetAddress
No description available.
.PARAMETER IpCount
No description available.
.PARAMETER FreeCount
No description available.
.PARAMETER PoolEnabled
No description available.
.PARAMETER TftpServer
No description available.
.PARAMETER BootFile
No description available.
.PARAMETER RefType
No description available.
.PARAMETER RefId
No description available.
.PARAMETER ParentType
No description available.
.PARAMETER ParentId
No description available.
.PARAMETER PoolGroup
No description available.
.PARAMETER IpRanges
No description available.
.OUTPUTS

GetNetworkPools200ResponseAllOfNetworkPoolsInner<PSCustomObject>
#>

function Initialize-GetNetworkPools200ResponseAllOfNetworkPoolsInner {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Type},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Account},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Category},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Code},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DisplayName},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${InternalId},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ExternalId},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DnsDomain},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DnsSearchPath},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${HostPrefix},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${HttpProxy},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${DnsServers},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${DnsSuffixList},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${DhcpServer},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DhcpIp},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Gateway},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Netmask},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SubnetAddress},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${IpCount},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${FreeCount},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${PoolEnabled},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TftpServer},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${BootFile},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RefType},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RefId},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ParentType},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ParentId},
        [Parameter(Position = 29, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PoolGroup},
        [Parameter(Position = 30, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${IpRanges}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => GetNetworkPools200ResponseAllOfNetworkPoolsInner' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "type" = ${Type}
            "account" = ${Account}
            "category" = ${Category}
            "code" = ${Code}
            "name" = ${Name}
            "displayName" = ${DisplayName}
            "internalId" = ${InternalId}
            "externalId" = ${ExternalId}
            "dnsDomain" = ${DnsDomain}
            "dnsSearchPath" = ${DnsSearchPath}
            "hostPrefix" = ${HostPrefix}
            "httpProxy" = ${HttpProxy}
            "dnsServers" = ${DnsServers}
            "dnsSuffixList" = ${DnsSuffixList}
            "dhcpServer" = ${DhcpServer}
            "dhcpIp" = ${DhcpIp}
            "gateway" = ${Gateway}
            "netmask" = ${Netmask}
            "subnetAddress" = ${SubnetAddress}
            "ipCount" = ${IpCount}
            "freeCount" = ${FreeCount}
            "poolEnabled" = ${PoolEnabled}
            "tftpServer" = ${TftpServer}
            "bootFile" = ${BootFile}
            "refType" = ${RefType}
            "refId" = ${RefId}
            "parentType" = ${ParentType}
            "parentId" = ${ParentId}
            "poolGroup" = ${PoolGroup}
            "ipRanges" = ${IpRanges}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to GetNetworkPools200ResponseAllOfNetworkPoolsInner<PSCustomObject>

.DESCRIPTION

Convert from JSON to GetNetworkPools200ResponseAllOfNetworkPoolsInner<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

GetNetworkPools200ResponseAllOfNetworkPoolsInner<PSCustomObject>
#>
function ConvertFrom-JsonToGetNetworkPools200ResponseAllOfNetworkPoolsInner {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => GetNetworkPools200ResponseAllOfNetworkPoolsInner' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in GetNetworkPools200ResponseAllOfNetworkPoolsInner
        $AllProperties = ("id", "type", "account", "category", "code", "name", "displayName", "internalId", "externalId", "dnsDomain", "dnsSearchPath", "hostPrefix", "httpProxy", "dnsServers", "dnsSuffixList", "dhcpServer", "dhcpIp", "gateway", "netmask", "subnetAddress", "ipCount", "freeCount", "poolEnabled", "tftpServer", "bootFile", "refType", "refId", "parentType", "parentId", "poolGroup", "ipRanges")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "account"))) { #optional property not found
            $Account = $null
        } else {
            $Account = $JsonParameters.PSobject.Properties["account"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "category"))) { #optional property not found
            $Category = $null
        } else {
            $Category = $JsonParameters.PSobject.Properties["category"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "code"))) { #optional property not found
            $Code = $null
        } else {
            $Code = $JsonParameters.PSobject.Properties["code"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "displayName"))) { #optional property not found
            $DisplayName = $null
        } else {
            $DisplayName = $JsonParameters.PSobject.Properties["displayName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "internalId"))) { #optional property not found
            $InternalId = $null
        } else {
            $InternalId = $JsonParameters.PSobject.Properties["internalId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "externalId"))) { #optional property not found
            $ExternalId = $null
        } else {
            $ExternalId = $JsonParameters.PSobject.Properties["externalId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dnsDomain"))) { #optional property not found
            $DnsDomain = $null
        } else {
            $DnsDomain = $JsonParameters.PSobject.Properties["dnsDomain"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dnsSearchPath"))) { #optional property not found
            $DnsSearchPath = $null
        } else {
            $DnsSearchPath = $JsonParameters.PSobject.Properties["dnsSearchPath"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "hostPrefix"))) { #optional property not found
            $HostPrefix = $null
        } else {
            $HostPrefix = $JsonParameters.PSobject.Properties["hostPrefix"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "httpProxy"))) { #optional property not found
            $HttpProxy = $null
        } else {
            $HttpProxy = $JsonParameters.PSobject.Properties["httpProxy"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dnsServers"))) { #optional property not found
            $DnsServers = $null
        } else {
            $DnsServers = $JsonParameters.PSobject.Properties["dnsServers"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dnsSuffixList"))) { #optional property not found
            $DnsSuffixList = $null
        } else {
            $DnsSuffixList = $JsonParameters.PSobject.Properties["dnsSuffixList"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dhcpServer"))) { #optional property not found
            $DhcpServer = $null
        } else {
            $DhcpServer = $JsonParameters.PSobject.Properties["dhcpServer"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dhcpIp"))) { #optional property not found
            $DhcpIp = $null
        } else {
            $DhcpIp = $JsonParameters.PSobject.Properties["dhcpIp"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "gateway"))) { #optional property not found
            $Gateway = $null
        } else {
            $Gateway = $JsonParameters.PSobject.Properties["gateway"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "netmask"))) { #optional property not found
            $Netmask = $null
        } else {
            $Netmask = $JsonParameters.PSobject.Properties["netmask"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "subnetAddress"))) { #optional property not found
            $SubnetAddress = $null
        } else {
            $SubnetAddress = $JsonParameters.PSobject.Properties["subnetAddress"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ipCount"))) { #optional property not found
            $IpCount = $null
        } else {
            $IpCount = $JsonParameters.PSobject.Properties["ipCount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "freeCount"))) { #optional property not found
            $FreeCount = $null
        } else {
            $FreeCount = $JsonParameters.PSobject.Properties["freeCount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "poolEnabled"))) { #optional property not found
            $PoolEnabled = $null
        } else {
            $PoolEnabled = $JsonParameters.PSobject.Properties["poolEnabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tftpServer"))) { #optional property not found
            $TftpServer = $null
        } else {
            $TftpServer = $JsonParameters.PSobject.Properties["tftpServer"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "bootFile"))) { #optional property not found
            $BootFile = $null
        } else {
            $BootFile = $JsonParameters.PSobject.Properties["bootFile"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "refType"))) { #optional property not found
            $RefType = $null
        } else {
            $RefType = $JsonParameters.PSobject.Properties["refType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "refId"))) { #optional property not found
            $RefId = $null
        } else {
            $RefId = $JsonParameters.PSobject.Properties["refId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "parentType"))) { #optional property not found
            $ParentType = $null
        } else {
            $ParentType = $JsonParameters.PSobject.Properties["parentType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "parentId"))) { #optional property not found
            $ParentId = $null
        } else {
            $ParentId = $JsonParameters.PSobject.Properties["parentId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "poolGroup"))) { #optional property not found
            $PoolGroup = $null
        } else {
            $PoolGroup = $JsonParameters.PSobject.Properties["poolGroup"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ipRanges"))) { #optional property not found
            $IpRanges = $null
        } else {
            $IpRanges = $JsonParameters.PSobject.Properties["ipRanges"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "type" = ${Type}
            "account" = ${Account}
            "category" = ${Category}
            "code" = ${Code}
            "name" = ${Name}
            "displayName" = ${DisplayName}
            "internalId" = ${InternalId}
            "externalId" = ${ExternalId}
            "dnsDomain" = ${DnsDomain}
            "dnsSearchPath" = ${DnsSearchPath}
            "hostPrefix" = ${HostPrefix}
            "httpProxy" = ${HttpProxy}
            "dnsServers" = ${DnsServers}
            "dnsSuffixList" = ${DnsSuffixList}
            "dhcpServer" = ${DhcpServer}
            "dhcpIp" = ${DhcpIp}
            "gateway" = ${Gateway}
            "netmask" = ${Netmask}
            "subnetAddress" = ${SubnetAddress}
            "ipCount" = ${IpCount}
            "freeCount" = ${FreeCount}
            "poolEnabled" = ${PoolEnabled}
            "tftpServer" = ${TftpServer}
            "bootFile" = ${BootFile}
            "refType" = ${RefType}
            "refId" = ${RefId}
            "parentType" = ${ParentType}
            "parentId" = ${ParentId}
            "poolGroup" = ${PoolGroup}
            "ipRanges" = ${IpRanges}
        }

        return $PSO
    }

}

