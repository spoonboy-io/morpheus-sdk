#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Success
No description available.
.PARAMETER StatusMessage
No description available.
.PARAMETER ApplianceUrl
No description available.
.PARAMETER BuildVersion
No description available.
.PARAMETER SetupNeeded
No description available.
.PARAMETER Date
No description available.
.PARAMETER Cpu
No description available.
.PARAMETER Memory
No description available.
.PARAMETER Threads
No description available.
.PARAMETER Database
No description available.
.PARAMETER Elastic
No description available.
.PARAMETER Rabbit
No description available.
.OUTPUTS

Health<PSCustomObject>
#>

function Initialize-Health {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Success},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${StatusMessage},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ApplianceUrl},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${BuildVersion},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${SetupNeeded},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${Date},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Cpu},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Memory},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Threads},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Database},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Elastic},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Rabbit}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => Health' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "success" = ${Success}
            "statusMessage" = ${StatusMessage}
            "applianceUrl" = ${ApplianceUrl}
            "buildVersion" = ${BuildVersion}
            "setupNeeded" = ${SetupNeeded}
            "date" = ${Date}
            "cpu" = ${Cpu}
            "memory" = ${Memory}
            "threads" = ${Threads}
            "database" = ${Database}
            "elastic" = ${Elastic}
            "rabbit" = ${Rabbit}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to Health<PSCustomObject>

.DESCRIPTION

Convert from JSON to Health<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

Health<PSCustomObject>
#>
function ConvertFrom-JsonToHealth {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => Health' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in Health
        $AllProperties = ("success", "statusMessage", "applianceUrl", "buildVersion", "setupNeeded", "date", "cpu", "memory", "threads", "database", "elastic", "rabbit")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "success"))) { #optional property not found
            $Success = $null
        } else {
            $Success = $JsonParameters.PSobject.Properties["success"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "statusMessage"))) { #optional property not found
            $StatusMessage = $null
        } else {
            $StatusMessage = $JsonParameters.PSobject.Properties["statusMessage"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "applianceUrl"))) { #optional property not found
            $ApplianceUrl = $null
        } else {
            $ApplianceUrl = $JsonParameters.PSobject.Properties["applianceUrl"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "buildVersion"))) { #optional property not found
            $BuildVersion = $null
        } else {
            $BuildVersion = $JsonParameters.PSobject.Properties["buildVersion"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "setupNeeded"))) { #optional property not found
            $SetupNeeded = $null
        } else {
            $SetupNeeded = $JsonParameters.PSobject.Properties["setupNeeded"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "date"))) { #optional property not found
            $Date = $null
        } else {
            $Date = $JsonParameters.PSobject.Properties["date"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cpu"))) { #optional property not found
            $Cpu = $null
        } else {
            $Cpu = $JsonParameters.PSobject.Properties["cpu"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "memory"))) { #optional property not found
            $Memory = $null
        } else {
            $Memory = $JsonParameters.PSobject.Properties["memory"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "threads"))) { #optional property not found
            $Threads = $null
        } else {
            $Threads = $JsonParameters.PSobject.Properties["threads"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "database"))) { #optional property not found
            $Database = $null
        } else {
            $Database = $JsonParameters.PSobject.Properties["database"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "elastic"))) { #optional property not found
            $Elastic = $null
        } else {
            $Elastic = $JsonParameters.PSobject.Properties["elastic"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "rabbit"))) { #optional property not found
            $Rabbit = $null
        } else {
            $Rabbit = $JsonParameters.PSobject.Properties["rabbit"].value
        }

        $PSO = [PSCustomObject]@{
            "success" = ${Success}
            "statusMessage" = ${StatusMessage}
            "applianceUrl" = ${ApplianceUrl}
            "buildVersion" = ${BuildVersion}
            "setupNeeded" = ${SetupNeeded}
            "date" = ${Date}
            "cpu" = ${Cpu}
            "memory" = ${Memory}
            "threads" = ${Threads}
            "database" = ${Database}
            "elastic" = ${Elastic}
            "rabbit" = ${Rabbit}
        }

        return $PSO
    }

}

