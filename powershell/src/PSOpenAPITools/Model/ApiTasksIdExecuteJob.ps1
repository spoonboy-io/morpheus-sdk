#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Name
A name for the execution job. Can be used to find execution results with `/api/processes?name=`
.PARAMETER TargetType
The target context for task execution. This is required for tasks with `executeTarget` set to `resource`.
.PARAMETER Instances
Array of Instance IDs. Only applicable if `targetType` is instance.
.PARAMETER Servers
Array of Server IDs. Only applicable if `targetType` is `server`.
.PARAMETER InstanceLabel
Instance Label. Only applicable if `targetType` is `instance-label`.
.PARAMETER ServerLabel
Server Label. Only applicable if `targetType` is `server-label`.
.PARAMETER CustomOptions
Map of options to be used as values in the task. These correspond to option types.
.PARAMETER CustomConfig
String of custom configuration values as JSON.
.OUTPUTS

ApiTasksIdExecuteJob<PSCustomObject>
#>

function Initialize-ApiTasksIdExecuteJob {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("appliance", "instance", "instance-label", "server", "server-label")]
        [String]
        ${TargetType},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [Int64[]]
        ${Instances},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [Int64[]]
        ${Servers},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${InstanceLabel},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ServerLabel},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${CustomOptions},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CustomConfig}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ApiTasksIdExecuteJob' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "targetType" = ${TargetType}
            "instances" = ${Instances}
            "servers" = ${Servers}
            "instanceLabel" = ${InstanceLabel}
            "serverLabel" = ${ServerLabel}
            "customOptions" = ${CustomOptions}
            "customConfig" = ${CustomConfig}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ApiTasksIdExecuteJob<PSCustomObject>

.DESCRIPTION

Convert from JSON to ApiTasksIdExecuteJob<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ApiTasksIdExecuteJob<PSCustomObject>
#>
function ConvertFrom-JsonToApiTasksIdExecuteJob {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ApiTasksIdExecuteJob' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ApiTasksIdExecuteJob
        $AllProperties = ("name", "targetType", "instances", "servers", "instanceLabel", "serverLabel", "customOptions", "customConfig")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "targetType"))) { #optional property not found
            $TargetType = $null
        } else {
            $TargetType = $JsonParameters.PSobject.Properties["targetType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "instances"))) { #optional property not found
            $Instances = $null
        } else {
            $Instances = $JsonParameters.PSobject.Properties["instances"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "servers"))) { #optional property not found
            $Servers = $null
        } else {
            $Servers = $JsonParameters.PSobject.Properties["servers"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "instanceLabel"))) { #optional property not found
            $InstanceLabel = $null
        } else {
            $InstanceLabel = $JsonParameters.PSobject.Properties["instanceLabel"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "serverLabel"))) { #optional property not found
            $ServerLabel = $null
        } else {
            $ServerLabel = $JsonParameters.PSobject.Properties["serverLabel"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "customOptions"))) { #optional property not found
            $CustomOptions = $null
        } else {
            $CustomOptions = $JsonParameters.PSobject.Properties["customOptions"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "customConfig"))) { #optional property not found
            $CustomConfig = $null
        } else {
            $CustomConfig = $JsonParameters.PSobject.Properties["customConfig"].value
        }

        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "targetType" = ${TargetType}
            "instances" = ${Instances}
            "servers" = ${Servers}
            "instanceLabel" = ${InstanceLabel}
            "serverLabel" = ${ServerLabel}
            "customOptions" = ${CustomOptions}
            "customConfig" = ${CustomConfig}
        }

        return $PSO
    }

}

