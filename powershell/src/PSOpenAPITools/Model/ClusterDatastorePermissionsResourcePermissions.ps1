#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER AllGroups
No description available.
.PARAMETER DefaultStore
No description available.
.PARAMETER AllPlans
No description available.
.PARAMETER DefaultTarget
No description available.
.PARAMETER MorpheusResourceType
No description available.
.PARAMETER MorpheusResourceId
No description available.
.PARAMETER CanManage
No description available.
.PARAMETER All
No description available.
.PARAMETER Account
No description available.
.PARAMETER Sites
No description available.
.PARAMETER Plans
No description available.
.OUTPUTS

ClusterDatastorePermissionsResourcePermissions<PSCustomObject>
#>

function Initialize-ClusterDatastorePermissionsResourcePermissions {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${AllGroups},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${DefaultStore},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${AllPlans},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${DefaultTarget},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${MorpheusResourceType},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${MorpheusResourceId},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${CanManage},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${All},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Account},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Sites},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Plans}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ClusterDatastorePermissionsResourcePermissions' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "allGroups" = ${AllGroups}
            "defaultStore" = ${DefaultStore}
            "allPlans" = ${AllPlans}
            "defaultTarget" = ${DefaultTarget}
            "morpheusResourceType" = ${MorpheusResourceType}
            "morpheusResourceId" = ${MorpheusResourceId}
            "canManage" = ${CanManage}
            "all" = ${All}
            "account" = ${Account}
            "sites" = ${Sites}
            "plans" = ${Plans}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ClusterDatastorePermissionsResourcePermissions<PSCustomObject>

.DESCRIPTION

Convert from JSON to ClusterDatastorePermissionsResourcePermissions<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ClusterDatastorePermissionsResourcePermissions<PSCustomObject>
#>
function ConvertFrom-JsonToClusterDatastorePermissionsResourcePermissions {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ClusterDatastorePermissionsResourcePermissions' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ClusterDatastorePermissionsResourcePermissions
        $AllProperties = ("allGroups", "defaultStore", "allPlans", "defaultTarget", "morpheusResourceType", "morpheusResourceId", "canManage", "all", "account", "sites", "plans")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "allGroups"))) { #optional property not found
            $AllGroups = $null
        } else {
            $AllGroups = $JsonParameters.PSobject.Properties["allGroups"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "defaultStore"))) { #optional property not found
            $DefaultStore = $null
        } else {
            $DefaultStore = $JsonParameters.PSobject.Properties["defaultStore"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "allPlans"))) { #optional property not found
            $AllPlans = $null
        } else {
            $AllPlans = $JsonParameters.PSobject.Properties["allPlans"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "defaultTarget"))) { #optional property not found
            $DefaultTarget = $null
        } else {
            $DefaultTarget = $JsonParameters.PSobject.Properties["defaultTarget"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "morpheusResourceType"))) { #optional property not found
            $MorpheusResourceType = $null
        } else {
            $MorpheusResourceType = $JsonParameters.PSobject.Properties["morpheusResourceType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "morpheusResourceId"))) { #optional property not found
            $MorpheusResourceId = $null
        } else {
            $MorpheusResourceId = $JsonParameters.PSobject.Properties["morpheusResourceId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "canManage"))) { #optional property not found
            $CanManage = $null
        } else {
            $CanManage = $JsonParameters.PSobject.Properties["canManage"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "all"))) { #optional property not found
            $All = $null
        } else {
            $All = $JsonParameters.PSobject.Properties["all"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "account"))) { #optional property not found
            $Account = $null
        } else {
            $Account = $JsonParameters.PSobject.Properties["account"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sites"))) { #optional property not found
            $Sites = $null
        } else {
            $Sites = $JsonParameters.PSobject.Properties["sites"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "plans"))) { #optional property not found
            $Plans = $null
        } else {
            $Plans = $JsonParameters.PSobject.Properties["plans"].value
        }

        $PSO = [PSCustomObject]@{
            "allGroups" = ${AllGroups}
            "defaultStore" = ${DefaultStore}
            "allPlans" = ${AllPlans}
            "defaultTarget" = ${DefaultTarget}
            "morpheusResourceType" = ${MorpheusResourceType}
            "morpheusResourceId" = ${MorpheusResourceId}
            "canManage" = ${CanManage}
            "all" = ${All}
            "account" = ${Account}
            "sites" = ${Sites}
            "plans" = ${Plans}
        }

        return $PSO
    }

}

