#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Payload for creating a new monitoring check app

.PARAMETER Name
Unique name scoped to your account for the check app
.PARAMETER Description
Optional description field
.PARAMETER InUptime
Used to determine if check should affect account wide availability calculations
.PARAMETER Severity
Severity level of incidents that are created when this check fails
.PARAMETER Active
Used to determine if check app is active
.PARAMETER Checks
No description available.
.PARAMETER CheckGroups
No description available.
.OUTPUTS

ApiMonitoringAppsMonitorApp<PSCustomObject>
#>

function Initialize-ApiMonitoringAppsMonitorApp {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${InUptime} = $true,
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("info", "warning", "critical")]
        [String]
        ${Severity} = "critical",
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Active} = $true,
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [Int32[]]
        ${Checks},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [Int32[]]
        ${CheckGroups}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ApiMonitoringAppsMonitorApp' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$Name) {
            throw "invalid value for 'Name', 'Name' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "description" = ${Description}
            "inUptime" = ${InUptime}
            "severity" = ${Severity}
            "active" = ${Active}
            "checks" = ${Checks}
            "checkGroups" = ${CheckGroups}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ApiMonitoringAppsMonitorApp<PSCustomObject>

.DESCRIPTION

Convert from JSON to ApiMonitoringAppsMonitorApp<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ApiMonitoringAppsMonitorApp<PSCustomObject>
#>
function ConvertFrom-JsonToApiMonitoringAppsMonitorApp {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ApiMonitoringAppsMonitorApp' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ApiMonitoringAppsMonitorApp
        $AllProperties = ("name", "description", "inUptime", "severity", "active", "checks", "checkGroups")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property `name` missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) {
            throw "Error! JSON cannot be serialized due to the required property `name` missing."
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "inUptime"))) { #optional property not found
            $InUptime = $null
        } else {
            $InUptime = $JsonParameters.PSobject.Properties["inUptime"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "severity"))) { #optional property not found
            $Severity = $null
        } else {
            $Severity = $JsonParameters.PSobject.Properties["severity"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "active"))) { #optional property not found
            $Active = $null
        } else {
            $Active = $JsonParameters.PSobject.Properties["active"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "checks"))) { #optional property not found
            $Checks = $null
        } else {
            $Checks = $JsonParameters.PSobject.Properties["checks"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "checkGroups"))) { #optional property not found
            $CheckGroups = $null
        } else {
            $CheckGroups = $JsonParameters.PSobject.Properties["checkGroups"].value
        }

        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "description" = ${Description}
            "inUptime" = ${InUptime}
            "severity" = ${Severity}
            "active" = ${Active}
            "checks" = ${Checks}
            "checkGroups" = ${CheckGroups}
        }

        return $PSO
    }

}

