#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Name
Name to display
.PARAMETER Type
Integration Object Type Code
.PARAMETER CatalogItemType
Catalog Item Type ID
.OUTPUTS

AddIntegrationSnowObjectsRequestObject<PSCustomObject>
#>

function Initialize-AddIntegrationSnowObjectsRequestObject {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Type},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [Int64]
        ${CatalogItemType}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => AddIntegrationSnowObjectsRequestObject' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Type) {
            throw "invalid value for 'Type', 'Type' cannot be null."
        }

        if ($null -eq $CatalogItemType) {
            throw "invalid value for 'CatalogItemType', 'CatalogItemType' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "type" = ${Type}
            "catalogItemType" = ${CatalogItemType}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to AddIntegrationSnowObjectsRequestObject<PSCustomObject>

.DESCRIPTION

Convert from JSON to AddIntegrationSnowObjectsRequestObject<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

AddIntegrationSnowObjectsRequestObject<PSCustomObject>
#>
function ConvertFrom-JsonToAddIntegrationSnowObjectsRequestObject {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => AddIntegrationSnowObjectsRequestObject' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in AddIntegrationSnowObjectsRequestObject
        $AllProperties = ("name", "type", "catalogItemType")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'type' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) {
            throw "Error! JSON cannot be serialized due to the required property 'type' missing."
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "catalogItemType"))) {
            throw "Error! JSON cannot be serialized due to the required property 'catalogItemType' missing."
        } else {
            $CatalogItemType = $JsonParameters.PSobject.Properties["catalogItemType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "type" = ${Type}
            "catalogItemType" = ${CatalogItemType}
        }

        return $PSO
    }

}

