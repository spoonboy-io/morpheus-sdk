#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

For a full list of available NAT options, see natOptionTypes in the specific Network Router Type

.PARAMETER Name
Sets name of NAT
.OUTPUTS

ApiNetworksRoutersRouterIdNatsIdNetworkRouterNAT<PSCustomObject>
#>

function Initialize-ApiNetworksRoutersRouterIdNatsIdNetworkRouterNAT {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Name}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ApiNetworksRoutersRouterIdNatsIdNetworkRouterNAT' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "name" = ${Name}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ApiNetworksRoutersRouterIdNatsIdNetworkRouterNAT<PSCustomObject>

.DESCRIPTION

Convert from JSON to ApiNetworksRoutersRouterIdNatsIdNetworkRouterNAT<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ApiNetworksRoutersRouterIdNatsIdNetworkRouterNAT<PSCustomObject>
#>
function ConvertFrom-JsonToApiNetworksRoutersRouterIdNatsIdNetworkRouterNAT {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ApiNetworksRoutersRouterIdNatsIdNetworkRouterNAT' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ApiNetworksRoutersRouterIdNatsIdNetworkRouterNAT
        $AllProperties = ("name")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        $PSO = [PSCustomObject]@{
            "name" = ${Name}
        }

        return $PSO
    }

}

