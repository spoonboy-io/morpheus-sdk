#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.1.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
No description available.
.PARAMETER Name
No description available.
.PARAMETER AllApps
No description available.
.PARAMETER AllChecks
No description available.
.PARAMETER AllGroups
No description available.
.PARAMETER Active
No description available.
.PARAMETER MinSeverity
No description available.
.PARAMETER MinDuration
No description available.
.PARAMETER DateCreated
No description available.
.PARAMETER LastUpdated
No description available.
.PARAMETER Checks
No description available.
.PARAMETER CheckGroups
No description available.
.PARAMETER Apps
No description available.
.PARAMETER Contacts
No description available.
.OUTPUTS

Alert<PSCustomObject>
#>

function Initialize-Alert {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${AllApps},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${AllChecks},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${AllGroups},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Active},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${MinSeverity},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${MinDuration},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${DateCreated},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${LastUpdated},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [Int32[]]
        ${Checks},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [Int32[]]
        ${CheckGroups},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [Int32[]]
        ${Apps},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Contacts}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => Alert' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "name" = ${Name}
            "allApps" = ${AllApps}
            "allChecks" = ${AllChecks}
            "allGroups" = ${AllGroups}
            "active" = ${Active}
            "minSeverity" = ${MinSeverity}
            "minDuration" = ${MinDuration}
            "dateCreated" = ${DateCreated}
            "lastUpdated" = ${LastUpdated}
            "checks" = ${Checks}
            "checkGroups" = ${CheckGroups}
            "apps" = ${Apps}
            "contacts" = ${Contacts}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to Alert<PSCustomObject>

.DESCRIPTION

Convert from JSON to Alert<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

Alert<PSCustomObject>
#>
function ConvertFrom-JsonToAlert {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => Alert' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in Alert
        $AllProperties = ("id", "name", "allApps", "allChecks", "allGroups", "active", "minSeverity", "minDuration", "dateCreated", "lastUpdated", "checks", "checkGroups", "apps", "contacts")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "allApps"))) { #optional property not found
            $AllApps = $null
        } else {
            $AllApps = $JsonParameters.PSobject.Properties["allApps"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "allChecks"))) { #optional property not found
            $AllChecks = $null
        } else {
            $AllChecks = $JsonParameters.PSobject.Properties["allChecks"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "allGroups"))) { #optional property not found
            $AllGroups = $null
        } else {
            $AllGroups = $JsonParameters.PSobject.Properties["allGroups"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "active"))) { #optional property not found
            $Active = $null
        } else {
            $Active = $JsonParameters.PSobject.Properties["active"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "minSeverity"))) { #optional property not found
            $MinSeverity = $null
        } else {
            $MinSeverity = $JsonParameters.PSobject.Properties["minSeverity"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "minDuration"))) { #optional property not found
            $MinDuration = $null
        } else {
            $MinDuration = $JsonParameters.PSobject.Properties["minDuration"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dateCreated"))) { #optional property not found
            $DateCreated = $null
        } else {
            $DateCreated = $JsonParameters.PSobject.Properties["dateCreated"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lastUpdated"))) { #optional property not found
            $LastUpdated = $null
        } else {
            $LastUpdated = $JsonParameters.PSobject.Properties["lastUpdated"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "checks"))) { #optional property not found
            $Checks = $null
        } else {
            $Checks = $JsonParameters.PSobject.Properties["checks"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "checkGroups"))) { #optional property not found
            $CheckGroups = $null
        } else {
            $CheckGroups = $JsonParameters.PSobject.Properties["checkGroups"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "apps"))) { #optional property not found
            $Apps = $null
        } else {
            $Apps = $JsonParameters.PSobject.Properties["apps"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "contacts"))) { #optional property not found
            $Contacts = $null
        } else {
            $Contacts = $JsonParameters.PSobject.Properties["contacts"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "name" = ${Name}
            "allApps" = ${AllApps}
            "allChecks" = ${AllChecks}
            "allGroups" = ${AllGroups}
            "active" = ${Active}
            "minSeverity" = ${MinSeverity}
            "minDuration" = ${MinDuration}
            "dateCreated" = ${DateCreated}
            "lastUpdated" = ${LastUpdated}
            "checks" = ${Checks}
            "checkGroups" = ${CheckGroups}
            "apps" = ${Apps}
            "contacts" = ${Contacts}
        }

        return $PSO
    }

}

