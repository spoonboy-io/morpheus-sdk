#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Tenants
Array of tenant accounts that will use this inventory as Default. Used by jobs set to 'Use Tenant Default'
.OUTPUTS

ApiIntegrationsIdInventoryInventoryIdInventory<PSCustomObject>
#>

function Initialize-ApiIntegrationsIdInventoryInventoryIdInventory {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Tenants}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ApiIntegrationsIdInventoryInventoryIdInventory' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "tenants" = ${Tenants}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ApiIntegrationsIdInventoryInventoryIdInventory<PSCustomObject>

.DESCRIPTION

Convert from JSON to ApiIntegrationsIdInventoryInventoryIdInventory<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ApiIntegrationsIdInventoryInventoryIdInventory<PSCustomObject>
#>
function ConvertFrom-JsonToApiIntegrationsIdInventoryInventoryIdInventory {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ApiIntegrationsIdInventoryInventoryIdInventory' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ApiIntegrationsIdInventoryInventoryIdInventory
        $AllProperties = ("tenants")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tenants"))) { #optional property not found
            $Tenants = $null
        } else {
            $Tenants = $JsonParameters.PSobject.Properties["tenants"].value
        }

        $PSO = [PSCustomObject]@{
            "tenants" = ${Tenants}
        }

        return $PSO
    }

}

