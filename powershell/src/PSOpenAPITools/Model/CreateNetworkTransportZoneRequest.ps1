#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

The parameters for creating a network transport zone is type dependent. The following lists the common parameters. See get a specific type to list available options for the network server type.

.PARAMETER NetworkScope
No description available.
.OUTPUTS

CreateNetworkTransportZoneRequest<PSCustomObject>
#>

function Initialize-CreateNetworkTransportZoneRequest {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${NetworkScope}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => CreateNetworkTransportZoneRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "networkScope" = ${NetworkScope}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to CreateNetworkTransportZoneRequest<PSCustomObject>

.DESCRIPTION

Convert from JSON to CreateNetworkTransportZoneRequest<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

CreateNetworkTransportZoneRequest<PSCustomObject>
#>
function ConvertFrom-JsonToCreateNetworkTransportZoneRequest {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => CreateNetworkTransportZoneRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in CreateNetworkTransportZoneRequest
        $AllProperties = ("networkScope")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "networkScope"))) { #optional property not found
            $NetworkScope = $null
        } else {
            $NetworkScope = $JsonParameters.PSobject.Properties["networkScope"].value
        }

        $PSO = [PSCustomObject]@{
            "networkScope" = ${NetworkScope}
        }

        return $PSO
    }

}

