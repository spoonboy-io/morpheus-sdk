#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.1.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
No description available.
.PARAMETER Account
No description available.
.PARAMETER Active
No description available.
.PARAMETER App
No description available.
.PARAMETER Name
No description available.
.PARAMETER Description
No description available.
.PARAMETER InUptime
No description available.
.PARAMETER LastCheckStatus
No description available.
.PARAMETER LastWarningDate
No description available.
.PARAMETER LastErrorDate
No description available.
.PARAMETER LastSuccessDate
No description available.
.PARAMETER LastRunDate
No description available.
.PARAMETER LastError
No description available.
.PARAMETER LastTimer
No description available.
.PARAMETER Health
No description available.
.PARAMETER History
No description available.
.PARAMETER Severity
No description available.
.PARAMETER CreateIncident
No description available.
.PARAMETER Muted
No description available.
.PARAMETER CreatedBy
No description available.
.PARAMETER DateCreated
No description available.
.PARAMETER LastUpdated
No description available.
.PARAMETER Availability
No description available.
.PARAMETER Checks
No description available.
.PARAMETER CheckGroups
No description available.
.OUTPUTS

CheckApp<PSCustomObject>
#>

function Initialize-CheckApp {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Account},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Active},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${App},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${InUptime},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${LastCheckStatus},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${LastWarningDate},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${LastErrorDate},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${LastSuccessDate},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${LastRunDate},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${LastError},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${LastTimer},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Health},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${History},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Severity},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${CreateIncident},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Muted},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${CreatedBy},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${DateCreated},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${LastUpdated},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Availability},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true)]
        [Int64[]]
        ${Checks},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true)]
        [Int64[]]
        ${CheckGroups}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => CheckApp' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "account" = ${Account}
            "active" = ${Active}
            "app" = ${App}
            "name" = ${Name}
            "description" = ${Description}
            "inUptime" = ${InUptime}
            "lastCheckStatus" = ${LastCheckStatus}
            "lastWarningDate" = ${LastWarningDate}
            "lastErrorDate" = ${LastErrorDate}
            "lastSuccessDate" = ${LastSuccessDate}
            "lastRunDate" = ${LastRunDate}
            "lastError" = ${LastError}
            "lastTimer" = ${LastTimer}
            "health" = ${Health}
            "history" = ${History}
            "severity" = ${Severity}
            "createIncident" = ${CreateIncident}
            "muted" = ${Muted}
            "createdBy" = ${CreatedBy}
            "dateCreated" = ${DateCreated}
            "lastUpdated" = ${LastUpdated}
            "availability" = ${Availability}
            "checks" = ${Checks}
            "checkGroups" = ${CheckGroups}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to CheckApp<PSCustomObject>

.DESCRIPTION

Convert from JSON to CheckApp<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

CheckApp<PSCustomObject>
#>
function ConvertFrom-JsonToCheckApp {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => CheckApp' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in CheckApp
        $AllProperties = ("id", "account", "active", "app", "name", "description", "inUptime", "lastCheckStatus", "lastWarningDate", "lastErrorDate", "lastSuccessDate", "lastRunDate", "lastError", "lastTimer", "health", "history", "severity", "createIncident", "muted", "createdBy", "dateCreated", "lastUpdated", "availability", "checks", "checkGroups")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "account"))) { #optional property not found
            $Account = $null
        } else {
            $Account = $JsonParameters.PSobject.Properties["account"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "active"))) { #optional property not found
            $Active = $null
        } else {
            $Active = $JsonParameters.PSobject.Properties["active"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "app"))) { #optional property not found
            $App = $null
        } else {
            $App = $JsonParameters.PSobject.Properties["app"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "inUptime"))) { #optional property not found
            $InUptime = $null
        } else {
            $InUptime = $JsonParameters.PSobject.Properties["inUptime"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lastCheckStatus"))) { #optional property not found
            $LastCheckStatus = $null
        } else {
            $LastCheckStatus = $JsonParameters.PSobject.Properties["lastCheckStatus"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lastWarningDate"))) { #optional property not found
            $LastWarningDate = $null
        } else {
            $LastWarningDate = $JsonParameters.PSobject.Properties["lastWarningDate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lastErrorDate"))) { #optional property not found
            $LastErrorDate = $null
        } else {
            $LastErrorDate = $JsonParameters.PSobject.Properties["lastErrorDate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lastSuccessDate"))) { #optional property not found
            $LastSuccessDate = $null
        } else {
            $LastSuccessDate = $JsonParameters.PSobject.Properties["lastSuccessDate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lastRunDate"))) { #optional property not found
            $LastRunDate = $null
        } else {
            $LastRunDate = $JsonParameters.PSobject.Properties["lastRunDate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lastError"))) { #optional property not found
            $LastError = $null
        } else {
            $LastError = $JsonParameters.PSobject.Properties["lastError"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lastTimer"))) { #optional property not found
            $LastTimer = $null
        } else {
            $LastTimer = $JsonParameters.PSobject.Properties["lastTimer"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "health"))) { #optional property not found
            $Health = $null
        } else {
            $Health = $JsonParameters.PSobject.Properties["health"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "history"))) { #optional property not found
            $History = $null
        } else {
            $History = $JsonParameters.PSobject.Properties["history"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "severity"))) { #optional property not found
            $Severity = $null
        } else {
            $Severity = $JsonParameters.PSobject.Properties["severity"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "createIncident"))) { #optional property not found
            $CreateIncident = $null
        } else {
            $CreateIncident = $JsonParameters.PSobject.Properties["createIncident"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "muted"))) { #optional property not found
            $Muted = $null
        } else {
            $Muted = $JsonParameters.PSobject.Properties["muted"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "createdBy"))) { #optional property not found
            $CreatedBy = $null
        } else {
            $CreatedBy = $JsonParameters.PSobject.Properties["createdBy"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dateCreated"))) { #optional property not found
            $DateCreated = $null
        } else {
            $DateCreated = $JsonParameters.PSobject.Properties["dateCreated"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lastUpdated"))) { #optional property not found
            $LastUpdated = $null
        } else {
            $LastUpdated = $JsonParameters.PSobject.Properties["lastUpdated"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "availability"))) { #optional property not found
            $Availability = $null
        } else {
            $Availability = $JsonParameters.PSobject.Properties["availability"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "checks"))) { #optional property not found
            $Checks = $null
        } else {
            $Checks = $JsonParameters.PSobject.Properties["checks"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "checkGroups"))) { #optional property not found
            $CheckGroups = $null
        } else {
            $CheckGroups = $JsonParameters.PSobject.Properties["checkGroups"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "account" = ${Account}
            "active" = ${Active}
            "app" = ${App}
            "name" = ${Name}
            "description" = ${Description}
            "inUptime" = ${InUptime}
            "lastCheckStatus" = ${LastCheckStatus}
            "lastWarningDate" = ${LastWarningDate}
            "lastErrorDate" = ${LastErrorDate}
            "lastSuccessDate" = ${LastSuccessDate}
            "lastRunDate" = ${LastRunDate}
            "lastError" = ${LastError}
            "lastTimer" = ${LastTimer}
            "health" = ${Health}
            "history" = ${History}
            "severity" = ${Severity}
            "createIncident" = ${CreateIncident}
            "muted" = ${Muted}
            "createdBy" = ${CreatedBy}
            "dateCreated" = ${DateCreated}
            "lastUpdated" = ${LastUpdated}
            "availability" = ${Availability}
            "checks" = ${Checks}
            "checkGroups" = ${CheckGroups}
        }

        return $PSO
    }

}

