#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Name
Price set name
.PARAMETER Code
Price set code. Must be unique.
.PARAMETER RegionCode
Price set region code
.PARAMETER Zone
No description available.
.PARAMETER ZonePool
No description available.
.PARAMETER PriceUnit
Price Unit
.PARAMETER Type
Price set type
.PARAMETER Prices
No description available.
.OUTPUTS

ApiPriceSetsIdPriceSet<PSCustomObject>
#>

function Initialize-ApiPriceSetsIdPriceSet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Code},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RegionCode},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Zone},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${ZonePool},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("minute", "hour", "day", "month", "year", "two year", "three year", "four year", "five year")]
        [String]
        ${PriceUnit},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("fixed", "compute_plus_storage", "component", "load_balancer", "snapshot", "virtual_image", "software_or_service")]
        [String]
        ${Type},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [Int64[]]
        ${Prices}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ApiPriceSetsIdPriceSet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "code" = ${Code}
            "regionCode" = ${RegionCode}
            "zone" = ${Zone}
            "zonePool" = ${ZonePool}
            "priceUnit" = ${PriceUnit}
            "type" = ${Type}
            "prices" = ${Prices}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ApiPriceSetsIdPriceSet<PSCustomObject>

.DESCRIPTION

Convert from JSON to ApiPriceSetsIdPriceSet<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ApiPriceSetsIdPriceSet<PSCustomObject>
#>
function ConvertFrom-JsonToApiPriceSetsIdPriceSet {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ApiPriceSetsIdPriceSet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ApiPriceSetsIdPriceSet
        $AllProperties = ("name", "code", "regionCode", "zone", "zonePool", "priceUnit", "type", "prices")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "code"))) { #optional property not found
            $Code = $null
        } else {
            $Code = $JsonParameters.PSobject.Properties["code"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "regionCode"))) { #optional property not found
            $RegionCode = $null
        } else {
            $RegionCode = $JsonParameters.PSobject.Properties["regionCode"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "zone"))) { #optional property not found
            $Zone = $null
        } else {
            $Zone = $JsonParameters.PSobject.Properties["zone"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "zonePool"))) { #optional property not found
            $ZonePool = $null
        } else {
            $ZonePool = $JsonParameters.PSobject.Properties["zonePool"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "priceUnit"))) { #optional property not found
            $PriceUnit = $null
        } else {
            $PriceUnit = $JsonParameters.PSobject.Properties["priceUnit"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "prices"))) { #optional property not found
            $Prices = $null
        } else {
            $Prices = $JsonParameters.PSobject.Properties["prices"].value
        }

        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "code" = ${Code}
            "regionCode" = ${RegionCode}
            "zone" = ${Zone}
            "zonePool" = ${ZonePool}
            "priceUnit" = ${PriceUnit}
            "type" = ${Type}
            "prices" = ${Prices}
        }

        return $PSO
    }

}

