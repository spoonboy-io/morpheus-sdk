#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Payload for creating a new environment

.PARAMETER Name
A unique name for the environment
.PARAMETER Code
A unique code for the environment
.PARAMETER Description
A description of the environment
.PARAMETER Visibility
private or public
.PARAMETER SortOrder
Sort order
.OUTPUTS

ApiEnvironmentsEnvironment<PSCustomObject>
#>

function Initialize-ApiEnvironmentsEnvironment {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Code},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Visibility} = "private",
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${SortOrder} = 0
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ApiEnvironmentsEnvironment' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$Name) {
            throw "invalid value for 'Name', 'Name' cannot be null."
        }

        if (!$Code) {
            throw "invalid value for 'Code', 'Code' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "code" = ${Code}
            "description" = ${Description}
            "visibility" = ${Visibility}
            "sortOrder" = ${SortOrder}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ApiEnvironmentsEnvironment<PSCustomObject>

.DESCRIPTION

Convert from JSON to ApiEnvironmentsEnvironment<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ApiEnvironmentsEnvironment<PSCustomObject>
#>
function ConvertFrom-JsonToApiEnvironmentsEnvironment {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ApiEnvironmentsEnvironment' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ApiEnvironmentsEnvironment
        $AllProperties = ("name", "code", "description", "visibility", "sortOrder")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property `name` missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) {
            throw "Error! JSON cannot be serialized due to the required property `name` missing."
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "code"))) {
            throw "Error! JSON cannot be serialized due to the required property `code` missing."
        } else {
            $Code = $JsonParameters.PSobject.Properties["code"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "visibility"))) { #optional property not found
            $Visibility = $null
        } else {
            $Visibility = $JsonParameters.PSobject.Properties["visibility"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sortOrder"))) { #optional property not found
            $SortOrder = $null
        } else {
            $SortOrder = $JsonParameters.PSobject.Properties["sortOrder"].value
        }

        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "code" = ${Code}
            "description" = ${Description}
            "visibility" = ${Visibility}
            "sortOrder" = ${SortOrder}
        }

        return $PSO
    }

}

