#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
No description available.
.PARAMETER Name
No description available.
.PARAMETER Enabled
No description available.
.PARAMETER Type
No description available.
.PARAMETER IntegrationType
No description available.
.PARAMETER Url
No description available.
.PARAMETER Port
No description available.
.PARAMETER Username
No description available.
.PARAMETER Password
No description available.
.PARAMETER RefType
No description available.
.PARAMETER RefId
No description available.
.PARAMETER IsPlugin
No description available.
.PARAMETER Config
No description available.
.PARAMETER Status
No description available.
.PARAMETER StatusDate
No description available.
.PARAMETER StatusMessage
No description available.
.PARAMETER LastSync
No description available.
.PARAMETER LastSyncDuration
No description available.
.OUTPUTS

GetNetworkRouter200ResponseNetworkRouterNetworkServerIntegration<PSCustomObject>
#>

function Initialize-GetNetworkRouter200ResponseNetworkRouterNetworkServerIntegration {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Enabled},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Type},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${IntegrationType},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Url},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Port},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Username},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Password},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RefType},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RefId},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsPlugin},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Config},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Status},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${StatusDate},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${StatusMessage},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${LastSync},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${LastSyncDuration}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => GetNetworkRouter200ResponseNetworkRouterNetworkServerIntegration' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "name" = ${Name}
            "enabled" = ${Enabled}
            "type" = ${Type}
            "integrationType" = ${IntegrationType}
            "url" = ${Url}
            "port" = ${Port}
            "username" = ${Username}
            "password" = ${Password}
            "refType" = ${RefType}
            "refId" = ${RefId}
            "isPlugin" = ${IsPlugin}
            "config" = ${Config}
            "status" = ${Status}
            "statusDate" = ${StatusDate}
            "statusMessage" = ${StatusMessage}
            "lastSync" = ${LastSync}
            "lastSyncDuration" = ${LastSyncDuration}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to GetNetworkRouter200ResponseNetworkRouterNetworkServerIntegration<PSCustomObject>

.DESCRIPTION

Convert from JSON to GetNetworkRouter200ResponseNetworkRouterNetworkServerIntegration<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

GetNetworkRouter200ResponseNetworkRouterNetworkServerIntegration<PSCustomObject>
#>
function ConvertFrom-JsonToGetNetworkRouter200ResponseNetworkRouterNetworkServerIntegration {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => GetNetworkRouter200ResponseNetworkRouterNetworkServerIntegration' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in GetNetworkRouter200ResponseNetworkRouterNetworkServerIntegration
        $AllProperties = ("id", "name", "enabled", "type", "integrationType", "url", "port", "username", "password", "refType", "refId", "isPlugin", "config", "status", "statusDate", "statusMessage", "lastSync", "lastSyncDuration")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "enabled"))) { #optional property not found
            $Enabled = $null
        } else {
            $Enabled = $JsonParameters.PSobject.Properties["enabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "integrationType"))) { #optional property not found
            $IntegrationType = $null
        } else {
            $IntegrationType = $JsonParameters.PSobject.Properties["integrationType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "url"))) { #optional property not found
            $Url = $null
        } else {
            $Url = $JsonParameters.PSobject.Properties["url"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "port"))) { #optional property not found
            $Port = $null
        } else {
            $Port = $JsonParameters.PSobject.Properties["port"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "username"))) { #optional property not found
            $Username = $null
        } else {
            $Username = $JsonParameters.PSobject.Properties["username"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "password"))) { #optional property not found
            $Password = $null
        } else {
            $Password = $JsonParameters.PSobject.Properties["password"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "refType"))) { #optional property not found
            $RefType = $null
        } else {
            $RefType = $JsonParameters.PSobject.Properties["refType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "refId"))) { #optional property not found
            $RefId = $null
        } else {
            $RefId = $JsonParameters.PSobject.Properties["refId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "isPlugin"))) { #optional property not found
            $IsPlugin = $null
        } else {
            $IsPlugin = $JsonParameters.PSobject.Properties["isPlugin"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "config"))) { #optional property not found
            $Config = $null
        } else {
            $Config = $JsonParameters.PSobject.Properties["config"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "status"))) { #optional property not found
            $Status = $null
        } else {
            $Status = $JsonParameters.PSobject.Properties["status"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "statusDate"))) { #optional property not found
            $StatusDate = $null
        } else {
            $StatusDate = $JsonParameters.PSobject.Properties["statusDate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "statusMessage"))) { #optional property not found
            $StatusMessage = $null
        } else {
            $StatusMessage = $JsonParameters.PSobject.Properties["statusMessage"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lastSync"))) { #optional property not found
            $LastSync = $null
        } else {
            $LastSync = $JsonParameters.PSobject.Properties["lastSync"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lastSyncDuration"))) { #optional property not found
            $LastSyncDuration = $null
        } else {
            $LastSyncDuration = $JsonParameters.PSobject.Properties["lastSyncDuration"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "name" = ${Name}
            "enabled" = ${Enabled}
            "type" = ${Type}
            "integrationType" = ${IntegrationType}
            "url" = ${Url}
            "port" = ${Port}
            "username" = ${Username}
            "password" = ${Password}
            "refType" = ${RefType}
            "refId" = ${RefId}
            "isPlugin" = ${IsPlugin}
            "config" = ${Config}
            "status" = ${Status}
            "statusDate" = ${StatusDate}
            "statusMessage" = ${StatusMessage}
            "lastSync" = ${LastSync}
            "lastSyncDuration" = ${LastSyncDuration}
        }

        return $PSO
    }

}

