#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Type
No description available.
.PARAMETER Name
Name of the cluster to be created
.PARAMETER Description
Description of the cluster to be created
.PARAMETER Labels
Array of strings (keywords). This will override labels passed under the `server` object.
.PARAMETER Group
No description available.
.PARAMETER Cloud
No description available.
.PARAMETER Layout
No description available.
.PARAMETER Server
No description available.
.OUTPUTS

ClusterCreate<PSCustomObject>
#>

function Initialize-ClusterCreate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Type},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${Labels},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Group},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Cloud},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Layout},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Server}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ClusterCreate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Type) {
            throw "invalid value for 'Type', 'Type' cannot be null."
        }

        if ($null -eq $Name) {
            throw "invalid value for 'Name', 'Name' cannot be null."
        }

        if ($null -eq $Group) {
            throw "invalid value for 'Group', 'Group' cannot be null."
        }

        if ($null -eq $Cloud) {
            throw "invalid value for 'Cloud', 'Cloud' cannot be null."
        }

        if ($null -eq $Layout) {
            throw "invalid value for 'Layout', 'Layout' cannot be null."
        }

        if ($null -eq $Server) {
            throw "invalid value for 'Server', 'Server' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "type" = ${Type}
            "name" = ${Name}
            "description" = ${Description}
            "labels" = ${Labels}
            "group" = ${Group}
            "cloud" = ${Cloud}
            "layout" = ${Layout}
            "server" = ${Server}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ClusterCreate<PSCustomObject>

.DESCRIPTION

Convert from JSON to ClusterCreate<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ClusterCreate<PSCustomObject>
#>
function ConvertFrom-JsonToClusterCreate {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ClusterCreate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ClusterCreate
        $AllProperties = ("type", "name", "description", "labels", "group", "cloud", "layout", "server")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'type' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) {
            throw "Error! JSON cannot be serialized due to the required property 'type' missing."
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) {
            throw "Error! JSON cannot be serialized due to the required property 'name' missing."
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "group"))) {
            throw "Error! JSON cannot be serialized due to the required property 'group' missing."
        } else {
            $Group = $JsonParameters.PSobject.Properties["group"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cloud"))) {
            throw "Error! JSON cannot be serialized due to the required property 'cloud' missing."
        } else {
            $Cloud = $JsonParameters.PSobject.Properties["cloud"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "layout"))) {
            throw "Error! JSON cannot be serialized due to the required property 'layout' missing."
        } else {
            $Layout = $JsonParameters.PSobject.Properties["layout"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "server"))) {
            throw "Error! JSON cannot be serialized due to the required property 'server' missing."
        } else {
            $Server = $JsonParameters.PSobject.Properties["server"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "labels"))) { #optional property not found
            $Labels = $null
        } else {
            $Labels = $JsonParameters.PSobject.Properties["labels"].value
        }

        $PSO = [PSCustomObject]@{
            "type" = ${Type}
            "name" = ${Name}
            "description" = ${Description}
            "labels" = ${Labels}
            "group" = ${Group}
            "cloud" = ${Cloud}
            "layout" = ${Layout}
            "server" = ${Server}
        }

        return $PSO
    }

}

