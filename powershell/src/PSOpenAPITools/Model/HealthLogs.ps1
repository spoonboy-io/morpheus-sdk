#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER TypeCode
No description available.
.PARAMETER Ts
No description available.
.PARAMETER Level
No description available.
.PARAMETER SourceType
No description available.
.PARAMETER Message
No description available.
.PARAMETER Hostname
No description available.
.PARAMETER Title
No description available.
.PARAMETER LogSignature
No description available.
.PARAMETER ObjectId
No description available.
.PARAMETER Seq
No description available.
.PARAMETER Id
No description available.
.PARAMETER SignatureVerified
No description available.
.OUTPUTS

HealthLogs<PSCustomObject>
#>

function Initialize-HealthLogs {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TypeCode},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${Ts},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Level},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SourceType},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Message},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Hostname},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Title},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${LogSignature},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ObjectId},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Seq},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${SignatureVerified}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => HealthLogs' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "typeCode" = ${TypeCode}
            "ts" = ${Ts}
            "level" = ${Level}
            "sourceType" = ${SourceType}
            "message" = ${Message}
            "hostname" = ${Hostname}
            "title" = ${Title}
            "logSignature" = ${LogSignature}
            "objectId" = ${ObjectId}
            "seq" = ${Seq}
            "_id" = ${Id}
            "signatureVerified" = ${SignatureVerified}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to HealthLogs<PSCustomObject>

.DESCRIPTION

Convert from JSON to HealthLogs<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

HealthLogs<PSCustomObject>
#>
function ConvertFrom-JsonToHealthLogs {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => HealthLogs' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in HealthLogs
        $AllProperties = ("typeCode", "ts", "level", "sourceType", "message", "hostname", "title", "logSignature", "objectId", "seq", "_id", "signatureVerified")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "typeCode"))) { #optional property not found
            $TypeCode = $null
        } else {
            $TypeCode = $JsonParameters.PSobject.Properties["typeCode"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ts"))) { #optional property not found
            $Ts = $null
        } else {
            $Ts = $JsonParameters.PSobject.Properties["ts"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "level"))) { #optional property not found
            $Level = $null
        } else {
            $Level = $JsonParameters.PSobject.Properties["level"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sourceType"))) { #optional property not found
            $SourceType = $null
        } else {
            $SourceType = $JsonParameters.PSobject.Properties["sourceType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "message"))) { #optional property not found
            $Message = $null
        } else {
            $Message = $JsonParameters.PSobject.Properties["message"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "hostname"))) { #optional property not found
            $Hostname = $null
        } else {
            $Hostname = $JsonParameters.PSobject.Properties["hostname"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "title"))) { #optional property not found
            $Title = $null
        } else {
            $Title = $JsonParameters.PSobject.Properties["title"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "logSignature"))) { #optional property not found
            $LogSignature = $null
        } else {
            $LogSignature = $JsonParameters.PSobject.Properties["logSignature"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "objectId"))) { #optional property not found
            $ObjectId = $null
        } else {
            $ObjectId = $JsonParameters.PSobject.Properties["objectId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "seq"))) { #optional property not found
            $Seq = $null
        } else {
            $Seq = $JsonParameters.PSobject.Properties["seq"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "_id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "signatureVerified"))) { #optional property not found
            $SignatureVerified = $null
        } else {
            $SignatureVerified = $JsonParameters.PSobject.Properties["signatureVerified"].value
        }

        $PSO = [PSCustomObject]@{
            "typeCode" = ${TypeCode}
            "ts" = ${Ts}
            "level" = ${Level}
            "sourceType" = ${SourceType}
            "message" = ${Message}
            "hostname" = ${Hostname}
            "title" = ${Title}
            "logSignature" = ${LogSignature}
            "objectId" = ${ObjectId}
            "seq" = ${Seq}
            "_id" = ${Id}
            "signatureVerified" = ${SignatureVerified}
        }

        return $PSO
    }

}

