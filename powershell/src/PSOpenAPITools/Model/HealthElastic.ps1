#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Success
No description available.
.PARAMETER Status
No description available.
.PARAMETER Master
No description available.
.PARAMETER Nodes
No description available.
.PARAMETER Stats
No description available.
.PARAMETER Indices
No description available.
.PARAMETER BadIndices
No description available.
.OUTPUTS

HealthElastic<PSCustomObject>
#>

function Initialize-HealthElastic {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Success},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Status},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Master},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Nodes},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Stats},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Indices},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${BadIndices}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => HealthElastic' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "success" = ${Success}
            "status" = ${Status}
            "master" = ${Master}
            "nodes" = ${Nodes}
            "stats" = ${Stats}
            "indices" = ${Indices}
            "badIndices" = ${BadIndices}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to HealthElastic<PSCustomObject>

.DESCRIPTION

Convert from JSON to HealthElastic<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

HealthElastic<PSCustomObject>
#>
function ConvertFrom-JsonToHealthElastic {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => HealthElastic' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in HealthElastic
        $AllProperties = ("success", "status", "master", "nodes", "stats", "indices", "badIndices")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "success"))) { #optional property not found
            $Success = $null
        } else {
            $Success = $JsonParameters.PSobject.Properties["success"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "status"))) { #optional property not found
            $Status = $null
        } else {
            $Status = $JsonParameters.PSobject.Properties["status"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "master"))) { #optional property not found
            $Master = $null
        } else {
            $Master = $JsonParameters.PSobject.Properties["master"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "nodes"))) { #optional property not found
            $Nodes = $null
        } else {
            $Nodes = $JsonParameters.PSobject.Properties["nodes"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "stats"))) { #optional property not found
            $Stats = $null
        } else {
            $Stats = $JsonParameters.PSobject.Properties["stats"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "indices"))) { #optional property not found
            $Indices = $null
        } else {
            $Indices = $JsonParameters.PSobject.Properties["indices"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "badIndices"))) { #optional property not found
            $BadIndices = $null
        } else {
            $BadIndices = $JsonParameters.PSobject.Properties["badIndices"].value
        }

        $PSO = [PSCustomObject]@{
            "success" = ${Success}
            "status" = ${Status}
            "master" = ${Master}
            "nodes" = ${Nodes}
            "stats" = ${Stats}
            "indices" = ${Indices}
            "badIndices" = ${BadIndices}
        }

        return $PSO
    }

}

