#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Configuration settings for the following policy types: - Expiration 

.PARAMETER LifecycleType
No description available.
.PARAMETER LifecycleAge
No description available.
.PARAMETER LifecycleRenewal
No description available.
.PARAMETER LifecycleNotify
No description available.
.PARAMETER LifecycleMessage
No description available.
.PARAMETER LifecycleAutoRenew
No description available.
.PARAMETER LifecycleExtensionsBeforeApproval
No description available.
.PARAMETER AccountIntegrationId
No description available.
.PARAMETER LifecycleHideFixed
No description available.
.OUTPUTS

ExpirationPolicyTypeConfiguration<PSCustomObject>
#>

function Initialize-ExpirationPolicyTypeConfiguration {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${LifecycleType},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${LifecycleAge},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${LifecycleRenewal},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${LifecycleNotify},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${LifecycleMessage},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${LifecycleAutoRenew},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${LifecycleExtensionsBeforeApproval},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AccountIntegrationId},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${LifecycleHideFixed}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ExpirationPolicyTypeConfiguration' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "lifecycleType" = ${LifecycleType}
            "lifecycleAge" = ${LifecycleAge}
            "lifecycleRenewal" = ${LifecycleRenewal}
            "lifecycleNotify" = ${LifecycleNotify}
            "lifecycleMessage" = ${LifecycleMessage}
            "lifecycleAutoRenew" = ${LifecycleAutoRenew}
            "lifecycleExtensionsBeforeApproval" = ${LifecycleExtensionsBeforeApproval}
            "accountIntegrationId" = ${AccountIntegrationId}
            "lifecycleHideFixed" = ${LifecycleHideFixed}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ExpirationPolicyTypeConfiguration<PSCustomObject>

.DESCRIPTION

Convert from JSON to ExpirationPolicyTypeConfiguration<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ExpirationPolicyTypeConfiguration<PSCustomObject>
#>
function ConvertFrom-JsonToExpirationPolicyTypeConfiguration {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ExpirationPolicyTypeConfiguration' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ExpirationPolicyTypeConfiguration
        $AllProperties = ("lifecycleType", "lifecycleAge", "lifecycleRenewal", "lifecycleNotify", "lifecycleMessage", "lifecycleAutoRenew", "lifecycleExtensionsBeforeApproval", "accountIntegrationId", "lifecycleHideFixed")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lifecycleType"))) { #optional property not found
            $LifecycleType = $null
        } else {
            $LifecycleType = $JsonParameters.PSobject.Properties["lifecycleType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lifecycleAge"))) { #optional property not found
            $LifecycleAge = $null
        } else {
            $LifecycleAge = $JsonParameters.PSobject.Properties["lifecycleAge"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lifecycleRenewal"))) { #optional property not found
            $LifecycleRenewal = $null
        } else {
            $LifecycleRenewal = $JsonParameters.PSobject.Properties["lifecycleRenewal"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lifecycleNotify"))) { #optional property not found
            $LifecycleNotify = $null
        } else {
            $LifecycleNotify = $JsonParameters.PSobject.Properties["lifecycleNotify"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lifecycleMessage"))) { #optional property not found
            $LifecycleMessage = $null
        } else {
            $LifecycleMessage = $JsonParameters.PSobject.Properties["lifecycleMessage"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lifecycleAutoRenew"))) { #optional property not found
            $LifecycleAutoRenew = $null
        } else {
            $LifecycleAutoRenew = $JsonParameters.PSobject.Properties["lifecycleAutoRenew"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lifecycleExtensionsBeforeApproval"))) { #optional property not found
            $LifecycleExtensionsBeforeApproval = $null
        } else {
            $LifecycleExtensionsBeforeApproval = $JsonParameters.PSobject.Properties["lifecycleExtensionsBeforeApproval"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "accountIntegrationId"))) { #optional property not found
            $AccountIntegrationId = $null
        } else {
            $AccountIntegrationId = $JsonParameters.PSobject.Properties["accountIntegrationId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lifecycleHideFixed"))) { #optional property not found
            $LifecycleHideFixed = $null
        } else {
            $LifecycleHideFixed = $JsonParameters.PSobject.Properties["lifecycleHideFixed"].value
        }

        $PSO = [PSCustomObject]@{
            "lifecycleType" = ${LifecycleType}
            "lifecycleAge" = ${LifecycleAge}
            "lifecycleRenewal" = ${LifecycleRenewal}
            "lifecycleNotify" = ${LifecycleNotify}
            "lifecycleMessage" = ${LifecycleMessage}
            "lifecycleAutoRenew" = ${LifecycleAutoRenew}
            "lifecycleExtensionsBeforeApproval" = ${LifecycleExtensionsBeforeApproval}
            "accountIntegrationId" = ${AccountIntegrationId}
            "lifecycleHideFixed" = ${LifecycleHideFixed}
        }

        return $PSO
    }

}

