#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
Backup Result ID
.PARAMETER BackupResultId
No description available.
.PARAMETER BackupId
No description available.
.PARAMETER Backup
No description available.
.PARAMETER ContainerId
No description available.
.PARAMETER Container
No description available.
.PARAMETER Instance
No description available.
.PARAMETER RestoreToNew
No description available.
.PARAMETER Status
No description available.
.PARAMETER ErrorMessage
No description available.
.PARAMETER StartDate
No description available.
.PARAMETER EndDate
No description available.
.PARAMETER DurationMillis
No description available.
.PARAMETER ExternalId
No description available.
.PARAMETER ExternalStatusRef
No description available.
.PARAMETER DateCreated
Date Created
.PARAMETER LastUpdated
Last Updated
.OUTPUTS

BackupRestore<PSCustomObject>
#>

function Initialize-BackupRestore {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${BackupResultId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${BackupId},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Backup},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${ContainerId},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Container},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Instance},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${RestoreToNew},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Status},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ErrorMessage},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${StartDate},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${EndDate},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${DurationMillis},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ExternalId},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ExternalStatusRef},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${DateCreated},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${LastUpdated}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => BackupRestore' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "backupResultId" = ${BackupResultId}
            "backupId" = ${BackupId}
            "backup" = ${Backup}
            "containerId" = ${ContainerId}
            "container" = ${Container}
            "instance" = ${Instance}
            "restoreToNew" = ${RestoreToNew}
            "status" = ${Status}
            "errorMessage" = ${ErrorMessage}
            "startDate" = ${StartDate}
            "endDate" = ${EndDate}
            "durationMillis" = ${DurationMillis}
            "externalId" = ${ExternalId}
            "externalStatusRef" = ${ExternalStatusRef}
            "dateCreated" = ${DateCreated}
            "lastUpdated" = ${LastUpdated}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to BackupRestore<PSCustomObject>

.DESCRIPTION

Convert from JSON to BackupRestore<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

BackupRestore<PSCustomObject>
#>
function ConvertFrom-JsonToBackupRestore {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => BackupRestore' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in BackupRestore
        $AllProperties = ("id", "backupResultId", "backupId", "backup", "containerId", "container", "instance", "restoreToNew", "status", "errorMessage", "startDate", "endDate", "durationMillis", "externalId", "externalStatusRef", "dateCreated", "lastUpdated")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "backupResultId"))) { #optional property not found
            $BackupResultId = $null
        } else {
            $BackupResultId = $JsonParameters.PSobject.Properties["backupResultId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "backupId"))) { #optional property not found
            $BackupId = $null
        } else {
            $BackupId = $JsonParameters.PSobject.Properties["backupId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "backup"))) { #optional property not found
            $Backup = $null
        } else {
            $Backup = $JsonParameters.PSobject.Properties["backup"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "containerId"))) { #optional property not found
            $ContainerId = $null
        } else {
            $ContainerId = $JsonParameters.PSobject.Properties["containerId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "container"))) { #optional property not found
            $Container = $null
        } else {
            $Container = $JsonParameters.PSobject.Properties["container"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "instance"))) { #optional property not found
            $Instance = $null
        } else {
            $Instance = $JsonParameters.PSobject.Properties["instance"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "restoreToNew"))) { #optional property not found
            $RestoreToNew = $null
        } else {
            $RestoreToNew = $JsonParameters.PSobject.Properties["restoreToNew"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "status"))) { #optional property not found
            $Status = $null
        } else {
            $Status = $JsonParameters.PSobject.Properties["status"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "errorMessage"))) { #optional property not found
            $ErrorMessage = $null
        } else {
            $ErrorMessage = $JsonParameters.PSobject.Properties["errorMessage"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "startDate"))) { #optional property not found
            $StartDate = $null
        } else {
            $StartDate = $JsonParameters.PSobject.Properties["startDate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "endDate"))) { #optional property not found
            $EndDate = $null
        } else {
            $EndDate = $JsonParameters.PSobject.Properties["endDate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "durationMillis"))) { #optional property not found
            $DurationMillis = $null
        } else {
            $DurationMillis = $JsonParameters.PSobject.Properties["durationMillis"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "externalId"))) { #optional property not found
            $ExternalId = $null
        } else {
            $ExternalId = $JsonParameters.PSobject.Properties["externalId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "externalStatusRef"))) { #optional property not found
            $ExternalStatusRef = $null
        } else {
            $ExternalStatusRef = $JsonParameters.PSobject.Properties["externalStatusRef"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dateCreated"))) { #optional property not found
            $DateCreated = $null
        } else {
            $DateCreated = $JsonParameters.PSobject.Properties["dateCreated"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lastUpdated"))) { #optional property not found
            $LastUpdated = $null
        } else {
            $LastUpdated = $JsonParameters.PSobject.Properties["lastUpdated"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "backupResultId" = ${BackupResultId}
            "backupId" = ${BackupId}
            "backup" = ${Backup}
            "containerId" = ${ContainerId}
            "container" = ${Container}
            "instance" = ${Instance}
            "restoreToNew" = ${RestoreToNew}
            "status" = ${Status}
            "errorMessage" = ${ErrorMessage}
            "startDate" = ${StartDate}
            "endDate" = ${EndDate}
            "durationMillis" = ${DurationMillis}
            "externalId" = ${ExternalId}
            "externalStatusRef" = ${ExternalStatusRef}
            "dateCreated" = ${DateCreated}
            "lastUpdated" = ${LastUpdated}
        }

        return $PSO
    }

}

