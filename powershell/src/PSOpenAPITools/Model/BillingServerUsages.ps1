#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Cost
No description available.
.PARAMETER Price
No description available.
.PARAMETER CreatedByUser
No description available.
.PARAMETER CreatedByUserId
No description available.
.PARAMETER SiteId
No description available.
.PARAMETER SiteName
No description available.
.PARAMETER SiteUUID
No description available.
.PARAMETER SiteCode
No description available.
.PARAMETER Currency
No description available.
.PARAMETER StartDate
No description available.
.PARAMETER EndDate
No description available.
.PARAMETER Status
No description available.
.PARAMETER Tags
No description available.
.PARAMETER ApplicablePrices
No description available.
.PARAMETER ServicePlanId
No description available.
.PARAMETER ServicePlanName
No description available.
.PARAMETER ResourcePoolId
No description available.
.PARAMETER ResourcePoolName
No description available.
.OUTPUTS

BillingServerUsages<PSCustomObject>
#>

function Initialize-BillingServerUsages {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${Cost},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${Price},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CreatedByUser},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${CreatedByUserId},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SiteId},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SiteName},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SiteUUID},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SiteCode},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Currency},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${StartDate},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${EndDate},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Status},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Tags},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${ApplicablePrices},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${ServicePlanId},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ServicePlanName},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${ResourcePoolId},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ResourcePoolName}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => BillingServerUsages' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "cost" = ${Cost}
            "price" = ${Price}
            "createdByUser" = ${CreatedByUser}
            "createdByUserId" = ${CreatedByUserId}
            "siteId" = ${SiteId}
            "siteName" = ${SiteName}
            "siteUUID" = ${SiteUUID}
            "siteCode" = ${SiteCode}
            "currency" = ${Currency}
            "startDate" = ${StartDate}
            "endDate" = ${EndDate}
            "status" = ${Status}
            "tags" = ${Tags}
            "applicablePrices" = ${ApplicablePrices}
            "servicePlanId" = ${ServicePlanId}
            "servicePlanName" = ${ServicePlanName}
            "resourcePoolId" = ${ResourcePoolId}
            "resourcePoolName" = ${ResourcePoolName}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to BillingServerUsages<PSCustomObject>

.DESCRIPTION

Convert from JSON to BillingServerUsages<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

BillingServerUsages<PSCustomObject>
#>
function ConvertFrom-JsonToBillingServerUsages {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => BillingServerUsages' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in BillingServerUsages
        $AllProperties = ("cost", "price", "createdByUser", "createdByUserId", "siteId", "siteName", "siteUUID", "siteCode", "currency", "startDate", "endDate", "status", "tags", "applicablePrices", "servicePlanId", "servicePlanName", "resourcePoolId", "resourcePoolName")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cost"))) { #optional property not found
            $Cost = $null
        } else {
            $Cost = $JsonParameters.PSobject.Properties["cost"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "price"))) { #optional property not found
            $Price = $null
        } else {
            $Price = $JsonParameters.PSobject.Properties["price"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "createdByUser"))) { #optional property not found
            $CreatedByUser = $null
        } else {
            $CreatedByUser = $JsonParameters.PSobject.Properties["createdByUser"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "createdByUserId"))) { #optional property not found
            $CreatedByUserId = $null
        } else {
            $CreatedByUserId = $JsonParameters.PSobject.Properties["createdByUserId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "siteId"))) { #optional property not found
            $SiteId = $null
        } else {
            $SiteId = $JsonParameters.PSobject.Properties["siteId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "siteName"))) { #optional property not found
            $SiteName = $null
        } else {
            $SiteName = $JsonParameters.PSobject.Properties["siteName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "siteUUID"))) { #optional property not found
            $SiteUUID = $null
        } else {
            $SiteUUID = $JsonParameters.PSobject.Properties["siteUUID"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "siteCode"))) { #optional property not found
            $SiteCode = $null
        } else {
            $SiteCode = $JsonParameters.PSobject.Properties["siteCode"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "currency"))) { #optional property not found
            $Currency = $null
        } else {
            $Currency = $JsonParameters.PSobject.Properties["currency"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "startDate"))) { #optional property not found
            $StartDate = $null
        } else {
            $StartDate = $JsonParameters.PSobject.Properties["startDate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "endDate"))) { #optional property not found
            $EndDate = $null
        } else {
            $EndDate = $JsonParameters.PSobject.Properties["endDate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "status"))) { #optional property not found
            $Status = $null
        } else {
            $Status = $JsonParameters.PSobject.Properties["status"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tags"))) { #optional property not found
            $Tags = $null
        } else {
            $Tags = $JsonParameters.PSobject.Properties["tags"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "applicablePrices"))) { #optional property not found
            $ApplicablePrices = $null
        } else {
            $ApplicablePrices = $JsonParameters.PSobject.Properties["applicablePrices"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "servicePlanId"))) { #optional property not found
            $ServicePlanId = $null
        } else {
            $ServicePlanId = $JsonParameters.PSobject.Properties["servicePlanId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "servicePlanName"))) { #optional property not found
            $ServicePlanName = $null
        } else {
            $ServicePlanName = $JsonParameters.PSobject.Properties["servicePlanName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "resourcePoolId"))) { #optional property not found
            $ResourcePoolId = $null
        } else {
            $ResourcePoolId = $JsonParameters.PSobject.Properties["resourcePoolId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "resourcePoolName"))) { #optional property not found
            $ResourcePoolName = $null
        } else {
            $ResourcePoolName = $JsonParameters.PSobject.Properties["resourcePoolName"].value
        }

        $PSO = [PSCustomObject]@{
            "cost" = ${Cost}
            "price" = ${Price}
            "createdByUser" = ${CreatedByUser}
            "createdByUserId" = ${CreatedByUserId}
            "siteId" = ${SiteId}
            "siteName" = ${SiteName}
            "siteUUID" = ${SiteUUID}
            "siteCode" = ${SiteCode}
            "currency" = ${Currency}
            "startDate" = ${StartDate}
            "endDate" = ${EndDate}
            "status" = ${Status}
            "tags" = ${Tags}
            "applicablePrices" = ${ApplicablePrices}
            "servicePlanId" = ${ServicePlanId}
            "servicePlanName" = ${ServicePlanName}
            "resourcePoolId" = ${ResourcePoolId}
            "resourcePoolName" = ${ResourcePoolName}
        }

        return $PSO
    }

}

