#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ResourcePermissions
No description available.
.PARAMETER ResourcePool
No description available.
.PARAMETER TenantPermissions
No description available.
.OUTPUTS

ClusterUpdatePermissions<PSCustomObject>
#>

function Initialize-ClusterUpdatePermissions {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${ResourcePermissions},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${ResourcePool},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${TenantPermissions}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ClusterUpdatePermissions' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "resourcePermissions" = ${ResourcePermissions}
            "resourcePool" = ${ResourcePool}
            "tenantPermissions" = ${TenantPermissions}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ClusterUpdatePermissions<PSCustomObject>

.DESCRIPTION

Convert from JSON to ClusterUpdatePermissions<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ClusterUpdatePermissions<PSCustomObject>
#>
function ConvertFrom-JsonToClusterUpdatePermissions {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ClusterUpdatePermissions' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ClusterUpdatePermissions
        $AllProperties = ("resourcePermissions", "resourcePool", "tenantPermissions")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "resourcePermissions"))) { #optional property not found
            $ResourcePermissions = $null
        } else {
            $ResourcePermissions = $JsonParameters.PSobject.Properties["resourcePermissions"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "resourcePool"))) { #optional property not found
            $ResourcePool = $null
        } else {
            $ResourcePool = $JsonParameters.PSobject.Properties["resourcePool"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tenantPermissions"))) { #optional property not found
            $TenantPermissions = $null
        } else {
            $TenantPermissions = $JsonParameters.PSobject.Properties["tenantPermissions"].value
        }

        $PSO = [PSCustomObject]@{
            "resourcePermissions" = ${ResourcePermissions}
            "resourcePool" = ${ResourcePool}
            "tenantPermissions" = ${TenantPermissions}
        }

        return $PSO
    }

}

