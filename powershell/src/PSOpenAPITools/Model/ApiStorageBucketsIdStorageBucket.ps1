#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Name
A unique name scoped to your account for the storage bucket
.PARAMETER ProviderType
The type of storage bucket
.PARAMETER DefaultBackupTarget
Default Backup Target
.PARAMETER CopyToStore
Archive Snapshots
.PARAMETER DefaultDeploymentTarget
Default Deployment Target
.PARAMETER DefaultVirtualImageTarget
Default Virtual Image Store
.PARAMETER RetentionPolicyType
Cleanup mode. `backup` - Move old files to a backup provider. `delete` - Delete old files. `none` - Keep all files.
.PARAMETER RetentionPolicyDays
The number of days old a file must be before it is deleted.
.PARAMETER RetentionProvider
The backup Storage Bucket where old files are moved to.
.PARAMETER BucketName
The name of the bucket. Only applies to `Amazon`, `Azure`, `CIFS`, `NFSv3`, `Openstack Swift`, and `Rackspace CDN`.
.PARAMETER CreateBucket
Create the bucket if it does not exist. Only applies to `Amazon`, `Azure`, `Openstack Swift`, and `Rackspace CDN`.
.PARAMETER Config
No description available.
.OUTPUTS

ApiStorageBucketsIdStorageBucket<PSCustomObject>
#>

function Initialize-ApiStorageBucketsIdStorageBucket {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("s3", "azure", "cifs", "local", "nfs", "openstack", "rackspace")]
        [String]
        ${ProviderType},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${DefaultBackupTarget} = $false,
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${CopyToStore},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${DefaultDeploymentTarget} = $false,
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${DefaultVirtualImageTarget} = $false,
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("backup", "delete", "none")]
        [String]
        ${RetentionPolicyType} = "none",
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${RetentionPolicyDays},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RetentionProvider},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${BucketName},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${CreateBucket} = $false,
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Config}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ApiStorageBucketsIdStorageBucket' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "providerType" = ${ProviderType}
            "defaultBackupTarget" = ${DefaultBackupTarget}
            "copyToStore" = ${CopyToStore}
            "defaultDeploymentTarget" = ${DefaultDeploymentTarget}
            "defaultVirtualImageTarget" = ${DefaultVirtualImageTarget}
            "retentionPolicyType" = ${RetentionPolicyType}
            "retentionPolicyDays" = ${RetentionPolicyDays}
            "retentionProvider" = ${RetentionProvider}
            "bucketName" = ${BucketName}
            "createBucket" = ${CreateBucket}
            "config" = ${Config}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ApiStorageBucketsIdStorageBucket<PSCustomObject>

.DESCRIPTION

Convert from JSON to ApiStorageBucketsIdStorageBucket<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ApiStorageBucketsIdStorageBucket<PSCustomObject>
#>
function ConvertFrom-JsonToApiStorageBucketsIdStorageBucket {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ApiStorageBucketsIdStorageBucket' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ApiStorageBucketsIdStorageBucket
        $AllProperties = ("name", "providerType", "defaultBackupTarget", "copyToStore", "defaultDeploymentTarget", "defaultVirtualImageTarget", "retentionPolicyType", "retentionPolicyDays", "retentionProvider", "bucketName", "createBucket", "config")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "providerType"))) { #optional property not found
            $ProviderType = $null
        } else {
            $ProviderType = $JsonParameters.PSobject.Properties["providerType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "defaultBackupTarget"))) { #optional property not found
            $DefaultBackupTarget = $null
        } else {
            $DefaultBackupTarget = $JsonParameters.PSobject.Properties["defaultBackupTarget"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "copyToStore"))) { #optional property not found
            $CopyToStore = $null
        } else {
            $CopyToStore = $JsonParameters.PSobject.Properties["copyToStore"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "defaultDeploymentTarget"))) { #optional property not found
            $DefaultDeploymentTarget = $null
        } else {
            $DefaultDeploymentTarget = $JsonParameters.PSobject.Properties["defaultDeploymentTarget"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "defaultVirtualImageTarget"))) { #optional property not found
            $DefaultVirtualImageTarget = $null
        } else {
            $DefaultVirtualImageTarget = $JsonParameters.PSobject.Properties["defaultVirtualImageTarget"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "retentionPolicyType"))) { #optional property not found
            $RetentionPolicyType = $null
        } else {
            $RetentionPolicyType = $JsonParameters.PSobject.Properties["retentionPolicyType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "retentionPolicyDays"))) { #optional property not found
            $RetentionPolicyDays = $null
        } else {
            $RetentionPolicyDays = $JsonParameters.PSobject.Properties["retentionPolicyDays"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "retentionProvider"))) { #optional property not found
            $RetentionProvider = $null
        } else {
            $RetentionProvider = $JsonParameters.PSobject.Properties["retentionProvider"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "bucketName"))) { #optional property not found
            $BucketName = $null
        } else {
            $BucketName = $JsonParameters.PSobject.Properties["bucketName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "createBucket"))) { #optional property not found
            $CreateBucket = $null
        } else {
            $CreateBucket = $JsonParameters.PSobject.Properties["createBucket"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "config"))) { #optional property not found
            $Config = $null
        } else {
            $Config = $JsonParameters.PSobject.Properties["config"].value
        }

        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "providerType" = ${ProviderType}
            "defaultBackupTarget" = ${DefaultBackupTarget}
            "copyToStore" = ${CopyToStore}
            "defaultDeploymentTarget" = ${DefaultDeploymentTarget}
            "defaultVirtualImageTarget" = ${DefaultVirtualImageTarget}
            "retentionPolicyType" = ${RetentionPolicyType}
            "retentionPolicyDays" = ${RetentionPolicyDays}
            "retentionProvider" = ${RetentionProvider}
            "bucketName" = ${BucketName}
            "createBucket" = ${CreateBucket}
            "config" = ${Config}
        }

        return $PSO
    }

}

