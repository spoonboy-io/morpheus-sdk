#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
No description available.
.PARAMETER Name
No description available.
.PARAMETER Code
No description available.
.PARAMETER Category
No description available.
.PARAMETER Visibility
No description available.
.PARAMETER Description
No description available.
.PARAMETER Location
No description available.
.PARAMETER Enabled
No description available.
.PARAMETER ServiceUrl
No description available.
.PARAMETER ServiceHost
No description available.
.PARAMETER ServicePath
No description available.
.PARAMETER ServiceHostname
No description available.
.PARAMETER ServicePort
No description available.
.PARAMETER ServiceUsername
No description available.
.PARAMETER ServicePassword
No description available.
.PARAMETER ServicePasswordHash
No description available.
.PARAMETER ServiceToken
No description available.
.PARAMETER ServiceTokenHash
No description available.
.PARAMETER ServiceAccess
No description available.
.PARAMETER ServiceAccessHash
No description available.
.PARAMETER ServiceCert
No description available.
.PARAMETER ServiceCertHash
No description available.
.PARAMETER ServiceVersion
No description available.
.PARAMETER SearchDomains
No description available.
.PARAMETER EnableInternalDns
No description available.
.PARAMETER InternalId
No description available.
.PARAMETER ExternalId
No description available.
.PARAMETER DatacenterId
No description available.
.PARAMETER Status
No description available.
.PARAMETER StatusDate
No description available.
.PARAMETER StatusMessage
No description available.
.PARAMETER InventoryLevel
No description available.
.PARAMETER LastSync
No description available.
.PARAMETER NextRunDate
No description available.
.PARAMETER LastSyncDuration
No description available.
.PARAMETER DateCreated
No description available.
.PARAMETER LastUpdated
No description available.
.PARAMETER Managed
No description available.
.PARAMETER Labels
No description available.
.PARAMETER ServiceEntry
No description available.
.PARAMETER CreatedBy
No description available.
.PARAMETER UserGroup
No description available.
.PARAMETER Layout
No description available.
.PARAMETER Owner
No description available.
.PARAMETER Servers
No description available.
.PARAMETER Accounts
No description available.
.PARAMETER Integrations
No description available.
.PARAMETER Site
No description available.
.PARAMETER Type
No description available.
.PARAMETER Zone
No description available.
.PARAMETER WorkerStats
No description available.
.PARAMETER Config
No description available.
.OUTPUTS

Clusters<PSCustomObject>
#>

function Initialize-Clusters {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Code},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Category},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Visibility},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Location},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Enabled},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ServiceUrl},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ServiceHost},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ServicePath},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ServiceHostname},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${ServicePort},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ServiceUsername},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ServicePassword},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ServicePasswordHash},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ServiceToken},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ServiceTokenHash},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ServiceAccess},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ServiceAccessHash},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ServiceCert},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ServiceCertHash},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ServiceVersion},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SearchDomains},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${EnableInternalDns},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${InternalId},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ExternalId},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DatacenterId},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Status},
        [Parameter(Position = 29, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${StatusDate},
        [Parameter(Position = 30, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${StatusMessage},
        [Parameter(Position = 31, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${InventoryLevel},
        [Parameter(Position = 32, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${LastSync},
        [Parameter(Position = 33, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${NextRunDate},
        [Parameter(Position = 34, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${LastSyncDuration},
        [Parameter(Position = 35, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${DateCreated},
        [Parameter(Position = 36, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${LastUpdated},
        [Parameter(Position = 37, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Managed},
        [Parameter(Position = 38, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${Labels},
        [Parameter(Position = 39, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ServiceEntry},
        [Parameter(Position = 40, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${CreatedBy},
        [Parameter(Position = 41, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${UserGroup},
        [Parameter(Position = 42, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Layout},
        [Parameter(Position = 43, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Owner},
        [Parameter(Position = 44, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Servers},
        [Parameter(Position = 45, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Accounts},
        [Parameter(Position = 46, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Integrations},
        [Parameter(Position = 47, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Site},
        [Parameter(Position = 48, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Type},
        [Parameter(Position = 49, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Zone},
        [Parameter(Position = 50, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${WorkerStats},
        [Parameter(Position = 51, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Config}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => Clusters' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "name" = ${Name}
            "code" = ${Code}
            "category" = ${Category}
            "visibility" = ${Visibility}
            "description" = ${Description}
            "location" = ${Location}
            "enabled" = ${Enabled}
            "serviceUrl" = ${ServiceUrl}
            "serviceHost" = ${ServiceHost}
            "servicePath" = ${ServicePath}
            "serviceHostname" = ${ServiceHostname}
            "servicePort" = ${ServicePort}
            "serviceUsername" = ${ServiceUsername}
            "servicePassword" = ${ServicePassword}
            "servicePasswordHash" = ${ServicePasswordHash}
            "serviceToken" = ${ServiceToken}
            "serviceTokenHash" = ${ServiceTokenHash}
            "serviceAccess" = ${ServiceAccess}
            "serviceAccessHash" = ${ServiceAccessHash}
            "serviceCert" = ${ServiceCert}
            "serviceCertHash" = ${ServiceCertHash}
            "serviceVersion" = ${ServiceVersion}
            "searchDomains" = ${SearchDomains}
            "enableInternalDns" = ${EnableInternalDns}
            "internalId" = ${InternalId}
            "externalId" = ${ExternalId}
            "datacenterId" = ${DatacenterId}
            "status" = ${Status}
            "statusDate" = ${StatusDate}
            "statusMessage" = ${StatusMessage}
            "inventoryLevel" = ${InventoryLevel}
            "lastSync" = ${LastSync}
            "nextRunDate" = ${NextRunDate}
            "lastSyncDuration" = ${LastSyncDuration}
            "dateCreated" = ${DateCreated}
            "lastUpdated" = ${LastUpdated}
            "managed" = ${Managed}
            "labels" = ${Labels}
            "serviceEntry" = ${ServiceEntry}
            "createdBy" = ${CreatedBy}
            "userGroup" = ${UserGroup}
            "layout" = ${Layout}
            "owner" = ${Owner}
            "servers" = ${Servers}
            "accounts" = ${Accounts}
            "integrations" = ${Integrations}
            "site" = ${Site}
            "type" = ${Type}
            "zone" = ${Zone}
            "workerStats" = ${WorkerStats}
            "config" = ${Config}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to Clusters<PSCustomObject>

.DESCRIPTION

Convert from JSON to Clusters<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

Clusters<PSCustomObject>
#>
function ConvertFrom-JsonToClusters {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => Clusters' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in Clusters
        $AllProperties = ("id", "name", "code", "category", "visibility", "description", "location", "enabled", "serviceUrl", "serviceHost", "servicePath", "serviceHostname", "servicePort", "serviceUsername", "servicePassword", "servicePasswordHash", "serviceToken", "serviceTokenHash", "serviceAccess", "serviceAccessHash", "serviceCert", "serviceCertHash", "serviceVersion", "searchDomains", "enableInternalDns", "internalId", "externalId", "datacenterId", "status", "statusDate", "statusMessage", "inventoryLevel", "lastSync", "nextRunDate", "lastSyncDuration", "dateCreated", "lastUpdated", "managed", "labels", "serviceEntry", "createdBy", "userGroup", "layout", "owner", "servers", "accounts", "integrations", "site", "type", "zone", "workerStats", "config")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "code"))) { #optional property not found
            $Code = $null
        } else {
            $Code = $JsonParameters.PSobject.Properties["code"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "category"))) { #optional property not found
            $Category = $null
        } else {
            $Category = $JsonParameters.PSobject.Properties["category"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "visibility"))) { #optional property not found
            $Visibility = $null
        } else {
            $Visibility = $JsonParameters.PSobject.Properties["visibility"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "location"))) { #optional property not found
            $Location = $null
        } else {
            $Location = $JsonParameters.PSobject.Properties["location"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "enabled"))) { #optional property not found
            $Enabled = $null
        } else {
            $Enabled = $JsonParameters.PSobject.Properties["enabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "serviceUrl"))) { #optional property not found
            $ServiceUrl = $null
        } else {
            $ServiceUrl = $JsonParameters.PSobject.Properties["serviceUrl"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "serviceHost"))) { #optional property not found
            $ServiceHost = $null
        } else {
            $ServiceHost = $JsonParameters.PSobject.Properties["serviceHost"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "servicePath"))) { #optional property not found
            $ServicePath = $null
        } else {
            $ServicePath = $JsonParameters.PSobject.Properties["servicePath"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "serviceHostname"))) { #optional property not found
            $ServiceHostname = $null
        } else {
            $ServiceHostname = $JsonParameters.PSobject.Properties["serviceHostname"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "servicePort"))) { #optional property not found
            $ServicePort = $null
        } else {
            $ServicePort = $JsonParameters.PSobject.Properties["servicePort"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "serviceUsername"))) { #optional property not found
            $ServiceUsername = $null
        } else {
            $ServiceUsername = $JsonParameters.PSobject.Properties["serviceUsername"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "servicePassword"))) { #optional property not found
            $ServicePassword = $null
        } else {
            $ServicePassword = $JsonParameters.PSobject.Properties["servicePassword"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "servicePasswordHash"))) { #optional property not found
            $ServicePasswordHash = $null
        } else {
            $ServicePasswordHash = $JsonParameters.PSobject.Properties["servicePasswordHash"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "serviceToken"))) { #optional property not found
            $ServiceToken = $null
        } else {
            $ServiceToken = $JsonParameters.PSobject.Properties["serviceToken"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "serviceTokenHash"))) { #optional property not found
            $ServiceTokenHash = $null
        } else {
            $ServiceTokenHash = $JsonParameters.PSobject.Properties["serviceTokenHash"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "serviceAccess"))) { #optional property not found
            $ServiceAccess = $null
        } else {
            $ServiceAccess = $JsonParameters.PSobject.Properties["serviceAccess"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "serviceAccessHash"))) { #optional property not found
            $ServiceAccessHash = $null
        } else {
            $ServiceAccessHash = $JsonParameters.PSobject.Properties["serviceAccessHash"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "serviceCert"))) { #optional property not found
            $ServiceCert = $null
        } else {
            $ServiceCert = $JsonParameters.PSobject.Properties["serviceCert"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "serviceCertHash"))) { #optional property not found
            $ServiceCertHash = $null
        } else {
            $ServiceCertHash = $JsonParameters.PSobject.Properties["serviceCertHash"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "serviceVersion"))) { #optional property not found
            $ServiceVersion = $null
        } else {
            $ServiceVersion = $JsonParameters.PSobject.Properties["serviceVersion"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "searchDomains"))) { #optional property not found
            $SearchDomains = $null
        } else {
            $SearchDomains = $JsonParameters.PSobject.Properties["searchDomains"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "enableInternalDns"))) { #optional property not found
            $EnableInternalDns = $null
        } else {
            $EnableInternalDns = $JsonParameters.PSobject.Properties["enableInternalDns"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "internalId"))) { #optional property not found
            $InternalId = $null
        } else {
            $InternalId = $JsonParameters.PSobject.Properties["internalId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "externalId"))) { #optional property not found
            $ExternalId = $null
        } else {
            $ExternalId = $JsonParameters.PSobject.Properties["externalId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "datacenterId"))) { #optional property not found
            $DatacenterId = $null
        } else {
            $DatacenterId = $JsonParameters.PSobject.Properties["datacenterId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "status"))) { #optional property not found
            $Status = $null
        } else {
            $Status = $JsonParameters.PSobject.Properties["status"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "statusDate"))) { #optional property not found
            $StatusDate = $null
        } else {
            $StatusDate = $JsonParameters.PSobject.Properties["statusDate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "statusMessage"))) { #optional property not found
            $StatusMessage = $null
        } else {
            $StatusMessage = $JsonParameters.PSobject.Properties["statusMessage"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "inventoryLevel"))) { #optional property not found
            $InventoryLevel = $null
        } else {
            $InventoryLevel = $JsonParameters.PSobject.Properties["inventoryLevel"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lastSync"))) { #optional property not found
            $LastSync = $null
        } else {
            $LastSync = $JsonParameters.PSobject.Properties["lastSync"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "nextRunDate"))) { #optional property not found
            $NextRunDate = $null
        } else {
            $NextRunDate = $JsonParameters.PSobject.Properties["nextRunDate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lastSyncDuration"))) { #optional property not found
            $LastSyncDuration = $null
        } else {
            $LastSyncDuration = $JsonParameters.PSobject.Properties["lastSyncDuration"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dateCreated"))) { #optional property not found
            $DateCreated = $null
        } else {
            $DateCreated = $JsonParameters.PSobject.Properties["dateCreated"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lastUpdated"))) { #optional property not found
            $LastUpdated = $null
        } else {
            $LastUpdated = $JsonParameters.PSobject.Properties["lastUpdated"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "managed"))) { #optional property not found
            $Managed = $null
        } else {
            $Managed = $JsonParameters.PSobject.Properties["managed"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "labels"))) { #optional property not found
            $Labels = $null
        } else {
            $Labels = $JsonParameters.PSobject.Properties["labels"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "serviceEntry"))) { #optional property not found
            $ServiceEntry = $null
        } else {
            $ServiceEntry = $JsonParameters.PSobject.Properties["serviceEntry"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "createdBy"))) { #optional property not found
            $CreatedBy = $null
        } else {
            $CreatedBy = $JsonParameters.PSobject.Properties["createdBy"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "userGroup"))) { #optional property not found
            $UserGroup = $null
        } else {
            $UserGroup = $JsonParameters.PSobject.Properties["userGroup"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "layout"))) { #optional property not found
            $Layout = $null
        } else {
            $Layout = $JsonParameters.PSobject.Properties["layout"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "owner"))) { #optional property not found
            $Owner = $null
        } else {
            $Owner = $JsonParameters.PSobject.Properties["owner"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "servers"))) { #optional property not found
            $Servers = $null
        } else {
            $Servers = $JsonParameters.PSobject.Properties["servers"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "accounts"))) { #optional property not found
            $Accounts = $null
        } else {
            $Accounts = $JsonParameters.PSobject.Properties["accounts"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "integrations"))) { #optional property not found
            $Integrations = $null
        } else {
            $Integrations = $JsonParameters.PSobject.Properties["integrations"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "site"))) { #optional property not found
            $Site = $null
        } else {
            $Site = $JsonParameters.PSobject.Properties["site"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "zone"))) { #optional property not found
            $Zone = $null
        } else {
            $Zone = $JsonParameters.PSobject.Properties["zone"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "workerStats"))) { #optional property not found
            $WorkerStats = $null
        } else {
            $WorkerStats = $JsonParameters.PSobject.Properties["workerStats"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "config"))) { #optional property not found
            $Config = $null
        } else {
            $Config = $JsonParameters.PSobject.Properties["config"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "name" = ${Name}
            "code" = ${Code}
            "category" = ${Category}
            "visibility" = ${Visibility}
            "description" = ${Description}
            "location" = ${Location}
            "enabled" = ${Enabled}
            "serviceUrl" = ${ServiceUrl}
            "serviceHost" = ${ServiceHost}
            "servicePath" = ${ServicePath}
            "serviceHostname" = ${ServiceHostname}
            "servicePort" = ${ServicePort}
            "serviceUsername" = ${ServiceUsername}
            "servicePassword" = ${ServicePassword}
            "servicePasswordHash" = ${ServicePasswordHash}
            "serviceToken" = ${ServiceToken}
            "serviceTokenHash" = ${ServiceTokenHash}
            "serviceAccess" = ${ServiceAccess}
            "serviceAccessHash" = ${ServiceAccessHash}
            "serviceCert" = ${ServiceCert}
            "serviceCertHash" = ${ServiceCertHash}
            "serviceVersion" = ${ServiceVersion}
            "searchDomains" = ${SearchDomains}
            "enableInternalDns" = ${EnableInternalDns}
            "internalId" = ${InternalId}
            "externalId" = ${ExternalId}
            "datacenterId" = ${DatacenterId}
            "status" = ${Status}
            "statusDate" = ${StatusDate}
            "statusMessage" = ${StatusMessage}
            "inventoryLevel" = ${InventoryLevel}
            "lastSync" = ${LastSync}
            "nextRunDate" = ${NextRunDate}
            "lastSyncDuration" = ${LastSyncDuration}
            "dateCreated" = ${DateCreated}
            "lastUpdated" = ${LastUpdated}
            "managed" = ${Managed}
            "labels" = ${Labels}
            "serviceEntry" = ${ServiceEntry}
            "createdBy" = ${CreatedBy}
            "userGroup" = ${UserGroup}
            "layout" = ${Layout}
            "owner" = ${Owner}
            "servers" = ${Servers}
            "accounts" = ${Accounts}
            "integrations" = ${Integrations}
            "site" = ${Site}
            "type" = ${Type}
            "zone" = ${Zone}
            "workerStats" = ${WorkerStats}
            "config" = ${Config}
        }

        return $PSO
    }

}

