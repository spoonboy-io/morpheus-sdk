#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Global
Global (All Tenants), load users from all tenants. The default is to only see your own tenant. This is only available to master tenant users with permission to manage tenants and users.
.OUTPUTS

Global<PSCustomObject>
#>

function Initialize-Global {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Global} = $false
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => Global' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "global" = ${Global}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to Global<PSCustomObject>

.DESCRIPTION

Convert from JSON to Global<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

Global<PSCustomObject>
#>
function ConvertFrom-JsonToGlobal {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => Global' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in Global
        $AllProperties = ("global")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "global"))) { #optional property not found
            $Global = $null
        } else {
            $Global = $JsonParameters.PSobject.Properties["global"].value
        }

        $PSO = [PSCustomObject]@{
            "global" = ${Global}
        }

        return $PSO
    }

}

