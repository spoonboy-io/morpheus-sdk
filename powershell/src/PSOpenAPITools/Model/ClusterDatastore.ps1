#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
No description available.
.PARAMETER Name
No description available.
.PARAMETER Code
No description available.
.PARAMETER Type
No description available.
.PARAMETER Visibility
No description available.
.PARAMETER StorageSize
No description available.
.PARAMETER FreeSpace
No description available.
.PARAMETER DrsEnabled
No description available.
.PARAMETER Active
No description available.
.PARAMETER AllowWrite
No description available.
.PARAMETER DefaultStore
No description available.
.PARAMETER Online
No description available.
.PARAMETER AllowRead
No description available.
.PARAMETER AllowProvision
No description available.
.PARAMETER RefType
No description available.
.PARAMETER RefId
No description available.
.PARAMETER ExternalId
No description available.
.PARAMETER Zone
No description available.
.PARAMETER ZonePool
No description available.
.PARAMETER Owner
No description available.
.PARAMETER Tenants
No description available.
.PARAMETER Permissions
No description available.
.PARAMETER Datastores
No description available.
.OUTPUTS

ClusterDatastore<PSCustomObject>
#>

function Initialize-ClusterDatastore {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Code},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Type},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Visibility},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${StorageSize},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${FreeSpace},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${DrsEnabled},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Active},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${AllowWrite},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${DefaultStore},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Online},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${AllowRead},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${AllowProvision},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RefType},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${RefId},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ExternalId},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Zone},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${ZonePool},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Owner},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Tenants},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Permissions},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Datastores}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ClusterDatastore' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "name" = ${Name}
            "code" = ${Code}
            "type" = ${Type}
            "visibility" = ${Visibility}
            "storageSize" = ${StorageSize}
            "freeSpace" = ${FreeSpace}
            "drsEnabled" = ${DrsEnabled}
            "active" = ${Active}
            "allowWrite" = ${AllowWrite}
            "defaultStore" = ${DefaultStore}
            "online" = ${Online}
            "allowRead" = ${AllowRead}
            "allowProvision" = ${AllowProvision}
            "refType" = ${RefType}
            "refId" = ${RefId}
            "externalId" = ${ExternalId}
            "zone" = ${Zone}
            "zonePool" = ${ZonePool}
            "owner" = ${Owner}
            "tenants" = ${Tenants}
            "permissions" = ${Permissions}
            "datastores" = ${Datastores}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ClusterDatastore<PSCustomObject>

.DESCRIPTION

Convert from JSON to ClusterDatastore<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ClusterDatastore<PSCustomObject>
#>
function ConvertFrom-JsonToClusterDatastore {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ClusterDatastore' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ClusterDatastore
        $AllProperties = ("id", "name", "code", "type", "visibility", "storageSize", "freeSpace", "drsEnabled", "active", "allowWrite", "defaultStore", "online", "allowRead", "allowProvision", "refType", "refId", "externalId", "zone", "zonePool", "owner", "tenants", "permissions", "datastores")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "code"))) { #optional property not found
            $Code = $null
        } else {
            $Code = $JsonParameters.PSobject.Properties["code"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "visibility"))) { #optional property not found
            $Visibility = $null
        } else {
            $Visibility = $JsonParameters.PSobject.Properties["visibility"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "storageSize"))) { #optional property not found
            $StorageSize = $null
        } else {
            $StorageSize = $JsonParameters.PSobject.Properties["storageSize"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "freeSpace"))) { #optional property not found
            $FreeSpace = $null
        } else {
            $FreeSpace = $JsonParameters.PSobject.Properties["freeSpace"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "drsEnabled"))) { #optional property not found
            $DrsEnabled = $null
        } else {
            $DrsEnabled = $JsonParameters.PSobject.Properties["drsEnabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "active"))) { #optional property not found
            $Active = $null
        } else {
            $Active = $JsonParameters.PSobject.Properties["active"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "allowWrite"))) { #optional property not found
            $AllowWrite = $null
        } else {
            $AllowWrite = $JsonParameters.PSobject.Properties["allowWrite"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "defaultStore"))) { #optional property not found
            $DefaultStore = $null
        } else {
            $DefaultStore = $JsonParameters.PSobject.Properties["defaultStore"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "online"))) { #optional property not found
            $Online = $null
        } else {
            $Online = $JsonParameters.PSobject.Properties["online"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "allowRead"))) { #optional property not found
            $AllowRead = $null
        } else {
            $AllowRead = $JsonParameters.PSobject.Properties["allowRead"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "allowProvision"))) { #optional property not found
            $AllowProvision = $null
        } else {
            $AllowProvision = $JsonParameters.PSobject.Properties["allowProvision"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "refType"))) { #optional property not found
            $RefType = $null
        } else {
            $RefType = $JsonParameters.PSobject.Properties["refType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "refId"))) { #optional property not found
            $RefId = $null
        } else {
            $RefId = $JsonParameters.PSobject.Properties["refId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "externalId"))) { #optional property not found
            $ExternalId = $null
        } else {
            $ExternalId = $JsonParameters.PSobject.Properties["externalId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "zone"))) { #optional property not found
            $Zone = $null
        } else {
            $Zone = $JsonParameters.PSobject.Properties["zone"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "zonePool"))) { #optional property not found
            $ZonePool = $null
        } else {
            $ZonePool = $JsonParameters.PSobject.Properties["zonePool"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "owner"))) { #optional property not found
            $Owner = $null
        } else {
            $Owner = $JsonParameters.PSobject.Properties["owner"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tenants"))) { #optional property not found
            $Tenants = $null
        } else {
            $Tenants = $JsonParameters.PSobject.Properties["tenants"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "permissions"))) { #optional property not found
            $Permissions = $null
        } else {
            $Permissions = $JsonParameters.PSobject.Properties["permissions"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "datastores"))) { #optional property not found
            $Datastores = $null
        } else {
            $Datastores = $JsonParameters.PSobject.Properties["datastores"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "name" = ${Name}
            "code" = ${Code}
            "type" = ${Type}
            "visibility" = ${Visibility}
            "storageSize" = ${StorageSize}
            "freeSpace" = ${FreeSpace}
            "drsEnabled" = ${DrsEnabled}
            "active" = ${Active}
            "allowWrite" = ${AllowWrite}
            "defaultStore" = ${DefaultStore}
            "online" = ${Online}
            "allowRead" = ${AllowRead}
            "allowProvision" = ${AllowProvision}
            "refType" = ${RefType}
            "refId" = ${RefId}
            "externalId" = ${ExternalId}
            "zone" = ${Zone}
            "zonePool" = ${ZonePool}
            "owner" = ${Owner}
            "tenants" = ${Tenants}
            "permissions" = ${Permissions}
            "datastores" = ${Datastores}
        }

        return $PSO
    }

}

