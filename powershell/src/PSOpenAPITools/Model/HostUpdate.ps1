#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Name
Unique name scoped to your account for the server.
.PARAMETER Description
Optional description field.
.PARAMETER SshUsername
SSH Username
.PARAMETER SshPassword
SSH Password
.PARAMETER PowerScheduleType
Power schedule ID.
.PARAMETER Labels
No description available.
.PARAMETER Tags
Metadata tags, Array of objects having a name and value.
.PARAMETER AddTags
Add or update value of Metadata tags, Array of objects having a name and value.
.PARAMETER RemoveTags
Remove Metadata tags, Array of objects having a name and an optional value. If value is passed, it must match to be removed.
.PARAMETER GuestConsoleType
The Type of guest console this server provides such as disabled, vnc, rdp, ssh
.PARAMETER GuestConsoleUsername
The optional guest console username if you don't want to use the user defaults
.PARAMETER GuestConsolePassword
The optional guest console password if not using the accessing users creds
.PARAMETER GuestConsolePort
The port the guest console is being accessed from
.PARAMETER GuestConsolePreferred
Can turn off guest console preferences on server in favor of hypervisor console
.OUTPUTS

HostUpdate<PSCustomObject>
#>

function Initialize-HostUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SshUsername},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SshPassword},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${PowerScheduleType},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${Labels},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Tags},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${AddTags},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${RemoveTags},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${GuestConsoleType},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${GuestConsoleUsername},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${GuestConsolePassword},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${GuestConsolePort},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${GuestConsolePreferred} = $true
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => HostUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "description" = ${Description}
            "sshUsername" = ${SshUsername}
            "sshPassword" = ${SshPassword}
            "powerScheduleType" = ${PowerScheduleType}
            "labels" = ${Labels}
            "tags" = ${Tags}
            "addTags" = ${AddTags}
            "removeTags" = ${RemoveTags}
            "guestConsoleType" = ${GuestConsoleType}
            "guestConsoleUsername" = ${GuestConsoleUsername}
            "guestConsolePassword" = ${GuestConsolePassword}
            "guestConsolePort" = ${GuestConsolePort}
            "guestConsolePreferred" = ${GuestConsolePreferred}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to HostUpdate<PSCustomObject>

.DESCRIPTION

Convert from JSON to HostUpdate<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

HostUpdate<PSCustomObject>
#>
function ConvertFrom-JsonToHostUpdate {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => HostUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in HostUpdate
        $AllProperties = ("name", "description", "sshUsername", "sshPassword", "powerScheduleType", "labels", "tags", "addTags", "removeTags", "guestConsoleType", "guestConsoleUsername", "guestConsolePassword", "guestConsolePort", "guestConsolePreferred")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sshUsername"))) { #optional property not found
            $SshUsername = $null
        } else {
            $SshUsername = $JsonParameters.PSobject.Properties["sshUsername"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sshPassword"))) { #optional property not found
            $SshPassword = $null
        } else {
            $SshPassword = $JsonParameters.PSobject.Properties["sshPassword"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "powerScheduleType"))) { #optional property not found
            $PowerScheduleType = $null
        } else {
            $PowerScheduleType = $JsonParameters.PSobject.Properties["powerScheduleType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "labels"))) { #optional property not found
            $Labels = $null
        } else {
            $Labels = $JsonParameters.PSobject.Properties["labels"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tags"))) { #optional property not found
            $Tags = $null
        } else {
            $Tags = $JsonParameters.PSobject.Properties["tags"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "addTags"))) { #optional property not found
            $AddTags = $null
        } else {
            $AddTags = $JsonParameters.PSobject.Properties["addTags"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "removeTags"))) { #optional property not found
            $RemoveTags = $null
        } else {
            $RemoveTags = $JsonParameters.PSobject.Properties["removeTags"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "guestConsoleType"))) { #optional property not found
            $GuestConsoleType = $null
        } else {
            $GuestConsoleType = $JsonParameters.PSobject.Properties["guestConsoleType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "guestConsoleUsername"))) { #optional property not found
            $GuestConsoleUsername = $null
        } else {
            $GuestConsoleUsername = $JsonParameters.PSobject.Properties["guestConsoleUsername"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "guestConsolePassword"))) { #optional property not found
            $GuestConsolePassword = $null
        } else {
            $GuestConsolePassword = $JsonParameters.PSobject.Properties["guestConsolePassword"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "guestConsolePort"))) { #optional property not found
            $GuestConsolePort = $null
        } else {
            $GuestConsolePort = $JsonParameters.PSobject.Properties["guestConsolePort"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "guestConsolePreferred"))) { #optional property not found
            $GuestConsolePreferred = $null
        } else {
            $GuestConsolePreferred = $JsonParameters.PSobject.Properties["guestConsolePreferred"].value
        }

        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "description" = ${Description}
            "sshUsername" = ${SshUsername}
            "sshPassword" = ${SshPassword}
            "powerScheduleType" = ${PowerScheduleType}
            "labels" = ${Labels}
            "tags" = ${Tags}
            "addTags" = ${AddTags}
            "removeTags" = ${RemoveTags}
            "guestConsoleType" = ${GuestConsoleType}
            "guestConsoleUsername" = ${GuestConsoleUsername}
            "guestConsolePassword" = ${GuestConsolePassword}
            "guestConsolePort" = ${GuestConsolePort}
            "guestConsolePreferred" = ${GuestConsolePreferred}
        }

        return $PSO
    }

}

