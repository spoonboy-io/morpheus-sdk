#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Type
Code value for the report type you want to run
.PARAMETER StartDate
No description available.
.PARAMETER EndDate
No description available.
.PARAMETER StartMonth
No description available.
.PARAMETER EndMonth
No description available.
.PARAMETER GroupId
The Group ID filter for the report
.PARAMETER CloudId
The Cloud ID filter for the report
.OUTPUTS

ApiReportsReport<PSCustomObject>
#>

function Initialize-ApiReportsReport {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Type},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${StartDate},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${EndDate},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${StartMonth},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${EndMonth},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${GroupId},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${CloudId}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ApiReportsReport' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$Type) {
            throw "invalid value for 'Type', 'Type' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "type" = ${Type}
            "startDate" = ${StartDate}
            "endDate" = ${EndDate}
            "startMonth" = ${StartMonth}
            "endMonth" = ${EndMonth}
            "groupId" = ${GroupId}
            "cloudId" = ${CloudId}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ApiReportsReport<PSCustomObject>

.DESCRIPTION

Convert from JSON to ApiReportsReport<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ApiReportsReport<PSCustomObject>
#>
function ConvertFrom-JsonToApiReportsReport {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ApiReportsReport' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ApiReportsReport
        $AllProperties = ("type", "startDate", "endDate", "startMonth", "endMonth", "groupId", "cloudId")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property `type` missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) {
            throw "Error! JSON cannot be serialized due to the required property `type` missing."
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "startDate"))) { #optional property not found
            $StartDate = $null
        } else {
            $StartDate = $JsonParameters.PSobject.Properties["startDate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "endDate"))) { #optional property not found
            $EndDate = $null
        } else {
            $EndDate = $JsonParameters.PSobject.Properties["endDate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "startMonth"))) { #optional property not found
            $StartMonth = $null
        } else {
            $StartMonth = $JsonParameters.PSobject.Properties["startMonth"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "endMonth"))) { #optional property not found
            $EndMonth = $null
        } else {
            $EndMonth = $JsonParameters.PSobject.Properties["endMonth"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "groupId"))) { #optional property not found
            $GroupId = $null
        } else {
            $GroupId = $JsonParameters.PSobject.Properties["groupId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cloudId"))) { #optional property not found
            $CloudId = $null
        } else {
            $CloudId = $JsonParameters.PSobject.Properties["cloudId"].value
        }

        $PSO = [PSCustomObject]@{
            "type" = ${Type}
            "startDate" = ${StartDate}
            "endDate" = ${EndDate}
            "startMonth" = ${StartMonth}
            "endMonth" = ${EndMonth}
            "groupId" = ${GroupId}
            "cloudId" = ${CloudId}
        }

        return $PSO
    }

}

