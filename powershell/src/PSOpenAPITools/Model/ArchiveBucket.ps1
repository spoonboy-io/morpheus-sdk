#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.1.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
No description available.
.PARAMETER Name
No description available.
.PARAMETER Description
No description available.
.PARAMETER StorageProvider
No description available.
.PARAMETER Owner
No description available.
.PARAMETER CreatedBy
No description available.
.PARAMETER IsPublic
No description available.
.PARAMETER Visibility
No description available.
.PARAMETER Code
No description available.
.PARAMETER FilePath
No description available.
.PARAMETER RawSize
No description available.
.PARAMETER FileCount
No description available.
.PARAMETER Accounts
No description available.
.PARAMETER DateCreated
No description available.
.PARAMETER LastUpdated
No description available.
.OUTPUTS

ArchiveBucket<PSCustomObject>
#>

function Initialize-ArchiveBucket {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${StorageProvider},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Owner},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${CreatedBy},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsPublic},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Visibility},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Code},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FilePath},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${RawSize},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${FileCount},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Accounts},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${DateCreated},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${LastUpdated}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ArchiveBucket' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "name" = ${Name}
            "description" = ${Description}
            "storageProvider" = ${StorageProvider}
            "owner" = ${Owner}
            "createdBy" = ${CreatedBy}
            "isPublic" = ${IsPublic}
            "visibility" = ${Visibility}
            "code" = ${Code}
            "filePath" = ${FilePath}
            "rawSize" = ${RawSize}
            "fileCount" = ${FileCount}
            "accounts" = ${Accounts}
            "dateCreated" = ${DateCreated}
            "lastUpdated" = ${LastUpdated}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ArchiveBucket<PSCustomObject>

.DESCRIPTION

Convert from JSON to ArchiveBucket<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ArchiveBucket<PSCustomObject>
#>
function ConvertFrom-JsonToArchiveBucket {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ArchiveBucket' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ArchiveBucket
        $AllProperties = ("id", "name", "description", "storageProvider", "owner", "createdBy", "isPublic", "visibility", "code", "filePath", "rawSize", "fileCount", "accounts", "dateCreated", "lastUpdated")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "storageProvider"))) { #optional property not found
            $StorageProvider = $null
        } else {
            $StorageProvider = $JsonParameters.PSobject.Properties["storageProvider"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "owner"))) { #optional property not found
            $Owner = $null
        } else {
            $Owner = $JsonParameters.PSobject.Properties["owner"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "createdBy"))) { #optional property not found
            $CreatedBy = $null
        } else {
            $CreatedBy = $JsonParameters.PSobject.Properties["createdBy"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "isPublic"))) { #optional property not found
            $IsPublic = $null
        } else {
            $IsPublic = $JsonParameters.PSobject.Properties["isPublic"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "visibility"))) { #optional property not found
            $Visibility = $null
        } else {
            $Visibility = $JsonParameters.PSobject.Properties["visibility"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "code"))) { #optional property not found
            $Code = $null
        } else {
            $Code = $JsonParameters.PSobject.Properties["code"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "filePath"))) { #optional property not found
            $FilePath = $null
        } else {
            $FilePath = $JsonParameters.PSobject.Properties["filePath"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "rawSize"))) { #optional property not found
            $RawSize = $null
        } else {
            $RawSize = $JsonParameters.PSobject.Properties["rawSize"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "fileCount"))) { #optional property not found
            $FileCount = $null
        } else {
            $FileCount = $JsonParameters.PSobject.Properties["fileCount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "accounts"))) { #optional property not found
            $Accounts = $null
        } else {
            $Accounts = $JsonParameters.PSobject.Properties["accounts"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dateCreated"))) { #optional property not found
            $DateCreated = $null
        } else {
            $DateCreated = $JsonParameters.PSobject.Properties["dateCreated"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lastUpdated"))) { #optional property not found
            $LastUpdated = $null
        } else {
            $LastUpdated = $JsonParameters.PSobject.Properties["lastUpdated"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "name" = ${Name}
            "description" = ${Description}
            "storageProvider" = ${StorageProvider}
            "owner" = ${Owner}
            "createdBy" = ${CreatedBy}
            "isPublic" = ${IsPublic}
            "visibility" = ${Visibility}
            "code" = ${Code}
            "filePath" = ${FilePath}
            "rawSize" = ${RawSize}
            "fileCount" = ${FileCount}
            "accounts" = ${Accounts}
            "dateCreated" = ${DateCreated}
            "lastUpdated" = ${LastUpdated}
        }

        return $PSO
    }

}

