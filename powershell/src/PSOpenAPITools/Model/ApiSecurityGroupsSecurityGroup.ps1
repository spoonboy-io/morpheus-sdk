#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Name
Name for your security group
.PARAMETER Description
Optional description field
.PARAMETER ZoneId
Scoped Cloud ID
.PARAMETER Active
Set to `false` to disable a security group.
.PARAMETER CustomOptions
No description available.
.PARAMETER TenantPermissions
No description available.
.PARAMETER ResourcePermissions
No description available.
.OUTPUTS

ApiSecurityGroupsSecurityGroup<PSCustomObject>
#>

function Initialize-ApiSecurityGroupsSecurityGroup {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [Int64]
        ${ZoneId},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Active},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${CustomOptions},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${TenantPermissions},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${ResourcePermissions}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ApiSecurityGroupsSecurityGroup' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$Name) {
            throw "invalid value for 'Name', 'Name' cannot be null."
        }

        if (!$ZoneId) {
            throw "invalid value for 'ZoneId', 'ZoneId' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "description" = ${Description}
            "zoneId" = ${ZoneId}
            "active" = ${Active}
            "customOptions" = ${CustomOptions}
            "tenantPermissions" = ${TenantPermissions}
            "resourcePermissions" = ${ResourcePermissions}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ApiSecurityGroupsSecurityGroup<PSCustomObject>

.DESCRIPTION

Convert from JSON to ApiSecurityGroupsSecurityGroup<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ApiSecurityGroupsSecurityGroup<PSCustomObject>
#>
function ConvertFrom-JsonToApiSecurityGroupsSecurityGroup {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ApiSecurityGroupsSecurityGroup' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ApiSecurityGroupsSecurityGroup
        $AllProperties = ("name", "description", "zoneId", "active", "customOptions", "tenantPermissions", "resourcePermissions")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property `name` missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) {
            throw "Error! JSON cannot be serialized due to the required property `name` missing."
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "zoneId"))) {
            throw "Error! JSON cannot be serialized due to the required property `zoneId` missing."
        } else {
            $ZoneId = $JsonParameters.PSobject.Properties["zoneId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "active"))) { #optional property not found
            $Active = $null
        } else {
            $Active = $JsonParameters.PSobject.Properties["active"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "customOptions"))) { #optional property not found
            $CustomOptions = $null
        } else {
            $CustomOptions = $JsonParameters.PSobject.Properties["customOptions"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tenantPermissions"))) { #optional property not found
            $TenantPermissions = $null
        } else {
            $TenantPermissions = $JsonParameters.PSobject.Properties["tenantPermissions"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "resourcePermissions"))) { #optional property not found
            $ResourcePermissions = $null
        } else {
            $ResourcePermissions = $JsonParameters.PSobject.Properties["resourcePermissions"].value
        }

        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "description" = ${Description}
            "zoneId" = ${ZoneId}
            "active" = ${Active}
            "customOptions" = ${CustomOptions}
            "tenantPermissions" = ${TenantPermissions}
            "resourcePermissions" = ${ResourcePermissions}
        }

        return $PSO
    }

}

