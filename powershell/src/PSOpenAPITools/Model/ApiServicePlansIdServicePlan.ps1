#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Name
Service plan name
.PARAMETER Code
Service plan code, must be unique
.PARAMETER Description
Service plan description
.PARAMETER Editable
Can be used to enable / disable the editability of the service plan.
.PARAMETER MaxStorage
Max storage size in bytes
.PARAMETER MaxMemory
Max memory size in bytes
.PARAMETER MaxCores
Max cores
.PARAMETER MaxDisks
Max disks allowed
.PARAMETER ProvisionType
No description available.
.PARAMETER CustomCores
Can be used to enable / disable customizable cores
.PARAMETER CustomMaxStorage
Can be used to enable / disable customizable storage
.PARAMETER CustomMaxDataStorage
Can be used to enable / disable customizable extra volumes.
.PARAMETER CustomMaxMemory
Can be used to enable / disable customizable memory.
.PARAMETER AddVolumes
Can be used to enable / disable ability to add volumes
.PARAMETER SortOrder
Sort order
.PARAMETER PriceSets
List of price sets to include in service plan
.PARAMETER Config
No description available.
.OUTPUTS

ApiServicePlansIdServicePlan<PSCustomObject>
#>

function Initialize-ApiServicePlansIdServicePlan {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Code},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Editable} = $true,
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${MaxStorage},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${MaxMemory},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${MaxCores},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${MaxDisks},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${ProvisionType},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${CustomCores} = $false,
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${CustomMaxStorage} = $false,
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${CustomMaxDataStorage} = $false,
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${CustomMaxMemory} = $false,
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${AddVolumes} = $false,
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${SortOrder},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [Int64[]]
        ${PriceSets},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Config}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ApiServicePlansIdServicePlan' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "code" = ${Code}
            "description" = ${Description}
            "editable" = ${Editable}
            "maxStorage" = ${MaxStorage}
            "maxMemory" = ${MaxMemory}
            "maxCores" = ${MaxCores}
            "maxDisks" = ${MaxDisks}
            "provisionType" = ${ProvisionType}
            "customCores" = ${CustomCores}
            "customMaxStorage" = ${CustomMaxStorage}
            "customMaxDataStorage" = ${CustomMaxDataStorage}
            "customMaxMemory" = ${CustomMaxMemory}
            "addVolumes" = ${AddVolumes}
            "sortOrder" = ${SortOrder}
            "priceSets" = ${PriceSets}
            "config" = ${Config}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ApiServicePlansIdServicePlan<PSCustomObject>

.DESCRIPTION

Convert from JSON to ApiServicePlansIdServicePlan<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ApiServicePlansIdServicePlan<PSCustomObject>
#>
function ConvertFrom-JsonToApiServicePlansIdServicePlan {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ApiServicePlansIdServicePlan' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ApiServicePlansIdServicePlan
        $AllProperties = ("name", "code", "description", "editable", "maxStorage", "maxMemory", "maxCores", "maxDisks", "provisionType", "customCores", "customMaxStorage", "customMaxDataStorage", "customMaxMemory", "addVolumes", "sortOrder", "priceSets", "config")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "code"))) { #optional property not found
            $Code = $null
        } else {
            $Code = $JsonParameters.PSobject.Properties["code"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "editable"))) { #optional property not found
            $Editable = $null
        } else {
            $Editable = $JsonParameters.PSobject.Properties["editable"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "maxStorage"))) { #optional property not found
            $MaxStorage = $null
        } else {
            $MaxStorage = $JsonParameters.PSobject.Properties["maxStorage"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "maxMemory"))) { #optional property not found
            $MaxMemory = $null
        } else {
            $MaxMemory = $JsonParameters.PSobject.Properties["maxMemory"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "maxCores"))) { #optional property not found
            $MaxCores = $null
        } else {
            $MaxCores = $JsonParameters.PSobject.Properties["maxCores"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "maxDisks"))) { #optional property not found
            $MaxDisks = $null
        } else {
            $MaxDisks = $JsonParameters.PSobject.Properties["maxDisks"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "provisionType"))) { #optional property not found
            $ProvisionType = $null
        } else {
            $ProvisionType = $JsonParameters.PSobject.Properties["provisionType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "customCores"))) { #optional property not found
            $CustomCores = $null
        } else {
            $CustomCores = $JsonParameters.PSobject.Properties["customCores"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "customMaxStorage"))) { #optional property not found
            $CustomMaxStorage = $null
        } else {
            $CustomMaxStorage = $JsonParameters.PSobject.Properties["customMaxStorage"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "customMaxDataStorage"))) { #optional property not found
            $CustomMaxDataStorage = $null
        } else {
            $CustomMaxDataStorage = $JsonParameters.PSobject.Properties["customMaxDataStorage"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "customMaxMemory"))) { #optional property not found
            $CustomMaxMemory = $null
        } else {
            $CustomMaxMemory = $JsonParameters.PSobject.Properties["customMaxMemory"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "addVolumes"))) { #optional property not found
            $AddVolumes = $null
        } else {
            $AddVolumes = $JsonParameters.PSobject.Properties["addVolumes"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sortOrder"))) { #optional property not found
            $SortOrder = $null
        } else {
            $SortOrder = $JsonParameters.PSobject.Properties["sortOrder"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "priceSets"))) { #optional property not found
            $PriceSets = $null
        } else {
            $PriceSets = $JsonParameters.PSobject.Properties["priceSets"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "config"))) { #optional property not found
            $Config = $null
        } else {
            $Config = $JsonParameters.PSobject.Properties["config"].value
        }

        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "code" = ${Code}
            "description" = ${Description}
            "editable" = ${Editable}
            "maxStorage" = ${MaxStorage}
            "maxMemory" = ${MaxMemory}
            "maxCores" = ${MaxCores}
            "maxDisks" = ${MaxDisks}
            "provisionType" = ${ProvisionType}
            "customCores" = ${CustomCores}
            "customMaxStorage" = ${CustomMaxStorage}
            "customMaxDataStorage" = ${CustomMaxDataStorage}
            "customMaxMemory" = ${CustomMaxMemory}
            "addVolumes" = ${AddVolumes}
            "sortOrder" = ${SortOrder}
            "priceSets" = ${PriceSets}
            "config" = ${Config}
        }

        return $PSO
    }

}

