#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
No description available.
.PARAMETER InternalId
No description available.
.PARAMETER DisplayOrder
No description available.
.PARAMETER Active
No description available.
.PARAMETER UsedStorage
No description available.
.PARAMETER ProvisionType
No description available.
.PARAMETER Resizeable
No description available.
.PARAMETER Online
No description available.
.PARAMETER DeviceDisplayName
No description available.
.PARAMETER RefType
No description available.
.PARAMETER Name
No description available.
.PARAMETER ExternalId
No description available.
.PARAMETER DatastoreOption
No description available.
.PARAMETER ClaimName
No description available.
.PARAMETER VolumeType
No description available.
.PARAMETER DeviceName
No description available.
.PARAMETER Removable
No description available.
.PARAMETER PoolName
No description available.
.PARAMETER ReadOnly
No description available.
.PARAMETER SourceId
No description available.
.PARAMETER ZoneId
No description available.
.PARAMETER RootVolume
No description available.
.PARAMETER RefId
No description available.
.PARAMETER Category
No description available.
.PARAMETER Status
No description available.
.PARAMETER RawData
No description available.
.PARAMETER MaxStorage
No description available.
.PARAMETER Account
No description available.
.PARAMETER Type
No description available.
.PARAMETER Datastore
No description available.
.OUTPUTS

ClusterVolumes<PSCustomObject>
#>

function Initialize-ClusterVolumes {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${InternalId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${DisplayOrder},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Active},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${UsedStorage},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ProvisionType},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Resizeable},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Online},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DeviceDisplayName},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RefType},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ExternalId},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DatastoreOption},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ClaimName},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${VolumeType},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DeviceName},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Removable},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PoolName},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${ReadOnly},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SourceId},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${ZoneId},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${RootVolume},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${RefId},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Category},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Status},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RawData},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${MaxStorage},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Account},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Type},
        [Parameter(Position = 29, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Datastore}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ClusterVolumes' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "internalId" = ${InternalId}
            "displayOrder" = ${DisplayOrder}
            "active" = ${Active}
            "usedStorage" = ${UsedStorage}
            "provisionType" = ${ProvisionType}
            "resizeable" = ${Resizeable}
            "online" = ${Online}
            "deviceDisplayName" = ${DeviceDisplayName}
            "refType" = ${RefType}
            "name" = ${Name}
            "externalId" = ${ExternalId}
            "datastoreOption" = ${DatastoreOption}
            "claimName" = ${ClaimName}
            "volumeType" = ${VolumeType}
            "deviceName" = ${DeviceName}
            "removable" = ${Removable}
            "poolName" = ${PoolName}
            "readOnly" = ${ReadOnly}
            "sourceId" = ${SourceId}
            "zoneId" = ${ZoneId}
            "rootVolume" = ${RootVolume}
            "refId" = ${RefId}
            "category" = ${Category}
            "status" = ${Status}
            "rawData" = ${RawData}
            "maxStorage" = ${MaxStorage}
            "account" = ${Account}
            "type" = ${Type}
            "datastore" = ${Datastore}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ClusterVolumes<PSCustomObject>

.DESCRIPTION

Convert from JSON to ClusterVolumes<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ClusterVolumes<PSCustomObject>
#>
function ConvertFrom-JsonToClusterVolumes {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ClusterVolumes' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ClusterVolumes
        $AllProperties = ("id", "internalId", "displayOrder", "active", "usedStorage", "provisionType", "resizeable", "online", "deviceDisplayName", "refType", "name", "externalId", "datastoreOption", "claimName", "volumeType", "deviceName", "removable", "poolName", "readOnly", "sourceId", "zoneId", "rootVolume", "refId", "category", "status", "rawData", "maxStorage", "account", "type", "datastore")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "internalId"))) { #optional property not found
            $InternalId = $null
        } else {
            $InternalId = $JsonParameters.PSobject.Properties["internalId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "displayOrder"))) { #optional property not found
            $DisplayOrder = $null
        } else {
            $DisplayOrder = $JsonParameters.PSobject.Properties["displayOrder"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "active"))) { #optional property not found
            $Active = $null
        } else {
            $Active = $JsonParameters.PSobject.Properties["active"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "usedStorage"))) { #optional property not found
            $UsedStorage = $null
        } else {
            $UsedStorage = $JsonParameters.PSobject.Properties["usedStorage"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "provisionType"))) { #optional property not found
            $ProvisionType = $null
        } else {
            $ProvisionType = $JsonParameters.PSobject.Properties["provisionType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "resizeable"))) { #optional property not found
            $Resizeable = $null
        } else {
            $Resizeable = $JsonParameters.PSobject.Properties["resizeable"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "online"))) { #optional property not found
            $Online = $null
        } else {
            $Online = $JsonParameters.PSobject.Properties["online"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "deviceDisplayName"))) { #optional property not found
            $DeviceDisplayName = $null
        } else {
            $DeviceDisplayName = $JsonParameters.PSobject.Properties["deviceDisplayName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "refType"))) { #optional property not found
            $RefType = $null
        } else {
            $RefType = $JsonParameters.PSobject.Properties["refType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "externalId"))) { #optional property not found
            $ExternalId = $null
        } else {
            $ExternalId = $JsonParameters.PSobject.Properties["externalId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "datastoreOption"))) { #optional property not found
            $DatastoreOption = $null
        } else {
            $DatastoreOption = $JsonParameters.PSobject.Properties["datastoreOption"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "claimName"))) { #optional property not found
            $ClaimName = $null
        } else {
            $ClaimName = $JsonParameters.PSobject.Properties["claimName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "volumeType"))) { #optional property not found
            $VolumeType = $null
        } else {
            $VolumeType = $JsonParameters.PSobject.Properties["volumeType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "deviceName"))) { #optional property not found
            $DeviceName = $null
        } else {
            $DeviceName = $JsonParameters.PSobject.Properties["deviceName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "removable"))) { #optional property not found
            $Removable = $null
        } else {
            $Removable = $JsonParameters.PSobject.Properties["removable"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "poolName"))) { #optional property not found
            $PoolName = $null
        } else {
            $PoolName = $JsonParameters.PSobject.Properties["poolName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "readOnly"))) { #optional property not found
            $ReadOnly = $null
        } else {
            $ReadOnly = $JsonParameters.PSobject.Properties["readOnly"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sourceId"))) { #optional property not found
            $SourceId = $null
        } else {
            $SourceId = $JsonParameters.PSobject.Properties["sourceId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "zoneId"))) { #optional property not found
            $ZoneId = $null
        } else {
            $ZoneId = $JsonParameters.PSobject.Properties["zoneId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "rootVolume"))) { #optional property not found
            $RootVolume = $null
        } else {
            $RootVolume = $JsonParameters.PSobject.Properties["rootVolume"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "refId"))) { #optional property not found
            $RefId = $null
        } else {
            $RefId = $JsonParameters.PSobject.Properties["refId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "category"))) { #optional property not found
            $Category = $null
        } else {
            $Category = $JsonParameters.PSobject.Properties["category"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "status"))) { #optional property not found
            $Status = $null
        } else {
            $Status = $JsonParameters.PSobject.Properties["status"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "rawData"))) { #optional property not found
            $RawData = $null
        } else {
            $RawData = $JsonParameters.PSobject.Properties["rawData"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "maxStorage"))) { #optional property not found
            $MaxStorage = $null
        } else {
            $MaxStorage = $JsonParameters.PSobject.Properties["maxStorage"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "account"))) { #optional property not found
            $Account = $null
        } else {
            $Account = $JsonParameters.PSobject.Properties["account"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "datastore"))) { #optional property not found
            $Datastore = $null
        } else {
            $Datastore = $JsonParameters.PSobject.Properties["datastore"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "internalId" = ${InternalId}
            "displayOrder" = ${DisplayOrder}
            "active" = ${Active}
            "usedStorage" = ${UsedStorage}
            "provisionType" = ${ProvisionType}
            "resizeable" = ${Resizeable}
            "online" = ${Online}
            "deviceDisplayName" = ${DeviceDisplayName}
            "refType" = ${RefType}
            "name" = ${Name}
            "externalId" = ${ExternalId}
            "datastoreOption" = ${DatastoreOption}
            "claimName" = ${ClaimName}
            "volumeType" = ${VolumeType}
            "deviceName" = ${DeviceName}
            "removable" = ${Removable}
            "poolName" = ${PoolName}
            "readOnly" = ${ReadOnly}
            "sourceId" = ${SourceId}
            "zoneId" = ${ZoneId}
            "rootVolume" = ${RootVolume}
            "refId" = ${RefId}
            "category" = ${Category}
            "status" = ${Status}
            "rawData" = ${RawData}
            "maxStorage" = ${MaxStorage}
            "account" = ${Account}
            "type" = ${Type}
            "datastore" = ${Datastore}
        }

        return $PSO
    }

}

