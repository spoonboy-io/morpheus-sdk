#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
Backup ID
.PARAMETER Name
Name
.PARAMETER LocationType
Source Type (instance, server, storage)
.PARAMETER Instance
No description available.
.PARAMETER ContainerId
No description available.
.PARAMETER Job
No description available.
.PARAMETER Schedule
No description available.
.PARAMETER RetentionCount
No description available.
.PARAMETER BackupType
No description available.
.PARAMETER StorageProvider
No description available.
.PARAMETER BackupProvider
No description available.
.PARAMETER BackupRespository
No description available.
.PARAMETER CronExpression
Cron Expression
.PARAMETER NextFire
Next Fire
.PARAMETER LastStatus
Last Status
.PARAMETER LastResult
No description available.
.PARAMETER Stats
No description available.
.PARAMETER Enabled
Enabled
.PARAMETER DateCreated
Date Created
.PARAMETER LastUpdated
Last Updated
.OUTPUTS

Backup<PSCustomObject>
#>

function Initialize-Backup {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${LocationType},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Instance},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${ContainerId},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Job},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Schedule},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${RetentionCount},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${BackupType},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${StorageProvider},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${BackupProvider},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${BackupRespository},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CronExpression},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${NextFire},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${LastStatus},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${LastResult},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Stats},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Enabled},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${DateCreated},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${LastUpdated}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => Backup' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "name" = ${Name}
            "locationType" = ${LocationType}
            "instance" = ${Instance}
            "containerId" = ${ContainerId}
            "job" = ${Job}
            "schedule" = ${Schedule}
            "retentionCount" = ${RetentionCount}
            "backupType" = ${BackupType}
            "storageProvider" = ${StorageProvider}
            "backupProvider" = ${BackupProvider}
            "backupRespository" = ${BackupRespository}
            "cronExpression" = ${CronExpression}
            "nextFire" = ${NextFire}
            "lastStatus" = ${LastStatus}
            "lastResult" = ${LastResult}
            "stats" = ${Stats}
            "enabled" = ${Enabled}
            "dateCreated" = ${DateCreated}
            "lastUpdated" = ${LastUpdated}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to Backup<PSCustomObject>

.DESCRIPTION

Convert from JSON to Backup<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

Backup<PSCustomObject>
#>
function ConvertFrom-JsonToBackup {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => Backup' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in Backup
        $AllProperties = ("id", "name", "locationType", "instance", "containerId", "job", "schedule", "retentionCount", "backupType", "storageProvider", "backupProvider", "backupRespository", "cronExpression", "nextFire", "lastStatus", "lastResult", "stats", "enabled", "dateCreated", "lastUpdated")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "locationType"))) { #optional property not found
            $LocationType = $null
        } else {
            $LocationType = $JsonParameters.PSobject.Properties["locationType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "instance"))) { #optional property not found
            $Instance = $null
        } else {
            $Instance = $JsonParameters.PSobject.Properties["instance"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "containerId"))) { #optional property not found
            $ContainerId = $null
        } else {
            $ContainerId = $JsonParameters.PSobject.Properties["containerId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "job"))) { #optional property not found
            $Job = $null
        } else {
            $Job = $JsonParameters.PSobject.Properties["job"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "schedule"))) { #optional property not found
            $Schedule = $null
        } else {
            $Schedule = $JsonParameters.PSobject.Properties["schedule"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "retentionCount"))) { #optional property not found
            $RetentionCount = $null
        } else {
            $RetentionCount = $JsonParameters.PSobject.Properties["retentionCount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "backupType"))) { #optional property not found
            $BackupType = $null
        } else {
            $BackupType = $JsonParameters.PSobject.Properties["backupType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "storageProvider"))) { #optional property not found
            $StorageProvider = $null
        } else {
            $StorageProvider = $JsonParameters.PSobject.Properties["storageProvider"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "backupProvider"))) { #optional property not found
            $BackupProvider = $null
        } else {
            $BackupProvider = $JsonParameters.PSobject.Properties["backupProvider"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "backupRespository"))) { #optional property not found
            $BackupRespository = $null
        } else {
            $BackupRespository = $JsonParameters.PSobject.Properties["backupRespository"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cronExpression"))) { #optional property not found
            $CronExpression = $null
        } else {
            $CronExpression = $JsonParameters.PSobject.Properties["cronExpression"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "nextFire"))) { #optional property not found
            $NextFire = $null
        } else {
            $NextFire = $JsonParameters.PSobject.Properties["nextFire"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lastStatus"))) { #optional property not found
            $LastStatus = $null
        } else {
            $LastStatus = $JsonParameters.PSobject.Properties["lastStatus"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lastResult"))) { #optional property not found
            $LastResult = $null
        } else {
            $LastResult = $JsonParameters.PSobject.Properties["lastResult"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "stats"))) { #optional property not found
            $Stats = $null
        } else {
            $Stats = $JsonParameters.PSobject.Properties["stats"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "enabled"))) { #optional property not found
            $Enabled = $null
        } else {
            $Enabled = $JsonParameters.PSobject.Properties["enabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dateCreated"))) { #optional property not found
            $DateCreated = $null
        } else {
            $DateCreated = $JsonParameters.PSobject.Properties["dateCreated"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lastUpdated"))) { #optional property not found
            $LastUpdated = $null
        } else {
            $LastUpdated = $JsonParameters.PSobject.Properties["lastUpdated"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "name" = ${Name}
            "locationType" = ${LocationType}
            "instance" = ${Instance}
            "containerId" = ${ContainerId}
            "job" = ${Job}
            "schedule" = ${Schedule}
            "retentionCount" = ${RetentionCount}
            "backupType" = ${BackupType}
            "storageProvider" = ${StorageProvider}
            "backupProvider" = ${BackupProvider}
            "backupRespository" = ${BackupRespository}
            "cronExpression" = ${CronExpression}
            "nextFire" = ${NextFire}
            "lastStatus" = ${LastStatus}
            "lastResult" = ${LastResult}
            "stats" = ${Stats}
            "enabled" = ${Enabled}
            "dateCreated" = ${DateCreated}
            "lastUpdated" = ${LastUpdated}
        }

        return $PSO
    }

}

