#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER GuidanceSettings
No description available.
.OUTPUTS

GetGuidanceSettings200Response<PSCustomObject>
#>

function Initialize-GetGuidanceSettings200Response {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${GuidanceSettings}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => GetGuidanceSettings200Response' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "guidanceSettings" = ${GuidanceSettings}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to GetGuidanceSettings200Response<PSCustomObject>

.DESCRIPTION

Convert from JSON to GetGuidanceSettings200Response<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

GetGuidanceSettings200Response<PSCustomObject>
#>
function ConvertFrom-JsonToGetGuidanceSettings200Response {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => GetGuidanceSettings200Response' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in GetGuidanceSettings200Response
        $AllProperties = ("guidanceSettings")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "guidanceSettings"))) { #optional property not found
            $GuidanceSettings = $null
        } else {
            $GuidanceSettings = $JsonParameters.PSobject.Properties["guidanceSettings"].value
        }

        $PSO = [PSCustomObject]@{
            "guidanceSettings" = ${GuidanceSettings}
        }

        return $PSO
    }

}

