#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

The parameters for creating a network router is type dependent. The following lists the common parameters. See get a specific type to list available options for that network router type. Note: when creating a router on NSX v3.0+ some BGP configuration settings require BGP to be disabled during initial creation. The BGP feature can be enabled in a subsequent router update API call. 

.PARAMETER NetworkRouter
No description available.
.OUTPUTS

CreateNetworkRouterRequest<PSCustomObject>
#>

function Initialize-CreateNetworkRouterRequest {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${NetworkRouter}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => CreateNetworkRouterRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "networkRouter" = ${NetworkRouter}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to CreateNetworkRouterRequest<PSCustomObject>

.DESCRIPTION

Convert from JSON to CreateNetworkRouterRequest<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

CreateNetworkRouterRequest<PSCustomObject>
#>
function ConvertFrom-JsonToCreateNetworkRouterRequest {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => CreateNetworkRouterRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in CreateNetworkRouterRequest
        $AllProperties = ("networkRouter")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "networkRouter"))) { #optional property not found
            $NetworkRouter = $null
        } else {
            $NetworkRouter = $JsonParameters.PSobject.Properties["networkRouter"].value
        }

        $PSO = [PSCustomObject]@{
            "networkRouter" = ${NetworkRouter}
        }

        return $PSO
    }

}

