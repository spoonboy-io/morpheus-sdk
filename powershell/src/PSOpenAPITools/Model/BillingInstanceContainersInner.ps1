#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER RefType
No description available.
.PARAMETER RefUUID
No description available.
.PARAMETER RefId
No description available.
.PARAMETER StartDate
No description available.
.PARAMETER EndDate
No description available.
.PARAMETER Cost
No description available.
.PARAMETER Price
No description available.
.PARAMETER NumUnits
No description available.
.PARAMETER Unit
No description available.
.PARAMETER Currency
No description available.
.PARAMETER Usages
No description available.
.PARAMETER NumUsages
No description available.
.PARAMETER TotalUsages
No description available.
.PARAMETER HasMoreUsages
No description available.
.PARAMETER FoundPricing
No description available.
.PARAMETER Name
No description available.
.PARAMETER ServerId
No description available.
.PARAMETER ServerUUID
No description available.
.PARAMETER ServerUniqueId
No description available.
.PARAMETER ServerExternalId
No description available.
.PARAMETER ServerInternalId
No description available.
.PARAMETER ResourcePoolId
No description available.
.PARAMETER ResourcePoolName
No description available.
.OUTPUTS

BillingInstanceContainersInner<PSCustomObject>
#>

function Initialize-BillingInstanceContainersInner {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RefType},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RefUUID},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${RefId},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${StartDate},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${EndDate},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${Cost},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${Price},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${NumUnits},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Unit},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Currency},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Usages},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${NumUsages},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${TotalUsages},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${HasMoreUsages},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${FoundPricing},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${ServerId},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ServerUUID},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ServerUniqueId},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ServerExternalId},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ServerInternalId},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${ResourcePoolId},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ResourcePoolName}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => BillingInstanceContainersInner' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "refType" = ${RefType}
            "refUUID" = ${RefUUID}
            "refId" = ${RefId}
            "startDate" = ${StartDate}
            "endDate" = ${EndDate}
            "cost" = ${Cost}
            "price" = ${Price}
            "numUnits" = ${NumUnits}
            "unit" = ${Unit}
            "currency" = ${Currency}
            "usages" = ${Usages}
            "numUsages" = ${NumUsages}
            "totalUsages" = ${TotalUsages}
            "hasMoreUsages" = ${HasMoreUsages}
            "foundPricing" = ${FoundPricing}
            "name" = ${Name}
            "serverId" = ${ServerId}
            "serverUUID" = ${ServerUUID}
            "serverUniqueId" = ${ServerUniqueId}
            "serverExternalId" = ${ServerExternalId}
            "serverInternalId" = ${ServerInternalId}
            "resourcePoolId" = ${ResourcePoolId}
            "resourcePoolName" = ${ResourcePoolName}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to BillingInstanceContainersInner<PSCustomObject>

.DESCRIPTION

Convert from JSON to BillingInstanceContainersInner<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

BillingInstanceContainersInner<PSCustomObject>
#>
function ConvertFrom-JsonToBillingInstanceContainersInner {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => BillingInstanceContainersInner' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in BillingInstanceContainersInner
        $AllProperties = ("refType", "refUUID", "refId", "startDate", "endDate", "cost", "price", "numUnits", "unit", "currency", "usages", "numUsages", "totalUsages", "hasMoreUsages", "foundPricing", "name", "serverId", "serverUUID", "serverUniqueId", "serverExternalId", "serverInternalId", "resourcePoolId", "resourcePoolName")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "refType"))) { #optional property not found
            $RefType = $null
        } else {
            $RefType = $JsonParameters.PSobject.Properties["refType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "refUUID"))) { #optional property not found
            $RefUUID = $null
        } else {
            $RefUUID = $JsonParameters.PSobject.Properties["refUUID"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "refId"))) { #optional property not found
            $RefId = $null
        } else {
            $RefId = $JsonParameters.PSobject.Properties["refId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "startDate"))) { #optional property not found
            $StartDate = $null
        } else {
            $StartDate = $JsonParameters.PSobject.Properties["startDate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "endDate"))) { #optional property not found
            $EndDate = $null
        } else {
            $EndDate = $JsonParameters.PSobject.Properties["endDate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cost"))) { #optional property not found
            $Cost = $null
        } else {
            $Cost = $JsonParameters.PSobject.Properties["cost"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "price"))) { #optional property not found
            $Price = $null
        } else {
            $Price = $JsonParameters.PSobject.Properties["price"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "numUnits"))) { #optional property not found
            $NumUnits = $null
        } else {
            $NumUnits = $JsonParameters.PSobject.Properties["numUnits"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "unit"))) { #optional property not found
            $Unit = $null
        } else {
            $Unit = $JsonParameters.PSobject.Properties["unit"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "currency"))) { #optional property not found
            $Currency = $null
        } else {
            $Currency = $JsonParameters.PSobject.Properties["currency"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "usages"))) { #optional property not found
            $Usages = $null
        } else {
            $Usages = $JsonParameters.PSobject.Properties["usages"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "numUsages"))) { #optional property not found
            $NumUsages = $null
        } else {
            $NumUsages = $JsonParameters.PSobject.Properties["numUsages"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "totalUsages"))) { #optional property not found
            $TotalUsages = $null
        } else {
            $TotalUsages = $JsonParameters.PSobject.Properties["totalUsages"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "hasMoreUsages"))) { #optional property not found
            $HasMoreUsages = $null
        } else {
            $HasMoreUsages = $JsonParameters.PSobject.Properties["hasMoreUsages"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "foundPricing"))) { #optional property not found
            $FoundPricing = $null
        } else {
            $FoundPricing = $JsonParameters.PSobject.Properties["foundPricing"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "serverId"))) { #optional property not found
            $ServerId = $null
        } else {
            $ServerId = $JsonParameters.PSobject.Properties["serverId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "serverUUID"))) { #optional property not found
            $ServerUUID = $null
        } else {
            $ServerUUID = $JsonParameters.PSobject.Properties["serverUUID"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "serverUniqueId"))) { #optional property not found
            $ServerUniqueId = $null
        } else {
            $ServerUniqueId = $JsonParameters.PSobject.Properties["serverUniqueId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "serverExternalId"))) { #optional property not found
            $ServerExternalId = $null
        } else {
            $ServerExternalId = $JsonParameters.PSobject.Properties["serverExternalId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "serverInternalId"))) { #optional property not found
            $ServerInternalId = $null
        } else {
            $ServerInternalId = $JsonParameters.PSobject.Properties["serverInternalId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "resourcePoolId"))) { #optional property not found
            $ResourcePoolId = $null
        } else {
            $ResourcePoolId = $JsonParameters.PSobject.Properties["resourcePoolId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "resourcePoolName"))) { #optional property not found
            $ResourcePoolName = $null
        } else {
            $ResourcePoolName = $JsonParameters.PSobject.Properties["resourcePoolName"].value
        }

        $PSO = [PSCustomObject]@{
            "refType" = ${RefType}
            "refUUID" = ${RefUUID}
            "refId" = ${RefId}
            "startDate" = ${StartDate}
            "endDate" = ${EndDate}
            "cost" = ${Cost}
            "price" = ${Price}
            "numUnits" = ${NumUnits}
            "unit" = ${Unit}
            "currency" = ${Currency}
            "usages" = ${Usages}
            "numUsages" = ${NumUsages}
            "totalUsages" = ${TotalUsages}
            "hasMoreUsages" = ${HasMoreUsages}
            "foundPricing" = ${FoundPricing}
            "name" = ${Name}
            "serverId" = ${ServerId}
            "serverUUID" = ${ServerUUID}
            "serverUniqueId" = ${ServerUniqueId}
            "serverExternalId" = ${ServerExternalId}
            "serverInternalId" = ${ServerInternalId}
            "resourcePoolId" = ${ResourcePoolId}
            "resourcePoolName" = ${ResourcePoolName}
        }

        return $PSO
    }

}

