#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
No description available.
.PARAMETER IpAddress
No description available.
.PARAMETER ForwardingAddress
No description available.
.PARAMETER ProtocolAddress
No description available.
.PARAMETER RemoteAs
No description available.
.PARAMETER Weight
No description available.
.PARAMETER KeepAlive
No description available.
.PARAMETER HoldDown
No description available.
.PARAMETER Password
No description available.
.PARAMETER RouteFilteringType
No description available.
.PARAMETER RouteFilteringIn
No description available.
.PARAMETER RouteFilteringOut
No description available.
.PARAMETER BfdEnabled
No description available.
.PARAMETER BfdInterval
No description available.
.PARAMETER BfdMultiple
No description available.
.PARAMETER AllowAsIn
No description available.
.PARAMETER HopLimit
No description available.
.PARAMETER RestartMode
No description available.
.PARAMETER ProviderId
No description available.
.PARAMETER SyncSource
No description available.
.PARAMETER InternalId
No description available.
.PARAMETER ExternalId
No description available.
.PARAMETER RefType
No description available.
.PARAMETER RefId
No description available.
.PARAMETER Config
No description available.
.PARAMETER DateCreated
No description available.
.PARAMETER LastUpdated
No description available.
.OUTPUTS

GetNetworkRoutersBgpNeighbors200ResponseNetworkRouterBgpNeighborsInner<PSCustomObject>
#>

function Initialize-GetNetworkRoutersBgpNeighbors200ResponseNetworkRouterBgpNeighborsInner {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${IpAddress},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ForwardingAddress},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ProtocolAddress},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RemoteAs},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Weight},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${KeepAlive},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${HoldDown},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Password},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RouteFilteringType},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RouteFilteringIn},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RouteFilteringOut},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${BfdEnabled},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${BfdInterval},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${BfdMultiple},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${AllowAsIn},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${HopLimit},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RestartMode},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ProviderId},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SyncSource},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${InternalId},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ExternalId},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RefType},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RefId},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Config},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${DateCreated},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${LastUpdated}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => GetNetworkRoutersBgpNeighbors200ResponseNetworkRouterBgpNeighborsInner' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "ipAddress" = ${IpAddress}
            "forwardingAddress" = ${ForwardingAddress}
            "protocolAddress" = ${ProtocolAddress}
            "remoteAs" = ${RemoteAs}
            "weight" = ${Weight}
            "keepAlive" = ${KeepAlive}
            "holdDown" = ${HoldDown}
            "password" = ${Password}
            "routeFilteringType" = ${RouteFilteringType}
            "routeFilteringIn" = ${RouteFilteringIn}
            "routeFilteringOut" = ${RouteFilteringOut}
            "bfdEnabled" = ${BfdEnabled}
            "bfdInterval" = ${BfdInterval}
            "bfdMultiple" = ${BfdMultiple}
            "allowAsIn" = ${AllowAsIn}
            "hopLimit" = ${HopLimit}
            "restartMode" = ${RestartMode}
            "providerId" = ${ProviderId}
            "syncSource" = ${SyncSource}
            "internalId" = ${InternalId}
            "externalId" = ${ExternalId}
            "refType" = ${RefType}
            "refId" = ${RefId}
            "config" = ${Config}
            "dateCreated" = ${DateCreated}
            "lastUpdated" = ${LastUpdated}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to GetNetworkRoutersBgpNeighbors200ResponseNetworkRouterBgpNeighborsInner<PSCustomObject>

.DESCRIPTION

Convert from JSON to GetNetworkRoutersBgpNeighbors200ResponseNetworkRouterBgpNeighborsInner<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

GetNetworkRoutersBgpNeighbors200ResponseNetworkRouterBgpNeighborsInner<PSCustomObject>
#>
function ConvertFrom-JsonToGetNetworkRoutersBgpNeighbors200ResponseNetworkRouterBgpNeighborsInner {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => GetNetworkRoutersBgpNeighbors200ResponseNetworkRouterBgpNeighborsInner' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in GetNetworkRoutersBgpNeighbors200ResponseNetworkRouterBgpNeighborsInner
        $AllProperties = ("id", "ipAddress", "forwardingAddress", "protocolAddress", "remoteAs", "weight", "keepAlive", "holdDown", "password", "routeFilteringType", "routeFilteringIn", "routeFilteringOut", "bfdEnabled", "bfdInterval", "bfdMultiple", "allowAsIn", "hopLimit", "restartMode", "providerId", "syncSource", "internalId", "externalId", "refType", "refId", "config", "dateCreated", "lastUpdated")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ipAddress"))) { #optional property not found
            $IpAddress = $null
        } else {
            $IpAddress = $JsonParameters.PSobject.Properties["ipAddress"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "forwardingAddress"))) { #optional property not found
            $ForwardingAddress = $null
        } else {
            $ForwardingAddress = $JsonParameters.PSobject.Properties["forwardingAddress"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "protocolAddress"))) { #optional property not found
            $ProtocolAddress = $null
        } else {
            $ProtocolAddress = $JsonParameters.PSobject.Properties["protocolAddress"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "remoteAs"))) { #optional property not found
            $RemoteAs = $null
        } else {
            $RemoteAs = $JsonParameters.PSobject.Properties["remoteAs"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "weight"))) { #optional property not found
            $Weight = $null
        } else {
            $Weight = $JsonParameters.PSobject.Properties["weight"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "keepAlive"))) { #optional property not found
            $KeepAlive = $null
        } else {
            $KeepAlive = $JsonParameters.PSobject.Properties["keepAlive"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "holdDown"))) { #optional property not found
            $HoldDown = $null
        } else {
            $HoldDown = $JsonParameters.PSobject.Properties["holdDown"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "password"))) { #optional property not found
            $Password = $null
        } else {
            $Password = $JsonParameters.PSobject.Properties["password"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "routeFilteringType"))) { #optional property not found
            $RouteFilteringType = $null
        } else {
            $RouteFilteringType = $JsonParameters.PSobject.Properties["routeFilteringType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "routeFilteringIn"))) { #optional property not found
            $RouteFilteringIn = $null
        } else {
            $RouteFilteringIn = $JsonParameters.PSobject.Properties["routeFilteringIn"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "routeFilteringOut"))) { #optional property not found
            $RouteFilteringOut = $null
        } else {
            $RouteFilteringOut = $JsonParameters.PSobject.Properties["routeFilteringOut"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "bfdEnabled"))) { #optional property not found
            $BfdEnabled = $null
        } else {
            $BfdEnabled = $JsonParameters.PSobject.Properties["bfdEnabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "bfdInterval"))) { #optional property not found
            $BfdInterval = $null
        } else {
            $BfdInterval = $JsonParameters.PSobject.Properties["bfdInterval"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "bfdMultiple"))) { #optional property not found
            $BfdMultiple = $null
        } else {
            $BfdMultiple = $JsonParameters.PSobject.Properties["bfdMultiple"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "allowAsIn"))) { #optional property not found
            $AllowAsIn = $null
        } else {
            $AllowAsIn = $JsonParameters.PSobject.Properties["allowAsIn"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "hopLimit"))) { #optional property not found
            $HopLimit = $null
        } else {
            $HopLimit = $JsonParameters.PSobject.Properties["hopLimit"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "restartMode"))) { #optional property not found
            $RestartMode = $null
        } else {
            $RestartMode = $JsonParameters.PSobject.Properties["restartMode"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "providerId"))) { #optional property not found
            $ProviderId = $null
        } else {
            $ProviderId = $JsonParameters.PSobject.Properties["providerId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "syncSource"))) { #optional property not found
            $SyncSource = $null
        } else {
            $SyncSource = $JsonParameters.PSobject.Properties["syncSource"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "internalId"))) { #optional property not found
            $InternalId = $null
        } else {
            $InternalId = $JsonParameters.PSobject.Properties["internalId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "externalId"))) { #optional property not found
            $ExternalId = $null
        } else {
            $ExternalId = $JsonParameters.PSobject.Properties["externalId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "refType"))) { #optional property not found
            $RefType = $null
        } else {
            $RefType = $JsonParameters.PSobject.Properties["refType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "refId"))) { #optional property not found
            $RefId = $null
        } else {
            $RefId = $JsonParameters.PSobject.Properties["refId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "config"))) { #optional property not found
            $Config = $null
        } else {
            $Config = $JsonParameters.PSobject.Properties["config"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dateCreated"))) { #optional property not found
            $DateCreated = $null
        } else {
            $DateCreated = $JsonParameters.PSobject.Properties["dateCreated"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lastUpdated"))) { #optional property not found
            $LastUpdated = $null
        } else {
            $LastUpdated = $JsonParameters.PSobject.Properties["lastUpdated"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "ipAddress" = ${IpAddress}
            "forwardingAddress" = ${ForwardingAddress}
            "protocolAddress" = ${ProtocolAddress}
            "remoteAs" = ${RemoteAs}
            "weight" = ${Weight}
            "keepAlive" = ${KeepAlive}
            "holdDown" = ${HoldDown}
            "password" = ${Password}
            "routeFilteringType" = ${RouteFilteringType}
            "routeFilteringIn" = ${RouteFilteringIn}
            "routeFilteringOut" = ${RouteFilteringOut}
            "bfdEnabled" = ${BfdEnabled}
            "bfdInterval" = ${BfdInterval}
            "bfdMultiple" = ${BfdMultiple}
            "allowAsIn" = ${AllowAsIn}
            "hopLimit" = ${HopLimit}
            "restartMode" = ${RestartMode}
            "providerId" = ${ProviderId}
            "syncSource" = ${SyncSource}
            "internalId" = ${InternalId}
            "externalId" = ${ExternalId}
            "refType" = ${RefType}
            "refId" = ${RefId}
            "config" = ${Config}
            "dateCreated" = ${DateCreated}
            "lastUpdated" = ${LastUpdated}
        }

        return $PSO
    }

}

