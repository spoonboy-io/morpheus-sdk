#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
No description available.
.PARAMETER DateCreated
No description available.
.PARAMETER LastUpdated
No description available.
.PARAMETER ActionCategory
No description available.
.PARAMETER ActionMessage
No description available.
.PARAMETER ActionTitle
No description available.
.PARAMETER ActionType
No description available.
.PARAMETER ActionValue
No description available.
.PARAMETER ActionValueType
No description available.
.PARAMETER ActionPlanId
No description available.
.PARAMETER StatusMessage
No description available.
.PARAMETER AccountId
No description available.
.PARAMETER UserId
No description available.
.PARAMETER SiteId
No description available.
.PARAMETER Zone
No description available.
.PARAMETER State
No description available.
.PARAMETER StateMessage
No description available.
.PARAMETER Severity
No description available.
.PARAMETER Resolved
No description available.
.PARAMETER ResolvedMessage
No description available.
.PARAMETER RefType
No description available.
.PARAMETER RefId
No description available.
.PARAMETER RefName
No description available.
.PARAMETER Type
No description available.
.PARAMETER Savings
No description available.
.PARAMETER Resource
No description available.
.PARAMETER PlanBeforeAction
No description available.
.PARAMETER PlanAfterAction
No description available.
.PARAMETER Config
No description available.
.OUTPUTS

GuidanceVmwareSizing<PSCustomObject>
#>

function Initialize-GuidanceVmwareSizing {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${DateCreated},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${LastUpdated},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ActionCategory},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ActionMessage},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ActionTitle},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ActionType},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ActionValue},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ActionValueType},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${ActionPlanId},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${StatusMessage},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${AccountId},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${UserId},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${SiteId},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Zone},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${State},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${StateMessage},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Severity},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Resolved},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ResolvedMessage},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RefType},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${RefId},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RefName},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Type},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Savings},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Resource},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${PlanBeforeAction},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${PlanAfterAction},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Config}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => GuidanceVmwareSizing' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "dateCreated" = ${DateCreated}
            "lastUpdated" = ${LastUpdated}
            "actionCategory" = ${ActionCategory}
            "actionMessage" = ${ActionMessage}
            "actionTitle" = ${ActionTitle}
            "actionType" = ${ActionType}
            "actionValue" = ${ActionValue}
            "actionValueType" = ${ActionValueType}
            "actionPlanId" = ${ActionPlanId}
            "statusMessage" = ${StatusMessage}
            "accountId" = ${AccountId}
            "userId" = ${UserId}
            "siteId" = ${SiteId}
            "zone" = ${Zone}
            "state" = ${State}
            "stateMessage" = ${StateMessage}
            "severity" = ${Severity}
            "resolved" = ${Resolved}
            "resolvedMessage" = ${ResolvedMessage}
            "refType" = ${RefType}
            "refId" = ${RefId}
            "refName" = ${RefName}
            "type" = ${Type}
            "savings" = ${Savings}
            "resource" = ${Resource}
            "planBeforeAction" = ${PlanBeforeAction}
            "planAfterAction" = ${PlanAfterAction}
            "config" = ${Config}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to GuidanceVmwareSizing<PSCustomObject>

.DESCRIPTION

Convert from JSON to GuidanceVmwareSizing<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

GuidanceVmwareSizing<PSCustomObject>
#>
function ConvertFrom-JsonToGuidanceVmwareSizing {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => GuidanceVmwareSizing' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in GuidanceVmwareSizing
        $AllProperties = ("id", "dateCreated", "lastUpdated", "actionCategory", "actionMessage", "actionTitle", "actionType", "actionValue", "actionValueType", "actionPlanId", "statusMessage", "accountId", "userId", "siteId", "zone", "state", "stateMessage", "severity", "resolved", "resolvedMessage", "refType", "refId", "refName", "type", "savings", "resource", "planBeforeAction", "planAfterAction", "config")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dateCreated"))) { #optional property not found
            $DateCreated = $null
        } else {
            $DateCreated = $JsonParameters.PSobject.Properties["dateCreated"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lastUpdated"))) { #optional property not found
            $LastUpdated = $null
        } else {
            $LastUpdated = $JsonParameters.PSobject.Properties["lastUpdated"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "actionCategory"))) { #optional property not found
            $ActionCategory = $null
        } else {
            $ActionCategory = $JsonParameters.PSobject.Properties["actionCategory"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "actionMessage"))) { #optional property not found
            $ActionMessage = $null
        } else {
            $ActionMessage = $JsonParameters.PSobject.Properties["actionMessage"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "actionTitle"))) { #optional property not found
            $ActionTitle = $null
        } else {
            $ActionTitle = $JsonParameters.PSobject.Properties["actionTitle"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "actionType"))) { #optional property not found
            $ActionType = $null
        } else {
            $ActionType = $JsonParameters.PSobject.Properties["actionType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "actionValue"))) { #optional property not found
            $ActionValue = $null
        } else {
            $ActionValue = $JsonParameters.PSobject.Properties["actionValue"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "actionValueType"))) { #optional property not found
            $ActionValueType = $null
        } else {
            $ActionValueType = $JsonParameters.PSobject.Properties["actionValueType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "actionPlanId"))) { #optional property not found
            $ActionPlanId = $null
        } else {
            $ActionPlanId = $JsonParameters.PSobject.Properties["actionPlanId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "statusMessage"))) { #optional property not found
            $StatusMessage = $null
        } else {
            $StatusMessage = $JsonParameters.PSobject.Properties["statusMessage"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "accountId"))) { #optional property not found
            $AccountId = $null
        } else {
            $AccountId = $JsonParameters.PSobject.Properties["accountId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "userId"))) { #optional property not found
            $UserId = $null
        } else {
            $UserId = $JsonParameters.PSobject.Properties["userId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "siteId"))) { #optional property not found
            $SiteId = $null
        } else {
            $SiteId = $JsonParameters.PSobject.Properties["siteId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "zone"))) { #optional property not found
            $Zone = $null
        } else {
            $Zone = $JsonParameters.PSobject.Properties["zone"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "state"))) { #optional property not found
            $State = $null
        } else {
            $State = $JsonParameters.PSobject.Properties["state"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "stateMessage"))) { #optional property not found
            $StateMessage = $null
        } else {
            $StateMessage = $JsonParameters.PSobject.Properties["stateMessage"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "severity"))) { #optional property not found
            $Severity = $null
        } else {
            $Severity = $JsonParameters.PSobject.Properties["severity"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "resolved"))) { #optional property not found
            $Resolved = $null
        } else {
            $Resolved = $JsonParameters.PSobject.Properties["resolved"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "resolvedMessage"))) { #optional property not found
            $ResolvedMessage = $null
        } else {
            $ResolvedMessage = $JsonParameters.PSobject.Properties["resolvedMessage"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "refType"))) { #optional property not found
            $RefType = $null
        } else {
            $RefType = $JsonParameters.PSobject.Properties["refType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "refId"))) { #optional property not found
            $RefId = $null
        } else {
            $RefId = $JsonParameters.PSobject.Properties["refId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "refName"))) { #optional property not found
            $RefName = $null
        } else {
            $RefName = $JsonParameters.PSobject.Properties["refName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "savings"))) { #optional property not found
            $Savings = $null
        } else {
            $Savings = $JsonParameters.PSobject.Properties["savings"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "resource"))) { #optional property not found
            $Resource = $null
        } else {
            $Resource = $JsonParameters.PSobject.Properties["resource"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "planBeforeAction"))) { #optional property not found
            $PlanBeforeAction = $null
        } else {
            $PlanBeforeAction = $JsonParameters.PSobject.Properties["planBeforeAction"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "planAfterAction"))) { #optional property not found
            $PlanAfterAction = $null
        } else {
            $PlanAfterAction = $JsonParameters.PSobject.Properties["planAfterAction"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "config"))) { #optional property not found
            $Config = $null
        } else {
            $Config = $JsonParameters.PSobject.Properties["config"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "dateCreated" = ${DateCreated}
            "lastUpdated" = ${LastUpdated}
            "actionCategory" = ${ActionCategory}
            "actionMessage" = ${ActionMessage}
            "actionTitle" = ${ActionTitle}
            "actionType" = ${ActionType}
            "actionValue" = ${ActionValue}
            "actionValueType" = ${ActionValueType}
            "actionPlanId" = ${ActionPlanId}
            "statusMessage" = ${StatusMessage}
            "accountId" = ${AccountId}
            "userId" = ${UserId}
            "siteId" = ${SiteId}
            "zone" = ${Zone}
            "state" = ${State}
            "stateMessage" = ${StateMessage}
            "severity" = ${Severity}
            "resolved" = ${Resolved}
            "resolvedMessage" = ${ResolvedMessage}
            "refType" = ${RefType}
            "refId" = ${RefId}
            "refName" = ${RefName}
            "type" = ${Type}
            "savings" = ${Savings}
            "resource" = ${Resource}
            "planBeforeAction" = ${PlanBeforeAction}
            "planAfterAction" = ${PlanAfterAction}
            "config" = ${Config}
        }

        return $PSO
    }

}

