#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER RefType
No description available.
.PARAMETER RefId
No description available.
.PARAMETER RefName
No description available.
.PARAMETER SubRefName
No description available.
.PARAMETER StateDate
No description available.
.PARAMETER Status
No description available.
.PARAMETER IacDrift
No description available.
.OUTPUTS

AppStateWorkloadsInner<PSCustomObject>
#>

function Initialize-AppStateWorkloadsInner {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RefType},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${RefId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RefName},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SubRefName},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${StateDate},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Status},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IacDrift}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => AppStateWorkloadsInner' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "refType" = ${RefType}
            "refId" = ${RefId}
            "refName" = ${RefName}
            "subRefName" = ${SubRefName}
            "stateDate" = ${StateDate}
            "status" = ${Status}
            "iacDrift" = ${IacDrift}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to AppStateWorkloadsInner<PSCustomObject>

.DESCRIPTION

Convert from JSON to AppStateWorkloadsInner<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

AppStateWorkloadsInner<PSCustomObject>
#>
function ConvertFrom-JsonToAppStateWorkloadsInner {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => AppStateWorkloadsInner' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in AppStateWorkloadsInner
        $AllProperties = ("refType", "refId", "refName", "subRefName", "stateDate", "status", "iacDrift")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "refType"))) { #optional property not found
            $RefType = $null
        } else {
            $RefType = $JsonParameters.PSobject.Properties["refType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "refId"))) { #optional property not found
            $RefId = $null
        } else {
            $RefId = $JsonParameters.PSobject.Properties["refId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "refName"))) { #optional property not found
            $RefName = $null
        } else {
            $RefName = $JsonParameters.PSobject.Properties["refName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "subRefName"))) { #optional property not found
            $SubRefName = $null
        } else {
            $SubRefName = $JsonParameters.PSobject.Properties["subRefName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "stateDate"))) { #optional property not found
            $StateDate = $null
        } else {
            $StateDate = $JsonParameters.PSobject.Properties["stateDate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "status"))) { #optional property not found
            $Status = $null
        } else {
            $Status = $JsonParameters.PSobject.Properties["status"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "iacDrift"))) { #optional property not found
            $IacDrift = $null
        } else {
            $IacDrift = $JsonParameters.PSobject.Properties["iacDrift"].value
        }

        $PSO = [PSCustomObject]@{
            "refType" = ${RefType}
            "refId" = ${RefId}
            "refName" = ${RefName}
            "subRefName" = ${SubRefName}
            "stateDate" = ${StateDate}
            "status" = ${Status}
            "iacDrift" = ${IacDrift}
        }

        return $PSO
    }

}

