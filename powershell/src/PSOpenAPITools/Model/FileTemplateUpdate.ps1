#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Name
File template name
.PARAMETER Labels
Array of label strings, can be used for filtering.
.PARAMETER FileName
Filename for the file template
.PARAMETER FilePath
Path for the file template
.PARAMETER Category
Category
.PARAMETER TemplatePhase
Template Phase, provision, start, etc.
.PARAMETER Template
Template content, that is, the file template content itself.
.PARAMETER FileOwner
File Owner
.PARAMETER SettingName
Setting Name
.PARAMETER SettingCategory
Setting Category
.OUTPUTS

FileTemplateUpdate<PSCustomObject>
#>

function Initialize-FileTemplateUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${Labels},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FileName},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FilePath},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Category},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TemplatePhase},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Template},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${FileOwner},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SettingName},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SettingCategory}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => FileTemplateUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "labels" = ${Labels}
            "fileName" = ${FileName}
            "filePath" = ${FilePath}
            "category" = ${Category}
            "templatePhase" = ${TemplatePhase}
            "template" = ${Template}
            "fileOwner" = ${FileOwner}
            "settingName" = ${SettingName}
            "settingCategory" = ${SettingCategory}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to FileTemplateUpdate<PSCustomObject>

.DESCRIPTION

Convert from JSON to FileTemplateUpdate<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

FileTemplateUpdate<PSCustomObject>
#>
function ConvertFrom-JsonToFileTemplateUpdate {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => FileTemplateUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in FileTemplateUpdate
        $AllProperties = ("name", "labels", "fileName", "filePath", "category", "templatePhase", "template", "fileOwner", "settingName", "settingCategory")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "labels"))) { #optional property not found
            $Labels = $null
        } else {
            $Labels = $JsonParameters.PSobject.Properties["labels"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "fileName"))) { #optional property not found
            $FileName = $null
        } else {
            $FileName = $JsonParameters.PSobject.Properties["fileName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "filePath"))) { #optional property not found
            $FilePath = $null
        } else {
            $FilePath = $JsonParameters.PSobject.Properties["filePath"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "category"))) { #optional property not found
            $Category = $null
        } else {
            $Category = $JsonParameters.PSobject.Properties["category"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "templatePhase"))) { #optional property not found
            $TemplatePhase = $null
        } else {
            $TemplatePhase = $JsonParameters.PSobject.Properties["templatePhase"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "template"))) { #optional property not found
            $Template = $null
        } else {
            $Template = $JsonParameters.PSobject.Properties["template"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "fileOwner"))) { #optional property not found
            $FileOwner = $null
        } else {
            $FileOwner = $JsonParameters.PSobject.Properties["fileOwner"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "settingName"))) { #optional property not found
            $SettingName = $null
        } else {
            $SettingName = $JsonParameters.PSobject.Properties["settingName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "settingCategory"))) { #optional property not found
            $SettingCategory = $null
        } else {
            $SettingCategory = $JsonParameters.PSobject.Properties["settingCategory"].value
        }

        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "labels" = ${Labels}
            "fileName" = ${FileName}
            "filePath" = ${FilePath}
            "category" = ${Category}
            "templatePhase" = ${TemplatePhase}
            "template" = ${Template}
            "fileOwner" = ${FileOwner}
            "settingName" = ${SettingName}
            "settingCategory" = ${SettingCategory}
        }

        return $PSO
    }

}

