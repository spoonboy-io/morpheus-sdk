#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Json

JSON object

.OUTPUTS

AddIntegrations200ResponseAllOfIntegration<PSCustomObject>
#>
function ConvertFrom-JsonToAddIntegrations200ResponseAllOfIntegration {
    [CmdletBinding()]
    Param (
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        $match = 0
        $matchType = $null
        $matchInstance = $null

        # try to match IntegrationAnsible defined in the oneOf schemas
        try {
            $matchInstance = ConvertFrom-JsonToIntegrationAnsible $Json

            foreach($property in $matchInstance.PsObject.Properties) {
                if ($null -ne $property.Value) {
                    $matchType = "IntegrationAnsible"
                    $match++
                    break
                }
            }
        } catch {
            # fail to match the schema defined in oneOf, proceed to the next one
            Write-Debug "Failed to match 'IntegrationAnsible' defined in oneOf (AddIntegrations200ResponseAllOfIntegration). Proceeding to the next one if any."
        }

        # try to match IntegrationAnsibleTower defined in the oneOf schemas
        try {
            $matchInstance = ConvertFrom-JsonToIntegrationAnsibleTower $Json

            foreach($property in $matchInstance.PsObject.Properties) {
                if ($null -ne $property.Value) {
                    $matchType = "IntegrationAnsibleTower"
                    $match++
                    break
                }
            }
        } catch {
            # fail to match the schema defined in oneOf, proceed to the next one
            Write-Debug "Failed to match 'IntegrationAnsibleTower' defined in oneOf (AddIntegrations200ResponseAllOfIntegration). Proceeding to the next one if any."
        }

        # try to match IntegrationBindDNS defined in the oneOf schemas
        try {
            $matchInstance = ConvertFrom-JsonToIntegrationBindDNS $Json

            foreach($property in $matchInstance.PsObject.Properties) {
                if ($null -ne $property.Value) {
                    $matchType = "IntegrationBindDNS"
                    $match++
                    break
                }
            }
        } catch {
            # fail to match the schema defined in oneOf, proceed to the next one
            Write-Debug "Failed to match 'IntegrationBindDNS' defined in oneOf (AddIntegrations200ResponseAllOfIntegration). Proceeding to the next one if any."
        }

        # try to match IntegrationChef defined in the oneOf schemas
        try {
            $matchInstance = ConvertFrom-JsonToIntegrationChef $Json

            foreach($property in $matchInstance.PsObject.Properties) {
                if ($null -ne $property.Value) {
                    $matchType = "IntegrationChef"
                    $match++
                    break
                }
            }
        } catch {
            # fail to match the schema defined in oneOf, proceed to the next one
            Write-Debug "Failed to match 'IntegrationChef' defined in oneOf (AddIntegrations200ResponseAllOfIntegration). Proceeding to the next one if any."
        }

        # try to match IntegrationCherwell defined in the oneOf schemas
        try {
            $matchInstance = ConvertFrom-JsonToIntegrationCherwell $Json

            foreach($property in $matchInstance.PsObject.Properties) {
                if ($null -ne $property.Value) {
                    $matchType = "IntegrationCherwell"
                    $match++
                    break
                }
            }
        } catch {
            # fail to match the schema defined in oneOf, proceed to the next one
            Write-Debug "Failed to match 'IntegrationCherwell' defined in oneOf (AddIntegrations200ResponseAllOfIntegration). Proceeding to the next one if any."
        }

        # try to match IntegrationCypher defined in the oneOf schemas
        try {
            $matchInstance = ConvertFrom-JsonToIntegrationCypher $Json

            foreach($property in $matchInstance.PsObject.Properties) {
                if ($null -ne $property.Value) {
                    $matchType = "IntegrationCypher"
                    $match++
                    break
                }
            }
        } catch {
            # fail to match the schema defined in oneOf, proceed to the next one
            Write-Debug "Failed to match 'IntegrationCypher' defined in oneOf (AddIntegrations200ResponseAllOfIntegration). Proceeding to the next one if any."
        }

        # try to match IntegrationDockerRepo defined in the oneOf schemas
        try {
            $matchInstance = ConvertFrom-JsonToIntegrationDockerRepo $Json

            foreach($property in $matchInstance.PsObject.Properties) {
                if ($null -ne $property.Value) {
                    $matchType = "IntegrationDockerRepo"
                    $match++
                    break
                }
            }
        } catch {
            # fail to match the schema defined in oneOf, proceed to the next one
            Write-Debug "Failed to match 'IntegrationDockerRepo' defined in oneOf (AddIntegrations200ResponseAllOfIntegration). Proceeding to the next one if any."
        }

        # try to match IntegrationGitHub defined in the oneOf schemas
        try {
            $matchInstance = ConvertFrom-JsonToIntegrationGitHub $Json

            foreach($property in $matchInstance.PsObject.Properties) {
                if ($null -ne $property.Value) {
                    $matchType = "IntegrationGitHub"
                    $match++
                    break
                }
            }
        } catch {
            # fail to match the schema defined in oneOf, proceed to the next one
            Write-Debug "Failed to match 'IntegrationGitHub' defined in oneOf (AddIntegrations200ResponseAllOfIntegration). Proceeding to the next one if any."
        }

        # try to match IntegrationGitRepo defined in the oneOf schemas
        try {
            $matchInstance = ConvertFrom-JsonToIntegrationGitRepo $Json

            foreach($property in $matchInstance.PsObject.Properties) {
                if ($null -ne $property.Value) {
                    $matchType = "IntegrationGitRepo"
                    $match++
                    break
                }
            }
        } catch {
            # fail to match the schema defined in oneOf, proceed to the next one
            Write-Debug "Failed to match 'IntegrationGitRepo' defined in oneOf (AddIntegrations200ResponseAllOfIntegration). Proceeding to the next one if any."
        }

        # try to match IntegrationMicrosoftDNS defined in the oneOf schemas
        try {
            $matchInstance = ConvertFrom-JsonToIntegrationMicrosoftDNS $Json

            foreach($property in $matchInstance.PsObject.Properties) {
                if ($null -ne $property.Value) {
                    $matchType = "IntegrationMicrosoftDNS"
                    $match++
                    break
                }
            }
        } catch {
            # fail to match the schema defined in oneOf, proceed to the next one
            Write-Debug "Failed to match 'IntegrationMicrosoftDNS' defined in oneOf (AddIntegrations200ResponseAllOfIntegration). Proceeding to the next one if any."
        }

        # try to match IntegrationPowerDNS defined in the oneOf schemas
        try {
            $matchInstance = ConvertFrom-JsonToIntegrationPowerDNS $Json

            foreach($property in $matchInstance.PsObject.Properties) {
                if ($null -ne $property.Value) {
                    $matchType = "IntegrationPowerDNS"
                    $match++
                    break
                }
            }
        } catch {
            # fail to match the schema defined in oneOf, proceed to the next one
            Write-Debug "Failed to match 'IntegrationPowerDNS' defined in oneOf (AddIntegrations200ResponseAllOfIntegration). Proceeding to the next one if any."
        }

        # try to match IntegrationPuppet defined in the oneOf schemas
        try {
            $matchInstance = ConvertFrom-JsonToIntegrationPuppet $Json

            foreach($property in $matchInstance.PsObject.Properties) {
                if ($null -ne $property.Value) {
                    $matchType = "IntegrationPuppet"
                    $match++
                    break
                }
            }
        } catch {
            # fail to match the schema defined in oneOf, proceed to the next one
            Write-Debug "Failed to match 'IntegrationPuppet' defined in oneOf (AddIntegrations200ResponseAllOfIntegration). Proceeding to the next one if any."
        }

        # try to match IntegrationRemedy defined in the oneOf schemas
        try {
            $matchInstance = ConvertFrom-JsonToIntegrationRemedy $Json

            foreach($property in $matchInstance.PsObject.Properties) {
                if ($null -ne $property.Value) {
                    $matchType = "IntegrationRemedy"
                    $match++
                    break
                }
            }
        } catch {
            # fail to match the schema defined in oneOf, proceed to the next one
            Write-Debug "Failed to match 'IntegrationRemedy' defined in oneOf (AddIntegrations200ResponseAllOfIntegration). Proceeding to the next one if any."
        }

        # try to match IntegrationRoute53 defined in the oneOf schemas
        try {
            $matchInstance = ConvertFrom-JsonToIntegrationRoute53 $Json

            foreach($property in $matchInstance.PsObject.Properties) {
                if ($null -ne $property.Value) {
                    $matchType = "IntegrationRoute53"
                    $match++
                    break
                }
            }
        } catch {
            # fail to match the schema defined in oneOf, proceed to the next one
            Write-Debug "Failed to match 'IntegrationRoute53' defined in oneOf (AddIntegrations200ResponseAllOfIntegration). Proceeding to the next one if any."
        }

        # try to match IntegrationSNOW defined in the oneOf schemas
        try {
            $matchInstance = ConvertFrom-JsonToIntegrationSNOW $Json

            foreach($property in $matchInstance.PsObject.Properties) {
                if ($null -ne $property.Value) {
                    $matchType = "IntegrationSNOW"
                    $match++
                    break
                }
            }
        } catch {
            # fail to match the schema defined in oneOf, proceed to the next one
            Write-Debug "Failed to match 'IntegrationSNOW' defined in oneOf (AddIntegrations200ResponseAllOfIntegration). Proceeding to the next one if any."
        }

        # try to match IntegrationSaltMaster defined in the oneOf schemas
        try {
            $matchInstance = ConvertFrom-JsonToIntegrationSaltMaster $Json

            foreach($property in $matchInstance.PsObject.Properties) {
                if ($null -ne $property.Value) {
                    $matchType = "IntegrationSaltMaster"
                    $match++
                    break
                }
            }
        } catch {
            # fail to match the schema defined in oneOf, proceed to the next one
            Write-Debug "Failed to match 'IntegrationSaltMaster' defined in oneOf (AddIntegrations200ResponseAllOfIntegration). Proceeding to the next one if any."
        }

        # try to match IntegrationvRO defined in the oneOf schemas
        try {
            $matchInstance = ConvertFrom-JsonToIntegrationvRO $Json

            foreach($property in $matchInstance.PsObject.Properties) {
                if ($null -ne $property.Value) {
                    $matchType = "IntegrationvRO"
                    $match++
                    break
                }
            }
        } catch {
            # fail to match the schema defined in oneOf, proceed to the next one
            Write-Debug "Failed to match 'IntegrationvRO' defined in oneOf (AddIntegrations200ResponseAllOfIntegration). Proceeding to the next one if any."
        }

        if ($match -gt 1) {
            throw "Error! The JSON payload matches more than one type defined in oneOf schemas ([IntegrationAnsible, IntegrationAnsibleTower, IntegrationBindDNS, IntegrationChef, IntegrationCherwell, IntegrationCypher, IntegrationDockerRepo, IntegrationGitHub, IntegrationGitRepo, IntegrationMicrosoftDNS, IntegrationPowerDNS, IntegrationPuppet, IntegrationRemedy, IntegrationRoute53, IntegrationSNOW, IntegrationSaltMaster, IntegrationvRO]). JSON Payload: $($Json)"
        } elseif ($match -eq 1) {
            return [PSCustomObject]@{
                "ActualType" = ${matchType}
                "ActualInstance" = ${matchInstance}
                "OneOfSchemas" = @("IntegrationAnsible", "IntegrationAnsibleTower", "IntegrationBindDNS", "IntegrationChef", "IntegrationCherwell", "IntegrationCypher", "IntegrationDockerRepo", "IntegrationGitHub", "IntegrationGitRepo", "IntegrationMicrosoftDNS", "IntegrationPowerDNS", "IntegrationPuppet", "IntegrationRemedy", "IntegrationRoute53", "IntegrationSNOW", "IntegrationSaltMaster", "IntegrationvRO")
            }
        } else {
            throw "Error! The JSON payload doesn't matches any type defined in oneOf schemas ([IntegrationAnsible, IntegrationAnsibleTower, IntegrationBindDNS, IntegrationChef, IntegrationCherwell, IntegrationCypher, IntegrationDockerRepo, IntegrationGitHub, IntegrationGitRepo, IntegrationMicrosoftDNS, IntegrationPowerDNS, IntegrationPuppet, IntegrationRemedy, IntegrationRoute53, IntegrationSNOW, IntegrationSaltMaster, IntegrationvRO]). JSON Payload: $($Json)"
        }
    }
}

