#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Success
No description available.
.PARAMETER MaxMemory
No description available.
.PARAMETER TotalMemory
No description available.
.PARAMETER FreeMemory
No description available.
.PARAMETER UsedMemory
No description available.
.PARAMETER SystemMemory
No description available.
.PARAMETER CommittedMemory
No description available.
.PARAMETER SystemFreeMemory
No description available.
.PARAMETER SystemSwap
No description available.
.PARAMETER SystemFreeSwap
No description available.
.PARAMETER SwapPercent
No description available.
.PARAMETER MemoryPercent
No description available.
.PARAMETER SystemMemoryPercent
No description available.
.PARAMETER Status
No description available.
.OUTPUTS

HealthMemory<PSCustomObject>
#>

function Initialize-HealthMemory {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Success},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${MaxMemory},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${TotalMemory},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${FreeMemory},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${UsedMemory},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${SystemMemory},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${CommittedMemory},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${SystemFreeMemory},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${SystemSwap},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${SystemFreeSwap},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${SwapPercent},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${MemoryPercent},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${SystemMemoryPercent},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Status}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => HealthMemory' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "success" = ${Success}
            "maxMemory" = ${MaxMemory}
            "totalMemory" = ${TotalMemory}
            "freeMemory" = ${FreeMemory}
            "usedMemory" = ${UsedMemory}
            "systemMemory" = ${SystemMemory}
            "committedMemory" = ${CommittedMemory}
            "systemFreeMemory" = ${SystemFreeMemory}
            "systemSwap" = ${SystemSwap}
            "systemFreeSwap" = ${SystemFreeSwap}
            "swapPercent" = ${SwapPercent}
            "memoryPercent" = ${MemoryPercent}
            "systemMemoryPercent" = ${SystemMemoryPercent}
            "status" = ${Status}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to HealthMemory<PSCustomObject>

.DESCRIPTION

Convert from JSON to HealthMemory<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

HealthMemory<PSCustomObject>
#>
function ConvertFrom-JsonToHealthMemory {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => HealthMemory' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in HealthMemory
        $AllProperties = ("success", "maxMemory", "totalMemory", "freeMemory", "usedMemory", "systemMemory", "committedMemory", "systemFreeMemory", "systemSwap", "systemFreeSwap", "swapPercent", "memoryPercent", "systemMemoryPercent", "status")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "success"))) { #optional property not found
            $Success = $null
        } else {
            $Success = $JsonParameters.PSobject.Properties["success"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "maxMemory"))) { #optional property not found
            $MaxMemory = $null
        } else {
            $MaxMemory = $JsonParameters.PSobject.Properties["maxMemory"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "totalMemory"))) { #optional property not found
            $TotalMemory = $null
        } else {
            $TotalMemory = $JsonParameters.PSobject.Properties["totalMemory"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "freeMemory"))) { #optional property not found
            $FreeMemory = $null
        } else {
            $FreeMemory = $JsonParameters.PSobject.Properties["freeMemory"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "usedMemory"))) { #optional property not found
            $UsedMemory = $null
        } else {
            $UsedMemory = $JsonParameters.PSobject.Properties["usedMemory"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "systemMemory"))) { #optional property not found
            $SystemMemory = $null
        } else {
            $SystemMemory = $JsonParameters.PSobject.Properties["systemMemory"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "committedMemory"))) { #optional property not found
            $CommittedMemory = $null
        } else {
            $CommittedMemory = $JsonParameters.PSobject.Properties["committedMemory"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "systemFreeMemory"))) { #optional property not found
            $SystemFreeMemory = $null
        } else {
            $SystemFreeMemory = $JsonParameters.PSobject.Properties["systemFreeMemory"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "systemSwap"))) { #optional property not found
            $SystemSwap = $null
        } else {
            $SystemSwap = $JsonParameters.PSobject.Properties["systemSwap"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "systemFreeSwap"))) { #optional property not found
            $SystemFreeSwap = $null
        } else {
            $SystemFreeSwap = $JsonParameters.PSobject.Properties["systemFreeSwap"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "swapPercent"))) { #optional property not found
            $SwapPercent = $null
        } else {
            $SwapPercent = $JsonParameters.PSobject.Properties["swapPercent"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "memoryPercent"))) { #optional property not found
            $MemoryPercent = $null
        } else {
            $MemoryPercent = $JsonParameters.PSobject.Properties["memoryPercent"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "systemMemoryPercent"))) { #optional property not found
            $SystemMemoryPercent = $null
        } else {
            $SystemMemoryPercent = $JsonParameters.PSobject.Properties["systemMemoryPercent"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "status"))) { #optional property not found
            $Status = $null
        } else {
            $Status = $JsonParameters.PSobject.Properties["status"].value
        }

        $PSO = [PSCustomObject]@{
            "success" = ${Success}
            "maxMemory" = ${MaxMemory}
            "totalMemory" = ${TotalMemory}
            "freeMemory" = ${FreeMemory}
            "usedMemory" = ${UsedMemory}
            "systemMemory" = ${SystemMemory}
            "committedMemory" = ${CommittedMemory}
            "systemFreeMemory" = ${SystemFreeMemory}
            "systemSwap" = ${SystemSwap}
            "systemFreeSwap" = ${SystemFreeSwap}
            "swapPercent" = ${SwapPercent}
            "memoryPercent" = ${MemoryPercent}
            "systemMemoryPercent" = ${SystemMemoryPercent}
            "status" = ${Status}
        }

        return $PSO
    }

}

