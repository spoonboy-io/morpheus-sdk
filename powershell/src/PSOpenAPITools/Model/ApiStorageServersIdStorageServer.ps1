#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Name
Name
.PARAMETER Type
The `Storage Type` Code or ID
.PARAMETER Description
description
.PARAMETER Enabled
The enabled flag
.PARAMETER Config
Configuration object with parameters that vary by `type`
.PARAMETER Visibility
private or public
.PARAMETER Tenants
Array of tenant account ids that are allowed access
.OUTPUTS

ApiStorageServersIdStorageServer<PSCustomObject>
#>

function Initialize-ApiStorageServersIdStorageServer {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Type},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Enabled} = $true,
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Config},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("private", "public")]
        [String]
        ${Visibility} = "private",
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Tenants}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ApiStorageServersIdStorageServer' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "type" = ${Type}
            "description" = ${Description}
            "enabled" = ${Enabled}
            "config" = ${Config}
            "visibility" = ${Visibility}
            "tenants" = ${Tenants}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ApiStorageServersIdStorageServer<PSCustomObject>

.DESCRIPTION

Convert from JSON to ApiStorageServersIdStorageServer<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ApiStorageServersIdStorageServer<PSCustomObject>
#>
function ConvertFrom-JsonToApiStorageServersIdStorageServer {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ApiStorageServersIdStorageServer' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ApiStorageServersIdStorageServer
        $AllProperties = ("name", "type", "description", "enabled", "config", "visibility", "tenants")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "enabled"))) { #optional property not found
            $Enabled = $null
        } else {
            $Enabled = $JsonParameters.PSobject.Properties["enabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "config"))) { #optional property not found
            $Config = $null
        } else {
            $Config = $JsonParameters.PSobject.Properties["config"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "visibility"))) { #optional property not found
            $Visibility = $null
        } else {
            $Visibility = $JsonParameters.PSobject.Properties["visibility"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tenants"))) { #optional property not found
            $Tenants = $null
        } else {
            $Tenants = $JsonParameters.PSobject.Properties["tenants"].value
        }

        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "type" = ${Type}
            "description" = ${Description}
            "enabled" = ${Enabled}
            "config" = ${Config}
            "visibility" = ${Visibility}
            "tenants" = ${Tenants}
        }

        return $PSO
    }

}

