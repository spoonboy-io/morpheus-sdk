#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
No description available.
.PARAMETER UniqueId
No description available.
.PARAMETER ContainerId
No description available.
.PARAMETER ServerId
No description available.
.PARAMETER InstanceId
No description available.
.PARAMETER ResourceId
No description available.
.PARAMETER AppId
No description available.
.PARAMETER StdOut
No description available.
.PARAMETER StdErr
No description available.
.PARAMETER ExitCode
No description available.
.PARAMETER Status
No description available.
.PARAMETER ExpiresAt
No description available.
.PARAMETER CreatedById
No description available.
.PARAMETER StatusMessage
No description available.
.PARAMETER ErrorMessage
No description available.
.PARAMETER Config
No description available.
.PARAMETER RawData
No description available.
.OUTPUTS

ExecutionRequest<PSCustomObject>
#>

function Initialize-ExecutionRequest {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${UniqueId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ContainerId},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ServerId},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${InstanceId},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ResourceId},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AppId},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${StdOut},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${StdErr},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${ExitCode},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Status},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${ExpiresAt},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${CreatedById},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${StatusMessage},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ErrorMessage},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Config},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RawData}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ExecutionRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "uniqueId" = ${UniqueId}
            "containerId" = ${ContainerId}
            "serverId" = ${ServerId}
            "instanceId" = ${InstanceId}
            "resourceId" = ${ResourceId}
            "appId" = ${AppId}
            "stdOut" = ${StdOut}
            "stdErr" = ${StdErr}
            "exitCode" = ${ExitCode}
            "status" = ${Status}
            "expiresAt" = ${ExpiresAt}
            "createdById" = ${CreatedById}
            "statusMessage" = ${StatusMessage}
            "errorMessage" = ${ErrorMessage}
            "config" = ${Config}
            "rawData" = ${RawData}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ExecutionRequest<PSCustomObject>

.DESCRIPTION

Convert from JSON to ExecutionRequest<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ExecutionRequest<PSCustomObject>
#>
function ConvertFrom-JsonToExecutionRequest {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ExecutionRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ExecutionRequest
        $AllProperties = ("id", "uniqueId", "containerId", "serverId", "instanceId", "resourceId", "appId", "stdOut", "stdErr", "exitCode", "status", "expiresAt", "createdById", "statusMessage", "errorMessage", "config", "rawData")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "uniqueId"))) { #optional property not found
            $UniqueId = $null
        } else {
            $UniqueId = $JsonParameters.PSobject.Properties["uniqueId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "containerId"))) { #optional property not found
            $ContainerId = $null
        } else {
            $ContainerId = $JsonParameters.PSobject.Properties["containerId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "serverId"))) { #optional property not found
            $ServerId = $null
        } else {
            $ServerId = $JsonParameters.PSobject.Properties["serverId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "instanceId"))) { #optional property not found
            $InstanceId = $null
        } else {
            $InstanceId = $JsonParameters.PSobject.Properties["instanceId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "resourceId"))) { #optional property not found
            $ResourceId = $null
        } else {
            $ResourceId = $JsonParameters.PSobject.Properties["resourceId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "appId"))) { #optional property not found
            $AppId = $null
        } else {
            $AppId = $JsonParameters.PSobject.Properties["appId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "stdOut"))) { #optional property not found
            $StdOut = $null
        } else {
            $StdOut = $JsonParameters.PSobject.Properties["stdOut"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "stdErr"))) { #optional property not found
            $StdErr = $null
        } else {
            $StdErr = $JsonParameters.PSobject.Properties["stdErr"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "exitCode"))) { #optional property not found
            $ExitCode = $null
        } else {
            $ExitCode = $JsonParameters.PSobject.Properties["exitCode"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "status"))) { #optional property not found
            $Status = $null
        } else {
            $Status = $JsonParameters.PSobject.Properties["status"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "expiresAt"))) { #optional property not found
            $ExpiresAt = $null
        } else {
            $ExpiresAt = $JsonParameters.PSobject.Properties["expiresAt"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "createdById"))) { #optional property not found
            $CreatedById = $null
        } else {
            $CreatedById = $JsonParameters.PSobject.Properties["createdById"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "statusMessage"))) { #optional property not found
            $StatusMessage = $null
        } else {
            $StatusMessage = $JsonParameters.PSobject.Properties["statusMessage"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "errorMessage"))) { #optional property not found
            $ErrorMessage = $null
        } else {
            $ErrorMessage = $JsonParameters.PSobject.Properties["errorMessage"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "config"))) { #optional property not found
            $Config = $null
        } else {
            $Config = $JsonParameters.PSobject.Properties["config"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "rawData"))) { #optional property not found
            $RawData = $null
        } else {
            $RawData = $JsonParameters.PSobject.Properties["rawData"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "uniqueId" = ${UniqueId}
            "containerId" = ${ContainerId}
            "serverId" = ${ServerId}
            "instanceId" = ${InstanceId}
            "resourceId" = ${ResourceId}
            "appId" = ${AppId}
            "stdOut" = ${StdOut}
            "stdErr" = ${StdErr}
            "exitCode" = ${ExitCode}
            "status" = ${Status}
            "expiresAt" = ${ExpiresAt}
            "createdById" = ${CreatedById}
            "statusMessage" = ${StatusMessage}
            "errorMessage" = ${ErrorMessage}
            "config" = ${Config}
            "rawData" = ${RawData}
        }

        return $PSO
    }

}

