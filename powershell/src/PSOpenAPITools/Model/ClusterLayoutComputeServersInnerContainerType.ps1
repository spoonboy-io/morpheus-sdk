#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
No description available.
.PARAMETER Account
No description available.
.PARAMETER Name
No description available.
.PARAMETER Labels
No description available.
.PARAMETER ShortName
No description available.
.PARAMETER Code
No description available.
.PARAMETER ContainerVersion
No description available.
.PARAMETER ProvisionType
No description available.
.PARAMETER VirtualImage
No description available.
.PARAMETER Category
No description available.
.PARAMETER Config
No description available.
.PARAMETER ContainerPorts
No description available.
.PARAMETER ContainerScripts
No description available.
.PARAMETER ContainerTemplates
No description available.
.PARAMETER EnvironmentVariables
No description available.
.OUTPUTS

ClusterLayoutComputeServersInnerContainerType<PSCustomObject>
#>

function Initialize-ClusterLayoutComputeServersInnerContainerType {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Account},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${Labels},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ShortName},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Code},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ContainerVersion},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${ProvisionType},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${VirtualImage},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Category},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Config},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${ContainerPorts},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${ContainerScripts},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${ContainerTemplates},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${EnvironmentVariables}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ClusterLayoutComputeServersInnerContainerType' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "account" = ${Account}
            "name" = ${Name}
            "labels" = ${Labels}
            "shortName" = ${ShortName}
            "code" = ${Code}
            "containerVersion" = ${ContainerVersion}
            "provisionType" = ${ProvisionType}
            "virtualImage" = ${VirtualImage}
            "category" = ${Category}
            "config" = ${Config}
            "containerPorts" = ${ContainerPorts}
            "containerScripts" = ${ContainerScripts}
            "containerTemplates" = ${ContainerTemplates}
            "environmentVariables" = ${EnvironmentVariables}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ClusterLayoutComputeServersInnerContainerType<PSCustomObject>

.DESCRIPTION

Convert from JSON to ClusterLayoutComputeServersInnerContainerType<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ClusterLayoutComputeServersInnerContainerType<PSCustomObject>
#>
function ConvertFrom-JsonToClusterLayoutComputeServersInnerContainerType {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ClusterLayoutComputeServersInnerContainerType' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ClusterLayoutComputeServersInnerContainerType
        $AllProperties = ("id", "account", "name", "labels", "shortName", "code", "containerVersion", "provisionType", "virtualImage", "category", "config", "containerPorts", "containerScripts", "containerTemplates", "environmentVariables")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "account"))) { #optional property not found
            $Account = $null
        } else {
            $Account = $JsonParameters.PSobject.Properties["account"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "labels"))) { #optional property not found
            $Labels = $null
        } else {
            $Labels = $JsonParameters.PSobject.Properties["labels"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "shortName"))) { #optional property not found
            $ShortName = $null
        } else {
            $ShortName = $JsonParameters.PSobject.Properties["shortName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "code"))) { #optional property not found
            $Code = $null
        } else {
            $Code = $JsonParameters.PSobject.Properties["code"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "containerVersion"))) { #optional property not found
            $ContainerVersion = $null
        } else {
            $ContainerVersion = $JsonParameters.PSobject.Properties["containerVersion"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "provisionType"))) { #optional property not found
            $ProvisionType = $null
        } else {
            $ProvisionType = $JsonParameters.PSobject.Properties["provisionType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "virtualImage"))) { #optional property not found
            $VirtualImage = $null
        } else {
            $VirtualImage = $JsonParameters.PSobject.Properties["virtualImage"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "category"))) { #optional property not found
            $Category = $null
        } else {
            $Category = $JsonParameters.PSobject.Properties["category"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "config"))) { #optional property not found
            $Config = $null
        } else {
            $Config = $JsonParameters.PSobject.Properties["config"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "containerPorts"))) { #optional property not found
            $ContainerPorts = $null
        } else {
            $ContainerPorts = $JsonParameters.PSobject.Properties["containerPorts"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "containerScripts"))) { #optional property not found
            $ContainerScripts = $null
        } else {
            $ContainerScripts = $JsonParameters.PSobject.Properties["containerScripts"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "containerTemplates"))) { #optional property not found
            $ContainerTemplates = $null
        } else {
            $ContainerTemplates = $JsonParameters.PSobject.Properties["containerTemplates"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "environmentVariables"))) { #optional property not found
            $EnvironmentVariables = $null
        } else {
            $EnvironmentVariables = $JsonParameters.PSobject.Properties["environmentVariables"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "account" = ${Account}
            "name" = ${Name}
            "labels" = ${Labels}
            "shortName" = ${ShortName}
            "code" = ${Code}
            "containerVersion" = ${ContainerVersion}
            "provisionType" = ${ProvisionType}
            "virtualImage" = ${VirtualImage}
            "category" = ${Category}
            "config" = ${Config}
            "containerPorts" = ${ContainerPorts}
            "containerScripts" = ${ContainerScripts}
            "containerTemplates" = ${ContainerTemplates}
            "environmentVariables" = ${EnvironmentVariables}
        }

        return $PSO
    }

}

