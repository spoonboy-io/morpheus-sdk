#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER SshPort
No description available.
.PARAMETER CheckUser
No description available.
.PARAMETER TunnelOn
No description available.
.PARAMETER TextCheckOn
No description available.
.PARAMETER CheckPassword
No description available.
.PARAMETER SshHost
No description available.
.PARAMETER SshUser
No description available.
.PARAMETER WebTextMatch
No description available.
.PARAMETER CheckPasswordHash
No description available.
.OUTPUTS

CheckSshConfig<PSCustomObject>
#>

function Initialize-CheckSshConfig {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${SshPort},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CheckUser},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TunnelOn},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TextCheckOn},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CheckPassword},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SshHost},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SshUser},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${WebTextMatch},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CheckPasswordHash}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => CheckSshConfig' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "sshPort" = ${SshPort}
            "checkUser" = ${CheckUser}
            "tunnelOn" = ${TunnelOn}
            "textCheckOn" = ${TextCheckOn}
            "checkPassword" = ${CheckPassword}
            "sshHost" = ${SshHost}
            "sshUser" = ${SshUser}
            "webTextMatch" = ${WebTextMatch}
            "checkPasswordHash" = ${CheckPasswordHash}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to CheckSshConfig<PSCustomObject>

.DESCRIPTION

Convert from JSON to CheckSshConfig<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

CheckSshConfig<PSCustomObject>
#>
function ConvertFrom-JsonToCheckSshConfig {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => CheckSshConfig' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in CheckSshConfig
        $AllProperties = ("sshPort", "checkUser", "tunnelOn", "textCheckOn", "checkPassword", "sshHost", "sshUser", "webTextMatch", "checkPasswordHash")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sshPort"))) { #optional property not found
            $SshPort = $null
        } else {
            $SshPort = $JsonParameters.PSobject.Properties["sshPort"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "checkUser"))) { #optional property not found
            $CheckUser = $null
        } else {
            $CheckUser = $JsonParameters.PSobject.Properties["checkUser"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tunnelOn"))) { #optional property not found
            $TunnelOn = $null
        } else {
            $TunnelOn = $JsonParameters.PSobject.Properties["tunnelOn"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "textCheckOn"))) { #optional property not found
            $TextCheckOn = $null
        } else {
            $TextCheckOn = $JsonParameters.PSobject.Properties["textCheckOn"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "checkPassword"))) { #optional property not found
            $CheckPassword = $null
        } else {
            $CheckPassword = $JsonParameters.PSobject.Properties["checkPassword"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sshHost"))) { #optional property not found
            $SshHost = $null
        } else {
            $SshHost = $JsonParameters.PSobject.Properties["sshHost"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sshUser"))) { #optional property not found
            $SshUser = $null
        } else {
            $SshUser = $JsonParameters.PSobject.Properties["sshUser"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "webTextMatch"))) { #optional property not found
            $WebTextMatch = $null
        } else {
            $WebTextMatch = $JsonParameters.PSobject.Properties["webTextMatch"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "checkPasswordHash"))) { #optional property not found
            $CheckPasswordHash = $null
        } else {
            $CheckPasswordHash = $JsonParameters.PSobject.Properties["checkPasswordHash"].value
        }

        $PSO = [PSCustomObject]@{
            "sshPort" = ${SshPort}
            "checkUser" = ${CheckUser}
            "tunnelOn" = ${TunnelOn}
            "textCheckOn" = ${TextCheckOn}
            "checkPassword" = ${CheckPassword}
            "sshHost" = ${SshHost}
            "sshUser" = ${SshUser}
            "webTextMatch" = ${WebTextMatch}
            "checkPasswordHash" = ${CheckPasswordHash}
        }

        return $PSO
    }

}

