#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
No description available.
.PARAMETER Description
No description available.
.PARAMETER Zone
No description available.
.PARAMETER Parent
No description available.
.PARAMETER Type
No description available.
.PARAMETER ExternalId
No description available.
.PARAMETER RegionCode
No description available.
.PARAMETER IacId
No description available.
.PARAMETER Visibility
No description available.
.PARAMETER ReadOnly
No description available.
.PARAMETER DefaultPool
No description available.
.PARAMETER Active
No description available.
.PARAMETER Status
No description available.
.PARAMETER Inventory
No description available.
.PARAMETER Config
No description available.
.PARAMETER Name
No description available.
.PARAMETER DisplayName
No description available.
.PARAMETER Tenants
No description available.
.PARAMETER ResourcePermission
No description available.
.PARAMETER Depth
No description available.
.PARAMETER Success
No description available.
.OUTPUTS

AddCloudResourcePool200ResponseResourcePool<PSCustomObject>
#>

function Initialize-AddCloudResourcePool200ResponseResourcePool {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Zone},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Parent},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Type},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ExternalId},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RegionCode},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${IacId},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Visibility},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${ReadOnly},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${DefaultPool},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Active},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Status},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Inventory},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Config},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DisplayName},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Tenants},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${ResourcePermission},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Depth},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Success}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => AddCloudResourcePool200ResponseResourcePool' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "description" = ${Description}
            "zone" = ${Zone}
            "parent" = ${Parent}
            "type" = ${Type}
            "externalId" = ${ExternalId}
            "regionCode" = ${RegionCode}
            "iacId" = ${IacId}
            "visibility" = ${Visibility}
            "readOnly" = ${ReadOnly}
            "defaultPool" = ${DefaultPool}
            "active" = ${Active}
            "status" = ${Status}
            "inventory" = ${Inventory}
            "config" = ${Config}
            "name" = ${Name}
            "displayName" = ${DisplayName}
            "tenants" = ${Tenants}
            "resourcePermission" = ${ResourcePermission}
            "depth" = ${Depth}
            "success" = ${Success}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to AddCloudResourcePool200ResponseResourcePool<PSCustomObject>

.DESCRIPTION

Convert from JSON to AddCloudResourcePool200ResponseResourcePool<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

AddCloudResourcePool200ResponseResourcePool<PSCustomObject>
#>
function ConvertFrom-JsonToAddCloudResourcePool200ResponseResourcePool {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => AddCloudResourcePool200ResponseResourcePool' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in AddCloudResourcePool200ResponseResourcePool
        $AllProperties = ("id", "description", "zone", "parent", "type", "externalId", "regionCode", "iacId", "visibility", "readOnly", "defaultPool", "active", "status", "inventory", "config", "name", "displayName", "tenants", "resourcePermission", "depth", "success")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "zone"))) { #optional property not found
            $Zone = $null
        } else {
            $Zone = $JsonParameters.PSobject.Properties["zone"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "parent"))) { #optional property not found
            $Parent = $null
        } else {
            $Parent = $JsonParameters.PSobject.Properties["parent"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "externalId"))) { #optional property not found
            $ExternalId = $null
        } else {
            $ExternalId = $JsonParameters.PSobject.Properties["externalId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "regionCode"))) { #optional property not found
            $RegionCode = $null
        } else {
            $RegionCode = $JsonParameters.PSobject.Properties["regionCode"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "iacId"))) { #optional property not found
            $IacId = $null
        } else {
            $IacId = $JsonParameters.PSobject.Properties["iacId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "visibility"))) { #optional property not found
            $Visibility = $null
        } else {
            $Visibility = $JsonParameters.PSobject.Properties["visibility"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "readOnly"))) { #optional property not found
            $ReadOnly = $null
        } else {
            $ReadOnly = $JsonParameters.PSobject.Properties["readOnly"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "defaultPool"))) { #optional property not found
            $DefaultPool = $null
        } else {
            $DefaultPool = $JsonParameters.PSobject.Properties["defaultPool"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "active"))) { #optional property not found
            $Active = $null
        } else {
            $Active = $JsonParameters.PSobject.Properties["active"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "status"))) { #optional property not found
            $Status = $null
        } else {
            $Status = $JsonParameters.PSobject.Properties["status"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "inventory"))) { #optional property not found
            $Inventory = $null
        } else {
            $Inventory = $JsonParameters.PSobject.Properties["inventory"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "config"))) { #optional property not found
            $Config = $null
        } else {
            $Config = $JsonParameters.PSobject.Properties["config"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "displayName"))) { #optional property not found
            $DisplayName = $null
        } else {
            $DisplayName = $JsonParameters.PSobject.Properties["displayName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tenants"))) { #optional property not found
            $Tenants = $null
        } else {
            $Tenants = $JsonParameters.PSobject.Properties["tenants"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "resourcePermission"))) { #optional property not found
            $ResourcePermission = $null
        } else {
            $ResourcePermission = $JsonParameters.PSobject.Properties["resourcePermission"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "depth"))) { #optional property not found
            $Depth = $null
        } else {
            $Depth = $JsonParameters.PSobject.Properties["depth"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "success"))) { #optional property not found
            $Success = $null
        } else {
            $Success = $JsonParameters.PSobject.Properties["success"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "description" = ${Description}
            "zone" = ${Zone}
            "parent" = ${Parent}
            "type" = ${Type}
            "externalId" = ${ExternalId}
            "regionCode" = ${RegionCode}
            "iacId" = ${IacId}
            "visibility" = ${Visibility}
            "readOnly" = ${ReadOnly}
            "defaultPool" = ${DefaultPool}
            "active" = ${Active}
            "status" = ${Status}
            "inventory" = ${Inventory}
            "config" = ${Config}
            "name" = ${Name}
            "displayName" = ${DisplayName}
            "tenants" = ${Tenants}
            "resourcePermission" = ${ResourcePermission}
            "depth" = ${Depth}
            "success" = ${Success}
        }

        return $PSO
    }

}

