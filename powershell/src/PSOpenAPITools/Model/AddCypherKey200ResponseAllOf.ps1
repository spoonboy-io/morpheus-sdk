#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER VarData
No description available.
.PARAMETER Type
No description available.
.PARAMETER LeaseDuration
No description available.
.PARAMETER Cypher
No description available.
.OUTPUTS

AddCypherKey200ResponseAllOf<PSCustomObject>
#>

function Initialize-AddCypherKey200ResponseAllOf {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${VarData},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Type},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${LeaseDuration},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Cypher}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => AddCypherKey200ResponseAllOf' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "data" = ${VarData}
            "type" = ${Type}
            "lease_duration" = ${LeaseDuration}
            "cypher" = ${Cypher}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to AddCypherKey200ResponseAllOf<PSCustomObject>

.DESCRIPTION

Convert from JSON to AddCypherKey200ResponseAllOf<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

AddCypherKey200ResponseAllOf<PSCustomObject>
#>
function ConvertFrom-JsonToAddCypherKey200ResponseAllOf {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => AddCypherKey200ResponseAllOf' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in AddCypherKey200ResponseAllOf
        $AllProperties = ("data", "type", "lease_duration", "cypher")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "data"))) { #optional property not found
            $VarData = $null
        } else {
            $VarData = $JsonParameters.PSobject.Properties["data"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lease_duration"))) { #optional property not found
            $LeaseDuration = $null
        } else {
            $LeaseDuration = $JsonParameters.PSobject.Properties["lease_duration"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cypher"))) { #optional property not found
            $Cypher = $null
        } else {
            $Cypher = $JsonParameters.PSobject.Properties["cypher"].value
        }

        $PSO = [PSCustomObject]@{
            "data" = ${VarData}
            "type" = ${Type}
            "lease_duration" = ${LeaseDuration}
            "cypher" = ${Cypher}
        }

        return $PSO
    }

}

