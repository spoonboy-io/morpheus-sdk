#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ConfigType
Configuration Type
.PARAMETER Json
CloudFormation Template in JSON
.PARAMETER Yaml
CloudFormation Template in YAML
.PARAMETER Git
No description available.
.PARAMETER IAM
CloudFormation Attribute CAPABILITY_IAM
.PARAMETER CAPABILITYNAMEDIAM
CloudFormation Attribute CAPABILITY_NAMED_IAM
.PARAMETER CAPABILITYAUTOEXPAND
CloudFormation Attribute CAPABILITY_AUTO_EXPAND
.PARAMETER InstallAgent
Install Morpheus Agent
.PARAMETER CloudInitEnabled
Cloud Init Enabled
.OUTPUTS

BlueprintCFTCreateCloudFormation<PSCustomObject>
#>

function Initialize-BlueprintCFTCreateCloudFormation {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("json", "yaml", "git")]
        [String]
        ${ConfigType},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Json},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Yaml},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Git},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IAM} = $false,
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${CAPABILITYNAMEDIAM} = $false,
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${CAPABILITYAUTOEXPAND} = $false,
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${InstallAgent} = $false,
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${CloudInitEnabled} = $false
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => BlueprintCFTCreateCloudFormation' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$ConfigType) {
            throw "invalid value for 'ConfigType', 'ConfigType' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "configType" = ${ConfigType}
            "json" = ${Json}
            "yaml" = ${Yaml}
            "git" = ${Git}
            "IAM" = ${IAM}
            "CAPABILITY_NAMED_IAM" = ${CAPABILITYNAMEDIAM}
            "CAPABILITY_AUTO_EXPAND" = ${CAPABILITYAUTOEXPAND}
            "installAgent" = ${InstallAgent}
            "cloudInitEnabled" = ${CloudInitEnabled}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to BlueprintCFTCreateCloudFormation<PSCustomObject>

.DESCRIPTION

Convert from JSON to BlueprintCFTCreateCloudFormation<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

BlueprintCFTCreateCloudFormation<PSCustomObject>
#>
function ConvertFrom-JsonToBlueprintCFTCreateCloudFormation {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => BlueprintCFTCreateCloudFormation' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in BlueprintCFTCreateCloudFormation
        $AllProperties = ("configType", "json", "yaml", "git", "IAM", "CAPABILITY_NAMED_IAM", "CAPABILITY_AUTO_EXPAND", "installAgent", "cloudInitEnabled")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property `configType` missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "configType"))) {
            throw "Error! JSON cannot be serialized due to the required property `configType` missing."
        } else {
            $ConfigType = $JsonParameters.PSobject.Properties["configType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "json"))) { #optional property not found
            $Json = $null
        } else {
            $Json = $JsonParameters.PSobject.Properties["json"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "yaml"))) { #optional property not found
            $Yaml = $null
        } else {
            $Yaml = $JsonParameters.PSobject.Properties["yaml"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "git"))) { #optional property not found
            $Git = $null
        } else {
            $Git = $JsonParameters.PSobject.Properties["git"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "IAM"))) { #optional property not found
            $IAM = $null
        } else {
            $IAM = $JsonParameters.PSobject.Properties["IAM"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "CAPABILITY_NAMED_IAM"))) { #optional property not found
            $CAPABILITYNAMEDIAM = $null
        } else {
            $CAPABILITYNAMEDIAM = $JsonParameters.PSobject.Properties["CAPABILITY_NAMED_IAM"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "CAPABILITY_AUTO_EXPAND"))) { #optional property not found
            $CAPABILITYAUTOEXPAND = $null
        } else {
            $CAPABILITYAUTOEXPAND = $JsonParameters.PSobject.Properties["CAPABILITY_AUTO_EXPAND"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "installAgent"))) { #optional property not found
            $InstallAgent = $null
        } else {
            $InstallAgent = $JsonParameters.PSobject.Properties["installAgent"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cloudInitEnabled"))) { #optional property not found
            $CloudInitEnabled = $null
        } else {
            $CloudInitEnabled = $JsonParameters.PSobject.Properties["cloudInitEnabled"].value
        }

        $PSO = [PSCustomObject]@{
            "configType" = ${ConfigType}
            "json" = ${Json}
            "yaml" = ${Yaml}
            "git" = ${Git}
            "IAM" = ${IAM}
            "CAPABILITY_NAMED_IAM" = ${CAPABILITYNAMEDIAM}
            "CAPABILITY_AUTO_EXPAND" = ${CAPABILITYAUTOEXPAND}
            "installAgent" = ${InstallAgent}
            "cloudInitEnabled" = ${CloudInitEnabled}
        }

        return $PSO
    }

}

