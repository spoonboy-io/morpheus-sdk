#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER LargeMemory
No description available.
.PARAMETER DictionaryMemory
No description available.
.PARAMETER BufferPoolSize
No description available.
.PARAMETER FreeBuffers
No description available.
.PARAMETER DatabasePages
No description available.
.PARAMETER OldPages
No description available.
.PARAMETER PendingReads
No description available.
.PARAMETER InsertsPerSecond
No description available.
.PARAMETER UpdatesPerSecond
No description available.
.PARAMETER DeletesPerSecond
No description available.
.PARAMETER ReadsPerSecond
No description available.
.PARAMETER BufferHitRate
No description available.
.OUTPUTS

HealthDatabaseInnodbStats<PSCustomObject>
#>

function Initialize-HealthDatabaseInnodbStats {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${LargeMemory},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${DictionaryMemory},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${BufferPoolSize},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${FreeBuffers},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${DatabasePages},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${OldPages},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${PendingReads},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${InsertsPerSecond},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${UpdatesPerSecond},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${DeletesPerSecond},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${ReadsPerSecond},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${BufferHitRate}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => HealthDatabaseInnodbStats' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "largeMemory" = ${LargeMemory}
            "dictionaryMemory" = ${DictionaryMemory}
            "bufferPoolSize" = ${BufferPoolSize}
            "freeBuffers" = ${FreeBuffers}
            "databasePages" = ${DatabasePages}
            "oldPages" = ${OldPages}
            "pendingReads" = ${PendingReads}
            "insertsPerSecond" = ${InsertsPerSecond}
            "updatesPerSecond" = ${UpdatesPerSecond}
            "deletesPerSecond" = ${DeletesPerSecond}
            "readsPerSecond" = ${ReadsPerSecond}
            "bufferHitRate" = ${BufferHitRate}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to HealthDatabaseInnodbStats<PSCustomObject>

.DESCRIPTION

Convert from JSON to HealthDatabaseInnodbStats<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

HealthDatabaseInnodbStats<PSCustomObject>
#>
function ConvertFrom-JsonToHealthDatabaseInnodbStats {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => HealthDatabaseInnodbStats' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in HealthDatabaseInnodbStats
        $AllProperties = ("largeMemory", "dictionaryMemory", "bufferPoolSize", "freeBuffers", "databasePages", "oldPages", "pendingReads", "insertsPerSecond", "updatesPerSecond", "deletesPerSecond", "readsPerSecond", "bufferHitRate")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "largeMemory"))) { #optional property not found
            $LargeMemory = $null
        } else {
            $LargeMemory = $JsonParameters.PSobject.Properties["largeMemory"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dictionaryMemory"))) { #optional property not found
            $DictionaryMemory = $null
        } else {
            $DictionaryMemory = $JsonParameters.PSobject.Properties["dictionaryMemory"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "bufferPoolSize"))) { #optional property not found
            $BufferPoolSize = $null
        } else {
            $BufferPoolSize = $JsonParameters.PSobject.Properties["bufferPoolSize"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "freeBuffers"))) { #optional property not found
            $FreeBuffers = $null
        } else {
            $FreeBuffers = $JsonParameters.PSobject.Properties["freeBuffers"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "databasePages"))) { #optional property not found
            $DatabasePages = $null
        } else {
            $DatabasePages = $JsonParameters.PSobject.Properties["databasePages"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "oldPages"))) { #optional property not found
            $OldPages = $null
        } else {
            $OldPages = $JsonParameters.PSobject.Properties["oldPages"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "pendingReads"))) { #optional property not found
            $PendingReads = $null
        } else {
            $PendingReads = $JsonParameters.PSobject.Properties["pendingReads"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "insertsPerSecond"))) { #optional property not found
            $InsertsPerSecond = $null
        } else {
            $InsertsPerSecond = $JsonParameters.PSobject.Properties["insertsPerSecond"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "updatesPerSecond"))) { #optional property not found
            $UpdatesPerSecond = $null
        } else {
            $UpdatesPerSecond = $JsonParameters.PSobject.Properties["updatesPerSecond"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "deletesPerSecond"))) { #optional property not found
            $DeletesPerSecond = $null
        } else {
            $DeletesPerSecond = $JsonParameters.PSobject.Properties["deletesPerSecond"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "readsPerSecond"))) { #optional property not found
            $ReadsPerSecond = $null
        } else {
            $ReadsPerSecond = $JsonParameters.PSobject.Properties["readsPerSecond"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "bufferHitRate"))) { #optional property not found
            $BufferHitRate = $null
        } else {
            $BufferHitRate = $JsonParameters.PSobject.Properties["bufferHitRate"].value
        }

        $PSO = [PSCustomObject]@{
            "largeMemory" = ${LargeMemory}
            "dictionaryMemory" = ${DictionaryMemory}
            "bufferPoolSize" = ${BufferPoolSize}
            "freeBuffers" = ${FreeBuffers}
            "databasePages" = ${DatabasePages}
            "oldPages" = ${OldPages}
            "pendingReads" = ${PendingReads}
            "insertsPerSecond" = ${InsertsPerSecond}
            "updatesPerSecond" = ${UpdatesPerSecond}
            "deletesPerSecond" = ${DeletesPerSecond}
            "readsPerSecond" = ${ReadsPerSecond}
            "bufferHitRate" = ${BufferHitRate}
        }

        return $PSO
    }

}

