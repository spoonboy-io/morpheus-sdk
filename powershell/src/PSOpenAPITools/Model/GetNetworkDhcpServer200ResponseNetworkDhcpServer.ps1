#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
No description available.
.PARAMETER DateCreated
No description available.
.PARAMETER ProviderId
No description available.
.PARAMETER ServerIpAddress
No description available.
.PARAMETER LastUpdated
No description available.
.PARAMETER LeaseTime
No description available.
.PARAMETER Name
No description available.
.PARAMETER ExternalId
No description available.
.PARAMETER Config
No description available.
.PARAMETER Owner
No description available.
.PARAMETER NetworkServer
No description available.
.OUTPUTS

GetNetworkDhcpServer200ResponseNetworkDhcpServer<PSCustomObject>
#>

function Initialize-GetNetworkDhcpServer200ResponseNetworkDhcpServer {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${DateCreated},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ProviderId},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ServerIpAddress},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${LastUpdated},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${LeaseTime},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ExternalId},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Config},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Owner},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${NetworkServer}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => GetNetworkDhcpServer200ResponseNetworkDhcpServer' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "dateCreated" = ${DateCreated}
            "providerId" = ${ProviderId}
            "serverIpAddress" = ${ServerIpAddress}
            "lastUpdated" = ${LastUpdated}
            "leaseTime" = ${LeaseTime}
            "name" = ${Name}
            "externalId" = ${ExternalId}
            "config" = ${Config}
            "owner" = ${Owner}
            "networkServer" = ${NetworkServer}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to GetNetworkDhcpServer200ResponseNetworkDhcpServer<PSCustomObject>

.DESCRIPTION

Convert from JSON to GetNetworkDhcpServer200ResponseNetworkDhcpServer<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

GetNetworkDhcpServer200ResponseNetworkDhcpServer<PSCustomObject>
#>
function ConvertFrom-JsonToGetNetworkDhcpServer200ResponseNetworkDhcpServer {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => GetNetworkDhcpServer200ResponseNetworkDhcpServer' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in GetNetworkDhcpServer200ResponseNetworkDhcpServer
        $AllProperties = ("id", "dateCreated", "providerId", "serverIpAddress", "lastUpdated", "leaseTime", "name", "externalId", "config", "owner", "networkServer")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dateCreated"))) { #optional property not found
            $DateCreated = $null
        } else {
            $DateCreated = $JsonParameters.PSobject.Properties["dateCreated"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "providerId"))) { #optional property not found
            $ProviderId = $null
        } else {
            $ProviderId = $JsonParameters.PSobject.Properties["providerId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "serverIpAddress"))) { #optional property not found
            $ServerIpAddress = $null
        } else {
            $ServerIpAddress = $JsonParameters.PSobject.Properties["serverIpAddress"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lastUpdated"))) { #optional property not found
            $LastUpdated = $null
        } else {
            $LastUpdated = $JsonParameters.PSobject.Properties["lastUpdated"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "leaseTime"))) { #optional property not found
            $LeaseTime = $null
        } else {
            $LeaseTime = $JsonParameters.PSobject.Properties["leaseTime"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "externalId"))) { #optional property not found
            $ExternalId = $null
        } else {
            $ExternalId = $JsonParameters.PSobject.Properties["externalId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "config"))) { #optional property not found
            $Config = $null
        } else {
            $Config = $JsonParameters.PSobject.Properties["config"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "owner"))) { #optional property not found
            $Owner = $null
        } else {
            $Owner = $JsonParameters.PSobject.Properties["owner"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "networkServer"))) { #optional property not found
            $NetworkServer = $null
        } else {
            $NetworkServer = $JsonParameters.PSobject.Properties["networkServer"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "dateCreated" = ${DateCreated}
            "providerId" = ${ProviderId}
            "serverIpAddress" = ${ServerIpAddress}
            "lastUpdated" = ${LastUpdated}
            "leaseTime" = ${LeaseTime}
            "name" = ${Name}
            "externalId" = ${ExternalId}
            "config" = ${Config}
            "owner" = ${Owner}
            "networkServer" = ${NetworkServer}
        }

        return $PSO
    }

}

