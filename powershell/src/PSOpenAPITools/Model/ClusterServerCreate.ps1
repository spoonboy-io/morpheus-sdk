#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Config
Key for specific host type configuration  The config parameter is for configuration options that are specific to each Provision Type. The Provision Types api can be used to see which options are available. 
.PARAMETER ServerType
No description available.
.PARAMETER Name
Name to be used for host(s) created in the cluster
.PARAMETER Plan
No description available.
.PARAMETER Volumes
The (optional) volumes parameter is for LV configuration, can create additional LVs at provision It should be passed as an array of Objects
.PARAMETER NetworkInterfaces
The networkInterfaces parameter is for network configuration.  The Options API /api/options/zoneNetworkOptions can be used to see which options are available.  It should be passed as an array of Objects with the following attributes 
.PARAMETER SecurityGroups
Key for security group configuration.
.PARAMETER Visibility
Visibility for server host
.PARAMETER UserGroup
No description available.
.PARAMETER NetworkDomain
Network domain
.PARAMETER Hostname
Hostname for server host
.PARAMETER NodeCount
Number of workers or hosts
.PARAMETER Tags
Metadata tags, Array of objects having a name and value.
.PARAMETER Labels
Array of strings (keywords). This will set labels on the server and also on the cluster as well by default.
.OUTPUTS

ClusterServerCreate<PSCustomObject>
#>

function Initialize-ClusterServerCreate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Config},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${ServerType},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Plan},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Volumes},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${NetworkInterfaces},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${SecurityGroups},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Visibility} = "private",
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${UserGroup},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${NetworkDomain},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Hostname},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${NodeCount},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Tags},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${Labels}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ClusterServerCreate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Config) {
            throw "invalid value for 'Config', 'Config' cannot be null."
        }

        if ($null -eq $Name) {
            throw "invalid value for 'Name', 'Name' cannot be null."
        }

        if ($null -eq $Plan) {
            throw "invalid value for 'Plan', 'Plan' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "config" = ${Config}
            "serverType" = ${ServerType}
            "name" = ${Name}
            "plan" = ${Plan}
            "volumes" = ${Volumes}
            "networkInterfaces" = ${NetworkInterfaces}
            "securityGroups" = ${SecurityGroups}
            "visibility" = ${Visibility}
            "userGroup" = ${UserGroup}
            "networkDomain" = ${NetworkDomain}
            "hostname" = ${Hostname}
            "nodeCount" = ${NodeCount}
            "tags" = ${Tags}
            "labels" = ${Labels}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ClusterServerCreate<PSCustomObject>

.DESCRIPTION

Convert from JSON to ClusterServerCreate<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ClusterServerCreate<PSCustomObject>
#>
function ConvertFrom-JsonToClusterServerCreate {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ClusterServerCreate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ClusterServerCreate
        $AllProperties = ("config", "serverType", "name", "plan", "volumes", "networkInterfaces", "securityGroups", "visibility", "userGroup", "networkDomain", "hostname", "nodeCount", "tags", "labels")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'config' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "config"))) {
            throw "Error! JSON cannot be serialized due to the required property 'config' missing."
        } else {
            $Config = $JsonParameters.PSobject.Properties["config"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) {
            throw "Error! JSON cannot be serialized due to the required property 'name' missing."
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "plan"))) {
            throw "Error! JSON cannot be serialized due to the required property 'plan' missing."
        } else {
            $Plan = $JsonParameters.PSobject.Properties["plan"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "serverType"))) { #optional property not found
            $ServerType = $null
        } else {
            $ServerType = $JsonParameters.PSobject.Properties["serverType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "volumes"))) { #optional property not found
            $Volumes = $null
        } else {
            $Volumes = $JsonParameters.PSobject.Properties["volumes"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "networkInterfaces"))) { #optional property not found
            $NetworkInterfaces = $null
        } else {
            $NetworkInterfaces = $JsonParameters.PSobject.Properties["networkInterfaces"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "securityGroups"))) { #optional property not found
            $SecurityGroups = $null
        } else {
            $SecurityGroups = $JsonParameters.PSobject.Properties["securityGroups"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "visibility"))) { #optional property not found
            $Visibility = $null
        } else {
            $Visibility = $JsonParameters.PSobject.Properties["visibility"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "userGroup"))) { #optional property not found
            $UserGroup = $null
        } else {
            $UserGroup = $JsonParameters.PSobject.Properties["userGroup"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "networkDomain"))) { #optional property not found
            $NetworkDomain = $null
        } else {
            $NetworkDomain = $JsonParameters.PSobject.Properties["networkDomain"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "hostname"))) { #optional property not found
            $Hostname = $null
        } else {
            $Hostname = $JsonParameters.PSobject.Properties["hostname"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "nodeCount"))) { #optional property not found
            $NodeCount = $null
        } else {
            $NodeCount = $JsonParameters.PSobject.Properties["nodeCount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tags"))) { #optional property not found
            $Tags = $null
        } else {
            $Tags = $JsonParameters.PSobject.Properties["tags"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "labels"))) { #optional property not found
            $Labels = $null
        } else {
            $Labels = $JsonParameters.PSobject.Properties["labels"].value
        }

        $PSO = [PSCustomObject]@{
            "config" = ${Config}
            "serverType" = ${ServerType}
            "name" = ${Name}
            "plan" = ${Plan}
            "volumes" = ${Volumes}
            "networkInterfaces" = ${NetworkInterfaces}
            "securityGroups" = ${SecurityGroups}
            "visibility" = ${Visibility}
            "userGroup" = ${UserGroup}
            "networkDomain" = ${NetworkDomain}
            "hostname" = ${Hostname}
            "nodeCount" = ${NodeCount}
            "tags" = ${Tags}
            "labels" = ${Labels}
        }

        return $PSO
    }

}

