#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Name
A unique name scoped to your account for the key
.PARAMETER CertFile
The contents of the certificate file
.PARAMETER KeyFile
The contents of the key file
.PARAMETER DomainName
The domain name this certificate is tied to
.PARAMETER Wildcard
Wether or not this certificate is a wildcard cert
.OUTPUTS

ApiCertificatesCertificate<PSCustomObject>
#>

function Initialize-ApiCertificatesCertificate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CertFile},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${KeyFile},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DomainName},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Wildcard} = $false
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ApiCertificatesCertificate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "certFile" = ${CertFile}
            "keyFile" = ${KeyFile}
            "domainName" = ${DomainName}
            "wildcard" = ${Wildcard}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ApiCertificatesCertificate<PSCustomObject>

.DESCRIPTION

Convert from JSON to ApiCertificatesCertificate<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ApiCertificatesCertificate<PSCustomObject>
#>
function ConvertFrom-JsonToApiCertificatesCertificate {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ApiCertificatesCertificate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ApiCertificatesCertificate
        $AllProperties = ("name", "certFile", "keyFile", "domainName", "wildcard")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "certFile"))) { #optional property not found
            $CertFile = $null
        } else {
            $CertFile = $JsonParameters.PSobject.Properties["certFile"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "keyFile"))) { #optional property not found
            $KeyFile = $null
        } else {
            $KeyFile = $JsonParameters.PSobject.Properties["keyFile"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "domainName"))) { #optional property not found
            $DomainName = $null
        } else {
            $DomainName = $JsonParameters.PSobject.Properties["domainName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "wildcard"))) { #optional property not found
            $Wildcard = $null
        } else {
            $Wildcard = $JsonParameters.PSobject.Properties["wildcard"].value
        }

        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "certFile" = ${CertFile}
            "keyFile" = ${KeyFile}
            "domainName" = ${DomainName}
            "wildcard" = ${Wildcard}
        }

        return $PSO
    }

}

