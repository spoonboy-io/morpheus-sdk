#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.1.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER BackupsEnabled
No description available.
.PARAMETER CreateBackups
No description available.
.PARAMETER BackupAppliance
No description available.
.PARAMETER DefaultStorageBucket
No description available.
.PARAMETER DefaultSchedule
No description available.
.PARAMETER RetentionCount
No description available.
.OUTPUTS

BackupSettings<PSCustomObject>
#>

function Initialize-BackupSettings {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${BackupsEnabled},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${CreateBackups},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${BackupAppliance},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${DefaultStorageBucket},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${DefaultSchedule},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${RetentionCount}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => BackupSettings' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "backupsEnabled" = ${BackupsEnabled}
            "createBackups" = ${CreateBackups}
            "backupAppliance" = ${BackupAppliance}
            "defaultStorageBucket" = ${DefaultStorageBucket}
            "defaultSchedule" = ${DefaultSchedule}
            "retentionCount" = ${RetentionCount}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to BackupSettings<PSCustomObject>

.DESCRIPTION

Convert from JSON to BackupSettings<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

BackupSettings<PSCustomObject>
#>
function ConvertFrom-JsonToBackupSettings {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => BackupSettings' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in BackupSettings
        $AllProperties = ("backupsEnabled", "createBackups", "backupAppliance", "defaultStorageBucket", "defaultSchedule", "retentionCount")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "backupsEnabled"))) { #optional property not found
            $BackupsEnabled = $null
        } else {
            $BackupsEnabled = $JsonParameters.PSobject.Properties["backupsEnabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "createBackups"))) { #optional property not found
            $CreateBackups = $null
        } else {
            $CreateBackups = $JsonParameters.PSobject.Properties["createBackups"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "backupAppliance"))) { #optional property not found
            $BackupAppliance = $null
        } else {
            $BackupAppliance = $JsonParameters.PSobject.Properties["backupAppliance"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "defaultStorageBucket"))) { #optional property not found
            $DefaultStorageBucket = $null
        } else {
            $DefaultStorageBucket = $JsonParameters.PSobject.Properties["defaultStorageBucket"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "defaultSchedule"))) { #optional property not found
            $DefaultSchedule = $null
        } else {
            $DefaultSchedule = $JsonParameters.PSobject.Properties["defaultSchedule"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "retentionCount"))) { #optional property not found
            $RetentionCount = $null
        } else {
            $RetentionCount = $JsonParameters.PSobject.Properties["retentionCount"].value
        }

        $PSO = [PSCustomObject]@{
            "backupsEnabled" = ${BackupsEnabled}
            "createBackups" = ${CreateBackups}
            "backupAppliance" = ${BackupAppliance}
            "defaultStorageBucket" = ${DefaultStorageBucket}
            "defaultSchedule" = ${DefaultSchedule}
            "retentionCount" = ${RetentionCount}
        }

        return $PSO
    }

}

