#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Name
A unique name scoped to your account for the storage volume
.PARAMETER Type
Storage Type Code or ID
.PARAMETER Config
Configuration object with parameters that vary by `type`.
.PARAMETER StorageServer
No description available.
.PARAMETER StorageGroup
No description available.
.OUTPUTS

ApiStorageVolumesIdStorageVolume<PSCustomObject>
#>

function Initialize-ApiStorageVolumesIdStorageVolume {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Type},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Config},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${StorageServer},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${StorageGroup}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ApiStorageVolumesIdStorageVolume' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "type" = ${Type}
            "config" = ${Config}
            "storageServer" = ${StorageServer}
            "storageGroup" = ${StorageGroup}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ApiStorageVolumesIdStorageVolume<PSCustomObject>

.DESCRIPTION

Convert from JSON to ApiStorageVolumesIdStorageVolume<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ApiStorageVolumesIdStorageVolume<PSCustomObject>
#>
function ConvertFrom-JsonToApiStorageVolumesIdStorageVolume {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ApiStorageVolumesIdStorageVolume' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ApiStorageVolumesIdStorageVolume
        $AllProperties = ("name", "type", "config", "storageServer", "storageGroup")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "config"))) { #optional property not found
            $Config = $null
        } else {
            $Config = $JsonParameters.PSobject.Properties["config"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "storageServer"))) { #optional property not found
            $StorageServer = $null
        } else {
            $StorageServer = $JsonParameters.PSobject.Properties["storageServer"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "storageGroup"))) { #optional property not found
            $StorageGroup = $null
        } else {
            $StorageGroup = $JsonParameters.PSobject.Properties["storageGroup"].value
        }

        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "type" = ${Type}
            "config" = ${Config}
            "storageServer" = ${StorageServer}
            "storageGroup" = ${StorageGroup}
        }

        return $PSO
    }

}

