#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Name
A name for the rule
.PARAMETER Direction
Either `ingress` or `egress`
.PARAMETER SourceType
Either `cidr`, `group`, `tier`, `all`
.PARAMETER Source
CIDR representing the source IP(s) which should receive access. Required for `sourceType`=cidr
.PARAMETER SourceGroup
No description available.
.PARAMETER SourceTier
No description available.
.PARAMETER PortRange
Either a single value (i.e. 55) or a port range (i.e. 1-65535) for which to open access to the source. Required if customRule is true, otherwise, ignored. 
.PARAMETER Protocol
Either tcp, udp, icmp. Required if customRule is true, otherwise, ignored.
.PARAMETER DestinationType
Either cidr, group, tier, instance.
.PARAMETER Destination
CIDR representing the destination IP(s) which should receive access. Required for `destinationType`=cidr.
.PARAMETER DestinationGroup
No description available.
.PARAMETER DestinationTier
No description available.
.PARAMETER RuleType
Either `customRule` or an `instance type` code.
.PARAMETER Policy
Either `accept` or `deny`.
.PARAMETER InstanceTypeId
The id of an Instance Type. If specified, the source CIDR will have access to all ports exposed by the particular instance in the cloud, app, or instance. Required if customRule is false, otherwise ignored. 
.OUTPUTS

AddSecurityGroupRulesRequestRule<PSCustomObject>
#>

function Initialize-AddSecurityGroupRulesRequestRule {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("ingress", "egress")]
        [String]
        ${Direction} = "ingress",
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("cidr", "group", "tier", "all")]
        [String]
        ${SourceType} = "cidr",
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Source},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${SourceGroup},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${SourceTier},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PortRange},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("tcp", "udp", "icmp")]
        [String]
        ${Protocol},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("cidr", "group", "tier", "instance")]
        [String]
        ${DestinationType} = "cidr",
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Destination},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${DestinationGroup},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${DestinationTier},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RuleType} = "customRule",
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("accept", "deny")]
        [String]
        ${Policy},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${InstanceTypeId}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => AddSecurityGroupRulesRequestRule' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Protocol) {
            throw "invalid value for 'Protocol', 'Protocol' cannot be null."
        }

        if ($null -eq $RuleType) {
            throw "invalid value for 'RuleType', 'RuleType' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "direction" = ${Direction}
            "sourceType" = ${SourceType}
            "source" = ${Source}
            "sourceGroup" = ${SourceGroup}
            "sourceTier" = ${SourceTier}
            "portRange" = ${PortRange}
            "protocol" = ${Protocol}
            "destinationType" = ${DestinationType}
            "destination" = ${Destination}
            "destinationGroup" = ${DestinationGroup}
            "destinationTier" = ${DestinationTier}
            "ruleType" = ${RuleType}
            "policy" = ${Policy}
            "instanceTypeId" = ${InstanceTypeId}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to AddSecurityGroupRulesRequestRule<PSCustomObject>

.DESCRIPTION

Convert from JSON to AddSecurityGroupRulesRequestRule<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

AddSecurityGroupRulesRequestRule<PSCustomObject>
#>
function ConvertFrom-JsonToAddSecurityGroupRulesRequestRule {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => AddSecurityGroupRulesRequestRule' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in AddSecurityGroupRulesRequestRule
        $AllProperties = ("name", "direction", "sourceType", "source", "sourceGroup", "sourceTier", "portRange", "protocol", "destinationType", "destination", "destinationGroup", "destinationTier", "ruleType", "policy", "instanceTypeId")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'protocol' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "protocol"))) {
            throw "Error! JSON cannot be serialized due to the required property 'protocol' missing."
        } else {
            $Protocol = $JsonParameters.PSobject.Properties["protocol"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ruleType"))) {
            throw "Error! JSON cannot be serialized due to the required property 'ruleType' missing."
        } else {
            $RuleType = $JsonParameters.PSobject.Properties["ruleType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "direction"))) { #optional property not found
            $Direction = $null
        } else {
            $Direction = $JsonParameters.PSobject.Properties["direction"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sourceType"))) { #optional property not found
            $SourceType = $null
        } else {
            $SourceType = $JsonParameters.PSobject.Properties["sourceType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "source"))) { #optional property not found
            $Source = $null
        } else {
            $Source = $JsonParameters.PSobject.Properties["source"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sourceGroup"))) { #optional property not found
            $SourceGroup = $null
        } else {
            $SourceGroup = $JsonParameters.PSobject.Properties["sourceGroup"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sourceTier"))) { #optional property not found
            $SourceTier = $null
        } else {
            $SourceTier = $JsonParameters.PSobject.Properties["sourceTier"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "portRange"))) { #optional property not found
            $PortRange = $null
        } else {
            $PortRange = $JsonParameters.PSobject.Properties["portRange"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "destinationType"))) { #optional property not found
            $DestinationType = $null
        } else {
            $DestinationType = $JsonParameters.PSobject.Properties["destinationType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "destination"))) { #optional property not found
            $Destination = $null
        } else {
            $Destination = $JsonParameters.PSobject.Properties["destination"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "destinationGroup"))) { #optional property not found
            $DestinationGroup = $null
        } else {
            $DestinationGroup = $JsonParameters.PSobject.Properties["destinationGroup"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "destinationTier"))) { #optional property not found
            $DestinationTier = $null
        } else {
            $DestinationTier = $JsonParameters.PSobject.Properties["destinationTier"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "policy"))) { #optional property not found
            $Policy = $null
        } else {
            $Policy = $JsonParameters.PSobject.Properties["policy"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "instanceTypeId"))) { #optional property not found
            $InstanceTypeId = $null
        } else {
            $InstanceTypeId = $JsonParameters.PSobject.Properties["instanceTypeId"].value
        }

        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "direction" = ${Direction}
            "sourceType" = ${SourceType}
            "source" = ${Source}
            "sourceGroup" = ${SourceGroup}
            "sourceTier" = ${SourceTier}
            "portRange" = ${PortRange}
            "protocol" = ${Protocol}
            "destinationType" = ${DestinationType}
            "destination" = ${Destination}
            "destinationGroup" = ${DestinationGroup}
            "destinationTier" = ${DestinationTier}
            "ruleType" = ${RuleType}
            "policy" = ${Policy}
            "instanceTypeId" = ${InstanceTypeId}
        }

        return $PSO
    }

}

