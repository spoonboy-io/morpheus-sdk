#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.1.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Index
No description available.
.PARAMETER Month
No description available.
.PARAMETER ShortName
No description available.
.PARAMETER ChartName
No description available.
.PARAMETER Budget
No description available.
.PARAMETER Cost
No description available.
.PARAMETER StartDate
No description available.
.PARAMETER EndDate
No description available.
.OUTPUTS

BudgetStatsIntervalsInner<PSCustomObject>
#>

function Initialize-BudgetStatsIntervalsInner {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Index},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Month},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ShortName},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ChartName},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Budget},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${Cost},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${StartDate},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${EndDate}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => BudgetStatsIntervalsInner' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "index" = ${Index}
            "month" = ${Month}
            "shortName" = ${ShortName}
            "chartName" = ${ChartName}
            "budget" = ${Budget}
            "cost" = ${Cost}
            "startDate" = ${StartDate}
            "endDate" = ${EndDate}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to BudgetStatsIntervalsInner<PSCustomObject>

.DESCRIPTION

Convert from JSON to BudgetStatsIntervalsInner<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

BudgetStatsIntervalsInner<PSCustomObject>
#>
function ConvertFrom-JsonToBudgetStatsIntervalsInner {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => BudgetStatsIntervalsInner' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in BudgetStatsIntervalsInner
        $AllProperties = ("index", "month", "shortName", "chartName", "budget", "cost", "startDate", "endDate")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "index"))) { #optional property not found
            $Index = $null
        } else {
            $Index = $JsonParameters.PSobject.Properties["index"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "month"))) { #optional property not found
            $Month = $null
        } else {
            $Month = $JsonParameters.PSobject.Properties["month"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "shortName"))) { #optional property not found
            $ShortName = $null
        } else {
            $ShortName = $JsonParameters.PSobject.Properties["shortName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "chartName"))) { #optional property not found
            $ChartName = $null
        } else {
            $ChartName = $JsonParameters.PSobject.Properties["chartName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "budget"))) { #optional property not found
            $Budget = $null
        } else {
            $Budget = $JsonParameters.PSobject.Properties["budget"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cost"))) { #optional property not found
            $Cost = $null
        } else {
            $Cost = $JsonParameters.PSobject.Properties["cost"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "startDate"))) { #optional property not found
            $StartDate = $null
        } else {
            $StartDate = $JsonParameters.PSobject.Properties["startDate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "endDate"))) { #optional property not found
            $EndDate = $null
        } else {
            $EndDate = $JsonParameters.PSobject.Properties["endDate"].value
        }

        $PSO = [PSCustomObject]@{
            "index" = ${Index}
            "month" = ${Month}
            "shortName" = ${ShortName}
            "chartName" = ${ChartName}
            "budget" = ${Budget}
            "cost" = ${Cost}
            "startDate" = ${StartDate}
            "endDate" = ${EndDate}
        }

        return $PSO
    }

}

