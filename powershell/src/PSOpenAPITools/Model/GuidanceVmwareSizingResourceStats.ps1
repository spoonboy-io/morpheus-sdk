#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Ts
No description available.
.PARAMETER FreeMemory
No description available.
.PARAMETER UsedMemory
No description available.
.PARAMETER FreeSwap
No description available.
.PARAMETER UsedSwap
No description available.
.PARAMETER CpuIdleTime
No description available.
.PARAMETER CpuSystemTime
No description available.
.PARAMETER CpuUserTime
No description available.
.PARAMETER CpuTotalTime
No description available.
.PARAMETER CpuUsage
No description available.
.PARAMETER UsedStorage
No description available.
.PARAMETER ReservedStorage
No description available.
.PARAMETER MaxStorage
No description available.
.PARAMETER NetTxUsage
No description available.
.PARAMETER NetRxUsage
No description available.
.PARAMETER NetworkBandwidth
No description available.
.OUTPUTS

GuidanceVmwareSizingResourceStats<PSCustomObject>
#>

function Initialize-GuidanceVmwareSizingResourceStats {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Ts},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${FreeMemory},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${UsedMemory},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${FreeSwap},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${UsedSwap},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${CpuIdleTime},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${CpuSystemTime},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${CpuUserTime},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${CpuTotalTime},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${CpuUsage},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${UsedStorage},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${ReservedStorage},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${MaxStorage},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${NetTxUsage},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${NetRxUsage},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${NetworkBandwidth}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => GuidanceVmwareSizingResourceStats' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "ts" = ${Ts}
            "freeMemory" = ${FreeMemory}
            "usedMemory" = ${UsedMemory}
            "freeSwap" = ${FreeSwap}
            "usedSwap" = ${UsedSwap}
            "cpuIdleTime" = ${CpuIdleTime}
            "cpuSystemTime" = ${CpuSystemTime}
            "cpuUserTime" = ${CpuUserTime}
            "cpuTotalTime" = ${CpuTotalTime}
            "cpuUsage" = ${CpuUsage}
            "usedStorage" = ${UsedStorage}
            "reservedStorage" = ${ReservedStorage}
            "maxStorage" = ${MaxStorage}
            "netTxUsage" = ${NetTxUsage}
            "netRxUsage" = ${NetRxUsage}
            "networkBandwidth" = ${NetworkBandwidth}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to GuidanceVmwareSizingResourceStats<PSCustomObject>

.DESCRIPTION

Convert from JSON to GuidanceVmwareSizingResourceStats<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

GuidanceVmwareSizingResourceStats<PSCustomObject>
#>
function ConvertFrom-JsonToGuidanceVmwareSizingResourceStats {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => GuidanceVmwareSizingResourceStats' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in GuidanceVmwareSizingResourceStats
        $AllProperties = ("ts", "freeMemory", "usedMemory", "freeSwap", "usedSwap", "cpuIdleTime", "cpuSystemTime", "cpuUserTime", "cpuTotalTime", "cpuUsage", "usedStorage", "reservedStorage", "maxStorage", "netTxUsage", "netRxUsage", "networkBandwidth")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ts"))) { #optional property not found
            $Ts = $null
        } else {
            $Ts = $JsonParameters.PSobject.Properties["ts"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "freeMemory"))) { #optional property not found
            $FreeMemory = $null
        } else {
            $FreeMemory = $JsonParameters.PSobject.Properties["freeMemory"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "usedMemory"))) { #optional property not found
            $UsedMemory = $null
        } else {
            $UsedMemory = $JsonParameters.PSobject.Properties["usedMemory"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "freeSwap"))) { #optional property not found
            $FreeSwap = $null
        } else {
            $FreeSwap = $JsonParameters.PSobject.Properties["freeSwap"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "usedSwap"))) { #optional property not found
            $UsedSwap = $null
        } else {
            $UsedSwap = $JsonParameters.PSobject.Properties["usedSwap"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cpuIdleTime"))) { #optional property not found
            $CpuIdleTime = $null
        } else {
            $CpuIdleTime = $JsonParameters.PSobject.Properties["cpuIdleTime"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cpuSystemTime"))) { #optional property not found
            $CpuSystemTime = $null
        } else {
            $CpuSystemTime = $JsonParameters.PSobject.Properties["cpuSystemTime"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cpuUserTime"))) { #optional property not found
            $CpuUserTime = $null
        } else {
            $CpuUserTime = $JsonParameters.PSobject.Properties["cpuUserTime"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cpuTotalTime"))) { #optional property not found
            $CpuTotalTime = $null
        } else {
            $CpuTotalTime = $JsonParameters.PSobject.Properties["cpuTotalTime"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cpuUsage"))) { #optional property not found
            $CpuUsage = $null
        } else {
            $CpuUsage = $JsonParameters.PSobject.Properties["cpuUsage"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "usedStorage"))) { #optional property not found
            $UsedStorage = $null
        } else {
            $UsedStorage = $JsonParameters.PSobject.Properties["usedStorage"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "reservedStorage"))) { #optional property not found
            $ReservedStorage = $null
        } else {
            $ReservedStorage = $JsonParameters.PSobject.Properties["reservedStorage"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "maxStorage"))) { #optional property not found
            $MaxStorage = $null
        } else {
            $MaxStorage = $JsonParameters.PSobject.Properties["maxStorage"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "netTxUsage"))) { #optional property not found
            $NetTxUsage = $null
        } else {
            $NetTxUsage = $JsonParameters.PSobject.Properties["netTxUsage"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "netRxUsage"))) { #optional property not found
            $NetRxUsage = $null
        } else {
            $NetRxUsage = $JsonParameters.PSobject.Properties["netRxUsage"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "networkBandwidth"))) { #optional property not found
            $NetworkBandwidth = $null
        } else {
            $NetworkBandwidth = $JsonParameters.PSobject.Properties["networkBandwidth"].value
        }

        $PSO = [PSCustomObject]@{
            "ts" = ${Ts}
            "freeMemory" = ${FreeMemory}
            "usedMemory" = ${UsedMemory}
            "freeSwap" = ${FreeSwap}
            "usedSwap" = ${UsedSwap}
            "cpuIdleTime" = ${CpuIdleTime}
            "cpuSystemTime" = ${CpuSystemTime}
            "cpuUserTime" = ${CpuUserTime}
            "cpuTotalTime" = ${CpuTotalTime}
            "cpuUsage" = ${CpuUsage}
            "usedStorage" = ${UsedStorage}
            "reservedStorage" = ${ReservedStorage}
            "maxStorage" = ${MaxStorage}
            "netTxUsage" = ${NetTxUsage}
            "netRxUsage" = ${NetRxUsage}
            "networkBandwidth" = ${NetworkBandwidth}
        }

        return $PSO
    }

}

