#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Payload for updating an existing role

.PARAMETER Authority
Authority (Name)
.PARAMETER Description
Description
.PARAMETER DefaultPersona
Set the default persona by code.
.PARAMETER Permissions
Set the access level for the specified permissions.
.PARAMETER GlobalSiteAccess
Set the default access level for for groups (sites). Only applies to user roles.
.PARAMETER Sites
Set the access level for the specified groups (sites). Only applies to user roles.
.PARAMETER GlobalZoneAccess
Set the default access level for for clouds (zones). Only applies to base account (tenant) roles.
.PARAMETER Zones
Set the access level for the specified clouds (zones). Only applies to base account (tenant) roles.
.PARAMETER GlobalInstanceTypeAccess
Set the default access level for for instance types
.PARAMETER InstanceTypes
Set the access level for the specified instance types
.PARAMETER GlobalAppTemplateAccess
Set the default access level for blueprints
.PARAMETER AppTemplates
Set the access level for the specified blueprints (appTemplates)
.PARAMETER GlobalCatalogItemTypeAccess
Set the default access level for catalog item types
.PARAMETER CatalogItemTypes
Set the access level for the specified catalog item types
.PARAMETER GlobalPersonaAccess
Set the default access level for personas
.PARAMETER Personas
Set the access level for the specified personas
.PARAMETER GlobalVdiPoolAccess
Set the default access level for VDI pools
.PARAMETER VdiPools
Set the access level for the specified VDI pools
.PARAMETER GlobalReportTypeAccess
Set the default access level for report types
.PARAMETER ReportTypes
Set the access level for the specified report types
.PARAMETER GlobalTaskAccess
Set the default access level for tasks
.PARAMETER Tasks
Set the access level for the specified tasks
.PARAMETER GlobalTaskSetAccess
Set the default access level for workflows (taskSets)
.PARAMETER TaskSets
Set the access level for the specified workflows (taskSets)
.OUTPUTS

ApiRolesIdRole<PSCustomObject>
#>

function Initialize-ApiRolesIdRole {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Authority},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("standard", "serviceCatalog", "vdi")]
        [String]
        ${DefaultPersona},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Permissions},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("full", "read", "none")]
        [String]
        ${GlobalSiteAccess},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Sites},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("full", "read", "none")]
        [String]
        ${GlobalZoneAccess},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Zones},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("full", "none")]
        [String]
        ${GlobalInstanceTypeAccess},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${InstanceTypes},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("full", "none")]
        [String]
        ${GlobalAppTemplateAccess},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${AppTemplates},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("full", "none")]
        [String]
        ${GlobalCatalogItemTypeAccess},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${CatalogItemTypes},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("full", "none")]
        [String]
        ${GlobalPersonaAccess},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Personas},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("full", "none")]
        [String]
        ${GlobalVdiPoolAccess},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${VdiPools},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("full", "none")]
        [String]
        ${GlobalReportTypeAccess},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${ReportTypes},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("full", "none")]
        [String]
        ${GlobalTaskAccess},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Tasks},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("full", "none")]
        [String]
        ${GlobalTaskSetAccess},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${TaskSets}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ApiRolesIdRole' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "authority" = ${Authority}
            "description" = ${Description}
            "defaultPersona" = ${DefaultPersona}
            "permissions" = ${Permissions}
            "globalSiteAccess" = ${GlobalSiteAccess}
            "sites" = ${Sites}
            "globalZoneAccess" = ${GlobalZoneAccess}
            "zones" = ${Zones}
            "globalInstanceTypeAccess" = ${GlobalInstanceTypeAccess}
            "instanceTypes" = ${InstanceTypes}
            "globalAppTemplateAccess" = ${GlobalAppTemplateAccess}
            "appTemplates" = ${AppTemplates}
            "globalCatalogItemTypeAccess" = ${GlobalCatalogItemTypeAccess}
            "catalogItemTypes" = ${CatalogItemTypes}
            "globalPersonaAccess" = ${GlobalPersonaAccess}
            "personas" = ${Personas}
            "globalVdiPoolAccess" = ${GlobalVdiPoolAccess}
            "vdiPools" = ${VdiPools}
            "globalReportTypeAccess" = ${GlobalReportTypeAccess}
            "reportTypes" = ${ReportTypes}
            "globalTaskAccess" = ${GlobalTaskAccess}
            "tasks" = ${Tasks}
            "globalTaskSetAccess" = ${GlobalTaskSetAccess}
            "taskSets" = ${TaskSets}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ApiRolesIdRole<PSCustomObject>

.DESCRIPTION

Convert from JSON to ApiRolesIdRole<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ApiRolesIdRole<PSCustomObject>
#>
function ConvertFrom-JsonToApiRolesIdRole {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ApiRolesIdRole' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ApiRolesIdRole
        $AllProperties = ("authority", "description", "defaultPersona", "permissions", "globalSiteAccess", "sites", "globalZoneAccess", "zones", "globalInstanceTypeAccess", "instanceTypes", "globalAppTemplateAccess", "appTemplates", "globalCatalogItemTypeAccess", "catalogItemTypes", "globalPersonaAccess", "personas", "globalVdiPoolAccess", "vdiPools", "globalReportTypeAccess", "reportTypes", "globalTaskAccess", "tasks", "globalTaskSetAccess", "taskSets")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "authority"))) { #optional property not found
            $Authority = $null
        } else {
            $Authority = $JsonParameters.PSobject.Properties["authority"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "defaultPersona"))) { #optional property not found
            $DefaultPersona = $null
        } else {
            $DefaultPersona = $JsonParameters.PSobject.Properties["defaultPersona"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "permissions"))) { #optional property not found
            $Permissions = $null
        } else {
            $Permissions = $JsonParameters.PSobject.Properties["permissions"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "globalSiteAccess"))) { #optional property not found
            $GlobalSiteAccess = $null
        } else {
            $GlobalSiteAccess = $JsonParameters.PSobject.Properties["globalSiteAccess"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sites"))) { #optional property not found
            $Sites = $null
        } else {
            $Sites = $JsonParameters.PSobject.Properties["sites"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "globalZoneAccess"))) { #optional property not found
            $GlobalZoneAccess = $null
        } else {
            $GlobalZoneAccess = $JsonParameters.PSobject.Properties["globalZoneAccess"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "zones"))) { #optional property not found
            $Zones = $null
        } else {
            $Zones = $JsonParameters.PSobject.Properties["zones"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "globalInstanceTypeAccess"))) { #optional property not found
            $GlobalInstanceTypeAccess = $null
        } else {
            $GlobalInstanceTypeAccess = $JsonParameters.PSobject.Properties["globalInstanceTypeAccess"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "instanceTypes"))) { #optional property not found
            $InstanceTypes = $null
        } else {
            $InstanceTypes = $JsonParameters.PSobject.Properties["instanceTypes"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "globalAppTemplateAccess"))) { #optional property not found
            $GlobalAppTemplateAccess = $null
        } else {
            $GlobalAppTemplateAccess = $JsonParameters.PSobject.Properties["globalAppTemplateAccess"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "appTemplates"))) { #optional property not found
            $AppTemplates = $null
        } else {
            $AppTemplates = $JsonParameters.PSobject.Properties["appTemplates"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "globalCatalogItemTypeAccess"))) { #optional property not found
            $GlobalCatalogItemTypeAccess = $null
        } else {
            $GlobalCatalogItemTypeAccess = $JsonParameters.PSobject.Properties["globalCatalogItemTypeAccess"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "catalogItemTypes"))) { #optional property not found
            $CatalogItemTypes = $null
        } else {
            $CatalogItemTypes = $JsonParameters.PSobject.Properties["catalogItemTypes"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "globalPersonaAccess"))) { #optional property not found
            $GlobalPersonaAccess = $null
        } else {
            $GlobalPersonaAccess = $JsonParameters.PSobject.Properties["globalPersonaAccess"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "personas"))) { #optional property not found
            $Personas = $null
        } else {
            $Personas = $JsonParameters.PSobject.Properties["personas"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "globalVdiPoolAccess"))) { #optional property not found
            $GlobalVdiPoolAccess = $null
        } else {
            $GlobalVdiPoolAccess = $JsonParameters.PSobject.Properties["globalVdiPoolAccess"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vdiPools"))) { #optional property not found
            $VdiPools = $null
        } else {
            $VdiPools = $JsonParameters.PSobject.Properties["vdiPools"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "globalReportTypeAccess"))) { #optional property not found
            $GlobalReportTypeAccess = $null
        } else {
            $GlobalReportTypeAccess = $JsonParameters.PSobject.Properties["globalReportTypeAccess"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "reportTypes"))) { #optional property not found
            $ReportTypes = $null
        } else {
            $ReportTypes = $JsonParameters.PSobject.Properties["reportTypes"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "globalTaskAccess"))) { #optional property not found
            $GlobalTaskAccess = $null
        } else {
            $GlobalTaskAccess = $JsonParameters.PSobject.Properties["globalTaskAccess"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tasks"))) { #optional property not found
            $Tasks = $null
        } else {
            $Tasks = $JsonParameters.PSobject.Properties["tasks"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "globalTaskSetAccess"))) { #optional property not found
            $GlobalTaskSetAccess = $null
        } else {
            $GlobalTaskSetAccess = $JsonParameters.PSobject.Properties["globalTaskSetAccess"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "taskSets"))) { #optional property not found
            $TaskSets = $null
        } else {
            $TaskSets = $JsonParameters.PSobject.Properties["taskSets"].value
        }

        $PSO = [PSCustomObject]@{
            "authority" = ${Authority}
            "description" = ${Description}
            "defaultPersona" = ${DefaultPersona}
            "permissions" = ${Permissions}
            "globalSiteAccess" = ${GlobalSiteAccess}
            "sites" = ${Sites}
            "globalZoneAccess" = ${GlobalZoneAccess}
            "zones" = ${Zones}
            "globalInstanceTypeAccess" = ${GlobalInstanceTypeAccess}
            "instanceTypes" = ${InstanceTypes}
            "globalAppTemplateAccess" = ${GlobalAppTemplateAccess}
            "appTemplates" = ${AppTemplates}
            "globalCatalogItemTypeAccess" = ${GlobalCatalogItemTypeAccess}
            "catalogItemTypes" = ${CatalogItemTypes}
            "globalPersonaAccess" = ${GlobalPersonaAccess}
            "personas" = ${Personas}
            "globalVdiPoolAccess" = ${GlobalVdiPoolAccess}
            "vdiPools" = ${VdiPools}
            "globalReportTypeAccess" = ${GlobalReportTypeAccess}
            "reportTypes" = ${ReportTypes}
            "globalTaskAccess" = ${GlobalTaskAccess}
            "tasks" = ${Tasks}
            "globalTaskSetAccess" = ${GlobalTaskSetAccess}
            "taskSets" = ${TaskSets}
        }

        return $PSO
    }

}

