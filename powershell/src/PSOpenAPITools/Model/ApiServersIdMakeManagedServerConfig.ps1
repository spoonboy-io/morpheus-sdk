#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Custom Option Type settings object containing name value pairs to be set.

.PARAMETER CustomOptions
No description available.
.OUTPUTS

ApiServersIdMakeManagedServerConfig<PSCustomObject>
#>

function Initialize-ApiServersIdMakeManagedServerConfig {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${CustomOptions}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ApiServersIdMakeManagedServerConfig' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "customOptions" = ${CustomOptions}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ApiServersIdMakeManagedServerConfig<PSCustomObject>

.DESCRIPTION

Convert from JSON to ApiServersIdMakeManagedServerConfig<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ApiServersIdMakeManagedServerConfig<PSCustomObject>
#>
function ConvertFrom-JsonToApiServersIdMakeManagedServerConfig {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ApiServersIdMakeManagedServerConfig' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ApiServersIdMakeManagedServerConfig
        $AllProperties = ("customOptions")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "customOptions"))) { #optional property not found
            $CustomOptions = $null
        } else {
            $CustomOptions = $JsonParameters.PSobject.Properties["customOptions"].value
        }

        $PSO = [PSCustomObject]@{
            "customOptions" = ${CustomOptions}
        }

        return $PSO
    }

}

