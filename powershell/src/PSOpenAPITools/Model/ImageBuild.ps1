#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
No description available.
.PARAMETER Account
No description available.
.PARAMETER Type
No description available.
.PARAMETER Site
No description available.
.PARAMETER Zone
No description available.
.PARAMETER Name
No description available.
.PARAMETER Description
No description available.
.PARAMETER BootScript
No description available.
.PARAMETER BootCommand
No description available.
.PARAMETER PreseedScript
No description available.
.PARAMETER Scripts
No description available.
.PARAMETER SshUsername
No description available.
.PARAMETER SshPassword
No description available.
.PARAMETER StorageProvider
No description available.
.PARAMETER BuildOutputName
No description available.
.PARAMETER ConversionFormats
No description available.
.PARAMETER IsCloudInit
No description available.
.PARAMETER VmToolsInstalled
No description available.
.PARAMETER KeepResults
No description available.
.PARAMETER Config
No description available.
.PARAMETER LastResult
No description available.
.PARAMETER ExecutionCount
No description available.
.OUTPUTS

ImageBuild<PSCustomObject>
#>

function Initialize-ImageBuild {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Account},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Type},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Site},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Zone},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${BootScript},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${BootCommand},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${PreseedScript},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Scripts},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SshUsername},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SshPassword},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${StorageProvider},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${BuildOutputName},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ConversionFormats},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsCloudInit},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${VmToolsInstalled},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${KeepResults},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Config},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${LastResult},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${ExecutionCount}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ImageBuild' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "account" = ${Account}
            "type" = ${Type}
            "site" = ${Site}
            "zone" = ${Zone}
            "name" = ${Name}
            "description" = ${Description}
            "bootScript" = ${BootScript}
            "bootCommand" = ${BootCommand}
            "preseedScript" = ${PreseedScript}
            "scripts" = ${Scripts}
            "sshUsername" = ${SshUsername}
            "sshPassword" = ${SshPassword}
            "storageProvider" = ${StorageProvider}
            "buildOutputName" = ${BuildOutputName}
            "conversionFormats" = ${ConversionFormats}
            "isCloudInit" = ${IsCloudInit}
            "vmToolsInstalled" = ${VmToolsInstalled}
            "keepResults" = ${KeepResults}
            "config" = ${Config}
            "lastResult" = ${LastResult}
            "executionCount" = ${ExecutionCount}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ImageBuild<PSCustomObject>

.DESCRIPTION

Convert from JSON to ImageBuild<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ImageBuild<PSCustomObject>
#>
function ConvertFrom-JsonToImageBuild {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ImageBuild' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ImageBuild
        $AllProperties = ("id", "account", "type", "site", "zone", "name", "description", "bootScript", "bootCommand", "preseedScript", "scripts", "sshUsername", "sshPassword", "storageProvider", "buildOutputName", "conversionFormats", "isCloudInit", "vmToolsInstalled", "keepResults", "config", "lastResult", "executionCount")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "account"))) { #optional property not found
            $Account = $null
        } else {
            $Account = $JsonParameters.PSobject.Properties["account"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "site"))) { #optional property not found
            $Site = $null
        } else {
            $Site = $JsonParameters.PSobject.Properties["site"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "zone"))) { #optional property not found
            $Zone = $null
        } else {
            $Zone = $JsonParameters.PSobject.Properties["zone"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "bootScript"))) { #optional property not found
            $BootScript = $null
        } else {
            $BootScript = $JsonParameters.PSobject.Properties["bootScript"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "bootCommand"))) { #optional property not found
            $BootCommand = $null
        } else {
            $BootCommand = $JsonParameters.PSobject.Properties["bootCommand"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "preseedScript"))) { #optional property not found
            $PreseedScript = $null
        } else {
            $PreseedScript = $JsonParameters.PSobject.Properties["preseedScript"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "scripts"))) { #optional property not found
            $Scripts = $null
        } else {
            $Scripts = $JsonParameters.PSobject.Properties["scripts"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sshUsername"))) { #optional property not found
            $SshUsername = $null
        } else {
            $SshUsername = $JsonParameters.PSobject.Properties["sshUsername"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sshPassword"))) { #optional property not found
            $SshPassword = $null
        } else {
            $SshPassword = $JsonParameters.PSobject.Properties["sshPassword"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "storageProvider"))) { #optional property not found
            $StorageProvider = $null
        } else {
            $StorageProvider = $JsonParameters.PSobject.Properties["storageProvider"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "buildOutputName"))) { #optional property not found
            $BuildOutputName = $null
        } else {
            $BuildOutputName = $JsonParameters.PSobject.Properties["buildOutputName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "conversionFormats"))) { #optional property not found
            $ConversionFormats = $null
        } else {
            $ConversionFormats = $JsonParameters.PSobject.Properties["conversionFormats"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "isCloudInit"))) { #optional property not found
            $IsCloudInit = $null
        } else {
            $IsCloudInit = $JsonParameters.PSobject.Properties["isCloudInit"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vmToolsInstalled"))) { #optional property not found
            $VmToolsInstalled = $null
        } else {
            $VmToolsInstalled = $JsonParameters.PSobject.Properties["vmToolsInstalled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "keepResults"))) { #optional property not found
            $KeepResults = $null
        } else {
            $KeepResults = $JsonParameters.PSobject.Properties["keepResults"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "config"))) { #optional property not found
            $Config = $null
        } else {
            $Config = $JsonParameters.PSobject.Properties["config"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lastResult"))) { #optional property not found
            $LastResult = $null
        } else {
            $LastResult = $JsonParameters.PSobject.Properties["lastResult"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "executionCount"))) { #optional property not found
            $ExecutionCount = $null
        } else {
            $ExecutionCount = $JsonParameters.PSobject.Properties["executionCount"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "account" = ${Account}
            "type" = ${Type}
            "site" = ${Site}
            "zone" = ${Zone}
            "name" = ${Name}
            "description" = ${Description}
            "bootScript" = ${BootScript}
            "bootCommand" = ${BootCommand}
            "preseedScript" = ${PreseedScript}
            "scripts" = ${Scripts}
            "sshUsername" = ${SshUsername}
            "sshPassword" = ${SshPassword}
            "storageProvider" = ${StorageProvider}
            "buildOutputName" = ${BuildOutputName}
            "conversionFormats" = ${ConversionFormats}
            "isCloudInit" = ${IsCloudInit}
            "vmToolsInstalled" = ${VmToolsInstalled}
            "keepResults" = ${KeepResults}
            "config" = ${Config}
            "lastResult" = ${LastResult}
            "executionCount" = ${ExecutionCount}
        }

        return $PSO
    }

}

