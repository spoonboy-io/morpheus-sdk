#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
No description available.
.PARAMETER Name
No description available.
.PARAMETER Labels
No description available.
.PARAMETER Type
No description available.
.PARAMETER JobSummary
No description available.
.PARAMETER ScheduleMode
No description available.
.PARAMETER DateTime
No description available.
.PARAMETER Status
No description available.
.PARAMETER Namespace
No description available.
.PARAMETER Category
No description available.
.PARAMETER Description
No description available.
.PARAMETER Enabled
No description available.
.PARAMETER DateCreated
No description available.
.PARAMETER LastUpdated
No description available.
.PARAMETER LastRun
No description available.
.PARAMETER LastResult
No description available.
.PARAMETER CreatedBy
No description available.
.PARAMETER TargetType
No description available.
.PARAMETER Targets
No description available.
.PARAMETER CustomConfig
No description available.
.PARAMETER CustomOptions
No description available.
.OUTPUTS

ClusterJobs<PSCustomObject>
#>

function Initialize-ClusterJobs {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${Labels},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Type},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${JobSummary},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ScheduleMode},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${DateTime},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Status},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Namespace},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Category},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Enabled},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${DateCreated},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${LastUpdated},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${LastRun},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${LastResult},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${CreatedBy},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TargetType},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Targets},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${CustomConfig},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${CustomOptions}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ClusterJobs' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "name" = ${Name}
            "labels" = ${Labels}
            "type" = ${Type}
            "jobSummary" = ${JobSummary}
            "scheduleMode" = ${ScheduleMode}
            "dateTime" = ${DateTime}
            "status" = ${Status}
            "namespace" = ${Namespace}
            "category" = ${Category}
            "description" = ${Description}
            "enabled" = ${Enabled}
            "dateCreated" = ${DateCreated}
            "lastUpdated" = ${LastUpdated}
            "lastRun" = ${LastRun}
            "lastResult" = ${LastResult}
            "createdBy" = ${CreatedBy}
            "targetType" = ${TargetType}
            "targets" = ${Targets}
            "customConfig" = ${CustomConfig}
            "customOptions" = ${CustomOptions}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ClusterJobs<PSCustomObject>

.DESCRIPTION

Convert from JSON to ClusterJobs<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ClusterJobs<PSCustomObject>
#>
function ConvertFrom-JsonToClusterJobs {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ClusterJobs' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ClusterJobs
        $AllProperties = ("id", "name", "labels", "type", "jobSummary", "scheduleMode", "dateTime", "status", "namespace", "category", "description", "enabled", "dateCreated", "lastUpdated", "lastRun", "lastResult", "createdBy", "targetType", "targets", "customConfig", "customOptions")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "labels"))) { #optional property not found
            $Labels = $null
        } else {
            $Labels = $JsonParameters.PSobject.Properties["labels"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "jobSummary"))) { #optional property not found
            $JobSummary = $null
        } else {
            $JobSummary = $JsonParameters.PSobject.Properties["jobSummary"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "scheduleMode"))) { #optional property not found
            $ScheduleMode = $null
        } else {
            $ScheduleMode = $JsonParameters.PSobject.Properties["scheduleMode"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dateTime"))) { #optional property not found
            $DateTime = $null
        } else {
            $DateTime = $JsonParameters.PSobject.Properties["dateTime"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "status"))) { #optional property not found
            $Status = $null
        } else {
            $Status = $JsonParameters.PSobject.Properties["status"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "namespace"))) { #optional property not found
            $Namespace = $null
        } else {
            $Namespace = $JsonParameters.PSobject.Properties["namespace"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "category"))) { #optional property not found
            $Category = $null
        } else {
            $Category = $JsonParameters.PSobject.Properties["category"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "enabled"))) { #optional property not found
            $Enabled = $null
        } else {
            $Enabled = $JsonParameters.PSobject.Properties["enabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dateCreated"))) { #optional property not found
            $DateCreated = $null
        } else {
            $DateCreated = $JsonParameters.PSobject.Properties["dateCreated"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lastUpdated"))) { #optional property not found
            $LastUpdated = $null
        } else {
            $LastUpdated = $JsonParameters.PSobject.Properties["lastUpdated"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lastRun"))) { #optional property not found
            $LastRun = $null
        } else {
            $LastRun = $JsonParameters.PSobject.Properties["lastRun"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lastResult"))) { #optional property not found
            $LastResult = $null
        } else {
            $LastResult = $JsonParameters.PSobject.Properties["lastResult"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "createdBy"))) { #optional property not found
            $CreatedBy = $null
        } else {
            $CreatedBy = $JsonParameters.PSobject.Properties["createdBy"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "targetType"))) { #optional property not found
            $TargetType = $null
        } else {
            $TargetType = $JsonParameters.PSobject.Properties["targetType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "targets"))) { #optional property not found
            $Targets = $null
        } else {
            $Targets = $JsonParameters.PSobject.Properties["targets"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "customConfig"))) { #optional property not found
            $CustomConfig = $null
        } else {
            $CustomConfig = $JsonParameters.PSobject.Properties["customConfig"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "customOptions"))) { #optional property not found
            $CustomOptions = $null
        } else {
            $CustomOptions = $JsonParameters.PSobject.Properties["customOptions"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "name" = ${Name}
            "labels" = ${Labels}
            "type" = ${Type}
            "jobSummary" = ${JobSummary}
            "scheduleMode" = ${ScheduleMode}
            "dateTime" = ${DateTime}
            "status" = ${Status}
            "namespace" = ${Namespace}
            "category" = ${Category}
            "description" = ${Description}
            "enabled" = ${Enabled}
            "dateCreated" = ${DateCreated}
            "lastUpdated" = ${LastUpdated}
            "lastRun" = ${LastRun}
            "lastResult" = ${LastResult}
            "createdBy" = ${CreatedBy}
            "targetType" = ${TargetType}
            "targets" = ${Targets}
            "customConfig" = ${CustomConfig}
            "customOptions" = ${CustomOptions}
        }

        return $PSO
    }

}

