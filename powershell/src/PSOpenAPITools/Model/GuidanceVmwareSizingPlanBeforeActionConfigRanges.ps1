#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER MinStorage
No description available.
.PARAMETER MaxStorage
No description available.
.PARAMETER MinMemory
No description available.
.PARAMETER MaxMemory
No description available.
.PARAMETER MinCores
No description available.
.PARAMETER MaxCores
No description available.
.OUTPUTS

GuidanceVmwareSizingPlanBeforeActionConfigRanges<PSCustomObject>
#>

function Initialize-GuidanceVmwareSizingPlanBeforeActionConfigRanges {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${MinStorage},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${MaxStorage},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${MinMemory},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${MaxMemory},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${MinCores},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${MaxCores}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => GuidanceVmwareSizingPlanBeforeActionConfigRanges' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "minStorage" = ${MinStorage}
            "maxStorage" = ${MaxStorage}
            "minMemory" = ${MinMemory}
            "maxMemory" = ${MaxMemory}
            "minCores" = ${MinCores}
            "maxCores" = ${MaxCores}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to GuidanceVmwareSizingPlanBeforeActionConfigRanges<PSCustomObject>

.DESCRIPTION

Convert from JSON to GuidanceVmwareSizingPlanBeforeActionConfigRanges<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

GuidanceVmwareSizingPlanBeforeActionConfigRanges<PSCustomObject>
#>
function ConvertFrom-JsonToGuidanceVmwareSizingPlanBeforeActionConfigRanges {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => GuidanceVmwareSizingPlanBeforeActionConfigRanges' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in GuidanceVmwareSizingPlanBeforeActionConfigRanges
        $AllProperties = ("minStorage", "maxStorage", "minMemory", "maxMemory", "minCores", "maxCores")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "minStorage"))) { #optional property not found
            $MinStorage = $null
        } else {
            $MinStorage = $JsonParameters.PSobject.Properties["minStorage"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "maxStorage"))) { #optional property not found
            $MaxStorage = $null
        } else {
            $MaxStorage = $JsonParameters.PSobject.Properties["maxStorage"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "minMemory"))) { #optional property not found
            $MinMemory = $null
        } else {
            $MinMemory = $JsonParameters.PSobject.Properties["minMemory"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "maxMemory"))) { #optional property not found
            $MaxMemory = $null
        } else {
            $MaxMemory = $JsonParameters.PSobject.Properties["maxMemory"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "minCores"))) { #optional property not found
            $MinCores = $null
        } else {
            $MinCores = $JsonParameters.PSobject.Properties["minCores"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "maxCores"))) { #optional property not found
            $MaxCores = $null
        } else {
            $MaxCores = $JsonParameters.PSobject.Properties["maxCores"].value
        }

        $PSO = [PSCustomObject]@{
            "minStorage" = ${MinStorage}
            "maxStorage" = ${MaxStorage}
            "minMemory" = ${MinMemory}
            "maxMemory" = ${MaxMemory}
            "minCores" = ${MinCores}
            "maxCores" = ${MaxCores}
        }

        return $PSO
    }

}

