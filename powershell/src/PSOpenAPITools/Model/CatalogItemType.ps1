#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
No description available.
.PARAMETER Name
No description available.
.PARAMETER Code
Useful shortcode for provisioning naming schemes and export reference.
.PARAMETER Category
Catalog Item Type category
.PARAMETER Description
No description available.
.PARAMETER Labels
No description available.
.PARAMETER Type
No description available.
.PARAMETER Enabled
No description available.
.PARAMETER Featured
No description available.
.PARAMETER AllowQuantity
Can users order more than one of this item at a time.
.PARAMETER IconPath
No description available.
.PARAMETER ImagePath
No description available.
.PARAMETER DarkImagePath
No description available.
.PARAMETER Visibility
No description available.
.PARAMETER LayoutCode
No description available.
.PARAMETER Blueprint
No description available.
.PARAMETER AppSpec
No description available.
.PARAMETER Config
No description available.
.PARAMETER Workflow
No description available.
.PARAMETER Content
No description available.
.PARAMETER OptionTypes
No description available.
.PARAMETER CreatedBy
No description available.
.PARAMETER Owner
No description available.
.PARAMETER DateCreated
No description available.
.PARAMETER LastUpdated
No description available.
.OUTPUTS

CatalogItemType<PSCustomObject>
#>

function Initialize-CatalogItemType {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Code},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Category},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${Labels},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Type},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Enabled},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Featured},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${AllowQuantity},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${IconPath},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ImagePath},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DarkImagePath},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Visibility},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${LayoutCode},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Blueprint},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AppSpec},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Config},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Workflow},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Content},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${OptionTypes},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CreatedBy},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Owner},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${DateCreated},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${LastUpdated}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => CatalogItemType' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "name" = ${Name}
            "code" = ${Code}
            "category" = ${Category}
            "description" = ${Description}
            "labels" = ${Labels}
            "type" = ${Type}
            "enabled" = ${Enabled}
            "featured" = ${Featured}
            "allowQuantity" = ${AllowQuantity}
            "iconPath" = ${IconPath}
            "imagePath" = ${ImagePath}
            "darkImagePath" = ${DarkImagePath}
            "visibility" = ${Visibility}
            "layoutCode" = ${LayoutCode}
            "blueprint" = ${Blueprint}
            "appSpec" = ${AppSpec}
            "config" = ${Config}
            "workflow" = ${Workflow}
            "content" = ${Content}
            "optionTypes" = ${OptionTypes}
            "createdBy" = ${CreatedBy}
            "owner" = ${Owner}
            "dateCreated" = ${DateCreated}
            "lastUpdated" = ${LastUpdated}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to CatalogItemType<PSCustomObject>

.DESCRIPTION

Convert from JSON to CatalogItemType<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

CatalogItemType<PSCustomObject>
#>
function ConvertFrom-JsonToCatalogItemType {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => CatalogItemType' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in CatalogItemType
        $AllProperties = ("id", "name", "code", "category", "description", "labels", "type", "enabled", "featured", "allowQuantity", "iconPath", "imagePath", "darkImagePath", "visibility", "layoutCode", "blueprint", "appSpec", "config", "workflow", "content", "optionTypes", "createdBy", "owner", "dateCreated", "lastUpdated")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "code"))) { #optional property not found
            $Code = $null
        } else {
            $Code = $JsonParameters.PSobject.Properties["code"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "category"))) { #optional property not found
            $Category = $null
        } else {
            $Category = $JsonParameters.PSobject.Properties["category"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "labels"))) { #optional property not found
            $Labels = $null
        } else {
            $Labels = $JsonParameters.PSobject.Properties["labels"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "enabled"))) { #optional property not found
            $Enabled = $null
        } else {
            $Enabled = $JsonParameters.PSobject.Properties["enabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "featured"))) { #optional property not found
            $Featured = $null
        } else {
            $Featured = $JsonParameters.PSobject.Properties["featured"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "allowQuantity"))) { #optional property not found
            $AllowQuantity = $null
        } else {
            $AllowQuantity = $JsonParameters.PSobject.Properties["allowQuantity"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "iconPath"))) { #optional property not found
            $IconPath = $null
        } else {
            $IconPath = $JsonParameters.PSobject.Properties["iconPath"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "imagePath"))) { #optional property not found
            $ImagePath = $null
        } else {
            $ImagePath = $JsonParameters.PSobject.Properties["imagePath"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "darkImagePath"))) { #optional property not found
            $DarkImagePath = $null
        } else {
            $DarkImagePath = $JsonParameters.PSobject.Properties["darkImagePath"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "visibility"))) { #optional property not found
            $Visibility = $null
        } else {
            $Visibility = $JsonParameters.PSobject.Properties["visibility"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "layoutCode"))) { #optional property not found
            $LayoutCode = $null
        } else {
            $LayoutCode = $JsonParameters.PSobject.Properties["layoutCode"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "blueprint"))) { #optional property not found
            $Blueprint = $null
        } else {
            $Blueprint = $JsonParameters.PSobject.Properties["blueprint"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "appSpec"))) { #optional property not found
            $AppSpec = $null
        } else {
            $AppSpec = $JsonParameters.PSobject.Properties["appSpec"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "config"))) { #optional property not found
            $Config = $null
        } else {
            $Config = $JsonParameters.PSobject.Properties["config"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "workflow"))) { #optional property not found
            $Workflow = $null
        } else {
            $Workflow = $JsonParameters.PSobject.Properties["workflow"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "content"))) { #optional property not found
            $Content = $null
        } else {
            $Content = $JsonParameters.PSobject.Properties["content"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "optionTypes"))) { #optional property not found
            $OptionTypes = $null
        } else {
            $OptionTypes = $JsonParameters.PSobject.Properties["optionTypes"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "createdBy"))) { #optional property not found
            $CreatedBy = $null
        } else {
            $CreatedBy = $JsonParameters.PSobject.Properties["createdBy"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "owner"))) { #optional property not found
            $Owner = $null
        } else {
            $Owner = $JsonParameters.PSobject.Properties["owner"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dateCreated"))) { #optional property not found
            $DateCreated = $null
        } else {
            $DateCreated = $JsonParameters.PSobject.Properties["dateCreated"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lastUpdated"))) { #optional property not found
            $LastUpdated = $null
        } else {
            $LastUpdated = $JsonParameters.PSobject.Properties["lastUpdated"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "name" = ${Name}
            "code" = ${Code}
            "category" = ${Category}
            "description" = ${Description}
            "labels" = ${Labels}
            "type" = ${Type}
            "enabled" = ${Enabled}
            "featured" = ${Featured}
            "allowQuantity" = ${AllowQuantity}
            "iconPath" = ${IconPath}
            "imagePath" = ${ImagePath}
            "darkImagePath" = ${DarkImagePath}
            "visibility" = ${Visibility}
            "layoutCode" = ${LayoutCode}
            "blueprint" = ${Blueprint}
            "appSpec" = ${AppSpec}
            "config" = ${Config}
            "workflow" = ${Workflow}
            "content" = ${Content}
            "optionTypes" = ${OptionTypes}
            "createdBy" = ${CreatedBy}
            "owner" = ${Owner}
            "dateCreated" = ${DateCreated}
            "lastUpdated" = ${LastUpdated}
        }

        return $PSO
    }

}

