#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER DeploymentId
Deployment ID.
.PARAMETER Version
Deployment Version number identifier (userVersion). Can be passed along with deploymentId to identify the version
.PARAMETER VersionId
Deployment Version ID. This can be passed instead of deploymentId and version.
.PARAMETER Config
Map of configuration properties that vary by instance type.
.PARAMETER StageOnly
Stage Only, do not run the deploy right away and instead set status to staged so it can be deployed later on.
.OUTPUTS

ApiInstancesIdDeploysAppDeploy<PSCustomObject>
#>

function Initialize-ApiInstancesIdDeploysAppDeploy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${DeploymentId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Version},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${VersionId},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Config},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${StageOnly} = $false
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ApiInstancesIdDeploysAppDeploy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "deploymentId" = ${DeploymentId}
            "version" = ${Version}
            "versionId" = ${VersionId}
            "config" = ${Config}
            "stageOnly" = ${StageOnly}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ApiInstancesIdDeploysAppDeploy<PSCustomObject>

.DESCRIPTION

Convert from JSON to ApiInstancesIdDeploysAppDeploy<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ApiInstancesIdDeploysAppDeploy<PSCustomObject>
#>
function ConvertFrom-JsonToApiInstancesIdDeploysAppDeploy {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ApiInstancesIdDeploysAppDeploy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ApiInstancesIdDeploysAppDeploy
        $AllProperties = ("deploymentId", "version", "versionId", "config", "stageOnly")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "deploymentId"))) { #optional property not found
            $DeploymentId = $null
        } else {
            $DeploymentId = $JsonParameters.PSobject.Properties["deploymentId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "version"))) { #optional property not found
            $Version = $null
        } else {
            $Version = $JsonParameters.PSobject.Properties["version"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "versionId"))) { #optional property not found
            $VersionId = $null
        } else {
            $VersionId = $JsonParameters.PSobject.Properties["versionId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "config"))) { #optional property not found
            $Config = $null
        } else {
            $Config = $JsonParameters.PSobject.Properties["config"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "stageOnly"))) { #optional property not found
            $StageOnly = $null
        } else {
            $StageOnly = $JsonParameters.PSobject.Properties["stageOnly"].value
        }

        $PSO = [PSCustomObject]@{
            "deploymentId" = ${DeploymentId}
            "version" = ${Version}
            "versionId" = ${VersionId}
            "config" = ${Config}
            "stageOnly" = ${StageOnly}
        }

        return $PSO
    }

}

