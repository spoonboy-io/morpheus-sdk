#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
No description available.
.PARAMETER Code
No description available.
.PARAMETER Name
No description available.
.PARAMETER Description
No description available.
.PARAMETER Category
No description available.
.PARAMETER DateCreated
No description available.
.PARAMETER LastUpdated
No description available.
.PARAMETER RouterType
No description available.
.PARAMETER Status
No description available.
.PARAMETER Enabled
No description available.
.PARAMETER ExternalIp
No description available.
.PARAMETER ExternalId
No description available.
.PARAMETER ProviderId
No description available.
.PARAMETER Type
No description available.
.PARAMETER NetworkServer
No description available.
.PARAMETER Zone
No description available.
.PARAMETER Instance
No description available.
.PARAMETER ExternalNetwork
No description available.
.PARAMETER Site
No description available.
.PARAMETER Interfaces
No description available.
.PARAMETER Firewall
No description available.
.PARAMETER Routes
No description available.
.PARAMETER Nats
No description available.
.PARAMETER Permissions
No description available.
.OUTPUTS

GetNetworkRouter200ResponseNetworkRouter<PSCustomObject>
#>

function Initialize-GetNetworkRouter200ResponseNetworkRouter {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Code},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Category},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${DateCreated},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${LastUpdated},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RouterType},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Status},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Enabled},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ExternalIp},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ExternalId},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ProviderId},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Type},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${NetworkServer},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Zone},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Instance},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ExternalNetwork},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Site},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Interfaces},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Firewall},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Routes},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Nats},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Permissions}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => GetNetworkRouter200ResponseNetworkRouter' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "code" = ${Code}
            "name" = ${Name}
            "description" = ${Description}
            "category" = ${Category}
            "dateCreated" = ${DateCreated}
            "lastUpdated" = ${LastUpdated}
            "routerType" = ${RouterType}
            "status" = ${Status}
            "enabled" = ${Enabled}
            "externalIp" = ${ExternalIp}
            "externalId" = ${ExternalId}
            "providerId" = ${ProviderId}
            "type" = ${Type}
            "networkServer" = ${NetworkServer}
            "zone" = ${Zone}
            "instance" = ${Instance}
            "externalNetwork" = ${ExternalNetwork}
            "site" = ${Site}
            "interfaces" = ${Interfaces}
            "firewall" = ${Firewall}
            "routes" = ${Routes}
            "nats" = ${Nats}
            "permissions" = ${Permissions}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to GetNetworkRouter200ResponseNetworkRouter<PSCustomObject>

.DESCRIPTION

Convert from JSON to GetNetworkRouter200ResponseNetworkRouter<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

GetNetworkRouter200ResponseNetworkRouter<PSCustomObject>
#>
function ConvertFrom-JsonToGetNetworkRouter200ResponseNetworkRouter {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => GetNetworkRouter200ResponseNetworkRouter' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in GetNetworkRouter200ResponseNetworkRouter
        $AllProperties = ("id", "code", "name", "description", "category", "dateCreated", "lastUpdated", "routerType", "status", "enabled", "externalIp", "externalId", "providerId", "type", "networkServer", "zone", "instance", "externalNetwork", "site", "interfaces", "firewall", "routes", "nats", "permissions")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "code"))) { #optional property not found
            $Code = $null
        } else {
            $Code = $JsonParameters.PSobject.Properties["code"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "category"))) { #optional property not found
            $Category = $null
        } else {
            $Category = $JsonParameters.PSobject.Properties["category"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dateCreated"))) { #optional property not found
            $DateCreated = $null
        } else {
            $DateCreated = $JsonParameters.PSobject.Properties["dateCreated"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lastUpdated"))) { #optional property not found
            $LastUpdated = $null
        } else {
            $LastUpdated = $JsonParameters.PSobject.Properties["lastUpdated"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "routerType"))) { #optional property not found
            $RouterType = $null
        } else {
            $RouterType = $JsonParameters.PSobject.Properties["routerType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "status"))) { #optional property not found
            $Status = $null
        } else {
            $Status = $JsonParameters.PSobject.Properties["status"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "enabled"))) { #optional property not found
            $Enabled = $null
        } else {
            $Enabled = $JsonParameters.PSobject.Properties["enabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "externalIp"))) { #optional property not found
            $ExternalIp = $null
        } else {
            $ExternalIp = $JsonParameters.PSobject.Properties["externalIp"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "externalId"))) { #optional property not found
            $ExternalId = $null
        } else {
            $ExternalId = $JsonParameters.PSobject.Properties["externalId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "providerId"))) { #optional property not found
            $ProviderId = $null
        } else {
            $ProviderId = $JsonParameters.PSobject.Properties["providerId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "networkServer"))) { #optional property not found
            $NetworkServer = $null
        } else {
            $NetworkServer = $JsonParameters.PSobject.Properties["networkServer"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "zone"))) { #optional property not found
            $Zone = $null
        } else {
            $Zone = $JsonParameters.PSobject.Properties["zone"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "instance"))) { #optional property not found
            $Instance = $null
        } else {
            $Instance = $JsonParameters.PSobject.Properties["instance"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "externalNetwork"))) { #optional property not found
            $ExternalNetwork = $null
        } else {
            $ExternalNetwork = $JsonParameters.PSobject.Properties["externalNetwork"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "site"))) { #optional property not found
            $Site = $null
        } else {
            $Site = $JsonParameters.PSobject.Properties["site"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "interfaces"))) { #optional property not found
            $Interfaces = $null
        } else {
            $Interfaces = $JsonParameters.PSobject.Properties["interfaces"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "firewall"))) { #optional property not found
            $Firewall = $null
        } else {
            $Firewall = $JsonParameters.PSobject.Properties["firewall"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "routes"))) { #optional property not found
            $Routes = $null
        } else {
            $Routes = $JsonParameters.PSobject.Properties["routes"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "nats"))) { #optional property not found
            $Nats = $null
        } else {
            $Nats = $JsonParameters.PSobject.Properties["nats"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "permissions"))) { #optional property not found
            $Permissions = $null
        } else {
            $Permissions = $JsonParameters.PSobject.Properties["permissions"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "code" = ${Code}
            "name" = ${Name}
            "description" = ${Description}
            "category" = ${Category}
            "dateCreated" = ${DateCreated}
            "lastUpdated" = ${LastUpdated}
            "routerType" = ${RouterType}
            "status" = ${Status}
            "enabled" = ${Enabled}
            "externalIp" = ${ExternalIp}
            "externalId" = ${ExternalId}
            "providerId" = ${ProviderId}
            "type" = ${Type}
            "networkServer" = ${NetworkServer}
            "zone" = ${Zone}
            "instance" = ${Instance}
            "externalNetwork" = ${ExternalNetwork}
            "site" = ${Site}
            "interfaces" = ${Interfaces}
            "firewall" = ${Firewall}
            "routes" = ${Routes}
            "nats" = ${Nats}
            "permissions" = ${Permissions}
        }

        return $PSO
    }

}

