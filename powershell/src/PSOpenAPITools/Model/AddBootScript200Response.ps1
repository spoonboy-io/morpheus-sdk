#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER BootScript
No description available.
.PARAMETER ErrorCode
No description available.
.PARAMETER InProgress
No description available.
.PARAMETER Success
Success indicator, true when the request succeeded and false when an error occurred
.PARAMETER Msg
Message containing a description of the result, usually a message about the error that occurred
.PARAMETER Errors
Validation errors, with a key for Object containing error messages for each invalid parameter (key)
.OUTPUTS

AddBootScript200Response<PSCustomObject>
#>

function Initialize-AddBootScript200Response {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${BootScript},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ErrorCode},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${InProgress},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Success} = $true,
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Msg},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Errors}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => AddBootScript200Response' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "bootScript" = ${BootScript}
            "errorCode" = ${ErrorCode}
            "inProgress" = ${InProgress}
            "success" = ${Success}
            "msg" = ${Msg}
            "errors" = ${Errors}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to AddBootScript200Response<PSCustomObject>

.DESCRIPTION

Convert from JSON to AddBootScript200Response<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

AddBootScript200Response<PSCustomObject>
#>
function ConvertFrom-JsonToAddBootScript200Response {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => AddBootScript200Response' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in AddBootScript200Response
        $AllProperties = ("bootScript", "errorCode", "inProgress", "success", "msg", "errors")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "bootScript"))) { #optional property not found
            $BootScript = $null
        } else {
            $BootScript = $JsonParameters.PSobject.Properties["bootScript"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "errorCode"))) { #optional property not found
            $ErrorCode = $null
        } else {
            $ErrorCode = $JsonParameters.PSobject.Properties["errorCode"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "inProgress"))) { #optional property not found
            $InProgress = $null
        } else {
            $InProgress = $JsonParameters.PSobject.Properties["inProgress"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "success"))) { #optional property not found
            $Success = $null
        } else {
            $Success = $JsonParameters.PSobject.Properties["success"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "msg"))) { #optional property not found
            $Msg = $null
        } else {
            $Msg = $JsonParameters.PSobject.Properties["msg"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "errors"))) { #optional property not found
            $Errors = $null
        } else {
            $Errors = $JsonParameters.PSobject.Properties["errors"].value
        }

        $PSO = [PSCustomObject]@{
            "bootScript" = ${BootScript}
            "errorCode" = ${ErrorCode}
            "inProgress" = ${InProgress}
            "success" = ${Success}
            "msg" = ${Msg}
            "errors" = ${Errors}
        }

        return $PSO
    }

}

