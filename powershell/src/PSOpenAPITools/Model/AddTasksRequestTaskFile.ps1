#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

File, object specifying type and content, see File Object. This is required for task types that expect a script, having scriptable:true and an optionType of `type:""file-content""`. 

.PARAMETER SourceType
File Source i.e. `local`, `repository`, `url`. Default is `local`.
.PARAMETER Content
File content, the script text. Only required when sourceType is `local`.
.PARAMETER ContentPath
Content Path, the repo file location or url. Required when sourceType is `repository` or `url`.
.PARAMETER ContentRef
Content Ref, the branch/tag. Only used when sourceType is `repository`.
.PARAMETER Repository
No description available.
.OUTPUTS

AddTasksRequestTaskFile<PSCustomObject>
#>

function Initialize-AddTasksRequestTaskFile {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("local", "repository", "url")]
        [String]
        ${SourceType} = "local",
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Content},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ContentPath},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ContentRef},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Repository}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => AddTasksRequestTaskFile' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $SourceType) {
            throw "invalid value for 'SourceType', 'SourceType' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "sourceType" = ${SourceType}
            "content" = ${Content}
            "contentPath" = ${ContentPath}
            "contentRef" = ${ContentRef}
            "repository" = ${Repository}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to AddTasksRequestTaskFile<PSCustomObject>

.DESCRIPTION

Convert from JSON to AddTasksRequestTaskFile<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

AddTasksRequestTaskFile<PSCustomObject>
#>
function ConvertFrom-JsonToAddTasksRequestTaskFile {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => AddTasksRequestTaskFile' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in AddTasksRequestTaskFile
        $AllProperties = ("sourceType", "content", "contentPath", "contentRef", "repository")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'sourceType' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sourceType"))) {
            throw "Error! JSON cannot be serialized due to the required property 'sourceType' missing."
        } else {
            $SourceType = $JsonParameters.PSobject.Properties["sourceType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "content"))) { #optional property not found
            $Content = $null
        } else {
            $Content = $JsonParameters.PSobject.Properties["content"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "contentPath"))) { #optional property not found
            $ContentPath = $null
        } else {
            $ContentPath = $JsonParameters.PSobject.Properties["contentPath"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "contentRef"))) { #optional property not found
            $ContentRef = $null
        } else {
            $ContentRef = $JsonParameters.PSobject.Properties["contentRef"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "repository"))) { #optional property not found
            $Repository = $null
        } else {
            $Repository = $JsonParameters.PSobject.Properties["repository"].value
        }

        $PSO = [PSCustomObject]@{
            "sourceType" = ${SourceType}
            "content" = ${Content}
            "contentPath" = ${ContentPath}
            "contentRef" = ${ContentRef}
            "repository" = ${Repository}
        }

        return $PSO
    }

}

