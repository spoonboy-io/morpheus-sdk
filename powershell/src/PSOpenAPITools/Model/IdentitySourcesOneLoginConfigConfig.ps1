#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Subdomain
No description available.
.PARAMETER Region
No description available.
.PARAMETER ClientSecret
No description available.
.PARAMETER ClientId
No description available.
.PARAMETER RequiredRole
No description available.
.PARAMETER RequiredRoleId
No description available.
.PARAMETER ClientSecretHash
No description available.
.OUTPUTS

IdentitySourcesOneLoginConfigConfig<PSCustomObject>
#>

function Initialize-IdentitySourcesOneLoginConfigConfig {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Subdomain},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Region},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ClientSecret},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ClientId},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RequiredRole},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RequiredRoleId},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ClientSecretHash}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => IdentitySourcesOneLoginConfigConfig' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "subdomain" = ${Subdomain}
            "region" = ${Region}
            "clientSecret" = ${ClientSecret}
            "clientId" = ${ClientId}
            "requiredRole" = ${RequiredRole}
            "requiredRoleId" = ${RequiredRoleId}
            "clientSecretHash" = ${ClientSecretHash}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to IdentitySourcesOneLoginConfigConfig<PSCustomObject>

.DESCRIPTION

Convert from JSON to IdentitySourcesOneLoginConfigConfig<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

IdentitySourcesOneLoginConfigConfig<PSCustomObject>
#>
function ConvertFrom-JsonToIdentitySourcesOneLoginConfigConfig {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => IdentitySourcesOneLoginConfigConfig' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in IdentitySourcesOneLoginConfigConfig
        $AllProperties = ("subdomain", "region", "clientSecret", "clientId", "requiredRole", "requiredRoleId", "clientSecretHash")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "subdomain"))) { #optional property not found
            $Subdomain = $null
        } else {
            $Subdomain = $JsonParameters.PSobject.Properties["subdomain"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "region"))) { #optional property not found
            $Region = $null
        } else {
            $Region = $JsonParameters.PSobject.Properties["region"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "clientSecret"))) { #optional property not found
            $ClientSecret = $null
        } else {
            $ClientSecret = $JsonParameters.PSobject.Properties["clientSecret"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "clientId"))) { #optional property not found
            $ClientId = $null
        } else {
            $ClientId = $JsonParameters.PSobject.Properties["clientId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "requiredRole"))) { #optional property not found
            $RequiredRole = $null
        } else {
            $RequiredRole = $JsonParameters.PSobject.Properties["requiredRole"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "requiredRoleId"))) { #optional property not found
            $RequiredRoleId = $null
        } else {
            $RequiredRoleId = $JsonParameters.PSobject.Properties["requiredRoleId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "clientSecretHash"))) { #optional property not found
            $ClientSecretHash = $null
        } else {
            $ClientSecretHash = $JsonParameters.PSobject.Properties["clientSecretHash"].value
        }

        $PSO = [PSCustomObject]@{
            "subdomain" = ${Subdomain}
            "region" = ${Region}
            "clientSecret" = ${ClientSecret}
            "clientId" = ${ClientId}
            "requiredRole" = ${RequiredRole}
            "requiredRoleId" = ${RequiredRoleId}
            "clientSecretHash" = ${ClientSecretHash}
        }

        return $PSO
    }

}

