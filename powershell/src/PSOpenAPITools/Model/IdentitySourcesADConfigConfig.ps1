#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Url
No description available.
.PARAMETER Domain
No description available.
.PARAMETER UseSSL
No description available.
.PARAMETER BindingUsername
No description available.
.PARAMETER BindingPassword
No description available.
.PARAMETER RequiredGroup
No description available.
.PARAMETER RequiredGroupDN
No description available.
.PARAMETER SearchMemberGroups
No description available.
.PARAMETER BindingPasswordHash
No description available.
.OUTPUTS

IdentitySourcesADConfigConfig<PSCustomObject>
#>

function Initialize-IdentitySourcesADConfigConfig {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Url},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Domain},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${UseSSL},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${BindingUsername},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${BindingPassword},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RequiredGroup},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RequiredGroupDN},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${SearchMemberGroups},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${BindingPasswordHash}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => IdentitySourcesADConfigConfig' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "url" = ${Url}
            "domain" = ${Domain}
            "useSSL" = ${UseSSL}
            "bindingUsername" = ${BindingUsername}
            "bindingPassword" = ${BindingPassword}
            "requiredGroup" = ${RequiredGroup}
            "requiredGroupDN" = ${RequiredGroupDN}
            "searchMemberGroups" = ${SearchMemberGroups}
            "bindingPasswordHash" = ${BindingPasswordHash}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to IdentitySourcesADConfigConfig<PSCustomObject>

.DESCRIPTION

Convert from JSON to IdentitySourcesADConfigConfig<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

IdentitySourcesADConfigConfig<PSCustomObject>
#>
function ConvertFrom-JsonToIdentitySourcesADConfigConfig {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => IdentitySourcesADConfigConfig' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in IdentitySourcesADConfigConfig
        $AllProperties = ("url", "domain", "useSSL", "bindingUsername", "bindingPassword", "requiredGroup", "requiredGroupDN", "searchMemberGroups", "bindingPasswordHash")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "url"))) { #optional property not found
            $Url = $null
        } else {
            $Url = $JsonParameters.PSobject.Properties["url"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "domain"))) { #optional property not found
            $Domain = $null
        } else {
            $Domain = $JsonParameters.PSobject.Properties["domain"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "useSSL"))) { #optional property not found
            $UseSSL = $null
        } else {
            $UseSSL = $JsonParameters.PSobject.Properties["useSSL"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "bindingUsername"))) { #optional property not found
            $BindingUsername = $null
        } else {
            $BindingUsername = $JsonParameters.PSobject.Properties["bindingUsername"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "bindingPassword"))) { #optional property not found
            $BindingPassword = $null
        } else {
            $BindingPassword = $JsonParameters.PSobject.Properties["bindingPassword"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "requiredGroup"))) { #optional property not found
            $RequiredGroup = $null
        } else {
            $RequiredGroup = $JsonParameters.PSobject.Properties["requiredGroup"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "requiredGroupDN"))) { #optional property not found
            $RequiredGroupDN = $null
        } else {
            $RequiredGroupDN = $JsonParameters.PSobject.Properties["requiredGroupDN"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "searchMemberGroups"))) { #optional property not found
            $SearchMemberGroups = $null
        } else {
            $SearchMemberGroups = $JsonParameters.PSobject.Properties["searchMemberGroups"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "bindingPasswordHash"))) { #optional property not found
            $BindingPasswordHash = $null
        } else {
            $BindingPasswordHash = $JsonParameters.PSobject.Properties["bindingPasswordHash"].value
        }

        $PSO = [PSCustomObject]@{
            "url" = ${Url}
            "domain" = ${Domain}
            "useSSL" = ${UseSSL}
            "bindingUsername" = ${BindingUsername}
            "bindingPassword" = ${BindingPassword}
            "requiredGroup" = ${RequiredGroup}
            "requiredGroupDN" = ${RequiredGroupDN}
            "searchMemberGroups" = ${SearchMemberGroups}
            "bindingPasswordHash" = ${BindingPasswordHash}
        }

        return $PSO
    }

}

