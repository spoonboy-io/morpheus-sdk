#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Instance
No description available.
.PARAMETER NetworkInterfaces
No description available.
.PARAMETER Volumes
No description available.
.PARAMETER StorageControllers
No description available.
.PARAMETER ZoneId
No description available.
.PARAMETER Config
No description available.
.PARAMETER Plan
No description available.
.OUTPUTS

ImageBuildConfig<PSCustomObject>
#>

function Initialize-ImageBuildConfig {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Instance},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${NetworkInterfaces},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Volumes},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${StorageControllers},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${ZoneId},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Config},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Plan}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ImageBuildConfig' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "instance" = ${Instance}
            "networkInterfaces" = ${NetworkInterfaces}
            "volumes" = ${Volumes}
            "storageControllers" = ${StorageControllers}
            "zoneId" = ${ZoneId}
            "config" = ${Config}
            "plan" = ${Plan}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ImageBuildConfig<PSCustomObject>

.DESCRIPTION

Convert from JSON to ImageBuildConfig<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ImageBuildConfig<PSCustomObject>
#>
function ConvertFrom-JsonToImageBuildConfig {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ImageBuildConfig' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ImageBuildConfig
        $AllProperties = ("instance", "networkInterfaces", "volumes", "storageControllers", "zoneId", "config", "plan")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "instance"))) { #optional property not found
            $Instance = $null
        } else {
            $Instance = $JsonParameters.PSobject.Properties["instance"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "networkInterfaces"))) { #optional property not found
            $NetworkInterfaces = $null
        } else {
            $NetworkInterfaces = $JsonParameters.PSobject.Properties["networkInterfaces"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "volumes"))) { #optional property not found
            $Volumes = $null
        } else {
            $Volumes = $JsonParameters.PSobject.Properties["volumes"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "storageControllers"))) { #optional property not found
            $StorageControllers = $null
        } else {
            $StorageControllers = $JsonParameters.PSobject.Properties["storageControllers"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "zoneId"))) { #optional property not found
            $ZoneId = $null
        } else {
            $ZoneId = $JsonParameters.PSobject.Properties["zoneId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "config"))) { #optional property not found
            $Config = $null
        } else {
            $Config = $JsonParameters.PSobject.Properties["config"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "plan"))) { #optional property not found
            $Plan = $null
        } else {
            $Plan = $JsonParameters.PSobject.Properties["plan"].value
        }

        $PSO = [PSCustomObject]@{
            "instance" = ${Instance}
            "networkInterfaces" = ${NetworkInterfaces}
            "volumes" = ${Volumes}
            "storageControllers" = ${StorageControllers}
            "zoneId" = ${ZoneId}
            "config" = ${Config}
            "plan" = ${Plan}
        }

        return $PSO
    }

}

