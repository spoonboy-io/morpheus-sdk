#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER AvgHealth
No description available.
.PARAMETER AvgResponseTime
No description available.
.PARAMETER WarningApps
No description available.
.PARAMETER WarningChecks
No description available.
.PARAMETER FailApps
No description available.
.PARAMETER TotalApps
No description available.
.PARAMETER FailChecks
No description available.
.PARAMETER SuccessApps
No description available.
.PARAMETER MutedApps
No description available.
.PARAMETER SuccessChecks
No description available.
.PARAMETER TotalChecks
No description available.
.PARAMETER MutedChecks
No description available.
.PARAMETER ResponseTimes
No description available.
.PARAMETER AllSuccess
No description available.
.PARAMETER OpenIncidents
No description available.
.OUTPUTS

DashboardMonitoring<PSCustomObject>
#>

function Initialize-DashboardMonitoring {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${AvgHealth},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${AvgResponseTime},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${WarningApps},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${WarningChecks},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${FailApps},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${TotalApps},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${FailChecks},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${SuccessApps},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${MutedApps},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${SuccessChecks},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${TotalChecks},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${MutedChecks},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [Decimal[]]
        ${ResponseTimes},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${AllSuccess},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${OpenIncidents}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => DashboardMonitoring' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "avgHealth" = ${AvgHealth}
            "avgResponseTime" = ${AvgResponseTime}
            "warningApps" = ${WarningApps}
            "warningChecks" = ${WarningChecks}
            "failApps" = ${FailApps}
            "totalApps" = ${TotalApps}
            "failChecks" = ${FailChecks}
            "successApps" = ${SuccessApps}
            "mutedApps" = ${MutedApps}
            "successChecks" = ${SuccessChecks}
            "totalChecks" = ${TotalChecks}
            "mutedChecks" = ${MutedChecks}
            "responseTimes" = ${ResponseTimes}
            "allSuccess" = ${AllSuccess}
            "openIncidents" = ${OpenIncidents}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to DashboardMonitoring<PSCustomObject>

.DESCRIPTION

Convert from JSON to DashboardMonitoring<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

DashboardMonitoring<PSCustomObject>
#>
function ConvertFrom-JsonToDashboardMonitoring {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => DashboardMonitoring' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in DashboardMonitoring
        $AllProperties = ("avgHealth", "avgResponseTime", "warningApps", "warningChecks", "failApps", "totalApps", "failChecks", "successApps", "mutedApps", "successChecks", "totalChecks", "mutedChecks", "responseTimes", "allSuccess", "openIncidents")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "avgHealth"))) { #optional property not found
            $AvgHealth = $null
        } else {
            $AvgHealth = $JsonParameters.PSobject.Properties["avgHealth"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "avgResponseTime"))) { #optional property not found
            $AvgResponseTime = $null
        } else {
            $AvgResponseTime = $JsonParameters.PSobject.Properties["avgResponseTime"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "warningApps"))) { #optional property not found
            $WarningApps = $null
        } else {
            $WarningApps = $JsonParameters.PSobject.Properties["warningApps"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "warningChecks"))) { #optional property not found
            $WarningChecks = $null
        } else {
            $WarningChecks = $JsonParameters.PSobject.Properties["warningChecks"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "failApps"))) { #optional property not found
            $FailApps = $null
        } else {
            $FailApps = $JsonParameters.PSobject.Properties["failApps"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "totalApps"))) { #optional property not found
            $TotalApps = $null
        } else {
            $TotalApps = $JsonParameters.PSobject.Properties["totalApps"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "failChecks"))) { #optional property not found
            $FailChecks = $null
        } else {
            $FailChecks = $JsonParameters.PSobject.Properties["failChecks"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "successApps"))) { #optional property not found
            $SuccessApps = $null
        } else {
            $SuccessApps = $JsonParameters.PSobject.Properties["successApps"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "mutedApps"))) { #optional property not found
            $MutedApps = $null
        } else {
            $MutedApps = $JsonParameters.PSobject.Properties["mutedApps"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "successChecks"))) { #optional property not found
            $SuccessChecks = $null
        } else {
            $SuccessChecks = $JsonParameters.PSobject.Properties["successChecks"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "totalChecks"))) { #optional property not found
            $TotalChecks = $null
        } else {
            $TotalChecks = $JsonParameters.PSobject.Properties["totalChecks"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "mutedChecks"))) { #optional property not found
            $MutedChecks = $null
        } else {
            $MutedChecks = $JsonParameters.PSobject.Properties["mutedChecks"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "responseTimes"))) { #optional property not found
            $ResponseTimes = $null
        } else {
            $ResponseTimes = $JsonParameters.PSobject.Properties["responseTimes"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "allSuccess"))) { #optional property not found
            $AllSuccess = $null
        } else {
            $AllSuccess = $JsonParameters.PSobject.Properties["allSuccess"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "openIncidents"))) { #optional property not found
            $OpenIncidents = $null
        } else {
            $OpenIncidents = $JsonParameters.PSobject.Properties["openIncidents"].value
        }

        $PSO = [PSCustomObject]@{
            "avgHealth" = ${AvgHealth}
            "avgResponseTime" = ${AvgResponseTime}
            "warningApps" = ${WarningApps}
            "warningChecks" = ${WarningChecks}
            "failApps" = ${FailApps}
            "totalApps" = ${TotalApps}
            "failChecks" = ${FailChecks}
            "successApps" = ${SuccessApps}
            "mutedApps" = ${MutedApps}
            "successChecks" = ${SuccessChecks}
            "totalChecks" = ${TotalChecks}
            "mutedChecks" = ${MutedChecks}
            "responseTimes" = ${ResponseTimes}
            "allSuccess" = ${AllSuccess}
            "openIncidents" = ${OpenIncidents}
        }

        return $PSO
    }

}

