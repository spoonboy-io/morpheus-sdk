#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Object containing server configuration parameters

.PARAMETER SshUsername
SSH username to use when provisioning
.PARAMETER SshPassword
SSH password to use, if not specified the account public key can be used
.PARAMETER ServerOs
No description available.
.PARAMETER Plan
No description available.
.PARAMETER Account
No description available.
.PARAMETER ProvisionSiteId
Specific group to assign the server
.PARAMETER Tags
Metadata tags, Array of objects having a name and value, this adds or updates the specified tags and removes any tags not specified.
.PARAMETER Config
No description available.
.OUTPUTS

ApiServersIdMakeManagedServer<PSCustomObject>
#>

function Initialize-ApiServersIdMakeManagedServer {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SshUsername},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SshPassword},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${ServerOs},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Plan},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Account},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${ProvisionSiteId},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Tags},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Config}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ApiServersIdMakeManagedServer' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "sshUsername" = ${SshUsername}
            "sshPassword" = ${SshPassword}
            "serverOs" = ${ServerOs}
            "plan" = ${Plan}
            "account" = ${Account}
            "provisionSiteId" = ${ProvisionSiteId}
            "tags" = ${Tags}
            "config" = ${Config}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ApiServersIdMakeManagedServer<PSCustomObject>

.DESCRIPTION

Convert from JSON to ApiServersIdMakeManagedServer<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ApiServersIdMakeManagedServer<PSCustomObject>
#>
function ConvertFrom-JsonToApiServersIdMakeManagedServer {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ApiServersIdMakeManagedServer' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ApiServersIdMakeManagedServer
        $AllProperties = ("sshUsername", "sshPassword", "serverOs", "plan", "account", "provisionSiteId", "tags", "config")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sshUsername"))) { #optional property not found
            $SshUsername = $null
        } else {
            $SshUsername = $JsonParameters.PSobject.Properties["sshUsername"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sshPassword"))) { #optional property not found
            $SshPassword = $null
        } else {
            $SshPassword = $JsonParameters.PSobject.Properties["sshPassword"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "serverOs"))) { #optional property not found
            $ServerOs = $null
        } else {
            $ServerOs = $JsonParameters.PSobject.Properties["serverOs"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "plan"))) { #optional property not found
            $Plan = $null
        } else {
            $Plan = $JsonParameters.PSobject.Properties["plan"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "account"))) { #optional property not found
            $Account = $null
        } else {
            $Account = $JsonParameters.PSobject.Properties["account"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "provisionSiteId"))) { #optional property not found
            $ProvisionSiteId = $null
        } else {
            $ProvisionSiteId = $JsonParameters.PSobject.Properties["provisionSiteId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tags"))) { #optional property not found
            $Tags = $null
        } else {
            $Tags = $JsonParameters.PSobject.Properties["tags"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "config"))) { #optional property not found
            $Config = $null
        } else {
            $Config = $JsonParameters.PSobject.Properties["config"].value
        }

        $PSO = [PSCustomObject]@{
            "sshUsername" = ${SshUsername}
            "sshPassword" = ${SshPassword}
            "serverOs" = ${ServerOs}
            "plan" = ${Plan}
            "account" = ${Account}
            "provisionSiteId" = ${ProvisionSiteId}
            "tags" = ${Tags}
            "config" = ${Config}
        }

        return $PSO
    }

}

