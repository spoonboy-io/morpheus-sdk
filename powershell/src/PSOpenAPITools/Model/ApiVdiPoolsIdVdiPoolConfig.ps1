#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

This can be passed in place of `instanceConfig`, but will not preserve the config property order.

.PARAMETER Name
Name of instance
.PARAMETER Group
No description available.
.PARAMETER Cloud
No description available.
.PARAMETER Type
No description available.
.PARAMETER Layout
No description available.
.PARAMETER Plan
No description available.
.OUTPUTS

ApiVdiPoolsIdVdiPoolConfig<PSCustomObject>
#>

function Initialize-ApiVdiPoolsIdVdiPoolConfig {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Group},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Cloud},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Type},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Layout},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Plan}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ApiVdiPoolsIdVdiPoolConfig' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$Name) {
            throw "invalid value for 'Name', 'Name' cannot be null."
        }

        if (!$Group) {
            throw "invalid value for 'Group', 'Group' cannot be null."
        }

        if (!$Cloud) {
            throw "invalid value for 'Cloud', 'Cloud' cannot be null."
        }

        if (!$Type) {
            throw "invalid value for 'Type', 'Type' cannot be null."
        }

        if (!$Layout) {
            throw "invalid value for 'Layout', 'Layout' cannot be null."
        }

        if (!$Plan) {
            throw "invalid value for 'Plan', 'Plan' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "group" = ${Group}
            "cloud" = ${Cloud}
            "type" = ${Type}
            "layout" = ${Layout}
            "plan" = ${Plan}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ApiVdiPoolsIdVdiPoolConfig<PSCustomObject>

.DESCRIPTION

Convert from JSON to ApiVdiPoolsIdVdiPoolConfig<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ApiVdiPoolsIdVdiPoolConfig<PSCustomObject>
#>
function ConvertFrom-JsonToApiVdiPoolsIdVdiPoolConfig {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ApiVdiPoolsIdVdiPoolConfig' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ApiVdiPoolsIdVdiPoolConfig
        $AllProperties = ("name", "group", "cloud", "type", "layout", "plan")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property `name` missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) {
            throw "Error! JSON cannot be serialized due to the required property `name` missing."
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "group"))) {
            throw "Error! JSON cannot be serialized due to the required property `group` missing."
        } else {
            $Group = $JsonParameters.PSobject.Properties["group"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cloud"))) {
            throw "Error! JSON cannot be serialized due to the required property `cloud` missing."
        } else {
            $Cloud = $JsonParameters.PSobject.Properties["cloud"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) {
            throw "Error! JSON cannot be serialized due to the required property `type` missing."
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "layout"))) {
            throw "Error! JSON cannot be serialized due to the required property `layout` missing."
        } else {
            $Layout = $JsonParameters.PSobject.Properties["layout"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "plan"))) {
            throw "Error! JSON cannot be serialized due to the required property `plan` missing."
        } else {
            $Plan = $JsonParameters.PSobject.Properties["plan"].value
        }

        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "group" = ${Group}
            "cloud" = ${Cloud}
            "type" = ${Type}
            "layout" = ${Layout}
            "plan" = ${Plan}
        }

        return $PSO
    }

}

