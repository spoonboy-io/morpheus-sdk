#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER TotalSavings
No description available.
.PARAMETER CurrencyCode
No description available.
.PARAMETER TotalSavingsPercent
No description available.
.PARAMETER Term
No description available.
.PARAMETER PaymentOption
No description available.
.PARAMETER Service
No description available.
.PARAMETER OnDemandCount
No description available.
.PARAMETER OnDemandCost
No description available.
.PARAMETER ReservedCount
No description available.
.PARAMETER ReservedCost
No description available.
.PARAMETER RecommendedCount
No description available.
.PARAMETER RecommendedCost
No description available.
.OUTPUTS

GuidanceAzureReservationsConfigServicesAzureVmsPaymentOptionsValueTermOptionsValueSummary<PSCustomObject>
#>

function Initialize-GuidanceAzureReservationsConfigServicesAzureVmsPaymentOptionsValueTermOptionsValueSummary {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${TotalSavings},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CurrencyCode},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${TotalSavingsPercent},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Term},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PaymentOption},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Service},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${OnDemandCount},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${OnDemandCost},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${ReservedCount},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${ReservedCost},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${RecommendedCount},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${RecommendedCost}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => GuidanceAzureReservationsConfigServicesAzureVmsPaymentOptionsValueTermOptionsValueSummary' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "totalSavings" = ${TotalSavings}
            "currencyCode" = ${CurrencyCode}
            "totalSavingsPercent" = ${TotalSavingsPercent}
            "term" = ${Term}
            "paymentOption" = ${PaymentOption}
            "service" = ${Service}
            "onDemandCount" = ${OnDemandCount}
            "onDemandCost" = ${OnDemandCost}
            "reservedCount" = ${ReservedCount}
            "reservedCost" = ${ReservedCost}
            "recommendedCount" = ${RecommendedCount}
            "recommendedCost" = ${RecommendedCost}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to GuidanceAzureReservationsConfigServicesAzureVmsPaymentOptionsValueTermOptionsValueSummary<PSCustomObject>

.DESCRIPTION

Convert from JSON to GuidanceAzureReservationsConfigServicesAzureVmsPaymentOptionsValueTermOptionsValueSummary<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

GuidanceAzureReservationsConfigServicesAzureVmsPaymentOptionsValueTermOptionsValueSummary<PSCustomObject>
#>
function ConvertFrom-JsonToGuidanceAzureReservationsConfigServicesAzureVmsPaymentOptionsValueTermOptionsValueSummary {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => GuidanceAzureReservationsConfigServicesAzureVmsPaymentOptionsValueTermOptionsValueSummary' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in GuidanceAzureReservationsConfigServicesAzureVmsPaymentOptionsValueTermOptionsValueSummary
        $AllProperties = ("totalSavings", "currencyCode", "totalSavingsPercent", "term", "paymentOption", "service", "onDemandCount", "onDemandCost", "reservedCount", "reservedCost", "recommendedCount", "recommendedCost")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "totalSavings"))) { #optional property not found
            $TotalSavings = $null
        } else {
            $TotalSavings = $JsonParameters.PSobject.Properties["totalSavings"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "currencyCode"))) { #optional property not found
            $CurrencyCode = $null
        } else {
            $CurrencyCode = $JsonParameters.PSobject.Properties["currencyCode"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "totalSavingsPercent"))) { #optional property not found
            $TotalSavingsPercent = $null
        } else {
            $TotalSavingsPercent = $JsonParameters.PSobject.Properties["totalSavingsPercent"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "term"))) { #optional property not found
            $Term = $null
        } else {
            $Term = $JsonParameters.PSobject.Properties["term"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "paymentOption"))) { #optional property not found
            $PaymentOption = $null
        } else {
            $PaymentOption = $JsonParameters.PSobject.Properties["paymentOption"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "service"))) { #optional property not found
            $Service = $null
        } else {
            $Service = $JsonParameters.PSobject.Properties["service"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "onDemandCount"))) { #optional property not found
            $OnDemandCount = $null
        } else {
            $OnDemandCount = $JsonParameters.PSobject.Properties["onDemandCount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "onDemandCost"))) { #optional property not found
            $OnDemandCost = $null
        } else {
            $OnDemandCost = $JsonParameters.PSobject.Properties["onDemandCost"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "reservedCount"))) { #optional property not found
            $ReservedCount = $null
        } else {
            $ReservedCount = $JsonParameters.PSobject.Properties["reservedCount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "reservedCost"))) { #optional property not found
            $ReservedCost = $null
        } else {
            $ReservedCost = $JsonParameters.PSobject.Properties["reservedCost"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "recommendedCount"))) { #optional property not found
            $RecommendedCount = $null
        } else {
            $RecommendedCount = $JsonParameters.PSobject.Properties["recommendedCount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "recommendedCost"))) { #optional property not found
            $RecommendedCost = $null
        } else {
            $RecommendedCost = $JsonParameters.PSobject.Properties["recommendedCost"].value
        }

        $PSO = [PSCustomObject]@{
            "totalSavings" = ${TotalSavings}
            "currencyCode" = ${CurrencyCode}
            "totalSavingsPercent" = ${TotalSavingsPercent}
            "term" = ${Term}
            "paymentOption" = ${PaymentOption}
            "service" = ${Service}
            "onDemandCount" = ${OnDemandCount}
            "onDemandCost" = ${OnDemandCost}
            "reservedCount" = ${ReservedCount}
            "reservedCost" = ${ReservedCost}
            "recommendedCount" = ${RecommendedCount}
            "recommendedCost" = ${RecommendedCost}
        }

        return $PSO
    }

}

