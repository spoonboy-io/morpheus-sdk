#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
No description available.
.PARAMETER ExternalId
No description available.
.PARAMETER Cloud
No description available.
.PARAMETER Server
No description available.
.PARAMETER IpStatus
No description available.
.PARAMETER IpAddress
IP Address
.PARAMETER IpRange
No description available.
.PARAMETER PtrId
No description available.
.PARAMETER NetworkDomain
No description available.
.PARAMETER CreatedBy
No description available.
.PARAMETER DateCreated
No description available.
.PARAMETER LastUpdated
No description available.
.OUTPUTS

GetAllNetworkFloatingIps200ResponseAllOfNetworkFloatingIpsInner<PSCustomObject>
#>

function Initialize-GetAllNetworkFloatingIps200ResponseAllOfNetworkFloatingIpsInner {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ExternalId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Cloud},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Server},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("assigned", "free", "pending")]
        [String]
        ${IpStatus},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${IpAddress},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${IpRange},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PtrId},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${NetworkDomain},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${CreatedBy},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${DateCreated},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${LastUpdated}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => GetAllNetworkFloatingIps200ResponseAllOfNetworkFloatingIpsInner' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "externalId" = ${ExternalId}
            "cloud" = ${Cloud}
            "server" = ${Server}
            "ipStatus" = ${IpStatus}
            "ipAddress" = ${IpAddress}
            "ipRange" = ${IpRange}
            "ptrId" = ${PtrId}
            "networkDomain" = ${NetworkDomain}
            "createdBy" = ${CreatedBy}
            "dateCreated" = ${DateCreated}
            "lastUpdated" = ${LastUpdated}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to GetAllNetworkFloatingIps200ResponseAllOfNetworkFloatingIpsInner<PSCustomObject>

.DESCRIPTION

Convert from JSON to GetAllNetworkFloatingIps200ResponseAllOfNetworkFloatingIpsInner<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

GetAllNetworkFloatingIps200ResponseAllOfNetworkFloatingIpsInner<PSCustomObject>
#>
function ConvertFrom-JsonToGetAllNetworkFloatingIps200ResponseAllOfNetworkFloatingIpsInner {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => GetAllNetworkFloatingIps200ResponseAllOfNetworkFloatingIpsInner' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in GetAllNetworkFloatingIps200ResponseAllOfNetworkFloatingIpsInner
        $AllProperties = ("id", "externalId", "cloud", "server", "ipStatus", "ipAddress", "ipRange", "ptrId", "networkDomain", "createdBy", "dateCreated", "lastUpdated")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "externalId"))) { #optional property not found
            $ExternalId = $null
        } else {
            $ExternalId = $JsonParameters.PSobject.Properties["externalId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cloud"))) { #optional property not found
            $Cloud = $null
        } else {
            $Cloud = $JsonParameters.PSobject.Properties["cloud"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "server"))) { #optional property not found
            $Server = $null
        } else {
            $Server = $JsonParameters.PSobject.Properties["server"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ipStatus"))) { #optional property not found
            $IpStatus = $null
        } else {
            $IpStatus = $JsonParameters.PSobject.Properties["ipStatus"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ipAddress"))) { #optional property not found
            $IpAddress = $null
        } else {
            $IpAddress = $JsonParameters.PSobject.Properties["ipAddress"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ipRange"))) { #optional property not found
            $IpRange = $null
        } else {
            $IpRange = $JsonParameters.PSobject.Properties["ipRange"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ptrId"))) { #optional property not found
            $PtrId = $null
        } else {
            $PtrId = $JsonParameters.PSobject.Properties["ptrId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "networkDomain"))) { #optional property not found
            $NetworkDomain = $null
        } else {
            $NetworkDomain = $JsonParameters.PSobject.Properties["networkDomain"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "createdBy"))) { #optional property not found
            $CreatedBy = $null
        } else {
            $CreatedBy = $JsonParameters.PSobject.Properties["createdBy"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dateCreated"))) { #optional property not found
            $DateCreated = $null
        } else {
            $DateCreated = $JsonParameters.PSobject.Properties["dateCreated"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lastUpdated"))) { #optional property not found
            $LastUpdated = $null
        } else {
            $LastUpdated = $JsonParameters.PSobject.Properties["lastUpdated"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "externalId" = ${ExternalId}
            "cloud" = ${Cloud}
            "server" = ${Server}
            "ipStatus" = ${IpStatus}
            "ipAddress" = ${IpAddress}
            "ipRange" = ${IpRange}
            "ptrId" = ${PtrId}
            "networkDomain" = ${NetworkDomain}
            "createdBy" = ${CreatedBy}
            "dateCreated" = ${DateCreated}
            "lastUpdated" = ${LastUpdated}
        }

        return $PSO
    }

}

