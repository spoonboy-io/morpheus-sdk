#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Socket check confirms a certain TCP port is up and responding in your environment.  It can be configured do an initial send upon connect and compare and expected response of the service. 

.PARAMETER Name
Unique name scoped to your account for the check
.PARAMETER Description
Optional description field
.PARAMETER CheckType
No description available.
.PARAMETER CheckInterval
Number of seconds you want between check executions (minimum value is 60, depending on your subscription plan)
.PARAMETER InUptime
Used to determine if check should affect account wide availability calculations
.PARAMETER Active
Used to determine if check should be scheduled to execute
.PARAMETER Severity
Severity level threshold for sending notifications.
.PARAMETER Config
No description available.
.OUTPUTS

CheckSocket<PSCustomObject>
#>

function Initialize-CheckSocket {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${CheckType},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${CheckInterval} = 300,
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${InUptime} = $true,
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Active} = $true,
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("info", "warning", "critical")]
        [String]
        ${Severity} = "critical",
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Config}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => CheckSocket' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "description" = ${Description}
            "checkType" = ${CheckType}
            "checkInterval" = ${CheckInterval}
            "inUptime" = ${InUptime}
            "active" = ${Active}
            "severity" = ${Severity}
            "config" = ${Config}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to CheckSocket<PSCustomObject>

.DESCRIPTION

Convert from JSON to CheckSocket<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

CheckSocket<PSCustomObject>
#>
function ConvertFrom-JsonToCheckSocket {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => CheckSocket' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in CheckSocket
        $AllProperties = ("name", "description", "checkType", "checkInterval", "inUptime", "active", "severity", "config")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "checkType"))) { #optional property not found
            $CheckType = $null
        } else {
            $CheckType = $JsonParameters.PSobject.Properties["checkType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "checkInterval"))) { #optional property not found
            $CheckInterval = $null
        } else {
            $CheckInterval = $JsonParameters.PSobject.Properties["checkInterval"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "inUptime"))) { #optional property not found
            $InUptime = $null
        } else {
            $InUptime = $JsonParameters.PSobject.Properties["inUptime"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "active"))) { #optional property not found
            $Active = $null
        } else {
            $Active = $JsonParameters.PSobject.Properties["active"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "severity"))) { #optional property not found
            $Severity = $null
        } else {
            $Severity = $JsonParameters.PSobject.Properties["severity"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "config"))) { #optional property not found
            $Config = $null
        } else {
            $Config = $JsonParameters.PSobject.Properties["config"].value
        }

        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "description" = ${Description}
            "checkType" = ${CheckType}
            "checkInterval" = ${CheckInterval}
            "inUptime" = ${InUptime}
            "active" = ${Active}
            "severity" = ${Severity}
            "config" = ${Config}
        }

        return $PSO
    }

}

