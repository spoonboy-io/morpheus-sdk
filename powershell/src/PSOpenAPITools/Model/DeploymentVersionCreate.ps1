#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Version
Version number (userVersion), a unique version identifier for the deployment version.
.PARAMETER UserVersion
Alias for version
.PARAMETER DeployType
Deploy Type, eg. file, git, fetch
.PARAMETER GitUrl
No description available.
.PARAMETER GitRef
No description available.
.PARAMETER FetchUrl
No description available.
.OUTPUTS

DeploymentVersionCreate<PSCustomObject>
#>

function Initialize-DeploymentVersionCreate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Version},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${UserVersion},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("file", "git", "fetch")]
        [String]
        ${DeployType},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${GitUrl},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${GitRef},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FetchUrl}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => DeploymentVersionCreate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "version" = ${Version}
            "userVersion" = ${UserVersion}
            "deployType" = ${DeployType}
            "gitUrl" = ${GitUrl}
            "gitRef" = ${GitRef}
            "fetchUrl" = ${FetchUrl}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to DeploymentVersionCreate<PSCustomObject>

.DESCRIPTION

Convert from JSON to DeploymentVersionCreate<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

DeploymentVersionCreate<PSCustomObject>
#>
function ConvertFrom-JsonToDeploymentVersionCreate {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => DeploymentVersionCreate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in DeploymentVersionCreate
        $AllProperties = ("version", "userVersion", "deployType", "gitUrl", "gitRef", "fetchUrl")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "version"))) { #optional property not found
            $Version = $null
        } else {
            $Version = $JsonParameters.PSobject.Properties["version"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "userVersion"))) { #optional property not found
            $UserVersion = $null
        } else {
            $UserVersion = $JsonParameters.PSobject.Properties["userVersion"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "deployType"))) { #optional property not found
            $DeployType = $null
        } else {
            $DeployType = $JsonParameters.PSobject.Properties["deployType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "gitUrl"))) { #optional property not found
            $GitUrl = $null
        } else {
            $GitUrl = $JsonParameters.PSobject.Properties["gitUrl"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "gitRef"))) { #optional property not found
            $GitRef = $null
        } else {
            $GitRef = $JsonParameters.PSobject.Properties["gitRef"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "fetchUrl"))) { #optional property not found
            $FetchUrl = $null
        } else {
            $FetchUrl = $JsonParameters.PSobject.Properties["fetchUrl"].value
        }

        $PSO = [PSCustomObject]@{
            "version" = ${Version}
            "userVersion" = ${UserVersion}
            "deployType" = ${DeployType}
            "gitUrl" = ${GitUrl}
            "gitRef" = ${GitRef}
            "fetchUrl" = ${FetchUrl}
        }

        return $PSO
    }

}

