#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.2.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER CompanyName
Company Name for new Morpheus Hub organization
.PARAMETER FirstName
First Name for new Morpheus Hub user
.PARAMETER LastName
Last Name for new Morpheus Hub user
.PARAMETER Email
Email for new Morpheus Hub user
.PARAMETER Password
Password for new Morpheus Hub user
.PARAMETER JobTitle
Job title of new Morpheus Hub user
.OUTPUTS

HubRegisterObjectHub<PSCustomObject>
#>

function Initialize-HubRegisterObjectHub {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CompanyName},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FirstName},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${LastName},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Email},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Password},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${JobTitle}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => HubRegisterObjectHub' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$CompanyName) {
            throw "invalid value for 'CompanyName', 'CompanyName' cannot be null."
        }

        if (!$FirstName) {
            throw "invalid value for 'FirstName', 'FirstName' cannot be null."
        }

        if (!$LastName) {
            throw "invalid value for 'LastName', 'LastName' cannot be null."
        }

        if (!$Email) {
            throw "invalid value for 'Email', 'Email' cannot be null."
        }

        if (!$Password) {
            throw "invalid value for 'Password', 'Password' cannot be null."
        }

        if (!$JobTitle) {
            throw "invalid value for 'JobTitle', 'JobTitle' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "companyName" = ${CompanyName}
            "firstName" = ${FirstName}
            "lastName" = ${LastName}
            "email" = ${Email}
            "password" = ${Password}
            "jobTitle" = ${JobTitle}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to HubRegisterObjectHub<PSCustomObject>

.DESCRIPTION

Convert from JSON to HubRegisterObjectHub<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

HubRegisterObjectHub<PSCustomObject>
#>
function ConvertFrom-JsonToHubRegisterObjectHub {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => HubRegisterObjectHub' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in HubRegisterObjectHub
        $AllProperties = ("companyName", "firstName", "lastName", "email", "password", "jobTitle")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property `companyName` missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "companyName"))) {
            throw "Error! JSON cannot be serialized due to the required property `companyName` missing."
        } else {
            $CompanyName = $JsonParameters.PSobject.Properties["companyName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "firstName"))) {
            throw "Error! JSON cannot be serialized due to the required property `firstName` missing."
        } else {
            $FirstName = $JsonParameters.PSobject.Properties["firstName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lastName"))) {
            throw "Error! JSON cannot be serialized due to the required property `lastName` missing."
        } else {
            $LastName = $JsonParameters.PSobject.Properties["lastName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "email"))) {
            throw "Error! JSON cannot be serialized due to the required property `email` missing."
        } else {
            $Email = $JsonParameters.PSobject.Properties["email"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "password"))) {
            throw "Error! JSON cannot be serialized due to the required property `password` missing."
        } else {
            $Password = $JsonParameters.PSobject.Properties["password"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "jobTitle"))) {
            throw "Error! JSON cannot be serialized due to the required property `jobTitle` missing."
        } else {
            $JobTitle = $JsonParameters.PSobject.Properties["jobTitle"].value
        }

        $PSO = [PSCustomObject]@{
            "companyName" = ${CompanyName}
            "firstName" = ${FirstName}
            "lastName" = ${LastName}
            "email" = ${Email}
            "password" = ${Password}
            "jobTitle" = ${JobTitle}
        }

        return $PSO
    }

}

