#
# Morpheus API
# Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
# Version: 6.1.1
# Contact: dev@morpheusdata.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

This endpoint will retrieve a specific account by id if the user has permission to access it

.DESCRIPTION

No description available.

.PARAMETER Id
Morpheus ID of the Object being referenced

.PARAMETER StartDate
Filter by startDate greater than or equal to a specified date

.PARAMETER EndDate
Filter by endDate less than or equal to a specified date

.PARAMETER IncludeUsages
Optional ability to suppress the usage records

.PARAMETER MaxUsages
Optional ability to limit the usages returned

.PARAMETER OffsetUsages
Optional ability to offset the usages returned, for use with maxUsages to paginate

.PARAMETER IncludeComputeServers
Optional ability to exclude compute servers

.PARAMETER IncludeInstances
Optional ability to exclude instances

.PARAMETER IncludeDiscoveredServers
Optional ability to exclude discovered servers

.PARAMETER IncludeLoadBalancers
Optional ability to exclude load balancers

.PARAMETER IncludeVirtualImages
Optional ability to exclude virtual images

.PARAMETER IncludeSnapshots
Optional ability to exclude snapshots

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

ListBillingAccount200Response
#>
function Get-BillingAccount {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int64]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${StartDate},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${EndDate},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IncludeUsages},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int64]]
        ${MaxUsages},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int64]]
        ${OffsetUsages},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IncludeComputeServers},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IncludeInstances},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IncludeDiscoveredServers},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IncludeLoadBalancers},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IncludeVirtualImages},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IncludeSnapshots},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Get-BillingAccount' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/billing/account/{id}'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling getBillingAccount."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($StartDate) {
            $LocalVarQueryParameters['startDate'] = $StartDate
        }

        if ($EndDate) {
            $LocalVarQueryParameters['endDate'] = $EndDate
        }

        if ($IncludeUsages) {
            $LocalVarQueryParameters['includeUsages'] = $IncludeUsages
        }

        if ($MaxUsages) {
            $LocalVarQueryParameters['maxUsages'] = $MaxUsages
        }

        if ($OffsetUsages) {
            $LocalVarQueryParameters['offsetUsages'] = $OffsetUsages
        }

        if ($IncludeComputeServers) {
            $LocalVarQueryParameters['includeComputeServers'] = $IncludeComputeServers
        }

        if ($IncludeInstances) {
            $LocalVarQueryParameters['includeInstances'] = $IncludeInstances
        }

        if ($IncludeDiscoveredServers) {
            $LocalVarQueryParameters['includeDiscoveredServers'] = $IncludeDiscoveredServers
        }

        if ($IncludeLoadBalancers) {
            $LocalVarQueryParameters['includeLoadBalancers'] = $IncludeLoadBalancers
        }

        if ($IncludeVirtualImages) {
            $LocalVarQueryParameters['includeVirtualImages'] = $IncludeVirtualImages
        }

        if ($IncludeSnapshots) {
            $LocalVarQueryParameters['includeSnapshots'] = $IncludeSnapshots
        }

        if ($Configuration["AccessToken"]) {
            $LocalVarHeaderParameters['Authorization'] = "Bearer " + $Configuration["AccessToken"]
            Write-Verbose ("Using Bearer authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "ListBillingAccount200Response" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieves billing information for an instance in the requestor's account. Use instanceUUID whenever possible.

.DESCRIPTION

No description available.

.PARAMETER Identifier
Morpheus UUID or ID of the Object being created or referenced

.PARAMETER StartDate
Filter by startDate greater than or equal to a specified date

.PARAMETER EndDate
Filter by endDate less than or equal to a specified date

.PARAMETER IncludeUsages
Optional ability to suppress the usage records

.PARAMETER MaxUsages
Optional ability to limit the usages returned

.PARAMETER OffsetUsages
Optional ability to offset the usages returned, for use with maxUsages to paginate

.PARAMETER IncludeTenants
Optional ability to include all subtenant billing information when calling from a master tenant user

.PARAMETER AccountId
Filter by Tenant ID. This is only available to master tenant users with permission to manage tenants and users.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

GetBillingInstancesIdentifier200Response
#>
function Get-BillingInstancesIdentifier {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Identifier},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${StartDate},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${EndDate},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IncludeUsages},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int64]]
        ${MaxUsages},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int64]]
        ${OffsetUsages},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IncludeTenants},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int64]]
        ${AccountId},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Get-BillingInstancesIdentifier' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/billing/instances/{identifier}'
        if (!$Identifier) {
            throw "Error! The required parameter `Identifier` missing when calling getBillingInstancesIdentifier."
        }
        $LocalVarUri = $LocalVarUri.replace('{identifier}', [System.Web.HTTPUtility]::UrlEncode($Identifier))

        if ($StartDate) {
            $LocalVarQueryParameters['startDate'] = $StartDate
        }

        if ($EndDate) {
            $LocalVarQueryParameters['endDate'] = $EndDate
        }

        if ($IncludeUsages) {
            $LocalVarQueryParameters['includeUsages'] = $IncludeUsages
        }

        if ($MaxUsages) {
            $LocalVarQueryParameters['maxUsages'] = $MaxUsages
        }

        if ($OffsetUsages) {
            $LocalVarQueryParameters['offsetUsages'] = $OffsetUsages
        }

        if ($IncludeTenants) {
            $LocalVarQueryParameters['includeTenants'] = $IncludeTenants
        }

        if ($AccountId) {
            $LocalVarQueryParameters['accountId'] = $AccountId
        }

        if ($Configuration["AccessToken"]) {
            $LocalVarHeaderParameters['Authorization'] = "Bearer " + $Configuration["AccessToken"]
            Write-Verbose ("Using Bearer authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "GetBillingInstancesIdentifier200Response" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieves billing information for a specific server (container host) in the requestor's account. Use refUUID whenever possible.

.DESCRIPTION

No description available.

.PARAMETER Identifier
Morpheus UUID or ID of the Object being created or referenced

.PARAMETER StartDate
Filter by startDate greater than or equal to a specified date

.PARAMETER EndDate
Filter by endDate less than or equal to a specified date

.PARAMETER IncludeUsages
Optional ability to suppress the usage records

.PARAMETER MaxUsages
Optional ability to limit the usages returned

.PARAMETER OffsetUsages
Optional ability to offset the usages returned, for use with maxUsages to paginate

.PARAMETER IncludeTenants
Optional ability to include all subtenant billing information when calling from a master tenant user

.PARAMETER AccountId
Filter by Tenant ID. This is only available to master tenant users with permission to manage tenants and users.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

GetBillingServersIdentifier200Response
#>
function Get-BillingServersIdentifier {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Identifier},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${StartDate},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${EndDate},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IncludeUsages},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int64]]
        ${MaxUsages},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int64]]
        ${OffsetUsages},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IncludeTenants},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int64]]
        ${AccountId},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Get-BillingServersIdentifier' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/billing/servers/{identifier}'
        if (!$Identifier) {
            throw "Error! The required parameter `Identifier` missing when calling getBillingServersIdentifier."
        }
        $LocalVarUri = $LocalVarUri.replace('{identifier}', [System.Web.HTTPUtility]::UrlEncode($Identifier))

        if ($StartDate) {
            $LocalVarQueryParameters['startDate'] = $StartDate
        }

        if ($EndDate) {
            $LocalVarQueryParameters['endDate'] = $EndDate
        }

        if ($IncludeUsages) {
            $LocalVarQueryParameters['includeUsages'] = $IncludeUsages
        }

        if ($MaxUsages) {
            $LocalVarQueryParameters['maxUsages'] = $MaxUsages
        }

        if ($OffsetUsages) {
            $LocalVarQueryParameters['offsetUsages'] = $OffsetUsages
        }

        if ($IncludeTenants) {
            $LocalVarQueryParameters['includeTenants'] = $IncludeTenants
        }

        if ($AccountId) {
            $LocalVarQueryParameters['accountId'] = $AccountId
        }

        if ($Configuration["AccessToken"]) {
            $LocalVarHeaderParameters['Authorization'] = "Bearer " + $Configuration["AccessToken"]
            Write-Verbose ("Using Bearer authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "GetBillingServersIdentifier200Response" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieves billing information for a specific zone in the requestor's account. Use zoneUUID whenever possible.

.DESCRIPTION

No description available.

.PARAMETER Identifier
Morpheus UUID or ID of the Object being created or referenced

.PARAMETER StartDate
Filter by startDate greater than or equal to a specified date

.PARAMETER EndDate
Filter by endDate less than or equal to a specified date

.PARAMETER IncludeUsages
Optional ability to suppress the usage records

.PARAMETER MaxUsages
Optional ability to limit the usages returned

.PARAMETER OffsetUsages
Optional ability to offset the usages returned, for use with maxUsages to paginate

.PARAMETER IncludeComputeServers
Optional ability to exclude compute servers

.PARAMETER IncludeInstances
Optional ability to exclude instances

.PARAMETER IncludeDiscoveredServers
Optional ability to exclude discovered servers

.PARAMETER IncludeLoadBalancers
Optional ability to exclude load balancers

.PARAMETER IncludeVirtualImages
Optional ability to exclude virtual images

.PARAMETER IncludeSnapshots
Optional ability to exclude snapshots

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

GetBillingZoneIdentifier200Response
#>
function Get-BillingZoneIdentifier {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Identifier},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${StartDate},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${EndDate},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IncludeUsages},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int64]]
        ${MaxUsages},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int64]]
        ${OffsetUsages},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IncludeComputeServers},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IncludeInstances},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IncludeDiscoveredServers},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IncludeLoadBalancers},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IncludeVirtualImages},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IncludeSnapshots},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Get-BillingZoneIdentifier' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/billing/zones/{identifier}'
        if (!$Identifier) {
            throw "Error! The required parameter `Identifier` missing when calling getBillingZoneIdentifier."
        }
        $LocalVarUri = $LocalVarUri.replace('{identifier}', [System.Web.HTTPUtility]::UrlEncode($Identifier))

        if ($StartDate) {
            $LocalVarQueryParameters['startDate'] = $StartDate
        }

        if ($EndDate) {
            $LocalVarQueryParameters['endDate'] = $EndDate
        }

        if ($IncludeUsages) {
            $LocalVarQueryParameters['includeUsages'] = $IncludeUsages
        }

        if ($MaxUsages) {
            $LocalVarQueryParameters['maxUsages'] = $MaxUsages
        }

        if ($OffsetUsages) {
            $LocalVarQueryParameters['offsetUsages'] = $OffsetUsages
        }

        if ($IncludeComputeServers) {
            $LocalVarQueryParameters['includeComputeServers'] = $IncludeComputeServers
        }

        if ($IncludeInstances) {
            $LocalVarQueryParameters['includeInstances'] = $IncludeInstances
        }

        if ($IncludeDiscoveredServers) {
            $LocalVarQueryParameters['includeDiscoveredServers'] = $IncludeDiscoveredServers
        }

        if ($IncludeLoadBalancers) {
            $LocalVarQueryParameters['includeLoadBalancers'] = $IncludeLoadBalancers
        }

        if ($IncludeVirtualImages) {
            $LocalVarQueryParameters['includeVirtualImages'] = $IncludeVirtualImages
        }

        if ($IncludeSnapshots) {
            $LocalVarQueryParameters['includeSnapshots'] = $IncludeSnapshots
        }

        if ($Configuration["AccessToken"]) {
            $LocalVarHeaderParameters['Authorization'] = "Bearer " + $Configuration["AccessToken"]
            Write-Verbose ("Using Bearer authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "GetBillingZoneIdentifier200Response" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieves billing information for the requesting user's account.

.DESCRIPTION

No description available.

.PARAMETER StartDate
Filter by startDate greater than or equal to a specified date

.PARAMETER EndDate
Filter by endDate less than or equal to a specified date

.PARAMETER IncludeUsages
Optional ability to suppress the usage records

.PARAMETER MaxUsages
Optional ability to limit the usages returned

.PARAMETER OffsetUsages
Optional ability to offset the usages returned, for use with maxUsages to paginate

.PARAMETER IncludeComputeServers
Optional ability to exclude compute servers

.PARAMETER IncludeInstances
Optional ability to exclude instances

.PARAMETER IncludeDiscoveredServers
Optional ability to exclude discovered servers

.PARAMETER IncludeLoadBalancers
Optional ability to exclude load balancers

.PARAMETER IncludeVirtualImages
Optional ability to exclude virtual images

.PARAMETER IncludeSnapshots
Optional ability to exclude snapshots

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

ListBillingAccount200Response
#>
function Invoke-ListBillingAccount {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${StartDate},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${EndDate},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IncludeUsages},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int64]]
        ${MaxUsages},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int64]]
        ${OffsetUsages},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IncludeComputeServers},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IncludeInstances},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IncludeDiscoveredServers},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IncludeLoadBalancers},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IncludeVirtualImages},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IncludeSnapshots},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ListBillingAccount' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/billing/account'

        if ($StartDate) {
            $LocalVarQueryParameters['startDate'] = $StartDate
        }

        if ($EndDate) {
            $LocalVarQueryParameters['endDate'] = $EndDate
        }

        if ($IncludeUsages) {
            $LocalVarQueryParameters['includeUsages'] = $IncludeUsages
        }

        if ($MaxUsages) {
            $LocalVarQueryParameters['maxUsages'] = $MaxUsages
        }

        if ($OffsetUsages) {
            $LocalVarQueryParameters['offsetUsages'] = $OffsetUsages
        }

        if ($IncludeComputeServers) {
            $LocalVarQueryParameters['includeComputeServers'] = $IncludeComputeServers
        }

        if ($IncludeInstances) {
            $LocalVarQueryParameters['includeInstances'] = $IncludeInstances
        }

        if ($IncludeDiscoveredServers) {
            $LocalVarQueryParameters['includeDiscoveredServers'] = $IncludeDiscoveredServers
        }

        if ($IncludeLoadBalancers) {
            $LocalVarQueryParameters['includeLoadBalancers'] = $IncludeLoadBalancers
        }

        if ($IncludeVirtualImages) {
            $LocalVarQueryParameters['includeVirtualImages'] = $IncludeVirtualImages
        }

        if ($IncludeSnapshots) {
            $LocalVarQueryParameters['includeSnapshots'] = $IncludeSnapshots
        }

        if ($Configuration["AccessToken"]) {
            $LocalVarHeaderParameters['Authorization'] = "Bearer " + $Configuration["AccessToken"]
            Write-Verbose ("Using Bearer authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "ListBillingAccount200Response" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieves billing information for all instances on the requestor's account.

.DESCRIPTION

No description available.

.PARAMETER StartDate
Filter by startDate greater than or equal to a specified date

.PARAMETER EndDate
Filter by endDate less than or equal to a specified date

.PARAMETER IncludeUsages
Optional ability to suppress the usage records

.PARAMETER MaxUsages
Optional ability to limit the usages returned

.PARAMETER OffsetUsages
Optional ability to offset the usages returned, for use with maxUsages to paginate

.PARAMETER IncludeTenants
Optional ability to include all subtenant billing information when calling from a master tenant user

.PARAMETER AccountId
Filter by Tenant ID. This is only available to master tenant users with permission to manage tenants and users.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

ListBillingInstances200Response
#>
function Invoke-ListBillingInstances {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${StartDate},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${EndDate},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IncludeUsages},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int64]]
        ${MaxUsages},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int64]]
        ${OffsetUsages},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IncludeTenants},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int64]]
        ${AccountId},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ListBillingInstances' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/billing/instances'

        if ($StartDate) {
            $LocalVarQueryParameters['startDate'] = $StartDate
        }

        if ($EndDate) {
            $LocalVarQueryParameters['endDate'] = $EndDate
        }

        if ($IncludeUsages) {
            $LocalVarQueryParameters['includeUsages'] = $IncludeUsages
        }

        if ($MaxUsages) {
            $LocalVarQueryParameters['maxUsages'] = $MaxUsages
        }

        if ($OffsetUsages) {
            $LocalVarQueryParameters['offsetUsages'] = $OffsetUsages
        }

        if ($IncludeTenants) {
            $LocalVarQueryParameters['includeTenants'] = $IncludeTenants
        }

        if ($AccountId) {
            $LocalVarQueryParameters['accountId'] = $AccountId
        }

        if ($Configuration["AccessToken"]) {
            $LocalVarHeaderParameters['Authorization'] = "Bearer " + $Configuration["AccessToken"]
            Write-Verbose ("Using Bearer authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "ListBillingInstances200Response" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieves billing information for all servers (container hosts) on the requestor's account.

.DESCRIPTION

No description available.

.PARAMETER StartDate
Filter by startDate greater than or equal to a specified date

.PARAMETER EndDate
Filter by endDate less than or equal to a specified date

.PARAMETER IncludeUsages
Optional ability to suppress the usage records

.PARAMETER MaxUsages
Optional ability to limit the usages returned

.PARAMETER OffsetUsages
Optional ability to offset the usages returned, for use with maxUsages to paginate

.PARAMETER IncludeTenants
Optional ability to include all subtenant billing information when calling from a master tenant user

.PARAMETER AccountId
Filter by Tenant ID. This is only available to master tenant users with permission to manage tenants and users.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

ListBillingServers200Response
#>
function Invoke-ListBillingServers {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${StartDate},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${EndDate},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IncludeUsages},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int64]]
        ${MaxUsages},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int64]]
        ${OffsetUsages},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IncludeTenants},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int64]]
        ${AccountId},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ListBillingServers' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/billing/servers'

        if ($StartDate) {
            $LocalVarQueryParameters['startDate'] = $StartDate
        }

        if ($EndDate) {
            $LocalVarQueryParameters['endDate'] = $EndDate
        }

        if ($IncludeUsages) {
            $LocalVarQueryParameters['includeUsages'] = $IncludeUsages
        }

        if ($MaxUsages) {
            $LocalVarQueryParameters['maxUsages'] = $MaxUsages
        }

        if ($OffsetUsages) {
            $LocalVarQueryParameters['offsetUsages'] = $OffsetUsages
        }

        if ($IncludeTenants) {
            $LocalVarQueryParameters['includeTenants'] = $IncludeTenants
        }

        if ($AccountId) {
            $LocalVarQueryParameters['accountId'] = $AccountId
        }

        if ($Configuration["AccessToken"]) {
            $LocalVarHeaderParameters['Authorization'] = "Bearer " + $Configuration["AccessToken"]
            Write-Verbose ("Using Bearer authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "ListBillingServers200Response" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieves billing information for all zones on the requestor's account.

.DESCRIPTION

No description available.

.PARAMETER StartDate
Filter by startDate greater than or equal to a specified date

.PARAMETER EndDate
Filter by endDate less than or equal to a specified date

.PARAMETER IncludeUsages
Optional ability to suppress the usage records

.PARAMETER MaxUsages
Optional ability to limit the usages returned

.PARAMETER OffsetUsages
Optional ability to offset the usages returned, for use with maxUsages to paginate

.PARAMETER IncludeComputeServers
Optional ability to exclude compute servers

.PARAMETER IncludeInstances
Optional ability to exclude instances

.PARAMETER IncludeDiscoveredServers
Optional ability to exclude discovered servers

.PARAMETER IncludeLoadBalancers
Optional ability to exclude load balancers

.PARAMETER IncludeVirtualImages
Optional ability to exclude virtual images

.PARAMETER IncludeSnapshots
Optional ability to exclude snapshots

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

ListBillingZone200Response
#>
function Invoke-ListBillingZone {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${StartDate},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${EndDate},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IncludeUsages},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int64]]
        ${MaxUsages},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int64]]
        ${OffsetUsages},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IncludeComputeServers},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IncludeInstances},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IncludeDiscoveredServers},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IncludeLoadBalancers},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IncludeVirtualImages},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IncludeSnapshots},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ListBillingZone' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/billing/zones'

        if ($StartDate) {
            $LocalVarQueryParameters['startDate'] = $StartDate
        }

        if ($EndDate) {
            $LocalVarQueryParameters['endDate'] = $EndDate
        }

        if ($IncludeUsages) {
            $LocalVarQueryParameters['includeUsages'] = $IncludeUsages
        }

        if ($MaxUsages) {
            $LocalVarQueryParameters['maxUsages'] = $MaxUsages
        }

        if ($OffsetUsages) {
            $LocalVarQueryParameters['offsetUsages'] = $OffsetUsages
        }

        if ($IncludeComputeServers) {
            $LocalVarQueryParameters['includeComputeServers'] = $IncludeComputeServers
        }

        if ($IncludeInstances) {
            $LocalVarQueryParameters['includeInstances'] = $IncludeInstances
        }

        if ($IncludeDiscoveredServers) {
            $LocalVarQueryParameters['includeDiscoveredServers'] = $IncludeDiscoveredServers
        }

        if ($IncludeLoadBalancers) {
            $LocalVarQueryParameters['includeLoadBalancers'] = $IncludeLoadBalancers
        }

        if ($IncludeVirtualImages) {
            $LocalVarQueryParameters['includeVirtualImages'] = $IncludeVirtualImages
        }

        if ($IncludeSnapshots) {
            $LocalVarQueryParameters['includeSnapshots'] = $IncludeSnapshots
        }

        if ($Configuration["AccessToken"]) {
            $LocalVarHeaderParameters['Authorization'] = "Bearer " + $Configuration["AccessToken"]
            Write-Verbose ("Using Bearer authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "ListBillingZone200Response" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

