/*
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.InlineResponse200108NetworkFloatingIpNetworkDomain;
import org.openapitools.client.model.InlineResponse20040AppDeployInstance;
import org.openapitools.client.model.InlineResponse20082LoadBalancerInstanceSslCert;
import org.openapitools.client.model.NetworkConfig;
import org.openapitools.client.model.NetworkNetworkProxy;
import org.openapitools.client.model.NetworkOwner;
import org.openapitools.client.model.NetworkType;
import org.openapitools.client.model.NetworkZone;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;


/**
 * Model tests for Network
 */
public class NetworkTest {
    private final Network model = new Network();

    /**
     * Model tests for Network
     */
    @Test
    public void testNetwork() {
        // TODO: test Network
    }

    /**
     * Test the property 'id'
     */
    @Test
    public void idTest() {
        // TODO: test id
    }

    /**
     * Test the property 'name'
     */
    @Test
    public void nameTest() {
        // TODO: test name
    }

    /**
     * Test the property 'displayName'
     */
    @Test
    public void displayNameTest() {
        // TODO: test displayName
    }

    /**
     * Test the property 'labels'
     */
    @Test
    public void labelsTest() {
        // TODO: test labels
    }

    /**
     * Test the property 'zone'
     */
    @Test
    public void zoneTest() {
        // TODO: test zone
    }

    /**
     * Test the property 'type'
     */
    @Test
    public void typeTest() {
        // TODO: test type
    }

    /**
     * Test the property 'owner'
     */
    @Test
    public void ownerTest() {
        // TODO: test owner
    }

    /**
     * Test the property 'code'
     */
    @Test
    public void codeTest() {
        // TODO: test code
    }

    /**
     * Test the property 'ipv4Enabled'
     */
    @Test
    public void ipv4EnabledTest() {
        // TODO: test ipv4Enabled
    }

    /**
     * Test the property 'ipv6Enabled'
     */
    @Test
    public void ipv6EnabledTest() {
        // TODO: test ipv6Enabled
    }

    /**
     * Test the property 'category'
     */
    @Test
    public void categoryTest() {
        // TODO: test category
    }

    /**
     * Test the property 'interfaceName'
     */
    @Test
    public void interfaceNameTest() {
        // TODO: test interfaceName
    }

    /**
     * Test the property 'bridgeName'
     */
    @Test
    public void bridgeNameTest() {
        // TODO: test bridgeName
    }

    /**
     * Test the property 'bridgeInterface'
     */
    @Test
    public void bridgeInterfaceTest() {
        // TODO: test bridgeInterface
    }

    /**
     * Test the property 'description'
     */
    @Test
    public void descriptionTest() {
        // TODO: test description
    }

    /**
     * Test the property 'externalId'
     */
    @Test
    public void externalIdTest() {
        // TODO: test externalId
    }

    /**
     * Test the property 'internalId'
     */
    @Test
    public void internalIdTest() {
        // TODO: test internalId
    }

    /**
     * Test the property 'uniqueId'
     */
    @Test
    public void uniqueIdTest() {
        // TODO: test uniqueId
    }

    /**
     * Test the property 'externalType'
     */
    @Test
    public void externalTypeTest() {
        // TODO: test externalType
    }

    /**
     * Test the property 'refUrl'
     */
    @Test
    public void refUrlTest() {
        // TODO: test refUrl
    }

    /**
     * Test the property 'refType'
     */
    @Test
    public void refTypeTest() {
        // TODO: test refType
    }

    /**
     * Test the property 'refId'
     */
    @Test
    public void refIdTest() {
        // TODO: test refId
    }

    /**
     * Test the property 'vlanId'
     */
    @Test
    public void vlanIdTest() {
        // TODO: test vlanId
    }

    /**
     * Test the property 'vswitchName'
     */
    @Test
    public void vswitchNameTest() {
        // TODO: test vswitchName
    }

    /**
     * Test the property 'dhcpServer'
     */
    @Test
    public void dhcpServerTest() {
        // TODO: test dhcpServer
    }

    /**
     * Test the property 'dhcpIp'
     */
    @Test
    public void dhcpIpTest() {
        // TODO: test dhcpIp
    }

    /**
     * Test the property 'dhcpServerIPv6'
     */
    @Test
    public void dhcpServerIPv6Test() {
        // TODO: test dhcpServerIPv6
    }

    /**
     * Test the property 'gateway'
     */
    @Test
    public void gatewayTest() {
        // TODO: test gateway
    }

    /**
     * Test the property 'netmask'
     */
    @Test
    public void netmaskTest() {
        // TODO: test netmask
    }

    /**
     * Test the property 'broadcast'
     */
    @Test
    public void broadcastTest() {
        // TODO: test broadcast
    }

    /**
     * Test the property 'subnetAddress'
     */
    @Test
    public void subnetAddressTest() {
        // TODO: test subnetAddress
    }

    /**
     * Test the property 'dnsPrimary'
     */
    @Test
    public void dnsPrimaryTest() {
        // TODO: test dnsPrimary
    }

    /**
     * Test the property 'dnsSecondary'
     */
    @Test
    public void dnsSecondaryTest() {
        // TODO: test dnsSecondary
    }

    /**
     * Test the property 'cidr'
     */
    @Test
    public void cidrTest() {
        // TODO: test cidr
    }

    /**
     * Test the property 'gatewayIPv6'
     */
    @Test
    public void gatewayIPv6Test() {
        // TODO: test gatewayIPv6
    }

    /**
     * Test the property 'netmaskIPv6'
     */
    @Test
    public void netmaskIPv6Test() {
        // TODO: test netmaskIPv6
    }

    /**
     * Test the property 'dnsPrimaryIPv6'
     */
    @Test
    public void dnsPrimaryIPv6Test() {
        // TODO: test dnsPrimaryIPv6
    }

    /**
     * Test the property 'dnsSecondaryIPv6'
     */
    @Test
    public void dnsSecondaryIPv6Test() {
        // TODO: test dnsSecondaryIPv6
    }

    /**
     * Test the property 'cidrIPv6'
     */
    @Test
    public void cidrIPv6Test() {
        // TODO: test cidrIPv6
    }

    /**
     * Test the property 'tftpServer'
     */
    @Test
    public void tftpServerTest() {
        // TODO: test tftpServer
    }

    /**
     * Test the property 'bootFile'
     */
    @Test
    public void bootFileTest() {
        // TODO: test bootFile
    }

    /**
     * Test the property 'switchId'
     */
    @Test
    public void switchIdTest() {
        // TODO: test switchId
    }

    /**
     * Test the property 'fabricId'
     */
    @Test
    public void fabricIdTest() {
        // TODO: test fabricId
    }

    /**
     * Test the property 'networkRole'
     */
    @Test
    public void networkRoleTest() {
        // TODO: test networkRole
    }

    /**
     * Test the property 'status'
     */
    @Test
    public void statusTest() {
        // TODO: test status
    }

    /**
     * Test the property 'availabilityZone'
     */
    @Test
    public void availabilityZoneTest() {
        // TODO: test availabilityZone
    }

    /**
     * Test the property 'pool'
     */
    @Test
    public void poolTest() {
        // TODO: test pool
    }

    /**
     * Test the property 'poolIPv6'
     */
    @Test
    public void poolIPv6Test() {
        // TODO: test poolIPv6
    }

    /**
     * Test the property 'networkProxy'
     */
    @Test
    public void networkProxyTest() {
        // TODO: test networkProxy
    }

    /**
     * Test the property 'networkDomain'
     */
    @Test
    public void networkDomainTest() {
        // TODO: test networkDomain
    }

    /**
     * Test the property 'searchDomains'
     */
    @Test
    public void searchDomainsTest() {
        // TODO: test searchDomains
    }

    /**
     * Test the property 'prefixLength'
     */
    @Test
    public void prefixLengthTest() {
        // TODO: test prefixLength
    }

    /**
     * Test the property 'visibility'
     */
    @Test
    public void visibilityTest() {
        // TODO: test visibility
    }

    /**
     * Test the property 'enableAdmin'
     */
    @Test
    public void enableAdminTest() {
        // TODO: test enableAdmin
    }

    /**
     * Test the property 'active'
     */
    @Test
    public void activeTest() {
        // TODO: test active
    }

    /**
     * Test the property 'defaultNetwork'
     */
    @Test
    public void defaultNetworkTest() {
        // TODO: test defaultNetwork
    }

    /**
     * Test the property 'assignPublicIp'
     */
    @Test
    public void assignPublicIpTest() {
        // TODO: test assignPublicIp
    }

    /**
     * Test the property 'noProxy'
     */
    @Test
    public void noProxyTest() {
        // TODO: test noProxy
    }

    /**
     * Test the property 'applianceUrlProxyBypass'
     */
    @Test
    public void applianceUrlProxyBypassTest() {
        // TODO: test applianceUrlProxyBypass
    }

    /**
     * Test the property 'zonePool'
     */
    @Test
    public void zonePoolTest() {
        // TODO: test zonePool
    }

    /**
     * Test the property 'allowStaticOverride'
     */
    @Test
    public void allowStaticOverrideTest() {
        // TODO: test allowStaticOverride
    }

    /**
     * Test the property 'config'
     */
    @Test
    public void configTest() {
        // TODO: test config
    }

    /**
     * Test the property 'tenants'
     */
    @Test
    public void tenantsTest() {
        // TODO: test tenants
    }

}
