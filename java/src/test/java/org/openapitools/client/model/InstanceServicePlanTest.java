/*
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.InstanceServicePlanAutoOptions;
import org.openapitools.client.model.InstanceServicePlanDatastores;
import org.openapitools.client.model.InstanceServicePlanStorageType;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;


/**
 * Model tests for InstanceServicePlan
 */
public class InstanceServicePlanTest {
    private final InstanceServicePlan model = new InstanceServicePlan();

    /**
     * Model tests for InstanceServicePlan
     */
    @Test
    public void testInstanceServicePlan() {
        // TODO: test InstanceServicePlan
    }

    /**
     * Test the property 'id'
     */
    @Test
    public void idTest() {
        // TODO: test id
    }

    /**
     * Test the property 'name'
     */
    @Test
    public void nameTest() {
        // TODO: test name
    }

    /**
     * Test the property 'value'
     */
    @Test
    public void valueTest() {
        // TODO: test value
    }

    /**
     * Test the property 'code'
     */
    @Test
    public void codeTest() {
        // TODO: test code
    }

    /**
     * Test the property 'maxStorage'
     */
    @Test
    public void maxStorageTest() {
        // TODO: test maxStorage
    }

    /**
     * Test the property 'maxMemory'
     */
    @Test
    public void maxMemoryTest() {
        // TODO: test maxMemory
    }

    /**
     * Test the property 'maxCpu'
     */
    @Test
    public void maxCpuTest() {
        // TODO: test maxCpu
    }

    /**
     * Test the property 'maxCores'
     */
    @Test
    public void maxCoresTest() {
        // TODO: test maxCores
    }

    /**
     * Test the property 'customCpu'
     */
    @Test
    public void customCpuTest() {
        // TODO: test customCpu
    }

    /**
     * Test the property 'customMaxMemory'
     */
    @Test
    public void customMaxMemoryTest() {
        // TODO: test customMaxMemory
    }

    /**
     * Test the property 'customMaxStorage'
     */
    @Test
    public void customMaxStorageTest() {
        // TODO: test customMaxStorage
    }

    /**
     * Test the property 'customMaxDataStorage'
     */
    @Test
    public void customMaxDataStorageTest() {
        // TODO: test customMaxDataStorage
    }

    /**
     * Test the property 'customCoresPerSocket'
     */
    @Test
    public void customCoresPerSocketTest() {
        // TODO: test customCoresPerSocket
    }

    /**
     * Test the property 'coresPerSocket'
     */
    @Test
    public void coresPerSocketTest() {
        // TODO: test coresPerSocket
    }

    /**
     * Test the property 'storageTypes'
     */
    @Test
    public void storageTypesTest() {
        // TODO: test storageTypes
    }

    /**
     * Test the property 'rootStorageTypes'
     */
    @Test
    public void rootStorageTypesTest() {
        // TODO: test rootStorageTypes
    }

    /**
     * Test the property 'addVolumes'
     */
    @Test
    public void addVolumesTest() {
        // TODO: test addVolumes
    }

    /**
     * Test the property 'customizeVolume'
     */
    @Test
    public void customizeVolumeTest() {
        // TODO: test customizeVolume
    }

    /**
     * Test the property 'rootDiskCustomizable'
     */
    @Test
    public void rootDiskCustomizableTest() {
        // TODO: test rootDiskCustomizable
    }

    /**
     * Test the property 'noDisks'
     */
    @Test
    public void noDisksTest() {
        // TODO: test noDisks
    }

    /**
     * Test the property 'hasDatastore'
     */
    @Test
    public void hasDatastoreTest() {
        // TODO: test hasDatastore
    }

    /**
     * Test the property 'minDisk'
     */
    @Test
    public void minDiskTest() {
        // TODO: test minDisk
    }

    /**
     * Test the property 'maxDisk'
     */
    @Test
    public void maxDiskTest() {
        // TODO: test maxDisk
    }

    /**
     * Test the property 'lvmSupported'
     */
    @Test
    public void lvmSupportedTest() {
        // TODO: test lvmSupported
    }

    /**
     * Test the property 'datastores'
     */
    @Test
    public void datastoresTest() {
        // TODO: test datastores
    }

    /**
     * Test the property 'supportsAutoDatastore'
     */
    @Test
    public void supportsAutoDatastoreTest() {
        // TODO: test supportsAutoDatastore
    }

    /**
     * Test the property 'autoOptions'
     */
    @Test
    public void autoOptionsTest() {
        // TODO: test autoOptions
    }

    /**
     * Test the property 'cpuOptions'
     */
    @Test
    public void cpuOptionsTest() {
        // TODO: test cpuOptions
    }

    /**
     * Test the property 'coreOptions'
     */
    @Test
    public void coreOptionsTest() {
        // TODO: test coreOptions
    }

    /**
     * Test the property 'memoryOptions'
     */
    @Test
    public void memoryOptionsTest() {
        // TODO: test memoryOptions
    }

    /**
     * Test the property 'rootCustomSizeOptions'
     */
    @Test
    public void rootCustomSizeOptionsTest() {
        // TODO: test rootCustomSizeOptions
    }

    /**
     * Test the property 'customSizeOptions'
     */
    @Test
    public void customSizeOptionsTest() {
        // TODO: test customSizeOptions
    }

    /**
     * Test the property 'customCores'
     */
    @Test
    public void customCoresTest() {
        // TODO: test customCores
    }

    /**
     * Test the property 'maxDisks'
     */
    @Test
    public void maxDisksTest() {
        // TODO: test maxDisks
    }

    /**
     * Test the property 'memorySizeType'
     */
    @Test
    public void memorySizeTypeTest() {
        // TODO: test memorySizeType
    }

}
