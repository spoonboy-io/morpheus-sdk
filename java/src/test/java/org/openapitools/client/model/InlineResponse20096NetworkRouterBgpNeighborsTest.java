/*
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.client.model.InlineResponse20096Config;
import org.threeten.bp.OffsetDateTime;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;


/**
 * Model tests for InlineResponse20096NetworkRouterBgpNeighbors
 */
public class InlineResponse20096NetworkRouterBgpNeighborsTest {
    private final InlineResponse20096NetworkRouterBgpNeighbors model = new InlineResponse20096NetworkRouterBgpNeighbors();

    /**
     * Model tests for InlineResponse20096NetworkRouterBgpNeighbors
     */
    @Test
    public void testInlineResponse20096NetworkRouterBgpNeighbors() {
        // TODO: test InlineResponse20096NetworkRouterBgpNeighbors
    }

    /**
     * Test the property 'id'
     */
    @Test
    public void idTest() {
        // TODO: test id
    }

    /**
     * Test the property 'ipAddress'
     */
    @Test
    public void ipAddressTest() {
        // TODO: test ipAddress
    }

    /**
     * Test the property 'forwardingAddress'
     */
    @Test
    public void forwardingAddressTest() {
        // TODO: test forwardingAddress
    }

    /**
     * Test the property 'protocolAddress'
     */
    @Test
    public void protocolAddressTest() {
        // TODO: test protocolAddress
    }

    /**
     * Test the property 'remoteAs'
     */
    @Test
    public void remoteAsTest() {
        // TODO: test remoteAs
    }

    /**
     * Test the property 'weight'
     */
    @Test
    public void weightTest() {
        // TODO: test weight
    }

    /**
     * Test the property 'keepAlive'
     */
    @Test
    public void keepAliveTest() {
        // TODO: test keepAlive
    }

    /**
     * Test the property 'holdDown'
     */
    @Test
    public void holdDownTest() {
        // TODO: test holdDown
    }

    /**
     * Test the property 'password'
     */
    @Test
    public void passwordTest() {
        // TODO: test password
    }

    /**
     * Test the property 'routeFilteringType'
     */
    @Test
    public void routeFilteringTypeTest() {
        // TODO: test routeFilteringType
    }

    /**
     * Test the property 'routeFilteringIn'
     */
    @Test
    public void routeFilteringInTest() {
        // TODO: test routeFilteringIn
    }

    /**
     * Test the property 'routeFilteringOut'
     */
    @Test
    public void routeFilteringOutTest() {
        // TODO: test routeFilteringOut
    }

    /**
     * Test the property 'bfdEnabled'
     */
    @Test
    public void bfdEnabledTest() {
        // TODO: test bfdEnabled
    }

    /**
     * Test the property 'bfdInterval'
     */
    @Test
    public void bfdIntervalTest() {
        // TODO: test bfdInterval
    }

    /**
     * Test the property 'bfdMultiple'
     */
    @Test
    public void bfdMultipleTest() {
        // TODO: test bfdMultiple
    }

    /**
     * Test the property 'allowAsIn'
     */
    @Test
    public void allowAsInTest() {
        // TODO: test allowAsIn
    }

    /**
     * Test the property 'hopLimit'
     */
    @Test
    public void hopLimitTest() {
        // TODO: test hopLimit
    }

    /**
     * Test the property 'restartMode'
     */
    @Test
    public void restartModeTest() {
        // TODO: test restartMode
    }

    /**
     * Test the property 'providerId'
     */
    @Test
    public void providerIdTest() {
        // TODO: test providerId
    }

    /**
     * Test the property 'syncSource'
     */
    @Test
    public void syncSourceTest() {
        // TODO: test syncSource
    }

    /**
     * Test the property 'internalId'
     */
    @Test
    public void internalIdTest() {
        // TODO: test internalId
    }

    /**
     * Test the property 'externalId'
     */
    @Test
    public void externalIdTest() {
        // TODO: test externalId
    }

    /**
     * Test the property 'refType'
     */
    @Test
    public void refTypeTest() {
        // TODO: test refType
    }

    /**
     * Test the property 'refId'
     */
    @Test
    public void refIdTest() {
        // TODO: test refId
    }

    /**
     * Test the property 'config'
     */
    @Test
    public void configTest() {
        // TODO: test config
    }

    /**
     * Test the property 'dateCreated'
     */
    @Test
    public void dateCreatedTest() {
        // TODO: test dateCreated
    }

    /**
     * Test the property 'lastUpdated'
     */
    @Test
    public void lastUpdatedTest() {
        // TODO: test lastUpdated
    }

}
