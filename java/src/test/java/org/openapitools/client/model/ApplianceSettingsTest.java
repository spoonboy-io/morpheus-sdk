/*
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.1.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ApplianceSettingsEnabledZoneTypesInner;
import org.openapitools.jackson.nullable.JsonNullable;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for ApplianceSettings
 */
public class ApplianceSettingsTest {
    private final ApplianceSettings model = new ApplianceSettings();

    /**
     * Model tests for ApplianceSettings
     */
    @Test
    public void testApplianceSettings() {
        // TODO: test ApplianceSettings
    }

    /**
     * Test the property 'applianceUrl'
     */
    @Test
    public void applianceUrlTest() {
        // TODO: test applianceUrl
    }

    /**
     * Test the property 'internalApplianceUrl'
     */
    @Test
    public void internalApplianceUrlTest() {
        // TODO: test internalApplianceUrl
    }

    /**
     * Test the property 'corsAllowed'
     */
    @Test
    public void corsAllowedTest() {
        // TODO: test corsAllowed
    }

    /**
     * Test the property 'registrationEnabled'
     */
    @Test
    public void registrationEnabledTest() {
        // TODO: test registrationEnabled
    }

    /**
     * Test the property 'defaultRoleId'
     */
    @Test
    public void defaultRoleIdTest() {
        // TODO: test defaultRoleId
    }

    /**
     * Test the property 'defaultUserRoleId'
     */
    @Test
    public void defaultUserRoleIdTest() {
        // TODO: test defaultUserRoleId
    }

    /**
     * Test the property 'dockerPrivilegedMode'
     */
    @Test
    public void dockerPrivilegedModeTest() {
        // TODO: test dockerPrivilegedMode
    }

    /**
     * Test the property 'expirePwdDays'
     */
    @Test
    public void expirePwdDaysTest() {
        // TODO: test expirePwdDays
    }

    /**
     * Test the property 'disableAfterAttempts'
     */
    @Test
    public void disableAfterAttemptsTest() {
        // TODO: test disableAfterAttempts
    }

    /**
     * Test the property 'disableAfterDaysInactive'
     */
    @Test
    public void disableAfterDaysInactiveTest() {
        // TODO: test disableAfterDaysInactive
    }

    /**
     * Test the property 'warnUserDaysBefore'
     */
    @Test
    public void warnUserDaysBeforeTest() {
        // TODO: test warnUserDaysBefore
    }

    /**
     * Test the property 'smtpMailFrom'
     */
    @Test
    public void smtpMailFromTest() {
        // TODO: test smtpMailFrom
    }

    /**
     * Test the property 'smtpServer'
     */
    @Test
    public void smtpServerTest() {
        // TODO: test smtpServer
    }

    /**
     * Test the property 'smtpPort'
     */
    @Test
    public void smtpPortTest() {
        // TODO: test smtpPort
    }

    /**
     * Test the property 'smtpSSL'
     */
    @Test
    public void smtpSSLTest() {
        // TODO: test smtpSSL
    }

    /**
     * Test the property 'smtpTLS'
     */
    @Test
    public void smtpTLSTest() {
        // TODO: test smtpTLS
    }

    /**
     * Test the property 'smtpUser'
     */
    @Test
    public void smtpUserTest() {
        // TODO: test smtpUser
    }

    /**
     * Test the property 'smtpPassword'
     */
    @Test
    public void smtpPasswordTest() {
        // TODO: test smtpPassword
    }

    /**
     * Test the property 'smtpPasswordHash'
     */
    @Test
    public void smtpPasswordHashTest() {
        // TODO: test smtpPasswordHash
    }

    /**
     * Test the property 'proxyHost'
     */
    @Test
    public void proxyHostTest() {
        // TODO: test proxyHost
    }

    /**
     * Test the property 'proxyPort'
     */
    @Test
    public void proxyPortTest() {
        // TODO: test proxyPort
    }

    /**
     * Test the property 'proxyUser'
     */
    @Test
    public void proxyUserTest() {
        // TODO: test proxyUser
    }

    /**
     * Test the property 'proxyPassword'
     */
    @Test
    public void proxyPasswordTest() {
        // TODO: test proxyPassword
    }

    /**
     * Test the property 'proxyPasswordHash'
     */
    @Test
    public void proxyPasswordHashTest() {
        // TODO: test proxyPasswordHash
    }

    /**
     * Test the property 'proxyDomain'
     */
    @Test
    public void proxyDomainTest() {
        // TODO: test proxyDomain
    }

    /**
     * Test the property 'proxyWorkstation'
     */
    @Test
    public void proxyWorkstationTest() {
        // TODO: test proxyWorkstation
    }

    /**
     * Test the property 'currencyProvider'
     */
    @Test
    public void currencyProviderTest() {
        // TODO: test currencyProvider
    }

    /**
     * Test the property 'currencyKey'
     */
    @Test
    public void currencyKeyTest() {
        // TODO: test currencyKey
    }

    /**
     * Test the property 'enabledZoneTypes'
     */
    @Test
    public void enabledZoneTypesTest() {
        // TODO: test enabledZoneTypes
    }

    /**
     * Test the property 'statsRetainmentPeriod'
     */
    @Test
    public void statsRetainmentPeriodTest() {
        // TODO: test statsRetainmentPeriod
    }

}
