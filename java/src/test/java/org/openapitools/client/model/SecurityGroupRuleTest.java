/*
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.client.model.InlineResponse20082LoadBalancerInstanceSslCert;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;


/**
 * Model tests for SecurityGroupRule
 */
public class SecurityGroupRuleTest {
    private final SecurityGroupRule model = new SecurityGroupRule();

    /**
     * Model tests for SecurityGroupRule
     */
    @Test
    public void testSecurityGroupRule() {
        // TODO: test SecurityGroupRule
    }

    /**
     * Test the property 'id'
     */
    @Test
    public void idTest() {
        // TODO: test id
    }

    /**
     * Test the property 'name'
     */
    @Test
    public void nameTest() {
        // TODO: test name
    }

    /**
     * Test the property 'ruleType'
     */
    @Test
    public void ruleTypeTest() {
        // TODO: test ruleType
    }

    /**
     * Test the property 'customRule'
     */
    @Test
    public void customRuleTest() {
        // TODO: test customRule
    }

    /**
     * Test the property 'instanceTypeId'
     */
    @Test
    public void instanceTypeIdTest() {
        // TODO: test instanceTypeId
    }

    /**
     * Test the property 'direction'
     */
    @Test
    public void directionTest() {
        // TODO: test direction
    }

    /**
     * Test the property 'policy'
     */
    @Test
    public void policyTest() {
        // TODO: test policy
    }

    /**
     * Test the property 'sourceType'
     */
    @Test
    public void sourceTypeTest() {
        // TODO: test sourceType
    }

    /**
     * Test the property 'source'
     */
    @Test
    public void sourceTest() {
        // TODO: test source
    }

    /**
     * Test the property 'sourceGroup'
     */
    @Test
    public void sourceGroupTest() {
        // TODO: test sourceGroup
    }

    /**
     * Test the property 'sourceTier'
     */
    @Test
    public void sourceTierTest() {
        // TODO: test sourceTier
    }

    /**
     * Test the property 'portRange'
     */
    @Test
    public void portRangeTest() {
        // TODO: test portRange
    }

    /**
     * Test the property 'protocol'
     */
    @Test
    public void protocolTest() {
        // TODO: test protocol
    }

    /**
     * Test the property 'destinationType'
     */
    @Test
    public void destinationTypeTest() {
        // TODO: test destinationType
    }

    /**
     * Test the property 'destination'
     */
    @Test
    public void destinationTest() {
        // TODO: test destination
    }

    /**
     * Test the property 'destinationGroup'
     */
    @Test
    public void destinationGroupTest() {
        // TODO: test destinationGroup
    }

    /**
     * Test the property 'destinationTier'
     */
    @Test
    public void destinationTierTest() {
        // TODO: test destinationTier
    }

    /**
     * Test the property 'externalId'
     */
    @Test
    public void externalIdTest() {
        // TODO: test externalId
    }

    /**
     * Test the property 'enabled'
     */
    @Test
    public void enabledTest() {
        // TODO: test enabled
    }

}
