/*
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;


/**
 * Model tests for InstanceServicePlanStorageType
 */
public class InstanceServicePlanStorageTypeTest {
    private final InstanceServicePlanStorageType model = new InstanceServicePlanStorageType();

    /**
     * Model tests for InstanceServicePlanStorageType
     */
    @Test
    public void testInstanceServicePlanStorageType() {
        // TODO: test InstanceServicePlanStorageType
    }

    /**
     * Test the property 'id'
     */
    @Test
    public void idTest() {
        // TODO: test id
    }

    /**
     * Test the property 'editable'
     */
    @Test
    public void editableTest() {
        // TODO: test editable
    }

    /**
     * Test the property 'optionTypes'
     */
    @Test
    public void optionTypesTest() {
        // TODO: test optionTypes
    }

    /**
     * Test the property 'displayOrder'
     */
    @Test
    public void displayOrderTest() {
        // TODO: test displayOrder
    }

    /**
     * Test the property 'code'
     */
    @Test
    public void codeTest() {
        // TODO: test code
    }

    /**
     * Test the property 'volumeType'
     */
    @Test
    public void volumeTypeTest() {
        // TODO: test volumeType
    }

    /**
     * Test the property 'minStorage'
     */
    @Test
    public void minStorageTest() {
        // TODO: test minStorage
    }

    /**
     * Test the property 'deletable'
     */
    @Test
    public void deletableTest() {
        // TODO: test deletable
    }

    /**
     * Test the property 'defaultType'
     */
    @Test
    public void defaultTypeTest() {
        // TODO: test defaultType
    }

    /**
     * Test the property 'createDatastore'
     */
    @Test
    public void createDatastoreTest() {
        // TODO: test createDatastore
    }

    /**
     * Test the property 'resizable'
     */
    @Test
    public void resizableTest() {
        // TODO: test resizable
    }

    /**
     * Test the property 'storageType'
     */
    @Test
    public void storageTypeTest() {
        // TODO: test storageType
    }

    /**
     * Test the property 'allowSearch'
     */
    @Test
    public void allowSearchTest() {
        // TODO: test allowSearch
    }

    /**
     * Test the property 'volumeOptionSource'
     */
    @Test
    public void volumeOptionSourceTest() {
        // TODO: test volumeOptionSource
    }

    /**
     * Test the property 'displayName'
     */
    @Test
    public void displayNameTest() {
        // TODO: test displayName
    }

    /**
     * Test the property 'minIOPS'
     */
    @Test
    public void minIOPSTest() {
        // TODO: test minIOPS
    }

    /**
     * Test the property 'maxIOPS'
     */
    @Test
    public void maxIOPSTest() {
        // TODO: test maxIOPS
    }

    /**
     * Test the property 'hasDatastore'
     */
    @Test
    public void hasDatastoreTest() {
        // TODO: test hasDatastore
    }

    /**
     * Test the property 'customSize'
     */
    @Test
    public void customSizeTest() {
        // TODO: test customSize
    }

    /**
     * Test the property 'autoDelete'
     */
    @Test
    public void autoDeleteTest() {
        // TODO: test autoDelete
    }

    /**
     * Test the property 'name'
     */
    @Test
    public void nameTest() {
        // TODO: test name
    }

    /**
     * Test the property 'configurableIOPS'
     */
    @Test
    public void configurableIOPSTest() {
        // TODO: test configurableIOPS
    }

    /**
     * Test the property 'customLabel'
     */
    @Test
    public void customLabelTest() {
        // TODO: test customLabel
    }

    /**
     * Test the property 'enabled'
     */
    @Test
    public void enabledTest() {
        // TODO: test enabled
    }

    /**
     * Test the property 'description'
     */
    @Test
    public void descriptionTest() {
        // TODO: test description
    }

    /**
     * Test the property 'volumeCategory'
     */
    @Test
    public void volumeCategoryTest() {
        // TODO: test volumeCategory
    }

    /**
     * Test the property 'externalId'
     */
    @Test
    public void externalIdTest() {
        // TODO: test externalId
    }

    /**
     * Test the property 'maxStorage'
     */
    @Test
    public void maxStorageTest() {
        // TODO: test maxStorage
    }

}
