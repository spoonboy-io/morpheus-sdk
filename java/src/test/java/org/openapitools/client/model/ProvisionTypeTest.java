/*
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.ControllerType;
import org.openapitools.client.model.NetworkType;
import org.openapitools.client.model.OptionType;
import org.openapitools.client.model.StorageType;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;


/**
 * Model tests for ProvisionType
 */
public class ProvisionTypeTest {
    private final ProvisionType model = new ProvisionType();

    /**
     * Model tests for ProvisionType
     */
    @Test
    public void testProvisionType() {
        // TODO: test ProvisionType
    }

    /**
     * Test the property 'id'
     */
    @Test
    public void idTest() {
        // TODO: test id
    }

    /**
     * Test the property 'name'
     */
    @Test
    public void nameTest() {
        // TODO: test name
    }

    /**
     * Test the property 'description'
     */
    @Test
    public void descriptionTest() {
        // TODO: test description
    }

    /**
     * Test the property 'code'
     */
    @Test
    public void codeTest() {
        // TODO: test code
    }

    /**
     * Test the property 'aclEnabled'
     */
    @Test
    public void aclEnabledTest() {
        // TODO: test aclEnabled
    }

    /**
     * Test the property 'multiTenant'
     */
    @Test
    public void multiTenantTest() {
        // TODO: test multiTenant
    }

    /**
     * Test the property 'managed'
     */
    @Test
    public void managedTest() {
        // TODO: test managed
    }

    /**
     * Test the property 'hostNetwork'
     */
    @Test
    public void hostNetworkTest() {
        // TODO: test hostNetwork
    }

    /**
     * Test the property 'customSupported'
     */
    @Test
    public void customSupportedTest() {
        // TODO: test customSupported
    }

    /**
     * Test the property 'mapPorts'
     */
    @Test
    public void mapPortsTest() {
        // TODO: test mapPorts
    }

    /**
     * Test the property 'exportServer'
     */
    @Test
    public void exportServerTest() {
        // TODO: test exportServer
    }

    /**
     * Test the property 'viewSet'
     */
    @Test
    public void viewSetTest() {
        // TODO: test viewSet
    }

    /**
     * Test the property 'serverType'
     */
    @Test
    public void serverTypeTest() {
        // TODO: test serverType
    }

    /**
     * Test the property 'hostType'
     */
    @Test
    public void hostTypeTest() {
        // TODO: test hostType
    }

    /**
     * Test the property 'addVolumes'
     */
    @Test
    public void addVolumesTest() {
        // TODO: test addVolumes
    }

    /**
     * Test the property 'hasVolumes'
     */
    @Test
    public void hasVolumesTest() {
        // TODO: test hasVolumes
    }

    /**
     * Test the property 'hasDatastore'
     */
    @Test
    public void hasDatastoreTest() {
        // TODO: test hasDatastore
    }

    /**
     * Test the property 'hasNetworks'
     */
    @Test
    public void hasNetworksTest() {
        // TODO: test hasNetworks
    }

    /**
     * Test the property 'maxNetworks'
     */
    @Test
    public void maxNetworksTest() {
        // TODO: test maxNetworks
    }

    /**
     * Test the property 'customizeVolume'
     */
    @Test
    public void customizeVolumeTest() {
        // TODO: test customizeVolume
    }

    /**
     * Test the property 'rootDiskCustomizable'
     */
    @Test
    public void rootDiskCustomizableTest() {
        // TODO: test rootDiskCustomizable
    }

    /**
     * Test the property 'rootDiskSizeKnown'
     */
    @Test
    public void rootDiskSizeKnownTest() {
        // TODO: test rootDiskSizeKnown
    }

    /**
     * Test the property 'rootDiskResizable'
     */
    @Test
    public void rootDiskResizableTest() {
        // TODO: test rootDiskResizable
    }

    /**
     * Test the property 'lvmSupported'
     */
    @Test
    public void lvmSupportedTest() {
        // TODO: test lvmSupported
    }

    /**
     * Test the property 'hostDiskMode'
     */
    @Test
    public void hostDiskModeTest() {
        // TODO: test hostDiskMode
    }

    /**
     * Test the property 'minDisk'
     */
    @Test
    public void minDiskTest() {
        // TODO: test minDisk
    }

    /**
     * Test the property 'maxDisk'
     */
    @Test
    public void maxDiskTest() {
        // TODO: test maxDisk
    }

    /**
     * Test the property 'resizeCopiesVolumes'
     */
    @Test
    public void resizeCopiesVolumesTest() {
        // TODO: test resizeCopiesVolumes
    }

    /**
     * Test the property 'supportsAutoDatastore'
     */
    @Test
    public void supportsAutoDatastoreTest() {
        // TODO: test supportsAutoDatastore
    }

    /**
     * Test the property 'hasZonePools'
     */
    @Test
    public void hasZonePoolsTest() {
        // TODO: test hasZonePools
    }

    /**
     * Test the property 'hasSecurityGroups'
     */
    @Test
    public void hasSecurityGroupsTest() {
        // TODO: test hasSecurityGroups
    }

    /**
     * Test the property 'hasParameters'
     */
    @Test
    public void hasParametersTest() {
        // TODO: test hasParameters
    }

    /**
     * Test the property 'canEnforceTags'
     */
    @Test
    public void canEnforceTagsTest() {
        // TODO: test canEnforceTags
    }

    /**
     * Test the property 'disableRootDatastore'
     */
    @Test
    public void disableRootDatastoreTest() {
        // TODO: test disableRootDatastore
    }

    /**
     * Test the property 'hasSnapshots'
     */
    @Test
    public void hasSnapshotsTest() {
        // TODO: test hasSnapshots
    }

    /**
     * Test the property 'hasSpecTemplates'
     */
    @Test
    public void hasSpecTemplatesTest() {
        // TODO: test hasSpecTemplates
    }

    /**
     * Test the property 'hasPreview'
     */
    @Test
    public void hasPreviewTest() {
        // TODO: test hasPreview
    }

    /**
     * Test the property 'zonePoolRequired'
     */
    @Test
    public void zonePoolRequiredTest() {
        // TODO: test zonePoolRequired
    }

    /**
     * Test the property 'planRequiresPool'
     */
    @Test
    public void planRequiresPoolTest() {
        // TODO: test planRequiresPool
    }

    /**
     * Test the property 'hasFolders'
     */
    @Test
    public void hasFoldersTest() {
        // TODO: test hasFolders
    }

    /**
     * Test the property 'optionTypes'
     */
    @Test
    public void optionTypesTest() {
        // TODO: test optionTypes
    }

    /**
     * Test the property 'customOptionTypes'
     */
    @Test
    public void customOptionTypesTest() {
        // TODO: test customOptionTypes
    }

    /**
     * Test the property 'networkTypes'
     */
    @Test
    public void networkTypesTest() {
        // TODO: test networkTypes
    }

    /**
     * Test the property 'storageTypes'
     */
    @Test
    public void storageTypesTest() {
        // TODO: test storageTypes
    }

    /**
     * Test the property 'rootStorageTypes'
     */
    @Test
    public void rootStorageTypesTest() {
        // TODO: test rootStorageTypes
    }

    /**
     * Test the property 'controllerTypes'
     */
    @Test
    public void controllerTypesTest() {
        // TODO: test controllerTypes
    }

}
