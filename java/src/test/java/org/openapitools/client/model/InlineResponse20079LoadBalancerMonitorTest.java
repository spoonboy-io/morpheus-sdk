/*
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.client.model.InlineResponse20079LoadBalancerMonitorLoadBalancer;
import org.threeten.bp.OffsetDateTime;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;


/**
 * Model tests for InlineResponse20079LoadBalancerMonitor
 */
public class InlineResponse20079LoadBalancerMonitorTest {
    private final InlineResponse20079LoadBalancerMonitor model = new InlineResponse20079LoadBalancerMonitor();

    /**
     * Model tests for InlineResponse20079LoadBalancerMonitor
     */
    @Test
    public void testInlineResponse20079LoadBalancerMonitor() {
        // TODO: test InlineResponse20079LoadBalancerMonitor
    }

    /**
     * Test the property 'id'
     */
    @Test
    public void idTest() {
        // TODO: test id
    }

    /**
     * Test the property 'loadBalancer'
     */
    @Test
    public void loadBalancerTest() {
        // TODO: test loadBalancer
    }

    /**
     * Test the property 'name'
     */
    @Test
    public void nameTest() {
        // TODO: test name
    }

    /**
     * Test the property 'code'
     */
    @Test
    public void codeTest() {
        // TODO: test code
    }

    /**
     * Test the property 'category'
     */
    @Test
    public void categoryTest() {
        // TODO: test category
    }

    /**
     * Test the property 'visibility'
     */
    @Test
    public void visibilityTest() {
        // TODO: test visibility
    }

    /**
     * Test the property 'description'
     */
    @Test
    public void descriptionTest() {
        // TODO: test description
    }

    /**
     * Test the property 'monitorType'
     */
    @Test
    public void monitorTypeTest() {
        // TODO: test monitorType
    }

    /**
     * Test the property 'monitorInterval'
     */
    @Test
    public void monitorIntervalTest() {
        // TODO: test monitorInterval
    }

    /**
     * Test the property 'monitorTimeout'
     */
    @Test
    public void monitorTimeoutTest() {
        // TODO: test monitorTimeout
    }

    /**
     * Test the property 'sendData'
     */
    @Test
    public void sendDataTest() {
        // TODO: test sendData
    }

    /**
     * Test the property 'sendVersion'
     */
    @Test
    public void sendVersionTest() {
        // TODO: test sendVersion
    }

    /**
     * Test the property 'sendType'
     */
    @Test
    public void sendTypeTest() {
        // TODO: test sendType
    }

    /**
     * Test the property 'receiveData'
     */
    @Test
    public void receiveDataTest() {
        // TODO: test receiveData
    }

    /**
     * Test the property 'receiveCode'
     */
    @Test
    public void receiveCodeTest() {
        // TODO: test receiveCode
    }

    /**
     * Test the property 'disabledData'
     */
    @Test
    public void disabledDataTest() {
        // TODO: test disabledData
    }

    /**
     * Test the property 'monitorUsername'
     */
    @Test
    public void monitorUsernameTest() {
        // TODO: test monitorUsername
    }

    /**
     * Test the property 'monitorPassword'
     */
    @Test
    public void monitorPasswordTest() {
        // TODO: test monitorPassword
    }

    /**
     * Test the property 'monitorDestination'
     */
    @Test
    public void monitorDestinationTest() {
        // TODO: test monitorDestination
    }

    /**
     * Test the property 'monitorReverse'
     */
    @Test
    public void monitorReverseTest() {
        // TODO: test monitorReverse
    }

    /**
     * Test the property 'monitorTransparent'
     */
    @Test
    public void monitorTransparentTest() {
        // TODO: test monitorTransparent
    }

    /**
     * Test the property 'monitorAdaptive'
     */
    @Test
    public void monitorAdaptiveTest() {
        // TODO: test monitorAdaptive
    }

    /**
     * Test the property 'aliasAddress'
     */
    @Test
    public void aliasAddressTest() {
        // TODO: test aliasAddress
    }

    /**
     * Test the property 'aliasPort'
     */
    @Test
    public void aliasPortTest() {
        // TODO: test aliasPort
    }

    /**
     * Test the property 'internalId'
     */
    @Test
    public void internalIdTest() {
        // TODO: test internalId
    }

    /**
     * Test the property 'externalId'
     */
    @Test
    public void externalIdTest() {
        // TODO: test externalId
    }

    /**
     * Test the property 'monitorSource'
     */
    @Test
    public void monitorSourceTest() {
        // TODO: test monitorSource
    }

    /**
     * Test the property 'status'
     */
    @Test
    public void statusTest() {
        // TODO: test status
    }

    /**
     * Test the property 'statusMessage'
     */
    @Test
    public void statusMessageTest() {
        // TODO: test statusMessage
    }

    /**
     * Test the property 'statusDate'
     */
    @Test
    public void statusDateTest() {
        // TODO: test statusDate
    }

    /**
     * Test the property 'enabled'
     */
    @Test
    public void enabledTest() {
        // TODO: test enabled
    }

    /**
     * Test the property 'maxRetry'
     */
    @Test
    public void maxRetryTest() {
        // TODO: test maxRetry
    }

    /**
     * Test the property 'fallCount'
     */
    @Test
    public void fallCountTest() {
        // TODO: test fallCount
    }

    /**
     * Test the property 'riseCount'
     */
    @Test
    public void riseCountTest() {
        // TODO: test riseCount
    }

    /**
     * Test the property 'dataLength'
     */
    @Test
    public void dataLengthTest() {
        // TODO: test dataLength
    }

    /**
     * Test the property 'config'
     */
    @Test
    public void configTest() {
        // TODO: test config
    }

    /**
     * Test the property 'createdBy'
     */
    @Test
    public void createdByTest() {
        // TODO: test createdBy
    }

    /**
     * Test the property 'dateCreated'
     */
    @Test
    public void dateCreatedTest() {
        // TODO: test dateCreated
    }

    /**
     * Test the property 'lastUpdated'
     */
    @Test
    public void lastUpdatedTest() {
        // TODO: test lastUpdated
    }

}
