/*
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.TaskTypeOptionTypes;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;


/**
 * Model tests for TaskType
 */
public class TaskTypeTest {
    private final TaskType model = new TaskType();

    /**
     * Model tests for TaskType
     */
    @Test
    public void testTaskType() {
        // TODO: test TaskType
    }

    /**
     * Test the property 'id'
     */
    @Test
    public void idTest() {
        // TODO: test id
    }

    /**
     * Test the property 'code'
     */
    @Test
    public void codeTest() {
        // TODO: test code
    }

    /**
     * Test the property 'name'
     */
    @Test
    public void nameTest() {
        // TODO: test name
    }

    /**
     * Test the property 'category'
     */
    @Test
    public void categoryTest() {
        // TODO: test category
    }

    /**
     * Test the property 'description'
     */
    @Test
    public void descriptionTest() {
        // TODO: test description
    }

    /**
     * Test the property 'scriptable'
     */
    @Test
    public void scriptableTest() {
        // TODO: test scriptable
    }

    /**
     * Test the property 'enabled'
     */
    @Test
    public void enabledTest() {
        // TODO: test enabled
    }

    /**
     * Test the property 'hasResults'
     */
    @Test
    public void hasResultsTest() {
        // TODO: test hasResults
    }

    /**
     * Test the property 'allowExecuteLocal'
     */
    @Test
    public void allowExecuteLocalTest() {
        // TODO: test allowExecuteLocal
    }

    /**
     * Test the property 'allowExecuteRemote'
     */
    @Test
    public void allowExecuteRemoteTest() {
        // TODO: test allowExecuteRemote
    }

    /**
     * Test the property 'allowExecuteResource'
     */
    @Test
    public void allowExecuteResourceTest() {
        // TODO: test allowExecuteResource
    }

    /**
     * Test the property 'allowLocalRepo'
     */
    @Test
    public void allowLocalRepoTest() {
        // TODO: test allowLocalRepo
    }

    /**
     * Test the property 'allowRemoteKeyAuth'
     */
    @Test
    public void allowRemoteKeyAuthTest() {
        // TODO: test allowRemoteKeyAuth
    }

    /**
     * Test the property 'optionTypes'
     */
    @Test
    public void optionTypesTest() {
        // TODO: test optionTypes
    }

}
