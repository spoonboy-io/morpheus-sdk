/*
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.InlineResponse20040AppDeployInstance;
import org.openapitools.client.model.InlineResponse20079LoadBalancerMonitorLoadBalancer;
import org.threeten.bp.OffsetDateTime;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;


/**
 * Model tests for InlineResponse20080LoadBalancerPool
 */
public class InlineResponse20080LoadBalancerPoolTest {
    private final InlineResponse20080LoadBalancerPool model = new InlineResponse20080LoadBalancerPool();

    /**
     * Model tests for InlineResponse20080LoadBalancerPool
     */
    @Test
    public void testInlineResponse20080LoadBalancerPool() {
        // TODO: test InlineResponse20080LoadBalancerPool
    }

    /**
     * Test the property 'id'
     */
    @Test
    public void idTest() {
        // TODO: test id
    }

    /**
     * Test the property 'loadBalancer'
     */
    @Test
    public void loadBalancerTest() {
        // TODO: test loadBalancer
    }

    /**
     * Test the property 'name'
     */
    @Test
    public void nameTest() {
        // TODO: test name
    }

    /**
     * Test the property 'category'
     */
    @Test
    public void categoryTest() {
        // TODO: test category
    }

    /**
     * Test the property 'visibility'
     */
    @Test
    public void visibilityTest() {
        // TODO: test visibility
    }

    /**
     * Test the property 'description'
     */
    @Test
    public void descriptionTest() {
        // TODO: test description
    }

    /**
     * Test the property 'internalId'
     */
    @Test
    public void internalIdTest() {
        // TODO: test internalId
    }

    /**
     * Test the property 'externalId'
     */
    @Test
    public void externalIdTest() {
        // TODO: test externalId
    }

    /**
     * Test the property 'enabled'
     */
    @Test
    public void enabledTest() {
        // TODO: test enabled
    }

    /**
     * Test the property 'vipSticky'
     */
    @Test
    public void vipStickyTest() {
        // TODO: test vipSticky
    }

    /**
     * Test the property 'vipBalance'
     */
    @Test
    public void vipBalanceTest() {
        // TODO: test vipBalance
    }

    /**
     * Test the property 'allowNat'
     */
    @Test
    public void allowNatTest() {
        // TODO: test allowNat
    }

    /**
     * Test the property 'allowSnat'
     */
    @Test
    public void allowSnatTest() {
        // TODO: test allowSnat
    }

    /**
     * Test the property 'vipClientIpMode'
     */
    @Test
    public void vipClientIpModeTest() {
        // TODO: test vipClientIpMode
    }

    /**
     * Test the property 'vipServerIpMode'
     */
    @Test
    public void vipServerIpModeTest() {
        // TODO: test vipServerIpMode
    }

    /**
     * Test the property 'minActive'
     */
    @Test
    public void minActiveTest() {
        // TODO: test minActive
    }

    /**
     * Test the property 'minInService'
     */
    @Test
    public void minInServiceTest() {
        // TODO: test minInService
    }

    /**
     * Test the property 'minUpMonitor'
     */
    @Test
    public void minUpMonitorTest() {
        // TODO: test minUpMonitor
    }

    /**
     * Test the property 'minUpAction'
     */
    @Test
    public void minUpActionTest() {
        // TODO: test minUpAction
    }

    /**
     * Test the property 'maxQueueDepth'
     */
    @Test
    public void maxQueueDepthTest() {
        // TODO: test maxQueueDepth
    }

    /**
     * Test the property 'maxQueueTime'
     */
    @Test
    public void maxQueueTimeTest() {
        // TODO: test maxQueueTime
    }

    /**
     * Test the property 'numberActive'
     */
    @Test
    public void numberActiveTest() {
        // TODO: test numberActive
    }

    /**
     * Test the property 'numberInService'
     */
    @Test
    public void numberInServiceTest() {
        // TODO: test numberInService
    }

    /**
     * Test the property 'healthScore'
     */
    @Test
    public void healthScoreTest() {
        // TODO: test healthScore
    }

    /**
     * Test the property 'performanceScore'
     */
    @Test
    public void performanceScoreTest() {
        // TODO: test performanceScore
    }

    /**
     * Test the property 'healthPenalty'
     */
    @Test
    public void healthPenaltyTest() {
        // TODO: test healthPenalty
    }

    /**
     * Test the property 'securityPenalty'
     */
    @Test
    public void securityPenaltyTest() {
        // TODO: test securityPenalty
    }

    /**
     * Test the property 'errorPenalty'
     */
    @Test
    public void errorPenaltyTest() {
        // TODO: test errorPenalty
    }

    /**
     * Test the property 'downAction'
     */
    @Test
    public void downActionTest() {
        // TODO: test downAction
    }

    /**
     * Test the property 'rampTime'
     */
    @Test
    public void rampTimeTest() {
        // TODO: test rampTime
    }

    /**
     * Test the property 'port'
     */
    @Test
    public void portTest() {
        // TODO: test port
    }

    /**
     * Test the property 'portType'
     */
    @Test
    public void portTypeTest() {
        // TODO: test portType
    }

    /**
     * Test the property 'status'
     */
    @Test
    public void statusTest() {
        // TODO: test status
    }

    /**
     * Test the property 'nodes'
     */
    @Test
    public void nodesTest() {
        // TODO: test nodes
    }

    /**
     * Test the property 'monitors'
     */
    @Test
    public void monitorsTest() {
        // TODO: test monitors
    }

    /**
     * Test the property 'members'
     */
    @Test
    public void membersTest() {
        // TODO: test members
    }

    /**
     * Test the property 'config'
     */
    @Test
    public void configTest() {
        // TODO: test config
    }

    /**
     * Test the property 'createdBy'
     */
    @Test
    public void createdByTest() {
        // TODO: test createdBy
    }

    /**
     * Test the property 'dateCreated'
     */
    @Test
    public void dateCreatedTest() {
        // TODO: test dateCreated
    }

    /**
     * Test the property 'lastUpdated'
     */
    @Test
    public void lastUpdatedTest() {
        // TODO: test lastUpdated
    }

}
