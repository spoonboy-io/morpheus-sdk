/*
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;


/**
 * Model tests for NetworkInterfaceUpdateSuccessServerComputeServerType
 */
public class NetworkInterfaceUpdateSuccessServerComputeServerTypeTest {
    private final NetworkInterfaceUpdateSuccessServerComputeServerType model = new NetworkInterfaceUpdateSuccessServerComputeServerType();

    /**
     * Model tests for NetworkInterfaceUpdateSuccessServerComputeServerType
     */
    @Test
    public void testNetworkInterfaceUpdateSuccessServerComputeServerType() {
        // TODO: test NetworkInterfaceUpdateSuccessServerComputeServerType
    }

    /**
     * Test the property 'id'
     */
    @Test
    public void idTest() {
        // TODO: test id
    }

    /**
     * Test the property 'code'
     */
    @Test
    public void codeTest() {
        // TODO: test code
    }

    /**
     * Test the property 'name'
     */
    @Test
    public void nameTest() {
        // TODO: test name
    }

    /**
     * Test the property 'description'
     */
    @Test
    public void descriptionTest() {
        // TODO: test description
    }

    /**
     * Test the property 'platform'
     */
    @Test
    public void platformTest() {
        // TODO: test platform
    }

    /**
     * Test the property 'nodeType'
     */
    @Test
    public void nodeTypeTest() {
        // TODO: test nodeType
    }

    /**
     * Test the property 'managed'
     */
    @Test
    public void managedTest() {
        // TODO: test managed
    }

    /**
     * Test the property 'enabled'
     */
    @Test
    public void enabledTest() {
        // TODO: test enabled
    }

    /**
     * Test the property 'vmHypervisor'
     */
    @Test
    public void vmHypervisorTest() {
        // TODO: test vmHypervisor
    }

    /**
     * Test the property 'containerHypervisor'
     */
    @Test
    public void containerHypervisorTest() {
        // TODO: test containerHypervisor
    }

    /**
     * Test the property 'displayOrder'
     */
    @Test
    public void displayOrderTest() {
        // TODO: test displayOrder
    }

    /**
     * Test the property 'selectable'
     */
    @Test
    public void selectableTest() {
        // TODO: test selectable
    }

    /**
     * Test the property 'controlPower'
     */
    @Test
    public void controlPowerTest() {
        // TODO: test controlPower
    }

    /**
     * Test the property 'controlSuspend'
     */
    @Test
    public void controlSuspendTest() {
        // TODO: test controlSuspend
    }

    /**
     * Test the property 'hasAgent'
     */
    @Test
    public void hasAgentTest() {
        // TODO: test hasAgent
    }

    /**
     * Test the property 'creatable'
     */
    @Test
    public void creatableTest() {
        // TODO: test creatable
    }

    /**
     * Test the property 'optionTypes'
     */
    @Test
    public void optionTypesTest() {
        // TODO: test optionTypes
    }

}
