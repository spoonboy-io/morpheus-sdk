/*
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.client.model.InlineResponse20082LoadBalancerInstanceSslCert;
import org.openapitools.client.model.InlineResponse20083LoadBalancerNodeCreatedBy;
import org.threeten.bp.OffsetDateTime;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;


/**
 * Model tests for InlineResponse20083LoadBalancerNode
 */
public class InlineResponse20083LoadBalancerNodeTest {
    private final InlineResponse20083LoadBalancerNode model = new InlineResponse20083LoadBalancerNode();

    /**
     * Model tests for InlineResponse20083LoadBalancerNode
     */
    @Test
    public void testInlineResponse20083LoadBalancerNode() {
        // TODO: test InlineResponse20083LoadBalancerNode
    }

    /**
     * Test the property 'id'
     */
    @Test
    public void idTest() {
        // TODO: test id
    }

    /**
     * Test the property 'name'
     */
    @Test
    public void nameTest() {
        // TODO: test name
    }

    /**
     * Test the property 'visibility'
     */
    @Test
    public void visibilityTest() {
        // TODO: test visibility
    }

    /**
     * Test the property 'description'
     */
    @Test
    public void descriptionTest() {
        // TODO: test description
    }

    /**
     * Test the property 'ipAddress'
     */
    @Test
    public void ipAddressTest() {
        // TODO: test ipAddress
    }

    /**
     * Test the property 'port'
     */
    @Test
    public void portTest() {
        // TODO: test port
    }

    /**
     * Test the property 'portType'
     */
    @Test
    public void portTypeTest() {
        // TODO: test portType
    }

    /**
     * Test the property 'monitorPort'
     */
    @Test
    public void monitorPortTest() {
        // TODO: test monitorPort
    }

    /**
     * Test the property 'weight'
     */
    @Test
    public void weightTest() {
        // TODO: test weight
    }

    /**
     * Test the property 'nodeState'
     */
    @Test
    public void nodeStateTest() {
        // TODO: test nodeState
    }

    /**
     * Test the property 'internalId'
     */
    @Test
    public void internalIdTest() {
        // TODO: test internalId
    }

    /**
     * Test the property 'externalId'
     */
    @Test
    public void externalIdTest() {
        // TODO: test externalId
    }

    /**
     * Test the property 'enabled'
     */
    @Test
    public void enabledTest() {
        // TODO: test enabled
    }

    /**
     * Test the property 'status'
     */
    @Test
    public void statusTest() {
        // TODO: test status
    }

    /**
     * Test the property 'statusMessage'
     */
    @Test
    public void statusMessageTest() {
        // TODO: test statusMessage
    }

    /**
     * Test the property 'statusDate'
     */
    @Test
    public void statusDateTest() {
        // TODO: test statusDate
    }

    /**
     * Test the property 'server'
     */
    @Test
    public void serverTest() {
        // TODO: test server
    }

    /**
     * Test the property 'instanceId'
     */
    @Test
    public void instanceIdTest() {
        // TODO: test instanceId
    }

    /**
     * Test the property 'containerId'
     */
    @Test
    public void containerIdTest() {
        // TODO: test containerId
    }

    /**
     * Test the property 'nodeSource'
     */
    @Test
    public void nodeSourceTest() {
        // TODO: test nodeSource
    }

    /**
     * Test the property 'monitor'
     */
    @Test
    public void monitorTest() {
        // TODO: test monitor
    }

    /**
     * Test the property 'maxConnections'
     */
    @Test
    public void maxConnectionsTest() {
        // TODO: test maxConnections
    }

    /**
     * Test the property 'externalRefType'
     */
    @Test
    public void externalRefTypeTest() {
        // TODO: test externalRefType
    }

    /**
     * Test the property 'externalRefId'
     */
    @Test
    public void externalRefIdTest() {
        // TODO: test externalRefId
    }

    /**
     * Test the property 'externalRefName'
     */
    @Test
    public void externalRefNameTest() {
        // TODO: test externalRefName
    }

    /**
     * Test the property 'createdBy'
     */
    @Test
    public void createdByTest() {
        // TODO: test createdBy
    }

    /**
     * Test the property 'dateCreated'
     */
    @Test
    public void dateCreatedTest() {
        // TODO: test dateCreated
    }

    /**
     * Test the property 'lastUpdated'
     */
    @Test
    public void lastUpdatedTest() {
        // TODO: test lastUpdated
    }

}
