/*
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.DefaultError;
import org.openapitools.client.model.InlineObject218;
import org.openapitools.client.model.InlineObject219;
import org.openapitools.client.model.Model200Success;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SecurityPackagesApi
 */
@Ignore
public class SecurityPackagesApiTest {

    private final SecurityPackagesApi api = new SecurityPackagesApi();

    
    /**
     * Creates a Security Package
     *
     * Creates a security package. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addSecurityPackagesTest() throws ApiException {
        InlineObject218 inlineObject218 = null;
        Object response = api.addSecurityPackages(inlineObject218);

        // TODO: test validations
    }
    
    /**
     * Retrieves a Specific Security Package
     *
     * Retrieves a specific security package. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSecurityPackagesTest() throws ApiException {
        Long id = null;
        Object response = api.getSecurityPackages(id);

        // TODO: test validations
    }
    
    /**
     * Retrieves all Security Packages
     *
     * Retrieves all security packages. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listSecurityPackagesTest() throws ApiException {
        Long max = null;
        Long offset = null;
        String sort = null;
        String direction = null;
        String phrase = null;
        String name = null;
        String labels = null;
        String allLabels = null;
        Object response = api.listSecurityPackages(max, offset, sort, direction, phrase, name, labels, allLabels);

        // TODO: test validations
    }
    
    /**
     * Deletes a Security Package
     *
     * Deletes a specified security package. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeSecurityPackagesTest() throws ApiException {
        Long id = null;
        Model200Success response = api.removeSecurityPackages(id);

        // TODO: test validations
    }
    
    /**
     * Updates a Security Package
     *
     * Updates a security package. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSecurityPackagesTest() throws ApiException {
        Long id = null;
        InlineObject219 inlineObject219 = null;
        Object response = api.updateSecurityPackages(id, inlineObject219);

        // TODO: test validations
    }
    
}
