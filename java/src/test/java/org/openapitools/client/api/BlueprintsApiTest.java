/*
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.1.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AddBlueprint200Response;
import org.openapitools.client.model.AddBlueprintRequest;
import org.openapitools.client.model.DefaultError;
import java.io.File;
import org.openapitools.client.model.GetBlueprint200Response;
import org.openapitools.client.model.ListBlueprints200Response;
import org.openapitools.client.model.Model200Success;
import org.openapitools.client.model.UpdateBlueprintPermissionsRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for BlueprintsApi
 */
@Disabled
public class BlueprintsApiTest {

    private final BlueprintsApi api = new BlueprintsApi();

    /**
     * Create a Blueprint
     *
     * Create a Blueprint
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addBlueprintTest() throws ApiException {
        AddBlueprintRequest addBlueprintRequest = null;
        AddBlueprint200Response response = api.addBlueprint(addBlueprintRequest);
        // TODO: test validations
    }

    /**
     * Delete a Blueprint
     *
     * Delete a Blueprint
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteBlueprintTest() throws ApiException {
        Long id = null;
        Model200Success response = api.deleteBlueprint(id);
        // TODO: test validations
    }

    /**
     * Get a Specific Blueprint
     *
     * This endpoint retrieves a specific blueprint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBlueprintTest() throws ApiException {
        Long id = null;
        GetBlueprint200Response response = api.getBlueprint(id);
        // TODO: test validations
    }

    /**
     * Get All Blueprints
     *
     * This endpoint retrieves all blueprints.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listBlueprintsTest() throws ApiException {
        Long max = null;
        Long offset = null;
        String name = null;
        String phrase = null;
        String labels = null;
        String allLabels = null;
        ListBlueprints200Response response = api.listBlueprints(max, offset, name, phrase, labels, allLabels);
        // TODO: test validations
    }

    /**
     * Updating a Blueprint
     *
     * Update a Blueprint. This overwrites the entire config, so the entire blueprint config should be passed.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateBlueprintTest() throws ApiException {
        Long id = null;
        AddBlueprintRequest addBlueprintRequest = null;
        GetBlueprint200Response response = api.updateBlueprint(id, addBlueprintRequest);
        // TODO: test validations
    }

    /**
     * Update Blueprint Image
     *
     * Update Blueprint Image
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateBlueprintImageTest() throws ApiException {
        Long id = null;
        File templateImage = null;
        GetBlueprint200Response response = api.updateBlueprintImage(id, templateImage);
        // TODO: test validations
    }

    /**
     * Update Blueprint Permissions
     *
     * Update Blueprint Permissions
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateBlueprintPermissionsTest() throws ApiException {
        Long id = null;
        UpdateBlueprintPermissionsRequest updateBlueprintPermissionsRequest = null;
        GetBlueprint200Response response = api.updateBlueprintPermissions(id, updateBlueprintPermissionsRequest);
        // TODO: test validations
    }

}
