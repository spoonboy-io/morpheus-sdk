/*
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.DefaultError;
import org.openapitools.client.model.InlineObject12;
import org.openapitools.client.model.InlineObject13;
import org.openapitools.client.model.InlineObject14;
import org.openapitools.client.model.InlineObject190;
import org.openapitools.client.model.InlineObject191;
import org.openapitools.client.model.InlineObject192;
import org.openapitools.client.model.InlineObject193;
import org.openapitools.client.model.InlineObject194;
import org.openapitools.client.model.InlineObject195;
import org.openapitools.client.model.InlineObject211;
import org.openapitools.client.model.InlineObject212;
import org.openapitools.client.model.InlineObject246;
import org.openapitools.client.model.InlineObject247;
import org.openapitools.client.model.InlineObject248;
import org.openapitools.client.model.InlineObject249;
import org.openapitools.client.model.InlineObject250;
import org.openapitools.client.model.InlineObject251;
import org.openapitools.client.model.InlineResponse200155;
import org.openapitools.client.model.InlineResponse200156;
import org.openapitools.client.model.InlineResponse2008;
import org.openapitools.client.model.Model200Success;
import org.openapitools.client.model.Model200SuccessExpanded;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AutomationApi
 */
@Ignore
public class AutomationApiTest {

    private final AutomationApi api = new AutomationApi();

    
    /**
     * Creates a Execute Schedule
     *
     * Creates a execute schedule. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addExecuteSchedulesTest() throws ApiException {
        InlineObject12 inlineObject12 = null;
        Object response = api.addExecuteSchedules(inlineObject12);

        // TODO: test validations
    }
    
    /**
     * Add Instances to a Power Schedule
     *
     * Add Instances to a Power Schedule. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addPowerScheduleInstancesTest() throws ApiException {
        Long id = null;
        InlineObject192 inlineObject192 = null;
        Model200SuccessExpanded response = api.addPowerScheduleInstances(id, inlineObject192);

        // TODO: test validations
    }
    
    /**
     * Add Servers to a Power Schedule
     *
     * Add Servers to a Power Schedule. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addPowerScheduleServersTest() throws ApiException {
        Long id = null;
        InlineObject193 inlineObject193 = null;
        Model200SuccessExpanded response = api.addPowerScheduleServers(id, inlineObject193);

        // TODO: test validations
    }
    
    /**
     * Creates a Power Schedule
     *
     * Creates a power schedule. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addPowerSchedulesTest() throws ApiException {
        InlineObject190 inlineObject190 = null;
        Object response = api.addPowerSchedules(inlineObject190);

        // TODO: test validations
    }
    
    /**
     * Creates a Scale Threshold
     *
     * Creates a scale threshold. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addScaleThresholdsTest() throws ApiException {
        InlineObject211 inlineObject211 = null;
        Object response = api.addScaleThresholds(inlineObject211);

        // TODO: test validations
    }
    
    /**
     * Creates a Task
     *
     * Creates a task. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addTasksTest() throws ApiException {
        InlineObject246 inlineObject246 = null;
        Object response = api.addTasks(inlineObject246);

        // TODO: test validations
    }
    
    /**
     * Creates a Workflow
     *
     * Creates a workflow. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addWorkflowsTest() throws ApiException {
        InlineObject249 inlineObject249 = null;
        Object response = api.addWorkflows(inlineObject249);

        // TODO: test validations
    }
    
    /**
     * Remove Instances from a Power Schedule
     *
     * Remove Instances from a Power Schedule. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePowerScheduleInstancesTest() throws ApiException {
        Long id = null;
        InlineObject194 inlineObject194 = null;
        Model200SuccessExpanded response = api.deletePowerScheduleInstances(id, inlineObject194);

        // TODO: test validations
    }
    
    /**
     * Remove Servers from a Power Schedule
     *
     * Remove Servers from a Power Schedule. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePowerScheduleServersTest() throws ApiException {
        Long id = null;
        InlineObject195 inlineObject195 = null;
        Model200SuccessExpanded response = api.deletePowerScheduleServers(id, inlineObject195);

        // TODO: test validations
    }
    
    /**
     * Executes an Execution Request
     *
     * Provides API interfaces for executing an arbitrary script or command on an instance, container or host. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void executeExecutionRequestTest() throws ApiException {
        Long instanceId = null;
        Long containerId = null;
        Long serverId = null;
        InlineObject14 inlineObject14 = null;
        InlineResponse2008 response = api.executeExecutionRequest(instanceId, containerId, serverId, inlineObject14);

        // TODO: test validations
    }
    
    /**
     * Executes a Task
     *
     * Executes a task. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void executeTasksTest() throws ApiException {
        Long id = null;
        InlineObject248 inlineObject248 = null;
        Object response = api.executeTasks(id, inlineObject248);

        // TODO: test validations
    }
    
    /**
     * Executes a Workflow
     *
     * Executes a workflow. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void executeWorkflowsTest() throws ApiException {
        Long id = null;
        InlineObject251 inlineObject251 = null;
        Object response = api.executeWorkflows(id, inlineObject251);

        // TODO: test validations
    }
    
    /**
     * Retrieves a Specific Execute Schedule
     *
     * Retrieves a specific execute schedule. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getExecuteSchedulesTest() throws ApiException {
        Long id = null;
        Object response = api.getExecuteSchedules(id);

        // TODO: test validations
    }
    
    /**
     * Retrieves a Specific Execution Request
     *
     * Retrieves a specific execution request. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getExecutionRequestTest() throws ApiException {
        String uniqueId = null;
        Object response = api.getExecutionRequest(uniqueId);

        // TODO: test validations
    }
    
    /**
     * Retrieves a Specific Power Schedule
     *
     * Retrieves a specific power schedule. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPowerSchedulesTest() throws ApiException {
        Long id = null;
        Object response = api.getPowerSchedules(id);

        // TODO: test validations
    }
    
    /**
     * Retrieves a Specific Scale Threshold
     *
     * Retrieves a specific scale threshold. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getScaleThresholdsTest() throws ApiException {
        Long id = null;
        Object response = api.getScaleThresholds(id);

        // TODO: test validations
    }
    
    /**
     * Retrieves a Specific Task Type
     *
     * Retrieves a specific task type. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTaskTypesTest() throws ApiException {
        Long id = null;
        InlineResponse200156 response = api.getTaskTypes(id);

        // TODO: test validations
    }
    
    /**
     * Retrieves a Specific Task
     *
     * Retrieves a specific task. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTasksTest() throws ApiException {
        Long id = null;
        Object response = api.getTasks(id);

        // TODO: test validations
    }
    
    /**
     * Retrieves a Specific Workflow
     *
     * Retrieves a specific workflow. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getWorkflowsTest() throws ApiException {
        Long id = null;
        Object response = api.getWorkflows(id);

        // TODO: test validations
    }
    
    /**
     * Retrieves all Execute Schedules
     *
     * Retrieves all execute schedules. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listExecuteSchedulesTest() throws ApiException {
        Long max = null;
        Long offset = null;
        String sort = null;
        String direction = null;
        String phrase = null;
        String name = null;
        Object response = api.listExecuteSchedules(max, offset, sort, direction, phrase, name);

        // TODO: test validations
    }
    
    /**
     * Retrieves all Power Schedules
     *
     * Retrieves all power schedules. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listPowerSchedulesTest() throws ApiException {
        Long max = null;
        Long offset = null;
        String sort = null;
        String direction = null;
        String phrase = null;
        String name = null;
        Object response = api.listPowerSchedules(max, offset, sort, direction, phrase, name);

        // TODO: test validations
    }
    
    /**
     * Retrieves all Scale Thresholds
     *
     * Retrieves all scale thresholds. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listScaleThresholdsTest() throws ApiException {
        Long max = null;
        Long offset = null;
        String sort = null;
        String direction = null;
        String phrase = null;
        String name = null;
        Object response = api.listScaleThresholds(max, offset, sort, direction, phrase, name);

        // TODO: test validations
    }
    
    /**
     * Retrieves all Task Types
     *
     * A Task Type is a type of automation task. Each type defines its own set of options to be configured for each task. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listTaskTypesTest() throws ApiException {
        String name = null;
        String code = null;
        InlineResponse200155 response = api.listTaskTypes(name, code);

        // TODO: test validations
    }
    
    /**
     * Retrieves all Tasks
     *
     * Retrieves all tasks. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listTasksTest() throws ApiException {
        String type = null;
        Long max = null;
        Long offset = null;
        String sort = null;
        String direction = null;
        String phrase = null;
        String name = null;
        String labels = null;
        String allLabels = null;
        Object response = api.listTasks(type, max, offset, sort, direction, phrase, name, labels, allLabels);

        // TODO: test validations
    }
    
    /**
     * Retrieves all Workflows
     *
     * Retrieves all workflows. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listWorkflowsTest() throws ApiException {
        Long max = null;
        Long offset = null;
        String sort = null;
        String direction = null;
        String phrase = null;
        String name = null;
        String labels = null;
        String allLabels = null;
        String type = null;
        Object response = api.listWorkflows(max, offset, sort, direction, phrase, name, labels, allLabels, type);

        // TODO: test validations
    }
    
    /**
     * Deletes a Execute Schedule
     *
     * Deletes a specified execute schedule. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeExecuteSchedulesTest() throws ApiException {
        Long id = null;
        Model200Success response = api.removeExecuteSchedules(id);

        // TODO: test validations
    }
    
    /**
     * Deletes a Power Schedule
     *
     * Deletes a specified power schedule. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removePowerSchedulesTest() throws ApiException {
        Long id = null;
        Model200Success response = api.removePowerSchedules(id);

        // TODO: test validations
    }
    
    /**
     * Deletes a Scale Threshold
     *
     * Deletes a specified scale threshold. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeScaleThresholdsTest() throws ApiException {
        Long id = null;
        Model200Success response = api.removeScaleThresholds(id);

        // TODO: test validations
    }
    
    /**
     * Deletes a Task
     *
     * Deletes a specified task. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeTasksTest() throws ApiException {
        Long id = null;
        Model200Success response = api.removeTasks(id);

        // TODO: test validations
    }
    
    /**
     * Deletes a Workflow
     *
     * Deletes a specified workflow. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeWorkflowsTest() throws ApiException {
        Long id = null;
        Model200Success response = api.removeWorkflows(id);

        // TODO: test validations
    }
    
    /**
     * Updates a Execute Schedule
     *
     * Updates a execute schedule. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateExecuteSchedulesTest() throws ApiException {
        Long id = null;
        InlineObject13 inlineObject13 = null;
        Object response = api.updateExecuteSchedules(id, inlineObject13);

        // TODO: test validations
    }
    
    /**
     * Updates a Power Schedule
     *
     * Updates a power schedule. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updatePowerSchedulesTest() throws ApiException {
        Long id = null;
        InlineObject191 inlineObject191 = null;
        Object response = api.updatePowerSchedules(id, inlineObject191);

        // TODO: test validations
    }
    
    /**
     * Updates a Scale Threshold
     *
     * Updates a scale threshold. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateScaleThresholdsTest() throws ApiException {
        Long id = null;
        InlineObject212 inlineObject212 = null;
        Object response = api.updateScaleThresholds(id, inlineObject212);

        // TODO: test validations
    }
    
    /**
     * Updates a Task
     *
     * Updates a task. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateTasksTest() throws ApiException {
        Long id = null;
        InlineObject247 inlineObject247 = null;
        Object response = api.updateTasks(id, inlineObject247);

        // TODO: test validations
    }
    
    /**
     * Updates a Workflow
     *
     * Updates a workflow. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateWorkflowsTest() throws ApiException {
        Long id = null;
        InlineObject250 inlineObject250 = null;
        Object response = api.updateWorkflows(id, inlineObject250);

        // TODO: test validations
    }
    
}
