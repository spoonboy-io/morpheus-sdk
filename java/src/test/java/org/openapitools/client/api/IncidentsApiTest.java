/*
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.DefaultError;
import org.openapitools.client.model.InlineObject87;
import org.openapitools.client.model.InlineObject88;
import org.openapitools.client.model.InlineObject89;
import org.openapitools.client.model.InlineObject90;
import org.openapitools.client.model.InlineResponse20055;
import org.openapitools.client.model.Model200Success;
import org.openapitools.client.model.SuccessMessage;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for IncidentsApi
 */
@Ignore
public class IncidentsApiTest {

    private final IncidentsApi api = new IncidentsApi();

    
    /**
     * Create a New Incident
     *
     * Create a new incident.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addIncidentTest() throws ApiException {
        InlineObject87 inlineObject87 = null;
        Object response = api.addIncident(inlineObject87);

        // TODO: test validations
    }
    
    /**
     * Close a Specific Incident
     *
     * Close an existing monitoring incident.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteIncidentsTest() throws ApiException {
        Long id = null;
        Model200Success response = api.deleteIncidents(id);

        // TODO: test validations
    }
    
    /**
     * Get a Specific Incident
     *
     * Get details about a specific incident.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getIncidentsTest() throws ApiException {
        Long id = null;
        InlineResponse20055 response = api.getIncidents(id);

        // TODO: test validations
    }
    
    /**
     * List All Incidents
     *
     * Get a list of monitoring incidents.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listIncidentsTest() throws ApiException {
        Long max = null;
        Long offset = null;
        String status = null;
        String severity = null;
        Object response = api.listIncidents(max, offset, status, severity);

        // TODO: test validations
    }
    
    /**
     * Update Incident
     *
     * Update an existing incident.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateIncidentsTest() throws ApiException {
        Long id = null;
        InlineObject88 inlineObject88 = null;
        Object response = api.updateIncidents(id, inlineObject88);

        // TODO: test validations
    }
    
    /**
     * Reopen a Specific Incident
     *
     * Get details about a specific incident.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateIncidentsReopenTest() throws ApiException {
        Long id = null;
        SuccessMessage response = api.updateIncidentsReopen(id);

        // TODO: test validations
    }
    
    /**
     * Mute All Incidents
     *
     * Mute all existing incident.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateMuteAllIncidentsTest() throws ApiException {
        InlineObject90 inlineObject90 = null;
        Object response = api.updateMuteAllIncidents(inlineObject90);

        // TODO: test validations
    }
    
    /**
     * Mute Incident
     *
     * Mute an existing incident.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateMuteIncidentsTest() throws ApiException {
        Long id = null;
        InlineObject89 inlineObject89 = null;
        Object response = api.updateMuteIncidents(id, inlineObject89);

        // TODO: test validations
    }
    
}
