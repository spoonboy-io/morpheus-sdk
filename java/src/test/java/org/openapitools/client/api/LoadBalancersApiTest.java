/*
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import java.math.BigDecimal;
import org.openapitools.client.model.DefaultError;
import org.openapitools.client.model.InlineObject127;
import org.openapitools.client.model.InlineObject128;
import org.openapitools.client.model.InlineObject129;
import org.openapitools.client.model.InlineObject130;
import org.openapitools.client.model.InlineObject131;
import org.openapitools.client.model.InlineObject132;
import org.openapitools.client.model.InlineObject133;
import org.openapitools.client.model.InlineObject134;
import org.openapitools.client.model.InlineObject135;
import org.openapitools.client.model.InlineObject136;
import org.openapitools.client.model.InlineObject137;
import org.openapitools.client.model.InlineObject138;
import org.openapitools.client.model.InlineResponse20077;
import org.openapitools.client.model.InlineResponse20078;
import org.openapitools.client.model.InlineResponse20079;
import org.openapitools.client.model.InlineResponse20080;
import org.openapitools.client.model.InlineResponse20081;
import org.openapitools.client.model.InlineResponse20082;
import org.openapitools.client.model.InlineResponse20083;
import org.openapitools.client.model.Model200Success;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for LoadBalancersApi
 */
@Ignore
public class LoadBalancersApiTest {

    private final LoadBalancersApi api = new LoadBalancersApi();

    
    /**
     * Create a Load Balancer
     *
     * Available for NSX load balancers only  Use this command to create a load balancer. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createLoadBalancerTest() throws ApiException {
        InlineObject127 inlineObject127 = null;
        InlineResponse20078 response = api.createLoadBalancer(inlineObject127);

        // TODO: test validations
    }
    
    /**
     * Create a Load Balancer Monitor
     *
     * Use this command to create a load balancer Monitor.  This endpoint allows creating a Load Balancer Monitor. Configuration options vary by Load Balancer Type. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createLoadBalancerMonitorTest() throws ApiException {
        BigDecimal loadBalancerId = null;
        InlineObject129 inlineObject129 = null;
        Object response = api.createLoadBalancerMonitor(loadBalancerId, inlineObject129);

        // TODO: test validations
    }
    
    /**
     * Create a Load Balancer Pool
     *
     * Use this command to create a load balancer pool.  This endpoint allows creating a Load Balancer Pool. Configuration options vary by Load Balancer Type. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createLoadBalancerPoolTest() throws ApiException {
        BigDecimal loadBalancerId = null;
        InlineObject131 inlineObject131 = null;
        Object response = api.createLoadBalancerPool(loadBalancerId, inlineObject131);

        // TODO: test validations
    }
    
    /**
     * Create a Load Balancer Pool Node
     *
     * Use this command to create a load balancer pool node.  This endpoint allows creating a Load Balancer Pool Node. Configuration options vary by Load Balancer Type. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createLoadBalancerPoolNodeTest() throws ApiException {
        BigDecimal loadBalancerPoolId = null;
        InlineObject137 inlineObject137 = null;
        Object response = api.createLoadBalancerPoolNode(loadBalancerPoolId, inlineObject137);

        // TODO: test validations
    }
    
    /**
     * Create a Load Balancer Profile
     *
     * Use this command to create a load balancer Profile.  This endpoint allows creating a Load Balancer Profile. Configuration options vary by Load Balancer Type. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createLoadBalancerProfileTest() throws ApiException {
        BigDecimal loadBalancerId = null;
        InlineObject133 inlineObject133 = null;
        Object response = api.createLoadBalancerProfile(loadBalancerId, inlineObject133);

        // TODO: test validations
    }
    
    /**
     * Create a Load Balancer Virtual Server
     *
     * Use this command to create a load balancer virtual server.  This endpoint allows creating a Load Balancer Virtual Server. Configuration options vary by Load Balancer Type. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createLoadBalancerVirtualServerTest() throws ApiException {
        BigDecimal loadBalancerId = null;
        InlineObject135 inlineObject135 = null;
        InlineResponse20082 response = api.createLoadBalancerVirtualServer(loadBalancerId, inlineObject135);

        // TODO: test validations
    }
    
    /**
     * Delete a Load Balancer
     *
     * Will delete a Load Balancer from the system and make it no longer usable.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteLoadBalancerTest() throws ApiException {
        BigDecimal loadBalancerId = null;
        Model200Success response = api.deleteLoadBalancer(loadBalancerId);

        // TODO: test validations
    }
    
    /**
     * Delete a Load Balancer Monitor
     *
     * Will delete a Load Balancer Monitor from the system and make it no longer usable.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteLoadBalancerMonitorTest() throws ApiException {
        BigDecimal loadBalancerId = null;
        Long id = null;
        Model200Success response = api.deleteLoadBalancerMonitor(loadBalancerId, id);

        // TODO: test validations
    }
    
    /**
     * Delete a Load Balancer Pool
     *
     * Will delete a Load Balancer Pool from the system and make it no longer usable.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteLoadBalancerPoolTest() throws ApiException {
        BigDecimal loadBalancerId = null;
        Long id = null;
        Model200Success response = api.deleteLoadBalancerPool(loadBalancerId, id);

        // TODO: test validations
    }
    
    /**
     * Delete a Load Balancer Pool Node
     *
     * Will delete a Load Balancer Pool Node from the system and make it no longer usable.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteLoadBalancerPoolNodeTest() throws ApiException {
        BigDecimal loadBalancerPoolId = null;
        Long id = null;
        Model200Success response = api.deleteLoadBalancerPoolNode(loadBalancerPoolId, id);

        // TODO: test validations
    }
    
    /**
     * Delete a Load Balancer Profile
     *
     * Will delete a Load Balancer Profile from the system and make it no longer usable.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteLoadBalancerProfileTest() throws ApiException {
        BigDecimal loadBalancerId = null;
        Long id = null;
        Model200Success response = api.deleteLoadBalancerProfile(loadBalancerId, id);

        // TODO: test validations
    }
    
    /**
     * Delete a Load Balancer Virtual Server
     *
     * Will delete a Load Balancer Virtual Server from the system and make it no longer usable.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteLoadBalancerVirtualServerTest() throws ApiException {
        BigDecimal loadBalancerId = null;
        Long id = null;
        Model200Success response = api.deleteLoadBalancerVirtualServer(loadBalancerId, id);

        // TODO: test validations
    }
    
    /**
     * Get a Specific Load Balancer
     *
     * This endpoint retrieves a specific Load Balancer.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLoadBalancerTest() throws ApiException {
        BigDecimal loadBalancerId = null;
        InlineResponse20078 response = api.getLoadBalancer(loadBalancerId);

        // TODO: test validations
    }
    
    /**
     * Get a Specific Load Balancer Monitor
     *
     * This endpoint retrieves a specific Load Balancer Monitor.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLoadBalancerMonitorTest() throws ApiException {
        BigDecimal loadBalancerId = null;
        Long id = null;
        InlineResponse20079 response = api.getLoadBalancerMonitor(loadBalancerId, id);

        // TODO: test validations
    }
    
    /**
     * Get a Specific Load Balancer Pool
     *
     * This endpoint retrieves a specific Load Balancer Pool.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLoadBalancerPoolTest() throws ApiException {
        BigDecimal loadBalancerId = null;
        Long id = null;
        InlineResponse20080 response = api.getLoadBalancerPool(loadBalancerId, id);

        // TODO: test validations
    }
    
    /**
     * Get a Specific Load Balancer Pool Node
     *
     * This endpoint retrieves a specific Load Balancer Pool Node.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLoadBalancerPoolNodeTest() throws ApiException {
        BigDecimal loadBalancerPoolId = null;
        Long id = null;
        InlineResponse20083 response = api.getLoadBalancerPoolNode(loadBalancerPoolId, id);

        // TODO: test validations
    }
    
    /**
     * Get a Specific Load Balancer Profile
     *
     * This endpoint retrieves a specific Load Balancer Profile.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLoadBalancerProfileTest() throws ApiException {
        BigDecimal loadBalancerId = null;
        Long id = null;
        InlineResponse20081 response = api.getLoadBalancerProfile(loadBalancerId, id);

        // TODO: test validations
    }
    
    /**
     * Get a Specific Load Balancer Type
     *
     * This endpoint will retrieve a specific load balancer type by id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLoadBalancerTypeTest() throws ApiException {
        Long id = null;
        InlineResponse20077 response = api.getLoadBalancerType(id);

        // TODO: test validations
    }
    
    /**
     * Get a Specific Load Balancer Virtual Server
     *
     * This endpoint retrieves a specific Load Balancer Virtual Server.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLoadBalancerVirtualServerTest() throws ApiException {
        BigDecimal loadBalancerId = null;
        Long id = null;
        InlineResponse20082 response = api.getLoadBalancerVirtualServer(loadBalancerId, id);

        // TODO: test validations
    }
    
    /**
     * Get All Load Balancer Monitors For Load Balancer
     *
     * This endpoint retrieves all load balancer monitors associated with a specified load balancer.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listLoadBalancerMonitorsTest() throws ApiException {
        BigDecimal loadBalancerId = null;
        Long max = null;
        Long offset = null;
        String sort = null;
        String direction = null;
        String name = null;
        String phrase = null;
        Object response = api.listLoadBalancerMonitors(loadBalancerId, max, offset, sort, direction, name, phrase);

        // TODO: test validations
    }
    
    /**
     * Get All Load Balancer Pool Nodes For Load Balancer Pool
     *
     * This endpoint retrieves all load balancer pool nodes associated with a specified load balancer pool.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listLoadBalancerPoolNodesTest() throws ApiException {
        BigDecimal loadBalancerPoolId = null;
        Long max = null;
        Long offset = null;
        String sort = null;
        String direction = null;
        String phrase = null;
        Object response = api.listLoadBalancerPoolNodes(loadBalancerPoolId, max, offset, sort, direction, phrase);

        // TODO: test validations
    }
    
    /**
     * Get All Load Balancer Pools For Load Balancer
     *
     * This endpoint retrieves all load balancer pools associated with a specified load balancer.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listLoadBalancerPoolsTest() throws ApiException {
        BigDecimal loadBalancerId = null;
        Long max = null;
        Long offset = null;
        String sort = null;
        String direction = null;
        String name = null;
        String phrase = null;
        Object response = api.listLoadBalancerPools(loadBalancerId, max, offset, sort, direction, name, phrase);

        // TODO: test validations
    }
    
    /**
     * Get All Load Balancer Profiles For Load Balancer
     *
     * This endpoint retrieves all load balancer profiles associated with a specified load balancer.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listLoadBalancerProfilesTest() throws ApiException {
        BigDecimal loadBalancerId = null;
        Long max = null;
        Long offset = null;
        String sort = null;
        String direction = null;
        String name = null;
        String phrase = null;
        Object response = api.listLoadBalancerProfiles(loadBalancerId, max, offset, sort, direction, name, phrase);

        // TODO: test validations
    }
    
    /**
     * Get All Load Balancer Types
     *
     * This endpoint retrieves all Load Balancer Types.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listLoadBalancerTypesTest() throws ApiException {
        Long max = null;
        Long offset = null;
        String sort = null;
        String direction = null;
        Boolean optionTypes = null;
        String phrase = null;
        String name = null;
        String code = null;
        Object response = api.listLoadBalancerTypes(max, offset, sort, direction, optionTypes, phrase, name, code);

        // TODO: test validations
    }
    
    /**
     * Get All Load Balancer Virtual Servers For Load Balancer
     *
     * This endpoint retrieves load balancer virtual servers associated with a specified load balancer.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listLoadBalancerVirtualServersTest() throws ApiException {
        BigDecimal loadBalancerId = null;
        Long max = null;
        Long offset = null;
        String sort = null;
        String direction = null;
        String phrase = null;
        String vipName = null;
        String vipAddress = null;
        String vipHostname = null;
        Object response = api.listLoadBalancerVirtualServers(loadBalancerId, max, offset, sort, direction, phrase, vipName, vipAddress, vipHostname);

        // TODO: test validations
    }
    
    /**
     * Get All Load Balancers
     *
     * This endpoint retrieves all load balancers associated with the account.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listLoadBalancersTest() throws ApiException {
        Long max = null;
        Long offset = null;
        String sort = null;
        String direction = null;
        String name = null;
        String phrase = null;
        Object response = api.listLoadBalancers(max, offset, sort, direction, name, phrase);

        // TODO: test validations
    }
    
    /**
     * Refresh a Load Balancer
     *
     * Will refresh a Load Balancer.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void refreshLoadBalancerTest() throws ApiException {
        BigDecimal loadBalancerId = null;
        Object response = api.refreshLoadBalancer(loadBalancerId);

        // TODO: test validations
    }
    
    /**
     * Update a Load Balancer
     *
     * Available for NSX load balancers only  Use this command to update an existing load balancer. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateLoadBalancerTest() throws ApiException {
        BigDecimal loadBalancerId = null;
        InlineObject128 inlineObject128 = null;
        InlineResponse20078 response = api.updateLoadBalancer(loadBalancerId, inlineObject128);

        // TODO: test validations
    }
    
    /**
     * Update a Load Balancer Monitor
     *
     * Use this command to update an existing load balancer monitor.  This endpoint allows updating a Load Balancer Monitor. Configuration options vary by Load Balancer Type. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateLoadBalancerMonitorTest() throws ApiException {
        BigDecimal loadBalancerId = null;
        Long id = null;
        InlineObject130 inlineObject130 = null;
        Object response = api.updateLoadBalancerMonitor(loadBalancerId, id, inlineObject130);

        // TODO: test validations
    }
    
    /**
     * Update a Load Balancer Pool
     *
     * Use this command to update an existing load balancer pool.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateLoadBalancerPoolTest() throws ApiException {
        BigDecimal loadBalancerId = null;
        Long id = null;
        InlineObject132 inlineObject132 = null;
        Object response = api.updateLoadBalancerPool(loadBalancerId, id, inlineObject132);

        // TODO: test validations
    }
    
    /**
     * Update a Load Balancer Pool Node
     *
     * Use this command to update an existing load balancer pool node.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateLoadBalancerPoolNodeTest() throws ApiException {
        BigDecimal loadBalancerPoolId = null;
        Long id = null;
        InlineObject138 inlineObject138 = null;
        Object response = api.updateLoadBalancerPoolNode(loadBalancerPoolId, id, inlineObject138);

        // TODO: test validations
    }
    
    /**
     * Update a Load Balancer Profile
     *
     * Use this command to update an existing load balancer Profile.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateLoadBalancerProfileTest() throws ApiException {
        BigDecimal loadBalancerId = null;
        Long id = null;
        InlineObject134 inlineObject134 = null;
        Object response = api.updateLoadBalancerProfile(loadBalancerId, id, inlineObject134);

        // TODO: test validations
    }
    
    /**
     * Update a Load Balancer Virtual Server
     *
     * Use this command to update an existing load balancer virtual server.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateLoadBalancerVirtualServerTest() throws ApiException {
        BigDecimal loadBalancerId = null;
        Long id = null;
        InlineObject136 inlineObject136 = null;
        InlineResponse20082 response = api.updateLoadBalancerVirtualServer(loadBalancerId, id, inlineObject136);

        // TODO: test validations
    }
    
}
