/*
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import java.math.BigDecimal;
import org.openapitools.client.model.DefaultError;
import org.openapitools.client.model.InlineObject142;
import org.openapitools.client.model.InlineObject143;
import org.openapitools.client.model.InlineObject144;
import org.openapitools.client.model.InlineObject145;
import org.openapitools.client.model.InlineObject146;
import org.openapitools.client.model.InlineObject147;
import org.openapitools.client.model.InlineObject148;
import org.openapitools.client.model.InlineObject149;
import org.openapitools.client.model.InlineObject150;
import org.openapitools.client.model.InlineObject151;
import org.openapitools.client.model.InlineObject152;
import org.openapitools.client.model.InlineObject153;
import org.openapitools.client.model.InlineObject154;
import org.openapitools.client.model.InlineObject155;
import org.openapitools.client.model.InlineObject156;
import org.openapitools.client.model.InlineObject157;
import org.openapitools.client.model.InlineObject158;
import org.openapitools.client.model.InlineObject159;
import org.openapitools.client.model.InlineObject160;
import org.openapitools.client.model.InlineObject161;
import org.openapitools.client.model.InlineObject162;
import org.openapitools.client.model.InlineObject163;
import org.openapitools.client.model.InlineObject164;
import org.openapitools.client.model.InlineObject165;
import org.openapitools.client.model.InlineObject166;
import org.openapitools.client.model.InlineObject167;
import org.openapitools.client.model.InlineObject168;
import org.openapitools.client.model.InlineObject169;
import org.openapitools.client.model.InlineObject170;
import org.openapitools.client.model.InlineObject171;
import org.openapitools.client.model.InlineObject172;
import org.openapitools.client.model.InlineObject173;
import org.openapitools.client.model.InlineObject174;
import org.openapitools.client.model.InlineObject175;
import org.openapitools.client.model.InlineObject176;
import org.openapitools.client.model.InlineObject177;
import org.openapitools.client.model.InlineObject178;
import org.openapitools.client.model.InlineObject179;
import org.openapitools.client.model.InlineObject180;
import org.openapitools.client.model.InlineObject181;
import org.openapitools.client.model.InlineObject244;
import org.openapitools.client.model.InlineObject245;
import org.openapitools.client.model.InlineResponse200100;
import org.openapitools.client.model.InlineResponse200101;
import org.openapitools.client.model.InlineResponse200102;
import org.openapitools.client.model.InlineResponse200103;
import org.openapitools.client.model.InlineResponse200104;
import org.openapitools.client.model.InlineResponse200105;
import org.openapitools.client.model.InlineResponse200106;
import org.openapitools.client.model.InlineResponse200107;
import org.openapitools.client.model.InlineResponse200108;
import org.openapitools.client.model.InlineResponse200109;
import org.openapitools.client.model.InlineResponse200110;
import org.openapitools.client.model.InlineResponse200111;
import org.openapitools.client.model.InlineResponse200112;
import org.openapitools.client.model.InlineResponse200113;
import org.openapitools.client.model.InlineResponse200114;
import org.openapitools.client.model.InlineResponse200115;
import org.openapitools.client.model.InlineResponse200116;
import org.openapitools.client.model.InlineResponse200117;
import org.openapitools.client.model.InlineResponse200118;
import org.openapitools.client.model.InlineResponse200119;
import org.openapitools.client.model.InlineResponse200120;
import org.openapitools.client.model.InlineResponse200121;
import org.openapitools.client.model.InlineResponse200154;
import org.openapitools.client.model.InlineResponse20086;
import org.openapitools.client.model.InlineResponse20087;
import org.openapitools.client.model.InlineResponse20088;
import org.openapitools.client.model.InlineResponse20089;
import org.openapitools.client.model.InlineResponse20090;
import org.openapitools.client.model.InlineResponse20091;
import org.openapitools.client.model.InlineResponse20092;
import org.openapitools.client.model.InlineResponse20093;
import org.openapitools.client.model.InlineResponse20094;
import org.openapitools.client.model.InlineResponse20095;
import org.openapitools.client.model.InlineResponse20096;
import org.openapitools.client.model.InlineResponse20097;
import org.openapitools.client.model.InlineResponse20098;
import org.openapitools.client.model.InlineResponse20099;
import org.openapitools.client.model.Model200Success;
import org.openapitools.client.model.Model400Error;
import org.openapitools.client.model.Model401Error;
import org.openapitools.client.model.Model403Error;
import org.openapitools.client.model.Model404Error;
import org.openapitools.client.model.Model405Error;
import org.openapitools.client.model.Model406Error;
import org.openapitools.client.model.Model410Error;
import org.openapitools.client.model.Model429Error;
import org.openapitools.client.model.Model500Error;
import org.openapitools.client.model.Model503Error;
import org.openapitools.client.model.SuccessId;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for NetworksApi
 */
@Ignore
public class NetworksApiTest {

    private final NetworksApi api = new NetworksApi();

    
    /**
     * Create a Network DHCP Relay
     *
     * Create a Network DHCP Relay. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNetworkDhcpRelayTest() throws ApiException {
        BigDecimal serverId = null;
        InlineObject167 inlineObject167 = null;
        SuccessId response = api.createNetworkDhcpRelay(serverId, inlineObject167);

        // TODO: test validations
    }
    
    /**
     * Create a Network DHCP Server
     *
     * Create a Network DHCP Server. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNetworkDhcpServerTest() throws ApiException {
        BigDecimal serverId = null;
        InlineObject169 inlineObject169 = null;
        SuccessId response = api.createNetworkDhcpServer(serverId, inlineObject169);

        // TODO: test validations
    }
    
    /**
     * Create a Network Domain
     *
     * Create a Network Domain. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNetworkDomainTest() throws ApiException {
        InlineObject163 inlineObject163 = null;
        InlineResponse200109 response = api.createNetworkDomain(inlineObject163);

        // TODO: test validations
    }
    
    /**
     * Create a Network Firewall Rule
     *
     * Use this command to create a network firewall rule. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNetworkFirewallRuleTest() throws ApiException {
        BigDecimal serverId = null;
        InlineObject172 inlineObject172 = null;
        SuccessId response = api.createNetworkFirewallRule(serverId, inlineObject172);

        // TODO: test validations
    }
    
    /**
     * Create a Network Firewall Rule Group
     *
     * Use this command to create a network firewall rule group. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNetworkFirewallRuleGroupTest() throws ApiException {
        BigDecimal serverId = null;
        InlineObject174 inlineObject174 = null;
        SuccessId response = api.createNetworkFirewallRuleGroup(serverId, inlineObject174);

        // TODO: test validations
    }
    
    /**
     * Create a Network Group
     *
     * Use this command to create a network group. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNetworkGroupTest() throws ApiException {
        InlineObject146 inlineObject146 = null;
        SuccessId response = api.createNetworkGroup(inlineObject146);

        // TODO: test validations
    }
    
    /**
     * Create a Network Pool
     *
     * Create a Network Pool. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNetworkPoolTest() throws ApiException {
        InlineObject160 inlineObject160 = null;
        InlineResponse200106 response = api.createNetworkPool(inlineObject160);

        // TODO: test validations
    }
    
    /**
     * Create a Network Pool IP Address
     *
     * Create an IP Address for a Specific Network Pool 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNetworkPoolIpTest() throws ApiException {
        Long id = null;
        InlineObject162 inlineObject162 = null;
        InlineResponse200107 response = api.createNetworkPoolIp(id, inlineObject162);

        // TODO: test validations
    }
    
    /**
     * Create a Network Pool Server
     *
     * This endpoint allows creating a Network Pool Server. Only certain types of integrations support creating and deleting network pool servers, such as Bluecat, Infoblox, phpIPAM, and Solar Winds. Configuration options vary by type. Note that creating a pool server will automatically create and associate the corresponding network integration object, but management is done via the network pool server object.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNetworkPoolServerTest() throws ApiException {
        InlineObject180 inlineObject180 = null;
        Model200Success response = api.createNetworkPoolServer(inlineObject180);

        // TODO: test validations
    }
    
    /**
     * Create a Network Proxy
     *
     * Create a Network Proxy. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNetworkProxyTest() throws ApiException {
        InlineObject165 inlineObject165 = null;
        InlineResponse200110 response = api.createNetworkProxy(inlineObject165);

        // TODO: test validations
    }
    
    /**
     * Create a Network Router
     *
     * Use this command to create a network router. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNetworkRouterTest() throws ApiException {
        InlineObject148 inlineObject148 = null;
        SuccessId response = api.createNetworkRouter(inlineObject148);

        // TODO: test validations
    }
    
    /**
     * Create a Network Router BGP Neighbor
     *
     * Use this command to create a BGP Neighbor for an existing network router.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNetworkRouterBgpNeighborTest() throws ApiException {
        BigDecimal routerId = null;
        InlineObject150 inlineObject150 = null;
        SuccessId response = api.createNetworkRouterBgpNeighbor(routerId, inlineObject150);

        // TODO: test validations
    }
    
    /**
     * Create a Network Router Firewall Rule
     *
     * Use this command to create a firewall rule for an existing network router. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNetworkRouterFirewallRuleTest() throws ApiException {
        BigDecimal routerId = null;
        InlineObject152 inlineObject152 = null;
        SuccessId response = api.createNetworkRouterFirewallRule(routerId, inlineObject152);

        // TODO: test validations
    }
    
    /**
     * Create a Network Router Firewall Rule Group
     *
     * Use this command to create a network firewall rule group. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNetworkRouterFirewallRuleGroupTest() throws ApiException {
        BigDecimal routerId = null;
        InlineObject154 inlineObject154 = null;
        SuccessId response = api.createNetworkRouterFirewallRuleGroup(routerId, inlineObject154);

        // TODO: test validations
    }
    
    /**
     * Create a Network Router NAT
     *
     * Use this command to create a NAT for an existing network router.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNetworkRouterNatTest() throws ApiException {
        BigDecimal routerId = null;
        InlineObject156 inlineObject156 = null;
        SuccessId response = api.createNetworkRouterNat(routerId, inlineObject156);

        // TODO: test validations
    }
    
    /**
     * Create a Network Router Route
     *
     * Use this command to create a route for an existing network router.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNetworkRouterRouteTest() throws ApiException {
        BigDecimal routerId = null;
        InlineObject159 inlineObject159 = null;
        SuccessId response = api.createNetworkRouterRoute(routerId, inlineObject159);

        // TODO: test validations
    }
    
    /**
     * Create a Network Server Group
     *
     * Use this command to create a network server group. Note: Only available for NSX-T network integrations. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNetworkServerGroupTest() throws ApiException {
        BigDecimal serverId = null;
        InlineObject176 inlineObject176 = null;
        SuccessId response = api.createNetworkServerGroup(serverId, inlineObject176);

        // TODO: test validations
    }
    
    /**
     * Create a Network Transport Zone
     *
     * Use this command to create a network transport zone.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNetworkTransportZoneTest() throws ApiException {
        BigDecimal serverId = null;
        InlineObject178 inlineObject178 = null;
        SuccessId response = api.createNetworkTransportZone(serverId, inlineObject178);

        // TODO: test validations
    }
    
    /**
     * Create a Network
     *
     * This endpoint allows creating a Network. Only certain types of clouds support creating and deleting networks. Configuration options vary by Network Types.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNetworksTest() throws ApiException {
        InlineObject142 inlineObject142 = null;
        Object response = api.createNetworks(inlineObject142);

        // TODO: test validations
    }
    
    /**
     * Create a Network Static Route
     *
     * Use this command to create a route for an existing network. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createStaticRouteTest() throws ApiException {
        Long id = null;
        InlineObject144 inlineObject144 = null;
        SuccessId response = api.createStaticRoute(id, inlineObject144);

        // TODO: test validations
    }
    
    /**
     * Create a Subnet
     *
     * This endpoint allows creating a Subnet. Only certain types of clouds support creating and deleting subnets. Configuration options vary for each Subnet Type.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSubnetTest() throws ApiException {
        InlineObject244 inlineObject244 = null;
        InlineResponse200154 response = api.createSubnet(inlineObject244);

        // TODO: test validations
    }
    
    /**
     * Delete a Network
     *
     * Will delete a Network from the system and make it no longer usable.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNetworkTest() throws ApiException {
        Long id = null;
        Model200Success response = api.deleteNetwork(id);

        // TODO: test validations
    }
    
    /**
     * Delete a Network DHCP Relay
     *
     * Will delete a Network DHCP Relay from the system and make it no longer usable.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNetworkDhcpRelayTest() throws ApiException {
        Long id = null;
        BigDecimal serverId = null;
        Model200Success response = api.deleteNetworkDhcpRelay(id, serverId);

        // TODO: test validations
    }
    
    /**
     * Delete a Network DHCP Server
     *
     * Will delete a Network DHCP Server from the system and make it no longer usable.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNetworkDhcpServerTest() throws ApiException {
        Long id = null;
        BigDecimal serverId = null;
        Model200Success response = api.deleteNetworkDhcpServer(id, serverId);

        // TODO: test validations
    }
    
    /**
     * Delete a Network Domain
     *
     * Will delete a Network Domain from the system and make it no longer usable.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNetworkDomainTest() throws ApiException {
        Long id = null;
        Model200Success response = api.deleteNetworkDomain(id);

        // TODO: test validations
    }
    
    /**
     * Delete a Network Firewall Rule
     *
     * Will delete a Network Firewall Rule from the system and make it no longer usable.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNetworkFirewallRuleTest() throws ApiException {
        Long id = null;
        BigDecimal serverId = null;
        Model200Success response = api.deleteNetworkFirewallRule(id, serverId);

        // TODO: test validations
    }
    
    /**
     * Delete a Network firewall rule group
     *
     * Will delete a network firewall rule group.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNetworkFirewallRuleGroupTest() throws ApiException {
        Long id = null;
        BigDecimal serverId = null;
        Model200Success response = api.deleteNetworkFirewallRuleGroup(id, serverId);

        // TODO: test validations
    }
    
    /**
     * Delete a Network Group
     *
     * Will delete a Network Group from the system and make it no longer usable.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNetworkGroupTest() throws ApiException {
        Long id = null;
        Model200Success response = api.deleteNetworkGroup(id);

        // TODO: test validations
    }
    
    /**
     * Delete a Network Pool
     *
     * Will delete a Network Pool from the system and make it no longer usable.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNetworkPoolTest() throws ApiException {
        Long id = null;
        Model200Success response = api.deleteNetworkPool(id);

        // TODO: test validations
    }
    
    /**
     * Delete a host record associated with an IP Address for a Specific Network Pool
     *
     * Will delete a host record associated with an IP address for a specific network pool and free up the address
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNetworkPoolIpTest() throws ApiException {
        Long networkPoolId = null;
        Long id = null;
        Model200Success response = api.deleteNetworkPoolIp(networkPoolId, id);

        // TODO: test validations
    }
    
    /**
     * Delete a Network Pool Server
     *
     * Will delete a Network Pool Server from the system and make it no longer usable.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNetworkPoolServerTest() throws ApiException {
        Long id = null;
        Model200Success response = api.deleteNetworkPoolServer(id);

        // TODO: test validations
    }
    
    /**
     * Delete a Network Proxy
     *
     * Will delete a Network Proxy from the system and make it no longer usable.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNetworkProxyTest() throws ApiException {
        Long id = null;
        Model200Success response = api.deleteNetworkProxy(id);

        // TODO: test validations
    }
    
    /**
     * Delete a Network Router
     *
     * Will delete a Network Router from the system and make it no longer usable.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNetworkRouterTest() throws ApiException {
        Long id = null;
        Model200Success response = api.deleteNetworkRouter(id);

        // TODO: test validations
    }
    
    /**
     * Delete a Network Router BGP Neighbor
     *
     * Will delete a BGP Neighbor from a network router.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNetworkRouterBgpNeighborTest() throws ApiException {
        Long id = null;
        BigDecimal routerId = null;
        Model200Success response = api.deleteNetworkRouterBgpNeighbor(id, routerId);

        // TODO: test validations
    }
    
    /**
     * Delete a Network Router Firewall Rule
     *
     * Will delete a firewall rule from a network router.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNetworkRouterFirewallRuleTest() throws ApiException {
        Long id = null;
        BigDecimal routerId = null;
        Model200Success response = api.deleteNetworkRouterFirewallRule(id, routerId);

        // TODO: test validations
    }
    
    /**
     * Delete a Network Router firewall rule group
     *
     * Will delete a network router firewall rule group.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNetworkRouterFirewallRuleGroupTest() throws ApiException {
        Long id = null;
        BigDecimal routerId = null;
        Model200Success response = api.deleteNetworkRouterFirewallRuleGroup(id, routerId);

        // TODO: test validations
    }
    
    /**
     * Delete a Network Router NAT
     *
     * Will delete a NAT from a network router.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNetworkRouterNatTest() throws ApiException {
        Long id = null;
        BigDecimal routerId = null;
        Model200Success response = api.deleteNetworkRouterNat(id, routerId);

        // TODO: test validations
    }
    
    /**
     * Delete a Network Router Route
     *
     * Will delete a Route from a network router.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNetworkRouterRouteTest() throws ApiException {
        Long id = null;
        BigDecimal routerId = null;
        Model200Success response = api.deleteNetworkRouterRoute(id, routerId);

        // TODO: test validations
    }
    
    /**
     * Delete a Network Server Group
     *
     * Will delete a Network Server Group from the system and make it no longer usable. Note: Only available for NSX-T network integrations. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNetworkServerGroupTest() throws ApiException {
        Long id = null;
        BigDecimal serverId = null;
        Model200Success response = api.deleteNetworkServerGroup(id, serverId);

        // TODO: test validations
    }
    
    /**
     * Delete a Network Transport Zone
     *
     * Will delete a Network Transport Zone from the system and make it no longer usable.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNetworkTransportZoneTest() throws ApiException {
        Long id = null;
        BigDecimal serverId = null;
        Model200Success response = api.deleteNetworkTransportZone(id, serverId);

        // TODO: test validations
    }
    
    /**
     * Delete a Network Static Route
     *
     * Will delete a route from a network.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteStaticRouteTest() throws ApiException {
        Long id = null;
        BigDecimal routeId = null;
        Model200Success response = api.deleteStaticRoute(id, routeId);

        // TODO: test validations
    }
    
    /**
     * Delete a Subnet
     *
     * Will delete a Subnet from the system and make it no longer usable.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSubnetTest() throws ApiException {
        Long id = null;
        Model200Success response = api.deleteSubnet(id);

        // TODO: test validations
    }
    
    /**
     * Get All Floating IPs
     *
     * This endpoint retrieves all network floating IPs associated with the account. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllNetworkFloatingIpsTest() throws ApiException {
        String phrase = null;
        String ipAddress = null;
        String ipStatus = null;
        Long zoneId = null;
        Long serverId = null;
        Object response = api.getAllNetworkFloatingIps(phrase, ipAddress, ipStatus, zoneId, serverId);

        // TODO: test validations
    }
    
    /**
     * Get a Specific Network
     *
     * This endpoint retrieves a specific Network. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNetworkTest() throws ApiException {
        Long id = null;
        InlineResponse20087 response = api.getNetwork(id);

        // TODO: test validations
    }
    
    /**
     * Get a Specific Network DHCP Relay
     *
     * This endpoint retrieves a specific Network DHCP Relay. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNetworkDhcpRelayTest() throws ApiException {
        Long id = null;
        BigDecimal serverId = null;
        InlineResponse200112 response = api.getNetworkDhcpRelay(id, serverId);

        // TODO: test validations
    }
    
    /**
     * Get all Network DHCP Relays for Network Relay
     *
     * This endpoint retrieves all Network DHCP Relays for a specified Network Service. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNetworkDhcpRelaysTest() throws ApiException {
        BigDecimal serverId = null;
        Long max = null;
        Long offset = null;
        String sort = null;
        String direction = null;
        String phrase = null;
        Object response = api.getNetworkDhcpRelays(serverId, max, offset, sort, direction, phrase);

        // TODO: test validations
    }
    
    /**
     * Get a Specific Network DHCP Server
     *
     * This endpoint retrieves a specific Network DHCP Server. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNetworkDhcpServerTest() throws ApiException {
        Long id = null;
        BigDecimal serverId = null;
        InlineResponse200113 response = api.getNetworkDhcpServer(id, serverId);

        // TODO: test validations
    }
    
    /**
     * Get all Network DHCP Servers for Network Server
     *
     * This endpoint retrieves all Network DHCP Servers for a specified Network Service. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNetworkDhcpServersTest() throws ApiException {
        BigDecimal serverId = null;
        Long max = null;
        Long offset = null;
        String sort = null;
        String direction = null;
        String phrase = null;
        Object response = api.getNetworkDhcpServers(serverId, max, offset, sort, direction, phrase);

        // TODO: test validations
    }
    
    /**
     * Get a Specific Network Domain
     *
     * This endpoint retrieves a specific Network Domain. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNetworkDomainTest() throws ApiException {
        Long id = null;
        InlineResponse200109 response = api.getNetworkDomain(id);

        // TODO: test validations
    }
    
    /**
     * Get all Network Domains
     *
     * This endpoint retrieves all Network Domains associated with the account. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNetworkDomainsTest() throws ApiException {
        String name = null;
        String phrase = null;
        Object response = api.getNetworkDomains(name, phrase);

        // TODO: test validations
    }
    
    /**
     * Get a Specific Network Edge Cluster
     *
     * This endpoint retrieves a specific network Edge Cluster. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNetworkEdgeClusterTest() throws ApiException {
        Long id = null;
        BigDecimal serverId = null;
        InlineResponse200114 response = api.getNetworkEdgeCluster(id, serverId);

        // TODO: test validations
    }
    
    /**
     * Get all Network Edge Clusters for Network Server
     *
     * This endpoint retrieves all Network Edge Clusters for a specified Network Service. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNetworkEdgeClustersTest() throws ApiException {
        BigDecimal serverId = null;
        Long max = null;
        Long offset = null;
        String sort = null;
        String direction = null;
        String phrase = null;
        Object response = api.getNetworkEdgeClusters(serverId, max, offset, sort, direction, phrase);

        // TODO: test validations
    }
    
    /**
     * Get a Specific Network Firewall Rule
     *
     * This endpoint retrieves a specific Network Firewall Rule. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNetworkFirewallRuleTest() throws ApiException {
        Long id = null;
        BigDecimal serverId = null;
        InlineResponse200115 response = api.getNetworkFirewallRule(id, serverId);

        // TODO: test validations
    }
    
    /**
     * Get a Specific Network Firewall Rule Group
     *
     * This endpoint retrieves a specific Network Firewall Rule Group. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNetworkFirewallRuleGroupTest() throws ApiException {
        Long id = null;
        BigDecimal serverId = null;
        InlineResponse200116 response = api.getNetworkFirewallRuleGroup(id, serverId);

        // TODO: test validations
    }
    
    /**
     * Get all Network Firewall Rule Groups for Network Server
     *
     * This endpoint retrieves all Network Firewall Rule Groups for a specified Network Service. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNetworkFirewallRuleGroupsTest() throws ApiException {
        BigDecimal serverId = null;
        Long max = null;
        Long offset = null;
        String sort = null;
        String direction = null;
        String phrase = null;
        Object response = api.getNetworkFirewallRuleGroups(serverId, max, offset, sort, direction, phrase);

        // TODO: test validations
    }
    
    /**
     * Get all Network Firewall Rules for Network Server
     *
     * This endpoint retrieves all Network Firewall Rules for a specified Network Service. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNetworkFirewallRulesTest() throws ApiException {
        BigDecimal serverId = null;
        Long max = null;
        Long offset = null;
        String sort = null;
        String direction = null;
        String phrase = null;
        Object response = api.getNetworkFirewallRules(serverId, max, offset, sort, direction, phrase);

        // TODO: test validations
    }
    
    /**
     * Get a Specific Floating IP
     *
     * This endpoint retrieves a specific Floating IP. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNetworkFloatingIpTest() throws ApiException {
        Long id = null;
        InlineResponse200108 response = api.getNetworkFloatingIp(id);

        // TODO: test validations
    }
    
    /**
     * Get a Specific Network Group
     *
     * This endpoint retrieves a specific Network Group. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNetworkGroupTest() throws ApiException {
        Long id = null;
        InlineResponse20091 response = api.getNetworkGroup(id);

        // TODO: test validations
    }
    
    /**
     * Get all Network Groups
     *
     * This endpoint retrieves all Network Groups associated with the account. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNetworkGroupsTest() throws ApiException {
        InlineResponse20090 response = api.getNetworkGroups();

        // TODO: test validations
    }
    
    /**
     * Get a Specific Network Pool
     *
     * This endpoint retrieves a specific Network Pool. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNetworkPoolTest() throws ApiException {
        Long id = null;
        InlineResponse200106 response = api.getNetworkPool(id);

        // TODO: test validations
    }
    
    /**
     * Get a Specific IP Address for a Specific Network Pool
     *
     * This endpoint retrieves a specific IP address for a specific Network Pool. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNetworkPoolIpTest() throws ApiException {
        Long networkPoolId = null;
        Long id = null;
        Object response = api.getNetworkPoolIp(networkPoolId, id);

        // TODO: test validations
    }
    
    /**
     * Get all IP Addresses for a Specific Network Pool
     *
     * This endpoint retrieves a list of IP addresses for a specific Network Pool. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNetworkPoolIpsTest() throws ApiException {
        Long id = null;
        Object response = api.getNetworkPoolIps(id);

        // TODO: test validations
    }
    
    /**
     * Get a Specific Network Pool Server
     *
     * This endpoint retrieves a specific Network Pool Server. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNetworkPoolServerTest() throws ApiException {
        Long id = null;
        InlineResponse200120 response = api.getNetworkPoolServer(id);

        // TODO: test validations
    }
    
    /**
     * Retrieves a Specific Network Pool Server Type
     *
     * Retrieves a specific Network Pool Server Type. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNetworkPoolServerTypeTest() throws ApiException {
        Long id = null;
        InlineResponse200121 response = api.getNetworkPoolServerType(id);

        // TODO: test validations
    }
    
    /**
     * Get all Network Pools
     *
     * This endpoint retrieves all Network Pools associated with the account. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNetworkPoolsTest() throws ApiException {
        String name = null;
        String phrase = null;
        Object response = api.getNetworkPools(name, phrase);

        // TODO: test validations
    }
    
    /**
     * Get all Network Proxies
     *
     * This endpoint retrieves all Network Proxies associated with the account. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNetworkProxiesTest() throws ApiException {
        String name = null;
        String phrase = null;
        Object response = api.getNetworkProxies(name, phrase);

        // TODO: test validations
    }
    
    /**
     * Get a Specific Network Proxy
     *
     * This endpoint retrieves a specific Network Proxy. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNetworkProxyTest() throws ApiException {
        Long id = null;
        InlineResponse200111 response = api.getNetworkProxy(id);

        // TODO: test validations
    }
    
    /**
     * Get a Specific Network Router
     *
     * This endpoint retrieves a specific Network Router. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNetworkRouterTest() throws ApiException {
        Long id = null;
        InlineResponse20095 response = api.getNetworkRouter(id);

        // TODO: test validations
    }
    
    /**
     * Get a Network Router BGP Neighbor
     *
     * This endpoint retrieves a network router BGP Neighbor for specified network router.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNetworkRouterBgpNeighborTest() throws ApiException {
        Long id = null;
        BigDecimal routerId = null;
        InlineResponse20097 response = api.getNetworkRouterBgpNeighbor(id, routerId);

        // TODO: test validations
    }
    
    /**
     * Get a Firewall Rule for Network Router
     *
     * This endpoint retrieves a firewall rule. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNetworkRouterFirewallRuleTest() throws ApiException {
        Long id = null;
        BigDecimal routerId = null;
        InlineResponse20099 response = api.getNetworkRouterFirewallRule(id, routerId);

        // TODO: test validations
    }
    
    /**
     * Get a Firewall Rule Group for Network Router
     *
     * This endpoint retrieves a firewall rule group for specified network router. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNetworkRouterFirewallRuleGroupTest() throws ApiException {
        Long id = null;
        BigDecimal routerId = null;
        InlineResponse200101 response = api.getNetworkRouterFirewallRuleGroup(id, routerId);

        // TODO: test validations
    }
    
    /**
     * Get all Network Firewall Rule Groups for Network Router
     *
     * This endpoint retrieves all Network Firewall Rule Groups for a specified Network Service. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNetworkRouterFirewallRuleGroupsTest() throws ApiException {
        BigDecimal routerId = null;
        InlineResponse200100 response = api.getNetworkRouterFirewallRuleGroups(routerId);

        // TODO: test validations
    }
    
    /**
     * Get a Network Router NAT
     *
     * This endpoint retrieves a network router NAT for specified network router.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNetworkRouterNatTest() throws ApiException {
        Long id = null;
        BigDecimal routerId = null;
        InlineResponse200103 response = api.getNetworkRouterNat(id, routerId);

        // TODO: test validations
    }
    
    /**
     * Get a Route for Network Router
     *
     * This endpoint retrieves a Route. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNetworkRouterRouteTest() throws ApiException {
        Long id = null;
        BigDecimal routerId = null;
        InlineResponse200105 response = api.getNetworkRouterRoute(id, routerId);

        // TODO: test validations
    }
    
    /**
     * Get a Specific Network Router Type
     *
     * This endpoint retrieves a specific network router type. Use this API to retrieve list of available option types for a specific network router type. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNetworkRouterTypeTest() throws ApiException {
        Long id = null;
        InlineResponse20093 response = api.getNetworkRouterType(id);

        // TODO: test validations
    }
    
    /**
     * Get all Network Routers
     *
     * This endpoint retrieves all Network Routers 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNetworkRoutersTest() throws ApiException {
        InlineResponse20094 response = api.getNetworkRouters();

        // TODO: test validations
    }
    
    /**
     * Get all BGP Neighbors for Network Router
     *
     * This endpoint retrieves all BGP Neighbors for specified network router.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNetworkRoutersBgpNeighborsTest() throws ApiException {
        BigDecimal routerId = null;
        InlineResponse20096 response = api.getNetworkRoutersBgpNeighbors(routerId);

        // TODO: test validations
    }
    
    /**
     * Get all Firewall Rules for Network Router
     *
     * This endpoint retrieves all firewall rules for specified network router. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNetworkRoutersFirewallRulesTest() throws ApiException {
        BigDecimal routerId = null;
        InlineResponse20098 response = api.getNetworkRoutersFirewallRules(routerId);

        // TODO: test validations
    }
    
    /**
     * Get all Network Router NATs for Network Router
     *
     * This endpoint retrieves all NATs for specified network router. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNetworkRoutersNatsTest() throws ApiException {
        BigDecimal routerId = null;
        InlineResponse200102 response = api.getNetworkRoutersNats(routerId);

        // TODO: test validations
    }
    
    /**
     * Get all Routes for Network Router
     *
     * This endpoint retrieves all Routes for specified network router. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNetworkRoutersRoutesTest() throws ApiException {
        BigDecimal routerId = null;
        InlineResponse200104 response = api.getNetworkRoutersRoutes(routerId);

        // TODO: test validations
    }
    
    /**
     * Get a specific Network Server Group
     *
     * This endpoint retrieves a specific Network Server Group for a Network Server. Note: Only available for NSX-T network integrations. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNetworkServerGroupTest() throws ApiException {
        BigDecimal serverId = null;
        Long id = null;
        InlineResponse200117 response = api.getNetworkServerGroup(serverId, id);

        // TODO: test validations
    }
    
    /**
     * Get Subnets for a Network
     *
     * This endpoint retrieves all Subnets under a specific network. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNetworkSubnetsTest() throws ApiException {
        Long id = null;
        Object response = api.getNetworkSubnets(id);

        // TODO: test validations
    }
    
    /**
     * Get a Specific Network Transport Zone
     *
     * This endpoint retrieves a specific Network Transport Zone. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNetworkTransportZoneTest() throws ApiException {
        Long id = null;
        BigDecimal serverId = null;
        InlineResponse200118 response = api.getNetworkTransportZone(id, serverId);

        // TODO: test validations
    }
    
    /**
     * Get all Network Transport Zones for Network Server
     *
     * This endpoint retrieves all Network Transport Zones for a specified Network Service.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNetworkTransportZonesTest() throws ApiException {
        BigDecimal serverId = null;
        Long max = null;
        Long offset = null;
        String sort = null;
        String direction = null;
        String phrase = null;
        Object response = api.getNetworkTransportZones(serverId, max, offset, sort, direction, phrase);

        // TODO: test validations
    }
    
    /**
     * Get a Specific Network Type
     *
     * This endpoint retrieves a specific Network Type.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNetworkTypeTest() throws ApiException {
        Long id = null;
        InlineResponse20086 response = api.getNetworkType(id);

        // TODO: test validations
    }
    
    /**
     * Get a Static Route for a Network
     *
     * This endpoint retrieves a network static route for specified network. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStaticRouteTest() throws ApiException {
        Long id = null;
        BigDecimal routeId = null;
        InlineResponse20089 response = api.getStaticRoute(id, routeId);

        // TODO: test validations
    }
    
    /**
     * Get all Static Routes for a Network
     *
     * This endpoint retrieves all routes for specified network. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStaticRoutesTest() throws ApiException {
        Long id = null;
        InlineResponse20088 response = api.getStaticRoutes(id);

        // TODO: test validations
    }
    
    /**
     * Get a Specific Subnet
     *
     * This endpoint retrieves a specific Subnet. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSubnetTest() throws ApiException {
        Long id = null;
        InlineResponse200154 response = api.getSubnet(id);

        // TODO: test validations
    }
    
    /**
     * Get All Network Pool Server Types
     *
     * This endpoint retrieves all Network Pool Server Types 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNetworkPoolServerTypesTest() throws ApiException {
        Long max = null;
        Long offset = null;
        String sort = null;
        String direction = null;
        String phrase = null;
        String name = null;
        String code = null;
        Object response = api.listNetworkPoolServerTypes(max, offset, sort, direction, phrase, name, code);

        // TODO: test validations
    }
    
    /**
     * Get All Network Pool Servers
     *
     * This endpoint retrieves all Network Pool Servers associated with the account. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNetworkPoolServersTest() throws ApiException {
        Long max = null;
        Long offset = null;
        String sort = null;
        String direction = null;
        String phrase = null;
        String name = null;
        Object response = api.listNetworkPoolServers(max, offset, sort, direction, phrase, name);

        // TODO: test validations
    }
    
    /**
     * Get all Network Router Types
     *
     * Get all Network Router Types. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNetworkRouterTypesTest() throws ApiException {
        InlineResponse20092 response = api.listNetworkRouterTypes();

        // TODO: test validations
    }
    
    /**
     * Get all Network Server Groups for Network Server
     *
     * This endpoint retrieves all Network Server Groups for a specified Network Service. Note: Only available for NSX-T network integrations. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNetworkServerGroupsTest() throws ApiException {
        BigDecimal serverId = null;
        Long max = null;
        Long offset = null;
        String sort = null;
        String direction = null;
        String phrase = null;
        Object response = api.listNetworkServerGroups(serverId, max, offset, sort, direction, phrase);

        // TODO: test validations
    }
    
    /**
     * Get All Network Services
     *
     * This endpoint retrieves all Network Services associated with the account.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNetworkServicesTest() throws ApiException {
        String name = null;
        String phrase = null;
        InlineResponse200119 response = api.listNetworkServices(name, phrase);

        // TODO: test validations
    }
    
    /**
     * Network Types
     *
     * Provides API for viewing Network Types and their configuration options.  This endpoint retrieves all Network Types. The sample response has been abbreviated. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNetworkTypesTest() throws ApiException {
        String name = null;
        String code = null;
        String phrase = null;
        Object response = api.listNetworkTypes(name, code, phrase);

        // TODO: test validations
    }
    
    /**
     * Get All Networks
     *
     * This endpoint retrieves all Networks associated with the account. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNetworksTest() throws ApiException {
        String name = null;
        String phrase = null;
        String labels = null;
        String allLabels = null;
        Object response = api.listNetworks(name, phrase, labels, allLabels);

        // TODO: test validations
    }
    
    /**
     * Get All Subnet Types
     *
     * Provides API for viewing Network Subnet Types and their configuration options.  This endpoint retrieves all Network Types. The sample response has been abbreviated. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listSubnetTypesTest() throws ApiException {
        String name = null;
        String phrase = null;
        Object response = api.listSubnetTypes(name, phrase);

        // TODO: test validations
    }
    
    /**
     * Get All Subnets
     *
     * This endpoint retrieves all Subnets associated with the account. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listSubnetsTest() throws ApiException {
        String name = null;
        String phrase = null;
        String labels = null;
        String allLabels = null;
        Object response = api.listSubnets(name, phrase, labels, allLabels);

        // TODO: test validations
    }
    
    /**
     * Refresh a Network Server/Integration
     *
     * Refreshes a network server/integration. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void refreshNetworkServerTest() throws ApiException {
        Long id = null;
        SuccessId response = api.refreshNetworkServer(id);

        // TODO: test validations
    }
    
    /**
     * Release a Floating IP
     *
     * Release a floating IP detaching it from the associated node/VM. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void releaseNetworkFloatingIpTest() throws ApiException {
        Long id = null;
        Model200Success response = api.releaseNetworkFloatingIp(id);

        // TODO: test validations
    }
    
    /**
     * Update a Network
     *
     * This endpoint allows updating a Network. Configuration options vary by Network Types. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateNetworkTest() throws ApiException {
        Long id = null;
        InlineObject143 inlineObject143 = null;
        Object response = api.updateNetwork(id, inlineObject143);

        // TODO: test validations
    }
    
    /**
     * Update a Network DHCP Relay
     *
     * Use this command to update an existing Network DHCP Relay. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateNetworkDhcpRelayTest() throws ApiException {
        Long id = null;
        BigDecimal serverId = null;
        InlineObject168 inlineObject168 = null;
        Model200Success response = api.updateNetworkDhcpRelay(id, serverId, inlineObject168);

        // TODO: test validations
    }
    
    /**
     * Update a Network DHCP Server
     *
     * Use this command to update an existing Network DHCP Server. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateNetworkDhcpServerTest() throws ApiException {
        Long id = null;
        BigDecimal serverId = null;
        InlineObject170 inlineObject170 = null;
        Model200Success response = api.updateNetworkDhcpServer(id, serverId, inlineObject170);

        // TODO: test validations
    }
    
    /**
     * Update a Network Domain
     *
     * Update a Network Domain. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateNetworkDomainTest() throws ApiException {
        Long id = null;
        InlineObject164 inlineObject164 = null;
        InlineResponse200109 response = api.updateNetworkDomain(id, inlineObject164);

        // TODO: test validations
    }
    
    /**
     * Update a Network Edge Cluster
     *
     * Use this command to update an existing network Edge Cluster. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateNetworkEdgeClusterTest() throws ApiException {
        Long id = null;
        BigDecimal serverId = null;
        InlineObject171 inlineObject171 = null;
        Model200Success response = api.updateNetworkEdgeCluster(id, serverId, inlineObject171);

        // TODO: test validations
    }
    
    /**
     * Update a Network Firewall Rule
     *
     * Use this command to update an existing network firewall Rule. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateNetworkFirewallRuleTest() throws ApiException {
        Long id = null;
        BigDecimal serverId = null;
        InlineObject173 inlineObject173 = null;
        Model200Success response = api.updateNetworkFirewallRule(id, serverId, inlineObject173);

        // TODO: test validations
    }
    
    /**
     * Update a Network Firewall Rule Group
     *
     * Use this command to update an existing Network Firewall Rule Group. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateNetworkFirewallRuleGroupTest() throws ApiException {
        Long id = null;
        BigDecimal serverId = null;
        InlineObject175 inlineObject175 = null;
        Model200Success response = api.updateNetworkFirewallRuleGroup(id, serverId, inlineObject175);

        // TODO: test validations
    }
    
    /**
     * Update a Network Group
     *
     * Use this command to update an existing network Group. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateNetworkGroupTest() throws ApiException {
        Long id = null;
        InlineObject147 inlineObject147 = null;
        Model200Success response = api.updateNetworkGroup(id, inlineObject147);

        // TODO: test validations
    }
    
    /**
     * Update a Network Pool
     *
     * Update a Network Pool. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateNetworkPoolTest() throws ApiException {
        Long id = null;
        InlineObject161 inlineObject161 = null;
        InlineResponse200106 response = api.updateNetworkPool(id, inlineObject161);

        // TODO: test validations
    }
    
    /**
     * Update a Network Pool Server
     *
     * This endpoint allows updating a Network Pool Server. Configuration options vary by type. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateNetworkPoolServerTest() throws ApiException {
        Long id = null;
        InlineObject181 inlineObject181 = null;
        Model200Success response = api.updateNetworkPoolServer(id, inlineObject181);

        // TODO: test validations
    }
    
    /**
     * Update a Network Proxy
     *
     * Use this command to update an existing network Proxy. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateNetworkProxyTest() throws ApiException {
        Long id = null;
        InlineObject166 inlineObject166 = null;
        Model200Success response = api.updateNetworkProxy(id, inlineObject166);

        // TODO: test validations
    }
    
    /**
     * Update a Network Router
     *
     * Use this command to update an existing network Router. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateNetworkRouterTest() throws ApiException {
        Long id = null;
        InlineObject149 inlineObject149 = null;
        Model200Success response = api.updateNetworkRouter(id, inlineObject149);

        // TODO: test validations
    }
    
    /**
     * Update Network Router BGP Neighbor
     *
     * Use this command to update an existing Network Router BGP Neighbor. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateNetworkRouterBgpNeighborTest() throws ApiException {
        Long id = null;
        BigDecimal routerId = null;
        InlineObject151 inlineObject151 = null;
        Model200Success response = api.updateNetworkRouterBgpNeighbor(id, routerId, inlineObject151);

        // TODO: test validations
    }
    
    /**
     * Update a Network Router Firewall Rule
     *
     * Use this command to update an existing network router firewall rule. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateNetworkRouterFirewallRuleTest() throws ApiException {
        Long id = null;
        BigDecimal routerId = null;
        InlineObject153 inlineObject153 = null;
        Model200Success response = api.updateNetworkRouterFirewallRule(id, routerId, inlineObject153);

        // TODO: test validations
    }
    
    /**
     * Update a Network Router Firewall Rule Group
     *
     * Use this command to update an existing Network Router Firewall Rule Group. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateNetworkRouterFirewallRuleGroupTest() throws ApiException {
        Long id = null;
        BigDecimal routerId = null;
        InlineObject155 inlineObject155 = null;
        Model200Success response = api.updateNetworkRouterFirewallRuleGroup(id, routerId, inlineObject155);

        // TODO: test validations
    }
    
    /**
     * Update Network Router NAT
     *
     * Use this command to update an existing Network Router NAT. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateNetworkRouterNatTest() throws ApiException {
        Long id = null;
        BigDecimal routerId = null;
        InlineObject157 inlineObject157 = null;
        Model200Success response = api.updateNetworkRouterNat(id, routerId, inlineObject157);

        // TODO: test validations
    }
    
    /**
     * Update Network Router Permissions
     *
     * Update Network Router Permissions 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateNetworkRouterPermissionsTest() throws ApiException {
        BigDecimal routerId = null;
        InlineObject158 inlineObject158 = null;
        SuccessId response = api.updateNetworkRouterPermissions(routerId, inlineObject158);

        // TODO: test validations
    }
    
    /**
     * Update a Network Server Group
     *
     * Use this command to update an existing network server group. Note: Only available for NSX-T network integrations. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateNetworkServerGroupTest() throws ApiException {
        Long id = null;
        BigDecimal serverId = null;
        InlineObject177 inlineObject177 = null;
        Model200Success response = api.updateNetworkServerGroup(id, serverId, inlineObject177);

        // TODO: test validations
    }
    
    /**
     * Update a Network Transport Zone
     *
     * Use this command to update an existing network Transport Zone. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateNetworkTransportZoneTest() throws ApiException {
        Long id = null;
        BigDecimal serverId = null;
        InlineObject179 inlineObject179 = null;
        Model200Success response = api.updateNetworkTransportZone(id, serverId, inlineObject179);

        // TODO: test validations
    }
    
    /**
     * Update a Network Static Route
     *
     * Use this command to update a route. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateStaticRouteTest() throws ApiException {
        Long id = null;
        BigDecimal routeId = null;
        InlineObject145 inlineObject145 = null;
        SuccessId response = api.updateStaticRoute(id, routeId, inlineObject145);

        // TODO: test validations
    }
    
    /**
     * Update a Subnet
     *
     * This endpoint allows updating a Subnet. Only certain types of clouds support this action. Configuration options vary for each Subnet Type. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSubnetTest() throws ApiException {
        Long id = null;
        InlineObject245 inlineObject245 = null;
        InlineResponse200154 response = api.updateSubnet(id, inlineObject245);

        // TODO: test validations
    }
    
}
