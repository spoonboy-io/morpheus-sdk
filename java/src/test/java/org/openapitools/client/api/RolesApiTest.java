/*
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.DefaultError;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.InlineObject208;
import org.openapitools.client.model.InlineObject209;
import org.openapitools.client.model.InlineObject210;
import org.openapitools.client.model.Model200Success;
import org.openapitools.client.model.OneOfrolePermissionBlueprintrolePermissionBlueprintAll;
import org.openapitools.client.model.OneOfrolePermissionCatalogItemTyperolePermissionCatalogItemTypeAll;
import org.openapitools.client.model.OneOfrolePermissionCloudrolePermissionCloudAll;
import org.openapitools.client.model.OneOfrolePermissionFeaturerolePermissionDefaultGrouprolePermissionDefaultCloudrolePermissionDefaultInstanceTyperolePermissionDefaultBlueprintrolePermissionDefaultReportTyperolePermissionDefaultPersonarolePermissionDefaultCatalogItemTyperolePermissionDefaultVDIPoolrolePermissionDefaultTaskSetrolePermissionDefaultTask;
import org.openapitools.client.model.OneOfrolePermissionGrouprolePermissionGroupAll;
import org.openapitools.client.model.OneOfrolePermissionInstanceTyperolePermissionInstanceTypeAll;
import org.openapitools.client.model.OneOfrolePermissionPersonarolePermissionPersonaAll;
import org.openapitools.client.model.OneOfrolePermissionReportTyperolePermissionReportTypeAll;
import org.openapitools.client.model.OneOfrolePermissionTaskSetrolePermissionTaskSetAll;
import org.openapitools.client.model.OneOfrolePermissionTaskrolePermissionTaskAll;
import org.openapitools.client.model.Role;
import org.openapitools.client.model.UNKNOWN_BASE_TYPE;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RolesApi
 */
@Ignore
public class RolesApiTest {

    private final RolesApi api = new RolesApi();

    
    /**
     * Create role
     *
     * Create a new role.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addRolesTest() throws ApiException {
        Boolean includeDefaultAccess = null;
        InlineObject208 inlineObject208 = null;
        Role response = api.addRoles(includeDefaultAccess, inlineObject208);

        // TODO: test validations
    }
    
    /**
     * Delete role
     *
     * Delete an existing role. A role cannot be deleted while it is still in use.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteRoleTest() throws ApiException {
        Long id = null;
        Model200Success response = api.deleteRole(id);

        // TODO: test validations
    }
    
    /**
     * Get role
     *
     * Get details about a role
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRoleTest() throws ApiException {
        Long id = null;
        Boolean includeDefaultAccess = null;
        Role response = api.getRole(id, includeDefaultAccess);

        // TODO: test validations
    }
    
    /**
     * List roles
     *
     * Get a list of roles.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listRolesTest() throws ApiException {
        String phrase = null;
        Long max = null;
        Long offset = null;
        String sort = null;
        String direction = null;
        String authority = null;
        String roleType = null;
        Object response = api.listRoles(phrase, max, offset, sort, direction, authority, roleType);

        // TODO: test validations
    }
    
    /**
     * Update role
     *
     * Update an existing role.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateRoleTest() throws ApiException {
        Long id = null;
        Boolean includeDefaultAccess = null;
        InlineObject209 inlineObject209 = null;
        Role response = api.updateRole(id, includeDefaultAccess, inlineObject209);

        // TODO: test validations
    }
    
    /**
     * Customizing Blueprint Access
     *
     * Customizing Blueprint Access
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateRoleBlueprintAccessTest() throws ApiException {
        Long id = null;
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        Object response = api.updateRoleBlueprintAccess(id, UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * Customizing Catalog Item Type Access
     *
     * Customizing Catalog Item Type Access
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateRoleCatalogItemTypeAccessTest() throws ApiException {
        Long id = null;
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        Object response = api.updateRoleCatalogItemTypeAccess(id, UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * Customizing Cloud Access
     *
     * Customizing Cloud Access
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateRoleCloudAccessTest() throws ApiException {
        Long id = null;
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        Object response = api.updateRoleCloudAccess(id, UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * Customizing Group Access
     *
     * Customizing Group Access
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateRoleGroupAccessTest() throws ApiException {
        Long id = null;
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        Object response = api.updateRoleGroupAccess(id, UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * Customizing Instance Type Access
     *
     * Customizing Instance Type Access
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateRoleInstanceTypeAccessTest() throws ApiException {
        Long id = null;
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        Object response = api.updateRoleInstanceTypeAccess(id, UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * Updating Role Permissions
     *
     * Update a feature permission or default permission category (group, cloud, persona, ect.)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateRolePermissionTest() throws ApiException {
        Long id = null;
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        Object response = api.updateRolePermission(id, UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * Customizing Persona Access
     *
     * Customizing Persona Access
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateRolePersonaAccessTest() throws ApiException {
        Long id = null;
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        Object response = api.updateRolePersonaAccess(id, UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * Customizing Report Type Access
     *
     * Customizing Report Type Access
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateRoleReportTypeAccessTest() throws ApiException {
        Long id = null;
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        Object response = api.updateRoleReportTypeAccess(id, UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * Customizing Task Access
     *
     * Customizing Task Access
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateRoleTaskAccessTest() throws ApiException {
        Long id = null;
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        Object response = api.updateRoleTaskAccess(id, UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * Customizing VDI Pool Access
     *
     * Customizing VDI Pool Access
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateRoleVDIPoolAccessTest() throws ApiException {
        Long id = null;
        InlineObject210 inlineObject210 = null;
        Object response = api.updateRoleVDIPoolAccess(id, inlineObject210);

        // TODO: test validations
    }
    
    /**
     * Customizing Workflow Access
     *
     * Customizing Workflow Access
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateRoleWorkflowAccessTest() throws ApiException {
        Long id = null;
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        Object response = api.updateRoleWorkflowAccess(id, UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
}
