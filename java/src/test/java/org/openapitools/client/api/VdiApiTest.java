/*
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AnyOfobject200Success;
import org.openapitools.client.model.DefaultError;
import org.openapitools.client.model.InlineObject257;
import org.openapitools.client.model.InlineObject258;
import org.openapitools.client.model.InlineObject259;
import org.openapitools.client.model.InlineObject260;
import org.openapitools.client.model.InlineObject261;
import org.openapitools.client.model.InlineObject262;
import org.openapitools.client.model.InlineResponse200160;
import org.openapitools.client.model.InlineResponse200161;
import org.openapitools.client.model.InlineResponse200162;
import org.openapitools.client.model.InlineResponse200163;
import org.openapitools.client.model.InlineResponse200164;
import org.openapitools.client.model.Model200Success;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for VdiApi
 */
@Ignore
public class VdiApiTest {

    private final VdiApi api = new VdiApi();

    
    /**
     * Creates a VDI App
     *
     * Creates a VDI app. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addVDIAppsTest() throws ApiException {
        InlineObject257 inlineObject257 = null;
        AnyOfobject200Success response = api.addVDIApps(inlineObject257);

        // TODO: test validations
    }
    
    /**
     * Creates a VDI Gateway
     *
     * Creates a VDI gateway. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addVDIGatewaysTest() throws ApiException {
        InlineObject259 inlineObject259 = null;
        AnyOfobject200Success response = api.addVDIGateways(inlineObject259);

        // TODO: test validations
    }
    
    /**
     * Creates a VDI Pool
     *
     * Creates a VDI pool. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addVDIPoolsTest() throws ApiException {
        InlineObject261 inlineObject261 = null;
        AnyOfobject200Success response = api.addVDIPools(inlineObject261);

        // TODO: test validations
    }
    
    /**
     * Allocate Virtual Desktop
     *
     * This endpoint allocates a specific virtual desktop for use by your user. It will return the desktop and its allocation for your user, or an error if allocation fails, which will occur if the desktop is fully allocated already. If your user already has an allocation, the desktop and allocation will still be returned succesfully and the server does not make any changes. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addVdiAllocationTest() throws ApiException {
        Long id = null;
        Object response = api.addVdiAllocation(id);

        // TODO: test validations
    }
    
    /**
     * Retrieves a Specific VDI Allocation
     *
     * Retrieves a specific VDI allocation. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getVDIAllocationsTest() throws ApiException {
        Long id = null;
        InlineResponse200163 response = api.getVDIAllocations(id);

        // TODO: test validations
    }
    
    /**
     * Retrieves a Specific VDI App
     *
     * Retrieves a specific VDI app. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getVDIAppsTest() throws ApiException {
        Long id = null;
        InlineResponse200160 response = api.getVDIApps(id);

        // TODO: test validations
    }
    
    /**
     * Retrieves a Specific VDI Gateway
     *
     * Retrieves a specific VDI gateway. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getVDIGatewaysTest() throws ApiException {
        Long id = null;
        InlineResponse200161 response = api.getVDIGateways(id);

        // TODO: test validations
    }
    
    /**
     * Retrieves a Specific VDI Pool
     *
     * Retrieves a specific VDI pool. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getVDIPoolsTest() throws ApiException {
        Long id = null;
        InlineResponse200162 response = api.getVDIPools(id);

        // TODO: test validations
    }
    
    /**
     * Get a Specific Virtual Desktop
     *
     * This endpoint retrieves a specific virtual desktop along with the allocation for your user if one exists. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getVdiTest() throws ApiException {
        Long id = null;
        InlineResponse200164 response = api.getVdi(id);

        // TODO: test validations
    }
    
    /**
     * Retrieves all VDI Allocations
     *
     * Retrieves all VDI allocations. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listVDIAllocationsTest() throws ApiException {
        Long max = null;
        Long offset = null;
        String sort = null;
        String direction = null;
        String phrase = null;
        String name = null;
        String id = null;
        String status = null;
        Long poolId = null;
        Long userId = null;
        Object response = api.listVDIAllocations(max, offset, sort, direction, phrase, name, id, status, poolId, userId);

        // TODO: test validations
    }
    
    /**
     * Retrieves all VDI Apps
     *
     * Retrieves all VDI apps. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listVDIAppsTest() throws ApiException {
        Long max = null;
        Long offset = null;
        String sort = null;
        String direction = null;
        String phrase = null;
        String name = null;
        String description = null;
        Object response = api.listVDIApps(max, offset, sort, direction, phrase, name, description);

        // TODO: test validations
    }
    
    /**
     * Retrieves all VDI Gateways
     *
     * Retrieves all VDI gateways. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listVDIGatewaysTest() throws ApiException {
        Long max = null;
        Long offset = null;
        String sort = null;
        String direction = null;
        String phrase = null;
        String name = null;
        String description = null;
        Object response = api.listVDIGateways(max, offset, sort, direction, phrase, name, description);

        // TODO: test validations
    }
    
    /**
     * Retrieves all VDI Pools
     *
     * Retrieves all VDI pools. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listVDIPoolsTest() throws ApiException {
        Long max = null;
        Long offset = null;
        String sort = null;
        String direction = null;
        String phrase = null;
        String name = null;
        String description = null;
        Boolean enabled = null;
        Object response = api.listVDIPools(max, offset, sort, direction, phrase, name, description, enabled);

        // TODO: test validations
    }
    
    /**
     * List Virtual Desktops
     *
     * This endpoint retrieves all virtual desktops along with the allocation for your user if one exists. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listVdiTest() throws ApiException {
        String phrase = null;
        Long max = null;
        Long offset = null;
        String sort = null;
        String direction = null;
        String name = null;
        String description = null;
        Object response = api.listVdi(phrase, max, offset, sort, direction, name, description);

        // TODO: test validations
    }
    
    /**
     * Deletes a VDI App
     *
     * Deletes a specified VDI App. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeVDIAppsTest() throws ApiException {
        Long id = null;
        Model200Success response = api.removeVDIApps(id);

        // TODO: test validations
    }
    
    /**
     * Deletes a VDI Gateway
     *
     * Deletes a specified VDI Gateway. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeVDIGatewaysTest() throws ApiException {
        Long id = null;
        Model200Success response = api.removeVDIGateways(id);

        // TODO: test validations
    }
    
    /**
     * Deletes a VDI Pool
     *
     * Deletes a specified VDI Pool. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeVDIPoolsTest() throws ApiException {
        Long id = null;
        Model200Success response = api.removeVDIPools(id);

        // TODO: test validations
    }
    
    /**
     * Updates a VDI App Configuration or Icon
     *
     * Updates a VDI App configuration or icon. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateVDIAppsTest() throws ApiException {
        Long id = null;
        InlineObject258 inlineObject258 = null;
        AnyOfobject200Success response = api.updateVDIApps(id, inlineObject258);

        // TODO: test validations
    }
    
    /**
     * Updates a VDI Gateway Configuration
     *
     * Updates a VDI Gateway configuration or icon. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateVDIGatewaysTest() throws ApiException {
        Long id = null;
        InlineObject260 inlineObject260 = null;
        AnyOfobject200Success response = api.updateVDIGateways(id, inlineObject260);

        // TODO: test validations
    }
    
    /**
     * Updates a VDI Pool Configuration or Icon
     *
     * Updates a VDI Pool configuration or icon. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateVDIPoolsTest() throws ApiException {
        Long id = null;
        InlineObject262 inlineObject262 = null;
        AnyOfobject200Success response = api.updateVDIPools(id, inlineObject262);

        // TODO: test validations
    }
    
}
