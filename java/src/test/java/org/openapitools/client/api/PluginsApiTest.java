/*
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.DefaultError;
import java.io.File;
import org.openapitools.client.model.InlineObject183;
import org.openapitools.client.model.Model200Success;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PluginsApi
 */
@Ignore
public class PluginsApiTest {

    private final PluginsApi api = new PluginsApi();

    
    /**
     * Retrieves a Specific Plugin
     *
     * Retrieves a specific plugin. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPluginTest() throws ApiException {
        Long id = null;
        Object response = api.getPlugin(id);

        // TODO: test validations
    }
    
    /**
     * Retrieves all Plugins
     *
     * Retrieves all plugins. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listPluginsTest() throws ApiException {
        Long max = null;
        Long offset = null;
        String sort = null;
        String direction = null;
        String phrase = null;
        String name = null;
        Object response = api.listPlugins(max, offset, sort, direction, phrase, name);

        // TODO: test validations
    }
    
    /**
     * Deletes a Plugin
     *
     * Deletes a specified plugin. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removePluginTest() throws ApiException {
        Long id = null;
        Model200Success response = api.removePlugin(id);

        // TODO: test validations
    }
    
    /**
     * Updates a Plugin
     *
     * Updates a plugin settings. See Upload Plugin for installing a new version of a plugin. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updatePluginTest() throws ApiException {
        Long id = null;
        InlineObject183 inlineObject183 = null;
        Object response = api.updatePlugin(id, inlineObject183);

        // TODO: test validations
    }
    
    /**
     * Upload Plugin
     *
     * Upload a plugin .jar file to install a new plugin or update an existing plugin to a new version. This endpoint parses the plugin file and starts the asynchronous process of installing and reloading the plugin. The plugin status will be &#x60;installing&#x60; or &#x60;updating&#x60; until the reload is complete and then the status changes to &#x60;loaded&#x60; or &#x60;error&#x60; if the installation fails. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void uploadPluginTest() throws ApiException {
        File file = null;
        Object response = api.uploadPlugin(file);

        // TODO: test validations
    }
    
}
