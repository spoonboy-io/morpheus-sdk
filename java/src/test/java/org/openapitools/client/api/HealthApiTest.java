/*
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.DefaultError;
import java.io.File;
import org.openapitools.client.model.InlineObject80;
import org.openapitools.client.model.InlineObject81;
import org.openapitools.client.model.Model200Success;
import org.openapitools.client.model.Ping;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for HealthApi
 */
@Ignore
public class HealthApiTest {

    private final HealthApi api = new HealthApi();

    
    /**
     * Acknowledge a Health Alarm
     *
     * Acknowledge a specific health alarm.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void acknowledgeHealthAlarmTest() throws ApiException {
        Long id = null;
        InlineObject81 inlineObject81 = null;
        Model200Success response = api.acknowledgeHealthAlarm(id, inlineObject81);

        // TODO: test validations
    }
    
    /**
     * Acknowledge Many Health Alarms
     *
     * Acknowledge health alarms.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void acknowledgeHealthAlarmsTest() throws ApiException {
        InlineObject80 inlineObject80 = null;
        Model200Success response = api.acknowledgeHealthAlarms(inlineObject80);

        // TODO: test validations
    }
    
    /**
     * Export Appliance Health Logs
     *
     * This endpoint downloads the morpheus appliance logs as a file attachment. By default, the most recent 10,000 log entries are returned, with the newest at the end of the file. The format for each log entry is &#x60;timestamp&#x60; &#x60;level&#x60; &#x60;message&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void exportHealthLogsTest() throws ApiException {
        Long max = null;
        Long offset = null;
        String sort = null;
        String direction = null;
        String phrase = null;
        String name = null;
        Boolean acknowledged = null;
        String startDate = null;
        String endDate = null;
        Boolean reverse = null;
        File response = api.exportHealthLogs(max, offset, sort, direction, phrase, name, acknowledged, startDate, endDate, reverse);

        // TODO: test validations
    }
    
    /**
     * Retrieves a Specific Appliance Health Alarm
     *
     * This endpoint will retrieve a specific health alarm by ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getHealthAlarmsTest() throws ApiException {
        Long id = null;
        Object response = api.getHealthAlarms(id);

        // TODO: test validations
    }
    
    /**
     * Retrieves Appliance Health
     *
     * This endpoint retrieves health info about the appliance such as cpu, memory and database usage. Elasticsearch statistics and queue usage are also returned.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listHealthTest() throws ApiException {
        Object response = api.listHealth();

        // TODO: test validations
    }
    
    /**
     * Retrieves Appliance Health Alarms
     *
     * This endpoint retrieves all health alarms, which are Operation notifications from Cloud and other Service Integrations. These alarms are not generated by the appliance, but synced and displayed for visibility. By default only open alarms are returned. Open alarms are those that have not yet been acknowledged.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listHealthAlarmsTest() throws ApiException {
        Long max = null;
        Long offset = null;
        String sort = null;
        String direction = null;
        String phrase = null;
        String name = null;
        Boolean acknowledged = null;
        Object response = api.listHealthAlarms(max, offset, sort, direction, phrase, name, acknowledged);

        // TODO: test validations
    }
    
    /**
     * Retrieves Appliance Health Logs
     *
     * This endpoint retrieves all health logs. These are the logs of the remote appliance itself. These logs show all ui activity and are useful for troubleshooting and auditing. Stack traces are filtered for Morpheus services. Complete stack traces can be found in &#x60;/var/log/morpheus/morpheus-ui/current&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listHealthLogsTest() throws ApiException {
        Long max = null;
        Long offset = null;
        String sort = null;
        String direction = null;
        String phrase = null;
        String name = null;
        Boolean acknowledged = null;
        String startDate = null;
        String endDate = null;
        Object response = api.listHealthLogs(max, offset, sort, direction, phrase, name, acknowledged, startDate, endDate);

        // TODO: test validations
    }
    
    /**
     * Basic information about current Morpheus Installation
     *
     * This endpoint can be used to check the remote appliance build version and some other basic information.  This is an unsecured endpoint and does not require authorization. However, build version will not be returned unless you are authenticated with a valid access token. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void pingTest() throws ApiException {
        Ping response = api.ping();

        // TODO: test validations
    }
    
}
