/*
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.DefaultError;
import org.openapitools.client.model.InlineObject184;
import org.openapitools.client.model.InlineObject185;
import org.openapitools.client.model.InlineObject186;
import org.openapitools.client.model.InlineObject187;
import org.openapitools.client.model.InlineObject188;
import org.openapitools.client.model.InlineObject189;
import org.openapitools.client.model.Model200Success;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PoliciesApi
 */
@Ignore
public class PoliciesApiTest {

    private final PoliciesApi api = new PoliciesApi();

    
    /**
     * Creates a Policy
     *
     * Creates a policy. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addPoliciesTest() throws ApiException {
        InlineObject184 inlineObject184 = null;
        Object response = api.addPolicies(inlineObject184);

        // TODO: test validations
    }
    
    /**
     * Creates a Policy for a Cloud
     *
     * Creates a policy for a Cloud. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addPoliciesCloudTest() throws ApiException {
        Long cloudId = null;
        InlineObject188 inlineObject188 = null;
        Object response = api.addPoliciesCloud(cloudId, inlineObject188);

        // TODO: test validations
    }
    
    /**
     * Creates a Policy for a Group
     *
     * Creates a policy for a Group. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addPoliciesGroupTest() throws ApiException {
        Long groupId = null;
        InlineObject186 inlineObject186 = null;
        Object response = api.addPoliciesGroup(groupId, inlineObject186);

        // TODO: test validations
    }
    
    /**
     * Retrieves a Specific Policy
     *
     * Retrieves a specific policy. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPoliciesTest() throws ApiException {
        Long id = null;
        Object response = api.getPolicies(id);

        // TODO: test validations
    }
    
    /**
     * Retrieves a Specific Policy for a Cloud
     *
     * Retrieves a specific policy for a Cloud. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPoliciesCloudTest() throws ApiException {
        Long cloudId = null;
        Long id = null;
        Object response = api.getPoliciesCloud(cloudId, id);

        // TODO: test validations
    }
    
    /**
     * Retrieves a Specific Policy for a Group
     *
     * Retrieves a specific policy for a Group. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPoliciesGroupTest() throws ApiException {
        Long groupId = null;
        Long id = null;
        Object response = api.getPoliciesGroup(groupId, id);

        // TODO: test validations
    }
    
    /**
     * Retrieves all Policies
     *
     * Retrieves all policies. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listPoliciesTest() throws ApiException {
        Long max = null;
        Long offset = null;
        String sort = null;
        String direction = null;
        String phrase = null;
        String name = null;
        Object response = api.listPolicies(max, offset, sort, direction, phrase, name);

        // TODO: test validations
    }
    
    /**
     * Retrieves Policies for a Cloud
     *
     * Retrieves policies for a specific cloud. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listPoliciesCloudTest() throws ApiException {
        Long cloudId = null;
        Long max = null;
        Long offset = null;
        String sort = null;
        String direction = null;
        String phrase = null;
        String name = null;
        Object response = api.listPoliciesCloud(cloudId, max, offset, sort, direction, phrase, name);

        // TODO: test validations
    }
    
    /**
     * Retrieves Policies for a Group
     *
     * Retrieves policies for a specific group. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listPoliciesGroupTest() throws ApiException {
        Long groupId = null;
        Long max = null;
        Long offset = null;
        String sort = null;
        String direction = null;
        String phrase = null;
        String name = null;
        Object response = api.listPoliciesGroup(groupId, max, offset, sort, direction, phrase, name);

        // TODO: test validations
    }
    
    /**
     * Retrieves all Policy Types
     *
     * Retrieves all Policy Types 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listPolicyTypesTest() throws ApiException {
        Object response = api.listPolicyTypes();

        // TODO: test validations
    }
    
    /**
     * Deletes a Policy
     *
     * Deletes a specified policy. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removePoliciesTest() throws ApiException {
        Long id = null;
        Model200Success response = api.removePolicies(id);

        // TODO: test validations
    }
    
    /**
     * Deletes a Policy for a Cloud
     *
     * Deletes a specified policy for a Cloud. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removePoliciesCloudTest() throws ApiException {
        Long cloudId = null;
        Long id = null;
        Model200Success response = api.removePoliciesCloud(cloudId, id);

        // TODO: test validations
    }
    
    /**
     * Deletes a Policy for a Group
     *
     * Deletes a specified policy for a Group. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removePoliciesGroupTest() throws ApiException {
        Long groupId = null;
        Long id = null;
        Model200Success response = api.removePoliciesGroup(groupId, id);

        // TODO: test validations
    }
    
    /**
     * Updates a Policy
     *
     * Updates a policy. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updatePoliciesTest() throws ApiException {
        Long id = null;
        InlineObject185 inlineObject185 = null;
        Object response = api.updatePolicies(id, inlineObject185);

        // TODO: test validations
    }
    
    /**
     * Updates a Policy for a Cloud
     *
     * Updates a policy for a Cloud. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updatePoliciesCloudTest() throws ApiException {
        Long cloudId = null;
        Long id = null;
        InlineObject189 inlineObject189 = null;
        Object response = api.updatePoliciesCloud(cloudId, id, inlineObject189);

        // TODO: test validations
    }
    
    /**
     * Updates a Policy for a Group
     *
     * Updates a policy for a Group. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updatePoliciesGroupTest() throws ApiException {
        Long groupId = null;
        Long id = null;
        InlineObject187 inlineObject187 = null;
        Object response = api.updatePoliciesGroup(groupId, id, inlineObject187);

        // TODO: test validations
    }
    
}
