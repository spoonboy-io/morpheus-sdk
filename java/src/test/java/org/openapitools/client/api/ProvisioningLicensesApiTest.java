/*
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.DefaultError;
import org.openapitools.client.model.InlineObject202;
import org.openapitools.client.model.InlineObject203;
import org.openapitools.client.model.InlineResponse200126;
import org.openapitools.client.model.InlineResponse200127;
import org.openapitools.client.model.Model200Success;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProvisioningLicensesApi
 */
@Ignore
public class ProvisioningLicensesApiTest {

    private final ProvisioningLicensesApi api = new ProvisioningLicensesApi();

    
    /**
     * Create a License
     *
     * Use this command to create a new license.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addProvisioningLicenseTest() throws ApiException {
        InlineObject202 inlineObject202 = null;
        Model200Success response = api.addProvisioningLicense(inlineObject202);

        // TODO: test validations
    }
    
    /**
     * Get a Specific License
     *
     * This endpoint retrieves a specific license.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getProvisioningLicenseTest() throws ApiException {
        Long id = null;
        InlineResponse200126 response = api.getProvisioningLicense(id);

        // TODO: test validations
    }
    
    /**
     * Get Reservations for Specific License
     *
     * This endpoint retrieves all reservations for a specific license. Each time a license is applied to a new server, a reservation is created, reducing the available copies for the license.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getProvisioningLicenseReservationsTest() throws ApiException {
        Long id = null;
        InlineResponse200127 response = api.getProvisioningLicenseReservations(id);

        // TODO: test validations
    }
    
    /**
     * Get All Licenses
     *
     * This endpoint retrieves all licenses.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listProvisioningLicensesTest() throws ApiException {
        Long max = null;
        Long offset = null;
        String sort = null;
        String direction = null;
        String phrase = null;
        String name = null;
        String licenseType = null;
        String licenseVersion = null;
        String orgName = null;
        String fullName = null;
        Object response = api.listProvisioningLicenses(max, offset, sort, direction, phrase, name, licenseType, licenseVersion, orgName, fullName);

        // TODO: test validations
    }
    
    /**
     * Delete a License
     *
     * Will delete a license.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeProvisioningLicenseTest() throws ApiException {
        Long id = null;
        Model200Success response = api.removeProvisioningLicense(id);

        // TODO: test validations
    }
    
    /**
     * Update a License
     *
     * Use this command to update an existing license.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateProvisioningLicenseTest() throws ApiException {
        Long id = null;
        InlineObject203 inlineObject203 = null;
        Model200Success response = api.updateProvisioningLicense(id, inlineObject203);

        // TODO: test validations
    }
    
}
