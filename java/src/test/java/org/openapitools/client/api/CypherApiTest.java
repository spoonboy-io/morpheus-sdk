/*
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.DefaultError;
import org.openapitools.client.model.InlineObject66;
import org.openapitools.client.model.Model200Success;
import org.openapitools.client.model.OneOfstringlong;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CypherApi
 */
@Ignore
public class CypherApiTest {

    private final CypherApi api = new CypherApi();

    
    /**
     * Write a Cypher
     *
     * This endpoint will create or update a cypher key.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addCypherKeyTest() throws ApiException {
        String cypherPath = null;
        OneOfstringlong ttl = null;
        String value = null;
        String type = null;
        InlineObject66 inlineObject66 = null;
        Object response = api.addCypherKey(cypherPath, ttl, value, type, inlineObject66);

        // TODO: test validations
    }
    
    /**
     * Read or Create a Cypher Key
     *
     * This endpoint retrieves a specific cypher key. The value of the key is decrypted and returned as data. It may be a String or an object with many {\&quot;key\&quot;:\&quot;value\&quot;} pairs.  The type depends on the cypher mount&#39;s capabilities and what type of data was written to the key.  For example the &#x60;secret/&#x60; mount allows either a string or an object, while the &#x60;password/&#x60; mount will always store and return a string. This endpoint can also create a key. This only applies to mount types &#x60;uuid&#x60;, &#x60;key&#x60;, &#x60;password&#x60;.  Refer to the &#x60;POST&#x60; endpoint for more information. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCypherKeyTest() throws ApiException {
        String cypherPath = null;
        String leaseToken = null;
        String sort = null;
        String direction = null;
        Model200Success response = api.getCypherKey(cypherPath, leaseToken, sort, direction);

        // TODO: test validations
    }
    
    /**
     * List Cypher Keys
     *
     * This endpoint retrieves all cypher keys associated with the account, or user.  This method can be used to list keys as well, by passing the query parameter list&#x3D;true.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listCypherKeysTest() throws ApiException {
        String leaseToken = null;
        Boolean list = null;
        String phrase = null;
        Long max = null;
        Long offset = null;
        String sort = null;
        String direction = null;
        Object response = api.listCypherKeys(leaseToken, list, phrase, max, offset, sort, direction);

        // TODO: test validations
    }
    
    /**
     * Delete a Cypher
     *
     * Will delete a cypher from the system and make it no longer usable. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeCypherTest() throws ApiException {
        String cypherPath = null;
        Model200Success response = api.removeCypher(cypherPath);

        // TODO: test validations
    }
    
}
