/*
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.DefaultError;
import org.openapitools.client.model.InlineObject82;
import org.openapitools.client.model.InlineResponse20051;
import org.openapitools.client.model.Model200Success;
import org.openapitools.client.model.UserSourceCreate;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for IdentitySourcesApi
 */
@Ignore
public class IdentitySourcesApiTest {

    private final IdentitySourcesApi api = new IdentitySourcesApi();

    
    /**
     * Creates an Identity Source
     *
     * Creates an identity source. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addIdentitySourcesTest() throws ApiException {
        Long accountId = null;
        UserSourceCreate userSourceCreate = null;
        Object response = api.addIdentitySources(accountId, userSourceCreate);

        // TODO: test validations
    }
    
    /**
     * Retrieves a Specific Identity Source
     *
     * Retrieves a specific identity source. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getIdentitySourcesTest() throws ApiException {
        Long id = null;
        InlineResponse20051 response = api.getIdentitySources(id);

        // TODO: test validations
    }
    
    /**
     * Retrieves all Identity Sources
     *
     * Retrieves all identity sources. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listIdentitySourcesTest() throws ApiException {
        String type = null;
        Long max = null;
        Long offset = null;
        String sort = null;
        String direction = null;
        String phrase = null;
        String name = null;
        Long accountId = null;
        Object response = api.listIdentitySources(type, max, offset, sort, direction, phrase, name, accountId);

        // TODO: test validations
    }
    
    /**
     * Deletes an Identity Source
     *
     * Deletes a specified identity source. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeIdentitySourcesTest() throws ApiException {
        Long id = null;
        Model200Success response = api.removeIdentitySources(id);

        // TODO: test validations
    }
    
    /**
     * Updates an Identity Source Subdomain
     *
     * Updates an identity source subdomain. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateIdentitySourceSubdomainsTest() throws ApiException {
        Long id = null;
        InlineObject82 inlineObject82 = null;
        Object response = api.updateIdentitySourceSubdomains(id, inlineObject82);

        // TODO: test validations
    }
    
    /**
     * Updates an Identity Source
     *
     * Updates an identity source. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateIdentitySourcesTest() throws ApiException {
        Long id = null;
        UserSourceCreate userSourceCreate = null;
        Object response = api.updateIdentitySources(id, userSourceCreate);

        // TODO: test validations
    }
    
}
