/*
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import java.math.BigDecimal;
import org.openapitools.client.model.DefaultError;
import java.io.File;
import org.openapitools.client.model.InlineObject274;
import org.openapitools.client.model.InlineObject41;
import org.openapitools.client.model.InlineObject42;
import org.openapitools.client.model.InlineObject43;
import org.openapitools.client.model.InlineObject44;
import org.openapitools.client.model.InlineObject45;
import org.openapitools.client.model.InlineObject46;
import org.openapitools.client.model.InlineObject47;
import org.openapitools.client.model.InlineObject49;
import org.openapitools.client.model.InlineResponse200168;
import org.openapitools.client.model.InlineResponse20020;
import org.openapitools.client.model.InlineResponse20021;
import org.openapitools.client.model.InlineResponse20022;
import org.openapitools.client.model.InlineResponse20023;
import org.openapitools.client.model.InlineResponse20024;
import org.openapitools.client.model.Model200Success;
import org.threeten.bp.OffsetDateTime;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CloudsApi
 */
@Ignore
public class CloudsApiTest {

    private final CloudsApi api = new CloudsApi();

    
    /**
     * Creates a Specified Resource Pool for Specified Cloud
     *
     * Creates a resource pool for specified cloud. Only certain types of clouds support creating and deleting resource pools. Configuration options vary by type. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addCloudResourcePoolTest() throws ApiException {
        BigDecimal zoneId = null;
        InlineObject45 inlineObject45 = null;
        InlineResponse20024 response = api.addCloudResourcePool(zoneId, inlineObject45);

        // TODO: test validations
    }
    
    /**
     * Creates a Cloud
     *
     * Creates a cloud. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addCloudsTest() throws ApiException {
        InlineObject41 inlineObject41 = null;
        Object response = api.addClouds(inlineObject41);

        // TODO: test validations
    }
    
    /**
     * Retrieves a Datastore for Specified Cloud
     *
     * Data Stores can be managed for each Compute Zone (Cloud) in your infrastructure. This endpoint retrieves a specific datastore under a cloud. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCloudDatastoresTest() throws ApiException {
        BigDecimal zoneId = null;
        Long id = null;
        Object response = api.getCloudDatastores(zoneId, id);

        // TODO: test validations
    }
    
    /**
     * Retrieves a Resource Folder for Specified Cloud
     *
     * Resource Folders can be managed for each Compute Zone (Cloud) in your infrastructure. This endpoint retrieves a specific folder under a cloud. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCloudFoldersTest() throws ApiException {
        BigDecimal zoneId = null;
        Long id = null;
        Object response = api.getCloudFolders(zoneId, id);

        // TODO: test validations
    }
    
    /**
     * Retrieves a Resource Pool for Specified Cloud
     *
     * This endpoint retrieves a specific resource pool. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCloudResourcePoolsTest() throws ApiException {
        BigDecimal zoneId = null;
        Long id = null;
        Object response = api.getCloudResourcePools(zoneId, id);

        // TODO: test validations
    }
    
    /**
     * Retrieves a Specific Cloud Type
     *
     * Retrieves a specific cloud type. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCloudTypesTest() throws ApiException {
        Long id = null;
        InlineResponse20020 response = api.getCloudTypes(id);

        // TODO: test validations
    }
    
    /**
     * Retrieves a Specific Cloud
     *
     * Retrieves a specific cloud. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCloudsTest() throws ApiException {
        Long id = null;
        InlineResponse20021 response = api.getClouds(id);

        // TODO: test validations
    }
    
    /**
     * Retrieves a Cloud Wiki Page
     *
     * This endpoint retrieves a cloud Wiki page. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getWikiCloudTest() throws ApiException {
        Long id = null;
        InlineResponse200168 response = api.getWikiCloud(id);

        // TODO: test validations
    }
    
    /**
     * Retrieves all Datastores for Specified Cloud
     *
     * Data Stores can be managed for each Compute Zone (Cloud) in your infrastructure. This endpoint retrieves all data stores under a cloud. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listCloudDatastoresTest() throws ApiException {
        BigDecimal zoneId = null;
        String name = null;
        String phrase = null;
        Long max = null;
        String sort = null;
        String direction = null;
        Object response = api.listCloudDatastores(zoneId, name, phrase, max, sort, direction);

        // TODO: test validations
    }
    
    /**
     * Retrieves all resource folders for Specified Cloud
     *
     * Resource Folders can be managed for each Compute Zone (Cloud) in your infrastructure. This endpoint retrieves all resource folders under a cloud. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listCloudFoldersTest() throws ApiException {
        BigDecimal zoneId = null;
        String name = null;
        String phrase = null;
        Long max = null;
        Object response = api.listCloudFolders(zoneId, name, phrase, max);

        // TODO: test validations
    }
    
    /**
     * Retrieves all Resource Pools for Specified Cloud
     *
     * Resource Pools can be managed for each Compute Zone (Cloud) in your infrastructure. This endpoint retrieves all resource pools under a cloud. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listCloudResourcePoolsTest() throws ApiException {
        BigDecimal zoneId = null;
        String name = null;
        String phrase = null;
        Long max = null;
        Object response = api.listCloudResourcePools(zoneId, name, phrase, max);

        // TODO: test validations
    }
    
    /**
     * Retrieves all Security Groups for a Cloud
     *
     * Retrieves all security groups for a cloud. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listCloudSecurityGroupsTest() throws ApiException {
        Long id = null;
        Object response = api.listCloudSecurityGroups(id);

        // TODO: test validations
    }
    
    /**
     * Retrieves all Cloud Types
     *
     * Fetch a paginated list of available cloud types. This returns the configuration options for each type. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listCloudTypesTest() throws ApiException {
        Long max = null;
        Long offset = null;
        String sort = null;
        String direction = null;
        String name = null;
        String code = null;
        String phrase = null;
        String provisionType = null;
        Object response = api.listCloudTypes(max, offset, sort, direction, name, code, phrase, provisionType);

        // TODO: test validations
    }
    
    /**
     * Retrieves all Clouds
     *
     * Retrieves all clouds. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listCloudsTest() throws ApiException {
        OffsetDateTime lastUpdated = null;
        String type = null;
        Long groupId = null;
        Long max = null;
        Long offset = null;
        String sort = null;
        String direction = null;
        String phrase = null;
        String name = null;
        Object response = api.listClouds(lastUpdated, type, groupId, max, offset, sort, direction, phrase, name);

        // TODO: test validations
    }
    
    /**
     * Refreshes a Cloud
     *
     * Refreshes a cloud. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void refreshCloudsTest() throws ApiException {
        Long id = null;
        InlineObject47 inlineObject47 = null;
        Model200Success response = api.refreshClouds(id, inlineObject47);

        // TODO: test validations
    }
    
    /**
     * Deletes a Resource Pool for Specified Cloud
     *
     * Deletes a resource pool for specified Cloud. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeCloudResourcePoolsTest() throws ApiException {
        BigDecimal zoneId = null;
        Long id = null;
        Model200Success response = api.removeCloudResourcePools(zoneId, id);

        // TODO: test validations
    }
    
    /**
     * Deletes a Cloud
     *
     * Deletes a specified Cloud. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeCloudsTest() throws ApiException {
        Long id = null;
        Boolean removeResources = null;
        Model200Success response = api.removeClouds(id, removeResources);

        // TODO: test validations
    }
    
    /**
     * Updates a Specified Datastore for Specified Cloud
     *
     * Updates a datastore for specified cloud. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateCloudDatastoresTest() throws ApiException {
        BigDecimal zoneId = null;
        Long id = null;
        InlineObject43 inlineObject43 = null;
        InlineResponse20022 response = api.updateCloudDatastores(zoneId, id, inlineObject43);

        // TODO: test validations
    }
    
    /**
     * Updates a Resource Folder for Specified Cloud
     *
     * Updates a resource folder for specified cloud. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateCloudFoldersTest() throws ApiException {
        BigDecimal zoneId = null;
        Long id = null;
        InlineObject44 inlineObject44 = null;
        InlineResponse20023 response = api.updateCloudFolders(zoneId, id, inlineObject44);

        // TODO: test validations
    }
    
    /**
     * Update Logo For Cloud
     *
     * Use this command to update the logo and dark logo images for a cloud. This endpoint expects multipart form data as the request format, not JSON. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateCloudLogoTest() throws ApiException {
        Long id = null;
        File logo = null;
        File darkLogo = null;
        Model200Success response = api.updateCloudLogo(id, logo, darkLogo);

        // TODO: test validations
    }
    
    /**
     * Updates a Specified Resource Pool for Specified Cloud
     *
     * Updates a resource pool for specified cloud. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateCloudResourcePoolTest() throws ApiException {
        BigDecimal zoneId = null;
        Long id = null;
        InlineObject46 inlineObject46 = null;
        InlineResponse20024 response = api.updateCloudResourcePool(zoneId, id, inlineObject46);

        // TODO: test validations
    }
    
    /**
     * Sets Security Groups for a Cloud
     *
     * Sets security groups for acloud. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateCloudSecurityGroupsTest() throws ApiException {
        Long id = null;
        InlineObject49 inlineObject49 = null;
        Object response = api.updateCloudSecurityGroups(id, inlineObject49);

        // TODO: test validations
    }
    
    /**
     * Updates a Cloud
     *
     * Updates a cloud. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateCloudsTest() throws ApiException {
        Long id = null;
        InlineObject42 inlineObject42 = null;
        Object response = api.updateClouds(id, inlineObject42);

        // TODO: test validations
    }
    
    /**
     * Update a Cloud Wiki Page
     *
     * Updates a cloud Wiki page. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateWikiCloudTest() throws ApiException {
        Long id = null;
        InlineObject274 inlineObject274 = null;
        Object response = api.updateWikiCloud(id, inlineObject274);

        // TODO: test validations
    }
    
}
