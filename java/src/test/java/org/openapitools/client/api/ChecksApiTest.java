/*
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.DefaultError;
import org.openapitools.client.model.InlineObject29;
import org.openapitools.client.model.InlineObject30;
import org.openapitools.client.model.InlineObject31;
import org.openapitools.client.model.InlineObject32;
import org.openapitools.client.model.InlineObject33;
import org.openapitools.client.model.InlineObject34;
import org.openapitools.client.model.InlineObject35;
import org.openapitools.client.model.InlineObject36;
import org.openapitools.client.model.InlineObject37;
import org.openapitools.client.model.InlineObject38;
import org.openapitools.client.model.InlineObject39;
import org.openapitools.client.model.InlineObject40;
import org.openapitools.client.model.InlineResponse20016;
import org.openapitools.client.model.InlineResponse20017;
import org.openapitools.client.model.InlineResponse20018;
import org.openapitools.client.model.InlineResponse20019;
import org.openapitools.client.model.Model200Success;
import org.threeten.bp.OffsetDateTime;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ChecksApi
 */
@Ignore
public class ChecksApiTest {

    private final ChecksApi api = new ChecksApi();

    
    /**
     * Create a New Check App
     *
     * Create a new check app.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addCheckAppsTest() throws ApiException {
        InlineObject29 inlineObject29 = null;
        Object response = api.addCheckApps(inlineObject29);

        // TODO: test validations
    }
    
    /**
     * Create a New Check Group
     *
     * Create a new check group.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addCheckGroupsTest() throws ApiException {
        InlineObject37 inlineObject37 = null;
        Object response = api.addCheckGroups(inlineObject37);

        // TODO: test validations
    }
    
    /**
     * Create a New Check
     *
     * Create a new monitoring check.  SSH tunneling options allow the different check types to tunnel to a host via a proxy, and execute checks relative to the proxy. A SSH tunnel can use your account generated public and private key-pairs or SSH password. It is strongly recommended to use a key-pair.  To enable SSH tunneling for a check, add &#x60;tunnelOn&#x60;, &#x60;sshHost&#x60;, &#x60;sshUser&#x60;, and optionally, &#x60;sshPort&#x60; and &#x60;sshPassword&#x60; parameters to any check type config as seen earlier in the Check Types section. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addChecksTest() throws ApiException {
        InlineObject33 inlineObject33 = null;
        Object response = api.addChecks(inlineObject33);

        // TODO: test validations
    }
    
    /**
     * Delete a Specific Check App
     *
     * Delete an existing monitoring check app.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCheckAppsTest() throws ApiException {
        Long id = null;
        Model200Success response = api.deleteCheckApps(id);

        // TODO: test validations
    }
    
    /**
     * Delete a Specific Check Group
     *
     * Delete an existing monitoring check group.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCheckGroupsTest() throws ApiException {
        Long id = null;
        Model200Success response = api.deleteCheckGroups(id);

        // TODO: test validations
    }
    
    /**
     * Delete a Specific Check
     *
     * Delete an existing monitoring check.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteChecksTest() throws ApiException {
        Long id = null;
        Model200Success response = api.deleteChecks(id);

        // TODO: test validations
    }
    
    /**
     * Get a Specific Check App
     *
     * Get details about a specific monitoring check app.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCheckAppsTest() throws ApiException {
        Long id = null;
        InlineResponse20016 response = api.getCheckApps(id);

        // TODO: test validations
    }
    
    /**
     * Get a Specific Check Group
     *
     * Get details about a specific monitoring check group.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCheckGroupsTest() throws ApiException {
        Long id = null;
        InlineResponse20019 response = api.getCheckGroups(id);

        // TODO: test validations
    }
    
    /**
     * Get a Specific Check Type
     *
     * Get details about a specific monitoring check type.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCheckTypesTest() throws ApiException {
        Long id = null;
        InlineResponse20018 response = api.getCheckTypes(id);

        // TODO: test validations
    }
    
    /**
     * Get a Specific Check
     *
     * Get details about a specific monitoring check.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getChecksTest() throws ApiException {
        Long id = null;
        InlineResponse20017 response = api.getChecks(id);

        // TODO: test validations
    }
    
    /**
     * List All Check Apps
     *
     * Get a list of check apps.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listCheckAppsTest() throws ApiException {
        Long max = null;
        Long offset = null;
        String sort = null;
        String name = null;
        String phrase = null;
        String status = null;
        OffsetDateTime lastUpdated = null;
        Boolean deleted = null;
        Object response = api.listCheckApps(max, offset, sort, name, phrase, status, lastUpdated, deleted);

        // TODO: test validations
    }
    
    /**
     * List All Check Groups
     *
     * Get a list of check groups.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listCheckGroupsTest() throws ApiException {
        Long max = null;
        Long offset = null;
        String sort = null;
        String name = null;
        String phrase = null;
        String status = null;
        OffsetDateTime lastUpdated = null;
        Boolean deleted = null;
        Object response = api.listCheckGroups(max, offset, sort, name, phrase, status, lastUpdated, deleted);

        // TODO: test validations
    }
    
    /**
     * List All Check Types
     *
     * Get a list of monitoring check types.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listCheckTypesTest() throws ApiException {
        Long max = null;
        Long offset = null;
        String sort = null;
        String name = null;
        String phrase = null;
        Object response = api.listCheckTypes(max, offset, sort, name, phrase);

        // TODO: test validations
    }
    
    /**
     * List All Checks
     *
     * Get a list of monitoring checks.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listChecksTest() throws ApiException {
        Long max = null;
        Long offset = null;
        String sort = null;
        String name = null;
        String phrase = null;
        String status = null;
        OffsetDateTime lastUpdated = null;
        Boolean deleted = null;
        Object response = api.listChecks(max, offset, sort, name, phrase, status, lastUpdated, deleted);

        // TODO: test validations
    }
    
    /**
     * Update Check App
     *
     * Update an existing monitoring check app.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateCheckAppsTest() throws ApiException {
        Long id = null;
        InlineObject31 inlineObject31 = null;
        Object response = api.updateCheckApps(id, inlineObject31);

        // TODO: test validations
    }
    
    /**
     * Update Check Group
     *
     * Update an existing monitoring check group.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateCheckGroupsTest() throws ApiException {
        Long id = null;
        InlineObject38 inlineObject38 = null;
        Object response = api.updateCheckGroups(id, inlineObject38);

        // TODO: test validations
    }
    
    /**
     * Updates a Check
     *
     * Updates a monitoring check.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateChecksTest() throws ApiException {
        Long id = null;
        InlineObject35 inlineObject35 = null;
        Object response = api.updateChecks(id, inlineObject35);

        // TODO: test validations
    }
    
    /**
     * Mute All Check Apps
     *
     * Mute all existing check apps.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateMuteAllCheckAppsTest() throws ApiException {
        InlineObject30 inlineObject30 = null;
        Object response = api.updateMuteAllCheckApps(inlineObject30);

        // TODO: test validations
    }
    
    /**
     * Mute All Check Groups
     *
     * Mute all existing check groups.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateMuteAllCheckGroupsTest() throws ApiException {
        InlineObject40 inlineObject40 = null;
        Object response = api.updateMuteAllCheckGroups(inlineObject40);

        // TODO: test validations
    }
    
    /**
     * Mute All Checks
     *
     * Mute all existing checks.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateMuteAllChecksTest() throws ApiException {
        InlineObject34 inlineObject34 = null;
        Object response = api.updateMuteAllChecks(inlineObject34);

        // TODO: test validations
    }
    
    /**
     * Mute Check App
     *
     * Mute an existing check app.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateMuteCheckAppsTest() throws ApiException {
        Long id = null;
        InlineObject32 inlineObject32 = null;
        Object response = api.updateMuteCheckApps(id, inlineObject32);

        // TODO: test validations
    }
    
    /**
     * Mute Check Group
     *
     * Mute an existing check group.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateMuteCheckGroupsTest() throws ApiException {
        Long id = null;
        InlineObject39 inlineObject39 = null;
        Object response = api.updateMuteCheckGroups(id, inlineObject39);

        // TODO: test validations
    }
    
    /**
     * Mute Check
     *
     * Mute an existing check.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateMuteChecksTest() throws ApiException {
        Long id = null;
        InlineObject36 inlineObject36 = null;
        Object response = api.updateMuteChecks(id, inlineObject36);

        // TODO: test validations
    }
    
}
