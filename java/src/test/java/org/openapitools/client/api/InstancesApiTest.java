/*
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import java.math.BigDecimal;
import org.openapitools.client.model.DefaultError;
import org.openapitools.client.model.InlineObject270;
import org.openapitools.client.model.InlineObject91;
import org.openapitools.client.model.InlineObject93;
import org.openapitools.client.model.InlineObject94;
import org.openapitools.client.model.InlineObject95;
import org.openapitools.client.model.InlineObject96;
import org.openapitools.client.model.InlineObject97;
import org.openapitools.client.model.InlineObject98;
import org.openapitools.client.model.InlineObject99;
import org.openapitools.client.model.InlineResponse200168;
import org.openapitools.client.model.InlineResponse20056;
import org.openapitools.client.model.InlineResponse20057;
import org.openapitools.client.model.InlineResponse20058;
import org.openapitools.client.model.InlineResponse20059;
import org.openapitools.client.model.InlineResponse20060;
import org.openapitools.client.model.InstanceBackups;
import org.openapitools.client.model.InstanceClone;
import org.openapitools.client.model.InstanceCreate;
import org.openapitools.client.model.InstanceResize;
import org.openapitools.client.model.InstanceSnapshot;
import org.openapitools.client.model.InstanceSnapshots;
import org.openapitools.client.model.InstanceUpdate;
import org.openapitools.client.model.InstanceWorkflow;
import org.openapitools.client.model.InstancesCloneImage;
import org.openapitools.client.model.Model200Success;
import org.openapitools.client.model.NetworkInterfaceUpdate;
import org.threeten.bp.OffsetDateTime;
import org.openapitools.client.model.Snapshot;
import org.openapitools.client.model.SuccessMessage;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for InstancesApi
 */
@Ignore
public class InstancesApiTest {

    private final InstancesApi api = new InstancesApi();

    
    /**
     * Create an Instance
     *
     * Create an Instance
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addInstanceTest() throws ApiException {
        InstanceCreate instanceCreate = null;
        Object response = api.addInstance(instanceCreate);

        // TODO: test validations
    }
    
    /**
     * Backup an instance
     *
     * Backup an instance
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void backupInstanceTest() throws ApiException {
        Long id = null;
        Model200Success response = api.backupInstance(id);

        // TODO: test validations
    }
    
    /**
     * Get list of backups for an Instance
     *
     * Get list of backups for an Instance
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void backupsInstanceTest() throws ApiException {
        Long id = null;
        InstanceBackups response = api.backupsInstance(id);

        // TODO: test validations
    }
    
    /**
     * Cancel Expiration of an Instance
     *
     * This operation will cancel the expiration of an instance.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cancelExpirationInstanceTest() throws ApiException {
        Long id = null;
        Model200Success response = api.cancelExpirationInstance(id);

        // TODO: test validations
    }
    
    /**
     * Cancel Removal of an Instance
     *
     * This operation will undo the delete of an instance that is pending removal.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cancelRemovalInstanceTest() throws ApiException {
        Long id = null;
        Model200Success response = api.cancelRemovalInstance(id);

        // TODO: test validations
    }
    
    /**
     * Cancel Shutdown of an Instance
     *
     * This operation will cancel the shutdown of an instance.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cancelShutdownInstanceTest() throws ApiException {
        Long id = null;
        Model200Success response = api.cancelShutdownInstance(id);

        // TODO: test validations
    }
    
    /**
     * Clone to Image
     *
     * This endpoint allows creating an image template from an existing instance.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cloneImageInstanceTest() throws ApiException {
        Long id = null;
        InstancesCloneImage instancesCloneImage = null;
        Model200Success response = api.cloneImageInstance(id, instancesCloneImage);

        // TODO: test validations
    }
    
    /**
     * Clone an Instance
     *
     * One can easily clone an instance and all containers within that instance. The containers are backed up via the backup services and used as a snapshot to produce a clone of the instance. It is possible to clone this app instance into an entirely different availability zone.  This endpoint also supports all of the same parameters as instance creation, so you can override any configuration options when provisioning the clone. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cloneInstanceTest() throws ApiException {
        Long id = null;
        InstanceClone instanceClone = null;
        Model200Success response = api.cloneInstance(id, instanceClone);

        // TODO: test validations
    }
    
    /**
     * Create a new Instance Schedule
     *
     * Create a new schedule for a specific instance.  This creates an instance scaling threshold that only applies during a defined schedule. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createInstanceScheduleTest() throws ApiException {
        Long id = null;
        InlineObject96 inlineObject96 = null;
        Object response = api.createInstanceSchedule(id, inlineObject96);

        // TODO: test validations
    }
    
    /**
     * Delete All Snapshots of Instance
     *
     * Delete All Snapshots attached to Instance.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAllSnapshotsInstanceTest() throws ApiException {
        Long id = null;
        Model200Success response = api.deleteAllSnapshotsInstance(id);

        // TODO: test validations
    }
    
    /**
     * Delete All Snapshots of Instance Container
     *
     * Delete All Snapshots attached to Instance Container.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAllSnapshotsInstanceContainerTest() throws ApiException {
        Long id = null;
        BigDecimal containerId = null;
        Model200Success response = api.deleteAllSnapshotsInstanceContainer(id, containerId);

        // TODO: test validations
    }
    
    /**
     * Delete an instance
     *
     * Will delete an instance and all associated monitors and backups.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteInstanceTest() throws ApiException {
        Long id = null;
        String preserveVolumes = null;
        String keepBackups = null;
        String releaseFloatingIps = null;
        String releaseEIPs = null;
        String force = null;
        Model200Success response = api.deleteInstance(id, preserveVolumes, keepBackups, releaseFloatingIps, releaseEIPs, force);

        // TODO: test validations
    }
    
    /**
     * Deletes an Instance Schedule
     *
     * Deletes a specified instance scaling schedule 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteInstanceScheduleTest() throws ApiException {
        Long id = null;
        Long scheduleId = null;
        Model200Success response = api.deleteInstanceSchedule(id, scheduleId);

        // TODO: test validations
    }
    
    /**
     * Delete Snapshot of Instance
     *
     * Delete snapshot of instance.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSnapshotInstanceTest() throws ApiException {
        Long id = null;
        Model200Success response = api.deleteSnapshotInstance(id);

        // TODO: test validations
    }
    
    /**
     * Eject an instance
     *
     * This will eject any ISO media on all containers in the instance.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ejectInstanceTest() throws ApiException {
        Long id = null;
        Model200Success response = api.ejectInstance(id);

        // TODO: test validations
    }
    
    /**
     * Extend Expiration of an Instance
     *
     * This operation will extend the expiration of an instance. The period of time it is extended is equal to the number of renewal days in the expiration policy.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void extendExpirationInstanceTest() throws ApiException {
        Long id = null;
        Model200Success response = api.extendExpirationInstance(id);

        // TODO: test validations
    }
    
    /**
     * Extend Shutdown of an Instance
     *
     * This operation will extend the shutdown of an instance. The period of time it is extended is equal to the number of renewal days in the expiration policy.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void extendShutdownInstanceTest() throws ApiException {
        Long id = null;
        Model200Success response = api.extendShutdownInstance(id);

        // TODO: test validations
    }
    
    /**
     * Get Env Variables
     *
     * This gets all the environment variables associated with the instance.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEnvVariablesTest() throws ApiException {
        Long id = null;
        InlineResponse20057 response = api.getEnvVariables(id);

        // TODO: test validations
    }
    
    /**
     * Retrieves a Specific Instance
     *
     * Retrieves a specific instance.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getInstanceTest() throws ApiException {
        Long id = null;
        Boolean details = null;
        InlineResponse20056 response = api.getInstance(id, details);

        // TODO: test validations
    }
    
    /**
     * Get Container Details
     *
     * This can be valuable for evaluating the details of the compute server(s) running on an instance
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getInstanceContainersTest() throws ApiException {
        Long id = null;
        Object response = api.getInstanceContainers(id);

        // TODO: test validations
    }
    
    /**
     * Get Instance History
     *
     * This endpoint retrieves the process history for a specific instance. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getInstanceHistoryTest() throws ApiException {
        Long id = null;
        String phrase = null;
        Long containerId = null;
        Long serverId = null;
        Long zoneId = null;
        Object response = api.getInstanceHistory(id, phrase, containerId, serverId, zoneId);

        // TODO: test validations
    }
    
    /**
     * Get a Specific Instance Schedule
     *
     * This endpoint retrieves a specific instance scaling schedule. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getInstanceScheduleTest() throws ApiException {
        Long id = null;
        Long scheduleId = null;
        InlineResponse20059 response = api.getInstanceSchedule(id, scheduleId);

        // TODO: test validations
    }
    
    /**
     * Get all Instance Schedules
     *
     * This endpoint retrieves all the scaling threshold schedules for a specific instance.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getInstanceSchedulesTest() throws ApiException {
        Long id = null;
        Object response = api.getInstanceSchedules(id);

        // TODO: test validations
    }
    
    /**
     * Get an Instance Scale Threshold
     *
     * Retrieves the scale threshold settings for a specific instance
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getInstanceThresholdTest() throws ApiException {
        Long id = null;
        InlineResponse20058 response = api.getInstanceThreshold(id);

        // TODO: test validations
    }
    
    /**
     * Get Specific Instance Type for Provisioning
     *
     * Fetch an instance type by ID. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getInstanceTypeProvisioningTest() throws ApiException {
        Long id = null;
        Object response = api.getInstanceTypeProvisioning(id);

        // TODO: test validations
    }
    
    /**
     * Prepare To Apply an Instance
     *
     * This endpoint provides a way to view the current instance configuration and templateParameter variables available to apply. This action only applies to Terraform, CloudFormation and ARM and will return an HTTP 400 error for other types.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPrepareApplyInstanceTest() throws ApiException {
        Long id = null;
        Object response = api.getPrepareApplyInstance(id);

        // TODO: test validations
    }
    
    /**
     * Get a Specific Snapshot
     *
     * This endpoint retrieves a specific snapshot.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSnapshotInstanceTest() throws ApiException {
        Long id = null;
        Snapshot response = api.getSnapshotInstance(id);

        // TODO: test validations
    }
    
    /**
     * Get State of an Instance
     *
     * This endpoint provides a way to view the state of an instance. The response includes output and resource planning information from the template provider software such as Terraform. This action only applies to Terraform, CloudFormation and ARM and will return an HTTP 400 error for other types.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStateInstanceTest() throws ApiException {
        Long id = null;
        Object response = api.getStateInstance(id);

        // TODO: test validations
    }
    
    /**
     * Validate Apply State for an Instance
     *
     * This endpoint provides a way to validate instance configuration and templateParameter variables before executing the apply. This only validates the configuration to see any planned changes and it does not actually apply the changes. This action only applies to Terraform, CloudFormation and ARM and will return an HTTP 400 error for other types.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getValidateApplyInstanceTest() throws ApiException {
        Long id = null;
        InlineObject98 inlineObject98 = null;
        Object response = api.getValidateApplyInstance(id, inlineObject98);

        // TODO: test validations
    }
    
    /**
     * Retrieves an Instance Wiki Page
     *
     * This endpoint retrieves an instance Wiki page. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getWikiInstanceTest() throws ApiException {
        Long id = null;
        InlineResponse200168 response = api.getWikiInstance(id);

        // TODO: test validations
    }
    
    /**
     * Import Snapshot of an Instance
     *
     * It is possible to import a snapshot of an instance. This creates a Virtual Image of the instance as it currently exists.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importSnapshotInstanceTest() throws ApiException {
        Long id = null;
        InlineObject93 inlineObject93 = null;
        Model200Success response = api.importSnapshotInstance(id, inlineObject93);

        // TODO: test validations
    }
    
    /**
     * Create Linked Clone of Instance Snapshot
     *
     * It is possible to create a linked clone of an Instance Snapshot.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void linkedCloneSnapshotInstanceTest() throws ApiException {
        Long id = null;
        BigDecimal snapshotId = null;
        Model200Success response = api.linkedCloneSnapshotInstance(id, snapshotId);

        // TODO: test validations
    }
    
    /**
     * Get Available Service Plans for an Instance
     *
     * This endpoint retrieves all the Service Plans available for the specified cloud and instance layout. The response includes details about the plans and their configuration options. It may be used to get the list of available plans when creating a new instance or resizing an existing instance. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listInstanceServicePlansTest() throws ApiException {
        Long zoneId = null;
        Long layoutId = null;
        Long siteId = null;
        InlineResponse20060 response = api.listInstanceServicePlans(zoneId, layoutId, siteId);

        // TODO: test validations
    }
    
    /**
     * Get All Instance Types for Provisioning
     *
     * Fetch the list of available instance types. These can vary in range from database containers, to web containers, to custom containers. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listInstanceTypesProvisioningTest() throws ApiException {
        Long max = null;
        Long offset = null;
        String sort = null;
        String direction = null;
        String phrase = null;
        String name = null;
        String code = null;
        Boolean featured = null;
        Boolean details = null;
        Object response = api.listInstanceTypesProvisioning(max, offset, sort, direction, phrase, name, code, featured, details);

        // TODO: test validations
    }
    
    /**
     * Get All Instances
     *
     * This endpoint retrieves a paginated list of instances. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listInstancesTest() throws ApiException {
        Long max = null;
        Long offset = null;
        String name = null;
        String phrase = null;
        String instanceType = null;
        OffsetDateTime lastUpdated = null;
        Long createdBy = null;
        Boolean agentInstalled = null;
        String status = null;
        String environment = null;
        Boolean showDeleted = null;
        Boolean deleted = null;
        String expireDate = null;
        String expireDateMin = null;
        String expireDays = null;
        String expireDaysMin = null;
        String shutdownDate = null;
        String shutdownDateMin = null;
        String shutdownDays = null;
        String shutdownDaysMin = null;
        String labels = null;
        String allLabels = null;
        String tags = null;
        String metadata = null;
        Boolean details = null;
        Object response = api.listInstances(max, offset, name, phrase, instanceType, lastUpdated, createdBy, agentInstalled, status, environment, showDeleted, deleted, expireDate, expireDateMin, expireDays, expireDaysMin, shutdownDate, shutdownDateMin, shutdownDays, shutdownDaysMin, labels, allLabels, tags, metadata, details);

        // TODO: test validations
    }
    
    /**
     * Get Security Groups for an Instance
     *
     * This returns a list of all of the security groups applied to an instance and whether the firewall is enabled.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listSecurityGroupsInstanceTest() throws ApiException {
        Long id = null;
        Object response = api.listSecurityGroupsInstance(id);

        // TODO: test validations
    }
    
    /**
     * Lock an Instance
     *
     * This will lock the instance. While locked, instances may not be removed.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void lockInstanceTest() throws ApiException {
        Long id = null;
        Model200Success response = api.lockInstance(id);

        // TODO: test validations
    }
    
    /**
     * Refresh State of an Instance
     *
     * This endpoint provides a way to refresh the state of an instance. This action only applies to Terraform, CloudFormation and ARM and will return an HTTP 400 error for other types.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void refreshStateInstanceTest() throws ApiException {
        Long id = null;
        Model200Success response = api.refreshStateInstance(id);

        // TODO: test validations
    }
    
    /**
     * Remove From Control
     *
     * Will delete a brownfield instance (or instances) asynchronously (Only deletes records local to Morpheus, actual VMs remain unchanged).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeInstancesFromControlTest() throws ApiException {
        InlineObject99 inlineObject99 = null;
        SuccessMessage response = api.removeInstancesFromControl(inlineObject99);

        // TODO: test validations
    }
    
    /**
     * Resize an Instance
     *
     * It is possible to resize containers within an instance by increasing their memory plan or storage limit. This is done by assigning a new service plan to the container. This endpoint also allows for NIC reconfiguration by passing a new array of networkInterfaces
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resizeInstanceTest() throws ApiException {
        Long id = null;
        InstanceResize instanceResize = null;
        Object response = api.resizeInstance(id, instanceResize);

        // TODO: test validations
    }
    
    /**
     * Restart an instance
     *
     * This will restart all containers running within an instance. This includes rebuilding the environment variables and applying settings to the docker containers.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restartInstanceTest() throws ApiException {
        Long id = null;
        Object response = api.restartInstance(id);

        // TODO: test validations
    }
    
    /**
     * Revert Instance to Snapshot
     *
     * It is possible to restore an Instance to a snapshot.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void revertSnapshotInstanceTest() throws ApiException {
        Long id = null;
        BigDecimal snapshotId = null;
        Model200Success response = api.revertSnapshotInstance(id, snapshotId);

        // TODO: test validations
    }
    
    /**
     * Run Workflow on an Instance
     *
     * This will run a provisioning workflow on all containers in an instance.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void runWorkflowInstanceTest() throws ApiException {
        Long id = null;
        Long workflowId = null;
        String workflowName = null;
        InstanceWorkflow instanceWorkflow = null;
        Model200Success response = api.runWorkflowInstance(id, workflowId, workflowName, instanceWorkflow);

        // TODO: test validations
    }
    
    /**
     * Apply State of an Instance
     *
     * This endpoint provides a way to apply the state of an instance. This action only applies to Terraform, CloudFormation and ARM and will return an HTTP 400 error for other types.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setApplyInstanceTest() throws ApiException {
        Long id = null;
        InlineObject91 inlineObject91 = null;
        Model200Success response = api.setApplyInstance(id, inlineObject91);

        // TODO: test validations
    }
    
    /**
     * Set Security Groups for an Instance
     *
     * Set Security Groups for an Instance
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setInstanceSecurityGroupsTest() throws ApiException {
        Long id = null;
        InlineObject94 inlineObject94 = null;
        Object response = api.setInstanceSecurityGroups(id, inlineObject94);

        // TODO: test validations
    }
    
    /**
     * Snapshot an Instance
     *
     * This endpoint will create a snapshot of an instance. This is done asychronously, so the ID of the snapshot is not returned.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void snapshotInstanceTest() throws ApiException {
        Long id = null;
        InstanceSnapshot instanceSnapshot = null;
        Model200Success response = api.snapshotInstance(id, instanceSnapshot);

        // TODO: test validations
    }
    
    /**
     * Get list of snapshots for an Instance
     *
     * Get list of snapshots for an Instance
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void snapshotsInstanceTest() throws ApiException {
        Long id = null;
        InstanceSnapshots response = api.snapshotsInstance(id);

        // TODO: test validations
    }
    
    /**
     * Start an instance
     *
     * This will start all containers running within an instance.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void startInstanceTest() throws ApiException {
        Long id = null;
        Object response = api.startInstance(id);

        // TODO: test validations
    }
    
    /**
     * Stop an instance
     *
     * This will stop all containers running within an instance.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void stopInstanceTest() throws ApiException {
        Long id = null;
        Object response = api.stopInstance(id);

        // TODO: test validations
    }
    
    /**
     * Suspend an instance
     *
     * This will suspend all containers in the instance.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void suspendInstanceTest() throws ApiException {
        Long id = null;
        Model200Success response = api.suspendInstance(id);

        // TODO: test validations
    }
    
    /**
     * Unlock an Instance
     *
     * This will unlock the instance.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void unlockInstanceTest() throws ApiException {
        Long id = null;
        Model200Success response = api.unlockInstance(id);

        // TODO: test validations
    }
    
    /**
     * Updating an Instance
     *
     * Updating an Instance
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateInstanceTest() throws ApiException {
        Long id = null;
        InstanceUpdate instanceUpdate = null;
        Object response = api.updateInstance(id, instanceUpdate);

        // TODO: test validations
    }
    
    /**
     * Updating a label for an Instance&#39;s Network
     *
     * Updating an Instance&#39;s Network&#39;s Label
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateInstanceNetworkInterfaceTest() throws ApiException {
        Long id = null;
        BigDecimal networkInterfaceId = null;
        NetworkInterfaceUpdate networkInterfaceUpdate = null;
        Object response = api.updateInstanceNetworkInterface(id, networkInterfaceId, networkInterfaceUpdate);

        // TODO: test validations
    }
    
    /**
     * Updating an Instance Schedule
     *
     * This endpoint provides updating of an instance schedule
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateInstanceScheduleTest() throws ApiException {
        Long id = null;
        Long scheduleId = null;
        InlineObject97 inlineObject97 = null;
        Object response = api.updateInstanceSchedule(id, scheduleId, inlineObject97);

        // TODO: test validations
    }
    
    /**
     * Updates an Instance Scale Threshold
     *
     * Updates the scale threshold settings for a specific instance 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateInstanceThresholdTest() throws ApiException {
        Long id = null;
        InlineObject95 inlineObject95 = null;
        Object response = api.updateInstanceThreshold(id, inlineObject95);

        // TODO: test validations
    }
    
    /**
     * Update an Instance Wiki Page
     *
     * Updates an instance Wiki page. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateWikiInstanceTest() throws ApiException {
        Long id = null;
        InlineObject270 inlineObject270 = null;
        Object response = api.updateWikiInstance(id, inlineObject270);

        // TODO: test validations
    }
    
}
