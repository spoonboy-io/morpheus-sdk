/*
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.DefaultError;
import org.openapitools.client.model.InlineObject60;
import org.openapitools.client.model.InlineObject61;
import org.openapitools.client.model.InlineResponse20033;
import org.openapitools.client.model.Model200Success;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ContactsApi
 */
@Ignore
public class ContactsApiTest {

    private final ContactsApi api = new ContactsApi();

    
    /**
     * Create a New Contact
     *
     * Create a new monitoring contact.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addContactsTest() throws ApiException {
        InlineObject60 inlineObject60 = null;
        Object response = api.addContacts(inlineObject60);

        // TODO: test validations
    }
    
    /**
     * Delete a Specific Contact
     *
     * Delete an existing monitoring contact.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContactsTest() throws ApiException {
        Long id = null;
        Model200Success response = api.deleteContacts(id);

        // TODO: test validations
    }
    
    /**
     * Get a Specific Contact
     *
     * Get details about a specific monitoring contact.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getContactsTest() throws ApiException {
        Long id = null;
        InlineResponse20033 response = api.getContacts(id);

        // TODO: test validations
    }
    
    /**
     * List All Contacts
     *
     * Get a list of monitoring contacts.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listContactsTest() throws ApiException {
        Long max = null;
        Long offset = null;
        String name = null;
        String phrase = null;
        Object response = api.listContacts(max, offset, name, phrase);

        // TODO: test validations
    }
    
    /**
     * Update Contact
     *
     * Update an existing monitoring contact.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContactsTest() throws ApiException {
        Long id = null;
        InlineObject61 inlineObject61 = null;
        Object response = api.updateContacts(id, inlineObject61);

        // TODO: test validations
    }
    
}
