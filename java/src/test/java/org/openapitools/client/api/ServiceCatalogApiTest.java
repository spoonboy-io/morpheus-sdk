/*
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CatalogCartItemCreate;
import org.openapitools.client.model.DefaultError;
import org.openapitools.client.model.InlineObject227;
import org.openapitools.client.model.InlineResponse200139;
import org.openapitools.client.model.InlineResponse200140;
import org.openapitools.client.model.Model200Success;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ServiceCatalogApi
 */
@Ignore
public class ServiceCatalogApiTest {

    private final ServiceCatalogApi api = new ServiceCatalogApi();

    
    /**
     * Checkout Catalog Cart
     *
     * Use this command to checkout, finalizing your cart and placing an order. This converts each item in the cart to an inventory item, changing the status from IN_CART to ORDERED and potentially starts the provisioning process for each item.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addCatalogCartTest() throws ApiException {
        Object response = api.addCatalogCart();

        // TODO: test validations
    }
    
    /**
     * Add Catalog Item to Cart
     *
     * Use this command to add an item to your service catalog cart.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addCatalogCartItemTest() throws ApiException {
        Boolean validate = null;
        CatalogCartItemCreate catalogCartItemCreate = null;
        Object response = api.addCatalogCartItem(validate, catalogCartItemCreate);

        // TODO: test validations
    }
    
    /**
     * Place Catalog Order
     *
     * This will place an order for the specified items, adding items to the inventory right away, without using the cart.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addCatalogOrderTest() throws ApiException {
        Boolean validate = null;
        InlineObject227 inlineObject227 = null;
        Object response = api.addCatalogOrder(validate, inlineObject227);

        // TODO: test validations
    }
    
    /**
     * Clear Catalog Cart
     *
     * Use this command to empty your cart, deleting all the items in it.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCatalogCartTest() throws ApiException {
        Model200Success response = api.deleteCatalogCart();

        // TODO: test validations
    }
    
    /**
     * Remove a Catalog Item From Cart
     *
     * Will remove a catalog item that is currently in the cart.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCatalogCartItemTest() throws ApiException {
        Long id = null;
        Model200Success response = api.deleteCatalogCartItem(id);

        // TODO: test validations
    }
    
    /**
     * Delete a Catalog Inventory Item
     *
     * Will delete a catalog inventory item, which by default will deprovision any associated any instances and servers.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCatalogItemTest() throws ApiException {
        Long id = null;
        String preserveVolumes = null;
        String keepBackups = null;
        String releaseFloatingIps = null;
        String releaseEIPs = null;
        String removeInstances = null;
        String force = null;
        Model200Success response = api.deleteCatalogItem(id, preserveVolumes, keepBackups, releaseFloatingIps, releaseEIPs, removeInstances, force);

        // TODO: test validations
    }
    
    /**
     * Get a Specific Catalog Inventory Item
     *
     * This endpoint retrieves a specific catalog inventory item.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCatalogItemTest() throws ApiException {
        Long id = null;
        InlineResponse200140 response = api.getCatalogItem(id);

        // TODO: test validations
    }
    
    /**
     * Get a Specific Catalog Type
     *
     * This endpoint retrieves a specific catalog item type. This also returns an array of associated optionTypes that are used to configure the catalog item.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCatalogTypeTest() throws ApiException {
        Long id = null;
        Object response = api.getCatalogType(id);

        // TODO: test validations
    }
    
    /**
     * Get Catalog Cart
     *
     * This endpoint retrieves the current catalog cart and all the items in it.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listCatalogCartTest() throws ApiException {
        InlineResponse200139 response = api.listCatalogCart();

        // TODO: test validations
    }
    
    /**
     * List Catalog Inventory Items
     *
     * This endpoint retrieves a list of the catalog inventory items.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listCatalogItemsTest() throws ApiException {
        Long max = null;
        Long offset = null;
        String sort = null;
        String direction = null;
        String phrase = null;
        String name = null;
        Object response = api.listCatalogItems(max, offset, sort, direction, phrase, name);

        // TODO: test validations
    }
    
    /**
     * List Catalog Types
     *
     * This endpoint retrieves the types available for ordering.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listCatalogTypesTest() throws ApiException {
        Long max = null;
        Long offset = null;
        String sort = null;
        String direction = null;
        String phrase = null;
        String name = null;
        Boolean featured = null;
        Object response = api.listCatalogTypes(max, offset, sort, direction, phrase, name, featured);

        // TODO: test validations
    }
    
}
