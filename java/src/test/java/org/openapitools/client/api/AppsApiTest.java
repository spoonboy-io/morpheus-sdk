/*
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.1.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AddAppInstanceRequest;
import org.openapitools.client.model.AddApps200Response;
import org.openapitools.client.model.AppCreate;
import org.openapitools.client.model.AppUpdate;
import org.openapitools.client.model.ApplyAppStateRequest;
import org.openapitools.client.model.DefaultError;
import org.openapitools.client.model.GetApp200Response;
import org.openapitools.client.model.GetAppSecurityGroups200Response;
import org.openapitools.client.model.GetAppState200Response;
import org.openapitools.client.model.ListApps200Response;
import org.openapitools.client.model.Model200Success;
import org.openapitools.client.model.PrepareAppApply200Response;
import org.openapitools.client.model.RemoveAppInstanceRequest;
import org.openapitools.client.model.SetAppSecurityGroups200Response;
import org.openapitools.client.model.SetAppSecurityGroupsRequest;
import org.openapitools.client.model.ValidateAppState200Response;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AppsApi
 */
@Disabled
public class AppsApiTest {

    private final AppsApi api = new AppsApi();

    /**
     * Add Existing Instance to App
     *
     * Add Existing Instance to App
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addAppInstanceTest() throws ApiException {
        Long id = null;
        AddAppInstanceRequest addAppInstanceRequest = null;
        GetApp200Response response = api.addAppInstance(id, addAppInstanceRequest);
        // TODO: test validations
    }

    /**
     * Undo Delete of an App
     *
     * This operation will undo the delete of an app that is pending removal.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addAppUndoDeleteTest() throws ApiException {
        Long id = null;
        GetApp200Response response = api.addAppUndoDelete(id);
        // TODO: test validations
    }

    /**
     * Create an App
     *
     * Create an App
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addAppsTest() throws ApiException {
        AppCreate appCreate = null;
        AddApps200Response response = api.addApps(appCreate);
        // TODO: test validations
    }

    /**
     * Apply State of an App
     *
     * This endpoint provides a way to apply the state of an app. This action only applies to Terraform, CloudFormation and ARM and will return an HTTP 400 error for other types. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void applyAppStateTest() throws ApiException {
        Long id = null;
        ApplyAppStateRequest applyAppStateRequest = null;
        Model200Success response = api.applyAppState(id, applyAppStateRequest);
        // TODO: test validations
    }

    /**
     * Delete an App
     *
     * Will delete an app. Use removeInstances&#x3D;on to also delete the instances in the app and all associated monitors and backups.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAppTest() throws ApiException {
        Long id = null;
        String removeInstances = null;
        String preserveVolumes = null;
        String keepBackups = null;
        String releaseFloatingIps = null;
        String releaseEIPs = null;
        String force = null;
        Model200Success response = api.deleteApp(id, removeInstances, preserveVolumes, keepBackups, releaseFloatingIps, releaseEIPs, force);
        // TODO: test validations
    }

    /**
     * Get a Specific App
     *
     * This endpoint retrieves a specific app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAppTest() throws ApiException {
        Long id = null;
        GetApp200Response response = api.getApp(id);
        // TODO: test validations
    }

    /**
     * Get Security Groups for an App
     *
     * This returns a list of all of the security groups applied to an app and whether the firewall is enabled.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAppSecurityGroupsTest() throws ApiException {
        Long id = null;
        GetAppSecurityGroups200Response response = api.getAppSecurityGroups(id);
        // TODO: test validations
    }

    /**
     * Get State of an App
     *
     * This endpoint provides a way to view the state of an app. The response includes output and resource planning information from the template provider software such as Terraform. This action only applies to Terraform, CloudFormation and ARM and will return an HTTP 400 error for other types. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAppStateTest() throws ApiException {
        Long id = null;
        GetAppState200Response response = api.getAppState(id);
        // TODO: test validations
    }

    /**
     * Get All Apps
     *
     * This endpoint retrieves a paginated list of apps. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAppsTest() throws ApiException {
        Long max = null;
        Long offset = null;
        String name = null;
        String phrase = null;
        Long createdBy = null;
        Boolean showDeleted = null;
        String labels = null;
        String allLabels = null;
        ListApps200Response response = api.listApps(max, offset, name, phrase, createdBy, showDeleted, labels, allLabels);
        // TODO: test validations
    }

    /**
     * Prepare To Apply an App
     *
     * This endpoint provides a way to view the current app configuration and templateParameter variables available to apply. This action only applies to Terraform, CloudFormation and ARM and will return an HTTP 400 error for other types. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void prepareAppApplyTest() throws ApiException {
        Long id = null;
        PrepareAppApply200Response response = api.prepareAppApply(id);
        // TODO: test validations
    }

    /**
     * Refresh State of an App
     *
     * This endpoint provides a way to refresh the state of an app. This action only applies to Terraform, CloudFormation and ARM and will return an HTTP 400 error for other types.   
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void refreshAppStateTest() throws ApiException {
        Long id = null;
        Object body = null;
        Model200Success response = api.refreshAppState(id, body);
        // TODO: test validations
    }

    /**
     * Remove Instance from App
     *
     * Remove Instance from App
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeAppInstanceTest() throws ApiException {
        Long id = null;
        RemoveAppInstanceRequest removeAppInstanceRequest = null;
        GetApp200Response response = api.removeAppInstance(id, removeAppInstanceRequest);
        // TODO: test validations
    }

    /**
     * Set Security Groups for an App
     *
     * Set Security Groups for an App
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setAppSecurityGroupsTest() throws ApiException {
        Long id = null;
        SetAppSecurityGroupsRequest setAppSecurityGroupsRequest = null;
        SetAppSecurityGroups200Response response = api.setAppSecurityGroups(id, setAppSecurityGroupsRequest);
        // TODO: test validations
    }

    /**
     * Updating an App
     *
     * This endpoint provides updating of some basic app settings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAppTest() throws ApiException {
        Long id = null;
        AppUpdate appUpdate = null;
        GetApp200Response response = api.updateApp(id, appUpdate);
        // TODO: test validations
    }

    /**
     * Validate Apply State for an App
     *
     * This endpoint provides a way to validate app configuration and templateParameter variables before executing the apply. This only validates the configuration to see any planned changes and it does not actually apply the changes. This action only applies to Terraform, CloudFormation and ARM and will return an HTTP 400 error for other types. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void validateAppStateTest() throws ApiException {
        Long id = null;
        ApplyAppStateRequest applyAppStateRequest = null;
        ValidateAppState200Response response = api.validateAppState(id, applyAppStateRequest);
        // TODO: test validations
    }

}
