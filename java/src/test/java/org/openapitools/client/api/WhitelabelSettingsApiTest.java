/*
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.DefaultError;
import java.io.File;
import org.openapitools.client.model.InlineObject265;
import org.openapitools.client.model.InlineResponse200166;
import org.openapitools.client.model.Model200Success;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for WhitelabelSettingsApi
 */
@Ignore
public class WhitelabelSettingsApiTest {

    private final WhitelabelSettingsApi api = new WhitelabelSettingsApi();

    
    /**
     * Download Image
     *
     * Downloads the specified image.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getWhitelabelImageTest() throws ApiException {
        String imageType = null;
        File response = api.getWhitelabelImage(imageType);

        // TODO: test validations
    }
    
    /**
     * Get Whitelabel Settings
     *
     * This endpoint retrieves whitelabel settings.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listWhitelabelSettingsTest() throws ApiException {
        InlineResponse200166 response = api.listWhitelabelSettings();

        // TODO: test validations
    }
    
    /**
     * Reset Image
     *
     * Resets the specified image to the Morpheus default.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeWhitelabelImageTest() throws ApiException {
        String imageType = null;
        Model200Success response = api.removeWhitelabelImage(imageType);

        // TODO: test validations
    }
    
    /**
     * Update Images
     *
     * Uploads whitelabel images. Expects multipart form data as the request format, not JSON.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateWhitelabelImagesTest() throws ApiException {
        File headerLogoFile = null;
        Boolean resetHeaderLogo = null;
        File footerLogoFile = null;
        Boolean resetFooterLogo = null;
        File loginLogoFile = null;
        Boolean resetLoginLogo = null;
        File faviconFile = null;
        Boolean resetFaviconLogo = null;
        Model200Success response = api.updateWhitelabelImages(headerLogoFile, resetHeaderLogo, footerLogoFile, resetFooterLogo, loginLogoFile, resetLoginLogo, faviconFile, resetFaviconLogo);

        // TODO: test validations
    }
    
    /**
     * Update Whitelabel Settings
     *
     * Update Whitelabel Settings
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateWhitelabelSettingsTest() throws ApiException {
        InlineObject265 inlineObject265 = null;
        Model200Success response = api.updateWhitelabelSettings(inlineObject265);

        // TODO: test validations
    }
    
}
