/*
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.DefaultError;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.InlineObject238;
import org.openapitools.client.model.InlineObject239;
import org.openapitools.client.model.InlineObject240;
import org.openapitools.client.model.InlineObject241;
import org.openapitools.client.model.InlineObject242;
import org.openapitools.client.model.InlineObject243;
import org.openapitools.client.model.InlineResponse200150;
import org.openapitools.client.model.InlineResponse200151;
import org.openapitools.client.model.InlineResponse200152;
import org.openapitools.client.model.InlineResponse200153;
import org.openapitools.client.model.Model200Success;
import org.threeten.bp.OffsetDateTime;
import org.openapitools.client.model.TenantsAvailableRoles;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TenantsApi
 */
@Ignore
public class TenantsApiTest {

    private final TenantsApi api = new TenantsApi();

    
    /**
     * Create a Tenant
     *
     * Create a new tenant. This new account will be a sub-tenant with the master tenant as its parent.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addTenantTest() throws ApiException {
        InlineObject238 inlineObject238 = null;
        Object response = api.addTenant(inlineObject238);

        // TODO: test validations
    }
    
    /**
     * Create a User For a Tenant
     *
     * Create a User For a Tenant.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addUserTenantTest() throws ApiException {
        Long accountId = null;
        InlineObject243 inlineObject243 = null;
        Object response = api.addUserTenant(accountId, inlineObject243);

        // TODO: test validations
    }
    
    /**
     * Create a Group for Subtenant
     *
     * Create a Group for Subtenant.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createTenantSubtenantGroupTest() throws ApiException {
        Long accountId = null;
        InlineObject240 inlineObject240 = null;
        InlineResponse200152 response = api.createTenantSubtenantGroup(accountId, inlineObject240);

        // TODO: test validations
    }
    
    /**
     * Get tenant
     *
     * Get details about a tenant
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTenantTest() throws ApiException {
        Long id = null;
        InlineResponse200150 response = api.getTenant(id);

        // TODO: test validations
    }
    
    /**
     * Get a Specific Group for Subtenant
     *
     * This endpoint retrieves a specific group.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTenantSubtenantGroupTest() throws ApiException {
        Long accountId = null;
        Long id = null;
        InlineResponse200153 response = api.getTenantSubtenantGroup(accountId, id);

        // TODO: test validations
    }
    
    /**
     * Get Subtenant Groups
     *
     * Groups belonging to a subtenant can be managed by the master account.  This endpoint retrieves all groups and a list of zones associated with the group by id. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listTenantSubtenantGroupsTest() throws ApiException {
        Long accountId = null;
        String phrase = null;
        String name = null;
        OffsetDateTime lastUpdated = null;
        Object response = api.listTenantSubtenantGroups(accountId, phrase, name, lastUpdated);

        // TODO: test validations
    }
    
    /**
     * List All Tenants
     *
     * Get a list of tenants. A tenant is also referred to as an account.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listTenantsTest() throws ApiException {
        Long max = null;
        Long offset = null;
        String sort = null;
        String direction = null;
        String phrase = null;
        String name = null;
        OffsetDateTime lastUpdated = null;
        Object response = api.listTenants(max, offset, sort, direction, phrase, name, lastUpdated);

        // TODO: test validations
    }
    
    /**
     * List available roles for a tenant
     *
     * Get a list of available roles that can be assigned as the default base role for a sub tenant account.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listTenantsAvailableRolesTest() throws ApiException {
        TenantsAvailableRoles response = api.listTenantsAvailableRoles();

        // TODO: test validations
    }
    
    /**
     * Delete a Specific Tenant
     *
     * Delete an existing tenant. This action is not reversible and will result in the removal of all data pertaining to this tenant as well as potentially any provisioned assets depending on the value of &#x60;removeResources&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeTenantTest() throws ApiException {
        Long id = null;
        Boolean removeResources = null;
        Model200Success response = api.removeTenant(id, removeResources);

        // TODO: test validations
    }
    
    /**
     * Delete a Group for Subtenant
     *
     * If a group has zones or servers still tied to it, a delete action will fail.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeTenantSubtenantGroupTest() throws ApiException {
        Long accountId = null;
        Long id = null;
        Model200Success response = api.removeTenantSubtenantGroup(accountId, id);

        // TODO: test validations
    }
    
    /**
     * Update tenant
     *
     * Update an existing tenant.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateTenantTest() throws ApiException {
        Long id = null;
        InlineObject239 inlineObject239 = null;
        InlineResponse200151 response = api.updateTenant(id, inlineObject239);

        // TODO: test validations
    }
    
    /**
     * Updating a Group for Subtenant
     *
     * Updating a Group for Subtenant.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateTenantSubtenantGroupTest() throws ApiException {
        Long accountId = null;
        Long id = null;
        InlineObject241 inlineObject241 = null;
        InlineResponse200152 response = api.updateTenantSubtenantGroup(accountId, id, inlineObject241);

        // TODO: test validations
    }
    
    /**
     * Updating Group Zones for Subtenant
     *
     * This will update the zones that are assigned to the group. Any zones that are not passed in the zones parameter will be removed from the group.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateTenantSubtenantGroupZonesTest() throws ApiException {
        Long accountId = null;
        Long id = null;
        InlineObject242 inlineObject242 = null;
        Model200Success response = api.updateTenantSubtenantGroupZones(accountId, id, inlineObject242);

        // TODO: test validations
    }
    
}
