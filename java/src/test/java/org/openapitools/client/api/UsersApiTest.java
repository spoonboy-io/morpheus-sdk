/*
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.DefaultError;
import org.openapitools.client.model.InlineObject252;
import org.openapitools.client.model.InlineObject255;
import org.openapitools.client.model.InlineObject256;
import org.openapitools.client.model.InlineResponse200157;
import org.openapitools.client.model.InlineResponse200158;
import org.openapitools.client.model.InlineResponse200159;
import org.openapitools.client.model.InlineResponse200167;
import org.openapitools.client.model.Model200Success;
import org.threeten.bp.OffsetDateTime;
import org.openapitools.client.model.UserSettings;
import org.openapitools.client.model.UserSettingsRegenerateAccessToken;
import org.openapitools.client.model.UsersAvailableRoles;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UsersApi
 */
@Ignore
public class UsersApiTest {

    private final UsersApi api = new UsersApi();

    
    /**
     * Create a New User
     *
     * Create a new user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addUserTest() throws ApiException {
        Long accountId = null;
        InlineObject255 inlineObject255 = null;
        Object response = api.addUser(accountId, inlineObject255);

        // TODO: test validations
    }
    
    /**
     * Delete a User
     *
     * Delete an existing user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUserTest() throws ApiException {
        Long id = null;
        Model200Success response = api.deleteUser(id);

        // TODO: test validations
    }
    
    /**
     * Revoke API Access Token
     *
     * This endpoint revokes your API access token for the specified client.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUserSettingsAccessTokenTest() throws ApiException {
        Long userId = null;
        String clientId = null;
        Model200Success response = api.deleteUserSettingsAccessToken(userId, clientId);

        // TODO: test validations
    }
    
    /**
     * Delete Avatar
     *
     * Delete your avatar image.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUserSettingsAvatarTest() throws ApiException {
        Long userId = null;
        Model200Success response = api.deleteUserSettingsAvatar(userId);

        // TODO: test validations
    }
    
    /**
     * Delete Desktop Background
     *
     * Delete your desktop background image.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUserSettingsDesktopBackgroundTest() throws ApiException {
        Long userId = null;
        Model200Success response = api.deleteUserSettingsDesktopBackground(userId);

        // TODO: test validations
    }
    
    /**
     * Get a Specific User
     *
     * This endpoint will retrieve a specific user by id if the user has permission to access the user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserTest() throws ApiException {
        Long id = null;
        Boolean includeAccess = null;
        InlineResponse200158 response = api.getUser(id, includeAccess);

        // TODO: test validations
    }
    
    /**
     * Get a Specific User Permissions
     *
     * This will list all the permissions for a specific user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserPermissionsTest() throws ApiException {
        Long id = null;
        InlineResponse200159 response = api.getUserPermissions(id);

        // TODO: test validations
    }
    
    /**
     * Get Available API Clients
     *
     * This endpoint retrieves a list of available API clients.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserSettingsApiClientsTest() throws ApiException {
        Long userId = null;
        InlineResponse200157 response = api.getUserSettingsApiClients(userId);

        // TODO: test validations
    }
    
    /**
     * User Settings
     *
     * Provides API for managing your own user settings and api access tokens.  This endpoint retrieves your user settings and API access token information. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listUserSettingsTest() throws ApiException {
        Long userId = null;
        UserSettings response = api.listUserSettings(userId);

        // TODO: test validations
    }
    
    /**
     * List All Users
     *
     * This endpoint retrieves all users in the current user&#39;s tenant account. Master tenant users with permission to manage subtenants can use &#x60;global&#x3D;true&#x60; to find users across all tenants. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listUsersTest() throws ApiException {
        Long max = null;
        Long offset = null;
        String sort = null;
        String direction = null;
        String phrase = null;
        String username = null;
        String email = null;
        Long roleId = null;
        OffsetDateTime lastUpdated = null;
        Long accountId = null;
        Boolean global = null;
        Object response = api.listUsers(max, offset, sort, direction, phrase, username, email, roleId, lastUpdated, accountId, global);

        // TODO: test validations
    }
    
    /**
     * List available roles for a user
     *
     * Get a list of roles that can be assigned to a user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listUsersAvailableRolesTest() throws ApiException {
        Long accountId = null;
        UsersAvailableRoles response = api.listUsersAvailableRoles(accountId);

        // TODO: test validations
    }
    
    /**
     * Update User Settings
     *
     * This endpoint allows updating user settings. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateUserSettingsTest() throws ApiException {
        Long userId = null;
        InlineObject252 inlineObject252 = null;
        Model200Success response = api.updateUserSettings(userId, inlineObject252);

        // TODO: test validations
    }
    
    /**
     * Regenerate API Access Token
     *
     * This endpoint regenerates your API access token for the specified client. If a current token exists, it is revoked and a new token is returned.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateUserSettingsAccessTokenTest() throws ApiException {
        Long userId = null;
        String clientId = null;
        UserSettingsRegenerateAccessToken response = api.updateUserSettingsAccessToken(userId, clientId);

        // TODO: test validations
    }
    
    /**
     * Update Avatar
     *
     * This endpoint updates your avatar image. Expects multipart form data as the request format, not JSON.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateUserSettingsAvatarTest() throws ApiException {
        Long userId = null;
        String userAvatar = null;
        Model200Success response = api.updateUserSettingsAvatar(userId, userAvatar);

        // TODO: test validations
    }
    
    /**
     * Update Desktop Background
     *
     * This endpoint updates your desktop background image that is used in the Virtual Desktop persona. Expects multipart form data as the request format, not JSON.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateUserSettingsDesktopBackgroundTest() throws ApiException {
        Long userId = null;
        String userDesktopBackground = null;
        Model200Success response = api.updateUserSettingsDesktopBackground(userId, userDesktopBackground);

        // TODO: test validations
    }
    
    /**
     * Update user
     *
     * Update an existing user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateUsersTest() throws ApiException {
        Long id = null;
        InlineObject256 inlineObject256 = null;
        Object response = api.updateUsers(id, inlineObject256);

        // TODO: test validations
    }
    
    /**
     * Retrieves information about current user roles and permissions
     *
     * Provides API to retrieve information about yourself, including your roles and permissions.  The appliance build version is also returned. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void whoamiTest() throws ApiException {
        InlineResponse200167 response = api.whoami();

        // TODO: test validations
    }
    
}
