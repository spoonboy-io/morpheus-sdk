/*
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.DefaultError;
import org.openapitools.client.model.InlineObject27;
import org.openapitools.client.model.InlineObject28;
import org.openapitools.client.model.Model200Success;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ClientsApi
 */
@Ignore
public class ClientsApiTest {

    private final ClientsApi api = new ClientsApi();

    
    /**
     * Create an Oauth Client
     *
     * Create a new Oauth Client.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addClientTest() throws ApiException {
        InlineObject27 inlineObject27 = null;
        Object response = api.addClient(inlineObject27);

        // TODO: test validations
    }
    
    /**
     * Retrieves a Specific Oauth Client
     *
     * Retrieves a specific oauth client. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getClientsTest() throws ApiException {
        Long id = null;
        Object response = api.getClients(id);

        // TODO: test validations
    }
    
    /**
     * Get All Oauth Clients
     *
     * This endpoint retrieves a paginated list of oauth clients.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listClientsTest() throws ApiException {
        Long max = null;
        Long offset = null;
        String sort = null;
        String direction = null;
        String phrase = null;
        String clientId = null;
        Object response = api.listClients(max, offset, sort, direction, phrase, clientId);

        // TODO: test validations
    }
    
    /**
     * Deletes an Oauth Client
     *
     * Deletes a specified oauth client. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeClientsTest() throws ApiException {
        Long id = null;
        Model200Success response = api.removeClients(id);

        // TODO: test validations
    }
    
    /**
     * Updates an Oauth Client
     *
     * Updates an oauth client. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateClientsTest() throws ApiException {
        Long id = null;
        InlineObject28 inlineObject28 = null;
        Object response = api.updateClients(id, inlineObject28);

        // TODO: test validations
    }
    
}
