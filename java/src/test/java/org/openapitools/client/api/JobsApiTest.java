/*
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.DefaultError;
import org.openapitools.client.model.InlineObject103;
import org.openapitools.client.model.InlineObject104;
import org.openapitools.client.model.Model200Success;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for JobsApi
 */
@Ignore
public class JobsApiTest {

    private final JobsApi api = new JobsApi();

    
    /**
     * Creates a Job
     *
     * Creates a job. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addJobsTest() throws ApiException {
        InlineObject103 inlineObject103 = null;
        Object response = api.addJobs(inlineObject103);

        // TODO: test validations
    }
    
    /**
     * Executes a Specific Job
     *
     * Executes a specific job. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void executeJobsTest() throws ApiException {
        Long id = null;
        String customConfig = null;
        Model200Success response = api.executeJobs(id, customConfig);

        // TODO: test validations
    }
    
    /**
     * Retrieves a Specific Job Execution Event
     *
     * Retrieves a specific job execution event. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getJobExecutionEventsTest() throws ApiException {
        Long id = null;
        Long eventId = null;
        Object response = api.getJobExecutionEvents(id, eventId);

        // TODO: test validations
    }
    
    /**
     * Retrieves a Specific Job Execution
     *
     * Retrieves a specific job execution. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getJobExecutionsTest() throws ApiException {
        Long id = null;
        Object response = api.getJobExecutions(id);

        // TODO: test validations
    }
    
    /**
     * Retrieves a Specific Job
     *
     * Retrieves a specific job. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getJobsTest() throws ApiException {
        Long id = null;
        Object response = api.getJobs(id);

        // TODO: test validations
    }
    
    /**
     * Retrieves all Job Executions
     *
     * Retrieves all job executions. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listJobExecutionsTest() throws ApiException {
        Long max = null;
        Long offset = null;
        String sort = null;
        String direction = null;
        String phrase = null;
        String name = null;
        Object response = api.listJobExecutions(max, offset, sort, direction, phrase, name);

        // TODO: test validations
    }
    
    /**
     * Retrieves all Jobs
     *
     * Retrieves all jobs. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listJobsTest() throws ApiException {
        Long max = null;
        Long offset = null;
        String sort = null;
        String direction = null;
        String phrase = null;
        String name = null;
        String itemSource = null;
        String labels = null;
        String allLabels = null;
        Object response = api.listJobs(max, offset, sort, direction, phrase, name, itemSource, labels, allLabels);

        // TODO: test validations
    }
    
    /**
     * Deletes a Job
     *
     * Deletes a specified job. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeJobsTest() throws ApiException {
        Long id = null;
        Model200Success response = api.removeJobs(id);

        // TODO: test validations
    }
    
    /**
     * Updates a Job
     *
     * Updates a job. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateJobsTest() throws ApiException {
        Long id = null;
        InlineObject104 inlineObject104 = null;
        Object response = api.updateJobs(id, inlineObject104);

        // TODO: test validations
    }
    
}
