/*
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ClusterApiConfig;
import org.openapitools.client.model.ClusterApplyTemplate;
import org.openapitools.client.model.DefaultError;
import org.openapitools.client.model.InlineObject268;
import org.openapitools.client.model.InlineObject52;
import org.openapitools.client.model.InlineObject53;
import org.openapitools.client.model.InlineObject54;
import org.openapitools.client.model.InlineObject55;
import org.openapitools.client.model.InlineObject56;
import org.openapitools.client.model.InlineObject57;
import org.openapitools.client.model.InlineObject58;
import org.openapitools.client.model.InlineObject59;
import org.openapitools.client.model.InlineResponse200168;
import org.openapitools.client.model.InlineResponse20026;
import org.openapitools.client.model.InlineResponse20027;
import org.openapitools.client.model.InlineResponse20028;
import org.openapitools.client.model.InlineResponse20029;
import org.openapitools.client.model.InlineResponse20030;
import org.openapitools.client.model.InlineResponse20031;
import org.openapitools.client.model.InlineResponse20032;
import org.openapitools.client.model.Model200Success;
import org.openapitools.client.model.SuccessError;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ClustersApi
 */
@Ignore
public class ClustersApiTest {

    private final ClustersApi api = new ClustersApi();

    
    /**
     * Create a Cluster
     *
     * This endpoint will create a cluster.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addClusterTest() throws ApiException {
        InlineObject52 inlineObject52 = null;
        Object response = api.addCluster(inlineObject52);

        // TODO: test validations
    }
    
    /**
     * Add Namespace (Kubernetes)
     *
     * Add Namespace (Kubernetes)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addClusterNamespaceTest() throws ApiException {
        Integer clusterId = null;
        InlineObject56 inlineObject56 = null;
        Object response = api.addClusterNamespace(clusterId, inlineObject56);

        // TODO: test validations
    }
    
    /**
     * Add Worker
     *
     * Add Worker
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addClusterWorkerTest() throws ApiException {
        Integer clusterId = null;
        InlineObject59 inlineObject59 = null;
        Object response = api.addClusterWorker(clusterId, inlineObject59);

        // TODO: test validations
    }
    
    /**
     * Apply Template to Cluster (Kubernetes)
     *
     * This endpoint applies the requested template, via Service Url, YAML, or Spec Template name/id, to a Kubernetes cluster.  **Note**: The success response informs of status of submission of request. Results of the actual template application can be assesed with the returned execution id via [/api/execution-request/{uniqueId}](/reference/getexecutionrequest) 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void applyTemplateTest() throws ApiException {
        Integer clusterId = null;
        InlineObject54 inlineObject54 = null;
        ClusterApplyTemplate response = api.applyTemplate(clusterId, inlineObject54);

        // TODO: test validations
    }
    
    /**
     * Delete a Cluster
     *
     * Will delete a cluster and associated resources, hosts, volumes asynchronously
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteClusterTest() throws ApiException {
        Integer clusterId = null;
        String removeInstances = null;
        String removeResources = null;
        String preserveVolumes = null;
        String releaseFloatingIps = null;
        String releaseEIPs = null;
        String force = null;
        Model200Success response = api.deleteCluster(clusterId, removeInstances, removeResources, preserveVolumes, releaseFloatingIps, releaseEIPs, force);

        // TODO: test validations
    }
    
    /**
     * Delete Container
     *
     * This endpoint deletes a specified container from a specified cluster.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteClusterContainerTest() throws ApiException {
        Integer clusterId = null;
        Long id = null;
        String force = null;
        Model200Success response = api.deleteClusterContainer(clusterId, id, force);

        // TODO: test validations
    }
    
    /**
     * Delete Deployment
     *
     * This endpoint deletes a specified deployment from a specified cluster.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteClusterDeploymentTest() throws ApiException {
        Integer clusterId = null;
        Long id = null;
        String force = null;
        Model200Success response = api.deleteClusterDeployment(clusterId, id, force);

        // TODO: test validations
    }
    
    /**
     * Delete a Job
     *
     * This endpoint deletes a specified job from a specified cluster.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteClusterJobTest() throws ApiException {
        Integer clusterId = null;
        Long id = null;
        String force = null;
        Model200Success response = api.deleteClusterJob(clusterId, id, force);

        // TODO: test validations
    }
    
    /**
     * Delete a Namespace (Kubernetes)
     *
     * Will delete a namespace from the specified cluster
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteClusterNamespaceTest() throws ApiException {
        Integer clusterId = null;
        Long id = null;
        String force = null;
        Model200Success response = api.deleteClusterNamespace(clusterId, id, force);

        // TODO: test validations
    }
    
    /**
     * Delete a Service
     *
     * This endpoint deletes a specified service from a specified cluster.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteClusterServiceTest() throws ApiException {
        Integer clusterId = null;
        Long id = null;
        String force = null;
        Model200Success response = api.deleteClusterService(clusterId, id, force);

        // TODO: test validations
    }
    
    /**
     * Delete a Stateful Set
     *
     * Will delete a stateful set from the specified cluster
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteClusterStatefulSetTest() throws ApiException {
        Integer clusterId = null;
        Long id = null;
        String force = null;
        SuccessError response = api.deleteClusterStatefulSet(clusterId, id, force);

        // TODO: test validations
    }
    
    /**
     * Delete a Volume
     *
     * Will delete a volume from the specified cluster
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteClusterVolumeTest() throws ApiException {
        Integer clusterId = null;
        Long id = null;
        String force = null;
        Model200Success response = api.deleteClusterVolume(clusterId, id, force);

        // TODO: test validations
    }
    
    /**
     * Delete a Worker
     *
     * This endpoint deletes a specified worker from a specified cluster.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteClusterWorkerTest() throws ApiException {
        Integer clusterId = null;
        Long id = null;
        String force = null;
        Model200Success response = api.deleteClusterWorker(clusterId, id, force);

        // TODO: test validations
    }
    
    /**
     * Get a Specific Cluster
     *
     * This endpoint retrieves a specific cluster.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getClusterTest() throws ApiException {
        Integer clusterId = null;
        InlineResponse20026 response = api.getCluster(clusterId);

        // TODO: test validations
    }
    
    /**
     * Get API Config
     *
     * This endpoint retrieves the API configuration for a specified cluster. The configuration is cluster type specific.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getClusterApiConfigTest() throws ApiException {
        Integer clusterId = null;
        ClusterApiConfig response = api.getClusterApiConfig(clusterId);

        // TODO: test validations
    }
    
    /**
     * Get a Specific Datastore
     *
     * This endpoint retrieves a specific cluster datastore.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getClusterDatastoreTest() throws ApiException {
        Integer clusterId = null;
        Long id = null;
        InlineResponse20027 response = api.getClusterDatastore(clusterId, id);

        // TODO: test validations
    }
    
    /**
     * Get Cluster History
     *
     * This endpoint retrieves the process history for a specific cluster.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getClusterHistoryTest() throws ApiException {
        Integer clusterId = null;
        Object response = api.getClusterHistory(clusterId);

        // TODO: test validations
    }
    
    /**
     * Get Cluster History Details
     *
     * This endpoint retrieves the history for a specific cluster process.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getClusterHistoryDetailTest() throws ApiException {
        Integer clusterId = null;
        Long id = null;
        InlineResponse20028 response = api.getClusterHistoryDetail(clusterId, id);

        // TODO: test validations
    }
    
    /**
     * Get Cluster History Event
     *
     * This endpoint retrieves the process event for a specific cluster process event.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getClusterHistoryEventDetailTest() throws ApiException {
        Integer clusterId = null;
        Long id = null;
        InlineResponse20029 response = api.getClusterHistoryEventDetail(clusterId, id);

        // TODO: test validations
    }
    
    /**
     * Get Masters (Kubernetes)
     *
     * This endpoint retrieves masters of a specified kubernetes cluster.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getClusterMastersTest() throws ApiException {
        Integer clusterId = null;
        String phrase = null;
        InlineResponse20030 response = api.getClusterMasters(clusterId, phrase);

        // TODO: test validations
    }
    
    /**
     * Get Namespace (Kubernetes)
     *
     * This endpoint retrieves a specific namespace of a Kubernetes cluster
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getClusterNamespaceTest() throws ApiException {
        Integer clusterId = null;
        Long id = null;
        InlineResponse20031 response = api.getClusterNamespace(clusterId, id);

        // TODO: test validations
    }
    
    /**
     * List Namespaces (Kubernetes)
     *
     * List Namespaces (Kubernetes)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getClusterNamespacesTest() throws ApiException {
        Integer clusterId = null;
        Object response = api.getClusterNamespaces(clusterId);

        // TODO: test validations
    }
    
    /**
     * Get Cluster Upgrade Versions (Kubernetes)
     *
     * This endpoint returns valid version targets for upgrading kubectl and kubeadm on the cluster.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getClusterUpgradeVersionsTest() throws ApiException {
        Integer clusterId = null;
        InlineResponse20032 response = api.getClusterUpgradeVersions(clusterId);

        // TODO: test validations
    }
    
    /**
     * Retrieves a Cluster Wiki Page
     *
     * This endpoint retrieves a cluster Wiki page. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getWikiClusterTest() throws ApiException {
        Integer clusterId = null;
        InlineResponse200168 response = api.getWikiCluster(clusterId);

        // TODO: test validations
    }
    
    /**
     * Get Containers
     *
     * This endpoint retrieves containers of a specified cluster.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listClusterContainersTest() throws ApiException {
        Integer clusterId = null;
        Long max = null;
        Long offset = null;
        String sort = null;
        String order = null;
        String phrase = null;
        String resourceLevel = null;
        Object response = api.listClusterContainers(clusterId, max, offset, sort, order, phrase, resourceLevel);

        // TODO: test validations
    }
    
    /**
     * Get Datastores
     *
     * This endpoint retrieves datastores of a specified cluster.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listClusterDatastoresTest() throws ApiException {
        Integer clusterId = null;
        Long max = null;
        Long offset = null;
        String sort = null;
        String order = null;
        String phrase = null;
        String name = null;
        String code = null;
        Boolean hideInactive = null;
        Object response = api.listClusterDatastores(clusterId, max, offset, sort, order, phrase, name, code, hideInactive);

        // TODO: test validations
    }
    
    /**
     * Get Deployments
     *
     * This endpoint retrieves deployments of a specified cluster.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listClusterDeploymentsTest() throws ApiException {
        Integer clusterId = null;
        Long max = null;
        Long offset = null;
        String sort = null;
        String order = null;
        String phrase = null;
        String resourceLevel = null;
        Object response = api.listClusterDeployments(clusterId, max, offset, sort, order, phrase, resourceLevel);

        // TODO: test validations
    }
    
    /**
     * Get Jobs
     *
     * This endpoint retrieves jobs of a specified cluster.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listClusterJobsTest() throws ApiException {
        Integer clusterId = null;
        Long max = null;
        Long offset = null;
        String sort = null;
        String order = null;
        String phrase = null;
        Object response = api.listClusterJobs(clusterId, max, offset, sort, order, phrase);

        // TODO: test validations
    }
    
    /**
     * Get Pods
     *
     * This endpoint retrieves pods of a specified cluster.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listClusterPodsTest() throws ApiException {
        Integer clusterId = null;
        Long max = null;
        Long offset = null;
        String sort = null;
        String order = null;
        String phrase = null;
        String resourceLevel = null;
        Object response = api.listClusterPods(clusterId, max, offset, sort, order, phrase, resourceLevel);

        // TODO: test validations
    }
    
    /**
     * Get Services
     *
     * This endpoint retrieves services of a specified cluster.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listClusterServicesTest() throws ApiException {
        Integer clusterId = null;
        Long max = null;
        Long offset = null;
        String sort = null;
        String order = null;
        String phrase = null;
        Object response = api.listClusterServices(clusterId, max, offset, sort, order, phrase);

        // TODO: test validations
    }
    
    /**
     * Get Stateful Sets
     *
     * This endpoint retrieves stateful sets of a specified cluster.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listClusterStatefulSetsTest() throws ApiException {
        Integer clusterId = null;
        Long max = null;
        Long offset = null;
        String sort = null;
        String order = null;
        String phrase = null;
        String resourceLevel = null;
        Object response = api.listClusterStatefulSets(clusterId, max, offset, sort, order, phrase, resourceLevel);

        // TODO: test validations
    }
    
    /**
     * Get All Cluster Types
     *
     * Fetch a list of available cluster types.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listClusterTypesTest() throws ApiException {
        Long max = null;
        Long offset = null;
        String sort = null;
        String direction = null;
        String phrase = null;
        String name = null;
        String code = null;
        String providerType = null;
        Object response = api.listClusterTypes(max, offset, sort, direction, phrase, name, code, providerType);

        // TODO: test validations
    }
    
    /**
     * Get Volumes
     *
     * This endpoint retrieves volumes of a specified cluster.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listClusterVolumesTest() throws ApiException {
        Integer clusterId = null;
        Object response = api.listClusterVolumes(clusterId);

        // TODO: test validations
    }
    
    /**
     * Get Workers
     *
     * This endpoint retrieves workers of a specified cluster.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listClusterWorkersTest() throws ApiException {
        Integer clusterId = null;
        Object response = api.listClusterWorkers(clusterId);

        // TODO: test validations
    }
    
    /**
     * Get All Clusters
     *
     * This endpoint retrieves all clusters and a list of clusters associated with the zone by id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listClustersTest() throws ApiException {
        Long max = null;
        Long offset = null;
        String sort = null;
        String direction = null;
        String phrase = null;
        String name = null;
        Long zoneId = null;
        Long typeId = null;
        String labels = null;
        String allLabels = null;
        Object response = api.listClusters(max, offset, sort, direction, phrase, name, zoneId, typeId, labels, allLabels);

        // TODO: test validations
    }
    
    /**
     * Restart a Container
     *
     * Will restart a container in the specified cluster.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restartClusterContainerTest() throws ApiException {
        Integer clusterId = null;
        Long id = null;
        SuccessError response = api.restartClusterContainer(clusterId, id);

        // TODO: test validations
    }
    
    /**
     * Restart a Deployment
     *
     * Will restart a deployment in the specified cluster.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restartClusterDeploymentTest() throws ApiException {
        Integer clusterId = null;
        Long id = null;
        SuccessError response = api.restartClusterDeployment(clusterId, id);

        // TODO: test validations
    }
    
    /**
     * Restart a Pod
     *
     * Will restart a pod in the specified cluster.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restartClusterPodTest() throws ApiException {
        Integer clusterId = null;
        Long id = null;
        SuccessError response = api.restartClusterPod(clusterId, id);

        // TODO: test validations
    }
    
    /**
     * Restart a Stateful Set
     *
     * Will restart a stateful set in the specified cluster.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restartClusterStatefulSetTest() throws ApiException {
        Integer clusterId = null;
        Long id = null;
        SuccessError response = api.restartClusterStatefulSet(clusterId, id);

        // TODO: test validations
    }
    
    /**
     * Update Cluster
     *
     * Update Cluster
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateClusterTest() throws ApiException {
        Integer clusterId = null;
        InlineObject53 inlineObject53 = null;
        Object response = api.updateCluster(clusterId, inlineObject53);

        // TODO: test validations
    }
    
    /**
     * Update Datastore
     *
     * Update Datastore
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateClusterDatastoreTest() throws ApiException {
        Integer clusterId = null;
        Long id = null;
        InlineObject55 inlineObject55 = null;
        Object response = api.updateClusterDatastore(clusterId, id, inlineObject55);

        // TODO: test validations
    }
    
    /**
     * Update Namespace (Kubernetes)
     *
     * Update Namespace (Kubernetes)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateClusterNamespaceTest() throws ApiException {
        Integer clusterId = null;
        Long id = null;
        InlineObject57 inlineObject57 = null;
        Object response = api.updateClusterNamespace(clusterId, id, inlineObject57);

        // TODO: test validations
    }
    
    /**
     * Update Cluster Permissions
     *
     * Update Cluster Permissions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateClusterPermissionsTest() throws ApiException {
        Integer clusterId = null;
        InlineObject58 inlineObject58 = null;
        Object response = api.updateClusterPermissions(clusterId, inlineObject58);

        // TODO: test validations
    }
    
    /**
     * Upgrade a Cluster (Kubernetes)
     *
     * This endpoint updates the kubectl and kudeadm versions on a Kubernetes cluster to the specified version. Use Get Cluster Upgrade Versions to list valid version targets for the cluster.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateClusterUpgradeVersionsTest() throws ApiException {
        Integer clusterId = null;
        String targetVersion = null;
        Model200Success response = api.updateClusterUpgradeVersions(clusterId, targetVersion);

        // TODO: test validations
    }
    
    /**
     * Update Worker Count
     *
     * This endpoint resizes a cluster to the specified number of worker nodes (only supports Azure AKS, Google GKE, and Amazon EKS clusters).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateClusterWorkerCountTest() throws ApiException {
        Integer clusterId = null;
        Long workerCount = null;
        Model200Success response = api.updateClusterWorkerCount(clusterId, workerCount);

        // TODO: test validations
    }
    
    /**
     * Update a Cluster Wiki Page
     *
     * Updates a cluster Wiki page. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateWikiClusterTest() throws ApiException {
        Integer clusterId = null;
        InlineObject268 inlineObject268 = null;
        Object response = api.updateWikiCluster(clusterId, inlineObject268);

        // TODO: test validations
    }
    
}
