/*
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DefaultError;
import java.io.File;
import org.openapitools.client.model.InlineObject265;
import org.openapitools.client.model.InlineResponse200166;
import org.openapitools.client.model.Model200Success;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WhitelabelSettingsApi {
    private ApiClient localVarApiClient;

    public WhitelabelSettingsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WhitelabelSettingsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for getWhitelabelImage
     * @param imageType Valid image types (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWhitelabelImageCall(String imageType, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/whitelabel-settings/images/{imageType}"
            .replaceAll("\\{" + "imageType" + "\\}", localVarApiClient.escapeString(imageType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "image/ico", "image/jpeg", "image/png", "image/svg+xml", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWhitelabelImageValidateBeforeCall(String imageType, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'imageType' is set
        if (imageType == null) {
            throw new ApiException("Missing the required parameter 'imageType' when calling getWhitelabelImage(Async)");
        }
        

        okhttp3.Call localVarCall = getWhitelabelImageCall(imageType, _callback);
        return localVarCall;

    }

    /**
     * Download Image
     * Downloads the specified image.
     * @param imageType Valid image types (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public File getWhitelabelImage(String imageType) throws ApiException {
        ApiResponse<File> localVarResp = getWhitelabelImageWithHttpInfo(imageType);
        return localVarResp.getData();
    }

    /**
     * Download Image
     * Downloads the specified image.
     * @param imageType Valid image types (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getWhitelabelImageWithHttpInfo(String imageType) throws ApiException {
        okhttp3.Call localVarCall = getWhitelabelImageValidateBeforeCall(imageType, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Download Image (asynchronously)
     * Downloads the specified image.
     * @param imageType Valid image types (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWhitelabelImageAsync(String imageType, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWhitelabelImageValidateBeforeCall(imageType, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listWhitelabelSettings
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listWhitelabelSettingsCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/whitelabel-settings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listWhitelabelSettingsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listWhitelabelSettingsCall(_callback);
        return localVarCall;

    }

    /**
     * Get Whitelabel Settings
     * This endpoint retrieves whitelabel settings.
     * @return InlineResponse200166
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse200166 listWhitelabelSettings() throws ApiException {
        ApiResponse<InlineResponse200166> localVarResp = listWhitelabelSettingsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get Whitelabel Settings
     * This endpoint retrieves whitelabel settings.
     * @return ApiResponse&lt;InlineResponse200166&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse200166> listWhitelabelSettingsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listWhitelabelSettingsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<InlineResponse200166>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Whitelabel Settings (asynchronously)
     * This endpoint retrieves whitelabel settings.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listWhitelabelSettingsAsync(final ApiCallback<InlineResponse200166> _callback) throws ApiException {

        okhttp3.Call localVarCall = listWhitelabelSettingsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<InlineResponse200166>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeWhitelabelImage
     * @param imageType Valid image types (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeWhitelabelImageCall(String imageType, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/whitelabel-settings/images/{imageType}"
            .replaceAll("\\{" + "imageType" + "\\}", localVarApiClient.escapeString(imageType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeWhitelabelImageValidateBeforeCall(String imageType, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'imageType' is set
        if (imageType == null) {
            throw new ApiException("Missing the required parameter 'imageType' when calling removeWhitelabelImage(Async)");
        }
        

        okhttp3.Call localVarCall = removeWhitelabelImageCall(imageType, _callback);
        return localVarCall;

    }

    /**
     * Reset Image
     * Resets the specified image to the Morpheus default.
     * @param imageType Valid image types (required)
     * @return Model200Success
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public Model200Success removeWhitelabelImage(String imageType) throws ApiException {
        ApiResponse<Model200Success> localVarResp = removeWhitelabelImageWithHttpInfo(imageType);
        return localVarResp.getData();
    }

    /**
     * Reset Image
     * Resets the specified image to the Morpheus default.
     * @param imageType Valid image types (required)
     * @return ApiResponse&lt;Model200Success&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Model200Success> removeWhitelabelImageWithHttpInfo(String imageType) throws ApiException {
        okhttp3.Call localVarCall = removeWhitelabelImageValidateBeforeCall(imageType, null);
        Type localVarReturnType = new TypeToken<Model200Success>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Reset Image (asynchronously)
     * Resets the specified image to the Morpheus default.
     * @param imageType Valid image types (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeWhitelabelImageAsync(String imageType, final ApiCallback<Model200Success> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeWhitelabelImageValidateBeforeCall(imageType, _callback);
        Type localVarReturnType = new TypeToken<Model200Success>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateWhitelabelImages
     * @param headerLogoFile Header logo image file, valid image types &#x60;png|jpg|svg&#x60; (optional)
     * @param resetHeaderLogo Resets header logo to default (optional)
     * @param footerLogoFile Footer logo image file, valid image types &#x60;png|jpg|svg&#x60; (optional)
     * @param resetFooterLogo Resets footer logo to default (optional)
     * @param loginLogoFile Login logo image file, valid image types &#x60;png|jpg|svg&#x60; (optional)
     * @param resetLoginLogo Resets login logo to default (optional)
     * @param faviconFile Favicon image file, valid image type ico (optional)
     * @param resetFaviconLogo Resets favicon logo to default (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateWhitelabelImagesCall(File headerLogoFile, Boolean resetHeaderLogo, File footerLogoFile, Boolean resetFooterLogo, File loginLogoFile, Boolean resetLoginLogo, File faviconFile, Boolean resetFaviconLogo, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/whitelabel-settings/images";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (headerLogoFile != null) {
            localVarFormParams.put("headerLogo.file", headerLogoFile);
        }

        if (resetHeaderLogo != null) {
            localVarFormParams.put("resetHeaderLogo", resetHeaderLogo);
        }

        if (footerLogoFile != null) {
            localVarFormParams.put("footerLogo.file", footerLogoFile);
        }

        if (resetFooterLogo != null) {
            localVarFormParams.put("resetFooterLogo", resetFooterLogo);
        }

        if (loginLogoFile != null) {
            localVarFormParams.put("loginLogo.file", loginLogoFile);
        }

        if (resetLoginLogo != null) {
            localVarFormParams.put("resetLoginLogo", resetLoginLogo);
        }

        if (faviconFile != null) {
            localVarFormParams.put("favicon.file", faviconFile);
        }

        if (resetFaviconLogo != null) {
            localVarFormParams.put("resetFaviconLogo", resetFaviconLogo);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateWhitelabelImagesValidateBeforeCall(File headerLogoFile, Boolean resetHeaderLogo, File footerLogoFile, Boolean resetFooterLogo, File loginLogoFile, Boolean resetLoginLogo, File faviconFile, Boolean resetFaviconLogo, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = updateWhitelabelImagesCall(headerLogoFile, resetHeaderLogo, footerLogoFile, resetFooterLogo, loginLogoFile, resetLoginLogo, faviconFile, resetFaviconLogo, _callback);
        return localVarCall;

    }

    /**
     * Update Images
     * Uploads whitelabel images. Expects multipart form data as the request format, not JSON.
     * @param headerLogoFile Header logo image file, valid image types &#x60;png|jpg|svg&#x60; (optional)
     * @param resetHeaderLogo Resets header logo to default (optional)
     * @param footerLogoFile Footer logo image file, valid image types &#x60;png|jpg|svg&#x60; (optional)
     * @param resetFooterLogo Resets footer logo to default (optional)
     * @param loginLogoFile Login logo image file, valid image types &#x60;png|jpg|svg&#x60; (optional)
     * @param resetLoginLogo Resets login logo to default (optional)
     * @param faviconFile Favicon image file, valid image type ico (optional)
     * @param resetFaviconLogo Resets favicon logo to default (optional)
     * @return Model200Success
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public Model200Success updateWhitelabelImages(File headerLogoFile, Boolean resetHeaderLogo, File footerLogoFile, Boolean resetFooterLogo, File loginLogoFile, Boolean resetLoginLogo, File faviconFile, Boolean resetFaviconLogo) throws ApiException {
        ApiResponse<Model200Success> localVarResp = updateWhitelabelImagesWithHttpInfo(headerLogoFile, resetHeaderLogo, footerLogoFile, resetFooterLogo, loginLogoFile, resetLoginLogo, faviconFile, resetFaviconLogo);
        return localVarResp.getData();
    }

    /**
     * Update Images
     * Uploads whitelabel images. Expects multipart form data as the request format, not JSON.
     * @param headerLogoFile Header logo image file, valid image types &#x60;png|jpg|svg&#x60; (optional)
     * @param resetHeaderLogo Resets header logo to default (optional)
     * @param footerLogoFile Footer logo image file, valid image types &#x60;png|jpg|svg&#x60; (optional)
     * @param resetFooterLogo Resets footer logo to default (optional)
     * @param loginLogoFile Login logo image file, valid image types &#x60;png|jpg|svg&#x60; (optional)
     * @param resetLoginLogo Resets login logo to default (optional)
     * @param faviconFile Favicon image file, valid image type ico (optional)
     * @param resetFaviconLogo Resets favicon logo to default (optional)
     * @return ApiResponse&lt;Model200Success&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Model200Success> updateWhitelabelImagesWithHttpInfo(File headerLogoFile, Boolean resetHeaderLogo, File footerLogoFile, Boolean resetFooterLogo, File loginLogoFile, Boolean resetLoginLogo, File faviconFile, Boolean resetFaviconLogo) throws ApiException {
        okhttp3.Call localVarCall = updateWhitelabelImagesValidateBeforeCall(headerLogoFile, resetHeaderLogo, footerLogoFile, resetFooterLogo, loginLogoFile, resetLoginLogo, faviconFile, resetFaviconLogo, null);
        Type localVarReturnType = new TypeToken<Model200Success>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Images (asynchronously)
     * Uploads whitelabel images. Expects multipart form data as the request format, not JSON.
     * @param headerLogoFile Header logo image file, valid image types &#x60;png|jpg|svg&#x60; (optional)
     * @param resetHeaderLogo Resets header logo to default (optional)
     * @param footerLogoFile Footer logo image file, valid image types &#x60;png|jpg|svg&#x60; (optional)
     * @param resetFooterLogo Resets footer logo to default (optional)
     * @param loginLogoFile Login logo image file, valid image types &#x60;png|jpg|svg&#x60; (optional)
     * @param resetLoginLogo Resets login logo to default (optional)
     * @param faviconFile Favicon image file, valid image type ico (optional)
     * @param resetFaviconLogo Resets favicon logo to default (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateWhitelabelImagesAsync(File headerLogoFile, Boolean resetHeaderLogo, File footerLogoFile, Boolean resetFooterLogo, File loginLogoFile, Boolean resetLoginLogo, File faviconFile, Boolean resetFaviconLogo, final ApiCallback<Model200Success> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateWhitelabelImagesValidateBeforeCall(headerLogoFile, resetHeaderLogo, footerLogoFile, resetFooterLogo, loginLogoFile, resetLoginLogo, faviconFile, resetFaviconLogo, _callback);
        Type localVarReturnType = new TypeToken<Model200Success>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateWhitelabelSettings
     * @param inlineObject265  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateWhitelabelSettingsCall(InlineObject265 inlineObject265, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = inlineObject265;

        // create path and map variables
        String localVarPath = "/api/whitelabel-settings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateWhitelabelSettingsValidateBeforeCall(InlineObject265 inlineObject265, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = updateWhitelabelSettingsCall(inlineObject265, _callback);
        return localVarCall;

    }

    /**
     * Update Whitelabel Settings
     * Update Whitelabel Settings
     * @param inlineObject265  (optional)
     * @return Model200Success
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public Model200Success updateWhitelabelSettings(InlineObject265 inlineObject265) throws ApiException {
        ApiResponse<Model200Success> localVarResp = updateWhitelabelSettingsWithHttpInfo(inlineObject265);
        return localVarResp.getData();
    }

    /**
     * Update Whitelabel Settings
     * Update Whitelabel Settings
     * @param inlineObject265  (optional)
     * @return ApiResponse&lt;Model200Success&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Model200Success> updateWhitelabelSettingsWithHttpInfo(InlineObject265 inlineObject265) throws ApiException {
        okhttp3.Call localVarCall = updateWhitelabelSettingsValidateBeforeCall(inlineObject265, null);
        Type localVarReturnType = new TypeToken<Model200Success>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Whitelabel Settings (asynchronously)
     * Update Whitelabel Settings
     * @param inlineObject265  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateWhitelabelSettingsAsync(InlineObject265 inlineObject265, final ApiCallback<Model200Success> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateWhitelabelSettingsValidateBeforeCall(inlineObject265, _callback);
        Type localVarReturnType = new TypeToken<Model200Success>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
