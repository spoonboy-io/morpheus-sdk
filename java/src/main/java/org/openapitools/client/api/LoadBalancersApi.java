/*
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.DefaultError;
import org.openapitools.client.model.InlineObject127;
import org.openapitools.client.model.InlineObject128;
import org.openapitools.client.model.InlineObject129;
import org.openapitools.client.model.InlineObject130;
import org.openapitools.client.model.InlineObject131;
import org.openapitools.client.model.InlineObject132;
import org.openapitools.client.model.InlineObject133;
import org.openapitools.client.model.InlineObject134;
import org.openapitools.client.model.InlineObject135;
import org.openapitools.client.model.InlineObject136;
import org.openapitools.client.model.InlineObject137;
import org.openapitools.client.model.InlineObject138;
import org.openapitools.client.model.InlineResponse20077;
import org.openapitools.client.model.InlineResponse20078;
import org.openapitools.client.model.InlineResponse20079;
import org.openapitools.client.model.InlineResponse20080;
import org.openapitools.client.model.InlineResponse20081;
import org.openapitools.client.model.InlineResponse20082;
import org.openapitools.client.model.InlineResponse20083;
import org.openapitools.client.model.Model200Success;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LoadBalancersApi {
    private ApiClient localVarApiClient;

    public LoadBalancersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LoadBalancersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createLoadBalancer
     * @param inlineObject127  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createLoadBalancerCall(InlineObject127 inlineObject127, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = inlineObject127;

        // create path and map variables
        String localVarPath = "/api/load-balancers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createLoadBalancerValidateBeforeCall(InlineObject127 inlineObject127, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = createLoadBalancerCall(inlineObject127, _callback);
        return localVarCall;

    }

    /**
     * Create a Load Balancer
     * Available for NSX load balancers only  Use this command to create a load balancer. 
     * @param inlineObject127  (optional)
     * @return InlineResponse20078
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse20078 createLoadBalancer(InlineObject127 inlineObject127) throws ApiException {
        ApiResponse<InlineResponse20078> localVarResp = createLoadBalancerWithHttpInfo(inlineObject127);
        return localVarResp.getData();
    }

    /**
     * Create a Load Balancer
     * Available for NSX load balancers only  Use this command to create a load balancer. 
     * @param inlineObject127  (optional)
     * @return ApiResponse&lt;InlineResponse20078&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse20078> createLoadBalancerWithHttpInfo(InlineObject127 inlineObject127) throws ApiException {
        okhttp3.Call localVarCall = createLoadBalancerValidateBeforeCall(inlineObject127, null);
        Type localVarReturnType = new TypeToken<InlineResponse20078>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a Load Balancer (asynchronously)
     * Available for NSX load balancers only  Use this command to create a load balancer. 
     * @param inlineObject127  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createLoadBalancerAsync(InlineObject127 inlineObject127, final ApiCallback<InlineResponse20078> _callback) throws ApiException {

        okhttp3.Call localVarCall = createLoadBalancerValidateBeforeCall(inlineObject127, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse20078>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createLoadBalancerMonitor
     * @param loadBalancerId Load Balancer ID (required)
     * @param inlineObject129  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createLoadBalancerMonitorCall(BigDecimal loadBalancerId, InlineObject129 inlineObject129, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = inlineObject129;

        // create path and map variables
        String localVarPath = "/api/load-balancers/{loadBalancerId}/monitors"
            .replaceAll("\\{" + "loadBalancerId" + "\\}", localVarApiClient.escapeString(loadBalancerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createLoadBalancerMonitorValidateBeforeCall(BigDecimal loadBalancerId, InlineObject129 inlineObject129, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'loadBalancerId' is set
        if (loadBalancerId == null) {
            throw new ApiException("Missing the required parameter 'loadBalancerId' when calling createLoadBalancerMonitor(Async)");
        }
        

        okhttp3.Call localVarCall = createLoadBalancerMonitorCall(loadBalancerId, inlineObject129, _callback);
        return localVarCall;

    }

    /**
     * Create a Load Balancer Monitor
     * Use this command to create a load balancer Monitor.  This endpoint allows creating a Load Balancer Monitor. Configuration options vary by Load Balancer Type. 
     * @param loadBalancerId Load Balancer ID (required)
     * @param inlineObject129  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public Object createLoadBalancerMonitor(BigDecimal loadBalancerId, InlineObject129 inlineObject129) throws ApiException {
        ApiResponse<Object> localVarResp = createLoadBalancerMonitorWithHttpInfo(loadBalancerId, inlineObject129);
        return localVarResp.getData();
    }

    /**
     * Create a Load Balancer Monitor
     * Use this command to create a load balancer Monitor.  This endpoint allows creating a Load Balancer Monitor. Configuration options vary by Load Balancer Type. 
     * @param loadBalancerId Load Balancer ID (required)
     * @param inlineObject129  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> createLoadBalancerMonitorWithHttpInfo(BigDecimal loadBalancerId, InlineObject129 inlineObject129) throws ApiException {
        okhttp3.Call localVarCall = createLoadBalancerMonitorValidateBeforeCall(loadBalancerId, inlineObject129, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a Load Balancer Monitor (asynchronously)
     * Use this command to create a load balancer Monitor.  This endpoint allows creating a Load Balancer Monitor. Configuration options vary by Load Balancer Type. 
     * @param loadBalancerId Load Balancer ID (required)
     * @param inlineObject129  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createLoadBalancerMonitorAsync(BigDecimal loadBalancerId, InlineObject129 inlineObject129, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createLoadBalancerMonitorValidateBeforeCall(loadBalancerId, inlineObject129, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createLoadBalancerPool
     * @param loadBalancerId Load Balancer ID (required)
     * @param inlineObject131  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createLoadBalancerPoolCall(BigDecimal loadBalancerId, InlineObject131 inlineObject131, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = inlineObject131;

        // create path and map variables
        String localVarPath = "/api/load-balancers/{loadBalancerId}/pools"
            .replaceAll("\\{" + "loadBalancerId" + "\\}", localVarApiClient.escapeString(loadBalancerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createLoadBalancerPoolValidateBeforeCall(BigDecimal loadBalancerId, InlineObject131 inlineObject131, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'loadBalancerId' is set
        if (loadBalancerId == null) {
            throw new ApiException("Missing the required parameter 'loadBalancerId' when calling createLoadBalancerPool(Async)");
        }
        

        okhttp3.Call localVarCall = createLoadBalancerPoolCall(loadBalancerId, inlineObject131, _callback);
        return localVarCall;

    }

    /**
     * Create a Load Balancer Pool
     * Use this command to create a load balancer pool.  This endpoint allows creating a Load Balancer Pool. Configuration options vary by Load Balancer Type. 
     * @param loadBalancerId Load Balancer ID (required)
     * @param inlineObject131  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public Object createLoadBalancerPool(BigDecimal loadBalancerId, InlineObject131 inlineObject131) throws ApiException {
        ApiResponse<Object> localVarResp = createLoadBalancerPoolWithHttpInfo(loadBalancerId, inlineObject131);
        return localVarResp.getData();
    }

    /**
     * Create a Load Balancer Pool
     * Use this command to create a load balancer pool.  This endpoint allows creating a Load Balancer Pool. Configuration options vary by Load Balancer Type. 
     * @param loadBalancerId Load Balancer ID (required)
     * @param inlineObject131  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> createLoadBalancerPoolWithHttpInfo(BigDecimal loadBalancerId, InlineObject131 inlineObject131) throws ApiException {
        okhttp3.Call localVarCall = createLoadBalancerPoolValidateBeforeCall(loadBalancerId, inlineObject131, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a Load Balancer Pool (asynchronously)
     * Use this command to create a load balancer pool.  This endpoint allows creating a Load Balancer Pool. Configuration options vary by Load Balancer Type. 
     * @param loadBalancerId Load Balancer ID (required)
     * @param inlineObject131  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createLoadBalancerPoolAsync(BigDecimal loadBalancerId, InlineObject131 inlineObject131, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createLoadBalancerPoolValidateBeforeCall(loadBalancerId, inlineObject131, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createLoadBalancerPoolNode
     * @param loadBalancerPoolId Load Balancer Pool ID (required)
     * @param inlineObject137  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createLoadBalancerPoolNodeCall(BigDecimal loadBalancerPoolId, InlineObject137 inlineObject137, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = inlineObject137;

        // create path and map variables
        String localVarPath = "/api/load-balancer-pools/{loadBalancerPoolId}/nodes"
            .replaceAll("\\{" + "loadBalancerPoolId" + "\\}", localVarApiClient.escapeString(loadBalancerPoolId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createLoadBalancerPoolNodeValidateBeforeCall(BigDecimal loadBalancerPoolId, InlineObject137 inlineObject137, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'loadBalancerPoolId' is set
        if (loadBalancerPoolId == null) {
            throw new ApiException("Missing the required parameter 'loadBalancerPoolId' when calling createLoadBalancerPoolNode(Async)");
        }
        

        okhttp3.Call localVarCall = createLoadBalancerPoolNodeCall(loadBalancerPoolId, inlineObject137, _callback);
        return localVarCall;

    }

    /**
     * Create a Load Balancer Pool Node
     * Use this command to create a load balancer pool node.  This endpoint allows creating a Load Balancer Pool Node. Configuration options vary by Load Balancer Type. 
     * @param loadBalancerPoolId Load Balancer Pool ID (required)
     * @param inlineObject137  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public Object createLoadBalancerPoolNode(BigDecimal loadBalancerPoolId, InlineObject137 inlineObject137) throws ApiException {
        ApiResponse<Object> localVarResp = createLoadBalancerPoolNodeWithHttpInfo(loadBalancerPoolId, inlineObject137);
        return localVarResp.getData();
    }

    /**
     * Create a Load Balancer Pool Node
     * Use this command to create a load balancer pool node.  This endpoint allows creating a Load Balancer Pool Node. Configuration options vary by Load Balancer Type. 
     * @param loadBalancerPoolId Load Balancer Pool ID (required)
     * @param inlineObject137  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> createLoadBalancerPoolNodeWithHttpInfo(BigDecimal loadBalancerPoolId, InlineObject137 inlineObject137) throws ApiException {
        okhttp3.Call localVarCall = createLoadBalancerPoolNodeValidateBeforeCall(loadBalancerPoolId, inlineObject137, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a Load Balancer Pool Node (asynchronously)
     * Use this command to create a load balancer pool node.  This endpoint allows creating a Load Balancer Pool Node. Configuration options vary by Load Balancer Type. 
     * @param loadBalancerPoolId Load Balancer Pool ID (required)
     * @param inlineObject137  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createLoadBalancerPoolNodeAsync(BigDecimal loadBalancerPoolId, InlineObject137 inlineObject137, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createLoadBalancerPoolNodeValidateBeforeCall(loadBalancerPoolId, inlineObject137, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createLoadBalancerProfile
     * @param loadBalancerId Load Balancer ID (required)
     * @param inlineObject133  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createLoadBalancerProfileCall(BigDecimal loadBalancerId, InlineObject133 inlineObject133, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = inlineObject133;

        // create path and map variables
        String localVarPath = "/api/load-balancers/{loadBalancerId}/profiles"
            .replaceAll("\\{" + "loadBalancerId" + "\\}", localVarApiClient.escapeString(loadBalancerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createLoadBalancerProfileValidateBeforeCall(BigDecimal loadBalancerId, InlineObject133 inlineObject133, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'loadBalancerId' is set
        if (loadBalancerId == null) {
            throw new ApiException("Missing the required parameter 'loadBalancerId' when calling createLoadBalancerProfile(Async)");
        }
        

        okhttp3.Call localVarCall = createLoadBalancerProfileCall(loadBalancerId, inlineObject133, _callback);
        return localVarCall;

    }

    /**
     * Create a Load Balancer Profile
     * Use this command to create a load balancer Profile.  This endpoint allows creating a Load Balancer Profile. Configuration options vary by Load Balancer Type. 
     * @param loadBalancerId Load Balancer ID (required)
     * @param inlineObject133  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public Object createLoadBalancerProfile(BigDecimal loadBalancerId, InlineObject133 inlineObject133) throws ApiException {
        ApiResponse<Object> localVarResp = createLoadBalancerProfileWithHttpInfo(loadBalancerId, inlineObject133);
        return localVarResp.getData();
    }

    /**
     * Create a Load Balancer Profile
     * Use this command to create a load balancer Profile.  This endpoint allows creating a Load Balancer Profile. Configuration options vary by Load Balancer Type. 
     * @param loadBalancerId Load Balancer ID (required)
     * @param inlineObject133  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> createLoadBalancerProfileWithHttpInfo(BigDecimal loadBalancerId, InlineObject133 inlineObject133) throws ApiException {
        okhttp3.Call localVarCall = createLoadBalancerProfileValidateBeforeCall(loadBalancerId, inlineObject133, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a Load Balancer Profile (asynchronously)
     * Use this command to create a load balancer Profile.  This endpoint allows creating a Load Balancer Profile. Configuration options vary by Load Balancer Type. 
     * @param loadBalancerId Load Balancer ID (required)
     * @param inlineObject133  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createLoadBalancerProfileAsync(BigDecimal loadBalancerId, InlineObject133 inlineObject133, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createLoadBalancerProfileValidateBeforeCall(loadBalancerId, inlineObject133, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createLoadBalancerVirtualServer
     * @param loadBalancerId Load Balancer ID (required)
     * @param inlineObject135  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createLoadBalancerVirtualServerCall(BigDecimal loadBalancerId, InlineObject135 inlineObject135, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = inlineObject135;

        // create path and map variables
        String localVarPath = "/api/load-balancers/{loadBalancerId}/virtual-servers"
            .replaceAll("\\{" + "loadBalancerId" + "\\}", localVarApiClient.escapeString(loadBalancerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createLoadBalancerVirtualServerValidateBeforeCall(BigDecimal loadBalancerId, InlineObject135 inlineObject135, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'loadBalancerId' is set
        if (loadBalancerId == null) {
            throw new ApiException("Missing the required parameter 'loadBalancerId' when calling createLoadBalancerVirtualServer(Async)");
        }
        

        okhttp3.Call localVarCall = createLoadBalancerVirtualServerCall(loadBalancerId, inlineObject135, _callback);
        return localVarCall;

    }

    /**
     * Create a Load Balancer Virtual Server
     * Use this command to create a load balancer virtual server.  This endpoint allows creating a Load Balancer Virtual Server. Configuration options vary by Load Balancer Type. 
     * @param loadBalancerId Load Balancer ID (required)
     * @param inlineObject135  (optional)
     * @return InlineResponse20082
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse20082 createLoadBalancerVirtualServer(BigDecimal loadBalancerId, InlineObject135 inlineObject135) throws ApiException {
        ApiResponse<InlineResponse20082> localVarResp = createLoadBalancerVirtualServerWithHttpInfo(loadBalancerId, inlineObject135);
        return localVarResp.getData();
    }

    /**
     * Create a Load Balancer Virtual Server
     * Use this command to create a load balancer virtual server.  This endpoint allows creating a Load Balancer Virtual Server. Configuration options vary by Load Balancer Type. 
     * @param loadBalancerId Load Balancer ID (required)
     * @param inlineObject135  (optional)
     * @return ApiResponse&lt;InlineResponse20082&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse20082> createLoadBalancerVirtualServerWithHttpInfo(BigDecimal loadBalancerId, InlineObject135 inlineObject135) throws ApiException {
        okhttp3.Call localVarCall = createLoadBalancerVirtualServerValidateBeforeCall(loadBalancerId, inlineObject135, null);
        Type localVarReturnType = new TypeToken<InlineResponse20082>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a Load Balancer Virtual Server (asynchronously)
     * Use this command to create a load balancer virtual server.  This endpoint allows creating a Load Balancer Virtual Server. Configuration options vary by Load Balancer Type. 
     * @param loadBalancerId Load Balancer ID (required)
     * @param inlineObject135  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createLoadBalancerVirtualServerAsync(BigDecimal loadBalancerId, InlineObject135 inlineObject135, final ApiCallback<InlineResponse20082> _callback) throws ApiException {

        okhttp3.Call localVarCall = createLoadBalancerVirtualServerValidateBeforeCall(loadBalancerId, inlineObject135, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse20082>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteLoadBalancer
     * @param loadBalancerId Load Balancer ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteLoadBalancerCall(BigDecimal loadBalancerId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/load-balancers/{loadBalancerId}"
            .replaceAll("\\{" + "loadBalancerId" + "\\}", localVarApiClient.escapeString(loadBalancerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteLoadBalancerValidateBeforeCall(BigDecimal loadBalancerId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'loadBalancerId' is set
        if (loadBalancerId == null) {
            throw new ApiException("Missing the required parameter 'loadBalancerId' when calling deleteLoadBalancer(Async)");
        }
        

        okhttp3.Call localVarCall = deleteLoadBalancerCall(loadBalancerId, _callback);
        return localVarCall;

    }

    /**
     * Delete a Load Balancer
     * Will delete a Load Balancer from the system and make it no longer usable.
     * @param loadBalancerId Load Balancer ID (required)
     * @return Model200Success
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public Model200Success deleteLoadBalancer(BigDecimal loadBalancerId) throws ApiException {
        ApiResponse<Model200Success> localVarResp = deleteLoadBalancerWithHttpInfo(loadBalancerId);
        return localVarResp.getData();
    }

    /**
     * Delete a Load Balancer
     * Will delete a Load Balancer from the system and make it no longer usable.
     * @param loadBalancerId Load Balancer ID (required)
     * @return ApiResponse&lt;Model200Success&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Model200Success> deleteLoadBalancerWithHttpInfo(BigDecimal loadBalancerId) throws ApiException {
        okhttp3.Call localVarCall = deleteLoadBalancerValidateBeforeCall(loadBalancerId, null);
        Type localVarReturnType = new TypeToken<Model200Success>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a Load Balancer (asynchronously)
     * Will delete a Load Balancer from the system and make it no longer usable.
     * @param loadBalancerId Load Balancer ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteLoadBalancerAsync(BigDecimal loadBalancerId, final ApiCallback<Model200Success> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteLoadBalancerValidateBeforeCall(loadBalancerId, _callback);
        Type localVarReturnType = new TypeToken<Model200Success>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteLoadBalancerMonitor
     * @param loadBalancerId Load Balancer ID (required)
     * @param id Morpheus ID of the Object being referenced (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteLoadBalancerMonitorCall(BigDecimal loadBalancerId, Long id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/load-balancers/{loadBalancerId}/monitors/{id}"
            .replaceAll("\\{" + "loadBalancerId" + "\\}", localVarApiClient.escapeString(loadBalancerId.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteLoadBalancerMonitorValidateBeforeCall(BigDecimal loadBalancerId, Long id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'loadBalancerId' is set
        if (loadBalancerId == null) {
            throw new ApiException("Missing the required parameter 'loadBalancerId' when calling deleteLoadBalancerMonitor(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteLoadBalancerMonitor(Async)");
        }
        

        okhttp3.Call localVarCall = deleteLoadBalancerMonitorCall(loadBalancerId, id, _callback);
        return localVarCall;

    }

    /**
     * Delete a Load Balancer Monitor
     * Will delete a Load Balancer Monitor from the system and make it no longer usable.
     * @param loadBalancerId Load Balancer ID (required)
     * @param id Morpheus ID of the Object being referenced (required)
     * @return Model200Success
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public Model200Success deleteLoadBalancerMonitor(BigDecimal loadBalancerId, Long id) throws ApiException {
        ApiResponse<Model200Success> localVarResp = deleteLoadBalancerMonitorWithHttpInfo(loadBalancerId, id);
        return localVarResp.getData();
    }

    /**
     * Delete a Load Balancer Monitor
     * Will delete a Load Balancer Monitor from the system and make it no longer usable.
     * @param loadBalancerId Load Balancer ID (required)
     * @param id Morpheus ID of the Object being referenced (required)
     * @return ApiResponse&lt;Model200Success&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Model200Success> deleteLoadBalancerMonitorWithHttpInfo(BigDecimal loadBalancerId, Long id) throws ApiException {
        okhttp3.Call localVarCall = deleteLoadBalancerMonitorValidateBeforeCall(loadBalancerId, id, null);
        Type localVarReturnType = new TypeToken<Model200Success>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a Load Balancer Monitor (asynchronously)
     * Will delete a Load Balancer Monitor from the system and make it no longer usable.
     * @param loadBalancerId Load Balancer ID (required)
     * @param id Morpheus ID of the Object being referenced (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteLoadBalancerMonitorAsync(BigDecimal loadBalancerId, Long id, final ApiCallback<Model200Success> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteLoadBalancerMonitorValidateBeforeCall(loadBalancerId, id, _callback);
        Type localVarReturnType = new TypeToken<Model200Success>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteLoadBalancerPool
     * @param loadBalancerId Load Balancer ID (required)
     * @param id Morpheus ID of the Object being referenced (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteLoadBalancerPoolCall(BigDecimal loadBalancerId, Long id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/load-balancers/{loadBalancerId}/pools/{id}"
            .replaceAll("\\{" + "loadBalancerId" + "\\}", localVarApiClient.escapeString(loadBalancerId.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteLoadBalancerPoolValidateBeforeCall(BigDecimal loadBalancerId, Long id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'loadBalancerId' is set
        if (loadBalancerId == null) {
            throw new ApiException("Missing the required parameter 'loadBalancerId' when calling deleteLoadBalancerPool(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteLoadBalancerPool(Async)");
        }
        

        okhttp3.Call localVarCall = deleteLoadBalancerPoolCall(loadBalancerId, id, _callback);
        return localVarCall;

    }

    /**
     * Delete a Load Balancer Pool
     * Will delete a Load Balancer Pool from the system and make it no longer usable.
     * @param loadBalancerId Load Balancer ID (required)
     * @param id Morpheus ID of the Object being referenced (required)
     * @return Model200Success
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public Model200Success deleteLoadBalancerPool(BigDecimal loadBalancerId, Long id) throws ApiException {
        ApiResponse<Model200Success> localVarResp = deleteLoadBalancerPoolWithHttpInfo(loadBalancerId, id);
        return localVarResp.getData();
    }

    /**
     * Delete a Load Balancer Pool
     * Will delete a Load Balancer Pool from the system and make it no longer usable.
     * @param loadBalancerId Load Balancer ID (required)
     * @param id Morpheus ID of the Object being referenced (required)
     * @return ApiResponse&lt;Model200Success&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Model200Success> deleteLoadBalancerPoolWithHttpInfo(BigDecimal loadBalancerId, Long id) throws ApiException {
        okhttp3.Call localVarCall = deleteLoadBalancerPoolValidateBeforeCall(loadBalancerId, id, null);
        Type localVarReturnType = new TypeToken<Model200Success>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a Load Balancer Pool (asynchronously)
     * Will delete a Load Balancer Pool from the system and make it no longer usable.
     * @param loadBalancerId Load Balancer ID (required)
     * @param id Morpheus ID of the Object being referenced (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteLoadBalancerPoolAsync(BigDecimal loadBalancerId, Long id, final ApiCallback<Model200Success> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteLoadBalancerPoolValidateBeforeCall(loadBalancerId, id, _callback);
        Type localVarReturnType = new TypeToken<Model200Success>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteLoadBalancerPoolNode
     * @param loadBalancerPoolId Load Balancer Pool ID (required)
     * @param id Morpheus ID of the Object being referenced (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteLoadBalancerPoolNodeCall(BigDecimal loadBalancerPoolId, Long id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/load-balancer-pools/{loadBalancerPoolId}/nodes/{id}"
            .replaceAll("\\{" + "loadBalancerPoolId" + "\\}", localVarApiClient.escapeString(loadBalancerPoolId.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteLoadBalancerPoolNodeValidateBeforeCall(BigDecimal loadBalancerPoolId, Long id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'loadBalancerPoolId' is set
        if (loadBalancerPoolId == null) {
            throw new ApiException("Missing the required parameter 'loadBalancerPoolId' when calling deleteLoadBalancerPoolNode(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteLoadBalancerPoolNode(Async)");
        }
        

        okhttp3.Call localVarCall = deleteLoadBalancerPoolNodeCall(loadBalancerPoolId, id, _callback);
        return localVarCall;

    }

    /**
     * Delete a Load Balancer Pool Node
     * Will delete a Load Balancer Pool Node from the system and make it no longer usable.
     * @param loadBalancerPoolId Load Balancer Pool ID (required)
     * @param id Morpheus ID of the Object being referenced (required)
     * @return Model200Success
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public Model200Success deleteLoadBalancerPoolNode(BigDecimal loadBalancerPoolId, Long id) throws ApiException {
        ApiResponse<Model200Success> localVarResp = deleteLoadBalancerPoolNodeWithHttpInfo(loadBalancerPoolId, id);
        return localVarResp.getData();
    }

    /**
     * Delete a Load Balancer Pool Node
     * Will delete a Load Balancer Pool Node from the system and make it no longer usable.
     * @param loadBalancerPoolId Load Balancer Pool ID (required)
     * @param id Morpheus ID of the Object being referenced (required)
     * @return ApiResponse&lt;Model200Success&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Model200Success> deleteLoadBalancerPoolNodeWithHttpInfo(BigDecimal loadBalancerPoolId, Long id) throws ApiException {
        okhttp3.Call localVarCall = deleteLoadBalancerPoolNodeValidateBeforeCall(loadBalancerPoolId, id, null);
        Type localVarReturnType = new TypeToken<Model200Success>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a Load Balancer Pool Node (asynchronously)
     * Will delete a Load Balancer Pool Node from the system and make it no longer usable.
     * @param loadBalancerPoolId Load Balancer Pool ID (required)
     * @param id Morpheus ID of the Object being referenced (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteLoadBalancerPoolNodeAsync(BigDecimal loadBalancerPoolId, Long id, final ApiCallback<Model200Success> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteLoadBalancerPoolNodeValidateBeforeCall(loadBalancerPoolId, id, _callback);
        Type localVarReturnType = new TypeToken<Model200Success>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteLoadBalancerProfile
     * @param loadBalancerId Load Balancer ID (required)
     * @param id Morpheus ID of the Object being referenced (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteLoadBalancerProfileCall(BigDecimal loadBalancerId, Long id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/load-balancers/{loadBalancerId}/profiles/{id}"
            .replaceAll("\\{" + "loadBalancerId" + "\\}", localVarApiClient.escapeString(loadBalancerId.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteLoadBalancerProfileValidateBeforeCall(BigDecimal loadBalancerId, Long id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'loadBalancerId' is set
        if (loadBalancerId == null) {
            throw new ApiException("Missing the required parameter 'loadBalancerId' when calling deleteLoadBalancerProfile(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteLoadBalancerProfile(Async)");
        }
        

        okhttp3.Call localVarCall = deleteLoadBalancerProfileCall(loadBalancerId, id, _callback);
        return localVarCall;

    }

    /**
     * Delete a Load Balancer Profile
     * Will delete a Load Balancer Profile from the system and make it no longer usable.
     * @param loadBalancerId Load Balancer ID (required)
     * @param id Morpheus ID of the Object being referenced (required)
     * @return Model200Success
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public Model200Success deleteLoadBalancerProfile(BigDecimal loadBalancerId, Long id) throws ApiException {
        ApiResponse<Model200Success> localVarResp = deleteLoadBalancerProfileWithHttpInfo(loadBalancerId, id);
        return localVarResp.getData();
    }

    /**
     * Delete a Load Balancer Profile
     * Will delete a Load Balancer Profile from the system and make it no longer usable.
     * @param loadBalancerId Load Balancer ID (required)
     * @param id Morpheus ID of the Object being referenced (required)
     * @return ApiResponse&lt;Model200Success&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Model200Success> deleteLoadBalancerProfileWithHttpInfo(BigDecimal loadBalancerId, Long id) throws ApiException {
        okhttp3.Call localVarCall = deleteLoadBalancerProfileValidateBeforeCall(loadBalancerId, id, null);
        Type localVarReturnType = new TypeToken<Model200Success>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a Load Balancer Profile (asynchronously)
     * Will delete a Load Balancer Profile from the system and make it no longer usable.
     * @param loadBalancerId Load Balancer ID (required)
     * @param id Morpheus ID of the Object being referenced (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteLoadBalancerProfileAsync(BigDecimal loadBalancerId, Long id, final ApiCallback<Model200Success> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteLoadBalancerProfileValidateBeforeCall(loadBalancerId, id, _callback);
        Type localVarReturnType = new TypeToken<Model200Success>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteLoadBalancerVirtualServer
     * @param loadBalancerId Load Balancer ID (required)
     * @param id Morpheus ID of the Object being referenced (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteLoadBalancerVirtualServerCall(BigDecimal loadBalancerId, Long id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/load-balancers/{loadBalancerId}/virtual-servers/{id}"
            .replaceAll("\\{" + "loadBalancerId" + "\\}", localVarApiClient.escapeString(loadBalancerId.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteLoadBalancerVirtualServerValidateBeforeCall(BigDecimal loadBalancerId, Long id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'loadBalancerId' is set
        if (loadBalancerId == null) {
            throw new ApiException("Missing the required parameter 'loadBalancerId' when calling deleteLoadBalancerVirtualServer(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteLoadBalancerVirtualServer(Async)");
        }
        

        okhttp3.Call localVarCall = deleteLoadBalancerVirtualServerCall(loadBalancerId, id, _callback);
        return localVarCall;

    }

    /**
     * Delete a Load Balancer Virtual Server
     * Will delete a Load Balancer Virtual Server from the system and make it no longer usable.
     * @param loadBalancerId Load Balancer ID (required)
     * @param id Morpheus ID of the Object being referenced (required)
     * @return Model200Success
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public Model200Success deleteLoadBalancerVirtualServer(BigDecimal loadBalancerId, Long id) throws ApiException {
        ApiResponse<Model200Success> localVarResp = deleteLoadBalancerVirtualServerWithHttpInfo(loadBalancerId, id);
        return localVarResp.getData();
    }

    /**
     * Delete a Load Balancer Virtual Server
     * Will delete a Load Balancer Virtual Server from the system and make it no longer usable.
     * @param loadBalancerId Load Balancer ID (required)
     * @param id Morpheus ID of the Object being referenced (required)
     * @return ApiResponse&lt;Model200Success&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Model200Success> deleteLoadBalancerVirtualServerWithHttpInfo(BigDecimal loadBalancerId, Long id) throws ApiException {
        okhttp3.Call localVarCall = deleteLoadBalancerVirtualServerValidateBeforeCall(loadBalancerId, id, null);
        Type localVarReturnType = new TypeToken<Model200Success>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a Load Balancer Virtual Server (asynchronously)
     * Will delete a Load Balancer Virtual Server from the system and make it no longer usable.
     * @param loadBalancerId Load Balancer ID (required)
     * @param id Morpheus ID of the Object being referenced (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteLoadBalancerVirtualServerAsync(BigDecimal loadBalancerId, Long id, final ApiCallback<Model200Success> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteLoadBalancerVirtualServerValidateBeforeCall(loadBalancerId, id, _callback);
        Type localVarReturnType = new TypeToken<Model200Success>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLoadBalancer
     * @param loadBalancerId Load Balancer ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLoadBalancerCall(BigDecimal loadBalancerId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/load-balancers/{loadBalancerId}"
            .replaceAll("\\{" + "loadBalancerId" + "\\}", localVarApiClient.escapeString(loadBalancerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLoadBalancerValidateBeforeCall(BigDecimal loadBalancerId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'loadBalancerId' is set
        if (loadBalancerId == null) {
            throw new ApiException("Missing the required parameter 'loadBalancerId' when calling getLoadBalancer(Async)");
        }
        

        okhttp3.Call localVarCall = getLoadBalancerCall(loadBalancerId, _callback);
        return localVarCall;

    }

    /**
     * Get a Specific Load Balancer
     * This endpoint retrieves a specific Load Balancer.
     * @param loadBalancerId Load Balancer ID (required)
     * @return InlineResponse20078
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse20078 getLoadBalancer(BigDecimal loadBalancerId) throws ApiException {
        ApiResponse<InlineResponse20078> localVarResp = getLoadBalancerWithHttpInfo(loadBalancerId);
        return localVarResp.getData();
    }

    /**
     * Get a Specific Load Balancer
     * This endpoint retrieves a specific Load Balancer.
     * @param loadBalancerId Load Balancer ID (required)
     * @return ApiResponse&lt;InlineResponse20078&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse20078> getLoadBalancerWithHttpInfo(BigDecimal loadBalancerId) throws ApiException {
        okhttp3.Call localVarCall = getLoadBalancerValidateBeforeCall(loadBalancerId, null);
        Type localVarReturnType = new TypeToken<InlineResponse20078>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a Specific Load Balancer (asynchronously)
     * This endpoint retrieves a specific Load Balancer.
     * @param loadBalancerId Load Balancer ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLoadBalancerAsync(BigDecimal loadBalancerId, final ApiCallback<InlineResponse20078> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLoadBalancerValidateBeforeCall(loadBalancerId, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse20078>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLoadBalancerMonitor
     * @param loadBalancerId Load Balancer ID (required)
     * @param id Morpheus ID of the Object being referenced (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLoadBalancerMonitorCall(BigDecimal loadBalancerId, Long id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/load-balancers/{loadBalancerId}/monitors/{id}"
            .replaceAll("\\{" + "loadBalancerId" + "\\}", localVarApiClient.escapeString(loadBalancerId.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLoadBalancerMonitorValidateBeforeCall(BigDecimal loadBalancerId, Long id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'loadBalancerId' is set
        if (loadBalancerId == null) {
            throw new ApiException("Missing the required parameter 'loadBalancerId' when calling getLoadBalancerMonitor(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getLoadBalancerMonitor(Async)");
        }
        

        okhttp3.Call localVarCall = getLoadBalancerMonitorCall(loadBalancerId, id, _callback);
        return localVarCall;

    }

    /**
     * Get a Specific Load Balancer Monitor
     * This endpoint retrieves a specific Load Balancer Monitor.
     * @param loadBalancerId Load Balancer ID (required)
     * @param id Morpheus ID of the Object being referenced (required)
     * @return InlineResponse20079
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse20079 getLoadBalancerMonitor(BigDecimal loadBalancerId, Long id) throws ApiException {
        ApiResponse<InlineResponse20079> localVarResp = getLoadBalancerMonitorWithHttpInfo(loadBalancerId, id);
        return localVarResp.getData();
    }

    /**
     * Get a Specific Load Balancer Monitor
     * This endpoint retrieves a specific Load Balancer Monitor.
     * @param loadBalancerId Load Balancer ID (required)
     * @param id Morpheus ID of the Object being referenced (required)
     * @return ApiResponse&lt;InlineResponse20079&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse20079> getLoadBalancerMonitorWithHttpInfo(BigDecimal loadBalancerId, Long id) throws ApiException {
        okhttp3.Call localVarCall = getLoadBalancerMonitorValidateBeforeCall(loadBalancerId, id, null);
        Type localVarReturnType = new TypeToken<InlineResponse20079>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a Specific Load Balancer Monitor (asynchronously)
     * This endpoint retrieves a specific Load Balancer Monitor.
     * @param loadBalancerId Load Balancer ID (required)
     * @param id Morpheus ID of the Object being referenced (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLoadBalancerMonitorAsync(BigDecimal loadBalancerId, Long id, final ApiCallback<InlineResponse20079> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLoadBalancerMonitorValidateBeforeCall(loadBalancerId, id, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse20079>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLoadBalancerPool
     * @param loadBalancerId Load Balancer ID (required)
     * @param id Morpheus ID of the Object being referenced (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLoadBalancerPoolCall(BigDecimal loadBalancerId, Long id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/load-balancers/{loadBalancerId}/pools/{id}"
            .replaceAll("\\{" + "loadBalancerId" + "\\}", localVarApiClient.escapeString(loadBalancerId.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLoadBalancerPoolValidateBeforeCall(BigDecimal loadBalancerId, Long id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'loadBalancerId' is set
        if (loadBalancerId == null) {
            throw new ApiException("Missing the required parameter 'loadBalancerId' when calling getLoadBalancerPool(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getLoadBalancerPool(Async)");
        }
        

        okhttp3.Call localVarCall = getLoadBalancerPoolCall(loadBalancerId, id, _callback);
        return localVarCall;

    }

    /**
     * Get a Specific Load Balancer Pool
     * This endpoint retrieves a specific Load Balancer Pool.
     * @param loadBalancerId Load Balancer ID (required)
     * @param id Morpheus ID of the Object being referenced (required)
     * @return InlineResponse20080
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse20080 getLoadBalancerPool(BigDecimal loadBalancerId, Long id) throws ApiException {
        ApiResponse<InlineResponse20080> localVarResp = getLoadBalancerPoolWithHttpInfo(loadBalancerId, id);
        return localVarResp.getData();
    }

    /**
     * Get a Specific Load Balancer Pool
     * This endpoint retrieves a specific Load Balancer Pool.
     * @param loadBalancerId Load Balancer ID (required)
     * @param id Morpheus ID of the Object being referenced (required)
     * @return ApiResponse&lt;InlineResponse20080&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse20080> getLoadBalancerPoolWithHttpInfo(BigDecimal loadBalancerId, Long id) throws ApiException {
        okhttp3.Call localVarCall = getLoadBalancerPoolValidateBeforeCall(loadBalancerId, id, null);
        Type localVarReturnType = new TypeToken<InlineResponse20080>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a Specific Load Balancer Pool (asynchronously)
     * This endpoint retrieves a specific Load Balancer Pool.
     * @param loadBalancerId Load Balancer ID (required)
     * @param id Morpheus ID of the Object being referenced (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLoadBalancerPoolAsync(BigDecimal loadBalancerId, Long id, final ApiCallback<InlineResponse20080> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLoadBalancerPoolValidateBeforeCall(loadBalancerId, id, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse20080>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLoadBalancerPoolNode
     * @param loadBalancerPoolId Load Balancer Pool ID (required)
     * @param id Morpheus ID of the Object being referenced (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLoadBalancerPoolNodeCall(BigDecimal loadBalancerPoolId, Long id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/load-balancer-pools/{loadBalancerPoolId}/nodes/{id}"
            .replaceAll("\\{" + "loadBalancerPoolId" + "\\}", localVarApiClient.escapeString(loadBalancerPoolId.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLoadBalancerPoolNodeValidateBeforeCall(BigDecimal loadBalancerPoolId, Long id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'loadBalancerPoolId' is set
        if (loadBalancerPoolId == null) {
            throw new ApiException("Missing the required parameter 'loadBalancerPoolId' when calling getLoadBalancerPoolNode(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getLoadBalancerPoolNode(Async)");
        }
        

        okhttp3.Call localVarCall = getLoadBalancerPoolNodeCall(loadBalancerPoolId, id, _callback);
        return localVarCall;

    }

    /**
     * Get a Specific Load Balancer Pool Node
     * This endpoint retrieves a specific Load Balancer Pool Node.
     * @param loadBalancerPoolId Load Balancer Pool ID (required)
     * @param id Morpheus ID of the Object being referenced (required)
     * @return InlineResponse20083
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse20083 getLoadBalancerPoolNode(BigDecimal loadBalancerPoolId, Long id) throws ApiException {
        ApiResponse<InlineResponse20083> localVarResp = getLoadBalancerPoolNodeWithHttpInfo(loadBalancerPoolId, id);
        return localVarResp.getData();
    }

    /**
     * Get a Specific Load Balancer Pool Node
     * This endpoint retrieves a specific Load Balancer Pool Node.
     * @param loadBalancerPoolId Load Balancer Pool ID (required)
     * @param id Morpheus ID of the Object being referenced (required)
     * @return ApiResponse&lt;InlineResponse20083&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse20083> getLoadBalancerPoolNodeWithHttpInfo(BigDecimal loadBalancerPoolId, Long id) throws ApiException {
        okhttp3.Call localVarCall = getLoadBalancerPoolNodeValidateBeforeCall(loadBalancerPoolId, id, null);
        Type localVarReturnType = new TypeToken<InlineResponse20083>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a Specific Load Balancer Pool Node (asynchronously)
     * This endpoint retrieves a specific Load Balancer Pool Node.
     * @param loadBalancerPoolId Load Balancer Pool ID (required)
     * @param id Morpheus ID of the Object being referenced (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLoadBalancerPoolNodeAsync(BigDecimal loadBalancerPoolId, Long id, final ApiCallback<InlineResponse20083> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLoadBalancerPoolNodeValidateBeforeCall(loadBalancerPoolId, id, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse20083>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLoadBalancerProfile
     * @param loadBalancerId Load Balancer ID (required)
     * @param id Morpheus ID of the Object being referenced (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLoadBalancerProfileCall(BigDecimal loadBalancerId, Long id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/load-balancers/{loadBalancerId}/profiles/{id}"
            .replaceAll("\\{" + "loadBalancerId" + "\\}", localVarApiClient.escapeString(loadBalancerId.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLoadBalancerProfileValidateBeforeCall(BigDecimal loadBalancerId, Long id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'loadBalancerId' is set
        if (loadBalancerId == null) {
            throw new ApiException("Missing the required parameter 'loadBalancerId' when calling getLoadBalancerProfile(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getLoadBalancerProfile(Async)");
        }
        

        okhttp3.Call localVarCall = getLoadBalancerProfileCall(loadBalancerId, id, _callback);
        return localVarCall;

    }

    /**
     * Get a Specific Load Balancer Profile
     * This endpoint retrieves a specific Load Balancer Profile.
     * @param loadBalancerId Load Balancer ID (required)
     * @param id Morpheus ID of the Object being referenced (required)
     * @return InlineResponse20081
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse20081 getLoadBalancerProfile(BigDecimal loadBalancerId, Long id) throws ApiException {
        ApiResponse<InlineResponse20081> localVarResp = getLoadBalancerProfileWithHttpInfo(loadBalancerId, id);
        return localVarResp.getData();
    }

    /**
     * Get a Specific Load Balancer Profile
     * This endpoint retrieves a specific Load Balancer Profile.
     * @param loadBalancerId Load Balancer ID (required)
     * @param id Morpheus ID of the Object being referenced (required)
     * @return ApiResponse&lt;InlineResponse20081&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse20081> getLoadBalancerProfileWithHttpInfo(BigDecimal loadBalancerId, Long id) throws ApiException {
        okhttp3.Call localVarCall = getLoadBalancerProfileValidateBeforeCall(loadBalancerId, id, null);
        Type localVarReturnType = new TypeToken<InlineResponse20081>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a Specific Load Balancer Profile (asynchronously)
     * This endpoint retrieves a specific Load Balancer Profile.
     * @param loadBalancerId Load Balancer ID (required)
     * @param id Morpheus ID of the Object being referenced (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLoadBalancerProfileAsync(BigDecimal loadBalancerId, Long id, final ApiCallback<InlineResponse20081> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLoadBalancerProfileValidateBeforeCall(loadBalancerId, id, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse20081>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLoadBalancerType
     * @param id Morpheus ID of the Object being referenced (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLoadBalancerTypeCall(Long id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/load-balancer-types/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLoadBalancerTypeValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getLoadBalancerType(Async)");
        }
        

        okhttp3.Call localVarCall = getLoadBalancerTypeCall(id, _callback);
        return localVarCall;

    }

    /**
     * Get a Specific Load Balancer Type
     * This endpoint will retrieve a specific load balancer type by id.
     * @param id Morpheus ID of the Object being referenced (required)
     * @return InlineResponse20077
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse20077 getLoadBalancerType(Long id) throws ApiException {
        ApiResponse<InlineResponse20077> localVarResp = getLoadBalancerTypeWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get a Specific Load Balancer Type
     * This endpoint will retrieve a specific load balancer type by id.
     * @param id Morpheus ID of the Object being referenced (required)
     * @return ApiResponse&lt;InlineResponse20077&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse20077> getLoadBalancerTypeWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = getLoadBalancerTypeValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<InlineResponse20077>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a Specific Load Balancer Type (asynchronously)
     * This endpoint will retrieve a specific load balancer type by id.
     * @param id Morpheus ID of the Object being referenced (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLoadBalancerTypeAsync(Long id, final ApiCallback<InlineResponse20077> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLoadBalancerTypeValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse20077>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLoadBalancerVirtualServer
     * @param loadBalancerId Load Balancer ID (required)
     * @param id Morpheus ID of the Object being referenced (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLoadBalancerVirtualServerCall(BigDecimal loadBalancerId, Long id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/load-balancers/{loadBalancerId}/virtual-servers/{id}"
            .replaceAll("\\{" + "loadBalancerId" + "\\}", localVarApiClient.escapeString(loadBalancerId.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLoadBalancerVirtualServerValidateBeforeCall(BigDecimal loadBalancerId, Long id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'loadBalancerId' is set
        if (loadBalancerId == null) {
            throw new ApiException("Missing the required parameter 'loadBalancerId' when calling getLoadBalancerVirtualServer(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getLoadBalancerVirtualServer(Async)");
        }
        

        okhttp3.Call localVarCall = getLoadBalancerVirtualServerCall(loadBalancerId, id, _callback);
        return localVarCall;

    }

    /**
     * Get a Specific Load Balancer Virtual Server
     * This endpoint retrieves a specific Load Balancer Virtual Server.
     * @param loadBalancerId Load Balancer ID (required)
     * @param id Morpheus ID of the Object being referenced (required)
     * @return InlineResponse20082
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse20082 getLoadBalancerVirtualServer(BigDecimal loadBalancerId, Long id) throws ApiException {
        ApiResponse<InlineResponse20082> localVarResp = getLoadBalancerVirtualServerWithHttpInfo(loadBalancerId, id);
        return localVarResp.getData();
    }

    /**
     * Get a Specific Load Balancer Virtual Server
     * This endpoint retrieves a specific Load Balancer Virtual Server.
     * @param loadBalancerId Load Balancer ID (required)
     * @param id Morpheus ID of the Object being referenced (required)
     * @return ApiResponse&lt;InlineResponse20082&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse20082> getLoadBalancerVirtualServerWithHttpInfo(BigDecimal loadBalancerId, Long id) throws ApiException {
        okhttp3.Call localVarCall = getLoadBalancerVirtualServerValidateBeforeCall(loadBalancerId, id, null);
        Type localVarReturnType = new TypeToken<InlineResponse20082>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a Specific Load Balancer Virtual Server (asynchronously)
     * This endpoint retrieves a specific Load Balancer Virtual Server.
     * @param loadBalancerId Load Balancer ID (required)
     * @param id Morpheus ID of the Object being referenced (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLoadBalancerVirtualServerAsync(BigDecimal loadBalancerId, Long id, final ApiCallback<InlineResponse20082> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLoadBalancerVirtualServerValidateBeforeCall(loadBalancerId, id, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse20082>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listLoadBalancerMonitors
     * @param loadBalancerId Load Balancer ID (required)
     * @param max Maximum number of records to return, -1 can be used to fetch all records (optional, default to 25l)
     * @param offset Offset records, the number of records to skip, for paginating requests (optional, default to 0l)
     * @param sort Sort order, the name of the property to sort by (optional, default to &quot;name&quot;)
     * @param direction Sort direction, use &#39;desc&#39; to reverse sort (optional, default to asc)
     * @param name Filter by name, wildcard may be specified as %, eg. example-% (optional)
     * @param phrase Search phrase for partial matches on name or description (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listLoadBalancerMonitorsCall(BigDecimal loadBalancerId, Long max, Long offset, String sort, String direction, String name, String phrase, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/load-balancers/{loadBalancerId}/monitors"
            .replaceAll("\\{" + "loadBalancerId" + "\\}", localVarApiClient.escapeString(loadBalancerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (phrase != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("phrase", phrase));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listLoadBalancerMonitorsValidateBeforeCall(BigDecimal loadBalancerId, Long max, Long offset, String sort, String direction, String name, String phrase, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'loadBalancerId' is set
        if (loadBalancerId == null) {
            throw new ApiException("Missing the required parameter 'loadBalancerId' when calling listLoadBalancerMonitors(Async)");
        }
        

        okhttp3.Call localVarCall = listLoadBalancerMonitorsCall(loadBalancerId, max, offset, sort, direction, name, phrase, _callback);
        return localVarCall;

    }

    /**
     * Get All Load Balancer Monitors For Load Balancer
     * This endpoint retrieves all load balancer monitors associated with a specified load balancer.
     * @param loadBalancerId Load Balancer ID (required)
     * @param max Maximum number of records to return, -1 can be used to fetch all records (optional, default to 25l)
     * @param offset Offset records, the number of records to skip, for paginating requests (optional, default to 0l)
     * @param sort Sort order, the name of the property to sort by (optional, default to &quot;name&quot;)
     * @param direction Sort direction, use &#39;desc&#39; to reverse sort (optional, default to asc)
     * @param name Filter by name, wildcard may be specified as %, eg. example-% (optional)
     * @param phrase Search phrase for partial matches on name or description (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public Object listLoadBalancerMonitors(BigDecimal loadBalancerId, Long max, Long offset, String sort, String direction, String name, String phrase) throws ApiException {
        ApiResponse<Object> localVarResp = listLoadBalancerMonitorsWithHttpInfo(loadBalancerId, max, offset, sort, direction, name, phrase);
        return localVarResp.getData();
    }

    /**
     * Get All Load Balancer Monitors For Load Balancer
     * This endpoint retrieves all load balancer monitors associated with a specified load balancer.
     * @param loadBalancerId Load Balancer ID (required)
     * @param max Maximum number of records to return, -1 can be used to fetch all records (optional, default to 25l)
     * @param offset Offset records, the number of records to skip, for paginating requests (optional, default to 0l)
     * @param sort Sort order, the name of the property to sort by (optional, default to &quot;name&quot;)
     * @param direction Sort direction, use &#39;desc&#39; to reverse sort (optional, default to asc)
     * @param name Filter by name, wildcard may be specified as %, eg. example-% (optional)
     * @param phrase Search phrase for partial matches on name or description (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> listLoadBalancerMonitorsWithHttpInfo(BigDecimal loadBalancerId, Long max, Long offset, String sort, String direction, String name, String phrase) throws ApiException {
        okhttp3.Call localVarCall = listLoadBalancerMonitorsValidateBeforeCall(loadBalancerId, max, offset, sort, direction, name, phrase, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get All Load Balancer Monitors For Load Balancer (asynchronously)
     * This endpoint retrieves all load balancer monitors associated with a specified load balancer.
     * @param loadBalancerId Load Balancer ID (required)
     * @param max Maximum number of records to return, -1 can be used to fetch all records (optional, default to 25l)
     * @param offset Offset records, the number of records to skip, for paginating requests (optional, default to 0l)
     * @param sort Sort order, the name of the property to sort by (optional, default to &quot;name&quot;)
     * @param direction Sort direction, use &#39;desc&#39; to reverse sort (optional, default to asc)
     * @param name Filter by name, wildcard may be specified as %, eg. example-% (optional)
     * @param phrase Search phrase for partial matches on name or description (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listLoadBalancerMonitorsAsync(BigDecimal loadBalancerId, Long max, Long offset, String sort, String direction, String name, String phrase, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = listLoadBalancerMonitorsValidateBeforeCall(loadBalancerId, max, offset, sort, direction, name, phrase, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listLoadBalancerPoolNodes
     * @param loadBalancerPoolId Load Balancer Pool ID (required)
     * @param max Maximum number of records to return, -1 can be used to fetch all records (optional, default to 25l)
     * @param offset Offset records, the number of records to skip, for paginating requests (optional, default to 0l)
     * @param sort Sort order, the name of the property to sort by (optional, default to &quot;name&quot;)
     * @param direction Sort direction, use &#39;desc&#39; to reverse sort (optional, default to asc)
     * @param phrase Search phrase for partial matches on name or description (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listLoadBalancerPoolNodesCall(BigDecimal loadBalancerPoolId, Long max, Long offset, String sort, String direction, String phrase, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/load-balancer-pools/{loadBalancerPoolId}/nodes"
            .replaceAll("\\{" + "loadBalancerPoolId" + "\\}", localVarApiClient.escapeString(loadBalancerPoolId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (phrase != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("phrase", phrase));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listLoadBalancerPoolNodesValidateBeforeCall(BigDecimal loadBalancerPoolId, Long max, Long offset, String sort, String direction, String phrase, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'loadBalancerPoolId' is set
        if (loadBalancerPoolId == null) {
            throw new ApiException("Missing the required parameter 'loadBalancerPoolId' when calling listLoadBalancerPoolNodes(Async)");
        }
        

        okhttp3.Call localVarCall = listLoadBalancerPoolNodesCall(loadBalancerPoolId, max, offset, sort, direction, phrase, _callback);
        return localVarCall;

    }

    /**
     * Get All Load Balancer Pool Nodes For Load Balancer Pool
     * This endpoint retrieves all load balancer pool nodes associated with a specified load balancer pool.
     * @param loadBalancerPoolId Load Balancer Pool ID (required)
     * @param max Maximum number of records to return, -1 can be used to fetch all records (optional, default to 25l)
     * @param offset Offset records, the number of records to skip, for paginating requests (optional, default to 0l)
     * @param sort Sort order, the name of the property to sort by (optional, default to &quot;name&quot;)
     * @param direction Sort direction, use &#39;desc&#39; to reverse sort (optional, default to asc)
     * @param phrase Search phrase for partial matches on name or description (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public Object listLoadBalancerPoolNodes(BigDecimal loadBalancerPoolId, Long max, Long offset, String sort, String direction, String phrase) throws ApiException {
        ApiResponse<Object> localVarResp = listLoadBalancerPoolNodesWithHttpInfo(loadBalancerPoolId, max, offset, sort, direction, phrase);
        return localVarResp.getData();
    }

    /**
     * Get All Load Balancer Pool Nodes For Load Balancer Pool
     * This endpoint retrieves all load balancer pool nodes associated with a specified load balancer pool.
     * @param loadBalancerPoolId Load Balancer Pool ID (required)
     * @param max Maximum number of records to return, -1 can be used to fetch all records (optional, default to 25l)
     * @param offset Offset records, the number of records to skip, for paginating requests (optional, default to 0l)
     * @param sort Sort order, the name of the property to sort by (optional, default to &quot;name&quot;)
     * @param direction Sort direction, use &#39;desc&#39; to reverse sort (optional, default to asc)
     * @param phrase Search phrase for partial matches on name or description (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> listLoadBalancerPoolNodesWithHttpInfo(BigDecimal loadBalancerPoolId, Long max, Long offset, String sort, String direction, String phrase) throws ApiException {
        okhttp3.Call localVarCall = listLoadBalancerPoolNodesValidateBeforeCall(loadBalancerPoolId, max, offset, sort, direction, phrase, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get All Load Balancer Pool Nodes For Load Balancer Pool (asynchronously)
     * This endpoint retrieves all load balancer pool nodes associated with a specified load balancer pool.
     * @param loadBalancerPoolId Load Balancer Pool ID (required)
     * @param max Maximum number of records to return, -1 can be used to fetch all records (optional, default to 25l)
     * @param offset Offset records, the number of records to skip, for paginating requests (optional, default to 0l)
     * @param sort Sort order, the name of the property to sort by (optional, default to &quot;name&quot;)
     * @param direction Sort direction, use &#39;desc&#39; to reverse sort (optional, default to asc)
     * @param phrase Search phrase for partial matches on name or description (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listLoadBalancerPoolNodesAsync(BigDecimal loadBalancerPoolId, Long max, Long offset, String sort, String direction, String phrase, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = listLoadBalancerPoolNodesValidateBeforeCall(loadBalancerPoolId, max, offset, sort, direction, phrase, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listLoadBalancerPools
     * @param loadBalancerId Load Balancer ID (required)
     * @param max Maximum number of records to return, -1 can be used to fetch all records (optional, default to 25l)
     * @param offset Offset records, the number of records to skip, for paginating requests (optional, default to 0l)
     * @param sort Sort order, the name of the property to sort by (optional, default to &quot;name&quot;)
     * @param direction Sort direction, use &#39;desc&#39; to reverse sort (optional, default to asc)
     * @param name Filter by name, wildcard may be specified as %, eg. example-% (optional)
     * @param phrase Search phrase for partial matches on name or description (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listLoadBalancerPoolsCall(BigDecimal loadBalancerId, Long max, Long offset, String sort, String direction, String name, String phrase, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/load-balancers/{loadBalancerId}/pools"
            .replaceAll("\\{" + "loadBalancerId" + "\\}", localVarApiClient.escapeString(loadBalancerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (phrase != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("phrase", phrase));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listLoadBalancerPoolsValidateBeforeCall(BigDecimal loadBalancerId, Long max, Long offset, String sort, String direction, String name, String phrase, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'loadBalancerId' is set
        if (loadBalancerId == null) {
            throw new ApiException("Missing the required parameter 'loadBalancerId' when calling listLoadBalancerPools(Async)");
        }
        

        okhttp3.Call localVarCall = listLoadBalancerPoolsCall(loadBalancerId, max, offset, sort, direction, name, phrase, _callback);
        return localVarCall;

    }

    /**
     * Get All Load Balancer Pools For Load Balancer
     * This endpoint retrieves all load balancer pools associated with a specified load balancer.
     * @param loadBalancerId Load Balancer ID (required)
     * @param max Maximum number of records to return, -1 can be used to fetch all records (optional, default to 25l)
     * @param offset Offset records, the number of records to skip, for paginating requests (optional, default to 0l)
     * @param sort Sort order, the name of the property to sort by (optional, default to &quot;name&quot;)
     * @param direction Sort direction, use &#39;desc&#39; to reverse sort (optional, default to asc)
     * @param name Filter by name, wildcard may be specified as %, eg. example-% (optional)
     * @param phrase Search phrase for partial matches on name or description (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public Object listLoadBalancerPools(BigDecimal loadBalancerId, Long max, Long offset, String sort, String direction, String name, String phrase) throws ApiException {
        ApiResponse<Object> localVarResp = listLoadBalancerPoolsWithHttpInfo(loadBalancerId, max, offset, sort, direction, name, phrase);
        return localVarResp.getData();
    }

    /**
     * Get All Load Balancer Pools For Load Balancer
     * This endpoint retrieves all load balancer pools associated with a specified load balancer.
     * @param loadBalancerId Load Balancer ID (required)
     * @param max Maximum number of records to return, -1 can be used to fetch all records (optional, default to 25l)
     * @param offset Offset records, the number of records to skip, for paginating requests (optional, default to 0l)
     * @param sort Sort order, the name of the property to sort by (optional, default to &quot;name&quot;)
     * @param direction Sort direction, use &#39;desc&#39; to reverse sort (optional, default to asc)
     * @param name Filter by name, wildcard may be specified as %, eg. example-% (optional)
     * @param phrase Search phrase for partial matches on name or description (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> listLoadBalancerPoolsWithHttpInfo(BigDecimal loadBalancerId, Long max, Long offset, String sort, String direction, String name, String phrase) throws ApiException {
        okhttp3.Call localVarCall = listLoadBalancerPoolsValidateBeforeCall(loadBalancerId, max, offset, sort, direction, name, phrase, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get All Load Balancer Pools For Load Balancer (asynchronously)
     * This endpoint retrieves all load balancer pools associated with a specified load balancer.
     * @param loadBalancerId Load Balancer ID (required)
     * @param max Maximum number of records to return, -1 can be used to fetch all records (optional, default to 25l)
     * @param offset Offset records, the number of records to skip, for paginating requests (optional, default to 0l)
     * @param sort Sort order, the name of the property to sort by (optional, default to &quot;name&quot;)
     * @param direction Sort direction, use &#39;desc&#39; to reverse sort (optional, default to asc)
     * @param name Filter by name, wildcard may be specified as %, eg. example-% (optional)
     * @param phrase Search phrase for partial matches on name or description (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listLoadBalancerPoolsAsync(BigDecimal loadBalancerId, Long max, Long offset, String sort, String direction, String name, String phrase, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = listLoadBalancerPoolsValidateBeforeCall(loadBalancerId, max, offset, sort, direction, name, phrase, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listLoadBalancerProfiles
     * @param loadBalancerId Load Balancer ID (required)
     * @param max Maximum number of records to return, -1 can be used to fetch all records (optional, default to 25l)
     * @param offset Offset records, the number of records to skip, for paginating requests (optional, default to 0l)
     * @param sort Sort order, the name of the property to sort by (optional, default to &quot;name&quot;)
     * @param direction Sort direction, use &#39;desc&#39; to reverse sort (optional, default to asc)
     * @param name Filter by name, wildcard may be specified as %, eg. example-% (optional)
     * @param phrase Search phrase for partial matches on name or description (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listLoadBalancerProfilesCall(BigDecimal loadBalancerId, Long max, Long offset, String sort, String direction, String name, String phrase, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/load-balancers/{loadBalancerId}/profiles"
            .replaceAll("\\{" + "loadBalancerId" + "\\}", localVarApiClient.escapeString(loadBalancerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (phrase != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("phrase", phrase));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listLoadBalancerProfilesValidateBeforeCall(BigDecimal loadBalancerId, Long max, Long offset, String sort, String direction, String name, String phrase, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'loadBalancerId' is set
        if (loadBalancerId == null) {
            throw new ApiException("Missing the required parameter 'loadBalancerId' when calling listLoadBalancerProfiles(Async)");
        }
        

        okhttp3.Call localVarCall = listLoadBalancerProfilesCall(loadBalancerId, max, offset, sort, direction, name, phrase, _callback);
        return localVarCall;

    }

    /**
     * Get All Load Balancer Profiles For Load Balancer
     * This endpoint retrieves all load balancer profiles associated with a specified load balancer.
     * @param loadBalancerId Load Balancer ID (required)
     * @param max Maximum number of records to return, -1 can be used to fetch all records (optional, default to 25l)
     * @param offset Offset records, the number of records to skip, for paginating requests (optional, default to 0l)
     * @param sort Sort order, the name of the property to sort by (optional, default to &quot;name&quot;)
     * @param direction Sort direction, use &#39;desc&#39; to reverse sort (optional, default to asc)
     * @param name Filter by name, wildcard may be specified as %, eg. example-% (optional)
     * @param phrase Search phrase for partial matches on name or description (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public Object listLoadBalancerProfiles(BigDecimal loadBalancerId, Long max, Long offset, String sort, String direction, String name, String phrase) throws ApiException {
        ApiResponse<Object> localVarResp = listLoadBalancerProfilesWithHttpInfo(loadBalancerId, max, offset, sort, direction, name, phrase);
        return localVarResp.getData();
    }

    /**
     * Get All Load Balancer Profiles For Load Balancer
     * This endpoint retrieves all load balancer profiles associated with a specified load balancer.
     * @param loadBalancerId Load Balancer ID (required)
     * @param max Maximum number of records to return, -1 can be used to fetch all records (optional, default to 25l)
     * @param offset Offset records, the number of records to skip, for paginating requests (optional, default to 0l)
     * @param sort Sort order, the name of the property to sort by (optional, default to &quot;name&quot;)
     * @param direction Sort direction, use &#39;desc&#39; to reverse sort (optional, default to asc)
     * @param name Filter by name, wildcard may be specified as %, eg. example-% (optional)
     * @param phrase Search phrase for partial matches on name or description (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> listLoadBalancerProfilesWithHttpInfo(BigDecimal loadBalancerId, Long max, Long offset, String sort, String direction, String name, String phrase) throws ApiException {
        okhttp3.Call localVarCall = listLoadBalancerProfilesValidateBeforeCall(loadBalancerId, max, offset, sort, direction, name, phrase, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get All Load Balancer Profiles For Load Balancer (asynchronously)
     * This endpoint retrieves all load balancer profiles associated with a specified load balancer.
     * @param loadBalancerId Load Balancer ID (required)
     * @param max Maximum number of records to return, -1 can be used to fetch all records (optional, default to 25l)
     * @param offset Offset records, the number of records to skip, for paginating requests (optional, default to 0l)
     * @param sort Sort order, the name of the property to sort by (optional, default to &quot;name&quot;)
     * @param direction Sort direction, use &#39;desc&#39; to reverse sort (optional, default to asc)
     * @param name Filter by name, wildcard may be specified as %, eg. example-% (optional)
     * @param phrase Search phrase for partial matches on name or description (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listLoadBalancerProfilesAsync(BigDecimal loadBalancerId, Long max, Long offset, String sort, String direction, String name, String phrase, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = listLoadBalancerProfilesValidateBeforeCall(loadBalancerId, max, offset, sort, direction, name, phrase, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listLoadBalancerTypes
     * @param max Maximum number of records to return, -1 can be used to fetch all records (optional, default to 25l)
     * @param offset Offset records, the number of records to skip, for paginating requests (optional, default to 0l)
     * @param sort Sort order, the name of the property to sort by (optional, default to &quot;name&quot;)
     * @param direction Sort direction, use &#39;desc&#39; to reverse sort (optional, default to asc)
     * @param optionTypes Pass true to include optionTypes in the response for each entry. (optional, default to false)
     * @param phrase Search phrase for partial matches on name or description (optional)
     * @param name Filter by name, wildcard may be specified as %, eg. example-% (optional)
     * @param code If specified will return an exact match on code (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listLoadBalancerTypesCall(Long max, Long offset, String sort, String direction, Boolean optionTypes, String phrase, String name, String code, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/load-balancer-types";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (optionTypes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("optionTypes", optionTypes));
        }

        if (phrase != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("phrase", phrase));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (code != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("code", code));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listLoadBalancerTypesValidateBeforeCall(Long max, Long offset, String sort, String direction, Boolean optionTypes, String phrase, String name, String code, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listLoadBalancerTypesCall(max, offset, sort, direction, optionTypes, phrase, name, code, _callback);
        return localVarCall;

    }

    /**
     * Get All Load Balancer Types
     * This endpoint retrieves all Load Balancer Types.
     * @param max Maximum number of records to return, -1 can be used to fetch all records (optional, default to 25l)
     * @param offset Offset records, the number of records to skip, for paginating requests (optional, default to 0l)
     * @param sort Sort order, the name of the property to sort by (optional, default to &quot;name&quot;)
     * @param direction Sort direction, use &#39;desc&#39; to reverse sort (optional, default to asc)
     * @param optionTypes Pass true to include optionTypes in the response for each entry. (optional, default to false)
     * @param phrase Search phrase for partial matches on name or description (optional)
     * @param name Filter by name, wildcard may be specified as %, eg. example-% (optional)
     * @param code If specified will return an exact match on code (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public Object listLoadBalancerTypes(Long max, Long offset, String sort, String direction, Boolean optionTypes, String phrase, String name, String code) throws ApiException {
        ApiResponse<Object> localVarResp = listLoadBalancerTypesWithHttpInfo(max, offset, sort, direction, optionTypes, phrase, name, code);
        return localVarResp.getData();
    }

    /**
     * Get All Load Balancer Types
     * This endpoint retrieves all Load Balancer Types.
     * @param max Maximum number of records to return, -1 can be used to fetch all records (optional, default to 25l)
     * @param offset Offset records, the number of records to skip, for paginating requests (optional, default to 0l)
     * @param sort Sort order, the name of the property to sort by (optional, default to &quot;name&quot;)
     * @param direction Sort direction, use &#39;desc&#39; to reverse sort (optional, default to asc)
     * @param optionTypes Pass true to include optionTypes in the response for each entry. (optional, default to false)
     * @param phrase Search phrase for partial matches on name or description (optional)
     * @param name Filter by name, wildcard may be specified as %, eg. example-% (optional)
     * @param code If specified will return an exact match on code (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> listLoadBalancerTypesWithHttpInfo(Long max, Long offset, String sort, String direction, Boolean optionTypes, String phrase, String name, String code) throws ApiException {
        okhttp3.Call localVarCall = listLoadBalancerTypesValidateBeforeCall(max, offset, sort, direction, optionTypes, phrase, name, code, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get All Load Balancer Types (asynchronously)
     * This endpoint retrieves all Load Balancer Types.
     * @param max Maximum number of records to return, -1 can be used to fetch all records (optional, default to 25l)
     * @param offset Offset records, the number of records to skip, for paginating requests (optional, default to 0l)
     * @param sort Sort order, the name of the property to sort by (optional, default to &quot;name&quot;)
     * @param direction Sort direction, use &#39;desc&#39; to reverse sort (optional, default to asc)
     * @param optionTypes Pass true to include optionTypes in the response for each entry. (optional, default to false)
     * @param phrase Search phrase for partial matches on name or description (optional)
     * @param name Filter by name, wildcard may be specified as %, eg. example-% (optional)
     * @param code If specified will return an exact match on code (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listLoadBalancerTypesAsync(Long max, Long offset, String sort, String direction, Boolean optionTypes, String phrase, String name, String code, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = listLoadBalancerTypesValidateBeforeCall(max, offset, sort, direction, optionTypes, phrase, name, code, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listLoadBalancerVirtualServers
     * @param loadBalancerId Load Balancer ID (required)
     * @param max Maximum number of records to return, -1 can be used to fetch all records (optional, default to 25l)
     * @param offset Offset records, the number of records to skip, for paginating requests (optional, default to 0l)
     * @param sort Sort order, the name of the property to sort by (optional, default to &quot;name&quot;)
     * @param direction Sort direction, use &#39;desc&#39; to reverse sort (optional, default to asc)
     * @param phrase Search phrase for partial matches on name or description (optional)
     * @param vipName If specified will return an exact match on vipName (optional)
     * @param vipAddress If specified will return an exact match on vipAddress (optional)
     * @param vipHostname If specified will return an exact match on vipHostname (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listLoadBalancerVirtualServersCall(BigDecimal loadBalancerId, Long max, Long offset, String sort, String direction, String phrase, String vipName, String vipAddress, String vipHostname, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/load-balancers/{loadBalancerId}/virtual-servers"
            .replaceAll("\\{" + "loadBalancerId" + "\\}", localVarApiClient.escapeString(loadBalancerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (phrase != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("phrase", phrase));
        }

        if (vipName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vipName", vipName));
        }

        if (vipAddress != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vipAddress", vipAddress));
        }

        if (vipHostname != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vipHostname", vipHostname));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listLoadBalancerVirtualServersValidateBeforeCall(BigDecimal loadBalancerId, Long max, Long offset, String sort, String direction, String phrase, String vipName, String vipAddress, String vipHostname, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'loadBalancerId' is set
        if (loadBalancerId == null) {
            throw new ApiException("Missing the required parameter 'loadBalancerId' when calling listLoadBalancerVirtualServers(Async)");
        }
        

        okhttp3.Call localVarCall = listLoadBalancerVirtualServersCall(loadBalancerId, max, offset, sort, direction, phrase, vipName, vipAddress, vipHostname, _callback);
        return localVarCall;

    }

    /**
     * Get All Load Balancer Virtual Servers For Load Balancer
     * This endpoint retrieves load balancer virtual servers associated with a specified load balancer.
     * @param loadBalancerId Load Balancer ID (required)
     * @param max Maximum number of records to return, -1 can be used to fetch all records (optional, default to 25l)
     * @param offset Offset records, the number of records to skip, for paginating requests (optional, default to 0l)
     * @param sort Sort order, the name of the property to sort by (optional, default to &quot;name&quot;)
     * @param direction Sort direction, use &#39;desc&#39; to reverse sort (optional, default to asc)
     * @param phrase Search phrase for partial matches on name or description (optional)
     * @param vipName If specified will return an exact match on vipName (optional)
     * @param vipAddress If specified will return an exact match on vipAddress (optional)
     * @param vipHostname If specified will return an exact match on vipHostname (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public Object listLoadBalancerVirtualServers(BigDecimal loadBalancerId, Long max, Long offset, String sort, String direction, String phrase, String vipName, String vipAddress, String vipHostname) throws ApiException {
        ApiResponse<Object> localVarResp = listLoadBalancerVirtualServersWithHttpInfo(loadBalancerId, max, offset, sort, direction, phrase, vipName, vipAddress, vipHostname);
        return localVarResp.getData();
    }

    /**
     * Get All Load Balancer Virtual Servers For Load Balancer
     * This endpoint retrieves load balancer virtual servers associated with a specified load balancer.
     * @param loadBalancerId Load Balancer ID (required)
     * @param max Maximum number of records to return, -1 can be used to fetch all records (optional, default to 25l)
     * @param offset Offset records, the number of records to skip, for paginating requests (optional, default to 0l)
     * @param sort Sort order, the name of the property to sort by (optional, default to &quot;name&quot;)
     * @param direction Sort direction, use &#39;desc&#39; to reverse sort (optional, default to asc)
     * @param phrase Search phrase for partial matches on name or description (optional)
     * @param vipName If specified will return an exact match on vipName (optional)
     * @param vipAddress If specified will return an exact match on vipAddress (optional)
     * @param vipHostname If specified will return an exact match on vipHostname (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> listLoadBalancerVirtualServersWithHttpInfo(BigDecimal loadBalancerId, Long max, Long offset, String sort, String direction, String phrase, String vipName, String vipAddress, String vipHostname) throws ApiException {
        okhttp3.Call localVarCall = listLoadBalancerVirtualServersValidateBeforeCall(loadBalancerId, max, offset, sort, direction, phrase, vipName, vipAddress, vipHostname, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get All Load Balancer Virtual Servers For Load Balancer (asynchronously)
     * This endpoint retrieves load balancer virtual servers associated with a specified load balancer.
     * @param loadBalancerId Load Balancer ID (required)
     * @param max Maximum number of records to return, -1 can be used to fetch all records (optional, default to 25l)
     * @param offset Offset records, the number of records to skip, for paginating requests (optional, default to 0l)
     * @param sort Sort order, the name of the property to sort by (optional, default to &quot;name&quot;)
     * @param direction Sort direction, use &#39;desc&#39; to reverse sort (optional, default to asc)
     * @param phrase Search phrase for partial matches on name or description (optional)
     * @param vipName If specified will return an exact match on vipName (optional)
     * @param vipAddress If specified will return an exact match on vipAddress (optional)
     * @param vipHostname If specified will return an exact match on vipHostname (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listLoadBalancerVirtualServersAsync(BigDecimal loadBalancerId, Long max, Long offset, String sort, String direction, String phrase, String vipName, String vipAddress, String vipHostname, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = listLoadBalancerVirtualServersValidateBeforeCall(loadBalancerId, max, offset, sort, direction, phrase, vipName, vipAddress, vipHostname, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listLoadBalancers
     * @param max Maximum number of records to return, -1 can be used to fetch all records (optional, default to 25l)
     * @param offset Offset records, the number of records to skip, for paginating requests (optional, default to 0l)
     * @param sort Sort order, the name of the property to sort by (optional, default to &quot;name&quot;)
     * @param direction Sort direction, use &#39;desc&#39; to reverse sort (optional, default to asc)
     * @param name Filter by name, wildcard may be specified as %, eg. example-% (optional)
     * @param phrase Search phrase for partial matches on name or description (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listLoadBalancersCall(Long max, Long offset, String sort, String direction, String name, String phrase, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/load-balancers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (phrase != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("phrase", phrase));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listLoadBalancersValidateBeforeCall(Long max, Long offset, String sort, String direction, String name, String phrase, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listLoadBalancersCall(max, offset, sort, direction, name, phrase, _callback);
        return localVarCall;

    }

    /**
     * Get All Load Balancers
     * This endpoint retrieves all load balancers associated with the account.
     * @param max Maximum number of records to return, -1 can be used to fetch all records (optional, default to 25l)
     * @param offset Offset records, the number of records to skip, for paginating requests (optional, default to 0l)
     * @param sort Sort order, the name of the property to sort by (optional, default to &quot;name&quot;)
     * @param direction Sort direction, use &#39;desc&#39; to reverse sort (optional, default to asc)
     * @param name Filter by name, wildcard may be specified as %, eg. example-% (optional)
     * @param phrase Search phrase for partial matches on name or description (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public Object listLoadBalancers(Long max, Long offset, String sort, String direction, String name, String phrase) throws ApiException {
        ApiResponse<Object> localVarResp = listLoadBalancersWithHttpInfo(max, offset, sort, direction, name, phrase);
        return localVarResp.getData();
    }

    /**
     * Get All Load Balancers
     * This endpoint retrieves all load balancers associated with the account.
     * @param max Maximum number of records to return, -1 can be used to fetch all records (optional, default to 25l)
     * @param offset Offset records, the number of records to skip, for paginating requests (optional, default to 0l)
     * @param sort Sort order, the name of the property to sort by (optional, default to &quot;name&quot;)
     * @param direction Sort direction, use &#39;desc&#39; to reverse sort (optional, default to asc)
     * @param name Filter by name, wildcard may be specified as %, eg. example-% (optional)
     * @param phrase Search phrase for partial matches on name or description (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> listLoadBalancersWithHttpInfo(Long max, Long offset, String sort, String direction, String name, String phrase) throws ApiException {
        okhttp3.Call localVarCall = listLoadBalancersValidateBeforeCall(max, offset, sort, direction, name, phrase, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get All Load Balancers (asynchronously)
     * This endpoint retrieves all load balancers associated with the account.
     * @param max Maximum number of records to return, -1 can be used to fetch all records (optional, default to 25l)
     * @param offset Offset records, the number of records to skip, for paginating requests (optional, default to 0l)
     * @param sort Sort order, the name of the property to sort by (optional, default to &quot;name&quot;)
     * @param direction Sort direction, use &#39;desc&#39; to reverse sort (optional, default to asc)
     * @param name Filter by name, wildcard may be specified as %, eg. example-% (optional)
     * @param phrase Search phrase for partial matches on name or description (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listLoadBalancersAsync(Long max, Long offset, String sort, String direction, String name, String phrase, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = listLoadBalancersValidateBeforeCall(max, offset, sort, direction, name, phrase, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for refreshLoadBalancer
     * @param loadBalancerId Load Balancer ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call refreshLoadBalancerCall(BigDecimal loadBalancerId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/load-balancers/{loadBalancerId}/refresh"
            .replaceAll("\\{" + "loadBalancerId" + "\\}", localVarApiClient.escapeString(loadBalancerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call refreshLoadBalancerValidateBeforeCall(BigDecimal loadBalancerId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'loadBalancerId' is set
        if (loadBalancerId == null) {
            throw new ApiException("Missing the required parameter 'loadBalancerId' when calling refreshLoadBalancer(Async)");
        }
        

        okhttp3.Call localVarCall = refreshLoadBalancerCall(loadBalancerId, _callback);
        return localVarCall;

    }

    /**
     * Refresh a Load Balancer
     * Will refresh a Load Balancer.
     * @param loadBalancerId Load Balancer ID (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public Object refreshLoadBalancer(BigDecimal loadBalancerId) throws ApiException {
        ApiResponse<Object> localVarResp = refreshLoadBalancerWithHttpInfo(loadBalancerId);
        return localVarResp.getData();
    }

    /**
     * Refresh a Load Balancer
     * Will refresh a Load Balancer.
     * @param loadBalancerId Load Balancer ID (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> refreshLoadBalancerWithHttpInfo(BigDecimal loadBalancerId) throws ApiException {
        okhttp3.Call localVarCall = refreshLoadBalancerValidateBeforeCall(loadBalancerId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Refresh a Load Balancer (asynchronously)
     * Will refresh a Load Balancer.
     * @param loadBalancerId Load Balancer ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call refreshLoadBalancerAsync(BigDecimal loadBalancerId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = refreshLoadBalancerValidateBeforeCall(loadBalancerId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateLoadBalancer
     * @param loadBalancerId Load Balancer ID (required)
     * @param inlineObject128  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateLoadBalancerCall(BigDecimal loadBalancerId, InlineObject128 inlineObject128, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = inlineObject128;

        // create path and map variables
        String localVarPath = "/api/load-balancers/{loadBalancerId}"
            .replaceAll("\\{" + "loadBalancerId" + "\\}", localVarApiClient.escapeString(loadBalancerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateLoadBalancerValidateBeforeCall(BigDecimal loadBalancerId, InlineObject128 inlineObject128, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'loadBalancerId' is set
        if (loadBalancerId == null) {
            throw new ApiException("Missing the required parameter 'loadBalancerId' when calling updateLoadBalancer(Async)");
        }
        

        okhttp3.Call localVarCall = updateLoadBalancerCall(loadBalancerId, inlineObject128, _callback);
        return localVarCall;

    }

    /**
     * Update a Load Balancer
     * Available for NSX load balancers only  Use this command to update an existing load balancer. 
     * @param loadBalancerId Load Balancer ID (required)
     * @param inlineObject128  (optional)
     * @return InlineResponse20078
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse20078 updateLoadBalancer(BigDecimal loadBalancerId, InlineObject128 inlineObject128) throws ApiException {
        ApiResponse<InlineResponse20078> localVarResp = updateLoadBalancerWithHttpInfo(loadBalancerId, inlineObject128);
        return localVarResp.getData();
    }

    /**
     * Update a Load Balancer
     * Available for NSX load balancers only  Use this command to update an existing load balancer. 
     * @param loadBalancerId Load Balancer ID (required)
     * @param inlineObject128  (optional)
     * @return ApiResponse&lt;InlineResponse20078&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse20078> updateLoadBalancerWithHttpInfo(BigDecimal loadBalancerId, InlineObject128 inlineObject128) throws ApiException {
        okhttp3.Call localVarCall = updateLoadBalancerValidateBeforeCall(loadBalancerId, inlineObject128, null);
        Type localVarReturnType = new TypeToken<InlineResponse20078>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a Load Balancer (asynchronously)
     * Available for NSX load balancers only  Use this command to update an existing load balancer. 
     * @param loadBalancerId Load Balancer ID (required)
     * @param inlineObject128  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateLoadBalancerAsync(BigDecimal loadBalancerId, InlineObject128 inlineObject128, final ApiCallback<InlineResponse20078> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateLoadBalancerValidateBeforeCall(loadBalancerId, inlineObject128, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse20078>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateLoadBalancerMonitor
     * @param loadBalancerId Load Balancer ID (required)
     * @param id Morpheus ID of the Object being referenced (required)
     * @param inlineObject130  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateLoadBalancerMonitorCall(BigDecimal loadBalancerId, Long id, InlineObject130 inlineObject130, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = inlineObject130;

        // create path and map variables
        String localVarPath = "/api/load-balancers/{loadBalancerId}/monitors/{id}"
            .replaceAll("\\{" + "loadBalancerId" + "\\}", localVarApiClient.escapeString(loadBalancerId.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateLoadBalancerMonitorValidateBeforeCall(BigDecimal loadBalancerId, Long id, InlineObject130 inlineObject130, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'loadBalancerId' is set
        if (loadBalancerId == null) {
            throw new ApiException("Missing the required parameter 'loadBalancerId' when calling updateLoadBalancerMonitor(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateLoadBalancerMonitor(Async)");
        }
        

        okhttp3.Call localVarCall = updateLoadBalancerMonitorCall(loadBalancerId, id, inlineObject130, _callback);
        return localVarCall;

    }

    /**
     * Update a Load Balancer Monitor
     * Use this command to update an existing load balancer monitor.  This endpoint allows updating a Load Balancer Monitor. Configuration options vary by Load Balancer Type. 
     * @param loadBalancerId Load Balancer ID (required)
     * @param id Morpheus ID of the Object being referenced (required)
     * @param inlineObject130  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public Object updateLoadBalancerMonitor(BigDecimal loadBalancerId, Long id, InlineObject130 inlineObject130) throws ApiException {
        ApiResponse<Object> localVarResp = updateLoadBalancerMonitorWithHttpInfo(loadBalancerId, id, inlineObject130);
        return localVarResp.getData();
    }

    /**
     * Update a Load Balancer Monitor
     * Use this command to update an existing load balancer monitor.  This endpoint allows updating a Load Balancer Monitor. Configuration options vary by Load Balancer Type. 
     * @param loadBalancerId Load Balancer ID (required)
     * @param id Morpheus ID of the Object being referenced (required)
     * @param inlineObject130  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateLoadBalancerMonitorWithHttpInfo(BigDecimal loadBalancerId, Long id, InlineObject130 inlineObject130) throws ApiException {
        okhttp3.Call localVarCall = updateLoadBalancerMonitorValidateBeforeCall(loadBalancerId, id, inlineObject130, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a Load Balancer Monitor (asynchronously)
     * Use this command to update an existing load balancer monitor.  This endpoint allows updating a Load Balancer Monitor. Configuration options vary by Load Balancer Type. 
     * @param loadBalancerId Load Balancer ID (required)
     * @param id Morpheus ID of the Object being referenced (required)
     * @param inlineObject130  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateLoadBalancerMonitorAsync(BigDecimal loadBalancerId, Long id, InlineObject130 inlineObject130, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateLoadBalancerMonitorValidateBeforeCall(loadBalancerId, id, inlineObject130, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateLoadBalancerPool
     * @param loadBalancerId Load Balancer ID (required)
     * @param id Morpheus ID of the Object being referenced (required)
     * @param inlineObject132  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateLoadBalancerPoolCall(BigDecimal loadBalancerId, Long id, InlineObject132 inlineObject132, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = inlineObject132;

        // create path and map variables
        String localVarPath = "/api/load-balancers/{loadBalancerId}/pools/{id}"
            .replaceAll("\\{" + "loadBalancerId" + "\\}", localVarApiClient.escapeString(loadBalancerId.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateLoadBalancerPoolValidateBeforeCall(BigDecimal loadBalancerId, Long id, InlineObject132 inlineObject132, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'loadBalancerId' is set
        if (loadBalancerId == null) {
            throw new ApiException("Missing the required parameter 'loadBalancerId' when calling updateLoadBalancerPool(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateLoadBalancerPool(Async)");
        }
        

        okhttp3.Call localVarCall = updateLoadBalancerPoolCall(loadBalancerId, id, inlineObject132, _callback);
        return localVarCall;

    }

    /**
     * Update a Load Balancer Pool
     * Use this command to update an existing load balancer pool.
     * @param loadBalancerId Load Balancer ID (required)
     * @param id Morpheus ID of the Object being referenced (required)
     * @param inlineObject132  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public Object updateLoadBalancerPool(BigDecimal loadBalancerId, Long id, InlineObject132 inlineObject132) throws ApiException {
        ApiResponse<Object> localVarResp = updateLoadBalancerPoolWithHttpInfo(loadBalancerId, id, inlineObject132);
        return localVarResp.getData();
    }

    /**
     * Update a Load Balancer Pool
     * Use this command to update an existing load balancer pool.
     * @param loadBalancerId Load Balancer ID (required)
     * @param id Morpheus ID of the Object being referenced (required)
     * @param inlineObject132  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateLoadBalancerPoolWithHttpInfo(BigDecimal loadBalancerId, Long id, InlineObject132 inlineObject132) throws ApiException {
        okhttp3.Call localVarCall = updateLoadBalancerPoolValidateBeforeCall(loadBalancerId, id, inlineObject132, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a Load Balancer Pool (asynchronously)
     * Use this command to update an existing load balancer pool.
     * @param loadBalancerId Load Balancer ID (required)
     * @param id Morpheus ID of the Object being referenced (required)
     * @param inlineObject132  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateLoadBalancerPoolAsync(BigDecimal loadBalancerId, Long id, InlineObject132 inlineObject132, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateLoadBalancerPoolValidateBeforeCall(loadBalancerId, id, inlineObject132, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateLoadBalancerPoolNode
     * @param loadBalancerPoolId Load Balancer Pool ID (required)
     * @param id Morpheus ID of the Object being referenced (required)
     * @param inlineObject138  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateLoadBalancerPoolNodeCall(BigDecimal loadBalancerPoolId, Long id, InlineObject138 inlineObject138, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = inlineObject138;

        // create path and map variables
        String localVarPath = "/api/load-balancer-pools/{loadBalancerPoolId}/nodes/{id}"
            .replaceAll("\\{" + "loadBalancerPoolId" + "\\}", localVarApiClient.escapeString(loadBalancerPoolId.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateLoadBalancerPoolNodeValidateBeforeCall(BigDecimal loadBalancerPoolId, Long id, InlineObject138 inlineObject138, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'loadBalancerPoolId' is set
        if (loadBalancerPoolId == null) {
            throw new ApiException("Missing the required parameter 'loadBalancerPoolId' when calling updateLoadBalancerPoolNode(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateLoadBalancerPoolNode(Async)");
        }
        

        okhttp3.Call localVarCall = updateLoadBalancerPoolNodeCall(loadBalancerPoolId, id, inlineObject138, _callback);
        return localVarCall;

    }

    /**
     * Update a Load Balancer Pool Node
     * Use this command to update an existing load balancer pool node.
     * @param loadBalancerPoolId Load Balancer Pool ID (required)
     * @param id Morpheus ID of the Object being referenced (required)
     * @param inlineObject138  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public Object updateLoadBalancerPoolNode(BigDecimal loadBalancerPoolId, Long id, InlineObject138 inlineObject138) throws ApiException {
        ApiResponse<Object> localVarResp = updateLoadBalancerPoolNodeWithHttpInfo(loadBalancerPoolId, id, inlineObject138);
        return localVarResp.getData();
    }

    /**
     * Update a Load Balancer Pool Node
     * Use this command to update an existing load balancer pool node.
     * @param loadBalancerPoolId Load Balancer Pool ID (required)
     * @param id Morpheus ID of the Object being referenced (required)
     * @param inlineObject138  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateLoadBalancerPoolNodeWithHttpInfo(BigDecimal loadBalancerPoolId, Long id, InlineObject138 inlineObject138) throws ApiException {
        okhttp3.Call localVarCall = updateLoadBalancerPoolNodeValidateBeforeCall(loadBalancerPoolId, id, inlineObject138, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a Load Balancer Pool Node (asynchronously)
     * Use this command to update an existing load balancer pool node.
     * @param loadBalancerPoolId Load Balancer Pool ID (required)
     * @param id Morpheus ID of the Object being referenced (required)
     * @param inlineObject138  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateLoadBalancerPoolNodeAsync(BigDecimal loadBalancerPoolId, Long id, InlineObject138 inlineObject138, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateLoadBalancerPoolNodeValidateBeforeCall(loadBalancerPoolId, id, inlineObject138, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateLoadBalancerProfile
     * @param loadBalancerId Load Balancer ID (required)
     * @param id Morpheus ID of the Object being referenced (required)
     * @param inlineObject134  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateLoadBalancerProfileCall(BigDecimal loadBalancerId, Long id, InlineObject134 inlineObject134, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = inlineObject134;

        // create path and map variables
        String localVarPath = "/api/load-balancers/{loadBalancerId}/profiles/{id}"
            .replaceAll("\\{" + "loadBalancerId" + "\\}", localVarApiClient.escapeString(loadBalancerId.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateLoadBalancerProfileValidateBeforeCall(BigDecimal loadBalancerId, Long id, InlineObject134 inlineObject134, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'loadBalancerId' is set
        if (loadBalancerId == null) {
            throw new ApiException("Missing the required parameter 'loadBalancerId' when calling updateLoadBalancerProfile(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateLoadBalancerProfile(Async)");
        }
        

        okhttp3.Call localVarCall = updateLoadBalancerProfileCall(loadBalancerId, id, inlineObject134, _callback);
        return localVarCall;

    }

    /**
     * Update a Load Balancer Profile
     * Use this command to update an existing load balancer Profile.
     * @param loadBalancerId Load Balancer ID (required)
     * @param id Morpheus ID of the Object being referenced (required)
     * @param inlineObject134  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public Object updateLoadBalancerProfile(BigDecimal loadBalancerId, Long id, InlineObject134 inlineObject134) throws ApiException {
        ApiResponse<Object> localVarResp = updateLoadBalancerProfileWithHttpInfo(loadBalancerId, id, inlineObject134);
        return localVarResp.getData();
    }

    /**
     * Update a Load Balancer Profile
     * Use this command to update an existing load balancer Profile.
     * @param loadBalancerId Load Balancer ID (required)
     * @param id Morpheus ID of the Object being referenced (required)
     * @param inlineObject134  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateLoadBalancerProfileWithHttpInfo(BigDecimal loadBalancerId, Long id, InlineObject134 inlineObject134) throws ApiException {
        okhttp3.Call localVarCall = updateLoadBalancerProfileValidateBeforeCall(loadBalancerId, id, inlineObject134, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a Load Balancer Profile (asynchronously)
     * Use this command to update an existing load balancer Profile.
     * @param loadBalancerId Load Balancer ID (required)
     * @param id Morpheus ID of the Object being referenced (required)
     * @param inlineObject134  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateLoadBalancerProfileAsync(BigDecimal loadBalancerId, Long id, InlineObject134 inlineObject134, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateLoadBalancerProfileValidateBeforeCall(loadBalancerId, id, inlineObject134, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateLoadBalancerVirtualServer
     * @param loadBalancerId Load Balancer ID (required)
     * @param id Morpheus ID of the Object being referenced (required)
     * @param inlineObject136  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateLoadBalancerVirtualServerCall(BigDecimal loadBalancerId, Long id, InlineObject136 inlineObject136, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = inlineObject136;

        // create path and map variables
        String localVarPath = "/api/load-balancers/{loadBalancerId}/virtual-servers/{id}"
            .replaceAll("\\{" + "loadBalancerId" + "\\}", localVarApiClient.escapeString(loadBalancerId.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateLoadBalancerVirtualServerValidateBeforeCall(BigDecimal loadBalancerId, Long id, InlineObject136 inlineObject136, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'loadBalancerId' is set
        if (loadBalancerId == null) {
            throw new ApiException("Missing the required parameter 'loadBalancerId' when calling updateLoadBalancerVirtualServer(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateLoadBalancerVirtualServer(Async)");
        }
        

        okhttp3.Call localVarCall = updateLoadBalancerVirtualServerCall(loadBalancerId, id, inlineObject136, _callback);
        return localVarCall;

    }

    /**
     * Update a Load Balancer Virtual Server
     * Use this command to update an existing load balancer virtual server.
     * @param loadBalancerId Load Balancer ID (required)
     * @param id Morpheus ID of the Object being referenced (required)
     * @param inlineObject136  (optional)
     * @return InlineResponse20082
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse20082 updateLoadBalancerVirtualServer(BigDecimal loadBalancerId, Long id, InlineObject136 inlineObject136) throws ApiException {
        ApiResponse<InlineResponse20082> localVarResp = updateLoadBalancerVirtualServerWithHttpInfo(loadBalancerId, id, inlineObject136);
        return localVarResp.getData();
    }

    /**
     * Update a Load Balancer Virtual Server
     * Use this command to update an existing load balancer virtual server.
     * @param loadBalancerId Load Balancer ID (required)
     * @param id Morpheus ID of the Object being referenced (required)
     * @param inlineObject136  (optional)
     * @return ApiResponse&lt;InlineResponse20082&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse20082> updateLoadBalancerVirtualServerWithHttpInfo(BigDecimal loadBalancerId, Long id, InlineObject136 inlineObject136) throws ApiException {
        okhttp3.Call localVarCall = updateLoadBalancerVirtualServerValidateBeforeCall(loadBalancerId, id, inlineObject136, null);
        Type localVarReturnType = new TypeToken<InlineResponse20082>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a Load Balancer Virtual Server (asynchronously)
     * Use this command to update an existing load balancer virtual server.
     * @param loadBalancerId Load Balancer ID (required)
     * @param id Morpheus ID of the Object being referenced (required)
     * @param inlineObject136  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateLoadBalancerVirtualServerAsync(BigDecimal loadBalancerId, Long id, InlineObject136 inlineObject136, final ApiCallback<InlineResponse20082> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateLoadBalancerVirtualServerValidateBeforeCall(loadBalancerId, id, inlineObject136, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse20082>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
