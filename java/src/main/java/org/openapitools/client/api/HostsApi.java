/*
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.DefaultError;
import org.openapitools.client.model.InlineObject220;
import org.openapitools.client.model.InlineObject221;
import org.openapitools.client.model.InlineObject222;
import org.openapitools.client.model.InlineObject223;
import org.openapitools.client.model.InlineObject224;
import org.openapitools.client.model.InlineObject225;
import org.openapitools.client.model.InlineObject226;
import org.openapitools.client.model.InlineObject271;
import org.openapitools.client.model.InlineResponse200137;
import org.openapitools.client.model.InlineResponse200138;
import org.openapitools.client.model.InlineResponse200141;
import org.openapitools.client.model.InlineResponse200168;
import org.openapitools.client.model.InlineResponse20050;
import org.openapitools.client.model.Model200Success;
import org.openapitools.client.model.NetworkInterfaceUpdate;
import org.threeten.bp.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class HostsApi {
    private ApiClient localVarApiClient;

    public HostsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public HostsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for getHost
     * @param id Morpheus ID of the Object being referenced (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getHostCall(Long id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/servers/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getHostValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getHost(Async)");
        }
        

        okhttp3.Call localVarCall = getHostCall(id, _callback);
        return localVarCall;

    }

    /**
     * Get a Specific Host
     * This endpoint retrieves a specific host.
     * @param id Morpheus ID of the Object being referenced (required)
     * @return InlineResponse200137
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse200137 getHost(Long id) throws ApiException {
        ApiResponse<InlineResponse200137> localVarResp = getHostWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get a Specific Host
     * This endpoint retrieves a specific host.
     * @param id Morpheus ID of the Object being referenced (required)
     * @return ApiResponse&lt;InlineResponse200137&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse200137> getHostWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = getHostValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<InlineResponse200137>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a Specific Host (asynchronously)
     * This endpoint retrieves a specific host.
     * @param id Morpheus ID of the Object being referenced (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getHostAsync(Long id, final ApiCallback<InlineResponse200137> _callback) throws ApiException {

        okhttp3.Call localVarCall = getHostValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse200137>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getHostSnpshots
     * @param id Morpheus ID of the Object being referenced (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getHostSnpshotsCall(Long id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/servers/{id}/snapshots"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getHostSnpshotsValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getHostSnpshots(Async)");
        }
        

        okhttp3.Call localVarCall = getHostSnpshotsCall(id, _callback);
        return localVarCall;

    }

    /**
     * Get list of snapshots for a Host
     * Get list of snapshots for a Host
     * @param id Morpheus ID of the Object being referenced (required)
     * @return InlineResponse200138
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse200138 getHostSnpshots(Long id) throws ApiException {
        ApiResponse<InlineResponse200138> localVarResp = getHostSnpshotsWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get list of snapshots for a Host
     * Get list of snapshots for a Host
     * @param id Morpheus ID of the Object being referenced (required)
     * @return ApiResponse&lt;InlineResponse200138&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse200138> getHostSnpshotsWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = getHostSnpshotsValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<InlineResponse200138>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get list of snapshots for a Host (asynchronously)
     * Get list of snapshots for a Host
     * @param id Morpheus ID of the Object being referenced (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getHostSnpshotsAsync(Long id, final ApiCallback<InlineResponse200138> _callback) throws ApiException {

        okhttp3.Call localVarCall = getHostSnpshotsValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse200138>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getHostType
     * @param id Morpheus ID of the Object being referenced (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getHostTypeCall(Long id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/server-types/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getHostTypeValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getHostType(Async)");
        }
        

        okhttp3.Call localVarCall = getHostTypeCall(id, _callback);
        return localVarCall;

    }

    /**
     * Get a Specific Host Type
     * This endpoint will retrieve a specific host type by id
     * @param id Morpheus ID of the Object being referenced (required)
     * @return InlineResponse20050
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse20050 getHostType(Long id) throws ApiException {
        ApiResponse<InlineResponse20050> localVarResp = getHostTypeWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get a Specific Host Type
     * This endpoint will retrieve a specific host type by id
     * @param id Morpheus ID of the Object being referenced (required)
     * @return ApiResponse&lt;InlineResponse20050&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse20050> getHostTypeWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = getHostTypeValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<InlineResponse20050>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a Specific Host Type (asynchronously)
     * This endpoint will retrieve a specific host type by id
     * @param id Morpheus ID of the Object being referenced (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getHostTypeAsync(Long id, final ApiCallback<InlineResponse20050> _callback) throws ApiException {

        okhttp3.Call localVarCall = getHostTypeValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse20050>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getWikiServer
     * @param id Morpheus ID of the Object being referenced (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWikiServerCall(Long id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/servers/{id}/wiki"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWikiServerValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getWikiServer(Async)");
        }
        

        okhttp3.Call localVarCall = getWikiServerCall(id, _callback);
        return localVarCall;

    }

    /**
     * Retrieves a Server Wiki Page
     * This endpoint retrieves a server Wiki page. 
     * @param id Morpheus ID of the Object being referenced (required)
     * @return InlineResponse200168
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse200168 getWikiServer(Long id) throws ApiException {
        ApiResponse<InlineResponse200168> localVarResp = getWikiServerWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Retrieves a Server Wiki Page
     * This endpoint retrieves a server Wiki page. 
     * @param id Morpheus ID of the Object being referenced (required)
     * @return ApiResponse&lt;InlineResponse200168&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse200168> getWikiServerWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = getWikiServerValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<InlineResponse200168>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a Server Wiki Page (asynchronously)
     * This endpoint retrieves a server Wiki page. 
     * @param id Morpheus ID of the Object being referenced (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWikiServerAsync(Long id, final ApiCallback<InlineResponse200168> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWikiServerValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse200168>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listHostTypes
     * @param max Maximum number of records to return, -1 can be used to fetch all records (optional, default to 25l)
     * @param offset Offset records, the number of records to skip, for paginating requests (optional, default to 0l)
     * @param sort Sort order, the name of the property to sort by (optional, default to &quot;name&quot;)
     * @param direction Sort direction, use &#39;desc&#39; to reverse sort (optional, default to asc)
     * @param name Filter by name, wildcard may be specified as %, eg. example-% (optional)
     * @param code If specified will return an exact match on code (optional)
     * @param phrase Search phrase for partial matches on name or description (optional)
     * @param provisionType Filter by &#x60;Provision Type&#x60; code. Refer to &#x60;Provision Types&#x60; API for up to date listings.  (optional)
     * @param zoneType Filter by Cloud Type code. (optional)
     * @param creatable Filter by creatable flag. This is whether or not it can be provisioned. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listHostTypesCall(Long max, Long offset, String sort, String direction, String name, String code, String phrase, String provisionType, String zoneType, Boolean creatable, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/server-types";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (code != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("code", code));
        }

        if (phrase != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("phrase", phrase));
        }

        if (provisionType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("provisionType", provisionType));
        }

        if (zoneType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("zoneType", zoneType));
        }

        if (creatable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("creatable", creatable));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listHostTypesValidateBeforeCall(Long max, Long offset, String sort, String direction, String name, String code, String phrase, String provisionType, String zoneType, Boolean creatable, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listHostTypesCall(max, offset, sort, direction, name, code, phrase, provisionType, zoneType, creatable, _callback);
        return localVarCall;

    }

    /**
     * Host Types
     * Fetch a paginated list of available host types. This returns the configuration options for each type.
     * @param max Maximum number of records to return, -1 can be used to fetch all records (optional, default to 25l)
     * @param offset Offset records, the number of records to skip, for paginating requests (optional, default to 0l)
     * @param sort Sort order, the name of the property to sort by (optional, default to &quot;name&quot;)
     * @param direction Sort direction, use &#39;desc&#39; to reverse sort (optional, default to asc)
     * @param name Filter by name, wildcard may be specified as %, eg. example-% (optional)
     * @param code If specified will return an exact match on code (optional)
     * @param phrase Search phrase for partial matches on name or description (optional)
     * @param provisionType Filter by &#x60;Provision Type&#x60; code. Refer to &#x60;Provision Types&#x60; API for up to date listings.  (optional)
     * @param zoneType Filter by Cloud Type code. (optional)
     * @param creatable Filter by creatable flag. This is whether or not it can be provisioned. (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public Object listHostTypes(Long max, Long offset, String sort, String direction, String name, String code, String phrase, String provisionType, String zoneType, Boolean creatable) throws ApiException {
        ApiResponse<Object> localVarResp = listHostTypesWithHttpInfo(max, offset, sort, direction, name, code, phrase, provisionType, zoneType, creatable);
        return localVarResp.getData();
    }

    /**
     * Host Types
     * Fetch a paginated list of available host types. This returns the configuration options for each type.
     * @param max Maximum number of records to return, -1 can be used to fetch all records (optional, default to 25l)
     * @param offset Offset records, the number of records to skip, for paginating requests (optional, default to 0l)
     * @param sort Sort order, the name of the property to sort by (optional, default to &quot;name&quot;)
     * @param direction Sort direction, use &#39;desc&#39; to reverse sort (optional, default to asc)
     * @param name Filter by name, wildcard may be specified as %, eg. example-% (optional)
     * @param code If specified will return an exact match on code (optional)
     * @param phrase Search phrase for partial matches on name or description (optional)
     * @param provisionType Filter by &#x60;Provision Type&#x60; code. Refer to &#x60;Provision Types&#x60; API for up to date listings.  (optional)
     * @param zoneType Filter by Cloud Type code. (optional)
     * @param creatable Filter by creatable flag. This is whether or not it can be provisioned. (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> listHostTypesWithHttpInfo(Long max, Long offset, String sort, String direction, String name, String code, String phrase, String provisionType, String zoneType, Boolean creatable) throws ApiException {
        okhttp3.Call localVarCall = listHostTypesValidateBeforeCall(max, offset, sort, direction, name, code, phrase, provisionType, zoneType, creatable, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Host Types (asynchronously)
     * Fetch a paginated list of available host types. This returns the configuration options for each type.
     * @param max Maximum number of records to return, -1 can be used to fetch all records (optional, default to 25l)
     * @param offset Offset records, the number of records to skip, for paginating requests (optional, default to 0l)
     * @param sort Sort order, the name of the property to sort by (optional, default to &quot;name&quot;)
     * @param direction Sort direction, use &#39;desc&#39; to reverse sort (optional, default to asc)
     * @param name Filter by name, wildcard may be specified as %, eg. example-% (optional)
     * @param code If specified will return an exact match on code (optional)
     * @param phrase Search phrase for partial matches on name or description (optional)
     * @param provisionType Filter by &#x60;Provision Type&#x60; code. Refer to &#x60;Provision Types&#x60; API for up to date listings.  (optional)
     * @param zoneType Filter by Cloud Type code. (optional)
     * @param creatable Filter by creatable flag. This is whether or not it can be provisioned. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listHostTypesAsync(Long max, Long offset, String sort, String direction, String name, String code, String phrase, String provisionType, String zoneType, Boolean creatable, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = listHostTypesValidateBeforeCall(max, offset, sort, direction, name, code, phrase, provisionType, zoneType, creatable, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listHosts
     * @param name Filter by name, wildcard may be specified as %, eg. example-% (optional)
     * @param phrase Search phrase for partial matches on name or description (optional)
     * @param zoneId The Zone ID for Filtering (optional)
     * @param siteId The Site ID for Filtering (optional)
     * @param clusterId The Cluster ID(s) for filtering. Accepts multiple values. (optional)
     * @param managed Filter by managed (true) or unmanaged (false) (optional)
     * @param serverType Filter by server type code (optional)
     * @param powerState Filter by power status (optional)
     * @param ip Filter by IP address (optional)
     * @param vm Filter to show only Virtual Machines (true) (optional)
     * @param vmHypervisor Filter to show only VM Hypervisors (true) (optional)
     * @param bareMetalHost Filter to show only Baremetal Servers (optional)
     * @param status Filter by status (optional)
     * @param agentInstalled Filter by agent installed (true) (optional)
     * @param max Maximum number of records to return, -1 can be used to fetch all records (optional, default to 25l)
     * @param offset Offset records, the number of records to skip, for paginating requests (optional, default to 0l)
     * @param lastUpdated Date filter, restricts query to only load resources updated more recently than the date specified (ISO 8601) (optional)
     * @param createdBy The User ID for Filtering (optional)
     * @param labels Filter by label(s), matches records that contain any of the specified labels (optional)
     * @param allLabels Filter by label(s), matches records that contain all of the specified labels (optional)
     * @param tags Filter by tags (metadata). This allows filtering by a tag name and value(s)  (optional)
     * @param metadata Alias for tags (optional)
     * @param uuid Filter by UUID (optional)
     * @param externalId Filter by External ID (optional)
     * @param internalId Filter by Internal ID (optional)
     * @param externalUniquelId Filter by External Unique ID (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listHostsCall(String name, String phrase, Long zoneId, Long siteId, Long clusterId, Boolean managed, String serverType, String powerState, String ip, Boolean vm, Boolean vmHypervisor, Boolean bareMetalHost, String status, Boolean agentInstalled, Long max, Long offset, OffsetDateTime lastUpdated, Long createdBy, String labels, String allLabels, String tags, String metadata, String uuid, String externalId, String internalId, String externalUniquelId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/servers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (phrase != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("phrase", phrase));
        }

        if (zoneId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("zoneId", zoneId));
        }

        if (siteId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("siteId", siteId));
        }

        if (clusterId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clusterId", clusterId));
        }

        if (managed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("managed", managed));
        }

        if (serverType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serverType", serverType));
        }

        if (powerState != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("powerState", powerState));
        }

        if (ip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ip", ip));
        }

        if (vm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vm", vm));
        }

        if (vmHypervisor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vmHypervisor", vmHypervisor));
        }

        if (bareMetalHost != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bareMetalHost", bareMetalHost));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (agentInstalled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("agentInstalled", agentInstalled));
        }

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lastUpdated", lastUpdated));
        }

        if (createdBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdBy", createdBy));
        }

        if (labels != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("labels", labels));
        }

        if (allLabels != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("allLabels", allLabels));
        }

        if (tags != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tags", tags));
        }

        if (metadata != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("metadata", metadata));
        }

        if (uuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uuid", uuid));
        }

        if (externalId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("externalId", externalId));
        }

        if (internalId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("internalId", internalId));
        }

        if (externalUniquelId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("externalUniquelId", externalUniquelId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listHostsValidateBeforeCall(String name, String phrase, Long zoneId, Long siteId, Long clusterId, Boolean managed, String serverType, String powerState, String ip, Boolean vm, Boolean vmHypervisor, Boolean bareMetalHost, String status, Boolean agentInstalled, Long max, Long offset, OffsetDateTime lastUpdated, Long createdBy, String labels, String allLabels, String tags, String metadata, String uuid, String externalId, String internalId, String externalUniquelId, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listHostsCall(name, phrase, zoneId, siteId, clusterId, managed, serverType, powerState, ip, vm, vmHypervisor, bareMetalHost, status, agentInstalled, max, offset, lastUpdated, createdBy, labels, allLabels, tags, metadata, uuid, externalId, internalId, externalUniquelId, _callback);
        return localVarCall;

    }

    /**
     * Get All Hosts
     * This endpoint retrieves a paginated list of hosts.
     * @param name Filter by name, wildcard may be specified as %, eg. example-% (optional)
     * @param phrase Search phrase for partial matches on name or description (optional)
     * @param zoneId The Zone ID for Filtering (optional)
     * @param siteId The Site ID for Filtering (optional)
     * @param clusterId The Cluster ID(s) for filtering. Accepts multiple values. (optional)
     * @param managed Filter by managed (true) or unmanaged (false) (optional)
     * @param serverType Filter by server type code (optional)
     * @param powerState Filter by power status (optional)
     * @param ip Filter by IP address (optional)
     * @param vm Filter to show only Virtual Machines (true) (optional)
     * @param vmHypervisor Filter to show only VM Hypervisors (true) (optional)
     * @param bareMetalHost Filter to show only Baremetal Servers (optional)
     * @param status Filter by status (optional)
     * @param agentInstalled Filter by agent installed (true) (optional)
     * @param max Maximum number of records to return, -1 can be used to fetch all records (optional, default to 25l)
     * @param offset Offset records, the number of records to skip, for paginating requests (optional, default to 0l)
     * @param lastUpdated Date filter, restricts query to only load resources updated more recently than the date specified (ISO 8601) (optional)
     * @param createdBy The User ID for Filtering (optional)
     * @param labels Filter by label(s), matches records that contain any of the specified labels (optional)
     * @param allLabels Filter by label(s), matches records that contain all of the specified labels (optional)
     * @param tags Filter by tags (metadata). This allows filtering by a tag name and value(s)  (optional)
     * @param metadata Alias for tags (optional)
     * @param uuid Filter by UUID (optional)
     * @param externalId Filter by External ID (optional)
     * @param internalId Filter by Internal ID (optional)
     * @param externalUniquelId Filter by External Unique ID (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public Object listHosts(String name, String phrase, Long zoneId, Long siteId, Long clusterId, Boolean managed, String serverType, String powerState, String ip, Boolean vm, Boolean vmHypervisor, Boolean bareMetalHost, String status, Boolean agentInstalled, Long max, Long offset, OffsetDateTime lastUpdated, Long createdBy, String labels, String allLabels, String tags, String metadata, String uuid, String externalId, String internalId, String externalUniquelId) throws ApiException {
        ApiResponse<Object> localVarResp = listHostsWithHttpInfo(name, phrase, zoneId, siteId, clusterId, managed, serverType, powerState, ip, vm, vmHypervisor, bareMetalHost, status, agentInstalled, max, offset, lastUpdated, createdBy, labels, allLabels, tags, metadata, uuid, externalId, internalId, externalUniquelId);
        return localVarResp.getData();
    }

    /**
     * Get All Hosts
     * This endpoint retrieves a paginated list of hosts.
     * @param name Filter by name, wildcard may be specified as %, eg. example-% (optional)
     * @param phrase Search phrase for partial matches on name or description (optional)
     * @param zoneId The Zone ID for Filtering (optional)
     * @param siteId The Site ID for Filtering (optional)
     * @param clusterId The Cluster ID(s) for filtering. Accepts multiple values. (optional)
     * @param managed Filter by managed (true) or unmanaged (false) (optional)
     * @param serverType Filter by server type code (optional)
     * @param powerState Filter by power status (optional)
     * @param ip Filter by IP address (optional)
     * @param vm Filter to show only Virtual Machines (true) (optional)
     * @param vmHypervisor Filter to show only VM Hypervisors (true) (optional)
     * @param bareMetalHost Filter to show only Baremetal Servers (optional)
     * @param status Filter by status (optional)
     * @param agentInstalled Filter by agent installed (true) (optional)
     * @param max Maximum number of records to return, -1 can be used to fetch all records (optional, default to 25l)
     * @param offset Offset records, the number of records to skip, for paginating requests (optional, default to 0l)
     * @param lastUpdated Date filter, restricts query to only load resources updated more recently than the date specified (ISO 8601) (optional)
     * @param createdBy The User ID for Filtering (optional)
     * @param labels Filter by label(s), matches records that contain any of the specified labels (optional)
     * @param allLabels Filter by label(s), matches records that contain all of the specified labels (optional)
     * @param tags Filter by tags (metadata). This allows filtering by a tag name and value(s)  (optional)
     * @param metadata Alias for tags (optional)
     * @param uuid Filter by UUID (optional)
     * @param externalId Filter by External ID (optional)
     * @param internalId Filter by Internal ID (optional)
     * @param externalUniquelId Filter by External Unique ID (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> listHostsWithHttpInfo(String name, String phrase, Long zoneId, Long siteId, Long clusterId, Boolean managed, String serverType, String powerState, String ip, Boolean vm, Boolean vmHypervisor, Boolean bareMetalHost, String status, Boolean agentInstalled, Long max, Long offset, OffsetDateTime lastUpdated, Long createdBy, String labels, String allLabels, String tags, String metadata, String uuid, String externalId, String internalId, String externalUniquelId) throws ApiException {
        okhttp3.Call localVarCall = listHostsValidateBeforeCall(name, phrase, zoneId, siteId, clusterId, managed, serverType, powerState, ip, vm, vmHypervisor, bareMetalHost, status, agentInstalled, max, offset, lastUpdated, createdBy, labels, allLabels, tags, metadata, uuid, externalId, internalId, externalUniquelId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get All Hosts (asynchronously)
     * This endpoint retrieves a paginated list of hosts.
     * @param name Filter by name, wildcard may be specified as %, eg. example-% (optional)
     * @param phrase Search phrase for partial matches on name or description (optional)
     * @param zoneId The Zone ID for Filtering (optional)
     * @param siteId The Site ID for Filtering (optional)
     * @param clusterId The Cluster ID(s) for filtering. Accepts multiple values. (optional)
     * @param managed Filter by managed (true) or unmanaged (false) (optional)
     * @param serverType Filter by server type code (optional)
     * @param powerState Filter by power status (optional)
     * @param ip Filter by IP address (optional)
     * @param vm Filter to show only Virtual Machines (true) (optional)
     * @param vmHypervisor Filter to show only VM Hypervisors (true) (optional)
     * @param bareMetalHost Filter to show only Baremetal Servers (optional)
     * @param status Filter by status (optional)
     * @param agentInstalled Filter by agent installed (true) (optional)
     * @param max Maximum number of records to return, -1 can be used to fetch all records (optional, default to 25l)
     * @param offset Offset records, the number of records to skip, for paginating requests (optional, default to 0l)
     * @param lastUpdated Date filter, restricts query to only load resources updated more recently than the date specified (ISO 8601) (optional)
     * @param createdBy The User ID for Filtering (optional)
     * @param labels Filter by label(s), matches records that contain any of the specified labels (optional)
     * @param allLabels Filter by label(s), matches records that contain all of the specified labels (optional)
     * @param tags Filter by tags (metadata). This allows filtering by a tag name and value(s)  (optional)
     * @param metadata Alias for tags (optional)
     * @param uuid Filter by UUID (optional)
     * @param externalId Filter by External ID (optional)
     * @param internalId Filter by Internal ID (optional)
     * @param externalUniquelId Filter by External Unique ID (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listHostsAsync(String name, String phrase, Long zoneId, Long siteId, Long clusterId, Boolean managed, String serverType, String powerState, String ip, Boolean vm, Boolean vmHypervisor, Boolean bareMetalHost, String status, Boolean agentInstalled, Long max, Long offset, OffsetDateTime lastUpdated, Long createdBy, String labels, String allLabels, String tags, String metadata, String uuid, String externalId, String internalId, String externalUniquelId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = listHostsValidateBeforeCall(name, phrase, zoneId, siteId, clusterId, managed, serverType, powerState, ip, vm, vmHypervisor, bareMetalHost, status, agentInstalled, max, offset, lastUpdated, createdBy, labels, allLabels, tags, metadata, uuid, externalId, internalId, externalUniquelId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listServerServicePlans
     * @param zoneId The Zone ID for Filtering (required)
     * @param serverTypeId The ID of the Host Type (optional)
     * @param siteId The Site ID for Filtering (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listServerServicePlansCall(Long zoneId, Long serverTypeId, Long siteId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/servers/service-plans";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zoneId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("zoneId", zoneId));
        }

        if (serverTypeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serverTypeId", serverTypeId));
        }

        if (siteId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("siteId", siteId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listServerServicePlansValidateBeforeCall(Long zoneId, Long serverTypeId, Long siteId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling listServerServicePlans(Async)");
        }
        

        okhttp3.Call localVarCall = listServerServicePlansCall(zoneId, serverTypeId, siteId, _callback);
        return localVarCall;

    }

    /**
     * Get Available Service Plans for a Host
     * This endpoint retrieves all the Service Plans available for the specified cloud and host type. It may be used to get the list of available plans when creating a new host or resizing an existing host.
     * @param zoneId The Zone ID for Filtering (required)
     * @param serverTypeId The ID of the Host Type (optional)
     * @param siteId The Site ID for Filtering (optional)
     * @return InlineResponse200141
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse200141 listServerServicePlans(Long zoneId, Long serverTypeId, Long siteId) throws ApiException {
        ApiResponse<InlineResponse200141> localVarResp = listServerServicePlansWithHttpInfo(zoneId, serverTypeId, siteId);
        return localVarResp.getData();
    }

    /**
     * Get Available Service Plans for a Host
     * This endpoint retrieves all the Service Plans available for the specified cloud and host type. It may be used to get the list of available plans when creating a new host or resizing an existing host.
     * @param zoneId The Zone ID for Filtering (required)
     * @param serverTypeId The ID of the Host Type (optional)
     * @param siteId The Site ID for Filtering (optional)
     * @return ApiResponse&lt;InlineResponse200141&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse200141> listServerServicePlansWithHttpInfo(Long zoneId, Long serverTypeId, Long siteId) throws ApiException {
        okhttp3.Call localVarCall = listServerServicePlansValidateBeforeCall(zoneId, serverTypeId, siteId, null);
        Type localVarReturnType = new TypeToken<InlineResponse200141>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Available Service Plans for a Host (asynchronously)
     * This endpoint retrieves all the Service Plans available for the specified cloud and host type. It may be used to get the list of available plans when creating a new host or resizing an existing host.
     * @param zoneId The Zone ID for Filtering (required)
     * @param serverTypeId The ID of the Host Type (optional)
     * @param siteId The Site ID for Filtering (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listServerServicePlansAsync(Long zoneId, Long serverTypeId, Long siteId, final ApiCallback<InlineResponse200141> _callback) throws ApiException {

        okhttp3.Call localVarCall = listServerServicePlansValidateBeforeCall(zoneId, serverTypeId, siteId, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse200141>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeHost
     * @param id Morpheus ID of the Object being referenced (required)
     * @param removeResources Remove Resources (optional, default to &quot;on&quot;)
     * @param removeInstances Remove Instances (optional, default to &quot;off&quot;)
     * @param preserveVolumes Preserve Volumes (optional, default to &quot;off&quot;)
     * @param releaseFloatingIps Release Floating IPs (optional, default to &quot;on&quot;)
     * @param releaseEIPs Alias for releaseFloatingIps (optional, default to &quot;on&quot;)
     * @param force Force Delete (optional, default to &quot;off&quot;)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeHostCall(Long id, String removeResources, String removeInstances, String preserveVolumes, String releaseFloatingIps, String releaseEIPs, String force, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/servers/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (removeResources != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("removeResources", removeResources));
        }

        if (removeInstances != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("removeInstances", removeInstances));
        }

        if (preserveVolumes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("preserveVolumes", preserveVolumes));
        }

        if (releaseFloatingIps != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("releaseFloatingIps", releaseFloatingIps));
        }

        if (releaseEIPs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("releaseEIPs", releaseEIPs));
        }

        if (force != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("force", force));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeHostValidateBeforeCall(Long id, String removeResources, String removeInstances, String preserveVolumes, String releaseFloatingIps, String releaseEIPs, String force, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling removeHost(Async)");
        }
        

        okhttp3.Call localVarCall = removeHostCall(id, removeResources, removeInstances, preserveVolumes, releaseFloatingIps, releaseEIPs, force, _callback);
        return localVarCall;

    }

    /**
     * Delete a Host
     * Will delete a host asynchronously.
     * @param id Morpheus ID of the Object being referenced (required)
     * @param removeResources Remove Resources (optional, default to &quot;on&quot;)
     * @param removeInstances Remove Instances (optional, default to &quot;off&quot;)
     * @param preserveVolumes Preserve Volumes (optional, default to &quot;off&quot;)
     * @param releaseFloatingIps Release Floating IPs (optional, default to &quot;on&quot;)
     * @param releaseEIPs Alias for releaseFloatingIps (optional, default to &quot;on&quot;)
     * @param force Force Delete (optional, default to &quot;off&quot;)
     * @return Model200Success
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public Model200Success removeHost(Long id, String removeResources, String removeInstances, String preserveVolumes, String releaseFloatingIps, String releaseEIPs, String force) throws ApiException {
        ApiResponse<Model200Success> localVarResp = removeHostWithHttpInfo(id, removeResources, removeInstances, preserveVolumes, releaseFloatingIps, releaseEIPs, force);
        return localVarResp.getData();
    }

    /**
     * Delete a Host
     * Will delete a host asynchronously.
     * @param id Morpheus ID of the Object being referenced (required)
     * @param removeResources Remove Resources (optional, default to &quot;on&quot;)
     * @param removeInstances Remove Instances (optional, default to &quot;off&quot;)
     * @param preserveVolumes Preserve Volumes (optional, default to &quot;off&quot;)
     * @param releaseFloatingIps Release Floating IPs (optional, default to &quot;on&quot;)
     * @param releaseEIPs Alias for releaseFloatingIps (optional, default to &quot;on&quot;)
     * @param force Force Delete (optional, default to &quot;off&quot;)
     * @return ApiResponse&lt;Model200Success&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Model200Success> removeHostWithHttpInfo(Long id, String removeResources, String removeInstances, String preserveVolumes, String releaseFloatingIps, String releaseEIPs, String force) throws ApiException {
        okhttp3.Call localVarCall = removeHostValidateBeforeCall(id, removeResources, removeInstances, preserveVolumes, releaseFloatingIps, releaseEIPs, force, null);
        Type localVarReturnType = new TypeToken<Model200Success>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a Host (asynchronously)
     * Will delete a host asynchronously.
     * @param id Morpheus ID of the Object being referenced (required)
     * @param removeResources Remove Resources (optional, default to &quot;on&quot;)
     * @param removeInstances Remove Instances (optional, default to &quot;off&quot;)
     * @param preserveVolumes Preserve Volumes (optional, default to &quot;off&quot;)
     * @param releaseFloatingIps Release Floating IPs (optional, default to &quot;on&quot;)
     * @param releaseEIPs Alias for releaseFloatingIps (optional, default to &quot;on&quot;)
     * @param force Force Delete (optional, default to &quot;off&quot;)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeHostAsync(Long id, String removeResources, String removeInstances, String preserveVolumes, String releaseFloatingIps, String releaseEIPs, String force, final ApiCallback<Model200Success> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeHostValidateBeforeCall(id, removeResources, removeInstances, preserveVolumes, releaseFloatingIps, releaseEIPs, force, _callback);
        Type localVarReturnType = new TypeToken<Model200Success>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for restartHost
     * @param id Morpheus ID of the Object being referenced (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call restartHostCall(Long id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/servers/{id}/restart"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call restartHostValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling restartHost(Async)");
        }
        

        okhttp3.Call localVarCall = restartHostCall(id, _callback);
        return localVarCall;

    }

    /**
     * Restart a Host
     * This will restart a host.
     * @param id Morpheus ID of the Object being referenced (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public Object restartHost(Long id) throws ApiException {
        ApiResponse<Object> localVarResp = restartHostWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Restart a Host
     * This will restart a host.
     * @param id Morpheus ID of the Object being referenced (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> restartHostWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = restartHostValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Restart a Host (asynchronously)
     * This will restart a host.
     * @param id Morpheus ID of the Object being referenced (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call restartHostAsync(Long id, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = restartHostValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for startHost
     * @param id Morpheus ID of the Object being referenced (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startHostCall(Long id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/servers/{id}/start"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call startHostValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling startHost(Async)");
        }
        

        okhttp3.Call localVarCall = startHostCall(id, _callback);
        return localVarCall;

    }

    /**
     * Start a Host
     * This will start a host.
     * @param id Morpheus ID of the Object being referenced (required)
     * @return Model200Success
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public Model200Success startHost(Long id) throws ApiException {
        ApiResponse<Model200Success> localVarResp = startHostWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Start a Host
     * This will start a host.
     * @param id Morpheus ID of the Object being referenced (required)
     * @return ApiResponse&lt;Model200Success&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Model200Success> startHostWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = startHostValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Model200Success>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Start a Host (asynchronously)
     * This will start a host.
     * @param id Morpheus ID of the Object being referenced (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startHostAsync(Long id, final ApiCallback<Model200Success> _callback) throws ApiException {

        okhttp3.Call localVarCall = startHostValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Model200Success>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stopHost
     * @param id Morpheus ID of the Object being referenced (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stopHostCall(Long id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/servers/{id}/stop"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stopHostValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling stopHost(Async)");
        }
        

        okhttp3.Call localVarCall = stopHostCall(id, _callback);
        return localVarCall;

    }

    /**
     * Stop a Host
     * This will stop a host.
     * @param id Morpheus ID of the Object being referenced (required)
     * @return Model200Success
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public Model200Success stopHost(Long id) throws ApiException {
        ApiResponse<Model200Success> localVarResp = stopHostWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Stop a Host
     * This will stop a host.
     * @param id Morpheus ID of the Object being referenced (required)
     * @return ApiResponse&lt;Model200Success&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Model200Success> stopHostWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = stopHostValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Model200Success>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Stop a Host (asynchronously)
     * This will stop a host.
     * @param id Morpheus ID of the Object being referenced (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stopHostAsync(Long id, final ApiCallback<Model200Success> _callback) throws ApiException {

        okhttp3.Call localVarCall = stopHostValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Model200Success>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateHost
     * @param id Morpheus ID of the Object being referenced (required)
     * @param inlineObject220  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateHostCall(Long id, InlineObject220 inlineObject220, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = inlineObject220;

        // create path and map variables
        String localVarPath = "/api/servers/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateHostValidateBeforeCall(Long id, InlineObject220 inlineObject220, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateHost(Async)");
        }
        

        okhttp3.Call localVarCall = updateHostCall(id, inlineObject220, _callback);
        return localVarCall;

    }

    /**
     * Updating a Host
     * Updating a Host
     * @param id Morpheus ID of the Object being referenced (required)
     * @param inlineObject220  (optional)
     * @return InlineResponse200137
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse200137 updateHost(Long id, InlineObject220 inlineObject220) throws ApiException {
        ApiResponse<InlineResponse200137> localVarResp = updateHostWithHttpInfo(id, inlineObject220);
        return localVarResp.getData();
    }

    /**
     * Updating a Host
     * Updating a Host
     * @param id Morpheus ID of the Object being referenced (required)
     * @param inlineObject220  (optional)
     * @return ApiResponse&lt;InlineResponse200137&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse200137> updateHostWithHttpInfo(Long id, InlineObject220 inlineObject220) throws ApiException {
        okhttp3.Call localVarCall = updateHostValidateBeforeCall(id, inlineObject220, null);
        Type localVarReturnType = new TypeToken<InlineResponse200137>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updating a Host (asynchronously)
     * Updating a Host
     * @param id Morpheus ID of the Object being referenced (required)
     * @param inlineObject220  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateHostAsync(Long id, InlineObject220 inlineObject220, final ApiCallback<InlineResponse200137> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateHostValidateBeforeCall(id, inlineObject220, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse200137>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateHostAssignTenant
     * @param id Morpheus ID of the Object being referenced (required)
     * @param accountId ID of the Tenant (optional)
     * @param inlineObject221  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateHostAssignTenantCall(Long id, Long accountId, InlineObject221 inlineObject221, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = inlineObject221;

        // create path and map variables
        String localVarPath = "/api/servers/{id}/assign-account"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accountId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accountId", accountId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateHostAssignTenantValidateBeforeCall(Long id, Long accountId, InlineObject221 inlineObject221, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateHostAssignTenant(Async)");
        }
        

        okhttp3.Call localVarCall = updateHostAssignTenantCall(id, accountId, inlineObject221, _callback);
        return localVarCall;

    }

    /**
     * Assign To Tenant
     * This will change the ownership of the host to the specified Tenant account. This is only available to Master Tenant users.
     * @param id Morpheus ID of the Object being referenced (required)
     * @param accountId ID of the Tenant (optional)
     * @param inlineObject221  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public Object updateHostAssignTenant(Long id, Long accountId, InlineObject221 inlineObject221) throws ApiException {
        ApiResponse<Object> localVarResp = updateHostAssignTenantWithHttpInfo(id, accountId, inlineObject221);
        return localVarResp.getData();
    }

    /**
     * Assign To Tenant
     * This will change the ownership of the host to the specified Tenant account. This is only available to Master Tenant users.
     * @param id Morpheus ID of the Object being referenced (required)
     * @param accountId ID of the Tenant (optional)
     * @param inlineObject221  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateHostAssignTenantWithHttpInfo(Long id, Long accountId, InlineObject221 inlineObject221) throws ApiException {
        okhttp3.Call localVarCall = updateHostAssignTenantValidateBeforeCall(id, accountId, inlineObject221, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Assign To Tenant (asynchronously)
     * This will change the ownership of the host to the specified Tenant account. This is only available to Master Tenant users.
     * @param id Morpheus ID of the Object being referenced (required)
     * @param accountId ID of the Tenant (optional)
     * @param inlineObject221  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateHostAssignTenantAsync(Long id, Long accountId, InlineObject221 inlineObject221, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateHostAssignTenantValidateBeforeCall(id, accountId, inlineObject221, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateHostCloud
     * @param inlineObject226  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateHostCloudCall(InlineObject226 inlineObject226, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = inlineObject226;

        // create path and map variables
        String localVarPath = "/api/servers/change-cloud";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateHostCloudValidateBeforeCall(InlineObject226 inlineObject226, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = updateHostCloudCall(inlineObject226, _callback);
        return localVarCall;

    }

    /**
     * Change Server Cloud
     * This api call is reserved for migrating servers from one cloud to another. This could be due to moving clusters or resource pool scoping of a server without losing the data.
     * @param inlineObject226  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public Object updateHostCloud(InlineObject226 inlineObject226) throws ApiException {
        ApiResponse<Object> localVarResp = updateHostCloudWithHttpInfo(inlineObject226);
        return localVarResp.getData();
    }

    /**
     * Change Server Cloud
     * This api call is reserved for migrating servers from one cloud to another. This could be due to moving clusters or resource pool scoping of a server without losing the data.
     * @param inlineObject226  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateHostCloudWithHttpInfo(InlineObject226 inlineObject226) throws ApiException {
        okhttp3.Call localVarCall = updateHostCloudValidateBeforeCall(inlineObject226, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Change Server Cloud (asynchronously)
     * This api call is reserved for migrating servers from one cloud to another. This could be due to moving clusters or resource pool scoping of a server without losing the data.
     * @param inlineObject226  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateHostCloudAsync(InlineObject226 inlineObject226, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateHostCloudValidateBeforeCall(inlineObject226, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateHostExecuteWorkflow
     * @param id Morpheus ID of the Object being referenced (required)
     * @param workflowId ID of the workflow to execute (optional)
     * @param workflowName Name of the workflow to execute (optional)
     * @param inlineObject225  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateHostExecuteWorkflowCall(Long id, Long workflowId, String workflowName, InlineObject225 inlineObject225, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = inlineObject225;

        // create path and map variables
        String localVarPath = "/api/servers/{id}/workflow"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (workflowId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("workflowId", workflowId));
        }

        if (workflowName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("workflowName", workflowName));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateHostExecuteWorkflowValidateBeforeCall(Long id, Long workflowId, String workflowName, InlineObject225 inlineObject225, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateHostExecuteWorkflow(Async)");
        }
        

        okhttp3.Call localVarCall = updateHostExecuteWorkflowCall(id, workflowId, workflowName, inlineObject225, _callback);
        return localVarCall;

    }

    /**
     * Run Workflow on a Host
     * This will run a provisioning workflow on a host.  For operational workflows, see Execute a Workflow. 
     * @param id Morpheus ID of the Object being referenced (required)
     * @param workflowId ID of the workflow to execute (optional)
     * @param workflowName Name of the workflow to execute (optional)
     * @param inlineObject225  (optional)
     * @return Model200Success
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public Model200Success updateHostExecuteWorkflow(Long id, Long workflowId, String workflowName, InlineObject225 inlineObject225) throws ApiException {
        ApiResponse<Model200Success> localVarResp = updateHostExecuteWorkflowWithHttpInfo(id, workflowId, workflowName, inlineObject225);
        return localVarResp.getData();
    }

    /**
     * Run Workflow on a Host
     * This will run a provisioning workflow on a host.  For operational workflows, see Execute a Workflow. 
     * @param id Morpheus ID of the Object being referenced (required)
     * @param workflowId ID of the workflow to execute (optional)
     * @param workflowName Name of the workflow to execute (optional)
     * @param inlineObject225  (optional)
     * @return ApiResponse&lt;Model200Success&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Model200Success> updateHostExecuteWorkflowWithHttpInfo(Long id, Long workflowId, String workflowName, InlineObject225 inlineObject225) throws ApiException {
        okhttp3.Call localVarCall = updateHostExecuteWorkflowValidateBeforeCall(id, workflowId, workflowName, inlineObject225, null);
        Type localVarReturnType = new TypeToken<Model200Success>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Run Workflow on a Host (asynchronously)
     * This will run a provisioning workflow on a host.  For operational workflows, see Execute a Workflow. 
     * @param id Morpheus ID of the Object being referenced (required)
     * @param workflowId ID of the workflow to execute (optional)
     * @param workflowName Name of the workflow to execute (optional)
     * @param inlineObject225  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateHostExecuteWorkflowAsync(Long id, Long workflowId, String workflowName, InlineObject225 inlineObject225, final ApiCallback<Model200Success> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateHostExecuteWorkflowValidateBeforeCall(id, workflowId, workflowName, inlineObject225, _callback);
        Type localVarReturnType = new TypeToken<Model200Success>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateHostInstallAgent
     * @param id Morpheus ID of the Object being referenced (required)
     * @param inlineObject222  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateHostInstallAgentCall(Long id, InlineObject222 inlineObject222, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = inlineObject222;

        // create path and map variables
        String localVarPath = "/api/servers/{id}/install-agent"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateHostInstallAgentValidateBeforeCall(Long id, InlineObject222 inlineObject222, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateHostInstallAgent(Async)");
        }
        

        okhttp3.Call localVarCall = updateHostInstallAgentCall(id, inlineObject222, _callback);
        return localVarCall;

    }

    /**
     * Install Agent
     * This will make the host a managed server, and install the agent.
     * @param id Morpheus ID of the Object being referenced (required)
     * @param inlineObject222  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public Object updateHostInstallAgent(Long id, InlineObject222 inlineObject222) throws ApiException {
        ApiResponse<Object> localVarResp = updateHostInstallAgentWithHttpInfo(id, inlineObject222);
        return localVarResp.getData();
    }

    /**
     * Install Agent
     * This will make the host a managed server, and install the agent.
     * @param id Morpheus ID of the Object being referenced (required)
     * @param inlineObject222  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateHostInstallAgentWithHttpInfo(Long id, InlineObject222 inlineObject222) throws ApiException {
        okhttp3.Call localVarCall = updateHostInstallAgentValidateBeforeCall(id, inlineObject222, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Install Agent (asynchronously)
     * This will make the host a managed server, and install the agent.
     * @param id Morpheus ID of the Object being referenced (required)
     * @param inlineObject222  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateHostInstallAgentAsync(Long id, InlineObject222 inlineObject222, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateHostInstallAgentValidateBeforeCall(id, inlineObject222, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateHostManaged
     * @param id Morpheus ID of the Object being referenced (required)
     * @param inlineObject223  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateHostManagedCall(Long id, InlineObject223 inlineObject223, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = inlineObject223;

        // create path and map variables
        String localVarPath = "/api/servers/{id}/make-managed"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateHostManagedValidateBeforeCall(Long id, InlineObject223 inlineObject223, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateHostManaged(Async)");
        }
        

        okhttp3.Call localVarCall = updateHostManagedCall(id, inlineObject223, _callback);
        return localVarCall;

    }

    /**
     * Convert To Managed
     * This will make the host a managed server, and install the agent.
     * @param id Morpheus ID of the Object being referenced (required)
     * @param inlineObject223  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public Object updateHostManaged(Long id, InlineObject223 inlineObject223) throws ApiException {
        ApiResponse<Object> localVarResp = updateHostManagedWithHttpInfo(id, inlineObject223);
        return localVarResp.getData();
    }

    /**
     * Convert To Managed
     * This will make the host a managed server, and install the agent.
     * @param id Morpheus ID of the Object being referenced (required)
     * @param inlineObject223  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateHostManagedWithHttpInfo(Long id, InlineObject223 inlineObject223) throws ApiException {
        okhttp3.Call localVarCall = updateHostManagedValidateBeforeCall(id, inlineObject223, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Convert To Managed (asynchronously)
     * This will make the host a managed server, and install the agent.
     * @param id Morpheus ID of the Object being referenced (required)
     * @param inlineObject223  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateHostManagedAsync(Long id, InlineObject223 inlineObject223, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateHostManagedValidateBeforeCall(id, inlineObject223, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateHostResize
     * @param id Morpheus ID of the Object being referenced (required)
     * @param inlineObject224  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateHostResizeCall(Long id, InlineObject224 inlineObject224, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = inlineObject224;

        // create path and map variables
        String localVarPath = "/api/servers/{id}/resize"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateHostResizeValidateBeforeCall(Long id, InlineObject224 inlineObject224, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateHostResize(Async)");
        }
        

        okhttp3.Call localVarCall = updateHostResizeCall(id, inlineObject224, _callback);
        return localVarCall;

    }

    /**
     * Resize a Host
     * Will resize a host asynchronously. This endpoint also allows for NIC reconfiguration by passing a new array of &#x60;networkInterfaces&#x60;.
     * @param id Morpheus ID of the Object being referenced (required)
     * @param inlineObject224  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public Object updateHostResize(Long id, InlineObject224 inlineObject224) throws ApiException {
        ApiResponse<Object> localVarResp = updateHostResizeWithHttpInfo(id, inlineObject224);
        return localVarResp.getData();
    }

    /**
     * Resize a Host
     * Will resize a host asynchronously. This endpoint also allows for NIC reconfiguration by passing a new array of &#x60;networkInterfaces&#x60;.
     * @param id Morpheus ID of the Object being referenced (required)
     * @param inlineObject224  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateHostResizeWithHttpInfo(Long id, InlineObject224 inlineObject224) throws ApiException {
        okhttp3.Call localVarCall = updateHostResizeValidateBeforeCall(id, inlineObject224, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Resize a Host (asynchronously)
     * Will resize a host asynchronously. This endpoint also allows for NIC reconfiguration by passing a new array of &#x60;networkInterfaces&#x60;.
     * @param id Morpheus ID of the Object being referenced (required)
     * @param inlineObject224  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateHostResizeAsync(Long id, InlineObject224 inlineObject224, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateHostResizeValidateBeforeCall(id, inlineObject224, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateHostUpgradeAgent
     * @param id Morpheus ID of the Object being referenced (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateHostUpgradeAgentCall(Long id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/servers/{id}/upgrade"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateHostUpgradeAgentValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateHostUpgradeAgent(Async)");
        }
        

        okhttp3.Call localVarCall = updateHostUpgradeAgentCall(id, _callback);
        return localVarCall;

    }

    /**
     * Upgrade Agent
     * This will upgrade the version of the agent installed on the host.
     * @param id Morpheus ID of the Object being referenced (required)
     * @return Model200Success
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public Model200Success updateHostUpgradeAgent(Long id) throws ApiException {
        ApiResponse<Model200Success> localVarResp = updateHostUpgradeAgentWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Upgrade Agent
     * This will upgrade the version of the agent installed on the host.
     * @param id Morpheus ID of the Object being referenced (required)
     * @return ApiResponse&lt;Model200Success&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Model200Success> updateHostUpgradeAgentWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = updateHostUpgradeAgentValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Model200Success>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Upgrade Agent (asynchronously)
     * This will upgrade the version of the agent installed on the host.
     * @param id Morpheus ID of the Object being referenced (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateHostUpgradeAgentAsync(Long id, final ApiCallback<Model200Success> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateHostUpgradeAgentValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Model200Success>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateServerNetworkInterface
     * @param id Morpheus ID of the Object being referenced (required)
     * @param networkInterfaceId NetworkInterface (ComputeServerInterface) ID of the Object being created or referenced (required)
     * @param networkInterfaceUpdate  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateServerNetworkInterfaceCall(Long id, BigDecimal networkInterfaceId, NetworkInterfaceUpdate networkInterfaceUpdate, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = networkInterfaceUpdate;

        // create path and map variables
        String localVarPath = "/api/servers/{id}/networkInterfaces/{networkInterfaceId}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "networkInterfaceId" + "\\}", localVarApiClient.escapeString(networkInterfaceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateServerNetworkInterfaceValidateBeforeCall(Long id, BigDecimal networkInterfaceId, NetworkInterfaceUpdate networkInterfaceUpdate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateServerNetworkInterface(Async)");
        }
        
        // verify the required parameter 'networkInterfaceId' is set
        if (networkInterfaceId == null) {
            throw new ApiException("Missing the required parameter 'networkInterfaceId' when calling updateServerNetworkInterface(Async)");
        }
        

        okhttp3.Call localVarCall = updateServerNetworkInterfaceCall(id, networkInterfaceId, networkInterfaceUpdate, _callback);
        return localVarCall;

    }

    /**
     * Updating a label for a Server&#39;s Network
     * Updating a Server&#39;s Network&#39;s Label
     * @param id Morpheus ID of the Object being referenced (required)
     * @param networkInterfaceId NetworkInterface (ComputeServerInterface) ID of the Object being created or referenced (required)
     * @param networkInterfaceUpdate  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public Object updateServerNetworkInterface(Long id, BigDecimal networkInterfaceId, NetworkInterfaceUpdate networkInterfaceUpdate) throws ApiException {
        ApiResponse<Object> localVarResp = updateServerNetworkInterfaceWithHttpInfo(id, networkInterfaceId, networkInterfaceUpdate);
        return localVarResp.getData();
    }

    /**
     * Updating a label for a Server&#39;s Network
     * Updating a Server&#39;s Network&#39;s Label
     * @param id Morpheus ID of the Object being referenced (required)
     * @param networkInterfaceId NetworkInterface (ComputeServerInterface) ID of the Object being created or referenced (required)
     * @param networkInterfaceUpdate  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateServerNetworkInterfaceWithHttpInfo(Long id, BigDecimal networkInterfaceId, NetworkInterfaceUpdate networkInterfaceUpdate) throws ApiException {
        okhttp3.Call localVarCall = updateServerNetworkInterfaceValidateBeforeCall(id, networkInterfaceId, networkInterfaceUpdate, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updating a label for a Server&#39;s Network (asynchronously)
     * Updating a Server&#39;s Network&#39;s Label
     * @param id Morpheus ID of the Object being referenced (required)
     * @param networkInterfaceId NetworkInterface (ComputeServerInterface) ID of the Object being created or referenced (required)
     * @param networkInterfaceUpdate  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateServerNetworkInterfaceAsync(Long id, BigDecimal networkInterfaceId, NetworkInterfaceUpdate networkInterfaceUpdate, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateServerNetworkInterfaceValidateBeforeCall(id, networkInterfaceId, networkInterfaceUpdate, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateWikiServer
     * @param id Morpheus ID of the Object being referenced (required)
     * @param inlineObject271  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateWikiServerCall(Long id, InlineObject271 inlineObject271, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = inlineObject271;

        // create path and map variables
        String localVarPath = "/api/servers/{id}/wiki"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateWikiServerValidateBeforeCall(Long id, InlineObject271 inlineObject271, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateWikiServer(Async)");
        }
        

        okhttp3.Call localVarCall = updateWikiServerCall(id, inlineObject271, _callback);
        return localVarCall;

    }

    /**
     * Update a Server Wiki Page
     * Updates a server Wiki page. 
     * @param id Morpheus ID of the Object being referenced (required)
     * @param inlineObject271  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public Object updateWikiServer(Long id, InlineObject271 inlineObject271) throws ApiException {
        ApiResponse<Object> localVarResp = updateWikiServerWithHttpInfo(id, inlineObject271);
        return localVarResp.getData();
    }

    /**
     * Update a Server Wiki Page
     * Updates a server Wiki page. 
     * @param id Morpheus ID of the Object being referenced (required)
     * @param inlineObject271  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateWikiServerWithHttpInfo(Long id, InlineObject271 inlineObject271) throws ApiException {
        okhttp3.Call localVarCall = updateWikiServerValidateBeforeCall(id, inlineObject271, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a Server Wiki Page (asynchronously)
     * Updates a server Wiki page. 
     * @param id Morpheus ID of the Object being referenced (required)
     * @param inlineObject271  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateWikiServerAsync(Long id, InlineObject271 inlineObject271, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateWikiServerValidateBeforeCall(id, inlineObject271, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
