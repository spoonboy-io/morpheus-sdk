/*
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.1.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AddCheckApps200Response;
import org.openapitools.client.model.AddCheckAppsRequest;
import org.openapitools.client.model.DefaultError;
import org.openapitools.client.model.ListCheckApps200Response;
import java.time.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ChecksApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ChecksApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ChecksApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addCheckApps
     * @param addCheckAppsRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Check App Object </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addCheckAppsCall(AddCheckAppsRequest addCheckAppsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addCheckAppsRequest;

        // create path and map variables
        String localVarPath = "/api/monitoring/apps";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addCheckAppsValidateBeforeCall(AddCheckAppsRequest addCheckAppsRequest, final ApiCallback _callback) throws ApiException {
        return addCheckAppsCall(addCheckAppsRequest, _callback);

    }

    /**
     * Create a New Check App
     * Create a new check app.
     * @param addCheckAppsRequest  (optional)
     * @return AddCheckApps200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Check App Object </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public AddCheckApps200Response addCheckApps(AddCheckAppsRequest addCheckAppsRequest) throws ApiException {
        ApiResponse<AddCheckApps200Response> localVarResp = addCheckAppsWithHttpInfo(addCheckAppsRequest);
        return localVarResp.getData();
    }

    /**
     * Create a New Check App
     * Create a new check app.
     * @param addCheckAppsRequest  (optional)
     * @return ApiResponse&lt;AddCheckApps200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Check App Object </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AddCheckApps200Response> addCheckAppsWithHttpInfo(AddCheckAppsRequest addCheckAppsRequest) throws ApiException {
        okhttp3.Call localVarCall = addCheckAppsValidateBeforeCall(addCheckAppsRequest, null);
        Type localVarReturnType = new TypeToken<AddCheckApps200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a New Check App (asynchronously)
     * Create a new check app.
     * @param addCheckAppsRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Check App Object </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addCheckAppsAsync(AddCheckAppsRequest addCheckAppsRequest, final ApiCallback<AddCheckApps200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = addCheckAppsValidateBeforeCall(addCheckAppsRequest, _callback);
        Type localVarReturnType = new TypeToken<AddCheckApps200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listCheckApps
     * @param max Maximum number of records to return (optional, default to 25)
     * @param offset Offset records, the number of records to skip, for paginating requests (optional, default to 0)
     * @param sort Sort order, the name of the property to sort by (optional, default to name)
     * @param name Filter by name, wildcard may be specified as %, eg. example-% (optional)
     * @param phrase Search phrase for partial matches on name or description (optional)
     * @param status The instance status for filtering. (optional)
     * @param lastUpdated Date filter, restricts query to only load resources updated more recently than the date specified (ISO 8601) (optional)
     * @param deleted If true, only deleted resources or instances in pending removal status are returned. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Check Apps </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCheckAppsCall(Long max, Long offset, String sort, String name, String phrase, String status, OffsetDateTime lastUpdated, Boolean deleted, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/monitoring/apps";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (phrase != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("phrase", phrase));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lastUpdated", lastUpdated));
        }

        if (deleted != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deleted", deleted));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCheckAppsValidateBeforeCall(Long max, Long offset, String sort, String name, String phrase, String status, OffsetDateTime lastUpdated, Boolean deleted, final ApiCallback _callback) throws ApiException {
        return listCheckAppsCall(max, offset, sort, name, phrase, status, lastUpdated, deleted, _callback);

    }

    /**
     * List All Check Apps
     * Get a list of check apps.
     * @param max Maximum number of records to return (optional, default to 25)
     * @param offset Offset records, the number of records to skip, for paginating requests (optional, default to 0)
     * @param sort Sort order, the name of the property to sort by (optional, default to name)
     * @param name Filter by name, wildcard may be specified as %, eg. example-% (optional)
     * @param phrase Search phrase for partial matches on name or description (optional)
     * @param status The instance status for filtering. (optional)
     * @param lastUpdated Date filter, restricts query to only load resources updated more recently than the date specified (ISO 8601) (optional)
     * @param deleted If true, only deleted resources or instances in pending removal status are returned. (optional)
     * @return ListCheckApps200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Check Apps </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ListCheckApps200Response listCheckApps(Long max, Long offset, String sort, String name, String phrase, String status, OffsetDateTime lastUpdated, Boolean deleted) throws ApiException {
        ApiResponse<ListCheckApps200Response> localVarResp = listCheckAppsWithHttpInfo(max, offset, sort, name, phrase, status, lastUpdated, deleted);
        return localVarResp.getData();
    }

    /**
     * List All Check Apps
     * Get a list of check apps.
     * @param max Maximum number of records to return (optional, default to 25)
     * @param offset Offset records, the number of records to skip, for paginating requests (optional, default to 0)
     * @param sort Sort order, the name of the property to sort by (optional, default to name)
     * @param name Filter by name, wildcard may be specified as %, eg. example-% (optional)
     * @param phrase Search phrase for partial matches on name or description (optional)
     * @param status The instance status for filtering. (optional)
     * @param lastUpdated Date filter, restricts query to only load resources updated more recently than the date specified (ISO 8601) (optional)
     * @param deleted If true, only deleted resources or instances in pending removal status are returned. (optional)
     * @return ApiResponse&lt;ListCheckApps200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Check Apps </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListCheckApps200Response> listCheckAppsWithHttpInfo(Long max, Long offset, String sort, String name, String phrase, String status, OffsetDateTime lastUpdated, Boolean deleted) throws ApiException {
        okhttp3.Call localVarCall = listCheckAppsValidateBeforeCall(max, offset, sort, name, phrase, status, lastUpdated, deleted, null);
        Type localVarReturnType = new TypeToken<ListCheckApps200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List All Check Apps (asynchronously)
     * Get a list of check apps.
     * @param max Maximum number of records to return (optional, default to 25)
     * @param offset Offset records, the number of records to skip, for paginating requests (optional, default to 0)
     * @param sort Sort order, the name of the property to sort by (optional, default to name)
     * @param name Filter by name, wildcard may be specified as %, eg. example-% (optional)
     * @param phrase Search phrase for partial matches on name or description (optional)
     * @param status The instance status for filtering. (optional)
     * @param lastUpdated Date filter, restricts query to only load resources updated more recently than the date specified (ISO 8601) (optional)
     * @param deleted If true, only deleted resources or instances in pending removal status are returned. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Check Apps </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCheckAppsAsync(Long max, Long offset, String sort, String name, String phrase, String status, OffsetDateTime lastUpdated, Boolean deleted, final ApiCallback<ListCheckApps200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCheckAppsValidateBeforeCall(max, offset, sort, name, phrase, status, lastUpdated, deleted, _callback);
        Type localVarReturnType = new TypeToken<ListCheckApps200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
