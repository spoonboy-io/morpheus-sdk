/*
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DefaultError;
import org.openapitools.client.model.InlineObject72;
import org.openapitools.client.model.InlineObject73;
import org.openapitools.client.model.InlineObject92;
import org.openapitools.client.model.InlineResponse20040;
import org.openapitools.client.model.Model200Success;
import org.threeten.bp.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DeploysApi {
    private ApiClient localVarApiClient;

    public DeploysApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DeploysApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for addInstanceDeploy
     * @param id Morpheus ID of the Object being referenced (required)
     * @param inlineObject92  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addInstanceDeployCall(Long id, InlineObject92 inlineObject92, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = inlineObject92;

        // create path and map variables
        String localVarPath = "/api/instances/{id}/deploys"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addInstanceDeployValidateBeforeCall(Long id, InlineObject92 inlineObject92, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling addInstanceDeploy(Async)");
        }
        

        okhttp3.Call localVarCall = addInstanceDeployCall(id, inlineObject92, _callback);
        return localVarCall;

    }

    /**
     * Deploy to an Instance
     * This endpoint will deploy the specified deployment version to specified instance. The version to deploy can be identified with deploymentId and version or with versionId alone.  By default, the deployment is executed right away. To prevent this so that it can be run manually later on. 
     * @param id Morpheus ID of the Object being referenced (required)
     * @param inlineObject92  (optional)
     * @return InlineResponse20040
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse20040 addInstanceDeploy(Long id, InlineObject92 inlineObject92) throws ApiException {
        ApiResponse<InlineResponse20040> localVarResp = addInstanceDeployWithHttpInfo(id, inlineObject92);
        return localVarResp.getData();
    }

    /**
     * Deploy to an Instance
     * This endpoint will deploy the specified deployment version to specified instance. The version to deploy can be identified with deploymentId and version or with versionId alone.  By default, the deployment is executed right away. To prevent this so that it can be run manually later on. 
     * @param id Morpheus ID of the Object being referenced (required)
     * @param inlineObject92  (optional)
     * @return ApiResponse&lt;InlineResponse20040&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse20040> addInstanceDeployWithHttpInfo(Long id, InlineObject92 inlineObject92) throws ApiException {
        okhttp3.Call localVarCall = addInstanceDeployValidateBeforeCall(id, inlineObject92, null);
        Type localVarReturnType = new TypeToken<InlineResponse20040>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deploy to an Instance (asynchronously)
     * This endpoint will deploy the specified deployment version to specified instance. The version to deploy can be identified with deploymentId and version or with versionId alone.  By default, the deployment is executed right away. To prevent this so that it can be run manually later on. 
     * @param id Morpheus ID of the Object being referenced (required)
     * @param inlineObject92  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addInstanceDeployAsync(Long id, InlineObject92 inlineObject92, final ApiCallback<InlineResponse20040> _callback) throws ApiException {

        okhttp3.Call localVarCall = addInstanceDeployValidateBeforeCall(id, inlineObject92, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse20040>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deletedeploy
     * @param id Morpheus ID of the Object being referenced (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletedeployCall(Long id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/deploys/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletedeployValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deletedeploy(Async)");
        }
        

        okhttp3.Call localVarCall = deletedeployCall(id, _callback);
        return localVarCall;

    }

    /**
     * Delete a Deploy
     * This endpoint will delete an archived instance deploy.
     * @param id Morpheus ID of the Object being referenced (required)
     * @return Model200Success
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public Model200Success deletedeploy(Long id) throws ApiException {
        ApiResponse<Model200Success> localVarResp = deletedeployWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Delete a Deploy
     * This endpoint will delete an archived instance deploy.
     * @param id Morpheus ID of the Object being referenced (required)
     * @return ApiResponse&lt;Model200Success&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Model200Success> deletedeployWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = deletedeployValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Model200Success>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a Deploy (asynchronously)
     * This endpoint will delete an archived instance deploy.
     * @param id Morpheus ID of the Object being referenced (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletedeployAsync(Long id, final ApiCallback<Model200Success> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletedeployValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Model200Success>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getInstanceDeploys
     * @param id Morpheus ID of the Object being referenced (required)
     * @param max Maximum number of records to return, -1 can be used to fetch all records (optional, default to 25l)
     * @param offset Offset records, the number of records to skip, for paginating requests (optional, default to 0l)
     * @param phrase Search phrase for partial matches on name or description (optional)
     * @param name Filter by name, wildcard may be specified as %, eg. example-% (optional)
     * @param deploymentId Filter by deployment id (optional)
     * @param instanceName Filter by instance name (optional)
     * @param instanceId The Instance ID for Filtering (optional)
     * @param version Filter by version number (userVersion) (optional)
     * @param versionId Filter by deployment version id (optional)
     * @param createdById Filter by owner (user) id (optional)
     * @param deployType Filter by type (deployType), file, git, fetch (optional)
     * @param dateCreated Filter by dateCreated, the created timestamp is more recent or equal to the date specified (optional)
     * @param lastUpdated Date filter, restricts query to only load resources updated more recently than the date specified (ISO 8601) (optional)
     * @param deployDate Filter by deployDate, deployment completion timestamp is more recent or equal to the date specified (optional)
     * @param status Filter by status (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getInstanceDeploysCall(Long id, Long max, Long offset, String phrase, String name, Long deploymentId, String instanceName, Long instanceId, Long version, Long versionId, Long createdById, String deployType, String dateCreated, OffsetDateTime lastUpdated, String deployDate, String status, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/instances/{id}/deploys"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (phrase != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("phrase", phrase));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (deploymentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deploymentId", deploymentId));
        }

        if (instanceName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("instanceName", instanceName));
        }

        if (instanceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("instanceId", instanceId));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        if (versionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("versionId", versionId));
        }

        if (createdById != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdById", createdById));
        }

        if (deployType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deployType", deployType));
        }

        if (dateCreated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateCreated", dateCreated));
        }

        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lastUpdated", lastUpdated));
        }

        if (deployDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deployDate", deployDate));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInstanceDeploysValidateBeforeCall(Long id, Long max, Long offset, String phrase, String name, Long deploymentId, String instanceName, Long instanceId, Long version, Long versionId, Long createdById, String deployType, String dateCreated, OffsetDateTime lastUpdated, String deployDate, String status, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getInstanceDeploys(Async)");
        }
        

        okhttp3.Call localVarCall = getInstanceDeploysCall(id, max, offset, phrase, name, deploymentId, instanceName, instanceId, version, versionId, createdById, deployType, dateCreated, lastUpdated, deployDate, status, _callback);
        return localVarCall;

    }

    /**
     * Get all Deploys for an Instance
     * This endpoint retrieves all deploys for a specific instance.
     * @param id Morpheus ID of the Object being referenced (required)
     * @param max Maximum number of records to return, -1 can be used to fetch all records (optional, default to 25l)
     * @param offset Offset records, the number of records to skip, for paginating requests (optional, default to 0l)
     * @param phrase Search phrase for partial matches on name or description (optional)
     * @param name Filter by name, wildcard may be specified as %, eg. example-% (optional)
     * @param deploymentId Filter by deployment id (optional)
     * @param instanceName Filter by instance name (optional)
     * @param instanceId The Instance ID for Filtering (optional)
     * @param version Filter by version number (userVersion) (optional)
     * @param versionId Filter by deployment version id (optional)
     * @param createdById Filter by owner (user) id (optional)
     * @param deployType Filter by type (deployType), file, git, fetch (optional)
     * @param dateCreated Filter by dateCreated, the created timestamp is more recent or equal to the date specified (optional)
     * @param lastUpdated Date filter, restricts query to only load resources updated more recently than the date specified (ISO 8601) (optional)
     * @param deployDate Filter by deployDate, deployment completion timestamp is more recent or equal to the date specified (optional)
     * @param status Filter by status (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public Object getInstanceDeploys(Long id, Long max, Long offset, String phrase, String name, Long deploymentId, String instanceName, Long instanceId, Long version, Long versionId, Long createdById, String deployType, String dateCreated, OffsetDateTime lastUpdated, String deployDate, String status) throws ApiException {
        ApiResponse<Object> localVarResp = getInstanceDeploysWithHttpInfo(id, max, offset, phrase, name, deploymentId, instanceName, instanceId, version, versionId, createdById, deployType, dateCreated, lastUpdated, deployDate, status);
        return localVarResp.getData();
    }

    /**
     * Get all Deploys for an Instance
     * This endpoint retrieves all deploys for a specific instance.
     * @param id Morpheus ID of the Object being referenced (required)
     * @param max Maximum number of records to return, -1 can be used to fetch all records (optional, default to 25l)
     * @param offset Offset records, the number of records to skip, for paginating requests (optional, default to 0l)
     * @param phrase Search phrase for partial matches on name or description (optional)
     * @param name Filter by name, wildcard may be specified as %, eg. example-% (optional)
     * @param deploymentId Filter by deployment id (optional)
     * @param instanceName Filter by instance name (optional)
     * @param instanceId The Instance ID for Filtering (optional)
     * @param version Filter by version number (userVersion) (optional)
     * @param versionId Filter by deployment version id (optional)
     * @param createdById Filter by owner (user) id (optional)
     * @param deployType Filter by type (deployType), file, git, fetch (optional)
     * @param dateCreated Filter by dateCreated, the created timestamp is more recent or equal to the date specified (optional)
     * @param lastUpdated Date filter, restricts query to only load resources updated more recently than the date specified (ISO 8601) (optional)
     * @param deployDate Filter by deployDate, deployment completion timestamp is more recent or equal to the date specified (optional)
     * @param status Filter by status (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getInstanceDeploysWithHttpInfo(Long id, Long max, Long offset, String phrase, String name, Long deploymentId, String instanceName, Long instanceId, Long version, Long versionId, Long createdById, String deployType, String dateCreated, OffsetDateTime lastUpdated, String deployDate, String status) throws ApiException {
        okhttp3.Call localVarCall = getInstanceDeploysValidateBeforeCall(id, max, offset, phrase, name, deploymentId, instanceName, instanceId, version, versionId, createdById, deployType, dateCreated, lastUpdated, deployDate, status, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all Deploys for an Instance (asynchronously)
     * This endpoint retrieves all deploys for a specific instance.
     * @param id Morpheus ID of the Object being referenced (required)
     * @param max Maximum number of records to return, -1 can be used to fetch all records (optional, default to 25l)
     * @param offset Offset records, the number of records to skip, for paginating requests (optional, default to 0l)
     * @param phrase Search phrase for partial matches on name or description (optional)
     * @param name Filter by name, wildcard may be specified as %, eg. example-% (optional)
     * @param deploymentId Filter by deployment id (optional)
     * @param instanceName Filter by instance name (optional)
     * @param instanceId The Instance ID for Filtering (optional)
     * @param version Filter by version number (userVersion) (optional)
     * @param versionId Filter by deployment version id (optional)
     * @param createdById Filter by owner (user) id (optional)
     * @param deployType Filter by type (deployType), file, git, fetch (optional)
     * @param dateCreated Filter by dateCreated, the created timestamp is more recent or equal to the date specified (optional)
     * @param lastUpdated Date filter, restricts query to only load resources updated more recently than the date specified (ISO 8601) (optional)
     * @param deployDate Filter by deployDate, deployment completion timestamp is more recent or equal to the date specified (optional)
     * @param status Filter by status (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getInstanceDeploysAsync(Long id, Long max, Long offset, String phrase, String name, Long deploymentId, String instanceName, Long instanceId, Long version, Long versionId, Long createdById, String deployType, String dateCreated, OffsetDateTime lastUpdated, String deployDate, String status, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInstanceDeploysValidateBeforeCall(id, max, offset, phrase, name, deploymentId, instanceName, instanceId, version, versionId, createdById, deployType, dateCreated, lastUpdated, deployDate, status, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listDeploys
     * @param max Maximum number of records to return, -1 can be used to fetch all records (optional, default to 25l)
     * @param offset Offset records, the number of records to skip, for paginating requests (optional, default to 0l)
     * @param phrase Search phrase for partial matches on name or description (optional)
     * @param name Filter by name, wildcard may be specified as %, eg. example-% (optional)
     * @param deploymentId Filter by deployment id (optional)
     * @param instanceName Filter by instance name (optional)
     * @param instanceId The Instance ID for Filtering (optional)
     * @param version Filter by version number (userVersion) (optional)
     * @param versionId Filter by deployment version id (optional)
     * @param createdById Filter by owner (user) id (optional)
     * @param deployType Filter by type (deployType), file, git, fetch (optional)
     * @param dateCreated Filter by dateCreated, the created timestamp is more recent or equal to the date specified (optional)
     * @param lastUpdated Date filter, restricts query to only load resources updated more recently than the date specified (ISO 8601) (optional)
     * @param deployDate Filter by deployDate, deployment completion timestamp is more recent or equal to the date specified (optional)
     * @param status Filter by status (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listDeploysCall(Long max, Long offset, String phrase, String name, Long deploymentId, String instanceName, Long instanceId, Long version, Long versionId, Long createdById, String deployType, String dateCreated, OffsetDateTime lastUpdated, String deployDate, String status, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/deploys";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (phrase != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("phrase", phrase));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (deploymentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deploymentId", deploymentId));
        }

        if (instanceName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("instanceName", instanceName));
        }

        if (instanceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("instanceId", instanceId));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        if (versionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("versionId", versionId));
        }

        if (createdById != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdById", createdById));
        }

        if (deployType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deployType", deployType));
        }

        if (dateCreated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateCreated", dateCreated));
        }

        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lastUpdated", lastUpdated));
        }

        if (deployDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deployDate", deployDate));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listDeploysValidateBeforeCall(Long max, Long offset, String phrase, String name, Long deploymentId, String instanceName, Long instanceId, Long version, Long versionId, Long createdById, String deployType, String dateCreated, OffsetDateTime lastUpdated, String deployDate, String status, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listDeploysCall(max, offset, phrase, name, deploymentId, instanceName, instanceId, version, versionId, createdById, deployType, dateCreated, lastUpdated, deployDate, status, _callback);
        return localVarCall;

    }

    /**
     * Get all Deploys
     * This endpoint retrieves all deploys.
     * @param max Maximum number of records to return, -1 can be used to fetch all records (optional, default to 25l)
     * @param offset Offset records, the number of records to skip, for paginating requests (optional, default to 0l)
     * @param phrase Search phrase for partial matches on name or description (optional)
     * @param name Filter by name, wildcard may be specified as %, eg. example-% (optional)
     * @param deploymentId Filter by deployment id (optional)
     * @param instanceName Filter by instance name (optional)
     * @param instanceId The Instance ID for Filtering (optional)
     * @param version Filter by version number (userVersion) (optional)
     * @param versionId Filter by deployment version id (optional)
     * @param createdById Filter by owner (user) id (optional)
     * @param deployType Filter by type (deployType), file, git, fetch (optional)
     * @param dateCreated Filter by dateCreated, the created timestamp is more recent or equal to the date specified (optional)
     * @param lastUpdated Date filter, restricts query to only load resources updated more recently than the date specified (ISO 8601) (optional)
     * @param deployDate Filter by deployDate, deployment completion timestamp is more recent or equal to the date specified (optional)
     * @param status Filter by status (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public Object listDeploys(Long max, Long offset, String phrase, String name, Long deploymentId, String instanceName, Long instanceId, Long version, Long versionId, Long createdById, String deployType, String dateCreated, OffsetDateTime lastUpdated, String deployDate, String status) throws ApiException {
        ApiResponse<Object> localVarResp = listDeploysWithHttpInfo(max, offset, phrase, name, deploymentId, instanceName, instanceId, version, versionId, createdById, deployType, dateCreated, lastUpdated, deployDate, status);
        return localVarResp.getData();
    }

    /**
     * Get all Deploys
     * This endpoint retrieves all deploys.
     * @param max Maximum number of records to return, -1 can be used to fetch all records (optional, default to 25l)
     * @param offset Offset records, the number of records to skip, for paginating requests (optional, default to 0l)
     * @param phrase Search phrase for partial matches on name or description (optional)
     * @param name Filter by name, wildcard may be specified as %, eg. example-% (optional)
     * @param deploymentId Filter by deployment id (optional)
     * @param instanceName Filter by instance name (optional)
     * @param instanceId The Instance ID for Filtering (optional)
     * @param version Filter by version number (userVersion) (optional)
     * @param versionId Filter by deployment version id (optional)
     * @param createdById Filter by owner (user) id (optional)
     * @param deployType Filter by type (deployType), file, git, fetch (optional)
     * @param dateCreated Filter by dateCreated, the created timestamp is more recent or equal to the date specified (optional)
     * @param lastUpdated Date filter, restricts query to only load resources updated more recently than the date specified (ISO 8601) (optional)
     * @param deployDate Filter by deployDate, deployment completion timestamp is more recent or equal to the date specified (optional)
     * @param status Filter by status (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> listDeploysWithHttpInfo(Long max, Long offset, String phrase, String name, Long deploymentId, String instanceName, Long instanceId, Long version, Long versionId, Long createdById, String deployType, String dateCreated, OffsetDateTime lastUpdated, String deployDate, String status) throws ApiException {
        okhttp3.Call localVarCall = listDeploysValidateBeforeCall(max, offset, phrase, name, deploymentId, instanceName, instanceId, version, versionId, createdById, deployType, dateCreated, lastUpdated, deployDate, status, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all Deploys (asynchronously)
     * This endpoint retrieves all deploys.
     * @param max Maximum number of records to return, -1 can be used to fetch all records (optional, default to 25l)
     * @param offset Offset records, the number of records to skip, for paginating requests (optional, default to 0l)
     * @param phrase Search phrase for partial matches on name or description (optional)
     * @param name Filter by name, wildcard may be specified as %, eg. example-% (optional)
     * @param deploymentId Filter by deployment id (optional)
     * @param instanceName Filter by instance name (optional)
     * @param instanceId The Instance ID for Filtering (optional)
     * @param version Filter by version number (userVersion) (optional)
     * @param versionId Filter by deployment version id (optional)
     * @param createdById Filter by owner (user) id (optional)
     * @param deployType Filter by type (deployType), file, git, fetch (optional)
     * @param dateCreated Filter by dateCreated, the created timestamp is more recent or equal to the date specified (optional)
     * @param lastUpdated Date filter, restricts query to only load resources updated more recently than the date specified (ISO 8601) (optional)
     * @param deployDate Filter by deployDate, deployment completion timestamp is more recent or equal to the date specified (optional)
     * @param status Filter by status (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listDeploysAsync(Long max, Long offset, String phrase, String name, Long deploymentId, String instanceName, Long instanceId, Long version, Long versionId, Long createdById, String deployType, String dateCreated, OffsetDateTime lastUpdated, String deployDate, String status, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = listDeploysValidateBeforeCall(max, offset, phrase, name, deploymentId, instanceName, instanceId, version, versionId, createdById, deployType, dateCreated, lastUpdated, deployDate, status, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for runDeploy
     * @param id Morpheus ID of the Object being referenced (required)
     * @param inlineObject73  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call runDeployCall(Long id, InlineObject73 inlineObject73, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = inlineObject73;

        // create path and map variables
        String localVarPath = "/api/deploys/{id}/deploy"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call runDeployValidateBeforeCall(Long id, InlineObject73 inlineObject73, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling runDeploy(Async)");
        }
        

        okhttp3.Call localVarCall = runDeployCall(id, inlineObject73, _callback);
        return localVarCall;

    }

    /**
     * Run a Deploy
     * This endpoint will run an existing instance deploy. This is for running a new staged deploy or to rollback to previous version by re-running a deploy that is archived.
     * @param id Morpheus ID of the Object being referenced (required)
     * @param inlineObject73  (optional)
     * @return InlineResponse20040
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse20040 runDeploy(Long id, InlineObject73 inlineObject73) throws ApiException {
        ApiResponse<InlineResponse20040> localVarResp = runDeployWithHttpInfo(id, inlineObject73);
        return localVarResp.getData();
    }

    /**
     * Run a Deploy
     * This endpoint will run an existing instance deploy. This is for running a new staged deploy or to rollback to previous version by re-running a deploy that is archived.
     * @param id Morpheus ID of the Object being referenced (required)
     * @param inlineObject73  (optional)
     * @return ApiResponse&lt;InlineResponse20040&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse20040> runDeployWithHttpInfo(Long id, InlineObject73 inlineObject73) throws ApiException {
        okhttp3.Call localVarCall = runDeployValidateBeforeCall(id, inlineObject73, null);
        Type localVarReturnType = new TypeToken<InlineResponse20040>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Run a Deploy (asynchronously)
     * This endpoint will run an existing instance deploy. This is for running a new staged deploy or to rollback to previous version by re-running a deploy that is archived.
     * @param id Morpheus ID of the Object being referenced (required)
     * @param inlineObject73  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call runDeployAsync(Long id, InlineObject73 inlineObject73, final ApiCallback<InlineResponse20040> _callback) throws ApiException {

        okhttp3.Call localVarCall = runDeployValidateBeforeCall(id, inlineObject73, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse20040>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateDeploy
     * @param id Morpheus ID of the Object being referenced (required)
     * @param inlineObject72  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDeployCall(Long id, InlineObject72 inlineObject72, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = inlineObject72;

        // create path and map variables
        String localVarPath = "/api/deploys/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDeployValidateBeforeCall(Long id, InlineObject72 inlineObject72, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateDeploy(Async)");
        }
        

        okhttp3.Call localVarCall = updateDeployCall(id, inlineObject72, _callback);
        return localVarCall;

    }

    /**
     * Update a Deploy
     * This endpoint will update an existing deploy. This is typically only needed to change settings on a deploy that is staged, before it is run.
     * @param id Morpheus ID of the Object being referenced (required)
     * @param inlineObject72  (optional)
     * @return InlineResponse20040
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse20040 updateDeploy(Long id, InlineObject72 inlineObject72) throws ApiException {
        ApiResponse<InlineResponse20040> localVarResp = updateDeployWithHttpInfo(id, inlineObject72);
        return localVarResp.getData();
    }

    /**
     * Update a Deploy
     * This endpoint will update an existing deploy. This is typically only needed to change settings on a deploy that is staged, before it is run.
     * @param id Morpheus ID of the Object being referenced (required)
     * @param inlineObject72  (optional)
     * @return ApiResponse&lt;InlineResponse20040&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse20040> updateDeployWithHttpInfo(Long id, InlineObject72 inlineObject72) throws ApiException {
        okhttp3.Call localVarCall = updateDeployValidateBeforeCall(id, inlineObject72, null);
        Type localVarReturnType = new TypeToken<InlineResponse20040>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a Deploy (asynchronously)
     * This endpoint will update an existing deploy. This is typically only needed to change settings on a deploy that is staged, before it is run.
     * @param id Morpheus ID of the Object being referenced (required)
     * @param inlineObject72  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDeployAsync(Long id, InlineObject72 inlineObject72, final ApiCallback<InlineResponse20040> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDeployValidateBeforeCall(id, inlineObject72, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse20040>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
