/*
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DefaultError;
import org.openapitools.client.model.Model200Success;
import org.openapitools.client.model.ZoneNetworkOptions;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OptionsApi {
    private ApiClient localVarApiClient;

    public OptionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OptionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for getOptionSourceData
     * @param optionSource &#x60;optionSource&#x60; to be listed (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOptionSourceDataCall(String optionSource, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/options/{optionSource}"
            .replaceAll("\\{" + "optionSource" + "\\}", localVarApiClient.escapeString(optionSource.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOptionSourceDataValidateBeforeCall(String optionSource, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'optionSource' is set
        if (optionSource == null) {
            throw new ApiException("Missing the required parameter 'optionSource' when calling getOptionSourceData(Async)");
        }
        

        okhttp3.Call localVarCall = getOptionSourceDataCall(optionSource, _callback);
        return localVarCall;

    }

    /**
     * Get Option Source Data
     * Returns a list of name/value pairs for option-type models. Some option-types depend on input data for proper representation. This typically includes zoneId or siteId for the item being provisioned as request parameters or sometimes previous option type parameters. Each option returned has a &#x60;value&#x60;, which is often the &#x60;id&#x60;, but may be a &#x60;code&#x60; or other attribute. 
     * @param optionSource &#x60;optionSource&#x60; to be listed (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public Object getOptionSourceData(String optionSource) throws ApiException {
        ApiResponse<Object> localVarResp = getOptionSourceDataWithHttpInfo(optionSource);
        return localVarResp.getData();
    }

    /**
     * Get Option Source Data
     * Returns a list of name/value pairs for option-type models. Some option-types depend on input data for proper representation. This typically includes zoneId or siteId for the item being provisioned as request parameters or sometimes previous option type parameters. Each option returned has a &#x60;value&#x60;, which is often the &#x60;id&#x60;, but may be a &#x60;code&#x60; or other attribute. 
     * @param optionSource &#x60;optionSource&#x60; to be listed (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getOptionSourceDataWithHttpInfo(String optionSource) throws ApiException {
        okhttp3.Call localVarCall = getOptionSourceDataValidateBeforeCall(optionSource, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Option Source Data (asynchronously)
     * Returns a list of name/value pairs for option-type models. Some option-types depend on input data for proper representation. This typically includes zoneId or siteId for the item being provisioned as request parameters or sometimes previous option type parameters. Each option returned has a &#x60;value&#x60;, which is often the &#x60;id&#x60;, but may be a &#x60;code&#x60; or other attribute. 
     * @param optionSource &#x60;optionSource&#x60; to be listed (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOptionSourceDataAsync(String optionSource, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOptionSourceDataValidateBeforeCall(optionSource, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listCodeRepositories
     * @param integrationId Filter by an integration Id. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCodeRepositoriesCall(Long integrationId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/options/codeRepositories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (integrationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("integrationId", integrationId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCodeRepositoriesValidateBeforeCall(Long integrationId, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listCodeRepositoriesCall(integrationId, _callback);
        return localVarCall;

    }

    /**
     * Retrieves a list of Code/GIT Repositories
     * Retrieves a list of Code/GIT Repositories 
     * @param integrationId Filter by an integration Id. (optional)
     * @return Model200Success
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public Model200Success listCodeRepositories(Long integrationId) throws ApiException {
        ApiResponse<Model200Success> localVarResp = listCodeRepositoriesWithHttpInfo(integrationId);
        return localVarResp.getData();
    }

    /**
     * Retrieves a list of Code/GIT Repositories
     * Retrieves a list of Code/GIT Repositories 
     * @param integrationId Filter by an integration Id. (optional)
     * @return ApiResponse&lt;Model200Success&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Model200Success> listCodeRepositoriesWithHttpInfo(Long integrationId) throws ApiException {
        okhttp3.Call localVarCall = listCodeRepositoriesValidateBeforeCall(integrationId, null);
        Type localVarReturnType = new TypeToken<Model200Success>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a list of Code/GIT Repositories (asynchronously)
     * Retrieves a list of Code/GIT Repositories 
     * @param integrationId Filter by an integration Id. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCodeRepositoriesAsync(Long integrationId, final ApiCallback<Model200Success> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCodeRepositoriesValidateBeforeCall(integrationId, _callback);
        Type localVarReturnType = new TypeToken<Model200Success>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listOptionNetworkOptions
     * @param zoneId The Zone ID for Filtering (optional)
     * @param provisionTypeId Provision type filter, restricts query to only load service plans of specified provision type (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listOptionNetworkOptionsCall(Long zoneId, Long provisionTypeId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/options/zoneNetworkOptions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zoneId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("zoneId", zoneId));
        }

        if (provisionTypeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("provisionTypeId", provisionTypeId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listOptionNetworkOptionsValidateBeforeCall(Long zoneId, Long provisionTypeId, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listOptionNetworkOptionsCall(zoneId, provisionTypeId, _callback);
        return localVarCall;

    }

    /**
     * Retrieves network options by zone/cloud
     * This endpoint can be used to see which network options are available for a given cloud (zoneId) and provision type. 
     * @param zoneId The Zone ID for Filtering (optional)
     * @param provisionTypeId Provision type filter, restricts query to only load service plans of specified provision type (optional)
     * @return ZoneNetworkOptions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ZoneNetworkOptions listOptionNetworkOptions(Long zoneId, Long provisionTypeId) throws ApiException {
        ApiResponse<ZoneNetworkOptions> localVarResp = listOptionNetworkOptionsWithHttpInfo(zoneId, provisionTypeId);
        return localVarResp.getData();
    }

    /**
     * Retrieves network options by zone/cloud
     * This endpoint can be used to see which network options are available for a given cloud (zoneId) and provision type. 
     * @param zoneId The Zone ID for Filtering (optional)
     * @param provisionTypeId Provision type filter, restricts query to only load service plans of specified provision type (optional)
     * @return ApiResponse&lt;ZoneNetworkOptions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneNetworkOptions> listOptionNetworkOptionsWithHttpInfo(Long zoneId, Long provisionTypeId) throws ApiException {
        okhttp3.Call localVarCall = listOptionNetworkOptionsValidateBeforeCall(zoneId, provisionTypeId, null);
        Type localVarReturnType = new TypeToken<ZoneNetworkOptions>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves network options by zone/cloud (asynchronously)
     * This endpoint can be used to see which network options are available for a given cloud (zoneId) and provision type. 
     * @param zoneId The Zone ID for Filtering (optional)
     * @param provisionTypeId Provision type filter, restricts query to only load service plans of specified provision type (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listOptionNetworkOptionsAsync(Long zoneId, Long provisionTypeId, final ApiCallback<ZoneNetworkOptions> _callback) throws ApiException {

        okhttp3.Call localVarCall = listOptionNetworkOptionsValidateBeforeCall(zoneId, provisionTypeId, _callback);
        Type localVarReturnType = new TypeToken<ZoneNetworkOptions>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listOptionValues
     * @param optionTypeId Input or Option Type ID (required)
     * @param config Input parameters are required if the input is dependent on them.  Fields must be prefixed with &#x60;config.&#x60; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listOptionValuesCall(Long optionTypeId, Object config, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/options/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optionTypeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("optionTypeId", optionTypeId));
        }

        if (config != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("config", config));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listOptionValuesValidateBeforeCall(Long optionTypeId, Object config, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'optionTypeId' is set
        if (optionTypeId == null) {
            throw new ApiException("Missing the required parameter 'optionTypeId' when calling listOptionValues(Async)");
        }
        

        okhttp3.Call localVarCall = listOptionValuesCall(optionTypeId, config, _callback);
        return localVarCall;

    }

    /**
     * Retrieves input option values
     * Retrieves all input option values.  Can be used with parameters to supply dependent input values. 
     * @param optionTypeId Input or Option Type ID (required)
     * @param config Input parameters are required if the input is dependent on them.  Fields must be prefixed with &#x60;config.&#x60; (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public Object listOptionValues(Long optionTypeId, Object config) throws ApiException {
        ApiResponse<Object> localVarResp = listOptionValuesWithHttpInfo(optionTypeId, config);
        return localVarResp.getData();
    }

    /**
     * Retrieves input option values
     * Retrieves all input option values.  Can be used with parameters to supply dependent input values. 
     * @param optionTypeId Input or Option Type ID (required)
     * @param config Input parameters are required if the input is dependent on them.  Fields must be prefixed with &#x60;config.&#x60; (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> listOptionValuesWithHttpInfo(Long optionTypeId, Object config) throws ApiException {
        okhttp3.Call localVarCall = listOptionValuesValidateBeforeCall(optionTypeId, config, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves input option values (asynchronously)
     * Retrieves all input option values.  Can be used with parameters to supply dependent input values. 
     * @param optionTypeId Input or Option Type ID (required)
     * @param config Input parameters are required if the input is dependent on them.  Fields must be prefixed with &#x60;config.&#x60; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listOptionValuesAsync(Long optionTypeId, Object config, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = listOptionValuesValidateBeforeCall(optionTypeId, config, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
