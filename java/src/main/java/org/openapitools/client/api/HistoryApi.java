/*
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DefaultError;
import org.openapitools.client.model.InlineResponse20048;
import org.openapitools.client.model.InlineResponse20049;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class HistoryApi {
    private ApiClient localVarApiClient;

    public HistoryApi() {
        this(Configuration.getDefaultApiClient());
    }

    public HistoryApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for getHistory
     * @param id Morpheus ID of the Object being referenced (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getHistoryCall(Long id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/processes/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getHistoryValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getHistory(Async)");
        }
        

        okhttp3.Call localVarCall = getHistoryCall(id, _callback);
        return localVarCall;

    }

    /**
     * Retrieves a Specific Process
     * Retrieves a specific process. 
     * @param id Morpheus ID of the Object being referenced (required)
     * @return InlineResponse20048
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse20048 getHistory(Long id) throws ApiException {
        ApiResponse<InlineResponse20048> localVarResp = getHistoryWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Retrieves a Specific Process
     * Retrieves a specific process. 
     * @param id Morpheus ID of the Object being referenced (required)
     * @return ApiResponse&lt;InlineResponse20048&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse20048> getHistoryWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = getHistoryValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<InlineResponse20048>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a Specific Process (asynchronously)
     * Retrieves a specific process. 
     * @param id Morpheus ID of the Object being referenced (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getHistoryAsync(Long id, final ApiCallback<InlineResponse20048> _callback) throws ApiException {

        okhttp3.Call localVarCall = getHistoryValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse20048>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getHistoryEvent
     * @param id Morpheus ID of the Object being referenced (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getHistoryEventCall(Long id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/processes/events/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getHistoryEventValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getHistoryEvent(Async)");
        }
        

        okhttp3.Call localVarCall = getHistoryEventCall(id, _callback);
        return localVarCall;

    }

    /**
     * Retrieves a Specific Process Event
     * Retrieves a specific process event. 
     * @param id Morpheus ID of the Object being referenced (required)
     * @return InlineResponse20049
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse20049 getHistoryEvent(Long id) throws ApiException {
        ApiResponse<InlineResponse20049> localVarResp = getHistoryEventWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Retrieves a Specific Process Event
     * Retrieves a specific process event. 
     * @param id Morpheus ID of the Object being referenced (required)
     * @return ApiResponse&lt;InlineResponse20049&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse20049> getHistoryEventWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = getHistoryEventValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<InlineResponse20049>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a Specific Process Event (asynchronously)
     * Retrieves a specific process event. 
     * @param id Morpheus ID of the Object being referenced (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getHistoryEventAsync(Long id, final ApiCallback<InlineResponse20049> _callback) throws ApiException {

        okhttp3.Call localVarCall = getHistoryEventValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse20049>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listHistory
     * @param instanceId The Instance ID for Filtering (optional)
     * @param containerId The Container ID for Filtering (optional)
     * @param serverId The Server ID for Filtering (optional)
     * @param zoneId The Zone ID for Filtering (optional)
     * @param appId The App ID for Filtering (optional)
     * @param phrase Search phrase for partial matches on message, displayName, output, event.message, event.output or event.error (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listHistoryCall(Long instanceId, Long containerId, Long serverId, Long zoneId, Long appId, String phrase, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/processes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (instanceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("instanceId", instanceId));
        }

        if (containerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("containerId", containerId));
        }

        if (serverId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serverId", serverId));
        }

        if (zoneId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("zoneId", zoneId));
        }

        if (appId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("appId", appId));
        }

        if (phrase != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("phrase", phrase));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listHistoryValidateBeforeCall(Long instanceId, Long containerId, Long serverId, Long zoneId, Long appId, String phrase, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listHistoryCall(instanceId, containerId, serverId, zoneId, appId, phrase, _callback);
        return localVarCall;

    }

    /**
     * Retrieves Process History
     * Retrieves process history for objects 
     * @param instanceId The Instance ID for Filtering (optional)
     * @param containerId The Container ID for Filtering (optional)
     * @param serverId The Server ID for Filtering (optional)
     * @param zoneId The Zone ID for Filtering (optional)
     * @param appId The App ID for Filtering (optional)
     * @param phrase Search phrase for partial matches on message, displayName, output, event.message, event.output or event.error (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public Object listHistory(Long instanceId, Long containerId, Long serverId, Long zoneId, Long appId, String phrase) throws ApiException {
        ApiResponse<Object> localVarResp = listHistoryWithHttpInfo(instanceId, containerId, serverId, zoneId, appId, phrase);
        return localVarResp.getData();
    }

    /**
     * Retrieves Process History
     * Retrieves process history for objects 
     * @param instanceId The Instance ID for Filtering (optional)
     * @param containerId The Container ID for Filtering (optional)
     * @param serverId The Server ID for Filtering (optional)
     * @param zoneId The Zone ID for Filtering (optional)
     * @param appId The App ID for Filtering (optional)
     * @param phrase Search phrase for partial matches on message, displayName, output, event.message, event.output or event.error (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> listHistoryWithHttpInfo(Long instanceId, Long containerId, Long serverId, Long zoneId, Long appId, String phrase) throws ApiException {
        okhttp3.Call localVarCall = listHistoryValidateBeforeCall(instanceId, containerId, serverId, zoneId, appId, phrase, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves Process History (asynchronously)
     * Retrieves process history for objects 
     * @param instanceId The Instance ID for Filtering (optional)
     * @param containerId The Container ID for Filtering (optional)
     * @param serverId The Server ID for Filtering (optional)
     * @param zoneId The Zone ID for Filtering (optional)
     * @param appId The App ID for Filtering (optional)
     * @param phrase Search phrase for partial matches on message, displayName, output, event.message, event.output or event.error (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listHistoryAsync(Long instanceId, Long containerId, Long serverId, Long zoneId, Long appId, String phrase, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = listHistoryValidateBeforeCall(instanceId, containerId, serverId, zoneId, appId, phrase, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
