/*
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DefaultError;
import org.openapitools.client.model.InlineObject202;
import org.openapitools.client.model.InlineObject203;
import org.openapitools.client.model.InlineResponse200126;
import org.openapitools.client.model.InlineResponse200127;
import org.openapitools.client.model.Model200Success;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProvisioningLicensesApi {
    private ApiClient localVarApiClient;

    public ProvisioningLicensesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProvisioningLicensesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for addProvisioningLicense
     * @param inlineObject202  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addProvisioningLicenseCall(InlineObject202 inlineObject202, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = inlineObject202;

        // create path and map variables
        String localVarPath = "/api/provisioning-licenses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addProvisioningLicenseValidateBeforeCall(InlineObject202 inlineObject202, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = addProvisioningLicenseCall(inlineObject202, _callback);
        return localVarCall;

    }

    /**
     * Create a License
     * Use this command to create a new license.
     * @param inlineObject202  (optional)
     * @return Model200Success
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public Model200Success addProvisioningLicense(InlineObject202 inlineObject202) throws ApiException {
        ApiResponse<Model200Success> localVarResp = addProvisioningLicenseWithHttpInfo(inlineObject202);
        return localVarResp.getData();
    }

    /**
     * Create a License
     * Use this command to create a new license.
     * @param inlineObject202  (optional)
     * @return ApiResponse&lt;Model200Success&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Model200Success> addProvisioningLicenseWithHttpInfo(InlineObject202 inlineObject202) throws ApiException {
        okhttp3.Call localVarCall = addProvisioningLicenseValidateBeforeCall(inlineObject202, null);
        Type localVarReturnType = new TypeToken<Model200Success>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a License (asynchronously)
     * Use this command to create a new license.
     * @param inlineObject202  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addProvisioningLicenseAsync(InlineObject202 inlineObject202, final ApiCallback<Model200Success> _callback) throws ApiException {

        okhttp3.Call localVarCall = addProvisioningLicenseValidateBeforeCall(inlineObject202, _callback);
        Type localVarReturnType = new TypeToken<Model200Success>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProvisioningLicense
     * @param id Morpheus ID of the Object being referenced (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProvisioningLicenseCall(Long id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/provisioning-licenses/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProvisioningLicenseValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getProvisioningLicense(Async)");
        }
        

        okhttp3.Call localVarCall = getProvisioningLicenseCall(id, _callback);
        return localVarCall;

    }

    /**
     * Get a Specific License
     * This endpoint retrieves a specific license.
     * @param id Morpheus ID of the Object being referenced (required)
     * @return InlineResponse200126
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse200126 getProvisioningLicense(Long id) throws ApiException {
        ApiResponse<InlineResponse200126> localVarResp = getProvisioningLicenseWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get a Specific License
     * This endpoint retrieves a specific license.
     * @param id Morpheus ID of the Object being referenced (required)
     * @return ApiResponse&lt;InlineResponse200126&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse200126> getProvisioningLicenseWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = getProvisioningLicenseValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<InlineResponse200126>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a Specific License (asynchronously)
     * This endpoint retrieves a specific license.
     * @param id Morpheus ID of the Object being referenced (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProvisioningLicenseAsync(Long id, final ApiCallback<InlineResponse200126> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProvisioningLicenseValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse200126>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProvisioningLicenseReservations
     * @param id Morpheus ID of the Object being referenced (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProvisioningLicenseReservationsCall(Long id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/provisioning-licenses/{id}/reservations"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProvisioningLicenseReservationsValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getProvisioningLicenseReservations(Async)");
        }
        

        okhttp3.Call localVarCall = getProvisioningLicenseReservationsCall(id, _callback);
        return localVarCall;

    }

    /**
     * Get Reservations for Specific License
     * This endpoint retrieves all reservations for a specific license. Each time a license is applied to a new server, a reservation is created, reducing the available copies for the license.
     * @param id Morpheus ID of the Object being referenced (required)
     * @return InlineResponse200127
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse200127 getProvisioningLicenseReservations(Long id) throws ApiException {
        ApiResponse<InlineResponse200127> localVarResp = getProvisioningLicenseReservationsWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get Reservations for Specific License
     * This endpoint retrieves all reservations for a specific license. Each time a license is applied to a new server, a reservation is created, reducing the available copies for the license.
     * @param id Morpheus ID of the Object being referenced (required)
     * @return ApiResponse&lt;InlineResponse200127&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse200127> getProvisioningLicenseReservationsWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = getProvisioningLicenseReservationsValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<InlineResponse200127>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Reservations for Specific License (asynchronously)
     * This endpoint retrieves all reservations for a specific license. Each time a license is applied to a new server, a reservation is created, reducing the available copies for the license.
     * @param id Morpheus ID of the Object being referenced (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProvisioningLicenseReservationsAsync(Long id, final ApiCallback<InlineResponse200127> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProvisioningLicenseReservationsValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse200127>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listProvisioningLicenses
     * @param max Maximum number of records to return, -1 can be used to fetch all records (optional, default to 25l)
     * @param offset Offset records, the number of records to skip, for paginating requests (optional, default to 0l)
     * @param sort Sort order, the name of the property to sort by (optional, default to &quot;name&quot;)
     * @param direction Sort direction, use &#39;desc&#39; to reverse sort (optional, default to asc)
     * @param phrase Search phrase for partial matches on name or description (optional)
     * @param name Filter by name, wildcard may be specified as %, eg. example-% (optional)
     * @param licenseType If specified will return an exact match on licenseType code (optional)
     * @param licenseVersion If specified will return an exact match on licenseVersion (optional)
     * @param orgName If specified will return an exact match on orgName (optional)
     * @param fullName If specified will return an exact match on fullName (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listProvisioningLicensesCall(Long max, Long offset, String sort, String direction, String phrase, String name, String licenseType, String licenseVersion, String orgName, String fullName, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/provisioning-licenses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (phrase != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("phrase", phrase));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (licenseType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("licenseType", licenseType));
        }

        if (licenseVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("licenseVersion", licenseVersion));
        }

        if (orgName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orgName", orgName));
        }

        if (fullName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fullName", fullName));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listProvisioningLicensesValidateBeforeCall(Long max, Long offset, String sort, String direction, String phrase, String name, String licenseType, String licenseVersion, String orgName, String fullName, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listProvisioningLicensesCall(max, offset, sort, direction, phrase, name, licenseType, licenseVersion, orgName, fullName, _callback);
        return localVarCall;

    }

    /**
     * Get All Licenses
     * This endpoint retrieves all licenses.
     * @param max Maximum number of records to return, -1 can be used to fetch all records (optional, default to 25l)
     * @param offset Offset records, the number of records to skip, for paginating requests (optional, default to 0l)
     * @param sort Sort order, the name of the property to sort by (optional, default to &quot;name&quot;)
     * @param direction Sort direction, use &#39;desc&#39; to reverse sort (optional, default to asc)
     * @param phrase Search phrase for partial matches on name or description (optional)
     * @param name Filter by name, wildcard may be specified as %, eg. example-% (optional)
     * @param licenseType If specified will return an exact match on licenseType code (optional)
     * @param licenseVersion If specified will return an exact match on licenseVersion (optional)
     * @param orgName If specified will return an exact match on orgName (optional)
     * @param fullName If specified will return an exact match on fullName (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public Object listProvisioningLicenses(Long max, Long offset, String sort, String direction, String phrase, String name, String licenseType, String licenseVersion, String orgName, String fullName) throws ApiException {
        ApiResponse<Object> localVarResp = listProvisioningLicensesWithHttpInfo(max, offset, sort, direction, phrase, name, licenseType, licenseVersion, orgName, fullName);
        return localVarResp.getData();
    }

    /**
     * Get All Licenses
     * This endpoint retrieves all licenses.
     * @param max Maximum number of records to return, -1 can be used to fetch all records (optional, default to 25l)
     * @param offset Offset records, the number of records to skip, for paginating requests (optional, default to 0l)
     * @param sort Sort order, the name of the property to sort by (optional, default to &quot;name&quot;)
     * @param direction Sort direction, use &#39;desc&#39; to reverse sort (optional, default to asc)
     * @param phrase Search phrase for partial matches on name or description (optional)
     * @param name Filter by name, wildcard may be specified as %, eg. example-% (optional)
     * @param licenseType If specified will return an exact match on licenseType code (optional)
     * @param licenseVersion If specified will return an exact match on licenseVersion (optional)
     * @param orgName If specified will return an exact match on orgName (optional)
     * @param fullName If specified will return an exact match on fullName (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> listProvisioningLicensesWithHttpInfo(Long max, Long offset, String sort, String direction, String phrase, String name, String licenseType, String licenseVersion, String orgName, String fullName) throws ApiException {
        okhttp3.Call localVarCall = listProvisioningLicensesValidateBeforeCall(max, offset, sort, direction, phrase, name, licenseType, licenseVersion, orgName, fullName, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get All Licenses (asynchronously)
     * This endpoint retrieves all licenses.
     * @param max Maximum number of records to return, -1 can be used to fetch all records (optional, default to 25l)
     * @param offset Offset records, the number of records to skip, for paginating requests (optional, default to 0l)
     * @param sort Sort order, the name of the property to sort by (optional, default to &quot;name&quot;)
     * @param direction Sort direction, use &#39;desc&#39; to reverse sort (optional, default to asc)
     * @param phrase Search phrase for partial matches on name or description (optional)
     * @param name Filter by name, wildcard may be specified as %, eg. example-% (optional)
     * @param licenseType If specified will return an exact match on licenseType code (optional)
     * @param licenseVersion If specified will return an exact match on licenseVersion (optional)
     * @param orgName If specified will return an exact match on orgName (optional)
     * @param fullName If specified will return an exact match on fullName (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listProvisioningLicensesAsync(Long max, Long offset, String sort, String direction, String phrase, String name, String licenseType, String licenseVersion, String orgName, String fullName, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = listProvisioningLicensesValidateBeforeCall(max, offset, sort, direction, phrase, name, licenseType, licenseVersion, orgName, fullName, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeProvisioningLicense
     * @param id Morpheus ID of the Object being referenced (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeProvisioningLicenseCall(Long id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/provisioning-licenses/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeProvisioningLicenseValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling removeProvisioningLicense(Async)");
        }
        

        okhttp3.Call localVarCall = removeProvisioningLicenseCall(id, _callback);
        return localVarCall;

    }

    /**
     * Delete a License
     * Will delete a license.
     * @param id Morpheus ID of the Object being referenced (required)
     * @return Model200Success
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public Model200Success removeProvisioningLicense(Long id) throws ApiException {
        ApiResponse<Model200Success> localVarResp = removeProvisioningLicenseWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Delete a License
     * Will delete a license.
     * @param id Morpheus ID of the Object being referenced (required)
     * @return ApiResponse&lt;Model200Success&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Model200Success> removeProvisioningLicenseWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = removeProvisioningLicenseValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Model200Success>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a License (asynchronously)
     * Will delete a license.
     * @param id Morpheus ID of the Object being referenced (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeProvisioningLicenseAsync(Long id, final ApiCallback<Model200Success> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeProvisioningLicenseValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Model200Success>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateProvisioningLicense
     * @param id Morpheus ID of the Object being referenced (required)
     * @param inlineObject203  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateProvisioningLicenseCall(Long id, InlineObject203 inlineObject203, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = inlineObject203;

        // create path and map variables
        String localVarPath = "/api/provisioning-licenses/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateProvisioningLicenseValidateBeforeCall(Long id, InlineObject203 inlineObject203, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateProvisioningLicense(Async)");
        }
        

        okhttp3.Call localVarCall = updateProvisioningLicenseCall(id, inlineObject203, _callback);
        return localVarCall;

    }

    /**
     * Update a License
     * Use this command to update an existing license.
     * @param id Morpheus ID of the Object being referenced (required)
     * @param inlineObject203  (optional)
     * @return Model200Success
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public Model200Success updateProvisioningLicense(Long id, InlineObject203 inlineObject203) throws ApiException {
        ApiResponse<Model200Success> localVarResp = updateProvisioningLicenseWithHttpInfo(id, inlineObject203);
        return localVarResp.getData();
    }

    /**
     * Update a License
     * Use this command to update an existing license.
     * @param id Morpheus ID of the Object being referenced (required)
     * @param inlineObject203  (optional)
     * @return ApiResponse&lt;Model200Success&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Model200Success> updateProvisioningLicenseWithHttpInfo(Long id, InlineObject203 inlineObject203) throws ApiException {
        okhttp3.Call localVarCall = updateProvisioningLicenseValidateBeforeCall(id, inlineObject203, null);
        Type localVarReturnType = new TypeToken<Model200Success>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a License (asynchronously)
     * Use this command to update an existing license.
     * @param id Morpheus ID of the Object being referenced (required)
     * @param inlineObject203  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateProvisioningLicenseAsync(Long id, InlineObject203 inlineObject203, final ApiCallback<Model200Success> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateProvisioningLicenseValidateBeforeCall(id, inlineObject203, _callback);
        Type localVarReturnType = new TypeToken<Model200Success>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
