/*
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DefaultError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SecurityScansApi {
    private ApiClient localVarApiClient;

    public SecurityScansApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SecurityScansApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for getSecurityScans
     * @param id Morpheus ID of the Object being referenced (required)
     * @param results Include the &#x60;results&#x60; object in the response under the security scan. This is a potentially very large object containing the raw results of the scan. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSecurityScansCall(Long id, Boolean results, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/security-scans/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (results != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("results", results));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSecurityScansValidateBeforeCall(Long id, Boolean results, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getSecurityScans(Async)");
        }
        

        okhttp3.Call localVarCall = getSecurityScansCall(id, results, _callback);
        return localVarCall;

    }

    /**
     * Retrieves a Specific Security Scan
     * Retrieves a specific security scan. 
     * @param id Morpheus ID of the Object being referenced (required)
     * @param results Include the &#x60;results&#x60; object in the response under the security scan. This is a potentially very large object containing the raw results of the scan. (optional, default to false)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public Object getSecurityScans(Long id, Boolean results) throws ApiException {
        ApiResponse<Object> localVarResp = getSecurityScansWithHttpInfo(id, results);
        return localVarResp.getData();
    }

    /**
     * Retrieves a Specific Security Scan
     * Retrieves a specific security scan. 
     * @param id Morpheus ID of the Object being referenced (required)
     * @param results Include the &#x60;results&#x60; object in the response under the security scan. This is a potentially very large object containing the raw results of the scan. (optional, default to false)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getSecurityScansWithHttpInfo(Long id, Boolean results) throws ApiException {
        okhttp3.Call localVarCall = getSecurityScansValidateBeforeCall(id, results, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a Specific Security Scan (asynchronously)
     * Retrieves a specific security scan. 
     * @param id Morpheus ID of the Object being referenced (required)
     * @param results Include the &#x60;results&#x60; object in the response under the security scan. This is a potentially very large object containing the raw results of the scan. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSecurityScansAsync(Long id, Boolean results, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSecurityScansValidateBeforeCall(id, results, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listSecurityScans
     * @param max Maximum number of records to return, -1 can be used to fetch all records (optional, default to 25l)
     * @param offset Offset records, the number of records to skip, for paginating requests (optional, default to 0l)
     * @param sort Sort order, the name of the property to sort by (optional, default to &quot;scanDate&quot;)
     * @param direction Sort direction, use &#39;desc&#39; to reverse sort (optional, default to desc)
     * @param phrase Search phrase for partial matches on name or description of security package (optional)
     * @param securityPackageId Filter results by security package id(s). This parameter can be passed multiple times to match more than one id. (optional)
     * @param serverId The Server ID for Filtering (optional)
     * @param results Include the &#x60;results&#x60; object in the response under each security scan. This is a potentially very large object containing the raw results of the scan. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSecurityScansCall(Long max, Long offset, String sort, String direction, String phrase, Long securityPackageId, Long serverId, Boolean results, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/security-scans";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (phrase != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("phrase", phrase));
        }

        if (securityPackageId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("securityPackageId", securityPackageId));
        }

        if (serverId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serverId", serverId));
        }

        if (results != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("results", results));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listSecurityScansValidateBeforeCall(Long max, Long offset, String sort, String direction, String phrase, Long securityPackageId, Long serverId, Boolean results, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listSecurityScansCall(max, offset, sort, direction, phrase, securityPackageId, serverId, results, _callback);
        return localVarCall;

    }

    /**
     * Retrieves all Security Scans
     * Retrieves all security scans. 
     * @param max Maximum number of records to return, -1 can be used to fetch all records (optional, default to 25l)
     * @param offset Offset records, the number of records to skip, for paginating requests (optional, default to 0l)
     * @param sort Sort order, the name of the property to sort by (optional, default to &quot;scanDate&quot;)
     * @param direction Sort direction, use &#39;desc&#39; to reverse sort (optional, default to desc)
     * @param phrase Search phrase for partial matches on name or description of security package (optional)
     * @param securityPackageId Filter results by security package id(s). This parameter can be passed multiple times to match more than one id. (optional)
     * @param serverId The Server ID for Filtering (optional)
     * @param results Include the &#x60;results&#x60; object in the response under each security scan. This is a potentially very large object containing the raw results of the scan. (optional, default to false)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public Object listSecurityScans(Long max, Long offset, String sort, String direction, String phrase, Long securityPackageId, Long serverId, Boolean results) throws ApiException {
        ApiResponse<Object> localVarResp = listSecurityScansWithHttpInfo(max, offset, sort, direction, phrase, securityPackageId, serverId, results);
        return localVarResp.getData();
    }

    /**
     * Retrieves all Security Scans
     * Retrieves all security scans. 
     * @param max Maximum number of records to return, -1 can be used to fetch all records (optional, default to 25l)
     * @param offset Offset records, the number of records to skip, for paginating requests (optional, default to 0l)
     * @param sort Sort order, the name of the property to sort by (optional, default to &quot;scanDate&quot;)
     * @param direction Sort direction, use &#39;desc&#39; to reverse sort (optional, default to desc)
     * @param phrase Search phrase for partial matches on name or description of security package (optional)
     * @param securityPackageId Filter results by security package id(s). This parameter can be passed multiple times to match more than one id. (optional)
     * @param serverId The Server ID for Filtering (optional)
     * @param results Include the &#x60;results&#x60; object in the response under each security scan. This is a potentially very large object containing the raw results of the scan. (optional, default to false)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> listSecurityScansWithHttpInfo(Long max, Long offset, String sort, String direction, String phrase, Long securityPackageId, Long serverId, Boolean results) throws ApiException {
        okhttp3.Call localVarCall = listSecurityScansValidateBeforeCall(max, offset, sort, direction, phrase, securityPackageId, serverId, results, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves all Security Scans (asynchronously)
     * Retrieves all security scans. 
     * @param max Maximum number of records to return, -1 can be used to fetch all records (optional, default to 25l)
     * @param offset Offset records, the number of records to skip, for paginating requests (optional, default to 0l)
     * @param sort Sort order, the name of the property to sort by (optional, default to &quot;scanDate&quot;)
     * @param direction Sort direction, use &#39;desc&#39; to reverse sort (optional, default to desc)
     * @param phrase Search phrase for partial matches on name or description of security package (optional)
     * @param securityPackageId Filter results by security package id(s). This parameter can be passed multiple times to match more than one id. (optional)
     * @param serverId The Server ID for Filtering (optional)
     * @param results Include the &#x60;results&#x60; object in the response under each security scan. This is a potentially very large object containing the raw results of the scan. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSecurityScansAsync(Long max, Long offset, String sort, String direction, String phrase, Long securityPackageId, Long serverId, Boolean results, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = listSecurityScansValidateBeforeCall(max, offset, sort, direction, phrase, securityPackageId, serverId, results, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
