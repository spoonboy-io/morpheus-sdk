/*
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DefaultError;
import org.openapitools.client.model.Log;
import org.threeten.bp.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LogsApi {
    private ApiClient localVarApiClient;

    public LogsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LogsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for listLogs
     * @param max Maximum number of records to return, -1 can be used to fetch all records (optional, default to 25l)
     * @param offset Offset records, the number of records to skip, for paginating requests (optional, default to 0l)
     * @param sort Sort order, the name of the property to sort by (optional, default to &quot;name&quot;)
     * @param order Sort direction, use &#39;desc&#39; to reverse sort (optional, default to asc)
     * @param query Alias for phrase (optional)
     * @param message Filter by message (optional)
     * @param sourceType Filter by source type (optional)
     * @param typeCode Filter by code type (optional)
     * @param objectId Filter by objectId (optional)
     * @param token Filter by token (optional)
     * @param level Filter by log level. Multiple values can be passed pipe delimited. (optional)
     * @param startMs Date filter in milliseconds (unix epoch), restricts query to only load logs updated more recently than the time specified. (optional)
     * @param endMs Date filter in milliseconds (unix epoch), restricts query to only load logs updated before the time specified. (optional)
     * @param startDateTime Start Date timestamp (ISO 8601) (optional)
     * @param endDateTime End Date timestamp (ISO 8601) (optional)
     * @param containers The Container ID(s) for filtering. Accepts multiple values. (optional)
     * @param servers The Server ID(s) for filtering. Accepts multiple values. (optional)
     * @param clusterId The Cluster ID(s) for filtering. Accepts multiple values. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listLogsCall(Long max, Long offset, String sort, String order, String query, String message, String sourceType, String typeCode, Long objectId, String token, String level, Long startMs, Long endMs, OffsetDateTime startDateTime, OffsetDateTime endDateTime, Long containers, Long servers, Long clusterId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/logs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (message != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("message", message));
        }

        if (sourceType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sourceType", sourceType));
        }

        if (typeCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("typeCode", typeCode));
        }

        if (objectId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("objectId", objectId));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (level != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("level", level));
        }

        if (startMs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startMs", startMs));
        }

        if (endMs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endMs", endMs));
        }

        if (startDateTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDateTime", startDateTime));
        }

        if (endDateTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDateTime", endDateTime));
        }

        if (containers != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("containers", containers));
        }

        if (servers != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("servers", servers));
        }

        if (clusterId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clusterId", clusterId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listLogsValidateBeforeCall(Long max, Long offset, String sort, String order, String query, String message, String sourceType, String typeCode, Long objectId, String token, String level, Long startMs, Long endMs, OffsetDateTime startDateTime, OffsetDateTime endDateTime, Long containers, Long servers, Long clusterId, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listLogsCall(max, offset, sort, order, query, message, sourceType, typeCode, objectId, token, level, startMs, endMs, startDateTime, endDateTime, containers, servers, clusterId, _callback);
        return localVarCall;

    }

    /**
     * Retrieves Logs
     * Retrieves logs based on filters provided. 
     * @param max Maximum number of records to return, -1 can be used to fetch all records (optional, default to 25l)
     * @param offset Offset records, the number of records to skip, for paginating requests (optional, default to 0l)
     * @param sort Sort order, the name of the property to sort by (optional, default to &quot;name&quot;)
     * @param order Sort direction, use &#39;desc&#39; to reverse sort (optional, default to asc)
     * @param query Alias for phrase (optional)
     * @param message Filter by message (optional)
     * @param sourceType Filter by source type (optional)
     * @param typeCode Filter by code type (optional)
     * @param objectId Filter by objectId (optional)
     * @param token Filter by token (optional)
     * @param level Filter by log level. Multiple values can be passed pipe delimited. (optional)
     * @param startMs Date filter in milliseconds (unix epoch), restricts query to only load logs updated more recently than the time specified. (optional)
     * @param endMs Date filter in milliseconds (unix epoch), restricts query to only load logs updated before the time specified. (optional)
     * @param startDateTime Start Date timestamp (ISO 8601) (optional)
     * @param endDateTime End Date timestamp (ISO 8601) (optional)
     * @param containers The Container ID(s) for filtering. Accepts multiple values. (optional)
     * @param servers The Server ID(s) for filtering. Accepts multiple values. (optional)
     * @param clusterId The Cluster ID(s) for filtering. Accepts multiple values. (optional)
     * @return Log
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public Log listLogs(Long max, Long offset, String sort, String order, String query, String message, String sourceType, String typeCode, Long objectId, String token, String level, Long startMs, Long endMs, OffsetDateTime startDateTime, OffsetDateTime endDateTime, Long containers, Long servers, Long clusterId) throws ApiException {
        ApiResponse<Log> localVarResp = listLogsWithHttpInfo(max, offset, sort, order, query, message, sourceType, typeCode, objectId, token, level, startMs, endMs, startDateTime, endDateTime, containers, servers, clusterId);
        return localVarResp.getData();
    }

    /**
     * Retrieves Logs
     * Retrieves logs based on filters provided. 
     * @param max Maximum number of records to return, -1 can be used to fetch all records (optional, default to 25l)
     * @param offset Offset records, the number of records to skip, for paginating requests (optional, default to 0l)
     * @param sort Sort order, the name of the property to sort by (optional, default to &quot;name&quot;)
     * @param order Sort direction, use &#39;desc&#39; to reverse sort (optional, default to asc)
     * @param query Alias for phrase (optional)
     * @param message Filter by message (optional)
     * @param sourceType Filter by source type (optional)
     * @param typeCode Filter by code type (optional)
     * @param objectId Filter by objectId (optional)
     * @param token Filter by token (optional)
     * @param level Filter by log level. Multiple values can be passed pipe delimited. (optional)
     * @param startMs Date filter in milliseconds (unix epoch), restricts query to only load logs updated more recently than the time specified. (optional)
     * @param endMs Date filter in milliseconds (unix epoch), restricts query to only load logs updated before the time specified. (optional)
     * @param startDateTime Start Date timestamp (ISO 8601) (optional)
     * @param endDateTime End Date timestamp (ISO 8601) (optional)
     * @param containers The Container ID(s) for filtering. Accepts multiple values. (optional)
     * @param servers The Server ID(s) for filtering. Accepts multiple values. (optional)
     * @param clusterId The Cluster ID(s) for filtering. Accepts multiple values. (optional)
     * @return ApiResponse&lt;Log&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Log> listLogsWithHttpInfo(Long max, Long offset, String sort, String order, String query, String message, String sourceType, String typeCode, Long objectId, String token, String level, Long startMs, Long endMs, OffsetDateTime startDateTime, OffsetDateTime endDateTime, Long containers, Long servers, Long clusterId) throws ApiException {
        okhttp3.Call localVarCall = listLogsValidateBeforeCall(max, offset, sort, order, query, message, sourceType, typeCode, objectId, token, level, startMs, endMs, startDateTime, endDateTime, containers, servers, clusterId, null);
        Type localVarReturnType = new TypeToken<Log>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves Logs (asynchronously)
     * Retrieves logs based on filters provided. 
     * @param max Maximum number of records to return, -1 can be used to fetch all records (optional, default to 25l)
     * @param offset Offset records, the number of records to skip, for paginating requests (optional, default to 0l)
     * @param sort Sort order, the name of the property to sort by (optional, default to &quot;name&quot;)
     * @param order Sort direction, use &#39;desc&#39; to reverse sort (optional, default to asc)
     * @param query Alias for phrase (optional)
     * @param message Filter by message (optional)
     * @param sourceType Filter by source type (optional)
     * @param typeCode Filter by code type (optional)
     * @param objectId Filter by objectId (optional)
     * @param token Filter by token (optional)
     * @param level Filter by log level. Multiple values can be passed pipe delimited. (optional)
     * @param startMs Date filter in milliseconds (unix epoch), restricts query to only load logs updated more recently than the time specified. (optional)
     * @param endMs Date filter in milliseconds (unix epoch), restricts query to only load logs updated before the time specified. (optional)
     * @param startDateTime Start Date timestamp (ISO 8601) (optional)
     * @param endDateTime End Date timestamp (ISO 8601) (optional)
     * @param containers The Container ID(s) for filtering. Accepts multiple values. (optional)
     * @param servers The Server ID(s) for filtering. Accepts multiple values. (optional)
     * @param clusterId The Cluster ID(s) for filtering. Accepts multiple values. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listLogsAsync(Long max, Long offset, String sort, String order, String query, String message, String sourceType, String typeCode, Long objectId, String token, String level, Long startMs, Long endMs, OffsetDateTime startDateTime, OffsetDateTime endDateTime, Long containers, Long servers, Long clusterId, final ApiCallback<Log> _callback) throws ApiException {

        okhttp3.Call localVarCall = listLogsValidateBeforeCall(max, offset, sort, order, query, message, sourceType, typeCode, objectId, token, level, startMs, endMs, startDateTime, endDateTime, containers, servers, clusterId, _callback);
        Type localVarReturnType = new TypeToken<Log>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
