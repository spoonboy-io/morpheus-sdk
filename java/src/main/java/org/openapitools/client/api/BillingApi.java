/*
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.1.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DefaultError;
import org.openapitools.client.model.GetBillingInstancesIdentifier200Response;
import org.openapitools.client.model.GetBillingServersIdentifier200Response;
import org.openapitools.client.model.GetBillingZoneIdentifier200Response;
import org.openapitools.client.model.ListBillingAccount200Response;
import org.openapitools.client.model.ListBillingInstances200Response;
import org.openapitools.client.model.ListBillingServers200Response;
import org.openapitools.client.model.ListBillingZone200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BillingApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BillingApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BillingApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getBillingAccount
     * @param id Morpheus ID of the Object being referenced (required)
     * @param startDate Filter by startDate greater than or equal to a specified date (optional)
     * @param endDate Filter by endDate less than or equal to a specified date (optional)
     * @param includeUsages Optional ability to suppress the usage records (optional, default to true)
     * @param maxUsages Optional ability to limit the usages returned (optional)
     * @param offsetUsages Optional ability to offset the usages returned, for use with maxUsages to paginate (optional)
     * @param includeComputeServers Optional ability to exclude compute servers (optional, default to true)
     * @param includeInstances Optional ability to exclude instances (optional, default to true)
     * @param includeDiscoveredServers Optional ability to exclude discovered servers (optional, default to true)
     * @param includeLoadBalancers Optional ability to exclude load balancers (optional, default to true)
     * @param includeVirtualImages Optional ability to exclude virtual images (optional, default to true)
     * @param includeSnapshots Optional ability to exclude snapshots (optional, default to true)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Billing </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBillingAccountCall(Long id, String startDate, String endDate, Boolean includeUsages, Long maxUsages, Long offsetUsages, Boolean includeComputeServers, Boolean includeInstances, Boolean includeDiscoveredServers, Boolean includeLoadBalancers, Boolean includeVirtualImages, Boolean includeSnapshots, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/billing/account/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDate", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDate", endDate));
        }

        if (includeUsages != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeUsages", includeUsages));
        }

        if (maxUsages != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxUsages", maxUsages));
        }

        if (offsetUsages != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offsetUsages", offsetUsages));
        }

        if (includeComputeServers != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeComputeServers", includeComputeServers));
        }

        if (includeInstances != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeInstances", includeInstances));
        }

        if (includeDiscoveredServers != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeDiscoveredServers", includeDiscoveredServers));
        }

        if (includeLoadBalancers != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeLoadBalancers", includeLoadBalancers));
        }

        if (includeVirtualImages != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeVirtualImages", includeVirtualImages));
        }

        if (includeSnapshots != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeSnapshots", includeSnapshots));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBillingAccountValidateBeforeCall(Long id, String startDate, String endDate, Boolean includeUsages, Long maxUsages, Long offsetUsages, Boolean includeComputeServers, Boolean includeInstances, Boolean includeDiscoveredServers, Boolean includeLoadBalancers, Boolean includeVirtualImages, Boolean includeSnapshots, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getBillingAccount(Async)");
        }

        return getBillingAccountCall(id, startDate, endDate, includeUsages, maxUsages, offsetUsages, includeComputeServers, includeInstances, includeDiscoveredServers, includeLoadBalancers, includeVirtualImages, includeSnapshots, _callback);

    }

    /**
     * This endpoint will retrieve a specific account by id if the user has permission to access it
     * Will retrieve billing information for a specific tenant, if it is the current account or a sub account of the requesting user&#39;s account. 
     * @param id Morpheus ID of the Object being referenced (required)
     * @param startDate Filter by startDate greater than or equal to a specified date (optional)
     * @param endDate Filter by endDate less than or equal to a specified date (optional)
     * @param includeUsages Optional ability to suppress the usage records (optional, default to true)
     * @param maxUsages Optional ability to limit the usages returned (optional)
     * @param offsetUsages Optional ability to offset the usages returned, for use with maxUsages to paginate (optional)
     * @param includeComputeServers Optional ability to exclude compute servers (optional, default to true)
     * @param includeInstances Optional ability to exclude instances (optional, default to true)
     * @param includeDiscoveredServers Optional ability to exclude discovered servers (optional, default to true)
     * @param includeLoadBalancers Optional ability to exclude load balancers (optional, default to true)
     * @param includeVirtualImages Optional ability to exclude virtual images (optional, default to true)
     * @param includeSnapshots Optional ability to exclude snapshots (optional, default to true)
     * @return ListBillingAccount200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Billing </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ListBillingAccount200Response getBillingAccount(Long id, String startDate, String endDate, Boolean includeUsages, Long maxUsages, Long offsetUsages, Boolean includeComputeServers, Boolean includeInstances, Boolean includeDiscoveredServers, Boolean includeLoadBalancers, Boolean includeVirtualImages, Boolean includeSnapshots) throws ApiException {
        ApiResponse<ListBillingAccount200Response> localVarResp = getBillingAccountWithHttpInfo(id, startDate, endDate, includeUsages, maxUsages, offsetUsages, includeComputeServers, includeInstances, includeDiscoveredServers, includeLoadBalancers, includeVirtualImages, includeSnapshots);
        return localVarResp.getData();
    }

    /**
     * This endpoint will retrieve a specific account by id if the user has permission to access it
     * Will retrieve billing information for a specific tenant, if it is the current account or a sub account of the requesting user&#39;s account. 
     * @param id Morpheus ID of the Object being referenced (required)
     * @param startDate Filter by startDate greater than or equal to a specified date (optional)
     * @param endDate Filter by endDate less than or equal to a specified date (optional)
     * @param includeUsages Optional ability to suppress the usage records (optional, default to true)
     * @param maxUsages Optional ability to limit the usages returned (optional)
     * @param offsetUsages Optional ability to offset the usages returned, for use with maxUsages to paginate (optional)
     * @param includeComputeServers Optional ability to exclude compute servers (optional, default to true)
     * @param includeInstances Optional ability to exclude instances (optional, default to true)
     * @param includeDiscoveredServers Optional ability to exclude discovered servers (optional, default to true)
     * @param includeLoadBalancers Optional ability to exclude load balancers (optional, default to true)
     * @param includeVirtualImages Optional ability to exclude virtual images (optional, default to true)
     * @param includeSnapshots Optional ability to exclude snapshots (optional, default to true)
     * @return ApiResponse&lt;ListBillingAccount200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Billing </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListBillingAccount200Response> getBillingAccountWithHttpInfo(Long id, String startDate, String endDate, Boolean includeUsages, Long maxUsages, Long offsetUsages, Boolean includeComputeServers, Boolean includeInstances, Boolean includeDiscoveredServers, Boolean includeLoadBalancers, Boolean includeVirtualImages, Boolean includeSnapshots) throws ApiException {
        okhttp3.Call localVarCall = getBillingAccountValidateBeforeCall(id, startDate, endDate, includeUsages, maxUsages, offsetUsages, includeComputeServers, includeInstances, includeDiscoveredServers, includeLoadBalancers, includeVirtualImages, includeSnapshots, null);
        Type localVarReturnType = new TypeToken<ListBillingAccount200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * This endpoint will retrieve a specific account by id if the user has permission to access it (asynchronously)
     * Will retrieve billing information for a specific tenant, if it is the current account or a sub account of the requesting user&#39;s account. 
     * @param id Morpheus ID of the Object being referenced (required)
     * @param startDate Filter by startDate greater than or equal to a specified date (optional)
     * @param endDate Filter by endDate less than or equal to a specified date (optional)
     * @param includeUsages Optional ability to suppress the usage records (optional, default to true)
     * @param maxUsages Optional ability to limit the usages returned (optional)
     * @param offsetUsages Optional ability to offset the usages returned, for use with maxUsages to paginate (optional)
     * @param includeComputeServers Optional ability to exclude compute servers (optional, default to true)
     * @param includeInstances Optional ability to exclude instances (optional, default to true)
     * @param includeDiscoveredServers Optional ability to exclude discovered servers (optional, default to true)
     * @param includeLoadBalancers Optional ability to exclude load balancers (optional, default to true)
     * @param includeVirtualImages Optional ability to exclude virtual images (optional, default to true)
     * @param includeSnapshots Optional ability to exclude snapshots (optional, default to true)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Billing </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBillingAccountAsync(Long id, String startDate, String endDate, Boolean includeUsages, Long maxUsages, Long offsetUsages, Boolean includeComputeServers, Boolean includeInstances, Boolean includeDiscoveredServers, Boolean includeLoadBalancers, Boolean includeVirtualImages, Boolean includeSnapshots, final ApiCallback<ListBillingAccount200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBillingAccountValidateBeforeCall(id, startDate, endDate, includeUsages, maxUsages, offsetUsages, includeComputeServers, includeInstances, includeDiscoveredServers, includeLoadBalancers, includeVirtualImages, includeSnapshots, _callback);
        Type localVarReturnType = new TypeToken<ListBillingAccount200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBillingInstancesIdentifier
     * @param identifier Morpheus UUID or ID of the Object being created or referenced (required)
     * @param startDate Filter by startDate greater than or equal to a specified date (optional)
     * @param endDate Filter by endDate less than or equal to a specified date (optional)
     * @param includeUsages Optional ability to suppress the usage records (optional, default to true)
     * @param maxUsages Optional ability to limit the usages returned (optional)
     * @param offsetUsages Optional ability to offset the usages returned, for use with maxUsages to paginate (optional)
     * @param includeTenants Optional ability to include all subtenant billing information when calling from a master tenant user (optional, default to false)
     * @param accountId Filter by Tenant ID. This is only available to master tenant users with permission to manage tenants and users. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Billing </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBillingInstancesIdentifierCall(String identifier, String startDate, String endDate, Boolean includeUsages, Long maxUsages, Long offsetUsages, Boolean includeTenants, Long accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/billing/instances/{identifier}"
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDate", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDate", endDate));
        }

        if (includeUsages != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeUsages", includeUsages));
        }

        if (maxUsages != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxUsages", maxUsages));
        }

        if (offsetUsages != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offsetUsages", offsetUsages));
        }

        if (includeTenants != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeTenants", includeTenants));
        }

        if (accountId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accountId", accountId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBillingInstancesIdentifierValidateBeforeCall(String identifier, String startDate, String endDate, Boolean includeUsages, Long maxUsages, Long offsetUsages, Boolean includeTenants, Long accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling getBillingInstancesIdentifier(Async)");
        }

        return getBillingInstancesIdentifierCall(identifier, startDate, endDate, includeUsages, maxUsages, offsetUsages, includeTenants, accountId, _callback);

    }

    /**
     * Retrieves billing information for an instance in the requestor&#39;s account. Use instanceUUID whenever possible.
     * Provides API interfaces for viewing billing usage information by tenant, zone, instance or server. By default, usage returned is from the beginning of the current month until now. The date range is parameterized but the end date cannot exceed the current date. 
     * @param identifier Morpheus UUID or ID of the Object being created or referenced (required)
     * @param startDate Filter by startDate greater than or equal to a specified date (optional)
     * @param endDate Filter by endDate less than or equal to a specified date (optional)
     * @param includeUsages Optional ability to suppress the usage records (optional, default to true)
     * @param maxUsages Optional ability to limit the usages returned (optional)
     * @param offsetUsages Optional ability to offset the usages returned, for use with maxUsages to paginate (optional)
     * @param includeTenants Optional ability to include all subtenant billing information when calling from a master tenant user (optional, default to false)
     * @param accountId Filter by Tenant ID. This is only available to master tenant users with permission to manage tenants and users. (optional)
     * @return GetBillingInstancesIdentifier200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Billing </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public GetBillingInstancesIdentifier200Response getBillingInstancesIdentifier(String identifier, String startDate, String endDate, Boolean includeUsages, Long maxUsages, Long offsetUsages, Boolean includeTenants, Long accountId) throws ApiException {
        ApiResponse<GetBillingInstancesIdentifier200Response> localVarResp = getBillingInstancesIdentifierWithHttpInfo(identifier, startDate, endDate, includeUsages, maxUsages, offsetUsages, includeTenants, accountId);
        return localVarResp.getData();
    }

    /**
     * Retrieves billing information for an instance in the requestor&#39;s account. Use instanceUUID whenever possible.
     * Provides API interfaces for viewing billing usage information by tenant, zone, instance or server. By default, usage returned is from the beginning of the current month until now. The date range is parameterized but the end date cannot exceed the current date. 
     * @param identifier Morpheus UUID or ID of the Object being created or referenced (required)
     * @param startDate Filter by startDate greater than or equal to a specified date (optional)
     * @param endDate Filter by endDate less than or equal to a specified date (optional)
     * @param includeUsages Optional ability to suppress the usage records (optional, default to true)
     * @param maxUsages Optional ability to limit the usages returned (optional)
     * @param offsetUsages Optional ability to offset the usages returned, for use with maxUsages to paginate (optional)
     * @param includeTenants Optional ability to include all subtenant billing information when calling from a master tenant user (optional, default to false)
     * @param accountId Filter by Tenant ID. This is only available to master tenant users with permission to manage tenants and users. (optional)
     * @return ApiResponse&lt;GetBillingInstancesIdentifier200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Billing </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetBillingInstancesIdentifier200Response> getBillingInstancesIdentifierWithHttpInfo(String identifier, String startDate, String endDate, Boolean includeUsages, Long maxUsages, Long offsetUsages, Boolean includeTenants, Long accountId) throws ApiException {
        okhttp3.Call localVarCall = getBillingInstancesIdentifierValidateBeforeCall(identifier, startDate, endDate, includeUsages, maxUsages, offsetUsages, includeTenants, accountId, null);
        Type localVarReturnType = new TypeToken<GetBillingInstancesIdentifier200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves billing information for an instance in the requestor&#39;s account. Use instanceUUID whenever possible. (asynchronously)
     * Provides API interfaces for viewing billing usage information by tenant, zone, instance or server. By default, usage returned is from the beginning of the current month until now. The date range is parameterized but the end date cannot exceed the current date. 
     * @param identifier Morpheus UUID or ID of the Object being created or referenced (required)
     * @param startDate Filter by startDate greater than or equal to a specified date (optional)
     * @param endDate Filter by endDate less than or equal to a specified date (optional)
     * @param includeUsages Optional ability to suppress the usage records (optional, default to true)
     * @param maxUsages Optional ability to limit the usages returned (optional)
     * @param offsetUsages Optional ability to offset the usages returned, for use with maxUsages to paginate (optional)
     * @param includeTenants Optional ability to include all subtenant billing information when calling from a master tenant user (optional, default to false)
     * @param accountId Filter by Tenant ID. This is only available to master tenant users with permission to manage tenants and users. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Billing </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBillingInstancesIdentifierAsync(String identifier, String startDate, String endDate, Boolean includeUsages, Long maxUsages, Long offsetUsages, Boolean includeTenants, Long accountId, final ApiCallback<GetBillingInstancesIdentifier200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBillingInstancesIdentifierValidateBeforeCall(identifier, startDate, endDate, includeUsages, maxUsages, offsetUsages, includeTenants, accountId, _callback);
        Type localVarReturnType = new TypeToken<GetBillingInstancesIdentifier200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBillingServersIdentifier
     * @param identifier Morpheus UUID or ID of the Object being created or referenced (required)
     * @param startDate Filter by startDate greater than or equal to a specified date (optional)
     * @param endDate Filter by endDate less than or equal to a specified date (optional)
     * @param includeUsages Optional ability to suppress the usage records (optional, default to true)
     * @param maxUsages Optional ability to limit the usages returned (optional)
     * @param offsetUsages Optional ability to offset the usages returned, for use with maxUsages to paginate (optional)
     * @param includeTenants Optional ability to include all subtenant billing information when calling from a master tenant user (optional, default to false)
     * @param accountId Filter by Tenant ID. This is only available to master tenant users with permission to manage tenants and users. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Billing </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBillingServersIdentifierCall(String identifier, String startDate, String endDate, Boolean includeUsages, Long maxUsages, Long offsetUsages, Boolean includeTenants, Long accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/billing/servers/{identifier}"
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDate", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDate", endDate));
        }

        if (includeUsages != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeUsages", includeUsages));
        }

        if (maxUsages != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxUsages", maxUsages));
        }

        if (offsetUsages != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offsetUsages", offsetUsages));
        }

        if (includeTenants != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeTenants", includeTenants));
        }

        if (accountId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accountId", accountId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBillingServersIdentifierValidateBeforeCall(String identifier, String startDate, String endDate, Boolean includeUsages, Long maxUsages, Long offsetUsages, Boolean includeTenants, Long accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling getBillingServersIdentifier(Async)");
        }

        return getBillingServersIdentifierCall(identifier, startDate, endDate, includeUsages, maxUsages, offsetUsages, includeTenants, accountId, _callback);

    }

    /**
     * Retrieves billing information for a specific server (container host) in the requestor&#39;s account. Use refUUID whenever possible.
     * Provides API interfaces for viewing billing usage information by tenant, zone, instance or server. By default, usage returned is from the beginning of the current month until now. The date range is parameterized but the end date cannot exceed the current date. 
     * @param identifier Morpheus UUID or ID of the Object being created or referenced (required)
     * @param startDate Filter by startDate greater than or equal to a specified date (optional)
     * @param endDate Filter by endDate less than or equal to a specified date (optional)
     * @param includeUsages Optional ability to suppress the usage records (optional, default to true)
     * @param maxUsages Optional ability to limit the usages returned (optional)
     * @param offsetUsages Optional ability to offset the usages returned, for use with maxUsages to paginate (optional)
     * @param includeTenants Optional ability to include all subtenant billing information when calling from a master tenant user (optional, default to false)
     * @param accountId Filter by Tenant ID. This is only available to master tenant users with permission to manage tenants and users. (optional)
     * @return GetBillingServersIdentifier200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Billing </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public GetBillingServersIdentifier200Response getBillingServersIdentifier(String identifier, String startDate, String endDate, Boolean includeUsages, Long maxUsages, Long offsetUsages, Boolean includeTenants, Long accountId) throws ApiException {
        ApiResponse<GetBillingServersIdentifier200Response> localVarResp = getBillingServersIdentifierWithHttpInfo(identifier, startDate, endDate, includeUsages, maxUsages, offsetUsages, includeTenants, accountId);
        return localVarResp.getData();
    }

    /**
     * Retrieves billing information for a specific server (container host) in the requestor&#39;s account. Use refUUID whenever possible.
     * Provides API interfaces for viewing billing usage information by tenant, zone, instance or server. By default, usage returned is from the beginning of the current month until now. The date range is parameterized but the end date cannot exceed the current date. 
     * @param identifier Morpheus UUID or ID of the Object being created or referenced (required)
     * @param startDate Filter by startDate greater than or equal to a specified date (optional)
     * @param endDate Filter by endDate less than or equal to a specified date (optional)
     * @param includeUsages Optional ability to suppress the usage records (optional, default to true)
     * @param maxUsages Optional ability to limit the usages returned (optional)
     * @param offsetUsages Optional ability to offset the usages returned, for use with maxUsages to paginate (optional)
     * @param includeTenants Optional ability to include all subtenant billing information when calling from a master tenant user (optional, default to false)
     * @param accountId Filter by Tenant ID. This is only available to master tenant users with permission to manage tenants and users. (optional)
     * @return ApiResponse&lt;GetBillingServersIdentifier200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Billing </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetBillingServersIdentifier200Response> getBillingServersIdentifierWithHttpInfo(String identifier, String startDate, String endDate, Boolean includeUsages, Long maxUsages, Long offsetUsages, Boolean includeTenants, Long accountId) throws ApiException {
        okhttp3.Call localVarCall = getBillingServersIdentifierValidateBeforeCall(identifier, startDate, endDate, includeUsages, maxUsages, offsetUsages, includeTenants, accountId, null);
        Type localVarReturnType = new TypeToken<GetBillingServersIdentifier200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves billing information for a specific server (container host) in the requestor&#39;s account. Use refUUID whenever possible. (asynchronously)
     * Provides API interfaces for viewing billing usage information by tenant, zone, instance or server. By default, usage returned is from the beginning of the current month until now. The date range is parameterized but the end date cannot exceed the current date. 
     * @param identifier Morpheus UUID or ID of the Object being created or referenced (required)
     * @param startDate Filter by startDate greater than or equal to a specified date (optional)
     * @param endDate Filter by endDate less than or equal to a specified date (optional)
     * @param includeUsages Optional ability to suppress the usage records (optional, default to true)
     * @param maxUsages Optional ability to limit the usages returned (optional)
     * @param offsetUsages Optional ability to offset the usages returned, for use with maxUsages to paginate (optional)
     * @param includeTenants Optional ability to include all subtenant billing information when calling from a master tenant user (optional, default to false)
     * @param accountId Filter by Tenant ID. This is only available to master tenant users with permission to manage tenants and users. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Billing </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBillingServersIdentifierAsync(String identifier, String startDate, String endDate, Boolean includeUsages, Long maxUsages, Long offsetUsages, Boolean includeTenants, Long accountId, final ApiCallback<GetBillingServersIdentifier200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBillingServersIdentifierValidateBeforeCall(identifier, startDate, endDate, includeUsages, maxUsages, offsetUsages, includeTenants, accountId, _callback);
        Type localVarReturnType = new TypeToken<GetBillingServersIdentifier200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBillingZoneIdentifier
     * @param identifier Morpheus UUID or ID of the Object being created or referenced (required)
     * @param startDate Filter by startDate greater than or equal to a specified date (optional)
     * @param endDate Filter by endDate less than or equal to a specified date (optional)
     * @param includeUsages Optional ability to suppress the usage records (optional, default to true)
     * @param maxUsages Optional ability to limit the usages returned (optional)
     * @param offsetUsages Optional ability to offset the usages returned, for use with maxUsages to paginate (optional)
     * @param includeComputeServers Optional ability to exclude compute servers (optional, default to true)
     * @param includeInstances Optional ability to exclude instances (optional, default to true)
     * @param includeDiscoveredServers Optional ability to exclude discovered servers (optional, default to true)
     * @param includeLoadBalancers Optional ability to exclude load balancers (optional, default to true)
     * @param includeVirtualImages Optional ability to exclude virtual images (optional, default to true)
     * @param includeSnapshots Optional ability to exclude snapshots (optional, default to true)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Billing </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBillingZoneIdentifierCall(String identifier, String startDate, String endDate, Boolean includeUsages, Long maxUsages, Long offsetUsages, Boolean includeComputeServers, Boolean includeInstances, Boolean includeDiscoveredServers, Boolean includeLoadBalancers, Boolean includeVirtualImages, Boolean includeSnapshots, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/billing/zones/{identifier}"
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDate", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDate", endDate));
        }

        if (includeUsages != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeUsages", includeUsages));
        }

        if (maxUsages != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxUsages", maxUsages));
        }

        if (offsetUsages != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offsetUsages", offsetUsages));
        }

        if (includeComputeServers != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeComputeServers", includeComputeServers));
        }

        if (includeInstances != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeInstances", includeInstances));
        }

        if (includeDiscoveredServers != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeDiscoveredServers", includeDiscoveredServers));
        }

        if (includeLoadBalancers != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeLoadBalancers", includeLoadBalancers));
        }

        if (includeVirtualImages != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeVirtualImages", includeVirtualImages));
        }

        if (includeSnapshots != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeSnapshots", includeSnapshots));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBillingZoneIdentifierValidateBeforeCall(String identifier, String startDate, String endDate, Boolean includeUsages, Long maxUsages, Long offsetUsages, Boolean includeComputeServers, Boolean includeInstances, Boolean includeDiscoveredServers, Boolean includeLoadBalancers, Boolean includeVirtualImages, Boolean includeSnapshots, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling getBillingZoneIdentifier(Async)");
        }

        return getBillingZoneIdentifierCall(identifier, startDate, endDate, includeUsages, maxUsages, offsetUsages, includeComputeServers, includeInstances, includeDiscoveredServers, includeLoadBalancers, includeVirtualImages, includeSnapshots, _callback);

    }

    /**
     * Retrieves billing information for a specific zone in the requestor&#39;s account. Use zoneUUID whenever possible.
     * Provides API interfaces for viewing billing usage information by tenant, zone, instance or server. By default, usage returned is from the beginning of the current month until now. The date range is parameterized but the end date cannot exceed the current date. 
     * @param identifier Morpheus UUID or ID of the Object being created or referenced (required)
     * @param startDate Filter by startDate greater than or equal to a specified date (optional)
     * @param endDate Filter by endDate less than or equal to a specified date (optional)
     * @param includeUsages Optional ability to suppress the usage records (optional, default to true)
     * @param maxUsages Optional ability to limit the usages returned (optional)
     * @param offsetUsages Optional ability to offset the usages returned, for use with maxUsages to paginate (optional)
     * @param includeComputeServers Optional ability to exclude compute servers (optional, default to true)
     * @param includeInstances Optional ability to exclude instances (optional, default to true)
     * @param includeDiscoveredServers Optional ability to exclude discovered servers (optional, default to true)
     * @param includeLoadBalancers Optional ability to exclude load balancers (optional, default to true)
     * @param includeVirtualImages Optional ability to exclude virtual images (optional, default to true)
     * @param includeSnapshots Optional ability to exclude snapshots (optional, default to true)
     * @return GetBillingZoneIdentifier200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Billing </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public GetBillingZoneIdentifier200Response getBillingZoneIdentifier(String identifier, String startDate, String endDate, Boolean includeUsages, Long maxUsages, Long offsetUsages, Boolean includeComputeServers, Boolean includeInstances, Boolean includeDiscoveredServers, Boolean includeLoadBalancers, Boolean includeVirtualImages, Boolean includeSnapshots) throws ApiException {
        ApiResponse<GetBillingZoneIdentifier200Response> localVarResp = getBillingZoneIdentifierWithHttpInfo(identifier, startDate, endDate, includeUsages, maxUsages, offsetUsages, includeComputeServers, includeInstances, includeDiscoveredServers, includeLoadBalancers, includeVirtualImages, includeSnapshots);
        return localVarResp.getData();
    }

    /**
     * Retrieves billing information for a specific zone in the requestor&#39;s account. Use zoneUUID whenever possible.
     * Provides API interfaces for viewing billing usage information by tenant, zone, instance or server. By default, usage returned is from the beginning of the current month until now. The date range is parameterized but the end date cannot exceed the current date. 
     * @param identifier Morpheus UUID or ID of the Object being created or referenced (required)
     * @param startDate Filter by startDate greater than or equal to a specified date (optional)
     * @param endDate Filter by endDate less than or equal to a specified date (optional)
     * @param includeUsages Optional ability to suppress the usage records (optional, default to true)
     * @param maxUsages Optional ability to limit the usages returned (optional)
     * @param offsetUsages Optional ability to offset the usages returned, for use with maxUsages to paginate (optional)
     * @param includeComputeServers Optional ability to exclude compute servers (optional, default to true)
     * @param includeInstances Optional ability to exclude instances (optional, default to true)
     * @param includeDiscoveredServers Optional ability to exclude discovered servers (optional, default to true)
     * @param includeLoadBalancers Optional ability to exclude load balancers (optional, default to true)
     * @param includeVirtualImages Optional ability to exclude virtual images (optional, default to true)
     * @param includeSnapshots Optional ability to exclude snapshots (optional, default to true)
     * @return ApiResponse&lt;GetBillingZoneIdentifier200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Billing </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetBillingZoneIdentifier200Response> getBillingZoneIdentifierWithHttpInfo(String identifier, String startDate, String endDate, Boolean includeUsages, Long maxUsages, Long offsetUsages, Boolean includeComputeServers, Boolean includeInstances, Boolean includeDiscoveredServers, Boolean includeLoadBalancers, Boolean includeVirtualImages, Boolean includeSnapshots) throws ApiException {
        okhttp3.Call localVarCall = getBillingZoneIdentifierValidateBeforeCall(identifier, startDate, endDate, includeUsages, maxUsages, offsetUsages, includeComputeServers, includeInstances, includeDiscoveredServers, includeLoadBalancers, includeVirtualImages, includeSnapshots, null);
        Type localVarReturnType = new TypeToken<GetBillingZoneIdentifier200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves billing information for a specific zone in the requestor&#39;s account. Use zoneUUID whenever possible. (asynchronously)
     * Provides API interfaces for viewing billing usage information by tenant, zone, instance or server. By default, usage returned is from the beginning of the current month until now. The date range is parameterized but the end date cannot exceed the current date. 
     * @param identifier Morpheus UUID or ID of the Object being created or referenced (required)
     * @param startDate Filter by startDate greater than or equal to a specified date (optional)
     * @param endDate Filter by endDate less than or equal to a specified date (optional)
     * @param includeUsages Optional ability to suppress the usage records (optional, default to true)
     * @param maxUsages Optional ability to limit the usages returned (optional)
     * @param offsetUsages Optional ability to offset the usages returned, for use with maxUsages to paginate (optional)
     * @param includeComputeServers Optional ability to exclude compute servers (optional, default to true)
     * @param includeInstances Optional ability to exclude instances (optional, default to true)
     * @param includeDiscoveredServers Optional ability to exclude discovered servers (optional, default to true)
     * @param includeLoadBalancers Optional ability to exclude load balancers (optional, default to true)
     * @param includeVirtualImages Optional ability to exclude virtual images (optional, default to true)
     * @param includeSnapshots Optional ability to exclude snapshots (optional, default to true)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Billing </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBillingZoneIdentifierAsync(String identifier, String startDate, String endDate, Boolean includeUsages, Long maxUsages, Long offsetUsages, Boolean includeComputeServers, Boolean includeInstances, Boolean includeDiscoveredServers, Boolean includeLoadBalancers, Boolean includeVirtualImages, Boolean includeSnapshots, final ApiCallback<GetBillingZoneIdentifier200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBillingZoneIdentifierValidateBeforeCall(identifier, startDate, endDate, includeUsages, maxUsages, offsetUsages, includeComputeServers, includeInstances, includeDiscoveredServers, includeLoadBalancers, includeVirtualImages, includeSnapshots, _callback);
        Type localVarReturnType = new TypeToken<GetBillingZoneIdentifier200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listBillingAccount
     * @param startDate Filter by startDate greater than or equal to a specified date (optional)
     * @param endDate Filter by endDate less than or equal to a specified date (optional)
     * @param includeUsages Optional ability to suppress the usage records (optional, default to true)
     * @param maxUsages Optional ability to limit the usages returned (optional)
     * @param offsetUsages Optional ability to offset the usages returned, for use with maxUsages to paginate (optional)
     * @param includeComputeServers Optional ability to exclude compute servers (optional, default to true)
     * @param includeInstances Optional ability to exclude instances (optional, default to true)
     * @param includeDiscoveredServers Optional ability to exclude discovered servers (optional, default to true)
     * @param includeLoadBalancers Optional ability to exclude load balancers (optional, default to true)
     * @param includeVirtualImages Optional ability to exclude virtual images (optional, default to true)
     * @param includeSnapshots Optional ability to exclude snapshots (optional, default to true)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Billing </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listBillingAccountCall(String startDate, String endDate, Boolean includeUsages, Long maxUsages, Long offsetUsages, Boolean includeComputeServers, Boolean includeInstances, Boolean includeDiscoveredServers, Boolean includeLoadBalancers, Boolean includeVirtualImages, Boolean includeSnapshots, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/billing/account";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDate", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDate", endDate));
        }

        if (includeUsages != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeUsages", includeUsages));
        }

        if (maxUsages != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxUsages", maxUsages));
        }

        if (offsetUsages != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offsetUsages", offsetUsages));
        }

        if (includeComputeServers != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeComputeServers", includeComputeServers));
        }

        if (includeInstances != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeInstances", includeInstances));
        }

        if (includeDiscoveredServers != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeDiscoveredServers", includeDiscoveredServers));
        }

        if (includeLoadBalancers != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeLoadBalancers", includeLoadBalancers));
        }

        if (includeVirtualImages != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeVirtualImages", includeVirtualImages));
        }

        if (includeSnapshots != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeSnapshots", includeSnapshots));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listBillingAccountValidateBeforeCall(String startDate, String endDate, Boolean includeUsages, Long maxUsages, Long offsetUsages, Boolean includeComputeServers, Boolean includeInstances, Boolean includeDiscoveredServers, Boolean includeLoadBalancers, Boolean includeVirtualImages, Boolean includeSnapshots, final ApiCallback _callback) throws ApiException {
        return listBillingAccountCall(startDate, endDate, includeUsages, maxUsages, offsetUsages, includeComputeServers, includeInstances, includeDiscoveredServers, includeLoadBalancers, includeVirtualImages, includeSnapshots, _callback);

    }

    /**
     * Retrieves billing information for the requesting user&#39;s account.
     * Provides API interfaces for viewing billing usage information by tenant, zone, instance or server. By default, usage returned is from the beginning of the current month until now. The date range is parameterized but the end date cannot exceed the current date. 
     * @param startDate Filter by startDate greater than or equal to a specified date (optional)
     * @param endDate Filter by endDate less than or equal to a specified date (optional)
     * @param includeUsages Optional ability to suppress the usage records (optional, default to true)
     * @param maxUsages Optional ability to limit the usages returned (optional)
     * @param offsetUsages Optional ability to offset the usages returned, for use with maxUsages to paginate (optional)
     * @param includeComputeServers Optional ability to exclude compute servers (optional, default to true)
     * @param includeInstances Optional ability to exclude instances (optional, default to true)
     * @param includeDiscoveredServers Optional ability to exclude discovered servers (optional, default to true)
     * @param includeLoadBalancers Optional ability to exclude load balancers (optional, default to true)
     * @param includeVirtualImages Optional ability to exclude virtual images (optional, default to true)
     * @param includeSnapshots Optional ability to exclude snapshots (optional, default to true)
     * @return ListBillingAccount200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Billing </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ListBillingAccount200Response listBillingAccount(String startDate, String endDate, Boolean includeUsages, Long maxUsages, Long offsetUsages, Boolean includeComputeServers, Boolean includeInstances, Boolean includeDiscoveredServers, Boolean includeLoadBalancers, Boolean includeVirtualImages, Boolean includeSnapshots) throws ApiException {
        ApiResponse<ListBillingAccount200Response> localVarResp = listBillingAccountWithHttpInfo(startDate, endDate, includeUsages, maxUsages, offsetUsages, includeComputeServers, includeInstances, includeDiscoveredServers, includeLoadBalancers, includeVirtualImages, includeSnapshots);
        return localVarResp.getData();
    }

    /**
     * Retrieves billing information for the requesting user&#39;s account.
     * Provides API interfaces for viewing billing usage information by tenant, zone, instance or server. By default, usage returned is from the beginning of the current month until now. The date range is parameterized but the end date cannot exceed the current date. 
     * @param startDate Filter by startDate greater than or equal to a specified date (optional)
     * @param endDate Filter by endDate less than or equal to a specified date (optional)
     * @param includeUsages Optional ability to suppress the usage records (optional, default to true)
     * @param maxUsages Optional ability to limit the usages returned (optional)
     * @param offsetUsages Optional ability to offset the usages returned, for use with maxUsages to paginate (optional)
     * @param includeComputeServers Optional ability to exclude compute servers (optional, default to true)
     * @param includeInstances Optional ability to exclude instances (optional, default to true)
     * @param includeDiscoveredServers Optional ability to exclude discovered servers (optional, default to true)
     * @param includeLoadBalancers Optional ability to exclude load balancers (optional, default to true)
     * @param includeVirtualImages Optional ability to exclude virtual images (optional, default to true)
     * @param includeSnapshots Optional ability to exclude snapshots (optional, default to true)
     * @return ApiResponse&lt;ListBillingAccount200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Billing </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListBillingAccount200Response> listBillingAccountWithHttpInfo(String startDate, String endDate, Boolean includeUsages, Long maxUsages, Long offsetUsages, Boolean includeComputeServers, Boolean includeInstances, Boolean includeDiscoveredServers, Boolean includeLoadBalancers, Boolean includeVirtualImages, Boolean includeSnapshots) throws ApiException {
        okhttp3.Call localVarCall = listBillingAccountValidateBeforeCall(startDate, endDate, includeUsages, maxUsages, offsetUsages, includeComputeServers, includeInstances, includeDiscoveredServers, includeLoadBalancers, includeVirtualImages, includeSnapshots, null);
        Type localVarReturnType = new TypeToken<ListBillingAccount200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves billing information for the requesting user&#39;s account. (asynchronously)
     * Provides API interfaces for viewing billing usage information by tenant, zone, instance or server. By default, usage returned is from the beginning of the current month until now. The date range is parameterized but the end date cannot exceed the current date. 
     * @param startDate Filter by startDate greater than or equal to a specified date (optional)
     * @param endDate Filter by endDate less than or equal to a specified date (optional)
     * @param includeUsages Optional ability to suppress the usage records (optional, default to true)
     * @param maxUsages Optional ability to limit the usages returned (optional)
     * @param offsetUsages Optional ability to offset the usages returned, for use with maxUsages to paginate (optional)
     * @param includeComputeServers Optional ability to exclude compute servers (optional, default to true)
     * @param includeInstances Optional ability to exclude instances (optional, default to true)
     * @param includeDiscoveredServers Optional ability to exclude discovered servers (optional, default to true)
     * @param includeLoadBalancers Optional ability to exclude load balancers (optional, default to true)
     * @param includeVirtualImages Optional ability to exclude virtual images (optional, default to true)
     * @param includeSnapshots Optional ability to exclude snapshots (optional, default to true)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Billing </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listBillingAccountAsync(String startDate, String endDate, Boolean includeUsages, Long maxUsages, Long offsetUsages, Boolean includeComputeServers, Boolean includeInstances, Boolean includeDiscoveredServers, Boolean includeLoadBalancers, Boolean includeVirtualImages, Boolean includeSnapshots, final ApiCallback<ListBillingAccount200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = listBillingAccountValidateBeforeCall(startDate, endDate, includeUsages, maxUsages, offsetUsages, includeComputeServers, includeInstances, includeDiscoveredServers, includeLoadBalancers, includeVirtualImages, includeSnapshots, _callback);
        Type localVarReturnType = new TypeToken<ListBillingAccount200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listBillingInstances
     * @param startDate Filter by startDate greater than or equal to a specified date (optional)
     * @param endDate Filter by endDate less than or equal to a specified date (optional)
     * @param includeUsages Optional ability to suppress the usage records (optional, default to true)
     * @param maxUsages Optional ability to limit the usages returned (optional)
     * @param offsetUsages Optional ability to offset the usages returned, for use with maxUsages to paginate (optional)
     * @param includeTenants Optional ability to include all subtenant billing information when calling from a master tenant user (optional, default to false)
     * @param accountId Filter by Tenant ID. This is only available to master tenant users with permission to manage tenants and users. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Billing </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listBillingInstancesCall(String startDate, String endDate, Boolean includeUsages, Long maxUsages, Long offsetUsages, Boolean includeTenants, Long accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/billing/instances";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDate", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDate", endDate));
        }

        if (includeUsages != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeUsages", includeUsages));
        }

        if (maxUsages != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxUsages", maxUsages));
        }

        if (offsetUsages != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offsetUsages", offsetUsages));
        }

        if (includeTenants != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeTenants", includeTenants));
        }

        if (accountId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accountId", accountId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listBillingInstancesValidateBeforeCall(String startDate, String endDate, Boolean includeUsages, Long maxUsages, Long offsetUsages, Boolean includeTenants, Long accountId, final ApiCallback _callback) throws ApiException {
        return listBillingInstancesCall(startDate, endDate, includeUsages, maxUsages, offsetUsages, includeTenants, accountId, _callback);

    }

    /**
     * Retrieves billing information for all instances on the requestor&#39;s account.
     * Provides API interfaces for viewing billing usage information by tenant, zone, instance or server. By default, usage returned is from the beginning of the current month until now. The date range is parameterized but the end date cannot exceed the current date. 
     * @param startDate Filter by startDate greater than or equal to a specified date (optional)
     * @param endDate Filter by endDate less than or equal to a specified date (optional)
     * @param includeUsages Optional ability to suppress the usage records (optional, default to true)
     * @param maxUsages Optional ability to limit the usages returned (optional)
     * @param offsetUsages Optional ability to offset the usages returned, for use with maxUsages to paginate (optional)
     * @param includeTenants Optional ability to include all subtenant billing information when calling from a master tenant user (optional, default to false)
     * @param accountId Filter by Tenant ID. This is only available to master tenant users with permission to manage tenants and users. (optional)
     * @return ListBillingInstances200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Billing </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ListBillingInstances200Response listBillingInstances(String startDate, String endDate, Boolean includeUsages, Long maxUsages, Long offsetUsages, Boolean includeTenants, Long accountId) throws ApiException {
        ApiResponse<ListBillingInstances200Response> localVarResp = listBillingInstancesWithHttpInfo(startDate, endDate, includeUsages, maxUsages, offsetUsages, includeTenants, accountId);
        return localVarResp.getData();
    }

    /**
     * Retrieves billing information for all instances on the requestor&#39;s account.
     * Provides API interfaces for viewing billing usage information by tenant, zone, instance or server. By default, usage returned is from the beginning of the current month until now. The date range is parameterized but the end date cannot exceed the current date. 
     * @param startDate Filter by startDate greater than or equal to a specified date (optional)
     * @param endDate Filter by endDate less than or equal to a specified date (optional)
     * @param includeUsages Optional ability to suppress the usage records (optional, default to true)
     * @param maxUsages Optional ability to limit the usages returned (optional)
     * @param offsetUsages Optional ability to offset the usages returned, for use with maxUsages to paginate (optional)
     * @param includeTenants Optional ability to include all subtenant billing information when calling from a master tenant user (optional, default to false)
     * @param accountId Filter by Tenant ID. This is only available to master tenant users with permission to manage tenants and users. (optional)
     * @return ApiResponse&lt;ListBillingInstances200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Billing </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListBillingInstances200Response> listBillingInstancesWithHttpInfo(String startDate, String endDate, Boolean includeUsages, Long maxUsages, Long offsetUsages, Boolean includeTenants, Long accountId) throws ApiException {
        okhttp3.Call localVarCall = listBillingInstancesValidateBeforeCall(startDate, endDate, includeUsages, maxUsages, offsetUsages, includeTenants, accountId, null);
        Type localVarReturnType = new TypeToken<ListBillingInstances200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves billing information for all instances on the requestor&#39;s account. (asynchronously)
     * Provides API interfaces for viewing billing usage information by tenant, zone, instance or server. By default, usage returned is from the beginning of the current month until now. The date range is parameterized but the end date cannot exceed the current date. 
     * @param startDate Filter by startDate greater than or equal to a specified date (optional)
     * @param endDate Filter by endDate less than or equal to a specified date (optional)
     * @param includeUsages Optional ability to suppress the usage records (optional, default to true)
     * @param maxUsages Optional ability to limit the usages returned (optional)
     * @param offsetUsages Optional ability to offset the usages returned, for use with maxUsages to paginate (optional)
     * @param includeTenants Optional ability to include all subtenant billing information when calling from a master tenant user (optional, default to false)
     * @param accountId Filter by Tenant ID. This is only available to master tenant users with permission to manage tenants and users. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Billing </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listBillingInstancesAsync(String startDate, String endDate, Boolean includeUsages, Long maxUsages, Long offsetUsages, Boolean includeTenants, Long accountId, final ApiCallback<ListBillingInstances200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = listBillingInstancesValidateBeforeCall(startDate, endDate, includeUsages, maxUsages, offsetUsages, includeTenants, accountId, _callback);
        Type localVarReturnType = new TypeToken<ListBillingInstances200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listBillingServers
     * @param startDate Filter by startDate greater than or equal to a specified date (optional)
     * @param endDate Filter by endDate less than or equal to a specified date (optional)
     * @param includeUsages Optional ability to suppress the usage records (optional, default to true)
     * @param maxUsages Optional ability to limit the usages returned (optional)
     * @param offsetUsages Optional ability to offset the usages returned, for use with maxUsages to paginate (optional)
     * @param includeTenants Optional ability to include all subtenant billing information when calling from a master tenant user (optional, default to false)
     * @param accountId Filter by Tenant ID. This is only available to master tenant users with permission to manage tenants and users. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Billing </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listBillingServersCall(String startDate, String endDate, Boolean includeUsages, Long maxUsages, Long offsetUsages, Boolean includeTenants, Long accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/billing/servers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDate", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDate", endDate));
        }

        if (includeUsages != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeUsages", includeUsages));
        }

        if (maxUsages != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxUsages", maxUsages));
        }

        if (offsetUsages != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offsetUsages", offsetUsages));
        }

        if (includeTenants != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeTenants", includeTenants));
        }

        if (accountId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accountId", accountId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listBillingServersValidateBeforeCall(String startDate, String endDate, Boolean includeUsages, Long maxUsages, Long offsetUsages, Boolean includeTenants, Long accountId, final ApiCallback _callback) throws ApiException {
        return listBillingServersCall(startDate, endDate, includeUsages, maxUsages, offsetUsages, includeTenants, accountId, _callback);

    }

    /**
     * Retrieves billing information for all servers (container hosts) on the requestor&#39;s account.
     * Provides API interfaces for viewing billing usage information by tenant, zone, instance or server. By default, usage returned is from the beginning of the current month until now. The date range is parameterized but the end date cannot exceed the current date. 
     * @param startDate Filter by startDate greater than or equal to a specified date (optional)
     * @param endDate Filter by endDate less than or equal to a specified date (optional)
     * @param includeUsages Optional ability to suppress the usage records (optional, default to true)
     * @param maxUsages Optional ability to limit the usages returned (optional)
     * @param offsetUsages Optional ability to offset the usages returned, for use with maxUsages to paginate (optional)
     * @param includeTenants Optional ability to include all subtenant billing information when calling from a master tenant user (optional, default to false)
     * @param accountId Filter by Tenant ID. This is only available to master tenant users with permission to manage tenants and users. (optional)
     * @return ListBillingServers200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Billing </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ListBillingServers200Response listBillingServers(String startDate, String endDate, Boolean includeUsages, Long maxUsages, Long offsetUsages, Boolean includeTenants, Long accountId) throws ApiException {
        ApiResponse<ListBillingServers200Response> localVarResp = listBillingServersWithHttpInfo(startDate, endDate, includeUsages, maxUsages, offsetUsages, includeTenants, accountId);
        return localVarResp.getData();
    }

    /**
     * Retrieves billing information for all servers (container hosts) on the requestor&#39;s account.
     * Provides API interfaces for viewing billing usage information by tenant, zone, instance or server. By default, usage returned is from the beginning of the current month until now. The date range is parameterized but the end date cannot exceed the current date. 
     * @param startDate Filter by startDate greater than or equal to a specified date (optional)
     * @param endDate Filter by endDate less than or equal to a specified date (optional)
     * @param includeUsages Optional ability to suppress the usage records (optional, default to true)
     * @param maxUsages Optional ability to limit the usages returned (optional)
     * @param offsetUsages Optional ability to offset the usages returned, for use with maxUsages to paginate (optional)
     * @param includeTenants Optional ability to include all subtenant billing information when calling from a master tenant user (optional, default to false)
     * @param accountId Filter by Tenant ID. This is only available to master tenant users with permission to manage tenants and users. (optional)
     * @return ApiResponse&lt;ListBillingServers200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Billing </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListBillingServers200Response> listBillingServersWithHttpInfo(String startDate, String endDate, Boolean includeUsages, Long maxUsages, Long offsetUsages, Boolean includeTenants, Long accountId) throws ApiException {
        okhttp3.Call localVarCall = listBillingServersValidateBeforeCall(startDate, endDate, includeUsages, maxUsages, offsetUsages, includeTenants, accountId, null);
        Type localVarReturnType = new TypeToken<ListBillingServers200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves billing information for all servers (container hosts) on the requestor&#39;s account. (asynchronously)
     * Provides API interfaces for viewing billing usage information by tenant, zone, instance or server. By default, usage returned is from the beginning of the current month until now. The date range is parameterized but the end date cannot exceed the current date. 
     * @param startDate Filter by startDate greater than or equal to a specified date (optional)
     * @param endDate Filter by endDate less than or equal to a specified date (optional)
     * @param includeUsages Optional ability to suppress the usage records (optional, default to true)
     * @param maxUsages Optional ability to limit the usages returned (optional)
     * @param offsetUsages Optional ability to offset the usages returned, for use with maxUsages to paginate (optional)
     * @param includeTenants Optional ability to include all subtenant billing information when calling from a master tenant user (optional, default to false)
     * @param accountId Filter by Tenant ID. This is only available to master tenant users with permission to manage tenants and users. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Billing </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listBillingServersAsync(String startDate, String endDate, Boolean includeUsages, Long maxUsages, Long offsetUsages, Boolean includeTenants, Long accountId, final ApiCallback<ListBillingServers200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = listBillingServersValidateBeforeCall(startDate, endDate, includeUsages, maxUsages, offsetUsages, includeTenants, accountId, _callback);
        Type localVarReturnType = new TypeToken<ListBillingServers200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listBillingZone
     * @param startDate Filter by startDate greater than or equal to a specified date (optional)
     * @param endDate Filter by endDate less than or equal to a specified date (optional)
     * @param includeUsages Optional ability to suppress the usage records (optional, default to true)
     * @param maxUsages Optional ability to limit the usages returned (optional)
     * @param offsetUsages Optional ability to offset the usages returned, for use with maxUsages to paginate (optional)
     * @param includeComputeServers Optional ability to exclude compute servers (optional, default to true)
     * @param includeInstances Optional ability to exclude instances (optional, default to true)
     * @param includeDiscoveredServers Optional ability to exclude discovered servers (optional, default to true)
     * @param includeLoadBalancers Optional ability to exclude load balancers (optional, default to true)
     * @param includeVirtualImages Optional ability to exclude virtual images (optional, default to true)
     * @param includeSnapshots Optional ability to exclude snapshots (optional, default to true)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Billing </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listBillingZoneCall(String startDate, String endDate, Boolean includeUsages, Long maxUsages, Long offsetUsages, Boolean includeComputeServers, Boolean includeInstances, Boolean includeDiscoveredServers, Boolean includeLoadBalancers, Boolean includeVirtualImages, Boolean includeSnapshots, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/billing/zones";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDate", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDate", endDate));
        }

        if (includeUsages != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeUsages", includeUsages));
        }

        if (maxUsages != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxUsages", maxUsages));
        }

        if (offsetUsages != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offsetUsages", offsetUsages));
        }

        if (includeComputeServers != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeComputeServers", includeComputeServers));
        }

        if (includeInstances != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeInstances", includeInstances));
        }

        if (includeDiscoveredServers != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeDiscoveredServers", includeDiscoveredServers));
        }

        if (includeLoadBalancers != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeLoadBalancers", includeLoadBalancers));
        }

        if (includeVirtualImages != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeVirtualImages", includeVirtualImages));
        }

        if (includeSnapshots != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeSnapshots", includeSnapshots));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listBillingZoneValidateBeforeCall(String startDate, String endDate, Boolean includeUsages, Long maxUsages, Long offsetUsages, Boolean includeComputeServers, Boolean includeInstances, Boolean includeDiscoveredServers, Boolean includeLoadBalancers, Boolean includeVirtualImages, Boolean includeSnapshots, final ApiCallback _callback) throws ApiException {
        return listBillingZoneCall(startDate, endDate, includeUsages, maxUsages, offsetUsages, includeComputeServers, includeInstances, includeDiscoveredServers, includeLoadBalancers, includeVirtualImages, includeSnapshots, _callback);

    }

    /**
     * Retrieves billing information for all zones on the requestor&#39;s account.
     * Provides API interfaces for viewing billing usage information by tenant, zone, instance or server. By default, usage returned is from the beginning of the current month until now. The date range is parameterized but the end date cannot exceed the current date. 
     * @param startDate Filter by startDate greater than or equal to a specified date (optional)
     * @param endDate Filter by endDate less than or equal to a specified date (optional)
     * @param includeUsages Optional ability to suppress the usage records (optional, default to true)
     * @param maxUsages Optional ability to limit the usages returned (optional)
     * @param offsetUsages Optional ability to offset the usages returned, for use with maxUsages to paginate (optional)
     * @param includeComputeServers Optional ability to exclude compute servers (optional, default to true)
     * @param includeInstances Optional ability to exclude instances (optional, default to true)
     * @param includeDiscoveredServers Optional ability to exclude discovered servers (optional, default to true)
     * @param includeLoadBalancers Optional ability to exclude load balancers (optional, default to true)
     * @param includeVirtualImages Optional ability to exclude virtual images (optional, default to true)
     * @param includeSnapshots Optional ability to exclude snapshots (optional, default to true)
     * @return ListBillingZone200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Billing </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ListBillingZone200Response listBillingZone(String startDate, String endDate, Boolean includeUsages, Long maxUsages, Long offsetUsages, Boolean includeComputeServers, Boolean includeInstances, Boolean includeDiscoveredServers, Boolean includeLoadBalancers, Boolean includeVirtualImages, Boolean includeSnapshots) throws ApiException {
        ApiResponse<ListBillingZone200Response> localVarResp = listBillingZoneWithHttpInfo(startDate, endDate, includeUsages, maxUsages, offsetUsages, includeComputeServers, includeInstances, includeDiscoveredServers, includeLoadBalancers, includeVirtualImages, includeSnapshots);
        return localVarResp.getData();
    }

    /**
     * Retrieves billing information for all zones on the requestor&#39;s account.
     * Provides API interfaces for viewing billing usage information by tenant, zone, instance or server. By default, usage returned is from the beginning of the current month until now. The date range is parameterized but the end date cannot exceed the current date. 
     * @param startDate Filter by startDate greater than or equal to a specified date (optional)
     * @param endDate Filter by endDate less than or equal to a specified date (optional)
     * @param includeUsages Optional ability to suppress the usage records (optional, default to true)
     * @param maxUsages Optional ability to limit the usages returned (optional)
     * @param offsetUsages Optional ability to offset the usages returned, for use with maxUsages to paginate (optional)
     * @param includeComputeServers Optional ability to exclude compute servers (optional, default to true)
     * @param includeInstances Optional ability to exclude instances (optional, default to true)
     * @param includeDiscoveredServers Optional ability to exclude discovered servers (optional, default to true)
     * @param includeLoadBalancers Optional ability to exclude load balancers (optional, default to true)
     * @param includeVirtualImages Optional ability to exclude virtual images (optional, default to true)
     * @param includeSnapshots Optional ability to exclude snapshots (optional, default to true)
     * @return ApiResponse&lt;ListBillingZone200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Billing </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListBillingZone200Response> listBillingZoneWithHttpInfo(String startDate, String endDate, Boolean includeUsages, Long maxUsages, Long offsetUsages, Boolean includeComputeServers, Boolean includeInstances, Boolean includeDiscoveredServers, Boolean includeLoadBalancers, Boolean includeVirtualImages, Boolean includeSnapshots) throws ApiException {
        okhttp3.Call localVarCall = listBillingZoneValidateBeforeCall(startDate, endDate, includeUsages, maxUsages, offsetUsages, includeComputeServers, includeInstances, includeDiscoveredServers, includeLoadBalancers, includeVirtualImages, includeSnapshots, null);
        Type localVarReturnType = new TypeToken<ListBillingZone200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves billing information for all zones on the requestor&#39;s account. (asynchronously)
     * Provides API interfaces for viewing billing usage information by tenant, zone, instance or server. By default, usage returned is from the beginning of the current month until now. The date range is parameterized but the end date cannot exceed the current date. 
     * @param startDate Filter by startDate greater than or equal to a specified date (optional)
     * @param endDate Filter by endDate less than or equal to a specified date (optional)
     * @param includeUsages Optional ability to suppress the usage records (optional, default to true)
     * @param maxUsages Optional ability to limit the usages returned (optional)
     * @param offsetUsages Optional ability to offset the usages returned, for use with maxUsages to paginate (optional)
     * @param includeComputeServers Optional ability to exclude compute servers (optional, default to true)
     * @param includeInstances Optional ability to exclude instances (optional, default to true)
     * @param includeDiscoveredServers Optional ability to exclude discovered servers (optional, default to true)
     * @param includeLoadBalancers Optional ability to exclude load balancers (optional, default to true)
     * @param includeVirtualImages Optional ability to exclude virtual images (optional, default to true)
     * @param includeSnapshots Optional ability to exclude snapshots (optional, default to true)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Billing </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listBillingZoneAsync(String startDate, String endDate, Boolean includeUsages, Long maxUsages, Long offsetUsages, Boolean includeComputeServers, Boolean includeInstances, Boolean includeDiscoveredServers, Boolean includeLoadBalancers, Boolean includeVirtualImages, Boolean includeSnapshots, final ApiCallback<ListBillingZone200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = listBillingZoneValidateBeforeCall(startDate, endDate, includeUsages, maxUsages, offsetUsages, includeComputeServers, includeInstances, includeDiscoveredServers, includeLoadBalancers, includeVirtualImages, includeSnapshots, _callback);
        Type localVarReturnType = new TypeToken<ListBillingZone200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
