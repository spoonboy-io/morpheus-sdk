/*
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DefaultError;
import org.openapitools.client.model.InlineObject66;
import org.openapitools.client.model.Model200Success;
import org.openapitools.client.model.OneOfstringlong;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CypherApi {
    private ApiClient localVarApiClient;

    public CypherApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CypherApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for addCypherKey
     * @param cypherPath The key includes a mount prefix separated by a /. For example, the key secret/foo uses the secret mount.  Available Mounts  &lt;table&gt;   &lt;tr&gt;     &lt;th&gt;Mount&lt;/th&gt;     &lt;th&gt;Description&lt;/th&gt;     &lt;th&gt;Example&lt;/th&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;password&lt;/td&gt;     &lt;td&gt;Generates a secure password of specified character length in the key pattern (or 15) with symbols, numbers, upper case, and lower case letters (i.e. password/15/mypass generates a 15 character password).&lt;/td&gt;     &lt;td&gt;password/15/mypass&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;tfvars&lt;/td&gt;     &lt;td&gt;This is a module to store a tfvars file for terraform.&lt;/td&gt;     &lt;td&gt;tfvars/mytfvar&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;secret&lt;/td&gt;     &lt;td&gt;This is the standard secret module that stores a key/value in encrypted form. Capable of storing entire JSON object or a String.&lt;/td&gt;     &lt;td&gt;secret/foo&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;uuid&lt;/td&gt;     &lt;td&gt;Returns a new UUID by key name when requested and stores the generated UUID by key name for a given lease timeout period.&lt;/td&gt;     &lt;td&gt;uuid/autoMac1&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;key&lt;/td&gt;     &lt;td&gt;Generates a Base 64 encoded AES Key of specified bit length in the key pattern (i.e. key/128/mykey generates a 128-bit key)&lt;/td&gt;     &lt;td&gt;key/128/mykey&lt;/td&gt;   &lt;/tr&gt; &lt;/table&gt;  (required)
     * @param ttl Time to Live. The lease duration in seconds, or a human readable format eg. &#39;15m&#39;, 8h, &#39;7d&#39;.  0 means no expiry. (optional, default to null)
     * @param value The secret value to be stored. Only required for certain mounts. Some mounts generate their own value and do not require a value to be passed. eg. &#x60;uuid&#x60;, &#x60;key&#x60; and &#x60;password&#x60;. (optional)
     * @param type The type of data being stored, &#x60;string&#x60; or &#x60;object&#x60;. The data type depends on the cypher mount being used. Most mounts use &#x60;string&#x60; as their data type, but &#x60;secret&#x60; uses &#x60;object&#x60; by default. You can store a string instead by passing &#x60;type&#x3D;string&#x60;. This means the &#x60;data&#x60; value returned by the API will be a string instead of an object. (optional)
     * @param inlineObject66  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addCypherKeyCall(String cypherPath, OneOfstringlong ttl, String value, String type, InlineObject66 inlineObject66, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = inlineObject66;

        // create path and map variables
        String localVarPath = "/api/cypher/{cypherPath}"
            .replaceAll("\\{" + "cypherPath" + "\\}", localVarApiClient.escapeString(cypherPath.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ttl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ttl", ttl));
        }

        if (value != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("value", value));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addCypherKeyValidateBeforeCall(String cypherPath, OneOfstringlong ttl, String value, String type, InlineObject66 inlineObject66, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'cypherPath' is set
        if (cypherPath == null) {
            throw new ApiException("Missing the required parameter 'cypherPath' when calling addCypherKey(Async)");
        }
        

        okhttp3.Call localVarCall = addCypherKeyCall(cypherPath, ttl, value, type, inlineObject66, _callback);
        return localVarCall;

    }

    /**
     * Write a Cypher
     * This endpoint will create or update a cypher key.
     * @param cypherPath The key includes a mount prefix separated by a /. For example, the key secret/foo uses the secret mount.  Available Mounts  &lt;table&gt;   &lt;tr&gt;     &lt;th&gt;Mount&lt;/th&gt;     &lt;th&gt;Description&lt;/th&gt;     &lt;th&gt;Example&lt;/th&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;password&lt;/td&gt;     &lt;td&gt;Generates a secure password of specified character length in the key pattern (or 15) with symbols, numbers, upper case, and lower case letters (i.e. password/15/mypass generates a 15 character password).&lt;/td&gt;     &lt;td&gt;password/15/mypass&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;tfvars&lt;/td&gt;     &lt;td&gt;This is a module to store a tfvars file for terraform.&lt;/td&gt;     &lt;td&gt;tfvars/mytfvar&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;secret&lt;/td&gt;     &lt;td&gt;This is the standard secret module that stores a key/value in encrypted form. Capable of storing entire JSON object or a String.&lt;/td&gt;     &lt;td&gt;secret/foo&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;uuid&lt;/td&gt;     &lt;td&gt;Returns a new UUID by key name when requested and stores the generated UUID by key name for a given lease timeout period.&lt;/td&gt;     &lt;td&gt;uuid/autoMac1&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;key&lt;/td&gt;     &lt;td&gt;Generates a Base 64 encoded AES Key of specified bit length in the key pattern (i.e. key/128/mykey generates a 128-bit key)&lt;/td&gt;     &lt;td&gt;key/128/mykey&lt;/td&gt;   &lt;/tr&gt; &lt;/table&gt;  (required)
     * @param ttl Time to Live. The lease duration in seconds, or a human readable format eg. &#39;15m&#39;, 8h, &#39;7d&#39;.  0 means no expiry. (optional, default to null)
     * @param value The secret value to be stored. Only required for certain mounts. Some mounts generate their own value and do not require a value to be passed. eg. &#x60;uuid&#x60;, &#x60;key&#x60; and &#x60;password&#x60;. (optional)
     * @param type The type of data being stored, &#x60;string&#x60; or &#x60;object&#x60;. The data type depends on the cypher mount being used. Most mounts use &#x60;string&#x60; as their data type, but &#x60;secret&#x60; uses &#x60;object&#x60; by default. You can store a string instead by passing &#x60;type&#x3D;string&#x60;. This means the &#x60;data&#x60; value returned by the API will be a string instead of an object. (optional)
     * @param inlineObject66  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public Object addCypherKey(String cypherPath, OneOfstringlong ttl, String value, String type, InlineObject66 inlineObject66) throws ApiException {
        ApiResponse<Object> localVarResp = addCypherKeyWithHttpInfo(cypherPath, ttl, value, type, inlineObject66);
        return localVarResp.getData();
    }

    /**
     * Write a Cypher
     * This endpoint will create or update a cypher key.
     * @param cypherPath The key includes a mount prefix separated by a /. For example, the key secret/foo uses the secret mount.  Available Mounts  &lt;table&gt;   &lt;tr&gt;     &lt;th&gt;Mount&lt;/th&gt;     &lt;th&gt;Description&lt;/th&gt;     &lt;th&gt;Example&lt;/th&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;password&lt;/td&gt;     &lt;td&gt;Generates a secure password of specified character length in the key pattern (or 15) with symbols, numbers, upper case, and lower case letters (i.e. password/15/mypass generates a 15 character password).&lt;/td&gt;     &lt;td&gt;password/15/mypass&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;tfvars&lt;/td&gt;     &lt;td&gt;This is a module to store a tfvars file for terraform.&lt;/td&gt;     &lt;td&gt;tfvars/mytfvar&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;secret&lt;/td&gt;     &lt;td&gt;This is the standard secret module that stores a key/value in encrypted form. Capable of storing entire JSON object or a String.&lt;/td&gt;     &lt;td&gt;secret/foo&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;uuid&lt;/td&gt;     &lt;td&gt;Returns a new UUID by key name when requested and stores the generated UUID by key name for a given lease timeout period.&lt;/td&gt;     &lt;td&gt;uuid/autoMac1&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;key&lt;/td&gt;     &lt;td&gt;Generates a Base 64 encoded AES Key of specified bit length in the key pattern (i.e. key/128/mykey generates a 128-bit key)&lt;/td&gt;     &lt;td&gt;key/128/mykey&lt;/td&gt;   &lt;/tr&gt; &lt;/table&gt;  (required)
     * @param ttl Time to Live. The lease duration in seconds, or a human readable format eg. &#39;15m&#39;, 8h, &#39;7d&#39;.  0 means no expiry. (optional, default to null)
     * @param value The secret value to be stored. Only required for certain mounts. Some mounts generate their own value and do not require a value to be passed. eg. &#x60;uuid&#x60;, &#x60;key&#x60; and &#x60;password&#x60;. (optional)
     * @param type The type of data being stored, &#x60;string&#x60; or &#x60;object&#x60;. The data type depends on the cypher mount being used. Most mounts use &#x60;string&#x60; as their data type, but &#x60;secret&#x60; uses &#x60;object&#x60; by default. You can store a string instead by passing &#x60;type&#x3D;string&#x60;. This means the &#x60;data&#x60; value returned by the API will be a string instead of an object. (optional)
     * @param inlineObject66  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> addCypherKeyWithHttpInfo(String cypherPath, OneOfstringlong ttl, String value, String type, InlineObject66 inlineObject66) throws ApiException {
        okhttp3.Call localVarCall = addCypherKeyValidateBeforeCall(cypherPath, ttl, value, type, inlineObject66, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Write a Cypher (asynchronously)
     * This endpoint will create or update a cypher key.
     * @param cypherPath The key includes a mount prefix separated by a /. For example, the key secret/foo uses the secret mount.  Available Mounts  &lt;table&gt;   &lt;tr&gt;     &lt;th&gt;Mount&lt;/th&gt;     &lt;th&gt;Description&lt;/th&gt;     &lt;th&gt;Example&lt;/th&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;password&lt;/td&gt;     &lt;td&gt;Generates a secure password of specified character length in the key pattern (or 15) with symbols, numbers, upper case, and lower case letters (i.e. password/15/mypass generates a 15 character password).&lt;/td&gt;     &lt;td&gt;password/15/mypass&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;tfvars&lt;/td&gt;     &lt;td&gt;This is a module to store a tfvars file for terraform.&lt;/td&gt;     &lt;td&gt;tfvars/mytfvar&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;secret&lt;/td&gt;     &lt;td&gt;This is the standard secret module that stores a key/value in encrypted form. Capable of storing entire JSON object or a String.&lt;/td&gt;     &lt;td&gt;secret/foo&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;uuid&lt;/td&gt;     &lt;td&gt;Returns a new UUID by key name when requested and stores the generated UUID by key name for a given lease timeout period.&lt;/td&gt;     &lt;td&gt;uuid/autoMac1&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;key&lt;/td&gt;     &lt;td&gt;Generates a Base 64 encoded AES Key of specified bit length in the key pattern (i.e. key/128/mykey generates a 128-bit key)&lt;/td&gt;     &lt;td&gt;key/128/mykey&lt;/td&gt;   &lt;/tr&gt; &lt;/table&gt;  (required)
     * @param ttl Time to Live. The lease duration in seconds, or a human readable format eg. &#39;15m&#39;, 8h, &#39;7d&#39;.  0 means no expiry. (optional, default to null)
     * @param value The secret value to be stored. Only required for certain mounts. Some mounts generate their own value and do not require a value to be passed. eg. &#x60;uuid&#x60;, &#x60;key&#x60; and &#x60;password&#x60;. (optional)
     * @param type The type of data being stored, &#x60;string&#x60; or &#x60;object&#x60;. The data type depends on the cypher mount being used. Most mounts use &#x60;string&#x60; as their data type, but &#x60;secret&#x60; uses &#x60;object&#x60; by default. You can store a string instead by passing &#x60;type&#x3D;string&#x60;. This means the &#x60;data&#x60; value returned by the API will be a string instead of an object. (optional)
     * @param inlineObject66  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addCypherKeyAsync(String cypherPath, OneOfstringlong ttl, String value, String type, InlineObject66 inlineObject66, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = addCypherKeyValidateBeforeCall(cypherPath, ttl, value, type, inlineObject66, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCypherKey
     * @param cypherPath The cypher key including the mount prefix. (required)
     * @param leaseToken An execution lease token. (optional)
     * @param sort Sort order, the name of the property to sort by (optional, default to &quot;name&quot;)
     * @param direction Sort direction, use &#39;desc&#39; to reverse sort (optional, default to asc)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCypherKeyCall(String cypherPath, String leaseToken, String sort, String direction, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/cypher/{cypherPath}"
            .replaceAll("\\{" + "cypherPath" + "\\}", localVarApiClient.escapeString(cypherPath.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (leaseToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("leaseToken", leaseToken));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth", "cypherAuth-XCToken", "cypherAuth-XMLease", "cypherAuth-XVToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCypherKeyValidateBeforeCall(String cypherPath, String leaseToken, String sort, String direction, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'cypherPath' is set
        if (cypherPath == null) {
            throw new ApiException("Missing the required parameter 'cypherPath' when calling getCypherKey(Async)");
        }
        

        okhttp3.Call localVarCall = getCypherKeyCall(cypherPath, leaseToken, sort, direction, _callback);
        return localVarCall;

    }

    /**
     * Read or Create a Cypher Key
     * This endpoint retrieves a specific cypher key. The value of the key is decrypted and returned as data. It may be a String or an object with many {\&quot;key\&quot;:\&quot;value\&quot;} pairs.  The type depends on the cypher mount&#39;s capabilities and what type of data was written to the key.  For example the &#x60;secret/&#x60; mount allows either a string or an object, while the &#x60;password/&#x60; mount will always store and return a string. This endpoint can also create a key. This only applies to mount types &#x60;uuid&#x60;, &#x60;key&#x60;, &#x60;password&#x60;.  Refer to the &#x60;POST&#x60; endpoint for more information. 
     * @param cypherPath The cypher key including the mount prefix. (required)
     * @param leaseToken An execution lease token. (optional)
     * @param sort Sort order, the name of the property to sort by (optional, default to &quot;name&quot;)
     * @param direction Sort direction, use &#39;desc&#39; to reverse sort (optional, default to asc)
     * @return Model200Success
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public Model200Success getCypherKey(String cypherPath, String leaseToken, String sort, String direction) throws ApiException {
        ApiResponse<Model200Success> localVarResp = getCypherKeyWithHttpInfo(cypherPath, leaseToken, sort, direction);
        return localVarResp.getData();
    }

    /**
     * Read or Create a Cypher Key
     * This endpoint retrieves a specific cypher key. The value of the key is decrypted and returned as data. It may be a String or an object with many {\&quot;key\&quot;:\&quot;value\&quot;} pairs.  The type depends on the cypher mount&#39;s capabilities and what type of data was written to the key.  For example the &#x60;secret/&#x60; mount allows either a string or an object, while the &#x60;password/&#x60; mount will always store and return a string. This endpoint can also create a key. This only applies to mount types &#x60;uuid&#x60;, &#x60;key&#x60;, &#x60;password&#x60;.  Refer to the &#x60;POST&#x60; endpoint for more information. 
     * @param cypherPath The cypher key including the mount prefix. (required)
     * @param leaseToken An execution lease token. (optional)
     * @param sort Sort order, the name of the property to sort by (optional, default to &quot;name&quot;)
     * @param direction Sort direction, use &#39;desc&#39; to reverse sort (optional, default to asc)
     * @return ApiResponse&lt;Model200Success&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Model200Success> getCypherKeyWithHttpInfo(String cypherPath, String leaseToken, String sort, String direction) throws ApiException {
        okhttp3.Call localVarCall = getCypherKeyValidateBeforeCall(cypherPath, leaseToken, sort, direction, null);
        Type localVarReturnType = new TypeToken<Model200Success>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Read or Create a Cypher Key (asynchronously)
     * This endpoint retrieves a specific cypher key. The value of the key is decrypted and returned as data. It may be a String or an object with many {\&quot;key\&quot;:\&quot;value\&quot;} pairs.  The type depends on the cypher mount&#39;s capabilities and what type of data was written to the key.  For example the &#x60;secret/&#x60; mount allows either a string or an object, while the &#x60;password/&#x60; mount will always store and return a string. This endpoint can also create a key. This only applies to mount types &#x60;uuid&#x60;, &#x60;key&#x60;, &#x60;password&#x60;.  Refer to the &#x60;POST&#x60; endpoint for more information. 
     * @param cypherPath The cypher key including the mount prefix. (required)
     * @param leaseToken An execution lease token. (optional)
     * @param sort Sort order, the name of the property to sort by (optional, default to &quot;name&quot;)
     * @param direction Sort direction, use &#39;desc&#39; to reverse sort (optional, default to asc)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCypherKeyAsync(String cypherPath, String leaseToken, String sort, String direction, final ApiCallback<Model200Success> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCypherKeyValidateBeforeCall(cypherPath, leaseToken, sort, direction, _callback);
        Type localVarReturnType = new TypeToken<Model200Success>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listCypherKeys
     * @param leaseToken An execution lease token. (optional)
     * @param list This endpoint is available via the http method LIST. The GET method can be used to list keys as well, by passing the query parameter list&#x3D;true. (optional, default to false)
     * @param phrase Search phrase for partial matches on name or description (optional)
     * @param max Maximum number of records to return, -1 can be used to fetch all records (optional, default to 25l)
     * @param offset Offset records, the number of records to skip, for paginating requests (optional, default to 0l)
     * @param sort Sort order, the name of the property to sort by (optional, default to &quot;name&quot;)
     * @param direction Sort direction, use &#39;desc&#39; to reverse sort (optional, default to asc)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCypherKeysCall(String leaseToken, Boolean list, String phrase, Long max, Long offset, String sort, String direction, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/cypher";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (leaseToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("leaseToken", leaseToken));
        }

        if (list != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("list", list));
        }

        if (phrase != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("phrase", phrase));
        }

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth", "cypherAuth-XCToken", "cypherAuth-XMLease", "cypherAuth-XVToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCypherKeysValidateBeforeCall(String leaseToken, Boolean list, String phrase, Long max, Long offset, String sort, String direction, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listCypherKeysCall(leaseToken, list, phrase, max, offset, sort, direction, _callback);
        return localVarCall;

    }

    /**
     * List Cypher Keys
     * This endpoint retrieves all cypher keys associated with the account, or user.  This method can be used to list keys as well, by passing the query parameter list&#x3D;true.
     * @param leaseToken An execution lease token. (optional)
     * @param list This endpoint is available via the http method LIST. The GET method can be used to list keys as well, by passing the query parameter list&#x3D;true. (optional, default to false)
     * @param phrase Search phrase for partial matches on name or description (optional)
     * @param max Maximum number of records to return, -1 can be used to fetch all records (optional, default to 25l)
     * @param offset Offset records, the number of records to skip, for paginating requests (optional, default to 0l)
     * @param sort Sort order, the name of the property to sort by (optional, default to &quot;name&quot;)
     * @param direction Sort direction, use &#39;desc&#39; to reverse sort (optional, default to asc)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public Object listCypherKeys(String leaseToken, Boolean list, String phrase, Long max, Long offset, String sort, String direction) throws ApiException {
        ApiResponse<Object> localVarResp = listCypherKeysWithHttpInfo(leaseToken, list, phrase, max, offset, sort, direction);
        return localVarResp.getData();
    }

    /**
     * List Cypher Keys
     * This endpoint retrieves all cypher keys associated with the account, or user.  This method can be used to list keys as well, by passing the query parameter list&#x3D;true.
     * @param leaseToken An execution lease token. (optional)
     * @param list This endpoint is available via the http method LIST. The GET method can be used to list keys as well, by passing the query parameter list&#x3D;true. (optional, default to false)
     * @param phrase Search phrase for partial matches on name or description (optional)
     * @param max Maximum number of records to return, -1 can be used to fetch all records (optional, default to 25l)
     * @param offset Offset records, the number of records to skip, for paginating requests (optional, default to 0l)
     * @param sort Sort order, the name of the property to sort by (optional, default to &quot;name&quot;)
     * @param direction Sort direction, use &#39;desc&#39; to reverse sort (optional, default to asc)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> listCypherKeysWithHttpInfo(String leaseToken, Boolean list, String phrase, Long max, Long offset, String sort, String direction) throws ApiException {
        okhttp3.Call localVarCall = listCypherKeysValidateBeforeCall(leaseToken, list, phrase, max, offset, sort, direction, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Cypher Keys (asynchronously)
     * This endpoint retrieves all cypher keys associated with the account, or user.  This method can be used to list keys as well, by passing the query parameter list&#x3D;true.
     * @param leaseToken An execution lease token. (optional)
     * @param list This endpoint is available via the http method LIST. The GET method can be used to list keys as well, by passing the query parameter list&#x3D;true. (optional, default to false)
     * @param phrase Search phrase for partial matches on name or description (optional)
     * @param max Maximum number of records to return, -1 can be used to fetch all records (optional, default to 25l)
     * @param offset Offset records, the number of records to skip, for paginating requests (optional, default to 0l)
     * @param sort Sort order, the name of the property to sort by (optional, default to &quot;name&quot;)
     * @param direction Sort direction, use &#39;desc&#39; to reverse sort (optional, default to asc)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCypherKeysAsync(String leaseToken, Boolean list, String phrase, Long max, Long offset, String sort, String direction, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCypherKeysValidateBeforeCall(leaseToken, list, phrase, max, offset, sort, direction, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeCypher
     * @param cypherPath The cypher key including the mount prefix. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeCypherCall(String cypherPath, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/cypher/{cypherPath}"
            .replaceAll("\\{" + "cypherPath" + "\\}", localVarApiClient.escapeString(cypherPath.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeCypherValidateBeforeCall(String cypherPath, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'cypherPath' is set
        if (cypherPath == null) {
            throw new ApiException("Missing the required parameter 'cypherPath' when calling removeCypher(Async)");
        }
        

        okhttp3.Call localVarCall = removeCypherCall(cypherPath, _callback);
        return localVarCall;

    }

    /**
     * Delete a Cypher
     * Will delete a cypher from the system and make it no longer usable. 
     * @param cypherPath The cypher key including the mount prefix. (required)
     * @return Model200Success
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public Model200Success removeCypher(String cypherPath) throws ApiException {
        ApiResponse<Model200Success> localVarResp = removeCypherWithHttpInfo(cypherPath);
        return localVarResp.getData();
    }

    /**
     * Delete a Cypher
     * Will delete a cypher from the system and make it no longer usable. 
     * @param cypherPath The cypher key including the mount prefix. (required)
     * @return ApiResponse&lt;Model200Success&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Model200Success> removeCypherWithHttpInfo(String cypherPath) throws ApiException {
        okhttp3.Call localVarCall = removeCypherValidateBeforeCall(cypherPath, null);
        Type localVarReturnType = new TypeToken<Model200Success>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a Cypher (asynchronously)
     * Will delete a cypher from the system and make it no longer usable. 
     * @param cypherPath The cypher key including the mount prefix. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeCypherAsync(String cypherPath, final ApiCallback<Model200Success> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeCypherValidateBeforeCall(cypherPath, _callback);
        Type localVarReturnType = new TypeToken<Model200Success>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
