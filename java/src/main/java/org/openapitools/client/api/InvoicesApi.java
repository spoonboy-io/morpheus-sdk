/*
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DefaultError;
import org.openapitools.client.model.InlineObject102;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class InvoicesApi {
    private ApiClient localVarApiClient;

    public InvoicesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public InvoicesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for getInvoiceLineItems
     * @param id Morpheus ID of the Object being referenced (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Invoice Line Item Object </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getInvoiceLineItemsCall(Long id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/invoice-line-items/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInvoiceLineItemsValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getInvoiceLineItems(Async)");
        }
        

        okhttp3.Call localVarCall = getInvoiceLineItemsCall(id, _callback);
        return localVarCall;

    }

    /**
     * Get a Specific Invoice Line Item
     * Get details about a specific invoice line item.
     * @param id Morpheus ID of the Object being referenced (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Invoice Line Item Object </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public Object getInvoiceLineItems(Long id) throws ApiException {
        ApiResponse<Object> localVarResp = getInvoiceLineItemsWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get a Specific Invoice Line Item
     * Get details about a specific invoice line item.
     * @param id Morpheus ID of the Object being referenced (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Invoice Line Item Object </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getInvoiceLineItemsWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = getInvoiceLineItemsValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a Specific Invoice Line Item (asynchronously)
     * Get details about a specific invoice line item.
     * @param id Morpheus ID of the Object being referenced (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Invoice Line Item Object </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getInvoiceLineItemsAsync(Long id, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInvoiceLineItemsValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getInvoices
     * @param id Morpheus ID of the Object being referenced (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Invoice Object </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getInvoicesCall(Long id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/invoices/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInvoicesValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getInvoices(Async)");
        }
        

        okhttp3.Call localVarCall = getInvoicesCall(id, _callback);
        return localVarCall;

    }

    /**
     * Get a Specific Invoice
     * Get details about a specific invoice.
     * @param id Morpheus ID of the Object being referenced (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Invoice Object </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public Object getInvoices(Long id) throws ApiException {
        ApiResponse<Object> localVarResp = getInvoicesWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get a Specific Invoice
     * Get details about a specific invoice.
     * @param id Morpheus ID of the Object being referenced (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Invoice Object </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getInvoicesWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = getInvoicesValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a Specific Invoice (asynchronously)
     * Get details about a specific invoice.
     * @param id Morpheus ID of the Object being referenced (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Invoice Object </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getInvoicesAsync(Long id, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInvoicesValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listInvoiceLineItems
     * @param max Maximum number of records to return, -1 can be used to fetch all records (optional, default to 25l)
     * @param offset Offset records, the number of records to skip, for paginating requests (optional, default to 0l)
     * @param sort Sort order, the name of the property to sort by (optional, default to &quot;name&quot;)
     * @param direction Sort direction, use &#39;desc&#39; to reverse sort (optional, default to asc)
     * @param phrase Search phrase for partial matches on name or description (optional)
     * @param name Filter by name, wildcard may be specified as %, eg. example-% (optional)
     * @param startDate Filter by startDate greater than or equal to a specified date (optional)
     * @param endDate Filter by endDate less than or equal to a specified date (optional)
     * @param period Only return records for period that matches with the specified value. This is an alternative to using startDate/endDate. Format is YYYY or YYYYMM.  (optional)
     * @param refType If specified will return an exact match on refType.  (optional)
     * @param refId If specified will return an exact match on refId (optional)
     * @param zoneId The Zone ID for Filtering (optional)
     * @param siteId The Site ID for Filtering (optional)
     * @param instanceId The Instance ID for Filtering (optional)
     * @param containerId The Container ID for Filtering (optional)
     * @param serverId The Server ID for Filtering (optional)
     * @param userId Filter by User ID (optional)
     * @param projectId The Project ID for Filtering (optional)
     * @param active True or False flag for Active (optional)
     * @param accountId Filter by Tenant ID. This is only available to master tenant users with permission to manage tenants and users. (optional)
     * @param includeTotals Pass true to include the summed totals (cost/price values) for all the invoices found in the query. The returned property is called &#x60;invoiceTotals&#x60;.  (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Invoice Line Items </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listInvoiceLineItemsCall(Long max, Long offset, String sort, String direction, String phrase, String name, String startDate, String endDate, String period, String refType, Long refId, Long zoneId, Long siteId, Long instanceId, Long containerId, Long serverId, Long userId, Long projectId, Boolean active, Long accountId, Boolean includeTotals, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/invoice-line-items";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (phrase != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("phrase", phrase));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDate", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDate", endDate));
        }

        if (period != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("period", period));
        }

        if (refType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("refType", refType));
        }

        if (refId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("refId", refId));
        }

        if (zoneId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("zoneId", zoneId));
        }

        if (siteId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("siteId", siteId));
        }

        if (instanceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("instanceId", instanceId));
        }

        if (containerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("containerId", containerId));
        }

        if (serverId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serverId", serverId));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        if (projectId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("projectId", projectId));
        }

        if (active != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("active", active));
        }

        if (accountId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accountId", accountId));
        }

        if (includeTotals != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeTotals", includeTotals));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listInvoiceLineItemsValidateBeforeCall(Long max, Long offset, String sort, String direction, String phrase, String name, String startDate, String endDate, String period, String refType, Long refId, Long zoneId, Long siteId, Long instanceId, Long containerId, Long serverId, Long userId, Long projectId, Boolean active, Long accountId, Boolean includeTotals, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listInvoiceLineItemsCall(max, offset, sort, direction, phrase, name, startDate, endDate, period, refType, refId, zoneId, siteId, instanceId, containerId, serverId, userId, projectId, active, accountId, includeTotals, _callback);
        return localVarCall;

    }

    /**
     * List All Invoice Line Items
     * This endpoint retrieves a list of all invoice line items for the specified parameters.
     * @param max Maximum number of records to return, -1 can be used to fetch all records (optional, default to 25l)
     * @param offset Offset records, the number of records to skip, for paginating requests (optional, default to 0l)
     * @param sort Sort order, the name of the property to sort by (optional, default to &quot;name&quot;)
     * @param direction Sort direction, use &#39;desc&#39; to reverse sort (optional, default to asc)
     * @param phrase Search phrase for partial matches on name or description (optional)
     * @param name Filter by name, wildcard may be specified as %, eg. example-% (optional)
     * @param startDate Filter by startDate greater than or equal to a specified date (optional)
     * @param endDate Filter by endDate less than or equal to a specified date (optional)
     * @param period Only return records for period that matches with the specified value. This is an alternative to using startDate/endDate. Format is YYYY or YYYYMM.  (optional)
     * @param refType If specified will return an exact match on refType.  (optional)
     * @param refId If specified will return an exact match on refId (optional)
     * @param zoneId The Zone ID for Filtering (optional)
     * @param siteId The Site ID for Filtering (optional)
     * @param instanceId The Instance ID for Filtering (optional)
     * @param containerId The Container ID for Filtering (optional)
     * @param serverId The Server ID for Filtering (optional)
     * @param userId Filter by User ID (optional)
     * @param projectId The Project ID for Filtering (optional)
     * @param active True or False flag for Active (optional)
     * @param accountId Filter by Tenant ID. This is only available to master tenant users with permission to manage tenants and users. (optional)
     * @param includeTotals Pass true to include the summed totals (cost/price values) for all the invoices found in the query. The returned property is called &#x60;invoiceTotals&#x60;.  (optional, default to false)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Invoice Line Items </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public Object listInvoiceLineItems(Long max, Long offset, String sort, String direction, String phrase, String name, String startDate, String endDate, String period, String refType, Long refId, Long zoneId, Long siteId, Long instanceId, Long containerId, Long serverId, Long userId, Long projectId, Boolean active, Long accountId, Boolean includeTotals) throws ApiException {
        ApiResponse<Object> localVarResp = listInvoiceLineItemsWithHttpInfo(max, offset, sort, direction, phrase, name, startDate, endDate, period, refType, refId, zoneId, siteId, instanceId, containerId, serverId, userId, projectId, active, accountId, includeTotals);
        return localVarResp.getData();
    }

    /**
     * List All Invoice Line Items
     * This endpoint retrieves a list of all invoice line items for the specified parameters.
     * @param max Maximum number of records to return, -1 can be used to fetch all records (optional, default to 25l)
     * @param offset Offset records, the number of records to skip, for paginating requests (optional, default to 0l)
     * @param sort Sort order, the name of the property to sort by (optional, default to &quot;name&quot;)
     * @param direction Sort direction, use &#39;desc&#39; to reverse sort (optional, default to asc)
     * @param phrase Search phrase for partial matches on name or description (optional)
     * @param name Filter by name, wildcard may be specified as %, eg. example-% (optional)
     * @param startDate Filter by startDate greater than or equal to a specified date (optional)
     * @param endDate Filter by endDate less than or equal to a specified date (optional)
     * @param period Only return records for period that matches with the specified value. This is an alternative to using startDate/endDate. Format is YYYY or YYYYMM.  (optional)
     * @param refType If specified will return an exact match on refType.  (optional)
     * @param refId If specified will return an exact match on refId (optional)
     * @param zoneId The Zone ID for Filtering (optional)
     * @param siteId The Site ID for Filtering (optional)
     * @param instanceId The Instance ID for Filtering (optional)
     * @param containerId The Container ID for Filtering (optional)
     * @param serverId The Server ID for Filtering (optional)
     * @param userId Filter by User ID (optional)
     * @param projectId The Project ID for Filtering (optional)
     * @param active True or False flag for Active (optional)
     * @param accountId Filter by Tenant ID. This is only available to master tenant users with permission to manage tenants and users. (optional)
     * @param includeTotals Pass true to include the summed totals (cost/price values) for all the invoices found in the query. The returned property is called &#x60;invoiceTotals&#x60;.  (optional, default to false)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Invoice Line Items </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> listInvoiceLineItemsWithHttpInfo(Long max, Long offset, String sort, String direction, String phrase, String name, String startDate, String endDate, String period, String refType, Long refId, Long zoneId, Long siteId, Long instanceId, Long containerId, Long serverId, Long userId, Long projectId, Boolean active, Long accountId, Boolean includeTotals) throws ApiException {
        okhttp3.Call localVarCall = listInvoiceLineItemsValidateBeforeCall(max, offset, sort, direction, phrase, name, startDate, endDate, period, refType, refId, zoneId, siteId, instanceId, containerId, serverId, userId, projectId, active, accountId, includeTotals, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List All Invoice Line Items (asynchronously)
     * This endpoint retrieves a list of all invoice line items for the specified parameters.
     * @param max Maximum number of records to return, -1 can be used to fetch all records (optional, default to 25l)
     * @param offset Offset records, the number of records to skip, for paginating requests (optional, default to 0l)
     * @param sort Sort order, the name of the property to sort by (optional, default to &quot;name&quot;)
     * @param direction Sort direction, use &#39;desc&#39; to reverse sort (optional, default to asc)
     * @param phrase Search phrase for partial matches on name or description (optional)
     * @param name Filter by name, wildcard may be specified as %, eg. example-% (optional)
     * @param startDate Filter by startDate greater than or equal to a specified date (optional)
     * @param endDate Filter by endDate less than or equal to a specified date (optional)
     * @param period Only return records for period that matches with the specified value. This is an alternative to using startDate/endDate. Format is YYYY or YYYYMM.  (optional)
     * @param refType If specified will return an exact match on refType.  (optional)
     * @param refId If specified will return an exact match on refId (optional)
     * @param zoneId The Zone ID for Filtering (optional)
     * @param siteId The Site ID for Filtering (optional)
     * @param instanceId The Instance ID for Filtering (optional)
     * @param containerId The Container ID for Filtering (optional)
     * @param serverId The Server ID for Filtering (optional)
     * @param userId Filter by User ID (optional)
     * @param projectId The Project ID for Filtering (optional)
     * @param active True or False flag for Active (optional)
     * @param accountId Filter by Tenant ID. This is only available to master tenant users with permission to manage tenants and users. (optional)
     * @param includeTotals Pass true to include the summed totals (cost/price values) for all the invoices found in the query. The returned property is called &#x60;invoiceTotals&#x60;.  (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Invoice Line Items </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listInvoiceLineItemsAsync(Long max, Long offset, String sort, String direction, String phrase, String name, String startDate, String endDate, String period, String refType, Long refId, Long zoneId, Long siteId, Long instanceId, Long containerId, Long serverId, Long userId, Long projectId, Boolean active, Long accountId, Boolean includeTotals, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = listInvoiceLineItemsValidateBeforeCall(max, offset, sort, direction, phrase, name, startDate, endDate, period, refType, refId, zoneId, siteId, instanceId, containerId, serverId, userId, projectId, active, accountId, includeTotals, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listInvoices
     * @param max Maximum number of records to return, -1 can be used to fetch all records (optional, default to 25l)
     * @param offset Offset records, the number of records to skip, for paginating requests (optional, default to 0l)
     * @param sort Sort order, the name of the property to sort by (optional, default to &quot;refName&quot;)
     * @param direction Sort direction, use &#39;desc&#39; to reverse sort (optional, default to asc)
     * @param phrase Search phrase for partial matches on name or description (optional)
     * @param name Filter by name, wildcard may be specified as %, eg. example-% (optional)
     * @param startDate Filter by startDate greater than or equal to a specified date (optional)
     * @param endDate Filter by endDate less than or equal to a specified date (optional)
     * @param period Only return records for period that matches with the specified value. This is an alternative to using startDate/endDate. Format is YYYY or YYYYMM.  (optional)
     * @param refType If specified will return an exact match on refType.  (optional)
     * @param refId If specified will return an exact match on refId (optional)
     * @param refStatus If specified, will filter on the associated StorageVolume status. This is only applicable whn &#x60;refType&#x3D;StorageVolume&#x60;.  (optional)
     * @param zoneId The Zone ID for Filtering (optional)
     * @param siteId The Site ID for Filtering (optional)
     * @param instanceId The Instance ID for Filtering (optional)
     * @param containerId The Container ID for Filtering (optional)
     * @param serverId The Server ID for Filtering (optional)
     * @param userId Filter by User ID (optional)
     * @param projectId The Project ID for Filtering (optional)
     * @param active True or False flag for Active (optional)
     * @param accountId Filter by Tenant ID. This is only available to master tenant users with permission to manage tenants and users. (optional)
     * @param includeLineItems Pass true to include the list of &#x60;lineItems&#x60; for each invoice. Only &#x60;lineItemCount&#x60; is returned by default.  (optional, default to false)
     * @param includeTotals Pass true to include the summed totals (cost/price values) for all the invoices found in the query. The returned property is called &#x60;invoiceTotals&#x60;.  (optional, default to false)
     * @param tags Filter by tags (metadata). This allows filtering by a tag name and value(s)  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Invoices </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listInvoicesCall(Long max, Long offset, String sort, String direction, String phrase, String name, String startDate, String endDate, String period, String refType, Long refId, String refStatus, Long zoneId, Long siteId, Long instanceId, Long containerId, Long serverId, Long userId, Long projectId, Boolean active, Long accountId, Boolean includeLineItems, Boolean includeTotals, String tags, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/invoices";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (phrase != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("phrase", phrase));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDate", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDate", endDate));
        }

        if (period != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("period", period));
        }

        if (refType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("refType", refType));
        }

        if (refId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("refId", refId));
        }

        if (refStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("refStatus", refStatus));
        }

        if (zoneId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("zoneId", zoneId));
        }

        if (siteId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("siteId", siteId));
        }

        if (instanceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("instanceId", instanceId));
        }

        if (containerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("containerId", containerId));
        }

        if (serverId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serverId", serverId));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        if (projectId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("projectId", projectId));
        }

        if (active != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("active", active));
        }

        if (accountId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accountId", accountId));
        }

        if (includeLineItems != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeLineItems", includeLineItems));
        }

        if (includeTotals != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeTotals", includeTotals));
        }

        if (tags != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tags", tags));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listInvoicesValidateBeforeCall(Long max, Long offset, String sort, String direction, String phrase, String name, String startDate, String endDate, String period, String refType, Long refId, String refStatus, Long zoneId, Long siteId, Long instanceId, Long containerId, Long serverId, Long userId, Long projectId, Boolean active, Long accountId, Boolean includeLineItems, Boolean includeTotals, String tags, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listInvoicesCall(max, offset, sort, direction, phrase, name, startDate, endDate, period, refType, refId, refStatus, zoneId, siteId, instanceId, containerId, serverId, userId, projectId, active, accountId, includeLineItems, includeTotals, tags, _callback);
        return localVarCall;

    }

    /**
     * List All Invoices
     * This endpoint retrieves a list of invoices for the specified parameters.
     * @param max Maximum number of records to return, -1 can be used to fetch all records (optional, default to 25l)
     * @param offset Offset records, the number of records to skip, for paginating requests (optional, default to 0l)
     * @param sort Sort order, the name of the property to sort by (optional, default to &quot;refName&quot;)
     * @param direction Sort direction, use &#39;desc&#39; to reverse sort (optional, default to asc)
     * @param phrase Search phrase for partial matches on name or description (optional)
     * @param name Filter by name, wildcard may be specified as %, eg. example-% (optional)
     * @param startDate Filter by startDate greater than or equal to a specified date (optional)
     * @param endDate Filter by endDate less than or equal to a specified date (optional)
     * @param period Only return records for period that matches with the specified value. This is an alternative to using startDate/endDate. Format is YYYY or YYYYMM.  (optional)
     * @param refType If specified will return an exact match on refType.  (optional)
     * @param refId If specified will return an exact match on refId (optional)
     * @param refStatus If specified, will filter on the associated StorageVolume status. This is only applicable whn &#x60;refType&#x3D;StorageVolume&#x60;.  (optional)
     * @param zoneId The Zone ID for Filtering (optional)
     * @param siteId The Site ID for Filtering (optional)
     * @param instanceId The Instance ID for Filtering (optional)
     * @param containerId The Container ID for Filtering (optional)
     * @param serverId The Server ID for Filtering (optional)
     * @param userId Filter by User ID (optional)
     * @param projectId The Project ID for Filtering (optional)
     * @param active True or False flag for Active (optional)
     * @param accountId Filter by Tenant ID. This is only available to master tenant users with permission to manage tenants and users. (optional)
     * @param includeLineItems Pass true to include the list of &#x60;lineItems&#x60; for each invoice. Only &#x60;lineItemCount&#x60; is returned by default.  (optional, default to false)
     * @param includeTotals Pass true to include the summed totals (cost/price values) for all the invoices found in the query. The returned property is called &#x60;invoiceTotals&#x60;.  (optional, default to false)
     * @param tags Filter by tags (metadata). This allows filtering by a tag name and value(s)  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Invoices </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public Object listInvoices(Long max, Long offset, String sort, String direction, String phrase, String name, String startDate, String endDate, String period, String refType, Long refId, String refStatus, Long zoneId, Long siteId, Long instanceId, Long containerId, Long serverId, Long userId, Long projectId, Boolean active, Long accountId, Boolean includeLineItems, Boolean includeTotals, String tags) throws ApiException {
        ApiResponse<Object> localVarResp = listInvoicesWithHttpInfo(max, offset, sort, direction, phrase, name, startDate, endDate, period, refType, refId, refStatus, zoneId, siteId, instanceId, containerId, serverId, userId, projectId, active, accountId, includeLineItems, includeTotals, tags);
        return localVarResp.getData();
    }

    /**
     * List All Invoices
     * This endpoint retrieves a list of invoices for the specified parameters.
     * @param max Maximum number of records to return, -1 can be used to fetch all records (optional, default to 25l)
     * @param offset Offset records, the number of records to skip, for paginating requests (optional, default to 0l)
     * @param sort Sort order, the name of the property to sort by (optional, default to &quot;refName&quot;)
     * @param direction Sort direction, use &#39;desc&#39; to reverse sort (optional, default to asc)
     * @param phrase Search phrase for partial matches on name or description (optional)
     * @param name Filter by name, wildcard may be specified as %, eg. example-% (optional)
     * @param startDate Filter by startDate greater than or equal to a specified date (optional)
     * @param endDate Filter by endDate less than or equal to a specified date (optional)
     * @param period Only return records for period that matches with the specified value. This is an alternative to using startDate/endDate. Format is YYYY or YYYYMM.  (optional)
     * @param refType If specified will return an exact match on refType.  (optional)
     * @param refId If specified will return an exact match on refId (optional)
     * @param refStatus If specified, will filter on the associated StorageVolume status. This is only applicable whn &#x60;refType&#x3D;StorageVolume&#x60;.  (optional)
     * @param zoneId The Zone ID for Filtering (optional)
     * @param siteId The Site ID for Filtering (optional)
     * @param instanceId The Instance ID for Filtering (optional)
     * @param containerId The Container ID for Filtering (optional)
     * @param serverId The Server ID for Filtering (optional)
     * @param userId Filter by User ID (optional)
     * @param projectId The Project ID for Filtering (optional)
     * @param active True or False flag for Active (optional)
     * @param accountId Filter by Tenant ID. This is only available to master tenant users with permission to manage tenants and users. (optional)
     * @param includeLineItems Pass true to include the list of &#x60;lineItems&#x60; for each invoice. Only &#x60;lineItemCount&#x60; is returned by default.  (optional, default to false)
     * @param includeTotals Pass true to include the summed totals (cost/price values) for all the invoices found in the query. The returned property is called &#x60;invoiceTotals&#x60;.  (optional, default to false)
     * @param tags Filter by tags (metadata). This allows filtering by a tag name and value(s)  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Invoices </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> listInvoicesWithHttpInfo(Long max, Long offset, String sort, String direction, String phrase, String name, String startDate, String endDate, String period, String refType, Long refId, String refStatus, Long zoneId, Long siteId, Long instanceId, Long containerId, Long serverId, Long userId, Long projectId, Boolean active, Long accountId, Boolean includeLineItems, Boolean includeTotals, String tags) throws ApiException {
        okhttp3.Call localVarCall = listInvoicesValidateBeforeCall(max, offset, sort, direction, phrase, name, startDate, endDate, period, refType, refId, refStatus, zoneId, siteId, instanceId, containerId, serverId, userId, projectId, active, accountId, includeLineItems, includeTotals, tags, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List All Invoices (asynchronously)
     * This endpoint retrieves a list of invoices for the specified parameters.
     * @param max Maximum number of records to return, -1 can be used to fetch all records (optional, default to 25l)
     * @param offset Offset records, the number of records to skip, for paginating requests (optional, default to 0l)
     * @param sort Sort order, the name of the property to sort by (optional, default to &quot;refName&quot;)
     * @param direction Sort direction, use &#39;desc&#39; to reverse sort (optional, default to asc)
     * @param phrase Search phrase for partial matches on name or description (optional)
     * @param name Filter by name, wildcard may be specified as %, eg. example-% (optional)
     * @param startDate Filter by startDate greater than or equal to a specified date (optional)
     * @param endDate Filter by endDate less than or equal to a specified date (optional)
     * @param period Only return records for period that matches with the specified value. This is an alternative to using startDate/endDate. Format is YYYY or YYYYMM.  (optional)
     * @param refType If specified will return an exact match on refType.  (optional)
     * @param refId If specified will return an exact match on refId (optional)
     * @param refStatus If specified, will filter on the associated StorageVolume status. This is only applicable whn &#x60;refType&#x3D;StorageVolume&#x60;.  (optional)
     * @param zoneId The Zone ID for Filtering (optional)
     * @param siteId The Site ID for Filtering (optional)
     * @param instanceId The Instance ID for Filtering (optional)
     * @param containerId The Container ID for Filtering (optional)
     * @param serverId The Server ID for Filtering (optional)
     * @param userId Filter by User ID (optional)
     * @param projectId The Project ID for Filtering (optional)
     * @param active True or False flag for Active (optional)
     * @param accountId Filter by Tenant ID. This is only available to master tenant users with permission to manage tenants and users. (optional)
     * @param includeLineItems Pass true to include the list of &#x60;lineItems&#x60; for each invoice. Only &#x60;lineItemCount&#x60; is returned by default.  (optional, default to false)
     * @param includeTotals Pass true to include the summed totals (cost/price values) for all the invoices found in the query. The returned property is called &#x60;invoiceTotals&#x60;.  (optional, default to false)
     * @param tags Filter by tags (metadata). This allows filtering by a tag name and value(s)  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Invoices </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listInvoicesAsync(Long max, Long offset, String sort, String direction, String phrase, String name, String startDate, String endDate, String period, String refType, Long refId, String refStatus, Long zoneId, Long siteId, Long instanceId, Long containerId, Long serverId, Long userId, Long projectId, Boolean active, Long accountId, Boolean includeLineItems, Boolean includeTotals, String tags, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = listInvoicesValidateBeforeCall(max, offset, sort, direction, phrase, name, startDate, endDate, period, refType, refId, refStatus, zoneId, siteId, instanceId, containerId, serverId, userId, projectId, active, accountId, includeLineItems, includeTotals, tags, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateInvoices
     * @param id Morpheus ID of the Object being referenced (required)
     * @param inlineObject102  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Invoice Object </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateInvoicesCall(Long id, InlineObject102 inlineObject102, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = inlineObject102;

        // create path and map variables
        String localVarPath = "/api/invoices/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateInvoicesValidateBeforeCall(Long id, InlineObject102 inlineObject102, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateInvoices(Async)");
        }
        

        okhttp3.Call localVarCall = updateInvoicesCall(id, inlineObject102, _callback);
        return localVarCall;

    }

    /**
     * Update Invoice Tags
     * Update, Add, or Remove invoice tag(s).
     * @param id Morpheus ID of the Object being referenced (required)
     * @param inlineObject102  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Invoice Object </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public Object updateInvoices(Long id, InlineObject102 inlineObject102) throws ApiException {
        ApiResponse<Object> localVarResp = updateInvoicesWithHttpInfo(id, inlineObject102);
        return localVarResp.getData();
    }

    /**
     * Update Invoice Tags
     * Update, Add, or Remove invoice tag(s).
     * @param id Morpheus ID of the Object being referenced (required)
     * @param inlineObject102  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Invoice Object </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateInvoicesWithHttpInfo(Long id, InlineObject102 inlineObject102) throws ApiException {
        okhttp3.Call localVarCall = updateInvoicesValidateBeforeCall(id, inlineObject102, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Invoice Tags (asynchronously)
     * Update, Add, or Remove invoice tag(s).
     * @param id Morpheus ID of the Object being referenced (required)
     * @param inlineObject102  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Invoice Object </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateInvoicesAsync(Long id, InlineObject102 inlineObject102, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateInvoicesValidateBeforeCall(id, inlineObject102, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
