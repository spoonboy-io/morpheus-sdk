/*
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AnyOfobjectmeta;
import org.openapitools.client.model.DefaultError;
import org.openapitools.client.model.InlineObject100;
import org.openapitools.client.model.InlineObject101;
import org.openapitools.client.model.InlineResponse20061;
import org.openapitools.client.model.InlineResponse20062;
import org.openapitools.client.model.InlineResponse20063;
import org.openapitools.client.model.InlineResponse20064;
import org.openapitools.client.model.InlineResponse20065;
import org.openapitools.client.model.Model200Success;
import org.openapitools.client.model.OneOfintegrationConfigintegrationAnsibleConfigintegrationSNOWConfigintegrationSaltMasterConfigintegrationDockerRepoConfigintegrationGitRepoConfigintegrationGitHubConfig;
import org.openapitools.client.model.UNKNOWN_BASE_TYPE;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class IntegrationsApi {
    private ApiClient localVarApiClient;

    public IntegrationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public IntegrationsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for addIntegrationSnowObjects
     * @param id Morpheus ID of the Object being referenced (required)
     * @param inlineObject100  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addIntegrationSnowObjectsCall(Long id, InlineObject100 inlineObject100, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = inlineObject100;

        // create path and map variables
        String localVarPath = "/api/integrations/{id}/objects"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addIntegrationSnowObjectsValidateBeforeCall(Long id, InlineObject100 inlineObject100, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling addIntegrationSnowObjects(Async)");
        }
        

        okhttp3.Call localVarCall = addIntegrationSnowObjectsCall(id, inlineObject100, _callback);
        return localVarCall;

    }

    /**
     * Creates an Exposed ServiceNow Catalog Item
     * This endpoint creates an Exposed Catalog Item. This is an integration object of type &#x60;catalog&#x60; that references a &#x60;Catalog Item Type.&#x60; 
     * @param id Morpheus ID of the Object being referenced (required)
     * @param inlineObject100  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public Object addIntegrationSnowObjects(Long id, InlineObject100 inlineObject100) throws ApiException {
        ApiResponse<Object> localVarResp = addIntegrationSnowObjectsWithHttpInfo(id, inlineObject100);
        return localVarResp.getData();
    }

    /**
     * Creates an Exposed ServiceNow Catalog Item
     * This endpoint creates an Exposed Catalog Item. This is an integration object of type &#x60;catalog&#x60; that references a &#x60;Catalog Item Type.&#x60; 
     * @param id Morpheus ID of the Object being referenced (required)
     * @param inlineObject100  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> addIntegrationSnowObjectsWithHttpInfo(Long id, InlineObject100 inlineObject100) throws ApiException {
        okhttp3.Call localVarCall = addIntegrationSnowObjectsValidateBeforeCall(id, inlineObject100, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates an Exposed ServiceNow Catalog Item (asynchronously)
     * This endpoint creates an Exposed Catalog Item. This is an integration object of type &#x60;catalog&#x60; that references a &#x60;Catalog Item Type.&#x60; 
     * @param id Morpheus ID of the Object being referenced (required)
     * @param inlineObject100  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addIntegrationSnowObjectsAsync(Long id, InlineObject100 inlineObject100, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = addIntegrationSnowObjectsValidateBeforeCall(id, inlineObject100, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addIntegrations
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addIntegrationsCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = UNKNOWN_BASE_TYPE;

        // create path and map variables
        String localVarPath = "/api/integrations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addIntegrationsValidateBeforeCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = addIntegrationsCall(UNKNOWN_BASE_TYPE, _callback);
        return localVarCall;

    }

    /**
     * Creates an Integration
     * Creates an integration. 
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public Object addIntegrations(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        ApiResponse<Object> localVarResp = addIntegrationsWithHttpInfo(UNKNOWN_BASE_TYPE);
        return localVarResp.getData();
    }

    /**
     * Creates an Integration
     * Creates an integration. 
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> addIntegrationsWithHttpInfo(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        okhttp3.Call localVarCall = addIntegrationsValidateBeforeCall(UNKNOWN_BASE_TYPE, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates an Integration (asynchronously)
     * Creates an integration. 
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addIntegrationsAsync(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = addIntegrationsValidateBeforeCall(UNKNOWN_BASE_TYPE, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getIntegrationInventory
     * @param id Morpheus ID of the Integration (required)
     * @param inventoryId Morpheus ID of the Integration Inventory (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getIntegrationInventoryCall(Long id, Long inventoryId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/integrations/{id}/inventory/{inventoryId}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "inventoryId" + "\\}", localVarApiClient.escapeString(inventoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getIntegrationInventoryValidateBeforeCall(Long id, Long inventoryId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getIntegrationInventory(Async)");
        }
        
        // verify the required parameter 'inventoryId' is set
        if (inventoryId == null) {
            throw new ApiException("Missing the required parameter 'inventoryId' when calling getIntegrationInventory(Async)");
        }
        

        okhttp3.Call localVarCall = getIntegrationInventoryCall(id, inventoryId, _callback);
        return localVarCall;

    }

    /**
     * Get a Specific Integration Inventory
     * This endpoint retrieves a specific integration inventory. Only certain types of integrations support this operation, such as Ansible Tower. 
     * @param id Morpheus ID of the Integration (required)
     * @param inventoryId Morpheus ID of the Integration Inventory (required)
     * @return InlineResponse20065
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse20065 getIntegrationInventory(Long id, Long inventoryId) throws ApiException {
        ApiResponse<InlineResponse20065> localVarResp = getIntegrationInventoryWithHttpInfo(id, inventoryId);
        return localVarResp.getData();
    }

    /**
     * Get a Specific Integration Inventory
     * This endpoint retrieves a specific integration inventory. Only certain types of integrations support this operation, such as Ansible Tower. 
     * @param id Morpheus ID of the Integration (required)
     * @param inventoryId Morpheus ID of the Integration Inventory (required)
     * @return ApiResponse&lt;InlineResponse20065&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse20065> getIntegrationInventoryWithHttpInfo(Long id, Long inventoryId) throws ApiException {
        okhttp3.Call localVarCall = getIntegrationInventoryValidateBeforeCall(id, inventoryId, null);
        Type localVarReturnType = new TypeToken<InlineResponse20065>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a Specific Integration Inventory (asynchronously)
     * This endpoint retrieves a specific integration inventory. Only certain types of integrations support this operation, such as Ansible Tower. 
     * @param id Morpheus ID of the Integration (required)
     * @param inventoryId Morpheus ID of the Integration Inventory (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getIntegrationInventoryAsync(Long id, Long inventoryId, final ApiCallback<InlineResponse20065> _callback) throws ApiException {

        okhttp3.Call localVarCall = getIntegrationInventoryValidateBeforeCall(id, inventoryId, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse20065>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getIntegrationObjects
     * @param id Morpheus ID of the Object being referenced (required)
     * @param objectId Morpheus ID of the Object being created or referenced (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getIntegrationObjectsCall(Long id, Long objectId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/integrations/{id}/objects/{objectId}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "objectId" + "\\}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getIntegrationObjectsValidateBeforeCall(Long id, Long objectId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getIntegrationObjects(Async)");
        }
        
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling getIntegrationObjects(Async)");
        }
        

        okhttp3.Call localVarCall = getIntegrationObjectsCall(id, objectId, _callback);
        return localVarCall;

    }

    /**
     * Get a Specific ServiceNow Integration Object
     * This endpoint retrieves a specific ServiceNow integration object.
     * @param id Morpheus ID of the Object being referenced (required)
     * @param objectId Morpheus ID of the Object being created or referenced (required)
     * @return InlineResponse20064
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse20064 getIntegrationObjects(Long id, Long objectId) throws ApiException {
        ApiResponse<InlineResponse20064> localVarResp = getIntegrationObjectsWithHttpInfo(id, objectId);
        return localVarResp.getData();
    }

    /**
     * Get a Specific ServiceNow Integration Object
     * This endpoint retrieves a specific ServiceNow integration object.
     * @param id Morpheus ID of the Object being referenced (required)
     * @param objectId Morpheus ID of the Object being created or referenced (required)
     * @return ApiResponse&lt;InlineResponse20064&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse20064> getIntegrationObjectsWithHttpInfo(Long id, Long objectId) throws ApiException {
        okhttp3.Call localVarCall = getIntegrationObjectsValidateBeforeCall(id, objectId, null);
        Type localVarReturnType = new TypeToken<InlineResponse20064>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a Specific ServiceNow Integration Object (asynchronously)
     * This endpoint retrieves a specific ServiceNow integration object.
     * @param id Morpheus ID of the Object being referenced (required)
     * @param objectId Morpheus ID of the Object being created or referenced (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getIntegrationObjectsAsync(Long id, Long objectId, final ApiCallback<InlineResponse20064> _callback) throws ApiException {

        okhttp3.Call localVarCall = getIntegrationObjectsValidateBeforeCall(id, objectId, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse20064>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getIntegrationTypeOptionTypes
     * @param id Morpheus ID of the Object being referenced (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getIntegrationTypeOptionTypesCall(Long id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/integration-types/{id}/option-types"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getIntegrationTypeOptionTypesValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getIntegrationTypeOptionTypes(Async)");
        }
        

        okhttp3.Call localVarCall = getIntegrationTypeOptionTypesCall(id, _callback);
        return localVarCall;

    }

    /**
     * Retrieves a Option Types for a Specific Integration Type
     * This endpoint will retrieve the list of option types for a specific integration type. 
     * @param id Morpheus ID of the Object being referenced (required)
     * @return InlineResponse20062
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse20062 getIntegrationTypeOptionTypes(Long id) throws ApiException {
        ApiResponse<InlineResponse20062> localVarResp = getIntegrationTypeOptionTypesWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Retrieves a Option Types for a Specific Integration Type
     * This endpoint will retrieve the list of option types for a specific integration type. 
     * @param id Morpheus ID of the Object being referenced (required)
     * @return ApiResponse&lt;InlineResponse20062&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse20062> getIntegrationTypeOptionTypesWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = getIntegrationTypeOptionTypesValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<InlineResponse20062>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a Option Types for a Specific Integration Type (asynchronously)
     * This endpoint will retrieve the list of option types for a specific integration type. 
     * @param id Morpheus ID of the Object being referenced (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getIntegrationTypeOptionTypesAsync(Long id, final ApiCallback<InlineResponse20062> _callback) throws ApiException {

        okhttp3.Call localVarCall = getIntegrationTypeOptionTypesValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse20062>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getIntegrationTypes
     * @param id Morpheus ID of the Object being referenced (required)
     * @param optiontypes Pass &#x60;true&#x60; to include optionTypes in the response for each integration type (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getIntegrationTypesCall(Long id, Boolean optiontypes, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/integration-types/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optiontypes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("optiontypes", optiontypes));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getIntegrationTypesValidateBeforeCall(Long id, Boolean optiontypes, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getIntegrationTypes(Async)");
        }
        

        okhttp3.Call localVarCall = getIntegrationTypesCall(id, optiontypes, _callback);
        return localVarCall;

    }

    /**
     * Retrieves a Specific Integration Type
     * Retrieves a specific integration type. 
     * @param id Morpheus ID of the Object being referenced (required)
     * @param optiontypes Pass &#x60;true&#x60; to include optionTypes in the response for each integration type (optional, default to false)
     * @return InlineResponse20061
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse20061 getIntegrationTypes(Long id, Boolean optiontypes) throws ApiException {
        ApiResponse<InlineResponse20061> localVarResp = getIntegrationTypesWithHttpInfo(id, optiontypes);
        return localVarResp.getData();
    }

    /**
     * Retrieves a Specific Integration Type
     * Retrieves a specific integration type. 
     * @param id Morpheus ID of the Object being referenced (required)
     * @param optiontypes Pass &#x60;true&#x60; to include optionTypes in the response for each integration type (optional, default to false)
     * @return ApiResponse&lt;InlineResponse20061&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse20061> getIntegrationTypesWithHttpInfo(Long id, Boolean optiontypes) throws ApiException {
        okhttp3.Call localVarCall = getIntegrationTypesValidateBeforeCall(id, optiontypes, null);
        Type localVarReturnType = new TypeToken<InlineResponse20061>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a Specific Integration Type (asynchronously)
     * Retrieves a specific integration type. 
     * @param id Morpheus ID of the Object being referenced (required)
     * @param optiontypes Pass &#x60;true&#x60; to include optionTypes in the response for each integration type (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getIntegrationTypesAsync(Long id, Boolean optiontypes, final ApiCallback<InlineResponse20061> _callback) throws ApiException {

        okhttp3.Call localVarCall = getIntegrationTypesValidateBeforeCall(id, optiontypes, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse20061>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getIntegrations
     * @param id Morpheus ID of the Object being referenced (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getIntegrationsCall(Long id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/integrations/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getIntegrationsValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getIntegrations(Async)");
        }
        

        okhttp3.Call localVarCall = getIntegrationsCall(id, _callback);
        return localVarCall;

    }

    /**
     * Retrieves a Specific Integration
     * Retrieves a specific integration. 
     * @param id Morpheus ID of the Object being referenced (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public Object getIntegrations(Long id) throws ApiException {
        ApiResponse<Object> localVarResp = getIntegrationsWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Retrieves a Specific Integration
     * Retrieves a specific integration. 
     * @param id Morpheus ID of the Object being referenced (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getIntegrationsWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = getIntegrationsValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a Specific Integration (asynchronously)
     * Retrieves a specific integration. 
     * @param id Morpheus ID of the Object being referenced (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getIntegrationsAsync(Long id, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getIntegrationsValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listIntegrationInventory
     * @param id Morpheus ID of the Integration (required)
     * @param max Maximum number of records to return, -1 can be used to fetch all records (optional, default to 25l)
     * @param offset Offset records, the number of records to skip, for paginating requests (optional, default to 0l)
     * @param sort Sort order, the name of the property to sort by (optional, default to &quot;name&quot;)
     * @param direction Sort direction, use &#39;desc&#39; to reverse sort (optional, default to asc)
     * @param phrase Search phrase for partial matches on name or description (optional)
     * @param name Filter by name, wildcard may be specified as %, eg. example-% (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listIntegrationInventoryCall(Long id, Long max, Long offset, String sort, String direction, String phrase, String name, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/integrations/{id}/inventory"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (phrase != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("phrase", phrase));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listIntegrationInventoryValidateBeforeCall(Long id, Long max, Long offset, String sort, String direction, String phrase, String name, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling listIntegrationInventory(Async)");
        }
        

        okhttp3.Call localVarCall = listIntegrationInventoryCall(id, max, offset, sort, direction, phrase, name, _callback);
        return localVarCall;

    }

    /**
     * Get All Integration Inventory
     * This endpoint retrieves a list of inventory for a specific integration. Only certain types of integrations support this operation, such as Ansible Tower. 
     * @param id Morpheus ID of the Integration (required)
     * @param max Maximum number of records to return, -1 can be used to fetch all records (optional, default to 25l)
     * @param offset Offset records, the number of records to skip, for paginating requests (optional, default to 0l)
     * @param sort Sort order, the name of the property to sort by (optional, default to &quot;name&quot;)
     * @param direction Sort direction, use &#39;desc&#39; to reverse sort (optional, default to asc)
     * @param phrase Search phrase for partial matches on name or description (optional)
     * @param name Filter by name, wildcard may be specified as %, eg. example-% (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public Object listIntegrationInventory(Long id, Long max, Long offset, String sort, String direction, String phrase, String name) throws ApiException {
        ApiResponse<Object> localVarResp = listIntegrationInventoryWithHttpInfo(id, max, offset, sort, direction, phrase, name);
        return localVarResp.getData();
    }

    /**
     * Get All Integration Inventory
     * This endpoint retrieves a list of inventory for a specific integration. Only certain types of integrations support this operation, such as Ansible Tower. 
     * @param id Morpheus ID of the Integration (required)
     * @param max Maximum number of records to return, -1 can be used to fetch all records (optional, default to 25l)
     * @param offset Offset records, the number of records to skip, for paginating requests (optional, default to 0l)
     * @param sort Sort order, the name of the property to sort by (optional, default to &quot;name&quot;)
     * @param direction Sort direction, use &#39;desc&#39; to reverse sort (optional, default to asc)
     * @param phrase Search phrase for partial matches on name or description (optional)
     * @param name Filter by name, wildcard may be specified as %, eg. example-% (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> listIntegrationInventoryWithHttpInfo(Long id, Long max, Long offset, String sort, String direction, String phrase, String name) throws ApiException {
        okhttp3.Call localVarCall = listIntegrationInventoryValidateBeforeCall(id, max, offset, sort, direction, phrase, name, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get All Integration Inventory (asynchronously)
     * This endpoint retrieves a list of inventory for a specific integration. Only certain types of integrations support this operation, such as Ansible Tower. 
     * @param id Morpheus ID of the Integration (required)
     * @param max Maximum number of records to return, -1 can be used to fetch all records (optional, default to 25l)
     * @param offset Offset records, the number of records to skip, for paginating requests (optional, default to 0l)
     * @param sort Sort order, the name of the property to sort by (optional, default to &quot;name&quot;)
     * @param direction Sort direction, use &#39;desc&#39; to reverse sort (optional, default to asc)
     * @param phrase Search phrase for partial matches on name or description (optional)
     * @param name Filter by name, wildcard may be specified as %, eg. example-% (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listIntegrationInventoryAsync(Long id, Long max, Long offset, String sort, String direction, String phrase, String name, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = listIntegrationInventoryValidateBeforeCall(id, max, offset, sort, direction, phrase, name, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listIntegrationObjects
     * @param id Morpheus ID of the Object being referenced (required)
     * @param max Maximum number of records to return, -1 can be used to fetch all records (optional, default to 25l)
     * @param offset Offset records, the number of records to skip, for paginating requests (optional, default to 0l)
     * @param sort Sort order, the name of the property to sort by (optional, default to &quot;name&quot;)
     * @param direction Sort direction, use &#39;desc&#39; to reverse sort (optional, default to asc)
     * @param phrase Search phrase for partial matches on name or description (optional)
     * @param name Filter by name, wildcard may be specified as %, eg. example-% (optional)
     * @param value The type of data being stored, string or object. The data type depends on the cypher mount being used. Most mounts use string as their data type, but secret uses object by default.  You can store a string instead by passing &#x60;type&#x3D;string&#x60;. This means the data value returned by the API will be a string instead of an object.  (optional)
     * @param refId If specified will return an exact match on refId (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listIntegrationObjectsCall(Long id, Long max, Long offset, String sort, String direction, String phrase, String name, String value, Long refId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/integrations/{id}/objects"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (phrase != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("phrase", phrase));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (value != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("value", value));
        }

        if (refId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("refId", refId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listIntegrationObjectsValidateBeforeCall(Long id, Long max, Long offset, String sort, String direction, String phrase, String name, String value, Long refId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling listIntegrationObjects(Async)");
        }
        

        okhttp3.Call localVarCall = listIntegrationObjectsCall(id, max, offset, sort, direction, phrase, name, value, refId, _callback);
        return localVarCall;

    }

    /**
     * Get ServiceNow Integration Objects
     * This endpoint retrieves a list of exposed objects for a specific ServiceNow integration. 
     * @param id Morpheus ID of the Object being referenced (required)
     * @param max Maximum number of records to return, -1 can be used to fetch all records (optional, default to 25l)
     * @param offset Offset records, the number of records to skip, for paginating requests (optional, default to 0l)
     * @param sort Sort order, the name of the property to sort by (optional, default to &quot;name&quot;)
     * @param direction Sort direction, use &#39;desc&#39; to reverse sort (optional, default to asc)
     * @param phrase Search phrase for partial matches on name or description (optional)
     * @param name Filter by name, wildcard may be specified as %, eg. example-% (optional)
     * @param value The type of data being stored, string or object. The data type depends on the cypher mount being used. Most mounts use string as their data type, but secret uses object by default.  You can store a string instead by passing &#x60;type&#x3D;string&#x60;. This means the data value returned by the API will be a string instead of an object.  (optional)
     * @param refId If specified will return an exact match on refId (optional)
     * @return InlineResponse20063
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse20063 listIntegrationObjects(Long id, Long max, Long offset, String sort, String direction, String phrase, String name, String value, Long refId) throws ApiException {
        ApiResponse<InlineResponse20063> localVarResp = listIntegrationObjectsWithHttpInfo(id, max, offset, sort, direction, phrase, name, value, refId);
        return localVarResp.getData();
    }

    /**
     * Get ServiceNow Integration Objects
     * This endpoint retrieves a list of exposed objects for a specific ServiceNow integration. 
     * @param id Morpheus ID of the Object being referenced (required)
     * @param max Maximum number of records to return, -1 can be used to fetch all records (optional, default to 25l)
     * @param offset Offset records, the number of records to skip, for paginating requests (optional, default to 0l)
     * @param sort Sort order, the name of the property to sort by (optional, default to &quot;name&quot;)
     * @param direction Sort direction, use &#39;desc&#39; to reverse sort (optional, default to asc)
     * @param phrase Search phrase for partial matches on name or description (optional)
     * @param name Filter by name, wildcard may be specified as %, eg. example-% (optional)
     * @param value The type of data being stored, string or object. The data type depends on the cypher mount being used. Most mounts use string as their data type, but secret uses object by default.  You can store a string instead by passing &#x60;type&#x3D;string&#x60;. This means the data value returned by the API will be a string instead of an object.  (optional)
     * @param refId If specified will return an exact match on refId (optional)
     * @return ApiResponse&lt;InlineResponse20063&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse20063> listIntegrationObjectsWithHttpInfo(Long id, Long max, Long offset, String sort, String direction, String phrase, String name, String value, Long refId) throws ApiException {
        okhttp3.Call localVarCall = listIntegrationObjectsValidateBeforeCall(id, max, offset, sort, direction, phrase, name, value, refId, null);
        Type localVarReturnType = new TypeToken<InlineResponse20063>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get ServiceNow Integration Objects (asynchronously)
     * This endpoint retrieves a list of exposed objects for a specific ServiceNow integration. 
     * @param id Morpheus ID of the Object being referenced (required)
     * @param max Maximum number of records to return, -1 can be used to fetch all records (optional, default to 25l)
     * @param offset Offset records, the number of records to skip, for paginating requests (optional, default to 0l)
     * @param sort Sort order, the name of the property to sort by (optional, default to &quot;name&quot;)
     * @param direction Sort direction, use &#39;desc&#39; to reverse sort (optional, default to asc)
     * @param phrase Search phrase for partial matches on name or description (optional)
     * @param name Filter by name, wildcard may be specified as %, eg. example-% (optional)
     * @param value The type of data being stored, string or object. The data type depends on the cypher mount being used. Most mounts use string as their data type, but secret uses object by default.  You can store a string instead by passing &#x60;type&#x3D;string&#x60;. This means the data value returned by the API will be a string instead of an object.  (optional)
     * @param refId If specified will return an exact match on refId (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listIntegrationObjectsAsync(Long id, Long max, Long offset, String sort, String direction, String phrase, String name, String value, Long refId, final ApiCallback<InlineResponse20063> _callback) throws ApiException {

        okhttp3.Call localVarCall = listIntegrationObjectsValidateBeforeCall(id, max, offset, sort, direction, phrase, name, value, refId, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse20063>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listIntegrationTypes
     * @param max Maximum number of records to return, -1 can be used to fetch all records (optional, default to 25l)
     * @param offset Offset records, the number of records to skip, for paginating requests (optional, default to 0l)
     * @param sort Sort order, the name of the property to sort by (optional, default to &quot;name&quot;)
     * @param direction Sort direction, use &#39;desc&#39; to reverse sort (optional, default to asc)
     * @param phrase Search phrase for partial matches on name or description (optional)
     * @param name Filter by name, wildcard may be specified as %, eg. example-% (optional)
     * @param code If specified will return an exact match on code (optional)
     * @param optiontypes Pass &#x60;true&#x60; to include optionTypes in the response for each integration type (optional, default to false)
     * @param description Filter by description, wildcard may be specified as %. eg. &#x60;example-%&#x60; (optional)
     * @param category If specified will return an exact match on category (optional)
     * @param creatable Filter by creatable (optional)
     * @param enabled Filter by enabled (optional)
     * @param hasCMDB Filter by hasCMDB (optional)
     * @param hasCMDBDiscovery Filter by hasCMDBDiscovery (optional)
     * @param hasCM Filter by hasCM (optional)
     * @param hasDNS Filter by hasDNS (optional)
     * @param hasApprovals Filter by hasApprovals (optional)
     * @param isPlugin Filter by isPlugin (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listIntegrationTypesCall(Long max, Long offset, String sort, String direction, String phrase, String name, String code, Boolean optiontypes, String description, String category, Boolean creatable, Boolean enabled, Boolean hasCMDB, Boolean hasCMDBDiscovery, Boolean hasCM, Boolean hasDNS, Boolean hasApprovals, Boolean isPlugin, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/integration-types";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (phrase != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("phrase", phrase));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (code != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("code", code));
        }

        if (optiontypes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("optiontypes", optiontypes));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        if (category != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("category", category));
        }

        if (creatable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("creatable", creatable));
        }

        if (enabled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enabled", enabled));
        }

        if (hasCMDB != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hasCMDB", hasCMDB));
        }

        if (hasCMDBDiscovery != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hasCMDBDiscovery", hasCMDBDiscovery));
        }

        if (hasCM != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hasCM", hasCM));
        }

        if (hasDNS != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hasDNS", hasDNS));
        }

        if (hasApprovals != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hasApprovals", hasApprovals));
        }

        if (isPlugin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isPlugin", isPlugin));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listIntegrationTypesValidateBeforeCall(Long max, Long offset, String sort, String direction, String phrase, String name, String code, Boolean optiontypes, String description, String category, Boolean creatable, Boolean enabled, Boolean hasCMDB, Boolean hasCMDBDiscovery, Boolean hasCM, Boolean hasDNS, Boolean hasApprovals, Boolean isPlugin, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listIntegrationTypesCall(max, offset, sort, direction, phrase, name, code, optiontypes, description, category, creatable, enabled, hasCMDB, hasCMDBDiscovery, hasCM, hasDNS, hasApprovals, isPlugin, _callback);
        return localVarCall;

    }

    /**
     * Retrieves all Integration Types
     * An Integration Type is specific third party software that the appliance can be configured to integrate with, such as Ansible, Chef, Git, ServiceNOW, etc. 
     * @param max Maximum number of records to return, -1 can be used to fetch all records (optional, default to 25l)
     * @param offset Offset records, the number of records to skip, for paginating requests (optional, default to 0l)
     * @param sort Sort order, the name of the property to sort by (optional, default to &quot;name&quot;)
     * @param direction Sort direction, use &#39;desc&#39; to reverse sort (optional, default to asc)
     * @param phrase Search phrase for partial matches on name or description (optional)
     * @param name Filter by name, wildcard may be specified as %, eg. example-% (optional)
     * @param code If specified will return an exact match on code (optional)
     * @param optiontypes Pass &#x60;true&#x60; to include optionTypes in the response for each integration type (optional, default to false)
     * @param description Filter by description, wildcard may be specified as %. eg. &#x60;example-%&#x60; (optional)
     * @param category If specified will return an exact match on category (optional)
     * @param creatable Filter by creatable (optional)
     * @param enabled Filter by enabled (optional)
     * @param hasCMDB Filter by hasCMDB (optional)
     * @param hasCMDBDiscovery Filter by hasCMDBDiscovery (optional)
     * @param hasCM Filter by hasCM (optional)
     * @param hasDNS Filter by hasDNS (optional)
     * @param hasApprovals Filter by hasApprovals (optional)
     * @param isPlugin Filter by isPlugin (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public Object listIntegrationTypes(Long max, Long offset, String sort, String direction, String phrase, String name, String code, Boolean optiontypes, String description, String category, Boolean creatable, Boolean enabled, Boolean hasCMDB, Boolean hasCMDBDiscovery, Boolean hasCM, Boolean hasDNS, Boolean hasApprovals, Boolean isPlugin) throws ApiException {
        ApiResponse<Object> localVarResp = listIntegrationTypesWithHttpInfo(max, offset, sort, direction, phrase, name, code, optiontypes, description, category, creatable, enabled, hasCMDB, hasCMDBDiscovery, hasCM, hasDNS, hasApprovals, isPlugin);
        return localVarResp.getData();
    }

    /**
     * Retrieves all Integration Types
     * An Integration Type is specific third party software that the appliance can be configured to integrate with, such as Ansible, Chef, Git, ServiceNOW, etc. 
     * @param max Maximum number of records to return, -1 can be used to fetch all records (optional, default to 25l)
     * @param offset Offset records, the number of records to skip, for paginating requests (optional, default to 0l)
     * @param sort Sort order, the name of the property to sort by (optional, default to &quot;name&quot;)
     * @param direction Sort direction, use &#39;desc&#39; to reverse sort (optional, default to asc)
     * @param phrase Search phrase for partial matches on name or description (optional)
     * @param name Filter by name, wildcard may be specified as %, eg. example-% (optional)
     * @param code If specified will return an exact match on code (optional)
     * @param optiontypes Pass &#x60;true&#x60; to include optionTypes in the response for each integration type (optional, default to false)
     * @param description Filter by description, wildcard may be specified as %. eg. &#x60;example-%&#x60; (optional)
     * @param category If specified will return an exact match on category (optional)
     * @param creatable Filter by creatable (optional)
     * @param enabled Filter by enabled (optional)
     * @param hasCMDB Filter by hasCMDB (optional)
     * @param hasCMDBDiscovery Filter by hasCMDBDiscovery (optional)
     * @param hasCM Filter by hasCM (optional)
     * @param hasDNS Filter by hasDNS (optional)
     * @param hasApprovals Filter by hasApprovals (optional)
     * @param isPlugin Filter by isPlugin (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> listIntegrationTypesWithHttpInfo(Long max, Long offset, String sort, String direction, String phrase, String name, String code, Boolean optiontypes, String description, String category, Boolean creatable, Boolean enabled, Boolean hasCMDB, Boolean hasCMDBDiscovery, Boolean hasCM, Boolean hasDNS, Boolean hasApprovals, Boolean isPlugin) throws ApiException {
        okhttp3.Call localVarCall = listIntegrationTypesValidateBeforeCall(max, offset, sort, direction, phrase, name, code, optiontypes, description, category, creatable, enabled, hasCMDB, hasCMDBDiscovery, hasCM, hasDNS, hasApprovals, isPlugin, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves all Integration Types (asynchronously)
     * An Integration Type is specific third party software that the appliance can be configured to integrate with, such as Ansible, Chef, Git, ServiceNOW, etc. 
     * @param max Maximum number of records to return, -1 can be used to fetch all records (optional, default to 25l)
     * @param offset Offset records, the number of records to skip, for paginating requests (optional, default to 0l)
     * @param sort Sort order, the name of the property to sort by (optional, default to &quot;name&quot;)
     * @param direction Sort direction, use &#39;desc&#39; to reverse sort (optional, default to asc)
     * @param phrase Search phrase for partial matches on name or description (optional)
     * @param name Filter by name, wildcard may be specified as %, eg. example-% (optional)
     * @param code If specified will return an exact match on code (optional)
     * @param optiontypes Pass &#x60;true&#x60; to include optionTypes in the response for each integration type (optional, default to false)
     * @param description Filter by description, wildcard may be specified as %. eg. &#x60;example-%&#x60; (optional)
     * @param category If specified will return an exact match on category (optional)
     * @param creatable Filter by creatable (optional)
     * @param enabled Filter by enabled (optional)
     * @param hasCMDB Filter by hasCMDB (optional)
     * @param hasCMDBDiscovery Filter by hasCMDBDiscovery (optional)
     * @param hasCM Filter by hasCM (optional)
     * @param hasDNS Filter by hasDNS (optional)
     * @param hasApprovals Filter by hasApprovals (optional)
     * @param isPlugin Filter by isPlugin (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listIntegrationTypesAsync(Long max, Long offset, String sort, String direction, String phrase, String name, String code, Boolean optiontypes, String description, String category, Boolean creatable, Boolean enabled, Boolean hasCMDB, Boolean hasCMDBDiscovery, Boolean hasCM, Boolean hasDNS, Boolean hasApprovals, Boolean isPlugin, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = listIntegrationTypesValidateBeforeCall(max, offset, sort, direction, phrase, name, code, optiontypes, description, category, creatable, enabled, hasCMDB, hasCMDBDiscovery, hasCM, hasDNS, hasApprovals, isPlugin, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listIntegrations
     * @param max Maximum number of records to return, -1 can be used to fetch all records (optional, default to 25l)
     * @param offset Offset records, the number of records to skip, for paginating requests (optional, default to 0l)
     * @param sort Sort order, the name of the property to sort by (optional, default to &quot;name&quot;)
     * @param direction Sort direction, use &#39;desc&#39; to reverse sort (optional, default to asc)
     * @param phrase Search phrase for partial matches on name or description (optional)
     * @param name Filter by name, wildcard may be specified as %, eg. example-% (optional)
     * @param id Morpheus ID of the Object being created or referenced (optional)
     * @param url Download the file from a remote url. This can be used instead of uploading a local file. (optional)
     * @param host Filter by integration Host (optional)
     * @param port Filter by integration Port (optional)
     * @param username Username (optional)
     * @param version Filter by version number (userVersion) (optional)
     * @param windowsVersion Filter by integration Windows Version (optional)
     * @param status The instance status for filtering. (optional)
     * @param objects Include &#x60;objects&#x3D;true&#x60; to return the Integration Objects for each integration.  Available in api version 5.2.8/5.3.2.  (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listIntegrationsCall(Long max, Long offset, String sort, String direction, String phrase, String name, Long id, String url, String host, String port, String username, Long version, String windowsVersion, String status, Boolean objects, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/integrations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (phrase != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("phrase", phrase));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (url != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("url", url));
        }

        if (host != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("host", host));
        }

        if (port != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("port", port));
        }

        if (username != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("username", username));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        if (windowsVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("windowsVersion", windowsVersion));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (objects != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("objects", objects));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listIntegrationsValidateBeforeCall(Long max, Long offset, String sort, String direction, String phrase, String name, Long id, String url, String host, String port, String username, Long version, String windowsVersion, String status, Boolean objects, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listIntegrationsCall(max, offset, sort, direction, phrase, name, id, url, host, port, username, version, windowsVersion, status, objects, _callback);
        return localVarCall;

    }

    /**
     * Retrieves all Integrations
     * Retrieves all integrations. 
     * @param max Maximum number of records to return, -1 can be used to fetch all records (optional, default to 25l)
     * @param offset Offset records, the number of records to skip, for paginating requests (optional, default to 0l)
     * @param sort Sort order, the name of the property to sort by (optional, default to &quot;name&quot;)
     * @param direction Sort direction, use &#39;desc&#39; to reverse sort (optional, default to asc)
     * @param phrase Search phrase for partial matches on name or description (optional)
     * @param name Filter by name, wildcard may be specified as %, eg. example-% (optional)
     * @param id Morpheus ID of the Object being created or referenced (optional)
     * @param url Download the file from a remote url. This can be used instead of uploading a local file. (optional)
     * @param host Filter by integration Host (optional)
     * @param port Filter by integration Port (optional)
     * @param username Username (optional)
     * @param version Filter by version number (userVersion) (optional)
     * @param windowsVersion Filter by integration Windows Version (optional)
     * @param status The instance status for filtering. (optional)
     * @param objects Include &#x60;objects&#x3D;true&#x60; to return the Integration Objects for each integration.  Available in api version 5.2.8/5.3.2.  (optional, default to false)
     * @return AnyOfobjectmeta
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public AnyOfobjectmeta listIntegrations(Long max, Long offset, String sort, String direction, String phrase, String name, Long id, String url, String host, String port, String username, Long version, String windowsVersion, String status, Boolean objects) throws ApiException {
        ApiResponse<AnyOfobjectmeta> localVarResp = listIntegrationsWithHttpInfo(max, offset, sort, direction, phrase, name, id, url, host, port, username, version, windowsVersion, status, objects);
        return localVarResp.getData();
    }

    /**
     * Retrieves all Integrations
     * Retrieves all integrations. 
     * @param max Maximum number of records to return, -1 can be used to fetch all records (optional, default to 25l)
     * @param offset Offset records, the number of records to skip, for paginating requests (optional, default to 0l)
     * @param sort Sort order, the name of the property to sort by (optional, default to &quot;name&quot;)
     * @param direction Sort direction, use &#39;desc&#39; to reverse sort (optional, default to asc)
     * @param phrase Search phrase for partial matches on name or description (optional)
     * @param name Filter by name, wildcard may be specified as %, eg. example-% (optional)
     * @param id Morpheus ID of the Object being created or referenced (optional)
     * @param url Download the file from a remote url. This can be used instead of uploading a local file. (optional)
     * @param host Filter by integration Host (optional)
     * @param port Filter by integration Port (optional)
     * @param username Username (optional)
     * @param version Filter by version number (userVersion) (optional)
     * @param windowsVersion Filter by integration Windows Version (optional)
     * @param status The instance status for filtering. (optional)
     * @param objects Include &#x60;objects&#x3D;true&#x60; to return the Integration Objects for each integration.  Available in api version 5.2.8/5.3.2.  (optional, default to false)
     * @return ApiResponse&lt;AnyOfobjectmeta&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AnyOfobjectmeta> listIntegrationsWithHttpInfo(Long max, Long offset, String sort, String direction, String phrase, String name, Long id, String url, String host, String port, String username, Long version, String windowsVersion, String status, Boolean objects) throws ApiException {
        okhttp3.Call localVarCall = listIntegrationsValidateBeforeCall(max, offset, sort, direction, phrase, name, id, url, host, port, username, version, windowsVersion, status, objects, null);
        Type localVarReturnType = new TypeToken<AnyOfobjectmeta>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves all Integrations (asynchronously)
     * Retrieves all integrations. 
     * @param max Maximum number of records to return, -1 can be used to fetch all records (optional, default to 25l)
     * @param offset Offset records, the number of records to skip, for paginating requests (optional, default to 0l)
     * @param sort Sort order, the name of the property to sort by (optional, default to &quot;name&quot;)
     * @param direction Sort direction, use &#39;desc&#39; to reverse sort (optional, default to asc)
     * @param phrase Search phrase for partial matches on name or description (optional)
     * @param name Filter by name, wildcard may be specified as %, eg. example-% (optional)
     * @param id Morpheus ID of the Object being created or referenced (optional)
     * @param url Download the file from a remote url. This can be used instead of uploading a local file. (optional)
     * @param host Filter by integration Host (optional)
     * @param port Filter by integration Port (optional)
     * @param username Username (optional)
     * @param version Filter by version number (userVersion) (optional)
     * @param windowsVersion Filter by integration Windows Version (optional)
     * @param status The instance status for filtering. (optional)
     * @param objects Include &#x60;objects&#x3D;true&#x60; to return the Integration Objects for each integration.  Available in api version 5.2.8/5.3.2.  (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listIntegrationsAsync(Long max, Long offset, String sort, String direction, String phrase, String name, Long id, String url, String host, String port, String username, Long version, String windowsVersion, String status, Boolean objects, final ApiCallback<AnyOfobjectmeta> _callback) throws ApiException {

        okhttp3.Call localVarCall = listIntegrationsValidateBeforeCall(max, offset, sort, direction, phrase, name, id, url, host, port, username, version, windowsVersion, status, objects, _callback);
        Type localVarReturnType = new TypeToken<AnyOfobjectmeta>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for refreshIntegrations
     * @param id Morpheus ID of the Object being referenced (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call refreshIntegrationsCall(Long id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/integrations/{id}/refresh"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call refreshIntegrationsValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling refreshIntegrations(Async)");
        }
        

        okhttp3.Call localVarCall = refreshIntegrationsCall(id, _callback);
        return localVarCall;

    }

    /**
     * Refresh an Integration
     * This endpoint will refresh an existing Integration. Only some types support this and will actually perform an action as a result. 
     * @param id Morpheus ID of the Object being referenced (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public Object refreshIntegrations(Long id) throws ApiException {
        ApiResponse<Object> localVarResp = refreshIntegrationsWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Refresh an Integration
     * This endpoint will refresh an existing Integration. Only some types support this and will actually perform an action as a result. 
     * @param id Morpheus ID of the Object being referenced (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> refreshIntegrationsWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = refreshIntegrationsValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Refresh an Integration (asynchronously)
     * This endpoint will refresh an existing Integration. Only some types support this and will actually perform an action as a result. 
     * @param id Morpheus ID of the Object being referenced (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call refreshIntegrationsAsync(Long id, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = refreshIntegrationsValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeIntegrationObjects
     * @param id Morpheus ID of the Object being referenced (required)
     * @param objectId Morpheus ID of the Object being created or referenced (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeIntegrationObjectsCall(Long id, Long objectId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/integrations/{id}/objects/{objectId}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "objectId" + "\\}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeIntegrationObjectsValidateBeforeCall(Long id, Long objectId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling removeIntegrationObjects(Async)");
        }
        
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling removeIntegrationObjects(Async)");
        }
        

        okhttp3.Call localVarCall = removeIntegrationObjectsCall(id, objectId, _callback);
        return localVarCall;

    }

    /**
     * Deletes a ServiceNow Integration object
     * Deletes a specified ServiceNow integration object. 
     * @param id Morpheus ID of the Object being referenced (required)
     * @param objectId Morpheus ID of the Object being created or referenced (required)
     * @return Model200Success
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public Model200Success removeIntegrationObjects(Long id, Long objectId) throws ApiException {
        ApiResponse<Model200Success> localVarResp = removeIntegrationObjectsWithHttpInfo(id, objectId);
        return localVarResp.getData();
    }

    /**
     * Deletes a ServiceNow Integration object
     * Deletes a specified ServiceNow integration object. 
     * @param id Morpheus ID of the Object being referenced (required)
     * @param objectId Morpheus ID of the Object being created or referenced (required)
     * @return ApiResponse&lt;Model200Success&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Model200Success> removeIntegrationObjectsWithHttpInfo(Long id, Long objectId) throws ApiException {
        okhttp3.Call localVarCall = removeIntegrationObjectsValidateBeforeCall(id, objectId, null);
        Type localVarReturnType = new TypeToken<Model200Success>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deletes a ServiceNow Integration object (asynchronously)
     * Deletes a specified ServiceNow integration object. 
     * @param id Morpheus ID of the Object being referenced (required)
     * @param objectId Morpheus ID of the Object being created or referenced (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeIntegrationObjectsAsync(Long id, Long objectId, final ApiCallback<Model200Success> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeIntegrationObjectsValidateBeforeCall(id, objectId, _callback);
        Type localVarReturnType = new TypeToken<Model200Success>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeIntegrations
     * @param id Morpheus ID of the Object being referenced (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeIntegrationsCall(Long id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/integrations/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeIntegrationsValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling removeIntegrations(Async)");
        }
        

        okhttp3.Call localVarCall = removeIntegrationsCall(id, _callback);
        return localVarCall;

    }

    /**
     * Deletes an Integration
     * Deletes a specified integration. 
     * @param id Morpheus ID of the Object being referenced (required)
     * @return Model200Success
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public Model200Success removeIntegrations(Long id) throws ApiException {
        ApiResponse<Model200Success> localVarResp = removeIntegrationsWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Deletes an Integration
     * Deletes a specified integration. 
     * @param id Morpheus ID of the Object being referenced (required)
     * @return ApiResponse&lt;Model200Success&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Model200Success> removeIntegrationsWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = removeIntegrationsValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Model200Success>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deletes an Integration (asynchronously)
     * Deletes a specified integration. 
     * @param id Morpheus ID of the Object being referenced (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeIntegrationsAsync(Long id, final ApiCallback<Model200Success> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeIntegrationsValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Model200Success>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateIntegrationInventory
     * @param id Morpheus ID of the Integration (required)
     * @param inventoryId Morpheus ID of the Integration Inventory (required)
     * @param inlineObject101  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateIntegrationInventoryCall(Long id, Long inventoryId, InlineObject101 inlineObject101, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = inlineObject101;

        // create path and map variables
        String localVarPath = "/api/integrations/{id}/inventory/{inventoryId}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "inventoryId" + "\\}", localVarApiClient.escapeString(inventoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateIntegrationInventoryValidateBeforeCall(Long id, Long inventoryId, InlineObject101 inlineObject101, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateIntegrationInventory(Async)");
        }
        
        // verify the required parameter 'inventoryId' is set
        if (inventoryId == null) {
            throw new ApiException("Missing the required parameter 'inventoryId' when calling updateIntegrationInventory(Async)");
        }
        

        okhttp3.Call localVarCall = updateIntegrationInventoryCall(id, inventoryId, inlineObject101, _callback);
        return localVarCall;

    }

    /**
     * Updating an Integration Inventory
     * This endpoint provides updating of integration inventory
     * @param id Morpheus ID of the Integration (required)
     * @param inventoryId Morpheus ID of the Integration Inventory (required)
     * @param inlineObject101  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public Object updateIntegrationInventory(Long id, Long inventoryId, InlineObject101 inlineObject101) throws ApiException {
        ApiResponse<Object> localVarResp = updateIntegrationInventoryWithHttpInfo(id, inventoryId, inlineObject101);
        return localVarResp.getData();
    }

    /**
     * Updating an Integration Inventory
     * This endpoint provides updating of integration inventory
     * @param id Morpheus ID of the Integration (required)
     * @param inventoryId Morpheus ID of the Integration Inventory (required)
     * @param inlineObject101  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateIntegrationInventoryWithHttpInfo(Long id, Long inventoryId, InlineObject101 inlineObject101) throws ApiException {
        okhttp3.Call localVarCall = updateIntegrationInventoryValidateBeforeCall(id, inventoryId, inlineObject101, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updating an Integration Inventory (asynchronously)
     * This endpoint provides updating of integration inventory
     * @param id Morpheus ID of the Integration (required)
     * @param inventoryId Morpheus ID of the Integration Inventory (required)
     * @param inlineObject101  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateIntegrationInventoryAsync(Long id, Long inventoryId, InlineObject101 inlineObject101, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateIntegrationInventoryValidateBeforeCall(id, inventoryId, inlineObject101, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateIntegrations
     * @param id Morpheus ID of the Object being referenced (required)
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateIntegrationsCall(Long id, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = UNKNOWN_BASE_TYPE;

        // create path and map variables
        String localVarPath = "/api/integrations/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateIntegrationsValidateBeforeCall(Long id, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateIntegrations(Async)");
        }
        

        okhttp3.Call localVarCall = updateIntegrationsCall(id, UNKNOWN_BASE_TYPE, _callback);
        return localVarCall;

    }

    /**
     * Updates an Integration
     * Updates an integration. 
     * @param id Morpheus ID of the Object being referenced (required)
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public Object updateIntegrations(Long id, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        ApiResponse<Object> localVarResp = updateIntegrationsWithHttpInfo(id, UNKNOWN_BASE_TYPE);
        return localVarResp.getData();
    }

    /**
     * Updates an Integration
     * Updates an integration. 
     * @param id Morpheus ID of the Object being referenced (required)
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateIntegrationsWithHttpInfo(Long id, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        okhttp3.Call localVarCall = updateIntegrationsValidateBeforeCall(id, UNKNOWN_BASE_TYPE, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates an Integration (asynchronously)
     * Updates an integration. 
     * @param id Morpheus ID of the Object being referenced (required)
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error Codes </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Error Codes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateIntegrationsAsync(Long id, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateIntegrationsValidateBeforeCall(id, UNKNOWN_BASE_TYPE, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
