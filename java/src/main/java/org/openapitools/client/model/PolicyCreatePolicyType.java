/*
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * PolicyCreatePolicyType
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-21T11:26:47.028Z[GMT]")
public class PolicyCreatePolicyType {
  /**
   * The policy type code. See &#x60;Retrieves all Policy Types&#x60; endpoint for listing.
   */
  @JsonAdapter(CodeEnum.Adapter.class)
  public enum CodeEnum {
    DELETEAPPROVAL("deleteApproval"),
    
    PROVISIONAPPROVAL("provisionApproval"),
    
    RECONFIGUREAPPROVAL("reconfigureApproval"),
    
    WORKFLOWAPPROVAL("workflowApproval"),
    
    CREATEBACKUP("createBackup"),
    
    BACKUPSTORAGE("backupStorage"),
    
    MAXPRICE("maxPrice"),
    
    SERVERNAMING("serverNaming"),
    
    CYPHER("cypher"),
    
    DELAYEDREMOVAL("delayedRemoval"),
    
    LIFECYCLE("lifecycle"),
    
    STORAGESHAREQUOTA("storageShareQuota"),
    
    HOSTNAMING("hostNaming"),
    
    NAMING("naming"),
    
    MAXCONTAINERS("maxContainers"),
    
    MAXCORES("maxCores"),
    
    MAXHOSTS("maxHosts"),
    
    MAXPOOLS("maxPools"),
    
    MAXMEMORY("maxMemory"),
    
    MAXPOOLMEMBERS("maxPoolMembers"),
    
    MAXSNAPSHOTS("maxSnapshots"),
    
    MAXSTORAGE("maxStorage"),
    
    MAXVIRTUALSERVERS("maxVirtualServers"),
    
    MAXVMS("maxVms"),
    
    MOTD("motd"),
    
    MAXNETWORKS("maxNetworks"),
    
    STORAGEBUCKETQUOTA("storageBucketQuota"),
    
    POWERSCHEDULE("powerSchedule"),
    
    MAXROUTERS("maxRouters"),
    
    SHUTDOWN("shutdown"),
    
    STORAGESERVERQUOTA("storageServerQuota"),
    
    TAGS("tags"),
    
    CREATEUSER("createUser"),
    
    CREATEUSERGROUP("createUserGroup"),
    
    WORKFLOW("workflow");

    private String value;

    CodeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CodeEnum fromValue(String value) {
      for (CodeEnum b : CodeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CodeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CodeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CodeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CodeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private CodeEnum code;


  public PolicyCreatePolicyType code(CodeEnum code) {
    
    this.code = code;
    return this;
  }

   /**
   * The policy type code. See &#x60;Retrieves all Policy Types&#x60; endpoint for listing.
   * @return code
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The policy type code. See `Retrieves all Policy Types` endpoint for listing.")

  public CodeEnum getCode() {
    return code;
  }


  public void setCode(CodeEnum code) {
    this.code = code;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PolicyCreatePolicyType policyCreatePolicyType = (PolicyCreatePolicyType) o;
    return Objects.equals(this.code, policyCreatePolicyType.code);
  }

  @Override
  public int hashCode() {
    return Objects.hash(code);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PolicyCreatePolicyType {\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

