/*
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.1.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AppPrepareApplyDataTerraform
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-17T13:37:08.123540Z[Etc/UTC]")
public class AppPrepareApplyDataTerraform {
  public static final String SERIALIZED_NAME_REFRESH_MODE = "refreshMode";
  @SerializedName(SERIALIZED_NAME_REFRESH_MODE)
  private String refreshMode;

  public static final String SERIALIZED_NAME_BACKEND_TYPE = "backendType";
  @SerializedName(SERIALIZED_NAME_BACKEND_TYPE)
  private String backendType;

  public static final String SERIALIZED_NAME_TIMEOUT_MODE = "timeoutMode";
  @SerializedName(SERIALIZED_NAME_TIMEOUT_MODE)
  private String timeoutMode;

  public static final String SERIALIZED_NAME_CONFIG_TYPE = "configType";
  @SerializedName(SERIALIZED_NAME_CONFIG_TYPE)
  private String configType;

  public AppPrepareApplyDataTerraform() {
  }

  public AppPrepareApplyDataTerraform refreshMode(String refreshMode) {
    
    this.refreshMode = refreshMode;
    return this;
  }

   /**
   * Get refreshMode
   * @return refreshMode
  **/
  @javax.annotation.Nullable
  public String getRefreshMode() {
    return refreshMode;
  }


  public void setRefreshMode(String refreshMode) {
    this.refreshMode = refreshMode;
  }


  public AppPrepareApplyDataTerraform backendType(String backendType) {
    
    this.backendType = backendType;
    return this;
  }

   /**
   * Get backendType
   * @return backendType
  **/
  @javax.annotation.Nullable
  public String getBackendType() {
    return backendType;
  }


  public void setBackendType(String backendType) {
    this.backendType = backendType;
  }


  public AppPrepareApplyDataTerraform timeoutMode(String timeoutMode) {
    
    this.timeoutMode = timeoutMode;
    return this;
  }

   /**
   * Get timeoutMode
   * @return timeoutMode
  **/
  @javax.annotation.Nullable
  public String getTimeoutMode() {
    return timeoutMode;
  }


  public void setTimeoutMode(String timeoutMode) {
    this.timeoutMode = timeoutMode;
  }


  public AppPrepareApplyDataTerraform configType(String configType) {
    
    this.configType = configType;
    return this;
  }

   /**
   * Get configType
   * @return configType
  **/
  @javax.annotation.Nullable
  public String getConfigType() {
    return configType;
  }


  public void setConfigType(String configType) {
    this.configType = configType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AppPrepareApplyDataTerraform appPrepareApplyDataTerraform = (AppPrepareApplyDataTerraform) o;
    return Objects.equals(this.refreshMode, appPrepareApplyDataTerraform.refreshMode) &&
        Objects.equals(this.backendType, appPrepareApplyDataTerraform.backendType) &&
        Objects.equals(this.timeoutMode, appPrepareApplyDataTerraform.timeoutMode) &&
        Objects.equals(this.configType, appPrepareApplyDataTerraform.configType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(refreshMode, backendType, timeoutMode, configType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AppPrepareApplyDataTerraform {\n");
    sb.append("    refreshMode: ").append(toIndentedString(refreshMode)).append("\n");
    sb.append("    backendType: ").append(toIndentedString(backendType)).append("\n");
    sb.append("    timeoutMode: ").append(toIndentedString(timeoutMode)).append("\n");
    sb.append("    configType: ").append(toIndentedString(configType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("refreshMode");
    openapiFields.add("backendType");
    openapiFields.add("timeoutMode");
    openapiFields.add("configType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to AppPrepareApplyDataTerraform
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AppPrepareApplyDataTerraform.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AppPrepareApplyDataTerraform is not found in the empty JSON string", AppPrepareApplyDataTerraform.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!AppPrepareApplyDataTerraform.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AppPrepareApplyDataTerraform` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("refreshMode") != null && !jsonObj.get("refreshMode").isJsonNull()) && !jsonObj.get("refreshMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `refreshMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("refreshMode").toString()));
      }
      if ((jsonObj.get("backendType") != null && !jsonObj.get("backendType").isJsonNull()) && !jsonObj.get("backendType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backendType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backendType").toString()));
      }
      if ((jsonObj.get("timeoutMode") != null && !jsonObj.get("timeoutMode").isJsonNull()) && !jsonObj.get("timeoutMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeoutMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeoutMode").toString()));
      }
      if ((jsonObj.get("configType") != null && !jsonObj.get("configType").isJsonNull()) && !jsonObj.get("configType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `configType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("configType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AppPrepareApplyDataTerraform.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AppPrepareApplyDataTerraform' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AppPrepareApplyDataTerraform> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AppPrepareApplyDataTerraform.class));

       return (TypeAdapter<T>) new TypeAdapter<AppPrepareApplyDataTerraform>() {
           @Override
           public void write(JsonWriter out, AppPrepareApplyDataTerraform value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AppPrepareApplyDataTerraform read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AppPrepareApplyDataTerraform given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AppPrepareApplyDataTerraform
  * @throws IOException if the JSON string is invalid with respect to AppPrepareApplyDataTerraform
  */
  public static AppPrepareApplyDataTerraform fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AppPrepareApplyDataTerraform.class);
  }

 /**
  * Convert an instance of AppPrepareApplyDataTerraform to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

