/*
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.1.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AddAlertsRequestAlertContactsInner;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Alert
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-17T13:37:08.123540Z[Etc/UTC]")
public class Alert {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ALL_APPS = "allApps";
  @SerializedName(SERIALIZED_NAME_ALL_APPS)
  private Boolean allApps;

  public static final String SERIALIZED_NAME_ALL_CHECKS = "allChecks";
  @SerializedName(SERIALIZED_NAME_ALL_CHECKS)
  private Boolean allChecks;

  public static final String SERIALIZED_NAME_ALL_GROUPS = "allGroups";
  @SerializedName(SERIALIZED_NAME_ALL_GROUPS)
  private Boolean allGroups;

  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private Boolean active;

  public static final String SERIALIZED_NAME_MIN_SEVERITY = "minSeverity";
  @SerializedName(SERIALIZED_NAME_MIN_SEVERITY)
  private String minSeverity;

  public static final String SERIALIZED_NAME_MIN_DURATION = "minDuration";
  @SerializedName(SERIALIZED_NAME_MIN_DURATION)
  private Long minDuration;

  public static final String SERIALIZED_NAME_DATE_CREATED = "dateCreated";
  @SerializedName(SERIALIZED_NAME_DATE_CREATED)
  private OffsetDateTime dateCreated;

  public static final String SERIALIZED_NAME_LAST_UPDATED = "lastUpdated";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED)
  private OffsetDateTime lastUpdated;

  public static final String SERIALIZED_NAME_CHECKS = "checks";
  @SerializedName(SERIALIZED_NAME_CHECKS)
  private List<Integer> checks;

  public static final String SERIALIZED_NAME_CHECK_GROUPS = "checkGroups";
  @SerializedName(SERIALIZED_NAME_CHECK_GROUPS)
  private List<Integer> checkGroups;

  public static final String SERIALIZED_NAME_APPS = "apps";
  @SerializedName(SERIALIZED_NAME_APPS)
  private List<Integer> apps;

  public static final String SERIALIZED_NAME_CONTACTS = "contacts";
  @SerializedName(SERIALIZED_NAME_CONTACTS)
  private List<AddAlertsRequestAlertContactsInner> contacts;

  public Alert() {
  }

  public Alert id(Long id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  public Long getId() {
    return id;
  }


  public void setId(Long id) {
    this.id = id;
  }


  public Alert name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public Alert allApps(Boolean allApps) {
    
    this.allApps = allApps;
    return this;
  }

   /**
   * Get allApps
   * @return allApps
  **/
  @javax.annotation.Nullable
  public Boolean getAllApps() {
    return allApps;
  }


  public void setAllApps(Boolean allApps) {
    this.allApps = allApps;
  }


  public Alert allChecks(Boolean allChecks) {
    
    this.allChecks = allChecks;
    return this;
  }

   /**
   * Get allChecks
   * @return allChecks
  **/
  @javax.annotation.Nullable
  public Boolean getAllChecks() {
    return allChecks;
  }


  public void setAllChecks(Boolean allChecks) {
    this.allChecks = allChecks;
  }


  public Alert allGroups(Boolean allGroups) {
    
    this.allGroups = allGroups;
    return this;
  }

   /**
   * Get allGroups
   * @return allGroups
  **/
  @javax.annotation.Nullable
  public Boolean getAllGroups() {
    return allGroups;
  }


  public void setAllGroups(Boolean allGroups) {
    this.allGroups = allGroups;
  }


  public Alert active(Boolean active) {
    
    this.active = active;
    return this;
  }

   /**
   * Get active
   * @return active
  **/
  @javax.annotation.Nullable
  public Boolean getActive() {
    return active;
  }


  public void setActive(Boolean active) {
    this.active = active;
  }


  public Alert minSeverity(String minSeverity) {
    
    this.minSeverity = minSeverity;
    return this;
  }

   /**
   * Get minSeverity
   * @return minSeverity
  **/
  @javax.annotation.Nullable
  public String getMinSeverity() {
    return minSeverity;
  }


  public void setMinSeverity(String minSeverity) {
    this.minSeverity = minSeverity;
  }


  public Alert minDuration(Long minDuration) {
    
    this.minDuration = minDuration;
    return this;
  }

   /**
   * Get minDuration
   * @return minDuration
  **/
  @javax.annotation.Nullable
  public Long getMinDuration() {
    return minDuration;
  }


  public void setMinDuration(Long minDuration) {
    this.minDuration = minDuration;
  }


  public Alert dateCreated(OffsetDateTime dateCreated) {
    
    this.dateCreated = dateCreated;
    return this;
  }

   /**
   * Get dateCreated
   * @return dateCreated
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getDateCreated() {
    return dateCreated;
  }


  public void setDateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
  }


  public Alert lastUpdated(OffsetDateTime lastUpdated) {
    
    this.lastUpdated = lastUpdated;
    return this;
  }

   /**
   * Get lastUpdated
   * @return lastUpdated
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdated() {
    return lastUpdated;
  }


  public void setLastUpdated(OffsetDateTime lastUpdated) {
    this.lastUpdated = lastUpdated;
  }


  public Alert checks(List<Integer> checks) {
    
    this.checks = checks;
    return this;
  }

  public Alert addChecksItem(Integer checksItem) {
    if (this.checks == null) {
      this.checks = new ArrayList<>();
    }
    this.checks.add(checksItem);
    return this;
  }

   /**
   * Get checks
   * @return checks
  **/
  @javax.annotation.Nullable
  public List<Integer> getChecks() {
    return checks;
  }


  public void setChecks(List<Integer> checks) {
    this.checks = checks;
  }


  public Alert checkGroups(List<Integer> checkGroups) {
    
    this.checkGroups = checkGroups;
    return this;
  }

  public Alert addCheckGroupsItem(Integer checkGroupsItem) {
    if (this.checkGroups == null) {
      this.checkGroups = new ArrayList<>();
    }
    this.checkGroups.add(checkGroupsItem);
    return this;
  }

   /**
   * Get checkGroups
   * @return checkGroups
  **/
  @javax.annotation.Nullable
  public List<Integer> getCheckGroups() {
    return checkGroups;
  }


  public void setCheckGroups(List<Integer> checkGroups) {
    this.checkGroups = checkGroups;
  }


  public Alert apps(List<Integer> apps) {
    
    this.apps = apps;
    return this;
  }

  public Alert addAppsItem(Integer appsItem) {
    if (this.apps == null) {
      this.apps = new ArrayList<>();
    }
    this.apps.add(appsItem);
    return this;
  }

   /**
   * Get apps
   * @return apps
  **/
  @javax.annotation.Nullable
  public List<Integer> getApps() {
    return apps;
  }


  public void setApps(List<Integer> apps) {
    this.apps = apps;
  }


  public Alert contacts(List<AddAlertsRequestAlertContactsInner> contacts) {
    
    this.contacts = contacts;
    return this;
  }

  public Alert addContactsItem(AddAlertsRequestAlertContactsInner contactsItem) {
    if (this.contacts == null) {
      this.contacts = new ArrayList<>();
    }
    this.contacts.add(contactsItem);
    return this;
  }

   /**
   * Get contacts
   * @return contacts
  **/
  @javax.annotation.Nullable
  public List<AddAlertsRequestAlertContactsInner> getContacts() {
    return contacts;
  }


  public void setContacts(List<AddAlertsRequestAlertContactsInner> contacts) {
    this.contacts = contacts;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Alert alert = (Alert) o;
    return Objects.equals(this.id, alert.id) &&
        Objects.equals(this.name, alert.name) &&
        Objects.equals(this.allApps, alert.allApps) &&
        Objects.equals(this.allChecks, alert.allChecks) &&
        Objects.equals(this.allGroups, alert.allGroups) &&
        Objects.equals(this.active, alert.active) &&
        Objects.equals(this.minSeverity, alert.minSeverity) &&
        Objects.equals(this.minDuration, alert.minDuration) &&
        Objects.equals(this.dateCreated, alert.dateCreated) &&
        Objects.equals(this.lastUpdated, alert.lastUpdated) &&
        Objects.equals(this.checks, alert.checks) &&
        Objects.equals(this.checkGroups, alert.checkGroups) &&
        Objects.equals(this.apps, alert.apps) &&
        Objects.equals(this.contacts, alert.contacts);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, allApps, allChecks, allGroups, active, minSeverity, minDuration, dateCreated, lastUpdated, checks, checkGroups, apps, contacts);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Alert {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    allApps: ").append(toIndentedString(allApps)).append("\n");
    sb.append("    allChecks: ").append(toIndentedString(allChecks)).append("\n");
    sb.append("    allGroups: ").append(toIndentedString(allGroups)).append("\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    minSeverity: ").append(toIndentedString(minSeverity)).append("\n");
    sb.append("    minDuration: ").append(toIndentedString(minDuration)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
    sb.append("    checks: ").append(toIndentedString(checks)).append("\n");
    sb.append("    checkGroups: ").append(toIndentedString(checkGroups)).append("\n");
    sb.append("    apps: ").append(toIndentedString(apps)).append("\n");
    sb.append("    contacts: ").append(toIndentedString(contacts)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("allApps");
    openapiFields.add("allChecks");
    openapiFields.add("allGroups");
    openapiFields.add("active");
    openapiFields.add("minSeverity");
    openapiFields.add("minDuration");
    openapiFields.add("dateCreated");
    openapiFields.add("lastUpdated");
    openapiFields.add("checks");
    openapiFields.add("checkGroups");
    openapiFields.add("apps");
    openapiFields.add("contacts");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Alert
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Alert.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Alert is not found in the empty JSON string", Alert.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Alert.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Alert` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("minSeverity") != null && !jsonObj.get("minSeverity").isJsonNull()) && !jsonObj.get("minSeverity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `minSeverity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("minSeverity").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("checks") != null && !jsonObj.get("checks").isJsonNull() && !jsonObj.get("checks").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `checks` to be an array in the JSON string but got `%s`", jsonObj.get("checks").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("checkGroups") != null && !jsonObj.get("checkGroups").isJsonNull() && !jsonObj.get("checkGroups").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `checkGroups` to be an array in the JSON string but got `%s`", jsonObj.get("checkGroups").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("apps") != null && !jsonObj.get("apps").isJsonNull() && !jsonObj.get("apps").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `apps` to be an array in the JSON string but got `%s`", jsonObj.get("apps").toString()));
      }
      if (jsonObj.get("contacts") != null && !jsonObj.get("contacts").isJsonNull()) {
        JsonArray jsonArraycontacts = jsonObj.getAsJsonArray("contacts");
        if (jsonArraycontacts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("contacts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `contacts` to be an array in the JSON string but got `%s`", jsonObj.get("contacts").toString()));
          }

          // validate the optional field `contacts` (array)
          for (int i = 0; i < jsonArraycontacts.size(); i++) {
            AddAlertsRequestAlertContactsInner.validateJsonElement(jsonArraycontacts.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Alert.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Alert' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Alert> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Alert.class));

       return (TypeAdapter<T>) new TypeAdapter<Alert>() {
           @Override
           public void write(JsonWriter out, Alert value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Alert read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Alert given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Alert
  * @throws IOException if the JSON string is invalid with respect to Alert
  */
  public static Alert fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Alert.class);
  }

 /**
  * Convert an instance of Alert to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

