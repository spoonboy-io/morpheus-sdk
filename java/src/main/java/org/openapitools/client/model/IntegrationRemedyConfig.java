/*
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * IntegrationRemedyConfig
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-21T11:26:47.028Z[GMT]")
public class IntegrationRemedyConfig {
  public static final String SERIALIZED_NAME_APPROVAL_USER = "approvalUser";
  @SerializedName(SERIALIZED_NAME_APPROVAL_USER)
  private String approvalUser;

  public static final String SERIALIZED_NAME_COMPANY = "company";
  @SerializedName(SERIALIZED_NAME_COMPANY)
  private String company;

  public static final String SERIALIZED_NAME_REMEDY_IGNORE_S_S_L_ERRORS = "remedyIgnoreSSLErrors";
  @SerializedName(SERIALIZED_NAME_REMEDY_IGNORE_S_S_L_ERRORS)
  private String remedyIgnoreSSLErrors;


  public IntegrationRemedyConfig approvalUser(String approvalUser) {
    
    this.approvalUser = approvalUser;
    return this;
  }

   /**
   * Get approvalUser
   * @return approvalUser
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getApprovalUser() {
    return approvalUser;
  }


  public void setApprovalUser(String approvalUser) {
    this.approvalUser = approvalUser;
  }


  public IntegrationRemedyConfig company(String company) {
    
    this.company = company;
    return this;
  }

   /**
   * Get company
   * @return company
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCompany() {
    return company;
  }


  public void setCompany(String company) {
    this.company = company;
  }


  public IntegrationRemedyConfig remedyIgnoreSSLErrors(String remedyIgnoreSSLErrors) {
    
    this.remedyIgnoreSSLErrors = remedyIgnoreSSLErrors;
    return this;
  }

   /**
   * Get remedyIgnoreSSLErrors
   * @return remedyIgnoreSSLErrors
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getRemedyIgnoreSSLErrors() {
    return remedyIgnoreSSLErrors;
  }


  public void setRemedyIgnoreSSLErrors(String remedyIgnoreSSLErrors) {
    this.remedyIgnoreSSLErrors = remedyIgnoreSSLErrors;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IntegrationRemedyConfig integrationRemedyConfig = (IntegrationRemedyConfig) o;
    return Objects.equals(this.approvalUser, integrationRemedyConfig.approvalUser) &&
        Objects.equals(this.company, integrationRemedyConfig.company) &&
        Objects.equals(this.remedyIgnoreSSLErrors, integrationRemedyConfig.remedyIgnoreSSLErrors);
  }

  @Override
  public int hashCode() {
    return Objects.hash(approvalUser, company, remedyIgnoreSSLErrors);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IntegrationRemedyConfig {\n");
    sb.append("    approvalUser: ").append(toIndentedString(approvalUser)).append("\n");
    sb.append("    company: ").append(toIndentedString(company)).append("\n");
    sb.append("    remedyIgnoreSSLErrors: ").append(toIndentedString(remedyIgnoreSSLErrors)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

