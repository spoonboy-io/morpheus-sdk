/*
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.1.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CatalogItemTypeBlueprintCreateBlueprint;
import org.openapitools.client.model.CatalogItemTypeBlueprintUpdate;
import org.openapitools.client.model.CatalogItemTypeInstanceUpdate;
import org.openapitools.client.model.CatalogItemTypeWorkflowUpdate;
import org.openapitools.client.model.UpdateBlueprintPermissionsRequestResourcePermissionSitesInner;
import org.openapitools.jackson.nullable.JsonNullable;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-17T13:37:08.123540Z[Etc/UTC]")
public class UpdateCatalogItemTypeRequestCatalogItemType extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(UpdateCatalogItemTypeRequestCatalogItemType.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!UpdateCatalogItemTypeRequestCatalogItemType.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'UpdateCatalogItemTypeRequestCatalogItemType' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<CatalogItemTypeInstanceUpdate> adapterCatalogItemTypeInstanceUpdate = gson.getDelegateAdapter(this, TypeToken.get(CatalogItemTypeInstanceUpdate.class));
            final TypeAdapter<CatalogItemTypeBlueprintUpdate> adapterCatalogItemTypeBlueprintUpdate = gson.getDelegateAdapter(this, TypeToken.get(CatalogItemTypeBlueprintUpdate.class));
            final TypeAdapter<CatalogItemTypeWorkflowUpdate> adapterCatalogItemTypeWorkflowUpdate = gson.getDelegateAdapter(this, TypeToken.get(CatalogItemTypeWorkflowUpdate.class));

            return (TypeAdapter<T>) new TypeAdapter<UpdateCatalogItemTypeRequestCatalogItemType>() {
                @Override
                public void write(JsonWriter out, UpdateCatalogItemTypeRequestCatalogItemType value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `CatalogItemTypeInstanceUpdate`
                    if (value.getActualInstance() instanceof CatalogItemTypeInstanceUpdate) {
                      JsonElement element = adapterCatalogItemTypeInstanceUpdate.toJsonTree((CatalogItemTypeInstanceUpdate)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `CatalogItemTypeBlueprintUpdate`
                    if (value.getActualInstance() instanceof CatalogItemTypeBlueprintUpdate) {
                      JsonElement element = adapterCatalogItemTypeBlueprintUpdate.toJsonTree((CatalogItemTypeBlueprintUpdate)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `CatalogItemTypeWorkflowUpdate`
                    if (value.getActualInstance() instanceof CatalogItemTypeWorkflowUpdate) {
                      JsonElement element = adapterCatalogItemTypeWorkflowUpdate.toJsonTree((CatalogItemTypeWorkflowUpdate)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match anyOf schemae: CatalogItemTypeBlueprintUpdate, CatalogItemTypeInstanceUpdate, CatalogItemTypeWorkflowUpdate");
                }

                @Override
                public UpdateCatalogItemTypeRequestCatalogItemType read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize CatalogItemTypeInstanceUpdate
                    try {
                      // validate the JSON object to see if any exception is thrown
                      CatalogItemTypeInstanceUpdate.validateJsonElement(jsonElement);
                      actualAdapter = adapterCatalogItemTypeInstanceUpdate;
                      UpdateCatalogItemTypeRequestCatalogItemType ret = new UpdateCatalogItemTypeRequestCatalogItemType();
                      ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                      return ret;
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for CatalogItemTypeInstanceUpdate failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'CatalogItemTypeInstanceUpdate'", e);
                    }
                    // deserialize CatalogItemTypeBlueprintUpdate
                    try {
                      // validate the JSON object to see if any exception is thrown
                      CatalogItemTypeBlueprintUpdate.validateJsonElement(jsonElement);
                      actualAdapter = adapterCatalogItemTypeBlueprintUpdate;
                      UpdateCatalogItemTypeRequestCatalogItemType ret = new UpdateCatalogItemTypeRequestCatalogItemType();
                      ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                      return ret;
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for CatalogItemTypeBlueprintUpdate failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'CatalogItemTypeBlueprintUpdate'", e);
                    }
                    // deserialize CatalogItemTypeWorkflowUpdate
                    try {
                      // validate the JSON object to see if any exception is thrown
                      CatalogItemTypeWorkflowUpdate.validateJsonElement(jsonElement);
                      actualAdapter = adapterCatalogItemTypeWorkflowUpdate;
                      UpdateCatalogItemTypeRequestCatalogItemType ret = new UpdateCatalogItemTypeRequestCatalogItemType();
                      ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                      return ret;
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for CatalogItemTypeWorkflowUpdate failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'CatalogItemTypeWorkflowUpdate'", e);
                    }

                    throw new IOException(String.format("Failed deserialization for UpdateCatalogItemTypeRequestCatalogItemType: no class matches result, expected at least 1. Detailed failure message for anyOf schemas: %s. JSON: %s", errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in anyOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public UpdateCatalogItemTypeRequestCatalogItemType() {
        super("anyOf", Boolean.FALSE);
    }

    public UpdateCatalogItemTypeRequestCatalogItemType(CatalogItemTypeBlueprintUpdate o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public UpdateCatalogItemTypeRequestCatalogItemType(CatalogItemTypeInstanceUpdate o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public UpdateCatalogItemTypeRequestCatalogItemType(CatalogItemTypeWorkflowUpdate o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("CatalogItemTypeInstanceUpdate", CatalogItemTypeInstanceUpdate.class);
        schemas.put("CatalogItemTypeBlueprintUpdate", CatalogItemTypeBlueprintUpdate.class);
        schemas.put("CatalogItemTypeWorkflowUpdate", CatalogItemTypeWorkflowUpdate.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return UpdateCatalogItemTypeRequestCatalogItemType.schemas;
    }

    /**
     * Set the instance that matches the anyOf child schema, check
     * the instance parameter is valid against the anyOf child schemas:
     * CatalogItemTypeBlueprintUpdate, CatalogItemTypeInstanceUpdate, CatalogItemTypeWorkflowUpdate
     *
     * It could be an instance of the 'anyOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof CatalogItemTypeInstanceUpdate) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CatalogItemTypeBlueprintUpdate) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CatalogItemTypeWorkflowUpdate) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be CatalogItemTypeBlueprintUpdate, CatalogItemTypeInstanceUpdate, CatalogItemTypeWorkflowUpdate");
    }

    /**
     * Get the actual instance, which can be the following:
     * CatalogItemTypeBlueprintUpdate, CatalogItemTypeInstanceUpdate, CatalogItemTypeWorkflowUpdate
     *
     * @return The actual instance (CatalogItemTypeBlueprintUpdate, CatalogItemTypeInstanceUpdate, CatalogItemTypeWorkflowUpdate)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `CatalogItemTypeInstanceUpdate`. If the actual instance is not `CatalogItemTypeInstanceUpdate`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CatalogItemTypeInstanceUpdate`
     * @throws ClassCastException if the instance is not `CatalogItemTypeInstanceUpdate`
     */
    public CatalogItemTypeInstanceUpdate getCatalogItemTypeInstanceUpdate() throws ClassCastException {
        return (CatalogItemTypeInstanceUpdate)super.getActualInstance();
    }
    /**
     * Get the actual instance of `CatalogItemTypeBlueprintUpdate`. If the actual instance is not `CatalogItemTypeBlueprintUpdate`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CatalogItemTypeBlueprintUpdate`
     * @throws ClassCastException if the instance is not `CatalogItemTypeBlueprintUpdate`
     */
    public CatalogItemTypeBlueprintUpdate getCatalogItemTypeBlueprintUpdate() throws ClassCastException {
        return (CatalogItemTypeBlueprintUpdate)super.getActualInstance();
    }
    /**
     * Get the actual instance of `CatalogItemTypeWorkflowUpdate`. If the actual instance is not `CatalogItemTypeWorkflowUpdate`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CatalogItemTypeWorkflowUpdate`
     * @throws ClassCastException if the instance is not `CatalogItemTypeWorkflowUpdate`
     */
    public CatalogItemTypeWorkflowUpdate getCatalogItemTypeWorkflowUpdate() throws ClassCastException {
        return (CatalogItemTypeWorkflowUpdate)super.getActualInstance();
    }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to UpdateCatalogItemTypeRequestCatalogItemType
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    // validate anyOf schemas one by one
    ArrayList<String> errorMessages = new ArrayList<>();
    // validate the json string with CatalogItemTypeInstanceUpdate
    try {
      CatalogItemTypeInstanceUpdate.validateJsonElement(jsonElement);
      return;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for CatalogItemTypeInstanceUpdate failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with CatalogItemTypeBlueprintUpdate
    try {
      CatalogItemTypeBlueprintUpdate.validateJsonElement(jsonElement);
      return;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for CatalogItemTypeBlueprintUpdate failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with CatalogItemTypeWorkflowUpdate
    try {
      CatalogItemTypeWorkflowUpdate.validateJsonElement(jsonElement);
      return;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for CatalogItemTypeWorkflowUpdate failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    throw new IOException(String.format("The JSON string is invalid for UpdateCatalogItemTypeRequestCatalogItemType with anyOf schemas: CatalogItemTypeBlueprintUpdate, CatalogItemTypeInstanceUpdate, CatalogItemTypeWorkflowUpdate. no class match the result, expected at least 1. Detailed failure message for anyOf schemas: %s. JSON: %s", errorMessages, jsonElement.toString()));
    
  }

 /**
  * Create an instance of UpdateCatalogItemTypeRequestCatalogItemType given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of UpdateCatalogItemTypeRequestCatalogItemType
  * @throws IOException if the JSON string is invalid with respect to UpdateCatalogItemTypeRequestCatalogItemType
  */
  public static UpdateCatalogItemTypeRequestCatalogItemType fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateCatalogItemTypeRequestCatalogItemType.class);
  }

 /**
  * Convert an instance of UpdateCatalogItemTypeRequestCatalogItemType to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

