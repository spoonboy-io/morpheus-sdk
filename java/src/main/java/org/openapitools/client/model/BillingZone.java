/*
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.1.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import org.openapitools.client.model.BillingZonesInnerComputeServers;
import org.openapitools.client.model.BillingZonesInnerInstances;
import org.openapitools.client.model.BillingZonesInnerLoadBalancers;
import org.openapitools.client.model.BillingZonesInnerSnapshots;
import org.openapitools.client.model.BillingZonesInnerVirtualImages;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BillingZone
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-17T13:37:08.123540Z[Etc/UTC]")
public class BillingZone {
  public static final String SERIALIZED_NAME_ZONE_NAME = "zoneName";
  @SerializedName(SERIALIZED_NAME_ZONE_NAME)
  private String zoneName;

  public static final String SERIALIZED_NAME_ZONE_ID = "zoneId";
  @SerializedName(SERIALIZED_NAME_ZONE_ID)
  private Long zoneId;

  public static final String SERIALIZED_NAME_ZONE_U_U_I_D = "zoneUUID";
  @SerializedName(SERIALIZED_NAME_ZONE_U_U_I_D)
  private String zoneUUID;

  public static final String SERIALIZED_NAME_ZONE_CODE = "zoneCode";
  @SerializedName(SERIALIZED_NAME_ZONE_CODE)
  private String zoneCode;

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private OffsetDateTime startDate;

  public static final String SERIALIZED_NAME_END_DATE = "endDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private OffsetDateTime endDate;

  public static final String SERIALIZED_NAME_PRICE_UNIT = "priceUnit";
  @SerializedName(SERIALIZED_NAME_PRICE_UNIT)
  private String priceUnit;

  public static final String SERIALIZED_NAME_COMPUTE_SERVERS = "computeServers";
  @SerializedName(SERIALIZED_NAME_COMPUTE_SERVERS)
  private BillingZonesInnerComputeServers computeServers;

  public static final String SERIALIZED_NAME_INSTANCES = "instances";
  @SerializedName(SERIALIZED_NAME_INSTANCES)
  private BillingZonesInnerInstances instances;

  public static final String SERIALIZED_NAME_DISCOVERED_SERVERS = "discoveredServers";
  @SerializedName(SERIALIZED_NAME_DISCOVERED_SERVERS)
  private BillingZonesInnerComputeServers discoveredServers;

  public static final String SERIALIZED_NAME_LOAD_BALANCERS = "loadBalancers";
  @SerializedName(SERIALIZED_NAME_LOAD_BALANCERS)
  private BillingZonesInnerLoadBalancers loadBalancers;

  public static final String SERIALIZED_NAME_VIRTUAL_IMAGES = "virtualImages";
  @SerializedName(SERIALIZED_NAME_VIRTUAL_IMAGES)
  private BillingZonesInnerVirtualImages virtualImages;

  public static final String SERIALIZED_NAME_SNAPSHOTS = "snapshots";
  @SerializedName(SERIALIZED_NAME_SNAPSHOTS)
  private BillingZonesInnerSnapshots snapshots;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private BigDecimal price;

  public static final String SERIALIZED_NAME_COST = "cost";
  @SerializedName(SERIALIZED_NAME_COST)
  private BigDecimal cost;

  public BillingZone() {
  }

  public BillingZone zoneName(String zoneName) {
    
    this.zoneName = zoneName;
    return this;
  }

   /**
   * Get zoneName
   * @return zoneName
  **/
  @javax.annotation.Nullable
  public String getZoneName() {
    return zoneName;
  }


  public void setZoneName(String zoneName) {
    this.zoneName = zoneName;
  }


  public BillingZone zoneId(Long zoneId) {
    
    this.zoneId = zoneId;
    return this;
  }

   /**
   * Get zoneId
   * @return zoneId
  **/
  @javax.annotation.Nullable
  public Long getZoneId() {
    return zoneId;
  }


  public void setZoneId(Long zoneId) {
    this.zoneId = zoneId;
  }


  public BillingZone zoneUUID(String zoneUUID) {
    
    this.zoneUUID = zoneUUID;
    return this;
  }

   /**
   * Get zoneUUID
   * @return zoneUUID
  **/
  @javax.annotation.Nullable
  public String getZoneUUID() {
    return zoneUUID;
  }


  public void setZoneUUID(String zoneUUID) {
    this.zoneUUID = zoneUUID;
  }


  public BillingZone zoneCode(String zoneCode) {
    
    this.zoneCode = zoneCode;
    return this;
  }

   /**
   * Get zoneCode
   * @return zoneCode
  **/
  @javax.annotation.Nullable
  public String getZoneCode() {
    return zoneCode;
  }


  public void setZoneCode(String zoneCode) {
    this.zoneCode = zoneCode;
  }


  public BillingZone startDate(OffsetDateTime startDate) {
    
    this.startDate = startDate;
    return this;
  }

   /**
   * Get startDate
   * @return startDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getStartDate() {
    return startDate;
  }


  public void setStartDate(OffsetDateTime startDate) {
    this.startDate = startDate;
  }


  public BillingZone endDate(OffsetDateTime endDate) {
    
    this.endDate = endDate;
    return this;
  }

   /**
   * Get endDate
   * @return endDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getEndDate() {
    return endDate;
  }


  public void setEndDate(OffsetDateTime endDate) {
    this.endDate = endDate;
  }


  public BillingZone priceUnit(String priceUnit) {
    
    this.priceUnit = priceUnit;
    return this;
  }

   /**
   * Get priceUnit
   * @return priceUnit
  **/
  @javax.annotation.Nullable
  public String getPriceUnit() {
    return priceUnit;
  }


  public void setPriceUnit(String priceUnit) {
    this.priceUnit = priceUnit;
  }


  public BillingZone computeServers(BillingZonesInnerComputeServers computeServers) {
    
    this.computeServers = computeServers;
    return this;
  }

   /**
   * Get computeServers
   * @return computeServers
  **/
  @javax.annotation.Nullable
  public BillingZonesInnerComputeServers getComputeServers() {
    return computeServers;
  }


  public void setComputeServers(BillingZonesInnerComputeServers computeServers) {
    this.computeServers = computeServers;
  }


  public BillingZone instances(BillingZonesInnerInstances instances) {
    
    this.instances = instances;
    return this;
  }

   /**
   * Get instances
   * @return instances
  **/
  @javax.annotation.Nullable
  public BillingZonesInnerInstances getInstances() {
    return instances;
  }


  public void setInstances(BillingZonesInnerInstances instances) {
    this.instances = instances;
  }


  public BillingZone discoveredServers(BillingZonesInnerComputeServers discoveredServers) {
    
    this.discoveredServers = discoveredServers;
    return this;
  }

   /**
   * Get discoveredServers
   * @return discoveredServers
  **/
  @javax.annotation.Nullable
  public BillingZonesInnerComputeServers getDiscoveredServers() {
    return discoveredServers;
  }


  public void setDiscoveredServers(BillingZonesInnerComputeServers discoveredServers) {
    this.discoveredServers = discoveredServers;
  }


  public BillingZone loadBalancers(BillingZonesInnerLoadBalancers loadBalancers) {
    
    this.loadBalancers = loadBalancers;
    return this;
  }

   /**
   * Get loadBalancers
   * @return loadBalancers
  **/
  @javax.annotation.Nullable
  public BillingZonesInnerLoadBalancers getLoadBalancers() {
    return loadBalancers;
  }


  public void setLoadBalancers(BillingZonesInnerLoadBalancers loadBalancers) {
    this.loadBalancers = loadBalancers;
  }


  public BillingZone virtualImages(BillingZonesInnerVirtualImages virtualImages) {
    
    this.virtualImages = virtualImages;
    return this;
  }

   /**
   * Get virtualImages
   * @return virtualImages
  **/
  @javax.annotation.Nullable
  public BillingZonesInnerVirtualImages getVirtualImages() {
    return virtualImages;
  }


  public void setVirtualImages(BillingZonesInnerVirtualImages virtualImages) {
    this.virtualImages = virtualImages;
  }


  public BillingZone snapshots(BillingZonesInnerSnapshots snapshots) {
    
    this.snapshots = snapshots;
    return this;
  }

   /**
   * Get snapshots
   * @return snapshots
  **/
  @javax.annotation.Nullable
  public BillingZonesInnerSnapshots getSnapshots() {
    return snapshots;
  }


  public void setSnapshots(BillingZonesInnerSnapshots snapshots) {
    this.snapshots = snapshots;
  }


  public BillingZone price(BigDecimal price) {
    
    this.price = price;
    return this;
  }

   /**
   * Get price
   * @return price
  **/
  @javax.annotation.Nullable
  public BigDecimal getPrice() {
    return price;
  }


  public void setPrice(BigDecimal price) {
    this.price = price;
  }


  public BillingZone cost(BigDecimal cost) {
    
    this.cost = cost;
    return this;
  }

   /**
   * Get cost
   * @return cost
  **/
  @javax.annotation.Nullable
  public BigDecimal getCost() {
    return cost;
  }


  public void setCost(BigDecimal cost) {
    this.cost = cost;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BillingZone billingZone = (BillingZone) o;
    return Objects.equals(this.zoneName, billingZone.zoneName) &&
        Objects.equals(this.zoneId, billingZone.zoneId) &&
        Objects.equals(this.zoneUUID, billingZone.zoneUUID) &&
        Objects.equals(this.zoneCode, billingZone.zoneCode) &&
        Objects.equals(this.startDate, billingZone.startDate) &&
        Objects.equals(this.endDate, billingZone.endDate) &&
        Objects.equals(this.priceUnit, billingZone.priceUnit) &&
        Objects.equals(this.computeServers, billingZone.computeServers) &&
        Objects.equals(this.instances, billingZone.instances) &&
        Objects.equals(this.discoveredServers, billingZone.discoveredServers) &&
        Objects.equals(this.loadBalancers, billingZone.loadBalancers) &&
        Objects.equals(this.virtualImages, billingZone.virtualImages) &&
        Objects.equals(this.snapshots, billingZone.snapshots) &&
        Objects.equals(this.price, billingZone.price) &&
        Objects.equals(this.cost, billingZone.cost);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(zoneName, zoneId, zoneUUID, zoneCode, startDate, endDate, priceUnit, computeServers, instances, discoveredServers, loadBalancers, virtualImages, snapshots, price, cost);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BillingZone {\n");
    sb.append("    zoneName: ").append(toIndentedString(zoneName)).append("\n");
    sb.append("    zoneId: ").append(toIndentedString(zoneId)).append("\n");
    sb.append("    zoneUUID: ").append(toIndentedString(zoneUUID)).append("\n");
    sb.append("    zoneCode: ").append(toIndentedString(zoneCode)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    priceUnit: ").append(toIndentedString(priceUnit)).append("\n");
    sb.append("    computeServers: ").append(toIndentedString(computeServers)).append("\n");
    sb.append("    instances: ").append(toIndentedString(instances)).append("\n");
    sb.append("    discoveredServers: ").append(toIndentedString(discoveredServers)).append("\n");
    sb.append("    loadBalancers: ").append(toIndentedString(loadBalancers)).append("\n");
    sb.append("    virtualImages: ").append(toIndentedString(virtualImages)).append("\n");
    sb.append("    snapshots: ").append(toIndentedString(snapshots)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    cost: ").append(toIndentedString(cost)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("zoneName");
    openapiFields.add("zoneId");
    openapiFields.add("zoneUUID");
    openapiFields.add("zoneCode");
    openapiFields.add("startDate");
    openapiFields.add("endDate");
    openapiFields.add("priceUnit");
    openapiFields.add("computeServers");
    openapiFields.add("instances");
    openapiFields.add("discoveredServers");
    openapiFields.add("loadBalancers");
    openapiFields.add("virtualImages");
    openapiFields.add("snapshots");
    openapiFields.add("price");
    openapiFields.add("cost");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to BillingZone
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BillingZone.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BillingZone is not found in the empty JSON string", BillingZone.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!BillingZone.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BillingZone` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("zoneName") != null && !jsonObj.get("zoneName").isJsonNull()) && !jsonObj.get("zoneName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zoneName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zoneName").toString()));
      }
      if ((jsonObj.get("zoneUUID") != null && !jsonObj.get("zoneUUID").isJsonNull()) && !jsonObj.get("zoneUUID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zoneUUID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zoneUUID").toString()));
      }
      if ((jsonObj.get("zoneCode") != null && !jsonObj.get("zoneCode").isJsonNull()) && !jsonObj.get("zoneCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zoneCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zoneCode").toString()));
      }
      if ((jsonObj.get("priceUnit") != null && !jsonObj.get("priceUnit").isJsonNull()) && !jsonObj.get("priceUnit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `priceUnit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("priceUnit").toString()));
      }
      // validate the optional field `computeServers`
      if (jsonObj.get("computeServers") != null && !jsonObj.get("computeServers").isJsonNull()) {
        BillingZonesInnerComputeServers.validateJsonElement(jsonObj.get("computeServers"));
      }
      // validate the optional field `instances`
      if (jsonObj.get("instances") != null && !jsonObj.get("instances").isJsonNull()) {
        BillingZonesInnerInstances.validateJsonElement(jsonObj.get("instances"));
      }
      // validate the optional field `discoveredServers`
      if (jsonObj.get("discoveredServers") != null && !jsonObj.get("discoveredServers").isJsonNull()) {
        BillingZonesInnerComputeServers.validateJsonElement(jsonObj.get("discoveredServers"));
      }
      // validate the optional field `loadBalancers`
      if (jsonObj.get("loadBalancers") != null && !jsonObj.get("loadBalancers").isJsonNull()) {
        BillingZonesInnerLoadBalancers.validateJsonElement(jsonObj.get("loadBalancers"));
      }
      // validate the optional field `virtualImages`
      if (jsonObj.get("virtualImages") != null && !jsonObj.get("virtualImages").isJsonNull()) {
        BillingZonesInnerVirtualImages.validateJsonElement(jsonObj.get("virtualImages"));
      }
      // validate the optional field `snapshots`
      if (jsonObj.get("snapshots") != null && !jsonObj.get("snapshots").isJsonNull()) {
        BillingZonesInnerSnapshots.validateJsonElement(jsonObj.get("snapshots"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BillingZone.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BillingZone' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BillingZone> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BillingZone.class));

       return (TypeAdapter<T>) new TypeAdapter<BillingZone>() {
           @Override
           public void write(JsonWriter out, BillingZone value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BillingZone read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BillingZone given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BillingZone
  * @throws IOException if the JSON string is invalid with respect to BillingZone
  */
  public static BillingZone fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BillingZone.class);
  }

 /**
  * Convert an instance of BillingZone to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

