/*
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.1.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ArchiveBucket;
import org.openapitools.client.model.ArchiveBucketFile;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetArchiveBucket200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-17T13:37:08.123540Z[Etc/UTC]")
public class GetArchiveBucket200Response {
  public static final String SERIALIZED_NAME_ARCHIVE_BUCKET = "archiveBucket";
  @SerializedName(SERIALIZED_NAME_ARCHIVE_BUCKET)
  private ArchiveBucket archiveBucket;

  public static final String SERIALIZED_NAME_IS_OWNER = "isOwner";
  @SerializedName(SERIALIZED_NAME_IS_OWNER)
  private Boolean isOwner;

  public static final String SERIALIZED_NAME_PARENT_DIRECTORY = "parentDirectory";
  @SerializedName(SERIALIZED_NAME_PARENT_DIRECTORY)
  private String parentDirectory;

  public static final String SERIALIZED_NAME_ARCHIVE_FILES = "archiveFiles";
  @SerializedName(SERIALIZED_NAME_ARCHIVE_FILES)
  private List<ArchiveBucketFile> archiveFiles;

  public static final String SERIALIZED_NAME_ARCHIVE_FILE_COUNT = "archiveFileCount";
  @SerializedName(SERIALIZED_NAME_ARCHIVE_FILE_COUNT)
  private Long archiveFileCount;

  public GetArchiveBucket200Response() {
  }

  public GetArchiveBucket200Response archiveBucket(ArchiveBucket archiveBucket) {
    
    this.archiveBucket = archiveBucket;
    return this;
  }

   /**
   * Get archiveBucket
   * @return archiveBucket
  **/
  @javax.annotation.Nullable
  public ArchiveBucket getArchiveBucket() {
    return archiveBucket;
  }


  public void setArchiveBucket(ArchiveBucket archiveBucket) {
    this.archiveBucket = archiveBucket;
  }


  public GetArchiveBucket200Response isOwner(Boolean isOwner) {
    
    this.isOwner = isOwner;
    return this;
  }

   /**
   * Get isOwner
   * @return isOwner
  **/
  @javax.annotation.Nullable
  public Boolean getIsOwner() {
    return isOwner;
  }


  public void setIsOwner(Boolean isOwner) {
    this.isOwner = isOwner;
  }


  public GetArchiveBucket200Response parentDirectory(String parentDirectory) {
    
    this.parentDirectory = parentDirectory;
    return this;
  }

   /**
   * Get parentDirectory
   * @return parentDirectory
  **/
  @javax.annotation.Nullable
  public String getParentDirectory() {
    return parentDirectory;
  }


  public void setParentDirectory(String parentDirectory) {
    this.parentDirectory = parentDirectory;
  }


  public GetArchiveBucket200Response archiveFiles(List<ArchiveBucketFile> archiveFiles) {
    
    this.archiveFiles = archiveFiles;
    return this;
  }

  public GetArchiveBucket200Response addArchiveFilesItem(ArchiveBucketFile archiveFilesItem) {
    if (this.archiveFiles == null) {
      this.archiveFiles = new ArrayList<>();
    }
    this.archiveFiles.add(archiveFilesItem);
    return this;
  }

   /**
   * Get archiveFiles
   * @return archiveFiles
  **/
  @javax.annotation.Nullable
  public List<ArchiveBucketFile> getArchiveFiles() {
    return archiveFiles;
  }


  public void setArchiveFiles(List<ArchiveBucketFile> archiveFiles) {
    this.archiveFiles = archiveFiles;
  }


  public GetArchiveBucket200Response archiveFileCount(Long archiveFileCount) {
    
    this.archiveFileCount = archiveFileCount;
    return this;
  }

   /**
   * Get archiveFileCount
   * @return archiveFileCount
  **/
  @javax.annotation.Nullable
  public Long getArchiveFileCount() {
    return archiveFileCount;
  }


  public void setArchiveFileCount(Long archiveFileCount) {
    this.archiveFileCount = archiveFileCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetArchiveBucket200Response getArchiveBucket200Response = (GetArchiveBucket200Response) o;
    return Objects.equals(this.archiveBucket, getArchiveBucket200Response.archiveBucket) &&
        Objects.equals(this.isOwner, getArchiveBucket200Response.isOwner) &&
        Objects.equals(this.parentDirectory, getArchiveBucket200Response.parentDirectory) &&
        Objects.equals(this.archiveFiles, getArchiveBucket200Response.archiveFiles) &&
        Objects.equals(this.archiveFileCount, getArchiveBucket200Response.archiveFileCount);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(archiveBucket, isOwner, parentDirectory, archiveFiles, archiveFileCount);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetArchiveBucket200Response {\n");
    sb.append("    archiveBucket: ").append(toIndentedString(archiveBucket)).append("\n");
    sb.append("    isOwner: ").append(toIndentedString(isOwner)).append("\n");
    sb.append("    parentDirectory: ").append(toIndentedString(parentDirectory)).append("\n");
    sb.append("    archiveFiles: ").append(toIndentedString(archiveFiles)).append("\n");
    sb.append("    archiveFileCount: ").append(toIndentedString(archiveFileCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("archiveBucket");
    openapiFields.add("isOwner");
    openapiFields.add("parentDirectory");
    openapiFields.add("archiveFiles");
    openapiFields.add("archiveFileCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to GetArchiveBucket200Response
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetArchiveBucket200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetArchiveBucket200Response is not found in the empty JSON string", GetArchiveBucket200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!GetArchiveBucket200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetArchiveBucket200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `archiveBucket`
      if (jsonObj.get("archiveBucket") != null && !jsonObj.get("archiveBucket").isJsonNull()) {
        ArchiveBucket.validateJsonElement(jsonObj.get("archiveBucket"));
      }
      if ((jsonObj.get("parentDirectory") != null && !jsonObj.get("parentDirectory").isJsonNull()) && !jsonObj.get("parentDirectory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentDirectory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parentDirectory").toString()));
      }
      if (jsonObj.get("archiveFiles") != null && !jsonObj.get("archiveFiles").isJsonNull()) {
        JsonArray jsonArrayarchiveFiles = jsonObj.getAsJsonArray("archiveFiles");
        if (jsonArrayarchiveFiles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("archiveFiles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `archiveFiles` to be an array in the JSON string but got `%s`", jsonObj.get("archiveFiles").toString()));
          }

          // validate the optional field `archiveFiles` (array)
          for (int i = 0; i < jsonArrayarchiveFiles.size(); i++) {
            ArchiveBucketFile.validateJsonElement(jsonArrayarchiveFiles.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetArchiveBucket200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetArchiveBucket200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetArchiveBucket200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetArchiveBucket200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<GetArchiveBucket200Response>() {
           @Override
           public void write(JsonWriter out, GetArchiveBucket200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetArchiveBucket200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GetArchiveBucket200Response given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GetArchiveBucket200Response
  * @throws IOException if the JSON string is invalid with respect to GetArchiveBucket200Response
  */
  public static GetArchiveBucket200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetArchiveBucket200Response.class);
  }

 /**
  * Convert an instance of GetArchiveBucket200Response to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

