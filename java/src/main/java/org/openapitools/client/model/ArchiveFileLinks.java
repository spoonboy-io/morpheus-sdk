/*
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.1.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import org.openapitools.client.model.ArchiveBucketFileCreatedBy;
import org.openapitools.client.model.ArchiveFileLinksArchiveFile;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ArchiveFileLinks
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-17T13:37:08.123540Z[Etc/UTC]")
public class ArchiveFileLinks {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_SECRET_ACCESS_KEY = "secretAccessKey";
  @SerializedName(SERIALIZED_NAME_SECRET_ACCESS_KEY)
  private String secretAccessKey;

  public static final String SERIALIZED_NAME_ARCHIVE_FILE = "archiveFile";
  @SerializedName(SERIALIZED_NAME_ARCHIVE_FILE)
  private ArchiveFileLinksArchiveFile archiveFile;

  public static final String SERIALIZED_NAME_CREATED_BY = "createdBy";
  @SerializedName(SERIALIZED_NAME_CREATED_BY)
  private ArchiveBucketFileCreatedBy createdBy;

  public static final String SERIALIZED_NAME_DATE_CREATED = "dateCreated";
  @SerializedName(SERIALIZED_NAME_DATE_CREATED)
  private OffsetDateTime dateCreated;

  public static final String SERIALIZED_NAME_LAST_UPDATED = "lastUpdated";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED)
  private OffsetDateTime lastUpdated;

  public static final String SERIALIZED_NAME_LAST_ACCESS_DATE = "lastAccessDate";
  @SerializedName(SERIALIZED_NAME_LAST_ACCESS_DATE)
  private OffsetDateTime lastAccessDate;

  public static final String SERIALIZED_NAME_EXPIRATION_DATE = "expirationDate";
  @SerializedName(SERIALIZED_NAME_EXPIRATION_DATE)
  private OffsetDateTime expirationDate;

  public static final String SERIALIZED_NAME_DOWNLOAD_COUNT = "downloadCount";
  @SerializedName(SERIALIZED_NAME_DOWNLOAD_COUNT)
  private Long downloadCount;

  public ArchiveFileLinks() {
  }

  public ArchiveFileLinks id(Long id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  public Long getId() {
    return id;
  }


  public void setId(Long id) {
    this.id = id;
  }


  public ArchiveFileLinks secretAccessKey(String secretAccessKey) {
    
    this.secretAccessKey = secretAccessKey;
    return this;
  }

   /**
   * Get secretAccessKey
   * @return secretAccessKey
  **/
  @javax.annotation.Nullable
  public String getSecretAccessKey() {
    return secretAccessKey;
  }


  public void setSecretAccessKey(String secretAccessKey) {
    this.secretAccessKey = secretAccessKey;
  }


  public ArchiveFileLinks archiveFile(ArchiveFileLinksArchiveFile archiveFile) {
    
    this.archiveFile = archiveFile;
    return this;
  }

   /**
   * Get archiveFile
   * @return archiveFile
  **/
  @javax.annotation.Nullable
  public ArchiveFileLinksArchiveFile getArchiveFile() {
    return archiveFile;
  }


  public void setArchiveFile(ArchiveFileLinksArchiveFile archiveFile) {
    this.archiveFile = archiveFile;
  }


  public ArchiveFileLinks createdBy(ArchiveBucketFileCreatedBy createdBy) {
    
    this.createdBy = createdBy;
    return this;
  }

   /**
   * Get createdBy
   * @return createdBy
  **/
  @javax.annotation.Nullable
  public ArchiveBucketFileCreatedBy getCreatedBy() {
    return createdBy;
  }


  public void setCreatedBy(ArchiveBucketFileCreatedBy createdBy) {
    this.createdBy = createdBy;
  }


  public ArchiveFileLinks dateCreated(OffsetDateTime dateCreated) {
    
    this.dateCreated = dateCreated;
    return this;
  }

   /**
   * Get dateCreated
   * @return dateCreated
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getDateCreated() {
    return dateCreated;
  }


  public void setDateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
  }


  public ArchiveFileLinks lastUpdated(OffsetDateTime lastUpdated) {
    
    this.lastUpdated = lastUpdated;
    return this;
  }

   /**
   * Get lastUpdated
   * @return lastUpdated
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdated() {
    return lastUpdated;
  }


  public void setLastUpdated(OffsetDateTime lastUpdated) {
    this.lastUpdated = lastUpdated;
  }


  public ArchiveFileLinks lastAccessDate(OffsetDateTime lastAccessDate) {
    
    this.lastAccessDate = lastAccessDate;
    return this;
  }

   /**
   * Get lastAccessDate
   * @return lastAccessDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getLastAccessDate() {
    return lastAccessDate;
  }


  public void setLastAccessDate(OffsetDateTime lastAccessDate) {
    this.lastAccessDate = lastAccessDate;
  }


  public ArchiveFileLinks expirationDate(OffsetDateTime expirationDate) {
    
    this.expirationDate = expirationDate;
    return this;
  }

   /**
   * Get expirationDate
   * @return expirationDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getExpirationDate() {
    return expirationDate;
  }


  public void setExpirationDate(OffsetDateTime expirationDate) {
    this.expirationDate = expirationDate;
  }


  public ArchiveFileLinks downloadCount(Long downloadCount) {
    
    this.downloadCount = downloadCount;
    return this;
  }

   /**
   * Get downloadCount
   * @return downloadCount
  **/
  @javax.annotation.Nullable
  public Long getDownloadCount() {
    return downloadCount;
  }


  public void setDownloadCount(Long downloadCount) {
    this.downloadCount = downloadCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ArchiveFileLinks archiveFileLinks = (ArchiveFileLinks) o;
    return Objects.equals(this.id, archiveFileLinks.id) &&
        Objects.equals(this.secretAccessKey, archiveFileLinks.secretAccessKey) &&
        Objects.equals(this.archiveFile, archiveFileLinks.archiveFile) &&
        Objects.equals(this.createdBy, archiveFileLinks.createdBy) &&
        Objects.equals(this.dateCreated, archiveFileLinks.dateCreated) &&
        Objects.equals(this.lastUpdated, archiveFileLinks.lastUpdated) &&
        Objects.equals(this.lastAccessDate, archiveFileLinks.lastAccessDate) &&
        Objects.equals(this.expirationDate, archiveFileLinks.expirationDate) &&
        Objects.equals(this.downloadCount, archiveFileLinks.downloadCount);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, secretAccessKey, archiveFile, createdBy, dateCreated, lastUpdated, lastAccessDate, expirationDate, downloadCount);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ArchiveFileLinks {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    secretAccessKey: ").append(toIndentedString(secretAccessKey)).append("\n");
    sb.append("    archiveFile: ").append(toIndentedString(archiveFile)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
    sb.append("    lastAccessDate: ").append(toIndentedString(lastAccessDate)).append("\n");
    sb.append("    expirationDate: ").append(toIndentedString(expirationDate)).append("\n");
    sb.append("    downloadCount: ").append(toIndentedString(downloadCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("secretAccessKey");
    openapiFields.add("archiveFile");
    openapiFields.add("createdBy");
    openapiFields.add("dateCreated");
    openapiFields.add("lastUpdated");
    openapiFields.add("lastAccessDate");
    openapiFields.add("expirationDate");
    openapiFields.add("downloadCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ArchiveFileLinks
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ArchiveFileLinks.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ArchiveFileLinks is not found in the empty JSON string", ArchiveFileLinks.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ArchiveFileLinks.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ArchiveFileLinks` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("secretAccessKey") != null && !jsonObj.get("secretAccessKey").isJsonNull()) && !jsonObj.get("secretAccessKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secretAccessKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secretAccessKey").toString()));
      }
      // validate the optional field `archiveFile`
      if (jsonObj.get("archiveFile") != null && !jsonObj.get("archiveFile").isJsonNull()) {
        ArchiveFileLinksArchiveFile.validateJsonElement(jsonObj.get("archiveFile"));
      }
      // validate the optional field `createdBy`
      if (jsonObj.get("createdBy") != null && !jsonObj.get("createdBy").isJsonNull()) {
        ArchiveBucketFileCreatedBy.validateJsonElement(jsonObj.get("createdBy"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ArchiveFileLinks.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ArchiveFileLinks' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ArchiveFileLinks> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ArchiveFileLinks.class));

       return (TypeAdapter<T>) new TypeAdapter<ArchiveFileLinks>() {
           @Override
           public void write(JsonWriter out, ArchiveFileLinks value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ArchiveFileLinks read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ArchiveFileLinks given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ArchiveFileLinks
  * @throws IOException if the JSON string is invalid with respect to ArchiveFileLinks
  */
  public static ArchiveFileLinks fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ArchiveFileLinks.class);
  }

 /**
  * Convert an instance of ArchiveFileLinks to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

