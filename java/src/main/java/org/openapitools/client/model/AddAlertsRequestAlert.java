/*
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.1.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AddAlertsRequestAlertContactsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Payload for creating a new monitoring alert
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-17T13:37:08.123540Z[Etc/UTC]")
public class AddAlertsRequestAlert {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_MIN_DURATION = "minDuration";
  @SerializedName(SERIALIZED_NAME_MIN_DURATION)
  private Integer minDuration = 0;

  /**
   * Severity level threshold for sending notifications.
   */
  @JsonAdapter(MinSeverityEnum.Adapter.class)
  public enum MinSeverityEnum {
    INFO("info"),
    
    WARNING("warning"),
    
    CRITICAL("critical");

    private String value;

    MinSeverityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MinSeverityEnum fromValue(String value) {
      for (MinSeverityEnum b : MinSeverityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MinSeverityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MinSeverityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MinSeverityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MinSeverityEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_MIN_SEVERITY = "minSeverity";
  @SerializedName(SERIALIZED_NAME_MIN_SEVERITY)
  private MinSeverityEnum minSeverity = MinSeverityEnum.CRITICAL;

  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private Boolean active = true;

  public static final String SERIALIZED_NAME_ALL_CHECKS = "allChecks";
  @SerializedName(SERIALIZED_NAME_ALL_CHECKS)
  private Boolean allChecks = false;

  public static final String SERIALIZED_NAME_ALL_GROUPS = "allGroups";
  @SerializedName(SERIALIZED_NAME_ALL_GROUPS)
  private Boolean allGroups = false;

  public static final String SERIALIZED_NAME_ALL_APPS = "allApps";
  @SerializedName(SERIALIZED_NAME_ALL_APPS)
  private Boolean allApps = false;

  public static final String SERIALIZED_NAME_CHECKS = "checks";
  @SerializedName(SERIALIZED_NAME_CHECKS)
  private List<Integer> checks;

  public static final String SERIALIZED_NAME_GROUPS = "groups";
  @SerializedName(SERIALIZED_NAME_GROUPS)
  private List<Integer> groups;

  public static final String SERIALIZED_NAME_APPS = "apps";
  @SerializedName(SERIALIZED_NAME_APPS)
  private List<Integer> apps;

  public static final String SERIALIZED_NAME_CONTACTS = "contacts";
  @SerializedName(SERIALIZED_NAME_CONTACTS)
  private List<AddAlertsRequestAlertContactsInner> contacts;

  public AddAlertsRequestAlert() {
  }

  public AddAlertsRequestAlert name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Unique name scoped to your account for the alert
   * @return name
  **/
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public AddAlertsRequestAlert minDuration(Integer minDuration) {
    
    this.minDuration = minDuration;
    return this;
  }

   /**
   * Duration in minutes of the delay before sending notification(s)
   * @return minDuration
  **/
  @javax.annotation.Nullable
  public Integer getMinDuration() {
    return minDuration;
  }


  public void setMinDuration(Integer minDuration) {
    this.minDuration = minDuration;
  }


  public AddAlertsRequestAlert minSeverity(MinSeverityEnum minSeverity) {
    
    this.minSeverity = minSeverity;
    return this;
  }

   /**
   * Severity level threshold for sending notifications.
   * @return minSeverity
  **/
  @javax.annotation.Nullable
  public MinSeverityEnum getMinSeverity() {
    return minSeverity;
  }


  public void setMinSeverity(MinSeverityEnum minSeverity) {
    this.minSeverity = minSeverity;
  }


  public AddAlertsRequestAlert active(Boolean active) {
    
    this.active = active;
    return this;
  }

   /**
   * Set to false to disable notifications
   * @return active
  **/
  @javax.annotation.Nullable
  public Boolean getActive() {
    return active;
  }


  public void setActive(Boolean active) {
    this.active = active;
  }


  public AddAlertsRequestAlert allChecks(Boolean allChecks) {
    
    this.allChecks = allChecks;
    return this;
  }

   /**
   * Trigger for all checks
   * @return allChecks
  **/
  @javax.annotation.Nullable
  public Boolean getAllChecks() {
    return allChecks;
  }


  public void setAllChecks(Boolean allChecks) {
    this.allChecks = allChecks;
  }


  public AddAlertsRequestAlert allGroups(Boolean allGroups) {
    
    this.allGroups = allGroups;
    return this;
  }

   /**
   * Trigger for all check groups
   * @return allGroups
  **/
  @javax.annotation.Nullable
  public Boolean getAllGroups() {
    return allGroups;
  }


  public void setAllGroups(Boolean allGroups) {
    this.allGroups = allGroups;
  }


  public AddAlertsRequestAlert allApps(Boolean allApps) {
    
    this.allApps = allApps;
    return this;
  }

   /**
   * Trigger for all monitor apps
   * @return allApps
  **/
  @javax.annotation.Nullable
  public Boolean getAllApps() {
    return allApps;
  }


  public void setAllApps(Boolean allApps) {
    this.allApps = allApps;
  }


  public AddAlertsRequestAlert checks(List<Integer> checks) {
    
    this.checks = checks;
    return this;
  }

  public AddAlertsRequestAlert addChecksItem(Integer checksItem) {
    if (this.checks == null) {
      this.checks = new ArrayList<>();
    }
    this.checks.add(checksItem);
    return this;
  }

   /**
   * Get checks
   * @return checks
  **/
  @javax.annotation.Nullable
  public List<Integer> getChecks() {
    return checks;
  }


  public void setChecks(List<Integer> checks) {
    this.checks = checks;
  }


  public AddAlertsRequestAlert groups(List<Integer> groups) {
    
    this.groups = groups;
    return this;
  }

  public AddAlertsRequestAlert addGroupsItem(Integer groupsItem) {
    if (this.groups == null) {
      this.groups = new ArrayList<>();
    }
    this.groups.add(groupsItem);
    return this;
  }

   /**
   * Get groups
   * @return groups
  **/
  @javax.annotation.Nullable
  public List<Integer> getGroups() {
    return groups;
  }


  public void setGroups(List<Integer> groups) {
    this.groups = groups;
  }


  public AddAlertsRequestAlert apps(List<Integer> apps) {
    
    this.apps = apps;
    return this;
  }

  public AddAlertsRequestAlert addAppsItem(Integer appsItem) {
    if (this.apps == null) {
      this.apps = new ArrayList<>();
    }
    this.apps.add(appsItem);
    return this;
  }

   /**
   * Get apps
   * @return apps
  **/
  @javax.annotation.Nullable
  public List<Integer> getApps() {
    return apps;
  }


  public void setApps(List<Integer> apps) {
    this.apps = apps;
  }


  public AddAlertsRequestAlert contacts(List<AddAlertsRequestAlertContactsInner> contacts) {
    
    this.contacts = contacts;
    return this;
  }

  public AddAlertsRequestAlert addContactsItem(AddAlertsRequestAlertContactsInner contactsItem) {
    if (this.contacts == null) {
      this.contacts = new ArrayList<>();
    }
    this.contacts.add(contactsItem);
    return this;
  }

   /**
   * Get contacts
   * @return contacts
  **/
  @javax.annotation.Nullable
  public List<AddAlertsRequestAlertContactsInner> getContacts() {
    return contacts;
  }


  public void setContacts(List<AddAlertsRequestAlertContactsInner> contacts) {
    this.contacts = contacts;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AddAlertsRequestAlert addAlertsRequestAlert = (AddAlertsRequestAlert) o;
    return Objects.equals(this.name, addAlertsRequestAlert.name) &&
        Objects.equals(this.minDuration, addAlertsRequestAlert.minDuration) &&
        Objects.equals(this.minSeverity, addAlertsRequestAlert.minSeverity) &&
        Objects.equals(this.active, addAlertsRequestAlert.active) &&
        Objects.equals(this.allChecks, addAlertsRequestAlert.allChecks) &&
        Objects.equals(this.allGroups, addAlertsRequestAlert.allGroups) &&
        Objects.equals(this.allApps, addAlertsRequestAlert.allApps) &&
        Objects.equals(this.checks, addAlertsRequestAlert.checks) &&
        Objects.equals(this.groups, addAlertsRequestAlert.groups) &&
        Objects.equals(this.apps, addAlertsRequestAlert.apps) &&
        Objects.equals(this.contacts, addAlertsRequestAlert.contacts);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, minDuration, minSeverity, active, allChecks, allGroups, allApps, checks, groups, apps, contacts);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AddAlertsRequestAlert {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    minDuration: ").append(toIndentedString(minDuration)).append("\n");
    sb.append("    minSeverity: ").append(toIndentedString(minSeverity)).append("\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    allChecks: ").append(toIndentedString(allChecks)).append("\n");
    sb.append("    allGroups: ").append(toIndentedString(allGroups)).append("\n");
    sb.append("    allApps: ").append(toIndentedString(allApps)).append("\n");
    sb.append("    checks: ").append(toIndentedString(checks)).append("\n");
    sb.append("    groups: ").append(toIndentedString(groups)).append("\n");
    sb.append("    apps: ").append(toIndentedString(apps)).append("\n");
    sb.append("    contacts: ").append(toIndentedString(contacts)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("minDuration");
    openapiFields.add("minSeverity");
    openapiFields.add("active");
    openapiFields.add("allChecks");
    openapiFields.add("allGroups");
    openapiFields.add("allApps");
    openapiFields.add("checks");
    openapiFields.add("groups");
    openapiFields.add("apps");
    openapiFields.add("contacts");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to AddAlertsRequestAlert
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AddAlertsRequestAlert.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AddAlertsRequestAlert is not found in the empty JSON string", AddAlertsRequestAlert.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!AddAlertsRequestAlert.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AddAlertsRequestAlert` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AddAlertsRequestAlert.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("minSeverity") != null && !jsonObj.get("minSeverity").isJsonNull()) && !jsonObj.get("minSeverity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `minSeverity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("minSeverity").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("checks") != null && !jsonObj.get("checks").isJsonNull() && !jsonObj.get("checks").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `checks` to be an array in the JSON string but got `%s`", jsonObj.get("checks").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("groups") != null && !jsonObj.get("groups").isJsonNull() && !jsonObj.get("groups").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `groups` to be an array in the JSON string but got `%s`", jsonObj.get("groups").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("apps") != null && !jsonObj.get("apps").isJsonNull() && !jsonObj.get("apps").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `apps` to be an array in the JSON string but got `%s`", jsonObj.get("apps").toString()));
      }
      if (jsonObj.get("contacts") != null && !jsonObj.get("contacts").isJsonNull()) {
        JsonArray jsonArraycontacts = jsonObj.getAsJsonArray("contacts");
        if (jsonArraycontacts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("contacts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `contacts` to be an array in the JSON string but got `%s`", jsonObj.get("contacts").toString()));
          }

          // validate the optional field `contacts` (array)
          for (int i = 0; i < jsonArraycontacts.size(); i++) {
            AddAlertsRequestAlertContactsInner.validateJsonElement(jsonArraycontacts.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AddAlertsRequestAlert.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AddAlertsRequestAlert' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AddAlertsRequestAlert> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AddAlertsRequestAlert.class));

       return (TypeAdapter<T>) new TypeAdapter<AddAlertsRequestAlert>() {
           @Override
           public void write(JsonWriter out, AddAlertsRequestAlert value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AddAlertsRequestAlert read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AddAlertsRequestAlert given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AddAlertsRequestAlert
  * @throws IOException if the JSON string is invalid with respect to AddAlertsRequestAlert
  */
  public static AddAlertsRequestAlert fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AddAlertsRequestAlert.class);
  }

 /**
  * Convert an instance of AddAlertsRequestAlert to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

