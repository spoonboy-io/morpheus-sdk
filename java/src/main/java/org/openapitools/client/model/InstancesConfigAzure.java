/*
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * InstancesConfigAzure
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-21T11:26:47.028Z[GMT]")
public class InstancesConfigAzure {
  public static final String SERIALIZED_NAME_RESOURCE_POOL_ID = "resourcePoolId";
  @SerializedName(SERIALIZED_NAME_RESOURCE_POOL_ID)
  private String resourcePoolId;

  /**
   * Availability Options
   */
  @JsonAdapter(AvailabilityOptionsEnum.Adapter.class)
  public enum AvailabilityOptionsEnum {
    ZONE("zone"),
    
    SET("set");

    private String value;

    AvailabilityOptionsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AvailabilityOptionsEnum fromValue(String value) {
      for (AvailabilityOptionsEnum b : AvailabilityOptionsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AvailabilityOptionsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AvailabilityOptionsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AvailabilityOptionsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AvailabilityOptionsEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_AVAILABILITY_OPTIONS = "availabilityOptions";
  @SerializedName(SERIALIZED_NAME_AVAILABILITY_OPTIONS)
  private AvailabilityOptionsEnum availabilityOptions;

  public static final String SERIALIZED_NAME_AVAILABILITY_SET = "availabilitySet";
  @SerializedName(SERIALIZED_NAME_AVAILABILITY_SET)
  private String availabilitySet;

  public static final String SERIALIZED_NAME_AVAILABILITY_ZONE = "availabilityZone";
  @SerializedName(SERIALIZED_NAME_AVAILABILITY_ZONE)
  private Long availabilityZone;

  /**
   * Assign Public IP
   */
  @JsonAdapter(AzurefloatingIpEnum.Adapter.class)
  public enum AzurefloatingIpEnum {
    ON("on"),
    
    OFF("off");

    private String value;

    AzurefloatingIpEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AzurefloatingIpEnum fromValue(String value) {
      for (AzurefloatingIpEnum b : AzurefloatingIpEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AzurefloatingIpEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AzurefloatingIpEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AzurefloatingIpEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AzurefloatingIpEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_AZUREFLOATING_IP = "azurefloatingIp";
  @SerializedName(SERIALIZED_NAME_AZUREFLOATING_IP)
  private AzurefloatingIpEnum azurefloatingIp;

  /**
   * Boot Diagnostics
   */
  @JsonAdapter(BootDiagnosticsEnum.Adapter.class)
  public enum BootDiagnosticsEnum {
    ENABLE("enable"),
    
    ENABLE_CUSTOM_STORAGE("enable_custom_storage");

    private String value;

    BootDiagnosticsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BootDiagnosticsEnum fromValue(String value) {
      for (BootDiagnosticsEnum b : BootDiagnosticsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BootDiagnosticsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BootDiagnosticsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BootDiagnosticsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BootDiagnosticsEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_BOOT_DIAGNOSTICS = "bootDiagnostics";
  @SerializedName(SERIALIZED_NAME_BOOT_DIAGNOSTICS)
  private BootDiagnosticsEnum bootDiagnostics;

  /**
   * OS Guest Diagnostics
   */
  @JsonAdapter(OsGuestDiagnosticsEnum.Adapter.class)
  public enum OsGuestDiagnosticsEnum {
    ON("on"),
    
    OFF("off");

    private String value;

    OsGuestDiagnosticsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OsGuestDiagnosticsEnum fromValue(String value) {
      for (OsGuestDiagnosticsEnum b : OsGuestDiagnosticsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OsGuestDiagnosticsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OsGuestDiagnosticsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OsGuestDiagnosticsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OsGuestDiagnosticsEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_OS_GUEST_DIAGNOSTICS = "osGuestDiagnostics";
  @SerializedName(SERIALIZED_NAME_OS_GUEST_DIAGNOSTICS)
  private OsGuestDiagnosticsEnum osGuestDiagnostics;

  public static final String SERIALIZED_NAME_DIAGNOSTICS_STORAGE_ACCOUNT = "diagnosticsStorageAccount";
  @SerializedName(SERIALIZED_NAME_DIAGNOSTICS_STORAGE_ACCOUNT)
  private String diagnosticsStorageAccount;

  public static final String SERIALIZED_NAME_CREATE_USER = "createUser";
  @SerializedName(SERIALIZED_NAME_CREATE_USER)
  private Boolean createUser = true;


  public InstancesConfigAzure resourcePoolId(String resourcePoolId) {
    
    this.resourcePoolId = resourcePoolId;
    return this;
  }

   /**
   * id of the resource group to be used, can be prefixed with &#x60;pool-&#x60;. A resource pool group can be specified instead by prefixing its ID with &#x60;poolGroup-&#x60;.
   * @return resourcePoolId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "id of the resource group to be used, can be prefixed with `pool-`. A resource pool group can be specified instead by prefixing its ID with `poolGroup-`.")

  public String getResourcePoolId() {
    return resourcePoolId;
  }


  public void setResourcePoolId(String resourcePoolId) {
    this.resourcePoolId = resourcePoolId;
  }


  public InstancesConfigAzure availabilityOptions(AvailabilityOptionsEnum availabilityOptions) {
    
    this.availabilityOptions = availabilityOptions;
    return this;
  }

   /**
   * Availability Options
   * @return availabilityOptions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Availability Options")

  public AvailabilityOptionsEnum getAvailabilityOptions() {
    return availabilityOptions;
  }


  public void setAvailabilityOptions(AvailabilityOptionsEnum availabilityOptions) {
    this.availabilityOptions = availabilityOptions;
  }


  public InstancesConfigAzure availabilitySet(String availabilitySet) {
    
    this.availabilitySet = availabilitySet;
    return this;
  }

   /**
   * Availability Set
   * @return availabilitySet
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Availability Set")

  public String getAvailabilitySet() {
    return availabilitySet;
  }


  public void setAvailabilitySet(String availabilitySet) {
    this.availabilitySet = availabilitySet;
  }


  public InstancesConfigAzure availabilityZone(Long availabilityZone) {
    
    this.availabilityZone = availabilityZone;
    return this;
  }

   /**
   * Availability Zone
   * @return availabilityZone
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Availability Zone")

  public Long getAvailabilityZone() {
    return availabilityZone;
  }


  public void setAvailabilityZone(Long availabilityZone) {
    this.availabilityZone = availabilityZone;
  }


  public InstancesConfigAzure azurefloatingIp(AzurefloatingIpEnum azurefloatingIp) {
    
    this.azurefloatingIp = azurefloatingIp;
    return this;
  }

   /**
   * Assign Public IP
   * @return azurefloatingIp
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Assign Public IP")

  public AzurefloatingIpEnum getAzurefloatingIp() {
    return azurefloatingIp;
  }


  public void setAzurefloatingIp(AzurefloatingIpEnum azurefloatingIp) {
    this.azurefloatingIp = azurefloatingIp;
  }


  public InstancesConfigAzure bootDiagnostics(BootDiagnosticsEnum bootDiagnostics) {
    
    this.bootDiagnostics = bootDiagnostics;
    return this;
  }

   /**
   * Boot Diagnostics
   * @return bootDiagnostics
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Boot Diagnostics")

  public BootDiagnosticsEnum getBootDiagnostics() {
    return bootDiagnostics;
  }


  public void setBootDiagnostics(BootDiagnosticsEnum bootDiagnostics) {
    this.bootDiagnostics = bootDiagnostics;
  }


  public InstancesConfigAzure osGuestDiagnostics(OsGuestDiagnosticsEnum osGuestDiagnostics) {
    
    this.osGuestDiagnostics = osGuestDiagnostics;
    return this;
  }

   /**
   * OS Guest Diagnostics
   * @return osGuestDiagnostics
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "OS Guest Diagnostics")

  public OsGuestDiagnosticsEnum getOsGuestDiagnostics() {
    return osGuestDiagnostics;
  }


  public void setOsGuestDiagnostics(OsGuestDiagnosticsEnum osGuestDiagnostics) {
    this.osGuestDiagnostics = osGuestDiagnostics;
  }


  public InstancesConfigAzure diagnosticsStorageAccount(String diagnosticsStorageAccount) {
    
    this.diagnosticsStorageAccount = diagnosticsStorageAccount;
    return this;
  }

   /**
   * Diagnostics Storage Account
   * @return diagnosticsStorageAccount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Diagnostics Storage Account")

  public String getDiagnosticsStorageAccount() {
    return diagnosticsStorageAccount;
  }


  public void setDiagnosticsStorageAccount(String diagnosticsStorageAccount) {
    this.diagnosticsStorageAccount = diagnosticsStorageAccount;
  }


  public InstancesConfigAzure createUser(Boolean createUser) {
    
    this.createUser = createUser;
    return this;
  }

   /**
   * Create User
   * @return createUser
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Create User")

  public Boolean getCreateUser() {
    return createUser;
  }


  public void setCreateUser(Boolean createUser) {
    this.createUser = createUser;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InstancesConfigAzure instancesConfigAzure = (InstancesConfigAzure) o;
    return Objects.equals(this.resourcePoolId, instancesConfigAzure.resourcePoolId) &&
        Objects.equals(this.availabilityOptions, instancesConfigAzure.availabilityOptions) &&
        Objects.equals(this.availabilitySet, instancesConfigAzure.availabilitySet) &&
        Objects.equals(this.availabilityZone, instancesConfigAzure.availabilityZone) &&
        Objects.equals(this.azurefloatingIp, instancesConfigAzure.azurefloatingIp) &&
        Objects.equals(this.bootDiagnostics, instancesConfigAzure.bootDiagnostics) &&
        Objects.equals(this.osGuestDiagnostics, instancesConfigAzure.osGuestDiagnostics) &&
        Objects.equals(this.diagnosticsStorageAccount, instancesConfigAzure.diagnosticsStorageAccount) &&
        Objects.equals(this.createUser, instancesConfigAzure.createUser);
  }

  @Override
  public int hashCode() {
    return Objects.hash(resourcePoolId, availabilityOptions, availabilitySet, availabilityZone, azurefloatingIp, bootDiagnostics, osGuestDiagnostics, diagnosticsStorageAccount, createUser);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InstancesConfigAzure {\n");
    sb.append("    resourcePoolId: ").append(toIndentedString(resourcePoolId)).append("\n");
    sb.append("    availabilityOptions: ").append(toIndentedString(availabilityOptions)).append("\n");
    sb.append("    availabilitySet: ").append(toIndentedString(availabilitySet)).append("\n");
    sb.append("    availabilityZone: ").append(toIndentedString(availabilityZone)).append("\n");
    sb.append("    azurefloatingIp: ").append(toIndentedString(azurefloatingIp)).append("\n");
    sb.append("    bootDiagnostics: ").append(toIndentedString(bootDiagnostics)).append("\n");
    sb.append("    osGuestDiagnostics: ").append(toIndentedString(osGuestDiagnostics)).append("\n");
    sb.append("    diagnosticsStorageAccount: ").append(toIndentedString(diagnosticsStorageAccount)).append("\n");
    sb.append("    createUser: ").append(toIndentedString(createUser)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

