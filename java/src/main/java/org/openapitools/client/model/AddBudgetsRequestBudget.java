/*
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.1.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AddBudgetsRequestBudget
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-17T13:37:08.123540Z[Etc/UTC]")
public class AddBudgetsRequestBudget {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  /**
   * Gets or Sets scope
   */
  @JsonAdapter(ScopeEnum.Adapter.class)
  public enum ScopeEnum {
    ACCOUNT("account"),
    
    GROUP("group"),
    
    CLOUD("cloud"),
    
    USER("user");

    private String value;

    ScopeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ScopeEnum fromValue(String value) {
      for (ScopeEnum b : ScopeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ScopeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ScopeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ScopeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ScopeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SCOPE = "scope";
  @SerializedName(SERIALIZED_NAME_SCOPE)
  private ScopeEnum scope = ScopeEnum.ACCOUNT;

  public static final String SERIALIZED_NAME_PERIOD = "period";
  @SerializedName(SERIALIZED_NAME_PERIOD)
  private String period = "year";

  public static final String SERIALIZED_NAME_YEAR = "year";
  @SerializedName(SERIALIZED_NAME_YEAR)
  private Long year;

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private OffsetDateTime startDate;

  public static final String SERIALIZED_NAME_END_DATE = "endDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private OffsetDateTime endDate;

  /**
   * Gets or Sets interval
   */
  @JsonAdapter(IntervalEnum.Adapter.class)
  public enum IntervalEnum {
    YEAR("year"),
    
    QUARTER("quarter"),
    
    MONTH("month");

    private String value;

    IntervalEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IntervalEnum fromValue(String value) {
      for (IntervalEnum b : IntervalEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IntervalEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IntervalEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IntervalEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IntervalEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_INTERVAL = "interval";
  @SerializedName(SERIALIZED_NAME_INTERVAL)
  private IntervalEnum interval = IntervalEnum.YEAR;

  public static final String SERIALIZED_NAME_SCOPE_TENANT_ID = "scopeTenantId";
  @SerializedName(SERIALIZED_NAME_SCOPE_TENANT_ID)
  private Long scopeTenantId;

  public static final String SERIALIZED_NAME_SCOPE_GROUP_ID = "scopeGroupId";
  @SerializedName(SERIALIZED_NAME_SCOPE_GROUP_ID)
  private Long scopeGroupId;

  public static final String SERIALIZED_NAME_SCOPE_CLOUD_ID = "scopeCloudId";
  @SerializedName(SERIALIZED_NAME_SCOPE_CLOUD_ID)
  private Long scopeCloudId;

  public static final String SERIALIZED_NAME_SCOPE_USER_ID = "scopeUserId";
  @SerializedName(SERIALIZED_NAME_SCOPE_USER_ID)
  private Long scopeUserId;

  public static final String SERIALIZED_NAME_COSTS = "costs";
  @SerializedName(SERIALIZED_NAME_COSTS)
  private List<Long> costs;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled = true;

  public AddBudgetsRequestBudget() {
  }

  public AddBudgetsRequestBudget name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public AddBudgetsRequestBudget description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public AddBudgetsRequestBudget scope(ScopeEnum scope) {
    
    this.scope = scope;
    return this;
  }

   /**
   * Get scope
   * @return scope
  **/
  @javax.annotation.Nullable
  public ScopeEnum getScope() {
    return scope;
  }


  public void setScope(ScopeEnum scope) {
    this.scope = scope;
  }


  public AddBudgetsRequestBudget period(String period) {
    
    this.period = period;
    return this;
  }

   /**
   * Get period
   * @return period
  **/
  @javax.annotation.Nullable
  public String getPeriod() {
    return period;
  }


  public void setPeriod(String period) {
    this.period = period;
  }


  public AddBudgetsRequestBudget year(Long year) {
    
    this.year = year;
    return this;
  }

   /**
   * Get year
   * @return year
  **/
  @javax.annotation.Nullable
  public Long getYear() {
    return year;
  }


  public void setYear(Long year) {
    this.year = year;
  }


  public AddBudgetsRequestBudget startDate(OffsetDateTime startDate) {
    
    this.startDate = startDate;
    return this;
  }

   /**
   * Get startDate
   * @return startDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getStartDate() {
    return startDate;
  }


  public void setStartDate(OffsetDateTime startDate) {
    this.startDate = startDate;
  }


  public AddBudgetsRequestBudget endDate(OffsetDateTime endDate) {
    
    this.endDate = endDate;
    return this;
  }

   /**
   * Get endDate
   * @return endDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getEndDate() {
    return endDate;
  }


  public void setEndDate(OffsetDateTime endDate) {
    this.endDate = endDate;
  }


  public AddBudgetsRequestBudget interval(IntervalEnum interval) {
    
    this.interval = interval;
    return this;
  }

   /**
   * Get interval
   * @return interval
  **/
  @javax.annotation.Nullable
  public IntervalEnum getInterval() {
    return interval;
  }


  public void setInterval(IntervalEnum interval) {
    this.interval = interval;
  }


  public AddBudgetsRequestBudget scopeTenantId(Long scopeTenantId) {
    
    this.scopeTenantId = scopeTenantId;
    return this;
  }

   /**
   * The Tenant ID to scope to, for use with &#x60;&#x60;scope&#x60;&#x60;&#x3D;tenant 
   * @return scopeTenantId
  **/
  @javax.annotation.Nullable
  public Long getScopeTenantId() {
    return scopeTenantId;
  }


  public void setScopeTenantId(Long scopeTenantId) {
    this.scopeTenantId = scopeTenantId;
  }


  public AddBudgetsRequestBudget scopeGroupId(Long scopeGroupId) {
    
    this.scopeGroupId = scopeGroupId;
    return this;
  }

   /**
   * The Tenant ID to scope to, for use with &#x60;&#x60;scope&#x60;&#x60;&#x3D;group  
   * @return scopeGroupId
  **/
  @javax.annotation.Nullable
  public Long getScopeGroupId() {
    return scopeGroupId;
  }


  public void setScopeGroupId(Long scopeGroupId) {
    this.scopeGroupId = scopeGroupId;
  }


  public AddBudgetsRequestBudget scopeCloudId(Long scopeCloudId) {
    
    this.scopeCloudId = scopeCloudId;
    return this;
  }

   /**
   * The Tenant ID to scope to, for use with &#x60;&#x60;scope&#x60;&#x60;&#x3D;cloud 
   * @return scopeCloudId
  **/
  @javax.annotation.Nullable
  public Long getScopeCloudId() {
    return scopeCloudId;
  }


  public void setScopeCloudId(Long scopeCloudId) {
    this.scopeCloudId = scopeCloudId;
  }


  public AddBudgetsRequestBudget scopeUserId(Long scopeUserId) {
    
    this.scopeUserId = scopeUserId;
    return this;
  }

   /**
   * The Tenant ID to scope to, for use with &#x60;&#x60;scope&#x60;&#x60;&#x3D;user 
   * @return scopeUserId
  **/
  @javax.annotation.Nullable
  public Long getScopeUserId() {
    return scopeUserId;
  }


  public void setScopeUserId(Long scopeUserId) {
    this.scopeUserId = scopeUserId;
  }


  public AddBudgetsRequestBudget costs(List<Long> costs) {
    
    this.costs = costs;
    return this;
  }

  public AddBudgetsRequestBudget addCostsItem(Long costsItem) {
    if (this.costs == null) {
      this.costs = new ArrayList<>();
    }
    this.costs.add(costsItem);
    return this;
  }

   /**
   * Get costs
   * @return costs
  **/
  @javax.annotation.Nullable
  public List<Long> getCosts() {
    return costs;
  }


  public void setCosts(List<Long> costs) {
    this.costs = costs;
  }


  public AddBudgetsRequestBudget enabled(Boolean enabled) {
    
    this.enabled = enabled;
    return this;
  }

   /**
   * Get enabled
   * @return enabled
  **/
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }


  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AddBudgetsRequestBudget addBudgetsRequestBudget = (AddBudgetsRequestBudget) o;
    return Objects.equals(this.name, addBudgetsRequestBudget.name) &&
        Objects.equals(this.description, addBudgetsRequestBudget.description) &&
        Objects.equals(this.scope, addBudgetsRequestBudget.scope) &&
        Objects.equals(this.period, addBudgetsRequestBudget.period) &&
        Objects.equals(this.year, addBudgetsRequestBudget.year) &&
        Objects.equals(this.startDate, addBudgetsRequestBudget.startDate) &&
        Objects.equals(this.endDate, addBudgetsRequestBudget.endDate) &&
        Objects.equals(this.interval, addBudgetsRequestBudget.interval) &&
        Objects.equals(this.scopeTenantId, addBudgetsRequestBudget.scopeTenantId) &&
        Objects.equals(this.scopeGroupId, addBudgetsRequestBudget.scopeGroupId) &&
        Objects.equals(this.scopeCloudId, addBudgetsRequestBudget.scopeCloudId) &&
        Objects.equals(this.scopeUserId, addBudgetsRequestBudget.scopeUserId) &&
        Objects.equals(this.costs, addBudgetsRequestBudget.costs) &&
        Objects.equals(this.enabled, addBudgetsRequestBudget.enabled);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, description, scope, period, year, startDate, endDate, interval, scopeTenantId, scopeGroupId, scopeCloudId, scopeUserId, costs, enabled);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AddBudgetsRequestBudget {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("    period: ").append(toIndentedString(period)).append("\n");
    sb.append("    year: ").append(toIndentedString(year)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    interval: ").append(toIndentedString(interval)).append("\n");
    sb.append("    scopeTenantId: ").append(toIndentedString(scopeTenantId)).append("\n");
    sb.append("    scopeGroupId: ").append(toIndentedString(scopeGroupId)).append("\n");
    sb.append("    scopeCloudId: ").append(toIndentedString(scopeCloudId)).append("\n");
    sb.append("    scopeUserId: ").append(toIndentedString(scopeUserId)).append("\n");
    sb.append("    costs: ").append(toIndentedString(costs)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("description");
    openapiFields.add("scope");
    openapiFields.add("period");
    openapiFields.add("year");
    openapiFields.add("startDate");
    openapiFields.add("endDate");
    openapiFields.add("interval");
    openapiFields.add("scopeTenantId");
    openapiFields.add("scopeGroupId");
    openapiFields.add("scopeCloudId");
    openapiFields.add("scopeUserId");
    openapiFields.add("costs");
    openapiFields.add("enabled");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to AddBudgetsRequestBudget
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AddBudgetsRequestBudget.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AddBudgetsRequestBudget is not found in the empty JSON string", AddBudgetsRequestBudget.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!AddBudgetsRequestBudget.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AddBudgetsRequestBudget` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AddBudgetsRequestBudget.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("scope") != null && !jsonObj.get("scope").isJsonNull()) && !jsonObj.get("scope").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scope` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scope").toString()));
      }
      if ((jsonObj.get("period") != null && !jsonObj.get("period").isJsonNull()) && !jsonObj.get("period").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `period` to be a primitive type in the JSON string but got `%s`", jsonObj.get("period").toString()));
      }
      if ((jsonObj.get("interval") != null && !jsonObj.get("interval").isJsonNull()) && !jsonObj.get("interval").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `interval` to be a primitive type in the JSON string but got `%s`", jsonObj.get("interval").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("costs") != null && !jsonObj.get("costs").isJsonNull() && !jsonObj.get("costs").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `costs` to be an array in the JSON string but got `%s`", jsonObj.get("costs").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AddBudgetsRequestBudget.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AddBudgetsRequestBudget' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AddBudgetsRequestBudget> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AddBudgetsRequestBudget.class));

       return (TypeAdapter<T>) new TypeAdapter<AddBudgetsRequestBudget>() {
           @Override
           public void write(JsonWriter out, AddBudgetsRequestBudget value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AddBudgetsRequestBudget read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AddBudgetsRequestBudget given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AddBudgetsRequestBudget
  * @throws IOException if the JSON string is invalid with respect to AddBudgetsRequestBudget
  */
  public static AddBudgetsRequestBudget fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AddBudgetsRequestBudget.class);
  }

 /**
  * Convert an instance of AddBudgetsRequestBudget to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

