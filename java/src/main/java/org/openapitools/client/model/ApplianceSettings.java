/*
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.1.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ApplianceSettingsEnabledZoneTypesInner;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ApplianceSettings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-17T13:37:08.123540Z[Etc/UTC]")
public class ApplianceSettings {
  public static final String SERIALIZED_NAME_APPLIANCE_URL = "applianceUrl";
  @SerializedName(SERIALIZED_NAME_APPLIANCE_URL)
  private String applianceUrl;

  public static final String SERIALIZED_NAME_INTERNAL_APPLIANCE_URL = "internalApplianceUrl";
  @SerializedName(SERIALIZED_NAME_INTERNAL_APPLIANCE_URL)
  private String internalApplianceUrl;

  public static final String SERIALIZED_NAME_CORS_ALLOWED = "corsAllowed";
  @SerializedName(SERIALIZED_NAME_CORS_ALLOWED)
  private String corsAllowed;

  public static final String SERIALIZED_NAME_REGISTRATION_ENABLED = "registrationEnabled";
  @SerializedName(SERIALIZED_NAME_REGISTRATION_ENABLED)
  private Boolean registrationEnabled;

  public static final String SERIALIZED_NAME_DEFAULT_ROLE_ID = "defaultRoleId";
  @SerializedName(SERIALIZED_NAME_DEFAULT_ROLE_ID)
  private String defaultRoleId;

  public static final String SERIALIZED_NAME_DEFAULT_USER_ROLE_ID = "defaultUserRoleId";
  @SerializedName(SERIALIZED_NAME_DEFAULT_USER_ROLE_ID)
  private String defaultUserRoleId;

  public static final String SERIALIZED_NAME_DOCKER_PRIVILEGED_MODE = "dockerPrivilegedMode";
  @SerializedName(SERIALIZED_NAME_DOCKER_PRIVILEGED_MODE)
  private Boolean dockerPrivilegedMode;

  public static final String SERIALIZED_NAME_EXPIRE_PWD_DAYS = "expirePwdDays";
  @SerializedName(SERIALIZED_NAME_EXPIRE_PWD_DAYS)
  private String expirePwdDays;

  public static final String SERIALIZED_NAME_DISABLE_AFTER_ATTEMPTS = "disableAfterAttempts";
  @SerializedName(SERIALIZED_NAME_DISABLE_AFTER_ATTEMPTS)
  private String disableAfterAttempts;

  public static final String SERIALIZED_NAME_DISABLE_AFTER_DAYS_INACTIVE = "disableAfterDaysInactive";
  @SerializedName(SERIALIZED_NAME_DISABLE_AFTER_DAYS_INACTIVE)
  private String disableAfterDaysInactive;

  public static final String SERIALIZED_NAME_WARN_USER_DAYS_BEFORE = "warnUserDaysBefore";
  @SerializedName(SERIALIZED_NAME_WARN_USER_DAYS_BEFORE)
  private String warnUserDaysBefore;

  public static final String SERIALIZED_NAME_SMTP_MAIL_FROM = "smtpMailFrom";
  @SerializedName(SERIALIZED_NAME_SMTP_MAIL_FROM)
  private String smtpMailFrom;

  public static final String SERIALIZED_NAME_SMTP_SERVER = "smtpServer";
  @SerializedName(SERIALIZED_NAME_SMTP_SERVER)
  private String smtpServer;

  public static final String SERIALIZED_NAME_SMTP_PORT = "smtpPort";
  @SerializedName(SERIALIZED_NAME_SMTP_PORT)
  private String smtpPort;

  public static final String SERIALIZED_NAME_SMTP_S_S_L = "smtpSSL";
  @SerializedName(SERIALIZED_NAME_SMTP_S_S_L)
  private Boolean smtpSSL;

  public static final String SERIALIZED_NAME_SMTP_T_L_S = "smtpTLS";
  @SerializedName(SERIALIZED_NAME_SMTP_T_L_S)
  private Boolean smtpTLS;

  public static final String SERIALIZED_NAME_SMTP_USER = "smtpUser";
  @SerializedName(SERIALIZED_NAME_SMTP_USER)
  private String smtpUser;

  public static final String SERIALIZED_NAME_SMTP_PASSWORD = "smtpPassword";
  @SerializedName(SERIALIZED_NAME_SMTP_PASSWORD)
  private String smtpPassword;

  public static final String SERIALIZED_NAME_SMTP_PASSWORD_HASH = "smtpPasswordHash";
  @SerializedName(SERIALIZED_NAME_SMTP_PASSWORD_HASH)
  private String smtpPasswordHash;

  public static final String SERIALIZED_NAME_PROXY_HOST = "proxyHost";
  @SerializedName(SERIALIZED_NAME_PROXY_HOST)
  private String proxyHost;

  public static final String SERIALIZED_NAME_PROXY_PORT = "proxyPort";
  @SerializedName(SERIALIZED_NAME_PROXY_PORT)
  private String proxyPort;

  public static final String SERIALIZED_NAME_PROXY_USER = "proxyUser";
  @SerializedName(SERIALIZED_NAME_PROXY_USER)
  private String proxyUser;

  public static final String SERIALIZED_NAME_PROXY_PASSWORD = "proxyPassword";
  @SerializedName(SERIALIZED_NAME_PROXY_PASSWORD)
  private String proxyPassword;

  public static final String SERIALIZED_NAME_PROXY_PASSWORD_HASH = "proxyPasswordHash";
  @SerializedName(SERIALIZED_NAME_PROXY_PASSWORD_HASH)
  private String proxyPasswordHash;

  public static final String SERIALIZED_NAME_PROXY_DOMAIN = "proxyDomain";
  @SerializedName(SERIALIZED_NAME_PROXY_DOMAIN)
  private String proxyDomain;

  public static final String SERIALIZED_NAME_PROXY_WORKSTATION = "proxyWorkstation";
  @SerializedName(SERIALIZED_NAME_PROXY_WORKSTATION)
  private String proxyWorkstation;

  public static final String SERIALIZED_NAME_CURRENCY_PROVIDER = "currencyProvider";
  @SerializedName(SERIALIZED_NAME_CURRENCY_PROVIDER)
  private String currencyProvider;

  public static final String SERIALIZED_NAME_CURRENCY_KEY = "currencyKey";
  @SerializedName(SERIALIZED_NAME_CURRENCY_KEY)
  private String currencyKey;

  public static final String SERIALIZED_NAME_ENABLED_ZONE_TYPES = "enabledZoneTypes";
  @SerializedName(SERIALIZED_NAME_ENABLED_ZONE_TYPES)
  private List<ApplianceSettingsEnabledZoneTypesInner> enabledZoneTypes;

  public static final String SERIALIZED_NAME_STATS_RETAINMENT_PERIOD = "statsRetainmentPeriod";
  @SerializedName(SERIALIZED_NAME_STATS_RETAINMENT_PERIOD)
  private Long statsRetainmentPeriod;

  public ApplianceSettings() {
  }

  public ApplianceSettings applianceUrl(String applianceUrl) {
    
    this.applianceUrl = applianceUrl;
    return this;
  }

   /**
   * Get applianceUrl
   * @return applianceUrl
  **/
  @javax.annotation.Nullable
  public String getApplianceUrl() {
    return applianceUrl;
  }


  public void setApplianceUrl(String applianceUrl) {
    this.applianceUrl = applianceUrl;
  }


  public ApplianceSettings internalApplianceUrl(String internalApplianceUrl) {
    
    this.internalApplianceUrl = internalApplianceUrl;
    return this;
  }

   /**
   * Get internalApplianceUrl
   * @return internalApplianceUrl
  **/
  @javax.annotation.Nullable
  public String getInternalApplianceUrl() {
    return internalApplianceUrl;
  }


  public void setInternalApplianceUrl(String internalApplianceUrl) {
    this.internalApplianceUrl = internalApplianceUrl;
  }


  public ApplianceSettings corsAllowed(String corsAllowed) {
    
    this.corsAllowed = corsAllowed;
    return this;
  }

   /**
   * Get corsAllowed
   * @return corsAllowed
  **/
  @javax.annotation.Nullable
  public String getCorsAllowed() {
    return corsAllowed;
  }


  public void setCorsAllowed(String corsAllowed) {
    this.corsAllowed = corsAllowed;
  }


  public ApplianceSettings registrationEnabled(Boolean registrationEnabled) {
    
    this.registrationEnabled = registrationEnabled;
    return this;
  }

   /**
   * Get registrationEnabled
   * @return registrationEnabled
  **/
  @javax.annotation.Nullable
  public Boolean getRegistrationEnabled() {
    return registrationEnabled;
  }


  public void setRegistrationEnabled(Boolean registrationEnabled) {
    this.registrationEnabled = registrationEnabled;
  }


  public ApplianceSettings defaultRoleId(String defaultRoleId) {
    
    this.defaultRoleId = defaultRoleId;
    return this;
  }

   /**
   * Get defaultRoleId
   * @return defaultRoleId
  **/
  @javax.annotation.Nullable
  public String getDefaultRoleId() {
    return defaultRoleId;
  }


  public void setDefaultRoleId(String defaultRoleId) {
    this.defaultRoleId = defaultRoleId;
  }


  public ApplianceSettings defaultUserRoleId(String defaultUserRoleId) {
    
    this.defaultUserRoleId = defaultUserRoleId;
    return this;
  }

   /**
   * Get defaultUserRoleId
   * @return defaultUserRoleId
  **/
  @javax.annotation.Nullable
  public String getDefaultUserRoleId() {
    return defaultUserRoleId;
  }


  public void setDefaultUserRoleId(String defaultUserRoleId) {
    this.defaultUserRoleId = defaultUserRoleId;
  }


  public ApplianceSettings dockerPrivilegedMode(Boolean dockerPrivilegedMode) {
    
    this.dockerPrivilegedMode = dockerPrivilegedMode;
    return this;
  }

   /**
   * Get dockerPrivilegedMode
   * @return dockerPrivilegedMode
  **/
  @javax.annotation.Nullable
  public Boolean getDockerPrivilegedMode() {
    return dockerPrivilegedMode;
  }


  public void setDockerPrivilegedMode(Boolean dockerPrivilegedMode) {
    this.dockerPrivilegedMode = dockerPrivilegedMode;
  }


  public ApplianceSettings expirePwdDays(String expirePwdDays) {
    
    this.expirePwdDays = expirePwdDays;
    return this;
  }

   /**
   * Get expirePwdDays
   * @return expirePwdDays
  **/
  @javax.annotation.Nullable
  public String getExpirePwdDays() {
    return expirePwdDays;
  }


  public void setExpirePwdDays(String expirePwdDays) {
    this.expirePwdDays = expirePwdDays;
  }


  public ApplianceSettings disableAfterAttempts(String disableAfterAttempts) {
    
    this.disableAfterAttempts = disableAfterAttempts;
    return this;
  }

   /**
   * Get disableAfterAttempts
   * @return disableAfterAttempts
  **/
  @javax.annotation.Nullable
  public String getDisableAfterAttempts() {
    return disableAfterAttempts;
  }


  public void setDisableAfterAttempts(String disableAfterAttempts) {
    this.disableAfterAttempts = disableAfterAttempts;
  }


  public ApplianceSettings disableAfterDaysInactive(String disableAfterDaysInactive) {
    
    this.disableAfterDaysInactive = disableAfterDaysInactive;
    return this;
  }

   /**
   * Get disableAfterDaysInactive
   * @return disableAfterDaysInactive
  **/
  @javax.annotation.Nullable
  public String getDisableAfterDaysInactive() {
    return disableAfterDaysInactive;
  }


  public void setDisableAfterDaysInactive(String disableAfterDaysInactive) {
    this.disableAfterDaysInactive = disableAfterDaysInactive;
  }


  public ApplianceSettings warnUserDaysBefore(String warnUserDaysBefore) {
    
    this.warnUserDaysBefore = warnUserDaysBefore;
    return this;
  }

   /**
   * Get warnUserDaysBefore
   * @return warnUserDaysBefore
  **/
  @javax.annotation.Nullable
  public String getWarnUserDaysBefore() {
    return warnUserDaysBefore;
  }


  public void setWarnUserDaysBefore(String warnUserDaysBefore) {
    this.warnUserDaysBefore = warnUserDaysBefore;
  }


  public ApplianceSettings smtpMailFrom(String smtpMailFrom) {
    
    this.smtpMailFrom = smtpMailFrom;
    return this;
  }

   /**
   * Get smtpMailFrom
   * @return smtpMailFrom
  **/
  @javax.annotation.Nullable
  public String getSmtpMailFrom() {
    return smtpMailFrom;
  }


  public void setSmtpMailFrom(String smtpMailFrom) {
    this.smtpMailFrom = smtpMailFrom;
  }


  public ApplianceSettings smtpServer(String smtpServer) {
    
    this.smtpServer = smtpServer;
    return this;
  }

   /**
   * Get smtpServer
   * @return smtpServer
  **/
  @javax.annotation.Nullable
  public String getSmtpServer() {
    return smtpServer;
  }


  public void setSmtpServer(String smtpServer) {
    this.smtpServer = smtpServer;
  }


  public ApplianceSettings smtpPort(String smtpPort) {
    
    this.smtpPort = smtpPort;
    return this;
  }

   /**
   * Get smtpPort
   * @return smtpPort
  **/
  @javax.annotation.Nullable
  public String getSmtpPort() {
    return smtpPort;
  }


  public void setSmtpPort(String smtpPort) {
    this.smtpPort = smtpPort;
  }


  public ApplianceSettings smtpSSL(Boolean smtpSSL) {
    
    this.smtpSSL = smtpSSL;
    return this;
  }

   /**
   * Get smtpSSL
   * @return smtpSSL
  **/
  @javax.annotation.Nullable
  public Boolean getSmtpSSL() {
    return smtpSSL;
  }


  public void setSmtpSSL(Boolean smtpSSL) {
    this.smtpSSL = smtpSSL;
  }


  public ApplianceSettings smtpTLS(Boolean smtpTLS) {
    
    this.smtpTLS = smtpTLS;
    return this;
  }

   /**
   * Get smtpTLS
   * @return smtpTLS
  **/
  @javax.annotation.Nullable
  public Boolean getSmtpTLS() {
    return smtpTLS;
  }


  public void setSmtpTLS(Boolean smtpTLS) {
    this.smtpTLS = smtpTLS;
  }


  public ApplianceSettings smtpUser(String smtpUser) {
    
    this.smtpUser = smtpUser;
    return this;
  }

   /**
   * Get smtpUser
   * @return smtpUser
  **/
  @javax.annotation.Nullable
  public String getSmtpUser() {
    return smtpUser;
  }


  public void setSmtpUser(String smtpUser) {
    this.smtpUser = smtpUser;
  }


  public ApplianceSettings smtpPassword(String smtpPassword) {
    
    this.smtpPassword = smtpPassword;
    return this;
  }

   /**
   * Get smtpPassword
   * @return smtpPassword
  **/
  @javax.annotation.Nullable
  public String getSmtpPassword() {
    return smtpPassword;
  }


  public void setSmtpPassword(String smtpPassword) {
    this.smtpPassword = smtpPassword;
  }


  public ApplianceSettings smtpPasswordHash(String smtpPasswordHash) {
    
    this.smtpPasswordHash = smtpPasswordHash;
    return this;
  }

   /**
   * Get smtpPasswordHash
   * @return smtpPasswordHash
  **/
  @javax.annotation.Nullable
  public String getSmtpPasswordHash() {
    return smtpPasswordHash;
  }


  public void setSmtpPasswordHash(String smtpPasswordHash) {
    this.smtpPasswordHash = smtpPasswordHash;
  }


  public ApplianceSettings proxyHost(String proxyHost) {
    
    this.proxyHost = proxyHost;
    return this;
  }

   /**
   * Get proxyHost
   * @return proxyHost
  **/
  @javax.annotation.Nullable
  public String getProxyHost() {
    return proxyHost;
  }


  public void setProxyHost(String proxyHost) {
    this.proxyHost = proxyHost;
  }


  public ApplianceSettings proxyPort(String proxyPort) {
    
    this.proxyPort = proxyPort;
    return this;
  }

   /**
   * Get proxyPort
   * @return proxyPort
  **/
  @javax.annotation.Nullable
  public String getProxyPort() {
    return proxyPort;
  }


  public void setProxyPort(String proxyPort) {
    this.proxyPort = proxyPort;
  }


  public ApplianceSettings proxyUser(String proxyUser) {
    
    this.proxyUser = proxyUser;
    return this;
  }

   /**
   * Get proxyUser
   * @return proxyUser
  **/
  @javax.annotation.Nullable
  public String getProxyUser() {
    return proxyUser;
  }


  public void setProxyUser(String proxyUser) {
    this.proxyUser = proxyUser;
  }


  public ApplianceSettings proxyPassword(String proxyPassword) {
    
    this.proxyPassword = proxyPassword;
    return this;
  }

   /**
   * Get proxyPassword
   * @return proxyPassword
  **/
  @javax.annotation.Nullable
  public String getProxyPassword() {
    return proxyPassword;
  }


  public void setProxyPassword(String proxyPassword) {
    this.proxyPassword = proxyPassword;
  }


  public ApplianceSettings proxyPasswordHash(String proxyPasswordHash) {
    
    this.proxyPasswordHash = proxyPasswordHash;
    return this;
  }

   /**
   * Get proxyPasswordHash
   * @return proxyPasswordHash
  **/
  @javax.annotation.Nullable
  public String getProxyPasswordHash() {
    return proxyPasswordHash;
  }


  public void setProxyPasswordHash(String proxyPasswordHash) {
    this.proxyPasswordHash = proxyPasswordHash;
  }


  public ApplianceSettings proxyDomain(String proxyDomain) {
    
    this.proxyDomain = proxyDomain;
    return this;
  }

   /**
   * Get proxyDomain
   * @return proxyDomain
  **/
  @javax.annotation.Nullable
  public String getProxyDomain() {
    return proxyDomain;
  }


  public void setProxyDomain(String proxyDomain) {
    this.proxyDomain = proxyDomain;
  }


  public ApplianceSettings proxyWorkstation(String proxyWorkstation) {
    
    this.proxyWorkstation = proxyWorkstation;
    return this;
  }

   /**
   * Get proxyWorkstation
   * @return proxyWorkstation
  **/
  @javax.annotation.Nullable
  public String getProxyWorkstation() {
    return proxyWorkstation;
  }


  public void setProxyWorkstation(String proxyWorkstation) {
    this.proxyWorkstation = proxyWorkstation;
  }


  public ApplianceSettings currencyProvider(String currencyProvider) {
    
    this.currencyProvider = currencyProvider;
    return this;
  }

   /**
   * Get currencyProvider
   * @return currencyProvider
  **/
  @javax.annotation.Nullable
  public String getCurrencyProvider() {
    return currencyProvider;
  }


  public void setCurrencyProvider(String currencyProvider) {
    this.currencyProvider = currencyProvider;
  }


  public ApplianceSettings currencyKey(String currencyKey) {
    
    this.currencyKey = currencyKey;
    return this;
  }

   /**
   * Get currencyKey
   * @return currencyKey
  **/
  @javax.annotation.Nullable
  public String getCurrencyKey() {
    return currencyKey;
  }


  public void setCurrencyKey(String currencyKey) {
    this.currencyKey = currencyKey;
  }


  public ApplianceSettings enabledZoneTypes(List<ApplianceSettingsEnabledZoneTypesInner> enabledZoneTypes) {
    
    this.enabledZoneTypes = enabledZoneTypes;
    return this;
  }

  public ApplianceSettings addEnabledZoneTypesItem(ApplianceSettingsEnabledZoneTypesInner enabledZoneTypesItem) {
    if (this.enabledZoneTypes == null) {
      this.enabledZoneTypes = new ArrayList<>();
    }
    this.enabledZoneTypes.add(enabledZoneTypesItem);
    return this;
  }

   /**
   * Get enabledZoneTypes
   * @return enabledZoneTypes
  **/
  @javax.annotation.Nullable
  public List<ApplianceSettingsEnabledZoneTypesInner> getEnabledZoneTypes() {
    return enabledZoneTypes;
  }


  public void setEnabledZoneTypes(List<ApplianceSettingsEnabledZoneTypesInner> enabledZoneTypes) {
    this.enabledZoneTypes = enabledZoneTypes;
  }


  public ApplianceSettings statsRetainmentPeriod(Long statsRetainmentPeriod) {
    
    this.statsRetainmentPeriod = statsRetainmentPeriod;
    return this;
  }

   /**
   * Get statsRetainmentPeriod
   * @return statsRetainmentPeriod
  **/
  @javax.annotation.Nullable
  public Long getStatsRetainmentPeriod() {
    return statsRetainmentPeriod;
  }


  public void setStatsRetainmentPeriod(Long statsRetainmentPeriod) {
    this.statsRetainmentPeriod = statsRetainmentPeriod;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplianceSettings applianceSettings = (ApplianceSettings) o;
    return Objects.equals(this.applianceUrl, applianceSettings.applianceUrl) &&
        Objects.equals(this.internalApplianceUrl, applianceSettings.internalApplianceUrl) &&
        Objects.equals(this.corsAllowed, applianceSettings.corsAllowed) &&
        Objects.equals(this.registrationEnabled, applianceSettings.registrationEnabled) &&
        Objects.equals(this.defaultRoleId, applianceSettings.defaultRoleId) &&
        Objects.equals(this.defaultUserRoleId, applianceSettings.defaultUserRoleId) &&
        Objects.equals(this.dockerPrivilegedMode, applianceSettings.dockerPrivilegedMode) &&
        Objects.equals(this.expirePwdDays, applianceSettings.expirePwdDays) &&
        Objects.equals(this.disableAfterAttempts, applianceSettings.disableAfterAttempts) &&
        Objects.equals(this.disableAfterDaysInactive, applianceSettings.disableAfterDaysInactive) &&
        Objects.equals(this.warnUserDaysBefore, applianceSettings.warnUserDaysBefore) &&
        Objects.equals(this.smtpMailFrom, applianceSettings.smtpMailFrom) &&
        Objects.equals(this.smtpServer, applianceSettings.smtpServer) &&
        Objects.equals(this.smtpPort, applianceSettings.smtpPort) &&
        Objects.equals(this.smtpSSL, applianceSettings.smtpSSL) &&
        Objects.equals(this.smtpTLS, applianceSettings.smtpTLS) &&
        Objects.equals(this.smtpUser, applianceSettings.smtpUser) &&
        Objects.equals(this.smtpPassword, applianceSettings.smtpPassword) &&
        Objects.equals(this.smtpPasswordHash, applianceSettings.smtpPasswordHash) &&
        Objects.equals(this.proxyHost, applianceSettings.proxyHost) &&
        Objects.equals(this.proxyPort, applianceSettings.proxyPort) &&
        Objects.equals(this.proxyUser, applianceSettings.proxyUser) &&
        Objects.equals(this.proxyPassword, applianceSettings.proxyPassword) &&
        Objects.equals(this.proxyPasswordHash, applianceSettings.proxyPasswordHash) &&
        Objects.equals(this.proxyDomain, applianceSettings.proxyDomain) &&
        Objects.equals(this.proxyWorkstation, applianceSettings.proxyWorkstation) &&
        Objects.equals(this.currencyProvider, applianceSettings.currencyProvider) &&
        Objects.equals(this.currencyKey, applianceSettings.currencyKey) &&
        Objects.equals(this.enabledZoneTypes, applianceSettings.enabledZoneTypes) &&
        Objects.equals(this.statsRetainmentPeriod, applianceSettings.statsRetainmentPeriod);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(applianceUrl, internalApplianceUrl, corsAllowed, registrationEnabled, defaultRoleId, defaultUserRoleId, dockerPrivilegedMode, expirePwdDays, disableAfterAttempts, disableAfterDaysInactive, warnUserDaysBefore, smtpMailFrom, smtpServer, smtpPort, smtpSSL, smtpTLS, smtpUser, smtpPassword, smtpPasswordHash, proxyHost, proxyPort, proxyUser, proxyPassword, proxyPasswordHash, proxyDomain, proxyWorkstation, currencyProvider, currencyKey, enabledZoneTypes, statsRetainmentPeriod);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplianceSettings {\n");
    sb.append("    applianceUrl: ").append(toIndentedString(applianceUrl)).append("\n");
    sb.append("    internalApplianceUrl: ").append(toIndentedString(internalApplianceUrl)).append("\n");
    sb.append("    corsAllowed: ").append(toIndentedString(corsAllowed)).append("\n");
    sb.append("    registrationEnabled: ").append(toIndentedString(registrationEnabled)).append("\n");
    sb.append("    defaultRoleId: ").append(toIndentedString(defaultRoleId)).append("\n");
    sb.append("    defaultUserRoleId: ").append(toIndentedString(defaultUserRoleId)).append("\n");
    sb.append("    dockerPrivilegedMode: ").append(toIndentedString(dockerPrivilegedMode)).append("\n");
    sb.append("    expirePwdDays: ").append(toIndentedString(expirePwdDays)).append("\n");
    sb.append("    disableAfterAttempts: ").append(toIndentedString(disableAfterAttempts)).append("\n");
    sb.append("    disableAfterDaysInactive: ").append(toIndentedString(disableAfterDaysInactive)).append("\n");
    sb.append("    warnUserDaysBefore: ").append(toIndentedString(warnUserDaysBefore)).append("\n");
    sb.append("    smtpMailFrom: ").append(toIndentedString(smtpMailFrom)).append("\n");
    sb.append("    smtpServer: ").append(toIndentedString(smtpServer)).append("\n");
    sb.append("    smtpPort: ").append(toIndentedString(smtpPort)).append("\n");
    sb.append("    smtpSSL: ").append(toIndentedString(smtpSSL)).append("\n");
    sb.append("    smtpTLS: ").append(toIndentedString(smtpTLS)).append("\n");
    sb.append("    smtpUser: ").append(toIndentedString(smtpUser)).append("\n");
    sb.append("    smtpPassword: ").append(toIndentedString(smtpPassword)).append("\n");
    sb.append("    smtpPasswordHash: ").append(toIndentedString(smtpPasswordHash)).append("\n");
    sb.append("    proxyHost: ").append(toIndentedString(proxyHost)).append("\n");
    sb.append("    proxyPort: ").append(toIndentedString(proxyPort)).append("\n");
    sb.append("    proxyUser: ").append(toIndentedString(proxyUser)).append("\n");
    sb.append("    proxyPassword: ").append(toIndentedString(proxyPassword)).append("\n");
    sb.append("    proxyPasswordHash: ").append(toIndentedString(proxyPasswordHash)).append("\n");
    sb.append("    proxyDomain: ").append(toIndentedString(proxyDomain)).append("\n");
    sb.append("    proxyWorkstation: ").append(toIndentedString(proxyWorkstation)).append("\n");
    sb.append("    currencyProvider: ").append(toIndentedString(currencyProvider)).append("\n");
    sb.append("    currencyKey: ").append(toIndentedString(currencyKey)).append("\n");
    sb.append("    enabledZoneTypes: ").append(toIndentedString(enabledZoneTypes)).append("\n");
    sb.append("    statsRetainmentPeriod: ").append(toIndentedString(statsRetainmentPeriod)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("applianceUrl");
    openapiFields.add("internalApplianceUrl");
    openapiFields.add("corsAllowed");
    openapiFields.add("registrationEnabled");
    openapiFields.add("defaultRoleId");
    openapiFields.add("defaultUserRoleId");
    openapiFields.add("dockerPrivilegedMode");
    openapiFields.add("expirePwdDays");
    openapiFields.add("disableAfterAttempts");
    openapiFields.add("disableAfterDaysInactive");
    openapiFields.add("warnUserDaysBefore");
    openapiFields.add("smtpMailFrom");
    openapiFields.add("smtpServer");
    openapiFields.add("smtpPort");
    openapiFields.add("smtpSSL");
    openapiFields.add("smtpTLS");
    openapiFields.add("smtpUser");
    openapiFields.add("smtpPassword");
    openapiFields.add("smtpPasswordHash");
    openapiFields.add("proxyHost");
    openapiFields.add("proxyPort");
    openapiFields.add("proxyUser");
    openapiFields.add("proxyPassword");
    openapiFields.add("proxyPasswordHash");
    openapiFields.add("proxyDomain");
    openapiFields.add("proxyWorkstation");
    openapiFields.add("currencyProvider");
    openapiFields.add("currencyKey");
    openapiFields.add("enabledZoneTypes");
    openapiFields.add("statsRetainmentPeriod");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ApplianceSettings
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApplianceSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplianceSettings is not found in the empty JSON string", ApplianceSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ApplianceSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApplianceSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("applianceUrl") != null && !jsonObj.get("applianceUrl").isJsonNull()) && !jsonObj.get("applianceUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `applianceUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("applianceUrl").toString()));
      }
      if ((jsonObj.get("internalApplianceUrl") != null && !jsonObj.get("internalApplianceUrl").isJsonNull()) && !jsonObj.get("internalApplianceUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `internalApplianceUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("internalApplianceUrl").toString()));
      }
      if ((jsonObj.get("corsAllowed") != null && !jsonObj.get("corsAllowed").isJsonNull()) && !jsonObj.get("corsAllowed").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `corsAllowed` to be a primitive type in the JSON string but got `%s`", jsonObj.get("corsAllowed").toString()));
      }
      if ((jsonObj.get("defaultRoleId") != null && !jsonObj.get("defaultRoleId").isJsonNull()) && !jsonObj.get("defaultRoleId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultRoleId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultRoleId").toString()));
      }
      if ((jsonObj.get("defaultUserRoleId") != null && !jsonObj.get("defaultUserRoleId").isJsonNull()) && !jsonObj.get("defaultUserRoleId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultUserRoleId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultUserRoleId").toString()));
      }
      if ((jsonObj.get("expirePwdDays") != null && !jsonObj.get("expirePwdDays").isJsonNull()) && !jsonObj.get("expirePwdDays").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expirePwdDays` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expirePwdDays").toString()));
      }
      if ((jsonObj.get("disableAfterAttempts") != null && !jsonObj.get("disableAfterAttempts").isJsonNull()) && !jsonObj.get("disableAfterAttempts").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `disableAfterAttempts` to be a primitive type in the JSON string but got `%s`", jsonObj.get("disableAfterAttempts").toString()));
      }
      if ((jsonObj.get("disableAfterDaysInactive") != null && !jsonObj.get("disableAfterDaysInactive").isJsonNull()) && !jsonObj.get("disableAfterDaysInactive").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `disableAfterDaysInactive` to be a primitive type in the JSON string but got `%s`", jsonObj.get("disableAfterDaysInactive").toString()));
      }
      if ((jsonObj.get("warnUserDaysBefore") != null && !jsonObj.get("warnUserDaysBefore").isJsonNull()) && !jsonObj.get("warnUserDaysBefore").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `warnUserDaysBefore` to be a primitive type in the JSON string but got `%s`", jsonObj.get("warnUserDaysBefore").toString()));
      }
      if ((jsonObj.get("smtpMailFrom") != null && !jsonObj.get("smtpMailFrom").isJsonNull()) && !jsonObj.get("smtpMailFrom").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `smtpMailFrom` to be a primitive type in the JSON string but got `%s`", jsonObj.get("smtpMailFrom").toString()));
      }
      if ((jsonObj.get("smtpServer") != null && !jsonObj.get("smtpServer").isJsonNull()) && !jsonObj.get("smtpServer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `smtpServer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("smtpServer").toString()));
      }
      if ((jsonObj.get("smtpPort") != null && !jsonObj.get("smtpPort").isJsonNull()) && !jsonObj.get("smtpPort").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `smtpPort` to be a primitive type in the JSON string but got `%s`", jsonObj.get("smtpPort").toString()));
      }
      if ((jsonObj.get("smtpUser") != null && !jsonObj.get("smtpUser").isJsonNull()) && !jsonObj.get("smtpUser").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `smtpUser` to be a primitive type in the JSON string but got `%s`", jsonObj.get("smtpUser").toString()));
      }
      if ((jsonObj.get("smtpPassword") != null && !jsonObj.get("smtpPassword").isJsonNull()) && !jsonObj.get("smtpPassword").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `smtpPassword` to be a primitive type in the JSON string but got `%s`", jsonObj.get("smtpPassword").toString()));
      }
      if ((jsonObj.get("smtpPasswordHash") != null && !jsonObj.get("smtpPasswordHash").isJsonNull()) && !jsonObj.get("smtpPasswordHash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `smtpPasswordHash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("smtpPasswordHash").toString()));
      }
      if ((jsonObj.get("proxyHost") != null && !jsonObj.get("proxyHost").isJsonNull()) && !jsonObj.get("proxyHost").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `proxyHost` to be a primitive type in the JSON string but got `%s`", jsonObj.get("proxyHost").toString()));
      }
      if ((jsonObj.get("proxyPort") != null && !jsonObj.get("proxyPort").isJsonNull()) && !jsonObj.get("proxyPort").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `proxyPort` to be a primitive type in the JSON string but got `%s`", jsonObj.get("proxyPort").toString()));
      }
      if ((jsonObj.get("proxyUser") != null && !jsonObj.get("proxyUser").isJsonNull()) && !jsonObj.get("proxyUser").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `proxyUser` to be a primitive type in the JSON string but got `%s`", jsonObj.get("proxyUser").toString()));
      }
      if ((jsonObj.get("proxyPassword") != null && !jsonObj.get("proxyPassword").isJsonNull()) && !jsonObj.get("proxyPassword").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `proxyPassword` to be a primitive type in the JSON string but got `%s`", jsonObj.get("proxyPassword").toString()));
      }
      if ((jsonObj.get("proxyPasswordHash") != null && !jsonObj.get("proxyPasswordHash").isJsonNull()) && !jsonObj.get("proxyPasswordHash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `proxyPasswordHash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("proxyPasswordHash").toString()));
      }
      if ((jsonObj.get("proxyDomain") != null && !jsonObj.get("proxyDomain").isJsonNull()) && !jsonObj.get("proxyDomain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `proxyDomain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("proxyDomain").toString()));
      }
      if ((jsonObj.get("proxyWorkstation") != null && !jsonObj.get("proxyWorkstation").isJsonNull()) && !jsonObj.get("proxyWorkstation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `proxyWorkstation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("proxyWorkstation").toString()));
      }
      if ((jsonObj.get("currencyProvider") != null && !jsonObj.get("currencyProvider").isJsonNull()) && !jsonObj.get("currencyProvider").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currencyProvider` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currencyProvider").toString()));
      }
      if ((jsonObj.get("currencyKey") != null && !jsonObj.get("currencyKey").isJsonNull()) && !jsonObj.get("currencyKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currencyKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currencyKey").toString()));
      }
      if (jsonObj.get("enabledZoneTypes") != null && !jsonObj.get("enabledZoneTypes").isJsonNull()) {
        JsonArray jsonArrayenabledZoneTypes = jsonObj.getAsJsonArray("enabledZoneTypes");
        if (jsonArrayenabledZoneTypes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("enabledZoneTypes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `enabledZoneTypes` to be an array in the JSON string but got `%s`", jsonObj.get("enabledZoneTypes").toString()));
          }

          // validate the optional field `enabledZoneTypes` (array)
          for (int i = 0; i < jsonArrayenabledZoneTypes.size(); i++) {
            ApplianceSettingsEnabledZoneTypesInner.validateJsonElement(jsonArrayenabledZoneTypes.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplianceSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplianceSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplianceSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplianceSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplianceSettings>() {
           @Override
           public void write(JsonWriter out, ApplianceSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplianceSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ApplianceSettings given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ApplianceSettings
  * @throws IOException if the JSON string is invalid with respect to ApplianceSettings
  */
  public static ApplianceSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplianceSettings.class);
  }

 /**
  * Convert an instance of ApplianceSettings to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

