/*
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.ApiTasksTaskFile;
import org.openapitools.client.model.ApiTasksTaskTaskType;
import org.openapitools.client.model.OneOfobjectobject;

/**
 * ApiTasksIdTask
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-21T11:26:47.028Z[GMT]")
public class ApiTasksIdTask {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_VISIBILITY = "visibility";
  @SerializedName(SERIALIZED_NAME_VISIBILITY)
  private String visibility = "private";

  public static final String SERIALIZED_NAME_TASK_TYPE = "taskType";
  @SerializedName(SERIALIZED_NAME_TASK_TYPE)
  private ApiTasksTaskTaskType taskType;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private List<String> labels = null;

  public static final String SERIALIZED_NAME_TASK_OPTIONS = "taskOptions";
  @SerializedName(SERIALIZED_NAME_TASK_OPTIONS)
  private Object taskOptions;

  /**
   * Gets or Sets resultType
   */
  @JsonAdapter(ResultTypeEnum.Adapter.class)
  public enum ResultTypeEnum {
    EXITCODE("exitCode"),
    
    KEYVALUE("keyValue"),
    
    JSON("json");

    private String value;

    ResultTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ResultTypeEnum fromValue(String value) {
      for (ResultTypeEnum b : ResultTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ResultTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ResultTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ResultTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ResultTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_RESULT_TYPE = "resultType";
  @SerializedName(SERIALIZED_NAME_RESULT_TYPE)
  private ResultTypeEnum resultType;

  /**
   * The execution target. eg. local,remote,resource. The default value varies by task type. 
   */
  @JsonAdapter(ExecuteTargetEnum.Adapter.class)
  public enum ExecuteTargetEnum {
    LOCAL("local"),
    
    REMOTE("remote"),
    
    RESOURCE("resource");

    private String value;

    ExecuteTargetEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ExecuteTargetEnum fromValue(String value) {
      for (ExecuteTargetEnum b : ExecuteTargetEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ExecuteTargetEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ExecuteTargetEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ExecuteTargetEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ExecuteTargetEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_EXECUTE_TARGET = "executeTarget";
  @SerializedName(SERIALIZED_NAME_EXECUTE_TARGET)
  private ExecuteTargetEnum executeTarget;

  public static final String SERIALIZED_NAME_RETRYABLE = "retryable";
  @SerializedName(SERIALIZED_NAME_RETRYABLE)
  private Boolean retryable = false;

  public static final String SERIALIZED_NAME_RETRY_COUNT = "retryCount";
  @SerializedName(SERIALIZED_NAME_RETRY_COUNT)
  private Integer retryCount;

  public static final String SERIALIZED_NAME_RETRY_DELAY_SECONDS = "retryDelaySeconds";
  @SerializedName(SERIALIZED_NAME_RETRY_DELAY_SECONDS)
  private BigDecimal retryDelaySeconds;

  public static final String SERIALIZED_NAME_FILE = "file";
  @SerializedName(SERIALIZED_NAME_FILE)
  private ApiTasksTaskFile file;

  public static final String SERIALIZED_NAME_CREDENTIAL = "credential";
  @SerializedName(SERIALIZED_NAME_CREDENTIAL)
  private OneOfobjectobject credential = null;


  public ApiTasksIdTask name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * A unique name for the task
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Sample Task", value = "A unique name for the task")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public ApiTasksIdTask code(String code) {
    
    this.code = code;
    return this;
  }

   /**
   * A unique code for the task
   * @return code
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "aTaskCode", value = "A unique code for the task")

  public String getCode() {
    return code;
  }


  public void setCode(String code) {
    this.code = code;
  }


  public ApiTasksIdTask visibility(String visibility) {
    
    this.visibility = visibility;
    return this;
  }

   /**
   * Visibility
   * @return visibility
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Visibility")

  public String getVisibility() {
    return visibility;
  }


  public void setVisibility(String visibility) {
    this.visibility = visibility;
  }


  public ApiTasksIdTask taskType(ApiTasksTaskTaskType taskType) {
    
    this.taskType = taskType;
    return this;
  }

   /**
   * Get taskType
   * @return taskType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ApiTasksTaskTaskType getTaskType() {
    return taskType;
  }


  public void setTaskType(ApiTasksTaskTaskType taskType) {
    this.taskType = taskType;
  }


  public ApiTasksIdTask labels(List<String> labels) {
    
    this.labels = labels;
    return this;
  }

  public ApiTasksIdTask addLabelsItem(String labelsItem) {
    if (this.labels == null) {
      this.labels = new ArrayList<String>();
    }
    this.labels.add(labelsItem);
    return this;
  }

   /**
   * An array of Category labels for filtering
   * @return labels
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An array of Category labels for filtering")

  public List<String> getLabels() {
    return labels;
  }


  public void setLabels(List<String> labels) {
    this.labels = labels;
  }


  public ApiTasksIdTask taskOptions(Object taskOptions) {
    
    this.taskOptions = taskOptions;
    return this;
  }

   /**
   * Map of options specific to each &#x60;task type&#x60;. eg. script
   * @return taskOptions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Map of options specific to each `task type`. eg. script")

  public Object getTaskOptions() {
    return taskOptions;
  }


  public void setTaskOptions(Object taskOptions) {
    this.taskOptions = taskOptions;
  }


  public ApiTasksIdTask resultType(ResultTypeEnum resultType) {
    
    this.resultType = resultType;
    return this;
  }

   /**
   * Get resultType
   * @return resultType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ResultTypeEnum getResultType() {
    return resultType;
  }


  public void setResultType(ResultTypeEnum resultType) {
    this.resultType = resultType;
  }


  public ApiTasksIdTask executeTarget(ExecuteTargetEnum executeTarget) {
    
    this.executeTarget = executeTarget;
    return this;
  }

   /**
   * The execution target. eg. local,remote,resource. The default value varies by task type. 
   * @return executeTarget
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The execution target. eg. local,remote,resource. The default value varies by task type. ")

  public ExecuteTargetEnum getExecuteTarget() {
    return executeTarget;
  }


  public void setExecuteTarget(ExecuteTargetEnum executeTarget) {
    this.executeTarget = executeTarget;
  }


  public ApiTasksIdTask retryable(Boolean retryable) {
    
    this.retryable = retryable;
    return this;
  }

   /**
   * If the task should be retried or not.
   * @return retryable
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If the task should be retried or not.")

  public Boolean getRetryable() {
    return retryable;
  }


  public void setRetryable(Boolean retryable) {
    this.retryable = retryable;
  }


  public ApiTasksIdTask retryCount(Integer retryCount) {
    
    this.retryCount = retryCount;
    return this;
  }

   /**
   * The number of times to retry.
   * @return retryCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The number of times to retry.")

  public Integer getRetryCount() {
    return retryCount;
  }


  public void setRetryCount(Integer retryCount) {
    this.retryCount = retryCount;
  }


  public ApiTasksIdTask retryDelaySeconds(BigDecimal retryDelaySeconds) {
    
    this.retryDelaySeconds = retryDelaySeconds;
    return this;
  }

   /**
   * The delay, between retries.
   * @return retryDelaySeconds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The delay, between retries.")

  public BigDecimal getRetryDelaySeconds() {
    return retryDelaySeconds;
  }


  public void setRetryDelaySeconds(BigDecimal retryDelaySeconds) {
    this.retryDelaySeconds = retryDelaySeconds;
  }


  public ApiTasksIdTask file(ApiTasksTaskFile file) {
    
    this.file = file;
    return this;
  }

   /**
   * Get file
   * @return file
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ApiTasksTaskFile getFile() {
    return file;
  }


  public void setFile(ApiTasksTaskFile file) {
    this.file = file;
  }


  public ApiTasksIdTask credential(OneOfobjectobject credential) {
    
    this.credential = credential;
    return this;
  }

   /**
   * Map containing Credential ID or the default {\&quot;type\&quot;: \&quot;local\&quot;}  which means use the values set in the local task options username and password instead of associating a credential. 
   * @return credential
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Map containing Credential ID or the default {\"type\": \"local\"}  which means use the values set in the local task options username and password instead of associating a credential. ")

  public OneOfobjectobject getCredential() {
    return credential;
  }


  public void setCredential(OneOfobjectobject credential) {
    this.credential = credential;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApiTasksIdTask apiTasksIdTask = (ApiTasksIdTask) o;
    return Objects.equals(this.name, apiTasksIdTask.name) &&
        Objects.equals(this.code, apiTasksIdTask.code) &&
        Objects.equals(this.visibility, apiTasksIdTask.visibility) &&
        Objects.equals(this.taskType, apiTasksIdTask.taskType) &&
        Objects.equals(this.labels, apiTasksIdTask.labels) &&
        Objects.equals(this.taskOptions, apiTasksIdTask.taskOptions) &&
        Objects.equals(this.resultType, apiTasksIdTask.resultType) &&
        Objects.equals(this.executeTarget, apiTasksIdTask.executeTarget) &&
        Objects.equals(this.retryable, apiTasksIdTask.retryable) &&
        Objects.equals(this.retryCount, apiTasksIdTask.retryCount) &&
        Objects.equals(this.retryDelaySeconds, apiTasksIdTask.retryDelaySeconds) &&
        Objects.equals(this.file, apiTasksIdTask.file) &&
        Objects.equals(this.credential, apiTasksIdTask.credential);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, code, visibility, taskType, labels, taskOptions, resultType, executeTarget, retryable, retryCount, retryDelaySeconds, file, credential);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApiTasksIdTask {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    visibility: ").append(toIndentedString(visibility)).append("\n");
    sb.append("    taskType: ").append(toIndentedString(taskType)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    taskOptions: ").append(toIndentedString(taskOptions)).append("\n");
    sb.append("    resultType: ").append(toIndentedString(resultType)).append("\n");
    sb.append("    executeTarget: ").append(toIndentedString(executeTarget)).append("\n");
    sb.append("    retryable: ").append(toIndentedString(retryable)).append("\n");
    sb.append("    retryCount: ").append(toIndentedString(retryCount)).append("\n");
    sb.append("    retryDelaySeconds: ").append(toIndentedString(retryDelaySeconds)).append("\n");
    sb.append("    file: ").append(toIndentedString(file)).append("\n");
    sb.append("    credential: ").append(toIndentedString(credential)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

