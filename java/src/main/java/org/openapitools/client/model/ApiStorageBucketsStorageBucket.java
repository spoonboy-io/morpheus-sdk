/*
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.client.model.OneOfobjectobjectobjectobjectobjectobjectobject;

/**
 * ApiStorageBucketsStorageBucket
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-21T11:26:47.028Z[GMT]")
public class ApiStorageBucketsStorageBucket {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * The type of storage bucket
   */
  @JsonAdapter(ProviderTypeEnum.Adapter.class)
  public enum ProviderTypeEnum {
    S3("s3"),
    
    AZURE("azure"),
    
    CIFS("cifs"),
    
    LOCAL("local"),
    
    NFS("nfs"),
    
    OPENSTACK("openstack"),
    
    RACKSPACE("rackspace");

    private String value;

    ProviderTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProviderTypeEnum fromValue(String value) {
      for (ProviderTypeEnum b : ProviderTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProviderTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProviderTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProviderTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProviderTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PROVIDER_TYPE = "providerType";
  @SerializedName(SERIALIZED_NAME_PROVIDER_TYPE)
  private ProviderTypeEnum providerType;

  public static final String SERIALIZED_NAME_DEFAULT_BACKUP_TARGET = "defaultBackupTarget";
  @SerializedName(SERIALIZED_NAME_DEFAULT_BACKUP_TARGET)
  private Boolean defaultBackupTarget = false;

  public static final String SERIALIZED_NAME_COPY_TO_STORE = "copyToStore";
  @SerializedName(SERIALIZED_NAME_COPY_TO_STORE)
  private Boolean copyToStore;

  public static final String SERIALIZED_NAME_DEFAULT_DEPLOYMENT_TARGET = "defaultDeploymentTarget";
  @SerializedName(SERIALIZED_NAME_DEFAULT_DEPLOYMENT_TARGET)
  private Boolean defaultDeploymentTarget = false;

  public static final String SERIALIZED_NAME_DEFAULT_VIRTUAL_IMAGE_TARGET = "defaultVirtualImageTarget";
  @SerializedName(SERIALIZED_NAME_DEFAULT_VIRTUAL_IMAGE_TARGET)
  private Boolean defaultVirtualImageTarget = false;

  /**
   * Cleanup mode. &#x60;backup&#x60; - Move old files to a backup provider. &#x60;delete&#x60; - Delete old files. &#x60;none&#x60; - Keep all files.
   */
  @JsonAdapter(RetentionPolicyTypeEnum.Adapter.class)
  public enum RetentionPolicyTypeEnum {
    BACKUP("backup"),
    
    DELETE("delete"),
    
    NONE("none");

    private String value;

    RetentionPolicyTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RetentionPolicyTypeEnum fromValue(String value) {
      for (RetentionPolicyTypeEnum b : RetentionPolicyTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RetentionPolicyTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RetentionPolicyTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RetentionPolicyTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RetentionPolicyTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_RETENTION_POLICY_TYPE = "retentionPolicyType";
  @SerializedName(SERIALIZED_NAME_RETENTION_POLICY_TYPE)
  private RetentionPolicyTypeEnum retentionPolicyType = RetentionPolicyTypeEnum.NONE;

  public static final String SERIALIZED_NAME_RETENTION_POLICY_DAYS = "retentionPolicyDays";
  @SerializedName(SERIALIZED_NAME_RETENTION_POLICY_DAYS)
  private Long retentionPolicyDays;

  public static final String SERIALIZED_NAME_RETENTION_PROVIDER = "retentionProvider";
  @SerializedName(SERIALIZED_NAME_RETENTION_PROVIDER)
  private String retentionProvider;

  public static final String SERIALIZED_NAME_BUCKET_NAME = "bucketName";
  @SerializedName(SERIALIZED_NAME_BUCKET_NAME)
  private String bucketName;

  public static final String SERIALIZED_NAME_CREATE_BUCKET = "createBucket";
  @SerializedName(SERIALIZED_NAME_CREATE_BUCKET)
  private Boolean createBucket = false;

  public static final String SERIALIZED_NAME_CONFIG = "config";
  @SerializedName(SERIALIZED_NAME_CONFIG)
  private OneOfobjectobjectobjectobjectobjectobjectobject config = null;


  public ApiStorageBucketsStorageBucket name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * A unique name scoped to your account for the storage bucket
   * @return name
  **/
  @ApiModelProperty(required = true, value = "A unique name scoped to your account for the storage bucket")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public ApiStorageBucketsStorageBucket providerType(ProviderTypeEnum providerType) {
    
    this.providerType = providerType;
    return this;
  }

   /**
   * The type of storage bucket
   * @return providerType
  **/
  @ApiModelProperty(required = true, value = "The type of storage bucket")

  public ProviderTypeEnum getProviderType() {
    return providerType;
  }


  public void setProviderType(ProviderTypeEnum providerType) {
    this.providerType = providerType;
  }


  public ApiStorageBucketsStorageBucket defaultBackupTarget(Boolean defaultBackupTarget) {
    
    this.defaultBackupTarget = defaultBackupTarget;
    return this;
  }

   /**
   * Default Backup Target
   * @return defaultBackupTarget
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Default Backup Target")

  public Boolean getDefaultBackupTarget() {
    return defaultBackupTarget;
  }


  public void setDefaultBackupTarget(Boolean defaultBackupTarget) {
    this.defaultBackupTarget = defaultBackupTarget;
  }


  public ApiStorageBucketsStorageBucket copyToStore(Boolean copyToStore) {
    
    this.copyToStore = copyToStore;
    return this;
  }

   /**
   * Archive Snapshots
   * @return copyToStore
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Archive Snapshots")

  public Boolean getCopyToStore() {
    return copyToStore;
  }


  public void setCopyToStore(Boolean copyToStore) {
    this.copyToStore = copyToStore;
  }


  public ApiStorageBucketsStorageBucket defaultDeploymentTarget(Boolean defaultDeploymentTarget) {
    
    this.defaultDeploymentTarget = defaultDeploymentTarget;
    return this;
  }

   /**
   * Default Deployment Target
   * @return defaultDeploymentTarget
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Default Deployment Target")

  public Boolean getDefaultDeploymentTarget() {
    return defaultDeploymentTarget;
  }


  public void setDefaultDeploymentTarget(Boolean defaultDeploymentTarget) {
    this.defaultDeploymentTarget = defaultDeploymentTarget;
  }


  public ApiStorageBucketsStorageBucket defaultVirtualImageTarget(Boolean defaultVirtualImageTarget) {
    
    this.defaultVirtualImageTarget = defaultVirtualImageTarget;
    return this;
  }

   /**
   * Default Virtual Image Store
   * @return defaultVirtualImageTarget
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Default Virtual Image Store")

  public Boolean getDefaultVirtualImageTarget() {
    return defaultVirtualImageTarget;
  }


  public void setDefaultVirtualImageTarget(Boolean defaultVirtualImageTarget) {
    this.defaultVirtualImageTarget = defaultVirtualImageTarget;
  }


  public ApiStorageBucketsStorageBucket retentionPolicyType(RetentionPolicyTypeEnum retentionPolicyType) {
    
    this.retentionPolicyType = retentionPolicyType;
    return this;
  }

   /**
   * Cleanup mode. &#x60;backup&#x60; - Move old files to a backup provider. &#x60;delete&#x60; - Delete old files. &#x60;none&#x60; - Keep all files.
   * @return retentionPolicyType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Cleanup mode. `backup` - Move old files to a backup provider. `delete` - Delete old files. `none` - Keep all files.")

  public RetentionPolicyTypeEnum getRetentionPolicyType() {
    return retentionPolicyType;
  }


  public void setRetentionPolicyType(RetentionPolicyTypeEnum retentionPolicyType) {
    this.retentionPolicyType = retentionPolicyType;
  }


  public ApiStorageBucketsStorageBucket retentionPolicyDays(Long retentionPolicyDays) {
    
    this.retentionPolicyDays = retentionPolicyDays;
    return this;
  }

   /**
   * The number of days old a file must be before it is deleted.
   * @return retentionPolicyDays
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The number of days old a file must be before it is deleted.")

  public Long getRetentionPolicyDays() {
    return retentionPolicyDays;
  }


  public void setRetentionPolicyDays(Long retentionPolicyDays) {
    this.retentionPolicyDays = retentionPolicyDays;
  }


  public ApiStorageBucketsStorageBucket retentionProvider(String retentionProvider) {
    
    this.retentionProvider = retentionProvider;
    return this;
  }

   /**
   * The backup Storage Bucket where old files are moved to.
   * @return retentionProvider
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The backup Storage Bucket where old files are moved to.")

  public String getRetentionProvider() {
    return retentionProvider;
  }


  public void setRetentionProvider(String retentionProvider) {
    this.retentionProvider = retentionProvider;
  }


  public ApiStorageBucketsStorageBucket bucketName(String bucketName) {
    
    this.bucketName = bucketName;
    return this;
  }

   /**
   * The name of the bucket. Only applies to &#x60;Amazon&#x60;, &#x60;Azure&#x60;, &#x60;CIFS&#x60;, &#x60;NFSv3&#x60;, &#x60;Openstack Swift&#x60;, and &#x60;Rackspace CDN&#x60;.
   * @return bucketName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "myBucket", value = "The name of the bucket. Only applies to `Amazon`, `Azure`, `CIFS`, `NFSv3`, `Openstack Swift`, and `Rackspace CDN`.")

  public String getBucketName() {
    return bucketName;
  }


  public void setBucketName(String bucketName) {
    this.bucketName = bucketName;
  }


  public ApiStorageBucketsStorageBucket createBucket(Boolean createBucket) {
    
    this.createBucket = createBucket;
    return this;
  }

   /**
   * Create the bucket if it does not exist. Only applies to &#x60;Amazon&#x60;, &#x60;Azure&#x60;, &#x60;Openstack Swift&#x60;, and &#x60;Rackspace CDN&#x60;.
   * @return createBucket
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Create the bucket if it does not exist. Only applies to `Amazon`, `Azure`, `Openstack Swift`, and `Rackspace CDN`.")

  public Boolean getCreateBucket() {
    return createBucket;
  }


  public void setCreateBucket(Boolean createBucket) {
    this.createBucket = createBucket;
  }


  public ApiStorageBucketsStorageBucket config(OneOfobjectobjectobjectobjectobjectobjectobject config) {
    
    this.config = config;
    return this;
  }

   /**
   * Get config
   * @return config
  **/
  @ApiModelProperty(required = true, value = "")

  public OneOfobjectobjectobjectobjectobjectobjectobject getConfig() {
    return config;
  }


  public void setConfig(OneOfobjectobjectobjectobjectobjectobjectobject config) {
    this.config = config;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApiStorageBucketsStorageBucket apiStorageBucketsStorageBucket = (ApiStorageBucketsStorageBucket) o;
    return Objects.equals(this.name, apiStorageBucketsStorageBucket.name) &&
        Objects.equals(this.providerType, apiStorageBucketsStorageBucket.providerType) &&
        Objects.equals(this.defaultBackupTarget, apiStorageBucketsStorageBucket.defaultBackupTarget) &&
        Objects.equals(this.copyToStore, apiStorageBucketsStorageBucket.copyToStore) &&
        Objects.equals(this.defaultDeploymentTarget, apiStorageBucketsStorageBucket.defaultDeploymentTarget) &&
        Objects.equals(this.defaultVirtualImageTarget, apiStorageBucketsStorageBucket.defaultVirtualImageTarget) &&
        Objects.equals(this.retentionPolicyType, apiStorageBucketsStorageBucket.retentionPolicyType) &&
        Objects.equals(this.retentionPolicyDays, apiStorageBucketsStorageBucket.retentionPolicyDays) &&
        Objects.equals(this.retentionProvider, apiStorageBucketsStorageBucket.retentionProvider) &&
        Objects.equals(this.bucketName, apiStorageBucketsStorageBucket.bucketName) &&
        Objects.equals(this.createBucket, apiStorageBucketsStorageBucket.createBucket) &&
        Objects.equals(this.config, apiStorageBucketsStorageBucket.config);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, providerType, defaultBackupTarget, copyToStore, defaultDeploymentTarget, defaultVirtualImageTarget, retentionPolicyType, retentionPolicyDays, retentionProvider, bucketName, createBucket, config);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApiStorageBucketsStorageBucket {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    providerType: ").append(toIndentedString(providerType)).append("\n");
    sb.append("    defaultBackupTarget: ").append(toIndentedString(defaultBackupTarget)).append("\n");
    sb.append("    copyToStore: ").append(toIndentedString(copyToStore)).append("\n");
    sb.append("    defaultDeploymentTarget: ").append(toIndentedString(defaultDeploymentTarget)).append("\n");
    sb.append("    defaultVirtualImageTarget: ").append(toIndentedString(defaultVirtualImageTarget)).append("\n");
    sb.append("    retentionPolicyType: ").append(toIndentedString(retentionPolicyType)).append("\n");
    sb.append("    retentionPolicyDays: ").append(toIndentedString(retentionPolicyDays)).append("\n");
    sb.append("    retentionProvider: ").append(toIndentedString(retentionProvider)).append("\n");
    sb.append("    bucketName: ").append(toIndentedString(bucketName)).append("\n");
    sb.append("    createBucket: ").append(toIndentedString(createBucket)).append("\n");
    sb.append("    config: ").append(toIndentedString(config)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

