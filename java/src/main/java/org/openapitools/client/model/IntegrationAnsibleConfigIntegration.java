/*
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.client.model.IntegrationAnsibleConfigIntegrationConfig;

/**
 * IntegrationAnsibleConfigIntegration
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-21T11:26:47.028Z[GMT]")
public class IntegrationAnsibleConfigIntegration {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * Integration Type Code
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    ANSIBLE("ansible");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_REFRESH = "refresh";
  @SerializedName(SERIALIZED_NAME_REFRESH)
  private Boolean refresh = true;

  public static final String SERIALIZED_NAME_SERVICE_URL = "serviceUrl";
  @SerializedName(SERIALIZED_NAME_SERVICE_URL)
  private String serviceUrl;

  public static final String SERIALIZED_NAME_SERVICE_USERNAME = "serviceUsername";
  @SerializedName(SERIALIZED_NAME_SERVICE_USERNAME)
  private String serviceUsername;

  public static final String SERIALIZED_NAME_SERVICE_PASSWORD = "servicePassword";
  @SerializedName(SERIALIZED_NAME_SERVICE_PASSWORD)
  private String servicePassword;

  public static final String SERIALIZED_NAME_SERVICE_TOKEN = "serviceToken";
  @SerializedName(SERIALIZED_NAME_SERVICE_TOKEN)
  private String serviceToken;

  public static final String SERIALIZED_NAME_SERVICE_KEY = "serviceKey";
  @SerializedName(SERIALIZED_NAME_SERVICE_KEY)
  private Long serviceKey;

  public static final String SERIALIZED_NAME_CONFIG = "config";
  @SerializedName(SERIALIZED_NAME_CONFIG)
  private IntegrationAnsibleConfigIntegrationConfig config;


  public IntegrationAnsibleConfigIntegration name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Name, a unique identifier for the integration
   * @return name
  **/
  @ApiModelProperty(example = "Sample Integration", required = true, value = "Name, a unique identifier for the integration")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public IntegrationAnsibleConfigIntegration type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * Integration Type Code
   * @return type
  **/
  @ApiModelProperty(required = true, value = "Integration Type Code")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    this.type = type;
  }


  public IntegrationAnsibleConfigIntegration enabled(Boolean enabled) {
    
    this.enabled = enabled;
    return this;
  }

   /**
   * Set &#x60;true&#x60; to enable integration
   * @return enabled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Set `true` to enable integration")

  public Boolean getEnabled() {
    return enabled;
  }


  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public IntegrationAnsibleConfigIntegration refresh(Boolean refresh) {
    
    this.refresh = refresh;
    return this;
  }

   /**
   * Pass &#x60;false&#x60; to skip refresh.  By default, refresh is done on update, when it is supported by the integration type. 
   * @return refresh
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Pass `false` to skip refresh.  By default, refresh is done on update, when it is supported by the integration type. ")

  public Boolean getRefresh() {
    return refresh;
  }


  public void setRefresh(Boolean refresh) {
    this.refresh = refresh;
  }


  public IntegrationAnsibleConfigIntegration serviceUrl(String serviceUrl) {
    
    this.serviceUrl = serviceUrl;
    return this;
  }

   /**
   * Ansible Git URL
   * @return serviceUrl
  **/
  @ApiModelProperty(example = "https://myrepo.git", required = true, value = "Ansible Git URL")

  public String getServiceUrl() {
    return serviceUrl;
  }


  public void setServiceUrl(String serviceUrl) {
    this.serviceUrl = serviceUrl;
  }


  public IntegrationAnsibleConfigIntegration serviceUsername(String serviceUsername) {
    
    this.serviceUsername = serviceUsername;
    return this;
  }

   /**
   * Git Username
   * @return serviceUsername
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "MyUser", value = "Git Username")

  public String getServiceUsername() {
    return serviceUsername;
  }


  public void setServiceUsername(String serviceUsername) {
    this.serviceUsername = serviceUsername;
  }


  public IntegrationAnsibleConfigIntegration servicePassword(String servicePassword) {
    
    this.servicePassword = servicePassword;
    return this;
  }

   /**
   * Git Password or Token depending on the Git host
   * @return servicePassword
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "MyPassword", value = "Git Password or Token depending on the Git host")

  public String getServicePassword() {
    return servicePassword;
  }


  public void setServicePassword(String servicePassword) {
    this.servicePassword = servicePassword;
  }


  public IntegrationAnsibleConfigIntegration serviceToken(String serviceToken) {
    
    this.serviceToken = serviceToken;
    return this;
  }

   /**
   * Git Token
   * @return serviceToken
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Git Token")

  public String getServiceToken() {
    return serviceToken;
  }


  public void setServiceToken(String serviceToken) {
    this.serviceToken = serviceToken;
  }


  public IntegrationAnsibleConfigIntegration serviceKey(Long serviceKey) {
    
    this.serviceKey = serviceKey;
    return this;
  }

   /**
   * Keypair ID
   * @return serviceKey
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Keypair ID")

  public Long getServiceKey() {
    return serviceKey;
  }


  public void setServiceKey(Long serviceKey) {
    this.serviceKey = serviceKey;
  }


  public IntegrationAnsibleConfigIntegration config(IntegrationAnsibleConfigIntegrationConfig config) {
    
    this.config = config;
    return this;
  }

   /**
   * Get config
   * @return config
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public IntegrationAnsibleConfigIntegrationConfig getConfig() {
    return config;
  }


  public void setConfig(IntegrationAnsibleConfigIntegrationConfig config) {
    this.config = config;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IntegrationAnsibleConfigIntegration integrationAnsibleConfigIntegration = (IntegrationAnsibleConfigIntegration) o;
    return Objects.equals(this.name, integrationAnsibleConfigIntegration.name) &&
        Objects.equals(this.type, integrationAnsibleConfigIntegration.type) &&
        Objects.equals(this.enabled, integrationAnsibleConfigIntegration.enabled) &&
        Objects.equals(this.refresh, integrationAnsibleConfigIntegration.refresh) &&
        Objects.equals(this.serviceUrl, integrationAnsibleConfigIntegration.serviceUrl) &&
        Objects.equals(this.serviceUsername, integrationAnsibleConfigIntegration.serviceUsername) &&
        Objects.equals(this.servicePassword, integrationAnsibleConfigIntegration.servicePassword) &&
        Objects.equals(this.serviceToken, integrationAnsibleConfigIntegration.serviceToken) &&
        Objects.equals(this.serviceKey, integrationAnsibleConfigIntegration.serviceKey) &&
        Objects.equals(this.config, integrationAnsibleConfigIntegration.config);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, type, enabled, refresh, serviceUrl, serviceUsername, servicePassword, serviceToken, serviceKey, config);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IntegrationAnsibleConfigIntegration {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    refresh: ").append(toIndentedString(refresh)).append("\n");
    sb.append("    serviceUrl: ").append(toIndentedString(serviceUrl)).append("\n");
    sb.append("    serviceUsername: ").append(toIndentedString(serviceUsername)).append("\n");
    sb.append("    servicePassword: ").append(toIndentedString(servicePassword)).append("\n");
    sb.append("    serviceToken: ").append(toIndentedString(serviceToken)).append("\n");
    sb.append("    serviceKey: ").append(toIndentedString(serviceKey)).append("\n");
    sb.append("    config: ").append(toIndentedString(config)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

