/*
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.client.model.MonitoringSettingsServiceNowIntegration;

/**
 * Service Now Settings
 */
@ApiModel(description = "Service Now Settings")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-21T11:26:47.028Z[GMT]")
public class MonitoringSettingsServiceNow {
  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_INTEGRATION = "integration";
  @SerializedName(SERIALIZED_NAME_INTEGRATION)
  private MonitoringSettingsServiceNowIntegration integration;

  /**
   * New Incident Action
   */
  @JsonAdapter(NewIncidentActionEnum.Adapter.class)
  public enum NewIncidentActionEnum {
    CREATE("create"),
    
    NONE("none");

    private String value;

    NewIncidentActionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NewIncidentActionEnum fromValue(String value) {
      for (NewIncidentActionEnum b : NewIncidentActionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<NewIncidentActionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NewIncidentActionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NewIncidentActionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return NewIncidentActionEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_NEW_INCIDENT_ACTION = "newIncidentAction";
  @SerializedName(SERIALIZED_NAME_NEW_INCIDENT_ACTION)
  private NewIncidentActionEnum newIncidentAction;

  /**
   * Close Incident Action
   */
  @JsonAdapter(CloseIncidentActionEnum.Adapter.class)
  public enum CloseIncidentActionEnum {
    CLOSE("close"),
    
    ACTIVITY("activity"),
    
    NONE("none");

    private String value;

    CloseIncidentActionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CloseIncidentActionEnum fromValue(String value) {
      for (CloseIncidentActionEnum b : CloseIncidentActionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<CloseIncidentActionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CloseIncidentActionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CloseIncidentActionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CloseIncidentActionEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CLOSE_INCIDENT_ACTION = "closeIncidentAction";
  @SerializedName(SERIALIZED_NAME_CLOSE_INCIDENT_ACTION)
  private CloseIncidentActionEnum closeIncidentAction;

  /**
   * Info Mapping
   */
  @JsonAdapter(InfoMappingEnum.Adapter.class)
  public enum InfoMappingEnum {
    LOW("low"),
    
    MEDIUM("medium"),
    
    HIGH("high");

    private String value;

    InfoMappingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InfoMappingEnum fromValue(String value) {
      for (InfoMappingEnum b : InfoMappingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<InfoMappingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InfoMappingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InfoMappingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return InfoMappingEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_INFO_MAPPING = "infoMapping";
  @SerializedName(SERIALIZED_NAME_INFO_MAPPING)
  private InfoMappingEnum infoMapping;

  /**
   * Warning Mapping
   */
  @JsonAdapter(WarningMappingEnum.Adapter.class)
  public enum WarningMappingEnum {
    LOW("low"),
    
    MEDIUM("medium"),
    
    HIGH("high");

    private String value;

    WarningMappingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static WarningMappingEnum fromValue(String value) {
      for (WarningMappingEnum b : WarningMappingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<WarningMappingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final WarningMappingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public WarningMappingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return WarningMappingEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_WARNING_MAPPING = "warningMapping";
  @SerializedName(SERIALIZED_NAME_WARNING_MAPPING)
  private WarningMappingEnum warningMapping;

  /**
   * Critical Mapping
   */
  @JsonAdapter(CriticalMappingEnum.Adapter.class)
  public enum CriticalMappingEnum {
    LOW("low"),
    
    MEDIUM("medium"),
    
    HIGH("high");

    private String value;

    CriticalMappingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CriticalMappingEnum fromValue(String value) {
      for (CriticalMappingEnum b : CriticalMappingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<CriticalMappingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CriticalMappingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CriticalMappingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CriticalMappingEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CRITICAL_MAPPING = "criticalMapping";
  @SerializedName(SERIALIZED_NAME_CRITICAL_MAPPING)
  private CriticalMappingEnum criticalMapping;


  public MonitoringSettingsServiceNow enabled(Boolean enabled) {
    
    this.enabled = enabled;
    return this;
  }

   /**
   * Enabled
   * @return enabled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Enabled")

  public Boolean getEnabled() {
    return enabled;
  }


  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public MonitoringSettingsServiceNow integration(MonitoringSettingsServiceNowIntegration integration) {
    
    this.integration = integration;
    return this;
  }

   /**
   * Get integration
   * @return integration
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public MonitoringSettingsServiceNowIntegration getIntegration() {
    return integration;
  }


  public void setIntegration(MonitoringSettingsServiceNowIntegration integration) {
    this.integration = integration;
  }


  public MonitoringSettingsServiceNow newIncidentAction(NewIncidentActionEnum newIncidentAction) {
    
    this.newIncidentAction = newIncidentAction;
    return this;
  }

   /**
   * New Incident Action
   * @return newIncidentAction
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "create", value = "New Incident Action")

  public NewIncidentActionEnum getNewIncidentAction() {
    return newIncidentAction;
  }


  public void setNewIncidentAction(NewIncidentActionEnum newIncidentAction) {
    this.newIncidentAction = newIncidentAction;
  }


  public MonitoringSettingsServiceNow closeIncidentAction(CloseIncidentActionEnum closeIncidentAction) {
    
    this.closeIncidentAction = closeIncidentAction;
    return this;
  }

   /**
   * Close Incident Action
   * @return closeIncidentAction
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "close", value = "Close Incident Action")

  public CloseIncidentActionEnum getCloseIncidentAction() {
    return closeIncidentAction;
  }


  public void setCloseIncidentAction(CloseIncidentActionEnum closeIncidentAction) {
    this.closeIncidentAction = closeIncidentAction;
  }


  public MonitoringSettingsServiceNow infoMapping(InfoMappingEnum infoMapping) {
    
    this.infoMapping = infoMapping;
    return this;
  }

   /**
   * Info Mapping
   * @return infoMapping
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "low", value = "Info Mapping")

  public InfoMappingEnum getInfoMapping() {
    return infoMapping;
  }


  public void setInfoMapping(InfoMappingEnum infoMapping) {
    this.infoMapping = infoMapping;
  }


  public MonitoringSettingsServiceNow warningMapping(WarningMappingEnum warningMapping) {
    
    this.warningMapping = warningMapping;
    return this;
  }

   /**
   * Warning Mapping
   * @return warningMapping
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "medium", value = "Warning Mapping")

  public WarningMappingEnum getWarningMapping() {
    return warningMapping;
  }


  public void setWarningMapping(WarningMappingEnum warningMapping) {
    this.warningMapping = warningMapping;
  }


  public MonitoringSettingsServiceNow criticalMapping(CriticalMappingEnum criticalMapping) {
    
    this.criticalMapping = criticalMapping;
    return this;
  }

   /**
   * Critical Mapping
   * @return criticalMapping
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "high", value = "Critical Mapping")

  public CriticalMappingEnum getCriticalMapping() {
    return criticalMapping;
  }


  public void setCriticalMapping(CriticalMappingEnum criticalMapping) {
    this.criticalMapping = criticalMapping;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MonitoringSettingsServiceNow monitoringSettingsServiceNow = (MonitoringSettingsServiceNow) o;
    return Objects.equals(this.enabled, monitoringSettingsServiceNow.enabled) &&
        Objects.equals(this.integration, monitoringSettingsServiceNow.integration) &&
        Objects.equals(this.newIncidentAction, monitoringSettingsServiceNow.newIncidentAction) &&
        Objects.equals(this.closeIncidentAction, monitoringSettingsServiceNow.closeIncidentAction) &&
        Objects.equals(this.infoMapping, monitoringSettingsServiceNow.infoMapping) &&
        Objects.equals(this.warningMapping, monitoringSettingsServiceNow.warningMapping) &&
        Objects.equals(this.criticalMapping, monitoringSettingsServiceNow.criticalMapping);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enabled, integration, newIncidentAction, closeIncidentAction, infoMapping, warningMapping, criticalMapping);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MonitoringSettingsServiceNow {\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    integration: ").append(toIndentedString(integration)).append("\n");
    sb.append("    newIncidentAction: ").append(toIndentedString(newIncidentAction)).append("\n");
    sb.append("    closeIncidentAction: ").append(toIndentedString(closeIncidentAction)).append("\n");
    sb.append("    infoMapping: ").append(toIndentedString(infoMapping)).append("\n");
    sb.append("    warningMapping: ").append(toIndentedString(warningMapping)).append("\n");
    sb.append("    criticalMapping: ").append(toIndentedString(criticalMapping)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

