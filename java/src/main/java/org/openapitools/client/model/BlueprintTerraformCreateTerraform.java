/*
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.client.model.BlueprintTerraformCreateTerraformGit;

/**
 * BlueprintTerraformCreateTerraform
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-21T11:26:47.028Z[GMT]")
public class BlueprintTerraformCreateTerraform {
  /**
   * Configuration Type
   */
  @JsonAdapter(ConfigTypeEnum.Adapter.class)
  public enum ConfigTypeEnum {
    TF("tf"),
    
    SPEC("spec"),
    
    GIT("git"),
    
    JSON("json");

    private String value;

    ConfigTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ConfigTypeEnum fromValue(String value) {
      for (ConfigTypeEnum b : ConfigTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ConfigTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ConfigTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ConfigTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ConfigTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CONFIG_TYPE = "configType";
  @SerializedName(SERIALIZED_NAME_CONFIG_TYPE)
  private ConfigTypeEnum configType;

  public static final String SERIALIZED_NAME_JSON = "json";
  @SerializedName(SERIALIZED_NAME_JSON)
  private String json;

  public static final String SERIALIZED_NAME_TF = "tf";
  @SerializedName(SERIALIZED_NAME_TF)
  private String tf;

  public static final String SERIALIZED_NAME_GIT = "git";
  @SerializedName(SERIALIZED_NAME_GIT)
  private BlueprintTerraformCreateTerraformGit git;

  public static final String SERIALIZED_NAME_TFVAR_SECRET = "tfvarSecret";
  @SerializedName(SERIALIZED_NAME_TFVAR_SECRET)
  private String tfvarSecret;


  public BlueprintTerraformCreateTerraform configType(ConfigTypeEnum configType) {
    
    this.configType = configType;
    return this;
  }

   /**
   * Configuration Type
   * @return configType
  **/
  @ApiModelProperty(required = true, value = "Configuration Type")

  public ConfigTypeEnum getConfigType() {
    return configType;
  }


  public void setConfigType(ConfigTypeEnum configType) {
    this.configType = configType;
  }


  public BlueprintTerraformCreateTerraform json(String json) {
    
    this.json = json;
    return this;
  }

   /**
   * Terraform definition in JSON for &#x60;configType&#x60; &#x60;json&#x60;
   * @return json
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Terraform definition in JSON for `configType` `json`")

  public String getJson() {
    return json;
  }


  public void setJson(String json) {
    this.json = json;
  }


  public BlueprintTerraformCreateTerraform tf(String tf) {
    
    this.tf = tf;
    return this;
  }

   /**
   * Terraform definition for &#x60;configType&#x60; &#x60;tf&#x60;
   * @return tf
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Terraform definition for `configType` `tf`")

  public String getTf() {
    return tf;
  }


  public void setTf(String tf) {
    this.tf = tf;
  }


  public BlueprintTerraformCreateTerraform git(BlueprintTerraformCreateTerraformGit git) {
    
    this.git = git;
    return this;
  }

   /**
   * Get git
   * @return git
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BlueprintTerraformCreateTerraformGit getGit() {
    return git;
  }


  public void setGit(BlueprintTerraformCreateTerraformGit git) {
    this.git = git;
  }


  public BlueprintTerraformCreateTerraform tfvarSecret(String tfvarSecret) {
    
    this.tfvarSecret = tfvarSecret;
    return this;
  }

   /**
   * tfvar secret from Morpheus Cypher
   * @return tfvarSecret
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "tfvar secret from Morpheus Cypher")

  public String getTfvarSecret() {
    return tfvarSecret;
  }


  public void setTfvarSecret(String tfvarSecret) {
    this.tfvarSecret = tfvarSecret;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BlueprintTerraformCreateTerraform blueprintTerraformCreateTerraform = (BlueprintTerraformCreateTerraform) o;
    return Objects.equals(this.configType, blueprintTerraformCreateTerraform.configType) &&
        Objects.equals(this.json, blueprintTerraformCreateTerraform.json) &&
        Objects.equals(this.tf, blueprintTerraformCreateTerraform.tf) &&
        Objects.equals(this.git, blueprintTerraformCreateTerraform.git) &&
        Objects.equals(this.tfvarSecret, blueprintTerraformCreateTerraform.tfvarSecret);
  }

  @Override
  public int hashCode() {
    return Objects.hash(configType, json, tf, git, tfvarSecret);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BlueprintTerraformCreateTerraform {\n");
    sb.append("    configType: ").append(toIndentedString(configType)).append("\n");
    sb.append("    json: ").append(toIndentedString(json)).append("\n");
    sb.append("    tf: ").append(toIndentedString(tf)).append("\n");
    sb.append("    git: ").append(toIndentedString(git)).append("\n");
    sb.append("    tfvarSecret: ").append(toIndentedString(tfvarSecret)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

