/*
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.InstanceEnvsEnvs;

/**
 * InstanceEnvs
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-21T11:26:47.028Z[GMT]")
public class InstanceEnvs {
  public static final String SERIALIZED_NAME_ENVS = "envs";
  @SerializedName(SERIALIZED_NAME_ENVS)
  private List<InstanceEnvsEnvs> envs = null;

  public static final String SERIALIZED_NAME_READ_ONLY_ENVS = "readOnlyEnvs";
  @SerializedName(SERIALIZED_NAME_READ_ONLY_ENVS)
  private List<InstanceEnvsEnvs> readOnlyEnvs = null;

  public static final String SERIALIZED_NAME_IMPORTED_ENVS = "importedEnvs";
  @SerializedName(SERIALIZED_NAME_IMPORTED_ENVS)
  private List<InstanceEnvsEnvs> importedEnvs = null;


  public InstanceEnvs envs(List<InstanceEnvsEnvs> envs) {
    
    this.envs = envs;
    return this;
  }

  public InstanceEnvs addEnvsItem(InstanceEnvsEnvs envsItem) {
    if (this.envs == null) {
      this.envs = new ArrayList<InstanceEnvsEnvs>();
    }
    this.envs.add(envsItem);
    return this;
  }

   /**
   * Get envs
   * @return envs
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<InstanceEnvsEnvs> getEnvs() {
    return envs;
  }


  public void setEnvs(List<InstanceEnvsEnvs> envs) {
    this.envs = envs;
  }


  public InstanceEnvs readOnlyEnvs(List<InstanceEnvsEnvs> readOnlyEnvs) {
    
    this.readOnlyEnvs = readOnlyEnvs;
    return this;
  }

  public InstanceEnvs addReadOnlyEnvsItem(InstanceEnvsEnvs readOnlyEnvsItem) {
    if (this.readOnlyEnvs == null) {
      this.readOnlyEnvs = new ArrayList<InstanceEnvsEnvs>();
    }
    this.readOnlyEnvs.add(readOnlyEnvsItem);
    return this;
  }

   /**
   * Get readOnlyEnvs
   * @return readOnlyEnvs
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<InstanceEnvsEnvs> getReadOnlyEnvs() {
    return readOnlyEnvs;
  }


  public void setReadOnlyEnvs(List<InstanceEnvsEnvs> readOnlyEnvs) {
    this.readOnlyEnvs = readOnlyEnvs;
  }


  public InstanceEnvs importedEnvs(List<InstanceEnvsEnvs> importedEnvs) {
    
    this.importedEnvs = importedEnvs;
    return this;
  }

  public InstanceEnvs addImportedEnvsItem(InstanceEnvsEnvs importedEnvsItem) {
    if (this.importedEnvs == null) {
      this.importedEnvs = new ArrayList<InstanceEnvsEnvs>();
    }
    this.importedEnvs.add(importedEnvsItem);
    return this;
  }

   /**
   * Get importedEnvs
   * @return importedEnvs
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<InstanceEnvsEnvs> getImportedEnvs() {
    return importedEnvs;
  }


  public void setImportedEnvs(List<InstanceEnvsEnvs> importedEnvs) {
    this.importedEnvs = importedEnvs;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InstanceEnvs instanceEnvs = (InstanceEnvs) o;
    return Objects.equals(this.envs, instanceEnvs.envs) &&
        Objects.equals(this.readOnlyEnvs, instanceEnvs.readOnlyEnvs) &&
        Objects.equals(this.importedEnvs, instanceEnvs.importedEnvs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(envs, readOnlyEnvs, importedEnvs);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InstanceEnvs {\n");
    sb.append("    envs: ").append(toIndentedString(envs)).append("\n");
    sb.append("    readOnlyEnvs: ").append(toIndentedString(readOnlyEnvs)).append("\n");
    sb.append("    importedEnvs: ").append(toIndentedString(importedEnvs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

