/*
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.1.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AddExecuteSchedulesRequestSchedule
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-17T13:37:08.123540Z[Etc/UTC]")
public class AddExecuteSchedulesRequestSchedule {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  /**
   * Type of schedule
   */
  @JsonAdapter(ScheduleTypeEnum.Adapter.class)
  public enum ScheduleTypeEnum {
    EXECUTE("execute");

    private String value;

    ScheduleTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ScheduleTypeEnum fromValue(String value) {
      for (ScheduleTypeEnum b : ScheduleTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ScheduleTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ScheduleTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ScheduleTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ScheduleTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SCHEDULE_TYPE = "scheduleType";
  @SerializedName(SERIALIZED_NAME_SCHEDULE_TYPE)
  private ScheduleTypeEnum scheduleType;

  public static final String SERIALIZED_NAME_SCHEDULE_TIMEZONE = "scheduleTimezone";
  @SerializedName(SERIALIZED_NAME_SCHEDULE_TIMEZONE)
  private String scheduleTimezone = "UTC";

  public static final String SERIALIZED_NAME_CRON = "cron";
  @SerializedName(SERIALIZED_NAME_CRON)
  private String cron = "0 0 * * *";

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled = true;

  public AddExecuteSchedulesRequestSchedule() {
  }

  public AddExecuteSchedulesRequestSchedule name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * A name for the execute schedule
   * @return name
  **/
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public AddExecuteSchedulesRequestSchedule description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * A description for the execute schedule
   * @return description
  **/
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public AddExecuteSchedulesRequestSchedule scheduleType(ScheduleTypeEnum scheduleType) {
    
    this.scheduleType = scheduleType;
    return this;
  }

   /**
   * Type of schedule
   * @return scheduleType
  **/
  @javax.annotation.Nullable
  public ScheduleTypeEnum getScheduleType() {
    return scheduleType;
  }


  public void setScheduleType(ScheduleTypeEnum scheduleType) {
    this.scheduleType = scheduleType;
  }


  public AddExecuteSchedulesRequestSchedule scheduleTimezone(String scheduleTimezone) {
    
    this.scheduleTimezone = scheduleTimezone;
    return this;
  }

   /**
   * Time Zone eg. America/New_York, Europe/Amsterdam, etc.
   * @return scheduleTimezone
  **/
  @javax.annotation.Nullable
  public String getScheduleTimezone() {
    return scheduleTimezone;
  }


  public void setScheduleTimezone(String scheduleTimezone) {
    this.scheduleTimezone = scheduleTimezone;
  }


  public AddExecuteSchedulesRequestSchedule cron(String cron) {
    
    this.cron = cron;
    return this;
  }

   /**
   * Cron Expression. The default is daily at midnight
   * @return cron
  **/
  @javax.annotation.Nullable
  public String getCron() {
    return cron;
  }


  public void setCron(String cron) {
    this.cron = cron;
  }


  public AddExecuteSchedulesRequestSchedule enabled(Boolean enabled) {
    
    this.enabled = enabled;
    return this;
  }

   /**
   * Is enabled
   * @return enabled
  **/
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }


  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AddExecuteSchedulesRequestSchedule addExecuteSchedulesRequestSchedule = (AddExecuteSchedulesRequestSchedule) o;
    return Objects.equals(this.name, addExecuteSchedulesRequestSchedule.name) &&
        Objects.equals(this.description, addExecuteSchedulesRequestSchedule.description) &&
        Objects.equals(this.scheduleType, addExecuteSchedulesRequestSchedule.scheduleType) &&
        Objects.equals(this.scheduleTimezone, addExecuteSchedulesRequestSchedule.scheduleTimezone) &&
        Objects.equals(this.cron, addExecuteSchedulesRequestSchedule.cron) &&
        Objects.equals(this.enabled, addExecuteSchedulesRequestSchedule.enabled);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, description, scheduleType, scheduleTimezone, cron, enabled);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AddExecuteSchedulesRequestSchedule {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    scheduleType: ").append(toIndentedString(scheduleType)).append("\n");
    sb.append("    scheduleTimezone: ").append(toIndentedString(scheduleTimezone)).append("\n");
    sb.append("    cron: ").append(toIndentedString(cron)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("description");
    openapiFields.add("scheduleType");
    openapiFields.add("scheduleTimezone");
    openapiFields.add("cron");
    openapiFields.add("enabled");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to AddExecuteSchedulesRequestSchedule
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AddExecuteSchedulesRequestSchedule.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AddExecuteSchedulesRequestSchedule is not found in the empty JSON string", AddExecuteSchedulesRequestSchedule.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!AddExecuteSchedulesRequestSchedule.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AddExecuteSchedulesRequestSchedule` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AddExecuteSchedulesRequestSchedule.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("scheduleType") != null && !jsonObj.get("scheduleType").isJsonNull()) && !jsonObj.get("scheduleType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scheduleType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scheduleType").toString()));
      }
      if ((jsonObj.get("scheduleTimezone") != null && !jsonObj.get("scheduleTimezone").isJsonNull()) && !jsonObj.get("scheduleTimezone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scheduleTimezone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scheduleTimezone").toString()));
      }
      if ((jsonObj.get("cron") != null && !jsonObj.get("cron").isJsonNull()) && !jsonObj.get("cron").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cron` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cron").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AddExecuteSchedulesRequestSchedule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AddExecuteSchedulesRequestSchedule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AddExecuteSchedulesRequestSchedule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AddExecuteSchedulesRequestSchedule.class));

       return (TypeAdapter<T>) new TypeAdapter<AddExecuteSchedulesRequestSchedule>() {
           @Override
           public void write(JsonWriter out, AddExecuteSchedulesRequestSchedule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AddExecuteSchedulesRequestSchedule read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AddExecuteSchedulesRequestSchedule given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AddExecuteSchedulesRequestSchedule
  * @throws IOException if the JSON string is invalid with respect to AddExecuteSchedulesRequestSchedule
  */
  public static AddExecuteSchedulesRequestSchedule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AddExecuteSchedulesRequestSchedule.class);
  }

 /**
  * Convert an instance of AddExecuteSchedulesRequestSchedule to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

