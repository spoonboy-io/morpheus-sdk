/*
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.1.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AppStateWorkloadsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-17T13:37:08.123540Z[Etc/UTC]")
public class AppStateWorkloadsInner {
  public static final String SERIALIZED_NAME_REF_TYPE = "refType";
  @SerializedName(SERIALIZED_NAME_REF_TYPE)
  private String refType;

  public static final String SERIALIZED_NAME_REF_ID = "refId";
  @SerializedName(SERIALIZED_NAME_REF_ID)
  private Long refId;

  public static final String SERIALIZED_NAME_REF_NAME = "refName";
  @SerializedName(SERIALIZED_NAME_REF_NAME)
  private String refName;

  public static final String SERIALIZED_NAME_SUB_REF_NAME = "subRefName";
  @SerializedName(SERIALIZED_NAME_SUB_REF_NAME)
  private String subRefName;

  public static final String SERIALIZED_NAME_STATE_DATE = "stateDate";
  @SerializedName(SERIALIZED_NAME_STATE_DATE)
  private OffsetDateTime stateDate;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_IAC_DRIFT = "iacDrift";
  @SerializedName(SERIALIZED_NAME_IAC_DRIFT)
  private Boolean iacDrift;

  public AppStateWorkloadsInner() {
  }

  public AppStateWorkloadsInner refType(String refType) {
    
    this.refType = refType;
    return this;
  }

   /**
   * Get refType
   * @return refType
  **/
  @javax.annotation.Nullable
  public String getRefType() {
    return refType;
  }


  public void setRefType(String refType) {
    this.refType = refType;
  }


  public AppStateWorkloadsInner refId(Long refId) {
    
    this.refId = refId;
    return this;
  }

   /**
   * Get refId
   * @return refId
  **/
  @javax.annotation.Nullable
  public Long getRefId() {
    return refId;
  }


  public void setRefId(Long refId) {
    this.refId = refId;
  }


  public AppStateWorkloadsInner refName(String refName) {
    
    this.refName = refName;
    return this;
  }

   /**
   * Get refName
   * @return refName
  **/
  @javax.annotation.Nullable
  public String getRefName() {
    return refName;
  }


  public void setRefName(String refName) {
    this.refName = refName;
  }


  public AppStateWorkloadsInner subRefName(String subRefName) {
    
    this.subRefName = subRefName;
    return this;
  }

   /**
   * Get subRefName
   * @return subRefName
  **/
  @javax.annotation.Nullable
  public String getSubRefName() {
    return subRefName;
  }


  public void setSubRefName(String subRefName) {
    this.subRefName = subRefName;
  }


  public AppStateWorkloadsInner stateDate(OffsetDateTime stateDate) {
    
    this.stateDate = stateDate;
    return this;
  }

   /**
   * Get stateDate
   * @return stateDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getStateDate() {
    return stateDate;
  }


  public void setStateDate(OffsetDateTime stateDate) {
    this.stateDate = stateDate;
  }


  public AppStateWorkloadsInner status(String status) {
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }


  public void setStatus(String status) {
    this.status = status;
  }


  public AppStateWorkloadsInner iacDrift(Boolean iacDrift) {
    
    this.iacDrift = iacDrift;
    return this;
  }

   /**
   * Get iacDrift
   * @return iacDrift
  **/
  @javax.annotation.Nullable
  public Boolean getIacDrift() {
    return iacDrift;
  }


  public void setIacDrift(Boolean iacDrift) {
    this.iacDrift = iacDrift;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AppStateWorkloadsInner appStateWorkloadsInner = (AppStateWorkloadsInner) o;
    return Objects.equals(this.refType, appStateWorkloadsInner.refType) &&
        Objects.equals(this.refId, appStateWorkloadsInner.refId) &&
        Objects.equals(this.refName, appStateWorkloadsInner.refName) &&
        Objects.equals(this.subRefName, appStateWorkloadsInner.subRefName) &&
        Objects.equals(this.stateDate, appStateWorkloadsInner.stateDate) &&
        Objects.equals(this.status, appStateWorkloadsInner.status) &&
        Objects.equals(this.iacDrift, appStateWorkloadsInner.iacDrift);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(refType, refId, refName, subRefName, stateDate, status, iacDrift);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AppStateWorkloadsInner {\n");
    sb.append("    refType: ").append(toIndentedString(refType)).append("\n");
    sb.append("    refId: ").append(toIndentedString(refId)).append("\n");
    sb.append("    refName: ").append(toIndentedString(refName)).append("\n");
    sb.append("    subRefName: ").append(toIndentedString(subRefName)).append("\n");
    sb.append("    stateDate: ").append(toIndentedString(stateDate)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    iacDrift: ").append(toIndentedString(iacDrift)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("refType");
    openapiFields.add("refId");
    openapiFields.add("refName");
    openapiFields.add("subRefName");
    openapiFields.add("stateDate");
    openapiFields.add("status");
    openapiFields.add("iacDrift");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to AppStateWorkloadsInner
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AppStateWorkloadsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AppStateWorkloadsInner is not found in the empty JSON string", AppStateWorkloadsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!AppStateWorkloadsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AppStateWorkloadsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("refType") != null && !jsonObj.get("refType").isJsonNull()) && !jsonObj.get("refType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `refType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("refType").toString()));
      }
      if ((jsonObj.get("refName") != null && !jsonObj.get("refName").isJsonNull()) && !jsonObj.get("refName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `refName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("refName").toString()));
      }
      if ((jsonObj.get("subRefName") != null && !jsonObj.get("subRefName").isJsonNull()) && !jsonObj.get("subRefName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subRefName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subRefName").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AppStateWorkloadsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AppStateWorkloadsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AppStateWorkloadsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AppStateWorkloadsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<AppStateWorkloadsInner>() {
           @Override
           public void write(JsonWriter out, AppStateWorkloadsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AppStateWorkloadsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AppStateWorkloadsInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AppStateWorkloadsInner
  * @throws IOException if the JSON string is invalid with respect to AppStateWorkloadsInner
  */
  public static AppStateWorkloadsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AppStateWorkloadsInner.class);
  }

 /**
  * Convert an instance of AppStateWorkloadsInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

