/*
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.client.model.ApiTasksTaskFileRepository;

/**
 * File, object specifying type and content, see File Object. This is required for task types that expect a script, having scriptable:true and an optionType of &#x60;type:\&quot;file-content\&quot;&#x60;. 
 */
@ApiModel(description = "File, object specifying type and content, see File Object. This is required for task types that expect a script, having scriptable:true and an optionType of `type:\"file-content\"`. ")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-21T11:26:47.028Z[GMT]")
public class ApiTasksTaskFile {
  /**
   * File Source i.e. &#x60;local&#x60;, &#x60;repository&#x60;, &#x60;url&#x60;. Default is &#x60;local&#x60;.
   */
  @JsonAdapter(SourceTypeEnum.Adapter.class)
  public enum SourceTypeEnum {
    LOCAL("local"),
    
    REPOSITORY("repository"),
    
    URL("url");

    private String value;

    SourceTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SourceTypeEnum fromValue(String value) {
      for (SourceTypeEnum b : SourceTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SourceTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SourceTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SourceTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SourceTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SOURCE_TYPE = "sourceType";
  @SerializedName(SERIALIZED_NAME_SOURCE_TYPE)
  private SourceTypeEnum sourceType = SourceTypeEnum.LOCAL;

  public static final String SERIALIZED_NAME_CONTENT = "content";
  @SerializedName(SERIALIZED_NAME_CONTENT)
  private String content;

  public static final String SERIALIZED_NAME_CONTENT_PATH = "contentPath";
  @SerializedName(SERIALIZED_NAME_CONTENT_PATH)
  private String contentPath;

  public static final String SERIALIZED_NAME_CONTENT_REF = "contentRef";
  @SerializedName(SERIALIZED_NAME_CONTENT_REF)
  private String contentRef;

  public static final String SERIALIZED_NAME_REPOSITORY = "repository";
  @SerializedName(SERIALIZED_NAME_REPOSITORY)
  private ApiTasksTaskFileRepository repository;


  public ApiTasksTaskFile sourceType(SourceTypeEnum sourceType) {
    
    this.sourceType = sourceType;
    return this;
  }

   /**
   * File Source i.e. &#x60;local&#x60;, &#x60;repository&#x60;, &#x60;url&#x60;. Default is &#x60;local&#x60;.
   * @return sourceType
  **/
  @ApiModelProperty(required = true, value = "File Source i.e. `local`, `repository`, `url`. Default is `local`.")

  public SourceTypeEnum getSourceType() {
    return sourceType;
  }


  public void setSourceType(SourceTypeEnum sourceType) {
    this.sourceType = sourceType;
  }


  public ApiTasksTaskFile content(String content) {
    
    this.content = content;
    return this;
  }

   /**
   * File content, the script text. Only required when sourceType is &#x60;local&#x60;.
   * @return content
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "File content, the script text. Only required when sourceType is `local`.")

  public String getContent() {
    return content;
  }


  public void setContent(String content) {
    this.content = content;
  }


  public ApiTasksTaskFile contentPath(String contentPath) {
    
    this.contentPath = contentPath;
    return this;
  }

   /**
   * Content Path, the repo file location or url. Required when sourceType is &#x60;repository&#x60; or &#x60;url&#x60;.
   * @return contentPath
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Content Path, the repo file location or url. Required when sourceType is `repository` or `url`.")

  public String getContentPath() {
    return contentPath;
  }


  public void setContentPath(String contentPath) {
    this.contentPath = contentPath;
  }


  public ApiTasksTaskFile contentRef(String contentRef) {
    
    this.contentRef = contentRef;
    return this;
  }

   /**
   * Content Ref, the branch/tag. Only used when sourceType is &#x60;repository&#x60;.
   * @return contentRef
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Content Ref, the branch/tag. Only used when sourceType is `repository`.")

  public String getContentRef() {
    return contentRef;
  }


  public void setContentRef(String contentRef) {
    this.contentRef = contentRef;
  }


  public ApiTasksTaskFile repository(ApiTasksTaskFileRepository repository) {
    
    this.repository = repository;
    return this;
  }

   /**
   * Get repository
   * @return repository
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ApiTasksTaskFileRepository getRepository() {
    return repository;
  }


  public void setRepository(ApiTasksTaskFileRepository repository) {
    this.repository = repository;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApiTasksTaskFile apiTasksTaskFile = (ApiTasksTaskFile) o;
    return Objects.equals(this.sourceType, apiTasksTaskFile.sourceType) &&
        Objects.equals(this.content, apiTasksTaskFile.content) &&
        Objects.equals(this.contentPath, apiTasksTaskFile.contentPath) &&
        Objects.equals(this.contentRef, apiTasksTaskFile.contentRef) &&
        Objects.equals(this.repository, apiTasksTaskFile.repository);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sourceType, content, contentPath, contentRef, repository);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApiTasksTaskFile {\n");
    sb.append("    sourceType: ").append(toIndentedString(sourceType)).append("\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    contentPath: ").append(toIndentedString(contentPath)).append("\n");
    sb.append("    contentRef: ").append(toIndentedString(contentRef)).append("\n");
    sb.append("    repository: ").append(toIndentedString(repository)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

