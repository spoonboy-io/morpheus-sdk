/*
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.client.model.BlueprintARMCreateArmGit;
import org.openapitools.client.model.OneOfbooleanstring;

/**
 * BlueprintARMCreateArm
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-21T11:26:47.028Z[GMT]")
public class BlueprintARMCreateArm {
  /**
   * Configuration Type
   */
  @JsonAdapter(ConfigTypeEnum.Adapter.class)
  public enum ConfigTypeEnum {
    JSON("json"),
    
    YAML("yaml"),
    
    GIT("git");

    private String value;

    ConfigTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ConfigTypeEnum fromValue(String value) {
      for (ConfigTypeEnum b : ConfigTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ConfigTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ConfigTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ConfigTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ConfigTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CONFIG_TYPE = "configType";
  @SerializedName(SERIALIZED_NAME_CONFIG_TYPE)
  private ConfigTypeEnum configType;

  public static final String SERIALIZED_NAME_JSON = "json";
  @SerializedName(SERIALIZED_NAME_JSON)
  private String json;

  public static final String SERIALIZED_NAME_YAML = "yaml";
  @SerializedName(SERIALIZED_NAME_YAML)
  private String yaml;

  public static final String SERIALIZED_NAME_GIT = "git";
  @SerializedName(SERIALIZED_NAME_GIT)
  private BlueprintARMCreateArmGit git;

  /**
   * OS Type
   */
  @JsonAdapter(OsTypeEnum.Adapter.class)
  public enum OsTypeEnum {
    LINUX("linux"),
    
    WINDOWS("windows");

    private String value;

    OsTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OsTypeEnum fromValue(String value) {
      for (OsTypeEnum b : OsTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OsTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OsTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OsTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OsTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_OS_TYPE = "osType";
  @SerializedName(SERIALIZED_NAME_OS_TYPE)
  private OsTypeEnum osType;

  public static final String SERIALIZED_NAME_INSTALL_AGENT = "installAgent";
  @SerializedName(SERIALIZED_NAME_INSTALL_AGENT)
  private OneOfbooleanstring installAgent = null;

  public static final String SERIALIZED_NAME_CLOUD_INIT_ENABLED = "cloudInitEnabled";
  @SerializedName(SERIALIZED_NAME_CLOUD_INIT_ENABLED)
  private OneOfbooleanstring cloudInitEnabled = null;


  public BlueprintARMCreateArm configType(ConfigTypeEnum configType) {
    
    this.configType = configType;
    return this;
  }

   /**
   * Configuration Type
   * @return configType
  **/
  @ApiModelProperty(required = true, value = "Configuration Type")

  public ConfigTypeEnum getConfigType() {
    return configType;
  }


  public void setConfigType(ConfigTypeEnum configType) {
    this.configType = configType;
  }


  public BlueprintARMCreateArm json(String json) {
    
    this.json = json;
    return this;
  }

   /**
   * ARM Template in JSON
   * @return json
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "ARM Template in JSON")

  public String getJson() {
    return json;
  }


  public void setJson(String json) {
    this.json = json;
  }


  public BlueprintARMCreateArm yaml(String yaml) {
    
    this.yaml = yaml;
    return this;
  }

   /**
   * ARM Template in YAML
   * @return yaml
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "ARM Template in YAML")

  public String getYaml() {
    return yaml;
  }


  public void setYaml(String yaml) {
    this.yaml = yaml;
  }


  public BlueprintARMCreateArm git(BlueprintARMCreateArmGit git) {
    
    this.git = git;
    return this;
  }

   /**
   * Get git
   * @return git
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BlueprintARMCreateArmGit getGit() {
    return git;
  }


  public void setGit(BlueprintARMCreateArmGit git) {
    this.git = git;
  }


  public BlueprintARMCreateArm osType(OsTypeEnum osType) {
    
    this.osType = osType;
    return this;
  }

   /**
   * OS Type
   * @return osType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "OS Type")

  public OsTypeEnum getOsType() {
    return osType;
  }


  public void setOsType(OsTypeEnum osType) {
    this.osType = osType;
  }


  public BlueprintARMCreateArm installAgent(OneOfbooleanstring installAgent) {
    
    this.installAgent = installAgent;
    return this;
  }

   /**
   * Install Morpheus Agent
   * @return installAgent
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Install Morpheus Agent")

  public OneOfbooleanstring getInstallAgent() {
    return installAgent;
  }


  public void setInstallAgent(OneOfbooleanstring installAgent) {
    this.installAgent = installAgent;
  }


  public BlueprintARMCreateArm cloudInitEnabled(OneOfbooleanstring cloudInitEnabled) {
    
    this.cloudInitEnabled = cloudInitEnabled;
    return this;
  }

   /**
   * Cloud Init Enabled
   * @return cloudInitEnabled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Cloud Init Enabled")

  public OneOfbooleanstring getCloudInitEnabled() {
    return cloudInitEnabled;
  }


  public void setCloudInitEnabled(OneOfbooleanstring cloudInitEnabled) {
    this.cloudInitEnabled = cloudInitEnabled;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BlueprintARMCreateArm blueprintARMCreateArm = (BlueprintARMCreateArm) o;
    return Objects.equals(this.configType, blueprintARMCreateArm.configType) &&
        Objects.equals(this.json, blueprintARMCreateArm.json) &&
        Objects.equals(this.yaml, blueprintARMCreateArm.yaml) &&
        Objects.equals(this.git, blueprintARMCreateArm.git) &&
        Objects.equals(this.osType, blueprintARMCreateArm.osType) &&
        Objects.equals(this.installAgent, blueprintARMCreateArm.installAgent) &&
        Objects.equals(this.cloudInitEnabled, blueprintARMCreateArm.cloudInitEnabled);
  }

  @Override
  public int hashCode() {
    return Objects.hash(configType, json, yaml, git, osType, installAgent, cloudInitEnabled);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BlueprintARMCreateArm {\n");
    sb.append("    configType: ").append(toIndentedString(configType)).append("\n");
    sb.append("    json: ").append(toIndentedString(json)).append("\n");
    sb.append("    yaml: ").append(toIndentedString(yaml)).append("\n");
    sb.append("    git: ").append(toIndentedString(git)).append("\n");
    sb.append("    osType: ").append(toIndentedString(osType)).append("\n");
    sb.append("    installAgent: ").append(toIndentedString(installAgent)).append("\n");
    sb.append("    cloudInitEnabled: ").append(toIndentedString(cloudInitEnabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

