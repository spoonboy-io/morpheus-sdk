/*
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.1.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import org.openapitools.client.model.BlueprintARMCreateArmCloudInitEnabled;
import org.openapitools.client.model.BlueprintARMCreateArmGit;
import org.openapitools.client.model.BlueprintARMCreateArmInstallAgent;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BlueprintARMCreateArm
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-17T13:37:08.123540Z[Etc/UTC]")
public class BlueprintARMCreateArm {
  /**
   * Configuration Type
   */
  @JsonAdapter(ConfigTypeEnum.Adapter.class)
  public enum ConfigTypeEnum {
    JSON("json"),
    
    YAML("yaml"),
    
    GIT("git");

    private String value;

    ConfigTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ConfigTypeEnum fromValue(String value) {
      for (ConfigTypeEnum b : ConfigTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ConfigTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ConfigTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ConfigTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ConfigTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CONFIG_TYPE = "configType";
  @SerializedName(SERIALIZED_NAME_CONFIG_TYPE)
  private ConfigTypeEnum configType;

  public static final String SERIALIZED_NAME_JSON = "json";
  @SerializedName(SERIALIZED_NAME_JSON)
  private String json;

  public static final String SERIALIZED_NAME_YAML = "yaml";
  @SerializedName(SERIALIZED_NAME_YAML)
  private String yaml;

  public static final String SERIALIZED_NAME_GIT = "git";
  @SerializedName(SERIALIZED_NAME_GIT)
  private BlueprintARMCreateArmGit git;

  /**
   * OS Type
   */
  @JsonAdapter(OsTypeEnum.Adapter.class)
  public enum OsTypeEnum {
    LINUX("linux"),
    
    WINDOWS("windows");

    private String value;

    OsTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OsTypeEnum fromValue(String value) {
      for (OsTypeEnum b : OsTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OsTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OsTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OsTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OsTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_OS_TYPE = "osType";
  @SerializedName(SERIALIZED_NAME_OS_TYPE)
  private OsTypeEnum osType;

  public static final String SERIALIZED_NAME_INSTALL_AGENT = "installAgent";
  @SerializedName(SERIALIZED_NAME_INSTALL_AGENT)
  private BlueprintARMCreateArmInstallAgent installAgent = false;

  public static final String SERIALIZED_NAME_CLOUD_INIT_ENABLED = "cloudInitEnabled";
  @SerializedName(SERIALIZED_NAME_CLOUD_INIT_ENABLED)
  private BlueprintARMCreateArmCloudInitEnabled cloudInitEnabled = false;

  public BlueprintARMCreateArm() {
  }

  public BlueprintARMCreateArm configType(ConfigTypeEnum configType) {
    
    this.configType = configType;
    return this;
  }

   /**
   * Configuration Type
   * @return configType
  **/
  @javax.annotation.Nonnull
  public ConfigTypeEnum getConfigType() {
    return configType;
  }


  public void setConfigType(ConfigTypeEnum configType) {
    this.configType = configType;
  }


  public BlueprintARMCreateArm json(String json) {
    
    this.json = json;
    return this;
  }

   /**
   * ARM Template in JSON
   * @return json
  **/
  @javax.annotation.Nullable
  public String getJson() {
    return json;
  }


  public void setJson(String json) {
    this.json = json;
  }


  public BlueprintARMCreateArm yaml(String yaml) {
    
    this.yaml = yaml;
    return this;
  }

   /**
   * ARM Template in YAML
   * @return yaml
  **/
  @javax.annotation.Nullable
  public String getYaml() {
    return yaml;
  }


  public void setYaml(String yaml) {
    this.yaml = yaml;
  }


  public BlueprintARMCreateArm git(BlueprintARMCreateArmGit git) {
    
    this.git = git;
    return this;
  }

   /**
   * Get git
   * @return git
  **/
  @javax.annotation.Nullable
  public BlueprintARMCreateArmGit getGit() {
    return git;
  }


  public void setGit(BlueprintARMCreateArmGit git) {
    this.git = git;
  }


  public BlueprintARMCreateArm osType(OsTypeEnum osType) {
    
    this.osType = osType;
    return this;
  }

   /**
   * OS Type
   * @return osType
  **/
  @javax.annotation.Nullable
  public OsTypeEnum getOsType() {
    return osType;
  }


  public void setOsType(OsTypeEnum osType) {
    this.osType = osType;
  }


  public BlueprintARMCreateArm installAgent(BlueprintARMCreateArmInstallAgent installAgent) {
    
    this.installAgent = installAgent;
    return this;
  }

   /**
   * Get installAgent
   * @return installAgent
  **/
  @javax.annotation.Nullable
  public BlueprintARMCreateArmInstallAgent getInstallAgent() {
    return installAgent;
  }


  public void setInstallAgent(BlueprintARMCreateArmInstallAgent installAgent) {
    this.installAgent = installAgent;
  }


  public BlueprintARMCreateArm cloudInitEnabled(BlueprintARMCreateArmCloudInitEnabled cloudInitEnabled) {
    
    this.cloudInitEnabled = cloudInitEnabled;
    return this;
  }

   /**
   * Get cloudInitEnabled
   * @return cloudInitEnabled
  **/
  @javax.annotation.Nullable
  public BlueprintARMCreateArmCloudInitEnabled getCloudInitEnabled() {
    return cloudInitEnabled;
  }


  public void setCloudInitEnabled(BlueprintARMCreateArmCloudInitEnabled cloudInitEnabled) {
    this.cloudInitEnabled = cloudInitEnabled;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BlueprintARMCreateArm blueprintARMCreateArm = (BlueprintARMCreateArm) o;
    return Objects.equals(this.configType, blueprintARMCreateArm.configType) &&
        Objects.equals(this.json, blueprintARMCreateArm.json) &&
        Objects.equals(this.yaml, blueprintARMCreateArm.yaml) &&
        Objects.equals(this.git, blueprintARMCreateArm.git) &&
        Objects.equals(this.osType, blueprintARMCreateArm.osType) &&
        Objects.equals(this.installAgent, blueprintARMCreateArm.installAgent) &&
        Objects.equals(this.cloudInitEnabled, blueprintARMCreateArm.cloudInitEnabled);
  }

  @Override
  public int hashCode() {
    return Objects.hash(configType, json, yaml, git, osType, installAgent, cloudInitEnabled);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BlueprintARMCreateArm {\n");
    sb.append("    configType: ").append(toIndentedString(configType)).append("\n");
    sb.append("    json: ").append(toIndentedString(json)).append("\n");
    sb.append("    yaml: ").append(toIndentedString(yaml)).append("\n");
    sb.append("    git: ").append(toIndentedString(git)).append("\n");
    sb.append("    osType: ").append(toIndentedString(osType)).append("\n");
    sb.append("    installAgent: ").append(toIndentedString(installAgent)).append("\n");
    sb.append("    cloudInitEnabled: ").append(toIndentedString(cloudInitEnabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("configType");
    openapiFields.add("json");
    openapiFields.add("yaml");
    openapiFields.add("git");
    openapiFields.add("osType");
    openapiFields.add("installAgent");
    openapiFields.add("cloudInitEnabled");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("configType");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to BlueprintARMCreateArm
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BlueprintARMCreateArm.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BlueprintARMCreateArm is not found in the empty JSON string", BlueprintARMCreateArm.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!BlueprintARMCreateArm.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BlueprintARMCreateArm` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BlueprintARMCreateArm.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("configType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `configType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("configType").toString()));
      }
      if ((jsonObj.get("json") != null && !jsonObj.get("json").isJsonNull()) && !jsonObj.get("json").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `json` to be a primitive type in the JSON string but got `%s`", jsonObj.get("json").toString()));
      }
      if ((jsonObj.get("yaml") != null && !jsonObj.get("yaml").isJsonNull()) && !jsonObj.get("yaml").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `yaml` to be a primitive type in the JSON string but got `%s`", jsonObj.get("yaml").toString()));
      }
      // validate the optional field `git`
      if (jsonObj.get("git") != null && !jsonObj.get("git").isJsonNull()) {
        BlueprintARMCreateArmGit.validateJsonElement(jsonObj.get("git"));
      }
      if ((jsonObj.get("osType") != null && !jsonObj.get("osType").isJsonNull()) && !jsonObj.get("osType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `osType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("osType").toString()));
      }
      // validate the optional field `installAgent`
      if (jsonObj.get("installAgent") != null && !jsonObj.get("installAgent").isJsonNull()) {
        BlueprintARMCreateArmInstallAgent.validateJsonElement(jsonObj.get("installAgent"));
      }
      // validate the optional field `cloudInitEnabled`
      if (jsonObj.get("cloudInitEnabled") != null && !jsonObj.get("cloudInitEnabled").isJsonNull()) {
        BlueprintARMCreateArmCloudInitEnabled.validateJsonElement(jsonObj.get("cloudInitEnabled"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BlueprintARMCreateArm.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BlueprintARMCreateArm' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BlueprintARMCreateArm> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BlueprintARMCreateArm.class));

       return (TypeAdapter<T>) new TypeAdapter<BlueprintARMCreateArm>() {
           @Override
           public void write(JsonWriter out, BlueprintARMCreateArm value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BlueprintARMCreateArm read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BlueprintARMCreateArm given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BlueprintARMCreateArm
  * @throws IOException if the JSON string is invalid with respect to BlueprintARMCreateArm
  */
  public static BlueprintARMCreateArm fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BlueprintARMCreateArm.class);
  }

 /**
  * Convert an instance of BlueprintARMCreateArm to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

