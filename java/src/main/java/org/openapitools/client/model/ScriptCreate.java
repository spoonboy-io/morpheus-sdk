/*
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * ScriptCreate
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-21T11:26:47.028Z[GMT]")
public class ScriptCreate {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private List<String> labels = null;

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private String category;

  public static final String SERIALIZED_NAME_SCRIPT_VERSION = "scriptVersion";
  @SerializedName(SERIALIZED_NAME_SCRIPT_VERSION)
  private String scriptVersion = "1";

  public static final String SERIALIZED_NAME_SCRIPT_PHASE = "scriptPhase";
  @SerializedName(SERIALIZED_NAME_SCRIPT_PHASE)
  private String scriptPhase;

  /**
   * Type for the script
   */
  @JsonAdapter(ScriptTypeEnum.Adapter.class)
  public enum ScriptTypeEnum {
    BASH("bash"),
    
    POWERSHELL("powershell");

    private String value;

    ScriptTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ScriptTypeEnum fromValue(String value) {
      for (ScriptTypeEnum b : ScriptTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ScriptTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ScriptTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ScriptTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ScriptTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SCRIPT_TYPE = "scriptType";
  @SerializedName(SERIALIZED_NAME_SCRIPT_TYPE)
  private ScriptTypeEnum scriptType = ScriptTypeEnum.BASH;

  public static final String SERIALIZED_NAME_SCRIPT = "script";
  @SerializedName(SERIALIZED_NAME_SCRIPT)
  private String script;

  public static final String SERIALIZED_NAME_RUN_AS_USER = "runAsUser";
  @SerializedName(SERIALIZED_NAME_RUN_AS_USER)
  private String runAsUser;

  public static final String SERIALIZED_NAME_SUDO_USER = "sudoUser";
  @SerializedName(SERIALIZED_NAME_SUDO_USER)
  private Boolean sudoUser = false;


  public ScriptCreate name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Script name
   * @return name
  **/
  @ApiModelProperty(required = true, value = "Script name")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public ScriptCreate labels(List<String> labels) {
    
    this.labels = labels;
    return this;
  }

  public ScriptCreate addLabelsItem(String labelsItem) {
    if (this.labels == null) {
      this.labels = new ArrayList<String>();
    }
    this.labels.add(labelsItem);
    return this;
  }

   /**
   * Array of label strings, can be used for filtering.
   * @return labels
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Array of label strings, can be used for filtering.")

  public List<String> getLabels() {
    return labels;
  }


  public void setLabels(List<String> labels) {
    this.labels = labels;
  }


  public ScriptCreate category(String category) {
    
    this.category = category;
    return this;
  }

   /**
   * Script category
   * @return category
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Script category")

  public String getCategory() {
    return category;
  }


  public void setCategory(String category) {
    this.category = category;
  }


  public ScriptCreate scriptVersion(String scriptVersion) {
    
    this.scriptVersion = scriptVersion;
    return this;
  }

   /**
   * Version of the script
   * @return scriptVersion
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Version of the script")

  public String getScriptVersion() {
    return scriptVersion;
  }


  public void setScriptVersion(String scriptVersion) {
    this.scriptVersion = scriptVersion;
  }


  public ScriptCreate scriptPhase(String scriptPhase) {
    
    this.scriptPhase = scriptPhase;
    return this;
  }

   /**
   * Phase for the script, provision, start, etc.
   * @return scriptPhase
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Phase for the script, provision, start, etc.")

  public String getScriptPhase() {
    return scriptPhase;
  }


  public void setScriptPhase(String scriptPhase) {
    this.scriptPhase = scriptPhase;
  }


  public ScriptCreate scriptType(ScriptTypeEnum scriptType) {
    
    this.scriptType = scriptType;
    return this;
  }

   /**
   * Type for the script
   * @return scriptType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Type for the script")

  public ScriptTypeEnum getScriptType() {
    return scriptType;
  }


  public void setScriptType(ScriptTypeEnum scriptType) {
    this.scriptType = scriptType;
  }


  public ScriptCreate script(String script) {
    
    this.script = script;
    return this;
  }

   /**
   * Script content, that is, the code itself.
   * @return script
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Script content, that is, the code itself.")

  public String getScript() {
    return script;
  }


  public void setScript(String script) {
    this.script = script;
  }


  public ScriptCreate runAsUser(String runAsUser) {
    
    this.runAsUser = runAsUser;
    return this;
  }

   /**
   * Run as a specific user.
   * @return runAsUser
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Run as a specific user.")

  public String getRunAsUser() {
    return runAsUser;
  }


  public void setRunAsUser(String runAsUser) {
    this.runAsUser = runAsUser;
  }


  public ScriptCreate sudoUser(Boolean sudoUser) {
    
    this.sudoUser = sudoUser;
    return this;
  }

   /**
   * Sudo, whether or not to run with sudo.
   * @return sudoUser
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Sudo, whether or not to run with sudo.")

  public Boolean getSudoUser() {
    return sudoUser;
  }


  public void setSudoUser(Boolean sudoUser) {
    this.sudoUser = sudoUser;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ScriptCreate scriptCreate = (ScriptCreate) o;
    return Objects.equals(this.name, scriptCreate.name) &&
        Objects.equals(this.labels, scriptCreate.labels) &&
        Objects.equals(this.category, scriptCreate.category) &&
        Objects.equals(this.scriptVersion, scriptCreate.scriptVersion) &&
        Objects.equals(this.scriptPhase, scriptCreate.scriptPhase) &&
        Objects.equals(this.scriptType, scriptCreate.scriptType) &&
        Objects.equals(this.script, scriptCreate.script) &&
        Objects.equals(this.runAsUser, scriptCreate.runAsUser) &&
        Objects.equals(this.sudoUser, scriptCreate.sudoUser);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, labels, category, scriptVersion, scriptPhase, scriptType, script, runAsUser, sudoUser);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ScriptCreate {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    scriptVersion: ").append(toIndentedString(scriptVersion)).append("\n");
    sb.append("    scriptPhase: ").append(toIndentedString(scriptPhase)).append("\n");
    sb.append("    scriptType: ").append(toIndentedString(scriptType)).append("\n");
    sb.append("    script: ").append(toIndentedString(script)).append("\n");
    sb.append("    runAsUser: ").append(toIndentedString(runAsUser)).append("\n");
    sb.append("    sudoUser: ").append(toIndentedString(sudoUser)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

