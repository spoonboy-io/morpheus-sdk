/*
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.1.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BudgetStatsCurrent
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-17T13:37:08.123540Z[Etc/UTC]")
public class BudgetStatsCurrent {
  public static final String SERIALIZED_NAME_ESTIMATED_COST = "estimatedCost";
  @SerializedName(SERIALIZED_NAME_ESTIMATED_COST)
  private String estimatedCost;

  public static final String SERIALIZED_NAME_LAST_COST = "lastCost";
  @SerializedName(SERIALIZED_NAME_LAST_COST)
  private String lastCost;

  public BudgetStatsCurrent() {
  }

  public BudgetStatsCurrent estimatedCost(String estimatedCost) {
    
    this.estimatedCost = estimatedCost;
    return this;
  }

   /**
   * Get estimatedCost
   * @return estimatedCost
  **/
  @javax.annotation.Nullable
  public String getEstimatedCost() {
    return estimatedCost;
  }


  public void setEstimatedCost(String estimatedCost) {
    this.estimatedCost = estimatedCost;
  }


  public BudgetStatsCurrent lastCost(String lastCost) {
    
    this.lastCost = lastCost;
    return this;
  }

   /**
   * Get lastCost
   * @return lastCost
  **/
  @javax.annotation.Nullable
  public String getLastCost() {
    return lastCost;
  }


  public void setLastCost(String lastCost) {
    this.lastCost = lastCost;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BudgetStatsCurrent budgetStatsCurrent = (BudgetStatsCurrent) o;
    return Objects.equals(this.estimatedCost, budgetStatsCurrent.estimatedCost) &&
        Objects.equals(this.lastCost, budgetStatsCurrent.lastCost);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(estimatedCost, lastCost);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BudgetStatsCurrent {\n");
    sb.append("    estimatedCost: ").append(toIndentedString(estimatedCost)).append("\n");
    sb.append("    lastCost: ").append(toIndentedString(lastCost)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("estimatedCost");
    openapiFields.add("lastCost");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to BudgetStatsCurrent
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BudgetStatsCurrent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BudgetStatsCurrent is not found in the empty JSON string", BudgetStatsCurrent.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!BudgetStatsCurrent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BudgetStatsCurrent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("estimatedCost") != null && !jsonObj.get("estimatedCost").isJsonNull()) && !jsonObj.get("estimatedCost").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `estimatedCost` to be a primitive type in the JSON string but got `%s`", jsonObj.get("estimatedCost").toString()));
      }
      if ((jsonObj.get("lastCost") != null && !jsonObj.get("lastCost").isJsonNull()) && !jsonObj.get("lastCost").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastCost` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastCost").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BudgetStatsCurrent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BudgetStatsCurrent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BudgetStatsCurrent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BudgetStatsCurrent.class));

       return (TypeAdapter<T>) new TypeAdapter<BudgetStatsCurrent>() {
           @Override
           public void write(JsonWriter out, BudgetStatsCurrent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BudgetStatsCurrent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BudgetStatsCurrent given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BudgetStatsCurrent
  * @throws IOException if the JSON string is invalid with respect to BudgetStatsCurrent
  */
  public static BudgetStatsCurrent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BudgetStatsCurrent.class);
  }

 /**
  * Convert an instance of BudgetStatsCurrent to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

