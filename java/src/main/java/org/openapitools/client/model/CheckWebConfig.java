/*
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * CheckWebConfig
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-21T11:26:47.028Z[GMT]")
public class CheckWebConfig {
  /**
   * HTTP method to use for testing
   */
  @JsonAdapter(WebMethodEnum.Adapter.class)
  public enum WebMethodEnum {
    GET("GET"),
    
    POST("POST");

    private String value;

    WebMethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static WebMethodEnum fromValue(String value) {
      for (WebMethodEnum b : WebMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<WebMethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final WebMethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public WebMethodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return WebMethodEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_WEB_METHOD = "webMethod";
  @SerializedName(SERIALIZED_NAME_WEB_METHOD)
  private WebMethodEnum webMethod;

  public static final String SERIALIZED_NAME_WEB_URL = "webUrl";
  @SerializedName(SERIALIZED_NAME_WEB_URL)
  private String webUrl;

  public static final String SERIALIZED_NAME_IGNORE_S_S_L = "ignoreSSL";
  @SerializedName(SERIALIZED_NAME_IGNORE_S_S_L)
  private Boolean ignoreSSL = false;

  public static final String SERIALIZED_NAME_CHECK_USER = "checkUser";
  @SerializedName(SERIALIZED_NAME_CHECK_USER)
  private String checkUser;

  public static final String SERIALIZED_NAME_CHECK_PASSWORD = "checkPassword";
  @SerializedName(SERIALIZED_NAME_CHECK_PASSWORD)
  private String checkPassword;

  public static final String SERIALIZED_NAME_TEXT_CHECK_ON = "textCheckOn";
  @SerializedName(SERIALIZED_NAME_TEXT_CHECK_ON)
  private String textCheckOn;

  public static final String SERIALIZED_NAME_WEB_TEXT_MATCH = "webTextMatch";
  @SerializedName(SERIALIZED_NAME_WEB_TEXT_MATCH)
  private String webTextMatch;

  /**
   * Set to on to turn on tunneling
   */
  @JsonAdapter(TunnelOnEnum.Adapter.class)
  public enum TunnelOnEnum {
    ON("on"),
    
    OFF("off");

    private String value;

    TunnelOnEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TunnelOnEnum fromValue(String value) {
      for (TunnelOnEnum b : TunnelOnEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TunnelOnEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TunnelOnEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TunnelOnEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TunnelOnEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TUNNEL_ON = "tunnelOn";
  @SerializedName(SERIALIZED_NAME_TUNNEL_ON)
  private TunnelOnEnum tunnelOn;

  public static final String SERIALIZED_NAME_SSH_HOST = "sshHost";
  @SerializedName(SERIALIZED_NAME_SSH_HOST)
  private String sshHost;

  public static final String SERIALIZED_NAME_SSH_PORT = "sshPort";
  @SerializedName(SERIALIZED_NAME_SSH_PORT)
  private Long sshPort;

  public static final String SERIALIZED_NAME_SSH_USER = "sshUser";
  @SerializedName(SERIALIZED_NAME_SSH_USER)
  private String sshUser;

  public static final String SERIALIZED_NAME_SSH_PASSWORD = "sshPassword";
  @SerializedName(SERIALIZED_NAME_SSH_PASSWORD)
  private String sshPassword;


  public CheckWebConfig webMethod(WebMethodEnum webMethod) {
    
    this.webMethod = webMethod;
    return this;
  }

   /**
   * HTTP method to use for testing
   * @return webMethod
  **/
  @ApiModelProperty(required = true, value = "HTTP method to use for testing")

  public WebMethodEnum getWebMethod() {
    return webMethod;
  }


  public void setWebMethod(WebMethodEnum webMethod) {
    this.webMethod = webMethod;
  }


  public CheckWebConfig webUrl(String webUrl) {
    
    this.webUrl = webUrl;
    return this;
  }

   /**
   * Web URL you wish to use to run a check on
   * @return webUrl
  **/
  @ApiModelProperty(example = "https://google.com", required = true, value = "Web URL you wish to use to run a check on")

  public String getWebUrl() {
    return webUrl;
  }


  public void setWebUrl(String webUrl) {
    this.webUrl = webUrl;
  }


  public CheckWebConfig ignoreSSL(Boolean ignoreSSL) {
    
    this.ignoreSSL = ignoreSSL;
    return this;
  }

   /**
   * Ignore SSL Errors
   * @return ignoreSSL
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Ignore SSL Errors")

  public Boolean getIgnoreSSL() {
    return ignoreSSL;
  }


  public void setIgnoreSSL(Boolean ignoreSSL) {
    this.ignoreSSL = ignoreSSL;
  }


  public CheckWebConfig checkUser(String checkUser) {
    
    this.checkUser = checkUser;
    return this;
  }

   /**
   * If you want to use HTTP Basic Authentication, populate this field with the username
   * @return checkUser
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "basicUser", value = "If you want to use HTTP Basic Authentication, populate this field with the username")

  public String getCheckUser() {
    return checkUser;
  }


  public void setCheckUser(String checkUser) {
    this.checkUser = checkUser;
  }


  public CheckWebConfig checkPassword(String checkPassword) {
    
    this.checkPassword = checkPassword;
    return this;
  }

   /**
   * If you want to use HTTP basic Authentication, populate this field with the password
   * @return checkPassword
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "basicPassword", value = "If you want to use HTTP basic Authentication, populate this field with the password")

  public String getCheckPassword() {
    return checkPassword;
  }


  public void setCheckPassword(String checkPassword) {
    this.checkPassword = checkPassword;
  }


  public CheckWebConfig textCheckOn(String textCheckOn) {
    
    this.textCheckOn = textCheckOn;
    return this;
  }

   /**
   * Set value to &#x60;on&#x60; if you want to turn on text matching
   * @return textCheckOn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "on", value = "Set value to `on` if you want to turn on text matching")

  public String getTextCheckOn() {
    return textCheckOn;
  }


  public void setTextCheckOn(String textCheckOn) {
    this.textCheckOn = textCheckOn;
  }


  public CheckWebConfig webTextMatch(String webTextMatch) {
    
    this.webTextMatch = webTextMatch;
    return this;
  }

   /**
   * Set the string you want to look for in the page source
   * @return webTextMatch
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Login", value = "Set the string you want to look for in the page source")

  public String getWebTextMatch() {
    return webTextMatch;
  }


  public void setWebTextMatch(String webTextMatch) {
    this.webTextMatch = webTextMatch;
  }


  public CheckWebConfig tunnelOn(TunnelOnEnum tunnelOn) {
    
    this.tunnelOn = tunnelOn;
    return this;
  }

   /**
   * Set to on to turn on tunneling
   * @return tunnelOn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Set to on to turn on tunneling")

  public TunnelOnEnum getTunnelOn() {
    return tunnelOn;
  }


  public void setTunnelOn(TunnelOnEnum tunnelOn) {
    this.tunnelOn = tunnelOn;
  }


  public CheckWebConfig sshHost(String sshHost) {
    
    this.sshHost = sshHost;
    return this;
  }

   /**
   * Hostname or IP address of the proxy host
   * @return sshHost
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Hostname or IP address of the proxy host")

  public String getSshHost() {
    return sshHost;
  }


  public void setSshHost(String sshHost) {
    this.sshHost = sshHost;
  }


  public CheckWebConfig sshPort(Long sshPort) {
    
    this.sshPort = sshPort;
    return this;
  }

   /**
   * Port for SSH on the proxy host, defaults to 22
   * @return sshPort
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Port for SSH on the proxy host, defaults to 22")

  public Long getSshPort() {
    return sshPort;
  }


  public void setSshPort(Long sshPort) {
    this.sshPort = sshPort;
  }


  public CheckWebConfig sshUser(String sshUser) {
    
    this.sshUser = sshUser;
    return this;
  }

   /**
   * SSH user on the proxy host to login as
   * @return sshUser
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "SSH user on the proxy host to login as")

  public String getSshUser() {
    return sshUser;
  }


  public void setSshUser(String sshUser) {
    this.sshUser = sshUser;
  }


  public CheckWebConfig sshPassword(String sshPassword) {
    
    this.sshPassword = sshPassword;
    return this;
  }

   /**
   * Password for user, if not using key based authentication
   * @return sshPassword
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Password for user, if not using key based authentication")

  public String getSshPassword() {
    return sshPassword;
  }


  public void setSshPassword(String sshPassword) {
    this.sshPassword = sshPassword;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CheckWebConfig checkWebConfig = (CheckWebConfig) o;
    return Objects.equals(this.webMethod, checkWebConfig.webMethod) &&
        Objects.equals(this.webUrl, checkWebConfig.webUrl) &&
        Objects.equals(this.ignoreSSL, checkWebConfig.ignoreSSL) &&
        Objects.equals(this.checkUser, checkWebConfig.checkUser) &&
        Objects.equals(this.checkPassword, checkWebConfig.checkPassword) &&
        Objects.equals(this.textCheckOn, checkWebConfig.textCheckOn) &&
        Objects.equals(this.webTextMatch, checkWebConfig.webTextMatch) &&
        Objects.equals(this.tunnelOn, checkWebConfig.tunnelOn) &&
        Objects.equals(this.sshHost, checkWebConfig.sshHost) &&
        Objects.equals(this.sshPort, checkWebConfig.sshPort) &&
        Objects.equals(this.sshUser, checkWebConfig.sshUser) &&
        Objects.equals(this.sshPassword, checkWebConfig.sshPassword);
  }

  @Override
  public int hashCode() {
    return Objects.hash(webMethod, webUrl, ignoreSSL, checkUser, checkPassword, textCheckOn, webTextMatch, tunnelOn, sshHost, sshPort, sshUser, sshPassword);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CheckWebConfig {\n");
    sb.append("    webMethod: ").append(toIndentedString(webMethod)).append("\n");
    sb.append("    webUrl: ").append(toIndentedString(webUrl)).append("\n");
    sb.append("    ignoreSSL: ").append(toIndentedString(ignoreSSL)).append("\n");
    sb.append("    checkUser: ").append(toIndentedString(checkUser)).append("\n");
    sb.append("    checkPassword: ").append(toIndentedString(checkPassword)).append("\n");
    sb.append("    textCheckOn: ").append(toIndentedString(textCheckOn)).append("\n");
    sb.append("    webTextMatch: ").append(toIndentedString(webTextMatch)).append("\n");
    sb.append("    tunnelOn: ").append(toIndentedString(tunnelOn)).append("\n");
    sb.append("    sshHost: ").append(toIndentedString(sshHost)).append("\n");
    sb.append("    sshPort: ").append(toIndentedString(sshPort)).append("\n");
    sb.append("    sshUser: ").append(toIndentedString(sshUser)).append("\n");
    sb.append("    sshPassword: ").append(toIndentedString(sshPassword)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

