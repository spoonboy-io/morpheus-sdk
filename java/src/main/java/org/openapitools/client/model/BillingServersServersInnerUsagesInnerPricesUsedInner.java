/*
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.1.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BillingServersServersInnerUsagesInnerPricesUsedInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-17T13:37:08.123540Z[Etc/UTC]")
public class BillingServersServersInnerUsagesInnerPricesUsedInner {
  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_PRICE_PER_UNIT = "pricePerUnit";
  @SerializedName(SERIALIZED_NAME_PRICE_PER_UNIT)
  private BigDecimal pricePerUnit;

  public static final String SERIALIZED_NAME_COST_PER_UNIT = "costPerUnit";
  @SerializedName(SERIALIZED_NAME_COST_PER_UNIT)
  private BigDecimal costPerUnit;

  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private BigDecimal quantity;

  public BillingServersServersInnerUsagesInnerPricesUsedInner() {
  }

  public BillingServersServersInnerUsagesInnerPricesUsedInner type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }


  public void setType(String type) {
    this.type = type;
  }


  public BillingServersServersInnerUsagesInnerPricesUsedInner pricePerUnit(BigDecimal pricePerUnit) {
    
    this.pricePerUnit = pricePerUnit;
    return this;
  }

   /**
   * Get pricePerUnit
   * @return pricePerUnit
  **/
  @javax.annotation.Nullable
  public BigDecimal getPricePerUnit() {
    return pricePerUnit;
  }


  public void setPricePerUnit(BigDecimal pricePerUnit) {
    this.pricePerUnit = pricePerUnit;
  }


  public BillingServersServersInnerUsagesInnerPricesUsedInner costPerUnit(BigDecimal costPerUnit) {
    
    this.costPerUnit = costPerUnit;
    return this;
  }

   /**
   * Get costPerUnit
   * @return costPerUnit
  **/
  @javax.annotation.Nullable
  public BigDecimal getCostPerUnit() {
    return costPerUnit;
  }


  public void setCostPerUnit(BigDecimal costPerUnit) {
    this.costPerUnit = costPerUnit;
  }


  public BillingServersServersInnerUsagesInnerPricesUsedInner quantity(BigDecimal quantity) {
    
    this.quantity = quantity;
    return this;
  }

   /**
   * Get quantity
   * @return quantity
  **/
  @javax.annotation.Nullable
  public BigDecimal getQuantity() {
    return quantity;
  }


  public void setQuantity(BigDecimal quantity) {
    this.quantity = quantity;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BillingServersServersInnerUsagesInnerPricesUsedInner billingServersServersInnerUsagesInnerPricesUsedInner = (BillingServersServersInnerUsagesInnerPricesUsedInner) o;
    return Objects.equals(this.type, billingServersServersInnerUsagesInnerPricesUsedInner.type) &&
        Objects.equals(this.pricePerUnit, billingServersServersInnerUsagesInnerPricesUsedInner.pricePerUnit) &&
        Objects.equals(this.costPerUnit, billingServersServersInnerUsagesInnerPricesUsedInner.costPerUnit) &&
        Objects.equals(this.quantity, billingServersServersInnerUsagesInnerPricesUsedInner.quantity);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, pricePerUnit, costPerUnit, quantity);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BillingServersServersInnerUsagesInnerPricesUsedInner {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    pricePerUnit: ").append(toIndentedString(pricePerUnit)).append("\n");
    sb.append("    costPerUnit: ").append(toIndentedString(costPerUnit)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("type");
    openapiFields.add("pricePerUnit");
    openapiFields.add("costPerUnit");
    openapiFields.add("quantity");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to BillingServersServersInnerUsagesInnerPricesUsedInner
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BillingServersServersInnerUsagesInnerPricesUsedInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BillingServersServersInnerUsagesInnerPricesUsedInner is not found in the empty JSON string", BillingServersServersInnerUsagesInnerPricesUsedInner.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!BillingServersServersInnerUsagesInnerPricesUsedInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BillingServersServersInnerUsagesInnerPricesUsedInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BillingServersServersInnerUsagesInnerPricesUsedInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BillingServersServersInnerUsagesInnerPricesUsedInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BillingServersServersInnerUsagesInnerPricesUsedInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BillingServersServersInnerUsagesInnerPricesUsedInner.class));

       return (TypeAdapter<T>) new TypeAdapter<BillingServersServersInnerUsagesInnerPricesUsedInner>() {
           @Override
           public void write(JsonWriter out, BillingServersServersInnerUsagesInnerPricesUsedInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BillingServersServersInnerUsagesInnerPricesUsedInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BillingServersServersInnerUsagesInnerPricesUsedInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BillingServersServersInnerUsagesInnerPricesUsedInner
  * @throws IOException if the JSON string is invalid with respect to BillingServersServersInnerUsagesInnerPricesUsedInner
  */
  public static BillingServersServersInnerUsagesInnerPricesUsedInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BillingServersServersInnerUsagesInnerPricesUsedInner.class);
  }

 /**
  * Convert an instance of BillingServersServersInnerUsagesInnerPricesUsedInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

