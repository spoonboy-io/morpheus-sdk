/*
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.1.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BlueprintARMCreate;
import org.openapitools.client.model.BlueprintARMCreateArm;
import org.openapitools.client.model.BlueprintCFTCreate;
import org.openapitools.client.model.BlueprintCFTCreateCloudFormation;
import org.openapitools.client.model.BlueprintHelmCreate;
import org.openapitools.client.model.BlueprintHelmCreateHelm;
import org.openapitools.client.model.BlueprintKubernetesCreate;
import org.openapitools.client.model.BlueprintKubernetesCreateKubernetes;
import org.openapitools.client.model.BlueprintMorpheusCreate;
import org.openapitools.client.model.BlueprintTerraformCreate;
import org.openapitools.client.model.BlueprintTerraformCreateConfig;
import org.openapitools.client.model.BlueprintTerraformCreateTerraform;
import org.openapitools.jackson.nullable.JsonNullable;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-17T13:37:08.123540Z[Etc/UTC]")
public class AddBlueprintRequest extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(AddBlueprintRequest.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!AddBlueprintRequest.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'AddBlueprintRequest' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<BlueprintARMCreate> adapterBlueprintARMCreate = gson.getDelegateAdapter(this, TypeToken.get(BlueprintARMCreate.class));
            final TypeAdapter<BlueprintCFTCreate> adapterBlueprintCFTCreate = gson.getDelegateAdapter(this, TypeToken.get(BlueprintCFTCreate.class));
            final TypeAdapter<BlueprintHelmCreate> adapterBlueprintHelmCreate = gson.getDelegateAdapter(this, TypeToken.get(BlueprintHelmCreate.class));
            final TypeAdapter<BlueprintKubernetesCreate> adapterBlueprintKubernetesCreate = gson.getDelegateAdapter(this, TypeToken.get(BlueprintKubernetesCreate.class));
            final TypeAdapter<BlueprintMorpheusCreate> adapterBlueprintMorpheusCreate = gson.getDelegateAdapter(this, TypeToken.get(BlueprintMorpheusCreate.class));
            final TypeAdapter<BlueprintTerraformCreate> adapterBlueprintTerraformCreate = gson.getDelegateAdapter(this, TypeToken.get(BlueprintTerraformCreate.class));

            return (TypeAdapter<T>) new TypeAdapter<AddBlueprintRequest>() {
                @Override
                public void write(JsonWriter out, AddBlueprintRequest value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `BlueprintARMCreate`
                    if (value.getActualInstance() instanceof BlueprintARMCreate) {
                      JsonElement element = adapterBlueprintARMCreate.toJsonTree((BlueprintARMCreate)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `BlueprintCFTCreate`
                    if (value.getActualInstance() instanceof BlueprintCFTCreate) {
                      JsonElement element = adapterBlueprintCFTCreate.toJsonTree((BlueprintCFTCreate)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `BlueprintHelmCreate`
                    if (value.getActualInstance() instanceof BlueprintHelmCreate) {
                      JsonElement element = adapterBlueprintHelmCreate.toJsonTree((BlueprintHelmCreate)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `BlueprintKubernetesCreate`
                    if (value.getActualInstance() instanceof BlueprintKubernetesCreate) {
                      JsonElement element = adapterBlueprintKubernetesCreate.toJsonTree((BlueprintKubernetesCreate)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `BlueprintMorpheusCreate`
                    if (value.getActualInstance() instanceof BlueprintMorpheusCreate) {
                      JsonElement element = adapterBlueprintMorpheusCreate.toJsonTree((BlueprintMorpheusCreate)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `BlueprintTerraformCreate`
                    if (value.getActualInstance() instanceof BlueprintTerraformCreate) {
                      JsonElement element = adapterBlueprintTerraformCreate.toJsonTree((BlueprintTerraformCreate)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: BlueprintARMCreate, BlueprintCFTCreate, BlueprintHelmCreate, BlueprintKubernetesCreate, BlueprintMorpheusCreate, BlueprintTerraformCreate");
                }

                @Override
                public AddBlueprintRequest read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize BlueprintARMCreate
                    try {
                      // validate the JSON object to see if any exception is thrown
                      BlueprintARMCreate.validateJsonElement(jsonElement);
                      actualAdapter = adapterBlueprintARMCreate;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'BlueprintARMCreate'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for BlueprintARMCreate failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'BlueprintARMCreate'", e);
                    }
                    // deserialize BlueprintCFTCreate
                    try {
                      // validate the JSON object to see if any exception is thrown
                      BlueprintCFTCreate.validateJsonElement(jsonElement);
                      actualAdapter = adapterBlueprintCFTCreate;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'BlueprintCFTCreate'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for BlueprintCFTCreate failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'BlueprintCFTCreate'", e);
                    }
                    // deserialize BlueprintHelmCreate
                    try {
                      // validate the JSON object to see if any exception is thrown
                      BlueprintHelmCreate.validateJsonElement(jsonElement);
                      actualAdapter = adapterBlueprintHelmCreate;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'BlueprintHelmCreate'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for BlueprintHelmCreate failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'BlueprintHelmCreate'", e);
                    }
                    // deserialize BlueprintKubernetesCreate
                    try {
                      // validate the JSON object to see if any exception is thrown
                      BlueprintKubernetesCreate.validateJsonElement(jsonElement);
                      actualAdapter = adapterBlueprintKubernetesCreate;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'BlueprintKubernetesCreate'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for BlueprintKubernetesCreate failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'BlueprintKubernetesCreate'", e);
                    }
                    // deserialize BlueprintMorpheusCreate
                    try {
                      // validate the JSON object to see if any exception is thrown
                      BlueprintMorpheusCreate.validateJsonElement(jsonElement);
                      actualAdapter = adapterBlueprintMorpheusCreate;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'BlueprintMorpheusCreate'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for BlueprintMorpheusCreate failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'BlueprintMorpheusCreate'", e);
                    }
                    // deserialize BlueprintTerraformCreate
                    try {
                      // validate the JSON object to see if any exception is thrown
                      BlueprintTerraformCreate.validateJsonElement(jsonElement);
                      actualAdapter = adapterBlueprintTerraformCreate;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'BlueprintTerraformCreate'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for BlueprintTerraformCreate failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'BlueprintTerraformCreate'", e);
                    }

                    if (match == 1) {
                        AddBlueprintRequest ret = new AddBlueprintRequest();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for AddBlueprintRequest: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public AddBlueprintRequest() {
        super("oneOf", Boolean.FALSE);
    }

    public AddBlueprintRequest(BlueprintARMCreate o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AddBlueprintRequest(BlueprintCFTCreate o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AddBlueprintRequest(BlueprintHelmCreate o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AddBlueprintRequest(BlueprintKubernetesCreate o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AddBlueprintRequest(BlueprintMorpheusCreate o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AddBlueprintRequest(BlueprintTerraformCreate o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("BlueprintARMCreate", BlueprintARMCreate.class);
        schemas.put("BlueprintCFTCreate", BlueprintCFTCreate.class);
        schemas.put("BlueprintHelmCreate", BlueprintHelmCreate.class);
        schemas.put("BlueprintKubernetesCreate", BlueprintKubernetesCreate.class);
        schemas.put("BlueprintMorpheusCreate", BlueprintMorpheusCreate.class);
        schemas.put("BlueprintTerraformCreate", BlueprintTerraformCreate.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return AddBlueprintRequest.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * BlueprintARMCreate, BlueprintCFTCreate, BlueprintHelmCreate, BlueprintKubernetesCreate, BlueprintMorpheusCreate, BlueprintTerraformCreate
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof BlueprintARMCreate) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof BlueprintCFTCreate) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof BlueprintHelmCreate) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof BlueprintKubernetesCreate) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof BlueprintMorpheusCreate) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof BlueprintTerraformCreate) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be BlueprintARMCreate, BlueprintCFTCreate, BlueprintHelmCreate, BlueprintKubernetesCreate, BlueprintMorpheusCreate, BlueprintTerraformCreate");
    }

    /**
     * Get the actual instance, which can be the following:
     * BlueprintARMCreate, BlueprintCFTCreate, BlueprintHelmCreate, BlueprintKubernetesCreate, BlueprintMorpheusCreate, BlueprintTerraformCreate
     *
     * @return The actual instance (BlueprintARMCreate, BlueprintCFTCreate, BlueprintHelmCreate, BlueprintKubernetesCreate, BlueprintMorpheusCreate, BlueprintTerraformCreate)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `BlueprintARMCreate`. If the actual instance is not `BlueprintARMCreate`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `BlueprintARMCreate`
     * @throws ClassCastException if the instance is not `BlueprintARMCreate`
     */
    public BlueprintARMCreate getBlueprintARMCreate() throws ClassCastException {
        return (BlueprintARMCreate)super.getActualInstance();
    }
    /**
     * Get the actual instance of `BlueprintCFTCreate`. If the actual instance is not `BlueprintCFTCreate`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `BlueprintCFTCreate`
     * @throws ClassCastException if the instance is not `BlueprintCFTCreate`
     */
    public BlueprintCFTCreate getBlueprintCFTCreate() throws ClassCastException {
        return (BlueprintCFTCreate)super.getActualInstance();
    }
    /**
     * Get the actual instance of `BlueprintHelmCreate`. If the actual instance is not `BlueprintHelmCreate`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `BlueprintHelmCreate`
     * @throws ClassCastException if the instance is not `BlueprintHelmCreate`
     */
    public BlueprintHelmCreate getBlueprintHelmCreate() throws ClassCastException {
        return (BlueprintHelmCreate)super.getActualInstance();
    }
    /**
     * Get the actual instance of `BlueprintKubernetesCreate`. If the actual instance is not `BlueprintKubernetesCreate`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `BlueprintKubernetesCreate`
     * @throws ClassCastException if the instance is not `BlueprintKubernetesCreate`
     */
    public BlueprintKubernetesCreate getBlueprintKubernetesCreate() throws ClassCastException {
        return (BlueprintKubernetesCreate)super.getActualInstance();
    }
    /**
     * Get the actual instance of `BlueprintMorpheusCreate`. If the actual instance is not `BlueprintMorpheusCreate`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `BlueprintMorpheusCreate`
     * @throws ClassCastException if the instance is not `BlueprintMorpheusCreate`
     */
    public BlueprintMorpheusCreate getBlueprintMorpheusCreate() throws ClassCastException {
        return (BlueprintMorpheusCreate)super.getActualInstance();
    }
    /**
     * Get the actual instance of `BlueprintTerraformCreate`. If the actual instance is not `BlueprintTerraformCreate`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `BlueprintTerraformCreate`
     * @throws ClassCastException if the instance is not `BlueprintTerraformCreate`
     */
    public BlueprintTerraformCreate getBlueprintTerraformCreate() throws ClassCastException {
        return (BlueprintTerraformCreate)super.getActualInstance();
    }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to AddBlueprintRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    // validate oneOf schemas one by one
    int validCount = 0;
    ArrayList<String> errorMessages = new ArrayList<>();
    // validate the json string with BlueprintARMCreate
    try {
      BlueprintARMCreate.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for BlueprintARMCreate failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with BlueprintCFTCreate
    try {
      BlueprintCFTCreate.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for BlueprintCFTCreate failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with BlueprintHelmCreate
    try {
      BlueprintHelmCreate.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for BlueprintHelmCreate failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with BlueprintKubernetesCreate
    try {
      BlueprintKubernetesCreate.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for BlueprintKubernetesCreate failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with BlueprintMorpheusCreate
    try {
      BlueprintMorpheusCreate.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for BlueprintMorpheusCreate failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with BlueprintTerraformCreate
    try {
      BlueprintTerraformCreate.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for BlueprintTerraformCreate failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    if (validCount != 1) {
      throw new IOException(String.format("The JSON string is invalid for AddBlueprintRequest with oneOf schemas: BlueprintARMCreate, BlueprintCFTCreate, BlueprintHelmCreate, BlueprintKubernetesCreate, BlueprintMorpheusCreate, BlueprintTerraformCreate. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
    }
  }

 /**
  * Create an instance of AddBlueprintRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AddBlueprintRequest
  * @throws IOException if the JSON string is invalid with respect to AddBlueprintRequest
  */
  public static AddBlueprintRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AddBlueprintRequest.class);
  }

 /**
  * Convert an instance of AddBlueprintRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

