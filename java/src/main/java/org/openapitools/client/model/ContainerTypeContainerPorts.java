/*
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * ContainerTypeContainerPorts
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-21T11:26:47.028Z[GMT]")
public class ContainerTypeContainerPorts {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PORT = "port";
  @SerializedName(SERIALIZED_NAME_PORT)
  private Long port;

  public static final String SERIALIZED_NAME_LOAD_BALANCE_PROTOCOL = "loadBalanceProtocol";
  @SerializedName(SERIALIZED_NAME_LOAD_BALANCE_PROTOCOL)
  private String loadBalanceProtocol;


  public ContainerTypeContainerPorts name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public ContainerTypeContainerPorts port(Long port) {
    
    this.port = port;
    return this;
  }

   /**
   * Get port
   * @return port
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Long getPort() {
    return port;
  }


  public void setPort(Long port) {
    this.port = port;
  }


  public ContainerTypeContainerPorts loadBalanceProtocol(String loadBalanceProtocol) {
    
    this.loadBalanceProtocol = loadBalanceProtocol;
    return this;
  }

   /**
   * Get loadBalanceProtocol
   * @return loadBalanceProtocol
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLoadBalanceProtocol() {
    return loadBalanceProtocol;
  }


  public void setLoadBalanceProtocol(String loadBalanceProtocol) {
    this.loadBalanceProtocol = loadBalanceProtocol;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContainerTypeContainerPorts containerTypeContainerPorts = (ContainerTypeContainerPorts) o;
    return Objects.equals(this.name, containerTypeContainerPorts.name) &&
        Objects.equals(this.port, containerTypeContainerPorts.port) &&
        Objects.equals(this.loadBalanceProtocol, containerTypeContainerPorts.loadBalanceProtocol);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, port, loadBalanceProtocol);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContainerTypeContainerPorts {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    loadBalanceProtocol: ").append(toIndentedString(loadBalanceProtocol)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

