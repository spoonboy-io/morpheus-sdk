/*
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.1.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AppStateInput;
import org.openapitools.client.model.AppStateOutput;
import org.openapitools.client.model.AppStateSpecsInner;
import org.openapitools.client.model.AppStateWorkloadsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetAppState200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-17T13:37:08.123540Z[Etc/UTC]")
public class GetAppState200Response {
  public static final String SERIALIZED_NAME_WORKLOADS = "workloads";
  @SerializedName(SERIALIZED_NAME_WORKLOADS)
  private List<AppStateWorkloadsInner> workloads;

  public static final String SERIALIZED_NAME_IAC_DRIFT = "iacDrift";
  @SerializedName(SERIALIZED_NAME_IAC_DRIFT)
  private Boolean iacDrift;

  public static final String SERIALIZED_NAME_PLAN_RESOURCES = "planResources";
  @SerializedName(SERIALIZED_NAME_PLAN_RESOURCES)
  private List<Object> planResources;

  public static final String SERIALIZED_NAME_SPECS = "specs";
  @SerializedName(SERIALIZED_NAME_SPECS)
  private List<AppStateSpecsInner> specs;

  public static final String SERIALIZED_NAME_STATE_DATA = "stateData";
  @SerializedName(SERIALIZED_NAME_STATE_DATA)
  private String stateData;

  public static final String SERIALIZED_NAME_PLAN_DATA = "planData";
  @SerializedName(SERIALIZED_NAME_PLAN_DATA)
  private String planData;

  public static final String SERIALIZED_NAME_INPUT = "input";
  @SerializedName(SERIALIZED_NAME_INPUT)
  private AppStateInput input;

  public static final String SERIALIZED_NAME_OUTPUT = "output";
  @SerializedName(SERIALIZED_NAME_OUTPUT)
  private AppStateOutput output;

  public static final String SERIALIZED_NAME_SUCCESS = "success";
  @SerializedName(SERIALIZED_NAME_SUCCESS)
  private Boolean success;

  public GetAppState200Response() {
  }

  public GetAppState200Response workloads(List<AppStateWorkloadsInner> workloads) {
    
    this.workloads = workloads;
    return this;
  }

  public GetAppState200Response addWorkloadsItem(AppStateWorkloadsInner workloadsItem) {
    if (this.workloads == null) {
      this.workloads = new ArrayList<>();
    }
    this.workloads.add(workloadsItem);
    return this;
  }

   /**
   * Get workloads
   * @return workloads
  **/
  @javax.annotation.Nullable
  public List<AppStateWorkloadsInner> getWorkloads() {
    return workloads;
  }


  public void setWorkloads(List<AppStateWorkloadsInner> workloads) {
    this.workloads = workloads;
  }


  public GetAppState200Response iacDrift(Boolean iacDrift) {
    
    this.iacDrift = iacDrift;
    return this;
  }

   /**
   * Get iacDrift
   * @return iacDrift
  **/
  @javax.annotation.Nullable
  public Boolean getIacDrift() {
    return iacDrift;
  }


  public void setIacDrift(Boolean iacDrift) {
    this.iacDrift = iacDrift;
  }


  public GetAppState200Response planResources(List<Object> planResources) {
    
    this.planResources = planResources;
    return this;
  }

  public GetAppState200Response addPlanResourcesItem(Object planResourcesItem) {
    if (this.planResources == null) {
      this.planResources = new ArrayList<>();
    }
    this.planResources.add(planResourcesItem);
    return this;
  }

   /**
   * Get planResources
   * @return planResources
  **/
  @javax.annotation.Nullable
  public List<Object> getPlanResources() {
    return planResources;
  }


  public void setPlanResources(List<Object> planResources) {
    this.planResources = planResources;
  }


  public GetAppState200Response specs(List<AppStateSpecsInner> specs) {
    
    this.specs = specs;
    return this;
  }

  public GetAppState200Response addSpecsItem(AppStateSpecsInner specsItem) {
    if (this.specs == null) {
      this.specs = new ArrayList<>();
    }
    this.specs.add(specsItem);
    return this;
  }

   /**
   * Get specs
   * @return specs
  **/
  @javax.annotation.Nullable
  public List<AppStateSpecsInner> getSpecs() {
    return specs;
  }


  public void setSpecs(List<AppStateSpecsInner> specs) {
    this.specs = specs;
  }


  public GetAppState200Response stateData(String stateData) {
    
    this.stateData = stateData;
    return this;
  }

   /**
   * Get stateData
   * @return stateData
  **/
  @javax.annotation.Nullable
  public String getStateData() {
    return stateData;
  }


  public void setStateData(String stateData) {
    this.stateData = stateData;
  }


  public GetAppState200Response planData(String planData) {
    
    this.planData = planData;
    return this;
  }

   /**
   * Get planData
   * @return planData
  **/
  @javax.annotation.Nullable
  public String getPlanData() {
    return planData;
  }


  public void setPlanData(String planData) {
    this.planData = planData;
  }


  public GetAppState200Response input(AppStateInput input) {
    
    this.input = input;
    return this;
  }

   /**
   * Get input
   * @return input
  **/
  @javax.annotation.Nullable
  public AppStateInput getInput() {
    return input;
  }


  public void setInput(AppStateInput input) {
    this.input = input;
  }


  public GetAppState200Response output(AppStateOutput output) {
    
    this.output = output;
    return this;
  }

   /**
   * Get output
   * @return output
  **/
  @javax.annotation.Nullable
  public AppStateOutput getOutput() {
    return output;
  }


  public void setOutput(AppStateOutput output) {
    this.output = output;
  }


  public GetAppState200Response success(Boolean success) {
    
    this.success = success;
    return this;
  }

   /**
   * Get success
   * @return success
  **/
  @javax.annotation.Nullable
  public Boolean getSuccess() {
    return success;
  }


  public void setSuccess(Boolean success) {
    this.success = success;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetAppState200Response getAppState200Response = (GetAppState200Response) o;
    return Objects.equals(this.workloads, getAppState200Response.workloads) &&
        Objects.equals(this.iacDrift, getAppState200Response.iacDrift) &&
        Objects.equals(this.planResources, getAppState200Response.planResources) &&
        Objects.equals(this.specs, getAppState200Response.specs) &&
        Objects.equals(this.stateData, getAppState200Response.stateData) &&
        Objects.equals(this.planData, getAppState200Response.planData) &&
        Objects.equals(this.input, getAppState200Response.input) &&
        Objects.equals(this.output, getAppState200Response.output) &&
        Objects.equals(this.success, getAppState200Response.success);
  }

  @Override
  public int hashCode() {
    return Objects.hash(workloads, iacDrift, planResources, specs, stateData, planData, input, output, success);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetAppState200Response {\n");
    sb.append("    workloads: ").append(toIndentedString(workloads)).append("\n");
    sb.append("    iacDrift: ").append(toIndentedString(iacDrift)).append("\n");
    sb.append("    planResources: ").append(toIndentedString(planResources)).append("\n");
    sb.append("    specs: ").append(toIndentedString(specs)).append("\n");
    sb.append("    stateData: ").append(toIndentedString(stateData)).append("\n");
    sb.append("    planData: ").append(toIndentedString(planData)).append("\n");
    sb.append("    input: ").append(toIndentedString(input)).append("\n");
    sb.append("    output: ").append(toIndentedString(output)).append("\n");
    sb.append("    success: ").append(toIndentedString(success)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("workloads");
    openapiFields.add("iacDrift");
    openapiFields.add("planResources");
    openapiFields.add("specs");
    openapiFields.add("stateData");
    openapiFields.add("planData");
    openapiFields.add("input");
    openapiFields.add("output");
    openapiFields.add("success");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to GetAppState200Response
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetAppState200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetAppState200Response is not found in the empty JSON string", GetAppState200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!GetAppState200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetAppState200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("workloads") != null && !jsonObj.get("workloads").isJsonNull()) {
        JsonArray jsonArrayworkloads = jsonObj.getAsJsonArray("workloads");
        if (jsonArrayworkloads != null) {
          // ensure the json data is an array
          if (!jsonObj.get("workloads").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `workloads` to be an array in the JSON string but got `%s`", jsonObj.get("workloads").toString()));
          }

          // validate the optional field `workloads` (array)
          for (int i = 0; i < jsonArrayworkloads.size(); i++) {
            AppStateWorkloadsInner.validateJsonElement(jsonArrayworkloads.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("planResources") != null && !jsonObj.get("planResources").isJsonNull() && !jsonObj.get("planResources").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `planResources` to be an array in the JSON string but got `%s`", jsonObj.get("planResources").toString()));
      }
      if (jsonObj.get("specs") != null && !jsonObj.get("specs").isJsonNull()) {
        JsonArray jsonArrayspecs = jsonObj.getAsJsonArray("specs");
        if (jsonArrayspecs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("specs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `specs` to be an array in the JSON string but got `%s`", jsonObj.get("specs").toString()));
          }

          // validate the optional field `specs` (array)
          for (int i = 0; i < jsonArrayspecs.size(); i++) {
            AppStateSpecsInner.validateJsonElement(jsonArrayspecs.get(i));
          };
        }
      }
      if ((jsonObj.get("stateData") != null && !jsonObj.get("stateData").isJsonNull()) && !jsonObj.get("stateData").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stateData` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stateData").toString()));
      }
      if ((jsonObj.get("planData") != null && !jsonObj.get("planData").isJsonNull()) && !jsonObj.get("planData").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `planData` to be a primitive type in the JSON string but got `%s`", jsonObj.get("planData").toString()));
      }
      // validate the optional field `input`
      if (jsonObj.get("input") != null && !jsonObj.get("input").isJsonNull()) {
        AppStateInput.validateJsonElement(jsonObj.get("input"));
      }
      // validate the optional field `output`
      if (jsonObj.get("output") != null && !jsonObj.get("output").isJsonNull()) {
        AppStateOutput.validateJsonElement(jsonObj.get("output"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetAppState200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetAppState200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetAppState200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetAppState200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<GetAppState200Response>() {
           @Override
           public void write(JsonWriter out, GetAppState200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetAppState200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GetAppState200Response given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GetAppState200Response
  * @throws IOException if the JSON string is invalid with respect to GetAppState200Response
  */
  public static GetAppState200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetAppState200Response.class);
  }

 /**
  * Convert an instance of GetAppState200Response to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

