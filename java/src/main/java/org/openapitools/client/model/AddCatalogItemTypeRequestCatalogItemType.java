/*
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.1.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CatalogItemTypeBlueprintCreate;
import org.openapitools.client.model.CatalogItemTypeBlueprintCreateBlueprint;
import org.openapitools.client.model.CatalogItemTypeInstanceCreate;
import org.openapitools.client.model.CatalogItemTypeWorkflowCreate;
import org.openapitools.client.model.UpdateBlueprintPermissionsRequestResourcePermissionSitesInner;
import org.openapitools.jackson.nullable.JsonNullable;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-17T13:37:08.123540Z[Etc/UTC]")
public class AddCatalogItemTypeRequestCatalogItemType extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(AddCatalogItemTypeRequestCatalogItemType.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!AddCatalogItemTypeRequestCatalogItemType.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'AddCatalogItemTypeRequestCatalogItemType' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<CatalogItemTypeInstanceCreate> adapterCatalogItemTypeInstanceCreate = gson.getDelegateAdapter(this, TypeToken.get(CatalogItemTypeInstanceCreate.class));
            final TypeAdapter<CatalogItemTypeBlueprintCreate> adapterCatalogItemTypeBlueprintCreate = gson.getDelegateAdapter(this, TypeToken.get(CatalogItemTypeBlueprintCreate.class));
            final TypeAdapter<CatalogItemTypeWorkflowCreate> adapterCatalogItemTypeWorkflowCreate = gson.getDelegateAdapter(this, TypeToken.get(CatalogItemTypeWorkflowCreate.class));

            return (TypeAdapter<T>) new TypeAdapter<AddCatalogItemTypeRequestCatalogItemType>() {
                @Override
                public void write(JsonWriter out, AddCatalogItemTypeRequestCatalogItemType value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `CatalogItemTypeInstanceCreate`
                    if (value.getActualInstance() instanceof CatalogItemTypeInstanceCreate) {
                      JsonElement element = adapterCatalogItemTypeInstanceCreate.toJsonTree((CatalogItemTypeInstanceCreate)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `CatalogItemTypeBlueprintCreate`
                    if (value.getActualInstance() instanceof CatalogItemTypeBlueprintCreate) {
                      JsonElement element = adapterCatalogItemTypeBlueprintCreate.toJsonTree((CatalogItemTypeBlueprintCreate)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `CatalogItemTypeWorkflowCreate`
                    if (value.getActualInstance() instanceof CatalogItemTypeWorkflowCreate) {
                      JsonElement element = adapterCatalogItemTypeWorkflowCreate.toJsonTree((CatalogItemTypeWorkflowCreate)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: CatalogItemTypeBlueprintCreate, CatalogItemTypeInstanceCreate, CatalogItemTypeWorkflowCreate");
                }

                @Override
                public AddCatalogItemTypeRequestCatalogItemType read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize CatalogItemTypeInstanceCreate
                    try {
                      // validate the JSON object to see if any exception is thrown
                      CatalogItemTypeInstanceCreate.validateJsonElement(jsonElement);
                      actualAdapter = adapterCatalogItemTypeInstanceCreate;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'CatalogItemTypeInstanceCreate'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for CatalogItemTypeInstanceCreate failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'CatalogItemTypeInstanceCreate'", e);
                    }
                    // deserialize CatalogItemTypeBlueprintCreate
                    try {
                      // validate the JSON object to see if any exception is thrown
                      CatalogItemTypeBlueprintCreate.validateJsonElement(jsonElement);
                      actualAdapter = adapterCatalogItemTypeBlueprintCreate;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'CatalogItemTypeBlueprintCreate'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for CatalogItemTypeBlueprintCreate failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'CatalogItemTypeBlueprintCreate'", e);
                    }
                    // deserialize CatalogItemTypeWorkflowCreate
                    try {
                      // validate the JSON object to see if any exception is thrown
                      CatalogItemTypeWorkflowCreate.validateJsonElement(jsonElement);
                      actualAdapter = adapterCatalogItemTypeWorkflowCreate;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'CatalogItemTypeWorkflowCreate'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for CatalogItemTypeWorkflowCreate failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'CatalogItemTypeWorkflowCreate'", e);
                    }

                    if (match == 1) {
                        AddCatalogItemTypeRequestCatalogItemType ret = new AddCatalogItemTypeRequestCatalogItemType();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for AddCatalogItemTypeRequestCatalogItemType: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public AddCatalogItemTypeRequestCatalogItemType() {
        super("oneOf", Boolean.FALSE);
    }

    public AddCatalogItemTypeRequestCatalogItemType(CatalogItemTypeBlueprintCreate o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AddCatalogItemTypeRequestCatalogItemType(CatalogItemTypeInstanceCreate o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AddCatalogItemTypeRequestCatalogItemType(CatalogItemTypeWorkflowCreate o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("CatalogItemTypeInstanceCreate", CatalogItemTypeInstanceCreate.class);
        schemas.put("CatalogItemTypeBlueprintCreate", CatalogItemTypeBlueprintCreate.class);
        schemas.put("CatalogItemTypeWorkflowCreate", CatalogItemTypeWorkflowCreate.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return AddCatalogItemTypeRequestCatalogItemType.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * CatalogItemTypeBlueprintCreate, CatalogItemTypeInstanceCreate, CatalogItemTypeWorkflowCreate
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof CatalogItemTypeInstanceCreate) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CatalogItemTypeBlueprintCreate) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CatalogItemTypeWorkflowCreate) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be CatalogItemTypeBlueprintCreate, CatalogItemTypeInstanceCreate, CatalogItemTypeWorkflowCreate");
    }

    /**
     * Get the actual instance, which can be the following:
     * CatalogItemTypeBlueprintCreate, CatalogItemTypeInstanceCreate, CatalogItemTypeWorkflowCreate
     *
     * @return The actual instance (CatalogItemTypeBlueprintCreate, CatalogItemTypeInstanceCreate, CatalogItemTypeWorkflowCreate)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `CatalogItemTypeInstanceCreate`. If the actual instance is not `CatalogItemTypeInstanceCreate`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CatalogItemTypeInstanceCreate`
     * @throws ClassCastException if the instance is not `CatalogItemTypeInstanceCreate`
     */
    public CatalogItemTypeInstanceCreate getCatalogItemTypeInstanceCreate() throws ClassCastException {
        return (CatalogItemTypeInstanceCreate)super.getActualInstance();
    }
    /**
     * Get the actual instance of `CatalogItemTypeBlueprintCreate`. If the actual instance is not `CatalogItemTypeBlueprintCreate`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CatalogItemTypeBlueprintCreate`
     * @throws ClassCastException if the instance is not `CatalogItemTypeBlueprintCreate`
     */
    public CatalogItemTypeBlueprintCreate getCatalogItemTypeBlueprintCreate() throws ClassCastException {
        return (CatalogItemTypeBlueprintCreate)super.getActualInstance();
    }
    /**
     * Get the actual instance of `CatalogItemTypeWorkflowCreate`. If the actual instance is not `CatalogItemTypeWorkflowCreate`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CatalogItemTypeWorkflowCreate`
     * @throws ClassCastException if the instance is not `CatalogItemTypeWorkflowCreate`
     */
    public CatalogItemTypeWorkflowCreate getCatalogItemTypeWorkflowCreate() throws ClassCastException {
        return (CatalogItemTypeWorkflowCreate)super.getActualInstance();
    }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to AddCatalogItemTypeRequestCatalogItemType
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    // validate oneOf schemas one by one
    int validCount = 0;
    ArrayList<String> errorMessages = new ArrayList<>();
    // validate the json string with CatalogItemTypeInstanceCreate
    try {
      CatalogItemTypeInstanceCreate.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for CatalogItemTypeInstanceCreate failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with CatalogItemTypeBlueprintCreate
    try {
      CatalogItemTypeBlueprintCreate.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for CatalogItemTypeBlueprintCreate failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with CatalogItemTypeWorkflowCreate
    try {
      CatalogItemTypeWorkflowCreate.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for CatalogItemTypeWorkflowCreate failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    if (validCount != 1) {
      throw new IOException(String.format("The JSON string is invalid for AddCatalogItemTypeRequestCatalogItemType with oneOf schemas: CatalogItemTypeBlueprintCreate, CatalogItemTypeInstanceCreate, CatalogItemTypeWorkflowCreate. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
    }
  }

 /**
  * Create an instance of AddCatalogItemTypeRequestCatalogItemType given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AddCatalogItemTypeRequestCatalogItemType
  * @throws IOException if the JSON string is invalid with respect to AddCatalogItemTypeRequestCatalogItemType
  */
  public static AddCatalogItemTypeRequestCatalogItemType fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AddCatalogItemTypeRequestCatalogItemType.class);
  }

 /**
  * Convert an instance of AddCatalogItemTypeRequestCatalogItemType to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

