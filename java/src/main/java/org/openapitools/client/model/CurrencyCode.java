/*
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import io.swagger.annotations.ApiModel;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Currency Code (ISO 4217)
 */
@JsonAdapter(CurrencyCode.Adapter.class)
public enum CurrencyCode {
  
  AUD("AUD"),
  
  BGN("BGN"),
  
  BRL("BRL"),
  
  CAD("CAD"),
  
  CHF("CHF"),
  
  CLF("CLF"),
  
  CLP("CLP"),
  
  CNY("CNY"),
  
  CZK("CZK"),
  
  DKK("DKK"),
  
  EUR("EUR"),
  
  GBP("GBP"),
  
  HKD("HKD"),
  
  HRK("HRK"),
  
  HUF("HUF"),
  
  IDR("IDR"),
  
  ILS("ILS"),
  
  INR("INR"),
  
  JPY("JPY"),
  
  KRW("KRW"),
  
  MXN("MXN"),
  
  MYR("MYR"),
  
  NOK("NOK"),
  
  NZD("NZD"),
  
  PHP("PHP"),
  
  PLN("PLN"),
  
  RON("RON"),
  
  RUB("RUB"),
  
  SEK("SEK"),
  
  SGD("SGD"),
  
  THB("THB"),
  
  TRY("TRY"),
  
  USD("USD"),
  
  ZAR("ZAR");

  private String value;

  CurrencyCode(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static CurrencyCode fromValue(String value) {
    for (CurrencyCode b : CurrencyCode.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<CurrencyCode> {
    @Override
    public void write(final JsonWriter jsonWriter, final CurrencyCode enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public CurrencyCode read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return CurrencyCode.fromValue(value);
    }
  }
}

