/*
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.client.model.CheckSqlCheckType;
import org.openapitools.client.model.CheckSqlConfig;

/**
 * SQL Server check allows to execute a query so that you may validate the value returned in addition to verifying the database is responding.  This can be useful for doing a slow query check or just making sure something isn&#39;t growing out of control. 
 */
@ApiModel(description = "SQL Server check allows to execute a query so that you may validate the value returned in addition to verifying the database is responding.  This can be useful for doing a slow query check or just making sure something isn't growing out of control. ")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-21T11:26:47.028Z[GMT]")
public class CheckSql {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_CHECK_TYPE = "checkType";
  @SerializedName(SERIALIZED_NAME_CHECK_TYPE)
  private CheckSqlCheckType checkType;

  public static final String SERIALIZED_NAME_CHECK_INTERVAL = "checkInterval";
  @SerializedName(SERIALIZED_NAME_CHECK_INTERVAL)
  private Integer checkInterval = 300;

  public static final String SERIALIZED_NAME_IN_UPTIME = "inUptime";
  @SerializedName(SERIALIZED_NAME_IN_UPTIME)
  private Boolean inUptime = true;

  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private Boolean active = true;

  /**
   * Severity level threshold for sending notifications.
   */
  @JsonAdapter(SeverityEnum.Adapter.class)
  public enum SeverityEnum {
    INFO("info"),
    
    WARNING("warning"),
    
    CRITICAL("critical");

    private String value;

    SeverityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SeverityEnum fromValue(String value) {
      for (SeverityEnum b : SeverityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SeverityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SeverityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SeverityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SeverityEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SEVERITY = "severity";
  @SerializedName(SERIALIZED_NAME_SEVERITY)
  private SeverityEnum severity = SeverityEnum.CRITICAL;

  public static final String SERIALIZED_NAME_CONFIG = "config";
  @SerializedName(SERIALIZED_NAME_CONFIG)
  private CheckSqlConfig config = null;


  public CheckSql name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Unique name scoped to your account for the check
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "My Check", value = "Unique name scoped to your account for the check")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public CheckSql description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Optional description field
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "This is my awesome check", value = "Optional description field")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public CheckSql checkType(CheckSqlCheckType checkType) {
    
    this.checkType = checkType;
    return this;
  }

   /**
   * Get checkType
   * @return checkType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CheckSqlCheckType getCheckType() {
    return checkType;
  }


  public void setCheckType(CheckSqlCheckType checkType) {
    this.checkType = checkType;
  }


  public CheckSql checkInterval(Integer checkInterval) {
    
    this.checkInterval = checkInterval;
    return this;
  }

   /**
   * Number of seconds you want between check executions (minimum value is 60, depending on your subscription plan)
   * @return checkInterval
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Number of seconds you want between check executions (minimum value is 60, depending on your subscription plan)")

  public Integer getCheckInterval() {
    return checkInterval;
  }


  public void setCheckInterval(Integer checkInterval) {
    this.checkInterval = checkInterval;
  }


  public CheckSql inUptime(Boolean inUptime) {
    
    this.inUptime = inUptime;
    return this;
  }

   /**
   * Used to determine if check should affect account wide availability calculations
   * @return inUptime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Used to determine if check should affect account wide availability calculations")

  public Boolean getInUptime() {
    return inUptime;
  }


  public void setInUptime(Boolean inUptime) {
    this.inUptime = inUptime;
  }


  public CheckSql active(Boolean active) {
    
    this.active = active;
    return this;
  }

   /**
   * Used to determine if check should be scheduled to execute
   * @return active
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Used to determine if check should be scheduled to execute")

  public Boolean getActive() {
    return active;
  }


  public void setActive(Boolean active) {
    this.active = active;
  }


  public CheckSql severity(SeverityEnum severity) {
    
    this.severity = severity;
    return this;
  }

   /**
   * Severity level threshold for sending notifications.
   * @return severity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Severity level threshold for sending notifications.")

  public SeverityEnum getSeverity() {
    return severity;
  }


  public void setSeverity(SeverityEnum severity) {
    this.severity = severity;
  }


  public CheckSql config(CheckSqlConfig config) {
    
    this.config = config;
    return this;
  }

   /**
   * Get config
   * @return config
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CheckSqlConfig getConfig() {
    return config;
  }


  public void setConfig(CheckSqlConfig config) {
    this.config = config;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CheckSql checkSql = (CheckSql) o;
    return Objects.equals(this.name, checkSql.name) &&
        Objects.equals(this.description, checkSql.description) &&
        Objects.equals(this.checkType, checkSql.checkType) &&
        Objects.equals(this.checkInterval, checkSql.checkInterval) &&
        Objects.equals(this.inUptime, checkSql.inUptime) &&
        Objects.equals(this.active, checkSql.active) &&
        Objects.equals(this.severity, checkSql.severity) &&
        Objects.equals(this.config, checkSql.config);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, description, checkType, checkInterval, inUptime, active, severity, config);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CheckSql {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    checkType: ").append(toIndentedString(checkType)).append("\n");
    sb.append("    checkInterval: ").append(toIndentedString(checkInterval)).append("\n");
    sb.append("    inUptime: ").append(toIndentedString(inUptime)).append("\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    severity: ").append(toIndentedString(severity)).append("\n");
    sb.append("    config: ").append(toIndentedString(config)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

