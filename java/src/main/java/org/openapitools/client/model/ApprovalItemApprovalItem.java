/*
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.1.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import org.openapitools.client.model.ApprovalItemApprovalItemReference;
import org.openapitools.client.model.UpdateBlueprintPermissionsRequestResourcePermissionSitesInner;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ApprovalItemApprovalItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-17T13:37:08.123540Z[Etc/UTC]")
public class ApprovalItemApprovalItem {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_EXTERNAL_ID = "externalId";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_ID)
  private String externalId;

  public static final String SERIALIZED_NAME_EXTERNAL_NAME = "externalName";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_NAME)
  private String externalName;

  public static final String SERIALIZED_NAME_INTERNAL_ID = "internalId";
  @SerializedName(SERIALIZED_NAME_INTERNAL_ID)
  private String internalId;

  public static final String SERIALIZED_NAME_APPROVED_BY = "approvedBy";
  @SerializedName(SERIALIZED_NAME_APPROVED_BY)
  private String approvedBy;

  public static final String SERIALIZED_NAME_DENIED_BY = "deniedBy";
  @SerializedName(SERIALIZED_NAME_DENIED_BY)
  private String deniedBy;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_ERROR_MESSAGE = "errorMessage";
  @SerializedName(SERIALIZED_NAME_ERROR_MESSAGE)
  private String errorMessage;

  public static final String SERIALIZED_NAME_DATE_CREATED = "dateCreated";
  @SerializedName(SERIALIZED_NAME_DATE_CREATED)
  private OffsetDateTime dateCreated;

  public static final String SERIALIZED_NAME_LAST_UPDATED = "lastUpdated";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED)
  private OffsetDateTime lastUpdated;

  public static final String SERIALIZED_NAME_DATE_APPROVED = "dateApproved";
  @SerializedName(SERIALIZED_NAME_DATE_APPROVED)
  private OffsetDateTime dateApproved;

  public static final String SERIALIZED_NAME_DATE_DENIED = "dateDenied";
  @SerializedName(SERIALIZED_NAME_DATE_DENIED)
  private OffsetDateTime dateDenied;

  public static final String SERIALIZED_NAME_APPROVAL = "approval";
  @SerializedName(SERIALIZED_NAME_APPROVAL)
  private UpdateBlueprintPermissionsRequestResourcePermissionSitesInner approval;

  public static final String SERIALIZED_NAME_REFERENCE = "reference";
  @SerializedName(SERIALIZED_NAME_REFERENCE)
  private ApprovalItemApprovalItemReference reference;

  public ApprovalItemApprovalItem() {
  }

  public ApprovalItemApprovalItem id(Long id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  public Long getId() {
    return id;
  }


  public void setId(Long id) {
    this.id = id;
  }


  public ApprovalItemApprovalItem name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public ApprovalItemApprovalItem externalId(String externalId) {
    
    this.externalId = externalId;
    return this;
  }

   /**
   * Get externalId
   * @return externalId
  **/
  @javax.annotation.Nullable
  public String getExternalId() {
    return externalId;
  }


  public void setExternalId(String externalId) {
    this.externalId = externalId;
  }


  public ApprovalItemApprovalItem externalName(String externalName) {
    
    this.externalName = externalName;
    return this;
  }

   /**
   * Get externalName
   * @return externalName
  **/
  @javax.annotation.Nullable
  public String getExternalName() {
    return externalName;
  }


  public void setExternalName(String externalName) {
    this.externalName = externalName;
  }


  public ApprovalItemApprovalItem internalId(String internalId) {
    
    this.internalId = internalId;
    return this;
  }

   /**
   * Get internalId
   * @return internalId
  **/
  @javax.annotation.Nullable
  public String getInternalId() {
    return internalId;
  }


  public void setInternalId(String internalId) {
    this.internalId = internalId;
  }


  public ApprovalItemApprovalItem approvedBy(String approvedBy) {
    
    this.approvedBy = approvedBy;
    return this;
  }

   /**
   * Get approvedBy
   * @return approvedBy
  **/
  @javax.annotation.Nullable
  public String getApprovedBy() {
    return approvedBy;
  }


  public void setApprovedBy(String approvedBy) {
    this.approvedBy = approvedBy;
  }


  public ApprovalItemApprovalItem deniedBy(String deniedBy) {
    
    this.deniedBy = deniedBy;
    return this;
  }

   /**
   * Get deniedBy
   * @return deniedBy
  **/
  @javax.annotation.Nullable
  public String getDeniedBy() {
    return deniedBy;
  }


  public void setDeniedBy(String deniedBy) {
    this.deniedBy = deniedBy;
  }


  public ApprovalItemApprovalItem status(String status) {
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }


  public void setStatus(String status) {
    this.status = status;
  }


  public ApprovalItemApprovalItem errorMessage(String errorMessage) {
    
    this.errorMessage = errorMessage;
    return this;
  }

   /**
   * Get errorMessage
   * @return errorMessage
  **/
  @javax.annotation.Nullable
  public String getErrorMessage() {
    return errorMessage;
  }


  public void setErrorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
  }


  public ApprovalItemApprovalItem dateCreated(OffsetDateTime dateCreated) {
    
    this.dateCreated = dateCreated;
    return this;
  }

   /**
   * Get dateCreated
   * @return dateCreated
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getDateCreated() {
    return dateCreated;
  }


  public void setDateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
  }


  public ApprovalItemApprovalItem lastUpdated(OffsetDateTime lastUpdated) {
    
    this.lastUpdated = lastUpdated;
    return this;
  }

   /**
   * Get lastUpdated
   * @return lastUpdated
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdated() {
    return lastUpdated;
  }


  public void setLastUpdated(OffsetDateTime lastUpdated) {
    this.lastUpdated = lastUpdated;
  }


  public ApprovalItemApprovalItem dateApproved(OffsetDateTime dateApproved) {
    
    this.dateApproved = dateApproved;
    return this;
  }

   /**
   * Get dateApproved
   * @return dateApproved
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getDateApproved() {
    return dateApproved;
  }


  public void setDateApproved(OffsetDateTime dateApproved) {
    this.dateApproved = dateApproved;
  }


  public ApprovalItemApprovalItem dateDenied(OffsetDateTime dateDenied) {
    
    this.dateDenied = dateDenied;
    return this;
  }

   /**
   * Get dateDenied
   * @return dateDenied
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getDateDenied() {
    return dateDenied;
  }


  public void setDateDenied(OffsetDateTime dateDenied) {
    this.dateDenied = dateDenied;
  }


  public ApprovalItemApprovalItem approval(UpdateBlueprintPermissionsRequestResourcePermissionSitesInner approval) {
    
    this.approval = approval;
    return this;
  }

   /**
   * Get approval
   * @return approval
  **/
  @javax.annotation.Nullable
  public UpdateBlueprintPermissionsRequestResourcePermissionSitesInner getApproval() {
    return approval;
  }


  public void setApproval(UpdateBlueprintPermissionsRequestResourcePermissionSitesInner approval) {
    this.approval = approval;
  }


  public ApprovalItemApprovalItem reference(ApprovalItemApprovalItemReference reference) {
    
    this.reference = reference;
    return this;
  }

   /**
   * Get reference
   * @return reference
  **/
  @javax.annotation.Nullable
  public ApprovalItemApprovalItemReference getReference() {
    return reference;
  }


  public void setReference(ApprovalItemApprovalItemReference reference) {
    this.reference = reference;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApprovalItemApprovalItem approvalItemApprovalItem = (ApprovalItemApprovalItem) o;
    return Objects.equals(this.id, approvalItemApprovalItem.id) &&
        Objects.equals(this.name, approvalItemApprovalItem.name) &&
        Objects.equals(this.externalId, approvalItemApprovalItem.externalId) &&
        Objects.equals(this.externalName, approvalItemApprovalItem.externalName) &&
        Objects.equals(this.internalId, approvalItemApprovalItem.internalId) &&
        Objects.equals(this.approvedBy, approvalItemApprovalItem.approvedBy) &&
        Objects.equals(this.deniedBy, approvalItemApprovalItem.deniedBy) &&
        Objects.equals(this.status, approvalItemApprovalItem.status) &&
        Objects.equals(this.errorMessage, approvalItemApprovalItem.errorMessage) &&
        Objects.equals(this.dateCreated, approvalItemApprovalItem.dateCreated) &&
        Objects.equals(this.lastUpdated, approvalItemApprovalItem.lastUpdated) &&
        Objects.equals(this.dateApproved, approvalItemApprovalItem.dateApproved) &&
        Objects.equals(this.dateDenied, approvalItemApprovalItem.dateDenied) &&
        Objects.equals(this.approval, approvalItemApprovalItem.approval) &&
        Objects.equals(this.reference, approvalItemApprovalItem.reference);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, externalId, externalName, internalId, approvedBy, deniedBy, status, errorMessage, dateCreated, lastUpdated, dateApproved, dateDenied, approval, reference);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApprovalItemApprovalItem {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    externalId: ").append(toIndentedString(externalId)).append("\n");
    sb.append("    externalName: ").append(toIndentedString(externalName)).append("\n");
    sb.append("    internalId: ").append(toIndentedString(internalId)).append("\n");
    sb.append("    approvedBy: ").append(toIndentedString(approvedBy)).append("\n");
    sb.append("    deniedBy: ").append(toIndentedString(deniedBy)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    errorMessage: ").append(toIndentedString(errorMessage)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
    sb.append("    dateApproved: ").append(toIndentedString(dateApproved)).append("\n");
    sb.append("    dateDenied: ").append(toIndentedString(dateDenied)).append("\n");
    sb.append("    approval: ").append(toIndentedString(approval)).append("\n");
    sb.append("    reference: ").append(toIndentedString(reference)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("externalId");
    openapiFields.add("externalName");
    openapiFields.add("internalId");
    openapiFields.add("approvedBy");
    openapiFields.add("deniedBy");
    openapiFields.add("status");
    openapiFields.add("errorMessage");
    openapiFields.add("dateCreated");
    openapiFields.add("lastUpdated");
    openapiFields.add("dateApproved");
    openapiFields.add("dateDenied");
    openapiFields.add("approval");
    openapiFields.add("reference");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ApprovalItemApprovalItem
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApprovalItemApprovalItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApprovalItemApprovalItem is not found in the empty JSON string", ApprovalItemApprovalItem.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ApprovalItemApprovalItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApprovalItemApprovalItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("externalId") != null && !jsonObj.get("externalId").isJsonNull()) && !jsonObj.get("externalId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalId").toString()));
      }
      if ((jsonObj.get("externalName") != null && !jsonObj.get("externalName").isJsonNull()) && !jsonObj.get("externalName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalName").toString()));
      }
      if ((jsonObj.get("internalId") != null && !jsonObj.get("internalId").isJsonNull()) && !jsonObj.get("internalId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `internalId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("internalId").toString()));
      }
      if ((jsonObj.get("approvedBy") != null && !jsonObj.get("approvedBy").isJsonNull()) && !jsonObj.get("approvedBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `approvedBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("approvedBy").toString()));
      }
      if ((jsonObj.get("deniedBy") != null && !jsonObj.get("deniedBy").isJsonNull()) && !jsonObj.get("deniedBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deniedBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deniedBy").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("errorMessage") != null && !jsonObj.get("errorMessage").isJsonNull()) && !jsonObj.get("errorMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `errorMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("errorMessage").toString()));
      }
      // validate the optional field `approval`
      if (jsonObj.get("approval") != null && !jsonObj.get("approval").isJsonNull()) {
        UpdateBlueprintPermissionsRequestResourcePermissionSitesInner.validateJsonElement(jsonObj.get("approval"));
      }
      // validate the optional field `reference`
      if (jsonObj.get("reference") != null && !jsonObj.get("reference").isJsonNull()) {
        ApprovalItemApprovalItemReference.validateJsonElement(jsonObj.get("reference"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApprovalItemApprovalItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApprovalItemApprovalItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApprovalItemApprovalItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApprovalItemApprovalItem.class));

       return (TypeAdapter<T>) new TypeAdapter<ApprovalItemApprovalItem>() {
           @Override
           public void write(JsonWriter out, ApprovalItemApprovalItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApprovalItemApprovalItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ApprovalItemApprovalItem given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ApprovalItemApprovalItem
  * @throws IOException if the JSON string is invalid with respect to ApprovalItemApprovalItem
  */
  public static ApprovalItemApprovalItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApprovalItemApprovalItem.class);
  }

 /**
  * Convert an instance of ApprovalItemApprovalItem to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

