/*
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.1.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Client
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-17T13:37:08.123540Z[Etc/UTC]")
public class Client {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_CLIENT_ID = "clientId";
  @SerializedName(SERIALIZED_NAME_CLIENT_ID)
  private String clientId;

  public static final String SERIALIZED_NAME_ACCESS_TOKEN_VALIDITY_SECONDS = "accessTokenValiditySeconds";
  @SerializedName(SERIALIZED_NAME_ACCESS_TOKEN_VALIDITY_SECONDS)
  private Long accessTokenValiditySeconds;

  public static final String SERIALIZED_NAME_REFRESH_TOKEN_VALIDITY_SECONDS = "refreshTokenValiditySeconds";
  @SerializedName(SERIALIZED_NAME_REFRESH_TOKEN_VALIDITY_SECONDS)
  private Long refreshTokenValiditySeconds;

  public static final String SERIALIZED_NAME_AUTHORITIES = "authorities";
  @SerializedName(SERIALIZED_NAME_AUTHORITIES)
  private List<String> authorities;

  public static final String SERIALIZED_NAME_AUTHORIZED_GRANT_TYPES = "authorizedGrantTypes";
  @SerializedName(SERIALIZED_NAME_AUTHORIZED_GRANT_TYPES)
  private List<String> authorizedGrantTypes;

  public static final String SERIALIZED_NAME_SCOPES = "scopes";
  @SerializedName(SERIALIZED_NAME_SCOPES)
  private List<String> scopes;

  public Client() {
  }

  public Client id(Long id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  public Long getId() {
    return id;
  }


  public void setId(Long id) {
    this.id = id;
  }


  public Client clientId(String clientId) {
    
    this.clientId = clientId;
    return this;
  }

   /**
   * Get clientId
   * @return clientId
  **/
  @javax.annotation.Nullable
  public String getClientId() {
    return clientId;
  }


  public void setClientId(String clientId) {
    this.clientId = clientId;
  }


  public Client accessTokenValiditySeconds(Long accessTokenValiditySeconds) {
    
    this.accessTokenValiditySeconds = accessTokenValiditySeconds;
    return this;
  }

   /**
   * Get accessTokenValiditySeconds
   * @return accessTokenValiditySeconds
  **/
  @javax.annotation.Nullable
  public Long getAccessTokenValiditySeconds() {
    return accessTokenValiditySeconds;
  }


  public void setAccessTokenValiditySeconds(Long accessTokenValiditySeconds) {
    this.accessTokenValiditySeconds = accessTokenValiditySeconds;
  }


  public Client refreshTokenValiditySeconds(Long refreshTokenValiditySeconds) {
    
    this.refreshTokenValiditySeconds = refreshTokenValiditySeconds;
    return this;
  }

   /**
   * Get refreshTokenValiditySeconds
   * @return refreshTokenValiditySeconds
  **/
  @javax.annotation.Nullable
  public Long getRefreshTokenValiditySeconds() {
    return refreshTokenValiditySeconds;
  }


  public void setRefreshTokenValiditySeconds(Long refreshTokenValiditySeconds) {
    this.refreshTokenValiditySeconds = refreshTokenValiditySeconds;
  }


  public Client authorities(List<String> authorities) {
    
    this.authorities = authorities;
    return this;
  }

  public Client addAuthoritiesItem(String authoritiesItem) {
    if (this.authorities == null) {
      this.authorities = new ArrayList<>();
    }
    this.authorities.add(authoritiesItem);
    return this;
  }

   /**
   * Get authorities
   * @return authorities
  **/
  @javax.annotation.Nullable
  public List<String> getAuthorities() {
    return authorities;
  }


  public void setAuthorities(List<String> authorities) {
    this.authorities = authorities;
  }


  public Client authorizedGrantTypes(List<String> authorizedGrantTypes) {
    
    this.authorizedGrantTypes = authorizedGrantTypes;
    return this;
  }

  public Client addAuthorizedGrantTypesItem(String authorizedGrantTypesItem) {
    if (this.authorizedGrantTypes == null) {
      this.authorizedGrantTypes = new ArrayList<>();
    }
    this.authorizedGrantTypes.add(authorizedGrantTypesItem);
    return this;
  }

   /**
   * Get authorizedGrantTypes
   * @return authorizedGrantTypes
  **/
  @javax.annotation.Nullable
  public List<String> getAuthorizedGrantTypes() {
    return authorizedGrantTypes;
  }


  public void setAuthorizedGrantTypes(List<String> authorizedGrantTypes) {
    this.authorizedGrantTypes = authorizedGrantTypes;
  }


  public Client scopes(List<String> scopes) {
    
    this.scopes = scopes;
    return this;
  }

  public Client addScopesItem(String scopesItem) {
    if (this.scopes == null) {
      this.scopes = new ArrayList<>();
    }
    this.scopes.add(scopesItem);
    return this;
  }

   /**
   * Get scopes
   * @return scopes
  **/
  @javax.annotation.Nullable
  public List<String> getScopes() {
    return scopes;
  }


  public void setScopes(List<String> scopes) {
    this.scopes = scopes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Client client = (Client) o;
    return Objects.equals(this.id, client.id) &&
        Objects.equals(this.clientId, client.clientId) &&
        Objects.equals(this.accessTokenValiditySeconds, client.accessTokenValiditySeconds) &&
        Objects.equals(this.refreshTokenValiditySeconds, client.refreshTokenValiditySeconds) &&
        Objects.equals(this.authorities, client.authorities) &&
        Objects.equals(this.authorizedGrantTypes, client.authorizedGrantTypes) &&
        Objects.equals(this.scopes, client.scopes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, clientId, accessTokenValiditySeconds, refreshTokenValiditySeconds, authorities, authorizedGrantTypes, scopes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Client {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    accessTokenValiditySeconds: ").append(toIndentedString(accessTokenValiditySeconds)).append("\n");
    sb.append("    refreshTokenValiditySeconds: ").append(toIndentedString(refreshTokenValiditySeconds)).append("\n");
    sb.append("    authorities: ").append(toIndentedString(authorities)).append("\n");
    sb.append("    authorizedGrantTypes: ").append(toIndentedString(authorizedGrantTypes)).append("\n");
    sb.append("    scopes: ").append(toIndentedString(scopes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("clientId");
    openapiFields.add("accessTokenValiditySeconds");
    openapiFields.add("refreshTokenValiditySeconds");
    openapiFields.add("authorities");
    openapiFields.add("authorizedGrantTypes");
    openapiFields.add("scopes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Client
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Client.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Client is not found in the empty JSON string", Client.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Client.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Client` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("clientId") != null && !jsonObj.get("clientId").isJsonNull()) && !jsonObj.get("clientId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("authorities") != null && !jsonObj.get("authorities").isJsonNull() && !jsonObj.get("authorities").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `authorities` to be an array in the JSON string but got `%s`", jsonObj.get("authorities").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("authorizedGrantTypes") != null && !jsonObj.get("authorizedGrantTypes").isJsonNull() && !jsonObj.get("authorizedGrantTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `authorizedGrantTypes` to be an array in the JSON string but got `%s`", jsonObj.get("authorizedGrantTypes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("scopes") != null && !jsonObj.get("scopes").isJsonNull() && !jsonObj.get("scopes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `scopes` to be an array in the JSON string but got `%s`", jsonObj.get("scopes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Client.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Client' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Client> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Client.class));

       return (TypeAdapter<T>) new TypeAdapter<Client>() {
           @Override
           public void write(JsonWriter out, Client value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Client read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Client given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Client
  * @throws IOException if the JSON string is invalid with respect to Client
  */
  public static Client fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Client.class);
  }

 /**
  * Convert an instance of Client to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

