/*
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.1.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ApplianceSettingsEnabledZoneTypesInner;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Budgets
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-17T13:37:08.123540Z[Etc/UTC]")
public class Budgets {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ACCOUNT = "account";
  @SerializedName(SERIALIZED_NAME_ACCOUNT)
  private ApplianceSettingsEnabledZoneTypesInner account;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_REF_SCOPE = "refScope";
  @SerializedName(SERIALIZED_NAME_REF_SCOPE)
  private String refScope;

  public static final String SERIALIZED_NAME_REF_TYPE = "refType";
  @SerializedName(SERIALIZED_NAME_REF_TYPE)
  private String refType;

  public static final String SERIALIZED_NAME_REF_ID = "refId";
  @SerializedName(SERIALIZED_NAME_REF_ID)
  private Long refId;

  public static final String SERIALIZED_NAME_REF_NAME = "refName";
  @SerializedName(SERIALIZED_NAME_REF_NAME)
  private String refName;

  public static final String SERIALIZED_NAME_PERIOD = "period";
  @SerializedName(SERIALIZED_NAME_PERIOD)
  private String period;

  public static final String SERIALIZED_NAME_YEAR = "year";
  @SerializedName(SERIALIZED_NAME_YEAR)
  private String year;

  public static final String SERIALIZED_NAME_RESOURCE_TYPE = "resourceType";
  @SerializedName(SERIALIZED_NAME_RESOURCE_TYPE)
  private String resourceType;

  public static final String SERIALIZED_NAME_TIMEZONE = "timezone";
  @SerializedName(SERIALIZED_NAME_TIMEZONE)
  private String timezone;

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private OffsetDateTime startDate;

  public static final String SERIALIZED_NAME_END_DATE = "endDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private OffsetDateTime endDate;

  public static final String SERIALIZED_NAME_INTERVAL = "interval";
  @SerializedName(SERIALIZED_NAME_INTERVAL)
  private String interval;

  public static final String SERIALIZED_NAME_COSTS = "costs";
  @SerializedName(SERIALIZED_NAME_COSTS)
  private List<Long> costs;

  public static final String SERIALIZED_NAME_IS_FISCAL = "isFiscal";
  @SerializedName(SERIALIZED_NAME_IS_FISCAL)
  private Boolean isFiscal;

  public static final String SERIALIZED_NAME_AVERAGE_COST = "averageCost";
  @SerializedName(SERIALIZED_NAME_AVERAGE_COST)
  private Long averageCost;

  public static final String SERIALIZED_NAME_TOTAL_COST = "totalCost";
  @SerializedName(SERIALIZED_NAME_TOTAL_COST)
  private Long totalCost;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_ROLLOVER = "rollover";
  @SerializedName(SERIALIZED_NAME_ROLLOVER)
  private Boolean rollover;

  public static final String SERIALIZED_NAME_WARNING_LIMIT = "warningLimit";
  @SerializedName(SERIALIZED_NAME_WARNING_LIMIT)
  private String warningLimit;

  public static final String SERIALIZED_NAME_OVER_LIMIT = "overLimit";
  @SerializedName(SERIALIZED_NAME_OVER_LIMIT)
  private String overLimit;

  public static final String SERIALIZED_NAME_EXTERNAL_ID = "externalId";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_ID)
  private String externalId;

  public static final String SERIALIZED_NAME_INTERNAL_ID = "internalId";
  @SerializedName(SERIALIZED_NAME_INTERNAL_ID)
  private String internalId;

  public static final String SERIALIZED_NAME_CREATED_BY_ID = "createdById";
  @SerializedName(SERIALIZED_NAME_CREATED_BY_ID)
  private Long createdById;

  public static final String SERIALIZED_NAME_CREATED_BY_NAME = "createdByName";
  @SerializedName(SERIALIZED_NAME_CREATED_BY_NAME)
  private String createdByName;

  public static final String SERIALIZED_NAME_UPDATED_BY_ID = "updatedById";
  @SerializedName(SERIALIZED_NAME_UPDATED_BY_ID)
  private String updatedById;

  public static final String SERIALIZED_NAME_UPDATED_BY_NAME = "updatedByName";
  @SerializedName(SERIALIZED_NAME_UPDATED_BY_NAME)
  private String updatedByName;

  public static final String SERIALIZED_NAME_DATE_CREATED = "dateCreated";
  @SerializedName(SERIALIZED_NAME_DATE_CREATED)
  private OffsetDateTime dateCreated;

  public static final String SERIALIZED_NAME_LAST_UPDATED = "lastUpdated";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED)
  private OffsetDateTime lastUpdated;

  public Budgets() {
  }

  public Budgets id(Long id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  public Long getId() {
    return id;
  }


  public void setId(Long id) {
    this.id = id;
  }


  public Budgets name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public Budgets description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public Budgets account(ApplianceSettingsEnabledZoneTypesInner account) {
    
    this.account = account;
    return this;
  }

   /**
   * Get account
   * @return account
  **/
  @javax.annotation.Nullable
  public ApplianceSettingsEnabledZoneTypesInner getAccount() {
    return account;
  }


  public void setAccount(ApplianceSettingsEnabledZoneTypesInner account) {
    this.account = account;
  }


  public Budgets enabled(Boolean enabled) {
    
    this.enabled = enabled;
    return this;
  }

   /**
   * Get enabled
   * @return enabled
  **/
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }


  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public Budgets refScope(String refScope) {
    
    this.refScope = refScope;
    return this;
  }

   /**
   * Get refScope
   * @return refScope
  **/
  @javax.annotation.Nullable
  public String getRefScope() {
    return refScope;
  }


  public void setRefScope(String refScope) {
    this.refScope = refScope;
  }


  public Budgets refType(String refType) {
    
    this.refType = refType;
    return this;
  }

   /**
   * Get refType
   * @return refType
  **/
  @javax.annotation.Nullable
  public String getRefType() {
    return refType;
  }


  public void setRefType(String refType) {
    this.refType = refType;
  }


  public Budgets refId(Long refId) {
    
    this.refId = refId;
    return this;
  }

   /**
   * Get refId
   * @return refId
  **/
  @javax.annotation.Nullable
  public Long getRefId() {
    return refId;
  }


  public void setRefId(Long refId) {
    this.refId = refId;
  }


  public Budgets refName(String refName) {
    
    this.refName = refName;
    return this;
  }

   /**
   * Get refName
   * @return refName
  **/
  @javax.annotation.Nullable
  public String getRefName() {
    return refName;
  }


  public void setRefName(String refName) {
    this.refName = refName;
  }


  public Budgets period(String period) {
    
    this.period = period;
    return this;
  }

   /**
   * Get period
   * @return period
  **/
  @javax.annotation.Nullable
  public String getPeriod() {
    return period;
  }


  public void setPeriod(String period) {
    this.period = period;
  }


  public Budgets year(String year) {
    
    this.year = year;
    return this;
  }

   /**
   * Get year
   * @return year
  **/
  @javax.annotation.Nullable
  public String getYear() {
    return year;
  }


  public void setYear(String year) {
    this.year = year;
  }


  public Budgets resourceType(String resourceType) {
    
    this.resourceType = resourceType;
    return this;
  }

   /**
   * Get resourceType
   * @return resourceType
  **/
  @javax.annotation.Nullable
  public String getResourceType() {
    return resourceType;
  }


  public void setResourceType(String resourceType) {
    this.resourceType = resourceType;
  }


  public Budgets timezone(String timezone) {
    
    this.timezone = timezone;
    return this;
  }

   /**
   * Get timezone
   * @return timezone
  **/
  @javax.annotation.Nullable
  public String getTimezone() {
    return timezone;
  }


  public void setTimezone(String timezone) {
    this.timezone = timezone;
  }


  public Budgets startDate(OffsetDateTime startDate) {
    
    this.startDate = startDate;
    return this;
  }

   /**
   * Get startDate
   * @return startDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getStartDate() {
    return startDate;
  }


  public void setStartDate(OffsetDateTime startDate) {
    this.startDate = startDate;
  }


  public Budgets endDate(OffsetDateTime endDate) {
    
    this.endDate = endDate;
    return this;
  }

   /**
   * Get endDate
   * @return endDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getEndDate() {
    return endDate;
  }


  public void setEndDate(OffsetDateTime endDate) {
    this.endDate = endDate;
  }


  public Budgets interval(String interval) {
    
    this.interval = interval;
    return this;
  }

   /**
   * Get interval
   * @return interval
  **/
  @javax.annotation.Nullable
  public String getInterval() {
    return interval;
  }


  public void setInterval(String interval) {
    this.interval = interval;
  }


  public Budgets costs(List<Long> costs) {
    
    this.costs = costs;
    return this;
  }

  public Budgets addCostsItem(Long costsItem) {
    if (this.costs == null) {
      this.costs = new ArrayList<>();
    }
    this.costs.add(costsItem);
    return this;
  }

   /**
   * Get costs
   * @return costs
  **/
  @javax.annotation.Nullable
  public List<Long> getCosts() {
    return costs;
  }


  public void setCosts(List<Long> costs) {
    this.costs = costs;
  }


  public Budgets isFiscal(Boolean isFiscal) {
    
    this.isFiscal = isFiscal;
    return this;
  }

   /**
   * Get isFiscal
   * @return isFiscal
  **/
  @javax.annotation.Nullable
  public Boolean getIsFiscal() {
    return isFiscal;
  }


  public void setIsFiscal(Boolean isFiscal) {
    this.isFiscal = isFiscal;
  }


  public Budgets averageCost(Long averageCost) {
    
    this.averageCost = averageCost;
    return this;
  }

   /**
   * Get averageCost
   * @return averageCost
  **/
  @javax.annotation.Nullable
  public Long getAverageCost() {
    return averageCost;
  }


  public void setAverageCost(Long averageCost) {
    this.averageCost = averageCost;
  }


  public Budgets totalCost(Long totalCost) {
    
    this.totalCost = totalCost;
    return this;
  }

   /**
   * Get totalCost
   * @return totalCost
  **/
  @javax.annotation.Nullable
  public Long getTotalCost() {
    return totalCost;
  }


  public void setTotalCost(Long totalCost) {
    this.totalCost = totalCost;
  }


  public Budgets currency(String currency) {
    
    this.currency = currency;
    return this;
  }

   /**
   * Get currency
   * @return currency
  **/
  @javax.annotation.Nullable
  public String getCurrency() {
    return currency;
  }


  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public Budgets rollover(Boolean rollover) {
    
    this.rollover = rollover;
    return this;
  }

   /**
   * Get rollover
   * @return rollover
  **/
  @javax.annotation.Nullable
  public Boolean getRollover() {
    return rollover;
  }


  public void setRollover(Boolean rollover) {
    this.rollover = rollover;
  }


  public Budgets warningLimit(String warningLimit) {
    
    this.warningLimit = warningLimit;
    return this;
  }

   /**
   * Get warningLimit
   * @return warningLimit
  **/
  @javax.annotation.Nullable
  public String getWarningLimit() {
    return warningLimit;
  }


  public void setWarningLimit(String warningLimit) {
    this.warningLimit = warningLimit;
  }


  public Budgets overLimit(String overLimit) {
    
    this.overLimit = overLimit;
    return this;
  }

   /**
   * Get overLimit
   * @return overLimit
  **/
  @javax.annotation.Nullable
  public String getOverLimit() {
    return overLimit;
  }


  public void setOverLimit(String overLimit) {
    this.overLimit = overLimit;
  }


  public Budgets externalId(String externalId) {
    
    this.externalId = externalId;
    return this;
  }

   /**
   * Get externalId
   * @return externalId
  **/
  @javax.annotation.Nullable
  public String getExternalId() {
    return externalId;
  }


  public void setExternalId(String externalId) {
    this.externalId = externalId;
  }


  public Budgets internalId(String internalId) {
    
    this.internalId = internalId;
    return this;
  }

   /**
   * Get internalId
   * @return internalId
  **/
  @javax.annotation.Nullable
  public String getInternalId() {
    return internalId;
  }


  public void setInternalId(String internalId) {
    this.internalId = internalId;
  }


  public Budgets createdById(Long createdById) {
    
    this.createdById = createdById;
    return this;
  }

   /**
   * Get createdById
   * @return createdById
  **/
  @javax.annotation.Nullable
  public Long getCreatedById() {
    return createdById;
  }


  public void setCreatedById(Long createdById) {
    this.createdById = createdById;
  }


  public Budgets createdByName(String createdByName) {
    
    this.createdByName = createdByName;
    return this;
  }

   /**
   * Get createdByName
   * @return createdByName
  **/
  @javax.annotation.Nullable
  public String getCreatedByName() {
    return createdByName;
  }


  public void setCreatedByName(String createdByName) {
    this.createdByName = createdByName;
  }


  public Budgets updatedById(String updatedById) {
    
    this.updatedById = updatedById;
    return this;
  }

   /**
   * Get updatedById
   * @return updatedById
  **/
  @javax.annotation.Nullable
  public String getUpdatedById() {
    return updatedById;
  }


  public void setUpdatedById(String updatedById) {
    this.updatedById = updatedById;
  }


  public Budgets updatedByName(String updatedByName) {
    
    this.updatedByName = updatedByName;
    return this;
  }

   /**
   * Get updatedByName
   * @return updatedByName
  **/
  @javax.annotation.Nullable
  public String getUpdatedByName() {
    return updatedByName;
  }


  public void setUpdatedByName(String updatedByName) {
    this.updatedByName = updatedByName;
  }


  public Budgets dateCreated(OffsetDateTime dateCreated) {
    
    this.dateCreated = dateCreated;
    return this;
  }

   /**
   * Get dateCreated
   * @return dateCreated
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getDateCreated() {
    return dateCreated;
  }


  public void setDateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
  }


  public Budgets lastUpdated(OffsetDateTime lastUpdated) {
    
    this.lastUpdated = lastUpdated;
    return this;
  }

   /**
   * Get lastUpdated
   * @return lastUpdated
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdated() {
    return lastUpdated;
  }


  public void setLastUpdated(OffsetDateTime lastUpdated) {
    this.lastUpdated = lastUpdated;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Budgets budgets = (Budgets) o;
    return Objects.equals(this.id, budgets.id) &&
        Objects.equals(this.name, budgets.name) &&
        Objects.equals(this.description, budgets.description) &&
        Objects.equals(this.account, budgets.account) &&
        Objects.equals(this.enabled, budgets.enabled) &&
        Objects.equals(this.refScope, budgets.refScope) &&
        Objects.equals(this.refType, budgets.refType) &&
        Objects.equals(this.refId, budgets.refId) &&
        Objects.equals(this.refName, budgets.refName) &&
        Objects.equals(this.period, budgets.period) &&
        Objects.equals(this.year, budgets.year) &&
        Objects.equals(this.resourceType, budgets.resourceType) &&
        Objects.equals(this.timezone, budgets.timezone) &&
        Objects.equals(this.startDate, budgets.startDate) &&
        Objects.equals(this.endDate, budgets.endDate) &&
        Objects.equals(this.interval, budgets.interval) &&
        Objects.equals(this.costs, budgets.costs) &&
        Objects.equals(this.isFiscal, budgets.isFiscal) &&
        Objects.equals(this.averageCost, budgets.averageCost) &&
        Objects.equals(this.totalCost, budgets.totalCost) &&
        Objects.equals(this.currency, budgets.currency) &&
        Objects.equals(this.rollover, budgets.rollover) &&
        Objects.equals(this.warningLimit, budgets.warningLimit) &&
        Objects.equals(this.overLimit, budgets.overLimit) &&
        Objects.equals(this.externalId, budgets.externalId) &&
        Objects.equals(this.internalId, budgets.internalId) &&
        Objects.equals(this.createdById, budgets.createdById) &&
        Objects.equals(this.createdByName, budgets.createdByName) &&
        Objects.equals(this.updatedById, budgets.updatedById) &&
        Objects.equals(this.updatedByName, budgets.updatedByName) &&
        Objects.equals(this.dateCreated, budgets.dateCreated) &&
        Objects.equals(this.lastUpdated, budgets.lastUpdated);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, description, account, enabled, refScope, refType, refId, refName, period, year, resourceType, timezone, startDate, endDate, interval, costs, isFiscal, averageCost, totalCost, currency, rollover, warningLimit, overLimit, externalId, internalId, createdById, createdByName, updatedById, updatedByName, dateCreated, lastUpdated);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Budgets {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    account: ").append(toIndentedString(account)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    refScope: ").append(toIndentedString(refScope)).append("\n");
    sb.append("    refType: ").append(toIndentedString(refType)).append("\n");
    sb.append("    refId: ").append(toIndentedString(refId)).append("\n");
    sb.append("    refName: ").append(toIndentedString(refName)).append("\n");
    sb.append("    period: ").append(toIndentedString(period)).append("\n");
    sb.append("    year: ").append(toIndentedString(year)).append("\n");
    sb.append("    resourceType: ").append(toIndentedString(resourceType)).append("\n");
    sb.append("    timezone: ").append(toIndentedString(timezone)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    interval: ").append(toIndentedString(interval)).append("\n");
    sb.append("    costs: ").append(toIndentedString(costs)).append("\n");
    sb.append("    isFiscal: ").append(toIndentedString(isFiscal)).append("\n");
    sb.append("    averageCost: ").append(toIndentedString(averageCost)).append("\n");
    sb.append("    totalCost: ").append(toIndentedString(totalCost)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    rollover: ").append(toIndentedString(rollover)).append("\n");
    sb.append("    warningLimit: ").append(toIndentedString(warningLimit)).append("\n");
    sb.append("    overLimit: ").append(toIndentedString(overLimit)).append("\n");
    sb.append("    externalId: ").append(toIndentedString(externalId)).append("\n");
    sb.append("    internalId: ").append(toIndentedString(internalId)).append("\n");
    sb.append("    createdById: ").append(toIndentedString(createdById)).append("\n");
    sb.append("    createdByName: ").append(toIndentedString(createdByName)).append("\n");
    sb.append("    updatedById: ").append(toIndentedString(updatedById)).append("\n");
    sb.append("    updatedByName: ").append(toIndentedString(updatedByName)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("description");
    openapiFields.add("account");
    openapiFields.add("enabled");
    openapiFields.add("refScope");
    openapiFields.add("refType");
    openapiFields.add("refId");
    openapiFields.add("refName");
    openapiFields.add("period");
    openapiFields.add("year");
    openapiFields.add("resourceType");
    openapiFields.add("timezone");
    openapiFields.add("startDate");
    openapiFields.add("endDate");
    openapiFields.add("interval");
    openapiFields.add("costs");
    openapiFields.add("isFiscal");
    openapiFields.add("averageCost");
    openapiFields.add("totalCost");
    openapiFields.add("currency");
    openapiFields.add("rollover");
    openapiFields.add("warningLimit");
    openapiFields.add("overLimit");
    openapiFields.add("externalId");
    openapiFields.add("internalId");
    openapiFields.add("createdById");
    openapiFields.add("createdByName");
    openapiFields.add("updatedById");
    openapiFields.add("updatedByName");
    openapiFields.add("dateCreated");
    openapiFields.add("lastUpdated");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Budgets
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Budgets.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Budgets is not found in the empty JSON string", Budgets.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Budgets.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Budgets` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `account`
      if (jsonObj.get("account") != null && !jsonObj.get("account").isJsonNull()) {
        ApplianceSettingsEnabledZoneTypesInner.validateJsonElement(jsonObj.get("account"));
      }
      if ((jsonObj.get("refScope") != null && !jsonObj.get("refScope").isJsonNull()) && !jsonObj.get("refScope").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `refScope` to be a primitive type in the JSON string but got `%s`", jsonObj.get("refScope").toString()));
      }
      if ((jsonObj.get("refType") != null && !jsonObj.get("refType").isJsonNull()) && !jsonObj.get("refType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `refType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("refType").toString()));
      }
      if ((jsonObj.get("refName") != null && !jsonObj.get("refName").isJsonNull()) && !jsonObj.get("refName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `refName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("refName").toString()));
      }
      if ((jsonObj.get("period") != null && !jsonObj.get("period").isJsonNull()) && !jsonObj.get("period").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `period` to be a primitive type in the JSON string but got `%s`", jsonObj.get("period").toString()));
      }
      if ((jsonObj.get("year") != null && !jsonObj.get("year").isJsonNull()) && !jsonObj.get("year").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `year` to be a primitive type in the JSON string but got `%s`", jsonObj.get("year").toString()));
      }
      if ((jsonObj.get("resourceType") != null && !jsonObj.get("resourceType").isJsonNull()) && !jsonObj.get("resourceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceType").toString()));
      }
      if ((jsonObj.get("timezone") != null && !jsonObj.get("timezone").isJsonNull()) && !jsonObj.get("timezone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timezone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timezone").toString()));
      }
      if ((jsonObj.get("interval") != null && !jsonObj.get("interval").isJsonNull()) && !jsonObj.get("interval").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `interval` to be a primitive type in the JSON string but got `%s`", jsonObj.get("interval").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("costs") != null && !jsonObj.get("costs").isJsonNull() && !jsonObj.get("costs").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `costs` to be an array in the JSON string but got `%s`", jsonObj.get("costs").toString()));
      }
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if ((jsonObj.get("warningLimit") != null && !jsonObj.get("warningLimit").isJsonNull()) && !jsonObj.get("warningLimit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `warningLimit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("warningLimit").toString()));
      }
      if ((jsonObj.get("overLimit") != null && !jsonObj.get("overLimit").isJsonNull()) && !jsonObj.get("overLimit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `overLimit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("overLimit").toString()));
      }
      if ((jsonObj.get("externalId") != null && !jsonObj.get("externalId").isJsonNull()) && !jsonObj.get("externalId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalId").toString()));
      }
      if ((jsonObj.get("internalId") != null && !jsonObj.get("internalId").isJsonNull()) && !jsonObj.get("internalId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `internalId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("internalId").toString()));
      }
      if ((jsonObj.get("createdByName") != null && !jsonObj.get("createdByName").isJsonNull()) && !jsonObj.get("createdByName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdByName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdByName").toString()));
      }
      if ((jsonObj.get("updatedById") != null && !jsonObj.get("updatedById").isJsonNull()) && !jsonObj.get("updatedById").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updatedById` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updatedById").toString()));
      }
      if ((jsonObj.get("updatedByName") != null && !jsonObj.get("updatedByName").isJsonNull()) && !jsonObj.get("updatedByName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updatedByName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updatedByName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Budgets.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Budgets' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Budgets> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Budgets.class));

       return (TypeAdapter<T>) new TypeAdapter<Budgets>() {
           @Override
           public void write(JsonWriter out, Budgets value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Budgets read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Budgets given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Budgets
  * @throws IOException if the JSON string is invalid with respect to Budgets
  */
  public static Budgets fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Budgets.class);
  }

 /**
  * Convert an instance of Budgets to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

