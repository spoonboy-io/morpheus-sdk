/*
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.1.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BillingServerUsagesInnerApplicablePricesInner;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BillingServerUsagesInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-17T13:37:08.123540Z[Etc/UTC]")
public class BillingServerUsagesInner {
  public static final String SERIALIZED_NAME_COST = "cost";
  @SerializedName(SERIALIZED_NAME_COST)
  private BigDecimal cost;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private BigDecimal price;

  public static final String SERIALIZED_NAME_CREATED_BY_USER = "createdByUser";
  @SerializedName(SERIALIZED_NAME_CREATED_BY_USER)
  private String createdByUser;

  public static final String SERIALIZED_NAME_CREATED_BY_USER_ID = "createdByUserId";
  @SerializedName(SERIALIZED_NAME_CREATED_BY_USER_ID)
  private Long createdByUserId;

  public static final String SERIALIZED_NAME_SITE_ID = "siteId";
  @SerializedName(SERIALIZED_NAME_SITE_ID)
  private String siteId;

  public static final String SERIALIZED_NAME_SITE_NAME = "siteName";
  @SerializedName(SERIALIZED_NAME_SITE_NAME)
  private String siteName;

  public static final String SERIALIZED_NAME_SITE_U_U_I_D = "siteUUID";
  @SerializedName(SERIALIZED_NAME_SITE_U_U_I_D)
  private String siteUUID;

  public static final String SERIALIZED_NAME_SITE_CODE = "siteCode";
  @SerializedName(SERIALIZED_NAME_SITE_CODE)
  private String siteCode;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private OffsetDateTime startDate;

  public static final String SERIALIZED_NAME_END_DATE = "endDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private OffsetDateTime endDate;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<Object> tags;

  public static final String SERIALIZED_NAME_APPLICABLE_PRICES = "applicablePrices";
  @SerializedName(SERIALIZED_NAME_APPLICABLE_PRICES)
  private List<BillingServerUsagesInnerApplicablePricesInner> applicablePrices;

  public static final String SERIALIZED_NAME_SERVICE_PLAN_ID = "servicePlanId";
  @SerializedName(SERIALIZED_NAME_SERVICE_PLAN_ID)
  private Long servicePlanId;

  public static final String SERIALIZED_NAME_SERVICE_PLAN_NAME = "servicePlanName";
  @SerializedName(SERIALIZED_NAME_SERVICE_PLAN_NAME)
  private String servicePlanName;

  public static final String SERIALIZED_NAME_RESOURCE_POOL_ID = "resourcePoolId";
  @SerializedName(SERIALIZED_NAME_RESOURCE_POOL_ID)
  private Long resourcePoolId;

  public static final String SERIALIZED_NAME_RESOURCE_POOL_NAME = "resourcePoolName";
  @SerializedName(SERIALIZED_NAME_RESOURCE_POOL_NAME)
  private String resourcePoolName;

  public BillingServerUsagesInner() {
  }

  public BillingServerUsagesInner cost(BigDecimal cost) {
    
    this.cost = cost;
    return this;
  }

   /**
   * Get cost
   * @return cost
  **/
  @javax.annotation.Nullable
  public BigDecimal getCost() {
    return cost;
  }


  public void setCost(BigDecimal cost) {
    this.cost = cost;
  }


  public BillingServerUsagesInner price(BigDecimal price) {
    
    this.price = price;
    return this;
  }

   /**
   * Get price
   * @return price
  **/
  @javax.annotation.Nullable
  public BigDecimal getPrice() {
    return price;
  }


  public void setPrice(BigDecimal price) {
    this.price = price;
  }


  public BillingServerUsagesInner createdByUser(String createdByUser) {
    
    this.createdByUser = createdByUser;
    return this;
  }

   /**
   * Get createdByUser
   * @return createdByUser
  **/
  @javax.annotation.Nullable
  public String getCreatedByUser() {
    return createdByUser;
  }


  public void setCreatedByUser(String createdByUser) {
    this.createdByUser = createdByUser;
  }


  public BillingServerUsagesInner createdByUserId(Long createdByUserId) {
    
    this.createdByUserId = createdByUserId;
    return this;
  }

   /**
   * Get createdByUserId
   * @return createdByUserId
  **/
  @javax.annotation.Nullable
  public Long getCreatedByUserId() {
    return createdByUserId;
  }


  public void setCreatedByUserId(Long createdByUserId) {
    this.createdByUserId = createdByUserId;
  }


  public BillingServerUsagesInner siteId(String siteId) {
    
    this.siteId = siteId;
    return this;
  }

   /**
   * Get siteId
   * @return siteId
  **/
  @javax.annotation.Nullable
  public String getSiteId() {
    return siteId;
  }


  public void setSiteId(String siteId) {
    this.siteId = siteId;
  }


  public BillingServerUsagesInner siteName(String siteName) {
    
    this.siteName = siteName;
    return this;
  }

   /**
   * Get siteName
   * @return siteName
  **/
  @javax.annotation.Nullable
  public String getSiteName() {
    return siteName;
  }


  public void setSiteName(String siteName) {
    this.siteName = siteName;
  }


  public BillingServerUsagesInner siteUUID(String siteUUID) {
    
    this.siteUUID = siteUUID;
    return this;
  }

   /**
   * Get siteUUID
   * @return siteUUID
  **/
  @javax.annotation.Nullable
  public String getSiteUUID() {
    return siteUUID;
  }


  public void setSiteUUID(String siteUUID) {
    this.siteUUID = siteUUID;
  }


  public BillingServerUsagesInner siteCode(String siteCode) {
    
    this.siteCode = siteCode;
    return this;
  }

   /**
   * Get siteCode
   * @return siteCode
  **/
  @javax.annotation.Nullable
  public String getSiteCode() {
    return siteCode;
  }


  public void setSiteCode(String siteCode) {
    this.siteCode = siteCode;
  }


  public BillingServerUsagesInner currency(String currency) {
    
    this.currency = currency;
    return this;
  }

   /**
   * Get currency
   * @return currency
  **/
  @javax.annotation.Nullable
  public String getCurrency() {
    return currency;
  }


  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public BillingServerUsagesInner startDate(OffsetDateTime startDate) {
    
    this.startDate = startDate;
    return this;
  }

   /**
   * Get startDate
   * @return startDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getStartDate() {
    return startDate;
  }


  public void setStartDate(OffsetDateTime startDate) {
    this.startDate = startDate;
  }


  public BillingServerUsagesInner endDate(OffsetDateTime endDate) {
    
    this.endDate = endDate;
    return this;
  }

   /**
   * Get endDate
   * @return endDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getEndDate() {
    return endDate;
  }


  public void setEndDate(OffsetDateTime endDate) {
    this.endDate = endDate;
  }


  public BillingServerUsagesInner status(String status) {
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }


  public void setStatus(String status) {
    this.status = status;
  }


  public BillingServerUsagesInner tags(List<Object> tags) {
    
    this.tags = tags;
    return this;
  }

  public BillingServerUsagesInner addTagsItem(Object tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * Get tags
   * @return tags
  **/
  @javax.annotation.Nullable
  public List<Object> getTags() {
    return tags;
  }


  public void setTags(List<Object> tags) {
    this.tags = tags;
  }


  public BillingServerUsagesInner applicablePrices(List<BillingServerUsagesInnerApplicablePricesInner> applicablePrices) {
    
    this.applicablePrices = applicablePrices;
    return this;
  }

  public BillingServerUsagesInner addApplicablePricesItem(BillingServerUsagesInnerApplicablePricesInner applicablePricesItem) {
    if (this.applicablePrices == null) {
      this.applicablePrices = new ArrayList<>();
    }
    this.applicablePrices.add(applicablePricesItem);
    return this;
  }

   /**
   * Get applicablePrices
   * @return applicablePrices
  **/
  @javax.annotation.Nullable
  public List<BillingServerUsagesInnerApplicablePricesInner> getApplicablePrices() {
    return applicablePrices;
  }


  public void setApplicablePrices(List<BillingServerUsagesInnerApplicablePricesInner> applicablePrices) {
    this.applicablePrices = applicablePrices;
  }


  public BillingServerUsagesInner servicePlanId(Long servicePlanId) {
    
    this.servicePlanId = servicePlanId;
    return this;
  }

   /**
   * Get servicePlanId
   * @return servicePlanId
  **/
  @javax.annotation.Nullable
  public Long getServicePlanId() {
    return servicePlanId;
  }


  public void setServicePlanId(Long servicePlanId) {
    this.servicePlanId = servicePlanId;
  }


  public BillingServerUsagesInner servicePlanName(String servicePlanName) {
    
    this.servicePlanName = servicePlanName;
    return this;
  }

   /**
   * Get servicePlanName
   * @return servicePlanName
  **/
  @javax.annotation.Nullable
  public String getServicePlanName() {
    return servicePlanName;
  }


  public void setServicePlanName(String servicePlanName) {
    this.servicePlanName = servicePlanName;
  }


  public BillingServerUsagesInner resourcePoolId(Long resourcePoolId) {
    
    this.resourcePoolId = resourcePoolId;
    return this;
  }

   /**
   * Get resourcePoolId
   * @return resourcePoolId
  **/
  @javax.annotation.Nullable
  public Long getResourcePoolId() {
    return resourcePoolId;
  }


  public void setResourcePoolId(Long resourcePoolId) {
    this.resourcePoolId = resourcePoolId;
  }


  public BillingServerUsagesInner resourcePoolName(String resourcePoolName) {
    
    this.resourcePoolName = resourcePoolName;
    return this;
  }

   /**
   * Get resourcePoolName
   * @return resourcePoolName
  **/
  @javax.annotation.Nullable
  public String getResourcePoolName() {
    return resourcePoolName;
  }


  public void setResourcePoolName(String resourcePoolName) {
    this.resourcePoolName = resourcePoolName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BillingServerUsagesInner billingServerUsagesInner = (BillingServerUsagesInner) o;
    return Objects.equals(this.cost, billingServerUsagesInner.cost) &&
        Objects.equals(this.price, billingServerUsagesInner.price) &&
        Objects.equals(this.createdByUser, billingServerUsagesInner.createdByUser) &&
        Objects.equals(this.createdByUserId, billingServerUsagesInner.createdByUserId) &&
        Objects.equals(this.siteId, billingServerUsagesInner.siteId) &&
        Objects.equals(this.siteName, billingServerUsagesInner.siteName) &&
        Objects.equals(this.siteUUID, billingServerUsagesInner.siteUUID) &&
        Objects.equals(this.siteCode, billingServerUsagesInner.siteCode) &&
        Objects.equals(this.currency, billingServerUsagesInner.currency) &&
        Objects.equals(this.startDate, billingServerUsagesInner.startDate) &&
        Objects.equals(this.endDate, billingServerUsagesInner.endDate) &&
        Objects.equals(this.status, billingServerUsagesInner.status) &&
        Objects.equals(this.tags, billingServerUsagesInner.tags) &&
        Objects.equals(this.applicablePrices, billingServerUsagesInner.applicablePrices) &&
        Objects.equals(this.servicePlanId, billingServerUsagesInner.servicePlanId) &&
        Objects.equals(this.servicePlanName, billingServerUsagesInner.servicePlanName) &&
        Objects.equals(this.resourcePoolId, billingServerUsagesInner.resourcePoolId) &&
        Objects.equals(this.resourcePoolName, billingServerUsagesInner.resourcePoolName);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(cost, price, createdByUser, createdByUserId, siteId, siteName, siteUUID, siteCode, currency, startDate, endDate, status, tags, applicablePrices, servicePlanId, servicePlanName, resourcePoolId, resourcePoolName);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BillingServerUsagesInner {\n");
    sb.append("    cost: ").append(toIndentedString(cost)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    createdByUser: ").append(toIndentedString(createdByUser)).append("\n");
    sb.append("    createdByUserId: ").append(toIndentedString(createdByUserId)).append("\n");
    sb.append("    siteId: ").append(toIndentedString(siteId)).append("\n");
    sb.append("    siteName: ").append(toIndentedString(siteName)).append("\n");
    sb.append("    siteUUID: ").append(toIndentedString(siteUUID)).append("\n");
    sb.append("    siteCode: ").append(toIndentedString(siteCode)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    applicablePrices: ").append(toIndentedString(applicablePrices)).append("\n");
    sb.append("    servicePlanId: ").append(toIndentedString(servicePlanId)).append("\n");
    sb.append("    servicePlanName: ").append(toIndentedString(servicePlanName)).append("\n");
    sb.append("    resourcePoolId: ").append(toIndentedString(resourcePoolId)).append("\n");
    sb.append("    resourcePoolName: ").append(toIndentedString(resourcePoolName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cost");
    openapiFields.add("price");
    openapiFields.add("createdByUser");
    openapiFields.add("createdByUserId");
    openapiFields.add("siteId");
    openapiFields.add("siteName");
    openapiFields.add("siteUUID");
    openapiFields.add("siteCode");
    openapiFields.add("currency");
    openapiFields.add("startDate");
    openapiFields.add("endDate");
    openapiFields.add("status");
    openapiFields.add("tags");
    openapiFields.add("applicablePrices");
    openapiFields.add("servicePlanId");
    openapiFields.add("servicePlanName");
    openapiFields.add("resourcePoolId");
    openapiFields.add("resourcePoolName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to BillingServerUsagesInner
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BillingServerUsagesInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BillingServerUsagesInner is not found in the empty JSON string", BillingServerUsagesInner.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!BillingServerUsagesInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BillingServerUsagesInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("createdByUser") != null && !jsonObj.get("createdByUser").isJsonNull()) && !jsonObj.get("createdByUser").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdByUser` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdByUser").toString()));
      }
      if ((jsonObj.get("siteId") != null && !jsonObj.get("siteId").isJsonNull()) && !jsonObj.get("siteId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `siteId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("siteId").toString()));
      }
      if ((jsonObj.get("siteName") != null && !jsonObj.get("siteName").isJsonNull()) && !jsonObj.get("siteName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `siteName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("siteName").toString()));
      }
      if ((jsonObj.get("siteUUID") != null && !jsonObj.get("siteUUID").isJsonNull()) && !jsonObj.get("siteUUID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `siteUUID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("siteUUID").toString()));
      }
      if ((jsonObj.get("siteCode") != null && !jsonObj.get("siteCode").isJsonNull()) && !jsonObj.get("siteCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `siteCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("siteCode").toString()));
      }
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull() && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      if (jsonObj.get("applicablePrices") != null && !jsonObj.get("applicablePrices").isJsonNull()) {
        JsonArray jsonArrayapplicablePrices = jsonObj.getAsJsonArray("applicablePrices");
        if (jsonArrayapplicablePrices != null) {
          // ensure the json data is an array
          if (!jsonObj.get("applicablePrices").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `applicablePrices` to be an array in the JSON string but got `%s`", jsonObj.get("applicablePrices").toString()));
          }

          // validate the optional field `applicablePrices` (array)
          for (int i = 0; i < jsonArrayapplicablePrices.size(); i++) {
            BillingServerUsagesInnerApplicablePricesInner.validateJsonElement(jsonArrayapplicablePrices.get(i));
          };
        }
      }
      if ((jsonObj.get("servicePlanName") != null && !jsonObj.get("servicePlanName").isJsonNull()) && !jsonObj.get("servicePlanName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `servicePlanName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("servicePlanName").toString()));
      }
      if ((jsonObj.get("resourcePoolName") != null && !jsonObj.get("resourcePoolName").isJsonNull()) && !jsonObj.get("resourcePoolName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourcePoolName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourcePoolName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BillingServerUsagesInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BillingServerUsagesInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BillingServerUsagesInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BillingServerUsagesInner.class));

       return (TypeAdapter<T>) new TypeAdapter<BillingServerUsagesInner>() {
           @Override
           public void write(JsonWriter out, BillingServerUsagesInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BillingServerUsagesInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BillingServerUsagesInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BillingServerUsagesInner
  * @throws IOException if the JSON string is invalid with respect to BillingServerUsagesInner
  */
  public static BillingServerUsagesInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BillingServerUsagesInner.class);
  }

 /**
  * Convert an instance of BillingServerUsagesInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

