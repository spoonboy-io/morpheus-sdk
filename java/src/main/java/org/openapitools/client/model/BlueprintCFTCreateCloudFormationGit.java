/*
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.1.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BlueprintCFTCreateCloudFormationGit
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-17T13:37:08.123540Z[Etc/UTC]")
public class BlueprintCFTCreateCloudFormationGit {
  public static final String SERIALIZED_NAME_REPO_ID = "repoId";
  @SerializedName(SERIALIZED_NAME_REPO_ID)
  private Long repoId;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  public static final String SERIALIZED_NAME_INTEGRATION_ID = "integrationId";
  @SerializedName(SERIALIZED_NAME_INTEGRATION_ID)
  private Long integrationId;

  public static final String SERIALIZED_NAME_BRANCH = "branch";
  @SerializedName(SERIALIZED_NAME_BRANCH)
  private String branch;

  public BlueprintCFTCreateCloudFormationGit() {
  }

  public BlueprintCFTCreateCloudFormationGit repoId(Long repoId) {
    
    this.repoId = repoId;
    return this;
  }

   /**
   * Morpheus SCM Repository ID
   * @return repoId
  **/
  @javax.annotation.Nonnull
  public Long getRepoId() {
    return repoId;
  }


  public void setRepoId(Long repoId) {
    this.repoId = repoId;
  }


  public BlueprintCFTCreateCloudFormationGit path(String path) {
    
    this.path = path;
    return this;
  }

   /**
   * Path to CloudFormation Files in the Repository
   * @return path
  **/
  @javax.annotation.Nonnull
  public String getPath() {
    return path;
  }


  public void setPath(String path) {
    this.path = path;
  }


  public BlueprintCFTCreateCloudFormationGit integrationId(Long integrationId) {
    
    this.integrationId = integrationId;
    return this;
  }

   /**
   * Morpheus SCM Integration ID
   * @return integrationId
  **/
  @javax.annotation.Nonnull
  public Long getIntegrationId() {
    return integrationId;
  }


  public void setIntegrationId(Long integrationId) {
    this.integrationId = integrationId;
  }


  public BlueprintCFTCreateCloudFormationGit branch(String branch) {
    
    this.branch = branch;
    return this;
  }

   /**
   * Branch Name
   * @return branch
  **/
  @javax.annotation.Nonnull
  public String getBranch() {
    return branch;
  }


  public void setBranch(String branch) {
    this.branch = branch;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BlueprintCFTCreateCloudFormationGit blueprintCFTCreateCloudFormationGit = (BlueprintCFTCreateCloudFormationGit) o;
    return Objects.equals(this.repoId, blueprintCFTCreateCloudFormationGit.repoId) &&
        Objects.equals(this.path, blueprintCFTCreateCloudFormationGit.path) &&
        Objects.equals(this.integrationId, blueprintCFTCreateCloudFormationGit.integrationId) &&
        Objects.equals(this.branch, blueprintCFTCreateCloudFormationGit.branch);
  }

  @Override
  public int hashCode() {
    return Objects.hash(repoId, path, integrationId, branch);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BlueprintCFTCreateCloudFormationGit {\n");
    sb.append("    repoId: ").append(toIndentedString(repoId)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    integrationId: ").append(toIndentedString(integrationId)).append("\n");
    sb.append("    branch: ").append(toIndentedString(branch)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("repoId");
    openapiFields.add("path");
    openapiFields.add("integrationId");
    openapiFields.add("branch");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("repoId");
    openapiRequiredFields.add("path");
    openapiRequiredFields.add("integrationId");
    openapiRequiredFields.add("branch");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to BlueprintCFTCreateCloudFormationGit
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BlueprintCFTCreateCloudFormationGit.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BlueprintCFTCreateCloudFormationGit is not found in the empty JSON string", BlueprintCFTCreateCloudFormationGit.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!BlueprintCFTCreateCloudFormationGit.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BlueprintCFTCreateCloudFormationGit` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BlueprintCFTCreateCloudFormationGit.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path").toString()));
      }
      if (!jsonObj.get("branch").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `branch` to be a primitive type in the JSON string but got `%s`", jsonObj.get("branch").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BlueprintCFTCreateCloudFormationGit.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BlueprintCFTCreateCloudFormationGit' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BlueprintCFTCreateCloudFormationGit> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BlueprintCFTCreateCloudFormationGit.class));

       return (TypeAdapter<T>) new TypeAdapter<BlueprintCFTCreateCloudFormationGit>() {
           @Override
           public void write(JsonWriter out, BlueprintCFTCreateCloudFormationGit value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BlueprintCFTCreateCloudFormationGit read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BlueprintCFTCreateCloudFormationGit given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BlueprintCFTCreateCloudFormationGit
  * @throws IOException if the JSON string is invalid with respect to BlueprintCFTCreateCloudFormationGit
  */
  public static BlueprintCFTCreateCloudFormationGit fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BlueprintCFTCreateCloudFormationGit.class);
  }

 /**
  * Convert an instance of BlueprintCFTCreateCloudFormationGit to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

