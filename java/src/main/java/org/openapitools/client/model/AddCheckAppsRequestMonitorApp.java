/*
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.1.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Payload for creating a new monitoring check app
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-17T13:37:08.123540Z[Etc/UTC]")
public class AddCheckAppsRequestMonitorApp {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_IN_UPTIME = "inUptime";
  @SerializedName(SERIALIZED_NAME_IN_UPTIME)
  private Boolean inUptime = true;

  /**
   * Severity level of incidents that are created when this check fails
   */
  @JsonAdapter(SeverityEnum.Adapter.class)
  public enum SeverityEnum {
    INFO("info"),
    
    WARNING("warning"),
    
    CRITICAL("critical");

    private String value;

    SeverityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SeverityEnum fromValue(String value) {
      for (SeverityEnum b : SeverityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SeverityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SeverityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SeverityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SeverityEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SEVERITY = "severity";
  @SerializedName(SERIALIZED_NAME_SEVERITY)
  private SeverityEnum severity = SeverityEnum.CRITICAL;

  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private Boolean active = true;

  public static final String SERIALIZED_NAME_CHECKS = "checks";
  @SerializedName(SERIALIZED_NAME_CHECKS)
  private List<Integer> checks;

  public static final String SERIALIZED_NAME_CHECK_GROUPS = "checkGroups";
  @SerializedName(SERIALIZED_NAME_CHECK_GROUPS)
  private List<Integer> checkGroups;

  public AddCheckAppsRequestMonitorApp() {
  }

  public AddCheckAppsRequestMonitorApp name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Unique name scoped to your account for the check app
   * @return name
  **/
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public AddCheckAppsRequestMonitorApp description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Optional description field
   * @return description
  **/
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public AddCheckAppsRequestMonitorApp inUptime(Boolean inUptime) {
    
    this.inUptime = inUptime;
    return this;
  }

   /**
   * Used to determine if check should affect account wide availability calculations
   * @return inUptime
  **/
  @javax.annotation.Nullable
  public Boolean getInUptime() {
    return inUptime;
  }


  public void setInUptime(Boolean inUptime) {
    this.inUptime = inUptime;
  }


  public AddCheckAppsRequestMonitorApp severity(SeverityEnum severity) {
    
    this.severity = severity;
    return this;
  }

   /**
   * Severity level of incidents that are created when this check fails
   * @return severity
  **/
  @javax.annotation.Nullable
  public SeverityEnum getSeverity() {
    return severity;
  }


  public void setSeverity(SeverityEnum severity) {
    this.severity = severity;
  }


  public AddCheckAppsRequestMonitorApp active(Boolean active) {
    
    this.active = active;
    return this;
  }

   /**
   * Used to determine if check app is active
   * @return active
  **/
  @javax.annotation.Nullable
  public Boolean getActive() {
    return active;
  }


  public void setActive(Boolean active) {
    this.active = active;
  }


  public AddCheckAppsRequestMonitorApp checks(List<Integer> checks) {
    
    this.checks = checks;
    return this;
  }

  public AddCheckAppsRequestMonitorApp addChecksItem(Integer checksItem) {
    if (this.checks == null) {
      this.checks = new ArrayList<>();
    }
    this.checks.add(checksItem);
    return this;
  }

   /**
   * Get checks
   * @return checks
  **/
  @javax.annotation.Nullable
  public List<Integer> getChecks() {
    return checks;
  }


  public void setChecks(List<Integer> checks) {
    this.checks = checks;
  }


  public AddCheckAppsRequestMonitorApp checkGroups(List<Integer> checkGroups) {
    
    this.checkGroups = checkGroups;
    return this;
  }

  public AddCheckAppsRequestMonitorApp addCheckGroupsItem(Integer checkGroupsItem) {
    if (this.checkGroups == null) {
      this.checkGroups = new ArrayList<>();
    }
    this.checkGroups.add(checkGroupsItem);
    return this;
  }

   /**
   * Get checkGroups
   * @return checkGroups
  **/
  @javax.annotation.Nullable
  public List<Integer> getCheckGroups() {
    return checkGroups;
  }


  public void setCheckGroups(List<Integer> checkGroups) {
    this.checkGroups = checkGroups;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AddCheckAppsRequestMonitorApp addCheckAppsRequestMonitorApp = (AddCheckAppsRequestMonitorApp) o;
    return Objects.equals(this.name, addCheckAppsRequestMonitorApp.name) &&
        Objects.equals(this.description, addCheckAppsRequestMonitorApp.description) &&
        Objects.equals(this.inUptime, addCheckAppsRequestMonitorApp.inUptime) &&
        Objects.equals(this.severity, addCheckAppsRequestMonitorApp.severity) &&
        Objects.equals(this.active, addCheckAppsRequestMonitorApp.active) &&
        Objects.equals(this.checks, addCheckAppsRequestMonitorApp.checks) &&
        Objects.equals(this.checkGroups, addCheckAppsRequestMonitorApp.checkGroups);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, description, inUptime, severity, active, checks, checkGroups);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AddCheckAppsRequestMonitorApp {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    inUptime: ").append(toIndentedString(inUptime)).append("\n");
    sb.append("    severity: ").append(toIndentedString(severity)).append("\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    checks: ").append(toIndentedString(checks)).append("\n");
    sb.append("    checkGroups: ").append(toIndentedString(checkGroups)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("description");
    openapiFields.add("inUptime");
    openapiFields.add("severity");
    openapiFields.add("active");
    openapiFields.add("checks");
    openapiFields.add("checkGroups");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to AddCheckAppsRequestMonitorApp
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AddCheckAppsRequestMonitorApp.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AddCheckAppsRequestMonitorApp is not found in the empty JSON string", AddCheckAppsRequestMonitorApp.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!AddCheckAppsRequestMonitorApp.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AddCheckAppsRequestMonitorApp` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AddCheckAppsRequestMonitorApp.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("severity") != null && !jsonObj.get("severity").isJsonNull()) && !jsonObj.get("severity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `severity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("severity").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("checks") != null && !jsonObj.get("checks").isJsonNull() && !jsonObj.get("checks").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `checks` to be an array in the JSON string but got `%s`", jsonObj.get("checks").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("checkGroups") != null && !jsonObj.get("checkGroups").isJsonNull() && !jsonObj.get("checkGroups").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `checkGroups` to be an array in the JSON string but got `%s`", jsonObj.get("checkGroups").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AddCheckAppsRequestMonitorApp.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AddCheckAppsRequestMonitorApp' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AddCheckAppsRequestMonitorApp> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AddCheckAppsRequestMonitorApp.class));

       return (TypeAdapter<T>) new TypeAdapter<AddCheckAppsRequestMonitorApp>() {
           @Override
           public void write(JsonWriter out, AddCheckAppsRequestMonitorApp value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AddCheckAppsRequestMonitorApp read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AddCheckAppsRequestMonitorApp given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AddCheckAppsRequestMonitorApp
  * @throws IOException if the JSON string is invalid with respect to AddCheckAppsRequestMonitorApp
  */
  public static AddCheckAppsRequestMonitorApp fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AddCheckAppsRequestMonitorApp.class);
  }

 /**
  * Convert an instance of AddCheckAppsRequestMonitorApp to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

