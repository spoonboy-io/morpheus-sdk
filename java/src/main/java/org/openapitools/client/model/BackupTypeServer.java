/*
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * BackupTypeServer
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-21T11:26:47.028Z[GMT]")
public class BackupTypeServer {
  /**
   * Gets or Sets locationType
   */
  @JsonAdapter(LocationTypeEnum.Adapter.class)
  public enum LocationTypeEnum {
    INSTANCE("instance");

    private String value;

    LocationTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LocationTypeEnum fromValue(String value) {
      for (LocationTypeEnum b : LocationTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LocationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LocationTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LocationTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LocationTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_LOCATION_TYPE = "locationType";
  @SerializedName(SERIALIZED_NAME_LOCATION_TYPE)
  private LocationTypeEnum locationType;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SERVER_ID = "serverId";
  @SerializedName(SERIALIZED_NAME_SERVER_ID)
  private Long serverId;

  /**
   * The backup type code, options vary by the type of cloud and source
   */
  @JsonAdapter(BackupTypeEnum.Adapter.class)
  public enum BackupTypeEnum {
    ALIBABASNAPSHOT("alibabaSnapshot"),
    
    AMAZONSNAPSHOT("amazonSnapshot"),
    
    AVAMARVMWAREBACKUP("avamarVMWareBackup"),
    
    AZURESNAPSHOT("azureSnapshot"),
    
    BLUEMIXSNAPSHOT("bluemixSnapshot"),
    
    COMMVAULTFILEBACKUP("commvaultFileBackup"),
    
    COMMVAULTOPENSTACKBACKUP("commvaultOpenstackBackup"),
    
    COMMVAULTVMWAREBACKUP("commvaultVMWareBackup"),
    
    DIGITALOCEANSNAPSHOT("digitaloceanSnapshot"),
    
    DIRECTORYBACKUP("directoryBackup"),
    
    ESXISNAPSHOT("esxiSnapshot"),
    
    FILEBACKUP("fileBackup"),
    
    FUSIONSNAPSHOT("fusionSnapshot"),
    
    GOOGLESNAPSHOT("googleSnapshot"),
    
    HUAWEISNAPSHOT("huaweiSnapshot"),
    
    HYPERVSNAPSHOT("hypervSnapshot"),
    
    KVM("kvm"),
    
    LVMIMAGE("lvmImage"),
    
    LVMMIGRATION("lvmMigration"),
    
    LVMSNAPSHOT("lvmSnapshot"),
    
    MONGODB("MongoDB"),
    
    MORPHEUSAPPLIANCE("morpheusAppliance"),
    
    MORPHEUSCONTAINERBACKUP("morpheusContainerBackup"),
    
    MORPHEUSSTORAGEBACKUP("morpheusStorageBackup"),
    
    MORPHEUSVMBACKUP("morpheusVmBackup"),
    
    MYSQL("MySQL"),
    
    NUTANIXSNAPSHOT("nutanixSnapshot"),
    
    OPENSTACKSNAPSHOT("openstackSnapshot"),
    
    OPENTELEKOMSNAPSHOT("opentelekomSnapshot"),
    
    ORACLECLOUDSNAPSHOT("oracleCloudSnapshot"),
    
    POSTGRES("Postgres"),
    
    POWERVCSNAPSHOT("powervcSnapshot"),
    
    RUBRIKVMWAREBACKUP("rubrikVMWareBackup"),
    
    SCVMMSNAPSHOT("scvmmSnapshot"),
    
    SOFTLAYERSNAPSHOT("softlayerSnapshot"),
    
    SQLSERVER("SqlServer"),
    
    TARDIRECTORYBACKUP("tarDirectoryBackup"),
    
    UPCLOUDSNAPSHOT("upCloudSnapshot"),
    
    VCDSNAPSHOT("vcdSnapshot"),
    
    VEEAMHYPERVBACKUP("veeamHypervBackup"),
    
    VEEAMSCVMMBACKUP("veeamScvmmBackup"),
    
    VEEAMVCDBACKUP("veeamVcdBackup"),
    
    VEEAMVMWAREBACKUP("veeamVMWareBackup"),
    
    VIRTUSTREAMSNAPSHOT("virtustreamSnapshot"),
    
    VMWARESNAPSHOT("vmwareSnapshot"),
    
    WINMIGRATION("winMigration"),
    
    XENSNAPSHOT("xenSnapshot");

    private String value;

    BackupTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BackupTypeEnum fromValue(String value) {
      for (BackupTypeEnum b : BackupTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BackupTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BackupTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BackupTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BackupTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_BACKUP_TYPE = "backupType";
  @SerializedName(SERIALIZED_NAME_BACKUP_TYPE)
  private BackupTypeEnum backupType;

  /**
   * Create a new backup job, clone an existing job or add the new backup to an existing job
   */
  @JsonAdapter(JobActionEnum.Adapter.class)
  public enum JobActionEnum {
    NEW("new"),
    
    CLONE("clone"),
    
    ADDTO("addTo");

    private String value;

    JobActionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static JobActionEnum fromValue(String value) {
      for (JobActionEnum b : JobActionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<JobActionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final JobActionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public JobActionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return JobActionEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_JOB_ACTION = "jobAction";
  @SerializedName(SERIALIZED_NAME_JOB_ACTION)
  private JobActionEnum jobAction;

  public static final String SERIALIZED_NAME_JOB_ID = "jobId";
  @SerializedName(SERIALIZED_NAME_JOB_ID)
  private Long jobId;

  public static final String SERIALIZED_NAME_JOB_NAME = "jobName";
  @SerializedName(SERIALIZED_NAME_JOB_NAME)
  private String jobName;

  public static final String SERIALIZED_NAME_JOB_SCHEDULE = "jobSchedule";
  @SerializedName(SERIALIZED_NAME_JOB_SCHEDULE)
  private Long jobSchedule;

  public static final String SERIALIZED_NAME_RETENTION_COUNT = "retentionCount";
  @SerializedName(SERIALIZED_NAME_RETENTION_COUNT)
  private Long retentionCount;


  public BackupTypeServer locationType(LocationTypeEnum locationType) {
    
    this.locationType = locationType;
    return this;
  }

   /**
   * Get locationType
   * @return locationType
  **/
  @ApiModelProperty(required = true, value = "")

  public LocationTypeEnum getLocationType() {
    return locationType;
  }


  public void setLocationType(LocationTypeEnum locationType) {
    this.locationType = locationType;
  }


  public BackupTypeServer name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * A name for the backup
   * @return name
  **/
  @ApiModelProperty(required = true, value = "A name for the backup")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public BackupTypeServer serverId(Long serverId) {
    
    this.serverId = serverId;
    return this;
  }

   /**
   * The ID of the server to backup
   * @return serverId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ID of the server to backup")

  public Long getServerId() {
    return serverId;
  }


  public void setServerId(Long serverId) {
    this.serverId = serverId;
  }


  public BackupTypeServer backupType(BackupTypeEnum backupType) {
    
    this.backupType = backupType;
    return this;
  }

   /**
   * The backup type code, options vary by the type of cloud and source
   * @return backupType
  **/
  @ApiModelProperty(required = true, value = "The backup type code, options vary by the type of cloud and source")

  public BackupTypeEnum getBackupType() {
    return backupType;
  }


  public void setBackupType(BackupTypeEnum backupType) {
    this.backupType = backupType;
  }


  public BackupTypeServer jobAction(JobActionEnum jobAction) {
    
    this.jobAction = jobAction;
    return this;
  }

   /**
   * Create a new backup job, clone an existing job or add the new backup to an existing job
   * @return jobAction
  **/
  @ApiModelProperty(required = true, value = "Create a new backup job, clone an existing job or add the new backup to an existing job")

  public JobActionEnum getJobAction() {
    return jobAction;
  }


  public void setJobAction(JobActionEnum jobAction) {
    this.jobAction = jobAction;
  }


  public BackupTypeServer jobId(Long jobId) {
    
    this.jobId = jobId;
    return this;
  }

   /**
   * The ID of the job to clone or add to. Only applies to jobAction &#x60;clone&#x60; and &#x60;addTo&#x60;.
   * @return jobId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ID of the job to clone or add to. Only applies to jobAction `clone` and `addTo`.")

  public Long getJobId() {
    return jobId;
  }


  public void setJobId(Long jobId) {
    this.jobId = jobId;
  }


  public BackupTypeServer jobName(String jobName) {
    
    this.jobName = jobName;
    return this;
  }

   /**
   * Name for new job. Only applies to jobAction &#x60;new&#x60; and &#x60;clone&#x60;.
   * @return jobName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Name for new job. Only applies to jobAction `new` and `clone`.")

  public String getJobName() {
    return jobName;
  }


  public void setJobName(String jobName) {
    this.jobName = jobName;
  }


  public BackupTypeServer jobSchedule(Long jobSchedule) {
    
    this.jobSchedule = jobSchedule;
    return this;
  }

   /**
   * The ID of the execute schedule for new job. See Execute Schedules. Only applies to jobAction &#x60;new&#x60; and &#x60;clone&#x60;.
   * @return jobSchedule
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ID of the execute schedule for new job. See Execute Schedules. Only applies to jobAction `new` and `clone`.")

  public Long getJobSchedule() {
    return jobSchedule;
  }


  public void setJobSchedule(Long jobSchedule) {
    this.jobSchedule = jobSchedule;
  }


  public BackupTypeServer retentionCount(Long retentionCount) {
    
    this.retentionCount = retentionCount;
    return this;
  }

   /**
   * Retention Count for new job. By default the backup settings value will be used. Only applies to jobAction &#x60;new&#x60; and &#x60;clone&#x60;.
   * @return retentionCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Retention Count for new job. By default the backup settings value will be used. Only applies to jobAction `new` and `clone`.")

  public Long getRetentionCount() {
    return retentionCount;
  }


  public void setRetentionCount(Long retentionCount) {
    this.retentionCount = retentionCount;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BackupTypeServer backupTypeServer = (BackupTypeServer) o;
    return Objects.equals(this.locationType, backupTypeServer.locationType) &&
        Objects.equals(this.name, backupTypeServer.name) &&
        Objects.equals(this.serverId, backupTypeServer.serverId) &&
        Objects.equals(this.backupType, backupTypeServer.backupType) &&
        Objects.equals(this.jobAction, backupTypeServer.jobAction) &&
        Objects.equals(this.jobId, backupTypeServer.jobId) &&
        Objects.equals(this.jobName, backupTypeServer.jobName) &&
        Objects.equals(this.jobSchedule, backupTypeServer.jobSchedule) &&
        Objects.equals(this.retentionCount, backupTypeServer.retentionCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(locationType, name, serverId, backupType, jobAction, jobId, jobName, jobSchedule, retentionCount);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BackupTypeServer {\n");
    sb.append("    locationType: ").append(toIndentedString(locationType)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    serverId: ").append(toIndentedString(serverId)).append("\n");
    sb.append("    backupType: ").append(toIndentedString(backupType)).append("\n");
    sb.append("    jobAction: ").append(toIndentedString(jobAction)).append("\n");
    sb.append("    jobId: ").append(toIndentedString(jobId)).append("\n");
    sb.append("    jobName: ").append(toIndentedString(jobName)).append("\n");
    sb.append("    jobSchedule: ").append(toIndentedString(jobSchedule)).append("\n");
    sb.append("    retentionCount: ").append(toIndentedString(retentionCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

