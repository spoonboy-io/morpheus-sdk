/*
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * RolePermissionFeature
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-21T11:26:47.028Z[GMT]")
public class RolePermissionFeature {
  /**
   * The code of the feature permission being changed
   */
  @JsonAdapter(PermissionCodeEnum.Adapter.class)
  public enum PermissionCodeEnum {
    ACCOUNT_USAGE("account-usage"),
    
    ACTIVITY("activity"),
    
    ADMIN_ACCOUNTS("admin-accounts"),
    
    ADMIN_ACCOUNTS_USERS("admin-accounts-users"),
    
    ADMIN_APPLIANCE("admin-appliance"),
    
    ADMIN_BACKUPSETTINGS("admin-backupSettings"),
    
    ADMIN_CERTIFICATES("admin-certificates"),
    
    ADMIN_CLIENTS("admin-clients"),
    
    ADMIN_CM("admin-cm"),
    
    ADMIN_CONTAINERS("admin-containers"),
    
    ADMIN_DISTRIBUTED_WORKERS("admin-distributed-workers"),
    
    ADMIN_ENVIRONMENTS("admin-environments"),
    
    ADMIN_GLOBAL_POLICIES("admin-global-policies"),
    
    ADMIN_GROUPS("admin-groups"),
    
    ADMIN_GUIDANCESETTINGS("admin-guidanceSettings"),
    
    ADMIN_HEALTH("admin-health"),
    
    ADMIN_IDENTITY_SOURCES("admin-identity-sources"),
    
    ADMIN_KEYPAIRS("admin-keypairs"),
    
    ADMIN_LICENSES("admin-licenses"),
    
    ADMIN_LOGSETTINGS("admin-logSettings"),
    
    ADMIN_MONITORSETTINGS("admin-monitorSettings"),
    
    ADMIN_MOTD("admin-motd"),
    
    ADMIN_PACKAGES("admin-packages"),
    
    ADMIN_PLUGINS("admin-plugins"),
    
    ADMIN_POLICIES("admin-policies"),
    
    ADMIN_PROFILES("admin-profiles"),
    
    ADMIN_PROVISIONINGSETTINGS("admin-provisioningSettings"),
    
    ADMIN_ROLES("admin-roles"),
    
    ADMIN_SERVERS("admin-servers"),
    
    ADMIN_SERVICEPLANS("admin-servicePlans"),
    
    ADMIN_USERS("admin-users"),
    
    ADMIN_WHITELABEL("admin-whitelabel"),
    
    ADMIN_ZONES("admin-zones"),
    
    APP_TEMPLATES("app-templates"),
    
    APPS("apps"),
    
    ARM_TEMPLATE("arm-template"),
    
    AUTOMATION_SERVICES("automation-services"),
    
    BACKUP_SERVICES("backup-services"),
    
    BACKUPS("backups"),
    
    BILLING("billing"),
    
    CATALOG("catalog"),
    
    CLOUDFORMATION_TEMPLATE("cloudFormation-template"),
    
    CODE_REPOSITORIES("code-repositories"),
    
    CREDENTIALS("credentials"),
    
    DASHBOARD("dashboard"),
    
    DEPLOYMENT_SERVICES("deployment-services"),
    
    DEPLOYMENTS("deployments"),
    
    EXECUTION_REQUEST("execution-request"),
    
    EXECUTIONS("executions"),
    
    GUIDANCE("guidance"),
    
    HELM_TEMPLATE("helm-template"),
    
    INFRASTRUCTURE_BOOT("infrastructure-boot"),
    
    INFRASTRUCTURE_CLUSTER("infrastructure-cluster"),
    
    INFRASTRUCTURE_DHCP_POOL("infrastructure-dhcp-pool"),
    
    INFRASTRUCTURE_DOMAINS("infrastructure-domains"),
    
    INFRASTRUCTURE_IPPOOLS("infrastructure-ippools"),
    
    INFRASTRUCTURE_KUBE_CNTL("infrastructure-kube-cntl"),
    
    INFRASTRUCTURE_LOADBALANCER("infrastructure-loadbalancer"),
    
    INFRASTRUCTURE_MOVE_SERVER("infrastructure-move-server"),
    
    INFRASTRUCTURE_NAT("infrastructure-nat"),
    
    INFRASTRUCTURE_NETWORK_DHCP_RELAY("infrastructure-network-dhcp-relay"),
    
    INFRASTRUCTURE_NETWORK_DHCP_ROUTES("infrastructure-network-dhcp-routes"),
    
    INFRASTRUCTURE_NETWORK_DHCP_SERVER("infrastructure-network-dhcp-server"),
    
    INFRASTRUCTURE_NETWORK_FIREWALLS("infrastructure-network-firewalls"),
    
    INFRASTRUCTURE_NETWORK_INTEGRATIONS("infrastructure-network-integrations"),
    
    INFRASTRUCTURE_NETWORK_ROUTER_FIREWALLS("infrastructure-network-router-firewalls"),
    
    INFRASTRUCTURE_NETWORK_ROUTER_INTERFACES("infrastructure-network-router-interfaces"),
    
    INFRASTRUCTURE_NETWORK_ROUTER_REDISTRIBUTION("infrastructure-network-router-redistribution"),
    
    INFRASTRUCTURE_NETWORK_ROUTER_ROUTES("infrastructure-network-router-routes"),
    
    INFRASTRUCTURE_NETWORK_SERVER_GROUPS("infrastructure-network-server-groups"),
    
    INFRASTRUCTURE_NETWORKS("infrastructure-networks"),
    
    INFRASTRUCTURE_PROXIES("infrastructure-proxies"),
    
    INFRASTRUCTURE_ROUTER_DHCP_BINDING("infrastructure-router-dhcp-binding"),
    
    INFRASTRUCTURE_ROUTER_DHCP_RELAY("infrastructure-router-dhcp-relay"),
    
    INFRASTRUCTURE_ROUTERS("infrastructure-routers"),
    
    INFRASTRUCTURE_SECURITYGROUPS("infrastructure-securityGroups"),
    
    INFRASTRUCTURE_STATE("infrastructure-state"),
    
    INFRASTRUCTURE_STORAGE("infrastructure-storage"),
    
    INFRASTRUCTURE_STORAGE_BROWSER("infrastructure-storage-browser"),
    
    INTEGRATIONS_ANSIBLE("integrations-ansible"),
    
    JOB_EXECUTIONS("job-executions"),
    
    JOB_TEMPLATES("job-templates"),
    
    KUBERNETES_TEMPLATE("kubernetes-template"),
    
    LIBRARY_ADVANCED_NODE_TYPE_OPTIONS("library-advanced-node-type-options"),
    
    LIBRARY_OPTIONS("library-options"),
    
    LIBRARY_TEMPLATES("library-templates"),
    
    LOGS("logs"),
    
    MONITORING("monitoring"),
    
    OPERATIONS_ALARMS("operations-alarms"),
    
    OPERATIONS_APPROVALS("operations-approvals"),
    
    OPERATIONS_BUDGETS("operations-budgets"),
    
    OPERATIONS_INVOICES("operations-invoices"),
    
    OPERATIONS_WIKI("operations-wiki"),
    
    PROJECTS("projects"),
    
    PROVISIONING("provisioning"),
    
    PROVISIONING_ADD("provisioning-add"),
    
    PROVISIONING_ADMIN("provisioning-admin"),
    
    PROVISIONING_CLONE("provisioning-clone"),
    
    PROVISIONING_DELETE("provisioning-delete"),
    
    PROVISIONING_EDIT("provisioning-edit"),
    
    PROVISIONING_ENVIRONMENT("provisioning-environment"),
    
    PROVISIONING_EXECUTE_SCRIPT("provisioning-execute-script"),
    
    PROVISIONING_EXECUTE_TASK("provisioning-execute-task"),
    
    PROVISIONING_EXECUTE_WORKFLOW("provisioning-execute-workflow"),
    
    PROVISIONING_FORCE_DELETE("provisioning-force-delete"),
    
    PROVISIONING_IMPORT_IMAGE("provisioning-import-image"),
    
    PROVISIONING_LOCK("provisioning-lock"),
    
    PROVISIONING_POWER("provisioning-power"),
    
    PROVISIONING_RECONFIGURE("provisioning-reconfigure"),
    
    PROVISIONING_RECONFIGURE_ADD_DISK("provisioning-reconfigure-add-disk"),
    
    PROVISIONING_RECONFIGURE_ADD_NETWORK("provisioning-reconfigure-add-network"),
    
    PROVISIONING_RECONFIGURE_CHANGE_PLAN("provisioning-reconfigure-change-plan"),
    
    PROVISIONING_RECONFIGURE_DISK_TYPE("provisioning-reconfigure-disk-type"),
    
    PROVISIONING_RECONFIGURE_MODIFY_DISK("provisioning-reconfigure-modify-disk"),
    
    PROVISIONING_RECONFIGURE_MODIFY_NETWORK("provisioning-reconfigure-modify-network"),
    
    PROVISIONING_RECONFIGURE_REMOVE_DISK("provisioning-reconfigure-remove-disk"),
    
    PROVISIONING_RECONFIGURE_REMOVE_NETWORK("provisioning-reconfigure-remove-network"),
    
    PROVISIONING_REMOVE_CONTROL("provisioning-remove-control"),
    
    PROVISIONING_SCALE("provisioning-scale"),
    
    PROVISIONING_SETTINGS("provisioning-settings"),
    
    PROVISIONING_STATE("provisioning-state"),
    
    REPORTS("reports"),
    
    REPORTS_ANALYTICS("reports-analytics"),
    
    SCHEDULING_EXECUTE("scheduling-execute"),
    
    SCHEDULING_POWER("scheduling-power"),
    
    SECURITY_SCAN("security-scan"),
    
    SERVICE_CATALOG("service-catalog"),
    
    SERVICE_CATALOG_DASHBOARD("service-catalog-dashboard"),
    
    SERVICE_CATALOG_INVENTORY("service-catalog-inventory"),
    
    SERVICES_ARCHIVES("services-archives"),
    
    SERVICES_CYPHER("services-cypher"),
    
    SERVICES_IMAGE_BUILDER("services-image-builder"),
    
    SERVICES_KUBERNETES("services-kubernetes"),
    
    SERVICES_NETWORK_REGISTRY("services-network-registry"),
    
    SERVICES_VDI_COPY("services-vdi-copy"),
    
    SERVICES_VDI_POOLS("services-vdi-pools"),
    
    SERVICES_VDI_PRINTER("services-vdi-printer"),
    
    SNAPSHOTS("snapshots"),
    
    TASK_SCRIPTS("task-scripts"),
    
    TASKS("tasks"),
    
    TERMINAL("terminal"),
    
    TERMINAL_ACCESS("terminal-access"),
    
    TERRAFORM_TEMPLATE("terraform-template"),
    
    THRESHOLDS("thresholds"),
    
    TRUST_SERVICES("trust-services"),
    
    VIRTUAL_IMAGES("virtual-images");

    private String value;

    PermissionCodeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PermissionCodeEnum fromValue(String value) {
      for (PermissionCodeEnum b : PermissionCodeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PermissionCodeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PermissionCodeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PermissionCodeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PermissionCodeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PERMISSION_CODE = "permissionCode";
  @SerializedName(SERIALIZED_NAME_PERMISSION_CODE)
  private PermissionCodeEnum permissionCode;

  /**
   * The new access level.
   */
  @JsonAdapter(AccessEnum.Adapter.class)
  public enum AccessEnum {
    FULL("full"),
    
    FULL_DECRYPTED("full_decrypted"),
    
    GROUP("group"),
    
    LISTFILES("listfiles"),
    
    MANAGERULES("managerules"),
    
    NO("no"),
    
    NONE("none"),
    
    PROVISION("provision"),
    
    READ("read"),
    
    ROLEMAPPINGS("rolemappings"),
    
    USER("user"),
    
    VIEW("view"),
    
    YES("yes");

    private String value;

    AccessEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AccessEnum fromValue(String value) {
      for (AccessEnum b : AccessEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AccessEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AccessEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AccessEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AccessEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ACCESS = "access";
  @SerializedName(SERIALIZED_NAME_ACCESS)
  private AccessEnum access;


  public RolePermissionFeature permissionCode(PermissionCodeEnum permissionCode) {
    
    this.permissionCode = permissionCode;
    return this;
  }

   /**
   * The code of the feature permission being changed
   * @return permissionCode
  **/
  @ApiModelProperty(required = true, value = "The code of the feature permission being changed")

  public PermissionCodeEnum getPermissionCode() {
    return permissionCode;
  }


  public void setPermissionCode(PermissionCodeEnum permissionCode) {
    this.permissionCode = permissionCode;
  }


  public RolePermissionFeature access(AccessEnum access) {
    
    this.access = access;
    return this;
  }

   /**
   * The new access level.
   * @return access
  **/
  @ApiModelProperty(required = true, value = "The new access level.")

  public AccessEnum getAccess() {
    return access;
  }


  public void setAccess(AccessEnum access) {
    this.access = access;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RolePermissionFeature rolePermissionFeature = (RolePermissionFeature) o;
    return Objects.equals(this.permissionCode, rolePermissionFeature.permissionCode) &&
        Objects.equals(this.access, rolePermissionFeature.access);
  }

  @Override
  public int hashCode() {
    return Objects.hash(permissionCode, access);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RolePermissionFeature {\n");
    sb.append("    permissionCode: ").append(toIndentedString(permissionCode)).append("\n");
    sb.append("    access: ").append(toIndentedString(access)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

