/*
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;

/**
 * CheckSqlConfig
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-21T11:26:47.028Z[GMT]")
public class CheckSqlConfig {
  public static final String SERIALIZED_NAME_DB_HOST = "dbHost";
  @SerializedName(SERIALIZED_NAME_DB_HOST)
  private String dbHost;

  public static final String SERIALIZED_NAME_DB_PORT = "dbPort";
  @SerializedName(SERIALIZED_NAME_DB_PORT)
  private String dbPort;

  public static final String SERIALIZED_NAME_DB_USER = "dbUser";
  @SerializedName(SERIALIZED_NAME_DB_USER)
  private String dbUser;

  public static final String SERIALIZED_NAME_DB_PASSWORD = "dbPassword";
  @SerializedName(SERIALIZED_NAME_DB_PASSWORD)
  private String dbPassword;

  public static final String SERIALIZED_NAME_DB_PASSWORD_HASH = "dbPasswordHash";
  @SerializedName(SERIALIZED_NAME_DB_PASSWORD_HASH)
  private String dbPasswordHash;

  public static final String SERIALIZED_NAME_DB_NAME = "dbName";
  @SerializedName(SERIALIZED_NAME_DB_NAME)
  private String dbName;

  public static final String SERIALIZED_NAME_DB_QUERY = "dbQuery";
  @SerializedName(SERIALIZED_NAME_DB_QUERY)
  private String dbQuery;

  /**
   * Can be set to &#x60;lt&#x60; (less than), &#x60;gt&#x60; (greater than), &#x60;equal&#x60; (Equal to) for comparison
   */
  @JsonAdapter(CheckOperatorEnum.Adapter.class)
  public enum CheckOperatorEnum {
    LT("lt"),
    
    GT("gt"),
    
    EQUAL("equal");

    private String value;

    CheckOperatorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CheckOperatorEnum fromValue(String value) {
      for (CheckOperatorEnum b : CheckOperatorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CheckOperatorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CheckOperatorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CheckOperatorEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CheckOperatorEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CHECK_OPERATOR = "checkOperator";
  @SerializedName(SERIALIZED_NAME_CHECK_OPERATOR)
  private CheckOperatorEnum checkOperator;

  public static final String SERIALIZED_NAME_CHECK_RESULT = "checkResult";
  @SerializedName(SERIALIZED_NAME_CHECK_RESULT)
  private BigDecimal checkResult;

  public static final String SERIALIZED_NAME_CHECK_USER = "checkUser";
  @SerializedName(SERIALIZED_NAME_CHECK_USER)
  private String checkUser;

  public static final String SERIALIZED_NAME_TEXT_CHECK_ON = "textCheckOn";
  @SerializedName(SERIALIZED_NAME_TEXT_CHECK_ON)
  private String textCheckOn;

  public static final String SERIALIZED_NAME_CHECK_PASSWORD = "checkPassword";
  @SerializedName(SERIALIZED_NAME_CHECK_PASSWORD)
  private String checkPassword;

  public static final String SERIALIZED_NAME_WEB_TEXT_MATCH = "webTextMatch";
  @SerializedName(SERIALIZED_NAME_WEB_TEXT_MATCH)
  private String webTextMatch;

  public static final String SERIALIZED_NAME_CHECK_PASSWORD_HASH = "checkPasswordHash";
  @SerializedName(SERIALIZED_NAME_CHECK_PASSWORD_HASH)
  private String checkPasswordHash;

  /**
   * Set to on to turn on tunneling
   */
  @JsonAdapter(TunnelOnEnum.Adapter.class)
  public enum TunnelOnEnum {
    ON("on"),
    
    OFF("off");

    private String value;

    TunnelOnEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TunnelOnEnum fromValue(String value) {
      for (TunnelOnEnum b : TunnelOnEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TunnelOnEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TunnelOnEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TunnelOnEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TunnelOnEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TUNNEL_ON = "tunnelOn";
  @SerializedName(SERIALIZED_NAME_TUNNEL_ON)
  private TunnelOnEnum tunnelOn = TunnelOnEnum.OFF;

  public static final String SERIALIZED_NAME_SSH_HOST = "sshHost";
  @SerializedName(SERIALIZED_NAME_SSH_HOST)
  private String sshHost;

  public static final String SERIALIZED_NAME_SSH_PORT = "sshPort";
  @SerializedName(SERIALIZED_NAME_SSH_PORT)
  private Long sshPort;

  public static final String SERIALIZED_NAME_SSH_USER = "sshUser";
  @SerializedName(SERIALIZED_NAME_SSH_USER)
  private String sshUser;

  public static final String SERIALIZED_NAME_SSH_PASSWORD = "sshPassword";
  @SerializedName(SERIALIZED_NAME_SSH_PASSWORD)
  private String sshPassword;


  public CheckSqlConfig dbHost(String dbHost) {
    
    this.dbHost = dbHost;
    return this;
  }

   /**
   * Hostname or IP address of the database
   * @return dbHost
  **/
  @ApiModelProperty(example = "db.example.org", required = true, value = "Hostname or IP address of the database")

  public String getDbHost() {
    return dbHost;
  }


  public void setDbHost(String dbHost) {
    this.dbHost = dbHost;
  }


  public CheckSqlConfig dbPort(String dbPort) {
    
    this.dbPort = dbPort;
    return this;
  }

   /**
   * Database Port (defaults to default port of DB type selected)
   * @return dbPort
  **/
  @ApiModelProperty(example = "3306", required = true, value = "Database Port (defaults to default port of DB type selected)")

  public String getDbPort() {
    return dbPort;
  }


  public void setDbPort(String dbPort) {
    this.dbPort = dbPort;
  }


  public CheckSqlConfig dbUser(String dbUser) {
    
    this.dbUser = dbUser;
    return this;
  }

   /**
   * Database username
   * @return dbUser
  **/
  @ApiModelProperty(example = "basicUser", required = true, value = "Database username")

  public String getDbUser() {
    return dbUser;
  }


  public void setDbUser(String dbUser) {
    this.dbUser = dbUser;
  }


  public CheckSqlConfig dbPassword(String dbPassword) {
    
    this.dbPassword = dbPassword;
    return this;
  }

   /**
   * Database password, (all check data is encrypted inside the database)
   * @return dbPassword
  **/
  @ApiModelProperty(example = "basicPassword", required = true, value = "Database password, (all check data is encrypted inside the database)")

  public String getDbPassword() {
    return dbPassword;
  }


  public void setDbPassword(String dbPassword) {
    this.dbPassword = dbPassword;
  }


  public CheckSqlConfig dbPasswordHash(String dbPasswordHash) {
    
    this.dbPasswordHash = dbPasswordHash;
    return this;
  }

   /**
   * Database password hash
   * @return dbPasswordHash
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "61236d68c76405c9c7b40838a9c5d120c76e4b222222222221943c0f340f10", value = "Database password hash")

  public String getDbPasswordHash() {
    return dbPasswordHash;
  }


  public void setDbPasswordHash(String dbPasswordHash) {
    this.dbPasswordHash = dbPasswordHash;
  }


  public CheckSqlConfig dbName(String dbName) {
    
    this.dbName = dbName;
    return this;
  }

   /**
   * Database name you would like to connect to
   * @return dbName
  **/
  @ApiModelProperty(example = "testDb", required = true, value = "Database name you would like to connect to")

  public String getDbName() {
    return dbName;
  }


  public void setDbName(String dbName) {
    this.dbName = dbName;
  }


  public CheckSqlConfig dbQuery(String dbQuery) {
    
    this.dbQuery = dbQuery;
    return this;
  }

   /**
   * Query to test
   * @return dbQuery
  **/
  @ApiModelProperty(example = "select 1", required = true, value = "Query to test")

  public String getDbQuery() {
    return dbQuery;
  }


  public void setDbQuery(String dbQuery) {
    this.dbQuery = dbQuery;
  }


  public CheckSqlConfig checkOperator(CheckOperatorEnum checkOperator) {
    
    this.checkOperator = checkOperator;
    return this;
  }

   /**
   * Can be set to &#x60;lt&#x60; (less than), &#x60;gt&#x60; (greater than), &#x60;equal&#x60; (Equal to) for comparison
   * @return checkOperator
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Can be set to `lt` (less than), `gt` (greater than), `equal` (Equal to) for comparison")

  public CheckOperatorEnum getCheckOperator() {
    return checkOperator;
  }


  public void setCheckOperator(CheckOperatorEnum checkOperator) {
    this.checkOperator = checkOperator;
  }


  public CheckSqlConfig checkResult(BigDecimal checkResult) {
    
    this.checkResult = checkResult;
    return this;
  }

   /**
   * Get checkResult
   * @return checkResult
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "3", value = "")

  public BigDecimal getCheckResult() {
    return checkResult;
  }


  public void setCheckResult(BigDecimal checkResult) {
    this.checkResult = checkResult;
  }


  public CheckSqlConfig checkUser(String checkUser) {
    
    this.checkUser = checkUser;
    return this;
  }

   /**
   * Get checkUser
   * @return checkUser
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCheckUser() {
    return checkUser;
  }


  public void setCheckUser(String checkUser) {
    this.checkUser = checkUser;
  }


  public CheckSqlConfig textCheckOn(String textCheckOn) {
    
    this.textCheckOn = textCheckOn;
    return this;
  }

   /**
   * Get textCheckOn
   * @return textCheckOn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTextCheckOn() {
    return textCheckOn;
  }


  public void setTextCheckOn(String textCheckOn) {
    this.textCheckOn = textCheckOn;
  }


  public CheckSqlConfig checkPassword(String checkPassword) {
    
    this.checkPassword = checkPassword;
    return this;
  }

   /**
   * Get checkPassword
   * @return checkPassword
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCheckPassword() {
    return checkPassword;
  }


  public void setCheckPassword(String checkPassword) {
    this.checkPassword = checkPassword;
  }


  public CheckSqlConfig webTextMatch(String webTextMatch) {
    
    this.webTextMatch = webTextMatch;
    return this;
  }

   /**
   * Get webTextMatch
   * @return webTextMatch
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getWebTextMatch() {
    return webTextMatch;
  }


  public void setWebTextMatch(String webTextMatch) {
    this.webTextMatch = webTextMatch;
  }


  public CheckSqlConfig checkPasswordHash(String checkPasswordHash) {
    
    this.checkPasswordHash = checkPasswordHash;
    return this;
  }

   /**
   * Get checkPasswordHash
   * @return checkPasswordHash
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCheckPasswordHash() {
    return checkPasswordHash;
  }


  public void setCheckPasswordHash(String checkPasswordHash) {
    this.checkPasswordHash = checkPasswordHash;
  }


  public CheckSqlConfig tunnelOn(TunnelOnEnum tunnelOn) {
    
    this.tunnelOn = tunnelOn;
    return this;
  }

   /**
   * Set to on to turn on tunneling
   * @return tunnelOn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Set to on to turn on tunneling")

  public TunnelOnEnum getTunnelOn() {
    return tunnelOn;
  }


  public void setTunnelOn(TunnelOnEnum tunnelOn) {
    this.tunnelOn = tunnelOn;
  }


  public CheckSqlConfig sshHost(String sshHost) {
    
    this.sshHost = sshHost;
    return this;
  }

   /**
   * Hostname or IP address of the proxy host
   * @return sshHost
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Hostname or IP address of the proxy host")

  public String getSshHost() {
    return sshHost;
  }


  public void setSshHost(String sshHost) {
    this.sshHost = sshHost;
  }


  public CheckSqlConfig sshPort(Long sshPort) {
    
    this.sshPort = sshPort;
    return this;
  }

   /**
   * Port for SSH on the proxy host, defaults to 22
   * @return sshPort
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Port for SSH on the proxy host, defaults to 22")

  public Long getSshPort() {
    return sshPort;
  }


  public void setSshPort(Long sshPort) {
    this.sshPort = sshPort;
  }


  public CheckSqlConfig sshUser(String sshUser) {
    
    this.sshUser = sshUser;
    return this;
  }

   /**
   * SSH user on the proxy host to login as
   * @return sshUser
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "SSH user on the proxy host to login as")

  public String getSshUser() {
    return sshUser;
  }


  public void setSshUser(String sshUser) {
    this.sshUser = sshUser;
  }


  public CheckSqlConfig sshPassword(String sshPassword) {
    
    this.sshPassword = sshPassword;
    return this;
  }

   /**
   * Password for user, if not using key based authentication
   * @return sshPassword
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Password for user, if not using key based authentication")

  public String getSshPassword() {
    return sshPassword;
  }


  public void setSshPassword(String sshPassword) {
    this.sshPassword = sshPassword;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CheckSqlConfig checkSqlConfig = (CheckSqlConfig) o;
    return Objects.equals(this.dbHost, checkSqlConfig.dbHost) &&
        Objects.equals(this.dbPort, checkSqlConfig.dbPort) &&
        Objects.equals(this.dbUser, checkSqlConfig.dbUser) &&
        Objects.equals(this.dbPassword, checkSqlConfig.dbPassword) &&
        Objects.equals(this.dbPasswordHash, checkSqlConfig.dbPasswordHash) &&
        Objects.equals(this.dbName, checkSqlConfig.dbName) &&
        Objects.equals(this.dbQuery, checkSqlConfig.dbQuery) &&
        Objects.equals(this.checkOperator, checkSqlConfig.checkOperator) &&
        Objects.equals(this.checkResult, checkSqlConfig.checkResult) &&
        Objects.equals(this.checkUser, checkSqlConfig.checkUser) &&
        Objects.equals(this.textCheckOn, checkSqlConfig.textCheckOn) &&
        Objects.equals(this.checkPassword, checkSqlConfig.checkPassword) &&
        Objects.equals(this.webTextMatch, checkSqlConfig.webTextMatch) &&
        Objects.equals(this.checkPasswordHash, checkSqlConfig.checkPasswordHash) &&
        Objects.equals(this.tunnelOn, checkSqlConfig.tunnelOn) &&
        Objects.equals(this.sshHost, checkSqlConfig.sshHost) &&
        Objects.equals(this.sshPort, checkSqlConfig.sshPort) &&
        Objects.equals(this.sshUser, checkSqlConfig.sshUser) &&
        Objects.equals(this.sshPassword, checkSqlConfig.sshPassword);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dbHost, dbPort, dbUser, dbPassword, dbPasswordHash, dbName, dbQuery, checkOperator, checkResult, checkUser, textCheckOn, checkPassword, webTextMatch, checkPasswordHash, tunnelOn, sshHost, sshPort, sshUser, sshPassword);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CheckSqlConfig {\n");
    sb.append("    dbHost: ").append(toIndentedString(dbHost)).append("\n");
    sb.append("    dbPort: ").append(toIndentedString(dbPort)).append("\n");
    sb.append("    dbUser: ").append(toIndentedString(dbUser)).append("\n");
    sb.append("    dbPassword: ").append(toIndentedString(dbPassword)).append("\n");
    sb.append("    dbPasswordHash: ").append(toIndentedString(dbPasswordHash)).append("\n");
    sb.append("    dbName: ").append(toIndentedString(dbName)).append("\n");
    sb.append("    dbQuery: ").append(toIndentedString(dbQuery)).append("\n");
    sb.append("    checkOperator: ").append(toIndentedString(checkOperator)).append("\n");
    sb.append("    checkResult: ").append(toIndentedString(checkResult)).append("\n");
    sb.append("    checkUser: ").append(toIndentedString(checkUser)).append("\n");
    sb.append("    textCheckOn: ").append(toIndentedString(textCheckOn)).append("\n");
    sb.append("    checkPassword: ").append(toIndentedString(checkPassword)).append("\n");
    sb.append("    webTextMatch: ").append(toIndentedString(webTextMatch)).append("\n");
    sb.append("    checkPasswordHash: ").append(toIndentedString(checkPasswordHash)).append("\n");
    sb.append("    tunnelOn: ").append(toIndentedString(tunnelOn)).append("\n");
    sb.append("    sshHost: ").append(toIndentedString(sshHost)).append("\n");
    sb.append("    sshPort: ").append(toIndentedString(sshPort)).append("\n");
    sb.append("    sshUser: ").append(toIndentedString(sshUser)).append("\n");
    sb.append("    sshPassword: ").append(toIndentedString(sshPassword)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

