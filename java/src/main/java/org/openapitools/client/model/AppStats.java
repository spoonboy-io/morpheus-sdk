/*
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.1.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AppStats
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-17T13:37:08.123540Z[Etc/UTC]")
public class AppStats {
  public static final String SERIALIZED_NAME_USED_MEMORY = "usedMemory";
  @SerializedName(SERIALIZED_NAME_USED_MEMORY)
  private Long usedMemory;

  public static final String SERIALIZED_NAME_MAX_MEMORY = "maxMemory";
  @SerializedName(SERIALIZED_NAME_MAX_MEMORY)
  private Long maxMemory;

  public static final String SERIALIZED_NAME_USED_STORAGE = "usedStorage";
  @SerializedName(SERIALIZED_NAME_USED_STORAGE)
  private Long usedStorage;

  public static final String SERIALIZED_NAME_MAX_STORAGE = "maxStorage";
  @SerializedName(SERIALIZED_NAME_MAX_STORAGE)
  private Long maxStorage;

  public static final String SERIALIZED_NAME_RUNNING = "running";
  @SerializedName(SERIALIZED_NAME_RUNNING)
  private Long running;

  public static final String SERIALIZED_NAME_TOTAL = "total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  private Long total;

  public static final String SERIALIZED_NAME_CPU_USAGE = "cpuUsage";
  @SerializedName(SERIALIZED_NAME_CPU_USAGE)
  private BigDecimal cpuUsage;

  public static final String SERIALIZED_NAME_INSTANCE_COUNT = "instanceCount";
  @SerializedName(SERIALIZED_NAME_INSTANCE_COUNT)
  private Long instanceCount;

  public static final String SERIALIZED_NAME_INSTANCE_DAY_COUNT = "instanceDayCount";
  @SerializedName(SERIALIZED_NAME_INSTANCE_DAY_COUNT)
  private List<Long> instanceDayCount;

  public static final String SERIALIZED_NAME_INSTANCE_DAY_COUNT_TOTAL = "instanceDayCountTotal";
  @SerializedName(SERIALIZED_NAME_INSTANCE_DAY_COUNT_TOTAL)
  private Long instanceDayCountTotal;

  public AppStats() {
  }

  public AppStats usedMemory(Long usedMemory) {
    
    this.usedMemory = usedMemory;
    return this;
  }

   /**
   * Get usedMemory
   * @return usedMemory
  **/
  @javax.annotation.Nullable
  public Long getUsedMemory() {
    return usedMemory;
  }


  public void setUsedMemory(Long usedMemory) {
    this.usedMemory = usedMemory;
  }


  public AppStats maxMemory(Long maxMemory) {
    
    this.maxMemory = maxMemory;
    return this;
  }

   /**
   * Get maxMemory
   * @return maxMemory
  **/
  @javax.annotation.Nullable
  public Long getMaxMemory() {
    return maxMemory;
  }


  public void setMaxMemory(Long maxMemory) {
    this.maxMemory = maxMemory;
  }


  public AppStats usedStorage(Long usedStorage) {
    
    this.usedStorage = usedStorage;
    return this;
  }

   /**
   * Get usedStorage
   * @return usedStorage
  **/
  @javax.annotation.Nullable
  public Long getUsedStorage() {
    return usedStorage;
  }


  public void setUsedStorage(Long usedStorage) {
    this.usedStorage = usedStorage;
  }


  public AppStats maxStorage(Long maxStorage) {
    
    this.maxStorage = maxStorage;
    return this;
  }

   /**
   * Get maxStorage
   * @return maxStorage
  **/
  @javax.annotation.Nullable
  public Long getMaxStorage() {
    return maxStorage;
  }


  public void setMaxStorage(Long maxStorage) {
    this.maxStorage = maxStorage;
  }


  public AppStats running(Long running) {
    
    this.running = running;
    return this;
  }

   /**
   * Get running
   * @return running
  **/
  @javax.annotation.Nullable
  public Long getRunning() {
    return running;
  }


  public void setRunning(Long running) {
    this.running = running;
  }


  public AppStats total(Long total) {
    
    this.total = total;
    return this;
  }

   /**
   * Get total
   * @return total
  **/
  @javax.annotation.Nullable
  public Long getTotal() {
    return total;
  }


  public void setTotal(Long total) {
    this.total = total;
  }


  public AppStats cpuUsage(BigDecimal cpuUsage) {
    
    this.cpuUsage = cpuUsage;
    return this;
  }

   /**
   * Get cpuUsage
   * @return cpuUsage
  **/
  @javax.annotation.Nullable
  public BigDecimal getCpuUsage() {
    return cpuUsage;
  }


  public void setCpuUsage(BigDecimal cpuUsage) {
    this.cpuUsage = cpuUsage;
  }


  public AppStats instanceCount(Long instanceCount) {
    
    this.instanceCount = instanceCount;
    return this;
  }

   /**
   * Get instanceCount
   * @return instanceCount
  **/
  @javax.annotation.Nullable
  public Long getInstanceCount() {
    return instanceCount;
  }


  public void setInstanceCount(Long instanceCount) {
    this.instanceCount = instanceCount;
  }


  public AppStats instanceDayCount(List<Long> instanceDayCount) {
    
    this.instanceDayCount = instanceDayCount;
    return this;
  }

  public AppStats addInstanceDayCountItem(Long instanceDayCountItem) {
    if (this.instanceDayCount == null) {
      this.instanceDayCount = new ArrayList<>();
    }
    this.instanceDayCount.add(instanceDayCountItem);
    return this;
  }

   /**
   * Get instanceDayCount
   * @return instanceDayCount
  **/
  @javax.annotation.Nullable
  public List<Long> getInstanceDayCount() {
    return instanceDayCount;
  }


  public void setInstanceDayCount(List<Long> instanceDayCount) {
    this.instanceDayCount = instanceDayCount;
  }


  public AppStats instanceDayCountTotal(Long instanceDayCountTotal) {
    
    this.instanceDayCountTotal = instanceDayCountTotal;
    return this;
  }

   /**
   * Get instanceDayCountTotal
   * @return instanceDayCountTotal
  **/
  @javax.annotation.Nullable
  public Long getInstanceDayCountTotal() {
    return instanceDayCountTotal;
  }


  public void setInstanceDayCountTotal(Long instanceDayCountTotal) {
    this.instanceDayCountTotal = instanceDayCountTotal;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AppStats appStats = (AppStats) o;
    return Objects.equals(this.usedMemory, appStats.usedMemory) &&
        Objects.equals(this.maxMemory, appStats.maxMemory) &&
        Objects.equals(this.usedStorage, appStats.usedStorage) &&
        Objects.equals(this.maxStorage, appStats.maxStorage) &&
        Objects.equals(this.running, appStats.running) &&
        Objects.equals(this.total, appStats.total) &&
        Objects.equals(this.cpuUsage, appStats.cpuUsage) &&
        Objects.equals(this.instanceCount, appStats.instanceCount) &&
        Objects.equals(this.instanceDayCount, appStats.instanceDayCount) &&
        Objects.equals(this.instanceDayCountTotal, appStats.instanceDayCountTotal);
  }

  @Override
  public int hashCode() {
    return Objects.hash(usedMemory, maxMemory, usedStorage, maxStorage, running, total, cpuUsage, instanceCount, instanceDayCount, instanceDayCountTotal);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AppStats {\n");
    sb.append("    usedMemory: ").append(toIndentedString(usedMemory)).append("\n");
    sb.append("    maxMemory: ").append(toIndentedString(maxMemory)).append("\n");
    sb.append("    usedStorage: ").append(toIndentedString(usedStorage)).append("\n");
    sb.append("    maxStorage: ").append(toIndentedString(maxStorage)).append("\n");
    sb.append("    running: ").append(toIndentedString(running)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("    cpuUsage: ").append(toIndentedString(cpuUsage)).append("\n");
    sb.append("    instanceCount: ").append(toIndentedString(instanceCount)).append("\n");
    sb.append("    instanceDayCount: ").append(toIndentedString(instanceDayCount)).append("\n");
    sb.append("    instanceDayCountTotal: ").append(toIndentedString(instanceDayCountTotal)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("usedMemory");
    openapiFields.add("maxMemory");
    openapiFields.add("usedStorage");
    openapiFields.add("maxStorage");
    openapiFields.add("running");
    openapiFields.add("total");
    openapiFields.add("cpuUsage");
    openapiFields.add("instanceCount");
    openapiFields.add("instanceDayCount");
    openapiFields.add("instanceDayCountTotal");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to AppStats
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AppStats.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AppStats is not found in the empty JSON string", AppStats.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!AppStats.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AppStats` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("instanceDayCount") != null && !jsonObj.get("instanceDayCount").isJsonNull() && !jsonObj.get("instanceDayCount").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `instanceDayCount` to be an array in the JSON string but got `%s`", jsonObj.get("instanceDayCount").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AppStats.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AppStats' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AppStats> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AppStats.class));

       return (TypeAdapter<T>) new TypeAdapter<AppStats>() {
           @Override
           public void write(JsonWriter out, AppStats value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AppStats read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AppStats given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AppStats
  * @throws IOException if the JSON string is invalid with respect to AppStats
  */
  public static AppStats fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AppStats.class);
  }

 /**
  * Convert an instance of AppStats to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

