/*
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.1.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BillingInstancesInstancesInnerContainersInnerUsagesInnerApplicablePricesInnerPricesInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-17T13:37:08.123540Z[Etc/UTC]")
public class BillingInstancesInstancesInnerContainersInnerUsagesInnerApplicablePricesInnerPricesInner {
  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_PRICE_PER_UNIT = "pricePerUnit";
  @SerializedName(SERIALIZED_NAME_PRICE_PER_UNIT)
  private BigDecimal pricePerUnit;

  public static final String SERIALIZED_NAME_COST_PER_UNIT = "costPerUnit";
  @SerializedName(SERIALIZED_NAME_COST_PER_UNIT)
  private BigDecimal costPerUnit;

  public static final String SERIALIZED_NAME_COST = "cost";
  @SerializedName(SERIALIZED_NAME_COST)
  private BigDecimal cost;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private BigDecimal price;

  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private Long quantity;

  public BillingInstancesInstancesInnerContainersInnerUsagesInnerApplicablePricesInnerPricesInner() {
  }

  public BillingInstancesInstancesInnerContainersInnerUsagesInnerApplicablePricesInnerPricesInner type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }


  public void setType(String type) {
    this.type = type;
  }


  public BillingInstancesInstancesInnerContainersInnerUsagesInnerApplicablePricesInnerPricesInner pricePerUnit(BigDecimal pricePerUnit) {
    
    this.pricePerUnit = pricePerUnit;
    return this;
  }

   /**
   * Get pricePerUnit
   * @return pricePerUnit
  **/
  @javax.annotation.Nullable
  public BigDecimal getPricePerUnit() {
    return pricePerUnit;
  }


  public void setPricePerUnit(BigDecimal pricePerUnit) {
    this.pricePerUnit = pricePerUnit;
  }


  public BillingInstancesInstancesInnerContainersInnerUsagesInnerApplicablePricesInnerPricesInner costPerUnit(BigDecimal costPerUnit) {
    
    this.costPerUnit = costPerUnit;
    return this;
  }

   /**
   * Get costPerUnit
   * @return costPerUnit
  **/
  @javax.annotation.Nullable
  public BigDecimal getCostPerUnit() {
    return costPerUnit;
  }


  public void setCostPerUnit(BigDecimal costPerUnit) {
    this.costPerUnit = costPerUnit;
  }


  public BillingInstancesInstancesInnerContainersInnerUsagesInnerApplicablePricesInnerPricesInner cost(BigDecimal cost) {
    
    this.cost = cost;
    return this;
  }

   /**
   * Get cost
   * @return cost
  **/
  @javax.annotation.Nullable
  public BigDecimal getCost() {
    return cost;
  }


  public void setCost(BigDecimal cost) {
    this.cost = cost;
  }


  public BillingInstancesInstancesInnerContainersInnerUsagesInnerApplicablePricesInnerPricesInner price(BigDecimal price) {
    
    this.price = price;
    return this;
  }

   /**
   * Get price
   * @return price
  **/
  @javax.annotation.Nullable
  public BigDecimal getPrice() {
    return price;
  }


  public void setPrice(BigDecimal price) {
    this.price = price;
  }


  public BillingInstancesInstancesInnerContainersInnerUsagesInnerApplicablePricesInnerPricesInner quantity(Long quantity) {
    
    this.quantity = quantity;
    return this;
  }

   /**
   * Get quantity
   * @return quantity
  **/
  @javax.annotation.Nullable
  public Long getQuantity() {
    return quantity;
  }


  public void setQuantity(Long quantity) {
    this.quantity = quantity;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BillingInstancesInstancesInnerContainersInnerUsagesInnerApplicablePricesInnerPricesInner billingInstancesInstancesInnerContainersInnerUsagesInnerApplicablePricesInnerPricesInner = (BillingInstancesInstancesInnerContainersInnerUsagesInnerApplicablePricesInnerPricesInner) o;
    return Objects.equals(this.type, billingInstancesInstancesInnerContainersInnerUsagesInnerApplicablePricesInnerPricesInner.type) &&
        Objects.equals(this.pricePerUnit, billingInstancesInstancesInnerContainersInnerUsagesInnerApplicablePricesInnerPricesInner.pricePerUnit) &&
        Objects.equals(this.costPerUnit, billingInstancesInstancesInnerContainersInnerUsagesInnerApplicablePricesInnerPricesInner.costPerUnit) &&
        Objects.equals(this.cost, billingInstancesInstancesInnerContainersInnerUsagesInnerApplicablePricesInnerPricesInner.cost) &&
        Objects.equals(this.price, billingInstancesInstancesInnerContainersInnerUsagesInnerApplicablePricesInnerPricesInner.price) &&
        Objects.equals(this.quantity, billingInstancesInstancesInnerContainersInnerUsagesInnerApplicablePricesInnerPricesInner.quantity);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, pricePerUnit, costPerUnit, cost, price, quantity);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BillingInstancesInstancesInnerContainersInnerUsagesInnerApplicablePricesInnerPricesInner {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    pricePerUnit: ").append(toIndentedString(pricePerUnit)).append("\n");
    sb.append("    costPerUnit: ").append(toIndentedString(costPerUnit)).append("\n");
    sb.append("    cost: ").append(toIndentedString(cost)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("type");
    openapiFields.add("pricePerUnit");
    openapiFields.add("costPerUnit");
    openapiFields.add("cost");
    openapiFields.add("price");
    openapiFields.add("quantity");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to BillingInstancesInstancesInnerContainersInnerUsagesInnerApplicablePricesInnerPricesInner
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BillingInstancesInstancesInnerContainersInnerUsagesInnerApplicablePricesInnerPricesInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BillingInstancesInstancesInnerContainersInnerUsagesInnerApplicablePricesInnerPricesInner is not found in the empty JSON string", BillingInstancesInstancesInnerContainersInnerUsagesInnerApplicablePricesInnerPricesInner.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!BillingInstancesInstancesInnerContainersInnerUsagesInnerApplicablePricesInnerPricesInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BillingInstancesInstancesInnerContainersInnerUsagesInnerApplicablePricesInnerPricesInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BillingInstancesInstancesInnerContainersInnerUsagesInnerApplicablePricesInnerPricesInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BillingInstancesInstancesInnerContainersInnerUsagesInnerApplicablePricesInnerPricesInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BillingInstancesInstancesInnerContainersInnerUsagesInnerApplicablePricesInnerPricesInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BillingInstancesInstancesInnerContainersInnerUsagesInnerApplicablePricesInnerPricesInner.class));

       return (TypeAdapter<T>) new TypeAdapter<BillingInstancesInstancesInnerContainersInnerUsagesInnerApplicablePricesInnerPricesInner>() {
           @Override
           public void write(JsonWriter out, BillingInstancesInstancesInnerContainersInnerUsagesInnerApplicablePricesInnerPricesInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BillingInstancesInstancesInnerContainersInnerUsagesInnerApplicablePricesInnerPricesInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BillingInstancesInstancesInnerContainersInnerUsagesInnerApplicablePricesInnerPricesInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BillingInstancesInstancesInnerContainersInnerUsagesInnerApplicablePricesInnerPricesInner
  * @throws IOException if the JSON string is invalid with respect to BillingInstancesInstancesInnerContainersInnerUsagesInnerApplicablePricesInnerPricesInner
  */
  public static BillingInstancesInstancesInnerContainersInnerUsagesInnerApplicablePricesInnerPricesInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BillingInstancesInstancesInnerContainersInnerUsagesInnerApplicablePricesInnerPricesInner.class);
  }

 /**
  * Convert an instance of BillingInstancesInstancesInnerContainersInnerUsagesInnerApplicablePricesInnerPricesInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

