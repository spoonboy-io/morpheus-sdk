/*
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * ApiServersIdResizeServicePlanOptions
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-21T11:26:47.028Z[GMT]")
public class ApiServersIdResizeServicePlanOptions {
  public static final String SERIALIZED_NAME_MAX_CORES = "maxCores";
  @SerializedName(SERIALIZED_NAME_MAX_CORES)
  private Long maxCores;

  public static final String SERIALIZED_NAME_CORES_PER_SOCKET = "coresPerSocket";
  @SerializedName(SERIALIZED_NAME_CORES_PER_SOCKET)
  private Long coresPerSocket;

  public static final String SERIALIZED_NAME_MAX_MEMORY = "maxMemory";
  @SerializedName(SERIALIZED_NAME_MAX_MEMORY)
  private Long maxMemory;


  public ApiServersIdResizeServicePlanOptions maxCores(Long maxCores) {
    
    this.maxCores = maxCores;
    return this;
  }

   /**
   * Core Count
   * @return maxCores
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Core Count")

  public Long getMaxCores() {
    return maxCores;
  }


  public void setMaxCores(Long maxCores) {
    this.maxCores = maxCores;
  }


  public ApiServersIdResizeServicePlanOptions coresPerSocket(Long coresPerSocket) {
    
    this.coresPerSocket = coresPerSocket;
    return this;
  }

   /**
   * Cores Per Socket
   * @return coresPerSocket
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Cores Per Socket")

  public Long getCoresPerSocket() {
    return coresPerSocket;
  }


  public void setCoresPerSocket(Long coresPerSocket) {
    this.coresPerSocket = coresPerSocket;
  }


  public ApiServersIdResizeServicePlanOptions maxMemory(Long maxMemory) {
    
    this.maxMemory = maxMemory;
    return this;
  }

   /**
   * Memory in bytes For backwards compatability, values less than 1048576 are treated as being in MB and will be converted to bytes
   * @return maxMemory
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Memory in bytes For backwards compatability, values less than 1048576 are treated as being in MB and will be converted to bytes")

  public Long getMaxMemory() {
    return maxMemory;
  }


  public void setMaxMemory(Long maxMemory) {
    this.maxMemory = maxMemory;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApiServersIdResizeServicePlanOptions apiServersIdResizeServicePlanOptions = (ApiServersIdResizeServicePlanOptions) o;
    return Objects.equals(this.maxCores, apiServersIdResizeServicePlanOptions.maxCores) &&
        Objects.equals(this.coresPerSocket, apiServersIdResizeServicePlanOptions.coresPerSocket) &&
        Objects.equals(this.maxMemory, apiServersIdResizeServicePlanOptions.maxMemory);
  }

  @Override
  public int hashCode() {
    return Objects.hash(maxCores, coresPerSocket, maxMemory);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApiServersIdResizeServicePlanOptions {\n");
    sb.append("    maxCores: ").append(toIndentedString(maxCores)).append("\n");
    sb.append("    coresPerSocket: ").append(toIndentedString(coresPerSocket)).append("\n");
    sb.append("    maxMemory: ").append(toIndentedString(maxMemory)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

