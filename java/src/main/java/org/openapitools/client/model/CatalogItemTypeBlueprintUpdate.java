/*
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.CatalogItemTypeBlueprintCreateBlueprint;

/**
 * CatalogItemTypeBlueprintUpdate
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-21T11:26:47.028Z[GMT]")
public class CatalogItemTypeBlueprintUpdate {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private String category;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private List<String> labels = null;

  /**
   * Type, &#x60;instance&#x60;, &#x60;blueprint&#x60; or &#x60;workflow&#x60;. This determines whether an Instance or App will be provisioned. Instance types require a config and blueprint requires a blueprint and appSpec, while workflow types requires a workflow and context.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    BLUEPRINT("blueprint");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_VISIBILITY = "visibility";
  @SerializedName(SERIALIZED_NAME_VISIBILITY)
  private String visibility = "private";

  public static final String SERIALIZED_NAME_LAYOUT_CODE = "layoutCode";
  @SerializedName(SERIALIZED_NAME_LAYOUT_CODE)
  private String layoutCode;

  public static final String SERIALIZED_NAME_ICON_PATH = "iconPath";
  @SerializedName(SERIALIZED_NAME_ICON_PATH)
  private String iconPath;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled = true;

  public static final String SERIALIZED_NAME_FEATURED = "featured";
  @SerializedName(SERIALIZED_NAME_FEATURED)
  private Boolean featured = false;

  public static final String SERIALIZED_NAME_ALLOW_QUANTITY = "allowQuantity";
  @SerializedName(SERIALIZED_NAME_ALLOW_QUANTITY)
  private Boolean allowQuantity = false;

  public static final String SERIALIZED_NAME_BLUEPRINT = "blueprint";
  @SerializedName(SERIALIZED_NAME_BLUEPRINT)
  private CatalogItemTypeBlueprintCreateBlueprint blueprint;

  public static final String SERIALIZED_NAME_APP_SPEC = "appSpec";
  @SerializedName(SERIALIZED_NAME_APP_SPEC)
  private String appSpec;

  public static final String SERIALIZED_NAME_OPTION_TYPES = "optionTypes";
  @SerializedName(SERIALIZED_NAME_OPTION_TYPES)
  private List<Long> optionTypes = null;


  public CatalogItemTypeBlueprintUpdate name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Catalog Item Type name
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Catalog Item Type name")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public CatalogItemTypeBlueprintUpdate code(String code) {
    
    this.code = code;
    return this;
  }

   /**
   * Useful shortcode for provisioning naming schemes and export reference.
   * @return code
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Useful shortcode for provisioning naming schemes and export reference.")

  public String getCode() {
    return code;
  }


  public void setCode(String code) {
    this.code = code;
  }


  public CatalogItemTypeBlueprintUpdate category(String category) {
    
    this.category = category;
    return this;
  }

   /**
   * Catalog Item Type category
   * @return category
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Catalog Item Type category")

  public String getCategory() {
    return category;
  }


  public void setCategory(String category) {
    this.category = category;
  }


  public CatalogItemTypeBlueprintUpdate description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Catalog Item Type description
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Catalog Item Type description")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public CatalogItemTypeBlueprintUpdate labels(List<String> labels) {
    
    this.labels = labels;
    return this;
  }

  public CatalogItemTypeBlueprintUpdate addLabelsItem(String labelsItem) {
    if (this.labels == null) {
      this.labels = new ArrayList<String>();
    }
    this.labels.add(labelsItem);
    return this;
  }

   /**
   * Array of label strings, can be used for filtering.
   * @return labels
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Array of label strings, can be used for filtering.")

  public List<String> getLabels() {
    return labels;
  }


  public void setLabels(List<String> labels) {
    this.labels = labels;
  }


  public CatalogItemTypeBlueprintUpdate type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * Type, &#x60;instance&#x60;, &#x60;blueprint&#x60; or &#x60;workflow&#x60;. This determines whether an Instance or App will be provisioned. Instance types require a config and blueprint requires a blueprint and appSpec, while workflow types requires a workflow and context.
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Type, `instance`, `blueprint` or `workflow`. This determines whether an Instance or App will be provisioned. Instance types require a config and blueprint requires a blueprint and appSpec, while workflow types requires a workflow and context.")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    this.type = type;
  }


  public CatalogItemTypeBlueprintUpdate visibility(String visibility) {
    
    this.visibility = visibility;
    return this;
  }

   /**
   * Visibility - Set to public to allow all tenants
   * @return visibility
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Visibility - Set to public to allow all tenants")

  public String getVisibility() {
    return visibility;
  }


  public void setVisibility(String visibility) {
    this.visibility = visibility;
  }


  public CatalogItemTypeBlueprintUpdate layoutCode(String layoutCode) {
    
    this.layoutCode = layoutCode;
    return this;
  }

   /**
   * Identifier primarily used for Plugin Catalog Item Types
   * @return layoutCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Identifier primarily used for Plugin Catalog Item Types")

  public String getLayoutCode() {
    return layoutCode;
  }


  public void setLayoutCode(String layoutCode) {
    this.layoutCode = layoutCode;
  }


  public CatalogItemTypeBlueprintUpdate iconPath(String iconPath) {
    
    this.iconPath = iconPath;
    return this;
  }

   /**
   * Icon Path, relative location of an icon image, eg. /assets/containers-png/nginx.png.
   * @return iconPath
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Icon Path, relative location of an icon image, eg. /assets/containers-png/nginx.png.")

  public String getIconPath() {
    return iconPath;
  }


  public void setIconPath(String iconPath) {
    this.iconPath = iconPath;
  }


  public CatalogItemTypeBlueprintUpdate enabled(Boolean enabled) {
    
    this.enabled = enabled;
    return this;
  }

   /**
   * Can be used to enable / disable the catalog item type.
   * @return enabled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Can be used to enable / disable the catalog item type.")

  public Boolean getEnabled() {
    return enabled;
  }


  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public CatalogItemTypeBlueprintUpdate featured(Boolean featured) {
    
    this.featured = featured;
    return this;
  }

   /**
   * Can be used to feature the catalog item type.
   * @return featured
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Can be used to feature the catalog item type.")

  public Boolean getFeatured() {
    return featured;
  }


  public void setFeatured(Boolean featured) {
    this.featured = featured;
  }


  public CatalogItemTypeBlueprintUpdate allowQuantity(Boolean allowQuantity) {
    
    this.allowQuantity = allowQuantity;
    return this;
  }

   /**
   * Can users order more than one of this item at a time.
   * @return allowQuantity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Can users order more than one of this item at a time.")

  public Boolean getAllowQuantity() {
    return allowQuantity;
  }


  public void setAllowQuantity(Boolean allowQuantity) {
    this.allowQuantity = allowQuantity;
  }


  public CatalogItemTypeBlueprintUpdate blueprint(CatalogItemTypeBlueprintCreateBlueprint blueprint) {
    
    this.blueprint = blueprint;
    return this;
  }

   /**
   * Get blueprint
   * @return blueprint
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CatalogItemTypeBlueprintCreateBlueprint getBlueprint() {
    return blueprint;
  }


  public void setBlueprint(CatalogItemTypeBlueprintCreateBlueprint blueprint) {
    this.blueprint = blueprint;
  }


  public CatalogItemTypeBlueprintUpdate appSpec(String appSpec) {
    
    this.appSpec = appSpec;
    return this;
  }

   /**
   * The appSpec for blueprint type catalog items is a string in the Scribe YAML format with fields
   * @return appSpec
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The appSpec for blueprint type catalog items is a string in the Scribe YAML format with fields")

  public String getAppSpec() {
    return appSpec;
  }


  public void setAppSpec(String appSpec) {
    this.appSpec = appSpec;
  }


  public CatalogItemTypeBlueprintUpdate optionTypes(List<Long> optionTypes) {
    
    this.optionTypes = optionTypes;
    return this;
  }

  public CatalogItemTypeBlueprintUpdate addOptionTypesItem(Long optionTypesItem) {
    if (this.optionTypes == null) {
      this.optionTypes = new ArrayList<Long>();
    }
    this.optionTypes.add(optionTypesItem);
    return this;
  }

   /**
   * Array of option type IDs, see Inputs. Only applies to type instance and blueprint.
   * @return optionTypes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Array of option type IDs, see Inputs. Only applies to type instance and blueprint.")

  public List<Long> getOptionTypes() {
    return optionTypes;
  }


  public void setOptionTypes(List<Long> optionTypes) {
    this.optionTypes = optionTypes;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CatalogItemTypeBlueprintUpdate catalogItemTypeBlueprintUpdate = (CatalogItemTypeBlueprintUpdate) o;
    return Objects.equals(this.name, catalogItemTypeBlueprintUpdate.name) &&
        Objects.equals(this.code, catalogItemTypeBlueprintUpdate.code) &&
        Objects.equals(this.category, catalogItemTypeBlueprintUpdate.category) &&
        Objects.equals(this.description, catalogItemTypeBlueprintUpdate.description) &&
        Objects.equals(this.labels, catalogItemTypeBlueprintUpdate.labels) &&
        Objects.equals(this.type, catalogItemTypeBlueprintUpdate.type) &&
        Objects.equals(this.visibility, catalogItemTypeBlueprintUpdate.visibility) &&
        Objects.equals(this.layoutCode, catalogItemTypeBlueprintUpdate.layoutCode) &&
        Objects.equals(this.iconPath, catalogItemTypeBlueprintUpdate.iconPath) &&
        Objects.equals(this.enabled, catalogItemTypeBlueprintUpdate.enabled) &&
        Objects.equals(this.featured, catalogItemTypeBlueprintUpdate.featured) &&
        Objects.equals(this.allowQuantity, catalogItemTypeBlueprintUpdate.allowQuantity) &&
        Objects.equals(this.blueprint, catalogItemTypeBlueprintUpdate.blueprint) &&
        Objects.equals(this.appSpec, catalogItemTypeBlueprintUpdate.appSpec) &&
        Objects.equals(this.optionTypes, catalogItemTypeBlueprintUpdate.optionTypes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, code, category, description, labels, type, visibility, layoutCode, iconPath, enabled, featured, allowQuantity, blueprint, appSpec, optionTypes);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CatalogItemTypeBlueprintUpdate {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    visibility: ").append(toIndentedString(visibility)).append("\n");
    sb.append("    layoutCode: ").append(toIndentedString(layoutCode)).append("\n");
    sb.append("    iconPath: ").append(toIndentedString(iconPath)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    featured: ").append(toIndentedString(featured)).append("\n");
    sb.append("    allowQuantity: ").append(toIndentedString(allowQuantity)).append("\n");
    sb.append("    blueprint: ").append(toIndentedString(blueprint)).append("\n");
    sb.append("    appSpec: ").append(toIndentedString(appSpec)).append("\n");
    sb.append("    optionTypes: ").append(toIndentedString(optionTypes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

