/*
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * CredentialOauth2ConfigConfig
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-21T11:26:47.028Z[GMT]")
public class CredentialOauth2ConfigConfig {
  /**
   * OAuth 2.0 grant type
   */
  @JsonAdapter(GrantTypeEnum.Adapter.class)
  public enum GrantTypeEnum {
    PASSWORD("password"),
    
    CLIENT_CREDENTIALS("client_credentials");

    private String value;

    GrantTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GrantTypeEnum fromValue(String value) {
      for (GrantTypeEnum b : GrantTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<GrantTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GrantTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GrantTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return GrantTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_GRANT_TYPE = "grantType";
  @SerializedName(SERIALIZED_NAME_GRANT_TYPE)
  private GrantTypeEnum grantType;

  public static final String SERIALIZED_NAME_ACCESS_TOKEN_URL = "accessTokenUrl";
  @SerializedName(SERIALIZED_NAME_ACCESS_TOKEN_URL)
  private String accessTokenUrl;

  public static final String SERIALIZED_NAME_CLIENT_ID = "clientId";
  @SerializedName(SERIALIZED_NAME_CLIENT_ID)
  private String clientId;

  public static final String SERIALIZED_NAME_CLIENT_SECRET = "clientSecret";
  @SerializedName(SERIALIZED_NAME_CLIENT_SECRET)
  private String clientSecret;

  public static final String SERIALIZED_NAME_SCOPE = "scope";
  @SerializedName(SERIALIZED_NAME_SCOPE)
  private String scope;

  /**
   * Client Authentication Method
   */
  @JsonAdapter(ClientAuthEnum.Adapter.class)
  public enum ClientAuthEnum {
    BODY("body"),
    
    BASIC_AUTH("basic-auth");

    private String value;

    ClientAuthEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ClientAuthEnum fromValue(String value) {
      for (ClientAuthEnum b : ClientAuthEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ClientAuthEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ClientAuthEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ClientAuthEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ClientAuthEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CLIENT_AUTH = "clientAuth";
  @SerializedName(SERIALIZED_NAME_CLIENT_AUTH)
  private ClientAuthEnum clientAuth;


  public CredentialOauth2ConfigConfig grantType(GrantTypeEnum grantType) {
    
    this.grantType = grantType;
    return this;
  }

   /**
   * OAuth 2.0 grant type
   * @return grantType
  **/
  @ApiModelProperty(required = true, value = "OAuth 2.0 grant type")

  public GrantTypeEnum getGrantType() {
    return grantType;
  }


  public void setGrantType(GrantTypeEnum grantType) {
    this.grantType = grantType;
  }


  public CredentialOauth2ConfigConfig accessTokenUrl(String accessTokenUrl) {
    
    this.accessTokenUrl = accessTokenUrl;
    return this;
  }

   /**
   * Token endpoint
   * @return accessTokenUrl
  **/
  @ApiModelProperty(example = "https://example.com", required = true, value = "Token endpoint")

  public String getAccessTokenUrl() {
    return accessTokenUrl;
  }


  public void setAccessTokenUrl(String accessTokenUrl) {
    this.accessTokenUrl = accessTokenUrl;
  }


  public CredentialOauth2ConfigConfig clientId(String clientId) {
    
    this.clientId = clientId;
    return this;
  }

   /**
   * Client ID
   * @return clientId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "myclientid12345", value = "Client ID")

  public String getClientId() {
    return clientId;
  }


  public void setClientId(String clientId) {
    this.clientId = clientId;
  }


  public CredentialOauth2ConfigConfig clientSecret(String clientSecret) {
    
    this.clientSecret = clientSecret;
    return this;
  }

   /**
   * Client Secret
   * @return clientSecret
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "myclientsecret12345", value = "Client Secret")

  public String getClientSecret() {
    return clientSecret;
  }


  public void setClientSecret(String clientSecret) {
    this.clientSecret = clientSecret;
  }


  public CredentialOauth2ConfigConfig scope(String scope) {
    
    this.scope = scope;
    return this;
  }

   /**
   * Scope
   * @return scope
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "read", value = "Scope")

  public String getScope() {
    return scope;
  }


  public void setScope(String scope) {
    this.scope = scope;
  }


  public CredentialOauth2ConfigConfig clientAuth(ClientAuthEnum clientAuth) {
    
    this.clientAuth = clientAuth;
    return this;
  }

   /**
   * Client Authentication Method
   * @return clientAuth
  **/
  @ApiModelProperty(required = true, value = "Client Authentication Method")

  public ClientAuthEnum getClientAuth() {
    return clientAuth;
  }


  public void setClientAuth(ClientAuthEnum clientAuth) {
    this.clientAuth = clientAuth;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CredentialOauth2ConfigConfig credentialOauth2ConfigConfig = (CredentialOauth2ConfigConfig) o;
    return Objects.equals(this.grantType, credentialOauth2ConfigConfig.grantType) &&
        Objects.equals(this.accessTokenUrl, credentialOauth2ConfigConfig.accessTokenUrl) &&
        Objects.equals(this.clientId, credentialOauth2ConfigConfig.clientId) &&
        Objects.equals(this.clientSecret, credentialOauth2ConfigConfig.clientSecret) &&
        Objects.equals(this.scope, credentialOauth2ConfigConfig.scope) &&
        Objects.equals(this.clientAuth, credentialOauth2ConfigConfig.clientAuth);
  }

  @Override
  public int hashCode() {
    return Objects.hash(grantType, accessTokenUrl, clientId, clientSecret, scope, clientAuth);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CredentialOauth2ConfigConfig {\n");
    sb.append("    grantType: ").append(toIndentedString(grantType)).append("\n");
    sb.append("    accessTokenUrl: ").append(toIndentedString(accessTokenUrl)).append("\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    clientSecret: ").append(toIndentedString(clientSecret)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("    clientAuth: ").append(toIndentedString(clientAuth)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

