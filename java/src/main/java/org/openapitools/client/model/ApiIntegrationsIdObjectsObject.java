/*
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * ApiIntegrationsIdObjectsObject
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-21T11:26:47.028Z[GMT]")
public class ApiIntegrationsIdObjectsObject {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_CATALOG_ITEM_TYPE = "catalogItemType";
  @SerializedName(SERIALIZED_NAME_CATALOG_ITEM_TYPE)
  private Long catalogItemType;


  public ApiIntegrationsIdObjectsObject name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Name to display
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Name to display")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public ApiIntegrationsIdObjectsObject type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * Integration Object Type Code
   * @return type
  **/
  @ApiModelProperty(example = "catalog", required = true, value = "Integration Object Type Code")

  public String getType() {
    return type;
  }


  public void setType(String type) {
    this.type = type;
  }


  public ApiIntegrationsIdObjectsObject catalogItemType(Long catalogItemType) {
    
    this.catalogItemType = catalogItemType;
    return this;
  }

   /**
   * Catalog Item Type ID
   * @return catalogItemType
  **/
  @ApiModelProperty(example = "27", required = true, value = "Catalog Item Type ID")

  public Long getCatalogItemType() {
    return catalogItemType;
  }


  public void setCatalogItemType(Long catalogItemType) {
    this.catalogItemType = catalogItemType;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApiIntegrationsIdObjectsObject apiIntegrationsIdObjectsObject = (ApiIntegrationsIdObjectsObject) o;
    return Objects.equals(this.name, apiIntegrationsIdObjectsObject.name) &&
        Objects.equals(this.type, apiIntegrationsIdObjectsObject.type) &&
        Objects.equals(this.catalogItemType, apiIntegrationsIdObjectsObject.catalogItemType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, type, catalogItemType);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApiIntegrationsIdObjectsObject {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    catalogItemType: ").append(toIndentedString(catalogItemType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

