/*
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.1.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Alert;
import org.openapitools.client.model.Check;
import org.openapitools.client.model.CheckApp;
import org.openapitools.client.model.CheckGroup;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetAlerts200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-17T13:37:08.123540Z[Etc/UTC]")
public class GetAlerts200Response {
  public static final String SERIALIZED_NAME_ALERT = "alert";
  @SerializedName(SERIALIZED_NAME_ALERT)
  private Alert alert;

  public static final String SERIALIZED_NAME_CHECKS = "checks";
  @SerializedName(SERIALIZED_NAME_CHECKS)
  private List<Check> checks;

  public static final String SERIALIZED_NAME_CHECK_GROUPS = "checkGroups";
  @SerializedName(SERIALIZED_NAME_CHECK_GROUPS)
  private List<CheckGroup> checkGroups;

  public static final String SERIALIZED_NAME_APPS = "apps";
  @SerializedName(SERIALIZED_NAME_APPS)
  private List<CheckApp> apps;

  public GetAlerts200Response() {
  }

  public GetAlerts200Response alert(Alert alert) {
    
    this.alert = alert;
    return this;
  }

   /**
   * Get alert
   * @return alert
  **/
  @javax.annotation.Nullable
  public Alert getAlert() {
    return alert;
  }


  public void setAlert(Alert alert) {
    this.alert = alert;
  }


  public GetAlerts200Response checks(List<Check> checks) {
    
    this.checks = checks;
    return this;
  }

  public GetAlerts200Response addChecksItem(Check checksItem) {
    if (this.checks == null) {
      this.checks = new ArrayList<>();
    }
    this.checks.add(checksItem);
    return this;
  }

   /**
   * Get checks
   * @return checks
  **/
  @javax.annotation.Nullable
  public List<Check> getChecks() {
    return checks;
  }


  public void setChecks(List<Check> checks) {
    this.checks = checks;
  }


  public GetAlerts200Response checkGroups(List<CheckGroup> checkGroups) {
    
    this.checkGroups = checkGroups;
    return this;
  }

  public GetAlerts200Response addCheckGroupsItem(CheckGroup checkGroupsItem) {
    if (this.checkGroups == null) {
      this.checkGroups = new ArrayList<>();
    }
    this.checkGroups.add(checkGroupsItem);
    return this;
  }

   /**
   * Get checkGroups
   * @return checkGroups
  **/
  @javax.annotation.Nullable
  public List<CheckGroup> getCheckGroups() {
    return checkGroups;
  }


  public void setCheckGroups(List<CheckGroup> checkGroups) {
    this.checkGroups = checkGroups;
  }


  public GetAlerts200Response apps(List<CheckApp> apps) {
    
    this.apps = apps;
    return this;
  }

  public GetAlerts200Response addAppsItem(CheckApp appsItem) {
    if (this.apps == null) {
      this.apps = new ArrayList<>();
    }
    this.apps.add(appsItem);
    return this;
  }

   /**
   * Get apps
   * @return apps
  **/
  @javax.annotation.Nullable
  public List<CheckApp> getApps() {
    return apps;
  }


  public void setApps(List<CheckApp> apps) {
    this.apps = apps;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetAlerts200Response getAlerts200Response = (GetAlerts200Response) o;
    return Objects.equals(this.alert, getAlerts200Response.alert) &&
        Objects.equals(this.checks, getAlerts200Response.checks) &&
        Objects.equals(this.checkGroups, getAlerts200Response.checkGroups) &&
        Objects.equals(this.apps, getAlerts200Response.apps);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alert, checks, checkGroups, apps);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetAlerts200Response {\n");
    sb.append("    alert: ").append(toIndentedString(alert)).append("\n");
    sb.append("    checks: ").append(toIndentedString(checks)).append("\n");
    sb.append("    checkGroups: ").append(toIndentedString(checkGroups)).append("\n");
    sb.append("    apps: ").append(toIndentedString(apps)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("alert");
    openapiFields.add("checks");
    openapiFields.add("checkGroups");
    openapiFields.add("apps");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to GetAlerts200Response
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetAlerts200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetAlerts200Response is not found in the empty JSON string", GetAlerts200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!GetAlerts200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetAlerts200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `alert`
      if (jsonObj.get("alert") != null && !jsonObj.get("alert").isJsonNull()) {
        Alert.validateJsonElement(jsonObj.get("alert"));
      }
      if (jsonObj.get("checks") != null && !jsonObj.get("checks").isJsonNull()) {
        JsonArray jsonArraychecks = jsonObj.getAsJsonArray("checks");
        if (jsonArraychecks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("checks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `checks` to be an array in the JSON string but got `%s`", jsonObj.get("checks").toString()));
          }

          // validate the optional field `checks` (array)
          for (int i = 0; i < jsonArraychecks.size(); i++) {
            Check.validateJsonElement(jsonArraychecks.get(i));
          };
        }
      }
      if (jsonObj.get("checkGroups") != null && !jsonObj.get("checkGroups").isJsonNull()) {
        JsonArray jsonArraycheckGroups = jsonObj.getAsJsonArray("checkGroups");
        if (jsonArraycheckGroups != null) {
          // ensure the json data is an array
          if (!jsonObj.get("checkGroups").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `checkGroups` to be an array in the JSON string but got `%s`", jsonObj.get("checkGroups").toString()));
          }

          // validate the optional field `checkGroups` (array)
          for (int i = 0; i < jsonArraycheckGroups.size(); i++) {
            CheckGroup.validateJsonElement(jsonArraycheckGroups.get(i));
          };
        }
      }
      if (jsonObj.get("apps") != null && !jsonObj.get("apps").isJsonNull()) {
        JsonArray jsonArrayapps = jsonObj.getAsJsonArray("apps");
        if (jsonArrayapps != null) {
          // ensure the json data is an array
          if (!jsonObj.get("apps").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `apps` to be an array in the JSON string but got `%s`", jsonObj.get("apps").toString()));
          }

          // validate the optional field `apps` (array)
          for (int i = 0; i < jsonArrayapps.size(); i++) {
            CheckApp.validateJsonElement(jsonArrayapps.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetAlerts200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetAlerts200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetAlerts200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetAlerts200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<GetAlerts200Response>() {
           @Override
           public void write(JsonWriter out, GetAlerts200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetAlerts200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GetAlerts200Response given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GetAlerts200Response
  * @throws IOException if the JSON string is invalid with respect to GetAlerts200Response
  */
  public static GetAlerts200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetAlerts200Response.class);
  }

 /**
  * Convert an instance of GetAlerts200Response to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

