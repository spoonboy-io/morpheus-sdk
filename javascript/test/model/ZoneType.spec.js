/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MorpheusApi);
  }
}(this, function(expect, MorpheusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MorpheusApi.ZoneType();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ZoneType', function() {
    it('should create an instance of ZoneType', function() {
      // uncomment below and update the code to test ZoneType
      //var instane = new MorpheusApi.ZoneType();
      //expect(instance).to.be.a(MorpheusApi.ZoneType);
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new MorpheusApi.ZoneType();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new MorpheusApi.ZoneType();
      //expect(instance).to.be();
    });

    it('should have the property code (base name: "code")', function() {
      // uncomment below and update the code to test the property code
      //var instance = new MorpheusApi.ZoneType();
      //expect(instance).to.be();
    });

    it('should have the property enabled (base name: "enabled")', function() {
      // uncomment below and update the code to test the property enabled
      //var instance = new MorpheusApi.ZoneType();
      //expect(instance).to.be();
    });

    it('should have the property provision (base name: "provision")', function() {
      // uncomment below and update the code to test the property provision
      //var instance = new MorpheusApi.ZoneType();
      //expect(instance).to.be();
    });

    it('should have the property autoCapacity (base name: "autoCapacity")', function() {
      // uncomment below and update the code to test the property autoCapacity
      //var instance = new MorpheusApi.ZoneType();
      //expect(instance).to.be();
    });

    it('should have the property migrationTarget (base name: "migrationTarget")', function() {
      // uncomment below and update the code to test the property migrationTarget
      //var instance = new MorpheusApi.ZoneType();
      //expect(instance).to.be();
    });

    it('should have the property hasDatastores (base name: "hasDatastores")', function() {
      // uncomment below and update the code to test the property hasDatastores
      //var instance = new MorpheusApi.ZoneType();
      //expect(instance).to.be();
    });

    it('should have the property hasNetworks (base name: "hasNetworks")', function() {
      // uncomment below and update the code to test the property hasNetworks
      //var instance = new MorpheusApi.ZoneType();
      //expect(instance).to.be();
    });

    it('should have the property hasResourcePools (base name: "hasResourcePools")', function() {
      // uncomment below and update the code to test the property hasResourcePools
      //var instance = new MorpheusApi.ZoneType();
      //expect(instance).to.be();
    });

    it('should have the property hasSecurityGroups (base name: "hasSecurityGroups")', function() {
      // uncomment below and update the code to test the property hasSecurityGroups
      //var instance = new MorpheusApi.ZoneType();
      //expect(instance).to.be();
    });

    it('should have the property hasContainers (base name: "hasContainers")', function() {
      // uncomment below and update the code to test the property hasContainers
      //var instance = new MorpheusApi.ZoneType();
      //expect(instance).to.be();
    });

    it('should have the property hasBareMetal (base name: "hasBareMetal")', function() {
      // uncomment below and update the code to test the property hasBareMetal
      //var instance = new MorpheusApi.ZoneType();
      //expect(instance).to.be();
    });

    it('should have the property hasServices (base name: "hasServices")', function() {
      // uncomment below and update the code to test the property hasServices
      //var instance = new MorpheusApi.ZoneType();
      //expect(instance).to.be();
    });

    it('should have the property hasFunctions (base name: "hasFunctions")', function() {
      // uncomment below and update the code to test the property hasFunctions
      //var instance = new MorpheusApi.ZoneType();
      //expect(instance).to.be();
    });

    it('should have the property hasJobs (base name: "hasJobs")', function() {
      // uncomment below and update the code to test the property hasJobs
      //var instance = new MorpheusApi.ZoneType();
      //expect(instance).to.be();
    });

    it('should have the property hasDiscovery (base name: "hasDiscovery")', function() {
      // uncomment below and update the code to test the property hasDiscovery
      //var instance = new MorpheusApi.ZoneType();
      //expect(instance).to.be();
    });

    it('should have the property hasCloudInit (base name: "hasCloudInit")', function() {
      // uncomment below and update the code to test the property hasCloudInit
      //var instance = new MorpheusApi.ZoneType();
      //expect(instance).to.be();
    });

    it('should have the property hasFolders (base name: "hasFolders")', function() {
      // uncomment below and update the code to test the property hasFolders
      //var instance = new MorpheusApi.ZoneType();
      //expect(instance).to.be();
    });

    it('should have the property hasFloatingIps (base name: "hasFloatingIps")', function() {
      // uncomment below and update the code to test the property hasFloatingIps
      //var instance = new MorpheusApi.ZoneType();
      //expect(instance).to.be();
    });

    it('should have the property hasMarketplace (base name: "hasMarketplace")', function() {
      // uncomment below and update the code to test the property hasMarketplace
      //var instance = new MorpheusApi.ZoneType();
      //expect(instance).to.be();
    });

    it('should have the property canCreateResourcePools (base name: "canCreateResourcePools")', function() {
      // uncomment below and update the code to test the property canCreateResourcePools
      //var instance = new MorpheusApi.ZoneType();
      //expect(instance).to.be();
    });

    it('should have the property canDeleteResourcePools (base name: "canDeleteResourcePools")', function() {
      // uncomment below and update the code to test the property canDeleteResourcePools
      //var instance = new MorpheusApi.ZoneType();
      //expect(instance).to.be();
    });

    it('should have the property canCreateDatastores (base name: "canCreateDatastores")', function() {
      // uncomment below and update the code to test the property canCreateDatastores
      //var instance = new MorpheusApi.ZoneType();
      //expect(instance).to.be();
    });

    it('should have the property canCreateNetworks (base name: "canCreateNetworks")', function() {
      // uncomment below and update the code to test the property canCreateNetworks
      //var instance = new MorpheusApi.ZoneType();
      //expect(instance).to.be();
    });

    it('should have the property canChooseContainerMode (base name: "canChooseContainerMode")', function() {
      // uncomment below and update the code to test the property canChooseContainerMode
      //var instance = new MorpheusApi.ZoneType();
      //expect(instance).to.be();
    });

    it('should have the property provisionRequiresResourcePool (base name: "provisionRequiresResourcePool")', function() {
      // uncomment below and update the code to test the property provisionRequiresResourcePool
      //var instance = new MorpheusApi.ZoneType();
      //expect(instance).to.be();
    });

    it('should have the property supportsDistributedWorker (base name: "supportsDistributedWorker")', function() {
      // uncomment below and update the code to test the property supportsDistributedWorker
      //var instance = new MorpheusApi.ZoneType();
      //expect(instance).to.be();
    });

    it('should have the property cloud (base name: "cloud")', function() {
      // uncomment below and update the code to test the property cloud
      //var instance = new MorpheusApi.ZoneType();
      //expect(instance).to.be();
    });

    it('should have the property provisionTypes (base name: "provisionTypes")', function() {
      // uncomment below and update the code to test the property provisionTypes
      //var instance = new MorpheusApi.ZoneType();
      //expect(instance).to.be();
    });

    it('should have the property zoneInstanceTypeLayoutId (base name: "zoneInstanceTypeLayoutId")', function() {
      // uncomment below and update the code to test the property zoneInstanceTypeLayoutId
      //var instance = new MorpheusApi.ZoneType();
      //expect(instance).to.be();
    });

    it('should have the property serverTypes (base name: "serverTypes")', function() {
      // uncomment below and update the code to test the property serverTypes
      //var instance = new MorpheusApi.ZoneType();
      //expect(instance).to.be();
    });

    it('should have the property optionTypes (base name: "optionTypes")', function() {
      // uncomment below and update the code to test the property optionTypes
      //var instance = new MorpheusApi.ZoneType();
      //expect(instance).to.be();
    });

  });

}));
