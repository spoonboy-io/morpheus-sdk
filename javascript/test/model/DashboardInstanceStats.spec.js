/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MorpheusApi);
  }
}(this, function(expect, MorpheusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MorpheusApi.DashboardInstanceStats();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DashboardInstanceStats', function() {
    it('should create an instance of DashboardInstanceStats', function() {
      // uncomment below and update the code to test DashboardInstanceStats
      //var instane = new MorpheusApi.DashboardInstanceStats();
      //expect(instance).to.be.a(MorpheusApi.DashboardInstanceStats);
    });

    it('should have the property maxCpu (base name: "maxCpu")', function() {
      // uncomment below and update the code to test the property maxCpu
      //var instance = new MorpheusApi.DashboardInstanceStats();
      //expect(instance).to.be();
    });

    it('should have the property maxCores (base name: "maxCores")', function() {
      // uncomment below and update the code to test the property maxCores
      //var instance = new MorpheusApi.DashboardInstanceStats();
      //expect(instance).to.be();
    });

    it('should have the property cpuUsage (base name: "cpuUsage")', function() {
      // uncomment below and update the code to test the property cpuUsage
      //var instance = new MorpheusApi.DashboardInstanceStats();
      //expect(instance).to.be();
    });

    it('should have the property cpuUsageAverage (base name: "cpuUsageAverage")', function() {
      // uncomment below and update the code to test the property cpuUsageAverage
      //var instance = new MorpheusApi.DashboardInstanceStats();
      //expect(instance).to.be();
    });

    it('should have the property cpuUsagePeak (base name: "cpuUsagePeak")', function() {
      // uncomment below and update the code to test the property cpuUsagePeak
      //var instance = new MorpheusApi.DashboardInstanceStats();
      //expect(instance).to.be();
    });

    it('should have the property usedMemory (base name: "usedMemory")', function() {
      // uncomment below and update the code to test the property usedMemory
      //var instance = new MorpheusApi.DashboardInstanceStats();
      //expect(instance).to.be();
    });

    it('should have the property maxMemory (base name: "maxMemory")', function() {
      // uncomment below and update the code to test the property maxMemory
      //var instance = new MorpheusApi.DashboardInstanceStats();
      //expect(instance).to.be();
    });

    it('should have the property usedStorage (base name: "usedStorage")', function() {
      // uncomment below and update the code to test the property usedStorage
      //var instance = new MorpheusApi.DashboardInstanceStats();
      //expect(instance).to.be();
    });

    it('should have the property maxStorage (base name: "maxStorage")', function() {
      // uncomment below and update the code to test the property maxStorage
      //var instance = new MorpheusApi.DashboardInstanceStats();
      //expect(instance).to.be();
    });

    it('should have the property running (base name: "running")', function() {
      // uncomment below and update the code to test the property running
      //var instance = new MorpheusApi.DashboardInstanceStats();
      //expect(instance).to.be();
    });

    it('should have the property total (base name: "total")', function() {
      // uncomment below and update the code to test the property total
      //var instance = new MorpheusApi.DashboardInstanceStats();
      //expect(instance).to.be();
    });

    it('should have the property totalContainers (base name: "totalContainers")', function() {
      // uncomment below and update the code to test the property totalContainers
      //var instance = new MorpheusApi.DashboardInstanceStats();
      //expect(instance).to.be();
    });

  });

}));
