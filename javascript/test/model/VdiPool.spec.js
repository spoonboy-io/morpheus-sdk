/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MorpheusApi);
  }
}(this, function(expect, MorpheusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MorpheusApi.VdiPool();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('VdiPool', function() {
    it('should create an instance of VdiPool', function() {
      // uncomment below and update the code to test VdiPool
      //var instane = new MorpheusApi.VdiPool();
      //expect(instance).to.be.a(MorpheusApi.VdiPool);
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new MorpheusApi.VdiPool();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new MorpheusApi.VdiPool();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new MorpheusApi.VdiPool();
      //expect(instance).to.be();
    });

    it('should have the property minIdle (base name: "minIdle")', function() {
      // uncomment below and update the code to test the property minIdle
      //var instance = new MorpheusApi.VdiPool();
      //expect(instance).to.be();
    });

    it('should have the property maxIdle (base name: "maxIdle")', function() {
      // uncomment below and update the code to test the property maxIdle
      //var instance = new MorpheusApi.VdiPool();
      //expect(instance).to.be();
    });

    it('should have the property initialPoolSize (base name: "initialPoolSize")', function() {
      // uncomment below and update the code to test the property initialPoolSize
      //var instance = new MorpheusApi.VdiPool();
      //expect(instance).to.be();
    });

    it('should have the property maxPoolSize (base name: "maxPoolSize")', function() {
      // uncomment below and update the code to test the property maxPoolSize
      //var instance = new MorpheusApi.VdiPool();
      //expect(instance).to.be();
    });

    it('should have the property allocationTimeoutMinutes (base name: "allocationTimeoutMinutes")', function() {
      // uncomment below and update the code to test the property allocationTimeoutMinutes
      //var instance = new MorpheusApi.VdiPool();
      //expect(instance).to.be();
    });

    it('should have the property persistentUser (base name: "persistentUser")', function() {
      // uncomment below and update the code to test the property persistentUser
      //var instance = new MorpheusApi.VdiPool();
      //expect(instance).to.be();
    });

    it('should have the property recyclable (base name: "recyclable")', function() {
      // uncomment below and update the code to test the property recyclable
      //var instance = new MorpheusApi.VdiPool();
      //expect(instance).to.be();
    });

    it('should have the property enabled (base name: "enabled")', function() {
      // uncomment below and update the code to test the property enabled
      //var instance = new MorpheusApi.VdiPool();
      //expect(instance).to.be();
    });

    it('should have the property autoCreateLocalUserOnReservation (base name: "autoCreateLocalUserOnReservation")', function() {
      // uncomment below and update the code to test the property autoCreateLocalUserOnReservation
      //var instance = new MorpheusApi.VdiPool();
      //expect(instance).to.be();
    });

    it('should have the property allowHypervisorConsole (base name: "allowHypervisorConsole")', function() {
      // uncomment below and update the code to test the property allowHypervisorConsole
      //var instance = new MorpheusApi.VdiPool();
      //expect(instance).to.be();
    });

    it('should have the property allowCopy (base name: "allowCopy")', function() {
      // uncomment below and update the code to test the property allowCopy
      //var instance = new MorpheusApi.VdiPool();
      //expect(instance).to.be();
    });

    it('should have the property allowPrinter (base name: "allowPrinter")', function() {
      // uncomment below and update the code to test the property allowPrinter
      //var instance = new MorpheusApi.VdiPool();
      //expect(instance).to.be();
    });

    it('should have the property allowFileshare (base name: "allowFileshare")', function() {
      // uncomment below and update the code to test the property allowFileshare
      //var instance = new MorpheusApi.VdiPool();
      //expect(instance).to.be();
    });

    it('should have the property guestConsoleJumpHost (base name: "guestConsoleJumpHost")', function() {
      // uncomment below and update the code to test the property guestConsoleJumpHost
      //var instance = new MorpheusApi.VdiPool();
      //expect(instance).to.be();
    });

    it('should have the property guestConsoleJumpPort (base name: "guestConsoleJumpPort")', function() {
      // uncomment below and update the code to test the property guestConsoleJumpPort
      //var instance = new MorpheusApi.VdiPool();
      //expect(instance).to.be();
    });

    it('should have the property guestConsoleJumpUsername (base name: "guestConsoleJumpUsername")', function() {
      // uncomment below and update the code to test the property guestConsoleJumpUsername
      //var instance = new MorpheusApi.VdiPool();
      //expect(instance).to.be();
    });

    it('should have the property guestConsoleJumpPassword (base name: "guestConsoleJumpPassword")', function() {
      // uncomment below and update the code to test the property guestConsoleJumpPassword
      //var instance = new MorpheusApi.VdiPool();
      //expect(instance).to.be();
    });

    it('should have the property guestConsoleJumpKeypair (base name: "guestConsoleJumpKeypair")', function() {
      // uncomment below and update the code to test the property guestConsoleJumpKeypair
      //var instance = new MorpheusApi.VdiPool();
      //expect(instance).to.be();
    });

    it('should have the property gateway (base name: "gateway")', function() {
      // uncomment below and update the code to test the property gateway
      //var instance = new MorpheusApi.VdiPool();
      //expect(instance).to.be();
    });

    it('should have the property iconPath (base name: "iconPath")', function() {
      // uncomment below and update the code to test the property iconPath
      //var instance = new MorpheusApi.VdiPool();
      //expect(instance).to.be();
    });

    it('should have the property logo (base name: "logo")', function() {
      // uncomment below and update the code to test the property logo
      //var instance = new MorpheusApi.VdiPool();
      //expect(instance).to.be();
    });

    it('should have the property apps (base name: "apps")', function() {
      // uncomment below and update the code to test the property apps
      //var instance = new MorpheusApi.VdiPool();
      //expect(instance).to.be();
    });

    it('should have the property owner (base name: "owner")', function() {
      // uncomment below and update the code to test the property owner
      //var instance = new MorpheusApi.VdiPool();
      //expect(instance).to.be();
    });

    it('should have the property config (base name: "config")', function() {
      // uncomment below and update the code to test the property config
      //var instance = new MorpheusApi.VdiPool();
      //expect(instance).to.be();
    });

    it('should have the property group (base name: "group")', function() {
      // uncomment below and update the code to test the property group
      //var instance = new MorpheusApi.VdiPool();
      //expect(instance).to.be();
    });

    it('should have the property cloud (base name: "cloud")', function() {
      // uncomment below and update the code to test the property cloud
      //var instance = new MorpheusApi.VdiPool();
      //expect(instance).to.be();
    });

    it('should have the property usedCount (base name: "usedCount")', function() {
      // uncomment below and update the code to test the property usedCount
      //var instance = new MorpheusApi.VdiPool();
      //expect(instance).to.be();
    });

    it('should have the property reservedCount (base name: "reservedCount")', function() {
      // uncomment below and update the code to test the property reservedCount
      //var instance = new MorpheusApi.VdiPool();
      //expect(instance).to.be();
    });

    it('should have the property preparingCount (base name: "preparingCount")', function() {
      // uncomment below and update the code to test the property preparingCount
      //var instance = new MorpheusApi.VdiPool();
      //expect(instance).to.be();
    });

    it('should have the property idleCount (base name: "idleCount")', function() {
      // uncomment below and update the code to test the property idleCount
      //var instance = new MorpheusApi.VdiPool();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new MorpheusApi.VdiPool();
      //expect(instance).to.be();
    });

    it('should have the property dateCreated (base name: "dateCreated")', function() {
      // uncomment below and update the code to test the property dateCreated
      //var instance = new MorpheusApi.VdiPool();
      //expect(instance).to.be();
    });

    it('should have the property lastUpdated (base name: "lastUpdated")', function() {
      // uncomment below and update the code to test the property lastUpdated
      //var instance = new MorpheusApi.VdiPool();
      //expect(instance).to.be();
    });

  });

}));
