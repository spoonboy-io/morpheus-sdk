/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MorpheusApi);
  }
}(this, function(expect, MorpheusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MorpheusApi.InlineResponse20081LoadBalancerProfile();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('InlineResponse20081LoadBalancerProfile', function() {
    it('should create an instance of InlineResponse20081LoadBalancerProfile', function() {
      // uncomment below and update the code to test InlineResponse20081LoadBalancerProfile
      //var instane = new MorpheusApi.InlineResponse20081LoadBalancerProfile();
      //expect(instance).to.be.a(MorpheusApi.InlineResponse20081LoadBalancerProfile);
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new MorpheusApi.InlineResponse20081LoadBalancerProfile();
      //expect(instance).to.be();
    });

    it('should have the property loadBalancer (base name: "loadBalancer")', function() {
      // uncomment below and update the code to test the property loadBalancer
      //var instance = new MorpheusApi.InlineResponse20081LoadBalancerProfile();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new MorpheusApi.InlineResponse20081LoadBalancerProfile();
      //expect(instance).to.be();
    });

    it('should have the property category (base name: "category")', function() {
      // uncomment below and update the code to test the property category
      //var instance = new MorpheusApi.InlineResponse20081LoadBalancerProfile();
      //expect(instance).to.be();
    });

    it('should have the property serviceType (base name: "serviceType")', function() {
      // uncomment below and update the code to test the property serviceType
      //var instance = new MorpheusApi.InlineResponse20081LoadBalancerProfile();
      //expect(instance).to.be();
    });

    it('should have the property serviceTypeDisplay (base name: "serviceTypeDisplay")', function() {
      // uncomment below and update the code to test the property serviceTypeDisplay
      //var instance = new MorpheusApi.InlineResponse20081LoadBalancerProfile();
      //expect(instance).to.be();
    });

    it('should have the property visibility (base name: "visibility")', function() {
      // uncomment below and update the code to test the property visibility
      //var instance = new MorpheusApi.InlineResponse20081LoadBalancerProfile();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new MorpheusApi.InlineResponse20081LoadBalancerProfile();
      //expect(instance).to.be();
    });

    it('should have the property internalId (base name: "internalId")', function() {
      // uncomment below and update the code to test the property internalId
      //var instance = new MorpheusApi.InlineResponse20081LoadBalancerProfile();
      //expect(instance).to.be();
    });

    it('should have the property externalId (base name: "externalId")', function() {
      // uncomment below and update the code to test the property externalId
      //var instance = new MorpheusApi.InlineResponse20081LoadBalancerProfile();
      //expect(instance).to.be();
    });

    it('should have the property proxyType (base name: "proxyType")', function() {
      // uncomment below and update the code to test the property proxyType
      //var instance = new MorpheusApi.InlineResponse20081LoadBalancerProfile();
      //expect(instance).to.be();
    });

    it('should have the property redirectRewrite (base name: "redirectRewrite")', function() {
      // uncomment below and update the code to test the property redirectRewrite
      //var instance = new MorpheusApi.InlineResponse20081LoadBalancerProfile();
      //expect(instance).to.be();
    });

    it('should have the property persistenceType (base name: "persistenceType")', function() {
      // uncomment below and update the code to test the property persistenceType
      //var instance = new MorpheusApi.InlineResponse20081LoadBalancerProfile();
      //expect(instance).to.be();
    });

    it('should have the property sslEnabled (base name: "sslEnabled")', function() {
      // uncomment below and update the code to test the property sslEnabled
      //var instance = new MorpheusApi.InlineResponse20081LoadBalancerProfile();
      //expect(instance).to.be();
    });

    it('should have the property sslCert (base name: "sslCert")', function() {
      // uncomment below and update the code to test the property sslCert
      //var instance = new MorpheusApi.InlineResponse20081LoadBalancerProfile();
      //expect(instance).to.be();
    });

    it('should have the property accountCertificate (base name: "accountCertificate")', function() {
      // uncomment below and update the code to test the property accountCertificate
      //var instance = new MorpheusApi.InlineResponse20081LoadBalancerProfile();
      //expect(instance).to.be();
    });

    it('should have the property enabled (base name: "enabled")', function() {
      // uncomment below and update the code to test the property enabled
      //var instance = new MorpheusApi.InlineResponse20081LoadBalancerProfile();
      //expect(instance).to.be();
    });

    it('should have the property redirectUrl (base name: "redirectUrl")', function() {
      // uncomment below and update the code to test the property redirectUrl
      //var instance = new MorpheusApi.InlineResponse20081LoadBalancerProfile();
      //expect(instance).to.be();
    });

    it('should have the property insertXforwardedFor (base name: "insertXforwardedFor")', function() {
      // uncomment below and update the code to test the property insertXforwardedFor
      //var instance = new MorpheusApi.InlineResponse20081LoadBalancerProfile();
      //expect(instance).to.be();
    });

    it('should have the property persistenceCookieName (base name: "persistenceCookieName")', function() {
      // uncomment below and update the code to test the property persistenceCookieName
      //var instance = new MorpheusApi.InlineResponse20081LoadBalancerProfile();
      //expect(instance).to.be();
    });

    it('should have the property persistenceExpiresIn (base name: "persistenceExpiresIn")', function() {
      // uncomment below and update the code to test the property persistenceExpiresIn
      //var instance = new MorpheusApi.InlineResponse20081LoadBalancerProfile();
      //expect(instance).to.be();
    });

    it('should have the property editable (base name: "editable")', function() {
      // uncomment below and update the code to test the property editable
      //var instance = new MorpheusApi.InlineResponse20081LoadBalancerProfile();
      //expect(instance).to.be();
    });

    it('should have the property config (base name: "config")', function() {
      // uncomment below and update the code to test the property config
      //var instance = new MorpheusApi.InlineResponse20081LoadBalancerProfile();
      //expect(instance).to.be();
    });

    it('should have the property createdBy (base name: "createdBy")', function() {
      // uncomment below and update the code to test the property createdBy
      //var instance = new MorpheusApi.InlineResponse20081LoadBalancerProfile();
      //expect(instance).to.be();
    });

    it('should have the property dateCreated (base name: "dateCreated")', function() {
      // uncomment below and update the code to test the property dateCreated
      //var instance = new MorpheusApi.InlineResponse20081LoadBalancerProfile();
      //expect(instance).to.be();
    });

    it('should have the property lastUpdated (base name: "lastUpdated")', function() {
      // uncomment below and update the code to test the property lastUpdated
      //var instance = new MorpheusApi.InlineResponse20081LoadBalancerProfile();
      //expect(instance).to.be();
    });

  });

}));
