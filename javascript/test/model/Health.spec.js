/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MorpheusApi);
  }
}(this, function(expect, MorpheusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MorpheusApi.Health();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Health', function() {
    it('should create an instance of Health', function() {
      // uncomment below and update the code to test Health
      //var instane = new MorpheusApi.Health();
      //expect(instance).to.be.a(MorpheusApi.Health);
    });

    it('should have the property success (base name: "success")', function() {
      // uncomment below and update the code to test the property success
      //var instance = new MorpheusApi.Health();
      //expect(instance).to.be();
    });

    it('should have the property statusMessage (base name: "statusMessage")', function() {
      // uncomment below and update the code to test the property statusMessage
      //var instance = new MorpheusApi.Health();
      //expect(instance).to.be();
    });

    it('should have the property applianceUrl (base name: "applianceUrl")', function() {
      // uncomment below and update the code to test the property applianceUrl
      //var instance = new MorpheusApi.Health();
      //expect(instance).to.be();
    });

    it('should have the property buildVersion (base name: "buildVersion")', function() {
      // uncomment below and update the code to test the property buildVersion
      //var instance = new MorpheusApi.Health();
      //expect(instance).to.be();
    });

    it('should have the property setupNeeded (base name: "setupNeeded")', function() {
      // uncomment below and update the code to test the property setupNeeded
      //var instance = new MorpheusApi.Health();
      //expect(instance).to.be();
    });

    it('should have the property _date (base name: "date")', function() {
      // uncomment below and update the code to test the property _date
      //var instance = new MorpheusApi.Health();
      //expect(instance).to.be();
    });

    it('should have the property cpu (base name: "cpu")', function() {
      // uncomment below and update the code to test the property cpu
      //var instance = new MorpheusApi.Health();
      //expect(instance).to.be();
    });

    it('should have the property memory (base name: "memory")', function() {
      // uncomment below and update the code to test the property memory
      //var instance = new MorpheusApi.Health();
      //expect(instance).to.be();
    });

    it('should have the property threads (base name: "threads")', function() {
      // uncomment below and update the code to test the property threads
      //var instance = new MorpheusApi.Health();
      //expect(instance).to.be();
    });

    it('should have the property database (base name: "database")', function() {
      // uncomment below and update the code to test the property database
      //var instance = new MorpheusApi.Health();
      //expect(instance).to.be();
    });

    it('should have the property elastic (base name: "elastic")', function() {
      // uncomment below and update the code to test the property elastic
      //var instance = new MorpheusApi.Health();
      //expect(instance).to.be();
    });

    it('should have the property rabbit (base name: "rabbit")', function() {
      // uncomment below and update the code to test the property rabbit
      //var instance = new MorpheusApi.Health();
      //expect(instance).to.be();
    });

  });

}));
