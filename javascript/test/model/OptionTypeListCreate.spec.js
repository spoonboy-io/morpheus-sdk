/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MorpheusApi);
  }
}(this, function(expect, MorpheusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MorpheusApi.OptionTypeListCreate();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('OptionTypeListCreate', function() {
    it('should create an instance of OptionTypeListCreate', function() {
      // uncomment below and update the code to test OptionTypeListCreate
      //var instane = new MorpheusApi.OptionTypeListCreate();
      //expect(instance).to.be.a(MorpheusApi.OptionTypeListCreate);
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new MorpheusApi.OptionTypeListCreate();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new MorpheusApi.OptionTypeListCreate();
      //expect(instance).to.be();
    });

    it('should have the property labels (base name: "labels")', function() {
      // uncomment below and update the code to test the property labels
      //var instance = new MorpheusApi.OptionTypeListCreate();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new MorpheusApi.OptionTypeListCreate();
      //expect(instance).to.be();
    });

    it('should have the property sourceUrl (base name: "sourceUrl")', function() {
      // uncomment below and update the code to test the property sourceUrl
      //var instance = new MorpheusApi.OptionTypeListCreate();
      //expect(instance).to.be();
    });

    it('should have the property visibility (base name: "visibility")', function() {
      // uncomment below and update the code to test the property visibility
      //var instance = new MorpheusApi.OptionTypeListCreate();
      //expect(instance).to.be();
    });

    it('should have the property sourceMethod (base name: "sourceMethod")', function() {
      // uncomment below and update the code to test the property sourceMethod
      //var instance = new MorpheusApi.OptionTypeListCreate();
      //expect(instance).to.be();
    });

    it('should have the property apiType (base name: "apiType")', function() {
      // uncomment below and update the code to test the property apiType
      //var instance = new MorpheusApi.OptionTypeListCreate();
      //expect(instance).to.be();
    });

    it('should have the property ignoreSSLErrors (base name: "ignoreSSLErrors")', function() {
      // uncomment below and update the code to test the property ignoreSSLErrors
      //var instance = new MorpheusApi.OptionTypeListCreate();
      //expect(instance).to.be();
    });

    it('should have the property realTime (base name: "realTime")', function() {
      // uncomment below and update the code to test the property realTime
      //var instance = new MorpheusApi.OptionTypeListCreate();
      //expect(instance).to.be();
    });

    it('should have the property credential (base name: "credential")', function() {
      // uncomment below and update the code to test the property credential
      //var instance = new MorpheusApi.OptionTypeListCreate();
      //expect(instance).to.be();
    });

    it('should have the property serviceUsername (base name: "serviceUsername")', function() {
      // uncomment below and update the code to test the property serviceUsername
      //var instance = new MorpheusApi.OptionTypeListCreate();
      //expect(instance).to.be();
    });

    it('should have the property servicePassword (base name: "servicePassword")', function() {
      // uncomment below and update the code to test the property servicePassword
      //var instance = new MorpheusApi.OptionTypeListCreate();
      //expect(instance).to.be();
    });

    it('should have the property initialDataset (base name: "initialDataset")', function() {
      // uncomment below and update the code to test the property initialDataset
      //var instance = new MorpheusApi.OptionTypeListCreate();
      //expect(instance).to.be();
    });

    it('should have the property translationScript (base name: "translationScript")', function() {
      // uncomment below and update the code to test the property translationScript
      //var instance = new MorpheusApi.OptionTypeListCreate();
      //expect(instance).to.be();
    });

    it('should have the property requestScript (base name: "requestScript")', function() {
      // uncomment below and update the code to test the property requestScript
      //var instance = new MorpheusApi.OptionTypeListCreate();
      //expect(instance).to.be();
    });

    it('should have the property config (base name: "config")', function() {
      // uncomment below and update the code to test the property config
      //var instance = new MorpheusApi.OptionTypeListCreate();
      //expect(instance).to.be();
    });

  });

}));
