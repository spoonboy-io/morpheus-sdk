/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MorpheusApi);
  }
}(this, function(expect, MorpheusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MorpheusApi.InlineResponse20079LoadBalancerMonitor();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('InlineResponse20079LoadBalancerMonitor', function() {
    it('should create an instance of InlineResponse20079LoadBalancerMonitor', function() {
      // uncomment below and update the code to test InlineResponse20079LoadBalancerMonitor
      //var instane = new MorpheusApi.InlineResponse20079LoadBalancerMonitor();
      //expect(instance).to.be.a(MorpheusApi.InlineResponse20079LoadBalancerMonitor);
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new MorpheusApi.InlineResponse20079LoadBalancerMonitor();
      //expect(instance).to.be();
    });

    it('should have the property loadBalancer (base name: "loadBalancer")', function() {
      // uncomment below and update the code to test the property loadBalancer
      //var instance = new MorpheusApi.InlineResponse20079LoadBalancerMonitor();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new MorpheusApi.InlineResponse20079LoadBalancerMonitor();
      //expect(instance).to.be();
    });

    it('should have the property code (base name: "code")', function() {
      // uncomment below and update the code to test the property code
      //var instance = new MorpheusApi.InlineResponse20079LoadBalancerMonitor();
      //expect(instance).to.be();
    });

    it('should have the property category (base name: "category")', function() {
      // uncomment below and update the code to test the property category
      //var instance = new MorpheusApi.InlineResponse20079LoadBalancerMonitor();
      //expect(instance).to.be();
    });

    it('should have the property visibility (base name: "visibility")', function() {
      // uncomment below and update the code to test the property visibility
      //var instance = new MorpheusApi.InlineResponse20079LoadBalancerMonitor();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new MorpheusApi.InlineResponse20079LoadBalancerMonitor();
      //expect(instance).to.be();
    });

    it('should have the property monitorType (base name: "monitorType")', function() {
      // uncomment below and update the code to test the property monitorType
      //var instance = new MorpheusApi.InlineResponse20079LoadBalancerMonitor();
      //expect(instance).to.be();
    });

    it('should have the property monitorInterval (base name: "monitorInterval")', function() {
      // uncomment below and update the code to test the property monitorInterval
      //var instance = new MorpheusApi.InlineResponse20079LoadBalancerMonitor();
      //expect(instance).to.be();
    });

    it('should have the property monitorTimeout (base name: "monitorTimeout")', function() {
      // uncomment below and update the code to test the property monitorTimeout
      //var instance = new MorpheusApi.InlineResponse20079LoadBalancerMonitor();
      //expect(instance).to.be();
    });

    it('should have the property sendData (base name: "sendData")', function() {
      // uncomment below and update the code to test the property sendData
      //var instance = new MorpheusApi.InlineResponse20079LoadBalancerMonitor();
      //expect(instance).to.be();
    });

    it('should have the property sendVersion (base name: "sendVersion")', function() {
      // uncomment below and update the code to test the property sendVersion
      //var instance = new MorpheusApi.InlineResponse20079LoadBalancerMonitor();
      //expect(instance).to.be();
    });

    it('should have the property sendType (base name: "sendType")', function() {
      // uncomment below and update the code to test the property sendType
      //var instance = new MorpheusApi.InlineResponse20079LoadBalancerMonitor();
      //expect(instance).to.be();
    });

    it('should have the property receiveData (base name: "receiveData")', function() {
      // uncomment below and update the code to test the property receiveData
      //var instance = new MorpheusApi.InlineResponse20079LoadBalancerMonitor();
      //expect(instance).to.be();
    });

    it('should have the property receiveCode (base name: "receiveCode")', function() {
      // uncomment below and update the code to test the property receiveCode
      //var instance = new MorpheusApi.InlineResponse20079LoadBalancerMonitor();
      //expect(instance).to.be();
    });

    it('should have the property disabledData (base name: "disabledData")', function() {
      // uncomment below and update the code to test the property disabledData
      //var instance = new MorpheusApi.InlineResponse20079LoadBalancerMonitor();
      //expect(instance).to.be();
    });

    it('should have the property monitorUsername (base name: "monitorUsername")', function() {
      // uncomment below and update the code to test the property monitorUsername
      //var instance = new MorpheusApi.InlineResponse20079LoadBalancerMonitor();
      //expect(instance).to.be();
    });

    it('should have the property monitorPassword (base name: "monitorPassword")', function() {
      // uncomment below and update the code to test the property monitorPassword
      //var instance = new MorpheusApi.InlineResponse20079LoadBalancerMonitor();
      //expect(instance).to.be();
    });

    it('should have the property monitorDestination (base name: "monitorDestination")', function() {
      // uncomment below and update the code to test the property monitorDestination
      //var instance = new MorpheusApi.InlineResponse20079LoadBalancerMonitor();
      //expect(instance).to.be();
    });

    it('should have the property monitorReverse (base name: "monitorReverse")', function() {
      // uncomment below and update the code to test the property monitorReverse
      //var instance = new MorpheusApi.InlineResponse20079LoadBalancerMonitor();
      //expect(instance).to.be();
    });

    it('should have the property monitorTransparent (base name: "monitorTransparent")', function() {
      // uncomment below and update the code to test the property monitorTransparent
      //var instance = new MorpheusApi.InlineResponse20079LoadBalancerMonitor();
      //expect(instance).to.be();
    });

    it('should have the property monitorAdaptive (base name: "monitorAdaptive")', function() {
      // uncomment below and update the code to test the property monitorAdaptive
      //var instance = new MorpheusApi.InlineResponse20079LoadBalancerMonitor();
      //expect(instance).to.be();
    });

    it('should have the property aliasAddress (base name: "aliasAddress")', function() {
      // uncomment below and update the code to test the property aliasAddress
      //var instance = new MorpheusApi.InlineResponse20079LoadBalancerMonitor();
      //expect(instance).to.be();
    });

    it('should have the property aliasPort (base name: "aliasPort")', function() {
      // uncomment below and update the code to test the property aliasPort
      //var instance = new MorpheusApi.InlineResponse20079LoadBalancerMonitor();
      //expect(instance).to.be();
    });

    it('should have the property internalId (base name: "internalId")', function() {
      // uncomment below and update the code to test the property internalId
      //var instance = new MorpheusApi.InlineResponse20079LoadBalancerMonitor();
      //expect(instance).to.be();
    });

    it('should have the property externalId (base name: "externalId")', function() {
      // uncomment below and update the code to test the property externalId
      //var instance = new MorpheusApi.InlineResponse20079LoadBalancerMonitor();
      //expect(instance).to.be();
    });

    it('should have the property monitorSource (base name: "monitorSource")', function() {
      // uncomment below and update the code to test the property monitorSource
      //var instance = new MorpheusApi.InlineResponse20079LoadBalancerMonitor();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new MorpheusApi.InlineResponse20079LoadBalancerMonitor();
      //expect(instance).to.be();
    });

    it('should have the property statusMessage (base name: "statusMessage")', function() {
      // uncomment below and update the code to test the property statusMessage
      //var instance = new MorpheusApi.InlineResponse20079LoadBalancerMonitor();
      //expect(instance).to.be();
    });

    it('should have the property statusDate (base name: "statusDate")', function() {
      // uncomment below and update the code to test the property statusDate
      //var instance = new MorpheusApi.InlineResponse20079LoadBalancerMonitor();
      //expect(instance).to.be();
    });

    it('should have the property enabled (base name: "enabled")', function() {
      // uncomment below and update the code to test the property enabled
      //var instance = new MorpheusApi.InlineResponse20079LoadBalancerMonitor();
      //expect(instance).to.be();
    });

    it('should have the property maxRetry (base name: "maxRetry")', function() {
      // uncomment below and update the code to test the property maxRetry
      //var instance = new MorpheusApi.InlineResponse20079LoadBalancerMonitor();
      //expect(instance).to.be();
    });

    it('should have the property fallCount (base name: "fallCount")', function() {
      // uncomment below and update the code to test the property fallCount
      //var instance = new MorpheusApi.InlineResponse20079LoadBalancerMonitor();
      //expect(instance).to.be();
    });

    it('should have the property riseCount (base name: "riseCount")', function() {
      // uncomment below and update the code to test the property riseCount
      //var instance = new MorpheusApi.InlineResponse20079LoadBalancerMonitor();
      //expect(instance).to.be();
    });

    it('should have the property dataLength (base name: "dataLength")', function() {
      // uncomment below and update the code to test the property dataLength
      //var instance = new MorpheusApi.InlineResponse20079LoadBalancerMonitor();
      //expect(instance).to.be();
    });

    it('should have the property config (base name: "config")', function() {
      // uncomment below and update the code to test the property config
      //var instance = new MorpheusApi.InlineResponse20079LoadBalancerMonitor();
      //expect(instance).to.be();
    });

    it('should have the property createdBy (base name: "createdBy")', function() {
      // uncomment below and update the code to test the property createdBy
      //var instance = new MorpheusApi.InlineResponse20079LoadBalancerMonitor();
      //expect(instance).to.be();
    });

    it('should have the property dateCreated (base name: "dateCreated")', function() {
      // uncomment below and update the code to test the property dateCreated
      //var instance = new MorpheusApi.InlineResponse20079LoadBalancerMonitor();
      //expect(instance).to.be();
    });

    it('should have the property lastUpdated (base name: "lastUpdated")', function() {
      // uncomment below and update the code to test the property lastUpdated
      //var instance = new MorpheusApi.InlineResponse20079LoadBalancerMonitor();
      //expect(instance).to.be();
    });

  });

}));
