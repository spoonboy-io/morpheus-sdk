/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MorpheusApi);
  }
}(this, function(expect, MorpheusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MorpheusApi.ServerType();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ServerType', function() {
    it('should create an instance of ServerType', function() {
      // uncomment below and update the code to test ServerType
      //var instane = new MorpheusApi.ServerType();
      //expect(instance).to.be.a(MorpheusApi.ServerType);
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new MorpheusApi.ServerType();
      //expect(instance).to.be();
    });

    it('should have the property code (base name: "code")', function() {
      // uncomment below and update the code to test the property code
      //var instance = new MorpheusApi.ServerType();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new MorpheusApi.ServerType();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new MorpheusApi.ServerType();
      //expect(instance).to.be();
    });

    it('should have the property nodeType (base name: "nodeType")', function() {
      // uncomment below and update the code to test the property nodeType
      //var instance = new MorpheusApi.ServerType();
      //expect(instance).to.be();
    });

    it('should have the property platform (base name: "platform")', function() {
      // uncomment below and update the code to test the property platform
      //var instance = new MorpheusApi.ServerType();
      //expect(instance).to.be();
    });

    it('should have the property enabled (base name: "enabled")', function() {
      // uncomment below and update the code to test the property enabled
      //var instance = new MorpheusApi.ServerType();
      //expect(instance).to.be();
    });

    it('should have the property selectable (base name: "selectable")', function() {
      // uncomment below and update the code to test the property selectable
      //var instance = new MorpheusApi.ServerType();
      //expect(instance).to.be();
    });

    it('should have the property externalDelete (base name: "externalDelete")', function() {
      // uncomment below and update the code to test the property externalDelete
      //var instance = new MorpheusApi.ServerType();
      //expect(instance).to.be();
    });

    it('should have the property managed (base name: "managed")', function() {
      // uncomment below and update the code to test the property managed
      //var instance = new MorpheusApi.ServerType();
      //expect(instance).to.be();
    });

    it('should have the property controlPower (base name: "controlPower")', function() {
      // uncomment below and update the code to test the property controlPower
      //var instance = new MorpheusApi.ServerType();
      //expect(instance).to.be();
    });

    it('should have the property controlSuspend (base name: "controlSuspend")', function() {
      // uncomment below and update the code to test the property controlSuspend
      //var instance = new MorpheusApi.ServerType();
      //expect(instance).to.be();
    });

    it('should have the property creatable (base name: "creatable")', function() {
      // uncomment below and update the code to test the property creatable
      //var instance = new MorpheusApi.ServerType();
      //expect(instance).to.be();
    });

    it('should have the property hasAgent (base name: "hasAgent")', function() {
      // uncomment below and update the code to test the property hasAgent
      //var instance = new MorpheusApi.ServerType();
      //expect(instance).to.be();
    });

    it('should have the property vmHypervisor (base name: "vmHypervisor")', function() {
      // uncomment below and update the code to test the property vmHypervisor
      //var instance = new MorpheusApi.ServerType();
      //expect(instance).to.be();
    });

    it('should have the property containerHypervisor (base name: "containerHypervisor")', function() {
      // uncomment below and update the code to test the property containerHypervisor
      //var instance = new MorpheusApi.ServerType();
      //expect(instance).to.be();
    });

    it('should have the property bareMetalHost (base name: "bareMetalHost")', function() {
      // uncomment below and update the code to test the property bareMetalHost
      //var instance = new MorpheusApi.ServerType();
      //expect(instance).to.be();
    });

    it('should have the property guestVm (base name: "guestVm")', function() {
      // uncomment below and update the code to test the property guestVm
      //var instance = new MorpheusApi.ServerType();
      //expect(instance).to.be();
    });

    it('should have the property hasAutomation (base name: "hasAutomation")', function() {
      // uncomment below and update the code to test the property hasAutomation
      //var instance = new MorpheusApi.ServerType();
      //expect(instance).to.be();
    });

    it('should have the property provisionType (base name: "provisionType")', function() {
      // uncomment below and update the code to test the property provisionType
      //var instance = new MorpheusApi.ServerType();
      //expect(instance).to.be();
    });

    it('should have the property optionTypes (base name: "optionTypes")', function() {
      // uncomment below and update the code to test the property optionTypes
      //var instance = new MorpheusApi.ServerType();
      //expect(instance).to.be();
    });

    it('should have the property displayOrder (base name: "displayOrder")', function() {
      // uncomment below and update the code to test the property displayOrder
      //var instance = new MorpheusApi.ServerType();
      //expect(instance).to.be();
    });

  });

}));
