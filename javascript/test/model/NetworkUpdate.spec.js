/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MorpheusApi);
  }
}(this, function(expect, MorpheusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MorpheusApi.NetworkUpdate();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('NetworkUpdate', function() {
    it('should create an instance of NetworkUpdate', function() {
      // uncomment below and update the code to test NetworkUpdate
      //var instane = new MorpheusApi.NetworkUpdate();
      //expect(instance).to.be.a(MorpheusApi.NetworkUpdate);
    });

    it('should have the property displayName (base name: "displayName")', function() {
      // uncomment below and update the code to test the property displayName
      //var instance = new MorpheusApi.NetworkUpdate();
      //expect(instance).to.be();
    });

    it('should have the property labels (base name: "labels")', function() {
      // uncomment below and update the code to test the property labels
      //var instance = new MorpheusApi.NetworkUpdate();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new MorpheusApi.NetworkUpdate();
      //expect(instance).to.be();
    });

    it('should have the property cidr (base name: "cidr")', function() {
      // uncomment below and update the code to test the property cidr
      //var instance = new MorpheusApi.NetworkUpdate();
      //expect(instance).to.be();
    });

    it('should have the property gateway (base name: "gateway")', function() {
      // uncomment below and update the code to test the property gateway
      //var instance = new MorpheusApi.NetworkUpdate();
      //expect(instance).to.be();
    });

    it('should have the property dnsPrimary (base name: "dnsPrimary")', function() {
      // uncomment below and update the code to test the property dnsPrimary
      //var instance = new MorpheusApi.NetworkUpdate();
      //expect(instance).to.be();
    });

    it('should have the property dnsSecondary (base name: "dnsSecondary")', function() {
      // uncomment below and update the code to test the property dnsSecondary
      //var instance = new MorpheusApi.NetworkUpdate();
      //expect(instance).to.be();
    });

    it('should have the property vlanId (base name: "vlanId")', function() {
      // uncomment below and update the code to test the property vlanId
      //var instance = new MorpheusApi.NetworkUpdate();
      //expect(instance).to.be();
    });

    it('should have the property pool (base name: "pool")', function() {
      // uncomment below and update the code to test the property pool
      //var instance = new MorpheusApi.NetworkUpdate();
      //expect(instance).to.be();
    });

    it('should have the property allowStaticOverride (base name: "allowStaticOverride")', function() {
      // uncomment below and update the code to test the property allowStaticOverride
      //var instance = new MorpheusApi.NetworkUpdate();
      //expect(instance).to.be();
    });

    it('should have the property assignPublicIp (base name: "assignPublicIp")', function() {
      // uncomment below and update the code to test the property assignPublicIp
      //var instance = new MorpheusApi.NetworkUpdate();
      //expect(instance).to.be();
    });

    it('should have the property active (base name: "active")', function() {
      // uncomment below and update the code to test the property active
      //var instance = new MorpheusApi.NetworkUpdate();
      //expect(instance).to.be();
    });

    it('should have the property dhcpServer (base name: "dhcpServer")', function() {
      // uncomment below and update the code to test the property dhcpServer
      //var instance = new MorpheusApi.NetworkUpdate();
      //expect(instance).to.be();
    });

    it('should have the property networkDomain (base name: "networkDomain")', function() {
      // uncomment below and update the code to test the property networkDomain
      //var instance = new MorpheusApi.NetworkUpdate();
      //expect(instance).to.be();
    });

    it('should have the property searchDomains (base name: "searchDomains")', function() {
      // uncomment below and update the code to test the property searchDomains
      //var instance = new MorpheusApi.NetworkUpdate();
      //expect(instance).to.be();
    });

    it('should have the property networkProxy (base name: "networkProxy")', function() {
      // uncomment below and update the code to test the property networkProxy
      //var instance = new MorpheusApi.NetworkUpdate();
      //expect(instance).to.be();
    });

    it('should have the property applianceUrlProxyBypass (base name: "applianceUrlProxyBypass")', function() {
      // uncomment below and update the code to test the property applianceUrlProxyBypass
      //var instance = new MorpheusApi.NetworkUpdate();
      //expect(instance).to.be();
    });

    it('should have the property noProxy (base name: "noProxy")', function() {
      // uncomment below and update the code to test the property noProxy
      //var instance = new MorpheusApi.NetworkUpdate();
      //expect(instance).to.be();
    });

    it('should have the property visibility (base name: "visibility")', function() {
      // uncomment below and update the code to test the property visibility
      //var instance = new MorpheusApi.NetworkUpdate();
      //expect(instance).to.be();
    });

    it('should have the property config (base name: "config")', function() {
      // uncomment below and update the code to test the property config
      //var instance = new MorpheusApi.NetworkUpdate();
      //expect(instance).to.be();
    });

    it('should have the property tenants (base name: "tenants")', function() {
      // uncomment below and update the code to test the property tenants
      //var instance = new MorpheusApi.NetworkUpdate();
      //expect(instance).to.be();
    });

    it('should have the property resourcePermissions (base name: "resourcePermissions")', function() {
      // uncomment below and update the code to test the property resourcePermissions
      //var instance = new MorpheusApi.NetworkUpdate();
      //expect(instance).to.be();
    });

  });

}));
