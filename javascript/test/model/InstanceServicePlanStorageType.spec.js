/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MorpheusApi);
  }
}(this, function(expect, MorpheusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MorpheusApi.InstanceServicePlanStorageType();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('InstanceServicePlanStorageType', function() {
    it('should create an instance of InstanceServicePlanStorageType', function() {
      // uncomment below and update the code to test InstanceServicePlanStorageType
      //var instane = new MorpheusApi.InstanceServicePlanStorageType();
      //expect(instance).to.be.a(MorpheusApi.InstanceServicePlanStorageType);
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new MorpheusApi.InstanceServicePlanStorageType();
      //expect(instance).to.be();
    });

    it('should have the property editable (base name: "editable")', function() {
      // uncomment below and update the code to test the property editable
      //var instance = new MorpheusApi.InstanceServicePlanStorageType();
      //expect(instance).to.be();
    });

    it('should have the property optionTypes (base name: "optionTypes")', function() {
      // uncomment below and update the code to test the property optionTypes
      //var instance = new MorpheusApi.InstanceServicePlanStorageType();
      //expect(instance).to.be();
    });

    it('should have the property displayOrder (base name: "displayOrder")', function() {
      // uncomment below and update the code to test the property displayOrder
      //var instance = new MorpheusApi.InstanceServicePlanStorageType();
      //expect(instance).to.be();
    });

    it('should have the property code (base name: "code")', function() {
      // uncomment below and update the code to test the property code
      //var instance = new MorpheusApi.InstanceServicePlanStorageType();
      //expect(instance).to.be();
    });

    it('should have the property volumeType (base name: "volumeType")', function() {
      // uncomment below and update the code to test the property volumeType
      //var instance = new MorpheusApi.InstanceServicePlanStorageType();
      //expect(instance).to.be();
    });

    it('should have the property minStorage (base name: "minStorage")', function() {
      // uncomment below and update the code to test the property minStorage
      //var instance = new MorpheusApi.InstanceServicePlanStorageType();
      //expect(instance).to.be();
    });

    it('should have the property deletable (base name: "deletable")', function() {
      // uncomment below and update the code to test the property deletable
      //var instance = new MorpheusApi.InstanceServicePlanStorageType();
      //expect(instance).to.be();
    });

    it('should have the property defaultType (base name: "defaultType")', function() {
      // uncomment below and update the code to test the property defaultType
      //var instance = new MorpheusApi.InstanceServicePlanStorageType();
      //expect(instance).to.be();
    });

    it('should have the property createDatastore (base name: "createDatastore")', function() {
      // uncomment below and update the code to test the property createDatastore
      //var instance = new MorpheusApi.InstanceServicePlanStorageType();
      //expect(instance).to.be();
    });

    it('should have the property resizable (base name: "resizable")', function() {
      // uncomment below and update the code to test the property resizable
      //var instance = new MorpheusApi.InstanceServicePlanStorageType();
      //expect(instance).to.be();
    });

    it('should have the property storageType (base name: "storageType")', function() {
      // uncomment below and update the code to test the property storageType
      //var instance = new MorpheusApi.InstanceServicePlanStorageType();
      //expect(instance).to.be();
    });

    it('should have the property allowSearch (base name: "allowSearch")', function() {
      // uncomment below and update the code to test the property allowSearch
      //var instance = new MorpheusApi.InstanceServicePlanStorageType();
      //expect(instance).to.be();
    });

    it('should have the property volumeOptionSource (base name: "volumeOptionSource")', function() {
      // uncomment below and update the code to test the property volumeOptionSource
      //var instance = new MorpheusApi.InstanceServicePlanStorageType();
      //expect(instance).to.be();
    });

    it('should have the property displayName (base name: "displayName")', function() {
      // uncomment below and update the code to test the property displayName
      //var instance = new MorpheusApi.InstanceServicePlanStorageType();
      //expect(instance).to.be();
    });

    it('should have the property minIOPS (base name: "minIOPS")', function() {
      // uncomment below and update the code to test the property minIOPS
      //var instance = new MorpheusApi.InstanceServicePlanStorageType();
      //expect(instance).to.be();
    });

    it('should have the property maxIOPS (base name: "maxIOPS")', function() {
      // uncomment below and update the code to test the property maxIOPS
      //var instance = new MorpheusApi.InstanceServicePlanStorageType();
      //expect(instance).to.be();
    });

    it('should have the property hasDatastore (base name: "hasDatastore")', function() {
      // uncomment below and update the code to test the property hasDatastore
      //var instance = new MorpheusApi.InstanceServicePlanStorageType();
      //expect(instance).to.be();
    });

    it('should have the property customSize (base name: "customSize")', function() {
      // uncomment below and update the code to test the property customSize
      //var instance = new MorpheusApi.InstanceServicePlanStorageType();
      //expect(instance).to.be();
    });

    it('should have the property autoDelete (base name: "autoDelete")', function() {
      // uncomment below and update the code to test the property autoDelete
      //var instance = new MorpheusApi.InstanceServicePlanStorageType();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new MorpheusApi.InstanceServicePlanStorageType();
      //expect(instance).to.be();
    });

    it('should have the property configurableIOPS (base name: "configurableIOPS")', function() {
      // uncomment below and update the code to test the property configurableIOPS
      //var instance = new MorpheusApi.InstanceServicePlanStorageType();
      //expect(instance).to.be();
    });

    it('should have the property customLabel (base name: "customLabel")', function() {
      // uncomment below and update the code to test the property customLabel
      //var instance = new MorpheusApi.InstanceServicePlanStorageType();
      //expect(instance).to.be();
    });

    it('should have the property enabled (base name: "enabled")', function() {
      // uncomment below and update the code to test the property enabled
      //var instance = new MorpheusApi.InstanceServicePlanStorageType();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new MorpheusApi.InstanceServicePlanStorageType();
      //expect(instance).to.be();
    });

    it('should have the property volumeCategory (base name: "volumeCategory")', function() {
      // uncomment below and update the code to test the property volumeCategory
      //var instance = new MorpheusApi.InstanceServicePlanStorageType();
      //expect(instance).to.be();
    });

    it('should have the property externalId (base name: "externalId")', function() {
      // uncomment below and update the code to test the property externalId
      //var instance = new MorpheusApi.InstanceServicePlanStorageType();
      //expect(instance).to.be();
    });

    it('should have the property maxStorage (base name: "maxStorage")', function() {
      // uncomment below and update the code to test the property maxStorage
      //var instance = new MorpheusApi.InstanceServicePlanStorageType();
      //expect(instance).to.be();
    });

  });

}));
