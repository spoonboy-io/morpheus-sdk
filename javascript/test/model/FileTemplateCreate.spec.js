/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MorpheusApi);
  }
}(this, function(expect, MorpheusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MorpheusApi.FileTemplateCreate();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('FileTemplateCreate', function() {
    it('should create an instance of FileTemplateCreate', function() {
      // uncomment below and update the code to test FileTemplateCreate
      //var instane = new MorpheusApi.FileTemplateCreate();
      //expect(instance).to.be.a(MorpheusApi.FileTemplateCreate);
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new MorpheusApi.FileTemplateCreate();
      //expect(instance).to.be();
    });

    it('should have the property labels (base name: "labels")', function() {
      // uncomment below and update the code to test the property labels
      //var instance = new MorpheusApi.FileTemplateCreate();
      //expect(instance).to.be();
    });

    it('should have the property fileName (base name: "fileName")', function() {
      // uncomment below and update the code to test the property fileName
      //var instance = new MorpheusApi.FileTemplateCreate();
      //expect(instance).to.be();
    });

    it('should have the property filePath (base name: "filePath")', function() {
      // uncomment below and update the code to test the property filePath
      //var instance = new MorpheusApi.FileTemplateCreate();
      //expect(instance).to.be();
    });

    it('should have the property category (base name: "category")', function() {
      // uncomment below and update the code to test the property category
      //var instance = new MorpheusApi.FileTemplateCreate();
      //expect(instance).to.be();
    });

    it('should have the property templatePhase (base name: "templatePhase")', function() {
      // uncomment below and update the code to test the property templatePhase
      //var instance = new MorpheusApi.FileTemplateCreate();
      //expect(instance).to.be();
    });

    it('should have the property template (base name: "template")', function() {
      // uncomment below and update the code to test the property template
      //var instance = new MorpheusApi.FileTemplateCreate();
      //expect(instance).to.be();
    });

    it('should have the property fileOwner (base name: "fileOwner")', function() {
      // uncomment below and update the code to test the property fileOwner
      //var instance = new MorpheusApi.FileTemplateCreate();
      //expect(instance).to.be();
    });

    it('should have the property settingName (base name: "settingName")', function() {
      // uncomment below and update the code to test the property settingName
      //var instance = new MorpheusApi.FileTemplateCreate();
      //expect(instance).to.be();
    });

    it('should have the property settingCategory (base name: "settingCategory")', function() {
      // uncomment below and update the code to test the property settingCategory
      //var instance = new MorpheusApi.FileTemplateCreate();
      //expect(instance).to.be();
    });

  });

}));
