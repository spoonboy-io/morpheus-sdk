/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MorpheusApi);
  }
}(this, function(expect, MorpheusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MorpheusApi.Role();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Role', function() {
    it('should create an instance of Role', function() {
      // uncomment below and update the code to test Role
      //var instane = new MorpheusApi.Role();
      //expect(instance).to.be.a(MorpheusApi.Role);
    });

    it('should have the property role (base name: "role")', function() {
      // uncomment below and update the code to test the property role
      //var instance = new MorpheusApi.Role();
      //expect(instance).to.be();
    });

    it('should have the property featurePermissions (base name: "featurePermissions")', function() {
      // uncomment below and update the code to test the property featurePermissions
      //var instance = new MorpheusApi.Role();
      //expect(instance).to.be();
    });

    it('should have the property globalSiteAccess (base name: "globalSiteAccess")', function() {
      // uncomment below and update the code to test the property globalSiteAccess
      //var instance = new MorpheusApi.Role();
      //expect(instance).to.be();
    });

    it('should have the property sites (base name: "sites")', function() {
      // uncomment below and update the code to test the property sites
      //var instance = new MorpheusApi.Role();
      //expect(instance).to.be();
    });

    it('should have the property globalZoneAccess (base name: "globalZoneAccess")', function() {
      // uncomment below and update the code to test the property globalZoneAccess
      //var instance = new MorpheusApi.Role();
      //expect(instance).to.be();
    });

    it('should have the property zones (base name: "zones")', function() {
      // uncomment below and update the code to test the property zones
      //var instance = new MorpheusApi.Role();
      //expect(instance).to.be();
    });

    it('should have the property globalInstanceTypeAccess (base name: "globalInstanceTypeAccess")', function() {
      // uncomment below and update the code to test the property globalInstanceTypeAccess
      //var instance = new MorpheusApi.Role();
      //expect(instance).to.be();
    });

    it('should have the property instanceTypePermissions (base name: "instanceTypePermissions")', function() {
      // uncomment below and update the code to test the property instanceTypePermissions
      //var instance = new MorpheusApi.Role();
      //expect(instance).to.be();
    });

    it('should have the property globalAppTemplateAccess (base name: "globalAppTemplateAccess")', function() {
      // uncomment below and update the code to test the property globalAppTemplateAccess
      //var instance = new MorpheusApi.Role();
      //expect(instance).to.be();
    });

    it('should have the property appTemplatePermissions (base name: "appTemplatePermissions")', function() {
      // uncomment below and update the code to test the property appTemplatePermissions
      //var instance = new MorpheusApi.Role();
      //expect(instance).to.be();
    });

    it('should have the property globalCatalogItemTypeAccess (base name: "globalCatalogItemTypeAccess")', function() {
      // uncomment below and update the code to test the property globalCatalogItemTypeAccess
      //var instance = new MorpheusApi.Role();
      //expect(instance).to.be();
    });

    it('should have the property catalogItemTypePermissions (base name: "catalogItemTypePermissions")', function() {
      // uncomment below and update the code to test the property catalogItemTypePermissions
      //var instance = new MorpheusApi.Role();
      //expect(instance).to.be();
    });

    it('should have the property globalPersonaAccess (base name: "globalPersonaAccess")', function() {
      // uncomment below and update the code to test the property globalPersonaAccess
      //var instance = new MorpheusApi.Role();
      //expect(instance).to.be();
    });

    it('should have the property personaPermissions (base name: "personaPermissions")', function() {
      // uncomment below and update the code to test the property personaPermissions
      //var instance = new MorpheusApi.Role();
      //expect(instance).to.be();
    });

    it('should have the property globalVdiPoolAccess (base name: "globalVdiPoolAccess")', function() {
      // uncomment below and update the code to test the property globalVdiPoolAccess
      //var instance = new MorpheusApi.Role();
      //expect(instance).to.be();
    });

    it('should have the property vdiPoolPermissions (base name: "vdiPoolPermissions")', function() {
      // uncomment below and update the code to test the property vdiPoolPermissions
      //var instance = new MorpheusApi.Role();
      //expect(instance).to.be();
    });

    it('should have the property globalReportTypeAccess (base name: "globalReportTypeAccess")', function() {
      // uncomment below and update the code to test the property globalReportTypeAccess
      //var instance = new MorpheusApi.Role();
      //expect(instance).to.be();
    });

    it('should have the property reportTypePermissions (base name: "reportTypePermissions")', function() {
      // uncomment below and update the code to test the property reportTypePermissions
      //var instance = new MorpheusApi.Role();
      //expect(instance).to.be();
    });

    it('should have the property globalTaskAccess (base name: "globalTaskAccess")', function() {
      // uncomment below and update the code to test the property globalTaskAccess
      //var instance = new MorpheusApi.Role();
      //expect(instance).to.be();
    });

    it('should have the property taskPermissions (base name: "taskPermissions")', function() {
      // uncomment below and update the code to test the property taskPermissions
      //var instance = new MorpheusApi.Role();
      //expect(instance).to.be();
    });

    it('should have the property globalTaskSetAccess (base name: "globalTaskSetAccess")', function() {
      // uncomment below and update the code to test the property globalTaskSetAccess
      //var instance = new MorpheusApi.Role();
      //expect(instance).to.be();
    });

    it('should have the property taskSetPermissions (base name: "taskSetPermissions")', function() {
      // uncomment below and update the code to test the property taskSetPermissions
      //var instance = new MorpheusApi.Role();
      //expect(instance).to.be();
    });

  });

}));
