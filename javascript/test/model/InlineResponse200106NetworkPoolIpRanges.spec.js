/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MorpheusApi);
  }
}(this, function(expect, MorpheusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MorpheusApi.InlineResponse200106NetworkPoolIpRanges();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('InlineResponse200106NetworkPoolIpRanges', function() {
    it('should create an instance of InlineResponse200106NetworkPoolIpRanges', function() {
      // uncomment below and update the code to test InlineResponse200106NetworkPoolIpRanges
      //var instane = new MorpheusApi.InlineResponse200106NetworkPoolIpRanges();
      //expect(instance).to.be.a(MorpheusApi.InlineResponse200106NetworkPoolIpRanges);
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new MorpheusApi.InlineResponse200106NetworkPoolIpRanges();
      //expect(instance).to.be();
    });

    it('should have the property startAddress (base name: "startAddress")', function() {
      // uncomment below and update the code to test the property startAddress
      //var instance = new MorpheusApi.InlineResponse200106NetworkPoolIpRanges();
      //expect(instance).to.be();
    });

    it('should have the property endAddress (base name: "endAddress")', function() {
      // uncomment below and update the code to test the property endAddress
      //var instance = new MorpheusApi.InlineResponse200106NetworkPoolIpRanges();
      //expect(instance).to.be();
    });

    it('should have the property internalId (base name: "internalId")', function() {
      // uncomment below and update the code to test the property internalId
      //var instance = new MorpheusApi.InlineResponse200106NetworkPoolIpRanges();
      //expect(instance).to.be();
    });

    it('should have the property externalId (base name: "externalId")', function() {
      // uncomment below and update the code to test the property externalId
      //var instance = new MorpheusApi.InlineResponse200106NetworkPoolIpRanges();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new MorpheusApi.InlineResponse200106NetworkPoolIpRanges();
      //expect(instance).to.be();
    });

    it('should have the property addressCount (base name: "addressCount")', function() {
      // uncomment below and update the code to test the property addressCount
      //var instance = new MorpheusApi.InlineResponse200106NetworkPoolIpRanges();
      //expect(instance).to.be();
    });

    it('should have the property active (base name: "active")', function() {
      // uncomment below and update the code to test the property active
      //var instance = new MorpheusApi.InlineResponse200106NetworkPoolIpRanges();
      //expect(instance).to.be();
    });

    it('should have the property dateCreated (base name: "dateCreated")', function() {
      // uncomment below and update the code to test the property dateCreated
      //var instance = new MorpheusApi.InlineResponse200106NetworkPoolIpRanges();
      //expect(instance).to.be();
    });

    it('should have the property lastUpdated (base name: "lastUpdated")', function() {
      // uncomment below and update the code to test the property lastUpdated
      //var instance = new MorpheusApi.InlineResponse200106NetworkPoolIpRanges();
      //expect(instance).to.be();
    });

    it('should have the property cidr (base name: "cidr")', function() {
      // uncomment below and update the code to test the property cidr
      //var instance = new MorpheusApi.InlineResponse200106NetworkPoolIpRanges();
      //expect(instance).to.be();
    });

    it('should have the property cidrIPv6 (base name: "cidrIPv6")', function() {
      // uncomment below and update the code to test the property cidrIPv6
      //var instance = new MorpheusApi.InlineResponse200106NetworkPoolIpRanges();
      //expect(instance).to.be();
    });

  });

}));
