/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MorpheusApi);
  }
}(this, function(expect, MorpheusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MorpheusApi.ClusterLayoutComputeServers();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ClusterLayoutComputeServers', function() {
    it('should create an instance of ClusterLayoutComputeServers', function() {
      // uncomment below and update the code to test ClusterLayoutComputeServers
      //var instane = new MorpheusApi.ClusterLayoutComputeServers();
      //expect(instance).to.be.a(MorpheusApi.ClusterLayoutComputeServers);
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new MorpheusApi.ClusterLayoutComputeServers();
      //expect(instance).to.be();
    });

    it('should have the property priorityOrder (base name: "priorityOrder")', function() {
      // uncomment below and update the code to test the property priorityOrder
      //var instance = new MorpheusApi.ClusterLayoutComputeServers();
      //expect(instance).to.be();
    });

    it('should have the property nodeCount (base name: "nodeCount")', function() {
      // uncomment below and update the code to test the property nodeCount
      //var instance = new MorpheusApi.ClusterLayoutComputeServers();
      //expect(instance).to.be();
    });

    it('should have the property nodeType (base name: "nodeType")', function() {
      // uncomment below and update the code to test the property nodeType
      //var instance = new MorpheusApi.ClusterLayoutComputeServers();
      //expect(instance).to.be();
    });

    it('should have the property minNodeCount (base name: "minNodeCount")', function() {
      // uncomment below and update the code to test the property minNodeCount
      //var instance = new MorpheusApi.ClusterLayoutComputeServers();
      //expect(instance).to.be();
    });

    it('should have the property maxNodeCount (base name: "maxNodeCount")', function() {
      // uncomment below and update the code to test the property maxNodeCount
      //var instance = new MorpheusApi.ClusterLayoutComputeServers();
      //expect(instance).to.be();
    });

    it('should have the property dynamicCount (base name: "dynamicCount")', function() {
      // uncomment below and update the code to test the property dynamicCount
      //var instance = new MorpheusApi.ClusterLayoutComputeServers();
      //expect(instance).to.be();
    });

    it('should have the property installContainerRuntime (base name: "installContainerRuntime")', function() {
      // uncomment below and update the code to test the property installContainerRuntime
      //var instance = new MorpheusApi.ClusterLayoutComputeServers();
      //expect(instance).to.be();
    });

    it('should have the property installStorageRuntime (base name: "installStorageRuntime")', function() {
      // uncomment below and update the code to test the property installStorageRuntime
      //var instance = new MorpheusApi.ClusterLayoutComputeServers();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new MorpheusApi.ClusterLayoutComputeServers();
      //expect(instance).to.be();
    });

    it('should have the property code (base name: "code")', function() {
      // uncomment below and update the code to test the property code
      //var instance = new MorpheusApi.ClusterLayoutComputeServers();
      //expect(instance).to.be();
    });

    it('should have the property category (base name: "category")', function() {
      // uncomment below and update the code to test the property category
      //var instance = new MorpheusApi.ClusterLayoutComputeServers();
      //expect(instance).to.be();
    });

    it('should have the property config (base name: "config")', function() {
      // uncomment below and update the code to test the property config
      //var instance = new MorpheusApi.ClusterLayoutComputeServers();
      //expect(instance).to.be();
    });

    it('should have the property containerType (base name: "containerType")', function() {
      // uncomment below and update the code to test the property containerType
      //var instance = new MorpheusApi.ClusterLayoutComputeServers();
      //expect(instance).to.be();
    });

    it('should have the property computeServerType (base name: "computeServerType")', function() {
      // uncomment below and update the code to test the property computeServerType
      //var instance = new MorpheusApi.ClusterLayoutComputeServers();
      //expect(instance).to.be();
    });

    it('should have the property provisionService (base name: "provisionService")', function() {
      // uncomment below and update the code to test the property provisionService
      //var instance = new MorpheusApi.ClusterLayoutComputeServers();
      //expect(instance).to.be();
    });

    it('should have the property planCategory (base name: "planCategory")', function() {
      // uncomment below and update the code to test the property planCategory
      //var instance = new MorpheusApi.ClusterLayoutComputeServers();
      //expect(instance).to.be();
    });

    it('should have the property namePrefix (base name: "namePrefix")', function() {
      // uncomment below and update the code to test the property namePrefix
      //var instance = new MorpheusApi.ClusterLayoutComputeServers();
      //expect(instance).to.be();
    });

    it('should have the property nameSuffix (base name: "nameSuffix")', function() {
      // uncomment below and update the code to test the property nameSuffix
      //var instance = new MorpheusApi.ClusterLayoutComputeServers();
      //expect(instance).to.be();
    });

    it('should have the property forceNameIndex (base name: "forceNameIndex")', function() {
      // uncomment below and update the code to test the property forceNameIndex
      //var instance = new MorpheusApi.ClusterLayoutComputeServers();
      //expect(instance).to.be();
    });

    it('should have the property loadBalance (base name: "loadBalance")', function() {
      // uncomment below and update the code to test the property loadBalance
      //var instance = new MorpheusApi.ClusterLayoutComputeServers();
      //expect(instance).to.be();
    });

  });

}));
