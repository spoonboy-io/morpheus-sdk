/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MorpheusApi);
  }
}(this, function(expect, MorpheusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MorpheusApi.InstanceTypeUpdate();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('InstanceTypeUpdate', function() {
    it('should create an instance of InstanceTypeUpdate', function() {
      // uncomment below and update the code to test InstanceTypeUpdate
      //var instane = new MorpheusApi.InstanceTypeUpdate();
      //expect(instance).to.be.a(MorpheusApi.InstanceTypeUpdate);
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new MorpheusApi.InstanceTypeUpdate();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new MorpheusApi.InstanceTypeUpdate();
      //expect(instance).to.be();
    });

    it('should have the property labels (base name: "labels")', function() {
      // uncomment below and update the code to test the property labels
      //var instance = new MorpheusApi.InstanceTypeUpdate();
      //expect(instance).to.be();
    });

    it('should have the property code (base name: "code")', function() {
      // uncomment below and update the code to test the property code
      //var instance = new MorpheusApi.InstanceTypeUpdate();
      //expect(instance).to.be();
    });

    it('should have the property category (base name: "category")', function() {
      // uncomment below and update the code to test the property category
      //var instance = new MorpheusApi.InstanceTypeUpdate();
      //expect(instance).to.be();
    });

    it('should have the property visibility (base name: "visibility")', function() {
      // uncomment below and update the code to test the property visibility
      //var instance = new MorpheusApi.InstanceTypeUpdate();
      //expect(instance).to.be();
    });

    it('should have the property featured (base name: "featured")', function() {
      // uncomment below and update the code to test the property featured
      //var instance = new MorpheusApi.InstanceTypeUpdate();
      //expect(instance).to.be();
    });

    it('should have the property hasSettings (base name: "hasSettings")', function() {
      // uncomment below and update the code to test the property hasSettings
      //var instance = new MorpheusApi.InstanceTypeUpdate();
      //expect(instance).to.be();
    });

    it('should have the property hasAutoScale (base name: "hasAutoScale")', function() {
      // uncomment below and update the code to test the property hasAutoScale
      //var instance = new MorpheusApi.InstanceTypeUpdate();
      //expect(instance).to.be();
    });

    it('should have the property hasDeployment (base name: "hasDeployment")', function() {
      // uncomment below and update the code to test the property hasDeployment
      //var instance = new MorpheusApi.InstanceTypeUpdate();
      //expect(instance).to.be();
    });

    it('should have the property environmentPrefix (base name: "environmentPrefix")', function() {
      // uncomment below and update the code to test the property environmentPrefix
      //var instance = new MorpheusApi.InstanceTypeUpdate();
      //expect(instance).to.be();
    });

    it('should have the property environmentVariables (base name: "environmentVariables")', function() {
      // uncomment below and update the code to test the property environmentVariables
      //var instance = new MorpheusApi.InstanceTypeUpdate();
      //expect(instance).to.be();
    });

    it('should have the property priceSets (base name: "priceSets")', function() {
      // uncomment below and update the code to test the property priceSets
      //var instance = new MorpheusApi.InstanceTypeUpdate();
      //expect(instance).to.be();
    });

    it('should have the property optionTypes (base name: "optionTypes")', function() {
      // uncomment below and update the code to test the property optionTypes
      //var instance = new MorpheusApi.InstanceTypeUpdate();
      //expect(instance).to.be();
    });

  });

}));
