/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MorpheusApi);
  }
}(this, function(expect, MorpheusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MorpheusApi.ProvisionType();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ProvisionType', function() {
    it('should create an instance of ProvisionType', function() {
      // uncomment below and update the code to test ProvisionType
      //var instane = new MorpheusApi.ProvisionType();
      //expect(instance).to.be.a(MorpheusApi.ProvisionType);
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new MorpheusApi.ProvisionType();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new MorpheusApi.ProvisionType();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new MorpheusApi.ProvisionType();
      //expect(instance).to.be();
    });

    it('should have the property code (base name: "code")', function() {
      // uncomment below and update the code to test the property code
      //var instance = new MorpheusApi.ProvisionType();
      //expect(instance).to.be();
    });

    it('should have the property aclEnabled (base name: "aclEnabled")', function() {
      // uncomment below and update the code to test the property aclEnabled
      //var instance = new MorpheusApi.ProvisionType();
      //expect(instance).to.be();
    });

    it('should have the property multiTenant (base name: "multiTenant")', function() {
      // uncomment below and update the code to test the property multiTenant
      //var instance = new MorpheusApi.ProvisionType();
      //expect(instance).to.be();
    });

    it('should have the property managed (base name: "managed")', function() {
      // uncomment below and update the code to test the property managed
      //var instance = new MorpheusApi.ProvisionType();
      //expect(instance).to.be();
    });

    it('should have the property hostNetwork (base name: "hostNetwork")', function() {
      // uncomment below and update the code to test the property hostNetwork
      //var instance = new MorpheusApi.ProvisionType();
      //expect(instance).to.be();
    });

    it('should have the property customSupported (base name: "customSupported")', function() {
      // uncomment below and update the code to test the property customSupported
      //var instance = new MorpheusApi.ProvisionType();
      //expect(instance).to.be();
    });

    it('should have the property mapPorts (base name: "mapPorts")', function() {
      // uncomment below and update the code to test the property mapPorts
      //var instance = new MorpheusApi.ProvisionType();
      //expect(instance).to.be();
    });

    it('should have the property exportServer (base name: "exportServer")', function() {
      // uncomment below and update the code to test the property exportServer
      //var instance = new MorpheusApi.ProvisionType();
      //expect(instance).to.be();
    });

    it('should have the property viewSet (base name: "viewSet")', function() {
      // uncomment below and update the code to test the property viewSet
      //var instance = new MorpheusApi.ProvisionType();
      //expect(instance).to.be();
    });

    it('should have the property serverType (base name: "serverType")', function() {
      // uncomment below and update the code to test the property serverType
      //var instance = new MorpheusApi.ProvisionType();
      //expect(instance).to.be();
    });

    it('should have the property hostType (base name: "hostType")', function() {
      // uncomment below and update the code to test the property hostType
      //var instance = new MorpheusApi.ProvisionType();
      //expect(instance).to.be();
    });

    it('should have the property addVolumes (base name: "addVolumes")', function() {
      // uncomment below and update the code to test the property addVolumes
      //var instance = new MorpheusApi.ProvisionType();
      //expect(instance).to.be();
    });

    it('should have the property hasVolumes (base name: "hasVolumes")', function() {
      // uncomment below and update the code to test the property hasVolumes
      //var instance = new MorpheusApi.ProvisionType();
      //expect(instance).to.be();
    });

    it('should have the property hasDatastore (base name: "hasDatastore")', function() {
      // uncomment below and update the code to test the property hasDatastore
      //var instance = new MorpheusApi.ProvisionType();
      //expect(instance).to.be();
    });

    it('should have the property hasNetworks (base name: "hasNetworks")', function() {
      // uncomment below and update the code to test the property hasNetworks
      //var instance = new MorpheusApi.ProvisionType();
      //expect(instance).to.be();
    });

    it('should have the property maxNetworks (base name: "maxNetworks")', function() {
      // uncomment below and update the code to test the property maxNetworks
      //var instance = new MorpheusApi.ProvisionType();
      //expect(instance).to.be();
    });

    it('should have the property customizeVolume (base name: "customizeVolume")', function() {
      // uncomment below and update the code to test the property customizeVolume
      //var instance = new MorpheusApi.ProvisionType();
      //expect(instance).to.be();
    });

    it('should have the property rootDiskCustomizable (base name: "rootDiskCustomizable")', function() {
      // uncomment below and update the code to test the property rootDiskCustomizable
      //var instance = new MorpheusApi.ProvisionType();
      //expect(instance).to.be();
    });

    it('should have the property rootDiskSizeKnown (base name: "rootDiskSizeKnown")', function() {
      // uncomment below and update the code to test the property rootDiskSizeKnown
      //var instance = new MorpheusApi.ProvisionType();
      //expect(instance).to.be();
    });

    it('should have the property rootDiskResizable (base name: "rootDiskResizable")', function() {
      // uncomment below and update the code to test the property rootDiskResizable
      //var instance = new MorpheusApi.ProvisionType();
      //expect(instance).to.be();
    });

    it('should have the property lvmSupported (base name: "lvmSupported")', function() {
      // uncomment below and update the code to test the property lvmSupported
      //var instance = new MorpheusApi.ProvisionType();
      //expect(instance).to.be();
    });

    it('should have the property hostDiskMode (base name: "hostDiskMode")', function() {
      // uncomment below and update the code to test the property hostDiskMode
      //var instance = new MorpheusApi.ProvisionType();
      //expect(instance).to.be();
    });

    it('should have the property minDisk (base name: "minDisk")', function() {
      // uncomment below and update the code to test the property minDisk
      //var instance = new MorpheusApi.ProvisionType();
      //expect(instance).to.be();
    });

    it('should have the property maxDisk (base name: "maxDisk")', function() {
      // uncomment below and update the code to test the property maxDisk
      //var instance = new MorpheusApi.ProvisionType();
      //expect(instance).to.be();
    });

    it('should have the property resizeCopiesVolumes (base name: "resizeCopiesVolumes")', function() {
      // uncomment below and update the code to test the property resizeCopiesVolumes
      //var instance = new MorpheusApi.ProvisionType();
      //expect(instance).to.be();
    });

    it('should have the property supportsAutoDatastore (base name: "supportsAutoDatastore")', function() {
      // uncomment below and update the code to test the property supportsAutoDatastore
      //var instance = new MorpheusApi.ProvisionType();
      //expect(instance).to.be();
    });

    it('should have the property hasZonePools (base name: "hasZonePools")', function() {
      // uncomment below and update the code to test the property hasZonePools
      //var instance = new MorpheusApi.ProvisionType();
      //expect(instance).to.be();
    });

    it('should have the property hasSecurityGroups (base name: "hasSecurityGroups")', function() {
      // uncomment below and update the code to test the property hasSecurityGroups
      //var instance = new MorpheusApi.ProvisionType();
      //expect(instance).to.be();
    });

    it('should have the property hasParameters (base name: "hasParameters")', function() {
      // uncomment below and update the code to test the property hasParameters
      //var instance = new MorpheusApi.ProvisionType();
      //expect(instance).to.be();
    });

    it('should have the property canEnforceTags (base name: "canEnforceTags")', function() {
      // uncomment below and update the code to test the property canEnforceTags
      //var instance = new MorpheusApi.ProvisionType();
      //expect(instance).to.be();
    });

    it('should have the property disableRootDatastore (base name: "disableRootDatastore")', function() {
      // uncomment below and update the code to test the property disableRootDatastore
      //var instance = new MorpheusApi.ProvisionType();
      //expect(instance).to.be();
    });

    it('should have the property hasSnapshots (base name: "hasSnapshots")', function() {
      // uncomment below and update the code to test the property hasSnapshots
      //var instance = new MorpheusApi.ProvisionType();
      //expect(instance).to.be();
    });

    it('should have the property hasSpecTemplates (base name: "hasSpecTemplates")', function() {
      // uncomment below and update the code to test the property hasSpecTemplates
      //var instance = new MorpheusApi.ProvisionType();
      //expect(instance).to.be();
    });

    it('should have the property hasPreview (base name: "hasPreview")', function() {
      // uncomment below and update the code to test the property hasPreview
      //var instance = new MorpheusApi.ProvisionType();
      //expect(instance).to.be();
    });

    it('should have the property zonePoolRequired (base name: "zonePoolRequired")', function() {
      // uncomment below and update the code to test the property zonePoolRequired
      //var instance = new MorpheusApi.ProvisionType();
      //expect(instance).to.be();
    });

    it('should have the property planRequiresPool (base name: "planRequiresPool")', function() {
      // uncomment below and update the code to test the property planRequiresPool
      //var instance = new MorpheusApi.ProvisionType();
      //expect(instance).to.be();
    });

    it('should have the property hasFolders (base name: "hasFolders")', function() {
      // uncomment below and update the code to test the property hasFolders
      //var instance = new MorpheusApi.ProvisionType();
      //expect(instance).to.be();
    });

    it('should have the property optionTypes (base name: "optionTypes")', function() {
      // uncomment below and update the code to test the property optionTypes
      //var instance = new MorpheusApi.ProvisionType();
      //expect(instance).to.be();
    });

    it('should have the property customOptionTypes (base name: "customOptionTypes")', function() {
      // uncomment below and update the code to test the property customOptionTypes
      //var instance = new MorpheusApi.ProvisionType();
      //expect(instance).to.be();
    });

    it('should have the property networkTypes (base name: "networkTypes")', function() {
      // uncomment below and update the code to test the property networkTypes
      //var instance = new MorpheusApi.ProvisionType();
      //expect(instance).to.be();
    });

    it('should have the property storageTypes (base name: "storageTypes")', function() {
      // uncomment below and update the code to test the property storageTypes
      //var instance = new MorpheusApi.ProvisionType();
      //expect(instance).to.be();
    });

    it('should have the property rootStorageTypes (base name: "rootStorageTypes")', function() {
      // uncomment below and update the code to test the property rootStorageTypes
      //var instance = new MorpheusApi.ProvisionType();
      //expect(instance).to.be();
    });

    it('should have the property controllerTypes (base name: "controllerTypes")', function() {
      // uncomment below and update the code to test the property controllerTypes
      //var instance = new MorpheusApi.ProvisionType();
      //expect(instance).to.be();
    });

  });

}));
