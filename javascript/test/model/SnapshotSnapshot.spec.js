/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MorpheusApi);
  }
}(this, function(expect, MorpheusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MorpheusApi.SnapshotSnapshot();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('SnapshotSnapshot', function() {
    it('should create an instance of SnapshotSnapshot', function() {
      // uncomment below and update the code to test SnapshotSnapshot
      //var instane = new MorpheusApi.SnapshotSnapshot();
      //expect(instance).to.be.a(MorpheusApi.SnapshotSnapshot);
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new MorpheusApi.SnapshotSnapshot();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new MorpheusApi.SnapshotSnapshot();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new MorpheusApi.SnapshotSnapshot();
      //expect(instance).to.be();
    });

    it('should have the property externalId (base name: "externalId")', function() {
      // uncomment below and update the code to test the property externalId
      //var instance = new MorpheusApi.SnapshotSnapshot();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new MorpheusApi.SnapshotSnapshot();
      //expect(instance).to.be();
    });

    it('should have the property state (base name: "state")', function() {
      // uncomment below and update the code to test the property state
      //var instance = new MorpheusApi.SnapshotSnapshot();
      //expect(instance).to.be();
    });

    it('should have the property snapshotType (base name: "snapshotType")', function() {
      // uncomment below and update the code to test the property snapshotType
      //var instance = new MorpheusApi.SnapshotSnapshot();
      //expect(instance).to.be();
    });

    it('should have the property snapshotCreated (base name: "snapshotCreated")', function() {
      // uncomment below and update the code to test the property snapshotCreated
      //var instance = new MorpheusApi.SnapshotSnapshot();
      //expect(instance).to.be();
    });

    it('should have the property zone (base name: "zone")', function() {
      // uncomment below and update the code to test the property zone
      //var instance = new MorpheusApi.SnapshotSnapshot();
      //expect(instance).to.be();
    });

    it('should have the property datastore (base name: "datastore")', function() {
      // uncomment below and update the code to test the property datastore
      //var instance = new MorpheusApi.SnapshotSnapshot();
      //expect(instance).to.be();
    });

    it('should have the property parentSnapshot (base name: "parentSnapshot")', function() {
      // uncomment below and update the code to test the property parentSnapshot
      //var instance = new MorpheusApi.SnapshotSnapshot();
      //expect(instance).to.be();
    });

    it('should have the property currentlyActive (base name: "currentlyActive")', function() {
      // uncomment below and update the code to test the property currentlyActive
      //var instance = new MorpheusApi.SnapshotSnapshot();
      //expect(instance).to.be();
    });

    it('should have the property dateCreated (base name: "dateCreated")', function() {
      // uncomment below and update the code to test the property dateCreated
      //var instance = new MorpheusApi.SnapshotSnapshot();
      //expect(instance).to.be();
    });

  });

}));
