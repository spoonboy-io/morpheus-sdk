/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MorpheusApi);
  }
}(this, function(expect, MorpheusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MorpheusApi.ZoneVcenterConfig();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ZoneVcenterConfig', function() {
    it('should create an instance of ZoneVcenterConfig', function() {
      // uncomment below and update the code to test ZoneVcenterConfig
      //var instane = new MorpheusApi.ZoneVcenterConfig();
      //expect(instance).to.be.a(MorpheusApi.ZoneVcenterConfig);
    });

    it('should have the property apiUrl (base name: "apiUrl")', function() {
      // uncomment below and update the code to test the property apiUrl
      //var instance = new MorpheusApi.ZoneVcenterConfig();
      //expect(instance).to.be();
    });

    it('should have the property username (base name: "username")', function() {
      // uncomment below and update the code to test the property username
      //var instance = new MorpheusApi.ZoneVcenterConfig();
      //expect(instance).to.be();
    });

    it('should have the property password (base name: "password")', function() {
      // uncomment below and update the code to test the property password
      //var instance = new MorpheusApi.ZoneVcenterConfig();
      //expect(instance).to.be();
    });

    it('should have the property datacenter (base name: "datacenter")', function() {
      // uncomment below and update the code to test the property datacenter
      //var instance = new MorpheusApi.ZoneVcenterConfig();
      //expect(instance).to.be();
    });

    it('should have the property cluster (base name: "cluster")', function() {
      // uncomment below and update the code to test the property cluster
      //var instance = new MorpheusApi.ZoneVcenterConfig();
      //expect(instance).to.be();
    });

    it('should have the property resourcePoolId (base name: "resourcePoolId")', function() {
      // uncomment below and update the code to test the property resourcePoolId
      //var instance = new MorpheusApi.ZoneVcenterConfig();
      //expect(instance).to.be();
    });

    it('should have the property resourcePool (base name: "resourcePool")', function() {
      // uncomment below and update the code to test the property resourcePool
      //var instance = new MorpheusApi.ZoneVcenterConfig();
      //expect(instance).to.be();
    });

    it('should have the property rpcMode (base name: "rpcMode")', function() {
      // uncomment below and update the code to test the property rpcMode
      //var instance = new MorpheusApi.ZoneVcenterConfig();
      //expect(instance).to.be();
    });

    it('should have the property hideHostSelection (base name: "_hideHostSelection")', function() {
      // uncomment below and update the code to test the property hideHostSelection
      //var instance = new MorpheusApi.ZoneVcenterConfig();
      //expect(instance).to.be();
    });

    it('should have the property hideHostSelection (base name: "hideHostSelection")', function() {
      // uncomment below and update the code to test the property hideHostSelection
      //var instance = new MorpheusApi.ZoneVcenterConfig();
      //expect(instance).to.be();
    });

    it('should have the property importExisting (base name: "_importExisting")', function() {
      // uncomment below and update the code to test the property importExisting
      //var instance = new MorpheusApi.ZoneVcenterConfig();
      //expect(instance).to.be();
    });

    it('should have the property importExisting (base name: "importExisting")', function() {
      // uncomment below and update the code to test the property importExisting
      //var instance = new MorpheusApi.ZoneVcenterConfig();
      //expect(instance).to.be();
    });

    it('should have the property enableVnc (base name: "_enableVnc")', function() {
      // uncomment below and update the code to test the property enableVnc
      //var instance = new MorpheusApi.ZoneVcenterConfig();
      //expect(instance).to.be();
    });

    it('should have the property enableVnc (base name: "enableVnc")', function() {
      // uncomment below and update the code to test the property enableVnc
      //var instance = new MorpheusApi.ZoneVcenterConfig();
      //expect(instance).to.be();
    });

    it('should have the property enableDiskTypeSelection (base name: "_enableDiskTypeSelection")', function() {
      // uncomment below and update the code to test the property enableDiskTypeSelection
      //var instance = new MorpheusApi.ZoneVcenterConfig();
      //expect(instance).to.be();
    });

    it('should have the property enableNetworkTypeSelection (base name: "_enableNetworkTypeSelection")', function() {
      // uncomment below and update the code to test the property enableNetworkTypeSelection
      //var instance = new MorpheusApi.ZoneVcenterConfig();
      //expect(instance).to.be();
    });

    it('should have the property diskStorageType (base name: "diskStorageType")', function() {
      // uncomment below and update the code to test the property diskStorageType
      //var instance = new MorpheusApi.ZoneVcenterConfig();
      //expect(instance).to.be();
    });

    it('should have the property applianceUrl (base name: "applianceUrl")', function() {
      // uncomment below and update the code to test the property applianceUrl
      //var instance = new MorpheusApi.ZoneVcenterConfig();
      //expect(instance).to.be();
    });

    it('should have the property datacenterName (base name: "datacenterName")', function() {
      // uncomment below and update the code to test the property datacenterName
      //var instance = new MorpheusApi.ZoneVcenterConfig();
      //expect(instance).to.be();
    });

    it('should have the property networkServerId (base name: "networkServer.id")', function() {
      // uncomment below and update the code to test the property networkServerId
      //var instance = new MorpheusApi.ZoneVcenterConfig();
      //expect(instance).to.be();
    });

    it('should have the property networkServer (base name: "networkServer")', function() {
      // uncomment below and update the code to test the property networkServer
      //var instance = new MorpheusApi.ZoneVcenterConfig();
      //expect(instance).to.be();
    });

    it('should have the property securityMode (base name: "securityMode")', function() {
      // uncomment below and update the code to test the property securityMode
      //var instance = new MorpheusApi.ZoneVcenterConfig();
      //expect(instance).to.be();
    });

    it('should have the property certificateProvider (base name: "certificateProvider")', function() {
      // uncomment below and update the code to test the property certificateProvider
      //var instance = new MorpheusApi.ZoneVcenterConfig();
      //expect(instance).to.be();
    });

    it('should have the property backupMode (base name: "backupMode")', function() {
      // uncomment below and update the code to test the property backupMode
      //var instance = new MorpheusApi.ZoneVcenterConfig();
      //expect(instance).to.be();
    });

    it('should have the property replicationMode (base name: "replicationMode")', function() {
      // uncomment below and update the code to test the property replicationMode
      //var instance = new MorpheusApi.ZoneVcenterConfig();
      //expect(instance).to.be();
    });

    it('should have the property dnsIntegrationId (base name: "dnsIntegrationId")', function() {
      // uncomment below and update the code to test the property dnsIntegrationId
      //var instance = new MorpheusApi.ZoneVcenterConfig();
      //expect(instance).to.be();
    });

    it('should have the property configCmdbId (base name: "configCmdbId")', function() {
      // uncomment below and update the code to test the property configCmdbId
      //var instance = new MorpheusApi.ZoneVcenterConfig();
      //expect(instance).to.be();
    });

    it('should have the property configManagementId (base name: "configManagementId")', function() {
      // uncomment below and update the code to test the property configManagementId
      //var instance = new MorpheusApi.ZoneVcenterConfig();
      //expect(instance).to.be();
    });

    it('should have the property configCmId (base name: "configCmId")', function() {
      // uncomment below and update the code to test the property configCmId
      //var instance = new MorpheusApi.ZoneVcenterConfig();
      //expect(instance).to.be();
    });

    it('should have the property securityServer (base name: "securityServer")', function() {
      // uncomment below and update the code to test the property securityServer
      //var instance = new MorpheusApi.ZoneVcenterConfig();
      //expect(instance).to.be();
    });

    it('should have the property serviceRegistryId (base name: "serviceRegistryId")', function() {
      // uncomment below and update the code to test the property serviceRegistryId
      //var instance = new MorpheusApi.ZoneVcenterConfig();
      //expect(instance).to.be();
    });

    it('should have the property enableDiskTypeSelection (base name: "enableDiskTypeSelection")', function() {
      // uncomment below and update the code to test the property enableDiskTypeSelection
      //var instance = new MorpheusApi.ZoneVcenterConfig();
      //expect(instance).to.be();
    });

    it('should have the property kubeUrl (base name: "kubeUrl")', function() {
      // uncomment below and update the code to test the property kubeUrl
      //var instance = new MorpheusApi.ZoneVcenterConfig();
      //expect(instance).to.be();
    });

    it('should have the property apiVersion (base name: "apiVersion")', function() {
      // uncomment below and update the code to test the property apiVersion
      //var instance = new MorpheusApi.ZoneVcenterConfig();
      //expect(instance).to.be();
    });

    it('should have the property datacenterId (base name: "datacenterId")', function() {
      // uncomment below and update the code to test the property datacenterId
      //var instance = new MorpheusApi.ZoneVcenterConfig();
      //expect(instance).to.be();
    });

    it('should have the property configCmdbDiscovery (base name: "configCmdbDiscovery")', function() {
      // uncomment below and update the code to test the property configCmdbDiscovery
      //var instance = new MorpheusApi.ZoneVcenterConfig();
      //expect(instance).to.be();
    });

    it('should have the property distributedWorkerId (base name: "distributedWorkerId")', function() {
      // uncomment below and update the code to test the property distributedWorkerId
      //var instance = new MorpheusApi.ZoneVcenterConfig();
      //expect(instance).to.be();
    });

    it('should have the property passwordHash (base name: "passwordHash")', function() {
      // uncomment below and update the code to test the property passwordHash
      //var instance = new MorpheusApi.ZoneVcenterConfig();
      //expect(instance).to.be();
    });

  });

}));
