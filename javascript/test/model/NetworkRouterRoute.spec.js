/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MorpheusApi);
  }
}(this, function(expect, MorpheusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MorpheusApi.NetworkRouterRoute();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('NetworkRouterRoute', function() {
    it('should create an instance of NetworkRouterRoute', function() {
      // uncomment below and update the code to test NetworkRouterRoute
      //var instane = new MorpheusApi.NetworkRouterRoute();
      //expect(instance).to.be.a(MorpheusApi.NetworkRouterRoute);
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new MorpheusApi.NetworkRouterRoute();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new MorpheusApi.NetworkRouterRoute();
      //expect(instance).to.be();
    });

    it('should have the property code (base name: "code")', function() {
      // uncomment below and update the code to test the property code
      //var instance = new MorpheusApi.NetworkRouterRoute();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new MorpheusApi.NetworkRouterRoute();
      //expect(instance).to.be();
    });

    it('should have the property priority (base name: "priority")', function() {
      // uncomment below and update the code to test the property priority
      //var instance = new MorpheusApi.NetworkRouterRoute();
      //expect(instance).to.be();
    });

    it('should have the property routeType (base name: "routeType")', function() {
      // uncomment below and update the code to test the property routeType
      //var instance = new MorpheusApi.NetworkRouterRoute();
      //expect(instance).to.be();
    });

    it('should have the property source (base name: "source")', function() {
      // uncomment below and update the code to test the property source
      //var instance = new MorpheusApi.NetworkRouterRoute();
      //expect(instance).to.be();
    });

    it('should have the property sourceType (base name: "sourceType")', function() {
      // uncomment below and update the code to test the property sourceType
      //var instance = new MorpheusApi.NetworkRouterRoute();
      //expect(instance).to.be();
    });

    it('should have the property destination (base name: "destination")', function() {
      // uncomment below and update the code to test the property destination
      //var instance = new MorpheusApi.NetworkRouterRoute();
      //expect(instance).to.be();
    });

    it('should have the property destinationType (base name: "destinationType")', function() {
      // uncomment below and update the code to test the property destinationType
      //var instance = new MorpheusApi.NetworkRouterRoute();
      //expect(instance).to.be();
    });

    it('should have the property defaultRoute (base name: "defaultRoute")', function() {
      // uncomment below and update the code to test the property defaultRoute
      //var instance = new MorpheusApi.NetworkRouterRoute();
      //expect(instance).to.be();
    });

    it('should have the property networkMtu (base name: "networkMtu")', function() {
      // uncomment below and update the code to test the property networkMtu
      //var instance = new MorpheusApi.NetworkRouterRoute();
      //expect(instance).to.be();
    });

    it('should have the property externalInterface (base name: "externalInterface")', function() {
      // uncomment below and update the code to test the property externalInterface
      //var instance = new MorpheusApi.NetworkRouterRoute();
      //expect(instance).to.be();
    });

    it('should have the property internalId (base name: "internalId")', function() {
      // uncomment below and update the code to test the property internalId
      //var instance = new MorpheusApi.NetworkRouterRoute();
      //expect(instance).to.be();
    });

    it('should have the property externalId (base name: "externalId")', function() {
      // uncomment below and update the code to test the property externalId
      //var instance = new MorpheusApi.NetworkRouterRoute();
      //expect(instance).to.be();
    });

    it('should have the property uniqueId (base name: "uniqueId")', function() {
      // uncomment below and update the code to test the property uniqueId
      //var instance = new MorpheusApi.NetworkRouterRoute();
      //expect(instance).to.be();
    });

    it('should have the property providerId (base name: "providerId")', function() {
      // uncomment below and update the code to test the property providerId
      //var instance = new MorpheusApi.NetworkRouterRoute();
      //expect(instance).to.be();
    });

    it('should have the property externalType (base name: "externalType")', function() {
      // uncomment below and update the code to test the property externalType
      //var instance = new MorpheusApi.NetworkRouterRoute();
      //expect(instance).to.be();
    });

    it('should have the property enabled (base name: "enabled")', function() {
      // uncomment below and update the code to test the property enabled
      //var instance = new MorpheusApi.NetworkRouterRoute();
      //expect(instance).to.be();
    });

    it('should have the property visible (base name: "visible")', function() {
      // uncomment below and update the code to test the property visible
      //var instance = new MorpheusApi.NetworkRouterRoute();
      //expect(instance).to.be();
    });

  });

}));
