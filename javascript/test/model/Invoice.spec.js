/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MorpheusApi);
  }
}(this, function(expect, MorpheusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MorpheusApi.Invoice();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Invoice', function() {
    it('should create an instance of Invoice', function() {
      // uncomment below and update the code to test Invoice
      //var instane = new MorpheusApi.Invoice();
      //expect(instance).to.be.a(MorpheusApi.Invoice);
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new MorpheusApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property ownerId (base name: "ownerId")', function() {
      // uncomment below and update the code to test the property ownerId
      //var instance = new MorpheusApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property account (base name: "account")', function() {
      // uncomment below and update the code to test the property account
      //var instance = new MorpheusApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property group (base name: "group")', function() {
      // uncomment below and update the code to test the property group
      //var instance = new MorpheusApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property cloud (base name: "cloud")', function() {
      // uncomment below and update the code to test the property cloud
      //var instance = new MorpheusApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property instance (base name: "instance")', function() {
      // uncomment below and update the code to test the property instance
      //var instance = new MorpheusApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property server (base name: "server")', function() {
      // uncomment below and update the code to test the property server
      //var instance = new MorpheusApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property cluster (base name: "cluster")', function() {
      // uncomment below and update the code to test the property cluster
      //var instance = new MorpheusApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property user (base name: "user")', function() {
      // uncomment below and update the code to test the property user
      //var instance = new MorpheusApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property plan (base name: "plan")', function() {
      // uncomment below and update the code to test the property plan
      //var instance = new MorpheusApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property tags (base name: "tags")', function() {
      // uncomment below and update the code to test the property tags
      //var instance = new MorpheusApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property project (base name: "project")', function() {
      // uncomment below and update the code to test the property project
      //var instance = new MorpheusApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property refType (base name: "refType")', function() {
      // uncomment below and update the code to test the property refType
      //var instance = new MorpheusApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property refId (base name: "refId")', function() {
      // uncomment below and update the code to test the property refId
      //var instance = new MorpheusApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property refUuid (base name: "refUuid")', function() {
      // uncomment below and update the code to test the property refUuid
      //var instance = new MorpheusApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property refName (base name: "refName")', function() {
      // uncomment below and update the code to test the property refName
      //var instance = new MorpheusApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property refCategory (base name: "refCategory")', function() {
      // uncomment below and update the code to test the property refCategory
      //var instance = new MorpheusApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property resourceId (base name: "resourceId")', function() {
      // uncomment below and update the code to test the property resourceId
      //var instance = new MorpheusApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property resourceUuid (base name: "resourceUuid")', function() {
      // uncomment below and update the code to test the property resourceUuid
      //var instance = new MorpheusApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property resourceType (base name: "resourceType")', function() {
      // uncomment below and update the code to test the property resourceType
      //var instance = new MorpheusApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property resourceName (base name: "resourceName")', function() {
      // uncomment below and update the code to test the property resourceName
      //var instance = new MorpheusApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property resourceExternalId (base name: "resourceExternalId")', function() {
      // uncomment below and update the code to test the property resourceExternalId
      //var instance = new MorpheusApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property resourceInternalId (base name: "resourceInternalId")', function() {
      // uncomment below and update the code to test the property resourceInternalId
      //var instance = new MorpheusApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property interval (base name: "interval")', function() {
      // uncomment below and update the code to test the property interval
      //var instance = new MorpheusApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property period (base name: "period")', function() {
      // uncomment below and update the code to test the property period
      //var instance = new MorpheusApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property estimate (base name: "estimate")', function() {
      // uncomment below and update the code to test the property estimate
      //var instance = new MorpheusApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property summaryInvoice (base name: "summaryInvoice")', function() {
      // uncomment below and update the code to test the property summaryInvoice
      //var instance = new MorpheusApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property active (base name: "active")', function() {
      // uncomment below and update the code to test the property active
      //var instance = new MorpheusApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property startDate (base name: "startDate")', function() {
      // uncomment below and update the code to test the property startDate
      //var instance = new MorpheusApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property endDate (base name: "endDate")', function() {
      // uncomment below and update the code to test the property endDate
      //var instance = new MorpheusApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property refStart (base name: "refStart")', function() {
      // uncomment below and update the code to test the property refStart
      //var instance = new MorpheusApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property refEnd (base name: "refEnd")', function() {
      // uncomment below and update the code to test the property refEnd
      //var instance = new MorpheusApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property estimatedComputePrice (base name: "estimatedComputePrice")', function() {
      // uncomment below and update the code to test the property estimatedComputePrice
      //var instance = new MorpheusApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property estimatedComputeCost (base name: "estimatedComputeCost")', function() {
      // uncomment below and update the code to test the property estimatedComputeCost
      //var instance = new MorpheusApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property estimatedMemoryPrice (base name: "estimatedMemoryPrice")', function() {
      // uncomment below and update the code to test the property estimatedMemoryPrice
      //var instance = new MorpheusApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property estimatedMemoryCost (base name: "estimatedMemoryCost")', function() {
      // uncomment below and update the code to test the property estimatedMemoryCost
      //var instance = new MorpheusApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property estimatedStoragePrice (base name: "estimatedStoragePrice")', function() {
      // uncomment below and update the code to test the property estimatedStoragePrice
      //var instance = new MorpheusApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property estimatedStorageCost (base name: "estimatedStorageCost")', function() {
      // uncomment below and update the code to test the property estimatedStorageCost
      //var instance = new MorpheusApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property estimatedNetworkPrice (base name: "estimatedNetworkPrice")', function() {
      // uncomment below and update the code to test the property estimatedNetworkPrice
      //var instance = new MorpheusApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property estimatedNetworkCost (base name: "estimatedNetworkCost")', function() {
      // uncomment below and update the code to test the property estimatedNetworkCost
      //var instance = new MorpheusApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property estimatedLicensePrice (base name: "estimatedLicensePrice")', function() {
      // uncomment below and update the code to test the property estimatedLicensePrice
      //var instance = new MorpheusApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property estimatedLicenseCost (base name: "estimatedLicenseCost")', function() {
      // uncomment below and update the code to test the property estimatedLicenseCost
      //var instance = new MorpheusApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property estimatedExtraPrice (base name: "estimatedExtraPrice")', function() {
      // uncomment below and update the code to test the property estimatedExtraPrice
      //var instance = new MorpheusApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property estimatedExtraCost (base name: "estimatedExtraCost")', function() {
      // uncomment below and update the code to test the property estimatedExtraCost
      //var instance = new MorpheusApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property estimatedTotalPrice (base name: "estimatedTotalPrice")', function() {
      // uncomment below and update the code to test the property estimatedTotalPrice
      //var instance = new MorpheusApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property estimatedTotalCost (base name: "estimatedTotalCost")', function() {
      // uncomment below and update the code to test the property estimatedTotalCost
      //var instance = new MorpheusApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property estimatedRunningPrice (base name: "estimatedRunningPrice")', function() {
      // uncomment below and update the code to test the property estimatedRunningPrice
      //var instance = new MorpheusApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property estimatedRunningCost (base name: "estimatedRunningCost")', function() {
      // uncomment below and update the code to test the property estimatedRunningCost
      //var instance = new MorpheusApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property estimatedCurrency (base name: "estimatedCurrency")', function() {
      // uncomment below and update the code to test the property estimatedCurrency
      //var instance = new MorpheusApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property estimatedConversionRate (base name: "estimatedConversionRate")', function() {
      // uncomment below and update the code to test the property estimatedConversionRate
      //var instance = new MorpheusApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property actualComputePrice (base name: "actualComputePrice")', function() {
      // uncomment below and update the code to test the property actualComputePrice
      //var instance = new MorpheusApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property actualComputeCost (base name: "actualComputeCost")', function() {
      // uncomment below and update the code to test the property actualComputeCost
      //var instance = new MorpheusApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property actualMemoryPrice (base name: "actualMemoryPrice")', function() {
      // uncomment below and update the code to test the property actualMemoryPrice
      //var instance = new MorpheusApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property actualMemoryCost (base name: "actualMemoryCost")', function() {
      // uncomment below and update the code to test the property actualMemoryCost
      //var instance = new MorpheusApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property actualStoragePrice (base name: "actualStoragePrice")', function() {
      // uncomment below and update the code to test the property actualStoragePrice
      //var instance = new MorpheusApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property actualStorageCost (base name: "actualStorageCost")', function() {
      // uncomment below and update the code to test the property actualStorageCost
      //var instance = new MorpheusApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property actualNetworkPrice (base name: "actualNetworkPrice")', function() {
      // uncomment below and update the code to test the property actualNetworkPrice
      //var instance = new MorpheusApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property actualNetworkCost (base name: "actualNetworkCost")', function() {
      // uncomment below and update the code to test the property actualNetworkCost
      //var instance = new MorpheusApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property actualLicensePrice (base name: "actualLicensePrice")', function() {
      // uncomment below and update the code to test the property actualLicensePrice
      //var instance = new MorpheusApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property actualLicenseCost (base name: "actualLicenseCost")', function() {
      // uncomment below and update the code to test the property actualLicenseCost
      //var instance = new MorpheusApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property actualExtraPrice (base name: "actualExtraPrice")', function() {
      // uncomment below and update the code to test the property actualExtraPrice
      //var instance = new MorpheusApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property actualExtraCost (base name: "actualExtraCost")', function() {
      // uncomment below and update the code to test the property actualExtraCost
      //var instance = new MorpheusApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property actualTotalPrice (base name: "actualTotalPrice")', function() {
      // uncomment below and update the code to test the property actualTotalPrice
      //var instance = new MorpheusApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property actualTotalCost (base name: "actualTotalCost")', function() {
      // uncomment below and update the code to test the property actualTotalCost
      //var instance = new MorpheusApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property actualRunningPrice (base name: "actualRunningPrice")', function() {
      // uncomment below and update the code to test the property actualRunningPrice
      //var instance = new MorpheusApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property actualRunningCost (base name: "actualRunningCost")', function() {
      // uncomment below and update the code to test the property actualRunningCost
      //var instance = new MorpheusApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property actualCurrency (base name: "actualCurrency")', function() {
      // uncomment below and update the code to test the property actualCurrency
      //var instance = new MorpheusApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property actualConversionRate (base name: "actualConversionRate")', function() {
      // uncomment below and update the code to test the property actualConversionRate
      //var instance = new MorpheusApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property computePrice (base name: "computePrice")', function() {
      // uncomment below and update the code to test the property computePrice
      //var instance = new MorpheusApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property computeCost (base name: "computeCost")', function() {
      // uncomment below and update the code to test the property computeCost
      //var instance = new MorpheusApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property memoryPrice (base name: "memoryPrice")', function() {
      // uncomment below and update the code to test the property memoryPrice
      //var instance = new MorpheusApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property memoryCost (base name: "memoryCost")', function() {
      // uncomment below and update the code to test the property memoryCost
      //var instance = new MorpheusApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property storagePrice (base name: "storagePrice")', function() {
      // uncomment below and update the code to test the property storagePrice
      //var instance = new MorpheusApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property storageCost (base name: "storageCost")', function() {
      // uncomment below and update the code to test the property storageCost
      //var instance = new MorpheusApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property networkPrice (base name: "networkPrice")', function() {
      // uncomment below and update the code to test the property networkPrice
      //var instance = new MorpheusApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property networkCost (base name: "networkCost")', function() {
      // uncomment below and update the code to test the property networkCost
      //var instance = new MorpheusApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property licensePrice (base name: "licensePrice")', function() {
      // uncomment below and update the code to test the property licensePrice
      //var instance = new MorpheusApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property licenseCost (base name: "licenseCost")', function() {
      // uncomment below and update the code to test the property licenseCost
      //var instance = new MorpheusApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property extraPrice (base name: "extraPrice")', function() {
      // uncomment below and update the code to test the property extraPrice
      //var instance = new MorpheusApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property extraCost (base name: "extraCost")', function() {
      // uncomment below and update the code to test the property extraCost
      //var instance = new MorpheusApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property totalPrice (base name: "totalPrice")', function() {
      // uncomment below and update the code to test the property totalPrice
      //var instance = new MorpheusApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property totalCost (base name: "totalCost")', function() {
      // uncomment below and update the code to test the property totalCost
      //var instance = new MorpheusApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property runningPrice (base name: "runningPrice")', function() {
      // uncomment below and update the code to test the property runningPrice
      //var instance = new MorpheusApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property runningCost (base name: "runningCost")', function() {
      // uncomment below and update the code to test the property runningCost
      //var instance = new MorpheusApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property currency (base name: "currency")', function() {
      // uncomment below and update the code to test the property currency
      //var instance = new MorpheusApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property conversionRate (base name: "conversionRate")', function() {
      // uncomment below and update the code to test the property conversionRate
      //var instance = new MorpheusApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property costType (base name: "costType")', function() {
      // uncomment below and update the code to test the property costType
      //var instance = new MorpheusApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property offTime (base name: "offTime")', function() {
      // uncomment below and update the code to test the property offTime
      //var instance = new MorpheusApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property powerState (base name: "powerState")', function() {
      // uncomment below and update the code to test the property powerState
      //var instance = new MorpheusApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property powerDate (base name: "powerDate")', function() {
      // uncomment below and update the code to test the property powerDate
      //var instance = new MorpheusApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property runningMultiplier (base name: "runningMultiplier")', function() {
      // uncomment below and update the code to test the property runningMultiplier
      //var instance = new MorpheusApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property usageType (base name: "usageType")', function() {
      // uncomment below and update the code to test the property usageType
      //var instance = new MorpheusApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property usageCategory (base name: "usageCategory")', function() {
      // uncomment below and update the code to test the property usageCategory
      //var instance = new MorpheusApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property lastCostDate (base name: "lastCostDate")', function() {
      // uncomment below and update the code to test the property lastCostDate
      //var instance = new MorpheusApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property lastActualDate (base name: "lastActualDate")', function() {
      // uncomment below and update the code to test the property lastActualDate
      //var instance = new MorpheusApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property dateCreated (base name: "dateCreated")', function() {
      // uncomment below and update the code to test the property dateCreated
      //var instance = new MorpheusApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property lastUpdated (base name: "lastUpdated")', function() {
      // uncomment below and update the code to test the property lastUpdated
      //var instance = new MorpheusApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property lineItemCount (base name: "lineItemCount")', function() {
      // uncomment below and update the code to test the property lineItemCount
      //var instance = new MorpheusApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property lineItems (base name: "lineItems")', function() {
      // uncomment below and update the code to test the property lineItems
      //var instance = new MorpheusApi.Invoice();
      //expect(instance).to.be();
    });

  });

}));
