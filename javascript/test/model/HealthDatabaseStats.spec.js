/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MorpheusApi);
  }
}(this, function(expect, MorpheusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MorpheusApi.HealthDatabaseStats();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('HealthDatabaseStats', function() {
    it('should create an instance of HealthDatabaseStats', function() {
      // uncomment below and update the code to test HealthDatabaseStats
      //var instane = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be.a(MorpheusApi.HealthDatabaseStats);
    });

    it('should have the property abortedClients (base name: "Aborted_clients")', function() {
      // uncomment below and update the code to test the property abortedClients
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property abortedConnects (base name: "Aborted_connects")', function() {
      // uncomment below and update the code to test the property abortedConnects
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property binlogSnapshotFile (base name: "Binlog_snapshot_file")', function() {
      // uncomment below and update the code to test the property binlogSnapshotFile
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property binlogSnapshotPosition (base name: "Binlog_snapshot_position")', function() {
      // uncomment below and update the code to test the property binlogSnapshotPosition
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property binlogCacheDiskUse (base name: "Binlog_cache_disk_use")', function() {
      // uncomment below and update the code to test the property binlogCacheDiskUse
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property binlogCacheUse (base name: "Binlog_cache_use")', function() {
      // uncomment below and update the code to test the property binlogCacheUse
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property binlogSnapshotGtidExecuted (base name: "Binlog_snapshot_gtid_executed")', function() {
      // uncomment below and update the code to test the property binlogSnapshotGtidExecuted
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property binlogStmtCacheDiskUse (base name: "Binlog_stmt_cache_disk_use")', function() {
      // uncomment below and update the code to test the property binlogStmtCacheDiskUse
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property binlogStmtCacheUse (base name: "Binlog_stmt_cache_use")', function() {
      // uncomment below and update the code to test the property binlogStmtCacheUse
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property bytesReceived (base name: "Bytes_received")', function() {
      // uncomment below and update the code to test the property bytesReceived
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property bytesSent (base name: "Bytes_sent")', function() {
      // uncomment below and update the code to test the property bytesSent
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comAdminCommands (base name: "Com_admin_commands")', function() {
      // uncomment below and update the code to test the property comAdminCommands
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comAssignToKeycache (base name: "Com_assign_to_keycache")', function() {
      // uncomment below and update the code to test the property comAssignToKeycache
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comAlterDb (base name: "Com_alter_db")', function() {
      // uncomment below and update the code to test the property comAlterDb
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comAlterDbUpgrade (base name: "Com_alter_db_upgrade")', function() {
      // uncomment below and update the code to test the property comAlterDbUpgrade
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comAlterEvent (base name: "Com_alter_event")', function() {
      // uncomment below and update the code to test the property comAlterEvent
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comAlterFunction (base name: "Com_alter_function")', function() {
      // uncomment below and update the code to test the property comAlterFunction
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comAlterInstance (base name: "Com_alter_instance")', function() {
      // uncomment below and update the code to test the property comAlterInstance
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comAlterProcedure (base name: "Com_alter_procedure")', function() {
      // uncomment below and update the code to test the property comAlterProcedure
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comAlterServer (base name: "Com_alter_server")', function() {
      // uncomment below and update the code to test the property comAlterServer
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comAlterTable (base name: "Com_alter_table")', function() {
      // uncomment below and update the code to test the property comAlterTable
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comAlterTablespace (base name: "Com_alter_tablespace")', function() {
      // uncomment below and update the code to test the property comAlterTablespace
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comAlterUser (base name: "Com_alter_user")', function() {
      // uncomment below and update the code to test the property comAlterUser
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comAnalyze (base name: "Com_analyze")', function() {
      // uncomment below and update the code to test the property comAnalyze
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comBegin (base name: "Com_begin")', function() {
      // uncomment below and update the code to test the property comBegin
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comBinlog (base name: "Com_binlog")', function() {
      // uncomment below and update the code to test the property comBinlog
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comCallProcedure (base name: "Com_call_procedure")', function() {
      // uncomment below and update the code to test the property comCallProcedure
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comChangeDb (base name: "Com_change_db")', function() {
      // uncomment below and update the code to test the property comChangeDb
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comChangeMaster (base name: "Com_change_master")', function() {
      // uncomment below and update the code to test the property comChangeMaster
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comChangeReplFilter (base name: "Com_change_repl_filter")', function() {
      // uncomment below and update the code to test the property comChangeReplFilter
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comCheck (base name: "Com_check")', function() {
      // uncomment below and update the code to test the property comCheck
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comChecksum (base name: "Com_checksum")', function() {
      // uncomment below and update the code to test the property comChecksum
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comCommit (base name: "Com_commit")', function() {
      // uncomment below and update the code to test the property comCommit
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comCreateCompressionDictionary (base name: "Com_create_compression_dictionary")', function() {
      // uncomment below and update the code to test the property comCreateCompressionDictionary
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comCreateDb (base name: "Com_create_db")', function() {
      // uncomment below and update the code to test the property comCreateDb
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comCreateEvent (base name: "Com_create_event")', function() {
      // uncomment below and update the code to test the property comCreateEvent
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comCreateFunction (base name: "Com_create_function")', function() {
      // uncomment below and update the code to test the property comCreateFunction
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comCreateIndex (base name: "Com_create_index")', function() {
      // uncomment below and update the code to test the property comCreateIndex
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comCreateProcedure (base name: "Com_create_procedure")', function() {
      // uncomment below and update the code to test the property comCreateProcedure
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comCreateServer (base name: "Com_create_server")', function() {
      // uncomment below and update the code to test the property comCreateServer
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comCreateTable (base name: "Com_create_table")', function() {
      // uncomment below and update the code to test the property comCreateTable
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comCreateTrigger (base name: "Com_create_trigger")', function() {
      // uncomment below and update the code to test the property comCreateTrigger
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comCreateUdf (base name: "Com_create_udf")', function() {
      // uncomment below and update the code to test the property comCreateUdf
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comCreateUser (base name: "Com_create_user")', function() {
      // uncomment below and update the code to test the property comCreateUser
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comCreateView (base name: "Com_create_view")', function() {
      // uncomment below and update the code to test the property comCreateView
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comDeallocSql (base name: "Com_dealloc_sql")', function() {
      // uncomment below and update the code to test the property comDeallocSql
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comDelete (base name: "Com_delete")', function() {
      // uncomment below and update the code to test the property comDelete
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comDeleteMulti (base name: "Com_delete_multi")', function() {
      // uncomment below and update the code to test the property comDeleteMulti
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comDo (base name: "Com_do")', function() {
      // uncomment below and update the code to test the property comDo
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comDropCompressionDictionary (base name: "Com_drop_compression_dictionary")', function() {
      // uncomment below and update the code to test the property comDropCompressionDictionary
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comDropDb (base name: "Com_drop_db")', function() {
      // uncomment below and update the code to test the property comDropDb
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comDropEvent (base name: "Com_drop_event")', function() {
      // uncomment below and update the code to test the property comDropEvent
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comDropFunction (base name: "Com_drop_function")', function() {
      // uncomment below and update the code to test the property comDropFunction
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comDropIndex (base name: "Com_drop_index")', function() {
      // uncomment below and update the code to test the property comDropIndex
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comDropProcedure (base name: "Com_drop_procedure")', function() {
      // uncomment below and update the code to test the property comDropProcedure
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comDropServer (base name: "Com_drop_server")', function() {
      // uncomment below and update the code to test the property comDropServer
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comDropTable (base name: "Com_drop_table")', function() {
      // uncomment below and update the code to test the property comDropTable
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comDropTrigger (base name: "Com_drop_trigger")', function() {
      // uncomment below and update the code to test the property comDropTrigger
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comDropUser (base name: "Com_drop_user")', function() {
      // uncomment below and update the code to test the property comDropUser
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comDropView (base name: "Com_drop_view")', function() {
      // uncomment below and update the code to test the property comDropView
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comEmptyQuery (base name: "Com_empty_query")', function() {
      // uncomment below and update the code to test the property comEmptyQuery
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comExecuteSql (base name: "Com_execute_sql")', function() {
      // uncomment below and update the code to test the property comExecuteSql
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comExplainOther (base name: "Com_explain_other")', function() {
      // uncomment below and update the code to test the property comExplainOther
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comFlush (base name: "Com_flush")', function() {
      // uncomment below and update the code to test the property comFlush
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comGetDiagnostics (base name: "Com_get_diagnostics")', function() {
      // uncomment below and update the code to test the property comGetDiagnostics
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comGrant (base name: "Com_grant")', function() {
      // uncomment below and update the code to test the property comGrant
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comHaClose (base name: "Com_ha_close")', function() {
      // uncomment below and update the code to test the property comHaClose
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comHaOpen (base name: "Com_ha_open")', function() {
      // uncomment below and update the code to test the property comHaOpen
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comHaRead (base name: "Com_ha_read")', function() {
      // uncomment below and update the code to test the property comHaRead
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comHelp (base name: "Com_help")', function() {
      // uncomment below and update the code to test the property comHelp
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comInsert (base name: "Com_insert")', function() {
      // uncomment below and update the code to test the property comInsert
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comInsertSelect (base name: "Com_insert_select")', function() {
      // uncomment below and update the code to test the property comInsertSelect
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comInstallPlugin (base name: "Com_install_plugin")', function() {
      // uncomment below and update the code to test the property comInstallPlugin
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comKill (base name: "Com_kill")', function() {
      // uncomment below and update the code to test the property comKill
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comLoad (base name: "Com_load")', function() {
      // uncomment below and update the code to test the property comLoad
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comLockTables (base name: "Com_lock_tables")', function() {
      // uncomment below and update the code to test the property comLockTables
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comLockTablesForBackup (base name: "Com_lock_tables_for_backup")', function() {
      // uncomment below and update the code to test the property comLockTablesForBackup
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comLockBinlogForBackup (base name: "Com_lock_binlog_for_backup")', function() {
      // uncomment below and update the code to test the property comLockBinlogForBackup
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comOptimize (base name: "Com_optimize")', function() {
      // uncomment below and update the code to test the property comOptimize
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comPreloadKeys (base name: "Com_preload_keys")', function() {
      // uncomment below and update the code to test the property comPreloadKeys
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comPrepareSql (base name: "Com_prepare_sql")', function() {
      // uncomment below and update the code to test the property comPrepareSql
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comPurge (base name: "Com_purge")', function() {
      // uncomment below and update the code to test the property comPurge
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comPurgeBeforeDate (base name: "Com_purge_before_date")', function() {
      // uncomment below and update the code to test the property comPurgeBeforeDate
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comReleaseSavepoint (base name: "Com_release_savepoint")', function() {
      // uncomment below and update the code to test the property comReleaseSavepoint
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comRenameTable (base name: "Com_rename_table")', function() {
      // uncomment below and update the code to test the property comRenameTable
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comRenameUser (base name: "Com_rename_user")', function() {
      // uncomment below and update the code to test the property comRenameUser
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comRepair (base name: "Com_repair")', function() {
      // uncomment below and update the code to test the property comRepair
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comReplace (base name: "Com_replace")', function() {
      // uncomment below and update the code to test the property comReplace
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comReplaceSelect (base name: "Com_replace_select")', function() {
      // uncomment below and update the code to test the property comReplaceSelect
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comReset (base name: "Com_reset")', function() {
      // uncomment below and update the code to test the property comReset
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comResignal (base name: "Com_resignal")', function() {
      // uncomment below and update the code to test the property comResignal
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comRevoke (base name: "Com_revoke")', function() {
      // uncomment below and update the code to test the property comRevoke
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comRevokeAll (base name: "Com_revoke_all")', function() {
      // uncomment below and update the code to test the property comRevokeAll
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comRollback (base name: "Com_rollback")', function() {
      // uncomment below and update the code to test the property comRollback
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comRollbackToSavepoint (base name: "Com_rollback_to_savepoint")', function() {
      // uncomment below and update the code to test the property comRollbackToSavepoint
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comSavepoint (base name: "Com_savepoint")', function() {
      // uncomment below and update the code to test the property comSavepoint
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comSelect (base name: "Com_select")', function() {
      // uncomment below and update the code to test the property comSelect
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comSetOption (base name: "Com_set_option")', function() {
      // uncomment below and update the code to test the property comSetOption
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comSignal (base name: "Com_signal")', function() {
      // uncomment below and update the code to test the property comSignal
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comShowBinlogEvents (base name: "Com_show_binlog_events")', function() {
      // uncomment below and update the code to test the property comShowBinlogEvents
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comShowBinlogs (base name: "Com_show_binlogs")', function() {
      // uncomment below and update the code to test the property comShowBinlogs
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comShowCharsets (base name: "Com_show_charsets")', function() {
      // uncomment below and update the code to test the property comShowCharsets
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comShowClientStatistics (base name: "Com_show_client_statistics")', function() {
      // uncomment below and update the code to test the property comShowClientStatistics
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comShowCollations (base name: "Com_show_collations")', function() {
      // uncomment below and update the code to test the property comShowCollations
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comShowCreateDb (base name: "Com_show_create_db")', function() {
      // uncomment below and update the code to test the property comShowCreateDb
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comShowCreateEvent (base name: "Com_show_create_event")', function() {
      // uncomment below and update the code to test the property comShowCreateEvent
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comShowCreateFunc (base name: "Com_show_create_func")', function() {
      // uncomment below and update the code to test the property comShowCreateFunc
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comShowCreateProc (base name: "Com_show_create_proc")', function() {
      // uncomment below and update the code to test the property comShowCreateProc
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comShowCreateTable (base name: "Com_show_create_table")', function() {
      // uncomment below and update the code to test the property comShowCreateTable
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comShowCreateTrigger (base name: "Com_show_create_trigger")', function() {
      // uncomment below and update the code to test the property comShowCreateTrigger
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comShowDatabases (base name: "Com_show_databases")', function() {
      // uncomment below and update the code to test the property comShowDatabases
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comShowEngineLogs (base name: "Com_show_engine_logs")', function() {
      // uncomment below and update the code to test the property comShowEngineLogs
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comShowEngineMutex (base name: "Com_show_engine_mutex")', function() {
      // uncomment below and update the code to test the property comShowEngineMutex
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comShowEngineStatus (base name: "Com_show_engine_status")', function() {
      // uncomment below and update the code to test the property comShowEngineStatus
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comShowEvents (base name: "Com_show_events")', function() {
      // uncomment below and update the code to test the property comShowEvents
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comShowErrors (base name: "Com_show_errors")', function() {
      // uncomment below and update the code to test the property comShowErrors
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comShowFields (base name: "Com_show_fields")', function() {
      // uncomment below and update the code to test the property comShowFields
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comShowFunctionCode (base name: "Com_show_function_code")', function() {
      // uncomment below and update the code to test the property comShowFunctionCode
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comShowFunctionStatus (base name: "Com_show_function_status")', function() {
      // uncomment below and update the code to test the property comShowFunctionStatus
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comShowGrants (base name: "Com_show_grants")', function() {
      // uncomment below and update the code to test the property comShowGrants
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comShowIndexStatistics (base name: "Com_show_index_statistics")', function() {
      // uncomment below and update the code to test the property comShowIndexStatistics
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comShowKeys (base name: "Com_show_keys")', function() {
      // uncomment below and update the code to test the property comShowKeys
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comShowMasterStatus (base name: "Com_show_master_status")', function() {
      // uncomment below and update the code to test the property comShowMasterStatus
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comShowOpenTables (base name: "Com_show_open_tables")', function() {
      // uncomment below and update the code to test the property comShowOpenTables
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comShowPlugins (base name: "Com_show_plugins")', function() {
      // uncomment below and update the code to test the property comShowPlugins
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comShowPrivileges (base name: "Com_show_privileges")', function() {
      // uncomment below and update the code to test the property comShowPrivileges
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comShowProcedureCode (base name: "Com_show_procedure_code")', function() {
      // uncomment below and update the code to test the property comShowProcedureCode
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comShowProcedureStatus (base name: "Com_show_procedure_status")', function() {
      // uncomment below and update the code to test the property comShowProcedureStatus
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comShowProcesslist (base name: "Com_show_processlist")', function() {
      // uncomment below and update the code to test the property comShowProcesslist
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comShowProfile (base name: "Com_show_profile")', function() {
      // uncomment below and update the code to test the property comShowProfile
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comShowProfiles (base name: "Com_show_profiles")', function() {
      // uncomment below and update the code to test the property comShowProfiles
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comShowRelaylogEvents (base name: "Com_show_relaylog_events")', function() {
      // uncomment below and update the code to test the property comShowRelaylogEvents
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comShowSlaveHosts (base name: "Com_show_slave_hosts")', function() {
      // uncomment below and update the code to test the property comShowSlaveHosts
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comShowSlaveStatus (base name: "Com_show_slave_status")', function() {
      // uncomment below and update the code to test the property comShowSlaveStatus
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comShowStatus (base name: "Com_show_status")', function() {
      // uncomment below and update the code to test the property comShowStatus
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comShowStorageEngines (base name: "Com_show_storage_engines")', function() {
      // uncomment below and update the code to test the property comShowStorageEngines
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comShowTableStatistics (base name: "Com_show_table_statistics")', function() {
      // uncomment below and update the code to test the property comShowTableStatistics
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comShowTableStatus (base name: "Com_show_table_status")', function() {
      // uncomment below and update the code to test the property comShowTableStatus
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comShowTables (base name: "Com_show_tables")', function() {
      // uncomment below and update the code to test the property comShowTables
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comShowThreadStatistics (base name: "Com_show_thread_statistics")', function() {
      // uncomment below and update the code to test the property comShowThreadStatistics
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comShowTriggers (base name: "Com_show_triggers")', function() {
      // uncomment below and update the code to test the property comShowTriggers
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comShowUserStatistics (base name: "Com_show_user_statistics")', function() {
      // uncomment below and update the code to test the property comShowUserStatistics
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comShowVariables (base name: "Com_show_variables")', function() {
      // uncomment below and update the code to test the property comShowVariables
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comShowWarnings (base name: "Com_show_warnings")', function() {
      // uncomment below and update the code to test the property comShowWarnings
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comShowCreateUser (base name: "Com_show_create_user")', function() {
      // uncomment below and update the code to test the property comShowCreateUser
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comShutdown (base name: "Com_shutdown")', function() {
      // uncomment below and update the code to test the property comShutdown
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comSlaveStart (base name: "Com_slave_start")', function() {
      // uncomment below and update the code to test the property comSlaveStart
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comSlaveStop (base name: "Com_slave_stop")', function() {
      // uncomment below and update the code to test the property comSlaveStop
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comGroupReplicationStart (base name: "Com_group_replication_start")', function() {
      // uncomment below and update the code to test the property comGroupReplicationStart
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comGroupReplicationStop (base name: "Com_group_replication_stop")', function() {
      // uncomment below and update the code to test the property comGroupReplicationStop
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comStmtExecute (base name: "Com_stmt_execute")', function() {
      // uncomment below and update the code to test the property comStmtExecute
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comStmtClose (base name: "Com_stmt_close")', function() {
      // uncomment below and update the code to test the property comStmtClose
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comStmtFetch (base name: "Com_stmt_fetch")', function() {
      // uncomment below and update the code to test the property comStmtFetch
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comStmtPrepare (base name: "Com_stmt_prepare")', function() {
      // uncomment below and update the code to test the property comStmtPrepare
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comStmtReset (base name: "Com_stmt_reset")', function() {
      // uncomment below and update the code to test the property comStmtReset
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comStmtSendLongData (base name: "Com_stmt_send_long_data")', function() {
      // uncomment below and update the code to test the property comStmtSendLongData
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comTruncate (base name: "Com_truncate")', function() {
      // uncomment below and update the code to test the property comTruncate
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comUninstallPlugin (base name: "Com_uninstall_plugin")', function() {
      // uncomment below and update the code to test the property comUninstallPlugin
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comUnlockBinlog (base name: "Com_unlock_binlog")', function() {
      // uncomment below and update the code to test the property comUnlockBinlog
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comUnlockTables (base name: "Com_unlock_tables")', function() {
      // uncomment below and update the code to test the property comUnlockTables
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comUpdate (base name: "Com_update")', function() {
      // uncomment below and update the code to test the property comUpdate
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comUpdateMulti (base name: "Com_update_multi")', function() {
      // uncomment below and update the code to test the property comUpdateMulti
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comXaCommit (base name: "Com_xa_commit")', function() {
      // uncomment below and update the code to test the property comXaCommit
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comXaEnd (base name: "Com_xa_end")', function() {
      // uncomment below and update the code to test the property comXaEnd
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comXaPrepare (base name: "Com_xa_prepare")', function() {
      // uncomment below and update the code to test the property comXaPrepare
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comXaRecover (base name: "Com_xa_recover")', function() {
      // uncomment below and update the code to test the property comXaRecover
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comXaRollback (base name: "Com_xa_rollback")', function() {
      // uncomment below and update the code to test the property comXaRollback
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comXaStart (base name: "Com_xa_start")', function() {
      // uncomment below and update the code to test the property comXaStart
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property comStmtReprepare (base name: "Com_stmt_reprepare")', function() {
      // uncomment below and update the code to test the property comStmtReprepare
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property compression (base name: "Compression")', function() {
      // uncomment below and update the code to test the property compression
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property connectionErrorsAccept (base name: "Connection_errors_accept")', function() {
      // uncomment below and update the code to test the property connectionErrorsAccept
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property connectionErrorsInternal (base name: "Connection_errors_internal")', function() {
      // uncomment below and update the code to test the property connectionErrorsInternal
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property connectionErrorsMaxConnections (base name: "Connection_errors_max_connections")', function() {
      // uncomment below and update the code to test the property connectionErrorsMaxConnections
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property connectionErrorsPeerAddress (base name: "Connection_errors_peer_address")', function() {
      // uncomment below and update the code to test the property connectionErrorsPeerAddress
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property connectionErrorsSelect (base name: "Connection_errors_select")', function() {
      // uncomment below and update the code to test the property connectionErrorsSelect
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property connectionErrorsTcpwrap (base name: "Connection_errors_tcpwrap")', function() {
      // uncomment below and update the code to test the property connectionErrorsTcpwrap
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property connections (base name: "Connections")', function() {
      // uncomment below and update the code to test the property connections
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property createdTmpDiskTables (base name: "Created_tmp_disk_tables")', function() {
      // uncomment below and update the code to test the property createdTmpDiskTables
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property createdTmpFiles (base name: "Created_tmp_files")', function() {
      // uncomment below and update the code to test the property createdTmpFiles
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property createdTmpTables (base name: "Created_tmp_tables")', function() {
      // uncomment below and update the code to test the property createdTmpTables
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property delayedErrors (base name: "Delayed_errors")', function() {
      // uncomment below and update the code to test the property delayedErrors
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property delayedInsertThreads (base name: "Delayed_insert_threads")', function() {
      // uncomment below and update the code to test the property delayedInsertThreads
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property delayedWrites (base name: "Delayed_writes")', function() {
      // uncomment below and update the code to test the property delayedWrites
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property flushCommands (base name: "Flush_commands")', function() {
      // uncomment below and update the code to test the property flushCommands
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property handlerCommit (base name: "Handler_commit")', function() {
      // uncomment below and update the code to test the property handlerCommit
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property handlerDelete (base name: "Handler_delete")', function() {
      // uncomment below and update the code to test the property handlerDelete
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property handlerDiscover (base name: "Handler_discover")', function() {
      // uncomment below and update the code to test the property handlerDiscover
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property handlerExternalLock (base name: "Handler_external_lock")', function() {
      // uncomment below and update the code to test the property handlerExternalLock
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property handlerMrrInit (base name: "Handler_mrr_init")', function() {
      // uncomment below and update the code to test the property handlerMrrInit
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property handlerPrepare (base name: "Handler_prepare")', function() {
      // uncomment below and update the code to test the property handlerPrepare
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property handlerReadFirst (base name: "Handler_read_first")', function() {
      // uncomment below and update the code to test the property handlerReadFirst
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property handlerReadKey (base name: "Handler_read_key")', function() {
      // uncomment below and update the code to test the property handlerReadKey
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property handlerReadLast (base name: "Handler_read_last")', function() {
      // uncomment below and update the code to test the property handlerReadLast
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property handlerReadNext (base name: "Handler_read_next")', function() {
      // uncomment below and update the code to test the property handlerReadNext
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property handlerReadPrev (base name: "Handler_read_prev")', function() {
      // uncomment below and update the code to test the property handlerReadPrev
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property handlerReadRnd (base name: "Handler_read_rnd")', function() {
      // uncomment below and update the code to test the property handlerReadRnd
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property handlerReadRndNext (base name: "Handler_read_rnd_next")', function() {
      // uncomment below and update the code to test the property handlerReadRndNext
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property handlerRollback (base name: "Handler_rollback")', function() {
      // uncomment below and update the code to test the property handlerRollback
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property handlerSavepoint (base name: "Handler_savepoint")', function() {
      // uncomment below and update the code to test the property handlerSavepoint
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property handlerSavepointRollback (base name: "Handler_savepoint_rollback")', function() {
      // uncomment below and update the code to test the property handlerSavepointRollback
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property handlerUpdate (base name: "Handler_update")', function() {
      // uncomment below and update the code to test the property handlerUpdate
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property handlerWrite (base name: "Handler_write")', function() {
      // uncomment below and update the code to test the property handlerWrite
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property innodbBackgroundLogSync (base name: "Innodb_background_log_sync")', function() {
      // uncomment below and update the code to test the property innodbBackgroundLogSync
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property innodbBufferPoolDumpStatus (base name: "Innodb_buffer_pool_dump_status")', function() {
      // uncomment below and update the code to test the property innodbBufferPoolDumpStatus
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property innodbBufferPoolLoadStatus (base name: "Innodb_buffer_pool_load_status")', function() {
      // uncomment below and update the code to test the property innodbBufferPoolLoadStatus
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property innodbBufferPoolResizeStatus (base name: "Innodb_buffer_pool_resize_status")', function() {
      // uncomment below and update the code to test the property innodbBufferPoolResizeStatus
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property innodbBufferPoolPagesData (base name: "Innodb_buffer_pool_pages_data")', function() {
      // uncomment below and update the code to test the property innodbBufferPoolPagesData
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property innodbBufferPoolBytesData (base name: "Innodb_buffer_pool_bytes_data")', function() {
      // uncomment below and update the code to test the property innodbBufferPoolBytesData
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property innodbBufferPoolPagesDirty (base name: "Innodb_buffer_pool_pages_dirty")', function() {
      // uncomment below and update the code to test the property innodbBufferPoolPagesDirty
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property innodbBufferPoolBytesDirty (base name: "Innodb_buffer_pool_bytes_dirty")', function() {
      // uncomment below and update the code to test the property innodbBufferPoolBytesDirty
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property innodbBufferPoolPagesFlushed (base name: "Innodb_buffer_pool_pages_flushed")', function() {
      // uncomment below and update the code to test the property innodbBufferPoolPagesFlushed
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property innodbBufferPoolPagesFree (base name: "Innodb_buffer_pool_pages_free")', function() {
      // uncomment below and update the code to test the property innodbBufferPoolPagesFree
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property innodbBufferPoolPagesLRUFlushed (base name: "Innodb_buffer_pool_pages_LRU_flushed")', function() {
      // uncomment below and update the code to test the property innodbBufferPoolPagesLRUFlushed
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property innodbBufferPoolPagesMadeNotYoung (base name: "Innodb_buffer_pool_pages_made_not_young")', function() {
      // uncomment below and update the code to test the property innodbBufferPoolPagesMadeNotYoung
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property innodbBufferPoolPagesMadeYoung (base name: "Innodb_buffer_pool_pages_made_young")', function() {
      // uncomment below and update the code to test the property innodbBufferPoolPagesMadeYoung
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property innodbBufferPoolPagesMisc (base name: "Innodb_buffer_pool_pages_misc")', function() {
      // uncomment below and update the code to test the property innodbBufferPoolPagesMisc
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property innodbBufferPoolPagesOld (base name: "Innodb_buffer_pool_pages_old")', function() {
      // uncomment below and update the code to test the property innodbBufferPoolPagesOld
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property innodbBufferPoolPagesTotal (base name: "Innodb_buffer_pool_pages_total")', function() {
      // uncomment below and update the code to test the property innodbBufferPoolPagesTotal
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property innodbBufferPoolReadAheadRnd (base name: "Innodb_buffer_pool_read_ahead_rnd")', function() {
      // uncomment below and update the code to test the property innodbBufferPoolReadAheadRnd
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property innodbBufferPoolReadAhead (base name: "Innodb_buffer_pool_read_ahead")', function() {
      // uncomment below and update the code to test the property innodbBufferPoolReadAhead
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property innodbBufferPoolReadAheadEvicted (base name: "Innodb_buffer_pool_read_ahead_evicted")', function() {
      // uncomment below and update the code to test the property innodbBufferPoolReadAheadEvicted
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property innodbBufferPoolReadRequests (base name: "Innodb_buffer_pool_read_requests")', function() {
      // uncomment below and update the code to test the property innodbBufferPoolReadRequests
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property innodbBufferPoolReads (base name: "Innodb_buffer_pool_reads")', function() {
      // uncomment below and update the code to test the property innodbBufferPoolReads
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property innodbBufferPoolWaitFree (base name: "Innodb_buffer_pool_wait_free")', function() {
      // uncomment below and update the code to test the property innodbBufferPoolWaitFree
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property innodbBufferPoolWriteRequests (base name: "Innodb_buffer_pool_write_requests")', function() {
      // uncomment below and update the code to test the property innodbBufferPoolWriteRequests
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property innodbCheckpointAge (base name: "Innodb_checkpoint_age")', function() {
      // uncomment below and update the code to test the property innodbCheckpointAge
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property innodbCheckpointMaxAge (base name: "Innodb_checkpoint_max_age")', function() {
      // uncomment below and update the code to test the property innodbCheckpointMaxAge
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property innodbDataFsyncs (base name: "Innodb_data_fsyncs")', function() {
      // uncomment below and update the code to test the property innodbDataFsyncs
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property innodbDataPendingFsyncs (base name: "Innodb_data_pending_fsyncs")', function() {
      // uncomment below and update the code to test the property innodbDataPendingFsyncs
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property innodbDataPendingReads (base name: "Innodb_data_pending_reads")', function() {
      // uncomment below and update the code to test the property innodbDataPendingReads
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property innodbDataPendingWrites (base name: "Innodb_data_pending_writes")', function() {
      // uncomment below and update the code to test the property innodbDataPendingWrites
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property innodbDataRead (base name: "Innodb_data_read")', function() {
      // uncomment below and update the code to test the property innodbDataRead
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property innodbDataReads (base name: "Innodb_data_reads")', function() {
      // uncomment below and update the code to test the property innodbDataReads
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property innodbDataWrites (base name: "Innodb_data_writes")', function() {
      // uncomment below and update the code to test the property innodbDataWrites
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property innodbDataWritten (base name: "Innodb_data_written")', function() {
      // uncomment below and update the code to test the property innodbDataWritten
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property innodbDblwrPagesWritten (base name: "Innodb_dblwr_pages_written")', function() {
      // uncomment below and update the code to test the property innodbDblwrPagesWritten
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property innodbDblwrWrites (base name: "Innodb_dblwr_writes")', function() {
      // uncomment below and update the code to test the property innodbDblwrWrites
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property innodbIbufFreeList (base name: "Innodb_ibuf_free_list")', function() {
      // uncomment below and update the code to test the property innodbIbufFreeList
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property innodbIbufSegmentSize (base name: "Innodb_ibuf_segment_size")', function() {
      // uncomment below and update the code to test the property innodbIbufSegmentSize
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property innodbLogWaits (base name: "Innodb_log_waits")', function() {
      // uncomment below and update the code to test the property innodbLogWaits
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property innodbLogWriteRequests (base name: "Innodb_log_write_requests")', function() {
      // uncomment below and update the code to test the property innodbLogWriteRequests
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property innodbLogWrites (base name: "Innodb_log_writes")', function() {
      // uncomment below and update the code to test the property innodbLogWrites
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property innodbLsnCurrent (base name: "Innodb_lsn_current")', function() {
      // uncomment below and update the code to test the property innodbLsnCurrent
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property innodbLsnFlushed (base name: "Innodb_lsn_flushed")', function() {
      // uncomment below and update the code to test the property innodbLsnFlushed
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property innodbLsnLastCheckpoint (base name: "Innodb_lsn_last_checkpoint")', function() {
      // uncomment below and update the code to test the property innodbLsnLastCheckpoint
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property innodbMasterThreadActiveLoops (base name: "Innodb_master_thread_active_loops")', function() {
      // uncomment below and update the code to test the property innodbMasterThreadActiveLoops
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property innodbMasterThreadIdleLoops (base name: "Innodb_master_thread_idle_loops")', function() {
      // uncomment below and update the code to test the property innodbMasterThreadIdleLoops
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property innodbMaxTrxId (base name: "Innodb_max_trx_id")', function() {
      // uncomment below and update the code to test the property innodbMaxTrxId
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property innodbMemAdaptiveHash (base name: "Innodb_mem_adaptive_hash")', function() {
      // uncomment below and update the code to test the property innodbMemAdaptiveHash
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property innodbMemDictionary (base name: "Innodb_mem_dictionary")', function() {
      // uncomment below and update the code to test the property innodbMemDictionary
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property innodbOldestViewLowLimitTrxId (base name: "Innodb_oldest_view_low_limit_trx_id")', function() {
      // uncomment below and update the code to test the property innodbOldestViewLowLimitTrxId
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property innodbOsLogFsyncs (base name: "Innodb_os_log_fsyncs")', function() {
      // uncomment below and update the code to test the property innodbOsLogFsyncs
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property innodbOsLogPendingFsyncs (base name: "Innodb_os_log_pending_fsyncs")', function() {
      // uncomment below and update the code to test the property innodbOsLogPendingFsyncs
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property innodbOsLogPendingWrites (base name: "Innodb_os_log_pending_writes")', function() {
      // uncomment below and update the code to test the property innodbOsLogPendingWrites
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property innodbOsLogWritten (base name: "Innodb_os_log_written")', function() {
      // uncomment below and update the code to test the property innodbOsLogWritten
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property innodbPageSize (base name: "Innodb_page_size")', function() {
      // uncomment below and update the code to test the property innodbPageSize
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property innodbPagesCreated (base name: "Innodb_pages_created")', function() {
      // uncomment below and update the code to test the property innodbPagesCreated
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property innodbPagesRead (base name: "Innodb_pages_read")', function() {
      // uncomment below and update the code to test the property innodbPagesRead
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property innodbPages0Read (base name: "Innodb_pages0_read")', function() {
      // uncomment below and update the code to test the property innodbPages0Read
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property innodbPagesWritten (base name: "Innodb_pages_written")', function() {
      // uncomment below and update the code to test the property innodbPagesWritten
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property innodbPurgeTrxId (base name: "Innodb_purge_trx_id")', function() {
      // uncomment below and update the code to test the property innodbPurgeTrxId
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property innodbPurgeUndoNo (base name: "Innodb_purge_undo_no")', function() {
      // uncomment below and update the code to test the property innodbPurgeUndoNo
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property innodbRowLockCurrentWaits (base name: "Innodb_row_lock_current_waits")', function() {
      // uncomment below and update the code to test the property innodbRowLockCurrentWaits
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property innodbRowLockTime (base name: "Innodb_row_lock_time")', function() {
      // uncomment below and update the code to test the property innodbRowLockTime
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property innodbRowLockTimeAvg (base name: "Innodb_row_lock_time_avg")', function() {
      // uncomment below and update the code to test the property innodbRowLockTimeAvg
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property innodbRowLockTimeMax (base name: "Innodb_row_lock_time_max")', function() {
      // uncomment below and update the code to test the property innodbRowLockTimeMax
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property innodbRowLockWaits (base name: "Innodb_row_lock_waits")', function() {
      // uncomment below and update the code to test the property innodbRowLockWaits
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property innodbRowsDeleted (base name: "Innodb_rows_deleted")', function() {
      // uncomment below and update the code to test the property innodbRowsDeleted
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property innodbRowsInserted (base name: "Innodb_rows_inserted")', function() {
      // uncomment below and update the code to test the property innodbRowsInserted
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property innodbRowsRead (base name: "Innodb_rows_read")', function() {
      // uncomment below and update the code to test the property innodbRowsRead
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property innodbRowsUpdated (base name: "Innodb_rows_updated")', function() {
      // uncomment below and update the code to test the property innodbRowsUpdated
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property innodbNumOpenFiles (base name: "Innodb_num_open_files")', function() {
      // uncomment below and update the code to test the property innodbNumOpenFiles
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property innodbTruncatedStatusWrites (base name: "Innodb_truncated_status_writes")', function() {
      // uncomment below and update the code to test the property innodbTruncatedStatusWrites
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property innodbAvailableUndoLogs (base name: "Innodb_available_undo_logs")', function() {
      // uncomment below and update the code to test the property innodbAvailableUndoLogs
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property innodbSecondaryIndexTriggeredClusterReads (base name: "Innodb_secondary_index_triggered_cluster_reads")', function() {
      // uncomment below and update the code to test the property innodbSecondaryIndexTriggeredClusterReads
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property innodbSecondaryIndexTriggeredClusterReadsAvoided (base name: "Innodb_secondary_index_triggered_cluster_reads_avoided")', function() {
      // uncomment below and update the code to test the property innodbSecondaryIndexTriggeredClusterReadsAvoided
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property innodbBufferedAioSubmitted (base name: "Innodb_buffered_aio_submitted")', function() {
      // uncomment below and update the code to test the property innodbBufferedAioSubmitted
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property innodbScanPagesContiguous (base name: "Innodb_scan_pages_contiguous")', function() {
      // uncomment below and update the code to test the property innodbScanPagesContiguous
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property innodbScanPagesDisjointed (base name: "Innodb_scan_pages_disjointed")', function() {
      // uncomment below and update the code to test the property innodbScanPagesDisjointed
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property innodbScanPagesTotalSeekDistance (base name: "Innodb_scan_pages_total_seek_distance")', function() {
      // uncomment below and update the code to test the property innodbScanPagesTotalSeekDistance
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property innodbScanDataSize (base name: "Innodb_scan_data_size")', function() {
      // uncomment below and update the code to test the property innodbScanDataSize
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property innodbScanDeletedRecsSize (base name: "Innodb_scan_deleted_recs_size")', function() {
      // uncomment below and update the code to test the property innodbScanDeletedRecsSize
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property innodbScrubBackgroundPageReorganizations (base name: "Innodb_scrub_background_page_reorganizations")', function() {
      // uncomment below and update the code to test the property innodbScrubBackgroundPageReorganizations
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property innodbScrubBackgroundPageSplits (base name: "Innodb_scrub_background_page_splits")', function() {
      // uncomment below and update the code to test the property innodbScrubBackgroundPageSplits
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property innodbScrubBackgroundPageSplitFailuresUnderflow (base name: "Innodb_scrub_background_page_split_failures_underflow")', function() {
      // uncomment below and update the code to test the property innodbScrubBackgroundPageSplitFailuresUnderflow
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property innodbScrubBackgroundPageSplitFailuresOutOfFilespace (base name: "Innodb_scrub_background_page_split_failures_out_of_filespace")', function() {
      // uncomment below and update the code to test the property innodbScrubBackgroundPageSplitFailuresOutOfFilespace
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property innodbScrubBackgroundPageSplitFailuresMissingIndex (base name: "Innodb_scrub_background_page_split_failures_missing_index")', function() {
      // uncomment below and update the code to test the property innodbScrubBackgroundPageSplitFailuresMissingIndex
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property innodbScrubBackgroundPageSplitFailuresUnknown (base name: "Innodb_scrub_background_page_split_failures_unknown")', function() {
      // uncomment below and update the code to test the property innodbScrubBackgroundPageSplitFailuresUnknown
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property innodbScrubLog (base name: "Innodb_scrub_log")', function() {
      // uncomment below and update the code to test the property innodbScrubLog
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property innodbEncryptionRotationPagesReadFromCache (base name: "Innodb_encryption_rotation_pages_read_from_cache")', function() {
      // uncomment below and update the code to test the property innodbEncryptionRotationPagesReadFromCache
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property innodbEncryptionRotationPagesReadFromDisk (base name: "Innodb_encryption_rotation_pages_read_from_disk")', function() {
      // uncomment below and update the code to test the property innodbEncryptionRotationPagesReadFromDisk
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property innodbEncryptionRotationPagesModified (base name: "Innodb_encryption_rotation_pages_modified")', function() {
      // uncomment below and update the code to test the property innodbEncryptionRotationPagesModified
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property innodbEncryptionRotationPagesFlushed (base name: "Innodb_encryption_rotation_pages_flushed")', function() {
      // uncomment below and update the code to test the property innodbEncryptionRotationPagesFlushed
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property innodbEncryptionRotationEstimatedIops (base name: "Innodb_encryption_rotation_estimated_iops")', function() {
      // uncomment below and update the code to test the property innodbEncryptionRotationEstimatedIops
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property innodbEncryptionKeyRotationListLength (base name: "Innodb_encryption_key_rotation_list_length")', function() {
      // uncomment below and update the code to test the property innodbEncryptionKeyRotationListLength
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property innodbEncryptionNMergeBlocksEncrypted (base name: "Innodb_encryption_n_merge_blocks_encrypted")', function() {
      // uncomment below and update the code to test the property innodbEncryptionNMergeBlocksEncrypted
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property innodbEncryptionNMergeBlocksDecrypted (base name: "Innodb_encryption_n_merge_blocks_decrypted")', function() {
      // uncomment below and update the code to test the property innodbEncryptionNMergeBlocksDecrypted
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property innodbEncryptionNRowlogBlocksEncrypted (base name: "Innodb_encryption_n_rowlog_blocks_encrypted")', function() {
      // uncomment below and update the code to test the property innodbEncryptionNRowlogBlocksEncrypted
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property innodbEncryptionNRowlogBlocksDecrypted (base name: "Innodb_encryption_n_rowlog_blocks_decrypted")', function() {
      // uncomment below and update the code to test the property innodbEncryptionNRowlogBlocksDecrypted
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property innodbNumPagesEncrypted (base name: "Innodb_num_pages_encrypted")', function() {
      // uncomment below and update the code to test the property innodbNumPagesEncrypted
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property innodbNumPagesDecrypted (base name: "Innodb_num_pages_decrypted")', function() {
      // uncomment below and update the code to test the property innodbNumPagesDecrypted
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property innodbEncryptionRedoKeyVersion (base name: "Innodb_encryption_redo_key_version")', function() {
      // uncomment below and update the code to test the property innodbEncryptionRedoKeyVersion
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property keyBlocksNotFlushed (base name: "Key_blocks_not_flushed")', function() {
      // uncomment below and update the code to test the property keyBlocksNotFlushed
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property keyBlocksUnused (base name: "Key_blocks_unused")', function() {
      // uncomment below and update the code to test the property keyBlocksUnused
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property keyBlocksUsed (base name: "Key_blocks_used")', function() {
      // uncomment below and update the code to test the property keyBlocksUsed
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property keyReadRequests (base name: "Key_read_requests")', function() {
      // uncomment below and update the code to test the property keyReadRequests
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property keyReads (base name: "Key_reads")', function() {
      // uncomment below and update the code to test the property keyReads
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property keyWriteRequests (base name: "Key_write_requests")', function() {
      // uncomment below and update the code to test the property keyWriteRequests
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property keyWrites (base name: "Key_writes")', function() {
      // uncomment below and update the code to test the property keyWrites
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property lastQueryCost (base name: "Last_query_cost")', function() {
      // uncomment below and update the code to test the property lastQueryCost
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property lastQueryPartialPlans (base name: "Last_query_partial_plans")', function() {
      // uncomment below and update the code to test the property lastQueryPartialPlans
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property lockedConnects (base name: "Locked_connects")', function() {
      // uncomment below and update the code to test the property lockedConnects
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property maxExecutionTimeExceeded (base name: "Max_execution_time_exceeded")', function() {
      // uncomment below and update the code to test the property maxExecutionTimeExceeded
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property maxExecutionTimeSet (base name: "Max_execution_time_set")', function() {
      // uncomment below and update the code to test the property maxExecutionTimeSet
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property maxExecutionTimeSetFailed (base name: "Max_execution_time_set_failed")', function() {
      // uncomment below and update the code to test the property maxExecutionTimeSetFailed
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property maxUsedConnections (base name: "Max_used_connections")', function() {
      // uncomment below and update the code to test the property maxUsedConnections
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property maxUsedConnectionsTime (base name: "Max_used_connections_time")', function() {
      // uncomment below and update the code to test the property maxUsedConnectionsTime
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property notFlushedDelayedRows (base name: "Not_flushed_delayed_rows")', function() {
      // uncomment below and update the code to test the property notFlushedDelayedRows
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property ongoingAnonymousTransactionCount (base name: "Ongoing_anonymous_transaction_count")', function() {
      // uncomment below and update the code to test the property ongoingAnonymousTransactionCount
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property openFiles (base name: "Open_files")', function() {
      // uncomment below and update the code to test the property openFiles
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property openStreams (base name: "Open_streams")', function() {
      // uncomment below and update the code to test the property openStreams
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property openTableDefinitions (base name: "Open_table_definitions")', function() {
      // uncomment below and update the code to test the property openTableDefinitions
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property openTables (base name: "Open_tables")', function() {
      // uncomment below and update the code to test the property openTables
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property openedFiles (base name: "Opened_files")', function() {
      // uncomment below and update the code to test the property openedFiles
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property openedTableDefinitions (base name: "Opened_table_definitions")', function() {
      // uncomment below and update the code to test the property openedTableDefinitions
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property openedTables (base name: "Opened_tables")', function() {
      // uncomment below and update the code to test the property openedTables
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property performanceSchemaAccountsLost (base name: "Performance_schema_accounts_lost")', function() {
      // uncomment below and update the code to test the property performanceSchemaAccountsLost
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property performanceSchemaCondClassesLost (base name: "Performance_schema_cond_classes_lost")', function() {
      // uncomment below and update the code to test the property performanceSchemaCondClassesLost
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property performanceSchemaCondInstancesLost (base name: "Performance_schema_cond_instances_lost")', function() {
      // uncomment below and update the code to test the property performanceSchemaCondInstancesLost
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property performanceSchemaDigestLost (base name: "Performance_schema_digest_lost")', function() {
      // uncomment below and update the code to test the property performanceSchemaDigestLost
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property performanceSchemaFileClassesLost (base name: "Performance_schema_file_classes_lost")', function() {
      // uncomment below and update the code to test the property performanceSchemaFileClassesLost
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property performanceSchemaFileHandlesLost (base name: "Performance_schema_file_handles_lost")', function() {
      // uncomment below and update the code to test the property performanceSchemaFileHandlesLost
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property performanceSchemaFileInstancesLost (base name: "Performance_schema_file_instances_lost")', function() {
      // uncomment below and update the code to test the property performanceSchemaFileInstancesLost
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property performanceSchemaHostsLost (base name: "Performance_schema_hosts_lost")', function() {
      // uncomment below and update the code to test the property performanceSchemaHostsLost
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property performanceSchemaIndexStatLost (base name: "Performance_schema_index_stat_lost")', function() {
      // uncomment below and update the code to test the property performanceSchemaIndexStatLost
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property performanceSchemaLockerLost (base name: "Performance_schema_locker_lost")', function() {
      // uncomment below and update the code to test the property performanceSchemaLockerLost
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property performanceSchemaMemoryClassesLost (base name: "Performance_schema_memory_classes_lost")', function() {
      // uncomment below and update the code to test the property performanceSchemaMemoryClassesLost
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property performanceSchemaMetadataLockLost (base name: "Performance_schema_metadata_lock_lost")', function() {
      // uncomment below and update the code to test the property performanceSchemaMetadataLockLost
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property performanceSchemaMutexClassesLost (base name: "Performance_schema_mutex_classes_lost")', function() {
      // uncomment below and update the code to test the property performanceSchemaMutexClassesLost
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property performanceSchemaMutexInstancesLost (base name: "Performance_schema_mutex_instances_lost")', function() {
      // uncomment below and update the code to test the property performanceSchemaMutexInstancesLost
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property performanceSchemaNestedStatementLost (base name: "Performance_schema_nested_statement_lost")', function() {
      // uncomment below and update the code to test the property performanceSchemaNestedStatementLost
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property performanceSchemaPreparedStatementsLost (base name: "Performance_schema_prepared_statements_lost")', function() {
      // uncomment below and update the code to test the property performanceSchemaPreparedStatementsLost
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property performanceSchemaProgramLost (base name: "Performance_schema_program_lost")', function() {
      // uncomment below and update the code to test the property performanceSchemaProgramLost
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property performanceSchemaRwlockClassesLost (base name: "Performance_schema_rwlock_classes_lost")', function() {
      // uncomment below and update the code to test the property performanceSchemaRwlockClassesLost
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property performanceSchemaRwlockInstancesLost (base name: "Performance_schema_rwlock_instances_lost")', function() {
      // uncomment below and update the code to test the property performanceSchemaRwlockInstancesLost
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property performanceSchemaSessionConnectAttrsLost (base name: "Performance_schema_session_connect_attrs_lost")', function() {
      // uncomment below and update the code to test the property performanceSchemaSessionConnectAttrsLost
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property performanceSchemaSocketClassesLost (base name: "Performance_schema_socket_classes_lost")', function() {
      // uncomment below and update the code to test the property performanceSchemaSocketClassesLost
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property performanceSchemaSocketInstancesLost (base name: "Performance_schema_socket_instances_lost")', function() {
      // uncomment below and update the code to test the property performanceSchemaSocketInstancesLost
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property performanceSchemaStageClassesLost (base name: "Performance_schema_stage_classes_lost")', function() {
      // uncomment below and update the code to test the property performanceSchemaStageClassesLost
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property performanceSchemaStatementClassesLost (base name: "Performance_schema_statement_classes_lost")', function() {
      // uncomment below and update the code to test the property performanceSchemaStatementClassesLost
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property performanceSchemaTableHandlesLost (base name: "Performance_schema_table_handles_lost")', function() {
      // uncomment below and update the code to test the property performanceSchemaTableHandlesLost
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property performanceSchemaTableInstancesLost (base name: "Performance_schema_table_instances_lost")', function() {
      // uncomment below and update the code to test the property performanceSchemaTableInstancesLost
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property performanceSchemaTableLockStatLost (base name: "Performance_schema_table_lock_stat_lost")', function() {
      // uncomment below and update the code to test the property performanceSchemaTableLockStatLost
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property performanceSchemaThreadClassesLost (base name: "Performance_schema_thread_classes_lost")', function() {
      // uncomment below and update the code to test the property performanceSchemaThreadClassesLost
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property performanceSchemaThreadInstancesLost (base name: "Performance_schema_thread_instances_lost")', function() {
      // uncomment below and update the code to test the property performanceSchemaThreadInstancesLost
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property performanceSchemaUsersLost (base name: "Performance_schema_users_lost")', function() {
      // uncomment below and update the code to test the property performanceSchemaUsersLost
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property preparedStmtCount (base name: "Prepared_stmt_count")', function() {
      // uncomment below and update the code to test the property preparedStmtCount
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property qcacheFreeBlocks (base name: "Qcache_free_blocks")', function() {
      // uncomment below and update the code to test the property qcacheFreeBlocks
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property qcacheFreeMemory (base name: "Qcache_free_memory")', function() {
      // uncomment below and update the code to test the property qcacheFreeMemory
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property qcacheHits (base name: "Qcache_hits")', function() {
      // uncomment below and update the code to test the property qcacheHits
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property qcacheInserts (base name: "Qcache_inserts")', function() {
      // uncomment below and update the code to test the property qcacheInserts
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property qcacheLowmemPrunes (base name: "Qcache_lowmem_prunes")', function() {
      // uncomment below and update the code to test the property qcacheLowmemPrunes
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property qcacheNotCached (base name: "Qcache_not_cached")', function() {
      // uncomment below and update the code to test the property qcacheNotCached
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property qcacheQueriesInCache (base name: "Qcache_queries_in_cache")', function() {
      // uncomment below and update the code to test the property qcacheQueriesInCache
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property qcacheTotalBlocks (base name: "Qcache_total_blocks")', function() {
      // uncomment below and update the code to test the property qcacheTotalBlocks
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property queries (base name: "Queries")', function() {
      // uncomment below and update the code to test the property queries
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property questions (base name: "Questions")', function() {
      // uncomment below and update the code to test the property questions
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property rsaPublicKey (base name: "Rsa_public_key")', function() {
      // uncomment below and update the code to test the property rsaPublicKey
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property selectFullJoin (base name: "Select_full_join")', function() {
      // uncomment below and update the code to test the property selectFullJoin
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property selectFullRangeJoin (base name: "Select_full_range_join")', function() {
      // uncomment below and update the code to test the property selectFullRangeJoin
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property selectRange (base name: "Select_range")', function() {
      // uncomment below and update the code to test the property selectRange
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property selectRangeCheck (base name: "Select_range_check")', function() {
      // uncomment below and update the code to test the property selectRangeCheck
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property selectScan (base name: "Select_scan")', function() {
      // uncomment below and update the code to test the property selectScan
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property slaveOpenTempTables (base name: "Slave_open_temp_tables")', function() {
      // uncomment below and update the code to test the property slaveOpenTempTables
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property slowLaunchThreads (base name: "Slow_launch_threads")', function() {
      // uncomment below and update the code to test the property slowLaunchThreads
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property slowQueries (base name: "Slow_queries")', function() {
      // uncomment below and update the code to test the property slowQueries
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property sortMergePasses (base name: "Sort_merge_passes")', function() {
      // uncomment below and update the code to test the property sortMergePasses
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property sortRange (base name: "Sort_range")', function() {
      // uncomment below and update the code to test the property sortRange
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property sortRows (base name: "Sort_rows")', function() {
      // uncomment below and update the code to test the property sortRows
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property sortScan (base name: "Sort_scan")', function() {
      // uncomment below and update the code to test the property sortScan
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property sslAcceptRenegotiates (base name: "Ssl_accept_renegotiates")', function() {
      // uncomment below and update the code to test the property sslAcceptRenegotiates
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property sslAccepts (base name: "Ssl_accepts")', function() {
      // uncomment below and update the code to test the property sslAccepts
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property sslCallbackCacheHits (base name: "Ssl_callback_cache_hits")', function() {
      // uncomment below and update the code to test the property sslCallbackCacheHits
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property sslCipher (base name: "Ssl_cipher")', function() {
      // uncomment below and update the code to test the property sslCipher
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property sslCipherList (base name: "Ssl_cipher_list")', function() {
      // uncomment below and update the code to test the property sslCipherList
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property sslClientConnects (base name: "Ssl_client_connects")', function() {
      // uncomment below and update the code to test the property sslClientConnects
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property sslConnectRenegotiates (base name: "Ssl_connect_renegotiates")', function() {
      // uncomment below and update the code to test the property sslConnectRenegotiates
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property sslCtxVerifyDepth (base name: "Ssl_ctx_verify_depth")', function() {
      // uncomment below and update the code to test the property sslCtxVerifyDepth
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property sslCtxVerifyMode (base name: "Ssl_ctx_verify_mode")', function() {
      // uncomment below and update the code to test the property sslCtxVerifyMode
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property sslDefaultTimeout (base name: "Ssl_default_timeout")', function() {
      // uncomment below and update the code to test the property sslDefaultTimeout
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property sslFinishedAccepts (base name: "Ssl_finished_accepts")', function() {
      // uncomment below and update the code to test the property sslFinishedAccepts
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property sslFinishedConnects (base name: "Ssl_finished_connects")', function() {
      // uncomment below and update the code to test the property sslFinishedConnects
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property sslServerNotAfter (base name: "Ssl_server_not_after")', function() {
      // uncomment below and update the code to test the property sslServerNotAfter
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property sslServerNotBefore (base name: "Ssl_server_not_before")', function() {
      // uncomment below and update the code to test the property sslServerNotBefore
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property sslSessionCacheHits (base name: "Ssl_session_cache_hits")', function() {
      // uncomment below and update the code to test the property sslSessionCacheHits
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property sslSessionCacheMisses (base name: "Ssl_session_cache_misses")', function() {
      // uncomment below and update the code to test the property sslSessionCacheMisses
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property sslSessionCacheMode (base name: "Ssl_session_cache_mode")', function() {
      // uncomment below and update the code to test the property sslSessionCacheMode
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property sslSessionCacheOverflows (base name: "Ssl_session_cache_overflows")', function() {
      // uncomment below and update the code to test the property sslSessionCacheOverflows
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property sslSessionCacheSize (base name: "Ssl_session_cache_size")', function() {
      // uncomment below and update the code to test the property sslSessionCacheSize
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property sslSessionCacheTimeouts (base name: "Ssl_session_cache_timeouts")', function() {
      // uncomment below and update the code to test the property sslSessionCacheTimeouts
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property sslSessionsReused (base name: "Ssl_sessions_reused")', function() {
      // uncomment below and update the code to test the property sslSessionsReused
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property sslUsedSessionCacheEntries (base name: "Ssl_used_session_cache_entries")', function() {
      // uncomment below and update the code to test the property sslUsedSessionCacheEntries
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property sslVerifyDepth (base name: "Ssl_verify_depth")', function() {
      // uncomment below and update the code to test the property sslVerifyDepth
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property sslVerifyMode (base name: "Ssl_verify_mode")', function() {
      // uncomment below and update the code to test the property sslVerifyMode
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property sslVersion (base name: "Ssl_version")', function() {
      // uncomment below and update the code to test the property sslVersion
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property tableLocksImmediate (base name: "Table_locks_immediate")', function() {
      // uncomment below and update the code to test the property tableLocksImmediate
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property tableLocksWaited (base name: "Table_locks_waited")', function() {
      // uncomment below and update the code to test the property tableLocksWaited
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property tableOpenCacheHits (base name: "Table_open_cache_hits")', function() {
      // uncomment below and update the code to test the property tableOpenCacheHits
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property tableOpenCacheMisses (base name: "Table_open_cache_misses")', function() {
      // uncomment below and update the code to test the property tableOpenCacheMisses
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property tableOpenCacheOverflows (base name: "Table_open_cache_overflows")', function() {
      // uncomment below and update the code to test the property tableOpenCacheOverflows
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property tcLogMaxPagesUsed (base name: "Tc_log_max_pages_used")', function() {
      // uncomment below and update the code to test the property tcLogMaxPagesUsed
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property tcLogPageSize (base name: "Tc_log_page_size")', function() {
      // uncomment below and update the code to test the property tcLogPageSize
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property tcLogPageWaits (base name: "Tc_log_page_waits")', function() {
      // uncomment below and update the code to test the property tcLogPageWaits
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property threadpoolIdleThreads (base name: "Threadpool_idle_threads")', function() {
      // uncomment below and update the code to test the property threadpoolIdleThreads
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property threadpoolThreads (base name: "Threadpool_threads")', function() {
      // uncomment below and update the code to test the property threadpoolThreads
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property threadsCached (base name: "Threads_cached")', function() {
      // uncomment below and update the code to test the property threadsCached
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property threadsConnected (base name: "Threads_connected")', function() {
      // uncomment below and update the code to test the property threadsConnected
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property threadsCreated (base name: "Threads_created")', function() {
      // uncomment below and update the code to test the property threadsCreated
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property threadsRunning (base name: "Threads_running")', function() {
      // uncomment below and update the code to test the property threadsRunning
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property uptime (base name: "Uptime")', function() {
      // uncomment below and update the code to test the property uptime
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property uptimeSinceFlushStatus (base name: "Uptime_since_flush_status")', function() {
      // uncomment below and update the code to test the property uptimeSinceFlushStatus
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property wsrepLocalStateUuid (base name: "wsrep_local_state_uuid")', function() {
      // uncomment below and update the code to test the property wsrepLocalStateUuid
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property wsrepProtocolVersion (base name: "wsrep_protocol_version")', function() {
      // uncomment below and update the code to test the property wsrepProtocolVersion
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property wsrepLastApplied (base name: "wsrep_last_applied")', function() {
      // uncomment below and update the code to test the property wsrepLastApplied
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property wsrepLastCommitted (base name: "wsrep_last_committed")', function() {
      // uncomment below and update the code to test the property wsrepLastCommitted
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property wsrepReplicated (base name: "wsrep_replicated")', function() {
      // uncomment below and update the code to test the property wsrepReplicated
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property wsrepReplicatedBytes (base name: "wsrep_replicated_bytes")', function() {
      // uncomment below and update the code to test the property wsrepReplicatedBytes
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property wsrepReplKeys (base name: "wsrep_repl_keys")', function() {
      // uncomment below and update the code to test the property wsrepReplKeys
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property wsrepReplKeysBytes (base name: "wsrep_repl_keys_bytes")', function() {
      // uncomment below and update the code to test the property wsrepReplKeysBytes
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property wsrepReplDataBytes (base name: "wsrep_repl_data_bytes")', function() {
      // uncomment below and update the code to test the property wsrepReplDataBytes
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property wsrepReplOtherBytes (base name: "wsrep_repl_other_bytes")', function() {
      // uncomment below and update the code to test the property wsrepReplOtherBytes
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property wsrepReceived (base name: "wsrep_received")', function() {
      // uncomment below and update the code to test the property wsrepReceived
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property wsrepReceivedBytes (base name: "wsrep_received_bytes")', function() {
      // uncomment below and update the code to test the property wsrepReceivedBytes
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property wsrepLocalCommits (base name: "wsrep_local_commits")', function() {
      // uncomment below and update the code to test the property wsrepLocalCommits
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property wsrepLocalCertFailures (base name: "wsrep_local_cert_failures")', function() {
      // uncomment below and update the code to test the property wsrepLocalCertFailures
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property wsrepLocalReplays (base name: "wsrep_local_replays")', function() {
      // uncomment below and update the code to test the property wsrepLocalReplays
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property wsrepLocalSendQueue (base name: "wsrep_local_send_queue")', function() {
      // uncomment below and update the code to test the property wsrepLocalSendQueue
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property wsrepLocalSendQueueMax (base name: "wsrep_local_send_queue_max")', function() {
      // uncomment below and update the code to test the property wsrepLocalSendQueueMax
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property wsrepLocalSendQueueMin (base name: "wsrep_local_send_queue_min")', function() {
      // uncomment below and update the code to test the property wsrepLocalSendQueueMin
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property wsrepLocalSendQueueAvg (base name: "wsrep_local_send_queue_avg")', function() {
      // uncomment below and update the code to test the property wsrepLocalSendQueueAvg
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property wsrepLocalRecvQueue (base name: "wsrep_local_recv_queue")', function() {
      // uncomment below and update the code to test the property wsrepLocalRecvQueue
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property wsrepLocalRecvQueueMax (base name: "wsrep_local_recv_queue_max")', function() {
      // uncomment below and update the code to test the property wsrepLocalRecvQueueMax
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property wsrepLocalRecvQueueMin (base name: "wsrep_local_recv_queue_min")', function() {
      // uncomment below and update the code to test the property wsrepLocalRecvQueueMin
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property wsrepLocalRecvQueueAvg (base name: "wsrep_local_recv_queue_avg")', function() {
      // uncomment below and update the code to test the property wsrepLocalRecvQueueAvg
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property wsrepLocalCachedDownto (base name: "wsrep_local_cached_downto")', function() {
      // uncomment below and update the code to test the property wsrepLocalCachedDownto
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property wsrepFlowControlPausedNs (base name: "wsrep_flow_control_paused_ns")', function() {
      // uncomment below and update the code to test the property wsrepFlowControlPausedNs
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property wsrepFlowControlPaused (base name: "wsrep_flow_control_paused")', function() {
      // uncomment below and update the code to test the property wsrepFlowControlPaused
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property wsrepFlowControlSent (base name: "wsrep_flow_control_sent")', function() {
      // uncomment below and update the code to test the property wsrepFlowControlSent
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property wsrepFlowControlRecv (base name: "wsrep_flow_control_recv")', function() {
      // uncomment below and update the code to test the property wsrepFlowControlRecv
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property wsrepFlowControlInterval (base name: "wsrep_flow_control_interval")', function() {
      // uncomment below and update the code to test the property wsrepFlowControlInterval
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property wsrepFlowControlIntervalLow (base name: "wsrep_flow_control_interval_low")', function() {
      // uncomment below and update the code to test the property wsrepFlowControlIntervalLow
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property wsrepFlowControlIntervalHigh (base name: "wsrep_flow_control_interval_high")', function() {
      // uncomment below and update the code to test the property wsrepFlowControlIntervalHigh
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property wsrepFlowControlStatus (base name: "wsrep_flow_control_status")', function() {
      // uncomment below and update the code to test the property wsrepFlowControlStatus
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property wsrepFlowControlActive (base name: "wsrep_flow_control_active")', function() {
      // uncomment below and update the code to test the property wsrepFlowControlActive
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property wsrepFlowControlRequested (base name: "wsrep_flow_control_requested")', function() {
      // uncomment below and update the code to test the property wsrepFlowControlRequested
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property wsrepCertDepsDistance (base name: "wsrep_cert_deps_distance")', function() {
      // uncomment below and update the code to test the property wsrepCertDepsDistance
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property wsrepApplyOooe (base name: "wsrep_apply_oooe")', function() {
      // uncomment below and update the code to test the property wsrepApplyOooe
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property wsrepApplyOool (base name: "wsrep_apply_oool")', function() {
      // uncomment below and update the code to test the property wsrepApplyOool
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property wsrepApplyWindow (base name: "wsrep_apply_window")', function() {
      // uncomment below and update the code to test the property wsrepApplyWindow
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property wsrepCommitOooe (base name: "wsrep_commit_oooe")', function() {
      // uncomment below and update the code to test the property wsrepCommitOooe
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property wsrepCommitOool (base name: "wsrep_commit_oool")', function() {
      // uncomment below and update the code to test the property wsrepCommitOool
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property wsrepCommitWindow (base name: "wsrep_commit_window")', function() {
      // uncomment below and update the code to test the property wsrepCommitWindow
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property wsrepLocalState (base name: "wsrep_local_state")', function() {
      // uncomment below and update the code to test the property wsrepLocalState
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property wsrepLocalStateComment (base name: "wsrep_local_state_comment")', function() {
      // uncomment below and update the code to test the property wsrepLocalStateComment
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property wsrepCertIndexSize (base name: "wsrep_cert_index_size")', function() {
      // uncomment below and update the code to test the property wsrepCertIndexSize
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property wsrepCertBucketCount (base name: "wsrep_cert_bucket_count")', function() {
      // uncomment below and update the code to test the property wsrepCertBucketCount
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property wsrepGcachePoolSize (base name: "wsrep_gcache_pool_size")', function() {
      // uncomment below and update the code to test the property wsrepGcachePoolSize
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property wsrepCausalReads (base name: "wsrep_causal_reads")', function() {
      // uncomment below and update the code to test the property wsrepCausalReads
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property wsrepCertInterval (base name: "wsrep_cert_interval")', function() {
      // uncomment below and update the code to test the property wsrepCertInterval
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property wsrepOpenTransactions (base name: "wsrep_open_transactions")', function() {
      // uncomment below and update the code to test the property wsrepOpenTransactions
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property wsrepOpenConnections (base name: "wsrep_open_connections")', function() {
      // uncomment below and update the code to test the property wsrepOpenConnections
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property wsrepIstReceiveStatus (base name: "wsrep_ist_receive_status")', function() {
      // uncomment below and update the code to test the property wsrepIstReceiveStatus
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property wsrepIstReceiveSeqnoStart (base name: "wsrep_ist_receive_seqno_start")', function() {
      // uncomment below and update the code to test the property wsrepIstReceiveSeqnoStart
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property wsrepIstReceiveSeqnoCurrent (base name: "wsrep_ist_receive_seqno_current")', function() {
      // uncomment below and update the code to test the property wsrepIstReceiveSeqnoCurrent
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property wsrepIstReceiveSeqnoEnd (base name: "wsrep_ist_receive_seqno_end")', function() {
      // uncomment below and update the code to test the property wsrepIstReceiveSeqnoEnd
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property wsrepIncomingAddresses (base name: "wsrep_incoming_addresses")', function() {
      // uncomment below and update the code to test the property wsrepIncomingAddresses
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property wsrepClusterWeight (base name: "wsrep_cluster_weight")', function() {
      // uncomment below and update the code to test the property wsrepClusterWeight
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property wsrepDesyncCount (base name: "wsrep_desync_count")', function() {
      // uncomment below and update the code to test the property wsrepDesyncCount
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property wsrepEvsDelayed (base name: "wsrep_evs_delayed")', function() {
      // uncomment below and update the code to test the property wsrepEvsDelayed
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property wsrepEvsEvictList (base name: "wsrep_evs_evict_list")', function() {
      // uncomment below and update the code to test the property wsrepEvsEvictList
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property wsrepEvsReplLatency (base name: "wsrep_evs_repl_latency")', function() {
      // uncomment below and update the code to test the property wsrepEvsReplLatency
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property wsrepEvsState (base name: "wsrep_evs_state")', function() {
      // uncomment below and update the code to test the property wsrepEvsState
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property wsrepGcommUuid (base name: "wsrep_gcomm_uuid")', function() {
      // uncomment below and update the code to test the property wsrepGcommUuid
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property wsrepGmcastSegment (base name: "wsrep_gmcast_segment")', function() {
      // uncomment below and update the code to test the property wsrepGmcastSegment
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property wsrepClusterConfId (base name: "wsrep_cluster_conf_id")', function() {
      // uncomment below and update the code to test the property wsrepClusterConfId
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property wsrepClusterSize (base name: "wsrep_cluster_size")', function() {
      // uncomment below and update the code to test the property wsrepClusterSize
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property wsrepClusterStateUuid (base name: "wsrep_cluster_state_uuid")', function() {
      // uncomment below and update the code to test the property wsrepClusterStateUuid
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property wsrepClusterStatus (base name: "wsrep_cluster_status")', function() {
      // uncomment below and update the code to test the property wsrepClusterStatus
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property wsrepConnected (base name: "wsrep_connected")', function() {
      // uncomment below and update the code to test the property wsrepConnected
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property wsrepLocalBfAborts (base name: "wsrep_local_bf_aborts")', function() {
      // uncomment below and update the code to test the property wsrepLocalBfAborts
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property wsrepLocalIndex (base name: "wsrep_local_index")', function() {
      // uncomment below and update the code to test the property wsrepLocalIndex
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property wsrepProviderName (base name: "wsrep_provider_name")', function() {
      // uncomment below and update the code to test the property wsrepProviderName
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property wsrepProviderVendor (base name: "wsrep_provider_vendor")', function() {
      // uncomment below and update the code to test the property wsrepProviderVendor
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property wsrepProviderVersion (base name: "wsrep_provider_version")', function() {
      // uncomment below and update the code to test the property wsrepProviderVersion
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

    it('should have the property wsrepReady (base name: "wsrep_ready")', function() {
      // uncomment below and update the code to test the property wsrepReady
      //var instance = new MorpheusApi.HealthDatabaseStats();
      //expect(instance).to.be();
    });

  });

}));
