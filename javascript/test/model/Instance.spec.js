/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MorpheusApi);
  }
}(this, function(expect, MorpheusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MorpheusApi.Instance();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Instance', function() {
    it('should create an instance of Instance', function() {
      // uncomment below and update the code to test Instance
      //var instane = new MorpheusApi.Instance();
      //expect(instance).to.be.a(MorpheusApi.Instance);
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new MorpheusApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property uuid (base name: "uuid")', function() {
      // uncomment below and update the code to test the property uuid
      //var instance = new MorpheusApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property accountId (base name: "accountId")', function() {
      // uncomment below and update the code to test the property accountId
      //var instance = new MorpheusApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property tenant (base name: "tenant")', function() {
      // uncomment below and update the code to test the property tenant
      //var instance = new MorpheusApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property instanceType (base name: "instanceType")', function() {
      // uncomment below and update the code to test the property instanceType
      //var instance = new MorpheusApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property group (base name: "group")', function() {
      // uncomment below and update the code to test the property group
      //var instance = new MorpheusApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property cloud (base name: "cloud")', function() {
      // uncomment below and update the code to test the property cloud
      //var instance = new MorpheusApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property containers (base name: "containers")', function() {
      // uncomment below and update the code to test the property containers
      //var instance = new MorpheusApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property servers (base name: "servers")', function() {
      // uncomment below and update the code to test the property servers
      //var instance = new MorpheusApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property connectionInfo (base name: "connectionInfo")', function() {
      // uncomment below and update the code to test the property connectionInfo
      //var instance = new MorpheusApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property layout (base name: "layout")', function() {
      // uncomment below and update the code to test the property layout
      //var instance = new MorpheusApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property plan (base name: "plan")', function() {
      // uncomment below and update the code to test the property plan
      //var instance = new MorpheusApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new MorpheusApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new MorpheusApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property environment (base name: "environment")', function() {
      // uncomment below and update the code to test the property environment
      //var instance = new MorpheusApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property config (base name: "config")', function() {
      // uncomment below and update the code to test the property config
      //var instance = new MorpheusApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property configGroup (base name: "configGroup")', function() {
      // uncomment below and update the code to test the property configGroup
      //var instance = new MorpheusApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property configId (base name: "configId")', function() {
      // uncomment below and update the code to test the property configId
      //var instance = new MorpheusApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property configRole (base name: "configRole")', function() {
      // uncomment below and update the code to test the property configRole
      //var instance = new MorpheusApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property volumes (base name: "volumes")', function() {
      // uncomment below and update the code to test the property volumes
      //var instance = new MorpheusApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property controllers (base name: "controllers")', function() {
      // uncomment below and update the code to test the property controllers
      //var instance = new MorpheusApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property interfaces (base name: "interfaces")', function() {
      // uncomment below and update the code to test the property interfaces
      //var instance = new MorpheusApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property customOptions (base name: "customOptions")', function() {
      // uncomment below and update the code to test the property customOptions
      //var instance = new MorpheusApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property instanceVersion (base name: "instanceVersion")', function() {
      // uncomment below and update the code to test the property instanceVersion
      //var instance = new MorpheusApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property labels (base name: "labels")', function() {
      // uncomment below and update the code to test the property labels
      //var instance = new MorpheusApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property tags (base name: "tags")', function() {
      // uncomment below and update the code to test the property tags
      //var instance = new MorpheusApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property evars (base name: "evars")', function() {
      // uncomment below and update the code to test the property evars
      //var instance = new MorpheusApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property maxMemory (base name: "maxMemory")', function() {
      // uncomment below and update the code to test the property maxMemory
      //var instance = new MorpheusApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property maxStorage (base name: "maxStorage")', function() {
      // uncomment below and update the code to test the property maxStorage
      //var instance = new MorpheusApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property maxCores (base name: "maxCores")', function() {
      // uncomment below and update the code to test the property maxCores
      //var instance = new MorpheusApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property coresPerSocket (base name: "coresPerSocket")', function() {
      // uncomment below and update the code to test the property coresPerSocket
      //var instance = new MorpheusApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property maxCpu (base name: "maxCpu")', function() {
      // uncomment below and update the code to test the property maxCpu
      //var instance = new MorpheusApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property hourlyCost (base name: "hourlyCost")', function() {
      // uncomment below and update the code to test the property hourlyCost
      //var instance = new MorpheusApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property hourlyPrice (base name: "hourlyPrice")', function() {
      // uncomment below and update the code to test the property hourlyPrice
      //var instance = new MorpheusApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property instancePrice (base name: "instancePrice")', function() {
      // uncomment below and update the code to test the property instancePrice
      //var instance = new MorpheusApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property dateCreated (base name: "dateCreated")', function() {
      // uncomment below and update the code to test the property dateCreated
      //var instance = new MorpheusApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property lastUpdated (base name: "lastUpdated")', function() {
      // uncomment below and update the code to test the property lastUpdated
      //var instance = new MorpheusApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property hostName (base name: "hostName")', function() {
      // uncomment below and update the code to test the property hostName
      //var instance = new MorpheusApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property domainName (base name: "domainName")', function() {
      // uncomment below and update the code to test the property domainName
      //var instance = new MorpheusApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property environmentPrefix (base name: "environmentPrefix")', function() {
      // uncomment below and update the code to test the property environmentPrefix
      //var instance = new MorpheusApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property firewallEnabled (base name: "firewallEnabled")', function() {
      // uncomment below and update the code to test the property firewallEnabled
      //var instance = new MorpheusApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property networkLevel (base name: "networkLevel")', function() {
      // uncomment below and update the code to test the property networkLevel
      //var instance = new MorpheusApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property autoScale (base name: "autoScale")', function() {
      // uncomment below and update the code to test the property autoScale
      //var instance = new MorpheusApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property instanceContext (base name: "instanceContext")', function() {
      // uncomment below and update the code to test the property instanceContext
      //var instance = new MorpheusApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property currentDeployId (base name: "currentDeployId")', function() {
      // uncomment below and update the code to test the property currentDeployId
      //var instance = new MorpheusApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property locked (base name: "locked")', function() {
      // uncomment below and update the code to test the property locked
      //var instance = new MorpheusApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new MorpheusApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property statusMessage (base name: "statusMessage")', function() {
      // uncomment below and update the code to test the property statusMessage
      //var instance = new MorpheusApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property errorMessage (base name: "errorMessage")', function() {
      // uncomment below and update the code to test the property errorMessage
      //var instance = new MorpheusApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property statusDate (base name: "statusDate")', function() {
      // uncomment below and update the code to test the property statusDate
      //var instance = new MorpheusApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property statusPercent (base name: "statusPercent")', function() {
      // uncomment below and update the code to test the property statusPercent
      //var instance = new MorpheusApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property statusEta (base name: "statusEta")', function() {
      // uncomment below and update the code to test the property statusEta
      //var instance = new MorpheusApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property userStatus (base name: "userStatus")', function() {
      // uncomment below and update the code to test the property userStatus
      //var instance = new MorpheusApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property expireDays (base name: "expireDays")', function() {
      // uncomment below and update the code to test the property expireDays
      //var instance = new MorpheusApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property renewDays (base name: "renewDays")', function() {
      // uncomment below and update the code to test the property renewDays
      //var instance = new MorpheusApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property expireCount (base name: "expireCount")', function() {
      // uncomment below and update the code to test the property expireCount
      //var instance = new MorpheusApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property expireDate (base name: "expireDate")', function() {
      // uncomment below and update the code to test the property expireDate
      //var instance = new MorpheusApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property expireWarningDate (base name: "expireWarningDate")', function() {
      // uncomment below and update the code to test the property expireWarningDate
      //var instance = new MorpheusApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property expireWarningSent (base name: "expireWarningSent")', function() {
      // uncomment below and update the code to test the property expireWarningSent
      //var instance = new MorpheusApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property shutdownDays (base name: "shutdownDays")', function() {
      // uncomment below and update the code to test the property shutdownDays
      //var instance = new MorpheusApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property shutdownRenewDays (base name: "shutdownRenewDays")', function() {
      // uncomment below and update the code to test the property shutdownRenewDays
      //var instance = new MorpheusApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property shutdownCount (base name: "shutdownCount")', function() {
      // uncomment below and update the code to test the property shutdownCount
      //var instance = new MorpheusApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property shutdownDate (base name: "shutdownDate")', function() {
      // uncomment below and update the code to test the property shutdownDate
      //var instance = new MorpheusApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property shutdownWarningDate (base name: "shutdownWarningDate")', function() {
      // uncomment below and update the code to test the property shutdownWarningDate
      //var instance = new MorpheusApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property shutdownWarningSent (base name: "shutdownWarningSent")', function() {
      // uncomment below and update the code to test the property shutdownWarningSent
      //var instance = new MorpheusApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property removalDate (base name: "removalDate")', function() {
      // uncomment below and update the code to test the property removalDate
      //var instance = new MorpheusApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property createdBy (base name: "createdBy")', function() {
      // uncomment below and update the code to test the property createdBy
      //var instance = new MorpheusApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property owner (base name: "owner")', function() {
      // uncomment below and update the code to test the property owner
      //var instance = new MorpheusApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property notes (base name: "notes")', function() {
      // uncomment below and update the code to test the property notes
      //var instance = new MorpheusApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property stats (base name: "stats")', function() {
      // uncomment below and update the code to test the property stats
      //var instance = new MorpheusApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property powerSchedule (base name: "powerSchedule")', function() {
      // uncomment below and update the code to test the property powerSchedule
      //var instance = new MorpheusApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property isScalable (base name: "isScalable")', function() {
      // uncomment below and update the code to test the property isScalable
      //var instance = new MorpheusApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property instanceThreshold (base name: "instanceThreshold")', function() {
      // uncomment below and update the code to test the property instanceThreshold
      //var instance = new MorpheusApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property isBusy (base name: "isBusy")', function() {
      // uncomment below and update the code to test the property isBusy
      //var instance = new MorpheusApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property apps (base name: "apps")', function() {
      // uncomment below and update the code to test the property apps
      //var instance = new MorpheusApi.Instance();
      //expect(instance).to.be();
    });

  });

}));
