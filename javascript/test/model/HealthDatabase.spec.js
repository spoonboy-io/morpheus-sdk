/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MorpheusApi);
  }
}(this, function(expect, MorpheusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MorpheusApi.HealthDatabase();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('HealthDatabase', function() {
    it('should create an instance of HealthDatabase', function() {
      // uncomment below and update the code to test HealthDatabase
      //var instane = new MorpheusApi.HealthDatabase();
      //expect(instance).to.be.a(MorpheusApi.HealthDatabase);
    });

    it('should have the property success (base name: "success")', function() {
      // uncomment below and update the code to test the property success
      //var instance = new MorpheusApi.HealthDatabase();
      //expect(instance).to.be();
    });

    it('should have the property connectionList (base name: "connectionList")', function() {
      // uncomment below and update the code to test the property connectionList
      //var instance = new MorpheusApi.HealthDatabase();
      //expect(instance).to.be();
    });

    it('should have the property busyConnections (base name: "busyConnections")', function() {
      // uncomment below and update the code to test the property busyConnections
      //var instance = new MorpheusApi.HealthDatabase();
      //expect(instance).to.be();
    });

    it('should have the property maxConnections (base name: "maxConnections")', function() {
      // uncomment below and update the code to test the property maxConnections
      //var instance = new MorpheusApi.HealthDatabase();
      //expect(instance).to.be();
    });

    it('should have the property maxUsedConnections (base name: "maxUsedConnections")', function() {
      // uncomment below and update the code to test the property maxUsedConnections
      //var instance = new MorpheusApi.HealthDatabase();
      //expect(instance).to.be();
    });

    it('should have the property usedConnections (base name: "usedConnections")', function() {
      // uncomment below and update the code to test the property usedConnections
      //var instance = new MorpheusApi.HealthDatabase();
      //expect(instance).to.be();
    });

    it('should have the property abortedConnections (base name: "abortedConnections")', function() {
      // uncomment below and update the code to test the property abortedConnections
      //var instance = new MorpheusApi.HealthDatabase();
      //expect(instance).to.be();
    });

    it('should have the property innodbStatus (base name: "innodbStatus")', function() {
      // uncomment below and update the code to test the property innodbStatus
      //var instance = new MorpheusApi.HealthDatabase();
      //expect(instance).to.be();
    });

    it('should have the property stats (base name: "stats")', function() {
      // uncomment below and update the code to test the property stats
      //var instance = new MorpheusApi.HealthDatabase();
      //expect(instance).to.be();
    });

    it('should have the property scans (base name: "scans")', function() {
      // uncomment below and update the code to test the property scans
      //var instance = new MorpheusApi.HealthDatabase();
      //expect(instance).to.be();
    });

    it('should have the property slowQueries (base name: "slowQueries")', function() {
      // uncomment below and update the code to test the property slowQueries
      //var instance = new MorpheusApi.HealthDatabase();
      //expect(instance).to.be();
    });

    it('should have the property innodbStats (base name: "innodbStats")', function() {
      // uncomment below and update the code to test the property innodbStats
      //var instance = new MorpheusApi.HealthDatabase();
      //expect(instance).to.be();
    });

    it('should have the property scanPercent (base name: "scanPercent")', function() {
      // uncomment below and update the code to test the property scanPercent
      //var instance = new MorpheusApi.HealthDatabase();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new MorpheusApi.HealthDatabase();
      //expect(instance).to.be();
    });

  });

}));
