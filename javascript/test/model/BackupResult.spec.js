/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MorpheusApi);
  }
}(this, function(expect, MorpheusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MorpheusApi.BackupResult();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('BackupResult', function() {
    it('should create an instance of BackupResult', function() {
      // uncomment below and update the code to test BackupResult
      //var instane = new MorpheusApi.BackupResult();
      //expect(instance).to.be.a(MorpheusApi.BackupResult);
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new MorpheusApi.BackupResult();
      //expect(instance).to.be();
    });

    it('should have the property backup (base name: "backup")', function() {
      // uncomment below and update the code to test the property backup
      //var instance = new MorpheusApi.BackupResult();
      //expect(instance).to.be();
    });

    it('should have the property backupSetId (base name: "backupSetId")', function() {
      // uncomment below and update the code to test the property backupSetId
      //var instance = new MorpheusApi.BackupResult();
      //expect(instance).to.be();
    });

    it('should have the property instanceId (base name: "instanceId")', function() {
      // uncomment below and update the code to test the property instanceId
      //var instance = new MorpheusApi.BackupResult();
      //expect(instance).to.be();
    });

    it('should have the property containerId (base name: "containerId")', function() {
      // uncomment below and update the code to test the property containerId
      //var instance = new MorpheusApi.BackupResult();
      //expect(instance).to.be();
    });

    it('should have the property serverId (base name: "serverId")', function() {
      // uncomment below and update the code to test the property serverId
      //var instance = new MorpheusApi.BackupResult();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new MorpheusApi.BackupResult();
      //expect(instance).to.be();
    });

    it('should have the property errorMessage (base name: "errorMessage")', function() {
      // uncomment below and update the code to test the property errorMessage
      //var instance = new MorpheusApi.BackupResult();
      //expect(instance).to.be();
    });

    it('should have the property startDate (base name: "startDate")', function() {
      // uncomment below and update the code to test the property startDate
      //var instance = new MorpheusApi.BackupResult();
      //expect(instance).to.be();
    });

    it('should have the property endDate (base name: "endDate")', function() {
      // uncomment below and update the code to test the property endDate
      //var instance = new MorpheusApi.BackupResult();
      //expect(instance).to.be();
    });

    it('should have the property durationMillis (base name: "durationMillis")', function() {
      // uncomment below and update the code to test the property durationMillis
      //var instance = new MorpheusApi.BackupResult();
      //expect(instance).to.be();
    });

    it('should have the property sizeInBytes (base name: "sizeInBytes")', function() {
      // uncomment below and update the code to test the property sizeInBytes
      //var instance = new MorpheusApi.BackupResult();
      //expect(instance).to.be();
    });

    it('should have the property sizeInMb (base name: "sizeInMb")', function() {
      // uncomment below and update the code to test the property sizeInMb
      //var instance = new MorpheusApi.BackupResult();
      //expect(instance).to.be();
    });

    it('should have the property volumePath (base name: "volumePath")', function() {
      // uncomment below and update the code to test the property volumePath
      //var instance = new MorpheusApi.BackupResult();
      //expect(instance).to.be();
    });

    it('should have the property resultArchive (base name: "resultArchive")', function() {
      // uncomment below and update the code to test the property resultArchive
      //var instance = new MorpheusApi.BackupResult();
      //expect(instance).to.be();
    });

    it('should have the property resultPath (base name: "resultPath")', function() {
      // uncomment below and update the code to test the property resultPath
      //var instance = new MorpheusApi.BackupResult();
      //expect(instance).to.be();
    });

    it('should have the property externalId (base name: "externalId")', function() {
      // uncomment below and update the code to test the property externalId
      //var instance = new MorpheusApi.BackupResult();
      //expect(instance).to.be();
    });

    it('should have the property snapshotId (base name: "snapshotId")', function() {
      // uncomment below and update the code to test the property snapshotId
      //var instance = new MorpheusApi.BackupResult();
      //expect(instance).to.be();
    });

    it('should have the property snapshotExternalId (base name: "snapshotExternalId")', function() {
      // uncomment below and update the code to test the property snapshotExternalId
      //var instance = new MorpheusApi.BackupResult();
      //expect(instance).to.be();
    });

    it('should have the property createdBy (base name: "createdBy")', function() {
      // uncomment below and update the code to test the property createdBy
      //var instance = new MorpheusApi.BackupResult();
      //expect(instance).to.be();
    });

    it('should have the property dateCreated (base name: "dateCreated")', function() {
      // uncomment below and update the code to test the property dateCreated
      //var instance = new MorpheusApi.BackupResult();
      //expect(instance).to.be();
    });

    it('should have the property lastUpdated (base name: "lastUpdated")', function() {
      // uncomment below and update the code to test the property lastUpdated
      //var instance = new MorpheusApi.BackupResult();
      //expect(instance).to.be();
    });

  });

}));
