/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MorpheusApi);
  }
}(this, function(expect, MorpheusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MorpheusApi.StorageServer();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('StorageServer', function() {
    it('should create an instance of StorageServer', function() {
      // uncomment below and update the code to test StorageServer
      //var instane = new MorpheusApi.StorageServer();
      //expect(instance).to.be.a(MorpheusApi.StorageServer);
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new MorpheusApi.StorageServer();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new MorpheusApi.StorageServer();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new MorpheusApi.StorageServer();
      //expect(instance).to.be();
    });

    it('should have the property chassis (base name: "chassis")', function() {
      // uncomment below and update the code to test the property chassis
      //var instance = new MorpheusApi.StorageServer();
      //expect(instance).to.be();
    });

    it('should have the property visibility (base name: "visibility")', function() {
      // uncomment below and update the code to test the property visibility
      //var instance = new MorpheusApi.StorageServer();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new MorpheusApi.StorageServer();
      //expect(instance).to.be();
    });

    it('should have the property internalId (base name: "internalId")', function() {
      // uncomment below and update the code to test the property internalId
      //var instance = new MorpheusApi.StorageServer();
      //expect(instance).to.be();
    });

    it('should have the property externalId (base name: "externalId")', function() {
      // uncomment below and update the code to test the property externalId
      //var instance = new MorpheusApi.StorageServer();
      //expect(instance).to.be();
    });

    it('should have the property serviceUrl (base name: "serviceUrl")', function() {
      // uncomment below and update the code to test the property serviceUrl
      //var instance = new MorpheusApi.StorageServer();
      //expect(instance).to.be();
    });

    it('should have the property serviceHost (base name: "serviceHost")', function() {
      // uncomment below and update the code to test the property serviceHost
      //var instance = new MorpheusApi.StorageServer();
      //expect(instance).to.be();
    });

    it('should have the property servicePath (base name: "servicePath")', function() {
      // uncomment below and update the code to test the property servicePath
      //var instance = new MorpheusApi.StorageServer();
      //expect(instance).to.be();
    });

    it('should have the property serviceToken (base name: "serviceToken")', function() {
      // uncomment below and update the code to test the property serviceToken
      //var instance = new MorpheusApi.StorageServer();
      //expect(instance).to.be();
    });

    it('should have the property serviceTokenHash (base name: "serviceTokenHash")', function() {
      // uncomment below and update the code to test the property serviceTokenHash
      //var instance = new MorpheusApi.StorageServer();
      //expect(instance).to.be();
    });

    it('should have the property serviceVersion (base name: "serviceVersion")', function() {
      // uncomment below and update the code to test the property serviceVersion
      //var instance = new MorpheusApi.StorageServer();
      //expect(instance).to.be();
    });

    it('should have the property serviceUsername (base name: "serviceUsername")', function() {
      // uncomment below and update the code to test the property serviceUsername
      //var instance = new MorpheusApi.StorageServer();
      //expect(instance).to.be();
    });

    it('should have the property servicePassword (base name: "servicePassword")', function() {
      // uncomment below and update the code to test the property servicePassword
      //var instance = new MorpheusApi.StorageServer();
      //expect(instance).to.be();
    });

    it('should have the property servicePasswordHash (base name: "servicePasswordHash")', function() {
      // uncomment below and update the code to test the property servicePasswordHash
      //var instance = new MorpheusApi.StorageServer();
      //expect(instance).to.be();
    });

    it('should have the property internalIp (base name: "internalIp")', function() {
      // uncomment below and update the code to test the property internalIp
      //var instance = new MorpheusApi.StorageServer();
      //expect(instance).to.be();
    });

    it('should have the property externalIp (base name: "externalIp")', function() {
      // uncomment below and update the code to test the property externalIp
      //var instance = new MorpheusApi.StorageServer();
      //expect(instance).to.be();
    });

    it('should have the property apiPort (base name: "apiPort")', function() {
      // uncomment below and update the code to test the property apiPort
      //var instance = new MorpheusApi.StorageServer();
      //expect(instance).to.be();
    });

    it('should have the property adminPort (base name: "adminPort")', function() {
      // uncomment below and update the code to test the property adminPort
      //var instance = new MorpheusApi.StorageServer();
      //expect(instance).to.be();
    });

    it('should have the property config (base name: "config")', function() {
      // uncomment below and update the code to test the property config
      //var instance = new MorpheusApi.StorageServer();
      //expect(instance).to.be();
    });

    it('should have the property refType (base name: "refType")', function() {
      // uncomment below and update the code to test the property refType
      //var instance = new MorpheusApi.StorageServer();
      //expect(instance).to.be();
    });

    it('should have the property refId (base name: "refId")', function() {
      // uncomment below and update the code to test the property refId
      //var instance = new MorpheusApi.StorageServer();
      //expect(instance).to.be();
    });

    it('should have the property category (base name: "category")', function() {
      // uncomment below and update the code to test the property category
      //var instance = new MorpheusApi.StorageServer();
      //expect(instance).to.be();
    });

    it('should have the property serverVendor (base name: "serverVendor")', function() {
      // uncomment below and update the code to test the property serverVendor
      //var instance = new MorpheusApi.StorageServer();
      //expect(instance).to.be();
    });

    it('should have the property serverModel (base name: "serverModel")', function() {
      // uncomment below and update the code to test the property serverModel
      //var instance = new MorpheusApi.StorageServer();
      //expect(instance).to.be();
    });

    it('should have the property serialNumber (base name: "serialNumber")', function() {
      // uncomment below and update the code to test the property serialNumber
      //var instance = new MorpheusApi.StorageServer();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new MorpheusApi.StorageServer();
      //expect(instance).to.be();
    });

    it('should have the property statusMessage (base name: "statusMessage")', function() {
      // uncomment below and update the code to test the property statusMessage
      //var instance = new MorpheusApi.StorageServer();
      //expect(instance).to.be();
    });

    it('should have the property statusDate (base name: "statusDate")', function() {
      // uncomment below and update the code to test the property statusDate
      //var instance = new MorpheusApi.StorageServer();
      //expect(instance).to.be();
    });

    it('should have the property errorMessage (base name: "errorMessage")', function() {
      // uncomment below and update the code to test the property errorMessage
      //var instance = new MorpheusApi.StorageServer();
      //expect(instance).to.be();
    });

    it('should have the property maxStorage (base name: "maxStorage")', function() {
      // uncomment below and update the code to test the property maxStorage
      //var instance = new MorpheusApi.StorageServer();
      //expect(instance).to.be();
    });

    it('should have the property usedStorage (base name: "usedStorage")', function() {
      // uncomment below and update the code to test the property usedStorage
      //var instance = new MorpheusApi.StorageServer();
      //expect(instance).to.be();
    });

    it('should have the property diskCount (base name: "diskCount")', function() {
      // uncomment below and update the code to test the property diskCount
      //var instance = new MorpheusApi.StorageServer();
      //expect(instance).to.be();
    });

    it('should have the property dateCreated (base name: "dateCreated")', function() {
      // uncomment below and update the code to test the property dateCreated
      //var instance = new MorpheusApi.StorageServer();
      //expect(instance).to.be();
    });

    it('should have the property lastUpdated (base name: "lastUpdated")', function() {
      // uncomment below and update the code to test the property lastUpdated
      //var instance = new MorpheusApi.StorageServer();
      //expect(instance).to.be();
    });

    it('should have the property enabled (base name: "enabled")', function() {
      // uncomment below and update the code to test the property enabled
      //var instance = new MorpheusApi.StorageServer();
      //expect(instance).to.be();
    });

    it('should have the property groups (base name: "groups")', function() {
      // uncomment below and update the code to test the property groups
      //var instance = new MorpheusApi.StorageServer();
      //expect(instance).to.be();
    });

    it('should have the property hostGroups (base name: "hostGroups")', function() {
      // uncomment below and update the code to test the property hostGroups
      //var instance = new MorpheusApi.StorageServer();
      //expect(instance).to.be();
    });

    it('should have the property hosts (base name: "hosts")', function() {
      // uncomment below and update the code to test the property hosts
      //var instance = new MorpheusApi.StorageServer();
      //expect(instance).to.be();
    });

    it('should have the property tenants (base name: "tenants")', function() {
      // uncomment below and update the code to test the property tenants
      //var instance = new MorpheusApi.StorageServer();
      //expect(instance).to.be();
    });

    it('should have the property owner (base name: "owner")', function() {
      // uncomment below and update the code to test the property owner
      //var instance = new MorpheusApi.StorageServer();
      //expect(instance).to.be();
    });

    it('should have the property credential (base name: "credential")', function() {
      // uncomment below and update the code to test the property credential
      //var instance = new MorpheusApi.StorageServer();
      //expect(instance).to.be();
    });

  });

}));
