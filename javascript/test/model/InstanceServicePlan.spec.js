/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MorpheusApi);
  }
}(this, function(expect, MorpheusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MorpheusApi.InstanceServicePlan();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('InstanceServicePlan', function() {
    it('should create an instance of InstanceServicePlan', function() {
      // uncomment below and update the code to test InstanceServicePlan
      //var instane = new MorpheusApi.InstanceServicePlan();
      //expect(instance).to.be.a(MorpheusApi.InstanceServicePlan);
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new MorpheusApi.InstanceServicePlan();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new MorpheusApi.InstanceServicePlan();
      //expect(instance).to.be();
    });

    it('should have the property value (base name: "value")', function() {
      // uncomment below and update the code to test the property value
      //var instance = new MorpheusApi.InstanceServicePlan();
      //expect(instance).to.be();
    });

    it('should have the property code (base name: "code")', function() {
      // uncomment below and update the code to test the property code
      //var instance = new MorpheusApi.InstanceServicePlan();
      //expect(instance).to.be();
    });

    it('should have the property maxStorage (base name: "maxStorage")', function() {
      // uncomment below and update the code to test the property maxStorage
      //var instance = new MorpheusApi.InstanceServicePlan();
      //expect(instance).to.be();
    });

    it('should have the property maxMemory (base name: "maxMemory")', function() {
      // uncomment below and update the code to test the property maxMemory
      //var instance = new MorpheusApi.InstanceServicePlan();
      //expect(instance).to.be();
    });

    it('should have the property maxCpu (base name: "maxCpu")', function() {
      // uncomment below and update the code to test the property maxCpu
      //var instance = new MorpheusApi.InstanceServicePlan();
      //expect(instance).to.be();
    });

    it('should have the property maxCores (base name: "maxCores")', function() {
      // uncomment below and update the code to test the property maxCores
      //var instance = new MorpheusApi.InstanceServicePlan();
      //expect(instance).to.be();
    });

    it('should have the property customCpu (base name: "customCpu")', function() {
      // uncomment below and update the code to test the property customCpu
      //var instance = new MorpheusApi.InstanceServicePlan();
      //expect(instance).to.be();
    });

    it('should have the property customMaxMemory (base name: "customMaxMemory")', function() {
      // uncomment below and update the code to test the property customMaxMemory
      //var instance = new MorpheusApi.InstanceServicePlan();
      //expect(instance).to.be();
    });

    it('should have the property customMaxStorage (base name: "customMaxStorage")', function() {
      // uncomment below and update the code to test the property customMaxStorage
      //var instance = new MorpheusApi.InstanceServicePlan();
      //expect(instance).to.be();
    });

    it('should have the property customMaxDataStorage (base name: "customMaxDataStorage")', function() {
      // uncomment below and update the code to test the property customMaxDataStorage
      //var instance = new MorpheusApi.InstanceServicePlan();
      //expect(instance).to.be();
    });

    it('should have the property customCoresPerSocket (base name: "customCoresPerSocket")', function() {
      // uncomment below and update the code to test the property customCoresPerSocket
      //var instance = new MorpheusApi.InstanceServicePlan();
      //expect(instance).to.be();
    });

    it('should have the property coresPerSocket (base name: "coresPerSocket")', function() {
      // uncomment below and update the code to test the property coresPerSocket
      //var instance = new MorpheusApi.InstanceServicePlan();
      //expect(instance).to.be();
    });

    it('should have the property storageTypes (base name: "storageTypes")', function() {
      // uncomment below and update the code to test the property storageTypes
      //var instance = new MorpheusApi.InstanceServicePlan();
      //expect(instance).to.be();
    });

    it('should have the property rootStorageTypes (base name: "rootStorageTypes")', function() {
      // uncomment below and update the code to test the property rootStorageTypes
      //var instance = new MorpheusApi.InstanceServicePlan();
      //expect(instance).to.be();
    });

    it('should have the property addVolumes (base name: "addVolumes")', function() {
      // uncomment below and update the code to test the property addVolumes
      //var instance = new MorpheusApi.InstanceServicePlan();
      //expect(instance).to.be();
    });

    it('should have the property customizeVolume (base name: "customizeVolume")', function() {
      // uncomment below and update the code to test the property customizeVolume
      //var instance = new MorpheusApi.InstanceServicePlan();
      //expect(instance).to.be();
    });

    it('should have the property rootDiskCustomizable (base name: "rootDiskCustomizable")', function() {
      // uncomment below and update the code to test the property rootDiskCustomizable
      //var instance = new MorpheusApi.InstanceServicePlan();
      //expect(instance).to.be();
    });

    it('should have the property noDisks (base name: "noDisks")', function() {
      // uncomment below and update the code to test the property noDisks
      //var instance = new MorpheusApi.InstanceServicePlan();
      //expect(instance).to.be();
    });

    it('should have the property hasDatastore (base name: "hasDatastore")', function() {
      // uncomment below and update the code to test the property hasDatastore
      //var instance = new MorpheusApi.InstanceServicePlan();
      //expect(instance).to.be();
    });

    it('should have the property minDisk (base name: "minDisk")', function() {
      // uncomment below and update the code to test the property minDisk
      //var instance = new MorpheusApi.InstanceServicePlan();
      //expect(instance).to.be();
    });

    it('should have the property maxDisk (base name: "maxDisk")', function() {
      // uncomment below and update the code to test the property maxDisk
      //var instance = new MorpheusApi.InstanceServicePlan();
      //expect(instance).to.be();
    });

    it('should have the property lvmSupported (base name: "lvmSupported")', function() {
      // uncomment below and update the code to test the property lvmSupported
      //var instance = new MorpheusApi.InstanceServicePlan();
      //expect(instance).to.be();
    });

    it('should have the property datastores (base name: "datastores")', function() {
      // uncomment below and update the code to test the property datastores
      //var instance = new MorpheusApi.InstanceServicePlan();
      //expect(instance).to.be();
    });

    it('should have the property supportsAutoDatastore (base name: "supportsAutoDatastore")', function() {
      // uncomment below and update the code to test the property supportsAutoDatastore
      //var instance = new MorpheusApi.InstanceServicePlan();
      //expect(instance).to.be();
    });

    it('should have the property autoOptions (base name: "autoOptions")', function() {
      // uncomment below and update the code to test the property autoOptions
      //var instance = new MorpheusApi.InstanceServicePlan();
      //expect(instance).to.be();
    });

    it('should have the property cpuOptions (base name: "cpuOptions")', function() {
      // uncomment below and update the code to test the property cpuOptions
      //var instance = new MorpheusApi.InstanceServicePlan();
      //expect(instance).to.be();
    });

    it('should have the property coreOptions (base name: "coreOptions")', function() {
      // uncomment below and update the code to test the property coreOptions
      //var instance = new MorpheusApi.InstanceServicePlan();
      //expect(instance).to.be();
    });

    it('should have the property memoryOptions (base name: "memoryOptions")', function() {
      // uncomment below and update the code to test the property memoryOptions
      //var instance = new MorpheusApi.InstanceServicePlan();
      //expect(instance).to.be();
    });

    it('should have the property rootCustomSizeOptions (base name: "rootCustomSizeOptions")', function() {
      // uncomment below and update the code to test the property rootCustomSizeOptions
      //var instance = new MorpheusApi.InstanceServicePlan();
      //expect(instance).to.be();
    });

    it('should have the property customSizeOptions (base name: "customSizeOptions")', function() {
      // uncomment below and update the code to test the property customSizeOptions
      //var instance = new MorpheusApi.InstanceServicePlan();
      //expect(instance).to.be();
    });

    it('should have the property customCores (base name: "customCores")', function() {
      // uncomment below and update the code to test the property customCores
      //var instance = new MorpheusApi.InstanceServicePlan();
      //expect(instance).to.be();
    });

    it('should have the property maxDisks (base name: "maxDisks")', function() {
      // uncomment below and update the code to test the property maxDisks
      //var instance = new MorpheusApi.InstanceServicePlan();
      //expect(instance).to.be();
    });

    it('should have the property memorySizeType (base name: "memorySizeType")', function() {
      // uncomment below and update the code to test the property memorySizeType
      //var instance = new MorpheusApi.InstanceServicePlan();
      //expect(instance).to.be();
    });

  });

}));
