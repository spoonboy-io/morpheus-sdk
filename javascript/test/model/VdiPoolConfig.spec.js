/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MorpheusApi);
  }
}(this, function(expect, MorpheusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MorpheusApi.VdiPoolConfig();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('VdiPoolConfig', function() {
    it('should create an instance of VdiPoolConfig', function() {
      // uncomment below and update the code to test VdiPoolConfig
      //var instane = new MorpheusApi.VdiPoolConfig();
      //expect(instance).to.be.a(MorpheusApi.VdiPoolConfig);
    });

    it('should have the property group (base name: "group")', function() {
      // uncomment below and update the code to test the property group
      //var instance = new MorpheusApi.VdiPoolConfig();
      //expect(instance).to.be();
    });

    it('should have the property cloud (base name: "cloud")', function() {
      // uncomment below and update the code to test the property cloud
      //var instance = new MorpheusApi.VdiPoolConfig();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new MorpheusApi.VdiPoolConfig();
      //expect(instance).to.be();
    });

    it('should have the property instance (base name: "instance")', function() {
      // uncomment below and update the code to test the property instance
      //var instance = new MorpheusApi.VdiPoolConfig();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new MorpheusApi.VdiPoolConfig();
      //expect(instance).to.be();
    });

    it('should have the property environment (base name: "environment")', function() {
      // uncomment below and update the code to test the property environment
      //var instance = new MorpheusApi.VdiPoolConfig();
      //expect(instance).to.be();
    });

    it('should have the property config (base name: "config")', function() {
      // uncomment below and update the code to test the property config
      //var instance = new MorpheusApi.VdiPoolConfig();
      //expect(instance).to.be();
    });

    it('should have the property volumes (base name: "volumes")', function() {
      // uncomment below and update the code to test the property volumes
      //var instance = new MorpheusApi.VdiPoolConfig();
      //expect(instance).to.be();
    });

    it('should have the property hostName (base name: "hostName")', function() {
      // uncomment below and update the code to test the property hostName
      //var instance = new MorpheusApi.VdiPoolConfig();
      //expect(instance).to.be();
    });

    it('should have the property layout (base name: "layout")', function() {
      // uncomment below and update the code to test the property layout
      //var instance = new MorpheusApi.VdiPoolConfig();
      //expect(instance).to.be();
    });

    it('should have the property storageControllers (base name: "storageControllers")', function() {
      // uncomment below and update the code to test the property storageControllers
      //var instance = new MorpheusApi.VdiPoolConfig();
      //expect(instance).to.be();
    });

    it('should have the property plan (base name: "plan")', function() {
      // uncomment below and update the code to test the property plan
      //var instance = new MorpheusApi.VdiPoolConfig();
      //expect(instance).to.be();
    });

    it('should have the property version (base name: "version")', function() {
      // uncomment below and update the code to test the property version
      //var instance = new MorpheusApi.VdiPoolConfig();
      //expect(instance).to.be();
    });

    it('should have the property networkInterfaces (base name: "networkInterfaces")', function() {
      // uncomment below and update the code to test the property networkInterfaces
      //var instance = new MorpheusApi.VdiPoolConfig();
      //expect(instance).to.be();
    });

    it('should have the property executionId (base name: "executionId")', function() {
      // uncomment below and update the code to test the property executionId
      //var instance = new MorpheusApi.VdiPoolConfig();
      //expect(instance).to.be();
    });

    it('should have the property backup (base name: "backup")', function() {
      // uncomment below and update the code to test the property backup
      //var instance = new MorpheusApi.VdiPoolConfig();
      //expect(instance).to.be();
    });

    it('should have the property loadBalancer (base name: "loadBalancer")', function() {
      // uncomment below and update the code to test the property loadBalancer
      //var instance = new MorpheusApi.VdiPoolConfig();
      //expect(instance).to.be();
    });

    it('should have the property hideLock (base name: "hideLock")', function() {
      // uncomment below and update the code to test the property hideLock
      //var instance = new MorpheusApi.VdiPoolConfig();
      //expect(instance).to.be();
    });

    it('should have the property hasNetworks (base name: "hasNetworks")', function() {
      // uncomment below and update the code to test the property hasNetworks
      //var instance = new MorpheusApi.VdiPoolConfig();
      //expect(instance).to.be();
    });

    it('should have the property displayNetworks (base name: "displayNetworks")', function() {
      // uncomment below and update the code to test the property displayNetworks
      //var instance = new MorpheusApi.VdiPoolConfig();
      //expect(instance).to.be();
    });

    it('should have the property copies (base name: "copies")', function() {
      // uncomment below and update the code to test the property copies
      //var instance = new MorpheusApi.VdiPoolConfig();
      //expect(instance).to.be();
    });

    it('should have the property showScale (base name: "showScale")', function() {
      // uncomment below and update the code to test the property showScale
      //var instance = new MorpheusApi.VdiPoolConfig();
      //expect(instance).to.be();
    });

    it('should have the property hasPreview (base name: "hasPreview")', function() {
      // uncomment below and update the code to test the property hasPreview
      //var instance = new MorpheusApi.VdiPoolConfig();
      //expect(instance).to.be();
    });

    it('should have the property volumesDisplay (base name: "volumesDisplay")', function() {
      // uncomment below and update the code to test the property volumesDisplay
      //var instance = new MorpheusApi.VdiPoolConfig();
      //expect(instance).to.be();
    });

  });

}));
