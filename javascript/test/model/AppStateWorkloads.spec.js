/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MorpheusApi);
  }
}(this, function(expect, MorpheusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MorpheusApi.AppStateWorkloads();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('AppStateWorkloads', function() {
    it('should create an instance of AppStateWorkloads', function() {
      // uncomment below and update the code to test AppStateWorkloads
      //var instane = new MorpheusApi.AppStateWorkloads();
      //expect(instance).to.be.a(MorpheusApi.AppStateWorkloads);
    });

    it('should have the property refType (base name: "refType")', function() {
      // uncomment below and update the code to test the property refType
      //var instance = new MorpheusApi.AppStateWorkloads();
      //expect(instance).to.be();
    });

    it('should have the property refId (base name: "refId")', function() {
      // uncomment below and update the code to test the property refId
      //var instance = new MorpheusApi.AppStateWorkloads();
      //expect(instance).to.be();
    });

    it('should have the property refName (base name: "refName")', function() {
      // uncomment below and update the code to test the property refName
      //var instance = new MorpheusApi.AppStateWorkloads();
      //expect(instance).to.be();
    });

    it('should have the property subRefName (base name: "subRefName")', function() {
      // uncomment below and update the code to test the property subRefName
      //var instance = new MorpheusApi.AppStateWorkloads();
      //expect(instance).to.be();
    });

    it('should have the property stateDate (base name: "stateDate")', function() {
      // uncomment below and update the code to test the property stateDate
      //var instance = new MorpheusApi.AppStateWorkloads();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new MorpheusApi.AppStateWorkloads();
      //expect(instance).to.be();
    });

    it('should have the property iacDrift (base name: "iacDrift")', function() {
      // uncomment below and update the code to test the property iacDrift
      //var instance = new MorpheusApi.AppStateWorkloads();
      //expect(instance).to.be();
    });

  });

}));
