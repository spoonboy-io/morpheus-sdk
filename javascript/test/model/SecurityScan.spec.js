/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MorpheusApi);
  }
}(this, function(expect, MorpheusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MorpheusApi.SecurityScan();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('SecurityScan', function() {
    it('should create an instance of SecurityScan', function() {
      // uncomment below and update the code to test SecurityScan
      //var instane = new MorpheusApi.SecurityScan();
      //expect(instance).to.be.a(MorpheusApi.SecurityScan);
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new MorpheusApi.SecurityScan();
      //expect(instance).to.be();
    });

    it('should have the property securityPackage (base name: "securityPackage")', function() {
      // uncomment below and update the code to test the property securityPackage
      //var instance = new MorpheusApi.SecurityScan();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new MorpheusApi.SecurityScan();
      //expect(instance).to.be();
    });

    it('should have the property scanDate (base name: "scanDate")', function() {
      // uncomment below and update the code to test the property scanDate
      //var instance = new MorpheusApi.SecurityScan();
      //expect(instance).to.be();
    });

    it('should have the property scanDuration (base name: "scanDuration")', function() {
      // uncomment below and update the code to test the property scanDuration
      //var instance = new MorpheusApi.SecurityScan();
      //expect(instance).to.be();
    });

    it('should have the property testCount (base name: "testCount")', function() {
      // uncomment below and update the code to test the property testCount
      //var instance = new MorpheusApi.SecurityScan();
      //expect(instance).to.be();
    });

    it('should have the property runCount (base name: "runCount")', function() {
      // uncomment below and update the code to test the property runCount
      //var instance = new MorpheusApi.SecurityScan();
      //expect(instance).to.be();
    });

    it('should have the property passCount (base name: "passCount")', function() {
      // uncomment below and update the code to test the property passCount
      //var instance = new MorpheusApi.SecurityScan();
      //expect(instance).to.be();
    });

    it('should have the property failCount (base name: "failCount")', function() {
      // uncomment below and update the code to test the property failCount
      //var instance = new MorpheusApi.SecurityScan();
      //expect(instance).to.be();
    });

    it('should have the property otherCount (base name: "otherCount")', function() {
      // uncomment below and update the code to test the property otherCount
      //var instance = new MorpheusApi.SecurityScan();
      //expect(instance).to.be();
    });

    it('should have the property scanScore (base name: "scanScore")', function() {
      // uncomment below and update the code to test the property scanScore
      //var instance = new MorpheusApi.SecurityScan();
      //expect(instance).to.be();
    });

    it('should have the property externalId (base name: "externalId")', function() {
      // uncomment below and update the code to test the property externalId
      //var instance = new MorpheusApi.SecurityScan();
      //expect(instance).to.be();
    });

    it('should have the property createdBy (base name: "createdBy")', function() {
      // uncomment below and update the code to test the property createdBy
      //var instance = new MorpheusApi.SecurityScan();
      //expect(instance).to.be();
    });

    it('should have the property updatedBy (base name: "updatedBy")', function() {
      // uncomment below and update the code to test the property updatedBy
      //var instance = new MorpheusApi.SecurityScan();
      //expect(instance).to.be();
    });

    it('should have the property dateCreated (base name: "dateCreated")', function() {
      // uncomment below and update the code to test the property dateCreated
      //var instance = new MorpheusApi.SecurityScan();
      //expect(instance).to.be();
    });

    it('should have the property lastUpdated (base name: "lastUpdated")', function() {
      // uncomment below and update the code to test the property lastUpdated
      //var instance = new MorpheusApi.SecurityScan();
      //expect(instance).to.be();
    });

    it('should have the property results (base name: "results")', function() {
      // uncomment below and update the code to test the property results
      //var instance = new MorpheusApi.SecurityScan();
      //expect(instance).to.be();
    });

  });

}));
