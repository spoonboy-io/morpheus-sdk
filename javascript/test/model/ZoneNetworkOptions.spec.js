/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MorpheusApi);
  }
}(this, function(expect, MorpheusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MorpheusApi.ZoneNetworkOptions();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ZoneNetworkOptions', function() {
    it('should create an instance of ZoneNetworkOptions', function() {
      // uncomment below and update the code to test ZoneNetworkOptions
      //var instane = new MorpheusApi.ZoneNetworkOptions();
      //expect(instance).to.be.a(MorpheusApi.ZoneNetworkOptions);
    });

    it('should have the property networks (base name: "networks")', function() {
      // uncomment below and update the code to test the property networks
      //var instance = new MorpheusApi.ZoneNetworkOptions();
      //expect(instance).to.be();
    });

    it('should have the property networkGroups (base name: "networkGroups")', function() {
      // uncomment below and update the code to test the property networkGroups
      //var instance = new MorpheusApi.ZoneNetworkOptions();
      //expect(instance).to.be();
    });

    it('should have the property networkTypes (base name: "networkTypes")', function() {
      // uncomment below and update the code to test the property networkTypes
      //var instance = new MorpheusApi.ZoneNetworkOptions();
      //expect(instance).to.be();
    });

    it('should have the property networkSubnets (base name: "networkSubnets")', function() {
      // uncomment below and update the code to test the property networkSubnets
      //var instance = new MorpheusApi.ZoneNetworkOptions();
      //expect(instance).to.be();
    });

    it('should have the property hasNetworks (base name: "hasNetworks")', function() {
      // uncomment below and update the code to test the property hasNetworks
      //var instance = new MorpheusApi.ZoneNetworkOptions();
      //expect(instance).to.be();
    });

    it('should have the property maxNetworks (base name: "maxNetworks")', function() {
      // uncomment below and update the code to test the property maxNetworks
      //var instance = new MorpheusApi.ZoneNetworkOptions();
      //expect(instance).to.be();
    });

    it('should have the property enableNetworkTypeSelection (base name: "enableNetworkTypeSelection")', function() {
      // uncomment below and update the code to test the property enableNetworkTypeSelection
      //var instance = new MorpheusApi.ZoneNetworkOptions();
      //expect(instance).to.be();
    });

    it('should have the property supportsNetworkSelection (base name: "supportsNetworkSelection")', function() {
      // uncomment below and update the code to test the property supportsNetworkSelection
      //var instance = new MorpheusApi.ZoneNetworkOptions();
      //expect(instance).to.be();
    });

  });

}));
