/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MorpheusApi);
  }
}(this, function(expect, MorpheusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MorpheusApi.DashboardMonitoring();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DashboardMonitoring', function() {
    it('should create an instance of DashboardMonitoring', function() {
      // uncomment below and update the code to test DashboardMonitoring
      //var instane = new MorpheusApi.DashboardMonitoring();
      //expect(instance).to.be.a(MorpheusApi.DashboardMonitoring);
    });

    it('should have the property avgHealth (base name: "avgHealth")', function() {
      // uncomment below and update the code to test the property avgHealth
      //var instance = new MorpheusApi.DashboardMonitoring();
      //expect(instance).to.be();
    });

    it('should have the property avgResponseTime (base name: "avgResponseTime")', function() {
      // uncomment below and update the code to test the property avgResponseTime
      //var instance = new MorpheusApi.DashboardMonitoring();
      //expect(instance).to.be();
    });

    it('should have the property warningApps (base name: "warningApps")', function() {
      // uncomment below and update the code to test the property warningApps
      //var instance = new MorpheusApi.DashboardMonitoring();
      //expect(instance).to.be();
    });

    it('should have the property warningChecks (base name: "warningChecks")', function() {
      // uncomment below and update the code to test the property warningChecks
      //var instance = new MorpheusApi.DashboardMonitoring();
      //expect(instance).to.be();
    });

    it('should have the property failApps (base name: "failApps")', function() {
      // uncomment below and update the code to test the property failApps
      //var instance = new MorpheusApi.DashboardMonitoring();
      //expect(instance).to.be();
    });

    it('should have the property totalApps (base name: "totalApps")', function() {
      // uncomment below and update the code to test the property totalApps
      //var instance = new MorpheusApi.DashboardMonitoring();
      //expect(instance).to.be();
    });

    it('should have the property failChecks (base name: "failChecks")', function() {
      // uncomment below and update the code to test the property failChecks
      //var instance = new MorpheusApi.DashboardMonitoring();
      //expect(instance).to.be();
    });

    it('should have the property successApps (base name: "successApps")', function() {
      // uncomment below and update the code to test the property successApps
      //var instance = new MorpheusApi.DashboardMonitoring();
      //expect(instance).to.be();
    });

    it('should have the property mutedApps (base name: "mutedApps")', function() {
      // uncomment below and update the code to test the property mutedApps
      //var instance = new MorpheusApi.DashboardMonitoring();
      //expect(instance).to.be();
    });

    it('should have the property successChecks (base name: "successChecks")', function() {
      // uncomment below and update the code to test the property successChecks
      //var instance = new MorpheusApi.DashboardMonitoring();
      //expect(instance).to.be();
    });

    it('should have the property totalChecks (base name: "totalChecks")', function() {
      // uncomment below and update the code to test the property totalChecks
      //var instance = new MorpheusApi.DashboardMonitoring();
      //expect(instance).to.be();
    });

    it('should have the property mutedChecks (base name: "mutedChecks")', function() {
      // uncomment below and update the code to test the property mutedChecks
      //var instance = new MorpheusApi.DashboardMonitoring();
      //expect(instance).to.be();
    });

    it('should have the property responseTimes (base name: "responseTimes")', function() {
      // uncomment below and update the code to test the property responseTimes
      //var instance = new MorpheusApi.DashboardMonitoring();
      //expect(instance).to.be();
    });

    it('should have the property allSuccess (base name: "allSuccess")', function() {
      // uncomment below and update the code to test the property allSuccess
      //var instance = new MorpheusApi.DashboardMonitoring();
      //expect(instance).to.be();
    });

    it('should have the property openIncidents (base name: "openIncidents")', function() {
      // uncomment below and update the code to test the property openIncidents
      //var instance = new MorpheusApi.DashboardMonitoring();
      //expect(instance).to.be();
    });

  });

}));
