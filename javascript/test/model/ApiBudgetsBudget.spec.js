/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MorpheusApi);
  }
}(this, function(expect, MorpheusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MorpheusApi.ApiBudgetsBudget();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ApiBudgetsBudget', function() {
    it('should create an instance of ApiBudgetsBudget', function() {
      // uncomment below and update the code to test ApiBudgetsBudget
      //var instane = new MorpheusApi.ApiBudgetsBudget();
      //expect(instance).to.be.a(MorpheusApi.ApiBudgetsBudget);
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new MorpheusApi.ApiBudgetsBudget();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new MorpheusApi.ApiBudgetsBudget();
      //expect(instance).to.be();
    });

    it('should have the property scope (base name: "scope")', function() {
      // uncomment below and update the code to test the property scope
      //var instance = new MorpheusApi.ApiBudgetsBudget();
      //expect(instance).to.be();
    });

    it('should have the property period (base name: "period")', function() {
      // uncomment below and update the code to test the property period
      //var instance = new MorpheusApi.ApiBudgetsBudget();
      //expect(instance).to.be();
    });

    it('should have the property year (base name: "year")', function() {
      // uncomment below and update the code to test the property year
      //var instance = new MorpheusApi.ApiBudgetsBudget();
      //expect(instance).to.be();
    });

    it('should have the property startDate (base name: "startDate")', function() {
      // uncomment below and update the code to test the property startDate
      //var instance = new MorpheusApi.ApiBudgetsBudget();
      //expect(instance).to.be();
    });

    it('should have the property endDate (base name: "endDate")', function() {
      // uncomment below and update the code to test the property endDate
      //var instance = new MorpheusApi.ApiBudgetsBudget();
      //expect(instance).to.be();
    });

    it('should have the property interval (base name: "interval")', function() {
      // uncomment below and update the code to test the property interval
      //var instance = new MorpheusApi.ApiBudgetsBudget();
      //expect(instance).to.be();
    });

    it('should have the property scopeTenantId (base name: "scopeTenantId")', function() {
      // uncomment below and update the code to test the property scopeTenantId
      //var instance = new MorpheusApi.ApiBudgetsBudget();
      //expect(instance).to.be();
    });

    it('should have the property scopeGroupId (base name: "scopeGroupId")', function() {
      // uncomment below and update the code to test the property scopeGroupId
      //var instance = new MorpheusApi.ApiBudgetsBudget();
      //expect(instance).to.be();
    });

    it('should have the property scopeCloudId (base name: "scopeCloudId")', function() {
      // uncomment below and update the code to test the property scopeCloudId
      //var instance = new MorpheusApi.ApiBudgetsBudget();
      //expect(instance).to.be();
    });

    it('should have the property scopeUserId (base name: "scopeUserId")', function() {
      // uncomment below and update the code to test the property scopeUserId
      //var instance = new MorpheusApi.ApiBudgetsBudget();
      //expect(instance).to.be();
    });

    it('should have the property costs (base name: "costs")', function() {
      // uncomment below and update the code to test the property costs
      //var instance = new MorpheusApi.ApiBudgetsBudget();
      //expect(instance).to.be();
    });

    it('should have the property enabled (base name: "enabled")', function() {
      // uncomment below and update the code to test the property enabled
      //var instance = new MorpheusApi.ApiBudgetsBudget();
      //expect(instance).to.be();
    });

  });

}));
