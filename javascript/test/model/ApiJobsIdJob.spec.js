/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MorpheusApi);
  }
}(this, function(expect, MorpheusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MorpheusApi.ApiJobsIdJob();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ApiJobsIdJob', function() {
    it('should create an instance of ApiJobsIdJob', function() {
      // uncomment below and update the code to test ApiJobsIdJob
      //var instane = new MorpheusApi.ApiJobsIdJob();
      //expect(instance).to.be.a(MorpheusApi.ApiJobsIdJob);
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new MorpheusApi.ApiJobsIdJob();
      //expect(instance).to.be();
    });

    it('should have the property labels (base name: "labels")', function() {
      // uncomment below and update the code to test the property labels
      //var instance = new MorpheusApi.ApiJobsIdJob();
      //expect(instance).to.be();
    });

    it('should have the property enabled (base name: "enabled")', function() {
      // uncomment below and update the code to test the property enabled
      //var instance = new MorpheusApi.ApiJobsIdJob();
      //expect(instance).to.be();
    });

    it('should have the property task (base name: "task")', function() {
      // uncomment below and update the code to test the property task
      //var instance = new MorpheusApi.ApiJobsIdJob();
      //expect(instance).to.be();
    });

    it('should have the property workflow (base name: "workflow")', function() {
      // uncomment below and update the code to test the property workflow
      //var instance = new MorpheusApi.ApiJobsIdJob();
      //expect(instance).to.be();
    });

    it('should have the property scanPath (base name: "scanPath")', function() {
      // uncomment below and update the code to test the property scanPath
      //var instance = new MorpheusApi.ApiJobsIdJob();
      //expect(instance).to.be();
    });

    it('should have the property securityProfile (base name: "securityProfile")', function() {
      // uncomment below and update the code to test the property securityProfile
      //var instance = new MorpheusApi.ApiJobsIdJob();
      //expect(instance).to.be();
    });

    it('should have the property targetType (base name: "targetType")', function() {
      // uncomment below and update the code to test the property targetType
      //var instance = new MorpheusApi.ApiJobsIdJob();
      //expect(instance).to.be();
    });

    it('should have the property targets (base name: "targets")', function() {
      // uncomment below and update the code to test the property targets
      //var instance = new MorpheusApi.ApiJobsIdJob();
      //expect(instance).to.be();
    });

    it('should have the property instanceLabel (base name: "instanceLabel")', function() {
      // uncomment below and update the code to test the property instanceLabel
      //var instance = new MorpheusApi.ApiJobsIdJob();
      //expect(instance).to.be();
    });

    it('should have the property serverLabel (base name: "serverLabel")', function() {
      // uncomment below and update the code to test the property serverLabel
      //var instance = new MorpheusApi.ApiJobsIdJob();
      //expect(instance).to.be();
    });

    it('should have the property scheduleMode (base name: "scheduleMode")', function() {
      // uncomment below and update the code to test the property scheduleMode
      //var instance = new MorpheusApi.ApiJobsIdJob();
      //expect(instance).to.be();
    });

    it('should have the property customOptions (base name: "customOptions")', function() {
      // uncomment below and update the code to test the property customOptions
      //var instance = new MorpheusApi.ApiJobsIdJob();
      //expect(instance).to.be();
    });

    it('should have the property customConfig (base name: "customConfig")', function() {
      // uncomment below and update the code to test the property customConfig
      //var instance = new MorpheusApi.ApiJobsIdJob();
      //expect(instance).to.be();
    });

    it('should have the property dateTime (base name: "dateTime")', function() {
      // uncomment below and update the code to test the property dateTime
      //var instance = new MorpheusApi.ApiJobsIdJob();
      //expect(instance).to.be();
    });

    it('should have the property run (base name: "run")', function() {
      // uncomment below and update the code to test the property run
      //var instance = new MorpheusApi.ApiJobsIdJob();
      //expect(instance).to.be();
    });

  });

}));
