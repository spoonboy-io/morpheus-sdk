/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MorpheusApi);
  }
}(this, function(expect, MorpheusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MorpheusApi.VirtualImageUpdate();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('VirtualImageUpdate', function() {
    it('should create an instance of VirtualImageUpdate', function() {
      // uncomment below and update the code to test VirtualImageUpdate
      //var instane = new MorpheusApi.VirtualImageUpdate();
      //expect(instance).to.be.a(MorpheusApi.VirtualImageUpdate);
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new MorpheusApi.VirtualImageUpdate();
      //expect(instance).to.be();
    });

    it('should have the property labels (base name: "labels")', function() {
      // uncomment below and update the code to test the property labels
      //var instance = new MorpheusApi.VirtualImageUpdate();
      //expect(instance).to.be();
    });

    it('should have the property imageType (base name: "imageType")', function() {
      // uncomment below and update the code to test the property imageType
      //var instance = new MorpheusApi.VirtualImageUpdate();
      //expect(instance).to.be();
    });

    it('should have the property storageProvider (base name: "storageProvider")', function() {
      // uncomment below and update the code to test the property storageProvider
      //var instance = new MorpheusApi.VirtualImageUpdate();
      //expect(instance).to.be();
    });

    it('should have the property isCloudInit (base name: "isCloudInit")', function() {
      // uncomment below and update the code to test the property isCloudInit
      //var instance = new MorpheusApi.VirtualImageUpdate();
      //expect(instance).to.be();
    });

    it('should have the property userData (base name: "userData")', function() {
      // uncomment below and update the code to test the property userData
      //var instance = new MorpheusApi.VirtualImageUpdate();
      //expect(instance).to.be();
    });

    it('should have the property installAgent (base name: "installAgent")', function() {
      // uncomment below and update the code to test the property installAgent
      //var instance = new MorpheusApi.VirtualImageUpdate();
      //expect(instance).to.be();
    });

    it('should have the property sshUsername (base name: "sshUsername")', function() {
      // uncomment below and update the code to test the property sshUsername
      //var instance = new MorpheusApi.VirtualImageUpdate();
      //expect(instance).to.be();
    });

    it('should have the property sshPassword (base name: "sshPassword")', function() {
      // uncomment below and update the code to test the property sshPassword
      //var instance = new MorpheusApi.VirtualImageUpdate();
      //expect(instance).to.be();
    });

    it('should have the property sshKey (base name: "sshKey")', function() {
      // uncomment below and update the code to test the property sshKey
      //var instance = new MorpheusApi.VirtualImageUpdate();
      //expect(instance).to.be();
    });

    it('should have the property osType (base name: "osType")', function() {
      // uncomment below and update the code to test the property osType
      //var instance = new MorpheusApi.VirtualImageUpdate();
      //expect(instance).to.be();
    });

    it('should have the property visibility (base name: "visibility")', function() {
      // uncomment below and update the code to test the property visibility
      //var instance = new MorpheusApi.VirtualImageUpdate();
      //expect(instance).to.be();
    });

    it('should have the property accounts (base name: "accounts")', function() {
      // uncomment below and update the code to test the property accounts
      //var instance = new MorpheusApi.VirtualImageUpdate();
      //expect(instance).to.be();
    });

    it('should have the property isAutoJoinDomain (base name: "isAutoJoinDomain")', function() {
      // uncomment below and update the code to test the property isAutoJoinDomain
      //var instance = new MorpheusApi.VirtualImageUpdate();
      //expect(instance).to.be();
    });

    it('should have the property virtioSupported (base name: "virtioSupported")', function() {
      // uncomment below and update the code to test the property virtioSupported
      //var instance = new MorpheusApi.VirtualImageUpdate();
      //expect(instance).to.be();
    });

    it('should have the property vmToolsInstalled (base name: "vmToolsInstalled")', function() {
      // uncomment below and update the code to test the property vmToolsInstalled
      //var instance = new MorpheusApi.VirtualImageUpdate();
      //expect(instance).to.be();
    });

    it('should have the property isForceCustomization (base name: "isForceCustomization")', function() {
      // uncomment below and update the code to test the property isForceCustomization
      //var instance = new MorpheusApi.VirtualImageUpdate();
      //expect(instance).to.be();
    });

    it('should have the property trialVersion (base name: "trialVersion")', function() {
      // uncomment below and update the code to test the property trialVersion
      //var instance = new MorpheusApi.VirtualImageUpdate();
      //expect(instance).to.be();
    });

    it('should have the property isSysprep (base name: "isSysprep")', function() {
      // uncomment below and update the code to test the property isSysprep
      //var instance = new MorpheusApi.VirtualImageUpdate();
      //expect(instance).to.be();
    });

    it('should have the property config (base name: "config")', function() {
      // uncomment below and update the code to test the property config
      //var instance = new MorpheusApi.VirtualImageUpdate();
      //expect(instance).to.be();
    });

    it('should have the property tags (base name: "tags")', function() {
      // uncomment below and update the code to test the property tags
      //var instance = new MorpheusApi.VirtualImageUpdate();
      //expect(instance).to.be();
    });

    it('should have the property addTags (base name: "addTags")', function() {
      // uncomment below and update the code to test the property addTags
      //var instance = new MorpheusApi.VirtualImageUpdate();
      //expect(instance).to.be();
    });

    it('should have the property removeTags (base name: "removeTags")', function() {
      // uncomment below and update the code to test the property removeTags
      //var instance = new MorpheusApi.VirtualImageUpdate();
      //expect(instance).to.be();
    });

  });

}));
