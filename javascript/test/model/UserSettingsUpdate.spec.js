/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MorpheusApi);
  }
}(this, function(expect, MorpheusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MorpheusApi.UserSettingsUpdate();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('UserSettingsUpdate', function() {
    it('should create an instance of UserSettingsUpdate', function() {
      // uncomment below and update the code to test UserSettingsUpdate
      //var instane = new MorpheusApi.UserSettingsUpdate();
      //expect(instance).to.be.a(MorpheusApi.UserSettingsUpdate);
    });

    it('should have the property username (base name: "username")', function() {
      // uncomment below and update the code to test the property username
      //var instance = new MorpheusApi.UserSettingsUpdate();
      //expect(instance).to.be();
    });

    it('should have the property email (base name: "email")', function() {
      // uncomment below and update the code to test the property email
      //var instance = new MorpheusApi.UserSettingsUpdate();
      //expect(instance).to.be();
    });

    it('should have the property firstName (base name: "firstName")', function() {
      // uncomment below and update the code to test the property firstName
      //var instance = new MorpheusApi.UserSettingsUpdate();
      //expect(instance).to.be();
    });

    it('should have the property lastName (base name: "lastName")', function() {
      // uncomment below and update the code to test the property lastName
      //var instance = new MorpheusApi.UserSettingsUpdate();
      //expect(instance).to.be();
    });

    it('should have the property password (base name: "password")', function() {
      // uncomment below and update the code to test the property password
      //var instance = new MorpheusApi.UserSettingsUpdate();
      //expect(instance).to.be();
    });

    it('should have the property linuxUsername (base name: "linuxUsername")', function() {
      // uncomment below and update the code to test the property linuxUsername
      //var instance = new MorpheusApi.UserSettingsUpdate();
      //expect(instance).to.be();
    });

    it('should have the property linuxPassword (base name: "linuxPassword")', function() {
      // uncomment below and update the code to test the property linuxPassword
      //var instance = new MorpheusApi.UserSettingsUpdate();
      //expect(instance).to.be();
    });

    it('should have the property linuxKeyPairId (base name: "linuxKeyPairId")', function() {
      // uncomment below and update the code to test the property linuxKeyPairId
      //var instance = new MorpheusApi.UserSettingsUpdate();
      //expect(instance).to.be();
    });

    it('should have the property windowsUsername (base name: "windowsUsername")', function() {
      // uncomment below and update the code to test the property windowsUsername
      //var instance = new MorpheusApi.UserSettingsUpdate();
      //expect(instance).to.be();
    });

    it('should have the property windowsPassword (base name: "windowsPassword")', function() {
      // uncomment below and update the code to test the property windowsPassword
      //var instance = new MorpheusApi.UserSettingsUpdate();
      //expect(instance).to.be();
    });

    it('should have the property receiveNotifications (base name: "receiveNotifications")', function() {
      // uncomment below and update the code to test the property receiveNotifications
      //var instance = new MorpheusApi.UserSettingsUpdate();
      //expect(instance).to.be();
    });

    it('should have the property defaultGroup (base name: "defaultGroup")', function() {
      // uncomment below and update the code to test the property defaultGroup
      //var instance = new MorpheusApi.UserSettingsUpdate();
      //expect(instance).to.be();
    });

    it('should have the property defaultCloud (base name: "defaultCloud")', function() {
      // uncomment below and update the code to test the property defaultCloud
      //var instance = new MorpheusApi.UserSettingsUpdate();
      //expect(instance).to.be();
    });

    it('should have the property defaultPersona (base name: "defaultPersona")', function() {
      // uncomment below and update the code to test the property defaultPersona
      //var instance = new MorpheusApi.UserSettingsUpdate();
      //expect(instance).to.be();
    });

  });

}));
