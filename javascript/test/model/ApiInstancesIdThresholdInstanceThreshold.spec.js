/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MorpheusApi);
  }
}(this, function(expect, MorpheusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MorpheusApi.ApiInstancesIdThresholdInstanceThreshold();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ApiInstancesIdThresholdInstanceThreshold', function() {
    it('should create an instance of ApiInstancesIdThresholdInstanceThreshold', function() {
      // uncomment below and update the code to test ApiInstancesIdThresholdInstanceThreshold
      //var instane = new MorpheusApi.ApiInstancesIdThresholdInstanceThreshold();
      //expect(instance).to.be.a(MorpheusApi.ApiInstancesIdThresholdInstanceThreshold);
    });

    it('should have the property autoUp (base name: "autoUp")', function() {
      // uncomment below and update the code to test the property autoUp
      //var instance = new MorpheusApi.ApiInstancesIdThresholdInstanceThreshold();
      //expect(instance).to.be();
    });

    it('should have the property autoDown (base name: "autoDown")', function() {
      // uncomment below and update the code to test the property autoDown
      //var instance = new MorpheusApi.ApiInstancesIdThresholdInstanceThreshold();
      //expect(instance).to.be();
    });

    it('should have the property minCount (base name: "minCount")', function() {
      // uncomment below and update the code to test the property minCount
      //var instance = new MorpheusApi.ApiInstancesIdThresholdInstanceThreshold();
      //expect(instance).to.be();
    });

    it('should have the property maxCount (base name: "maxCount")', function() {
      // uncomment below and update the code to test the property maxCount
      //var instance = new MorpheusApi.ApiInstancesIdThresholdInstanceThreshold();
      //expect(instance).to.be();
    });

    it('should have the property cpuEnabled (base name: "cpuEnabled")', function() {
      // uncomment below and update the code to test the property cpuEnabled
      //var instance = new MorpheusApi.ApiInstancesIdThresholdInstanceThreshold();
      //expect(instance).to.be();
    });

    it('should have the property minCpu (base name: "minCpu")', function() {
      // uncomment below and update the code to test the property minCpu
      //var instance = new MorpheusApi.ApiInstancesIdThresholdInstanceThreshold();
      //expect(instance).to.be();
    });

    it('should have the property maxCpu (base name: "maxCpu")', function() {
      // uncomment below and update the code to test the property maxCpu
      //var instance = new MorpheusApi.ApiInstancesIdThresholdInstanceThreshold();
      //expect(instance).to.be();
    });

    it('should have the property memoryEnabled (base name: "memoryEnabled")', function() {
      // uncomment below and update the code to test the property memoryEnabled
      //var instance = new MorpheusApi.ApiInstancesIdThresholdInstanceThreshold();
      //expect(instance).to.be();
    });

    it('should have the property minMemory (base name: "minMemory")', function() {
      // uncomment below and update the code to test the property minMemory
      //var instance = new MorpheusApi.ApiInstancesIdThresholdInstanceThreshold();
      //expect(instance).to.be();
    });

    it('should have the property maxMemory (base name: "maxMemory")', function() {
      // uncomment below and update the code to test the property maxMemory
      //var instance = new MorpheusApi.ApiInstancesIdThresholdInstanceThreshold();
      //expect(instance).to.be();
    });

    it('should have the property diskEnabled (base name: "diskEnabled")', function() {
      // uncomment below and update the code to test the property diskEnabled
      //var instance = new MorpheusApi.ApiInstancesIdThresholdInstanceThreshold();
      //expect(instance).to.be();
    });

    it('should have the property minDisk (base name: "minDisk")', function() {
      // uncomment below and update the code to test the property minDisk
      //var instance = new MorpheusApi.ApiInstancesIdThresholdInstanceThreshold();
      //expect(instance).to.be();
    });

    it('should have the property maxDisk (base name: "maxDisk")', function() {
      // uncomment below and update the code to test the property maxDisk
      //var instance = new MorpheusApi.ApiInstancesIdThresholdInstanceThreshold();
      //expect(instance).to.be();
    });

  });

}));
