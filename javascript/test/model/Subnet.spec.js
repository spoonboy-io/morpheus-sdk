/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MorpheusApi);
  }
}(this, function(expect, MorpheusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MorpheusApi.Subnet();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Subnet', function() {
    it('should create an instance of Subnet', function() {
      // uncomment below and update the code to test Subnet
      //var instane = new MorpheusApi.Subnet();
      //expect(instance).to.be.a(MorpheusApi.Subnet);
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new MorpheusApi.Subnet();
      //expect(instance).to.be();
    });

    it('should have the property code (base name: "code")', function() {
      // uncomment below and update the code to test the property code
      //var instance = new MorpheusApi.Subnet();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new MorpheusApi.Subnet();
      //expect(instance).to.be();
    });

    it('should have the property labels (base name: "labels")', function() {
      // uncomment below and update the code to test the property labels
      //var instance = new MorpheusApi.Subnet();
      //expect(instance).to.be();
    });

    it('should have the property active (base name: "active")', function() {
      // uncomment below and update the code to test the property active
      //var instance = new MorpheusApi.Subnet();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new MorpheusApi.Subnet();
      //expect(instance).to.be();
    });

    it('should have the property externalId (base name: "externalId")', function() {
      // uncomment below and update the code to test the property externalId
      //var instance = new MorpheusApi.Subnet();
      //expect(instance).to.be();
    });

    it('should have the property uniqueId (base name: "uniqueId")', function() {
      // uncomment below and update the code to test the property uniqueId
      //var instance = new MorpheusApi.Subnet();
      //expect(instance).to.be();
    });

    it('should have the property addressPrefix (base name: "addressPrefix")', function() {
      // uncomment below and update the code to test the property addressPrefix
      //var instance = new MorpheusApi.Subnet();
      //expect(instance).to.be();
    });

    it('should have the property cidr (base name: "cidr")', function() {
      // uncomment below and update the code to test the property cidr
      //var instance = new MorpheusApi.Subnet();
      //expect(instance).to.be();
    });

    it('should have the property gateway (base name: "gateway")', function() {
      // uncomment below and update the code to test the property gateway
      //var instance = new MorpheusApi.Subnet();
      //expect(instance).to.be();
    });

    it('should have the property netmask (base name: "netmask")', function() {
      // uncomment below and update the code to test the property netmask
      //var instance = new MorpheusApi.Subnet();
      //expect(instance).to.be();
    });

    it('should have the property subnetAddress (base name: "subnetAddress")', function() {
      // uncomment below and update the code to test the property subnetAddress
      //var instance = new MorpheusApi.Subnet();
      //expect(instance).to.be();
    });

    it('should have the property tftpServer (base name: "tftpServer")', function() {
      // uncomment below and update the code to test the property tftpServer
      //var instance = new MorpheusApi.Subnet();
      //expect(instance).to.be();
    });

    it('should have the property bootFile (base name: "bootFile")', function() {
      // uncomment below and update the code to test the property bootFile
      //var instance = new MorpheusApi.Subnet();
      //expect(instance).to.be();
    });

    it('should have the property pool (base name: "pool")', function() {
      // uncomment below and update the code to test the property pool
      //var instance = new MorpheusApi.Subnet();
      //expect(instance).to.be();
    });

    it('should have the property dhcpServer (base name: "dhcpServer")', function() {
      // uncomment below and update the code to test the property dhcpServer
      //var instance = new MorpheusApi.Subnet();
      //expect(instance).to.be();
    });

    it('should have the property hasFloatingIps (base name: "hasFloatingIps")', function() {
      // uncomment below and update the code to test the property hasFloatingIps
      //var instance = new MorpheusApi.Subnet();
      //expect(instance).to.be();
    });

    it('should have the property dhcpIp (base name: "dhcpIp")', function() {
      // uncomment below and update the code to test the property dhcpIp
      //var instance = new MorpheusApi.Subnet();
      //expect(instance).to.be();
    });

    it('should have the property dnsPrimary (base name: "dnsPrimary")', function() {
      // uncomment below and update the code to test the property dnsPrimary
      //var instance = new MorpheusApi.Subnet();
      //expect(instance).to.be();
    });

    it('should have the property dnsSecondary (base name: "dnsSecondary")', function() {
      // uncomment below and update the code to test the property dnsSecondary
      //var instance = new MorpheusApi.Subnet();
      //expect(instance).to.be();
    });

    it('should have the property dhcpStart (base name: "dhcpStart")', function() {
      // uncomment below and update the code to test the property dhcpStart
      //var instance = new MorpheusApi.Subnet();
      //expect(instance).to.be();
    });

    it('should have the property dhcpEnd (base name: "dhcpEnd")', function() {
      // uncomment below and update the code to test the property dhcpEnd
      //var instance = new MorpheusApi.Subnet();
      //expect(instance).to.be();
    });

    it('should have the property dhcpRange (base name: "dhcpRange")', function() {
      // uncomment below and update the code to test the property dhcpRange
      //var instance = new MorpheusApi.Subnet();
      //expect(instance).to.be();
    });

    it('should have the property networkProxy (base name: "networkProxy")', function() {
      // uncomment below and update the code to test the property networkProxy
      //var instance = new MorpheusApi.Subnet();
      //expect(instance).to.be();
    });

    it('should have the property networkDomain (base name: "networkDomain")', function() {
      // uncomment below and update the code to test the property networkDomain
      //var instance = new MorpheusApi.Subnet();
      //expect(instance).to.be();
    });

    it('should have the property searchDomains (base name: "searchDomains")', function() {
      // uncomment below and update the code to test the property searchDomains
      //var instance = new MorpheusApi.Subnet();
      //expect(instance).to.be();
    });

    it('should have the property defaultNetwork (base name: "defaultNetwork")', function() {
      // uncomment below and update the code to test the property defaultNetwork
      //var instance = new MorpheusApi.Subnet();
      //expect(instance).to.be();
    });

    it('should have the property assignPublicIp (base name: "assignPublicIp")', function() {
      // uncomment below and update the code to test the property assignPublicIp
      //var instance = new MorpheusApi.Subnet();
      //expect(instance).to.be();
    });

    it('should have the property visibility (base name: "visibility")', function() {
      // uncomment below and update the code to test the property visibility
      //var instance = new MorpheusApi.Subnet();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new MorpheusApi.Subnet();
      //expect(instance).to.be();
    });

    it('should have the property network (base name: "network")', function() {
      // uncomment below and update the code to test the property network
      //var instance = new MorpheusApi.Subnet();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new MorpheusApi.Subnet();
      //expect(instance).to.be();
    });

    it('should have the property account (base name: "account")', function() {
      // uncomment below and update the code to test the property account
      //var instance = new MorpheusApi.Subnet();
      //expect(instance).to.be();
    });

    it('should have the property securityGroups (base name: "securityGroups")', function() {
      // uncomment below and update the code to test the property securityGroups
      //var instance = new MorpheusApi.Subnet();
      //expect(instance).to.be();
    });

    it('should have the property tenants (base name: "tenants")', function() {
      // uncomment below and update the code to test the property tenants
      //var instance = new MorpheusApi.Subnet();
      //expect(instance).to.be();
    });

    it('should have the property resourcePermission (base name: "resourcePermission")', function() {
      // uncomment below and update the code to test the property resourcePermission
      //var instance = new MorpheusApi.Subnet();
      //expect(instance).to.be();
    });

  });

}));
