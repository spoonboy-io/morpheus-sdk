/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MorpheusApi);
  }
}(this, function(expect, MorpheusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MorpheusApi.UserSourceCreateUserSource();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('UserSourceCreateUserSource', function() {
    it('should create an instance of UserSourceCreateUserSource', function() {
      // uncomment below and update the code to test UserSourceCreateUserSource
      //var instane = new MorpheusApi.UserSourceCreateUserSource();
      //expect(instance).to.be.a(MorpheusApi.UserSourceCreateUserSource);
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new MorpheusApi.UserSourceCreateUserSource();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new MorpheusApi.UserSourceCreateUserSource();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new MorpheusApi.UserSourceCreateUserSource();
      //expect(instance).to.be();
    });

    it('should have the property defaultAccountRole (base name: "defaultAccountRole")', function() {
      // uncomment below and update the code to test the property defaultAccountRole
      //var instance = new MorpheusApi.UserSourceCreateUserSource();
      //expect(instance).to.be();
    });

    it('should have the property roleMappings (base name: "roleMappings")', function() {
      // uncomment below and update the code to test the property roleMappings
      //var instance = new MorpheusApi.UserSourceCreateUserSource();
      //expect(instance).to.be();
    });

    it('should have the property roleMappingNames (base name: "roleMappingNames")', function() {
      // uncomment below and update the code to test the property roleMappingNames
      //var instance = new MorpheusApi.UserSourceCreateUserSource();
      //expect(instance).to.be();
    });

    it('should have the property allowCustomMappings (base name: "allowCustomMappings")', function() {
      // uncomment below and update the code to test the property allowCustomMappings
      //var instance = new MorpheusApi.UserSourceCreateUserSource();
      //expect(instance).to.be();
    });

    it('should have the property manualRoleAssignment (base name: "manualRoleAssignment")', function() {
      // uncomment below and update the code to test the property manualRoleAssignment
      //var instance = new MorpheusApi.UserSourceCreateUserSource();
      //expect(instance).to.be();
    });

    it('should have the property config (base name: "config")', function() {
      // uncomment below and update the code to test the property config
      //var instance = new MorpheusApi.UserSourceCreateUserSource();
      //expect(instance).to.be();
    });

  });

}));
