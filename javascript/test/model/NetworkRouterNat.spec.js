/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MorpheusApi);
  }
}(this, function(expect, MorpheusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MorpheusApi.NetworkRouterNat();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('NetworkRouterNat', function() {
    it('should create an instance of NetworkRouterNat', function() {
      // uncomment below and update the code to test NetworkRouterNat
      //var instane = new MorpheusApi.NetworkRouterNat();
      //expect(instance).to.be.a(MorpheusApi.NetworkRouterNat);
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new MorpheusApi.NetworkRouterNat();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new MorpheusApi.NetworkRouterNat();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new MorpheusApi.NetworkRouterNat();
      //expect(instance).to.be();
    });

    it('should have the property enabled (base name: "enabled")', function() {
      // uncomment below and update the code to test the property enabled
      //var instance = new MorpheusApi.NetworkRouterNat();
      //expect(instance).to.be();
    });

    it('should have the property sourceNetwork (base name: "sourceNetwork")', function() {
      // uncomment below and update the code to test the property sourceNetwork
      //var instance = new MorpheusApi.NetworkRouterNat();
      //expect(instance).to.be();
    });

    it('should have the property destinationNetwork (base name: "destinationNetwork")', function() {
      // uncomment below and update the code to test the property destinationNetwork
      //var instance = new MorpheusApi.NetworkRouterNat();
      //expect(instance).to.be();
    });

    it('should have the property translatedNetwork (base name: "translatedNetwork")', function() {
      // uncomment below and update the code to test the property translatedNetwork
      //var instance = new MorpheusApi.NetworkRouterNat();
      //expect(instance).to.be();
    });

    it('should have the property sourcePorts (base name: "sourcePorts")', function() {
      // uncomment below and update the code to test the property sourcePorts
      //var instance = new MorpheusApi.NetworkRouterNat();
      //expect(instance).to.be();
    });

    it('should have the property destinationPorts (base name: "destinationPorts")', function() {
      // uncomment below and update the code to test the property destinationPorts
      //var instance = new MorpheusApi.NetworkRouterNat();
      //expect(instance).to.be();
    });

    it('should have the property translatedPorts (base name: "translatedPorts")', function() {
      // uncomment below and update the code to test the property translatedPorts
      //var instance = new MorpheusApi.NetworkRouterNat();
      //expect(instance).to.be();
    });

    it('should have the property priority (base name: "priority")', function() {
      // uncomment below and update the code to test the property priority
      //var instance = new MorpheusApi.NetworkRouterNat();
      //expect(instance).to.be();
    });

    it('should have the property protocol (base name: "protocol")', function() {
      // uncomment below and update the code to test the property protocol
      //var instance = new MorpheusApi.NetworkRouterNat();
      //expect(instance).to.be();
    });

    it('should have the property matchIpv6DestinationPrefix (base name: "matchIpv6DestinationPrefix")', function() {
      // uncomment below and update the code to test the property matchIpv6DestinationPrefix
      //var instance = new MorpheusApi.NetworkRouterNat();
      //expect(instance).to.be();
    });

    it('should have the property translatedIpv4SourcePrefix (base name: "translatedIpv4SourcePrefix")', function() {
      // uncomment below and update the code to test the property translatedIpv4SourcePrefix
      //var instance = new MorpheusApi.NetworkRouterNat();
      //expect(instance).to.be();
    });

    it('should have the property refType (base name: "refType")', function() {
      // uncomment below and update the code to test the property refType
      //var instance = new MorpheusApi.NetworkRouterNat();
      //expect(instance).to.be();
    });

    it('should have the property refId (base name: "refId")', function() {
      // uncomment below and update the code to test the property refId
      //var instance = new MorpheusApi.NetworkRouterNat();
      //expect(instance).to.be();
    });

    it('should have the property syncSource (base name: "syncSource")', function() {
      // uncomment below and update the code to test the property syncSource
      //var instance = new MorpheusApi.NetworkRouterNat();
      //expect(instance).to.be();
    });

    it('should have the property internalId (base name: "internalId")', function() {
      // uncomment below and update the code to test the property internalId
      //var instance = new MorpheusApi.NetworkRouterNat();
      //expect(instance).to.be();
    });

    it('should have the property externalId (base name: "externalId")', function() {
      // uncomment below and update the code to test the property externalId
      //var instance = new MorpheusApi.NetworkRouterNat();
      //expect(instance).to.be();
    });

    it('should have the property providerId (base name: "providerId")', function() {
      // uncomment below and update the code to test the property providerId
      //var instance = new MorpheusApi.NetworkRouterNat();
      //expect(instance).to.be();
    });

    it('should have the property dateCreated (base name: "dateCreated")', function() {
      // uncomment below and update the code to test the property dateCreated
      //var instance = new MorpheusApi.NetworkRouterNat();
      //expect(instance).to.be();
    });

    it('should have the property lastUpdated (base name: "lastUpdated")', function() {
      // uncomment below and update the code to test the property lastUpdated
      //var instance = new MorpheusApi.NetworkRouterNat();
      //expect(instance).to.be();
    });

  });

}));
