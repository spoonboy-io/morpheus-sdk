/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MorpheusApi);
  }
}(this, function(expect, MorpheusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MorpheusApi.UserSettingsAccessTokens();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('UserSettingsAccessTokens', function() {
    it('should create an instance of UserSettingsAccessTokens', function() {
      // uncomment below and update the code to test UserSettingsAccessTokens
      //var instane = new MorpheusApi.UserSettingsAccessTokens();
      //expect(instance).to.be.a(MorpheusApi.UserSettingsAccessTokens);
    });

    it('should have the property clientId (base name: "clientId")', function() {
      // uncomment below and update the code to test the property clientId
      //var instance = new MorpheusApi.UserSettingsAccessTokens();
      //expect(instance).to.be();
    });

    it('should have the property username (base name: "username")', function() {
      // uncomment below and update the code to test the property username
      //var instance = new MorpheusApi.UserSettingsAccessTokens();
      //expect(instance).to.be();
    });

    it('should have the property expiration (base name: "expiration")', function() {
      // uncomment below and update the code to test the property expiration
      //var instance = new MorpheusApi.UserSettingsAccessTokens();
      //expect(instance).to.be();
    });

    it('should have the property tokenType (base name: "tokenType")', function() {
      // uncomment below and update the code to test the property tokenType
      //var instance = new MorpheusApi.UserSettingsAccessTokens();
      //expect(instance).to.be();
    });

    it('should have the property maskedAccessToken (base name: "maskedAccessToken")', function() {
      // uncomment below and update the code to test the property maskedAccessToken
      //var instance = new MorpheusApi.UserSettingsAccessTokens();
      //expect(instance).to.be();
    });

    it('should have the property maskedRefreshToken (base name: "maskedRefreshToken")', function() {
      // uncomment below and update the code to test the property maskedRefreshToken
      //var instance = new MorpheusApi.UserSettingsAccessTokens();
      //expect(instance).to.be();
    });

  });

}));
