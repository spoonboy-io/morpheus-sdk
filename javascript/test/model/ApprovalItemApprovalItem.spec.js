/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MorpheusApi);
  }
}(this, function(expect, MorpheusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MorpheusApi.ApprovalItemApprovalItem();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ApprovalItemApprovalItem', function() {
    it('should create an instance of ApprovalItemApprovalItem', function() {
      // uncomment below and update the code to test ApprovalItemApprovalItem
      //var instane = new MorpheusApi.ApprovalItemApprovalItem();
      //expect(instance).to.be.a(MorpheusApi.ApprovalItemApprovalItem);
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new MorpheusApi.ApprovalItemApprovalItem();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new MorpheusApi.ApprovalItemApprovalItem();
      //expect(instance).to.be();
    });

    it('should have the property externalId (base name: "externalId")', function() {
      // uncomment below and update the code to test the property externalId
      //var instance = new MorpheusApi.ApprovalItemApprovalItem();
      //expect(instance).to.be();
    });

    it('should have the property externalName (base name: "externalName")', function() {
      // uncomment below and update the code to test the property externalName
      //var instance = new MorpheusApi.ApprovalItemApprovalItem();
      //expect(instance).to.be();
    });

    it('should have the property internalId (base name: "internalId")', function() {
      // uncomment below and update the code to test the property internalId
      //var instance = new MorpheusApi.ApprovalItemApprovalItem();
      //expect(instance).to.be();
    });

    it('should have the property approvedBy (base name: "approvedBy")', function() {
      // uncomment below and update the code to test the property approvedBy
      //var instance = new MorpheusApi.ApprovalItemApprovalItem();
      //expect(instance).to.be();
    });

    it('should have the property deniedBy (base name: "deniedBy")', function() {
      // uncomment below and update the code to test the property deniedBy
      //var instance = new MorpheusApi.ApprovalItemApprovalItem();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new MorpheusApi.ApprovalItemApprovalItem();
      //expect(instance).to.be();
    });

    it('should have the property errorMessage (base name: "errorMessage")', function() {
      // uncomment below and update the code to test the property errorMessage
      //var instance = new MorpheusApi.ApprovalItemApprovalItem();
      //expect(instance).to.be();
    });

    it('should have the property dateCreated (base name: "dateCreated")', function() {
      // uncomment below and update the code to test the property dateCreated
      //var instance = new MorpheusApi.ApprovalItemApprovalItem();
      //expect(instance).to.be();
    });

    it('should have the property lastUpdated (base name: "lastUpdated")', function() {
      // uncomment below and update the code to test the property lastUpdated
      //var instance = new MorpheusApi.ApprovalItemApprovalItem();
      //expect(instance).to.be();
    });

    it('should have the property dateApproved (base name: "dateApproved")', function() {
      // uncomment below and update the code to test the property dateApproved
      //var instance = new MorpheusApi.ApprovalItemApprovalItem();
      //expect(instance).to.be();
    });

    it('should have the property dateDenied (base name: "dateDenied")', function() {
      // uncomment below and update the code to test the property dateDenied
      //var instance = new MorpheusApi.ApprovalItemApprovalItem();
      //expect(instance).to.be();
    });

    it('should have the property approval (base name: "approval")', function() {
      // uncomment below and update the code to test the property approval
      //var instance = new MorpheusApi.ApprovalItemApprovalItem();
      //expect(instance).to.be();
    });

    it('should have the property reference (base name: "reference")', function() {
      // uncomment below and update the code to test the property reference
      //var instance = new MorpheusApi.ApprovalItemApprovalItem();
      //expect(instance).to.be();
    });

  });

}));
