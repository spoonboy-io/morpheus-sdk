/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.1.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MorpheusApi);
  }
}(this, function(expect, MorpheusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MorpheusApi.Alert();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Alert', function() {
    it('should create an instance of Alert', function() {
      // uncomment below and update the code to test Alert
      //var instance = new MorpheusApi.Alert();
      //expect(instance).to.be.a(MorpheusApi.Alert);
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new MorpheusApi.Alert();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new MorpheusApi.Alert();
      //expect(instance).to.be();
    });

    it('should have the property allApps (base name: "allApps")', function() {
      // uncomment below and update the code to test the property allApps
      //var instance = new MorpheusApi.Alert();
      //expect(instance).to.be();
    });

    it('should have the property allChecks (base name: "allChecks")', function() {
      // uncomment below and update the code to test the property allChecks
      //var instance = new MorpheusApi.Alert();
      //expect(instance).to.be();
    });

    it('should have the property allGroups (base name: "allGroups")', function() {
      // uncomment below and update the code to test the property allGroups
      //var instance = new MorpheusApi.Alert();
      //expect(instance).to.be();
    });

    it('should have the property active (base name: "active")', function() {
      // uncomment below and update the code to test the property active
      //var instance = new MorpheusApi.Alert();
      //expect(instance).to.be();
    });

    it('should have the property minSeverity (base name: "minSeverity")', function() {
      // uncomment below and update the code to test the property minSeverity
      //var instance = new MorpheusApi.Alert();
      //expect(instance).to.be();
    });

    it('should have the property minDuration (base name: "minDuration")', function() {
      // uncomment below and update the code to test the property minDuration
      //var instance = new MorpheusApi.Alert();
      //expect(instance).to.be();
    });

    it('should have the property dateCreated (base name: "dateCreated")', function() {
      // uncomment below and update the code to test the property dateCreated
      //var instance = new MorpheusApi.Alert();
      //expect(instance).to.be();
    });

    it('should have the property lastUpdated (base name: "lastUpdated")', function() {
      // uncomment below and update the code to test the property lastUpdated
      //var instance = new MorpheusApi.Alert();
      //expect(instance).to.be();
    });

    it('should have the property checks (base name: "checks")', function() {
      // uncomment below and update the code to test the property checks
      //var instance = new MorpheusApi.Alert();
      //expect(instance).to.be();
    });

    it('should have the property checkGroups (base name: "checkGroups")', function() {
      // uncomment below and update the code to test the property checkGroups
      //var instance = new MorpheusApi.Alert();
      //expect(instance).to.be();
    });

    it('should have the property apps (base name: "apps")', function() {
      // uncomment below and update the code to test the property apps
      //var instance = new MorpheusApi.Alert();
      //expect(instance).to.be();
    });

    it('should have the property contacts (base name: "contacts")', function() {
      // uncomment below and update the code to test the property contacts
      //var instance = new MorpheusApi.Alert();
      //expect(instance).to.be();
    });

  });

}));
