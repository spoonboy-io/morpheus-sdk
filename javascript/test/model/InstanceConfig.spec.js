/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MorpheusApi);
  }
}(this, function(expect, MorpheusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MorpheusApi.InstanceConfig();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('InstanceConfig', function() {
    it('should create an instance of InstanceConfig', function() {
      // uncomment below and update the code to test InstanceConfig
      //var instane = new MorpheusApi.InstanceConfig();
      //expect(instance).to.be.a(MorpheusApi.InstanceConfig);
    });

    it('should have the property createUser (base name: "createUser")', function() {
      // uncomment below and update the code to test the property createUser
      //var instance = new MorpheusApi.InstanceConfig();
      //expect(instance).to.be();
    });

    it('should have the property isEC2 (base name: "isEC2")', function() {
      // uncomment below and update the code to test the property isEC2
      //var instance = new MorpheusApi.InstanceConfig();
      //expect(instance).to.be();
    });

    it('should have the property isVpcSelectable (base name: "isVpcSelectable")', function() {
      // uncomment below and update the code to test the property isVpcSelectable
      //var instance = new MorpheusApi.InstanceConfig();
      //expect(instance).to.be();
    });

    it('should have the property noAgent (base name: "noAgent")', function() {
      // uncomment below and update the code to test the property noAgent
      //var instance = new MorpheusApi.InstanceConfig();
      //expect(instance).to.be();
    });

    it('should have the property securityGroups (base name: "securityGroups")', function() {
      // uncomment below and update the code to test the property securityGroups
      //var instance = new MorpheusApi.InstanceConfig();
      //expect(instance).to.be();
    });

    it('should have the property smbiosAssetTag (base name: "smbiosAssetTag")', function() {
      // uncomment below and update the code to test the property smbiosAssetTag
      //var instance = new MorpheusApi.InstanceConfig();
      //expect(instance).to.be();
    });

    it('should have the property nestedVirtualization (base name: "nestedVirtualization")', function() {
      // uncomment below and update the code to test the property nestedVirtualization
      //var instance = new MorpheusApi.InstanceConfig();
      //expect(instance).to.be();
    });

    it('should have the property vmwareFolderId (base name: "vmwareFolderId")', function() {
      // uncomment below and update the code to test the property vmwareFolderId
      //var instance = new MorpheusApi.InstanceConfig();
      //expect(instance).to.be();
    });

    it('should have the property customOptions (base name: "customOptions")', function() {
      // uncomment below and update the code to test the property customOptions
      //var instance = new MorpheusApi.InstanceConfig();
      //expect(instance).to.be();
    });

    it('should have the property resourcePoolId (base name: "resourcePoolId")', function() {
      // uncomment below and update the code to test the property resourcePoolId
      //var instance = new MorpheusApi.InstanceConfig();
      //expect(instance).to.be();
    });

    it('should have the property poolProviderType (base name: "poolProviderType")', function() {
      // uncomment below and update the code to test the property poolProviderType
      //var instance = new MorpheusApi.InstanceConfig();
      //expect(instance).to.be();
    });

    it('should have the property userGroup (base name: "userGroup")', function() {
      // uncomment below and update the code to test the property userGroup
      //var instance = new MorpheusApi.InstanceConfig();
      //expect(instance).to.be();
    });

    it('should have the property expireDays (base name: "expireDays")', function() {
      // uncomment below and update the code to test the property expireDays
      //var instance = new MorpheusApi.InstanceConfig();
      //expect(instance).to.be();
    });

    it('should have the property shutdownDays (base name: "shutdownDays")', function() {
      // uncomment below and update the code to test the property shutdownDays
      //var instance = new MorpheusApi.InstanceConfig();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new MorpheusApi.InstanceConfig();
      //expect(instance).to.be();
    });

    it('should have the property hostName (base name: "hostName")', function() {
      // uncomment below and update the code to test the property hostName
      //var instance = new MorpheusApi.InstanceConfig();
      //expect(instance).to.be();
    });

    it('should have the property instanceType (base name: "instanceType")', function() {
      // uncomment below and update the code to test the property instanceType
      //var instance = new MorpheusApi.InstanceConfig();
      //expect(instance).to.be();
    });

    it('should have the property site (base name: "site")', function() {
      // uncomment below and update the code to test the property site
      //var instance = new MorpheusApi.InstanceConfig();
      //expect(instance).to.be();
    });

    it('should have the property environmentPrefix (base name: "environmentPrefix")', function() {
      // uncomment below and update the code to test the property environmentPrefix
      //var instance = new MorpheusApi.InstanceConfig();
      //expect(instance).to.be();
    });

    it('should have the property layout (base name: "layout")', function() {
      // uncomment below and update the code to test the property layout
      //var instance = new MorpheusApi.InstanceConfig();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new MorpheusApi.InstanceConfig();
      //expect(instance).to.be();
    });

    it('should have the property instanceContext (base name: "instanceContext")', function() {
      // uncomment below and update the code to test the property instanceContext
      //var instance = new MorpheusApi.InstanceConfig();
      //expect(instance).to.be();
    });

    it('should have the property memoryDisplay (base name: "memoryDisplay")', function() {
      // uncomment below and update the code to test the property memoryDisplay
      //var instance = new MorpheusApi.InstanceConfig();
      //expect(instance).to.be();
    });

    it('should have the property expose (base name: "expose")', function() {
      // uncomment below and update the code to test the property expose
      //var instance = new MorpheusApi.InstanceConfig();
      //expect(instance).to.be();
    });

    it('should have the property createBackup (base name: "createBackup")', function() {
      // uncomment below and update the code to test the property createBackup
      //var instance = new MorpheusApi.InstanceConfig();
      //expect(instance).to.be();
    });

    it('should have the property backup (base name: "backup")', function() {
      // uncomment below and update the code to test the property backup
      //var instance = new MorpheusApi.InstanceConfig();
      //expect(instance).to.be();
    });

    it('should have the property replicationGroup (base name: "replicationGroup")', function() {
      // uncomment below and update the code to test the property replicationGroup
      //var instance = new MorpheusApi.InstanceConfig();
      //expect(instance).to.be();
    });

    it('should have the property layoutSize (base name: "layoutSize")', function() {
      // uncomment below and update the code to test the property layoutSize
      //var instance = new MorpheusApi.InstanceConfig();
      //expect(instance).to.be();
    });

    it('should have the property lbInstances (base name: "lbInstances")', function() {
      // uncomment below and update the code to test the property lbInstances
      //var instance = new MorpheusApi.InstanceConfig();
      //expect(instance).to.be();
    });

  });

}));
