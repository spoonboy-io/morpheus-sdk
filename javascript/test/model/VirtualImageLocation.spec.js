/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MorpheusApi);
  }
}(this, function(expect, MorpheusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MorpheusApi.VirtualImageLocation();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('VirtualImageLocation', function() {
    it('should create an instance of VirtualImageLocation', function() {
      // uncomment below and update the code to test VirtualImageLocation
      //var instane = new MorpheusApi.VirtualImageLocation();
      //expect(instance).to.be.a(MorpheusApi.VirtualImageLocation);
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new MorpheusApi.VirtualImageLocation();
      //expect(instance).to.be();
    });

    it('should have the property cloud (base name: "cloud")', function() {
      // uncomment below and update the code to test the property cloud
      //var instance = new MorpheusApi.VirtualImageLocation();
      //expect(instance).to.be();
    });

    it('should have the property code (base name: "code")', function() {
      // uncomment below and update the code to test the property code
      //var instance = new MorpheusApi.VirtualImageLocation();
      //expect(instance).to.be();
    });

    it('should have the property internalId (base name: "internalId")', function() {
      // uncomment below and update the code to test the property internalId
      //var instance = new MorpheusApi.VirtualImageLocation();
      //expect(instance).to.be();
    });

    it('should have the property externalId (base name: "externalId")', function() {
      // uncomment below and update the code to test the property externalId
      //var instance = new MorpheusApi.VirtualImageLocation();
      //expect(instance).to.be();
    });

    it('should have the property externalDiskId (base name: "externalDiskId")', function() {
      // uncomment below and update the code to test the property externalDiskId
      //var instance = new MorpheusApi.VirtualImageLocation();
      //expect(instance).to.be();
    });

    it('should have the property remotePath (base name: "remotePath")', function() {
      // uncomment below and update the code to test the property remotePath
      //var instance = new MorpheusApi.VirtualImageLocation();
      //expect(instance).to.be();
    });

    it('should have the property imagePath (base name: "imagePath")', function() {
      // uncomment below and update the code to test the property imagePath
      //var instance = new MorpheusApi.VirtualImageLocation();
      //expect(instance).to.be();
    });

    it('should have the property imageName (base name: "imageName")', function() {
      // uncomment below and update the code to test the property imageName
      //var instance = new MorpheusApi.VirtualImageLocation();
      //expect(instance).to.be();
    });

    it('should have the property imageRegion (base name: "imageRegion")', function() {
      // uncomment below and update the code to test the property imageRegion
      //var instance = new MorpheusApi.VirtualImageLocation();
      //expect(instance).to.be();
    });

    it('should have the property imageFolder (base name: "imageFolder")', function() {
      // uncomment below and update the code to test the property imageFolder
      //var instance = new MorpheusApi.VirtualImageLocation();
      //expect(instance).to.be();
    });

    it('should have the property refType (base name: "refType")', function() {
      // uncomment below and update the code to test the property refType
      //var instance = new MorpheusApi.VirtualImageLocation();
      //expect(instance).to.be();
    });

    it('should have the property refId (base name: "refId")', function() {
      // uncomment below and update the code to test the property refId
      //var instance = new MorpheusApi.VirtualImageLocation();
      //expect(instance).to.be();
    });

    it('should have the property nodeRefType (base name: "nodeRefType")', function() {
      // uncomment below and update the code to test the property nodeRefType
      //var instance = new MorpheusApi.VirtualImageLocation();
      //expect(instance).to.be();
    });

    it('should have the property nodeRefId (base name: "nodeRefId")', function() {
      // uncomment below and update the code to test the property nodeRefId
      //var instance = new MorpheusApi.VirtualImageLocation();
      //expect(instance).to.be();
    });

    it('should have the property subRefType (base name: "subRefType")', function() {
      // uncomment below and update the code to test the property subRefType
      //var instance = new MorpheusApi.VirtualImageLocation();
      //expect(instance).to.be();
    });

    it('should have the property subRefId (base name: "subRefId")', function() {
      // uncomment below and update the code to test the property subRefId
      //var instance = new MorpheusApi.VirtualImageLocation();
      //expect(instance).to.be();
    });

    it('should have the property isPublic (base name: "isPublic")', function() {
      // uncomment below and update the code to test the property isPublic
      //var instance = new MorpheusApi.VirtualImageLocation();
      //expect(instance).to.be();
    });

    it('should have the property systemImage (base name: "systemImage")', function() {
      // uncomment below and update the code to test the property systemImage
      //var instance = new MorpheusApi.VirtualImageLocation();
      //expect(instance).to.be();
    });

    it('should have the property diskIndex (base name: "diskIndex")', function() {
      // uncomment below and update the code to test the property diskIndex
      //var instance = new MorpheusApi.VirtualImageLocation();
      //expect(instance).to.be();
    });

    it('should have the property pricePlan (base name: "pricePlan")', function() {
      // uncomment below and update the code to test the property pricePlan
      //var instance = new MorpheusApi.VirtualImageLocation();
      //expect(instance).to.be();
    });

    it('should have the property volumes (base name: "volumes")', function() {
      // uncomment below and update the code to test the property volumes
      //var instance = new MorpheusApi.VirtualImageLocation();
      //expect(instance).to.be();
    });

    it('should have the property storageControllers (base name: "storageControllers")', function() {
      // uncomment below and update the code to test the property storageControllers
      //var instance = new MorpheusApi.VirtualImageLocation();
      //expect(instance).to.be();
    });

    it('should have the property networkInterfaces (base name: "networkInterfaces")', function() {
      // uncomment below and update the code to test the property networkInterfaces
      //var instance = new MorpheusApi.VirtualImageLocation();
      //expect(instance).to.be();
    });

    it('should have the property virtualImage (base name: "virtualImage")', function() {
      // uncomment below and update the code to test the property virtualImage
      //var instance = new MorpheusApi.VirtualImageLocation();
      //expect(instance).to.be();
    });

  });

}));
