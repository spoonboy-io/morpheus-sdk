/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MorpheusApi);
  }
}(this, function(expect, MorpheusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MorpheusApi.Zone();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Zone', function() {
    it('should create an instance of Zone', function() {
      // uncomment below and update the code to test Zone
      //var instane = new MorpheusApi.Zone();
      //expect(instance).to.be.a(MorpheusApi.Zone);
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new MorpheusApi.Zone();
      //expect(instance).to.be();
    });

    it('should have the property uuid (base name: "uuid")', function() {
      // uncomment below and update the code to test the property uuid
      //var instance = new MorpheusApi.Zone();
      //expect(instance).to.be();
    });

    it('should have the property externalId (base name: "externalId")', function() {
      // uncomment below and update the code to test the property externalId
      //var instance = new MorpheusApi.Zone();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new MorpheusApi.Zone();
      //expect(instance).to.be();
    });

    it('should have the property code (base name: "code")', function() {
      // uncomment below and update the code to test the property code
      //var instance = new MorpheusApi.Zone();
      //expect(instance).to.be();
    });

    it('should have the property location (base name: "location")', function() {
      // uncomment below and update the code to test the property location
      //var instance = new MorpheusApi.Zone();
      //expect(instance).to.be();
    });

    it('should have the property owner (base name: "owner")', function() {
      // uncomment below and update the code to test the property owner
      //var instance = new MorpheusApi.Zone();
      //expect(instance).to.be();
    });

    it('should have the property accountId (base name: "accountId")', function() {
      // uncomment below and update the code to test the property accountId
      //var instance = new MorpheusApi.Zone();
      //expect(instance).to.be();
    });

    it('should have the property account (base name: "account")', function() {
      // uncomment below and update the code to test the property account
      //var instance = new MorpheusApi.Zone();
      //expect(instance).to.be();
    });

    it('should have the property visibility (base name: "visibility")', function() {
      // uncomment below and update the code to test the property visibility
      //var instance = new MorpheusApi.Zone();
      //expect(instance).to.be();
    });

    it('should have the property enabled (base name: "enabled")', function() {
      // uncomment below and update the code to test the property enabled
      //var instance = new MorpheusApi.Zone();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new MorpheusApi.Zone();
      //expect(instance).to.be();
    });

    it('should have the property statusMessage (base name: "statusMessage")', function() {
      // uncomment below and update the code to test the property statusMessage
      //var instance = new MorpheusApi.Zone();
      //expect(instance).to.be();
    });

    it('should have the property statusDate (base name: "statusDate")', function() {
      // uncomment below and update the code to test the property statusDate
      //var instance = new MorpheusApi.Zone();
      //expect(instance).to.be();
    });

    it('should have the property costStatus (base name: "costStatus")', function() {
      // uncomment below and update the code to test the property costStatus
      //var instance = new MorpheusApi.Zone();
      //expect(instance).to.be();
    });

    it('should have the property costStatusMessage (base name: "costStatusMessage")', function() {
      // uncomment below and update the code to test the property costStatusMessage
      //var instance = new MorpheusApi.Zone();
      //expect(instance).to.be();
    });

    it('should have the property costStatusDate (base name: "costStatusDate")', function() {
      // uncomment below and update the code to test the property costStatusDate
      //var instance = new MorpheusApi.Zone();
      //expect(instance).to.be();
    });

    it('should have the property costLastSyncDuration (base name: "costLastSyncDuration")', function() {
      // uncomment below and update the code to test the property costLastSyncDuration
      //var instance = new MorpheusApi.Zone();
      //expect(instance).to.be();
    });

    it('should have the property costLastSync (base name: "costLastSync")', function() {
      // uncomment below and update the code to test the property costLastSync
      //var instance = new MorpheusApi.Zone();
      //expect(instance).to.be();
    });

    it('should have the property zoneType (base name: "zoneType")', function() {
      // uncomment below and update the code to test the property zoneType
      //var instance = new MorpheusApi.Zone();
      //expect(instance).to.be();
    });

    it('should have the property zoneTypeId (base name: "zoneTypeId")', function() {
      // uncomment below and update the code to test the property zoneTypeId
      //var instance = new MorpheusApi.Zone();
      //expect(instance).to.be();
    });

    it('should have the property guidanceMode (base name: "guidanceMode")', function() {
      // uncomment below and update the code to test the property guidanceMode
      //var instance = new MorpheusApi.Zone();
      //expect(instance).to.be();
    });

    it('should have the property storageMode (base name: "storageMode")', function() {
      // uncomment below and update the code to test the property storageMode
      //var instance = new MorpheusApi.Zone();
      //expect(instance).to.be();
    });

    it('should have the property agentMode (base name: "agentMode")', function() {
      // uncomment below and update the code to test the property agentMode
      //var instance = new MorpheusApi.Zone();
      //expect(instance).to.be();
    });

    it('should have the property userDataLinux (base name: "userDataLinux")', function() {
      // uncomment below and update the code to test the property userDataLinux
      //var instance = new MorpheusApi.Zone();
      //expect(instance).to.be();
    });

    it('should have the property userDataWindows (base name: "userDataWindows")', function() {
      // uncomment below and update the code to test the property userDataWindows
      //var instance = new MorpheusApi.Zone();
      //expect(instance).to.be();
    });

    it('should have the property consoleKeymap (base name: "consoleKeymap")', function() {
      // uncomment below and update the code to test the property consoleKeymap
      //var instance = new MorpheusApi.Zone();
      //expect(instance).to.be();
    });

    it('should have the property containerMode (base name: "containerMode")', function() {
      // uncomment below and update the code to test the property containerMode
      //var instance = new MorpheusApi.Zone();
      //expect(instance).to.be();
    });

    it('should have the property costingMode (base name: "costingMode")', function() {
      // uncomment below and update the code to test the property costingMode
      //var instance = new MorpheusApi.Zone();
      //expect(instance).to.be();
    });

    it('should have the property serviceVersion (base name: "serviceVersion")', function() {
      // uncomment below and update the code to test the property serviceVersion
      //var instance = new MorpheusApi.Zone();
      //expect(instance).to.be();
    });

    it('should have the property securityMode (base name: "securityMode")', function() {
      // uncomment below and update the code to test the property securityMode
      //var instance = new MorpheusApi.Zone();
      //expect(instance).to.be();
    });

    it('should have the property inventoryLevel (base name: "inventoryLevel")', function() {
      // uncomment below and update the code to test the property inventoryLevel
      //var instance = new MorpheusApi.Zone();
      //expect(instance).to.be();
    });

    it('should have the property timezone (base name: "timezone")', function() {
      // uncomment below and update the code to test the property timezone
      //var instance = new MorpheusApi.Zone();
      //expect(instance).to.be();
    });

    it('should have the property apiProxy (base name: "apiProxy")', function() {
      // uncomment below and update the code to test the property apiProxy
      //var instance = new MorpheusApi.Zone();
      //expect(instance).to.be();
    });

    it('should have the property provisioningProxy (base name: "provisioningProxy")', function() {
      // uncomment below and update the code to test the property provisioningProxy
      //var instance = new MorpheusApi.Zone();
      //expect(instance).to.be();
    });

    it('should have the property networkDomain (base name: "networkDomain")', function() {
      // uncomment below and update the code to test the property networkDomain
      //var instance = new MorpheusApi.Zone();
      //expect(instance).to.be();
    });

    it('should have the property domainName (base name: "domainName")', function() {
      // uncomment below and update the code to test the property domainName
      //var instance = new MorpheusApi.Zone();
      //expect(instance).to.be();
    });

    it('should have the property regionCode (base name: "regionCode")', function() {
      // uncomment below and update the code to test the property regionCode
      //var instance = new MorpheusApi.Zone();
      //expect(instance).to.be();
    });

    it('should have the property autoRecoverPowerState (base name: "autoRecoverPowerState")', function() {
      // uncomment below and update the code to test the property autoRecoverPowerState
      //var instance = new MorpheusApi.Zone();
      //expect(instance).to.be();
    });

    it('should have the property scalePriority (base name: "scalePriority")', function() {
      // uncomment below and update the code to test the property scalePriority
      //var instance = new MorpheusApi.Zone();
      //expect(instance).to.be();
    });

    it('should have the property config (base name: "config")', function() {
      // uncomment below and update the code to test the property config
      //var instance = new MorpheusApi.Zone();
      //expect(instance).to.be();
    });

    it('should have the property credential (base name: "credential")', function() {
      // uncomment below and update the code to test the property credential
      //var instance = new MorpheusApi.Zone();
      //expect(instance).to.be();
    });

    it('should have the property imagePath (base name: "imagePath")', function() {
      // uncomment below and update the code to test the property imagePath
      //var instance = new MorpheusApi.Zone();
      //expect(instance).to.be();
    });

    it('should have the property darkImagePath (base name: "darkImagePath")', function() {
      // uncomment below and update the code to test the property darkImagePath
      //var instance = new MorpheusApi.Zone();
      //expect(instance).to.be();
    });

    it('should have the property dateCreated (base name: "dateCreated")', function() {
      // uncomment below and update the code to test the property dateCreated
      //var instance = new MorpheusApi.Zone();
      //expect(instance).to.be();
    });

    it('should have the property lastUpdated (base name: "lastUpdated")', function() {
      // uncomment below and update the code to test the property lastUpdated
      //var instance = new MorpheusApi.Zone();
      //expect(instance).to.be();
    });

    it('should have the property lastSync (base name: "lastSync")', function() {
      // uncomment below and update the code to test the property lastSync
      //var instance = new MorpheusApi.Zone();
      //expect(instance).to.be();
    });

    it('should have the property lastSyncDuration (base name: "lastSyncDuration")', function() {
      // uncomment below and update the code to test the property lastSyncDuration
      //var instance = new MorpheusApi.Zone();
      //expect(instance).to.be();
    });

    it('should have the property nextRunDate (base name: "nextRunDate")', function() {
      // uncomment below and update the code to test the property nextRunDate
      //var instance = new MorpheusApi.Zone();
      //expect(instance).to.be();
    });

    it('should have the property groups (base name: "groups")', function() {
      // uncomment below and update the code to test the property groups
      //var instance = new MorpheusApi.Zone();
      //expect(instance).to.be();
    });

    it('should have the property securityServer (base name: "securityServer")', function() {
      // uncomment below and update the code to test the property securityServer
      //var instance = new MorpheusApi.Zone();
      //expect(instance).to.be();
    });

    it('should have the property networkServer (base name: "networkServer")', function() {
      // uncomment below and update the code to test the property networkServer
      //var instance = new MorpheusApi.Zone();
      //expect(instance).to.be();
    });

    it('should have the property stats (base name: "stats")', function() {
      // uncomment below and update the code to test the property stats
      //var instance = new MorpheusApi.Zone();
      //expect(instance).to.be();
    });

    it('should have the property serverCount (base name: "serverCount")', function() {
      // uncomment below and update the code to test the property serverCount
      //var instance = new MorpheusApi.Zone();
      //expect(instance).to.be();
    });

  });

}));
