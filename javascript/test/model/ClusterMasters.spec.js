/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MorpheusApi);
  }
}(this, function(expect, MorpheusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MorpheusApi.ClusterMasters();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ClusterMasters', function() {
    it('should create an instance of ClusterMasters', function() {
      // uncomment below and update the code to test ClusterMasters
      //var instane = new MorpheusApi.ClusterMasters();
      //expect(instance).to.be.a(MorpheusApi.ClusterMasters);
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new MorpheusApi.ClusterMasters();
      //expect(instance).to.be();
    });

    it('should have the property uuid (base name: "uuid")', function() {
      // uncomment below and update the code to test the property uuid
      //var instance = new MorpheusApi.ClusterMasters();
      //expect(instance).to.be();
    });

    it('should have the property externalId (base name: "externalId")', function() {
      // uncomment below and update the code to test the property externalId
      //var instance = new MorpheusApi.ClusterMasters();
      //expect(instance).to.be();
    });

    it('should have the property internalId (base name: "internalId")', function() {
      // uncomment below and update the code to test the property internalId
      //var instance = new MorpheusApi.ClusterMasters();
      //expect(instance).to.be();
    });

    it('should have the property externalUniqueId (base name: "externalUniqueId")', function() {
      // uncomment below and update the code to test the property externalUniqueId
      //var instance = new MorpheusApi.ClusterMasters();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new MorpheusApi.ClusterMasters();
      //expect(instance).to.be();
    });

    it('should have the property externalName (base name: "externalName")', function() {
      // uncomment below and update the code to test the property externalName
      //var instance = new MorpheusApi.ClusterMasters();
      //expect(instance).to.be();
    });

    it('should have the property hostname (base name: "hostname")', function() {
      // uncomment below and update the code to test the property hostname
      //var instance = new MorpheusApi.ClusterMasters();
      //expect(instance).to.be();
    });

    it('should have the property accountId (base name: "accountId")', function() {
      // uncomment below and update the code to test the property accountId
      //var instance = new MorpheusApi.ClusterMasters();
      //expect(instance).to.be();
    });

    it('should have the property account (base name: "account")', function() {
      // uncomment below and update the code to test the property account
      //var instance = new MorpheusApi.ClusterMasters();
      //expect(instance).to.be();
    });

    it('should have the property owner (base name: "owner")', function() {
      // uncomment below and update the code to test the property owner
      //var instance = new MorpheusApi.ClusterMasters();
      //expect(instance).to.be();
    });

    it('should have the property zone (base name: "zone")', function() {
      // uncomment below and update the code to test the property zone
      //var instance = new MorpheusApi.ClusterMasters();
      //expect(instance).to.be();
    });

    it('should have the property plan (base name: "plan")', function() {
      // uncomment below and update the code to test the property plan
      //var instance = new MorpheusApi.ClusterMasters();
      //expect(instance).to.be();
    });

    it('should have the property computeServerType (base name: "computeServerType")', function() {
      // uncomment below and update the code to test the property computeServerType
      //var instance = new MorpheusApi.ClusterMasters();
      //expect(instance).to.be();
    });

    it('should have the property visibility (base name: "visibility")', function() {
      // uncomment below and update the code to test the property visibility
      //var instance = new MorpheusApi.ClusterMasters();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new MorpheusApi.ClusterMasters();
      //expect(instance).to.be();
    });

    it('should have the property zoneId (base name: "zoneId")', function() {
      // uncomment below and update the code to test the property zoneId
      //var instance = new MorpheusApi.ClusterMasters();
      //expect(instance).to.be();
    });

    it('should have the property siteId (base name: "siteId")', function() {
      // uncomment below and update the code to test the property siteId
      //var instance = new MorpheusApi.ClusterMasters();
      //expect(instance).to.be();
    });

    it('should have the property resourcePoolId (base name: "resourcePoolId")', function() {
      // uncomment below and update the code to test the property resourcePoolId
      //var instance = new MorpheusApi.ClusterMasters();
      //expect(instance).to.be();
    });

    it('should have the property folderId (base name: "folderId")', function() {
      // uncomment below and update the code to test the property folderId
      //var instance = new MorpheusApi.ClusterMasters();
      //expect(instance).to.be();
    });

    it('should have the property sshHost (base name: "sshHost")', function() {
      // uncomment below and update the code to test the property sshHost
      //var instance = new MorpheusApi.ClusterMasters();
      //expect(instance).to.be();
    });

    it('should have the property sshPort (base name: "sshPort")', function() {
      // uncomment below and update the code to test the property sshPort
      //var instance = new MorpheusApi.ClusterMasters();
      //expect(instance).to.be();
    });

    it('should have the property externalIp (base name: "externalIp")', function() {
      // uncomment below and update the code to test the property externalIp
      //var instance = new MorpheusApi.ClusterMasters();
      //expect(instance).to.be();
    });

    it('should have the property internalIp (base name: "internalIp")', function() {
      // uncomment below and update the code to test the property internalIp
      //var instance = new MorpheusApi.ClusterMasters();
      //expect(instance).to.be();
    });

    it('should have the property volumeId (base name: "volumeId")', function() {
      // uncomment below and update the code to test the property volumeId
      //var instance = new MorpheusApi.ClusterMasters();
      //expect(instance).to.be();
    });

    it('should have the property platform (base name: "platform")', function() {
      // uncomment below and update the code to test the property platform
      //var instance = new MorpheusApi.ClusterMasters();
      //expect(instance).to.be();
    });

    it('should have the property platformVersion (base name: "platformVersion")', function() {
      // uncomment below and update the code to test the property platformVersion
      //var instance = new MorpheusApi.ClusterMasters();
      //expect(instance).to.be();
    });

    it('should have the property sshUsername (base name: "sshUsername")', function() {
      // uncomment below and update the code to test the property sshUsername
      //var instance = new MorpheusApi.ClusterMasters();
      //expect(instance).to.be();
    });

    it('should have the property sshPassword (base name: "sshPassword")', function() {
      // uncomment below and update the code to test the property sshPassword
      //var instance = new MorpheusApi.ClusterMasters();
      //expect(instance).to.be();
    });

    it('should have the property sshPasswordHash (base name: "sshPasswordHash")', function() {
      // uncomment below and update the code to test the property sshPasswordHash
      //var instance = new MorpheusApi.ClusterMasters();
      //expect(instance).to.be();
    });

    it('should have the property osDevice (base name: "osDevice")', function() {
      // uncomment below and update the code to test the property osDevice
      //var instance = new MorpheusApi.ClusterMasters();
      //expect(instance).to.be();
    });

    it('should have the property osType (base name: "osType")', function() {
      // uncomment below and update the code to test the property osType
      //var instance = new MorpheusApi.ClusterMasters();
      //expect(instance).to.be();
    });

    it('should have the property dataDevice (base name: "dataDevice")', function() {
      // uncomment below and update the code to test the property dataDevice
      //var instance = new MorpheusApi.ClusterMasters();
      //expect(instance).to.be();
    });

    it('should have the property lvmEnabled (base name: "lvmEnabled")', function() {
      // uncomment below and update the code to test the property lvmEnabled
      //var instance = new MorpheusApi.ClusterMasters();
      //expect(instance).to.be();
    });

    it('should have the property apiKey (base name: "apiKey")', function() {
      // uncomment below and update the code to test the property apiKey
      //var instance = new MorpheusApi.ClusterMasters();
      //expect(instance).to.be();
    });

    it('should have the property softwareRaid (base name: "softwareRaid")', function() {
      // uncomment below and update the code to test the property softwareRaid
      //var instance = new MorpheusApi.ClusterMasters();
      //expect(instance).to.be();
    });

    it('should have the property dateCreated (base name: "dateCreated")', function() {
      // uncomment below and update the code to test the property dateCreated
      //var instance = new MorpheusApi.ClusterMasters();
      //expect(instance).to.be();
    });

    it('should have the property lastUpdated (base name: "lastUpdated")', function() {
      // uncomment below and update the code to test the property lastUpdated
      //var instance = new MorpheusApi.ClusterMasters();
      //expect(instance).to.be();
    });

    it('should have the property stats (base name: "stats")', function() {
      // uncomment below and update the code to test the property stats
      //var instance = new MorpheusApi.ClusterMasters();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new MorpheusApi.ClusterMasters();
      //expect(instance).to.be();
    });

    it('should have the property statusMessage (base name: "statusMessage")', function() {
      // uncomment below and update the code to test the property statusMessage
      //var instance = new MorpheusApi.ClusterMasters();
      //expect(instance).to.be();
    });

    it('should have the property errorMessage (base name: "errorMessage")', function() {
      // uncomment below and update the code to test the property errorMessage
      //var instance = new MorpheusApi.ClusterMasters();
      //expect(instance).to.be();
    });

    it('should have the property statusDate (base name: "statusDate")', function() {
      // uncomment below and update the code to test the property statusDate
      //var instance = new MorpheusApi.ClusterMasters();
      //expect(instance).to.be();
    });

    it('should have the property statusPercent (base name: "statusPercent")', function() {
      // uncomment below and update the code to test the property statusPercent
      //var instance = new MorpheusApi.ClusterMasters();
      //expect(instance).to.be();
    });

    it('should have the property statusEta (base name: "statusEta")', function() {
      // uncomment below and update the code to test the property statusEta
      //var instance = new MorpheusApi.ClusterMasters();
      //expect(instance).to.be();
    });

    it('should have the property powerState (base name: "powerState")', function() {
      // uncomment below and update the code to test the property powerState
      //var instance = new MorpheusApi.ClusterMasters();
      //expect(instance).to.be();
    });

    it('should have the property agentInstalled (base name: "agentInstalled")', function() {
      // uncomment below and update the code to test the property agentInstalled
      //var instance = new MorpheusApi.ClusterMasters();
      //expect(instance).to.be();
    });

    it('should have the property lastAgentUpdate (base name: "lastAgentUpdate")', function() {
      // uncomment below and update the code to test the property lastAgentUpdate
      //var instance = new MorpheusApi.ClusterMasters();
      //expect(instance).to.be();
    });

    it('should have the property agentVersion (base name: "agentVersion")', function() {
      // uncomment below and update the code to test the property agentVersion
      //var instance = new MorpheusApi.ClusterMasters();
      //expect(instance).to.be();
    });

    it('should have the property maxCores (base name: "maxCores")', function() {
      // uncomment below and update the code to test the property maxCores
      //var instance = new MorpheusApi.ClusterMasters();
      //expect(instance).to.be();
    });

    it('should have the property coresPerSocket (base name: "coresPerSocket")', function() {
      // uncomment below and update the code to test the property coresPerSocket
      //var instance = new MorpheusApi.ClusterMasters();
      //expect(instance).to.be();
    });

    it('should have the property maxMemory (base name: "maxMemory")', function() {
      // uncomment below and update the code to test the property maxMemory
      //var instance = new MorpheusApi.ClusterMasters();
      //expect(instance).to.be();
    });

    it('should have the property maxStorage (base name: "maxStorage")', function() {
      // uncomment below and update the code to test the property maxStorage
      //var instance = new MorpheusApi.ClusterMasters();
      //expect(instance).to.be();
    });

    it('should have the property maxCpu (base name: "maxCpu")', function() {
      // uncomment below and update the code to test the property maxCpu
      //var instance = new MorpheusApi.ClusterMasters();
      //expect(instance).to.be();
    });

    it('should have the property hourlyPrice (base name: "hourlyPrice")', function() {
      // uncomment below and update the code to test the property hourlyPrice
      //var instance = new MorpheusApi.ClusterMasters();
      //expect(instance).to.be();
    });

    it('should have the property sourceImage (base name: "sourceImage")', function() {
      // uncomment below and update the code to test the property sourceImage
      //var instance = new MorpheusApi.ClusterMasters();
      //expect(instance).to.be();
    });

    it('should have the property serverOs (base name: "serverOs")', function() {
      // uncomment below and update the code to test the property serverOs
      //var instance = new MorpheusApi.ClusterMasters();
      //expect(instance).to.be();
    });

    it('should have the property volumes (base name: "volumes")', function() {
      // uncomment below and update the code to test the property volumes
      //var instance = new MorpheusApi.ClusterMasters();
      //expect(instance).to.be();
    });

    it('should have the property controllers (base name: "controllers")', function() {
      // uncomment below and update the code to test the property controllers
      //var instance = new MorpheusApi.ClusterMasters();
      //expect(instance).to.be();
    });

    it('should have the property interfaces (base name: "interfaces")', function() {
      // uncomment below and update the code to test the property interfaces
      //var instance = new MorpheusApi.ClusterMasters();
      //expect(instance).to.be();
    });

    it('should have the property labels (base name: "labels")', function() {
      // uncomment below and update the code to test the property labels
      //var instance = new MorpheusApi.ClusterMasters();
      //expect(instance).to.be();
    });

    it('should have the property tags (base name: "tags")', function() {
      // uncomment below and update the code to test the property tags
      //var instance = new MorpheusApi.ClusterMasters();
      //expect(instance).to.be();
    });

    it('should have the property enabled (base name: "enabled")', function() {
      // uncomment below and update the code to test the property enabled
      //var instance = new MorpheusApi.ClusterMasters();
      //expect(instance).to.be();
    });

    it('should have the property tagCompliant (base name: "tagCompliant")', function() {
      // uncomment below and update the code to test the property tagCompliant
      //var instance = new MorpheusApi.ClusterMasters();
      //expect(instance).to.be();
    });

    it('should have the property containers (base name: "containers")', function() {
      // uncomment below and update the code to test the property containers
      //var instance = new MorpheusApi.ClusterMasters();
      //expect(instance).to.be();
    });

    it('should have the property guestConsolePreferred (base name: "guestConsolePreferred")', function() {
      // uncomment below and update the code to test the property guestConsolePreferred
      //var instance = new MorpheusApi.ClusterMasters();
      //expect(instance).to.be();
    });

    it('should have the property guestConsoleType (base name: "guestConsoleType")', function() {
      // uncomment below and update the code to test the property guestConsoleType
      //var instance = new MorpheusApi.ClusterMasters();
      //expect(instance).to.be();
    });

    it('should have the property guestConsoleUsername (base name: "guestConsoleUsername")', function() {
      // uncomment below and update the code to test the property guestConsoleUsername
      //var instance = new MorpheusApi.ClusterMasters();
      //expect(instance).to.be();
    });

    it('should have the property guestConsolePassword (base name: "guestConsolePassword")', function() {
      // uncomment below and update the code to test the property guestConsolePassword
      //var instance = new MorpheusApi.ClusterMasters();
      //expect(instance).to.be();
    });

    it('should have the property guestConsolePasswordHash (base name: "guestConsolePasswordHash")', function() {
      // uncomment below and update the code to test the property guestConsolePasswordHash
      //var instance = new MorpheusApi.ClusterMasters();
      //expect(instance).to.be();
    });

    it('should have the property guestConsolePort (base name: "guestConsolePort")', function() {
      // uncomment below and update the code to test the property guestConsolePort
      //var instance = new MorpheusApi.ClusterMasters();
      //expect(instance).to.be();
    });

  });

}));
