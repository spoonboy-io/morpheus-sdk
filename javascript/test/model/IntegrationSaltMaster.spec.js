/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MorpheusApi);
  }
}(this, function(expect, MorpheusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MorpheusApi.IntegrationSaltMaster();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('IntegrationSaltMaster', function() {
    it('should create an instance of IntegrationSaltMaster', function() {
      // uncomment below and update the code to test IntegrationSaltMaster
      //var instane = new MorpheusApi.IntegrationSaltMaster();
      //expect(instance).to.be.a(MorpheusApi.IntegrationSaltMaster);
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new MorpheusApi.IntegrationSaltMaster();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new MorpheusApi.IntegrationSaltMaster();
      //expect(instance).to.be();
    });

    it('should have the property enabled (base name: "enabled")', function() {
      // uncomment below and update the code to test the property enabled
      //var instance = new MorpheusApi.IntegrationSaltMaster();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new MorpheusApi.IntegrationSaltMaster();
      //expect(instance).to.be();
    });

    it('should have the property integrationType (base name: "integrationType")', function() {
      // uncomment below and update the code to test the property integrationType
      //var instance = new MorpheusApi.IntegrationSaltMaster();
      //expect(instance).to.be();
    });

    it('should have the property url (base name: "url")', function() {
      // uncomment below and update the code to test the property url
      //var instance = new MorpheusApi.IntegrationSaltMaster();
      //expect(instance).to.be();
    });

    it('should have the property port (base name: "port")', function() {
      // uncomment below and update the code to test the property port
      //var instance = new MorpheusApi.IntegrationSaltMaster();
      //expect(instance).to.be();
    });

    it('should have the property username (base name: "username")', function() {
      // uncomment below and update the code to test the property username
      //var instance = new MorpheusApi.IntegrationSaltMaster();
      //expect(instance).to.be();
    });

    it('should have the property password (base name: "password")', function() {
      // uncomment below and update the code to test the property password
      //var instance = new MorpheusApi.IntegrationSaltMaster();
      //expect(instance).to.be();
    });

    it('should have the property passwordHash (base name: "passwordHash")', function() {
      // uncomment below and update the code to test the property passwordHash
      //var instance = new MorpheusApi.IntegrationSaltMaster();
      //expect(instance).to.be();
    });

    it('should have the property path (base name: "path")', function() {
      // uncomment below and update the code to test the property path
      //var instance = new MorpheusApi.IntegrationSaltMaster();
      //expect(instance).to.be();
    });

    it('should have the property version (base name: "version")', function() {
      // uncomment below and update the code to test the property version
      //var instance = new MorpheusApi.IntegrationSaltMaster();
      //expect(instance).to.be();
    });

    it('should have the property windowsVersion (base name: "windowsVersion")', function() {
      // uncomment below and update the code to test the property windowsVersion
      //var instance = new MorpheusApi.IntegrationSaltMaster();
      //expect(instance).to.be();
    });

    it('should have the property repoUrl (base name: "repoUrl")', function() {
      // uncomment below and update the code to test the property repoUrl
      //var instance = new MorpheusApi.IntegrationSaltMaster();
      //expect(instance).to.be();
    });

    it('should have the property serviceMode (base name: "serviceMode")', function() {
      // uncomment below and update the code to test the property serviceMode
      //var instance = new MorpheusApi.IntegrationSaltMaster();
      //expect(instance).to.be();
    });

    it('should have the property isPlugin (base name: "isPlugin")', function() {
      // uncomment below and update the code to test the property isPlugin
      //var instance = new MorpheusApi.IntegrationSaltMaster();
      //expect(instance).to.be();
    });

    it('should have the property config (base name: "config")', function() {
      // uncomment below and update the code to test the property config
      //var instance = new MorpheusApi.IntegrationSaltMaster();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new MorpheusApi.IntegrationSaltMaster();
      //expect(instance).to.be();
    });

    it('should have the property statusDate (base name: "statusDate")', function() {
      // uncomment below and update the code to test the property statusDate
      //var instance = new MorpheusApi.IntegrationSaltMaster();
      //expect(instance).to.be();
    });

    it('should have the property statusMessage (base name: "statusMessage")', function() {
      // uncomment below and update the code to test the property statusMessage
      //var instance = new MorpheusApi.IntegrationSaltMaster();
      //expect(instance).to.be();
    });

    it('should have the property lastSync (base name: "lastSync")', function() {
      // uncomment below and update the code to test the property lastSync
      //var instance = new MorpheusApi.IntegrationSaltMaster();
      //expect(instance).to.be();
    });

    it('should have the property lastSyncDuration (base name: "lastSyncDuration")', function() {
      // uncomment below and update the code to test the property lastSyncDuration
      //var instance = new MorpheusApi.IntegrationSaltMaster();
      //expect(instance).to.be();
    });

    it('should have the property credential (base name: "credential")', function() {
      // uncomment below and update the code to test the property credential
      //var instance = new MorpheusApi.IntegrationSaltMaster();
      //expect(instance).to.be();
    });

  });

}));
