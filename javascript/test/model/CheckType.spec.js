/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MorpheusApi);
  }
}(this, function(expect, MorpheusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MorpheusApi.CheckType();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('CheckType', function() {
    it('should create an instance of CheckType', function() {
      // uncomment below and update the code to test CheckType
      //var instane = new MorpheusApi.CheckType();
      //expect(instance).to.be.a(MorpheusApi.CheckType);
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new MorpheusApi.CheckType();
      //expect(instance).to.be();
    });

    it('should have the property code (base name: "code")', function() {
      // uncomment below and update the code to test the property code
      //var instance = new MorpheusApi.CheckType();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new MorpheusApi.CheckType();
      //expect(instance).to.be();
    });

    it('should have the property defaultInterval (base name: "defaultInterval")', function() {
      // uncomment below and update the code to test the property defaultInterval
      //var instance = new MorpheusApi.CheckType();
      //expect(instance).to.be();
    });

    it('should have the property metricName (base name: "metricName")', function() {
      // uncomment below and update the code to test the property metricName
      //var instance = new MorpheusApi.CheckType();
      //expect(instance).to.be();
    });

    it('should have the property inUptime (base name: "inUptime")', function() {
      // uncomment below and update the code to test the property inUptime
      //var instance = new MorpheusApi.CheckType();
      //expect(instance).to.be();
    });

    it('should have the property createIncident (base name: "createIncident")', function() {
      // uncomment below and update the code to test the property createIncident
      //var instance = new MorpheusApi.CheckType();
      //expect(instance).to.be();
    });

    it('should have the property pushOnly (base name: "pushOnly")', function() {
      // uncomment below and update the code to test the property pushOnly
      //var instance = new MorpheusApi.CheckType();
      //expect(instance).to.be();
    });

    it('should have the property tunnelSupported (base name: "tunnelSupported")', function() {
      // uncomment below and update the code to test the property tunnelSupported
      //var instance = new MorpheusApi.CheckType();
      //expect(instance).to.be();
    });

  });

}));
