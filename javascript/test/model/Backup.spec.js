/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MorpheusApi);
  }
}(this, function(expect, MorpheusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MorpheusApi.Backup();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Backup', function() {
    it('should create an instance of Backup', function() {
      // uncomment below and update the code to test Backup
      //var instane = new MorpheusApi.Backup();
      //expect(instance).to.be.a(MorpheusApi.Backup);
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new MorpheusApi.Backup();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new MorpheusApi.Backup();
      //expect(instance).to.be();
    });

    it('should have the property locationType (base name: "locationType")', function() {
      // uncomment below and update the code to test the property locationType
      //var instance = new MorpheusApi.Backup();
      //expect(instance).to.be();
    });

    it('should have the property instance (base name: "instance")', function() {
      // uncomment below and update the code to test the property instance
      //var instance = new MorpheusApi.Backup();
      //expect(instance).to.be();
    });

    it('should have the property containerId (base name: "containerId")', function() {
      // uncomment below and update the code to test the property containerId
      //var instance = new MorpheusApi.Backup();
      //expect(instance).to.be();
    });

    it('should have the property job (base name: "job")', function() {
      // uncomment below and update the code to test the property job
      //var instance = new MorpheusApi.Backup();
      //expect(instance).to.be();
    });

    it('should have the property schedule (base name: "schedule")', function() {
      // uncomment below and update the code to test the property schedule
      //var instance = new MorpheusApi.Backup();
      //expect(instance).to.be();
    });

    it('should have the property retentionCount (base name: "retentionCount")', function() {
      // uncomment below and update the code to test the property retentionCount
      //var instance = new MorpheusApi.Backup();
      //expect(instance).to.be();
    });

    it('should have the property backupType (base name: "backupType")', function() {
      // uncomment below and update the code to test the property backupType
      //var instance = new MorpheusApi.Backup();
      //expect(instance).to.be();
    });

    it('should have the property storageProvider (base name: "storageProvider")', function() {
      // uncomment below and update the code to test the property storageProvider
      //var instance = new MorpheusApi.Backup();
      //expect(instance).to.be();
    });

    it('should have the property backupProvider (base name: "backupProvider")', function() {
      // uncomment below and update the code to test the property backupProvider
      //var instance = new MorpheusApi.Backup();
      //expect(instance).to.be();
    });

    it('should have the property backupRespository (base name: "backupRespository")', function() {
      // uncomment below and update the code to test the property backupRespository
      //var instance = new MorpheusApi.Backup();
      //expect(instance).to.be();
    });

    it('should have the property cronExpression (base name: "cronExpression")', function() {
      // uncomment below and update the code to test the property cronExpression
      //var instance = new MorpheusApi.Backup();
      //expect(instance).to.be();
    });

    it('should have the property nextFire (base name: "nextFire")', function() {
      // uncomment below and update the code to test the property nextFire
      //var instance = new MorpheusApi.Backup();
      //expect(instance).to.be();
    });

    it('should have the property lastStatus (base name: "lastStatus")', function() {
      // uncomment below and update the code to test the property lastStatus
      //var instance = new MorpheusApi.Backup();
      //expect(instance).to.be();
    });

    it('should have the property lastResult (base name: "lastResult")', function() {
      // uncomment below and update the code to test the property lastResult
      //var instance = new MorpheusApi.Backup();
      //expect(instance).to.be();
    });

    it('should have the property stats (base name: "stats")', function() {
      // uncomment below and update the code to test the property stats
      //var instance = new MorpheusApi.Backup();
      //expect(instance).to.be();
    });

    it('should have the property enabled (base name: "enabled")', function() {
      // uncomment below and update the code to test the property enabled
      //var instance = new MorpheusApi.Backup();
      //expect(instance).to.be();
    });

    it('should have the property dateCreated (base name: "dateCreated")', function() {
      // uncomment below and update the code to test the property dateCreated
      //var instance = new MorpheusApi.Backup();
      //expect(instance).to.be();
    });

    it('should have the property lastUpdated (base name: "lastUpdated")', function() {
      // uncomment below and update the code to test the property lastUpdated
      //var instance = new MorpheusApi.Backup();
      //expect(instance).to.be();
    });

  });

}));
