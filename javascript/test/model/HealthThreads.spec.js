/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MorpheusApi);
  }
}(this, function(expect, MorpheusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MorpheusApi.HealthThreads();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('HealthThreads', function() {
    it('should create an instance of HealthThreads', function() {
      // uncomment below and update the code to test HealthThreads
      //var instane = new MorpheusApi.HealthThreads();
      //expect(instance).to.be.a(MorpheusApi.HealthThreads);
    });

    it('should have the property success (base name: "success")', function() {
      // uncomment below and update the code to test the property success
      //var instance = new MorpheusApi.HealthThreads();
      //expect(instance).to.be();
    });

    it('should have the property threadList (base name: "threadList")', function() {
      // uncomment below and update the code to test the property threadList
      //var instance = new MorpheusApi.HealthThreads();
      //expect(instance).to.be();
    });

    it('should have the property busyThreads (base name: "busyThreads")', function() {
      // uncomment below and update the code to test the property busyThreads
      //var instance = new MorpheusApi.HealthThreads();
      //expect(instance).to.be();
    });

    it('should have the property blockedThreads (base name: "blockedThreads")', function() {
      // uncomment below and update the code to test the property blockedThreads
      //var instance = new MorpheusApi.HealthThreads();
      //expect(instance).to.be();
    });

    it('should have the property runningThreads (base name: "runningThreads")', function() {
      // uncomment below and update the code to test the property runningThreads
      //var instance = new MorpheusApi.HealthThreads();
      //expect(instance).to.be();
    });

    it('should have the property totalCpuTime (base name: "totalCpuTime")', function() {
      // uncomment below and update the code to test the property totalCpuTime
      //var instance = new MorpheusApi.HealthThreads();
      //expect(instance).to.be();
    });

    it('should have the property totalThreads (base name: "totalThreads")', function() {
      // uncomment below and update the code to test the property totalThreads
      //var instance = new MorpheusApi.HealthThreads();
      //expect(instance).to.be();
    });

    it('should have the property runningWebThreads (base name: "runningWebThreads")', function() {
      // uncomment below and update the code to test the property runningWebThreads
      //var instance = new MorpheusApi.HealthThreads();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new MorpheusApi.HealthThreads();
      //expect(instance).to.be();
    });

  });

}));
