/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MorpheusApi);
  }
}(this, function(expect, MorpheusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MorpheusApi.InlineResponse20096NetworkRouterBgpNeighbors();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('InlineResponse20096NetworkRouterBgpNeighbors', function() {
    it('should create an instance of InlineResponse20096NetworkRouterBgpNeighbors', function() {
      // uncomment below and update the code to test InlineResponse20096NetworkRouterBgpNeighbors
      //var instane = new MorpheusApi.InlineResponse20096NetworkRouterBgpNeighbors();
      //expect(instance).to.be.a(MorpheusApi.InlineResponse20096NetworkRouterBgpNeighbors);
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new MorpheusApi.InlineResponse20096NetworkRouterBgpNeighbors();
      //expect(instance).to.be();
    });

    it('should have the property ipAddress (base name: "ipAddress")', function() {
      // uncomment below and update the code to test the property ipAddress
      //var instance = new MorpheusApi.InlineResponse20096NetworkRouterBgpNeighbors();
      //expect(instance).to.be();
    });

    it('should have the property forwardingAddress (base name: "forwardingAddress")', function() {
      // uncomment below and update the code to test the property forwardingAddress
      //var instance = new MorpheusApi.InlineResponse20096NetworkRouterBgpNeighbors();
      //expect(instance).to.be();
    });

    it('should have the property protocolAddress (base name: "protocolAddress")', function() {
      // uncomment below and update the code to test the property protocolAddress
      //var instance = new MorpheusApi.InlineResponse20096NetworkRouterBgpNeighbors();
      //expect(instance).to.be();
    });

    it('should have the property remoteAs (base name: "remoteAs")', function() {
      // uncomment below and update the code to test the property remoteAs
      //var instance = new MorpheusApi.InlineResponse20096NetworkRouterBgpNeighbors();
      //expect(instance).to.be();
    });

    it('should have the property weight (base name: "weight")', function() {
      // uncomment below and update the code to test the property weight
      //var instance = new MorpheusApi.InlineResponse20096NetworkRouterBgpNeighbors();
      //expect(instance).to.be();
    });

    it('should have the property keepAlive (base name: "keepAlive")', function() {
      // uncomment below and update the code to test the property keepAlive
      //var instance = new MorpheusApi.InlineResponse20096NetworkRouterBgpNeighbors();
      //expect(instance).to.be();
    });

    it('should have the property holdDown (base name: "holdDown")', function() {
      // uncomment below and update the code to test the property holdDown
      //var instance = new MorpheusApi.InlineResponse20096NetworkRouterBgpNeighbors();
      //expect(instance).to.be();
    });

    it('should have the property password (base name: "password")', function() {
      // uncomment below and update the code to test the property password
      //var instance = new MorpheusApi.InlineResponse20096NetworkRouterBgpNeighbors();
      //expect(instance).to.be();
    });

    it('should have the property routeFilteringType (base name: "routeFilteringType")', function() {
      // uncomment below and update the code to test the property routeFilteringType
      //var instance = new MorpheusApi.InlineResponse20096NetworkRouterBgpNeighbors();
      //expect(instance).to.be();
    });

    it('should have the property routeFilteringIn (base name: "routeFilteringIn")', function() {
      // uncomment below and update the code to test the property routeFilteringIn
      //var instance = new MorpheusApi.InlineResponse20096NetworkRouterBgpNeighbors();
      //expect(instance).to.be();
    });

    it('should have the property routeFilteringOut (base name: "routeFilteringOut")', function() {
      // uncomment below and update the code to test the property routeFilteringOut
      //var instance = new MorpheusApi.InlineResponse20096NetworkRouterBgpNeighbors();
      //expect(instance).to.be();
    });

    it('should have the property bfdEnabled (base name: "bfdEnabled")', function() {
      // uncomment below and update the code to test the property bfdEnabled
      //var instance = new MorpheusApi.InlineResponse20096NetworkRouterBgpNeighbors();
      //expect(instance).to.be();
    });

    it('should have the property bfdInterval (base name: "bfdInterval")', function() {
      // uncomment below and update the code to test the property bfdInterval
      //var instance = new MorpheusApi.InlineResponse20096NetworkRouterBgpNeighbors();
      //expect(instance).to.be();
    });

    it('should have the property bfdMultiple (base name: "bfdMultiple")', function() {
      // uncomment below and update the code to test the property bfdMultiple
      //var instance = new MorpheusApi.InlineResponse20096NetworkRouterBgpNeighbors();
      //expect(instance).to.be();
    });

    it('should have the property allowAsIn (base name: "allowAsIn")', function() {
      // uncomment below and update the code to test the property allowAsIn
      //var instance = new MorpheusApi.InlineResponse20096NetworkRouterBgpNeighbors();
      //expect(instance).to.be();
    });

    it('should have the property hopLimit (base name: "hopLimit")', function() {
      // uncomment below and update the code to test the property hopLimit
      //var instance = new MorpheusApi.InlineResponse20096NetworkRouterBgpNeighbors();
      //expect(instance).to.be();
    });

    it('should have the property restartMode (base name: "restartMode")', function() {
      // uncomment below and update the code to test the property restartMode
      //var instance = new MorpheusApi.InlineResponse20096NetworkRouterBgpNeighbors();
      //expect(instance).to.be();
    });

    it('should have the property providerId (base name: "providerId")', function() {
      // uncomment below and update the code to test the property providerId
      //var instance = new MorpheusApi.InlineResponse20096NetworkRouterBgpNeighbors();
      //expect(instance).to.be();
    });

    it('should have the property syncSource (base name: "syncSource")', function() {
      // uncomment below and update the code to test the property syncSource
      //var instance = new MorpheusApi.InlineResponse20096NetworkRouterBgpNeighbors();
      //expect(instance).to.be();
    });

    it('should have the property internalId (base name: "internalId")', function() {
      // uncomment below and update the code to test the property internalId
      //var instance = new MorpheusApi.InlineResponse20096NetworkRouterBgpNeighbors();
      //expect(instance).to.be();
    });

    it('should have the property externalId (base name: "externalId")', function() {
      // uncomment below and update the code to test the property externalId
      //var instance = new MorpheusApi.InlineResponse20096NetworkRouterBgpNeighbors();
      //expect(instance).to.be();
    });

    it('should have the property refType (base name: "refType")', function() {
      // uncomment below and update the code to test the property refType
      //var instance = new MorpheusApi.InlineResponse20096NetworkRouterBgpNeighbors();
      //expect(instance).to.be();
    });

    it('should have the property refId (base name: "refId")', function() {
      // uncomment below and update the code to test the property refId
      //var instance = new MorpheusApi.InlineResponse20096NetworkRouterBgpNeighbors();
      //expect(instance).to.be();
    });

    it('should have the property config (base name: "config")', function() {
      // uncomment below and update the code to test the property config
      //var instance = new MorpheusApi.InlineResponse20096NetworkRouterBgpNeighbors();
      //expect(instance).to.be();
    });

    it('should have the property dateCreated (base name: "dateCreated")', function() {
      // uncomment below and update the code to test the property dateCreated
      //var instance = new MorpheusApi.InlineResponse20096NetworkRouterBgpNeighbors();
      //expect(instance).to.be();
    });

    it('should have the property lastUpdated (base name: "lastUpdated")', function() {
      // uncomment below and update the code to test the property lastUpdated
      //var instance = new MorpheusApi.InlineResponse20096NetworkRouterBgpNeighbors();
      //expect(instance).to.be();
    });

  });

}));
