/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MorpheusApi);
  }
}(this, function(expect, MorpheusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MorpheusApi.StorageServerType();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('StorageServerType', function() {
    it('should create an instance of StorageServerType', function() {
      // uncomment below and update the code to test StorageServerType
      //var instane = new MorpheusApi.StorageServerType();
      //expect(instance).to.be.a(MorpheusApi.StorageServerType);
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new MorpheusApi.StorageServerType();
      //expect(instance).to.be();
    });

    it('should have the property code (base name: "code")', function() {
      // uncomment below and update the code to test the property code
      //var instance = new MorpheusApi.StorageServerType();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new MorpheusApi.StorageServerType();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new MorpheusApi.StorageServerType();
      //expect(instance).to.be();
    });

    it('should have the property enabled (base name: "enabled")', function() {
      // uncomment below and update the code to test the property enabled
      //var instance = new MorpheusApi.StorageServerType();
      //expect(instance).to.be();
    });

    it('should have the property creatable (base name: "creatable")', function() {
      // uncomment below and update the code to test the property creatable
      //var instance = new MorpheusApi.StorageServerType();
      //expect(instance).to.be();
    });

    it('should have the property hasNamespaces (base name: "hasNamespaces")', function() {
      // uncomment below and update the code to test the property hasNamespaces
      //var instance = new MorpheusApi.StorageServerType();
      //expect(instance).to.be();
    });

    it('should have the property hasGroups (base name: "hasGroups")', function() {
      // uncomment below and update the code to test the property hasGroups
      //var instance = new MorpheusApi.StorageServerType();
      //expect(instance).to.be();
    });

    it('should have the property hasBlock (base name: "hasBlock")', function() {
      // uncomment below and update the code to test the property hasBlock
      //var instance = new MorpheusApi.StorageServerType();
      //expect(instance).to.be();
    });

    it('should have the property hasObject (base name: "hasObject")', function() {
      // uncomment below and update the code to test the property hasObject
      //var instance = new MorpheusApi.StorageServerType();
      //expect(instance).to.be();
    });

    it('should have the property hasFile (base name: "hasFile")', function() {
      // uncomment below and update the code to test the property hasFile
      //var instance = new MorpheusApi.StorageServerType();
      //expect(instance).to.be();
    });

    it('should have the property hasDatastore (base name: "hasDatastore")', function() {
      // uncomment below and update the code to test the property hasDatastore
      //var instance = new MorpheusApi.StorageServerType();
      //expect(instance).to.be();
    });

    it('should have the property hasDisks (base name: "hasDisks")', function() {
      // uncomment below and update the code to test the property hasDisks
      //var instance = new MorpheusApi.StorageServerType();
      //expect(instance).to.be();
    });

    it('should have the property hasHosts (base name: "hasHosts")', function() {
      // uncomment below and update the code to test the property hasHosts
      //var instance = new MorpheusApi.StorageServerType();
      //expect(instance).to.be();
    });

    it('should have the property createNamespaces (base name: "createNamespaces")', function() {
      // uncomment below and update the code to test the property createNamespaces
      //var instance = new MorpheusApi.StorageServerType();
      //expect(instance).to.be();
    });

    it('should have the property createGroup (base name: "createGroup")', function() {
      // uncomment below and update the code to test the property createGroup
      //var instance = new MorpheusApi.StorageServerType();
      //expect(instance).to.be();
    });

    it('should have the property createBlock (base name: "createBlock")', function() {
      // uncomment below and update the code to test the property createBlock
      //var instance = new MorpheusApi.StorageServerType();
      //expect(instance).to.be();
    });

    it('should have the property createObject (base name: "createObject")', function() {
      // uncomment below and update the code to test the property createObject
      //var instance = new MorpheusApi.StorageServerType();
      //expect(instance).to.be();
    });

    it('should have the property createFile (base name: "createFile")', function() {
      // uncomment below and update the code to test the property createFile
      //var instance = new MorpheusApi.StorageServerType();
      //expect(instance).to.be();
    });

    it('should have the property createDatastore (base name: "createDatastore")', function() {
      // uncomment below and update the code to test the property createDatastore
      //var instance = new MorpheusApi.StorageServerType();
      //expect(instance).to.be();
    });

    it('should have the property createDisk (base name: "createDisk")', function() {
      // uncomment below and update the code to test the property createDisk
      //var instance = new MorpheusApi.StorageServerType();
      //expect(instance).to.be();
    });

    it('should have the property createHost (base name: "createHost")', function() {
      // uncomment below and update the code to test the property createHost
      //var instance = new MorpheusApi.StorageServerType();
      //expect(instance).to.be();
    });

    it('should have the property iconCode (base name: "iconCode")', function() {
      // uncomment below and update the code to test the property iconCode
      //var instance = new MorpheusApi.StorageServerType();
      //expect(instance).to.be();
    });

    it('should have the property hasFileBrowser (base name: "hasFileBrowser")', function() {
      // uncomment below and update the code to test the property hasFileBrowser
      //var instance = new MorpheusApi.StorageServerType();
      //expect(instance).to.be();
    });

    it('should have the property optionTypes (base name: "optionTypes")', function() {
      // uncomment below and update the code to test the property optionTypes
      //var instance = new MorpheusApi.StorageServerType();
      //expect(instance).to.be();
    });

    it('should have the property groupOptionTypes (base name: "groupOptionTypes")', function() {
      // uncomment below and update the code to test the property groupOptionTypes
      //var instance = new MorpheusApi.StorageServerType();
      //expect(instance).to.be();
    });

    it('should have the property bucketOptionTypes (base name: "bucketOptionTypes")', function() {
      // uncomment below and update the code to test the property bucketOptionTypes
      //var instance = new MorpheusApi.StorageServerType();
      //expect(instance).to.be();
    });

    it('should have the property shareOptionTypes (base name: "shareOptionTypes")', function() {
      // uncomment below and update the code to test the property shareOptionTypes
      //var instance = new MorpheusApi.StorageServerType();
      //expect(instance).to.be();
    });

    it('should have the property shareAccessOptionTypes (base name: "shareAccessOptionTypes")', function() {
      // uncomment below and update the code to test the property shareAccessOptionTypes
      //var instance = new MorpheusApi.StorageServerType();
      //expect(instance).to.be();
    });

    it('should have the property storageVolumeTypes (base name: "storageVolumeTypes")', function() {
      // uncomment below and update the code to test the property storageVolumeTypes
      //var instance = new MorpheusApi.StorageServerType();
      //expect(instance).to.be();
    });

  });

}));
