/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MorpheusApi);
  }
}(this, function(expect, MorpheusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MorpheusApi.LicenseLicense();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('LicenseLicense', function() {
    it('should create an instance of LicenseLicense', function() {
      // uncomment below and update the code to test LicenseLicense
      //var instane = new MorpheusApi.LicenseLicense();
      //expect(instance).to.be.a(MorpheusApi.LicenseLicense);
    });

    it('should have the property productTier (base name: "productTier")', function() {
      // uncomment below and update the code to test the property productTier
      //var instance = new MorpheusApi.LicenseLicense();
      //expect(instance).to.be();
    });

    it('should have the property startDate (base name: "startDate")', function() {
      // uncomment below and update the code to test the property startDate
      //var instance = new MorpheusApi.LicenseLicense();
      //expect(instance).to.be();
    });

    it('should have the property endDate (base name: "endDate")', function() {
      // uncomment below and update the code to test the property endDate
      //var instance = new MorpheusApi.LicenseLicense();
      //expect(instance).to.be();
    });

    it('should have the property maxInstances (base name: "maxInstances")', function() {
      // uncomment below and update the code to test the property maxInstances
      //var instance = new MorpheusApi.LicenseLicense();
      //expect(instance).to.be();
    });

    it('should have the property maxMemory (base name: "maxMemory")', function() {
      // uncomment below and update the code to test the property maxMemory
      //var instance = new MorpheusApi.LicenseLicense();
      //expect(instance).to.be();
    });

    it('should have the property maxStorage (base name: "maxStorage")', function() {
      // uncomment below and update the code to test the property maxStorage
      //var instance = new MorpheusApi.LicenseLicense();
      //expect(instance).to.be();
    });

    it('should have the property hardLimit (base name: "hardLimit")', function() {
      // uncomment below and update the code to test the property hardLimit
      //var instance = new MorpheusApi.LicenseLicense();
      //expect(instance).to.be();
    });

    it('should have the property freeTrial (base name: "freeTrial")', function() {
      // uncomment below and update the code to test the property freeTrial
      //var instance = new MorpheusApi.LicenseLicense();
      //expect(instance).to.be();
    });

    it('should have the property multiTenant (base name: "multiTenant")', function() {
      // uncomment below and update the code to test the property multiTenant
      //var instance = new MorpheusApi.LicenseLicense();
      //expect(instance).to.be();
    });

    it('should have the property whitelabel (base name: "whitelabel")', function() {
      // uncomment below and update the code to test the property whitelabel
      //var instance = new MorpheusApi.LicenseLicense();
      //expect(instance).to.be();
    });

    it('should have the property reportStatus (base name: "reportStatus")', function() {
      // uncomment below and update the code to test the property reportStatus
      //var instance = new MorpheusApi.LicenseLicense();
      //expect(instance).to.be();
    });

    it('should have the property supportLevel (base name: "supportLevel")', function() {
      // uncomment below and update the code to test the property supportLevel
      //var instance = new MorpheusApi.LicenseLicense();
      //expect(instance).to.be();
    });

    it('should have the property accountName (base name: "accountName")', function() {
      // uncomment below and update the code to test the property accountName
      //var instance = new MorpheusApi.LicenseLicense();
      //expect(instance).to.be();
    });

    it('should have the property config (base name: "config")', function() {
      // uncomment below and update the code to test the property config
      //var instance = new MorpheusApi.LicenseLicense();
      //expect(instance).to.be();
    });

    it('should have the property amazonProductCodes (base name: "amazonProductCodes")', function() {
      // uncomment below and update the code to test the property amazonProductCodes
      //var instance = new MorpheusApi.LicenseLicense();
      //expect(instance).to.be();
    });

    it('should have the property features (base name: "features")', function() {
      // uncomment below and update the code to test the property features
      //var instance = new MorpheusApi.LicenseLicense();
      //expect(instance).to.be();
    });

    it('should have the property zoneTypes (base name: "zoneTypes")', function() {
      // uncomment below and update the code to test the property zoneTypes
      //var instance = new MorpheusApi.LicenseLicense();
      //expect(instance).to.be();
    });

    it('should have the property lastUpdated (base name: "lastUpdated")', function() {
      // uncomment below and update the code to test the property lastUpdated
      //var instance = new MorpheusApi.LicenseLicense();
      //expect(instance).to.be();
    });

    it('should have the property dateCreated (base name: "dateCreated")', function() {
      // uncomment below and update the code to test the property dateCreated
      //var instance = new MorpheusApi.LicenseLicense();
      //expect(instance).to.be();
    });

  });

}));
