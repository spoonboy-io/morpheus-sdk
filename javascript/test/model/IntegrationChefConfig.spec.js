/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MorpheusApi);
  }
}(this, function(expect, MorpheusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MorpheusApi.IntegrationChefConfig();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('IntegrationChefConfig', function() {
    it('should create an instance of IntegrationChefConfig', function() {
      // uncomment below and update the code to test IntegrationChefConfig
      //var instane = new MorpheusApi.IntegrationChefConfig();
      //expect(instance).to.be.a(MorpheusApi.IntegrationChefConfig);
    });

    it('should have the property databags (base name: "databags")', function() {
      // uncomment below and update the code to test the property databags
      //var instance = new MorpheusApi.IntegrationChefConfig();
      //expect(instance).to.be();
    });

    it('should have the property endpoint (base name: "endpoint")', function() {
      // uncomment below and update the code to test the property endpoint
      //var instance = new MorpheusApi.IntegrationChefConfig();
      //expect(instance).to.be();
    });

    it('should have the property org (base name: "org")', function() {
      // uncomment below and update the code to test the property org
      //var instance = new MorpheusApi.IntegrationChefConfig();
      //expect(instance).to.be();
    });

    it('should have the property chefUser (base name: "chefUser")', function() {
      // uncomment below and update the code to test the property chefUser
      //var instance = new MorpheusApi.IntegrationChefConfig();
      //expect(instance).to.be();
    });

    it('should have the property userKey (base name: "userKey")', function() {
      // uncomment below and update the code to test the property userKey
      //var instance = new MorpheusApi.IntegrationChefConfig();
      //expect(instance).to.be();
    });

    it('should have the property orgKey (base name: "orgKey")', function() {
      // uncomment below and update the code to test the property orgKey
      //var instance = new MorpheusApi.IntegrationChefConfig();
      //expect(instance).to.be();
    });

    it('should have the property version (base name: "version")', function() {
      // uncomment below and update the code to test the property version
      //var instance = new MorpheusApi.IntegrationChefConfig();
      //expect(instance).to.be();
    });

    it('should have the property chefUseFqdn (base name: "chefUseFqdn")', function() {
      // uncomment below and update the code to test the property chefUseFqdn
      //var instance = new MorpheusApi.IntegrationChefConfig();
      //expect(instance).to.be();
    });

    it('should have the property windowsVersion (base name: "windowsVersion")', function() {
      // uncomment below and update the code to test the property windowsVersion
      //var instance = new MorpheusApi.IntegrationChefConfig();
      //expect(instance).to.be();
    });

    it('should have the property windowsInstallUrl (base name: "windowsInstallUrl")', function() {
      // uncomment below and update the code to test the property windowsInstallUrl
      //var instance = new MorpheusApi.IntegrationChefConfig();
      //expect(instance).to.be();
    });

    it('should have the property userKeyHash (base name: "userKeyHash")', function() {
      // uncomment below and update the code to test the property userKeyHash
      //var instance = new MorpheusApi.IntegrationChefConfig();
      //expect(instance).to.be();
    });

    it('should have the property orgKeyHash (base name: "orgKeyHash")', function() {
      // uncomment below and update the code to test the property orgKeyHash
      //var instance = new MorpheusApi.IntegrationChefConfig();
      //expect(instance).to.be();
    });

  });

}));
