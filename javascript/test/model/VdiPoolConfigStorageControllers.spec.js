/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MorpheusApi);
  }
}(this, function(expect, MorpheusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MorpheusApi.VdiPoolConfigStorageControllers();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('VdiPoolConfigStorageControllers', function() {
    it('should create an instance of VdiPoolConfigStorageControllers', function() {
      // uncomment below and update the code to test VdiPoolConfigStorageControllers
      //var instane = new MorpheusApi.VdiPoolConfigStorageControllers();
      //expect(instance).to.be.a(MorpheusApi.VdiPoolConfigStorageControllers);
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new MorpheusApi.VdiPoolConfigStorageControllers();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new MorpheusApi.VdiPoolConfigStorageControllers();
      //expect(instance).to.be();
    });

    it('should have the property active (base name: "active")', function() {
      // uncomment below and update the code to test the property active
      //var instance = new MorpheusApi.VdiPoolConfigStorageControllers();
      //expect(instance).to.be();
    });

    it('should have the property typeId (base name: "typeId")', function() {
      // uncomment below and update the code to test the property typeId
      //var instance = new MorpheusApi.VdiPoolConfigStorageControllers();
      //expect(instance).to.be();
    });

    it('should have the property typeName (base name: "typeName")', function() {
      // uncomment below and update the code to test the property typeName
      //var instance = new MorpheusApi.VdiPoolConfigStorageControllers();
      //expect(instance).to.be();
    });

    it('should have the property unitNumber (base name: "unitNumber")', function() {
      // uncomment below and update the code to test the property unitNumber
      //var instance = new MorpheusApi.VdiPoolConfigStorageControllers();
      //expect(instance).to.be();
    });

    it('should have the property busNumber (base name: "busNumber")', function() {
      // uncomment below and update the code to test the property busNumber
      //var instance = new MorpheusApi.VdiPoolConfigStorageControllers();
      //expect(instance).to.be();
    });

    it('should have the property maxDevices (base name: "maxDevices")', function() {
      // uncomment below and update the code to test the property maxDevices
      //var instance = new MorpheusApi.VdiPoolConfigStorageControllers();
      //expect(instance).to.be();
    });

    it('should have the property removable (base name: "removable")', function() {
      // uncomment below and update the code to test the property removable
      //var instance = new MorpheusApi.VdiPoolConfigStorageControllers();
      //expect(instance).to.be();
    });

    it('should have the property editable (base name: "editable")', function() {
      // uncomment below and update the code to test the property editable
      //var instance = new MorpheusApi.VdiPoolConfigStorageControllers();
      //expect(instance).to.be();
    });

    it('should have the property reservedUnitNumber (base name: "reservedUnitNumber")', function() {
      // uncomment below and update the code to test the property reservedUnitNumber
      //var instance = new MorpheusApi.VdiPoolConfigStorageControllers();
      //expect(instance).to.be();
    });

    it('should have the property category (base name: "category")', function() {
      // uncomment below and update the code to test the property category
      //var instance = new MorpheusApi.VdiPoolConfigStorageControllers();
      //expect(instance).to.be();
    });

    it('should have the property displayOrder (base name: "displayOrder")', function() {
      // uncomment below and update the code to test the property displayOrder
      //var instance = new MorpheusApi.VdiPoolConfigStorageControllers();
      //expect(instance).to.be();
    });

  });

}));
