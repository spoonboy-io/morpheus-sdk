/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MorpheusApi);
  }
}(this, function(expect, MorpheusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MorpheusApi.InstanceCreate();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('InstanceCreate', function() {
    it('should create an instance of InstanceCreate', function() {
      // uncomment below and update the code to test InstanceCreate
      //var instane = new MorpheusApi.InstanceCreate();
      //expect(instance).to.be.a(MorpheusApi.InstanceCreate);
    });

    it('should have the property instance (base name: "instance")', function() {
      // uncomment below and update the code to test the property instance
      //var instance = new MorpheusApi.InstanceCreate();
      //expect(instance).to.be();
    });

    it('should have the property zoneId (base name: "zoneId")', function() {
      // uncomment below and update the code to test the property zoneId
      //var instance = new MorpheusApi.InstanceCreate();
      //expect(instance).to.be();
    });

    it('should have the property evars (base name: "evars")', function() {
      // uncomment below and update the code to test the property evars
      //var instance = new MorpheusApi.InstanceCreate();
      //expect(instance).to.be();
    });

    it('should have the property copies (base name: "copies")', function() {
      // uncomment below and update the code to test the property copies
      //var instance = new MorpheusApi.InstanceCreate();
      //expect(instance).to.be();
    });

    it('should have the property layoutSize (base name: "layoutSize")', function() {
      // uncomment below and update the code to test the property layoutSize
      //var instance = new MorpheusApi.InstanceCreate();
      //expect(instance).to.be();
    });

    it('should have the property servicePlanOptions (base name: "servicePlanOptions")', function() {
      // uncomment below and update the code to test the property servicePlanOptions
      //var instance = new MorpheusApi.InstanceCreate();
      //expect(instance).to.be();
    });

    it('should have the property securityGroups (base name: "securityGroups")', function() {
      // uncomment below and update the code to test the property securityGroups
      //var instance = new MorpheusApi.InstanceCreate();
      //expect(instance).to.be();
    });

    it('should have the property volumes (base name: "volumes")', function() {
      // uncomment below and update the code to test the property volumes
      //var instance = new MorpheusApi.InstanceCreate();
      //expect(instance).to.be();
    });

    it('should have the property networkInterfaces (base name: "networkInterfaces")', function() {
      // uncomment below and update the code to test the property networkInterfaces
      //var instance = new MorpheusApi.InstanceCreate();
      //expect(instance).to.be();
    });

    it('should have the property config (base name: "config")', function() {
      // uncomment below and update the code to test the property config
      //var instance = new MorpheusApi.InstanceCreate();
      //expect(instance).to.be();
    });

    it('should have the property labels (base name: "labels")', function() {
      // uncomment below and update the code to test the property labels
      //var instance = new MorpheusApi.InstanceCreate();
      //expect(instance).to.be();
    });

    it('should have the property tags (base name: "tags")', function() {
      // uncomment below and update the code to test the property tags
      //var instance = new MorpheusApi.InstanceCreate();
      //expect(instance).to.be();
    });

    it('should have the property metadata (base name: "metadata")', function() {
      // uncomment below and update the code to test the property metadata
      //var instance = new MorpheusApi.InstanceCreate();
      //expect(instance).to.be();
    });

    it('should have the property ports (base name: "ports")', function() {
      // uncomment below and update the code to test the property ports
      //var instance = new MorpheusApi.InstanceCreate();
      //expect(instance).to.be();
    });

    it('should have the property taskSetId (base name: "taskSetId")', function() {
      // uncomment below and update the code to test the property taskSetId
      //var instance = new MorpheusApi.InstanceCreate();
      //expect(instance).to.be();
    });

    it('should have the property taskSetName (base name: "taskSetName")', function() {
      // uncomment below and update the code to test the property taskSetName
      //var instance = new MorpheusApi.InstanceCreate();
      //expect(instance).to.be();
    });

  });

}));
