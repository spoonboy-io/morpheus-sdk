/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MorpheusApi);
  }
}(this, function(expect, MorpheusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MorpheusApi.GuidanceVmwareSizingConfig();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('GuidanceVmwareSizingConfig', function() {
    it('should create an instance of GuidanceVmwareSizingConfig', function() {
      // uncomment below and update the code to test GuidanceVmwareSizingConfig
      //var instane = new MorpheusApi.GuidanceVmwareSizingConfig();
      //expect(instance).to.be.a(MorpheusApi.GuidanceVmwareSizingConfig);
    });

    it('should have the property exists (base name: "exists")', function() {
      // uncomment below and update the code to test the property exists
      //var instance = new MorpheusApi.GuidanceVmwareSizingConfig();
      //expect(instance).to.be();
    });

    it('should have the property objectId (base name: "objectId")', function() {
      // uncomment below and update the code to test the property objectId
      //var instance = new MorpheusApi.GuidanceVmwareSizingConfig();
      //expect(instance).to.be();
    });

    it('should have the property cpuTotalTimeCount (base name: "cpuTotalTimeCount")', function() {
      // uncomment below and update the code to test the property cpuTotalTimeCount
      //var instance = new MorpheusApi.GuidanceVmwareSizingConfig();
      //expect(instance).to.be();
    });

    it('should have the property cpuTotalTimeMin (base name: "cpuTotalTimeMin")', function() {
      // uncomment below and update the code to test the property cpuTotalTimeMin
      //var instance = new MorpheusApi.GuidanceVmwareSizingConfig();
      //expect(instance).to.be();
    });

    it('should have the property cpuTotalTimeMax (base name: "cpuTotalTimeMax")', function() {
      // uncomment below and update the code to test the property cpuTotalTimeMax
      //var instance = new MorpheusApi.GuidanceVmwareSizingConfig();
      //expect(instance).to.be();
    });

    it('should have the property cpuTotalTimeAvg (base name: "cpuTotalTimeAvg")', function() {
      // uncomment below and update the code to test the property cpuTotalTimeAvg
      //var instance = new MorpheusApi.GuidanceVmwareSizingConfig();
      //expect(instance).to.be();
    });

    it('should have the property cpuTotalTimeSum (base name: "cpuTotalTimeSum")', function() {
      // uncomment below and update the code to test the property cpuTotalTimeSum
      //var instance = new MorpheusApi.GuidanceVmwareSizingConfig();
      //expect(instance).to.be();
    });

    it('should have the property cpuIdleTimeCount (base name: "cpuIdleTimeCount")', function() {
      // uncomment below and update the code to test the property cpuIdleTimeCount
      //var instance = new MorpheusApi.GuidanceVmwareSizingConfig();
      //expect(instance).to.be();
    });

    it('should have the property cpuIdleTimeMin (base name: "cpuIdleTimeMin")', function() {
      // uncomment below and update the code to test the property cpuIdleTimeMin
      //var instance = new MorpheusApi.GuidanceVmwareSizingConfig();
      //expect(instance).to.be();
    });

    it('should have the property cpuIdleTimeMax (base name: "cpuIdleTimeMax")', function() {
      // uncomment below and update the code to test the property cpuIdleTimeMax
      //var instance = new MorpheusApi.GuidanceVmwareSizingConfig();
      //expect(instance).to.be();
    });

    it('should have the property cpuIdleTimeAvg (base name: "cpuIdleTimeAvg")', function() {
      // uncomment below and update the code to test the property cpuIdleTimeAvg
      //var instance = new MorpheusApi.GuidanceVmwareSizingConfig();
      //expect(instance).to.be();
    });

    it('should have the property cpuIdleTimeSum (base name: "cpuIdleTimeSum")', function() {
      // uncomment below and update the code to test the property cpuIdleTimeSum
      //var instance = new MorpheusApi.GuidanceVmwareSizingConfig();
      //expect(instance).to.be();
    });

    it('should have the property cpuUsageCount (base name: "cpuUsageCount")', function() {
      // uncomment below and update the code to test the property cpuUsageCount
      //var instance = new MorpheusApi.GuidanceVmwareSizingConfig();
      //expect(instance).to.be();
    });

    it('should have the property cpuUsageMin (base name: "cpuUsageMin")', function() {
      // uncomment below and update the code to test the property cpuUsageMin
      //var instance = new MorpheusApi.GuidanceVmwareSizingConfig();
      //expect(instance).to.be();
    });

    it('should have the property cpuUsageMax (base name: "cpuUsageMax")', function() {
      // uncomment below and update the code to test the property cpuUsageMax
      //var instance = new MorpheusApi.GuidanceVmwareSizingConfig();
      //expect(instance).to.be();
    });

    it('should have the property cpuUsageAvg (base name: "cpuUsageAvg")', function() {
      // uncomment below and update the code to test the property cpuUsageAvg
      //var instance = new MorpheusApi.GuidanceVmwareSizingConfig();
      //expect(instance).to.be();
    });

    it('should have the property cpuUsageSum (base name: "cpuUsageSum")', function() {
      // uncomment below and update the code to test the property cpuUsageSum
      //var instance = new MorpheusApi.GuidanceVmwareSizingConfig();
      //expect(instance).to.be();
    });

    it('should have the property maxMemoryCount (base name: "maxMemoryCount")', function() {
      // uncomment below and update the code to test the property maxMemoryCount
      //var instance = new MorpheusApi.GuidanceVmwareSizingConfig();
      //expect(instance).to.be();
    });

    it('should have the property maxMemoryMin (base name: "maxMemoryMin")', function() {
      // uncomment below and update the code to test the property maxMemoryMin
      //var instance = new MorpheusApi.GuidanceVmwareSizingConfig();
      //expect(instance).to.be();
    });

    it('should have the property maxMemoryMax (base name: "maxMemoryMax")', function() {
      // uncomment below and update the code to test the property maxMemoryMax
      //var instance = new MorpheusApi.GuidanceVmwareSizingConfig();
      //expect(instance).to.be();
    });

    it('should have the property maxMemoryAvg (base name: "maxMemoryAvg")', function() {
      // uncomment below and update the code to test the property maxMemoryAvg
      //var instance = new MorpheusApi.GuidanceVmwareSizingConfig();
      //expect(instance).to.be();
    });

    it('should have the property maxMemorySum (base name: "maxMemorySum")', function() {
      // uncomment below and update the code to test the property maxMemorySum
      //var instance = new MorpheusApi.GuidanceVmwareSizingConfig();
      //expect(instance).to.be();
    });

    it('should have the property cpuUserTimeCount (base name: "cpuUserTimeCount")', function() {
      // uncomment below and update the code to test the property cpuUserTimeCount
      //var instance = new MorpheusApi.GuidanceVmwareSizingConfig();
      //expect(instance).to.be();
    });

    it('should have the property cpuUserTimeMin (base name: "cpuUserTimeMin")', function() {
      // uncomment below and update the code to test the property cpuUserTimeMin
      //var instance = new MorpheusApi.GuidanceVmwareSizingConfig();
      //expect(instance).to.be();
    });

    it('should have the property cpuUserTimeMax (base name: "cpuUserTimeMax")', function() {
      // uncomment below and update the code to test the property cpuUserTimeMax
      //var instance = new MorpheusApi.GuidanceVmwareSizingConfig();
      //expect(instance).to.be();
    });

    it('should have the property cpuUserTimeAvg (base name: "cpuUserTimeAvg")', function() {
      // uncomment below and update the code to test the property cpuUserTimeAvg
      //var instance = new MorpheusApi.GuidanceVmwareSizingConfig();
      //expect(instance).to.be();
    });

    it('should have the property cpuUserTimeSum (base name: "cpuUserTimeSum")', function() {
      // uncomment below and update the code to test the property cpuUserTimeSum
      //var instance = new MorpheusApi.GuidanceVmwareSizingConfig();
      //expect(instance).to.be();
    });

    it('should have the property cpuSystemTimeCount (base name: "cpuSystemTimeCount")', function() {
      // uncomment below and update the code to test the property cpuSystemTimeCount
      //var instance = new MorpheusApi.GuidanceVmwareSizingConfig();
      //expect(instance).to.be();
    });

    it('should have the property cpuSystemTimeMin (base name: "cpuSystemTimeMin")', function() {
      // uncomment below and update the code to test the property cpuSystemTimeMin
      //var instance = new MorpheusApi.GuidanceVmwareSizingConfig();
      //expect(instance).to.be();
    });

    it('should have the property cpuSystemTimeMax (base name: "cpuSystemTimeMax")', function() {
      // uncomment below and update the code to test the property cpuSystemTimeMax
      //var instance = new MorpheusApi.GuidanceVmwareSizingConfig();
      //expect(instance).to.be();
    });

    it('should have the property cpuSystemTimeAvg (base name: "cpuSystemTimeAvg")', function() {
      // uncomment below and update the code to test the property cpuSystemTimeAvg
      //var instance = new MorpheusApi.GuidanceVmwareSizingConfig();
      //expect(instance).to.be();
    });

    it('should have the property cpuSystemTimeSum (base name: "cpuSystemTimeSum")', function() {
      // uncomment below and update the code to test the property cpuSystemTimeSum
      //var instance = new MorpheusApi.GuidanceVmwareSizingConfig();
      //expect(instance).to.be();
    });

    it('should have the property usedMemoryCount (base name: "usedMemoryCount")', function() {
      // uncomment below and update the code to test the property usedMemoryCount
      //var instance = new MorpheusApi.GuidanceVmwareSizingConfig();
      //expect(instance).to.be();
    });

    it('should have the property usedMemoryMin (base name: "usedMemoryMin")', function() {
      // uncomment below and update the code to test the property usedMemoryMin
      //var instance = new MorpheusApi.GuidanceVmwareSizingConfig();
      //expect(instance).to.be();
    });

    it('should have the property usedMemoryMax (base name: "usedMemoryMax")', function() {
      // uncomment below and update the code to test the property usedMemoryMax
      //var instance = new MorpheusApi.GuidanceVmwareSizingConfig();
      //expect(instance).to.be();
    });

    it('should have the property usedMemoryAvg (base name: "usedMemoryAvg")', function() {
      // uncomment below and update the code to test the property usedMemoryAvg
      //var instance = new MorpheusApi.GuidanceVmwareSizingConfig();
      //expect(instance).to.be();
    });

    it('should have the property usedMemorySum (base name: "usedMemorySum")', function() {
      // uncomment below and update the code to test the property usedMemorySum
      //var instance = new MorpheusApi.GuidanceVmwareSizingConfig();
      //expect(instance).to.be();
    });

    it('should have the property freeMemoryCount (base name: "freeMemoryCount")', function() {
      // uncomment below and update the code to test the property freeMemoryCount
      //var instance = new MorpheusApi.GuidanceVmwareSizingConfig();
      //expect(instance).to.be();
    });

    it('should have the property freeMemoryMin (base name: "freeMemoryMin")', function() {
      // uncomment below and update the code to test the property freeMemoryMin
      //var instance = new MorpheusApi.GuidanceVmwareSizingConfig();
      //expect(instance).to.be();
    });

    it('should have the property freeMemoryMax (base name: "freeMemoryMax")', function() {
      // uncomment below and update the code to test the property freeMemoryMax
      //var instance = new MorpheusApi.GuidanceVmwareSizingConfig();
      //expect(instance).to.be();
    });

    it('should have the property freeMemoryAvg (base name: "freeMemoryAvg")', function() {
      // uncomment below and update the code to test the property freeMemoryAvg
      //var instance = new MorpheusApi.GuidanceVmwareSizingConfig();
      //expect(instance).to.be();
    });

    it('should have the property freeMemorySum (base name: "freeMemorySum")', function() {
      // uncomment below and update the code to test the property freeMemorySum
      //var instance = new MorpheusApi.GuidanceVmwareSizingConfig();
      //expect(instance).to.be();
    });

  });

}));
