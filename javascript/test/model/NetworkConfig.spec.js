/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MorpheusApi);
  }
}(this, function(expect, MorpheusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MorpheusApi.NetworkConfig();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('NetworkConfig', function() {
    it('should create an instance of NetworkConfig', function() {
      // uncomment below and update the code to test NetworkConfig
      //var instane = new MorpheusApi.NetworkConfig();
      //expect(instance).to.be.a(MorpheusApi.NetworkConfig);
    });

    it('should have the property vlanIDs (base name: "vlanIDs")', function() {
      // uncomment below and update the code to test the property vlanIDs
      //var instance = new MorpheusApi.NetworkConfig();
      //expect(instance).to.be();
    });

    it('should have the property connectedGateway (base name: "connectedGateway")', function() {
      // uncomment below and update the code to test the property connectedGateway
      //var instance = new MorpheusApi.NetworkConfig();
      //expect(instance).to.be();
    });

    it('should have the property subnetIpManagementType (base name: "subnetIpManagementType")', function() {
      // uncomment below and update the code to test the property subnetIpManagementType
      //var instance = new MorpheusApi.NetworkConfig();
      //expect(instance).to.be();
    });

    it('should have the property subnetIpServerId (base name: "subnetIpServerId")', function() {
      // uncomment below and update the code to test the property subnetIpServerId
      //var instance = new MorpheusApi.NetworkConfig();
      //expect(instance).to.be();
    });

    it('should have the property dhcpRange (base name: "dhcpRange")', function() {
      // uncomment below and update the code to test the property dhcpRange
      //var instance = new MorpheusApi.NetworkConfig();
      //expect(instance).to.be();
    });

    it('should have the property subnetDhcpServerAddress (base name: "subnetDhcpServerAddress")', function() {
      // uncomment below and update the code to test the property subnetDhcpServerAddress
      //var instance = new MorpheusApi.NetworkConfig();
      //expect(instance).to.be();
    });

    it('should have the property subnetDhcpLeaseTime (base name: "subnetDhcpLeaseTime")', function() {
      // uncomment below and update the code to test the property subnetDhcpLeaseTime
      //var instance = new MorpheusApi.NetworkConfig();
      //expect(instance).to.be();
    });

  });

}));
