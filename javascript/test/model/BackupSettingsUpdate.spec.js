/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.1.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MorpheusApi);
  }
}(this, function(expect, MorpheusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MorpheusApi.BackupSettingsUpdate();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('BackupSettingsUpdate', function() {
    it('should create an instance of BackupSettingsUpdate', function() {
      // uncomment below and update the code to test BackupSettingsUpdate
      //var instance = new MorpheusApi.BackupSettingsUpdate();
      //expect(instance).to.be.a(MorpheusApi.BackupSettingsUpdate);
    });

    it('should have the property backupsEnabled (base name: "backupsEnabled")', function() {
      // uncomment below and update the code to test the property backupsEnabled
      //var instance = new MorpheusApi.BackupSettingsUpdate();
      //expect(instance).to.be();
    });

    it('should have the property retentionCount (base name: "retentionCount")', function() {
      // uncomment below and update the code to test the property retentionCount
      //var instance = new MorpheusApi.BackupSettingsUpdate();
      //expect(instance).to.be();
    });

    it('should have the property createBackups (base name: "createBackups")', function() {
      // uncomment below and update the code to test the property createBackups
      //var instance = new MorpheusApi.BackupSettingsUpdate();
      //expect(instance).to.be();
    });

    it('should have the property backupAppliance (base name: "backupAppliance")', function() {
      // uncomment below and update the code to test the property backupAppliance
      //var instance = new MorpheusApi.BackupSettingsUpdate();
      //expect(instance).to.be();
    });

    it('should have the property updateExisting (base name: "updateExisting")', function() {
      // uncomment below and update the code to test the property updateExisting
      //var instance = new MorpheusApi.BackupSettingsUpdate();
      //expect(instance).to.be();
    });

    it('should have the property defaultSchedule (base name: "defaultSchedule")', function() {
      // uncomment below and update the code to test the property defaultSchedule
      //var instance = new MorpheusApi.BackupSettingsUpdate();
      //expect(instance).to.be();
    });

    it('should have the property clearDefaultSchedule (base name: "clearDefaultSchedule")', function() {
      // uncomment below and update the code to test the property clearDefaultSchedule
      //var instance = new MorpheusApi.BackupSettingsUpdate();
      //expect(instance).to.be();
    });

    it('should have the property defaultStorageBucket (base name: "defaultStorageBucket")', function() {
      // uncomment below and update the code to test the property defaultStorageBucket
      //var instance = new MorpheusApi.BackupSettingsUpdate();
      //expect(instance).to.be();
    });

    it('should have the property clearDefaultStorageBucket (base name: "clearDefaultStorageBucket")', function() {
      // uncomment below and update the code to test the property clearDefaultStorageBucket
      //var instance = new MorpheusApi.BackupSettingsUpdate();
      //expect(instance).to.be();
    });

  });

}));
