/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MorpheusApi);
  }
}(this, function(expect, MorpheusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MorpheusApi.IntegrationAnsibleConfigIntegrationConfig();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('IntegrationAnsibleConfigIntegrationConfig', function() {
    it('should create an instance of IntegrationAnsibleConfigIntegrationConfig', function() {
      // uncomment below and update the code to test IntegrationAnsibleConfigIntegrationConfig
      //var instane = new MorpheusApi.IntegrationAnsibleConfigIntegrationConfig();
      //expect(instance).to.be.a(MorpheusApi.IntegrationAnsibleConfigIntegrationConfig);
    });

    it('should have the property defaultBranch (base name: "defaultBranch")', function() {
      // uncomment below and update the code to test the property defaultBranch
      //var instance = new MorpheusApi.IntegrationAnsibleConfigIntegrationConfig();
      //expect(instance).to.be();
    });

    it('should have the property ansiblePlaybooks (base name: "ansiblePlaybooks")', function() {
      // uncomment below and update the code to test the property ansiblePlaybooks
      //var instance = new MorpheusApi.IntegrationAnsibleConfigIntegrationConfig();
      //expect(instance).to.be();
    });

    it('should have the property ansibleRoles (base name: "ansibleRoles")', function() {
      // uncomment below and update the code to test the property ansibleRoles
      //var instance = new MorpheusApi.IntegrationAnsibleConfigIntegrationConfig();
      //expect(instance).to.be();
    });

    it('should have the property ansibleGroupVars (base name: "ansibleGroupVars")', function() {
      // uncomment below and update the code to test the property ansibleGroupVars
      //var instance = new MorpheusApi.IntegrationAnsibleConfigIntegrationConfig();
      //expect(instance).to.be();
    });

    it('should have the property ansibleHostVars (base name: "ansibleHostVars")', function() {
      // uncomment below and update the code to test the property ansibleHostVars
      //var instance = new MorpheusApi.IntegrationAnsibleConfigIntegrationConfig();
      //expect(instance).to.be();
    });

    it('should have the property ansibleGalaxyEnabled (base name: "ansibleGalaxyEnabled")', function() {
      // uncomment below and update the code to test the property ansibleGalaxyEnabled
      //var instance = new MorpheusApi.IntegrationAnsibleConfigIntegrationConfig();
      //expect(instance).to.be();
    });

    it('should have the property ansibleVerbose (base name: "ansibleVerbose")', function() {
      // uncomment below and update the code to test the property ansibleVerbose
      //var instance = new MorpheusApi.IntegrationAnsibleConfigIntegrationConfig();
      //expect(instance).to.be();
    });

    it('should have the property ansibleCommandBus (base name: "ansibleCommandBus")', function() {
      // uncomment below and update the code to test the property ansibleCommandBus
      //var instance = new MorpheusApi.IntegrationAnsibleConfigIntegrationConfig();
      //expect(instance).to.be();
    });

    it('should have the property cacheEnabled (base name: "cacheEnabled")', function() {
      // uncomment below and update the code to test the property cacheEnabled
      //var instance = new MorpheusApi.IntegrationAnsibleConfigIntegrationConfig();
      //expect(instance).to.be();
    });

  });

}));
