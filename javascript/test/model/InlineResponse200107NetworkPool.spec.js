/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MorpheusApi);
  }
}(this, function(expect, MorpheusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MorpheusApi.InlineResponse200107NetworkPool();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('InlineResponse200107NetworkPool', function() {
    it('should create an instance of InlineResponse200107NetworkPool', function() {
      // uncomment below and update the code to test InlineResponse200107NetworkPool
      //var instane = new MorpheusApi.InlineResponse200107NetworkPool();
      //expect(instance).to.be.a(MorpheusApi.InlineResponse200107NetworkPool);
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new MorpheusApi.InlineResponse200107NetworkPool();
      //expect(instance).to.be();
    });

    it('should have the property networkPoolId (base name: "networkPoolId")', function() {
      // uncomment below and update the code to test the property networkPoolId
      //var instance = new MorpheusApi.InlineResponse200107NetworkPool();
      //expect(instance).to.be();
    });

    it('should have the property ipType (base name: "ipType")', function() {
      // uncomment below and update the code to test the property ipType
      //var instance = new MorpheusApi.InlineResponse200107NetworkPool();
      //expect(instance).to.be();
    });

    it('should have the property ipAddress (base name: "ipAddress")', function() {
      // uncomment below and update the code to test the property ipAddress
      //var instance = new MorpheusApi.InlineResponse200107NetworkPool();
      //expect(instance).to.be();
    });

    it('should have the property gatewayAddress (base name: "gatewayAddress")', function() {
      // uncomment below and update the code to test the property gatewayAddress
      //var instance = new MorpheusApi.InlineResponse200107NetworkPool();
      //expect(instance).to.be();
    });

    it('should have the property subnetMask (base name: "subnetMask")', function() {
      // uncomment below and update the code to test the property subnetMask
      //var instance = new MorpheusApi.InlineResponse200107NetworkPool();
      //expect(instance).to.be();
    });

    it('should have the property dnsServer (base name: "dnsServer")', function() {
      // uncomment below and update the code to test the property dnsServer
      //var instance = new MorpheusApi.InlineResponse200107NetworkPool();
      //expect(instance).to.be();
    });

    it('should have the property interfaceName (base name: "interfaceName")', function() {
      // uncomment below and update the code to test the property interfaceName
      //var instance = new MorpheusApi.InlineResponse200107NetworkPool();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new MorpheusApi.InlineResponse200107NetworkPool();
      //expect(instance).to.be();
    });

    it('should have the property active (base name: "active")', function() {
      // uncomment below and update the code to test the property active
      //var instance = new MorpheusApi.InlineResponse200107NetworkPool();
      //expect(instance).to.be();
    });

    it('should have the property staticIp (base name: "staticIp")', function() {
      // uncomment below and update the code to test the property staticIp
      //var instance = new MorpheusApi.InlineResponse200107NetworkPool();
      //expect(instance).to.be();
    });

    it('should have the property fqdn (base name: "fqdn")', function() {
      // uncomment below and update the code to test the property fqdn
      //var instance = new MorpheusApi.InlineResponse200107NetworkPool();
      //expect(instance).to.be();
    });

    it('should have the property domainName (base name: "domainName")', function() {
      // uncomment below and update the code to test the property domainName
      //var instance = new MorpheusApi.InlineResponse200107NetworkPool();
      //expect(instance).to.be();
    });

    it('should have the property hostname (base name: "hostname")', function() {
      // uncomment below and update the code to test the property hostname
      //var instance = new MorpheusApi.InlineResponse200107NetworkPool();
      //expect(instance).to.be();
    });

    it('should have the property internalId (base name: "internalId")', function() {
      // uncomment below and update the code to test the property internalId
      //var instance = new MorpheusApi.InlineResponse200107NetworkPool();
      //expect(instance).to.be();
    });

    it('should have the property externalId (base name: "externalId")', function() {
      // uncomment below and update the code to test the property externalId
      //var instance = new MorpheusApi.InlineResponse200107NetworkPool();
      //expect(instance).to.be();
    });

    it('should have the property ptrId (base name: "ptrId")', function() {
      // uncomment below and update the code to test the property ptrId
      //var instance = new MorpheusApi.InlineResponse200107NetworkPool();
      //expect(instance).to.be();
    });

    it('should have the property dateCreated (base name: "dateCreated")', function() {
      // uncomment below and update the code to test the property dateCreated
      //var instance = new MorpheusApi.InlineResponse200107NetworkPool();
      //expect(instance).to.be();
    });

    it('should have the property lastUpdated (base name: "lastUpdated")', function() {
      // uncomment below and update the code to test the property lastUpdated
      //var instance = new MorpheusApi.InlineResponse200107NetworkPool();
      //expect(instance).to.be();
    });

    it('should have the property startDate (base name: "startDate")', function() {
      // uncomment below and update the code to test the property startDate
      //var instance = new MorpheusApi.InlineResponse200107NetworkPool();
      //expect(instance).to.be();
    });

    it('should have the property endDate (base name: "endDate")', function() {
      // uncomment below and update the code to test the property endDate
      //var instance = new MorpheusApi.InlineResponse200107NetworkPool();
      //expect(instance).to.be();
    });

    it('should have the property refType (base name: "refType")', function() {
      // uncomment below and update the code to test the property refType
      //var instance = new MorpheusApi.InlineResponse200107NetworkPool();
      //expect(instance).to.be();
    });

    it('should have the property refId (base name: "refId")', function() {
      // uncomment below and update the code to test the property refId
      //var instance = new MorpheusApi.InlineResponse200107NetworkPool();
      //expect(instance).to.be();
    });

    it('should have the property subRefId (base name: "subRefId")', function() {
      // uncomment below and update the code to test the property subRefId
      //var instance = new MorpheusApi.InlineResponse200107NetworkPool();
      //expect(instance).to.be();
    });

    it('should have the property networkDomain (base name: "networkDomain")', function() {
      // uncomment below and update the code to test the property networkDomain
      //var instance = new MorpheusApi.InlineResponse200107NetworkPool();
      //expect(instance).to.be();
    });

    it('should have the property createdBy (base name: "createdBy")', function() {
      // uncomment below and update the code to test the property createdBy
      //var instance = new MorpheusApi.InlineResponse200107NetworkPool();
      //expect(instance).to.be();
    });

  });

}));
