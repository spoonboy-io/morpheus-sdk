/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MorpheusApi);
  }
}(this, function(expect, MorpheusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MorpheusApi.InlineResponse20082LoadBalancerInstance();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('InlineResponse20082LoadBalancerInstance', function() {
    it('should create an instance of InlineResponse20082LoadBalancerInstance', function() {
      // uncomment below and update the code to test InlineResponse20082LoadBalancerInstance
      //var instane = new MorpheusApi.InlineResponse20082LoadBalancerInstance();
      //expect(instance).to.be.a(MorpheusApi.InlineResponse20082LoadBalancerInstance);
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new MorpheusApi.InlineResponse20082LoadBalancerInstance();
      //expect(instance).to.be();
    });

    it('should have the property loadBalancer (base name: "loadBalancer")', function() {
      // uncomment below and update the code to test the property loadBalancer
      //var instance = new MorpheusApi.InlineResponse20082LoadBalancerInstance();
      //expect(instance).to.be();
    });

    it('should have the property instance (base name: "instance")', function() {
      // uncomment below and update the code to test the property instance
      //var instance = new MorpheusApi.InlineResponse20082LoadBalancerInstance();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new MorpheusApi.InlineResponse20082LoadBalancerInstance();
      //expect(instance).to.be();
    });

    it('should have the property internalId (base name: "internalId")', function() {
      // uncomment below and update the code to test the property internalId
      //var instance = new MorpheusApi.InlineResponse20082LoadBalancerInstance();
      //expect(instance).to.be();
    });

    it('should have the property externalId (base name: "externalId")', function() {
      // uncomment below and update the code to test the property externalId
      //var instance = new MorpheusApi.InlineResponse20082LoadBalancerInstance();
      //expect(instance).to.be();
    });

    it('should have the property dateCreated (base name: "dateCreated")', function() {
      // uncomment below and update the code to test the property dateCreated
      //var instance = new MorpheusApi.InlineResponse20082LoadBalancerInstance();
      //expect(instance).to.be();
    });

    it('should have the property lastUpdated (base name: "lastUpdated")', function() {
      // uncomment below and update the code to test the property lastUpdated
      //var instance = new MorpheusApi.InlineResponse20082LoadBalancerInstance();
      //expect(instance).to.be();
    });

    it('should have the property active (base name: "active")', function() {
      // uncomment below and update the code to test the property active
      //var instance = new MorpheusApi.InlineResponse20082LoadBalancerInstance();
      //expect(instance).to.be();
    });

    it('should have the property sticky (base name: "sticky")', function() {
      // uncomment below and update the code to test the property sticky
      //var instance = new MorpheusApi.InlineResponse20082LoadBalancerInstance();
      //expect(instance).to.be();
    });

    it('should have the property sslEnabled (base name: "sslEnabled")', function() {
      // uncomment below and update the code to test the property sslEnabled
      //var instance = new MorpheusApi.InlineResponse20082LoadBalancerInstance();
      //expect(instance).to.be();
    });

    it('should have the property externalAddress (base name: "externalAddress")', function() {
      // uncomment below and update the code to test the property externalAddress
      //var instance = new MorpheusApi.InlineResponse20082LoadBalancerInstance();
      //expect(instance).to.be();
    });

    it('should have the property backendPort (base name: "backendPort")', function() {
      // uncomment below and update the code to test the property backendPort
      //var instance = new MorpheusApi.InlineResponse20082LoadBalancerInstance();
      //expect(instance).to.be();
    });

    it('should have the property vipType (base name: "vipType")', function() {
      // uncomment below and update the code to test the property vipType
      //var instance = new MorpheusApi.InlineResponse20082LoadBalancerInstance();
      //expect(instance).to.be();
    });

    it('should have the property vipAddress (base name: "vipAddress")', function() {
      // uncomment below and update the code to test the property vipAddress
      //var instance = new MorpheusApi.InlineResponse20082LoadBalancerInstance();
      //expect(instance).to.be();
    });

    it('should have the property vipHostname (base name: "vipHostname")', function() {
      // uncomment below and update the code to test the property vipHostname
      //var instance = new MorpheusApi.InlineResponse20082LoadBalancerInstance();
      //expect(instance).to.be();
    });

    it('should have the property vipProtocol (base name: "vipProtocol")', function() {
      // uncomment below and update the code to test the property vipProtocol
      //var instance = new MorpheusApi.InlineResponse20082LoadBalancerInstance();
      //expect(instance).to.be();
    });

    it('should have the property vipScheme (base name: "vipScheme")', function() {
      // uncomment below and update the code to test the property vipScheme
      //var instance = new MorpheusApi.InlineResponse20082LoadBalancerInstance();
      //expect(instance).to.be();
    });

    it('should have the property vipMode (base name: "vipMode")', function() {
      // uncomment below and update the code to test the property vipMode
      //var instance = new MorpheusApi.InlineResponse20082LoadBalancerInstance();
      //expect(instance).to.be();
    });

    it('should have the property vipName (base name: "vipName")', function() {
      // uncomment below and update the code to test the property vipName
      //var instance = new MorpheusApi.InlineResponse20082LoadBalancerInstance();
      //expect(instance).to.be();
    });

    it('should have the property vipPort (base name: "vipPort")', function() {
      // uncomment below and update the code to test the property vipPort
      //var instance = new MorpheusApi.InlineResponse20082LoadBalancerInstance();
      //expect(instance).to.be();
    });

    it('should have the property vipSticky (base name: "vipSticky")', function() {
      // uncomment below and update the code to test the property vipSticky
      //var instance = new MorpheusApi.InlineResponse20082LoadBalancerInstance();
      //expect(instance).to.be();
    });

    it('should have the property vipBalance (base name: "vipBalance")', function() {
      // uncomment below and update the code to test the property vipBalance
      //var instance = new MorpheusApi.InlineResponse20082LoadBalancerInstance();
      //expect(instance).to.be();
    });

    it('should have the property servicePort (base name: "servicePort")', function() {
      // uncomment below and update the code to test the property servicePort
      //var instance = new MorpheusApi.InlineResponse20082LoadBalancerInstance();
      //expect(instance).to.be();
    });

    it('should have the property sourceAddress (base name: "sourceAddress")', function() {
      // uncomment below and update the code to test the property sourceAddress
      //var instance = new MorpheusApi.InlineResponse20082LoadBalancerInstance();
      //expect(instance).to.be();
    });

    it('should have the property sslCert (base name: "sslCert")', function() {
      // uncomment below and update the code to test the property sslCert
      //var instance = new MorpheusApi.InlineResponse20082LoadBalancerInstance();
      //expect(instance).to.be();
    });

    it('should have the property sslMode (base name: "sslMode")', function() {
      // uncomment below and update the code to test the property sslMode
      //var instance = new MorpheusApi.InlineResponse20082LoadBalancerInstance();
      //expect(instance).to.be();
    });

    it('should have the property sslRedirectMode (base name: "sslRedirectMode")', function() {
      // uncomment below and update the code to test the property sslRedirectMode
      //var instance = new MorpheusApi.InlineResponse20082LoadBalancerInstance();
      //expect(instance).to.be();
    });

    it('should have the property vipShared (base name: "vipShared")', function() {
      // uncomment below and update the code to test the property vipShared
      //var instance = new MorpheusApi.InlineResponse20082LoadBalancerInstance();
      //expect(instance).to.be();
    });

    it('should have the property vipDirectAddress (base name: "vipDirectAddress")', function() {
      // uncomment below and update the code to test the property vipDirectAddress
      //var instance = new MorpheusApi.InlineResponse20082LoadBalancerInstance();
      //expect(instance).to.be();
    });

    it('should have the property serverName (base name: "serverName")', function() {
      // uncomment below and update the code to test the property serverName
      //var instance = new MorpheusApi.InlineResponse20082LoadBalancerInstance();
      //expect(instance).to.be();
    });

    it('should have the property poolName (base name: "poolName")', function() {
      // uncomment below and update the code to test the property poolName
      //var instance = new MorpheusApi.InlineResponse20082LoadBalancerInstance();
      //expect(instance).to.be();
    });

    it('should have the property removing (base name: "removing")', function() {
      // uncomment below and update the code to test the property removing
      //var instance = new MorpheusApi.InlineResponse20082LoadBalancerInstance();
      //expect(instance).to.be();
    });

    it('should have the property vipSource (base name: "vipSource")', function() {
      // uncomment below and update the code to test the property vipSource
      //var instance = new MorpheusApi.InlineResponse20082LoadBalancerInstance();
      //expect(instance).to.be();
    });

    it('should have the property extraConfig (base name: "extraConfig")', function() {
      // uncomment below and update the code to test the property extraConfig
      //var instance = new MorpheusApi.InlineResponse20082LoadBalancerInstance();
      //expect(instance).to.be();
    });

    it('should have the property serviceAccess (base name: "serviceAccess")', function() {
      // uncomment below and update the code to test the property serviceAccess
      //var instance = new MorpheusApi.InlineResponse20082LoadBalancerInstance();
      //expect(instance).to.be();
    });

    it('should have the property networkId (base name: "networkId")', function() {
      // uncomment below and update the code to test the property networkId
      //var instance = new MorpheusApi.InlineResponse20082LoadBalancerInstance();
      //expect(instance).to.be();
    });

    it('should have the property subnetId (base name: "subnetId")', function() {
      // uncomment below and update the code to test the property subnetId
      //var instance = new MorpheusApi.InlineResponse20082LoadBalancerInstance();
      //expect(instance).to.be();
    });

    it('should have the property externalPortId (base name: "externalPortId")', function() {
      // uncomment below and update the code to test the property externalPortId
      //var instance = new MorpheusApi.InlineResponse20082LoadBalancerInstance();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new MorpheusApi.InlineResponse20082LoadBalancerInstance();
      //expect(instance).to.be();
    });

    it('should have the property vipStatus (base name: "vipStatus")', function() {
      // uncomment below and update the code to test the property vipStatus
      //var instance = new MorpheusApi.InlineResponse20082LoadBalancerInstance();
      //expect(instance).to.be();
    });

  });

}));
