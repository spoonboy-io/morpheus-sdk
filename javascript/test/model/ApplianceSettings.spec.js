/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.1.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MorpheusApi);
  }
}(this, function(expect, MorpheusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MorpheusApi.ApplianceSettings();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ApplianceSettings', function() {
    it('should create an instance of ApplianceSettings', function() {
      // uncomment below and update the code to test ApplianceSettings
      //var instance = new MorpheusApi.ApplianceSettings();
      //expect(instance).to.be.a(MorpheusApi.ApplianceSettings);
    });

    it('should have the property applianceUrl (base name: "applianceUrl")', function() {
      // uncomment below and update the code to test the property applianceUrl
      //var instance = new MorpheusApi.ApplianceSettings();
      //expect(instance).to.be();
    });

    it('should have the property internalApplianceUrl (base name: "internalApplianceUrl")', function() {
      // uncomment below and update the code to test the property internalApplianceUrl
      //var instance = new MorpheusApi.ApplianceSettings();
      //expect(instance).to.be();
    });

    it('should have the property corsAllowed (base name: "corsAllowed")', function() {
      // uncomment below and update the code to test the property corsAllowed
      //var instance = new MorpheusApi.ApplianceSettings();
      //expect(instance).to.be();
    });

    it('should have the property registrationEnabled (base name: "registrationEnabled")', function() {
      // uncomment below and update the code to test the property registrationEnabled
      //var instance = new MorpheusApi.ApplianceSettings();
      //expect(instance).to.be();
    });

    it('should have the property defaultRoleId (base name: "defaultRoleId")', function() {
      // uncomment below and update the code to test the property defaultRoleId
      //var instance = new MorpheusApi.ApplianceSettings();
      //expect(instance).to.be();
    });

    it('should have the property defaultUserRoleId (base name: "defaultUserRoleId")', function() {
      // uncomment below and update the code to test the property defaultUserRoleId
      //var instance = new MorpheusApi.ApplianceSettings();
      //expect(instance).to.be();
    });

    it('should have the property dockerPrivilegedMode (base name: "dockerPrivilegedMode")', function() {
      // uncomment below and update the code to test the property dockerPrivilegedMode
      //var instance = new MorpheusApi.ApplianceSettings();
      //expect(instance).to.be();
    });

    it('should have the property expirePwdDays (base name: "expirePwdDays")', function() {
      // uncomment below and update the code to test the property expirePwdDays
      //var instance = new MorpheusApi.ApplianceSettings();
      //expect(instance).to.be();
    });

    it('should have the property disableAfterAttempts (base name: "disableAfterAttempts")', function() {
      // uncomment below and update the code to test the property disableAfterAttempts
      //var instance = new MorpheusApi.ApplianceSettings();
      //expect(instance).to.be();
    });

    it('should have the property disableAfterDaysInactive (base name: "disableAfterDaysInactive")', function() {
      // uncomment below and update the code to test the property disableAfterDaysInactive
      //var instance = new MorpheusApi.ApplianceSettings();
      //expect(instance).to.be();
    });

    it('should have the property warnUserDaysBefore (base name: "warnUserDaysBefore")', function() {
      // uncomment below and update the code to test the property warnUserDaysBefore
      //var instance = new MorpheusApi.ApplianceSettings();
      //expect(instance).to.be();
    });

    it('should have the property smtpMailFrom (base name: "smtpMailFrom")', function() {
      // uncomment below and update the code to test the property smtpMailFrom
      //var instance = new MorpheusApi.ApplianceSettings();
      //expect(instance).to.be();
    });

    it('should have the property smtpServer (base name: "smtpServer")', function() {
      // uncomment below and update the code to test the property smtpServer
      //var instance = new MorpheusApi.ApplianceSettings();
      //expect(instance).to.be();
    });

    it('should have the property smtpPort (base name: "smtpPort")', function() {
      // uncomment below and update the code to test the property smtpPort
      //var instance = new MorpheusApi.ApplianceSettings();
      //expect(instance).to.be();
    });

    it('should have the property smtpSSL (base name: "smtpSSL")', function() {
      // uncomment below and update the code to test the property smtpSSL
      //var instance = new MorpheusApi.ApplianceSettings();
      //expect(instance).to.be();
    });

    it('should have the property smtpTLS (base name: "smtpTLS")', function() {
      // uncomment below and update the code to test the property smtpTLS
      //var instance = new MorpheusApi.ApplianceSettings();
      //expect(instance).to.be();
    });

    it('should have the property smtpUser (base name: "smtpUser")', function() {
      // uncomment below and update the code to test the property smtpUser
      //var instance = new MorpheusApi.ApplianceSettings();
      //expect(instance).to.be();
    });

    it('should have the property smtpPassword (base name: "smtpPassword")', function() {
      // uncomment below and update the code to test the property smtpPassword
      //var instance = new MorpheusApi.ApplianceSettings();
      //expect(instance).to.be();
    });

    it('should have the property smtpPasswordHash (base name: "smtpPasswordHash")', function() {
      // uncomment below and update the code to test the property smtpPasswordHash
      //var instance = new MorpheusApi.ApplianceSettings();
      //expect(instance).to.be();
    });

    it('should have the property proxyHost (base name: "proxyHost")', function() {
      // uncomment below and update the code to test the property proxyHost
      //var instance = new MorpheusApi.ApplianceSettings();
      //expect(instance).to.be();
    });

    it('should have the property proxyPort (base name: "proxyPort")', function() {
      // uncomment below and update the code to test the property proxyPort
      //var instance = new MorpheusApi.ApplianceSettings();
      //expect(instance).to.be();
    });

    it('should have the property proxyUser (base name: "proxyUser")', function() {
      // uncomment below and update the code to test the property proxyUser
      //var instance = new MorpheusApi.ApplianceSettings();
      //expect(instance).to.be();
    });

    it('should have the property proxyPassword (base name: "proxyPassword")', function() {
      // uncomment below and update the code to test the property proxyPassword
      //var instance = new MorpheusApi.ApplianceSettings();
      //expect(instance).to.be();
    });

    it('should have the property proxyPasswordHash (base name: "proxyPasswordHash")', function() {
      // uncomment below and update the code to test the property proxyPasswordHash
      //var instance = new MorpheusApi.ApplianceSettings();
      //expect(instance).to.be();
    });

    it('should have the property proxyDomain (base name: "proxyDomain")', function() {
      // uncomment below and update the code to test the property proxyDomain
      //var instance = new MorpheusApi.ApplianceSettings();
      //expect(instance).to.be();
    });

    it('should have the property proxyWorkstation (base name: "proxyWorkstation")', function() {
      // uncomment below and update the code to test the property proxyWorkstation
      //var instance = new MorpheusApi.ApplianceSettings();
      //expect(instance).to.be();
    });

    it('should have the property currencyProvider (base name: "currencyProvider")', function() {
      // uncomment below and update the code to test the property currencyProvider
      //var instance = new MorpheusApi.ApplianceSettings();
      //expect(instance).to.be();
    });

    it('should have the property currencyKey (base name: "currencyKey")', function() {
      // uncomment below and update the code to test the property currencyKey
      //var instance = new MorpheusApi.ApplianceSettings();
      //expect(instance).to.be();
    });

    it('should have the property enabledZoneTypes (base name: "enabledZoneTypes")', function() {
      // uncomment below and update the code to test the property enabledZoneTypes
      //var instance = new MorpheusApi.ApplianceSettings();
      //expect(instance).to.be();
    });

    it('should have the property statsRetainmentPeriod (base name: "statsRetainmentPeriod")', function() {
      // uncomment below and update the code to test the property statsRetainmentPeriod
      //var instance = new MorpheusApi.ApplianceSettings();
      //expect(instance).to.be();
    });

  });

}));
