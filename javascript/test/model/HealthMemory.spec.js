/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MorpheusApi);
  }
}(this, function(expect, MorpheusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MorpheusApi.HealthMemory();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('HealthMemory', function() {
    it('should create an instance of HealthMemory', function() {
      // uncomment below and update the code to test HealthMemory
      //var instane = new MorpheusApi.HealthMemory();
      //expect(instance).to.be.a(MorpheusApi.HealthMemory);
    });

    it('should have the property success (base name: "success")', function() {
      // uncomment below and update the code to test the property success
      //var instance = new MorpheusApi.HealthMemory();
      //expect(instance).to.be();
    });

    it('should have the property maxMemory (base name: "maxMemory")', function() {
      // uncomment below and update the code to test the property maxMemory
      //var instance = new MorpheusApi.HealthMemory();
      //expect(instance).to.be();
    });

    it('should have the property totalMemory (base name: "totalMemory")', function() {
      // uncomment below and update the code to test the property totalMemory
      //var instance = new MorpheusApi.HealthMemory();
      //expect(instance).to.be();
    });

    it('should have the property freeMemory (base name: "freeMemory")', function() {
      // uncomment below and update the code to test the property freeMemory
      //var instance = new MorpheusApi.HealthMemory();
      //expect(instance).to.be();
    });

    it('should have the property usedMemory (base name: "usedMemory")', function() {
      // uncomment below and update the code to test the property usedMemory
      //var instance = new MorpheusApi.HealthMemory();
      //expect(instance).to.be();
    });

    it('should have the property systemMemory (base name: "systemMemory")', function() {
      // uncomment below and update the code to test the property systemMemory
      //var instance = new MorpheusApi.HealthMemory();
      //expect(instance).to.be();
    });

    it('should have the property committedMemory (base name: "committedMemory")', function() {
      // uncomment below and update the code to test the property committedMemory
      //var instance = new MorpheusApi.HealthMemory();
      //expect(instance).to.be();
    });

    it('should have the property systemFreeMemory (base name: "systemFreeMemory")', function() {
      // uncomment below and update the code to test the property systemFreeMemory
      //var instance = new MorpheusApi.HealthMemory();
      //expect(instance).to.be();
    });

    it('should have the property systemSwap (base name: "systemSwap")', function() {
      // uncomment below and update the code to test the property systemSwap
      //var instance = new MorpheusApi.HealthMemory();
      //expect(instance).to.be();
    });

    it('should have the property systemFreeSwap (base name: "systemFreeSwap")', function() {
      // uncomment below and update the code to test the property systemFreeSwap
      //var instance = new MorpheusApi.HealthMemory();
      //expect(instance).to.be();
    });

    it('should have the property swapPercent (base name: "swapPercent")', function() {
      // uncomment below and update the code to test the property swapPercent
      //var instance = new MorpheusApi.HealthMemory();
      //expect(instance).to.be();
    });

    it('should have the property memoryPercent (base name: "memoryPercent")', function() {
      // uncomment below and update the code to test the property memoryPercent
      //var instance = new MorpheusApi.HealthMemory();
      //expect(instance).to.be();
    });

    it('should have the property systemMemoryPercent (base name: "systemMemoryPercent")', function() {
      // uncomment below and update the code to test the property systemMemoryPercent
      //var instance = new MorpheusApi.HealthMemory();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new MorpheusApi.HealthMemory();
      //expect(instance).to.be();
    });

  });

}));
