/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MorpheusApi);
  }
}(this, function(expect, MorpheusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MorpheusApi.HostUpdate();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('HostUpdate', function() {
    it('should create an instance of HostUpdate', function() {
      // uncomment below and update the code to test HostUpdate
      //var instane = new MorpheusApi.HostUpdate();
      //expect(instance).to.be.a(MorpheusApi.HostUpdate);
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new MorpheusApi.HostUpdate();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new MorpheusApi.HostUpdate();
      //expect(instance).to.be();
    });

    it('should have the property sshUsername (base name: "sshUsername")', function() {
      // uncomment below and update the code to test the property sshUsername
      //var instance = new MorpheusApi.HostUpdate();
      //expect(instance).to.be();
    });

    it('should have the property sshPassword (base name: "sshPassword")', function() {
      // uncomment below and update the code to test the property sshPassword
      //var instance = new MorpheusApi.HostUpdate();
      //expect(instance).to.be();
    });

    it('should have the property powerScheduleType (base name: "powerScheduleType")', function() {
      // uncomment below and update the code to test the property powerScheduleType
      //var instance = new MorpheusApi.HostUpdate();
      //expect(instance).to.be();
    });

    it('should have the property labels (base name: "labels")', function() {
      // uncomment below and update the code to test the property labels
      //var instance = new MorpheusApi.HostUpdate();
      //expect(instance).to.be();
    });

    it('should have the property tags (base name: "tags")', function() {
      // uncomment below and update the code to test the property tags
      //var instance = new MorpheusApi.HostUpdate();
      //expect(instance).to.be();
    });

    it('should have the property addTags (base name: "addTags")', function() {
      // uncomment below and update the code to test the property addTags
      //var instance = new MorpheusApi.HostUpdate();
      //expect(instance).to.be();
    });

    it('should have the property removeTags (base name: "removeTags")', function() {
      // uncomment below and update the code to test the property removeTags
      //var instance = new MorpheusApi.HostUpdate();
      //expect(instance).to.be();
    });

    it('should have the property guestConsoleType (base name: "guestConsoleType")', function() {
      // uncomment below and update the code to test the property guestConsoleType
      //var instance = new MorpheusApi.HostUpdate();
      //expect(instance).to.be();
    });

    it('should have the property guestConsoleUsername (base name: "guestConsoleUsername")', function() {
      // uncomment below and update the code to test the property guestConsoleUsername
      //var instance = new MorpheusApi.HostUpdate();
      //expect(instance).to.be();
    });

    it('should have the property guestConsolePassword (base name: "guestConsolePassword")', function() {
      // uncomment below and update the code to test the property guestConsolePassword
      //var instance = new MorpheusApi.HostUpdate();
      //expect(instance).to.be();
    });

    it('should have the property guestConsolePort (base name: "guestConsolePort")', function() {
      // uncomment below and update the code to test the property guestConsolePort
      //var instance = new MorpheusApi.HostUpdate();
      //expect(instance).to.be();
    });

    it('should have the property guestConsolePreferred (base name: "guestConsolePreferred")', function() {
      // uncomment below and update the code to test the property guestConsolePreferred
      //var instance = new MorpheusApi.HostUpdate();
      //expect(instance).to.be();
    });

  });

}));
