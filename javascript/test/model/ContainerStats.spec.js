/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MorpheusApi);
  }
}(this, function(expect, MorpheusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MorpheusApi.ContainerStats();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ContainerStats', function() {
    it('should create an instance of ContainerStats', function() {
      // uncomment below and update the code to test ContainerStats
      //var instane = new MorpheusApi.ContainerStats();
      //expect(instance).to.be.a(MorpheusApi.ContainerStats);
    });

    it('should have the property ts (base name: "ts")', function() {
      // uncomment below and update the code to test the property ts
      //var instance = new MorpheusApi.ContainerStats();
      //expect(instance).to.be();
    });

    it('should have the property running (base name: "running")', function() {
      // uncomment below and update the code to test the property running
      //var instance = new MorpheusApi.ContainerStats();
      //expect(instance).to.be();
    });

    it('should have the property userCpuUsage (base name: "userCpuUsage")', function() {
      // uncomment below and update the code to test the property userCpuUsage
      //var instance = new MorpheusApi.ContainerStats();
      //expect(instance).to.be();
    });

    it('should have the property systemCpuUsage (base name: "systemCpuUsage")', function() {
      // uncomment below and update the code to test the property systemCpuUsage
      //var instance = new MorpheusApi.ContainerStats();
      //expect(instance).to.be();
    });

    it('should have the property usedMemory (base name: "usedMemory")', function() {
      // uncomment below and update the code to test the property usedMemory
      //var instance = new MorpheusApi.ContainerStats();
      //expect(instance).to.be();
    });

    it('should have the property maxMemory (base name: "maxMemory")', function() {
      // uncomment below and update the code to test the property maxMemory
      //var instance = new MorpheusApi.ContainerStats();
      //expect(instance).to.be();
    });

    it('should have the property cacheMemory (base name: "cacheMemory")', function() {
      // uncomment below and update the code to test the property cacheMemory
      //var instance = new MorpheusApi.ContainerStats();
      //expect(instance).to.be();
    });

    it('should have the property maxStorage (base name: "maxStorage")', function() {
      // uncomment below and update the code to test the property maxStorage
      //var instance = new MorpheusApi.ContainerStats();
      //expect(instance).to.be();
    });

    it('should have the property usedStorage (base name: "usedStorage")', function() {
      // uncomment below and update the code to test the property usedStorage
      //var instance = new MorpheusApi.ContainerStats();
      //expect(instance).to.be();
    });

    it('should have the property readIOPS (base name: "readIOPS")', function() {
      // uncomment below and update the code to test the property readIOPS
      //var instance = new MorpheusApi.ContainerStats();
      //expect(instance).to.be();
    });

    it('should have the property writeIOPS (base name: "writeIOPS")', function() {
      // uncomment below and update the code to test the property writeIOPS
      //var instance = new MorpheusApi.ContainerStats();
      //expect(instance).to.be();
    });

    it('should have the property totalIOPS (base name: "totalIOPS")', function() {
      // uncomment below and update the code to test the property totalIOPS
      //var instance = new MorpheusApi.ContainerStats();
      //expect(instance).to.be();
    });

    it('should have the property netTxUsage (base name: "netTxUsage")', function() {
      // uncomment below and update the code to test the property netTxUsage
      //var instance = new MorpheusApi.ContainerStats();
      //expect(instance).to.be();
    });

    it('should have the property netRxUsage (base name: "netRxUsage")', function() {
      // uncomment below and update the code to test the property netRxUsage
      //var instance = new MorpheusApi.ContainerStats();
      //expect(instance).to.be();
    });

  });

}));
