/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MorpheusApi);
  }
}(this, function(expect, MorpheusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MorpheusApi.InstanceTypeLayout();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('InstanceTypeLayout', function() {
    it('should create an instance of InstanceTypeLayout', function() {
      // uncomment below and update the code to test InstanceTypeLayout
      //var instane = new MorpheusApi.InstanceTypeLayout();
      //expect(instance).to.be.a(MorpheusApi.InstanceTypeLayout);
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new MorpheusApi.InstanceTypeLayout();
      //expect(instance).to.be();
    });

    it('should have the property instanceType (base name: "instanceType")', function() {
      // uncomment below and update the code to test the property instanceType
      //var instance = new MorpheusApi.InstanceTypeLayout();
      //expect(instance).to.be();
    });

    it('should have the property account (base name: "account")', function() {
      // uncomment below and update the code to test the property account
      //var instance = new MorpheusApi.InstanceTypeLayout();
      //expect(instance).to.be();
    });

    it('should have the property code (base name: "code")', function() {
      // uncomment below and update the code to test the property code
      //var instance = new MorpheusApi.InstanceTypeLayout();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new MorpheusApi.InstanceTypeLayout();
      //expect(instance).to.be();
    });

    it('should have the property labels (base name: "labels")', function() {
      // uncomment below and update the code to test the property labels
      //var instance = new MorpheusApi.InstanceTypeLayout();
      //expect(instance).to.be();
    });

    it('should have the property instanceVersion (base name: "instanceVersion")', function() {
      // uncomment below and update the code to test the property instanceVersion
      //var instance = new MorpheusApi.InstanceTypeLayout();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new MorpheusApi.InstanceTypeLayout();
      //expect(instance).to.be();
    });

    it('should have the property creatable (base name: "creatable")', function() {
      // uncomment below and update the code to test the property creatable
      //var instance = new MorpheusApi.InstanceTypeLayout();
      //expect(instance).to.be();
    });

    it('should have the property memoryRequirement (base name: "memoryRequirement")', function() {
      // uncomment below and update the code to test the property memoryRequirement
      //var instance = new MorpheusApi.InstanceTypeLayout();
      //expect(instance).to.be();
    });

    it('should have the property sortOrder (base name: "sortOrder")', function() {
      // uncomment below and update the code to test the property sortOrder
      //var instance = new MorpheusApi.InstanceTypeLayout();
      //expect(instance).to.be();
    });

    it('should have the property supportsConvertToManaged (base name: "supportsConvertToManaged")', function() {
      // uncomment below and update the code to test the property supportsConvertToManaged
      //var instance = new MorpheusApi.InstanceTypeLayout();
      //expect(instance).to.be();
    });

    it('should have the property provisionType (base name: "provisionType")', function() {
      // uncomment below and update the code to test the property provisionType
      //var instance = new MorpheusApi.InstanceTypeLayout();
      //expect(instance).to.be();
    });

    it('should have the property taskSets (base name: "taskSets")', function() {
      // uncomment below and update the code to test the property taskSets
      //var instance = new MorpheusApi.InstanceTypeLayout();
      //expect(instance).to.be();
    });

    it('should have the property containerTypes (base name: "containerTypes")', function() {
      // uncomment below and update the code to test the property containerTypes
      //var instance = new MorpheusApi.InstanceTypeLayout();
      //expect(instance).to.be();
    });

    it('should have the property mounts (base name: "mounts")', function() {
      // uncomment below and update the code to test the property mounts
      //var instance = new MorpheusApi.InstanceTypeLayout();
      //expect(instance).to.be();
    });

    it('should have the property ports (base name: "ports")', function() {
      // uncomment below and update the code to test the property ports
      //var instance = new MorpheusApi.InstanceTypeLayout();
      //expect(instance).to.be();
    });

    it('should have the property optionTypes (base name: "optionTypes")', function() {
      // uncomment below and update the code to test the property optionTypes
      //var instance = new MorpheusApi.InstanceTypeLayout();
      //expect(instance).to.be();
    });

    it('should have the property environmentVariables (base name: "environmentVariables")', function() {
      // uncomment below and update the code to test the property environmentVariables
      //var instance = new MorpheusApi.InstanceTypeLayout();
      //expect(instance).to.be();
    });

    it('should have the property priceSets (base name: "priceSets")', function() {
      // uncomment below and update the code to test the property priceSets
      //var instance = new MorpheusApi.InstanceTypeLayout();
      //expect(instance).to.be();
    });

    it('should have the property specTemplates (base name: "specTemplates")', function() {
      // uncomment below and update the code to test the property specTemplates
      //var instance = new MorpheusApi.InstanceTypeLayout();
      //expect(instance).to.be();
    });

    it('should have the property tfvarSecret (base name: "tfvarSecret")', function() {
      // uncomment below and update the code to test the property tfvarSecret
      //var instance = new MorpheusApi.InstanceTypeLayout();
      //expect(instance).to.be();
    });

    it('should have the property permissions (base name: "permissions")', function() {
      // uncomment below and update the code to test the property permissions
      //var instance = new MorpheusApi.InstanceTypeLayout();
      //expect(instance).to.be();
    });

  });

}));
