/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MorpheusApi);
  }
}(this, function(expect, MorpheusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MorpheusApi.ZoneGcpConfig();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ZoneGcpConfig', function() {
    it('should create an instance of ZoneGcpConfig', function() {
      // uncomment below and update the code to test ZoneGcpConfig
      //var instane = new MorpheusApi.ZoneGcpConfig();
      //expect(instance).to.be.a(MorpheusApi.ZoneGcpConfig);
    });

    it('should have the property privateKey (base name: "privateKey")', function() {
      // uncomment below and update the code to test the property privateKey
      //var instance = new MorpheusApi.ZoneGcpConfig();
      //expect(instance).to.be();
    });

    it('should have the property clientEmail (base name: "clientEmail")', function() {
      // uncomment below and update the code to test the property clientEmail
      //var instance = new MorpheusApi.ZoneGcpConfig();
      //expect(instance).to.be();
    });

    it('should have the property projectId (base name: "projectId")', function() {
      // uncomment below and update the code to test the property projectId
      //var instance = new MorpheusApi.ZoneGcpConfig();
      //expect(instance).to.be();
    });

    it('should have the property googleRegionId (base name: "googleRegionId")', function() {
      // uncomment below and update the code to test the property googleRegionId
      //var instance = new MorpheusApi.ZoneGcpConfig();
      //expect(instance).to.be();
    });

    it('should have the property importExisting (base name: "_importExisting")', function() {
      // uncomment below and update the code to test the property importExisting
      //var instance = new MorpheusApi.ZoneGcpConfig();
      //expect(instance).to.be();
    });

    it('should have the property importExisting (base name: "importExisting")', function() {
      // uncomment below and update the code to test the property importExisting
      //var instance = new MorpheusApi.ZoneGcpConfig();
      //expect(instance).to.be();
    });

    it('should have the property applianceUrl (base name: "applianceUrl")', function() {
      // uncomment below and update the code to test the property applianceUrl
      //var instance = new MorpheusApi.ZoneGcpConfig();
      //expect(instance).to.be();
    });

    it('should have the property datacenterName (base name: "datacenterName")', function() {
      // uncomment below and update the code to test the property datacenterName
      //var instance = new MorpheusApi.ZoneGcpConfig();
      //expect(instance).to.be();
    });

    it('should have the property networkServerId (base name: "networkServer.id")', function() {
      // uncomment below and update the code to test the property networkServerId
      //var instance = new MorpheusApi.ZoneGcpConfig();
      //expect(instance).to.be();
    });

    it('should have the property networkServer (base name: "networkServer")', function() {
      // uncomment below and update the code to test the property networkServer
      //var instance = new MorpheusApi.ZoneGcpConfig();
      //expect(instance).to.be();
    });

    it('should have the property securityServer (base name: "securityServer")', function() {
      // uncomment below and update the code to test the property securityServer
      //var instance = new MorpheusApi.ZoneGcpConfig();
      //expect(instance).to.be();
    });

    it('should have the property certificateProvider (base name: "certificateProvider")', function() {
      // uncomment below and update the code to test the property certificateProvider
      //var instance = new MorpheusApi.ZoneGcpConfig();
      //expect(instance).to.be();
    });

    it('should have the property backupMode (base name: "backupMode")', function() {
      // uncomment below and update the code to test the property backupMode
      //var instance = new MorpheusApi.ZoneGcpConfig();
      //expect(instance).to.be();
    });

    it('should have the property replicationMode (base name: "replicationMode")', function() {
      // uncomment below and update the code to test the property replicationMode
      //var instance = new MorpheusApi.ZoneGcpConfig();
      //expect(instance).to.be();
    });

    it('should have the property dnsIntegrationId (base name: "dnsIntegrationId")', function() {
      // uncomment below and update the code to test the property dnsIntegrationId
      //var instance = new MorpheusApi.ZoneGcpConfig();
      //expect(instance).to.be();
    });

    it('should have the property serviceRegistryId (base name: "serviceRegistryId")', function() {
      // uncomment below and update the code to test the property serviceRegistryId
      //var instance = new MorpheusApi.ZoneGcpConfig();
      //expect(instance).to.be();
    });

    it('should have the property configManagementId (base name: "configManagementId")', function() {
      // uncomment below and update the code to test the property configManagementId
      //var instance = new MorpheusApi.ZoneGcpConfig();
      //expect(instance).to.be();
    });

    it('should have the property privateKeyHash (base name: "privateKeyHash")', function() {
      // uncomment below and update the code to test the property privateKeyHash
      //var instance = new MorpheusApi.ZoneGcpConfig();
      //expect(instance).to.be();
    });

  });

}));
