/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MorpheusApi);
  }
}(this, function(expect, MorpheusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MorpheusApi.UserPermissions();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('UserPermissions', function() {
    it('should create an instance of UserPermissions', function() {
      // uncomment below and update the code to test UserPermissions
      //var instane = new MorpheusApi.UserPermissions();
      //expect(instance).to.be.a(MorpheusApi.UserPermissions);
    });

    it('should have the property features (base name: "features")', function() {
      // uncomment below and update the code to test the property features
      //var instance = new MorpheusApi.UserPermissions();
      //expect(instance).to.be();
    });

    it('should have the property zones (base name: "zones")', function() {
      // uncomment below and update the code to test the property zones
      //var instance = new MorpheusApi.UserPermissions();
      //expect(instance).to.be();
    });

    it('should have the property sites (base name: "sites")', function() {
      // uncomment below and update the code to test the property sites
      //var instance = new MorpheusApi.UserPermissions();
      //expect(instance).to.be();
    });

    it('should have the property instanceTypes (base name: "instanceTypes")', function() {
      // uncomment below and update the code to test the property instanceTypes
      //var instance = new MorpheusApi.UserPermissions();
      //expect(instance).to.be();
    });

    it('should have the property appTemplates (base name: "appTemplates")', function() {
      // uncomment below and update the code to test the property appTemplates
      //var instance = new MorpheusApi.UserPermissions();
      //expect(instance).to.be();
    });

    it('should have the property catalogItemTypes (base name: "catalogItemTypes")', function() {
      // uncomment below and update the code to test the property catalogItemTypes
      //var instance = new MorpheusApi.UserPermissions();
      //expect(instance).to.be();
    });

    it('should have the property personas (base name: "personas")', function() {
      // uncomment below and update the code to test the property personas
      //var instance = new MorpheusApi.UserPermissions();
      //expect(instance).to.be();
    });

    it('should have the property vdiPools (base name: "vdiPools")', function() {
      // uncomment below and update the code to test the property vdiPools
      //var instance = new MorpheusApi.UserPermissions();
      //expect(instance).to.be();
    });

    it('should have the property reportTypes (base name: "reportTypes")', function() {
      // uncomment below and update the code to test the property reportTypes
      //var instance = new MorpheusApi.UserPermissions();
      //expect(instance).to.be();
    });

    it('should have the property tasks (base name: "tasks")', function() {
      // uncomment below and update the code to test the property tasks
      //var instance = new MorpheusApi.UserPermissions();
      //expect(instance).to.be();
    });

    it('should have the property taskSets (base name: "taskSets")', function() {
      // uncomment below and update the code to test the property taskSets
      //var instance = new MorpheusApi.UserPermissions();
      //expect(instance).to.be();
    });

  });

}));
