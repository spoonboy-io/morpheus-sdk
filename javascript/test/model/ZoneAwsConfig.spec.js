/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MorpheusApi);
  }
}(this, function(expect, MorpheusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MorpheusApi.ZoneAwsConfig();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ZoneAwsConfig', function() {
    it('should create an instance of ZoneAwsConfig', function() {
      // uncomment below and update the code to test ZoneAwsConfig
      //var instane = new MorpheusApi.ZoneAwsConfig();
      //expect(instance).to.be.a(MorpheusApi.ZoneAwsConfig);
    });

    it('should have the property endpoint (base name: "endpoint")', function() {
      // uncomment below and update the code to test the property endpoint
      //var instance = new MorpheusApi.ZoneAwsConfig();
      //expect(instance).to.be();
    });

    it('should have the property accessKey (base name: "accessKey")', function() {
      // uncomment below and update the code to test the property accessKey
      //var instance = new MorpheusApi.ZoneAwsConfig();
      //expect(instance).to.be();
    });

    it('should have the property secretKey (base name: "secretKey")', function() {
      // uncomment below and update the code to test the property secretKey
      //var instance = new MorpheusApi.ZoneAwsConfig();
      //expect(instance).to.be();
    });

    it('should have the property useHostCredentials (base name: "_useHostCredentials")', function() {
      // uncomment below and update the code to test the property useHostCredentials
      //var instance = new MorpheusApi.ZoneAwsConfig();
      //expect(instance).to.be();
    });

    it('should have the property stsAssumeRole (base name: "stsAssumeRole")', function() {
      // uncomment below and update the code to test the property stsAssumeRole
      //var instance = new MorpheusApi.ZoneAwsConfig();
      //expect(instance).to.be();
    });

    it('should have the property isVpc (base name: "isVpc")', function() {
      // uncomment below and update the code to test the property isVpc
      //var instance = new MorpheusApi.ZoneAwsConfig();
      //expect(instance).to.be();
    });

    it('should have the property vpc (base name: "vpc")', function() {
      // uncomment below and update the code to test the property vpc
      //var instance = new MorpheusApi.ZoneAwsConfig();
      //expect(instance).to.be();
    });

    it('should have the property imageStoreId (base name: "imageStoreId")', function() {
      // uncomment below and update the code to test the property imageStoreId
      //var instance = new MorpheusApi.ZoneAwsConfig();
      //expect(instance).to.be();
    });

    it('should have the property ebsEncryption (base name: "ebsEncryption")', function() {
      // uncomment below and update the code to test the property ebsEncryption
      //var instance = new MorpheusApi.ZoneAwsConfig();
      //expect(instance).to.be();
    });

    it('should have the property costingReport (base name: "costingReport")', function() {
      // uncomment below and update the code to test the property costingReport
      //var instance = new MorpheusApi.ZoneAwsConfig();
      //expect(instance).to.be();
    });

    it('should have the property costingFolder (base name: "costingFolder")', function() {
      // uncomment below and update the code to test the property costingFolder
      //var instance = new MorpheusApi.ZoneAwsConfig();
      //expect(instance).to.be();
    });

    it('should have the property costingBucket (base name: "costingBucket")', function() {
      // uncomment below and update the code to test the property costingBucket
      //var instance = new MorpheusApi.ZoneAwsConfig();
      //expect(instance).to.be();
    });

    it('should have the property costingBucketName (base name: "costingBucketName")', function() {
      // uncomment below and update the code to test the property costingBucketName
      //var instance = new MorpheusApi.ZoneAwsConfig();
      //expect(instance).to.be();
    });

    it('should have the property costingRegion (base name: "costingRegion")', function() {
      // uncomment below and update the code to test the property costingRegion
      //var instance = new MorpheusApi.ZoneAwsConfig();
      //expect(instance).to.be();
    });

    it('should have the property costingAccessKey (base name: "costingAccessKey")', function() {
      // uncomment below and update the code to test the property costingAccessKey
      //var instance = new MorpheusApi.ZoneAwsConfig();
      //expect(instance).to.be();
    });

    it('should have the property costingSecretKey (base name: "costingSecretKey")', function() {
      // uncomment below and update the code to test the property costingSecretKey
      //var instance = new MorpheusApi.ZoneAwsConfig();
      //expect(instance).to.be();
    });

    it('should have the property costingReportName (base name: "costingReportName")', function() {
      // uncomment below and update the code to test the property costingReportName
      //var instance = new MorpheusApi.ZoneAwsConfig();
      //expect(instance).to.be();
    });

    it('should have the property applianceUrl (base name: "applianceUrl")', function() {
      // uncomment below and update the code to test the property applianceUrl
      //var instance = new MorpheusApi.ZoneAwsConfig();
      //expect(instance).to.be();
    });

    it('should have the property datacenterName (base name: "datacenterName")', function() {
      // uncomment below and update the code to test the property datacenterName
      //var instance = new MorpheusApi.ZoneAwsConfig();
      //expect(instance).to.be();
    });

    it('should have the property networkServerId (base name: "networkServer.id")', function() {
      // uncomment below and update the code to test the property networkServerId
      //var instance = new MorpheusApi.ZoneAwsConfig();
      //expect(instance).to.be();
    });

    it('should have the property networkServer (base name: "networkServer")', function() {
      // uncomment below and update the code to test the property networkServer
      //var instance = new MorpheusApi.ZoneAwsConfig();
      //expect(instance).to.be();
    });

    it('should have the property securityServer (base name: "securityServer")', function() {
      // uncomment below and update the code to test the property securityServer
      //var instance = new MorpheusApi.ZoneAwsConfig();
      //expect(instance).to.be();
    });

    it('should have the property certificateProvider (base name: "certificateProvider")', function() {
      // uncomment below and update the code to test the property certificateProvider
      //var instance = new MorpheusApi.ZoneAwsConfig();
      //expect(instance).to.be();
    });

    it('should have the property backupMode (base name: "backupMode")', function() {
      // uncomment below and update the code to test the property backupMode
      //var instance = new MorpheusApi.ZoneAwsConfig();
      //expect(instance).to.be();
    });

    it('should have the property replicationMode (base name: "replicationMode")', function() {
      // uncomment below and update the code to test the property replicationMode
      //var instance = new MorpheusApi.ZoneAwsConfig();
      //expect(instance).to.be();
    });

    it('should have the property dnsIntegrationId (base name: "dnsIntegrationId")', function() {
      // uncomment below and update the code to test the property dnsIntegrationId
      //var instance = new MorpheusApi.ZoneAwsConfig();
      //expect(instance).to.be();
    });

    it('should have the property serviceRegistryId (base name: "serviceRegistryId")', function() {
      // uncomment below and update the code to test the property serviceRegistryId
      //var instance = new MorpheusApi.ZoneAwsConfig();
      //expect(instance).to.be();
    });

    it('should have the property configManagementId (base name: "configManagementId")', function() {
      // uncomment below and update the code to test the property configManagementId
      //var instance = new MorpheusApi.ZoneAwsConfig();
      //expect(instance).to.be();
    });

    it('should have the property configCmdbDiscovery (base name: "configCmdbDiscovery")', function() {
      // uncomment below and update the code to test the property configCmdbDiscovery
      //var instance = new MorpheusApi.ZoneAwsConfig();
      //expect(instance).to.be();
    });

    it('should have the property secretKeyHash (base name: "secretKeyHash")', function() {
      // uncomment below and update the code to test the property secretKeyHash
      //var instance = new MorpheusApi.ZoneAwsConfig();
      //expect(instance).to.be();
    });

    it('should have the property costingSecretKeyHash (base name: "costingSecretKeyHash")', function() {
      // uncomment below and update the code to test the property costingSecretKeyHash
      //var instance = new MorpheusApi.ZoneAwsConfig();
      //expect(instance).to.be();
    });

  });

}));
