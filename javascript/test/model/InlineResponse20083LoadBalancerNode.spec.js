/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MorpheusApi);
  }
}(this, function(expect, MorpheusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MorpheusApi.InlineResponse20083LoadBalancerNode();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('InlineResponse20083LoadBalancerNode', function() {
    it('should create an instance of InlineResponse20083LoadBalancerNode', function() {
      // uncomment below and update the code to test InlineResponse20083LoadBalancerNode
      //var instane = new MorpheusApi.InlineResponse20083LoadBalancerNode();
      //expect(instance).to.be.a(MorpheusApi.InlineResponse20083LoadBalancerNode);
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new MorpheusApi.InlineResponse20083LoadBalancerNode();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new MorpheusApi.InlineResponse20083LoadBalancerNode();
      //expect(instance).to.be();
    });

    it('should have the property visibility (base name: "visibility")', function() {
      // uncomment below and update the code to test the property visibility
      //var instance = new MorpheusApi.InlineResponse20083LoadBalancerNode();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new MorpheusApi.InlineResponse20083LoadBalancerNode();
      //expect(instance).to.be();
    });

    it('should have the property ipAddress (base name: "ipAddress")', function() {
      // uncomment below and update the code to test the property ipAddress
      //var instance = new MorpheusApi.InlineResponse20083LoadBalancerNode();
      //expect(instance).to.be();
    });

    it('should have the property port (base name: "port")', function() {
      // uncomment below and update the code to test the property port
      //var instance = new MorpheusApi.InlineResponse20083LoadBalancerNode();
      //expect(instance).to.be();
    });

    it('should have the property portType (base name: "portType")', function() {
      // uncomment below and update the code to test the property portType
      //var instance = new MorpheusApi.InlineResponse20083LoadBalancerNode();
      //expect(instance).to.be();
    });

    it('should have the property monitorPort (base name: "monitorPort")', function() {
      // uncomment below and update the code to test the property monitorPort
      //var instance = new MorpheusApi.InlineResponse20083LoadBalancerNode();
      //expect(instance).to.be();
    });

    it('should have the property weight (base name: "weight")', function() {
      // uncomment below and update the code to test the property weight
      //var instance = new MorpheusApi.InlineResponse20083LoadBalancerNode();
      //expect(instance).to.be();
    });

    it('should have the property nodeState (base name: "nodeState")', function() {
      // uncomment below and update the code to test the property nodeState
      //var instance = new MorpheusApi.InlineResponse20083LoadBalancerNode();
      //expect(instance).to.be();
    });

    it('should have the property internalId (base name: "internalId")', function() {
      // uncomment below and update the code to test the property internalId
      //var instance = new MorpheusApi.InlineResponse20083LoadBalancerNode();
      //expect(instance).to.be();
    });

    it('should have the property externalId (base name: "externalId")', function() {
      // uncomment below and update the code to test the property externalId
      //var instance = new MorpheusApi.InlineResponse20083LoadBalancerNode();
      //expect(instance).to.be();
    });

    it('should have the property enabled (base name: "enabled")', function() {
      // uncomment below and update the code to test the property enabled
      //var instance = new MorpheusApi.InlineResponse20083LoadBalancerNode();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new MorpheusApi.InlineResponse20083LoadBalancerNode();
      //expect(instance).to.be();
    });

    it('should have the property statusMessage (base name: "statusMessage")', function() {
      // uncomment below and update the code to test the property statusMessage
      //var instance = new MorpheusApi.InlineResponse20083LoadBalancerNode();
      //expect(instance).to.be();
    });

    it('should have the property statusDate (base name: "statusDate")', function() {
      // uncomment below and update the code to test the property statusDate
      //var instance = new MorpheusApi.InlineResponse20083LoadBalancerNode();
      //expect(instance).to.be();
    });

    it('should have the property server (base name: "server")', function() {
      // uncomment below and update the code to test the property server
      //var instance = new MorpheusApi.InlineResponse20083LoadBalancerNode();
      //expect(instance).to.be();
    });

    it('should have the property instanceId (base name: "instanceId")', function() {
      // uncomment below and update the code to test the property instanceId
      //var instance = new MorpheusApi.InlineResponse20083LoadBalancerNode();
      //expect(instance).to.be();
    });

    it('should have the property containerId (base name: "containerId")', function() {
      // uncomment below and update the code to test the property containerId
      //var instance = new MorpheusApi.InlineResponse20083LoadBalancerNode();
      //expect(instance).to.be();
    });

    it('should have the property nodeSource (base name: "nodeSource")', function() {
      // uncomment below and update the code to test the property nodeSource
      //var instance = new MorpheusApi.InlineResponse20083LoadBalancerNode();
      //expect(instance).to.be();
    });

    it('should have the property monitor (base name: "monitor")', function() {
      // uncomment below and update the code to test the property monitor
      //var instance = new MorpheusApi.InlineResponse20083LoadBalancerNode();
      //expect(instance).to.be();
    });

    it('should have the property maxConnections (base name: "maxConnections")', function() {
      // uncomment below and update the code to test the property maxConnections
      //var instance = new MorpheusApi.InlineResponse20083LoadBalancerNode();
      //expect(instance).to.be();
    });

    it('should have the property externalRefType (base name: "externalRefType")', function() {
      // uncomment below and update the code to test the property externalRefType
      //var instance = new MorpheusApi.InlineResponse20083LoadBalancerNode();
      //expect(instance).to.be();
    });

    it('should have the property externalRefId (base name: "externalRefId")', function() {
      // uncomment below and update the code to test the property externalRefId
      //var instance = new MorpheusApi.InlineResponse20083LoadBalancerNode();
      //expect(instance).to.be();
    });

    it('should have the property externalRefName (base name: "externalRefName")', function() {
      // uncomment below and update the code to test the property externalRefName
      //var instance = new MorpheusApi.InlineResponse20083LoadBalancerNode();
      //expect(instance).to.be();
    });

    it('should have the property createdBy (base name: "createdBy")', function() {
      // uncomment below and update the code to test the property createdBy
      //var instance = new MorpheusApi.InlineResponse20083LoadBalancerNode();
      //expect(instance).to.be();
    });

    it('should have the property dateCreated (base name: "dateCreated")', function() {
      // uncomment below and update the code to test the property dateCreated
      //var instance = new MorpheusApi.InlineResponse20083LoadBalancerNode();
      //expect(instance).to.be();
    });

    it('should have the property lastUpdated (base name: "lastUpdated")', function() {
      // uncomment below and update the code to test the property lastUpdated
      //var instance = new MorpheusApi.InlineResponse20083LoadBalancerNode();
      //expect(instance).to.be();
    });

  });

}));
