/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MorpheusApi);
  }
}(this, function(expect, MorpheusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MorpheusApi.NetworkInterfaceUpdateSuccessServer();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('NetworkInterfaceUpdateSuccessServer', function() {
    it('should create an instance of NetworkInterfaceUpdateSuccessServer', function() {
      // uncomment below and update the code to test NetworkInterfaceUpdateSuccessServer
      //var instane = new MorpheusApi.NetworkInterfaceUpdateSuccessServer();
      //expect(instance).to.be.a(MorpheusApi.NetworkInterfaceUpdateSuccessServer);
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new MorpheusApi.NetworkInterfaceUpdateSuccessServer();
      //expect(instance).to.be();
    });

    it('should have the property externalId (base name: "externalId")', function() {
      // uncomment below and update the code to test the property externalId
      //var instance = new MorpheusApi.NetworkInterfaceUpdateSuccessServer();
      //expect(instance).to.be();
    });

    it('should have the property accountId (base name: "accountId")', function() {
      // uncomment below and update the code to test the property accountId
      //var instance = new MorpheusApi.NetworkInterfaceUpdateSuccessServer();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new MorpheusApi.NetworkInterfaceUpdateSuccessServer();
      //expect(instance).to.be();
    });

    it('should have the property displayName (base name: "displayName")', function() {
      // uncomment below and update the code to test the property displayName
      //var instance = new MorpheusApi.NetworkInterfaceUpdateSuccessServer();
      //expect(instance).to.be();
    });

    it('should have the property visibility (base name: "visibility")', function() {
      // uncomment below and update the code to test the property visibility
      //var instance = new MorpheusApi.NetworkInterfaceUpdateSuccessServer();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new MorpheusApi.NetworkInterfaceUpdateSuccessServer();
      //expect(instance).to.be();
    });

    it('should have the property zoneId (base name: "zoneId")', function() {
      // uncomment below and update the code to test the property zoneId
      //var instance = new MorpheusApi.NetworkInterfaceUpdateSuccessServer();
      //expect(instance).to.be();
    });

    it('should have the property siteId (base name: "siteId")', function() {
      // uncomment below and update the code to test the property siteId
      //var instance = new MorpheusApi.NetworkInterfaceUpdateSuccessServer();
      //expect(instance).to.be();
    });

    it('should have the property sshHost (base name: "sshHost")', function() {
      // uncomment below and update the code to test the property sshHost
      //var instance = new MorpheusApi.NetworkInterfaceUpdateSuccessServer();
      //expect(instance).to.be();
    });

    it('should have the property sshPort (base name: "sshPort")', function() {
      // uncomment below and update the code to test the property sshPort
      //var instance = new MorpheusApi.NetworkInterfaceUpdateSuccessServer();
      //expect(instance).to.be();
    });

    it('should have the property externalIp (base name: "externalIp")', function() {
      // uncomment below and update the code to test the property externalIp
      //var instance = new MorpheusApi.NetworkInterfaceUpdateSuccessServer();
      //expect(instance).to.be();
    });

    it('should have the property internalIp (base name: "internalIp")', function() {
      // uncomment below and update the code to test the property internalIp
      //var instance = new MorpheusApi.NetworkInterfaceUpdateSuccessServer();
      //expect(instance).to.be();
    });

    it('should have the property volumeId (base name: "volumeId")', function() {
      // uncomment below and update the code to test the property volumeId
      //var instance = new MorpheusApi.NetworkInterfaceUpdateSuccessServer();
      //expect(instance).to.be();
    });

    it('should have the property platform (base name: "platform")', function() {
      // uncomment below and update the code to test the property platform
      //var instance = new MorpheusApi.NetworkInterfaceUpdateSuccessServer();
      //expect(instance).to.be();
    });

    it('should have the property platformVersion (base name: "platformVersion")', function() {
      // uncomment below and update the code to test the property platformVersion
      //var instance = new MorpheusApi.NetworkInterfaceUpdateSuccessServer();
      //expect(instance).to.be();
    });

    it('should have the property sshUsername (base name: "sshUsername")', function() {
      // uncomment below and update the code to test the property sshUsername
      //var instance = new MorpheusApi.NetworkInterfaceUpdateSuccessServer();
      //expect(instance).to.be();
    });

    it('should have the property sshPassword (base name: "sshPassword")', function() {
      // uncomment below and update the code to test the property sshPassword
      //var instance = new MorpheusApi.NetworkInterfaceUpdateSuccessServer();
      //expect(instance).to.be();
    });

    it('should have the property osDevice (base name: "osDevice")', function() {
      // uncomment below and update the code to test the property osDevice
      //var instance = new MorpheusApi.NetworkInterfaceUpdateSuccessServer();
      //expect(instance).to.be();
    });

    it('should have the property dataDevice (base name: "dataDevice")', function() {
      // uncomment below and update the code to test the property dataDevice
      //var instance = new MorpheusApi.NetworkInterfaceUpdateSuccessServer();
      //expect(instance).to.be();
    });

    it('should have the property lvmEnabled (base name: "lvmEnabled")', function() {
      // uncomment below and update the code to test the property lvmEnabled
      //var instance = new MorpheusApi.NetworkInterfaceUpdateSuccessServer();
      //expect(instance).to.be();
    });

    it('should have the property apiKey (base name: "apiKey")', function() {
      // uncomment below and update the code to test the property apiKey
      //var instance = new MorpheusApi.NetworkInterfaceUpdateSuccessServer();
      //expect(instance).to.be();
    });

    it('should have the property softwareRaid (base name: "softwareRaid")', function() {
      // uncomment below and update the code to test the property softwareRaid
      //var instance = new MorpheusApi.NetworkInterfaceUpdateSuccessServer();
      //expect(instance).to.be();
    });

    it('should have the property config (base name: "config")', function() {
      // uncomment below and update the code to test the property config
      //var instance = new MorpheusApi.NetworkInterfaceUpdateSuccessServer();
      //expect(instance).to.be();
    });

    it('should have the property capacityInfo (base name: "capacityInfo")', function() {
      // uncomment below and update the code to test the property capacityInfo
      //var instance = new MorpheusApi.NetworkInterfaceUpdateSuccessServer();
      //expect(instance).to.be();
    });

    it('should have the property dateCreated (base name: "dateCreated")', function() {
      // uncomment below and update the code to test the property dateCreated
      //var instance = new MorpheusApi.NetworkInterfaceUpdateSuccessServer();
      //expect(instance).to.be();
    });

    it('should have the property lastUpdated (base name: "lastUpdated")', function() {
      // uncomment below and update the code to test the property lastUpdated
      //var instance = new MorpheusApi.NetworkInterfaceUpdateSuccessServer();
      //expect(instance).to.be();
    });

    it('should have the property lastStats (base name: "lastStats")', function() {
      // uncomment below and update the code to test the property lastStats
      //var instance = new MorpheusApi.NetworkInterfaceUpdateSuccessServer();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new MorpheusApi.NetworkInterfaceUpdateSuccessServer();
      //expect(instance).to.be();
    });

    it('should have the property computeServerType (base name: "computeServerType")', function() {
      // uncomment below and update the code to test the property computeServerType
      //var instance = new MorpheusApi.NetworkInterfaceUpdateSuccessServer();
      //expect(instance).to.be();
    });

    it('should have the property interfaces (base name: "interfaces")', function() {
      // uncomment below and update the code to test the property interfaces
      //var instance = new MorpheusApi.NetworkInterfaceUpdateSuccessServer();
      //expect(instance).to.be();
    });

    it('should have the property zone (base name: "zone")', function() {
      // uncomment below and update the code to test the property zone
      //var instance = new MorpheusApi.NetworkInterfaceUpdateSuccessServer();
      //expect(instance).to.be();
    });

  });

}));
