/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MorpheusApi);
  }
}(this, function(expect, MorpheusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MorpheusApi.IntegrationSaltMasterConfigIntegration();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('IntegrationSaltMasterConfigIntegration', function() {
    it('should create an instance of IntegrationSaltMasterConfigIntegration', function() {
      // uncomment below and update the code to test IntegrationSaltMasterConfigIntegration
      //var instane = new MorpheusApi.IntegrationSaltMasterConfigIntegration();
      //expect(instance).to.be.a(MorpheusApi.IntegrationSaltMasterConfigIntegration);
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new MorpheusApi.IntegrationSaltMasterConfigIntegration();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new MorpheusApi.IntegrationSaltMasterConfigIntegration();
      //expect(instance).to.be();
    });

    it('should have the property serviceMode (base name: "serviceMode")', function() {
      // uncomment below and update the code to test the property serviceMode
      //var instance = new MorpheusApi.IntegrationSaltMasterConfigIntegration();
      //expect(instance).to.be();
    });

    it('should have the property serviceUrl (base name: "serviceUrl")', function() {
      // uncomment below and update the code to test the property serviceUrl
      //var instance = new MorpheusApi.IntegrationSaltMasterConfigIntegration();
      //expect(instance).to.be();
    });

    it('should have the property secondary (base name: "secondary")', function() {
      // uncomment below and update the code to test the property secondary
      //var instance = new MorpheusApi.IntegrationSaltMasterConfigIntegration();
      //expect(instance).to.be();
    });

    it('should have the property servicePort (base name: "servicePort")', function() {
      // uncomment below and update the code to test the property servicePort
      //var instance = new MorpheusApi.IntegrationSaltMasterConfigIntegration();
      //expect(instance).to.be();
    });

    it('should have the property serviceUsername (base name: "serviceUsername")', function() {
      // uncomment below and update the code to test the property serviceUsername
      //var instance = new MorpheusApi.IntegrationSaltMasterConfigIntegration();
      //expect(instance).to.be();
    });

    it('should have the property servicePassword (base name: "servicePassword")', function() {
      // uncomment below and update the code to test the property servicePassword
      //var instance = new MorpheusApi.IntegrationSaltMasterConfigIntegration();
      //expect(instance).to.be();
    });

    it('should have the property serviceKey (base name: "serviceKey")', function() {
      // uncomment below and update the code to test the property serviceKey
      //var instance = new MorpheusApi.IntegrationSaltMasterConfigIntegration();
      //expect(instance).to.be();
    });

    it('should have the property authKey (base name: "authKey")', function() {
      // uncomment below and update the code to test the property authKey
      //var instance = new MorpheusApi.IntegrationSaltMasterConfigIntegration();
      //expect(instance).to.be();
    });

    it('should have the property servicePath (base name: "servicePath")', function() {
      // uncomment below and update the code to test the property servicePath
      //var instance = new MorpheusApi.IntegrationSaltMasterConfigIntegration();
      //expect(instance).to.be();
    });

    it('should have the property serviceVersion (base name: "serviceVersion")', function() {
      // uncomment below and update the code to test the property serviceVersion
      //var instance = new MorpheusApi.IntegrationSaltMasterConfigIntegration();
      //expect(instance).to.be();
    });

    it('should have the property serviceWindowsVersion (base name: "serviceWindowsVersion")', function() {
      // uncomment below and update the code to test the property serviceWindowsVersion
      //var instance = new MorpheusApi.IntegrationSaltMasterConfigIntegration();
      //expect(instance).to.be();
    });

    it('should have the property repoUrl (base name: "repoUrl")', function() {
      // uncomment below and update the code to test the property repoUrl
      //var instance = new MorpheusApi.IntegrationSaltMasterConfigIntegration();
      //expect(instance).to.be();
    });

    it('should have the property serviceConfig (base name: "serviceConfig")', function() {
      // uncomment below and update the code to test the property serviceConfig
      //var instance = new MorpheusApi.IntegrationSaltMasterConfigIntegration();
      //expect(instance).to.be();
    });

    it('should have the property serviceCommand (base name: "serviceCommand")', function() {
      // uncomment below and update the code to test the property serviceCommand
      //var instance = new MorpheusApi.IntegrationSaltMasterConfigIntegration();
      //expect(instance).to.be();
    });

    it('should have the property config (base name: "config")', function() {
      // uncomment below and update the code to test the property config
      //var instance = new MorpheusApi.IntegrationSaltMasterConfigIntegration();
      //expect(instance).to.be();
    });

  });

}));
