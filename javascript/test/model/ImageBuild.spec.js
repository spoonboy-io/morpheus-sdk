/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MorpheusApi);
  }
}(this, function(expect, MorpheusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MorpheusApi.ImageBuild();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ImageBuild', function() {
    it('should create an instance of ImageBuild', function() {
      // uncomment below and update the code to test ImageBuild
      //var instane = new MorpheusApi.ImageBuild();
      //expect(instance).to.be.a(MorpheusApi.ImageBuild);
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new MorpheusApi.ImageBuild();
      //expect(instance).to.be();
    });

    it('should have the property account (base name: "account")', function() {
      // uncomment below and update the code to test the property account
      //var instance = new MorpheusApi.ImageBuild();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new MorpheusApi.ImageBuild();
      //expect(instance).to.be();
    });

    it('should have the property site (base name: "site")', function() {
      // uncomment below and update the code to test the property site
      //var instance = new MorpheusApi.ImageBuild();
      //expect(instance).to.be();
    });

    it('should have the property zone (base name: "zone")', function() {
      // uncomment below and update the code to test the property zone
      //var instance = new MorpheusApi.ImageBuild();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new MorpheusApi.ImageBuild();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new MorpheusApi.ImageBuild();
      //expect(instance).to.be();
    });

    it('should have the property bootScript (base name: "bootScript")', function() {
      // uncomment below and update the code to test the property bootScript
      //var instance = new MorpheusApi.ImageBuild();
      //expect(instance).to.be();
    });

    it('should have the property bootCommand (base name: "bootCommand")', function() {
      // uncomment below and update the code to test the property bootCommand
      //var instance = new MorpheusApi.ImageBuild();
      //expect(instance).to.be();
    });

    it('should have the property preseedScript (base name: "preseedScript")', function() {
      // uncomment below and update the code to test the property preseedScript
      //var instance = new MorpheusApi.ImageBuild();
      //expect(instance).to.be();
    });

    it('should have the property scripts (base name: "scripts")', function() {
      // uncomment below and update the code to test the property scripts
      //var instance = new MorpheusApi.ImageBuild();
      //expect(instance).to.be();
    });

    it('should have the property sshUsername (base name: "sshUsername")', function() {
      // uncomment below and update the code to test the property sshUsername
      //var instance = new MorpheusApi.ImageBuild();
      //expect(instance).to.be();
    });

    it('should have the property sshPassword (base name: "sshPassword")', function() {
      // uncomment below and update the code to test the property sshPassword
      //var instance = new MorpheusApi.ImageBuild();
      //expect(instance).to.be();
    });

    it('should have the property storageProvider (base name: "storageProvider")', function() {
      // uncomment below and update the code to test the property storageProvider
      //var instance = new MorpheusApi.ImageBuild();
      //expect(instance).to.be();
    });

    it('should have the property buildOutputName (base name: "buildOutputName")', function() {
      // uncomment below and update the code to test the property buildOutputName
      //var instance = new MorpheusApi.ImageBuild();
      //expect(instance).to.be();
    });

    it('should have the property conversionFormats (base name: "conversionFormats")', function() {
      // uncomment below and update the code to test the property conversionFormats
      //var instance = new MorpheusApi.ImageBuild();
      //expect(instance).to.be();
    });

    it('should have the property isCloudInit (base name: "isCloudInit")', function() {
      // uncomment below and update the code to test the property isCloudInit
      //var instance = new MorpheusApi.ImageBuild();
      //expect(instance).to.be();
    });

    it('should have the property vmToolsInstalled (base name: "vmToolsInstalled")', function() {
      // uncomment below and update the code to test the property vmToolsInstalled
      //var instance = new MorpheusApi.ImageBuild();
      //expect(instance).to.be();
    });

    it('should have the property keepResults (base name: "keepResults")', function() {
      // uncomment below and update the code to test the property keepResults
      //var instance = new MorpheusApi.ImageBuild();
      //expect(instance).to.be();
    });

    it('should have the property config (base name: "config")', function() {
      // uncomment below and update the code to test the property config
      //var instance = new MorpheusApi.ImageBuild();
      //expect(instance).to.be();
    });

    it('should have the property lastResult (base name: "lastResult")', function() {
      // uncomment below and update the code to test the property lastResult
      //var instance = new MorpheusApi.ImageBuild();
      //expect(instance).to.be();
    });

    it('should have the property executionCount (base name: "executionCount")', function() {
      // uncomment below and update the code to test the property executionCount
      //var instance = new MorpheusApi.ImageBuild();
      //expect(instance).to.be();
    });

  });

}));
