/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MorpheusApi);
  }
}(this, function(expect, MorpheusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MorpheusApi.Container();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Container', function() {
    it('should create an instance of Container', function() {
      // uncomment below and update the code to test Container
      //var instane = new MorpheusApi.Container();
      //expect(instance).to.be.a(MorpheusApi.Container);
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new MorpheusApi.Container();
      //expect(instance).to.be();
    });

    it('should have the property uuid (base name: "uuid")', function() {
      // uncomment below and update the code to test the property uuid
      //var instance = new MorpheusApi.Container();
      //expect(instance).to.be();
    });

    it('should have the property accountId (base name: "accountId")', function() {
      // uncomment below and update the code to test the property accountId
      //var instance = new MorpheusApi.Container();
      //expect(instance).to.be();
    });

    it('should have the property instance (base name: "instance")', function() {
      // uncomment below and update the code to test the property instance
      //var instance = new MorpheusApi.Container();
      //expect(instance).to.be();
    });

    it('should have the property containerType (base name: "containerType")', function() {
      // uncomment below and update the code to test the property containerType
      //var instance = new MorpheusApi.Container();
      //expect(instance).to.be();
    });

    it('should have the property containerTypeSet (base name: "containerTypeSet")', function() {
      // uncomment below and update the code to test the property containerTypeSet
      //var instance = new MorpheusApi.Container();
      //expect(instance).to.be();
    });

    it('should have the property server (base name: "server")', function() {
      // uncomment below and update the code to test the property server
      //var instance = new MorpheusApi.Container();
      //expect(instance).to.be();
    });

    it('should have the property cloud (base name: "cloud")', function() {
      // uncomment below and update the code to test the property cloud
      //var instance = new MorpheusApi.Container();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new MorpheusApi.Container();
      //expect(instance).to.be();
    });

    it('should have the property ip (base name: "ip")', function() {
      // uncomment below and update the code to test the property ip
      //var instance = new MorpheusApi.Container();
      //expect(instance).to.be();
    });

    it('should have the property internalIp (base name: "internalIp")', function() {
      // uncomment below and update the code to test the property internalIp
      //var instance = new MorpheusApi.Container();
      //expect(instance).to.be();
    });

    it('should have the property internalHostname (base name: "internalHostname")', function() {
      // uncomment below and update the code to test the property internalHostname
      //var instance = new MorpheusApi.Container();
      //expect(instance).to.be();
    });

    it('should have the property externalHostname (base name: "externalHostname")', function() {
      // uncomment below and update the code to test the property externalHostname
      //var instance = new MorpheusApi.Container();
      //expect(instance).to.be();
    });

    it('should have the property externalDomain (base name: "externalDomain")', function() {
      // uncomment below and update the code to test the property externalDomain
      //var instance = new MorpheusApi.Container();
      //expect(instance).to.be();
    });

    it('should have the property externalFqdn (base name: "externalFqdn")', function() {
      // uncomment below and update the code to test the property externalFqdn
      //var instance = new MorpheusApi.Container();
      //expect(instance).to.be();
    });

    it('should have the property ports (base name: "ports")', function() {
      // uncomment below and update the code to test the property ports
      //var instance = new MorpheusApi.Container();
      //expect(instance).to.be();
    });

    it('should have the property plan (base name: "plan")', function() {
      // uncomment below and update the code to test the property plan
      //var instance = new MorpheusApi.Container();
      //expect(instance).to.be();
    });

    it('should have the property dateCreated (base name: "dateCreated")', function() {
      // uncomment below and update the code to test the property dateCreated
      //var instance = new MorpheusApi.Container();
      //expect(instance).to.be();
    });

    it('should have the property lastUpdated (base name: "lastUpdated")', function() {
      // uncomment below and update the code to test the property lastUpdated
      //var instance = new MorpheusApi.Container();
      //expect(instance).to.be();
    });

    it('should have the property statsEnabled (base name: "statsEnabled")', function() {
      // uncomment below and update the code to test the property statsEnabled
      //var instance = new MorpheusApi.Container();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new MorpheusApi.Container();
      //expect(instance).to.be();
    });

    it('should have the property userStatus (base name: "userStatus")', function() {
      // uncomment below and update the code to test the property userStatus
      //var instance = new MorpheusApi.Container();
      //expect(instance).to.be();
    });

    it('should have the property environmentPrefix (base name: "environmentPrefix")', function() {
      // uncomment below and update the code to test the property environmentPrefix
      //var instance = new MorpheusApi.Container();
      //expect(instance).to.be();
    });

    it('should have the property stats (base name: "stats")', function() {
      // uncomment below and update the code to test the property stats
      //var instance = new MorpheusApi.Container();
      //expect(instance).to.be();
    });

    it('should have the property runtimeInfo (base name: "runtimeInfo")', function() {
      // uncomment below and update the code to test the property runtimeInfo
      //var instance = new MorpheusApi.Container();
      //expect(instance).to.be();
    });

    it('should have the property containerVersion (base name: "containerVersion")', function() {
      // uncomment below and update the code to test the property containerVersion
      //var instance = new MorpheusApi.Container();
      //expect(instance).to.be();
    });

    it('should have the property repositoryImage (base name: "repositoryImage")', function() {
      // uncomment below and update the code to test the property repositoryImage
      //var instance = new MorpheusApi.Container();
      //expect(instance).to.be();
    });

    it('should have the property planCategory (base name: "planCategory")', function() {
      // uncomment below and update the code to test the property planCategory
      //var instance = new MorpheusApi.Container();
      //expect(instance).to.be();
    });

    it('should have the property hostname (base name: "hostname")', function() {
      // uncomment below and update the code to test the property hostname
      //var instance = new MorpheusApi.Container();
      //expect(instance).to.be();
    });

    it('should have the property domainName (base name: "domainName")', function() {
      // uncomment below and update the code to test the property domainName
      //var instance = new MorpheusApi.Container();
      //expect(instance).to.be();
    });

    it('should have the property volumeCreated (base name: "volumeCreated")', function() {
      // uncomment below and update the code to test the property volumeCreated
      //var instance = new MorpheusApi.Container();
      //expect(instance).to.be();
    });

    it('should have the property containerCreated (base name: "containerCreated")', function() {
      // uncomment below and update the code to test the property containerCreated
      //var instance = new MorpheusApi.Container();
      //expect(instance).to.be();
    });

    it('should have the property maxStorage (base name: "maxStorage")', function() {
      // uncomment below and update the code to test the property maxStorage
      //var instance = new MorpheusApi.Container();
      //expect(instance).to.be();
    });

    it('should have the property maxMemory (base name: "maxMemory")', function() {
      // uncomment below and update the code to test the property maxMemory
      //var instance = new MorpheusApi.Container();
      //expect(instance).to.be();
    });

    it('should have the property maxCores (base name: "maxCores")', function() {
      // uncomment below and update the code to test the property maxCores
      //var instance = new MorpheusApi.Container();
      //expect(instance).to.be();
    });

    it('should have the property maxCpu (base name: "maxCpu")', function() {
      // uncomment below and update the code to test the property maxCpu
      //var instance = new MorpheusApi.Container();
      //expect(instance).to.be();
    });

    it('should have the property availableActions (base name: "availableActions")', function() {
      // uncomment below and update the code to test the property availableActions
      //var instance = new MorpheusApi.Container();
      //expect(instance).to.be();
    });

    it('should have the property configGroup (base name: "configGroup")', function() {
      // uncomment below and update the code to test the property configGroup
      //var instance = new MorpheusApi.Container();
      //expect(instance).to.be();
    });

    it('should have the property configId (base name: "configId")', function() {
      // uncomment below and update the code to test the property configId
      //var instance = new MorpheusApi.Container();
      //expect(instance).to.be();
    });

    it('should have the property configRole (base name: "configRole")', function() {
      // uncomment below and update the code to test the property configRole
      //var instance = new MorpheusApi.Container();
      //expect(instance).to.be();
    });

    it('should have the property hourlyCost (base name: "hourlyCost")', function() {
      // uncomment below and update the code to test the property hourlyCost
      //var instance = new MorpheusApi.Container();
      //expect(instance).to.be();
    });

    it('should have the property hourlyPrice (base name: "hourlyPrice")', function() {
      // uncomment below and update the code to test the property hourlyPrice
      //var instance = new MorpheusApi.Container();
      //expect(instance).to.be();
    });

  });

}));
