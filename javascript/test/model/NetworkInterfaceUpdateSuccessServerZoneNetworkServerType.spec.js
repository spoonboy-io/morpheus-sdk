/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MorpheusApi);
  }
}(this, function(expect, MorpheusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MorpheusApi.NetworkInterfaceUpdateSuccessServerZoneNetworkServerType();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('NetworkInterfaceUpdateSuccessServerZoneNetworkServerType', function() {
    it('should create an instance of NetworkInterfaceUpdateSuccessServerZoneNetworkServerType', function() {
      // uncomment below and update the code to test NetworkInterfaceUpdateSuccessServerZoneNetworkServerType
      //var instane = new MorpheusApi.NetworkInterfaceUpdateSuccessServerZoneNetworkServerType();
      //expect(instance).to.be.a(MorpheusApi.NetworkInterfaceUpdateSuccessServerZoneNetworkServerType);
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new MorpheusApi.NetworkInterfaceUpdateSuccessServerZoneNetworkServerType();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new MorpheusApi.NetworkInterfaceUpdateSuccessServerZoneNetworkServerType();
      //expect(instance).to.be();
    });

    it('should have the property code (base name: "code")', function() {
      // uncomment below and update the code to test the property code
      //var instance = new MorpheusApi.NetworkInterfaceUpdateSuccessServerZoneNetworkServerType();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new MorpheusApi.NetworkInterfaceUpdateSuccessServerZoneNetworkServerType();
      //expect(instance).to.be();
    });

    it('should have the property creatable (base name: "creatable")', function() {
      // uncomment below and update the code to test the property creatable
      //var instance = new MorpheusApi.NetworkInterfaceUpdateSuccessServerZoneNetworkServerType();
      //expect(instance).to.be();
    });

    it('should have the property userVisible (base name: "userVisible")', function() {
      // uncomment below and update the code to test the property userVisible
      //var instance = new MorpheusApi.NetworkInterfaceUpdateSuccessServerZoneNetworkServerType();
      //expect(instance).to.be();
    });

    it('should have the property hasScopes (base name: "hasScopes")', function() {
      // uncomment below and update the code to test the property hasScopes
      //var instance = new MorpheusApi.NetworkInterfaceUpdateSuccessServerZoneNetworkServerType();
      //expect(instance).to.be();
    });

    it('should have the property titleScopes (base name: "titleScopes")', function() {
      // uncomment below and update the code to test the property titleScopes
      //var instance = new MorpheusApi.NetworkInterfaceUpdateSuccessServerZoneNetworkServerType();
      //expect(instance).to.be();
    });

    it('should have the property hasNetworks (base name: "hasNetworks")', function() {
      // uncomment below and update the code to test the property hasNetworks
      //var instance = new MorpheusApi.NetworkInterfaceUpdateSuccessServerZoneNetworkServerType();
      //expect(instance).to.be();
    });

    it('should have the property titleNetworks (base name: "titleNetworks")', function() {
      // uncomment below and update the code to test the property titleNetworks
      //var instance = new MorpheusApi.NetworkInterfaceUpdateSuccessServerZoneNetworkServerType();
      //expect(instance).to.be();
    });

    it('should have the property hasSwitches (base name: "hasSwitches")', function() {
      // uncomment below and update the code to test the property hasSwitches
      //var instance = new MorpheusApi.NetworkInterfaceUpdateSuccessServerZoneNetworkServerType();
      //expect(instance).to.be();
    });

    it('should have the property titleSwitches (base name: "titleSwitches")', function() {
      // uncomment below and update the code to test the property titleSwitches
      //var instance = new MorpheusApi.NetworkInterfaceUpdateSuccessServerZoneNetworkServerType();
      //expect(instance).to.be();
    });

    it('should have the property hasGateways (base name: "hasGateways")', function() {
      // uncomment below and update the code to test the property hasGateways
      //var instance = new MorpheusApi.NetworkInterfaceUpdateSuccessServerZoneNetworkServerType();
      //expect(instance).to.be();
    });

    it('should have the property titleGateways (base name: "titleGateways")', function() {
      // uncomment below and update the code to test the property titleGateways
      //var instance = new MorpheusApi.NetworkInterfaceUpdateSuccessServerZoneNetworkServerType();
      //expect(instance).to.be();
    });

    it('should have the property hasRouters (base name: "hasRouters")', function() {
      // uncomment below and update the code to test the property hasRouters
      //var instance = new MorpheusApi.NetworkInterfaceUpdateSuccessServerZoneNetworkServerType();
      //expect(instance).to.be();
    });

    it('should have the property titleRouters (base name: "titleRouters")', function() {
      // uncomment below and update the code to test the property titleRouters
      //var instance = new MorpheusApi.NetworkInterfaceUpdateSuccessServerZoneNetworkServerType();
      //expect(instance).to.be();
    });

    it('should have the property hasSecurityGroups (base name: "hasSecurityGroups")', function() {
      // uncomment below and update the code to test the property hasSecurityGroups
      //var instance = new MorpheusApi.NetworkInterfaceUpdateSuccessServerZoneNetworkServerType();
      //expect(instance).to.be();
    });

    it('should have the property titleSecurityGroups (base name: "titleSecurityGroups")', function() {
      // uncomment below and update the code to test the property titleSecurityGroups
      //var instance = new MorpheusApi.NetworkInterfaceUpdateSuccessServerZoneNetworkServerType();
      //expect(instance).to.be();
    });

    it('should have the property hasLoadBalancers (base name: "hasLoadBalancers")', function() {
      // uncomment below and update the code to test the property hasLoadBalancers
      //var instance = new MorpheusApi.NetworkInterfaceUpdateSuccessServerZoneNetworkServerType();
      //expect(instance).to.be();
    });

    it('should have the property titleLoadBalancers (base name: "titleLoadBalancers")', function() {
      // uncomment below and update the code to test the property titleLoadBalancers
      //var instance = new MorpheusApi.NetworkInterfaceUpdateSuccessServerZoneNetworkServerType();
      //expect(instance).to.be();
    });

    it('should have the property hasRouteTables (base name: "hasRouteTables")', function() {
      // uncomment below and update the code to test the property hasRouteTables
      //var instance = new MorpheusApi.NetworkInterfaceUpdateSuccessServerZoneNetworkServerType();
      //expect(instance).to.be();
    });

    it('should have the property titleRouteTables (base name: "titleRouteTables")', function() {
      // uncomment below and update the code to test the property titleRouteTables
      //var instance = new MorpheusApi.NetworkInterfaceUpdateSuccessServerZoneNetworkServerType();
      //expect(instance).to.be();
    });

    it('should have the property hasFirewall (base name: "hasFirewall")', function() {
      // uncomment below and update the code to test the property hasFirewall
      //var instance = new MorpheusApi.NetworkInterfaceUpdateSuccessServerZoneNetworkServerType();
      //expect(instance).to.be();
    });

    it('should have the property titleFirewall (base name: "titleFirewall")', function() {
      // uncomment below and update the code to test the property titleFirewall
      //var instance = new MorpheusApi.NetworkInterfaceUpdateSuccessServerZoneNetworkServerType();
      //expect(instance).to.be();
    });

    it('should have the property hasFirewallGroups (base name: "hasFirewallGroups")', function() {
      // uncomment below and update the code to test the property hasFirewallGroups
      //var instance = new MorpheusApi.NetworkInterfaceUpdateSuccessServerZoneNetworkServerType();
      //expect(instance).to.be();
    });

    it('should have the property titleFirewallGroups (base name: "titleFirewallGroups")', function() {
      // uncomment below and update the code to test the property titleFirewallGroups
      //var instance = new MorpheusApi.NetworkInterfaceUpdateSuccessServerZoneNetworkServerType();
      //expect(instance).to.be();
    });

  });

}));
