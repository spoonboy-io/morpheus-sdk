/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MorpheusApi);
  }
}(this, function(expect, MorpheusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MorpheusApi.Network();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Network', function() {
    it('should create an instance of Network', function() {
      // uncomment below and update the code to test Network
      //var instane = new MorpheusApi.Network();
      //expect(instance).to.be.a(MorpheusApi.Network);
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new MorpheusApi.Network();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new MorpheusApi.Network();
      //expect(instance).to.be();
    });

    it('should have the property displayName (base name: "displayName")', function() {
      // uncomment below and update the code to test the property displayName
      //var instance = new MorpheusApi.Network();
      //expect(instance).to.be();
    });

    it('should have the property labels (base name: "labels")', function() {
      // uncomment below and update the code to test the property labels
      //var instance = new MorpheusApi.Network();
      //expect(instance).to.be();
    });

    it('should have the property zone (base name: "zone")', function() {
      // uncomment below and update the code to test the property zone
      //var instance = new MorpheusApi.Network();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new MorpheusApi.Network();
      //expect(instance).to.be();
    });

    it('should have the property owner (base name: "owner")', function() {
      // uncomment below and update the code to test the property owner
      //var instance = new MorpheusApi.Network();
      //expect(instance).to.be();
    });

    it('should have the property code (base name: "code")', function() {
      // uncomment below and update the code to test the property code
      //var instance = new MorpheusApi.Network();
      //expect(instance).to.be();
    });

    it('should have the property ipv4Enabled (base name: "ipv4Enabled")', function() {
      // uncomment below and update the code to test the property ipv4Enabled
      //var instance = new MorpheusApi.Network();
      //expect(instance).to.be();
    });

    it('should have the property ipv6Enabled (base name: "ipv6Enabled")', function() {
      // uncomment below and update the code to test the property ipv6Enabled
      //var instance = new MorpheusApi.Network();
      //expect(instance).to.be();
    });

    it('should have the property category (base name: "category")', function() {
      // uncomment below and update the code to test the property category
      //var instance = new MorpheusApi.Network();
      //expect(instance).to.be();
    });

    it('should have the property interfaceName (base name: "interfaceName")', function() {
      // uncomment below and update the code to test the property interfaceName
      //var instance = new MorpheusApi.Network();
      //expect(instance).to.be();
    });

    it('should have the property bridgeName (base name: "bridgeName")', function() {
      // uncomment below and update the code to test the property bridgeName
      //var instance = new MorpheusApi.Network();
      //expect(instance).to.be();
    });

    it('should have the property bridgeInterface (base name: "bridgeInterface")', function() {
      // uncomment below and update the code to test the property bridgeInterface
      //var instance = new MorpheusApi.Network();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new MorpheusApi.Network();
      //expect(instance).to.be();
    });

    it('should have the property externalId (base name: "externalId")', function() {
      // uncomment below and update the code to test the property externalId
      //var instance = new MorpheusApi.Network();
      //expect(instance).to.be();
    });

    it('should have the property internalId (base name: "internalId")', function() {
      // uncomment below and update the code to test the property internalId
      //var instance = new MorpheusApi.Network();
      //expect(instance).to.be();
    });

    it('should have the property uniqueId (base name: "uniqueId")', function() {
      // uncomment below and update the code to test the property uniqueId
      //var instance = new MorpheusApi.Network();
      //expect(instance).to.be();
    });

    it('should have the property externalType (base name: "externalType")', function() {
      // uncomment below and update the code to test the property externalType
      //var instance = new MorpheusApi.Network();
      //expect(instance).to.be();
    });

    it('should have the property refUrl (base name: "refUrl")', function() {
      // uncomment below and update the code to test the property refUrl
      //var instance = new MorpheusApi.Network();
      //expect(instance).to.be();
    });

    it('should have the property refType (base name: "refType")', function() {
      // uncomment below and update the code to test the property refType
      //var instance = new MorpheusApi.Network();
      //expect(instance).to.be();
    });

    it('should have the property refId (base name: "refId")', function() {
      // uncomment below and update the code to test the property refId
      //var instance = new MorpheusApi.Network();
      //expect(instance).to.be();
    });

    it('should have the property vlanId (base name: "vlanId")', function() {
      // uncomment below and update the code to test the property vlanId
      //var instance = new MorpheusApi.Network();
      //expect(instance).to.be();
    });

    it('should have the property vswitchName (base name: "vswitchName")', function() {
      // uncomment below and update the code to test the property vswitchName
      //var instance = new MorpheusApi.Network();
      //expect(instance).to.be();
    });

    it('should have the property dhcpServer (base name: "dhcpServer")', function() {
      // uncomment below and update the code to test the property dhcpServer
      //var instance = new MorpheusApi.Network();
      //expect(instance).to.be();
    });

    it('should have the property dhcpIp (base name: "dhcpIp")', function() {
      // uncomment below and update the code to test the property dhcpIp
      //var instance = new MorpheusApi.Network();
      //expect(instance).to.be();
    });

    it('should have the property dhcpServerIPv6 (base name: "dhcpServerIPv6")', function() {
      // uncomment below and update the code to test the property dhcpServerIPv6
      //var instance = new MorpheusApi.Network();
      //expect(instance).to.be();
    });

    it('should have the property gateway (base name: "gateway")', function() {
      // uncomment below and update the code to test the property gateway
      //var instance = new MorpheusApi.Network();
      //expect(instance).to.be();
    });

    it('should have the property netmask (base name: "netmask")', function() {
      // uncomment below and update the code to test the property netmask
      //var instance = new MorpheusApi.Network();
      //expect(instance).to.be();
    });

    it('should have the property broadcast (base name: "broadcast")', function() {
      // uncomment below and update the code to test the property broadcast
      //var instance = new MorpheusApi.Network();
      //expect(instance).to.be();
    });

    it('should have the property subnetAddress (base name: "subnetAddress")', function() {
      // uncomment below and update the code to test the property subnetAddress
      //var instance = new MorpheusApi.Network();
      //expect(instance).to.be();
    });

    it('should have the property dnsPrimary (base name: "dnsPrimary")', function() {
      // uncomment below and update the code to test the property dnsPrimary
      //var instance = new MorpheusApi.Network();
      //expect(instance).to.be();
    });

    it('should have the property dnsSecondary (base name: "dnsSecondary")', function() {
      // uncomment below and update the code to test the property dnsSecondary
      //var instance = new MorpheusApi.Network();
      //expect(instance).to.be();
    });

    it('should have the property cidr (base name: "cidr")', function() {
      // uncomment below and update the code to test the property cidr
      //var instance = new MorpheusApi.Network();
      //expect(instance).to.be();
    });

    it('should have the property gatewayIPv6 (base name: "gatewayIPv6")', function() {
      // uncomment below and update the code to test the property gatewayIPv6
      //var instance = new MorpheusApi.Network();
      //expect(instance).to.be();
    });

    it('should have the property netmaskIPv6 (base name: "netmaskIPv6")', function() {
      // uncomment below and update the code to test the property netmaskIPv6
      //var instance = new MorpheusApi.Network();
      //expect(instance).to.be();
    });

    it('should have the property dnsPrimaryIPv6 (base name: "dnsPrimaryIPv6")', function() {
      // uncomment below and update the code to test the property dnsPrimaryIPv6
      //var instance = new MorpheusApi.Network();
      //expect(instance).to.be();
    });

    it('should have the property dnsSecondaryIPv6 (base name: "dnsSecondaryIPv6")', function() {
      // uncomment below and update the code to test the property dnsSecondaryIPv6
      //var instance = new MorpheusApi.Network();
      //expect(instance).to.be();
    });

    it('should have the property cidrIPv6 (base name: "cidrIPv6")', function() {
      // uncomment below and update the code to test the property cidrIPv6
      //var instance = new MorpheusApi.Network();
      //expect(instance).to.be();
    });

    it('should have the property tftpServer (base name: "tftpServer")', function() {
      // uncomment below and update the code to test the property tftpServer
      //var instance = new MorpheusApi.Network();
      //expect(instance).to.be();
    });

    it('should have the property bootFile (base name: "bootFile")', function() {
      // uncomment below and update the code to test the property bootFile
      //var instance = new MorpheusApi.Network();
      //expect(instance).to.be();
    });

    it('should have the property switchId (base name: "switchId")', function() {
      // uncomment below and update the code to test the property switchId
      //var instance = new MorpheusApi.Network();
      //expect(instance).to.be();
    });

    it('should have the property fabricId (base name: "fabricId")', function() {
      // uncomment below and update the code to test the property fabricId
      //var instance = new MorpheusApi.Network();
      //expect(instance).to.be();
    });

    it('should have the property networkRole (base name: "networkRole")', function() {
      // uncomment below and update the code to test the property networkRole
      //var instance = new MorpheusApi.Network();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new MorpheusApi.Network();
      //expect(instance).to.be();
    });

    it('should have the property availabilityZone (base name: "availabilityZone")', function() {
      // uncomment below and update the code to test the property availabilityZone
      //var instance = new MorpheusApi.Network();
      //expect(instance).to.be();
    });

    it('should have the property pool (base name: "pool")', function() {
      // uncomment below and update the code to test the property pool
      //var instance = new MorpheusApi.Network();
      //expect(instance).to.be();
    });

    it('should have the property poolIPv6 (base name: "poolIPv6")', function() {
      // uncomment below and update the code to test the property poolIPv6
      //var instance = new MorpheusApi.Network();
      //expect(instance).to.be();
    });

    it('should have the property networkProxy (base name: "networkProxy")', function() {
      // uncomment below and update the code to test the property networkProxy
      //var instance = new MorpheusApi.Network();
      //expect(instance).to.be();
    });

    it('should have the property networkDomain (base name: "networkDomain")', function() {
      // uncomment below and update the code to test the property networkDomain
      //var instance = new MorpheusApi.Network();
      //expect(instance).to.be();
    });

    it('should have the property searchDomains (base name: "searchDomains")', function() {
      // uncomment below and update the code to test the property searchDomains
      //var instance = new MorpheusApi.Network();
      //expect(instance).to.be();
    });

    it('should have the property prefixLength (base name: "prefixLength")', function() {
      // uncomment below and update the code to test the property prefixLength
      //var instance = new MorpheusApi.Network();
      //expect(instance).to.be();
    });

    it('should have the property visibility (base name: "visibility")', function() {
      // uncomment below and update the code to test the property visibility
      //var instance = new MorpheusApi.Network();
      //expect(instance).to.be();
    });

    it('should have the property enableAdmin (base name: "enableAdmin")', function() {
      // uncomment below and update the code to test the property enableAdmin
      //var instance = new MorpheusApi.Network();
      //expect(instance).to.be();
    });

    it('should have the property active (base name: "active")', function() {
      // uncomment below and update the code to test the property active
      //var instance = new MorpheusApi.Network();
      //expect(instance).to.be();
    });

    it('should have the property defaultNetwork (base name: "defaultNetwork")', function() {
      // uncomment below and update the code to test the property defaultNetwork
      //var instance = new MorpheusApi.Network();
      //expect(instance).to.be();
    });

    it('should have the property assignPublicIp (base name: "assignPublicIp")', function() {
      // uncomment below and update the code to test the property assignPublicIp
      //var instance = new MorpheusApi.Network();
      //expect(instance).to.be();
    });

    it('should have the property noProxy (base name: "noProxy")', function() {
      // uncomment below and update the code to test the property noProxy
      //var instance = new MorpheusApi.Network();
      //expect(instance).to.be();
    });

    it('should have the property applianceUrlProxyBypass (base name: "applianceUrlProxyBypass")', function() {
      // uncomment below and update the code to test the property applianceUrlProxyBypass
      //var instance = new MorpheusApi.Network();
      //expect(instance).to.be();
    });

    it('should have the property zonePool (base name: "zonePool")', function() {
      // uncomment below and update the code to test the property zonePool
      //var instance = new MorpheusApi.Network();
      //expect(instance).to.be();
    });

    it('should have the property allowStaticOverride (base name: "allowStaticOverride")', function() {
      // uncomment below and update the code to test the property allowStaticOverride
      //var instance = new MorpheusApi.Network();
      //expect(instance).to.be();
    });

    it('should have the property config (base name: "config")', function() {
      // uncomment below and update the code to test the property config
      //var instance = new MorpheusApi.Network();
      //expect(instance).to.be();
    });

    it('should have the property tenants (base name: "tenants")', function() {
      // uncomment below and update the code to test the property tenants
      //var instance = new MorpheusApi.Network();
      //expect(instance).to.be();
    });

  });

}));
