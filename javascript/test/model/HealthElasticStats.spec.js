/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MorpheusApi);
  }
}(this, function(expect, MorpheusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MorpheusApi.HealthElasticStats();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('HealthElasticStats', function() {
    it('should create an instance of HealthElasticStats', function() {
      // uncomment below and update the code to test HealthElasticStats
      //var instane = new MorpheusApi.HealthElasticStats();
      //expect(instance).to.be.a(MorpheusApi.HealthElasticStats);
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new MorpheusApi.HealthElasticStats();
      //expect(instance).to.be();
    });

    it('should have the property clusterName (base name: "clusterName")', function() {
      // uncomment below and update the code to test the property clusterName
      //var instance = new MorpheusApi.HealthElasticStats();
      //expect(instance).to.be();
    });

    it('should have the property nodeTotal (base name: "nodeTotal")', function() {
      // uncomment below and update the code to test the property nodeTotal
      //var instance = new MorpheusApi.HealthElasticStats();
      //expect(instance).to.be();
    });

    it('should have the property nodeData (base name: "nodeData")', function() {
      // uncomment below and update the code to test the property nodeData
      //var instance = new MorpheusApi.HealthElasticStats();
      //expect(instance).to.be();
    });

    it('should have the property shards (base name: "shards")', function() {
      // uncomment below and update the code to test the property shards
      //var instance = new MorpheusApi.HealthElasticStats();
      //expect(instance).to.be();
    });

    it('should have the property primary (base name: "primary")', function() {
      // uncomment below and update the code to test the property primary
      //var instance = new MorpheusApi.HealthElasticStats();
      //expect(instance).to.be();
    });

    it('should have the property relocating (base name: "relocating")', function() {
      // uncomment below and update the code to test the property relocating
      //var instance = new MorpheusApi.HealthElasticStats();
      //expect(instance).to.be();
    });

    it('should have the property initializing (base name: "initializing")', function() {
      // uncomment below and update the code to test the property initializing
      //var instance = new MorpheusApi.HealthElasticStats();
      //expect(instance).to.be();
    });

    it('should have the property unassigned (base name: "unassigned")', function() {
      // uncomment below and update the code to test the property unassigned
      //var instance = new MorpheusApi.HealthElasticStats();
      //expect(instance).to.be();
    });

    it('should have the property pendingTasks (base name: "pendingTasks")', function() {
      // uncomment below and update the code to test the property pendingTasks
      //var instance = new MorpheusApi.HealthElasticStats();
      //expect(instance).to.be();
    });

    it('should have the property activePercent (base name: "activePercent")', function() {
      // uncomment below and update the code to test the property activePercent
      //var instance = new MorpheusApi.HealthElasticStats();
      //expect(instance).to.be();
    });

  });

}));
