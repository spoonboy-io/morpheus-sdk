/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MorpheusApi);
  }
}(this, function(expect, MorpheusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MorpheusApi.LogData();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('LogData', function() {
    it('should create an instance of LogData', function() {
      // uncomment below and update the code to test LogData
      //var instane = new MorpheusApi.LogData();
      //expect(instance).to.be.a(MorpheusApi.LogData);
    });

    it('should have the property typeCode (base name: "typeCode")', function() {
      // uncomment below and update the code to test the property typeCode
      //var instance = new MorpheusApi.LogData();
      //expect(instance).to.be();
    });

    it('should have the property message (base name: "message")', function() {
      // uncomment below and update the code to test the property message
      //var instance = new MorpheusApi.LogData();
      //expect(instance).to.be();
    });

    it('should have the property level (base name: "level")', function() {
      // uncomment below and update the code to test the property level
      //var instance = new MorpheusApi.LogData();
      //expect(instance).to.be();
    });

    it('should have the property ts (base name: "ts")', function() {
      // uncomment below and update the code to test the property ts
      //var instance = new MorpheusApi.LogData();
      //expect(instance).to.be();
    });

    it('should have the property sourceType (base name: "sourceType")', function() {
      // uncomment below and update the code to test the property sourceType
      //var instance = new MorpheusApi.LogData();
      //expect(instance).to.be();
    });

    it('should have the property title (base name: "title")', function() {
      // uncomment below and update the code to test the property title
      //var instance = new MorpheusApi.LogData();
      //expect(instance).to.be();
    });

    it('should have the property logSignature (base name: "logSignature")', function() {
      // uncomment below and update the code to test the property logSignature
      //var instance = new MorpheusApi.LogData();
      //expect(instance).to.be();
    });

    it('should have the property objectId (base name: "objectId")', function() {
      // uncomment below and update the code to test the property objectId
      //var instance = new MorpheusApi.LogData();
      //expect(instance).to.be();
    });

    it('should have the property seq (base name: "seq")', function() {
      // uncomment below and update the code to test the property seq
      //var instance = new MorpheusApi.LogData();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "_id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new MorpheusApi.LogData();
      //expect(instance).to.be();
    });

    it('should have the property signatureVerified (base name: "signatureVerified")', function() {
      // uncomment below and update the code to test the property signatureVerified
      //var instance = new MorpheusApi.LogData();
      //expect(instance).to.be();
    });

  });

}));
