/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MorpheusApi);
  }
}(this, function(expect, MorpheusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MorpheusApi.SecurityGroupsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('SecurityGroupsApi', function() {
    describe('addSecurityGroupLocations', function() {
      it('should call addSecurityGroupLocations successfully', function(done) {
        //uncomment below and update the code to test addSecurityGroupLocations
        //instance.addSecurityGroupLocations(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addSecurityGroupRules', function() {
      it('should call addSecurityGroupRules successfully', function(done) {
        //uncomment below and update the code to test addSecurityGroupRules
        //instance.addSecurityGroupRules(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addSecurityGroups', function() {
      it('should call addSecurityGroups successfully', function(done) {
        //uncomment below and update the code to test addSecurityGroups
        //instance.addSecurityGroups(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSecurityGroupRules', function() {
      it('should call getSecurityGroupRules successfully', function(done) {
        //uncomment below and update the code to test getSecurityGroupRules
        //instance.getSecurityGroupRules(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSecurityGroups', function() {
      it('should call getSecurityGroups successfully', function(done) {
        //uncomment below and update the code to test getSecurityGroups
        //instance.getSecurityGroups(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listSecurityGroupRules', function() {
      it('should call listSecurityGroupRules successfully', function(done) {
        //uncomment below and update the code to test listSecurityGroupRules
        //instance.listSecurityGroupRules(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listSecurityGroups', function() {
      it('should call listSecurityGroups successfully', function(done) {
        //uncomment below and update the code to test listSecurityGroups
        //instance.listSecurityGroups(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeSecurityGroupLocations', function() {
      it('should call removeSecurityGroupLocations successfully', function(done) {
        //uncomment below and update the code to test removeSecurityGroupLocations
        //instance.removeSecurityGroupLocations(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeSecurityGroupRules', function() {
      it('should call removeSecurityGroupRules successfully', function(done) {
        //uncomment below and update the code to test removeSecurityGroupRules
        //instance.removeSecurityGroupRules(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeSecurityGroups', function() {
      it('should call removeSecurityGroups successfully', function(done) {
        //uncomment below and update the code to test removeSecurityGroups
        //instance.removeSecurityGroups(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateSecurityGroupRules', function() {
      it('should call updateSecurityGroupRules successfully', function(done) {
        //uncomment below and update the code to test updateSecurityGroupRules
        //instance.updateSecurityGroupRules(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateSecurityGroups', function() {
      it('should call updateSecurityGroups successfully', function(done) {
        //uncomment below and update the code to test updateSecurityGroups
        //instance.updateSecurityGroups(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
