/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MorpheusApi);
  }
}(this, function(expect, MorpheusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MorpheusApi.ChecksApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ChecksApi', function() {
    describe('addCheckApps', function() {
      it('should call addCheckApps successfully', function(done) {
        //uncomment below and update the code to test addCheckApps
        //instance.addCheckApps(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addCheckGroups', function() {
      it('should call addCheckGroups successfully', function(done) {
        //uncomment below and update the code to test addCheckGroups
        //instance.addCheckGroups(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addChecks', function() {
      it('should call addChecks successfully', function(done) {
        //uncomment below and update the code to test addChecks
        //instance.addChecks(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCheckApps', function() {
      it('should call deleteCheckApps successfully', function(done) {
        //uncomment below and update the code to test deleteCheckApps
        //instance.deleteCheckApps(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCheckGroups', function() {
      it('should call deleteCheckGroups successfully', function(done) {
        //uncomment below and update the code to test deleteCheckGroups
        //instance.deleteCheckGroups(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteChecks', function() {
      it('should call deleteChecks successfully', function(done) {
        //uncomment below and update the code to test deleteChecks
        //instance.deleteChecks(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getCheckApps', function() {
      it('should call getCheckApps successfully', function(done) {
        //uncomment below and update the code to test getCheckApps
        //instance.getCheckApps(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getCheckGroups', function() {
      it('should call getCheckGroups successfully', function(done) {
        //uncomment below and update the code to test getCheckGroups
        //instance.getCheckGroups(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getCheckTypes', function() {
      it('should call getCheckTypes successfully', function(done) {
        //uncomment below and update the code to test getCheckTypes
        //instance.getCheckTypes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getChecks', function() {
      it('should call getChecks successfully', function(done) {
        //uncomment below and update the code to test getChecks
        //instance.getChecks(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listCheckApps', function() {
      it('should call listCheckApps successfully', function(done) {
        //uncomment below and update the code to test listCheckApps
        //instance.listCheckApps(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listCheckGroups', function() {
      it('should call listCheckGroups successfully', function(done) {
        //uncomment below and update the code to test listCheckGroups
        //instance.listCheckGroups(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listCheckTypes', function() {
      it('should call listCheckTypes successfully', function(done) {
        //uncomment below and update the code to test listCheckTypes
        //instance.listCheckTypes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listChecks', function() {
      it('should call listChecks successfully', function(done) {
        //uncomment below and update the code to test listChecks
        //instance.listChecks(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateCheckApps', function() {
      it('should call updateCheckApps successfully', function(done) {
        //uncomment below and update the code to test updateCheckApps
        //instance.updateCheckApps(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateCheckGroups', function() {
      it('should call updateCheckGroups successfully', function(done) {
        //uncomment below and update the code to test updateCheckGroups
        //instance.updateCheckGroups(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateChecks', function() {
      it('should call updateChecks successfully', function(done) {
        //uncomment below and update the code to test updateChecks
        //instance.updateChecks(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateMuteAllCheckApps', function() {
      it('should call updateMuteAllCheckApps successfully', function(done) {
        //uncomment below and update the code to test updateMuteAllCheckApps
        //instance.updateMuteAllCheckApps(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateMuteAllCheckGroups', function() {
      it('should call updateMuteAllCheckGroups successfully', function(done) {
        //uncomment below and update the code to test updateMuteAllCheckGroups
        //instance.updateMuteAllCheckGroups(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateMuteAllChecks', function() {
      it('should call updateMuteAllChecks successfully', function(done) {
        //uncomment below and update the code to test updateMuteAllChecks
        //instance.updateMuteAllChecks(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateMuteCheckApps', function() {
      it('should call updateMuteCheckApps successfully', function(done) {
        //uncomment below and update the code to test updateMuteCheckApps
        //instance.updateMuteCheckApps(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateMuteCheckGroups', function() {
      it('should call updateMuteCheckGroups successfully', function(done) {
        //uncomment below and update the code to test updateMuteCheckGroups
        //instance.updateMuteCheckGroups(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateMuteChecks', function() {
      it('should call updateMuteChecks successfully', function(done) {
        //uncomment below and update the code to test updateMuteChecks
        //instance.updateMuteChecks(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
