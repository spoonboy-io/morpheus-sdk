/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MorpheusApi);
  }
}(this, function(expect, MorpheusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MorpheusApi.ServiceCatalogApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ServiceCatalogApi', function() {
    describe('addCatalogCart', function() {
      it('should call addCatalogCart successfully', function(done) {
        //uncomment below and update the code to test addCatalogCart
        //instance.addCatalogCart(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addCatalogCartItem', function() {
      it('should call addCatalogCartItem successfully', function(done) {
        //uncomment below and update the code to test addCatalogCartItem
        //instance.addCatalogCartItem(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addCatalogOrder', function() {
      it('should call addCatalogOrder successfully', function(done) {
        //uncomment below and update the code to test addCatalogOrder
        //instance.addCatalogOrder(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCatalogCart', function() {
      it('should call deleteCatalogCart successfully', function(done) {
        //uncomment below and update the code to test deleteCatalogCart
        //instance.deleteCatalogCart(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCatalogCartItem', function() {
      it('should call deleteCatalogCartItem successfully', function(done) {
        //uncomment below and update the code to test deleteCatalogCartItem
        //instance.deleteCatalogCartItem(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCatalogItem', function() {
      it('should call deleteCatalogItem successfully', function(done) {
        //uncomment below and update the code to test deleteCatalogItem
        //instance.deleteCatalogItem(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getCatalogItem', function() {
      it('should call getCatalogItem successfully', function(done) {
        //uncomment below and update the code to test getCatalogItem
        //instance.getCatalogItem(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getCatalogType', function() {
      it('should call getCatalogType successfully', function(done) {
        //uncomment below and update the code to test getCatalogType
        //instance.getCatalogType(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listCatalogCart', function() {
      it('should call listCatalogCart successfully', function(done) {
        //uncomment below and update the code to test listCatalogCart
        //instance.listCatalogCart(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listCatalogItems', function() {
      it('should call listCatalogItems successfully', function(done) {
        //uncomment below and update the code to test listCatalogItems
        //instance.listCatalogItems(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listCatalogTypes', function() {
      it('should call listCatalogTypes successfully', function(done) {
        //uncomment below and update the code to test listCatalogTypes
        //instance.listCatalogTypes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
