/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.1.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MorpheusApi);
  }
}(this, function(expect, MorpheusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MorpheusApi.AutomationApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('AutomationApi', function() {
    describe('addExecuteSchedules', function() {
      it('should call addExecuteSchedules successfully', function(done) {
        //uncomment below and update the code to test addExecuteSchedules
        //instance.addExecuteSchedules(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('executeExecutionRequest', function() {
      it('should call executeExecutionRequest successfully', function(done) {
        //uncomment below and update the code to test executeExecutionRequest
        //instance.executeExecutionRequest(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getExecuteSchedules', function() {
      it('should call getExecuteSchedules successfully', function(done) {
        //uncomment below and update the code to test getExecuteSchedules
        //instance.getExecuteSchedules(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getExecutionRequest', function() {
      it('should call getExecutionRequest successfully', function(done) {
        //uncomment below and update the code to test getExecutionRequest
        //instance.getExecutionRequest(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listExecuteSchedules', function() {
      it('should call listExecuteSchedules successfully', function(done) {
        //uncomment below and update the code to test listExecuteSchedules
        //instance.listExecuteSchedules(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeExecuteSchedules', function() {
      it('should call removeExecuteSchedules successfully', function(done) {
        //uncomment below and update the code to test removeExecuteSchedules
        //instance.removeExecuteSchedules(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateExecuteSchedules', function() {
      it('should call updateExecuteSchedules successfully', function(done) {
        //uncomment below and update the code to test updateExecuteSchedules
        //instance.updateExecuteSchedules(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
