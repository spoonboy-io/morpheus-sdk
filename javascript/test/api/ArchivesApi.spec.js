/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.1.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MorpheusApi);
  }
}(this, function(expect, MorpheusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MorpheusApi.ArchivesApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ArchivesApi', function() {
    describe('addArchiveBucket', function() {
      it('should call addArchiveBucket successfully', function(done) {
        //uncomment below and update the code to test addArchiveBucket
        //instance.addArchiveBucket(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addArchiveFile', function() {
      it('should call addArchiveFile successfully', function(done) {
        //uncomment below and update the code to test addArchiveFile
        //instance.addArchiveFile(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addArchiveFileLink', function() {
      it('should call addArchiveFileLink successfully', function(done) {
        //uncomment below and update the code to test addArchiveFileLink
        //instance.addArchiveFileLink(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteArchiveBucket', function() {
      it('should call deleteArchiveBucket successfully', function(done) {
        //uncomment below and update the code to test deleteArchiveBucket
        //instance.deleteArchiveBucket(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteArchiveFile', function() {
      it('should call deleteArchiveFile successfully', function(done) {
        //uncomment below and update the code to test deleteArchiveFile
        //instance.deleteArchiveFile(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteArchiveFileLink', function() {
      it('should call deleteArchiveFileLink successfully', function(done) {
        //uncomment below and update the code to test deleteArchiveFileLink
        //instance.deleteArchiveFileLink(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getArchiveBucket', function() {
      it('should call getArchiveBucket successfully', function(done) {
        //uncomment below and update the code to test getArchiveBucket
        //instance.getArchiveBucket(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getArchiveFile', function() {
      it('should call getArchiveFile successfully', function(done) {
        //uncomment below and update the code to test getArchiveFile
        //instance.getArchiveFile(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getArchiveFileDetail', function() {
      it('should call getArchiveFileDetail successfully', function(done) {
        //uncomment below and update the code to test getArchiveFileDetail
        //instance.getArchiveFileDetail(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getArchiveFileLinks', function() {
      it('should call getArchiveFileLinks successfully', function(done) {
        //uncomment below and update the code to test getArchiveFileLinks
        //instance.getArchiveFileLinks(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listArchiveBuckets', function() {
      it('should call listArchiveBuckets successfully', function(done) {
        //uncomment below and update the code to test listArchiveBuckets
        //instance.listArchiveBuckets(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listArchiveFiles', function() {
      it('should call listArchiveFiles successfully', function(done) {
        //uncomment below and update the code to test listArchiveFiles
        //instance.listArchiveFiles(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateArchiveBucket', function() {
      it('should call updateArchiveBucket successfully', function(done) {
        //uncomment below and update the code to test updateArchiveBucket
        //instance.updateArchiveBucket(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
