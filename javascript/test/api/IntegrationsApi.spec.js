/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MorpheusApi);
  }
}(this, function(expect, MorpheusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MorpheusApi.IntegrationsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('IntegrationsApi', function() {
    describe('addIntegrationSnowObjects', function() {
      it('should call addIntegrationSnowObjects successfully', function(done) {
        //uncomment below and update the code to test addIntegrationSnowObjects
        //instance.addIntegrationSnowObjects(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addIntegrations', function() {
      it('should call addIntegrations successfully', function(done) {
        //uncomment below and update the code to test addIntegrations
        //instance.addIntegrations(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getIntegrationInventory', function() {
      it('should call getIntegrationInventory successfully', function(done) {
        //uncomment below and update the code to test getIntegrationInventory
        //instance.getIntegrationInventory(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getIntegrationObjects', function() {
      it('should call getIntegrationObjects successfully', function(done) {
        //uncomment below and update the code to test getIntegrationObjects
        //instance.getIntegrationObjects(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getIntegrationTypeOptionTypes', function() {
      it('should call getIntegrationTypeOptionTypes successfully', function(done) {
        //uncomment below and update the code to test getIntegrationTypeOptionTypes
        //instance.getIntegrationTypeOptionTypes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getIntegrationTypes', function() {
      it('should call getIntegrationTypes successfully', function(done) {
        //uncomment below and update the code to test getIntegrationTypes
        //instance.getIntegrationTypes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getIntegrations', function() {
      it('should call getIntegrations successfully', function(done) {
        //uncomment below and update the code to test getIntegrations
        //instance.getIntegrations(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listIntegrationInventory', function() {
      it('should call listIntegrationInventory successfully', function(done) {
        //uncomment below and update the code to test listIntegrationInventory
        //instance.listIntegrationInventory(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listIntegrationObjects', function() {
      it('should call listIntegrationObjects successfully', function(done) {
        //uncomment below and update the code to test listIntegrationObjects
        //instance.listIntegrationObjects(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listIntegrationTypes', function() {
      it('should call listIntegrationTypes successfully', function(done) {
        //uncomment below and update the code to test listIntegrationTypes
        //instance.listIntegrationTypes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listIntegrations', function() {
      it('should call listIntegrations successfully', function(done) {
        //uncomment below and update the code to test listIntegrations
        //instance.listIntegrations(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('refreshIntegrations', function() {
      it('should call refreshIntegrations successfully', function(done) {
        //uncomment below and update the code to test refreshIntegrations
        //instance.refreshIntegrations(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeIntegrationObjects', function() {
      it('should call removeIntegrationObjects successfully', function(done) {
        //uncomment below and update the code to test removeIntegrationObjects
        //instance.removeIntegrationObjects(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeIntegrations', function() {
      it('should call removeIntegrations successfully', function(done) {
        //uncomment below and update the code to test removeIntegrations
        //instance.removeIntegrations(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateIntegrationInventory', function() {
      it('should call updateIntegrationInventory successfully', function(done) {
        //uncomment below and update the code to test updateIntegrationInventory
        //instance.updateIntegrationInventory(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateIntegrations', function() {
      it('should call updateIntegrations successfully', function(done) {
        //uncomment below and update the code to test updateIntegrations
        //instance.updateIntegrations(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
