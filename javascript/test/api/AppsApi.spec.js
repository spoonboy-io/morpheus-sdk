/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.1.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MorpheusApi);
  }
}(this, function(expect, MorpheusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MorpheusApi.AppsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('AppsApi', function() {
    describe('addAppInstance', function() {
      it('should call addAppInstance successfully', function(done) {
        //uncomment below and update the code to test addAppInstance
        //instance.addAppInstance(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addAppUndoDelete', function() {
      it('should call addAppUndoDelete successfully', function(done) {
        //uncomment below and update the code to test addAppUndoDelete
        //instance.addAppUndoDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addApps', function() {
      it('should call addApps successfully', function(done) {
        //uncomment below and update the code to test addApps
        //instance.addApps(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('applyAppState', function() {
      it('should call applyAppState successfully', function(done) {
        //uncomment below and update the code to test applyAppState
        //instance.applyAppState(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteApp', function() {
      it('should call deleteApp successfully', function(done) {
        //uncomment below and update the code to test deleteApp
        //instance.deleteApp(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getApp', function() {
      it('should call getApp successfully', function(done) {
        //uncomment below and update the code to test getApp
        //instance.getApp(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAppSecurityGroups', function() {
      it('should call getAppSecurityGroups successfully', function(done) {
        //uncomment below and update the code to test getAppSecurityGroups
        //instance.getAppSecurityGroups(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAppState', function() {
      it('should call getAppState successfully', function(done) {
        //uncomment below and update the code to test getAppState
        //instance.getAppState(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listApps', function() {
      it('should call listApps successfully', function(done) {
        //uncomment below and update the code to test listApps
        //instance.listApps(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('prepareAppApply', function() {
      it('should call prepareAppApply successfully', function(done) {
        //uncomment below and update the code to test prepareAppApply
        //instance.prepareAppApply(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('refreshAppState', function() {
      it('should call refreshAppState successfully', function(done) {
        //uncomment below and update the code to test refreshAppState
        //instance.refreshAppState(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeAppInstance', function() {
      it('should call removeAppInstance successfully', function(done) {
        //uncomment below and update the code to test removeAppInstance
        //instance.removeAppInstance(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setAppSecurityGroups', function() {
      it('should call setAppSecurityGroups successfully', function(done) {
        //uncomment below and update the code to test setAppSecurityGroups
        //instance.setAppSecurityGroups(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateApp', function() {
      it('should call updateApp successfully', function(done) {
        //uncomment below and update the code to test updateApp
        //instance.updateApp(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('validateAppState', function() {
      it('should call validateAppState successfully', function(done) {
        //uncomment below and update the code to test validateAppState
        //instance.validateAppState(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
