/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MorpheusApi);
  }
}(this, function(expect, MorpheusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MorpheusApi.LibraryApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('LibraryApi', function() {
    describe('addFileTemplate', function() {
      it('should call addFileTemplate successfully', function(done) {
        //uncomment below and update the code to test addFileTemplate
        //instance.addFileTemplate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addInstanceType', function() {
      it('should call addInstanceType successfully', function(done) {
        //uncomment below and update the code to test addInstanceType
        //instance.addInstanceType(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addLayout', function() {
      it('should call addLayout successfully', function(done) {
        //uncomment below and update the code to test addLayout
        //instance.addLayout(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addNodeType', function() {
      it('should call addNodeType successfully', function(done) {
        //uncomment below and update the code to test addNodeType
        //instance.addNodeType(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addOptionList', function() {
      it('should call addOptionList successfully', function(done) {
        //uncomment below and update the code to test addOptionList
        //instance.addOptionList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addOptionType', function() {
      it('should call addOptionType successfully', function(done) {
        //uncomment below and update the code to test addOptionType
        //instance.addOptionType(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addScript', function() {
      it('should call addScript successfully', function(done) {
        //uncomment below and update the code to test addScript
        //instance.addScript(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addSpecTemplate', function() {
      it('should call addSpecTemplate successfully', function(done) {
        //uncomment below and update the code to test addSpecTemplate
        //instance.addSpecTemplate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addVirtualImage', function() {
      it('should call addVirtualImage successfully', function(done) {
        //uncomment below and update the code to test addVirtualImage
        //instance.addVirtualImage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addVirtualImageFile', function() {
      it('should call addVirtualImageFile successfully', function(done) {
        //uncomment below and update the code to test addVirtualImageFile
        //instance.addVirtualImageFile(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteFileTemplate', function() {
      it('should call deleteFileTemplate successfully', function(done) {
        //uncomment below and update the code to test deleteFileTemplate
        //instance.deleteFileTemplate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteInstanceType', function() {
      it('should call deleteInstanceType successfully', function(done) {
        //uncomment below and update the code to test deleteInstanceType
        //instance.deleteInstanceType(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteLayout', function() {
      it('should call deleteLayout successfully', function(done) {
        //uncomment below and update the code to test deleteLayout
        //instance.deleteLayout(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteNodeType', function() {
      it('should call deleteNodeType successfully', function(done) {
        //uncomment below and update the code to test deleteNodeType
        //instance.deleteNodeType(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteOptionList', function() {
      it('should call deleteOptionList successfully', function(done) {
        //uncomment below and update the code to test deleteOptionList
        //instance.deleteOptionList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteOptionType', function() {
      it('should call deleteOptionType successfully', function(done) {
        //uncomment below and update the code to test deleteOptionType
        //instance.deleteOptionType(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteScript', function() {
      it('should call deleteScript successfully', function(done) {
        //uncomment below and update the code to test deleteScript
        //instance.deleteScript(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteSpecTemplate', function() {
      it('should call deleteSpecTemplate successfully', function(done) {
        //uncomment below and update the code to test deleteSpecTemplate
        //instance.deleteSpecTemplate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getFileTemplate', function() {
      it('should call getFileTemplate successfully', function(done) {
        //uncomment below and update the code to test getFileTemplate
        //instance.getFileTemplate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getInput', function() {
      it('should call getInput successfully', function(done) {
        //uncomment below and update the code to test getInput
        //instance.getInput(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getInstanceType', function() {
      it('should call getInstanceType successfully', function(done) {
        //uncomment below and update the code to test getInstanceType
        //instance.getInstanceType(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getLayout', function() {
      it('should call getLayout successfully', function(done) {
        //uncomment below and update the code to test getLayout
        //instance.getLayout(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getNodeType', function() {
      it('should call getNodeType successfully', function(done) {
        //uncomment below and update the code to test getNodeType
        //instance.getNodeType(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getOptionList', function() {
      it('should call getOptionList successfully', function(done) {
        //uncomment below and update the code to test getOptionList
        //instance.getOptionList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getOptionListItems', function() {
      it('should call getOptionListItems successfully', function(done) {
        //uncomment below and update the code to test getOptionListItems
        //instance.getOptionListItems(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getScript', function() {
      it('should call getScript successfully', function(done) {
        //uncomment below and update the code to test getScript
        //instance.getScript(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSecurityPackageType', function() {
      it('should call getSecurityPackageType successfully', function(done) {
        //uncomment below and update the code to test getSecurityPackageType
        //instance.getSecurityPackageType(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSpecTemplate', function() {
      it('should call getSpecTemplate successfully', function(done) {
        //uncomment below and update the code to test getSpecTemplate
        //instance.getSpecTemplate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getVirtualImage', function() {
      it('should call getVirtualImage successfully', function(done) {
        //uncomment below and update the code to test getVirtualImage
        //instance.getVirtualImage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listFileTemplates', function() {
      it('should call listFileTemplates successfully', function(done) {
        //uncomment below and update the code to test listFileTemplates
        //instance.listFileTemplates(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listInputs', function() {
      it('should call listInputs successfully', function(done) {
        //uncomment below and update the code to test listInputs
        //instance.listInputs(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listInstanceTypes', function() {
      it('should call listInstanceTypes successfully', function(done) {
        //uncomment below and update the code to test listInstanceTypes
        //instance.listInstanceTypes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listLayouts', function() {
      it('should call listLayouts successfully', function(done) {
        //uncomment below and update the code to test listLayouts
        //instance.listLayouts(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listLayoutsForInstanceType', function() {
      it('should call listLayoutsForInstanceType successfully', function(done) {
        //uncomment below and update the code to test listLayoutsForInstanceType
        //instance.listLayoutsForInstanceType(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listNodeTypes', function() {
      it('should call listNodeTypes successfully', function(done) {
        //uncomment below and update the code to test listNodeTypes
        //instance.listNodeTypes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listOptionLists', function() {
      it('should call listOptionLists successfully', function(done) {
        //uncomment below and update the code to test listOptionLists
        //instance.listOptionLists(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listScripts', function() {
      it('should call listScripts successfully', function(done) {
        //uncomment below and update the code to test listScripts
        //instance.listScripts(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listSecurityPackageTypes', function() {
      it('should call listSecurityPackageTypes successfully', function(done) {
        //uncomment below and update the code to test listSecurityPackageTypes
        //instance.listSecurityPackageTypes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listSpecTemplates', function() {
      it('should call listSpecTemplates successfully', function(done) {
        //uncomment below and update the code to test listSpecTemplates
        //instance.listSpecTemplates(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listVirtualImageLocations', function() {
      it('should call listVirtualImageLocations successfully', function(done) {
        //uncomment below and update the code to test listVirtualImageLocations
        //instance.listVirtualImageLocations(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listVirtualImages', function() {
      it('should call listVirtualImages successfully', function(done) {
        //uncomment below and update the code to test listVirtualImages
        //instance.listVirtualImages(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeSecurityScans', function() {
      it('should call removeSecurityScans successfully', function(done) {
        //uncomment below and update the code to test removeSecurityScans
        //instance.removeSecurityScans(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeVirtualImage', function() {
      it('should call removeVirtualImage successfully', function(done) {
        //uncomment below and update the code to test removeVirtualImage
        //instance.removeVirtualImage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeVirtualImageFile', function() {
      it('should call removeVirtualImageFile successfully', function(done) {
        //uncomment below and update the code to test removeVirtualImageFile
        //instance.removeVirtualImageFile(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeVirtualImageLocation', function() {
      it('should call removeVirtualImageLocation successfully', function(done) {
        //uncomment below and update the code to test removeVirtualImageLocation
        //instance.removeVirtualImageLocation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setInstanceTypeFeatured', function() {
      it('should call setInstanceTypeFeatured successfully', function(done) {
        //uncomment below and update the code to test setInstanceTypeFeatured
        //instance.setInstanceTypeFeatured(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateFileTemplate', function() {
      it('should call updateFileTemplate successfully', function(done) {
        //uncomment below and update the code to test updateFileTemplate
        //instance.updateFileTemplate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateInstanceType', function() {
      it('should call updateInstanceType successfully', function(done) {
        //uncomment below and update the code to test updateInstanceType
        //instance.updateInstanceType(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateInstanceTypeLogo', function() {
      it('should call updateInstanceTypeLogo successfully', function(done) {
        //uncomment below and update the code to test updateInstanceTypeLogo
        //instance.updateInstanceTypeLogo(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateLayout', function() {
      it('should call updateLayout successfully', function(done) {
        //uncomment below and update the code to test updateLayout
        //instance.updateLayout(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateLayoutPermissions', function() {
      it('should call updateLayoutPermissions successfully', function(done) {
        //uncomment below and update the code to test updateLayoutPermissions
        //instance.updateLayoutPermissions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateNodeType', function() {
      it('should call updateNodeType successfully', function(done) {
        //uncomment below and update the code to test updateNodeType
        //instance.updateNodeType(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateOptionList', function() {
      it('should call updateOptionList successfully', function(done) {
        //uncomment below and update the code to test updateOptionList
        //instance.updateOptionList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateOptionType', function() {
      it('should call updateOptionType successfully', function(done) {
        //uncomment below and update the code to test updateOptionType
        //instance.updateOptionType(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateScript', function() {
      it('should call updateScript successfully', function(done) {
        //uncomment below and update the code to test updateScript
        //instance.updateScript(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateSpecTemplate', function() {
      it('should call updateSpecTemplate successfully', function(done) {
        //uncomment below and update the code to test updateSpecTemplate
        //instance.updateSpecTemplate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateVirtualImage', function() {
      it('should call updateVirtualImage successfully', function(done) {
        //uncomment below and update the code to test updateVirtualImage
        //instance.updateVirtualImage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
