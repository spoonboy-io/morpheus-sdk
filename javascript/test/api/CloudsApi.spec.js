/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MorpheusApi);
  }
}(this, function(expect, MorpheusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MorpheusApi.CloudsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('CloudsApi', function() {
    describe('addCloudResourcePool', function() {
      it('should call addCloudResourcePool successfully', function(done) {
        //uncomment below and update the code to test addCloudResourcePool
        //instance.addCloudResourcePool(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addClouds', function() {
      it('should call addClouds successfully', function(done) {
        //uncomment below and update the code to test addClouds
        //instance.addClouds(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getCloudDatastores', function() {
      it('should call getCloudDatastores successfully', function(done) {
        //uncomment below and update the code to test getCloudDatastores
        //instance.getCloudDatastores(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getCloudFolders', function() {
      it('should call getCloudFolders successfully', function(done) {
        //uncomment below and update the code to test getCloudFolders
        //instance.getCloudFolders(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getCloudResourcePools', function() {
      it('should call getCloudResourcePools successfully', function(done) {
        //uncomment below and update the code to test getCloudResourcePools
        //instance.getCloudResourcePools(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getCloudTypes', function() {
      it('should call getCloudTypes successfully', function(done) {
        //uncomment below and update the code to test getCloudTypes
        //instance.getCloudTypes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getClouds', function() {
      it('should call getClouds successfully', function(done) {
        //uncomment below and update the code to test getClouds
        //instance.getClouds(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getWikiCloud', function() {
      it('should call getWikiCloud successfully', function(done) {
        //uncomment below and update the code to test getWikiCloud
        //instance.getWikiCloud(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listCloudDatastores', function() {
      it('should call listCloudDatastores successfully', function(done) {
        //uncomment below and update the code to test listCloudDatastores
        //instance.listCloudDatastores(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listCloudFolders', function() {
      it('should call listCloudFolders successfully', function(done) {
        //uncomment below and update the code to test listCloudFolders
        //instance.listCloudFolders(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listCloudResourcePools', function() {
      it('should call listCloudResourcePools successfully', function(done) {
        //uncomment below and update the code to test listCloudResourcePools
        //instance.listCloudResourcePools(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listCloudSecurityGroups', function() {
      it('should call listCloudSecurityGroups successfully', function(done) {
        //uncomment below and update the code to test listCloudSecurityGroups
        //instance.listCloudSecurityGroups(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listCloudTypes', function() {
      it('should call listCloudTypes successfully', function(done) {
        //uncomment below and update the code to test listCloudTypes
        //instance.listCloudTypes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listClouds', function() {
      it('should call listClouds successfully', function(done) {
        //uncomment below and update the code to test listClouds
        //instance.listClouds(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('refreshClouds', function() {
      it('should call refreshClouds successfully', function(done) {
        //uncomment below and update the code to test refreshClouds
        //instance.refreshClouds(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeCloudResourcePools', function() {
      it('should call removeCloudResourcePools successfully', function(done) {
        //uncomment below and update the code to test removeCloudResourcePools
        //instance.removeCloudResourcePools(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeClouds', function() {
      it('should call removeClouds successfully', function(done) {
        //uncomment below and update the code to test removeClouds
        //instance.removeClouds(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateCloudDatastores', function() {
      it('should call updateCloudDatastores successfully', function(done) {
        //uncomment below and update the code to test updateCloudDatastores
        //instance.updateCloudDatastores(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateCloudFolders', function() {
      it('should call updateCloudFolders successfully', function(done) {
        //uncomment below and update the code to test updateCloudFolders
        //instance.updateCloudFolders(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateCloudLogo', function() {
      it('should call updateCloudLogo successfully', function(done) {
        //uncomment below and update the code to test updateCloudLogo
        //instance.updateCloudLogo(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateCloudResourcePool', function() {
      it('should call updateCloudResourcePool successfully', function(done) {
        //uncomment below and update the code to test updateCloudResourcePool
        //instance.updateCloudResourcePool(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateCloudSecurityGroups', function() {
      it('should call updateCloudSecurityGroups successfully', function(done) {
        //uncomment below and update the code to test updateCloudSecurityGroups
        //instance.updateCloudSecurityGroups(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateClouds', function() {
      it('should call updateClouds successfully', function(done) {
        //uncomment below and update the code to test updateClouds
        //instance.updateClouds(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateWikiCloud', function() {
      it('should call updateWikiCloud successfully', function(done) {
        //uncomment below and update the code to test updateWikiCloud
        //instance.updateWikiCloud(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
