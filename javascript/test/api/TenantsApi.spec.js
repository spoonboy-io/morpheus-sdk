/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MorpheusApi);
  }
}(this, function(expect, MorpheusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MorpheusApi.TenantsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('TenantsApi', function() {
    describe('addTenant', function() {
      it('should call addTenant successfully', function(done) {
        //uncomment below and update the code to test addTenant
        //instance.addTenant(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addUserTenant', function() {
      it('should call addUserTenant successfully', function(done) {
        //uncomment below and update the code to test addUserTenant
        //instance.addUserTenant(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createTenantSubtenantGroup', function() {
      it('should call createTenantSubtenantGroup successfully', function(done) {
        //uncomment below and update the code to test createTenantSubtenantGroup
        //instance.createTenantSubtenantGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getTenant', function() {
      it('should call getTenant successfully', function(done) {
        //uncomment below and update the code to test getTenant
        //instance.getTenant(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getTenantSubtenantGroup', function() {
      it('should call getTenantSubtenantGroup successfully', function(done) {
        //uncomment below and update the code to test getTenantSubtenantGroup
        //instance.getTenantSubtenantGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTenantSubtenantGroups', function() {
      it('should call listTenantSubtenantGroups successfully', function(done) {
        //uncomment below and update the code to test listTenantSubtenantGroups
        //instance.listTenantSubtenantGroups(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTenants', function() {
      it('should call listTenants successfully', function(done) {
        //uncomment below and update the code to test listTenants
        //instance.listTenants(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTenantsAvailableRoles', function() {
      it('should call listTenantsAvailableRoles successfully', function(done) {
        //uncomment below and update the code to test listTenantsAvailableRoles
        //instance.listTenantsAvailableRoles(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeTenant', function() {
      it('should call removeTenant successfully', function(done) {
        //uncomment below and update the code to test removeTenant
        //instance.removeTenant(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeTenantSubtenantGroup', function() {
      it('should call removeTenantSubtenantGroup successfully', function(done) {
        //uncomment below and update the code to test removeTenantSubtenantGroup
        //instance.removeTenantSubtenantGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateTenant', function() {
      it('should call updateTenant successfully', function(done) {
        //uncomment below and update the code to test updateTenant
        //instance.updateTenant(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateTenantSubtenantGroup', function() {
      it('should call updateTenantSubtenantGroup successfully', function(done) {
        //uncomment below and update the code to test updateTenantSubtenantGroup
        //instance.updateTenantSubtenantGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateTenantSubtenantGroupZones', function() {
      it('should call updateTenantSubtenantGroupZones successfully', function(done) {
        //uncomment below and update the code to test updateTenantSubtenantGroupZones
        //instance.updateTenantSubtenantGroupZones(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
