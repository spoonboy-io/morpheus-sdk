/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MorpheusApi);
  }
}(this, function(expect, MorpheusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MorpheusApi.DeploymentsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DeploymentsApi', function() {
    describe('addDeploymentFile', function() {
      it('should call addDeploymentFile successfully', function(done) {
        //uncomment below and update the code to test addDeploymentFile
        //instance.addDeploymentFile(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addDeploymentVersion', function() {
      it('should call addDeploymentVersion successfully', function(done) {
        //uncomment below and update the code to test addDeploymentVersion
        //instance.addDeploymentVersion(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addDeployments', function() {
      it('should call addDeployments successfully', function(done) {
        //uncomment below and update the code to test addDeployments
        //instance.addDeployments(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteDeployment', function() {
      it('should call deleteDeployment successfully', function(done) {
        //uncomment below and update the code to test deleteDeployment
        //instance.deleteDeployment(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteDeploymentFile', function() {
      it('should call deleteDeploymentFile successfully', function(done) {
        //uncomment below and update the code to test deleteDeploymentFile
        //instance.deleteDeploymentFile(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteDeploymentVersion', function() {
      it('should call deleteDeploymentVersion successfully', function(done) {
        //uncomment below and update the code to test deleteDeploymentVersion
        //instance.deleteDeploymentVersion(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getDeployment', function() {
      it('should call getDeployment successfully', function(done) {
        //uncomment below and update the code to test getDeployment
        //instance.getDeployment(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getDeploymentVersion', function() {
      it('should call getDeploymentVersion successfully', function(done) {
        //uncomment below and update the code to test getDeploymentVersion
        //instance.getDeploymentVersion(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listDeploymentFiles', function() {
      it('should call listDeploymentFiles successfully', function(done) {
        //uncomment below and update the code to test listDeploymentFiles
        //instance.listDeploymentFiles(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listDeploymentVersions', function() {
      it('should call listDeploymentVersions successfully', function(done) {
        //uncomment below and update the code to test listDeploymentVersions
        //instance.listDeploymentVersions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listDeployments', function() {
      it('should call listDeployments successfully', function(done) {
        //uncomment below and update the code to test listDeployments
        //instance.listDeployments(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateDeployment', function() {
      it('should call updateDeployment successfully', function(done) {
        //uncomment below and update the code to test updateDeployment
        //instance.updateDeployment(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateDeploymentVersion', function() {
      it('should call updateDeploymentVersion successfully', function(done) {
        //uncomment below and update the code to test updateDeploymentVersion
        //instance.updateDeploymentVersion(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
