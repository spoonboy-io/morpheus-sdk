/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MorpheusApi);
  }
}(this, function(expect, MorpheusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MorpheusApi.ImageBuildsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ImageBuildsApi', function() {
    describe('addBootScript', function() {
      it('should call addBootScript successfully', function(done) {
        //uncomment below and update the code to test addBootScript
        //instance.addBootScript(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addImageBuild', function() {
      it('should call addImageBuild successfully', function(done) {
        //uncomment below and update the code to test addImageBuild
        //instance.addImageBuild(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addPreseedScript', function() {
      it('should call addPreseedScript successfully', function(done) {
        //uncomment below and update the code to test addPreseedScript
        //instance.addPreseedScript(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteBootScript', function() {
      it('should call deleteBootScript successfully', function(done) {
        //uncomment below and update the code to test deleteBootScript
        //instance.deleteBootScript(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteImageBuild', function() {
      it('should call deleteImageBuild successfully', function(done) {
        //uncomment below and update the code to test deleteImageBuild
        //instance.deleteImageBuild(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deletePreseedScript', function() {
      it('should call deletePreseedScript successfully', function(done) {
        //uncomment below and update the code to test deletePreseedScript
        //instance.deletePreseedScript(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('executeImageBuild', function() {
      it('should call executeImageBuild successfully', function(done) {
        //uncomment below and update the code to test executeImageBuild
        //instance.executeImageBuild(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getBootScript', function() {
      it('should call getBootScript successfully', function(done) {
        //uncomment below and update the code to test getBootScript
        //instance.getBootScript(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getImageBuild', function() {
      it('should call getImageBuild successfully', function(done) {
        //uncomment below and update the code to test getImageBuild
        //instance.getImageBuild(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getImageBuildExecutions', function() {
      it('should call getImageBuildExecutions successfully', function(done) {
        //uncomment below and update the code to test getImageBuildExecutions
        //instance.getImageBuildExecutions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getPreseedScript', function() {
      it('should call getPreseedScript successfully', function(done) {
        //uncomment below and update the code to test getPreseedScript
        //instance.getPreseedScript(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listBootScripts', function() {
      it('should call listBootScripts successfully', function(done) {
        //uncomment below and update the code to test listBootScripts
        //instance.listBootScripts(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listImageBuilds', function() {
      it('should call listImageBuilds successfully', function(done) {
        //uncomment below and update the code to test listImageBuilds
        //instance.listImageBuilds(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listPreseedScripts', function() {
      it('should call listPreseedScripts successfully', function(done) {
        //uncomment below and update the code to test listPreseedScripts
        //instance.listPreseedScripts(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateBootScript', function() {
      it('should call updateBootScript successfully', function(done) {
        //uncomment below and update the code to test updateBootScript
        //instance.updateBootScript(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateImageBuild', function() {
      it('should call updateImageBuild successfully', function(done) {
        //uncomment below and update the code to test updateImageBuild
        //instance.updateImageBuild(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updatePreseedScript', function() {
      it('should call updatePreseedScript successfully', function(done) {
        //uncomment below and update the code to test updatePreseedScript
        //instance.updatePreseedScript(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
