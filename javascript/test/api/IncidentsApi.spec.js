/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MorpheusApi);
  }
}(this, function(expect, MorpheusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MorpheusApi.IncidentsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('IncidentsApi', function() {
    describe('addIncident', function() {
      it('should call addIncident successfully', function(done) {
        //uncomment below and update the code to test addIncident
        //instance.addIncident(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteIncidents', function() {
      it('should call deleteIncidents successfully', function(done) {
        //uncomment below and update the code to test deleteIncidents
        //instance.deleteIncidents(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getIncidents', function() {
      it('should call getIncidents successfully', function(done) {
        //uncomment below and update the code to test getIncidents
        //instance.getIncidents(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listIncidents', function() {
      it('should call listIncidents successfully', function(done) {
        //uncomment below and update the code to test listIncidents
        //instance.listIncidents(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateIncidents', function() {
      it('should call updateIncidents successfully', function(done) {
        //uncomment below and update the code to test updateIncidents
        //instance.updateIncidents(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateIncidentsReopen', function() {
      it('should call updateIncidentsReopen successfully', function(done) {
        //uncomment below and update the code to test updateIncidentsReopen
        //instance.updateIncidentsReopen(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateMuteAllIncidents', function() {
      it('should call updateMuteAllIncidents successfully', function(done) {
        //uncomment below and update the code to test updateMuteAllIncidents
        //instance.updateMuteAllIncidents(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateMuteIncidents', function() {
      it('should call updateMuteIncidents successfully', function(done) {
        //uncomment below and update the code to test updateMuteIncidents
        //instance.updateMuteIncidents(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
