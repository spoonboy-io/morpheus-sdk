/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AnyOfnetworkTypeAzureConfignetworkTypeAwsConfignetworkTypeGcpConfigobject from './AnyOfnetworkTypeAzureConfignetworkTypeAwsConfignetworkTypeGcpConfigobject';
import ApiBlueprintsIdUpdatePermissionsResourcePermissionSites from './ApiBlueprintsIdUpdatePermissionsResourcePermissionSites';
import NetworkCreateNetworkDomain from './NetworkCreateNetworkDomain';
import NetworkCreateNetworkProxy from './NetworkCreateNetworkProxy';
import NetworkCreateResourcePermissions from './NetworkCreateResourcePermissions';
import NetworkCreateSite from './NetworkCreateSite';
import NetworkCreateType from './NetworkCreateType';
import NetworkCreateZone from './NetworkCreateZone';

/**
 * The NetworkCreate model module.
 * @module model/NetworkCreate
 * @version 6.2.1
 */
class NetworkCreate {
    /**
     * Constructs a new <code>NetworkCreate</code>.
     * @alias module:model/NetworkCreate
     * @param name {String} Name
     * @param site {module:model/NetworkCreateSite} 
     * @param zone {module:model/NetworkCreateZone} 
     */
    constructor(name, site, zone) { 
        
        NetworkCreate.initialize(this, name, site, zone);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, site, zone) { 
        obj['name'] = name;
        obj['site'] = site;
        obj['zone'] = zone;
    }

    /**
     * Constructs a <code>NetworkCreate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NetworkCreate} obj Optional instance to populate.
     * @return {module:model/NetworkCreate} The populated <code>NetworkCreate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NetworkCreate();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], ['String']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('site')) {
                obj['site'] = NetworkCreateSite.constructFromObject(data['site']);
            }
            if (data.hasOwnProperty('zone')) {
                obj['zone'] = NetworkCreateZone.constructFromObject(data['zone']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = NetworkCreateType.constructFromObject(data['type']);
            }
            if (data.hasOwnProperty('ipv4Enabled')) {
                obj['ipv4Enabled'] = ApiClient.convertToType(data['ipv4Enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('ipv6Enabled')) {
                obj['ipv6Enabled'] = ApiClient.convertToType(data['ipv6Enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('cidr')) {
                obj['cidr'] = ApiClient.convertToType(data['cidr'], 'String');
            }
            if (data.hasOwnProperty('gateway')) {
                obj['gateway'] = ApiClient.convertToType(data['gateway'], 'String');
            }
            if (data.hasOwnProperty('dnsPrimary')) {
                obj['dnsPrimary'] = ApiClient.convertToType(data['dnsPrimary'], 'String');
            }
            if (data.hasOwnProperty('dnsSecondary')) {
                obj['dnsSecondary'] = ApiClient.convertToType(data['dnsSecondary'], 'String');
            }
            if (data.hasOwnProperty('gatewayIPv6')) {
                obj['gatewayIPv6'] = ApiClient.convertToType(data['gatewayIPv6'], 'String');
            }
            if (data.hasOwnProperty('netmaskIPv6')) {
                obj['netmaskIPv6'] = ApiClient.convertToType(data['netmaskIPv6'], 'String');
            }
            if (data.hasOwnProperty('dnsPrimaryIPv6')) {
                obj['dnsPrimaryIPv6'] = ApiClient.convertToType(data['dnsPrimaryIPv6'], 'String');
            }
            if (data.hasOwnProperty('dnsSecondaryIPv6')) {
                obj['dnsSecondaryIPv6'] = ApiClient.convertToType(data['dnsSecondaryIPv6'], 'String');
            }
            if (data.hasOwnProperty('cidrIPv6')) {
                obj['cidrIPv6'] = ApiClient.convertToType(data['cidrIPv6'], 'String');
            }
            if (data.hasOwnProperty('vlanId')) {
                obj['vlanId'] = ApiClient.convertToType(data['vlanId'], 'Number');
            }
            if (data.hasOwnProperty('pool')) {
                obj['pool'] = ApiClient.convertToType(data['pool'], 'Number');
            }
            if (data.hasOwnProperty('poolIPv6')) {
                obj['poolIPv6'] = ApiClient.convertToType(data['poolIPv6'], 'Number');
            }
            if (data.hasOwnProperty('allowStaticOverride')) {
                obj['allowStaticOverride'] = ApiClient.convertToType(data['allowStaticOverride'], 'Boolean');
            }
            if (data.hasOwnProperty('assignPublicIp')) {
                obj['assignPublicIp'] = ApiClient.convertToType(data['assignPublicIp'], 'Boolean');
            }
            if (data.hasOwnProperty('active')) {
                obj['active'] = ApiClient.convertToType(data['active'], 'Boolean');
            }
            if (data.hasOwnProperty('dhcpServer')) {
                obj['dhcpServer'] = ApiClient.convertToType(data['dhcpServer'], 'Boolean');
            }
            if (data.hasOwnProperty('dhcpServerIPv6')) {
                obj['dhcpServerIPv6'] = ApiClient.convertToType(data['dhcpServerIPv6'], 'Boolean');
            }
            if (data.hasOwnProperty('networkDomain')) {
                obj['networkDomain'] = NetworkCreateNetworkDomain.constructFromObject(data['networkDomain']);
            }
            if (data.hasOwnProperty('searchDomains')) {
                obj['searchDomains'] = ApiClient.convertToType(data['searchDomains'], 'String');
            }
            if (data.hasOwnProperty('networkProxy')) {
                obj['networkProxy'] = NetworkCreateNetworkProxy.constructFromObject(data['networkProxy']);
            }
            if (data.hasOwnProperty('applianceUrlProxyBypass')) {
                obj['applianceUrlProxyBypass'] = ApiClient.convertToType(data['applianceUrlProxyBypass'], 'Boolean');
            }
            if (data.hasOwnProperty('noProxy')) {
                obj['noProxy'] = ApiClient.convertToType(data['noProxy'], 'String');
            }
            if (data.hasOwnProperty('visibility')) {
                obj['visibility'] = ApiClient.convertToType(data['visibility'], 'String');
            }
            if (data.hasOwnProperty('config')) {
                obj['config'] = ApiClient.convertToType(data['config'], AnyOfnetworkTypeAzureConfignetworkTypeAwsConfignetworkTypeGcpConfigobject);
            }
            if (data.hasOwnProperty('tenants')) {
                obj['tenants'] = ApiClient.convertToType(data['tenants'], [ApiBlueprintsIdUpdatePermissionsResourcePermissionSites]);
            }
            if (data.hasOwnProperty('resourcePermissions')) {
                obj['resourcePermissions'] = NetworkCreateResourcePermissions.constructFromObject(data['resourcePermissions']);
            }
        }
        return obj;
    }


}

/**
 * Name
 * @member {String} name
 */
NetworkCreate.prototype['name'] = undefined;

/**
 * Display Name
 * @member {String} displayName
 */
NetworkCreate.prototype['displayName'] = undefined;

/**
 * Array of label strings, can be used for filtering.
 * @member {Array.<String>} labels
 */
NetworkCreate.prototype['labels'] = undefined;

/**
 * Description
 * @member {String} description
 */
NetworkCreate.prototype['description'] = undefined;

/**
 * @member {module:model/NetworkCreateSite} site
 */
NetworkCreate.prototype['site'] = undefined;

/**
 * @member {module:model/NetworkCreateZone} zone
 */
NetworkCreate.prototype['zone'] = undefined;

/**
 * @member {module:model/NetworkCreateType} type
 */
NetworkCreate.prototype['type'] = undefined;

/**
 * @member {Boolean} ipv4Enabled
 */
NetworkCreate.prototype['ipv4Enabled'] = undefined;

/**
 * @member {Boolean} ipv6Enabled
 */
NetworkCreate.prototype['ipv6Enabled'] = undefined;

/**
 * CIDR Network
 * @member {String} cidr
 */
NetworkCreate.prototype['cidr'] = undefined;

/**
 * Network Gateway
 * @member {String} gateway
 */
NetworkCreate.prototype['gateway'] = undefined;

/**
 * Primary DNS Server
 * @member {String} dnsPrimary
 */
NetworkCreate.prototype['dnsPrimary'] = undefined;

/**
 * Secondary DNS Server
 * @member {String} dnsSecondary
 */
NetworkCreate.prototype['dnsSecondary'] = undefined;

/**
 * IPv6 Network Gateway
 * @member {String} gatewayIPv6
 */
NetworkCreate.prototype['gatewayIPv6'] = undefined;

/**
 * @member {String} netmaskIPv6
 */
NetworkCreate.prototype['netmaskIPv6'] = undefined;

/**
 * Primary IPv6 DNS Server
 * @member {String} dnsPrimaryIPv6
 */
NetworkCreate.prototype['dnsPrimaryIPv6'] = undefined;

/**
 * Secondary IPv6 DNS Server
 * @member {String} dnsSecondaryIPv6
 */
NetworkCreate.prototype['dnsSecondaryIPv6'] = undefined;

/**
 * IPv6 Network CIDR
 * @member {String} cidrIPv6
 */
NetworkCreate.prototype['cidrIPv6'] = undefined;

/**
 * @member {Number} vlanId
 */
NetworkCreate.prototype['vlanId'] = undefined;

/**
 * Network Pool ID
 * @member {Number} pool
 */
NetworkCreate.prototype['pool'] = undefined;

/**
 * IPv6 Network Pool ID
 * @member {Number} poolIPv6
 */
NetworkCreate.prototype['poolIPv6'] = undefined;

/**
 * Allow IP Override
 * @member {Boolean} allowStaticOverride
 */
NetworkCreate.prototype['allowStaticOverride'] = undefined;

/**
 * Assign Public IP
 * @member {Boolean} assignPublicIp
 */
NetworkCreate.prototype['assignPublicIp'] = undefined;

/**
 * Activate (true) or disable (false) the network
 * @member {Boolean} active
 */
NetworkCreate.prototype['active'] = undefined;

/**
 * DHCP Server enabled network
 * @member {Boolean} dhcpServer
 */
NetworkCreate.prototype['dhcpServer'] = undefined;

/**
 * IPv6 DHCP Server enabled network
 * @member {Boolean} dhcpServerIPv6
 */
NetworkCreate.prototype['dhcpServerIPv6'] = undefined;

/**
 * @member {module:model/NetworkCreateNetworkDomain} networkDomain
 */
NetworkCreate.prototype['networkDomain'] = undefined;

/**
 * Search Domains
 * @member {String} searchDomains
 */
NetworkCreate.prototype['searchDomains'] = undefined;

/**
 * @member {module:model/NetworkCreateNetworkProxy} networkProxy
 */
NetworkCreate.prototype['networkProxy'] = undefined;

/**
 * Bypass Proxy for Appliance URL
 * @member {Boolean} applianceUrlProxyBypass
 */
NetworkCreate.prototype['applianceUrlProxyBypass'] = undefined;

/**
 * Comma-separated list of ip addresses or name servers to exclude proxy traversal for. Typically locally routable servers are excluded.
 * @member {String} noProxy
 */
NetworkCreate.prototype['noProxy'] = undefined;

/**
 * Visibility, private or public.
 * @member {module:model/NetworkCreate.VisibilityEnum} visibility
 * @default 'private'
 */
NetworkCreate.prototype['visibility'] = 'private';

/**
 * Configuration object. Settings vary by type.
 * @member {module:model/AnyOfnetworkTypeAzureConfignetworkTypeAwsConfignetworkTypeGcpConfigobject} config
 */
NetworkCreate.prototype['config'] = undefined;

/**
 * Array of tenant account ids that are allowed access
 * @member {Array.<module:model/ApiBlueprintsIdUpdatePermissionsResourcePermissionSites>} tenants
 */
NetworkCreate.prototype['tenants'] = undefined;

/**
 * @member {module:model/NetworkCreateResourcePermissions} resourcePermissions
 */
NetworkCreate.prototype['resourcePermissions'] = undefined;





/**
 * Allowed values for the <code>visibility</code> property.
 * @enum {String}
 * @readonly
 */
NetworkCreate['VisibilityEnum'] = {

    /**
     * value: "private"
     * @const
     */
    "private": "private",

    /**
     * value: "public"
     * @const
     */
    "public": "public"
};



export default NetworkCreate;

