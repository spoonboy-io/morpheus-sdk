/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ApplianceSettingsUpdate model module.
 * @module model/ApplianceSettingsUpdate
 * @version 6.2.1
 */
class ApplianceSettingsUpdate {
    /**
     * Constructs a new <code>ApplianceSettingsUpdate</code>.
     * @alias module:model/ApplianceSettingsUpdate
     */
    constructor() { 
        
        ApplianceSettingsUpdate.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ApplianceSettingsUpdate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ApplianceSettingsUpdate} obj Optional instance to populate.
     * @return {module:model/ApplianceSettingsUpdate} The populated <code>ApplianceSettingsUpdate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ApplianceSettingsUpdate();

            if (data.hasOwnProperty('applianceUrl')) {
                obj['applianceUrl'] = ApiClient.convertToType(data['applianceUrl'], 'String');
            }
            if (data.hasOwnProperty('internalApplianceUrl')) {
                obj['internalApplianceUrl'] = ApiClient.convertToType(data['internalApplianceUrl'], 'String');
            }
            if (data.hasOwnProperty('corsAllowed')) {
                obj['corsAllowed'] = ApiClient.convertToType(data['corsAllowed'], 'String');
            }
            if (data.hasOwnProperty('registrationEnabled')) {
                obj['registrationEnabled'] = ApiClient.convertToType(data['registrationEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('defaultRoleId')) {
                obj['defaultRoleId'] = ApiClient.convertToType(data['defaultRoleId'], 'Number');
            }
            if (data.hasOwnProperty('defaultUserRoleId')) {
                obj['defaultUserRoleId'] = ApiClient.convertToType(data['defaultUserRoleId'], 'Number');
            }
            if (data.hasOwnProperty('dockerPrivilegedMode')) {
                obj['dockerPrivilegedMode'] = ApiClient.convertToType(data['dockerPrivilegedMode'], 'Boolean');
            }
            if (data.hasOwnProperty('passwordMinLength')) {
                obj['passwordMinLength'] = ApiClient.convertToType(data['passwordMinLength'], 'String');
            }
            if (data.hasOwnProperty('passwordMinUpperCase')) {
                obj['passwordMinUpperCase'] = ApiClient.convertToType(data['passwordMinUpperCase'], 'String');
            }
            if (data.hasOwnProperty('passwordMinNumbers')) {
                obj['passwordMinNumbers'] = ApiClient.convertToType(data['passwordMinNumbers'], 'String');
            }
            if (data.hasOwnProperty('passwordMinSymbols')) {
                obj['passwordMinSymbols'] = ApiClient.convertToType(data['passwordMinSymbols'], 'String');
            }
            if (data.hasOwnProperty('userBrowserSessionTimeout')) {
                obj['userBrowserSessionTimeout'] = ApiClient.convertToType(data['userBrowserSessionTimeout'], 'String');
            }
            if (data.hasOwnProperty('userBrowserSessionWarning')) {
                obj['userBrowserSessionWarning'] = ApiClient.convertToType(data['userBrowserSessionWarning'], 'String');
            }
            if (data.hasOwnProperty('expirePwdDays')) {
                obj['expirePwdDays'] = ApiClient.convertToType(data['expirePwdDays'], 'Number');
            }
            if (data.hasOwnProperty('disableAfterAttempts')) {
                obj['disableAfterAttempts'] = ApiClient.convertToType(data['disableAfterAttempts'], 'Number');
            }
            if (data.hasOwnProperty('disableAfterDaysInactive')) {
                obj['disableAfterDaysInactive'] = ApiClient.convertToType(data['disableAfterDaysInactive'], 'Number');
            }
            if (data.hasOwnProperty('warnUserDaysBefore')) {
                obj['warnUserDaysBefore'] = ApiClient.convertToType(data['warnUserDaysBefore'], 'Number');
            }
            if (data.hasOwnProperty('smtpMailFrom')) {
                obj['smtpMailFrom'] = ApiClient.convertToType(data['smtpMailFrom'], 'String');
            }
            if (data.hasOwnProperty('smtpServer')) {
                obj['smtpServer'] = ApiClient.convertToType(data['smtpServer'], 'String');
            }
            if (data.hasOwnProperty('smtpPort')) {
                obj['smtpPort'] = ApiClient.convertToType(data['smtpPort'], 'Number');
            }
            if (data.hasOwnProperty('smtpSSL')) {
                obj['smtpSSL'] = ApiClient.convertToType(data['smtpSSL'], 'Boolean');
            }
            if (data.hasOwnProperty('smtpTLS')) {
                obj['smtpTLS'] = ApiClient.convertToType(data['smtpTLS'], 'Boolean');
            }
            if (data.hasOwnProperty('smtpUser')) {
                obj['smtpUser'] = ApiClient.convertToType(data['smtpUser'], 'String');
            }
            if (data.hasOwnProperty('smtpPassword')) {
                obj['smtpPassword'] = ApiClient.convertToType(data['smtpPassword'], 'String');
            }
            if (data.hasOwnProperty('proxyHost')) {
                obj['proxyHost'] = ApiClient.convertToType(data['proxyHost'], 'String');
            }
            if (data.hasOwnProperty('proxyPort')) {
                obj['proxyPort'] = ApiClient.convertToType(data['proxyPort'], 'String');
            }
            if (data.hasOwnProperty('proxyUser')) {
                obj['proxyUser'] = ApiClient.convertToType(data['proxyUser'], 'String');
            }
            if (data.hasOwnProperty('proxyPassword')) {
                obj['proxyPassword'] = ApiClient.convertToType(data['proxyPassword'], 'String');
            }
            if (data.hasOwnProperty('proxyDomain')) {
                obj['proxyDomain'] = ApiClient.convertToType(data['proxyDomain'], 'String');
            }
            if (data.hasOwnProperty('proxyWorkstation')) {
                obj['proxyWorkstation'] = ApiClient.convertToType(data['proxyWorkstation'], 'String');
            }
            if (data.hasOwnProperty('currencyProvider')) {
                obj['currencyProvider'] = ApiClient.convertToType(data['currencyProvider'], 'String');
            }
            if (data.hasOwnProperty('currencyKey')) {
                obj['currencyKey'] = ApiClient.convertToType(data['currencyKey'], 'String');
            }
            if (data.hasOwnProperty('enableAllZoneTypes')) {
                obj['enableAllZoneTypes'] = ApiClient.convertToType(data['enableAllZoneTypes'], 'Boolean');
            }
            if (data.hasOwnProperty('enableZoneTypes')) {
                obj['enableZoneTypes'] = ApiClient.convertToType(data['enableZoneTypes'], ['Number']);
            }
            if (data.hasOwnProperty('disableZoneTypes')) {
                obj['disableZoneTypes'] = ApiClient.convertToType(data['disableZoneTypes'], ['Number']);
            }
            if (data.hasOwnProperty('disableAllZoneTypes')) {
                obj['disableAllZoneTypes'] = ApiClient.convertToType(data['disableAllZoneTypes'], 'Boolean');
            }
        }
        return obj;
    }


}

/**
 * Appliance URL
 * @member {String} applianceUrl
 */
ApplianceSettingsUpdate.prototype['applianceUrl'] = undefined;

/**
 * Internal Appliance URL (PXE)
 * @member {String} internalApplianceUrl
 */
ApplianceSettingsUpdate.prototype['internalApplianceUrl'] = undefined;

/**
 * API Allowed Origins
 * @member {String} corsAllowed
 */
ApplianceSettingsUpdate.prototype['corsAllowed'] = undefined;

/**
 * Registration enabled (true, false)
 * @member {Boolean} registrationEnabled
 */
ApplianceSettingsUpdate.prototype['registrationEnabled'] = undefined;

/**
 * Default tenant role ID
 * @member {Number} defaultRoleId
 */
ApplianceSettingsUpdate.prototype['defaultRoleId'] = undefined;

/**
 * Default user role ID
 * @member {Number} defaultUserRoleId
 */
ApplianceSettingsUpdate.prototype['defaultUserRoleId'] = undefined;

/**
 * Docker privileged mode (true, false)
 * @member {Boolean} dockerPrivilegedMode
 */
ApplianceSettingsUpdate.prototype['dockerPrivilegedMode'] = undefined;

/**
 * Min Password Length
 * @member {String} passwordMinLength
 */
ApplianceSettingsUpdate.prototype['passwordMinLength'] = undefined;

/**
 * Min Password Uppercase
 * @member {String} passwordMinUpperCase
 */
ApplianceSettingsUpdate.prototype['passwordMinUpperCase'] = undefined;

/**
 * Min Password Numbers
 * @member {String} passwordMinNumbers
 */
ApplianceSettingsUpdate.prototype['passwordMinNumbers'] = undefined;

/**
 * Min Password Symbols
 * @member {String} passwordMinSymbols
 */
ApplianceSettingsUpdate.prototype['passwordMinSymbols'] = undefined;

/**
 * User Browser Session Timeout (Minutes)
 * @member {String} userBrowserSessionTimeout
 */
ApplianceSettingsUpdate.prototype['userBrowserSessionTimeout'] = undefined;

/**
 * User Browser Session Warning (Minutes)
 * @member {String} userBrowserSessionWarning
 */
ApplianceSettingsUpdate.prototype['userBrowserSessionWarning'] = undefined;

/**
 * Expire password after days. Setting to 0 disabled this feature
 * @member {Number} expirePwdDays
 */
ApplianceSettingsUpdate.prototype['expirePwdDays'] = undefined;

/**
 * Disable user after number of attempts. Set to 0 to disable this feature
 * @member {Number} disableAfterAttempts
 */
ApplianceSettingsUpdate.prototype['disableAfterAttempts'] = undefined;

/**
 * Disable user if inactive for specified days. Set to 0 to disable this feature
 * @member {Number} disableAfterDaysInactive
 */
ApplianceSettingsUpdate.prototype['disableAfterDaysInactive'] = undefined;

/**
 * Send warning email number of days in advance before deactivating. Set to 0 to disable this feature
 * @member {Number} warnUserDaysBefore
 */
ApplianceSettingsUpdate.prototype['warnUserDaysBefore'] = undefined;

/**
 * From email address
 * @member {String} smtpMailFrom
 */
ApplianceSettingsUpdate.prototype['smtpMailFrom'] = undefined;

/**
 * SMTP server / host
 * @member {String} smtpServer
 */
ApplianceSettingsUpdate.prototype['smtpServer'] = undefined;

/**
 * SMTP port
 * @member {Number} smtpPort
 */
ApplianceSettingsUpdate.prototype['smtpPort'] = undefined;

/**
 * Use SSL for SMTP connection
 * @member {Boolean} smtpSSL
 */
ApplianceSettingsUpdate.prototype['smtpSSL'] = undefined;

/**
 * Use TLS for SMTP connections
 * @member {Boolean} smtpTLS
 */
ApplianceSettingsUpdate.prototype['smtpTLS'] = undefined;

/**
 * SMTP username
 * @member {String} smtpUser
 */
ApplianceSettingsUpdate.prototype['smtpUser'] = undefined;

/**
 * SMTP password
 * @member {String} smtpPassword
 */
ApplianceSettingsUpdate.prototype['smtpPassword'] = undefined;

/**
 * Proxy host
 * @member {String} proxyHost
 */
ApplianceSettingsUpdate.prototype['proxyHost'] = undefined;

/**
 * Proxy port
 * @member {String} proxyPort
 */
ApplianceSettingsUpdate.prototype['proxyPort'] = undefined;

/**
 * Proxy username
 * @member {String} proxyUser
 */
ApplianceSettingsUpdate.prototype['proxyUser'] = undefined;

/**
 * Proxy password
 * @member {String} proxyPassword
 */
ApplianceSettingsUpdate.prototype['proxyPassword'] = undefined;

/**
 * Proxy domain
 * @member {String} proxyDomain
 */
ApplianceSettingsUpdate.prototype['proxyDomain'] = undefined;

/**
 * Proxy workstation
 * @member {String} proxyWorkstation
 */
ApplianceSettingsUpdate.prototype['proxyWorkstation'] = undefined;

/**
 * Currency provider
 * @member {String} currencyProvider
 */
ApplianceSettingsUpdate.prototype['currencyProvider'] = undefined;

/**
 * Currency provider API key
 * @member {String} currencyKey
 */
ApplianceSettingsUpdate.prototype['currencyKey'] = undefined;

/**
 * Set all cloud types enabled status on, overrides enableZoneTypes and disableZoneTypes parameters
 * @member {Boolean} enableAllZoneTypes
 */
ApplianceSettingsUpdate.prototype['enableAllZoneTypes'] = undefined;

/**
 * List of cloud type IDs to set enabled status on
 * @member {Array.<Number>} enableZoneTypes
 */
ApplianceSettingsUpdate.prototype['enableZoneTypes'] = undefined;

/**
 * List of cloud type IDs to set enabled status off
 * @member {Array.<Number>} disableZoneTypes
 */
ApplianceSettingsUpdate.prototype['disableZoneTypes'] = undefined;

/**
 * Set all cloud types enabled status off, can be used in conjunction with enableZoneTypes
 * @member {Boolean} disableAllZoneTypes
 */
ApplianceSettingsUpdate.prototype['disableAllZoneTypes'] = undefined;






export default ApplianceSettingsUpdate;

