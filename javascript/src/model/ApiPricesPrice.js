/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ApiPricesPriceAccount from './ApiPricesPriceAccount';
import ApiPricesPriceDatastore from './ApiPricesPriceDatastore';
import ApiPricesPriceVolumeType from './ApiPricesPriceVolumeType';

/**
 * The ApiPricesPrice model module.
 * @module model/ApiPricesPrice
 * @version 6.2.1
 */
class ApiPricesPrice {
    /**
     * Constructs a new <code>ApiPricesPrice</code>.
     * @alias module:model/ApiPricesPrice
     * @param name {String} Price name
     * @param code {String} Price code, must be unique
     * @param priceType {module:model/ApiPricesPrice.PriceTypeEnum} Restricts query to only load only prices with specified priceType. * `fixed` - Everything * `compute` - Memory + CPU * `memory` - Memory * `cores` - Cores * `storage` - Storage * `datastore` - Datastore * `platform` - Platform * `software` - Software * `load_balancer` - Load Balancer * `load_balancer_virtual_server` - Load Balancer Virtual Server 
     * @param priceUnit {module:model/ApiPricesPrice.PriceUnitEnum} The unit of pricing
     * @param incurCharges {module:model/ApiPricesPrice.IncurChargesEnum} Indicates when to incur charge
     * @param currency {String} ISO Currency code
     * @param cost {Number} Cost
     */
    constructor(name, code, priceType, priceUnit, incurCharges, currency, cost) { 
        
        ApiPricesPrice.initialize(this, name, code, priceType, priceUnit, incurCharges, currency, cost);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, code, priceType, priceUnit, incurCharges, currency, cost) { 
        obj['name'] = name;
        obj['code'] = code;
        obj['priceType'] = priceType;
        obj['priceUnit'] = priceUnit;
        obj['incurCharges'] = incurCharges;
        obj['currency'] = currency;
        obj['cost'] = cost;
    }

    /**
     * Constructs a <code>ApiPricesPrice</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ApiPricesPrice} obj Optional instance to populate.
     * @return {module:model/ApiPricesPrice} The populated <code>ApiPricesPrice</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ApiPricesPrice();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('account')) {
                obj['account'] = ApiPricesPriceAccount.constructFromObject(data['account']);
            }
            if (data.hasOwnProperty('priceType')) {
                obj['priceType'] = ApiClient.convertToType(data['priceType'], 'String');
            }
            if (data.hasOwnProperty('priceUnit')) {
                obj['priceUnit'] = ApiClient.convertToType(data['priceUnit'], 'String');
            }
            if (data.hasOwnProperty('incurCharges')) {
                obj['incurCharges'] = ApiClient.convertToType(data['incurCharges'], 'String');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('cost')) {
                obj['cost'] = ApiClient.convertToType(data['cost'], 'Number');
            }
            if (data.hasOwnProperty('markupType')) {
                obj['markupType'] = ApiClient.convertToType(data['markupType'], 'String');
            }
            if (data.hasOwnProperty('markup')) {
                obj['markup'] = ApiClient.convertToType(data['markup'], 'Number');
            }
            if (data.hasOwnProperty('markupPercent')) {
                obj['markupPercent'] = ApiClient.convertToType(data['markupPercent'], 'Number');
            }
            if (data.hasOwnProperty('customPrice')) {
                obj['customPrice'] = ApiClient.convertToType(data['customPrice'], 'Number');
            }
            if (data.hasOwnProperty('platform')) {
                obj['platform'] = ApiClient.convertToType(data['platform'], 'String');
            }
            if (data.hasOwnProperty('software')) {
                obj['software'] = ApiClient.convertToType(data['software'], 'String');
            }
            if (data.hasOwnProperty('volumeType')) {
                obj['volumeType'] = ApiPricesPriceVolumeType.constructFromObject(data['volumeType']);
            }
            if (data.hasOwnProperty('datastore')) {
                obj['datastore'] = ApiPricesPriceDatastore.constructFromObject(data['datastore']);
            }
            if (data.hasOwnProperty('crossCloudApply')) {
                obj['crossCloudApply'] = ApiClient.convertToType(data['crossCloudApply'], 'Boolean');
            }
        }
        return obj;
    }


}

/**
 * Price name
 * @member {String} name
 */
ApiPricesPrice.prototype['name'] = undefined;

/**
 * Price code, must be unique
 * @member {String} code
 */
ApiPricesPrice.prototype['code'] = undefined;

/**
 * @member {module:model/ApiPricesPriceAccount} account
 */
ApiPricesPrice.prototype['account'] = undefined;

/**
 * Restricts query to only load only prices with specified priceType. * `fixed` - Everything * `compute` - Memory + CPU * `memory` - Memory * `cores` - Cores * `storage` - Storage * `datastore` - Datastore * `platform` - Platform * `software` - Software * `load_balancer` - Load Balancer * `load_balancer_virtual_server` - Load Balancer Virtual Server 
 * @member {module:model/ApiPricesPrice.PriceTypeEnum} priceType
 */
ApiPricesPrice.prototype['priceType'] = undefined;

/**
 * The unit of pricing
 * @member {module:model/ApiPricesPrice.PriceUnitEnum} priceUnit
 */
ApiPricesPrice.prototype['priceUnit'] = undefined;

/**
 * Indicates when to incur charge
 * @member {module:model/ApiPricesPrice.IncurChargesEnum} incurCharges
 */
ApiPricesPrice.prototype['incurCharges'] = undefined;

/**
 * ISO Currency code
 * @member {String} currency
 */
ApiPricesPrice.prototype['currency'] = undefined;

/**
 * Cost
 * @member {Number} cost
 */
ApiPricesPrice.prototype['cost'] = undefined;

/**
 * Price adjustment type
 * @member {module:model/ApiPricesPrice.MarkupTypeEnum} markupType
 */
ApiPricesPrice.prototype['markupType'] = undefined;

/**
 * Amount for `fixed` price adjustment type
 * @member {Number} markup
 */
ApiPricesPrice.prototype['markup'] = undefined;

/**
 * Percent for `percent` price adjustment type
 * @member {Number} markupPercent
 */
ApiPricesPrice.prototype['markupPercent'] = undefined;

/**
 * Custom price for `custom` price adjustment type
 * @member {Number} customPrice
 */
ApiPricesPrice.prototype['customPrice'] = undefined;

/**
 * Platform.  Required for `platform` price type
 * @member {String} platform
 */
ApiPricesPrice.prototype['platform'] = undefined;

/**
 * Software.  Required for software price type
 * @member {String} software
 */
ApiPricesPrice.prototype['software'] = undefined;

/**
 * @member {module:model/ApiPricesPriceVolumeType} volumeType
 */
ApiPricesPrice.prototype['volumeType'] = undefined;

/**
 * @member {module:model/ApiPricesPriceDatastore} datastore
 */
ApiPricesPrice.prototype['datastore'] = undefined;

/**
 * Apply price across clouds, optional true/false flag for datastore price type
 * @member {Boolean} crossCloudApply
 */
ApiPricesPrice.prototype['crossCloudApply'] = undefined;





/**
 * Allowed values for the <code>priceType</code> property.
 * @enum {String}
 * @readonly
 */
ApiPricesPrice['PriceTypeEnum'] = {

    /**
     * value: "fixed"
     * @const
     */
    "fixed": "fixed",

    /**
     * value: "compute"
     * @const
     */
    "compute": "compute",

    /**
     * value: "memory"
     * @const
     */
    "memory": "memory",

    /**
     * value: "cores"
     * @const
     */
    "cores": "cores",

    /**
     * value: "storage"
     * @const
     */
    "storage": "storage",

    /**
     * value: "datastore"
     * @const
     */
    "datastore": "datastore",

    /**
     * value: "platform"
     * @const
     */
    "platform": "platform",

    /**
     * value: "software"
     * @const
     */
    "software": "software",

    /**
     * value: "load_balancer"
     * @const
     */
    "load_balancer": "load_balancer",

    /**
     * value: "load_balancer_virtual_server"
     * @const
     */
    "load_balancer_virtual_server": "load_balancer_virtual_server"
};


/**
 * Allowed values for the <code>priceUnit</code> property.
 * @enum {String}
 * @readonly
 */
ApiPricesPrice['PriceUnitEnum'] = {

    /**
     * value: "minute"
     * @const
     */
    "minute": "minute",

    /**
     * value: "hour"
     * @const
     */
    "hour": "hour",

    /**
     * value: "day"
     * @const
     */
    "day": "day",

    /**
     * value: "month"
     * @const
     */
    "month": "month",

    /**
     * value: "year"
     * @const
     */
    "year": "year",

    /**
     * value: "two year"
     * @const
     */
    "two year": "two year",

    /**
     * value: "three year"
     * @const
     */
    "three year": "three year",

    /**
     * value: "four year"
     * @const
     */
    "four year": "four year",

    /**
     * value: "five year"
     * @const
     */
    "five year": "five year"
};


/**
 * Allowed values for the <code>incurCharges</code> property.
 * @enum {String}
 * @readonly
 */
ApiPricesPrice['IncurChargesEnum'] = {

    /**
     * value: "running"
     * @const
     */
    "running": "running",

    /**
     * value: "stopped"
     * @const
     */
    "stopped": "stopped",

    /**
     * value: "always"
     * @const
     */
    "always": "always"
};


/**
 * Allowed values for the <code>markupType</code> property.
 * @enum {String}
 * @readonly
 */
ApiPricesPrice['MarkupTypeEnum'] = {

    /**
     * value: "fixed"
     * @const
     */
    "fixed": "fixed",

    /**
     * value: "percent"
     * @const
     */
    "percent": "percent",

    /**
     * value: "custom"
     * @const
     */
    "custom": "custom"
};



export default ApiPricesPrice;

