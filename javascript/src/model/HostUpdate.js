/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ApiServersIdMakeManagedServerTags from './ApiServersIdMakeManagedServerTags';
import InstanceUpdateInstanceRemoveTags from './InstanceUpdateInstanceRemoveTags';

/**
 * The HostUpdate model module.
 * @module model/HostUpdate
 * @version 6.2.1
 */
class HostUpdate {
    /**
     * Constructs a new <code>HostUpdate</code>.
     * @alias module:model/HostUpdate
     */
    constructor() { 
        
        HostUpdate.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>HostUpdate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/HostUpdate} obj Optional instance to populate.
     * @return {module:model/HostUpdate} The populated <code>HostUpdate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new HostUpdate();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('sshUsername')) {
                obj['sshUsername'] = ApiClient.convertToType(data['sshUsername'], 'String');
            }
            if (data.hasOwnProperty('sshPassword')) {
                obj['sshPassword'] = ApiClient.convertToType(data['sshPassword'], 'String');
            }
            if (data.hasOwnProperty('powerScheduleType')) {
                obj['powerScheduleType'] = ApiClient.convertToType(data['powerScheduleType'], 'Number');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], ['String']);
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], [ApiServersIdMakeManagedServerTags]);
            }
            if (data.hasOwnProperty('addTags')) {
                obj['addTags'] = ApiClient.convertToType(data['addTags'], [ApiServersIdMakeManagedServerTags]);
            }
            if (data.hasOwnProperty('removeTags')) {
                obj['removeTags'] = ApiClient.convertToType(data['removeTags'], [InstanceUpdateInstanceRemoveTags]);
            }
            if (data.hasOwnProperty('guestConsoleType')) {
                obj['guestConsoleType'] = ApiClient.convertToType(data['guestConsoleType'], 'String');
            }
            if (data.hasOwnProperty('guestConsoleUsername')) {
                obj['guestConsoleUsername'] = ApiClient.convertToType(data['guestConsoleUsername'], 'String');
            }
            if (data.hasOwnProperty('guestConsolePassword')) {
                obj['guestConsolePassword'] = ApiClient.convertToType(data['guestConsolePassword'], 'String');
            }
            if (data.hasOwnProperty('guestConsolePort')) {
                obj['guestConsolePort'] = ApiClient.convertToType(data['guestConsolePort'], 'String');
            }
            if (data.hasOwnProperty('guestConsolePreferred')) {
                obj['guestConsolePreferred'] = ApiClient.convertToType(data['guestConsolePreferred'], 'Boolean');
            }
        }
        return obj;
    }


}

/**
 * Unique name scoped to your account for the server.
 * @member {String} name
 */
HostUpdate.prototype['name'] = undefined;

/**
 * Optional description field.
 * @member {String} description
 */
HostUpdate.prototype['description'] = undefined;

/**
 * SSH Username
 * @member {String} sshUsername
 */
HostUpdate.prototype['sshUsername'] = undefined;

/**
 * SSH Password
 * @member {String} sshPassword
 */
HostUpdate.prototype['sshPassword'] = undefined;

/**
 * Power schedule ID.
 * @member {Number} powerScheduleType
 */
HostUpdate.prototype['powerScheduleType'] = undefined;

/**
 * @member {Array.<String>} labels
 */
HostUpdate.prototype['labels'] = undefined;

/**
 * Metadata tags, Array of objects having a name and value.
 * @member {Array.<module:model/ApiServersIdMakeManagedServerTags>} tags
 */
HostUpdate.prototype['tags'] = undefined;

/**
 * Add or update value of Metadata tags, Array of objects having a name and value.
 * @member {Array.<module:model/ApiServersIdMakeManagedServerTags>} addTags
 */
HostUpdate.prototype['addTags'] = undefined;

/**
 * Remove Metadata tags, Array of objects having a name and an optional value. If value is passed, it must match to be removed.
 * @member {Array.<module:model/InstanceUpdateInstanceRemoveTags>} removeTags
 */
HostUpdate.prototype['removeTags'] = undefined;

/**
 * The Type of guest console this server provides such as disabled, vnc, rdp, ssh
 * @member {String} guestConsoleType
 */
HostUpdate.prototype['guestConsoleType'] = undefined;

/**
 * The optional guest console username if you don't want to use the user defaults
 * @member {String} guestConsoleUsername
 */
HostUpdate.prototype['guestConsoleUsername'] = undefined;

/**
 * The optional guest console password if not using the accessing users creds
 * @member {String} guestConsolePassword
 */
HostUpdate.prototype['guestConsolePassword'] = undefined;

/**
 * The port the guest console is being accessed from
 * @member {String} guestConsolePort
 */
HostUpdate.prototype['guestConsolePort'] = undefined;

/**
 * Can turn off guest console preferences on server in favor of hypervisor console
 * @member {Boolean} guestConsolePreferred
 * @default true
 */
HostUpdate.prototype['guestConsolePreferred'] = true;






export default HostUpdate;

