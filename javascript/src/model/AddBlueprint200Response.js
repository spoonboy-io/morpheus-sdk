/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.1.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BlueprintCreateSuccess from './BlueprintCreateSuccess';
import Model200Success from './Model200Success';

/**
 * The AddBlueprint200Response model module.
 * @module model/AddBlueprint200Response
 * @version 6.1.1
 */
class AddBlueprint200Response {
    /**
     * Constructs a new <code>AddBlueprint200Response</code>.
     * @alias module:model/AddBlueprint200Response
     * @implements module:model/Model200Success
     */
    constructor() { 
        Model200Success.initialize(this);
        AddBlueprint200Response.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AddBlueprint200Response</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AddBlueprint200Response} obj Optional instance to populate.
     * @return {module:model/AddBlueprint200Response} The populated <code>AddBlueprint200Response</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AddBlueprint200Response();
            Model200Success.constructFromObject(data, obj);

            if (data.hasOwnProperty('success')) {
                obj['success'] = ApiClient.convertToType(data['success'], 'Boolean');
            }
            if (data.hasOwnProperty('blueprint')) {
                obj['blueprint'] = BlueprintCreateSuccess.constructFromObject(data['blueprint']);
            }
            if (data.hasOwnProperty('msg')) {
                obj['msg'] = ApiClient.convertToType(data['msg'], 'String');
            }
            if (data.hasOwnProperty('errors')) {
                obj['errors'] = ApiClient.convertToType(data['errors'], 'String');
            }
            if (data.hasOwnProperty('errorCode')) {
                obj['errorCode'] = ApiClient.convertToType(data['errorCode'], 'String');
            }
            if (data.hasOwnProperty('inProgress')) {
                obj['inProgress'] = ApiClient.convertToType(data['inProgress'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AddBlueprint200Response</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AddBlueprint200Response</code>.
     */
    static validateJSON(data) {
        // validate the optional field `blueprint`
        if (data['blueprint']) { // data not null
          BlueprintCreateSuccess.validateJSON(data['blueprint']);
        }
        // ensure the json data is a string
        if (data['msg'] && !(typeof data['msg'] === 'string' || data['msg'] instanceof String)) {
            throw new Error("Expected the field `msg` to be a primitive type in the JSON string but got " + data['msg']);
        }
        // ensure the json data is a string
        if (data['errors'] && !(typeof data['errors'] === 'string' || data['errors'] instanceof String)) {
            throw new Error("Expected the field `errors` to be a primitive type in the JSON string but got " + data['errors']);
        }
        // ensure the json data is a string
        if (data['errorCode'] && !(typeof data['errorCode'] === 'string' || data['errorCode'] instanceof String)) {
            throw new Error("Expected the field `errorCode` to be a primitive type in the JSON string but got " + data['errorCode']);
        }

        return true;
    }


}



/**
 * @member {Boolean} success
 */
AddBlueprint200Response.prototype['success'] = undefined;

/**
 * @member {module:model/BlueprintCreateSuccess} blueprint
 */
AddBlueprint200Response.prototype['blueprint'] = undefined;

/**
 * @member {String} msg
 */
AddBlueprint200Response.prototype['msg'] = undefined;

/**
 * @member {String} errors
 */
AddBlueprint200Response.prototype['errors'] = undefined;

/**
 * @member {String} errorCode
 */
AddBlueprint200Response.prototype['errorCode'] = undefined;

/**
 * @member {Boolean} inProgress
 */
AddBlueprint200Response.prototype['inProgress'] = undefined;


// Implement Model200Success interface:
/**
 * @member {Boolean} success
 */
Model200Success.prototype['success'] = undefined;




export default AddBlueprint200Response;

