/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CatalogCartItemCreateItemType from './CatalogCartItemCreateItemType';

/**
 * The CatalogCartItemCreateItem model module.
 * @module model/CatalogCartItemCreateItem
 * @version 6.2.1
 */
class CatalogCartItemCreateItem {
    /**
     * Constructs a new <code>CatalogCartItemCreateItem</code>.
     * @alias module:model/CatalogCartItemCreateItem
     */
    constructor() { 
        
        CatalogCartItemCreateItem.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CatalogCartItemCreateItem</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CatalogCartItemCreateItem} obj Optional instance to populate.
     * @return {module:model/CatalogCartItemCreateItem} The populated <code>CatalogCartItemCreateItem</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CatalogCartItemCreateItem();

            if (data.hasOwnProperty('type')) {
                obj['type'] = CatalogCartItemCreateItemType.constructFromObject(data['type']);
            }
            if (data.hasOwnProperty('quantity')) {
                obj['quantity'] = ApiClient.convertToType(data['quantity'], 'Number');
            }
            if (data.hasOwnProperty('config')) {
                obj['config'] = ApiClient.convertToType(data['config'], Object);
            }
            if (data.hasOwnProperty('context')) {
                obj['context'] = ApiClient.convertToType(data['context'], 'String');
            }
            if (data.hasOwnProperty('target')) {
                obj['target'] = ApiClient.convertToType(data['target'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * @member {module:model/CatalogCartItemCreateItemType} type
 */
CatalogCartItemCreateItem.prototype['type'] = undefined;

/**
 * Quantity for this catalog item. Will be overridden to 1 if quantity not allowed by the item type. 
 * @member {Number} quantity
 */
CatalogCartItemCreateItem.prototype['quantity'] = undefined;

/**
 * Config Object, required options depend on the catalog item type's associated option types. The values passed in here are injected into the instance config or app spec or workflow script(s) defined by the type. 
 * @member {Object} config
 */
CatalogCartItemCreateItem.prototype['config'] = undefined;

/**
 * Context Type for running the workflow, determines if a target resource must be selected. `instance`, `server`, or `appliance`. This may only be passed if the type allows it, usually the type determines the context for the user. Only applies to type `workflow`. 
 * @member {String} context
 */
CatalogCartItemCreateItem.prototype['context'] = undefined;

/**
 * Resource (Instance or Server) ID for context when running the `workflow`. Only applies to type `workflow` and only required when context is `instance` or `server`. 
 * @member {Number} target
 */
CatalogCartItemCreateItem.prototype['target'] = undefined;






export default CatalogCartItemCreateItem;

