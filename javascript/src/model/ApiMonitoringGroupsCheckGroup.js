/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ApiMonitoringGroupsCheckGroup model module.
 * @module model/ApiMonitoringGroupsCheckGroup
 * @version 6.2.1
 */
class ApiMonitoringGroupsCheckGroup {
    /**
     * Constructs a new <code>ApiMonitoringGroupsCheckGroup</code>.
     * Payload for creating a new monitoring check group
     * @alias module:model/ApiMonitoringGroupsCheckGroup
     * @param name {String} Unique name scoped to your account for the check group
     */
    constructor(name) { 
        
        ApiMonitoringGroupsCheckGroup.initialize(this, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name) { 
        obj['name'] = name;
    }

    /**
     * Constructs a <code>ApiMonitoringGroupsCheckGroup</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ApiMonitoringGroupsCheckGroup} obj Optional instance to populate.
     * @return {module:model/ApiMonitoringGroupsCheckGroup} The populated <code>ApiMonitoringGroupsCheckGroup</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ApiMonitoringGroupsCheckGroup();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('minHappy')) {
                obj['minHappy'] = ApiClient.convertToType(data['minHappy'], 'Number');
            }
            if (data.hasOwnProperty('inUptime')) {
                obj['inUptime'] = ApiClient.convertToType(data['inUptime'], 'Boolean');
            }
            if (data.hasOwnProperty('severity')) {
                obj['severity'] = ApiClient.convertToType(data['severity'], 'String');
            }
            if (data.hasOwnProperty('active')) {
                obj['active'] = ApiClient.convertToType(data['active'], 'Boolean');
            }
            if (data.hasOwnProperty('checks')) {
                obj['checks'] = ApiClient.convertToType(data['checks'], ['Number']);
            }
        }
        return obj;
    }


}

/**
 * Unique name scoped to your account for the check group
 * @member {String} name
 */
ApiMonitoringGroupsCheckGroup.prototype['name'] = undefined;

/**
 * Optional description field
 * @member {String} description
 */
ApiMonitoringGroupsCheckGroup.prototype['description'] = undefined;

/**
 * This specifies the minimum number of checks within the group that must be happy to keep the group from becoming unhealthy.
 * @member {Number} minHappy
 * @default 1
 */
ApiMonitoringGroupsCheckGroup.prototype['minHappy'] = 1;

/**
 * Used to determine if check should affect account wide availability calculations
 * @member {Boolean} inUptime
 * @default true
 */
ApiMonitoringGroupsCheckGroup.prototype['inUptime'] = true;

/**
 * Determines the maximum severity level this group can incur on an incident when failing
 * @member {module:model/ApiMonitoringGroupsCheckGroup.SeverityEnum} severity
 * @default 'critical'
 */
ApiMonitoringGroupsCheckGroup.prototype['severity'] = 'critical';

/**
 * Used to determine if check group is active
 * @member {Boolean} active
 * @default true
 */
ApiMonitoringGroupsCheckGroup.prototype['active'] = true;

/**
 * @member {Array.<Number>} checks
 */
ApiMonitoringGroupsCheckGroup.prototype['checks'] = undefined;





/**
 * Allowed values for the <code>severity</code> property.
 * @enum {String}
 * @readonly
 */
ApiMonitoringGroupsCheckGroup['SeverityEnum'] = {

    /**
     * value: "info"
     * @const
     */
    "info": "info",

    /**
     * value: "warning"
     * @const
     */
    "warning": "warning",

    /**
     * value: "critical"
     * @const
     */
    "critical": "critical"
};



export default ApiMonitoringGroupsCheckGroup;

