/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AnyOfobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobject from './AnyOfobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobject';
import PolicyCreatePolicyType from './PolicyCreatePolicyType';

/**
 * The PolicyCreate model module.
 * @module model/PolicyCreate
 * @version 6.2.1
 */
class PolicyCreate {
    /**
     * Constructs a new <code>PolicyCreate</code>.
     * @alias module:model/PolicyCreate
     * @param name {String} A name for the policy
     * @param policyType {module:model/PolicyCreatePolicyType} 
     * @param config {module:model/AnyOfobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobject} A map of config values. The expected values vary by policy type. See `Retrieves all Policy Types` endpoint for `fieldName`(s) of required options.
     */
    constructor(name, policyType, config) { 
        
        PolicyCreate.initialize(this, name, policyType, config);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, policyType, config) { 
        obj['name'] = name;
        obj['policyType'] = policyType;
        obj['config'] = config;
    }

    /**
     * Constructs a <code>PolicyCreate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PolicyCreate} obj Optional instance to populate.
     * @return {module:model/PolicyCreate} The populated <code>PolicyCreate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PolicyCreate();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('policyType')) {
                obj['policyType'] = PolicyCreatePolicyType.constructFromObject(data['policyType']);
            }
            if (data.hasOwnProperty('config')) {
                obj['config'] = ApiClient.convertToType(data['config'], AnyOfobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobject);
            }
            if (data.hasOwnProperty('enabled')) {
                obj['enabled'] = ApiClient.convertToType(data['enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('refType')) {
                obj['refType'] = ApiClient.convertToType(data['refType'], 'String');
            }
            if (data.hasOwnProperty('refId')) {
                obj['refId'] = ApiClient.convertToType(data['refId'], 'Number');
            }
            if (data.hasOwnProperty('accounts')) {
                obj['accounts'] = ApiClient.convertToType(data['accounts'], ['Number']);
            }
            if (data.hasOwnProperty('eachUser')) {
                obj['eachUser'] = ApiClient.convertToType(data['eachUser'], 'Boolean');
            }
        }
        return obj;
    }


}

/**
 * A name for the policy
 * @member {String} name
 */
PolicyCreate.prototype['name'] = undefined;

/**
 * A description for the policy
 * @member {String} description
 */
PolicyCreate.prototype['description'] = undefined;

/**
 * @member {module:model/PolicyCreatePolicyType} policyType
 */
PolicyCreate.prototype['policyType'] = undefined;

/**
 * A map of config values. The expected values vary by policy type. See `Retrieves all Policy Types` endpoint for `fieldName`(s) of required options.
 * @member {module:model/AnyOfobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobject} config
 */
PolicyCreate.prototype['config'] = undefined;

/**
 * Set to false to disable
 * @member {Boolean} enabled
 * @default true
 */
PolicyCreate.prototype['enabled'] = true;

/**
 * Scope object type.  If none specified, will default to Global (null)
 * @member {module:model/PolicyCreate.RefTypeEnum} refType
 * @default 'null'
 */
PolicyCreate.prototype['refType'] = 'null';

/**
 * Scope object ID (`group`,`cloud`,`user`, etc)
 * @member {Number} refId
 */
PolicyCreate.prototype['refId'] = undefined;

/**
 * Array of tenants to scope the policy to
 * @member {Array.<Number>} accounts
 */
PolicyCreate.prototype['accounts'] = undefined;

/**
 * Apply individually to each user in role.  Only when `refType` equals `Role`
 * @member {Boolean} eachUser
 */
PolicyCreate.prototype['eachUser'] = undefined;





/**
 * Allowed values for the <code>refType</code> property.
 * @enum {String}
 * @readonly
 */
PolicyCreate['RefTypeEnum'] = {

    /**
     * value: "null"
     * @const
     */
    "null": "null",

    /**
     * value: "ComputeSite"
     * @const
     */
    "ComputeSite": "ComputeSite",

    /**
     * value: "ComputeZone"
     * @const
     */
    "ComputeZone": "ComputeZone",

    /**
     * value: "User"
     * @const
     */
    "User": "User",

    /**
     * value: "Role"
     * @const
     */
    "Role": "Role",

    /**
     * value: "Network"
     * @const
     */
    "Network": "Network",

    /**
     * value: "Plan"
     * @const
     */
    "Plan": "Plan"
};



export default PolicyCreate;

