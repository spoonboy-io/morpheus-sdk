/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ApiServersIdMakeManagedServerTags from './ApiServersIdMakeManagedServerTags';
import ClusterServerCreateNetworkInterfaces from './ClusterServerCreateNetworkInterfaces';
import ClusterServerCreatePlan from './ClusterServerCreatePlan';
import ClusterServerCreateServerType from './ClusterServerCreateServerType';
import ClusterServerCreateUserGroup from './ClusterServerCreateUserGroup';
import ClusterServerCreateVolumes from './ClusterServerCreateVolumes';

/**
 * The ClusterServerCreate model module.
 * @module model/ClusterServerCreate
 * @version 6.2.1
 */
class ClusterServerCreate {
    /**
     * Constructs a new <code>ClusterServerCreate</code>.
     * @alias module:model/ClusterServerCreate
     * @param config {Object} Key for specific host type configuration  The config parameter is for configuration options that are specific to each Provision Type. The Provision Types api can be used to see which options are available. 
     * @param name {String} Name to be used for host(s) created in the cluster
     * @param plan {module:model/ClusterServerCreatePlan} 
     */
    constructor(config, name, plan) { 
        
        ClusterServerCreate.initialize(this, config, name, plan);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, config, name, plan) { 
        obj['config'] = config;
        obj['name'] = name;
        obj['plan'] = plan;
    }

    /**
     * Constructs a <code>ClusterServerCreate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ClusterServerCreate} obj Optional instance to populate.
     * @return {module:model/ClusterServerCreate} The populated <code>ClusterServerCreate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ClusterServerCreate();

            if (data.hasOwnProperty('config')) {
                obj['config'] = ApiClient.convertToType(data['config'], Object);
            }
            if (data.hasOwnProperty('serverType')) {
                obj['serverType'] = ClusterServerCreateServerType.constructFromObject(data['serverType']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('plan')) {
                obj['plan'] = ClusterServerCreatePlan.constructFromObject(data['plan']);
            }
            if (data.hasOwnProperty('volumes')) {
                obj['volumes'] = ApiClient.convertToType(data['volumes'], [ClusterServerCreateVolumes]);
            }
            if (data.hasOwnProperty('networkInterfaces')) {
                obj['networkInterfaces'] = ApiClient.convertToType(data['networkInterfaces'], [ClusterServerCreateNetworkInterfaces]);
            }
            if (data.hasOwnProperty('securityGroups')) {
                obj['securityGroups'] = ApiClient.convertToType(data['securityGroups'], ['String']);
            }
            if (data.hasOwnProperty('visibility')) {
                obj['visibility'] = ApiClient.convertToType(data['visibility'], 'String');
            }
            if (data.hasOwnProperty('userGroup')) {
                obj['userGroup'] = ClusterServerCreateUserGroup.constructFromObject(data['userGroup']);
            }
            if (data.hasOwnProperty('networkDomain')) {
                obj['networkDomain'] = ApiClient.convertToType(data['networkDomain'], 'String');
            }
            if (data.hasOwnProperty('hostname')) {
                obj['hostname'] = ApiClient.convertToType(data['hostname'], 'String');
            }
            if (data.hasOwnProperty('nodeCount')) {
                obj['nodeCount'] = ApiClient.convertToType(data['nodeCount'], 'Number');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], [ApiServersIdMakeManagedServerTags]);
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], ['String']);
            }
        }
        return obj;
    }


}

/**
 * Key for specific host type configuration  The config parameter is for configuration options that are specific to each Provision Type. The Provision Types api can be used to see which options are available. 
 * @member {Object} config
 */
ClusterServerCreate.prototype['config'] = undefined;

/**
 * @member {module:model/ClusterServerCreateServerType} serverType
 */
ClusterServerCreate.prototype['serverType'] = undefined;

/**
 * Name to be used for host(s) created in the cluster
 * @member {String} name
 */
ClusterServerCreate.prototype['name'] = undefined;

/**
 * @member {module:model/ClusterServerCreatePlan} plan
 */
ClusterServerCreate.prototype['plan'] = undefined;

/**
 * The (optional) volumes parameter is for LV configuration, can create additional LVs at provision It should be passed as an array of Objects
 * @member {Array.<module:model/ClusterServerCreateVolumes>} volumes
 */
ClusterServerCreate.prototype['volumes'] = undefined;

/**
 * The networkInterfaces parameter is for network configuration.  The Options API /api/options/zoneNetworkOptions can be used to see which options are available.  It should be passed as an array of Objects with the following attributes 
 * @member {Array.<module:model/ClusterServerCreateNetworkInterfaces>} networkInterfaces
 */
ClusterServerCreate.prototype['networkInterfaces'] = undefined;

/**
 * Key for security group configuration.
 * @member {Array.<String>} securityGroups
 */
ClusterServerCreate.prototype['securityGroups'] = undefined;

/**
 * Visibility for server host
 * @member {String} visibility
 * @default 'private'
 */
ClusterServerCreate.prototype['visibility'] = 'private';

/**
 * @member {module:model/ClusterServerCreateUserGroup} userGroup
 */
ClusterServerCreate.prototype['userGroup'] = undefined;

/**
 * Network domain
 * @member {String} networkDomain
 */
ClusterServerCreate.prototype['networkDomain'] = undefined;

/**
 * Hostname for server host
 * @member {String} hostname
 */
ClusterServerCreate.prototype['hostname'] = undefined;

/**
 * Number of workers or hosts
 * @member {Number} nodeCount
 */
ClusterServerCreate.prototype['nodeCount'] = undefined;

/**
 * Metadata tags, Array of objects having a name and value.
 * @member {Array.<module:model/ApiServersIdMakeManagedServerTags>} tags
 */
ClusterServerCreate.prototype['tags'] = undefined;

/**
 * Array of strings (keywords). This will set labels on the server and also on the cluster as well by default.
 * @member {Array.<String>} labels
 */
ClusterServerCreate.prototype['labels'] = undefined;






export default ClusterServerCreate;

