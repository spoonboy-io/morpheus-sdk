/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.1.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The BlueprintTerraformCreateTerraformGit model module.
 * @module model/BlueprintTerraformCreateTerraformGit
 * @version 6.1.1
 */
class BlueprintTerraformCreateTerraformGit {
    /**
     * Constructs a new <code>BlueprintTerraformCreateTerraformGit</code>.
     * @alias module:model/BlueprintTerraformCreateTerraformGit
     * @param repoId {Number} Morpheus SCM Repository ID
     * @param path {String} Path to terraform Files in the Repository
     * @param integrationId {Number} Morpheus SCM Integration ID
     * @param branch {String} Branch Name
     */
    constructor(repoId, path, integrationId, branch) { 
        
        BlueprintTerraformCreateTerraformGit.initialize(this, repoId, path, integrationId, branch);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, repoId, path, integrationId, branch) { 
        obj['repoId'] = repoId;
        obj['path'] = path;
        obj['integrationId'] = integrationId;
        obj['branch'] = branch;
    }

    /**
     * Constructs a <code>BlueprintTerraformCreateTerraformGit</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BlueprintTerraformCreateTerraformGit} obj Optional instance to populate.
     * @return {module:model/BlueprintTerraformCreateTerraformGit} The populated <code>BlueprintTerraformCreateTerraformGit</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BlueprintTerraformCreateTerraformGit();

            if (data.hasOwnProperty('repoId')) {
                obj['repoId'] = ApiClient.convertToType(data['repoId'], 'Number');
            }
            if (data.hasOwnProperty('path')) {
                obj['path'] = ApiClient.convertToType(data['path'], 'String');
            }
            if (data.hasOwnProperty('integrationId')) {
                obj['integrationId'] = ApiClient.convertToType(data['integrationId'], 'Number');
            }
            if (data.hasOwnProperty('branch')) {
                obj['branch'] = ApiClient.convertToType(data['branch'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BlueprintTerraformCreateTerraformGit</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BlueprintTerraformCreateTerraformGit</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of BlueprintTerraformCreateTerraformGit.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['path'] && !(typeof data['path'] === 'string' || data['path'] instanceof String)) {
            throw new Error("Expected the field `path` to be a primitive type in the JSON string but got " + data['path']);
        }
        // ensure the json data is a string
        if (data['branch'] && !(typeof data['branch'] === 'string' || data['branch'] instanceof String)) {
            throw new Error("Expected the field `branch` to be a primitive type in the JSON string but got " + data['branch']);
        }

        return true;
    }


}

BlueprintTerraformCreateTerraformGit.RequiredProperties = ["repoId", "path", "integrationId", "branch"];

/**
 * Morpheus SCM Repository ID
 * @member {Number} repoId
 */
BlueprintTerraformCreateTerraformGit.prototype['repoId'] = undefined;

/**
 * Path to terraform Files in the Repository
 * @member {String} path
 */
BlueprintTerraformCreateTerraformGit.prototype['path'] = undefined;

/**
 * Morpheus SCM Integration ID
 * @member {Number} integrationId
 */
BlueprintTerraformCreateTerraformGit.prototype['integrationId'] = undefined;

/**
 * Branch Name
 * @member {String} branch
 */
BlueprintTerraformCreateTerraformGit.prototype['branch'] = undefined;






export default BlueprintTerraformCreateTerraformGit;

