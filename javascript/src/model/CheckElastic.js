/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CheckElasticCheckType from './CheckElasticCheckType';
import CheckElasticsearchConfig from './CheckElasticsearchConfig';

/**
 * The CheckElastic model module.
 * @module model/CheckElastic
 * @version 6.2.1
 */
class CheckElastic {
    /**
     * Constructs a new <code>CheckElastic</code>.
     * Elasticsearch check is capable of connecting to your Elasticsearch, cluster or node, verifying its health. In addition, Morpheus will also pull statistical information such as: document size, capacity, and cpu usage. 
     * @alias module:model/CheckElastic
     */
    constructor() { 
        
        CheckElastic.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CheckElastic</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CheckElastic} obj Optional instance to populate.
     * @return {module:model/CheckElastic} The populated <code>CheckElastic</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CheckElastic();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('checkType')) {
                obj['checkType'] = CheckElasticCheckType.constructFromObject(data['checkType']);
            }
            if (data.hasOwnProperty('checkInterval')) {
                obj['checkInterval'] = ApiClient.convertToType(data['checkInterval'], 'Number');
            }
            if (data.hasOwnProperty('inUptime')) {
                obj['inUptime'] = ApiClient.convertToType(data['inUptime'], 'Boolean');
            }
            if (data.hasOwnProperty('active')) {
                obj['active'] = ApiClient.convertToType(data['active'], 'Boolean');
            }
            if (data.hasOwnProperty('severity')) {
                obj['severity'] = ApiClient.convertToType(data['severity'], 'String');
            }
            if (data.hasOwnProperty('config')) {
                obj['config'] = ApiClient.convertToType(data['config'], CheckElasticsearchConfig);
            }
        }
        return obj;
    }


}

/**
 * Unique name scoped to your account for the check
 * @member {String} name
 */
CheckElastic.prototype['name'] = undefined;

/**
 * Optional description field
 * @member {String} description
 */
CheckElastic.prototype['description'] = undefined;

/**
 * @member {module:model/CheckElasticCheckType} checkType
 */
CheckElastic.prototype['checkType'] = undefined;

/**
 * Number of seconds you want between check executions (minimum value is 60, depending on your subscription plan)
 * @member {Number} checkInterval
 * @default 300
 */
CheckElastic.prototype['checkInterval'] = 300;

/**
 * Used to determine if check should affect account wide availability calculations
 * @member {Boolean} inUptime
 * @default true
 */
CheckElastic.prototype['inUptime'] = true;

/**
 * Used to determine if check should be scheduled to execute
 * @member {Boolean} active
 * @default true
 */
CheckElastic.prototype['active'] = true;

/**
 * Severity level threshold for sending notifications.
 * @member {module:model/CheckElastic.SeverityEnum} severity
 * @default 'critical'
 */
CheckElastic.prototype['severity'] = 'critical';

/**
 * @member {module:model/CheckElasticsearchConfig} config
 */
CheckElastic.prototype['config'] = undefined;





/**
 * Allowed values for the <code>severity</code> property.
 * @enum {String}
 * @readonly
 */
CheckElastic['SeverityEnum'] = {

    /**
     * value: "info"
     * @const
     */
    "info": "info",

    /**
     * value: "warning"
     * @const
     */
    "warning": "warning",

    /**
     * value: "critical"
     * @const
     */
    "critical": "critical"
};



export default CheckElastic;

