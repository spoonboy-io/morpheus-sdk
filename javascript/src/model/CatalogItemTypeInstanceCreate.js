/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.1.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CatalogItemTypeInstanceCreate model module.
 * @module model/CatalogItemTypeInstanceCreate
 * @version 6.1.1
 */
class CatalogItemTypeInstanceCreate {
    /**
     * Constructs a new <code>CatalogItemTypeInstanceCreate</code>.
     * @alias module:model/CatalogItemTypeInstanceCreate
     * @param config {Object} 
     */
    constructor(config) { 
        
        CatalogItemTypeInstanceCreate.initialize(this, config);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, config) { 
        obj['config'] = config;
    }

    /**
     * Constructs a <code>CatalogItemTypeInstanceCreate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CatalogItemTypeInstanceCreate} obj Optional instance to populate.
     * @return {module:model/CatalogItemTypeInstanceCreate} The populated <code>CatalogItemTypeInstanceCreate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CatalogItemTypeInstanceCreate();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], ['String']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('visibility')) {
                obj['visibility'] = ApiClient.convertToType(data['visibility'], 'String');
            }
            if (data.hasOwnProperty('layoutCode')) {
                obj['layoutCode'] = ApiClient.convertToType(data['layoutCode'], 'String');
            }
            if (data.hasOwnProperty('iconPath')) {
                obj['iconPath'] = ApiClient.convertToType(data['iconPath'], 'String');
            }
            if (data.hasOwnProperty('enabled')) {
                obj['enabled'] = ApiClient.convertToType(data['enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('featured')) {
                obj['featured'] = ApiClient.convertToType(data['featured'], 'Boolean');
            }
            if (data.hasOwnProperty('allowQuantity')) {
                obj['allowQuantity'] = ApiClient.convertToType(data['allowQuantity'], 'Boolean');
            }
            if (data.hasOwnProperty('config')) {
                obj['config'] = Object.constructFromObject(data['config']);
            }
            if (data.hasOwnProperty('optionTypes')) {
                obj['optionTypes'] = ApiClient.convertToType(data['optionTypes'], ['Number']);
            }
            if (data.hasOwnProperty('content')) {
                obj['content'] = ApiClient.convertToType(data['content'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CatalogItemTypeInstanceCreate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CatalogItemTypeInstanceCreate</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CatalogItemTypeInstanceCreate.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['code'] && !(typeof data['code'] === 'string' || data['code'] instanceof String)) {
            throw new Error("Expected the field `code` to be a primitive type in the JSON string but got " + data['code']);
        }
        // ensure the json data is a string
        if (data['category'] && !(typeof data['category'] === 'string' || data['category'] instanceof String)) {
            throw new Error("Expected the field `category` to be a primitive type in the JSON string but got " + data['category']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['labels'])) {
            throw new Error("Expected the field `labels` to be an array in the JSON data but got " + data['labels']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['visibility'] && !(typeof data['visibility'] === 'string' || data['visibility'] instanceof String)) {
            throw new Error("Expected the field `visibility` to be a primitive type in the JSON string but got " + data['visibility']);
        }
        // ensure the json data is a string
        if (data['layoutCode'] && !(typeof data['layoutCode'] === 'string' || data['layoutCode'] instanceof String)) {
            throw new Error("Expected the field `layoutCode` to be a primitive type in the JSON string but got " + data['layoutCode']);
        }
        // ensure the json data is a string
        if (data['iconPath'] && !(typeof data['iconPath'] === 'string' || data['iconPath'] instanceof String)) {
            throw new Error("Expected the field `iconPath` to be a primitive type in the JSON string but got " + data['iconPath']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['optionTypes'])) {
            throw new Error("Expected the field `optionTypes` to be an array in the JSON data but got " + data['optionTypes']);
        }
        // ensure the json data is a string
        if (data['content'] && !(typeof data['content'] === 'string' || data['content'] instanceof String)) {
            throw new Error("Expected the field `content` to be a primitive type in the JSON string but got " + data['content']);
        }

        return true;
    }


}

CatalogItemTypeInstanceCreate.RequiredProperties = ["config"];

/**
 * Catalog Item Type name
 * @member {String} name
 */
CatalogItemTypeInstanceCreate.prototype['name'] = undefined;

/**
 * Useful shortcode for provisioning naming schemes and export reference.
 * @member {String} code
 */
CatalogItemTypeInstanceCreate.prototype['code'] = undefined;

/**
 * Catalog Item Type category
 * @member {String} category
 */
CatalogItemTypeInstanceCreate.prototype['category'] = undefined;

/**
 * Catalog Item Type description
 * @member {String} description
 */
CatalogItemTypeInstanceCreate.prototype['description'] = undefined;

/**
 * Array of label strings, can be used for filtering.
 * @member {Array.<String>} labels
 */
CatalogItemTypeInstanceCreate.prototype['labels'] = undefined;

/**
 * Type, `instance`, `blueprint` or `workflow`. This determines whether an Instance or App will be provisioned. Instance types require a config and blueprint requires a blueprint and appSpec, while workflow types requires a workflow and context.
 * @member {module:model/CatalogItemTypeInstanceCreate.TypeEnum} type
 */
CatalogItemTypeInstanceCreate.prototype['type'] = undefined;

/**
 * Visibility - Set to public to allow all tenants
 * @member {String} visibility
 * @default 'private'
 */
CatalogItemTypeInstanceCreate.prototype['visibility'] = 'private';

/**
 * Identifier primarily used for Plugin Catalog Item Types
 * @member {String} layoutCode
 */
CatalogItemTypeInstanceCreate.prototype['layoutCode'] = undefined;

/**
 * Icon Path, relative location of an icon image, eg. /assets/containers-png/nginx.png.
 * @member {String} iconPath
 */
CatalogItemTypeInstanceCreate.prototype['iconPath'] = undefined;

/**
 * Can be used to enable / disable the catalog item type.
 * @member {Boolean} enabled
 * @default true
 */
CatalogItemTypeInstanceCreate.prototype['enabled'] = true;

/**
 * Can be used to feature the catalog item type.
 * @member {Boolean} featured
 * @default false
 */
CatalogItemTypeInstanceCreate.prototype['featured'] = false;

/**
 * Can users order more than one of this item at a time.
 * @member {Boolean} allowQuantity
 * @default false
 */
CatalogItemTypeInstanceCreate.prototype['allowQuantity'] = false;

/**
 * @member {Object} config
 */
CatalogItemTypeInstanceCreate.prototype['config'] = undefined;

/**
 * Array of option type IDs. Only applies to type instance and blueprint.
 * @member {Array.<Number>} optionTypes
 */
CatalogItemTypeInstanceCreate.prototype['optionTypes'] = undefined;

/**
 * Documentation content for this Catalog Item. Markdown-formatted text is accepted and displayed appropriately when the item is ordered from the Service Catalog. A new Catalog Item-type Wiki entry will also be added containing this information.
 * @member {String} content
 */
CatalogItemTypeInstanceCreate.prototype['content'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
CatalogItemTypeInstanceCreate['TypeEnum'] = {

    /**
     * value: "instance"
     * @const
     */
    "instance": "instance"
};



export default CatalogItemTypeInstanceCreate;

