/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ApiJobsIdJobTargets from './ApiJobsIdJobTargets';
import ApiJobsIdJobTask from './ApiJobsIdJobTask';
import OneOfstringlong from './OneOfstringlong';

/**
 * The ApiJobsIdJob model module.
 * @module model/ApiJobsIdJob
 * @version 6.2.1
 */
class ApiJobsIdJob {
    /**
     * Constructs a new <code>ApiJobsIdJob</code>.
     * @alias module:model/ApiJobsIdJob
     */
    constructor() { 
        
        ApiJobsIdJob.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ApiJobsIdJob</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ApiJobsIdJob} obj Optional instance to populate.
     * @return {module:model/ApiJobsIdJob} The populated <code>ApiJobsIdJob</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ApiJobsIdJob();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], ['String']);
            }
            if (data.hasOwnProperty('enabled')) {
                obj['enabled'] = ApiClient.convertToType(data['enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('task')) {
                obj['task'] = ApiJobsIdJobTask.constructFromObject(data['task']);
            }
            if (data.hasOwnProperty('workflow')) {
                obj['workflow'] = ApiJobsIdJobTask.constructFromObject(data['workflow']);
            }
            if (data.hasOwnProperty('scanPath')) {
                obj['scanPath'] = ApiClient.convertToType(data['scanPath'], 'String');
            }
            if (data.hasOwnProperty('securityProfile')) {
                obj['securityProfile'] = ApiClient.convertToType(data['securityProfile'], 'String');
            }
            if (data.hasOwnProperty('targetType')) {
                obj['targetType'] = ApiClient.convertToType(data['targetType'], 'String');
            }
            if (data.hasOwnProperty('targets')) {
                obj['targets'] = ApiClient.convertToType(data['targets'], [ApiJobsIdJobTargets]);
            }
            if (data.hasOwnProperty('instanceLabel')) {
                obj['instanceLabel'] = ApiClient.convertToType(data['instanceLabel'], 'String');
            }
            if (data.hasOwnProperty('serverLabel')) {
                obj['serverLabel'] = ApiClient.convertToType(data['serverLabel'], 'String');
            }
            if (data.hasOwnProperty('scheduleMode')) {
                obj['scheduleMode'] = ApiClient.convertToType(data['scheduleMode'], OneOfstringlong);
            }
            if (data.hasOwnProperty('customOptions')) {
                obj['customOptions'] = ApiClient.convertToType(data['customOptions'], Object);
            }
            if (data.hasOwnProperty('customConfig')) {
                obj['customConfig'] = ApiClient.convertToType(data['customConfig'], 'String');
            }
            if (data.hasOwnProperty('dateTime')) {
                obj['dateTime'] = ApiClient.convertToType(data['dateTime'], 'Date');
            }
            if (data.hasOwnProperty('run')) {
                obj['run'] = ApiClient.convertToType(data['run'], 'Boolean');
            }
        }
        return obj;
    }


}

/**
 * A name for the Job
 * @member {String} name
 */
ApiJobsIdJob.prototype['name'] = undefined;

/**
 * Array of label strings, can be used for filtering.
 * @member {Array.<String>} labels
 */
ApiJobsIdJob.prototype['labels'] = undefined;

/**
 * Use this to set enabled state
 * @member {Boolean} enabled
 * @default true
 */
ApiJobsIdJob.prototype['enabled'] = true;

/**
 * @member {module:model/ApiJobsIdJobTask} task
 */
ApiJobsIdJob.prototype['task'] = undefined;

/**
 * @member {module:model/ApiJobsIdJobTask} workflow
 */
ApiJobsIdJob.prototype['workflow'] = undefined;

/**
 * Scan Checklist. Only applies to type scap-package.
 * @member {String} scanPath
 */
ApiJobsIdJob.prototype['scanPath'] = undefined;

/**
 * Security Profile. Only applies to type scap-package.
 * @member {String} securityProfile
 */
ApiJobsIdJob.prototype['securityProfile'] = undefined;

/**
 * Target type where job will execute
 * @member {module:model/ApiJobsIdJob.TargetTypeEnum} targetType
 */
ApiJobsIdJob.prototype['targetType'] = undefined;

/**
 * @member {Array.<module:model/ApiJobsIdJobTargets>} targets
 */
ApiJobsIdJob.prototype['targets'] = undefined;

/**
 * Instance Label. Only applicable if `targetType` is `instance-label`.
 * @member {String} instanceLabel
 */
ApiJobsIdJob.prototype['instanceLabel'] = undefined;

/**
 * Server Label. Only applicable if `targetType` is `server-label`.
 * @member {String} serverLabel
 */
ApiJobsIdJob.prototype['serverLabel'] = undefined;

/**
 * @member {module:model/OneOfstringlong} scheduleMode
 */
ApiJobsIdJob.prototype['scheduleMode'] = undefined;

/**
 * Map of options to be used as values in the workflow tasks. These correspond to option types.
 * @member {Object} customOptions
 */
ApiJobsIdJob.prototype['customOptions'] = undefined;

/**
 * Job custom configuration (String in JSON format)
 * @member {String} customConfig
 */
ApiJobsIdJob.prototype['customConfig'] = undefined;

/**
 * Date and Time to execute the job. Use UTC time in the format 2020-02-15T05:00:00Z. Required when scheduleMode is 'dateTime'.
 * @member {Date} dateTime
 */
ApiJobsIdJob.prototype['dateTime'] = undefined;

/**
 * If true, executes job
 * @member {Boolean} run
 */
ApiJobsIdJob.prototype['run'] = undefined;





/**
 * Allowed values for the <code>targetType</code> property.
 * @enum {String}
 * @readonly
 */
ApiJobsIdJob['TargetTypeEnum'] = {

    /**
     * value: "appliance"
     * @const
     */
    "appliance": "appliance",

    /**
     * value: "instance"
     * @const
     */
    "instance": "instance",

    /**
     * value: "instance-label"
     * @const
     */
    "instance-label": "instance-label",

    /**
     * value: "server"
     * @const
     */
    "server": "server",

    /**
     * value: "server-label"
     * @const
     */
    "server-label": "server-label"
};



export default ApiJobsIdJob;

