/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import OneOfobjectobject from './OneOfobjectobject';
import OneOfobjectstring from './OneOfobjectstring';
import VirtualImageCreateStorageProvider from './VirtualImageCreateStorageProvider';
import VirtualImageCreateTags from './VirtualImageCreateTags';

/**
 * The VirtualImageCreate model module.
 * @module model/VirtualImageCreate
 * @version 6.2.1
 */
class VirtualImageCreate {
    /**
     * Constructs a new <code>VirtualImageCreate</code>.
     * @alias module:model/VirtualImageCreate
     */
    constructor() { 
        
        VirtualImageCreate.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VirtualImageCreate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VirtualImageCreate} obj Optional instance to populate.
     * @return {module:model/VirtualImageCreate} The populated <code>VirtualImageCreate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VirtualImageCreate();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], ['String']);
            }
            if (data.hasOwnProperty('imageType')) {
                obj['imageType'] = ApiClient.convertToType(data['imageType'], 'String');
            }
            if (data.hasOwnProperty('storageProvider')) {
                obj['storageProvider'] = VirtualImageCreateStorageProvider.constructFromObject(data['storageProvider']);
            }
            if (data.hasOwnProperty('isCloudInit')) {
                obj['isCloudInit'] = ApiClient.convertToType(data['isCloudInit'], 'Boolean');
            }
            if (data.hasOwnProperty('userData')) {
                obj['userData'] = ApiClient.convertToType(data['userData'], 'String');
            }
            if (data.hasOwnProperty('installAgent')) {
                obj['installAgent'] = ApiClient.convertToType(data['installAgent'], 'Boolean');
            }
            if (data.hasOwnProperty('sshUsername')) {
                obj['sshUsername'] = ApiClient.convertToType(data['sshUsername'], 'String');
            }
            if (data.hasOwnProperty('sshPassword')) {
                obj['sshPassword'] = ApiClient.convertToType(data['sshPassword'], 'String');
            }
            if (data.hasOwnProperty('sshKey')) {
                obj['sshKey'] = ApiClient.convertToType(data['sshKey'], 'String');
            }
            if (data.hasOwnProperty('osType')) {
                obj['osType'] = ApiClient.convertToType(data['osType'], OneOfobjectstring);
            }
            if (data.hasOwnProperty('visibility')) {
                obj['visibility'] = ApiClient.convertToType(data['visibility'], 'String');
            }
            if (data.hasOwnProperty('accounts')) {
                obj['accounts'] = ApiClient.convertToType(data['accounts'], ['Number']);
            }
            if (data.hasOwnProperty('isAutoJoinDomain')) {
                obj['isAutoJoinDomain'] = ApiClient.convertToType(data['isAutoJoinDomain'], 'Boolean');
            }
            if (data.hasOwnProperty('virtioSupported')) {
                obj['virtioSupported'] = ApiClient.convertToType(data['virtioSupported'], 'Boolean');
            }
            if (data.hasOwnProperty('vmToolsInstalled')) {
                obj['vmToolsInstalled'] = ApiClient.convertToType(data['vmToolsInstalled'], 'Boolean');
            }
            if (data.hasOwnProperty('isForceCustomization')) {
                obj['isForceCustomization'] = ApiClient.convertToType(data['isForceCustomization'], 'Boolean');
            }
            if (data.hasOwnProperty('trialVersion')) {
                obj['trialVersion'] = ApiClient.convertToType(data['trialVersion'], 'Boolean');
            }
            if (data.hasOwnProperty('isSysprep')) {
                obj['isSysprep'] = ApiClient.convertToType(data['isSysprep'], 'Boolean');
            }
            if (data.hasOwnProperty('config')) {
                obj['config'] = ApiClient.convertToType(data['config'], OneOfobjectobject);
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], [VirtualImageCreateTags]);
            }
        }
        return obj;
    }


}

/**
 * A name for the virtual image
 * @member {String} name
 */
VirtualImageCreate.prototype['name'] = undefined;

/**
 * Array of label strings, can be used for filtering.
 * @member {Array.<String>} labels
 */
VirtualImageCreate.prototype['labels'] = undefined;

/**
 * Code of image type. eg. vmware, ami, etc.
 * @member {String} imageType
 */
VirtualImageCreate.prototype['imageType'] = undefined;

/**
 * @member {module:model/VirtualImageCreateStorageProvider} storageProvider
 */
VirtualImageCreate.prototype['storageProvider'] = undefined;

/**
 * Cloud Init Enabled?
 * @member {Boolean} isCloudInit
 * @default false
 */
VirtualImageCreate.prototype['isCloudInit'] = false;

/**
 * Cloud-Init User Data, a bash script
 * @member {String} userData
 */
VirtualImageCreate.prototype['userData'] = undefined;

/**
 * Install Agent?
 * @member {Boolean} installAgent
 * @default false
 */
VirtualImageCreate.prototype['installAgent'] = false;

/**
 * SSH Username
 * @member {String} sshUsername
 */
VirtualImageCreate.prototype['sshUsername'] = undefined;

/**
 * SSH Password
 * @member {String} sshPassword
 */
VirtualImageCreate.prototype['sshPassword'] = undefined;

/**
 * SSH Key
 * @member {String} sshKey
 */
VirtualImageCreate.prototype['sshKey'] = undefined;

/**
 * A Map containing the id of the OS Type. This can also be passed as a string (code or name) instead.
 * @member {module:model/OneOfobjectstring} osType
 */
VirtualImageCreate.prototype['osType'] = undefined;

/**
 * private or public
 * @member {String} visibility
 * @default 'private'
 */
VirtualImageCreate.prototype['visibility'] = 'private';

/**
 * @member {Array.<Number>} accounts
 */
VirtualImageCreate.prototype['accounts'] = undefined;

/**
 * Auto Join Domain?
 * @member {Boolean} isAutoJoinDomain
 * @default false
 */
VirtualImageCreate.prototype['isAutoJoinDomain'] = false;

/**
 * VirtIO Drivers Loaded?
 * @member {Boolean} virtioSupported
 * @default true
 */
VirtualImageCreate.prototype['virtioSupported'] = true;

/**
 * VM Tools Installed?
 * @member {Boolean} vmToolsInstalled
 * @default true
 */
VirtualImageCreate.prototype['vmToolsInstalled'] = true;

/**
 * Force Guest Customization?
 * @member {Boolean} isForceCustomization
 * @default false
 */
VirtualImageCreate.prototype['isForceCustomization'] = false;

/**
 * Trial Version
 * @member {Boolean} trialVersion
 * @default false
 */
VirtualImageCreate.prototype['trialVersion'] = false;

/**
 * Sysprep Enabled?
 * @member {Boolean} isSysprep
 * @default false
 */
VirtualImageCreate.prototype['isSysprep'] = false;

/**
 * Map of configuration properties, varies by image type.
 * @member {module:model/OneOfobjectobject} config
 */
VirtualImageCreate.prototype['config'] = undefined;

/**
 * Metadata tags, Array of objects having a name and value
 * @member {Array.<module:model/VirtualImageCreateTags>} tags
 */
VirtualImageCreate.prototype['tags'] = undefined;






export default VirtualImageCreate;

