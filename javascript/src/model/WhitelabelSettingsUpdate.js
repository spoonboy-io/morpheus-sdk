/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import WhitelabelSettingsUpdateSupportMenuLinks from './WhitelabelSettingsUpdateSupportMenuLinks';

/**
 * The WhitelabelSettingsUpdate model module.
 * @module model/WhitelabelSettingsUpdate
 * @version 6.2.1
 */
class WhitelabelSettingsUpdate {
    /**
     * Constructs a new <code>WhitelabelSettingsUpdate</code>.
     * @alias module:model/WhitelabelSettingsUpdate
     */
    constructor() { 
        
        WhitelabelSettingsUpdate.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>WhitelabelSettingsUpdate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WhitelabelSettingsUpdate} obj Optional instance to populate.
     * @return {module:model/WhitelabelSettingsUpdate} The populated <code>WhitelabelSettingsUpdate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WhitelabelSettingsUpdate();

            if (data.hasOwnProperty('enabled')) {
                obj['enabled'] = ApiClient.convertToType(data['enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('applianceName')) {
                obj['applianceName'] = ApiClient.convertToType(data['applianceName'], 'String');
            }
            if (data.hasOwnProperty('disableSupportMenu')) {
                obj['disableSupportMenu'] = ApiClient.convertToType(data['disableSupportMenu'], 'Boolean');
            }
            if (data.hasOwnProperty('resetHeaderLogo')) {
                obj['resetHeaderLogo'] = ApiClient.convertToType(data['resetHeaderLogo'], 'Boolean');
            }
            if (data.hasOwnProperty('resetFooterLogo')) {
                obj['resetFooterLogo'] = ApiClient.convertToType(data['resetFooterLogo'], 'Boolean');
            }
            if (data.hasOwnProperty('resetLoginLogo')) {
                obj['resetLoginLogo'] = ApiClient.convertToType(data['resetLoginLogo'], 'Boolean');
            }
            if (data.hasOwnProperty('resetFavicon')) {
                obj['resetFavicon'] = ApiClient.convertToType(data['resetFavicon'], 'Boolean');
            }
            if (data.hasOwnProperty('headerBgColor')) {
                obj['headerBgColor'] = ApiClient.convertToType(data['headerBgColor'], 'String');
            }
            if (data.hasOwnProperty('headerFgColor')) {
                obj['headerFgColor'] = ApiClient.convertToType(data['headerFgColor'], 'String');
            }
            if (data.hasOwnProperty('navBgColor')) {
                obj['navBgColor'] = ApiClient.convertToType(data['navBgColor'], 'String');
            }
            if (data.hasOwnProperty('navFgColor')) {
                obj['navFgColor'] = ApiClient.convertToType(data['navFgColor'], 'String');
            }
            if (data.hasOwnProperty('navHoverColor')) {
                obj['navHoverColor'] = ApiClient.convertToType(data['navHoverColor'], 'String');
            }
            if (data.hasOwnProperty('primaryButtonBgColor')) {
                obj['primaryButtonBgColor'] = ApiClient.convertToType(data['primaryButtonBgColor'], 'String');
            }
            if (data.hasOwnProperty('primaryButtonFgColor')) {
                obj['primaryButtonFgColor'] = ApiClient.convertToType(data['primaryButtonFgColor'], 'String');
            }
            if (data.hasOwnProperty('primaryButtonHoverBgColor')) {
                obj['primaryButtonHoverBgColor'] = ApiClient.convertToType(data['primaryButtonHoverBgColor'], 'String');
            }
            if (data.hasOwnProperty('primaryButtonHoverFgColor')) {
                obj['primaryButtonHoverFgColor'] = ApiClient.convertToType(data['primaryButtonHoverFgColor'], 'String');
            }
            if (data.hasOwnProperty('footerBgColor')) {
                obj['footerBgColor'] = ApiClient.convertToType(data['footerBgColor'], 'String');
            }
            if (data.hasOwnProperty('footerFgColor')) {
                obj['footerFgColor'] = ApiClient.convertToType(data['footerFgColor'], 'String');
            }
            if (data.hasOwnProperty('loginBgColor')) {
                obj['loginBgColor'] = ApiClient.convertToType(data['loginBgColor'], 'String');
            }
            if (data.hasOwnProperty('copyrightString')) {
                obj['copyrightString'] = ApiClient.convertToType(data['copyrightString'], 'String');
            }
            if (data.hasOwnProperty('overrideCss')) {
                obj['overrideCss'] = ApiClient.convertToType(data['overrideCss'], 'String');
            }
            if (data.hasOwnProperty('termsOfUse')) {
                obj['termsOfUse'] = ApiClient.convertToType(data['termsOfUse'], 'String');
            }
            if (data.hasOwnProperty('privacyPolicy')) {
                obj['privacyPolicy'] = ApiClient.convertToType(data['privacyPolicy'], 'String');
            }
            if (data.hasOwnProperty('supportMenuLinks')) {
                obj['supportMenuLinks'] = ApiClient.convertToType(data['supportMenuLinks'], [WhitelabelSettingsUpdateSupportMenuLinks]);
            }
        }
        return obj;
    }


}

/**
 * Can be used to enable / disable whitelabel feature
 * @member {Boolean} enabled
 */
WhitelabelSettingsUpdate.prototype['enabled'] = undefined;

/**
 * Appliance name. Master account only
 * @member {String} applianceName
 */
WhitelabelSettingsUpdate.prototype['applianceName'] = undefined;

/**
 * Can be used to disable support menu
 * @member {Boolean} disableSupportMenu
 */
WhitelabelSettingsUpdate.prototype['disableSupportMenu'] = undefined;

/**
 * Resets header logo to default header logo
 * @member {Boolean} resetHeaderLogo
 */
WhitelabelSettingsUpdate.prototype['resetHeaderLogo'] = undefined;

/**
 * Resets footer logo to default footer logo
 * @member {Boolean} resetFooterLogo
 */
WhitelabelSettingsUpdate.prototype['resetFooterLogo'] = undefined;

/**
 * Resets login logo to default login logo
 * @member {Boolean} resetLoginLogo
 */
WhitelabelSettingsUpdate.prototype['resetLoginLogo'] = undefined;

/**
 * Resets favicon to default favicon
 * @member {Boolean} resetFavicon
 */
WhitelabelSettingsUpdate.prototype['resetFavicon'] = undefined;

/**
 * Header background color
 * @member {String} headerBgColor
 */
WhitelabelSettingsUpdate.prototype['headerBgColor'] = undefined;

/**
 * Header foreground color
 * @member {String} headerFgColor
 */
WhitelabelSettingsUpdate.prototype['headerFgColor'] = undefined;

/**
 * Nav background color
 * @member {String} navBgColor
 */
WhitelabelSettingsUpdate.prototype['navBgColor'] = undefined;

/**
 * Nav foreground color
 * @member {String} navFgColor
 */
WhitelabelSettingsUpdate.prototype['navFgColor'] = undefined;

/**
 * Nav hover color
 * @member {String} navHoverColor
 */
WhitelabelSettingsUpdate.prototype['navHoverColor'] = undefined;

/**
 * Primary button background color
 * @member {String} primaryButtonBgColor
 */
WhitelabelSettingsUpdate.prototype['primaryButtonBgColor'] = undefined;

/**
 * Primary button foreground color
 * @member {String} primaryButtonFgColor
 */
WhitelabelSettingsUpdate.prototype['primaryButtonFgColor'] = undefined;

/**
 * Primary button hover background color
 * @member {String} primaryButtonHoverBgColor
 */
WhitelabelSettingsUpdate.prototype['primaryButtonHoverBgColor'] = undefined;

/**
 * Primary button hover foreground color
 * @member {String} primaryButtonHoverFgColor
 */
WhitelabelSettingsUpdate.prototype['primaryButtonHoverFgColor'] = undefined;

/**
 * Footer background color
 * @member {String} footerBgColor
 */
WhitelabelSettingsUpdate.prototype['footerBgColor'] = undefined;

/**
 * Footer foreground color
 * @member {String} footerFgColor
 */
WhitelabelSettingsUpdate.prototype['footerFgColor'] = undefined;

/**
 * Login background color
 * @member {String} loginBgColor
 */
WhitelabelSettingsUpdate.prototype['loginBgColor'] = undefined;

/**
 * Copyright String
 * @member {String} copyrightString
 */
WhitelabelSettingsUpdate.prototype['copyrightString'] = undefined;

/**
 * Override CSS
 * @member {String} overrideCss
 */
WhitelabelSettingsUpdate.prototype['overrideCss'] = undefined;

/**
 * Terms of use content
 * @member {String} termsOfUse
 */
WhitelabelSettingsUpdate.prototype['termsOfUse'] = undefined;

/**
 * Privacy policy content
 * @member {String} privacyPolicy
 */
WhitelabelSettingsUpdate.prototype['privacyPolicy'] = undefined;

/**
 * @member {Array.<module:model/WhitelabelSettingsUpdateSupportMenuLinks>} supportMenuLinks
 */
WhitelabelSettingsUpdate.prototype['supportMenuLinks'] = undefined;






export default WhitelabelSettingsUpdate;

