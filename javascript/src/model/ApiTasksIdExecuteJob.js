/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ApiTasksIdExecuteJob model module.
 * @module model/ApiTasksIdExecuteJob
 * @version 6.2.1
 */
class ApiTasksIdExecuteJob {
    /**
     * Constructs a new <code>ApiTasksIdExecuteJob</code>.
     * @alias module:model/ApiTasksIdExecuteJob
     */
    constructor() { 
        
        ApiTasksIdExecuteJob.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ApiTasksIdExecuteJob</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ApiTasksIdExecuteJob} obj Optional instance to populate.
     * @return {module:model/ApiTasksIdExecuteJob} The populated <code>ApiTasksIdExecuteJob</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ApiTasksIdExecuteJob();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('targetType')) {
                obj['targetType'] = ApiClient.convertToType(data['targetType'], 'String');
            }
            if (data.hasOwnProperty('instances')) {
                obj['instances'] = ApiClient.convertToType(data['instances'], ['Number']);
            }
            if (data.hasOwnProperty('servers')) {
                obj['servers'] = ApiClient.convertToType(data['servers'], ['Number']);
            }
            if (data.hasOwnProperty('instanceLabel')) {
                obj['instanceLabel'] = ApiClient.convertToType(data['instanceLabel'], 'String');
            }
            if (data.hasOwnProperty('serverLabel')) {
                obj['serverLabel'] = ApiClient.convertToType(data['serverLabel'], 'String');
            }
            if (data.hasOwnProperty('customOptions')) {
                obj['customOptions'] = ApiClient.convertToType(data['customOptions'], Object);
            }
            if (data.hasOwnProperty('customConfig')) {
                obj['customConfig'] = ApiClient.convertToType(data['customConfig'], 'String');
            }
        }
        return obj;
    }


}

/**
 * A name for the execution job. Can be used to find execution results with `/api/processes?name=`
 * @member {String} name
 */
ApiTasksIdExecuteJob.prototype['name'] = undefined;

/**
 * The target context for task execution. This is required for tasks with `executeTarget` set to `resource`.
 * @member {module:model/ApiTasksIdExecuteJob.TargetTypeEnum} targetType
 */
ApiTasksIdExecuteJob.prototype['targetType'] = undefined;

/**
 * Array of Instance IDs. Only applicable if `targetType` is instance.
 * @member {Array.<Number>} instances
 */
ApiTasksIdExecuteJob.prototype['instances'] = undefined;

/**
 * Array of Server IDs. Only applicable if `targetType` is `server`.
 * @member {Array.<Number>} servers
 */
ApiTasksIdExecuteJob.prototype['servers'] = undefined;

/**
 * Instance Label. Only applicable if `targetType` is `instance-label`.
 * @member {String} instanceLabel
 */
ApiTasksIdExecuteJob.prototype['instanceLabel'] = undefined;

/**
 * Server Label. Only applicable if `targetType` is `server-label`.
 * @member {String} serverLabel
 */
ApiTasksIdExecuteJob.prototype['serverLabel'] = undefined;

/**
 * Map of options to be used as values in the task. These correspond to option types.
 * @member {Object} customOptions
 */
ApiTasksIdExecuteJob.prototype['customOptions'] = undefined;

/**
 * String of custom configuration values as JSON.
 * @member {String} customConfig
 */
ApiTasksIdExecuteJob.prototype['customConfig'] = undefined;





/**
 * Allowed values for the <code>targetType</code> property.
 * @enum {String}
 * @readonly
 */
ApiTasksIdExecuteJob['TargetTypeEnum'] = {

    /**
     * value: "appliance"
     * @const
     */
    "appliance": "appliance",

    /**
     * value: "instance"
     * @const
     */
    "instance": "instance",

    /**
     * value: "instance-label"
     * @const
     */
    "instance-label": "instance-label",

    /**
     * value: "server"
     * @const
     */
    "server": "server",

    /**
     * value: "server-label"
     * @const
     */
    "server-label": "server-label"
};



export default ApiTasksIdExecuteJob;

