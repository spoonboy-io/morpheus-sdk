/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The InstanceScheduleUpdateThreshold model module.
 * @module model/InstanceScheduleUpdateThreshold
 * @version 6.2.1
 */
class InstanceScheduleUpdateThreshold {
    /**
     * Constructs a new <code>InstanceScheduleUpdateThreshold</code>.
     * @alias module:model/InstanceScheduleUpdateThreshold
     */
    constructor() { 
        
        InstanceScheduleUpdateThreshold.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>InstanceScheduleUpdateThreshold</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InstanceScheduleUpdateThreshold} obj Optional instance to populate.
     * @return {module:model/InstanceScheduleUpdateThreshold} The populated <code>InstanceScheduleUpdateThreshold</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InstanceScheduleUpdateThreshold();

            if (data.hasOwnProperty('sourceThresholdId')) {
                obj['sourceThresholdId'] = ApiClient.convertToType(data['sourceThresholdId'], 'Number');
            }
            if (data.hasOwnProperty('autoUp')) {
                obj['autoUp'] = ApiClient.convertToType(data['autoUp'], 'Boolean');
            }
            if (data.hasOwnProperty('autoDown')) {
                obj['autoDown'] = ApiClient.convertToType(data['autoDown'], 'Boolean');
            }
            if (data.hasOwnProperty('minCount')) {
                obj['minCount'] = ApiClient.convertToType(data['minCount'], 'Number');
            }
            if (data.hasOwnProperty('maxCount')) {
                obj['maxCount'] = ApiClient.convertToType(data['maxCount'], 'Number');
            }
            if (data.hasOwnProperty('cpuEnabled')) {
                obj['cpuEnabled'] = ApiClient.convertToType(data['cpuEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('minCpu')) {
                obj['minCpu'] = ApiClient.convertToType(data['minCpu'], 'Number');
            }
            if (data.hasOwnProperty('maxCpu')) {
                obj['maxCpu'] = ApiClient.convertToType(data['maxCpu'], 'Number');
            }
            if (data.hasOwnProperty('memoryEnabled')) {
                obj['memoryEnabled'] = ApiClient.convertToType(data['memoryEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('minMemory')) {
                obj['minMemory'] = ApiClient.convertToType(data['minMemory'], 'Number');
            }
            if (data.hasOwnProperty('maxMemory')) {
                obj['maxMemory'] = ApiClient.convertToType(data['maxMemory'], 'Number');
            }
            if (data.hasOwnProperty('diskEnabled')) {
                obj['diskEnabled'] = ApiClient.convertToType(data['diskEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('minDisk')) {
                obj['minDisk'] = ApiClient.convertToType(data['minDisk'], 'Number');
            }
            if (data.hasOwnProperty('maxDisk')) {
                obj['maxDisk'] = ApiClient.convertToType(data['maxDisk'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * Source Scale Threshold to apply as a template. All threshold settings with be copied from this threshold, and can be overridden by also passing each setting explicitly.
 * @member {Number} sourceThresholdId
 */
InstanceScheduleUpdateThreshold.prototype['sourceThresholdId'] = undefined;

/**
 * Auto Upscale
 * @member {Boolean} autoUp
 */
InstanceScheduleUpdateThreshold.prototype['autoUp'] = undefined;

/**
 * Auto Downscale
 * @member {Boolean} autoDown
 */
InstanceScheduleUpdateThreshold.prototype['autoDown'] = undefined;

/**
 * The minimum number of nodes to scale down to
 * @member {Number} minCount
 */
InstanceScheduleUpdateThreshold.prototype['minCount'] = undefined;

/**
 * The maximum number of nodes to scale up to
 * @member {Number} maxCount
 */
InstanceScheduleUpdateThreshold.prototype['maxCount'] = undefined;

/**
 * Enable CPU Threshold
 * @member {Boolean} cpuEnabled
 */
InstanceScheduleUpdateThreshold.prototype['cpuEnabled'] = undefined;

/**
 * Min CPU (%)
 * @member {Number} minCpu
 */
InstanceScheduleUpdateThreshold.prototype['minCpu'] = undefined;

/**
 * Max CPU (%)
 * @member {Number} maxCpu
 */
InstanceScheduleUpdateThreshold.prototype['maxCpu'] = undefined;

/**
 * Enable Memory Threshold
 * @member {Boolean} memoryEnabled
 */
InstanceScheduleUpdateThreshold.prototype['memoryEnabled'] = undefined;

/**
 * Min Memory (%)
 * @member {Number} minMemory
 */
InstanceScheduleUpdateThreshold.prototype['minMemory'] = undefined;

/**
 * Max Memory (%)
 * @member {Number} maxMemory
 */
InstanceScheduleUpdateThreshold.prototype['maxMemory'] = undefined;

/**
 * Enable Disk Threshold
 * @member {Boolean} diskEnabled
 */
InstanceScheduleUpdateThreshold.prototype['diskEnabled'] = undefined;

/**
 * Min Disk (%)
 * @member {Number} minDisk
 */
InstanceScheduleUpdateThreshold.prototype['minDisk'] = undefined;

/**
 * Max Disk (%)
 * @member {Number} maxDisk
 */
InstanceScheduleUpdateThreshold.prototype['maxDisk'] = undefined;






export default InstanceScheduleUpdateThreshold;

