/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CheckWebConfig model module.
 * @module model/CheckWebConfig
 * @version 6.2.1
 */
class CheckWebConfig {
    /**
     * Constructs a new <code>CheckWebConfig</code>.
     * @alias module:model/CheckWebConfig
     * @param webMethod {module:model/CheckWebConfig.WebMethodEnum} HTTP method to use for testing
     * @param webUrl {String} Web URL you wish to use to run a check on
     */
    constructor(webMethod, webUrl) { 
        
        CheckWebConfig.initialize(this, webMethod, webUrl);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, webMethod, webUrl) { 
        obj['webMethod'] = webMethod;
        obj['webUrl'] = webUrl;
    }

    /**
     * Constructs a <code>CheckWebConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CheckWebConfig} obj Optional instance to populate.
     * @return {module:model/CheckWebConfig} The populated <code>CheckWebConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CheckWebConfig();

            if (data.hasOwnProperty('webMethod')) {
                obj['webMethod'] = ApiClient.convertToType(data['webMethod'], 'String');
            }
            if (data.hasOwnProperty('webUrl')) {
                obj['webUrl'] = ApiClient.convertToType(data['webUrl'], 'String');
            }
            if (data.hasOwnProperty('ignoreSSL')) {
                obj['ignoreSSL'] = ApiClient.convertToType(data['ignoreSSL'], 'Boolean');
            }
            if (data.hasOwnProperty('checkUser')) {
                obj['checkUser'] = ApiClient.convertToType(data['checkUser'], 'String');
            }
            if (data.hasOwnProperty('checkPassword')) {
                obj['checkPassword'] = ApiClient.convertToType(data['checkPassword'], 'String');
            }
            if (data.hasOwnProperty('textCheckOn')) {
                obj['textCheckOn'] = ApiClient.convertToType(data['textCheckOn'], 'String');
            }
            if (data.hasOwnProperty('webTextMatch')) {
                obj['webTextMatch'] = ApiClient.convertToType(data['webTextMatch'], 'String');
            }
            if (data.hasOwnProperty('tunnelOn')) {
                obj['tunnelOn'] = ApiClient.convertToType(data['tunnelOn'], 'String');
            }
            if (data.hasOwnProperty('sshHost')) {
                obj['sshHost'] = ApiClient.convertToType(data['sshHost'], 'String');
            }
            if (data.hasOwnProperty('sshPort')) {
                obj['sshPort'] = ApiClient.convertToType(data['sshPort'], 'Number');
            }
            if (data.hasOwnProperty('sshUser')) {
                obj['sshUser'] = ApiClient.convertToType(data['sshUser'], 'String');
            }
            if (data.hasOwnProperty('sshPassword')) {
                obj['sshPassword'] = ApiClient.convertToType(data['sshPassword'], 'String');
            }
        }
        return obj;
    }


}

/**
 * HTTP method to use for testing
 * @member {module:model/CheckWebConfig.WebMethodEnum} webMethod
 */
CheckWebConfig.prototype['webMethod'] = undefined;

/**
 * Web URL you wish to use to run a check on
 * @member {String} webUrl
 */
CheckWebConfig.prototype['webUrl'] = undefined;

/**
 * Ignore SSL Errors
 * @member {Boolean} ignoreSSL
 * @default false
 */
CheckWebConfig.prototype['ignoreSSL'] = false;

/**
 * If you want to use HTTP Basic Authentication, populate this field with the username
 * @member {String} checkUser
 */
CheckWebConfig.prototype['checkUser'] = undefined;

/**
 * If you want to use HTTP basic Authentication, populate this field with the password
 * @member {String} checkPassword
 */
CheckWebConfig.prototype['checkPassword'] = undefined;

/**
 * Set value to `on` if you want to turn on text matching
 * @member {String} textCheckOn
 */
CheckWebConfig.prototype['textCheckOn'] = undefined;

/**
 * Set the string you want to look for in the page source
 * @member {String} webTextMatch
 */
CheckWebConfig.prototype['webTextMatch'] = undefined;

/**
 * Set to on to turn on tunneling
 * @member {module:model/CheckWebConfig.TunnelOnEnum} tunnelOn
 */
CheckWebConfig.prototype['tunnelOn'] = undefined;

/**
 * Hostname or IP address of the proxy host
 * @member {String} sshHost
 */
CheckWebConfig.prototype['sshHost'] = undefined;

/**
 * Port for SSH on the proxy host, defaults to 22
 * @member {Number} sshPort
 */
CheckWebConfig.prototype['sshPort'] = undefined;

/**
 * SSH user on the proxy host to login as
 * @member {String} sshUser
 */
CheckWebConfig.prototype['sshUser'] = undefined;

/**
 * Password for user, if not using key based authentication
 * @member {String} sshPassword
 */
CheckWebConfig.prototype['sshPassword'] = undefined;





/**
 * Allowed values for the <code>webMethod</code> property.
 * @enum {String}
 * @readonly
 */
CheckWebConfig['WebMethodEnum'] = {

    /**
     * value: "GET"
     * @const
     */
    "GET": "GET",

    /**
     * value: "POST"
     * @const
     */
    "POST": "POST"
};


/**
 * Allowed values for the <code>tunnelOn</code> property.
 * @enum {String}
 * @readonly
 */
CheckWebConfig['TunnelOnEnum'] = {

    /**
     * value: "on"
     * @const
     */
    "on": "on",

    /**
     * value: "off"
     * @const
     */
    "off": "off"
};



export default CheckWebConfig;

