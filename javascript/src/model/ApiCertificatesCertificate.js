/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ApiCertificatesCertificate model module.
 * @module model/ApiCertificatesCertificate
 * @version 6.2.1
 */
class ApiCertificatesCertificate {
    /**
     * Constructs a new <code>ApiCertificatesCertificate</code>.
     * @alias module:model/ApiCertificatesCertificate
     */
    constructor() { 
        
        ApiCertificatesCertificate.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ApiCertificatesCertificate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ApiCertificatesCertificate} obj Optional instance to populate.
     * @return {module:model/ApiCertificatesCertificate} The populated <code>ApiCertificatesCertificate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ApiCertificatesCertificate();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('certFile')) {
                obj['certFile'] = ApiClient.convertToType(data['certFile'], 'String');
            }
            if (data.hasOwnProperty('keyFile')) {
                obj['keyFile'] = ApiClient.convertToType(data['keyFile'], 'String');
            }
            if (data.hasOwnProperty('domainName')) {
                obj['domainName'] = ApiClient.convertToType(data['domainName'], 'String');
            }
            if (data.hasOwnProperty('wildcard')) {
                obj['wildcard'] = ApiClient.convertToType(data['wildcard'], 'Boolean');
            }
        }
        return obj;
    }


}

/**
 * A unique name scoped to your account for the key
 * @member {String} name
 */
ApiCertificatesCertificate.prototype['name'] = undefined;

/**
 * The contents of the certificate file
 * @member {String} certFile
 */
ApiCertificatesCertificate.prototype['certFile'] = undefined;

/**
 * The contents of the key file
 * @member {String} keyFile
 */
ApiCertificatesCertificate.prototype['keyFile'] = undefined;

/**
 * The domain name this certificate is tied to
 * @member {String} domainName
 */
ApiCertificatesCertificate.prototype['domainName'] = undefined;

/**
 * Wether or not this certificate is a wildcard cert
 * @member {Boolean} wildcard
 * @default false
 */
ApiCertificatesCertificate.prototype['wildcard'] = false;






export default ApiCertificatesCertificate;

