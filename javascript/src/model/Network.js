/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import InlineResponse200108NetworkFloatingIpNetworkDomain from './InlineResponse200108NetworkFloatingIpNetworkDomain';
import InlineResponse20040AppDeployInstance from './InlineResponse20040AppDeployInstance';
import InlineResponse20082LoadBalancerInstanceSslCert from './InlineResponse20082LoadBalancerInstanceSslCert';
import NetworkConfig from './NetworkConfig';
import NetworkNetworkProxy from './NetworkNetworkProxy';
import NetworkOwner from './NetworkOwner';
import NetworkType from './NetworkType';
import NetworkZone from './NetworkZone';

/**
 * The Network model module.
 * @module model/Network
 * @version 6.2.1
 */
class Network {
    /**
     * Constructs a new <code>Network</code>.
     * @alias module:model/Network
     */
    constructor() { 
        
        Network.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Network</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Network} obj Optional instance to populate.
     * @return {module:model/Network} The populated <code>Network</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Network();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], ['String']);
            }
            if (data.hasOwnProperty('zone')) {
                obj['zone'] = NetworkZone.constructFromObject(data['zone']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = NetworkType.constructFromObject(data['type']);
            }
            if (data.hasOwnProperty('owner')) {
                obj['owner'] = NetworkOwner.constructFromObject(data['owner']);
            }
            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('ipv4Enabled')) {
                obj['ipv4Enabled'] = ApiClient.convertToType(data['ipv4Enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('ipv6Enabled')) {
                obj['ipv6Enabled'] = ApiClient.convertToType(data['ipv6Enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], 'String');
            }
            if (data.hasOwnProperty('interfaceName')) {
                obj['interfaceName'] = ApiClient.convertToType(data['interfaceName'], 'String');
            }
            if (data.hasOwnProperty('bridgeName')) {
                obj['bridgeName'] = ApiClient.convertToType(data['bridgeName'], 'String');
            }
            if (data.hasOwnProperty('bridgeInterface')) {
                obj['bridgeInterface'] = ApiClient.convertToType(data['bridgeInterface'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('externalId')) {
                obj['externalId'] = ApiClient.convertToType(data['externalId'], 'String');
            }
            if (data.hasOwnProperty('internalId')) {
                obj['internalId'] = ApiClient.convertToType(data['internalId'], 'String');
            }
            if (data.hasOwnProperty('uniqueId')) {
                obj['uniqueId'] = ApiClient.convertToType(data['uniqueId'], 'String');
            }
            if (data.hasOwnProperty('externalType')) {
                obj['externalType'] = ApiClient.convertToType(data['externalType'], 'String');
            }
            if (data.hasOwnProperty('refUrl')) {
                obj['refUrl'] = ApiClient.convertToType(data['refUrl'], 'String');
            }
            if (data.hasOwnProperty('refType')) {
                obj['refType'] = ApiClient.convertToType(data['refType'], 'String');
            }
            if (data.hasOwnProperty('refId')) {
                obj['refId'] = ApiClient.convertToType(data['refId'], 'Number');
            }
            if (data.hasOwnProperty('vlanId')) {
                obj['vlanId'] = ApiClient.convertToType(data['vlanId'], 'Number');
            }
            if (data.hasOwnProperty('vswitchName')) {
                obj['vswitchName'] = ApiClient.convertToType(data['vswitchName'], 'String');
            }
            if (data.hasOwnProperty('dhcpServer')) {
                obj['dhcpServer'] = ApiClient.convertToType(data['dhcpServer'], 'Boolean');
            }
            if (data.hasOwnProperty('dhcpIp')) {
                obj['dhcpIp'] = ApiClient.convertToType(data['dhcpIp'], 'String');
            }
            if (data.hasOwnProperty('dhcpServerIPv6')) {
                obj['dhcpServerIPv6'] = ApiClient.convertToType(data['dhcpServerIPv6'], 'Boolean');
            }
            if (data.hasOwnProperty('gateway')) {
                obj['gateway'] = ApiClient.convertToType(data['gateway'], 'String');
            }
            if (data.hasOwnProperty('netmask')) {
                obj['netmask'] = ApiClient.convertToType(data['netmask'], 'String');
            }
            if (data.hasOwnProperty('broadcast')) {
                obj['broadcast'] = ApiClient.convertToType(data['broadcast'], 'String');
            }
            if (data.hasOwnProperty('subnetAddress')) {
                obj['subnetAddress'] = ApiClient.convertToType(data['subnetAddress'], 'String');
            }
            if (data.hasOwnProperty('dnsPrimary')) {
                obj['dnsPrimary'] = ApiClient.convertToType(data['dnsPrimary'], 'String');
            }
            if (data.hasOwnProperty('dnsSecondary')) {
                obj['dnsSecondary'] = ApiClient.convertToType(data['dnsSecondary'], 'String');
            }
            if (data.hasOwnProperty('cidr')) {
                obj['cidr'] = ApiClient.convertToType(data['cidr'], 'String');
            }
            if (data.hasOwnProperty('gatewayIPv6')) {
                obj['gatewayIPv6'] = ApiClient.convertToType(data['gatewayIPv6'], 'String');
            }
            if (data.hasOwnProperty('netmaskIPv6')) {
                obj['netmaskIPv6'] = ApiClient.convertToType(data['netmaskIPv6'], 'String');
            }
            if (data.hasOwnProperty('dnsPrimaryIPv6')) {
                obj['dnsPrimaryIPv6'] = ApiClient.convertToType(data['dnsPrimaryIPv6'], 'String');
            }
            if (data.hasOwnProperty('dnsSecondaryIPv6')) {
                obj['dnsSecondaryIPv6'] = ApiClient.convertToType(data['dnsSecondaryIPv6'], 'String');
            }
            if (data.hasOwnProperty('cidrIPv6')) {
                obj['cidrIPv6'] = ApiClient.convertToType(data['cidrIPv6'], 'String');
            }
            if (data.hasOwnProperty('tftpServer')) {
                obj['tftpServer'] = ApiClient.convertToType(data['tftpServer'], 'String');
            }
            if (data.hasOwnProperty('bootFile')) {
                obj['bootFile'] = ApiClient.convertToType(data['bootFile'], 'String');
            }
            if (data.hasOwnProperty('switchId')) {
                obj['switchId'] = ApiClient.convertToType(data['switchId'], 'String');
            }
            if (data.hasOwnProperty('fabricId')) {
                obj['fabricId'] = ApiClient.convertToType(data['fabricId'], 'String');
            }
            if (data.hasOwnProperty('networkRole')) {
                obj['networkRole'] = ApiClient.convertToType(data['networkRole'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('availabilityZone')) {
                obj['availabilityZone'] = ApiClient.convertToType(data['availabilityZone'], 'String');
            }
            if (data.hasOwnProperty('pool')) {
                obj['pool'] = ApiClient.convertToType(data['pool'], Object);
            }
            if (data.hasOwnProperty('poolIPv6')) {
                obj['poolIPv6'] = ApiClient.convertToType(data['poolIPv6'], Object);
            }
            if (data.hasOwnProperty('networkProxy')) {
                obj['networkProxy'] = NetworkNetworkProxy.constructFromObject(data['networkProxy']);
            }
            if (data.hasOwnProperty('networkDomain')) {
                obj['networkDomain'] = InlineResponse200108NetworkFloatingIpNetworkDomain.constructFromObject(data['networkDomain']);
            }
            if (data.hasOwnProperty('searchDomains')) {
                obj['searchDomains'] = ApiClient.convertToType(data['searchDomains'], 'String');
            }
            if (data.hasOwnProperty('prefixLength')) {
                obj['prefixLength'] = ApiClient.convertToType(data['prefixLength'], 'String');
            }
            if (data.hasOwnProperty('visibility')) {
                obj['visibility'] = ApiClient.convertToType(data['visibility'], 'String');
            }
            if (data.hasOwnProperty('enableAdmin')) {
                obj['enableAdmin'] = ApiClient.convertToType(data['enableAdmin'], 'Boolean');
            }
            if (data.hasOwnProperty('active')) {
                obj['active'] = ApiClient.convertToType(data['active'], 'Boolean');
            }
            if (data.hasOwnProperty('defaultNetwork')) {
                obj['defaultNetwork'] = ApiClient.convertToType(data['defaultNetwork'], 'Boolean');
            }
            if (data.hasOwnProperty('assignPublicIp')) {
                obj['assignPublicIp'] = ApiClient.convertToType(data['assignPublicIp'], 'Boolean');
            }
            if (data.hasOwnProperty('noProxy')) {
                obj['noProxy'] = ApiClient.convertToType(data['noProxy'], 'String');
            }
            if (data.hasOwnProperty('applianceUrlProxyBypass')) {
                obj['applianceUrlProxyBypass'] = ApiClient.convertToType(data['applianceUrlProxyBypass'], 'Boolean');
            }
            if (data.hasOwnProperty('zonePool')) {
                obj['zonePool'] = InlineResponse20082LoadBalancerInstanceSslCert.constructFromObject(data['zonePool']);
            }
            if (data.hasOwnProperty('allowStaticOverride')) {
                obj['allowStaticOverride'] = ApiClient.convertToType(data['allowStaticOverride'], 'Boolean');
            }
            if (data.hasOwnProperty('config')) {
                obj['config'] = NetworkConfig.constructFromObject(data['config']);
            }
            if (data.hasOwnProperty('tenants')) {
                obj['tenants'] = ApiClient.convertToType(data['tenants'], [InlineResponse20040AppDeployInstance]);
            }
        }
        return obj;
    }


}

/**
 * Network ID
 * @member {Number} id
 */
Network.prototype['id'] = undefined;

/**
 * Name
 * @member {String} name
 */
Network.prototype['name'] = undefined;

/**
 * Network Display Name
 * @member {String} displayName
 */
Network.prototype['displayName'] = undefined;

/**
 * @member {Array.<String>} labels
 */
Network.prototype['labels'] = undefined;

/**
 * @member {module:model/NetworkZone} zone
 */
Network.prototype['zone'] = undefined;

/**
 * @member {module:model/NetworkType} type
 */
Network.prototype['type'] = undefined;

/**
 * @member {module:model/NetworkOwner} owner
 */
Network.prototype['owner'] = undefined;

/**
 * Network Code
 * @member {String} code
 */
Network.prototype['code'] = undefined;

/**
 * @member {Boolean} ipv4Enabled
 */
Network.prototype['ipv4Enabled'] = undefined;

/**
 * @member {Boolean} ipv6Enabled
 */
Network.prototype['ipv6Enabled'] = undefined;

/**
 * Network Category
 * @member {String} category
 */
Network.prototype['category'] = undefined;

/**
 * @member {String} interfaceName
 */
Network.prototype['interfaceName'] = undefined;

/**
 * @member {String} bridgeName
 */
Network.prototype['bridgeName'] = undefined;

/**
 * @member {String} bridgeInterface
 */
Network.prototype['bridgeInterface'] = undefined;

/**
 * Description
 * @member {String} description
 */
Network.prototype['description'] = undefined;

/**
 * @member {String} externalId
 */
Network.prototype['externalId'] = undefined;

/**
 * @member {String} internalId
 */
Network.prototype['internalId'] = undefined;

/**
 * @member {String} uniqueId
 */
Network.prototype['uniqueId'] = undefined;

/**
 * @member {String} externalType
 */
Network.prototype['externalType'] = undefined;

/**
 * @member {String} refUrl
 */
Network.prototype['refUrl'] = undefined;

/**
 * @member {String} refType
 */
Network.prototype['refType'] = undefined;

/**
 * @member {Number} refId
 */
Network.prototype['refId'] = undefined;

/**
 * @member {Number} vlanId
 */
Network.prototype['vlanId'] = undefined;

/**
 * @member {String} vswitchName
 */
Network.prototype['vswitchName'] = undefined;

/**
 * @member {Boolean} dhcpServer
 */
Network.prototype['dhcpServer'] = undefined;

/**
 * @member {String} dhcpIp
 */
Network.prototype['dhcpIp'] = undefined;

/**
 * @member {Boolean} dhcpServerIPv6
 */
Network.prototype['dhcpServerIPv6'] = undefined;

/**
 * Network Gateway
 * @member {String} gateway
 */
Network.prototype['gateway'] = undefined;

/**
 * @member {String} netmask
 */
Network.prototype['netmask'] = undefined;

/**
 * @member {String} broadcast
 */
Network.prototype['broadcast'] = undefined;

/**
 * @member {String} subnetAddress
 */
Network.prototype['subnetAddress'] = undefined;

/**
 * Primary DNS Server
 * @member {String} dnsPrimary
 */
Network.prototype['dnsPrimary'] = undefined;

/**
 * Secondary DNS Server
 * @member {String} dnsSecondary
 */
Network.prototype['dnsSecondary'] = undefined;

/**
 * Network CIDR
 * @member {String} cidr
 */
Network.prototype['cidr'] = undefined;

/**
 * IPv6 Network Gateway
 * @member {String} gatewayIPv6
 */
Network.prototype['gatewayIPv6'] = undefined;

/**
 * @member {String} netmaskIPv6
 */
Network.prototype['netmaskIPv6'] = undefined;

/**
 * Primary IPv6 DNS Server
 * @member {String} dnsPrimaryIPv6
 */
Network.prototype['dnsPrimaryIPv6'] = undefined;

/**
 * Secondary IPv6 DNS Server
 * @member {String} dnsSecondaryIPv6
 */
Network.prototype['dnsSecondaryIPv6'] = undefined;

/**
 * IPv6 Network CIDR
 * @member {String} cidrIPv6
 */
Network.prototype['cidrIPv6'] = undefined;

/**
 * @member {String} tftpServer
 */
Network.prototype['tftpServer'] = undefined;

/**
 * @member {String} bootFile
 */
Network.prototype['bootFile'] = undefined;

/**
 * @member {String} switchId
 */
Network.prototype['switchId'] = undefined;

/**
 * @member {String} fabricId
 */
Network.prototype['fabricId'] = undefined;

/**
 * @member {String} networkRole
 */
Network.prototype['networkRole'] = undefined;

/**
 * @member {String} status
 */
Network.prototype['status'] = undefined;

/**
 * @member {String} availabilityZone
 */
Network.prototype['availabilityZone'] = undefined;

/**
 * @member {Object} pool
 */
Network.prototype['pool'] = undefined;

/**
 * @member {Object} poolIPv6
 */
Network.prototype['poolIPv6'] = undefined;

/**
 * @member {module:model/NetworkNetworkProxy} networkProxy
 */
Network.prototype['networkProxy'] = undefined;

/**
 * @member {module:model/InlineResponse200108NetworkFloatingIpNetworkDomain} networkDomain
 */
Network.prototype['networkDomain'] = undefined;

/**
 * @member {String} searchDomains
 */
Network.prototype['searchDomains'] = undefined;

/**
 * @member {String} prefixLength
 */
Network.prototype['prefixLength'] = undefined;

/**
 * @member {String} visibility
 */
Network.prototype['visibility'] = undefined;

/**
 * @member {Boolean} enableAdmin
 */
Network.prototype['enableAdmin'] = undefined;

/**
 * @member {Boolean} active
 */
Network.prototype['active'] = undefined;

/**
 * @member {Boolean} defaultNetwork
 */
Network.prototype['defaultNetwork'] = undefined;

/**
 * @member {Boolean} assignPublicIp
 */
Network.prototype['assignPublicIp'] = undefined;

/**
 * @member {String} noProxy
 */
Network.prototype['noProxy'] = undefined;

/**
 * @member {Boolean} applianceUrlProxyBypass
 */
Network.prototype['applianceUrlProxyBypass'] = undefined;

/**
 * @member {module:model/InlineResponse20082LoadBalancerInstanceSslCert} zonePool
 */
Network.prototype['zonePool'] = undefined;

/**
 * @member {Boolean} allowStaticOverride
 */
Network.prototype['allowStaticOverride'] = undefined;

/**
 * @member {module:model/NetworkConfig} config
 */
Network.prototype['config'] = undefined;

/**
 * @member {Array.<module:model/InlineResponse20040AppDeployInstance>} tenants
 */
Network.prototype['tenants'] = undefined;






export default Network;

