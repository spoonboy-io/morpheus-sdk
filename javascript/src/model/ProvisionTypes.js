/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ControllerType from './ControllerType';
import NetworkType from './NetworkType';
import OptionType from './OptionType';
import StorageType from './StorageType';

/**
 * The ProvisionTypes model module.
 * @module model/ProvisionTypes
 * @version 6.2.1
 */
class ProvisionTypes {
    /**
     * Constructs a new <code>ProvisionTypes</code>.
     * @alias module:model/ProvisionTypes
     */
    constructor() { 
        
        ProvisionTypes.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ProvisionTypes</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProvisionTypes} obj Optional instance to populate.
     * @return {module:model/ProvisionTypes} The populated <code>ProvisionTypes</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProvisionTypes();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('aclEnabled')) {
                obj['aclEnabled'] = ApiClient.convertToType(data['aclEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('multiTenant')) {
                obj['multiTenant'] = ApiClient.convertToType(data['multiTenant'], 'Boolean');
            }
            if (data.hasOwnProperty('managed')) {
                obj['managed'] = ApiClient.convertToType(data['managed'], 'Boolean');
            }
            if (data.hasOwnProperty('hostNetwork')) {
                obj['hostNetwork'] = ApiClient.convertToType(data['hostNetwork'], 'Boolean');
            }
            if (data.hasOwnProperty('customSupported')) {
                obj['customSupported'] = ApiClient.convertToType(data['customSupported'], 'Boolean');
            }
            if (data.hasOwnProperty('mapPorts')) {
                obj['mapPorts'] = ApiClient.convertToType(data['mapPorts'], 'Boolean');
            }
            if (data.hasOwnProperty('exportServer')) {
                obj['exportServer'] = ApiClient.convertToType(data['exportServer'], 'Boolean');
            }
            if (data.hasOwnProperty('viewSet')) {
                obj['viewSet'] = ApiClient.convertToType(data['viewSet'], 'String');
            }
            if (data.hasOwnProperty('serverType')) {
                obj['serverType'] = ApiClient.convertToType(data['serverType'], 'String');
            }
            if (data.hasOwnProperty('hostType')) {
                obj['hostType'] = ApiClient.convertToType(data['hostType'], 'String');
            }
            if (data.hasOwnProperty('addVolumes')) {
                obj['addVolumes'] = ApiClient.convertToType(data['addVolumes'], 'Boolean');
            }
            if (data.hasOwnProperty('hasVolumes')) {
                obj['hasVolumes'] = ApiClient.convertToType(data['hasVolumes'], 'Boolean');
            }
            if (data.hasOwnProperty('hasDatastore')) {
                obj['hasDatastore'] = ApiClient.convertToType(data['hasDatastore'], 'Boolean');
            }
            if (data.hasOwnProperty('hasNetworks')) {
                obj['hasNetworks'] = ApiClient.convertToType(data['hasNetworks'], 'Boolean');
            }
            if (data.hasOwnProperty('maxNetworks')) {
                obj['maxNetworks'] = ApiClient.convertToType(data['maxNetworks'], 'Number');
            }
            if (data.hasOwnProperty('customizeVolume')) {
                obj['customizeVolume'] = ApiClient.convertToType(data['customizeVolume'], 'Boolean');
            }
            if (data.hasOwnProperty('rootDiskCustomizable')) {
                obj['rootDiskCustomizable'] = ApiClient.convertToType(data['rootDiskCustomizable'], 'Boolean');
            }
            if (data.hasOwnProperty('rootDiskSizeKnown')) {
                obj['rootDiskSizeKnown'] = ApiClient.convertToType(data['rootDiskSizeKnown'], 'Boolean');
            }
            if (data.hasOwnProperty('rootDiskResizable')) {
                obj['rootDiskResizable'] = ApiClient.convertToType(data['rootDiskResizable'], 'Boolean');
            }
            if (data.hasOwnProperty('lvmSupported')) {
                obj['lvmSupported'] = ApiClient.convertToType(data['lvmSupported'], 'Boolean');
            }
            if (data.hasOwnProperty('hostDiskMode')) {
                obj['hostDiskMode'] = ApiClient.convertToType(data['hostDiskMode'], 'String');
            }
            if (data.hasOwnProperty('minDisk')) {
                obj['minDisk'] = ApiClient.convertToType(data['minDisk'], 'Number');
            }
            if (data.hasOwnProperty('maxDisk')) {
                obj['maxDisk'] = ApiClient.convertToType(data['maxDisk'], 'String');
            }
            if (data.hasOwnProperty('resizeCopiesVolumes')) {
                obj['resizeCopiesVolumes'] = ApiClient.convertToType(data['resizeCopiesVolumes'], 'Boolean');
            }
            if (data.hasOwnProperty('supportsAutoDatastore')) {
                obj['supportsAutoDatastore'] = ApiClient.convertToType(data['supportsAutoDatastore'], 'Boolean');
            }
            if (data.hasOwnProperty('hasZonePools')) {
                obj['hasZonePools'] = ApiClient.convertToType(data['hasZonePools'], 'Boolean');
            }
            if (data.hasOwnProperty('hasSecurityGroups')) {
                obj['hasSecurityGroups'] = ApiClient.convertToType(data['hasSecurityGroups'], 'Boolean');
            }
            if (data.hasOwnProperty('hasParameters')) {
                obj['hasParameters'] = ApiClient.convertToType(data['hasParameters'], 'Boolean');
            }
            if (data.hasOwnProperty('canEnforceTags')) {
                obj['canEnforceTags'] = ApiClient.convertToType(data['canEnforceTags'], 'Boolean');
            }
            if (data.hasOwnProperty('disableRootDatastore')) {
                obj['disableRootDatastore'] = ApiClient.convertToType(data['disableRootDatastore'], 'Boolean');
            }
            if (data.hasOwnProperty('hasSnapshots')) {
                obj['hasSnapshots'] = ApiClient.convertToType(data['hasSnapshots'], 'Boolean');
            }
            if (data.hasOwnProperty('hasSpecTemplates')) {
                obj['hasSpecTemplates'] = ApiClient.convertToType(data['hasSpecTemplates'], 'Boolean');
            }
            if (data.hasOwnProperty('hasPreview')) {
                obj['hasPreview'] = ApiClient.convertToType(data['hasPreview'], 'Boolean');
            }
            if (data.hasOwnProperty('zonePoolRequired')) {
                obj['zonePoolRequired'] = ApiClient.convertToType(data['zonePoolRequired'], 'Boolean');
            }
            if (data.hasOwnProperty('planRequiresPool')) {
                obj['planRequiresPool'] = ApiClient.convertToType(data['planRequiresPool'], 'Boolean');
            }
            if (data.hasOwnProperty('hasFolders')) {
                obj['hasFolders'] = ApiClient.convertToType(data['hasFolders'], 'Boolean');
            }
            if (data.hasOwnProperty('optionTypes')) {
                obj['optionTypes'] = ApiClient.convertToType(data['optionTypes'], [OptionType]);
            }
            if (data.hasOwnProperty('customOptionTypes')) {
                obj['customOptionTypes'] = ApiClient.convertToType(data['customOptionTypes'], [OptionType]);
            }
            if (data.hasOwnProperty('networkTypes')) {
                obj['networkTypes'] = ApiClient.convertToType(data['networkTypes'], [NetworkType]);
            }
            if (data.hasOwnProperty('storageTypes')) {
                obj['storageTypes'] = ApiClient.convertToType(data['storageTypes'], [StorageType]);
            }
            if (data.hasOwnProperty('rootStorageTypes')) {
                obj['rootStorageTypes'] = ApiClient.convertToType(data['rootStorageTypes'], [StorageType]);
            }
            if (data.hasOwnProperty('controllerTypes')) {
                obj['controllerTypes'] = ApiClient.convertToType(data['controllerTypes'], [ControllerType]);
            }
        }
        return obj;
    }


}

/**
 * @member {Number} id
 */
ProvisionTypes.prototype['id'] = undefined;

/**
 * @member {String} name
 */
ProvisionTypes.prototype['name'] = undefined;

/**
 * @member {String} description
 */
ProvisionTypes.prototype['description'] = undefined;

/**
 * @member {String} code
 */
ProvisionTypes.prototype['code'] = undefined;

/**
 * @member {Boolean} aclEnabled
 */
ProvisionTypes.prototype['aclEnabled'] = undefined;

/**
 * @member {Boolean} multiTenant
 */
ProvisionTypes.prototype['multiTenant'] = undefined;

/**
 * @member {Boolean} managed
 */
ProvisionTypes.prototype['managed'] = undefined;

/**
 * @member {Boolean} hostNetwork
 */
ProvisionTypes.prototype['hostNetwork'] = undefined;

/**
 * @member {Boolean} customSupported
 */
ProvisionTypes.prototype['customSupported'] = undefined;

/**
 * @member {Boolean} mapPorts
 */
ProvisionTypes.prototype['mapPorts'] = undefined;

/**
 * @member {Boolean} exportServer
 */
ProvisionTypes.prototype['exportServer'] = undefined;

/**
 * @member {String} viewSet
 */
ProvisionTypes.prototype['viewSet'] = undefined;

/**
 * @member {String} serverType
 */
ProvisionTypes.prototype['serverType'] = undefined;

/**
 * @member {String} hostType
 */
ProvisionTypes.prototype['hostType'] = undefined;

/**
 * @member {Boolean} addVolumes
 */
ProvisionTypes.prototype['addVolumes'] = undefined;

/**
 * @member {Boolean} hasVolumes
 */
ProvisionTypes.prototype['hasVolumes'] = undefined;

/**
 * @member {Boolean} hasDatastore
 */
ProvisionTypes.prototype['hasDatastore'] = undefined;

/**
 * @member {Boolean} hasNetworks
 */
ProvisionTypes.prototype['hasNetworks'] = undefined;

/**
 * @member {Number} maxNetworks
 */
ProvisionTypes.prototype['maxNetworks'] = undefined;

/**
 * @member {Boolean} customizeVolume
 */
ProvisionTypes.prototype['customizeVolume'] = undefined;

/**
 * @member {Boolean} rootDiskCustomizable
 */
ProvisionTypes.prototype['rootDiskCustomizable'] = undefined;

/**
 * @member {Boolean} rootDiskSizeKnown
 */
ProvisionTypes.prototype['rootDiskSizeKnown'] = undefined;

/**
 * @member {Boolean} rootDiskResizable
 */
ProvisionTypes.prototype['rootDiskResizable'] = undefined;

/**
 * @member {Boolean} lvmSupported
 */
ProvisionTypes.prototype['lvmSupported'] = undefined;

/**
 * @member {String} hostDiskMode
 */
ProvisionTypes.prototype['hostDiskMode'] = undefined;

/**
 * @member {Number} minDisk
 */
ProvisionTypes.prototype['minDisk'] = undefined;

/**
 * @member {String} maxDisk
 */
ProvisionTypes.prototype['maxDisk'] = undefined;

/**
 * @member {Boolean} resizeCopiesVolumes
 */
ProvisionTypes.prototype['resizeCopiesVolumes'] = undefined;

/**
 * @member {Boolean} supportsAutoDatastore
 */
ProvisionTypes.prototype['supportsAutoDatastore'] = undefined;

/**
 * @member {Boolean} hasZonePools
 */
ProvisionTypes.prototype['hasZonePools'] = undefined;

/**
 * @member {Boolean} hasSecurityGroups
 */
ProvisionTypes.prototype['hasSecurityGroups'] = undefined;

/**
 * @member {Boolean} hasParameters
 */
ProvisionTypes.prototype['hasParameters'] = undefined;

/**
 * @member {Boolean} canEnforceTags
 */
ProvisionTypes.prototype['canEnforceTags'] = undefined;

/**
 * @member {Boolean} disableRootDatastore
 */
ProvisionTypes.prototype['disableRootDatastore'] = undefined;

/**
 * @member {Boolean} hasSnapshots
 */
ProvisionTypes.prototype['hasSnapshots'] = undefined;

/**
 * @member {Boolean} hasSpecTemplates
 */
ProvisionTypes.prototype['hasSpecTemplates'] = undefined;

/**
 * @member {Boolean} hasPreview
 */
ProvisionTypes.prototype['hasPreview'] = undefined;

/**
 * @member {Boolean} zonePoolRequired
 */
ProvisionTypes.prototype['zonePoolRequired'] = undefined;

/**
 * @member {Boolean} planRequiresPool
 */
ProvisionTypes.prototype['planRequiresPool'] = undefined;

/**
 * @member {Boolean} hasFolders
 */
ProvisionTypes.prototype['hasFolders'] = undefined;

/**
 * @member {Array.<module:model/OptionType>} optionTypes
 */
ProvisionTypes.prototype['optionTypes'] = undefined;

/**
 * @member {Array.<module:model/OptionType>} customOptionTypes
 */
ProvisionTypes.prototype['customOptionTypes'] = undefined;

/**
 * @member {Array.<module:model/NetworkType>} networkTypes
 */
ProvisionTypes.prototype['networkTypes'] = undefined;

/**
 * @member {Array.<module:model/StorageType>} storageTypes
 */
ProvisionTypes.prototype['storageTypes'] = undefined;

/**
 * @member {Array.<module:model/StorageType>} rootStorageTypes
 */
ProvisionTypes.prototype['rootStorageTypes'] = undefined;

/**
 * @member {Array.<module:model/ControllerType>} controllerTypes
 */
ProvisionTypes.prototype['controllerTypes'] = undefined;






export default ProvisionTypes;

