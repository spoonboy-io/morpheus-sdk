/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.1.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CatalogItemTypeBlueprintCreate from './CatalogItemTypeBlueprintCreate';
import CatalogItemTypeBlueprintCreateBlueprint from './CatalogItemTypeBlueprintCreateBlueprint';
import CatalogItemTypeInstanceCreate from './CatalogItemTypeInstanceCreate';
import CatalogItemTypeWorkflowCreate from './CatalogItemTypeWorkflowCreate';
import UpdateBlueprintPermissionsRequestResourcePermissionSitesInner from './UpdateBlueprintPermissionsRequestResourcePermissionSitesInner';

/**
 * The AddCatalogItemTypeRequestCatalogItemType model module.
 * @module model/AddCatalogItemTypeRequestCatalogItemType
 * @version 6.1.1
 */
class AddCatalogItemTypeRequestCatalogItemType {
    /**
     * Constructs a new <code>AddCatalogItemTypeRequestCatalogItemType</code>.
     * @alias module:model/AddCatalogItemTypeRequestCatalogItemType
     * @param {(module:model/CatalogItemTypeBlueprintCreate|module:model/CatalogItemTypeInstanceCreate|module:model/CatalogItemTypeWorkflowCreate)} instance The actual instance to initialize AddCatalogItemTypeRequestCatalogItemType.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "CatalogItemTypeInstanceCreate") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                CatalogItemTypeInstanceCreate.validateJSON(instance); // throw an exception if no match
                // create CatalogItemTypeInstanceCreate from JS object
                this.actualInstance = CatalogItemTypeInstanceCreate.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into CatalogItemTypeInstanceCreate
            errorMessages.push("Failed to construct CatalogItemTypeInstanceCreate: " + err)
        }

        try {
            if (typeof instance === "CatalogItemTypeBlueprintCreate") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                CatalogItemTypeBlueprintCreate.validateJSON(instance); // throw an exception if no match
                // create CatalogItemTypeBlueprintCreate from JS object
                this.actualInstance = CatalogItemTypeBlueprintCreate.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into CatalogItemTypeBlueprintCreate
            errorMessages.push("Failed to construct CatalogItemTypeBlueprintCreate: " + err)
        }

        try {
            if (typeof instance === "CatalogItemTypeWorkflowCreate") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                CatalogItemTypeWorkflowCreate.validateJSON(instance); // throw an exception if no match
                // create CatalogItemTypeWorkflowCreate from JS object
                this.actualInstance = CatalogItemTypeWorkflowCreate.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into CatalogItemTypeWorkflowCreate
            errorMessages.push("Failed to construct CatalogItemTypeWorkflowCreate: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `AddCatalogItemTypeRequestCatalogItemType` with oneOf schemas CatalogItemTypeBlueprintCreate, CatalogItemTypeInstanceCreate, CatalogItemTypeWorkflowCreate. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `AddCatalogItemTypeRequestCatalogItemType` with oneOf schemas CatalogItemTypeBlueprintCreate, CatalogItemTypeInstanceCreate, CatalogItemTypeWorkflowCreate. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>AddCatalogItemTypeRequestCatalogItemType</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AddCatalogItemTypeRequestCatalogItemType} obj Optional instance to populate.
     * @return {module:model/AddCatalogItemTypeRequestCatalogItemType} The populated <code>AddCatalogItemTypeRequestCatalogItemType</code> instance.
     */
    static constructFromObject(data, obj) {
        return new AddCatalogItemTypeRequestCatalogItemType(data);
    }

    /**
     * Gets the actual instance, which can be <code>CatalogItemTypeBlueprintCreate</code>, <code>CatalogItemTypeInstanceCreate</code>, <code>CatalogItemTypeWorkflowCreate</code>.
     * @return {(module:model/CatalogItemTypeBlueprintCreate|module:model/CatalogItemTypeInstanceCreate|module:model/CatalogItemTypeWorkflowCreate)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>CatalogItemTypeBlueprintCreate</code>, <code>CatalogItemTypeInstanceCreate</code>, <code>CatalogItemTypeWorkflowCreate</code>.
     * @param {(module:model/CatalogItemTypeBlueprintCreate|module:model/CatalogItemTypeInstanceCreate|module:model/CatalogItemTypeWorkflowCreate)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = AddCatalogItemTypeRequestCatalogItemType.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of AddCatalogItemTypeRequestCatalogItemType from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/AddCatalogItemTypeRequestCatalogItemType} An instance of AddCatalogItemTypeRequestCatalogItemType.
     */
    static fromJSON = function(json_string){
        return AddCatalogItemTypeRequestCatalogItemType.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * Catalog Item Type name
 * @member {String} name
 */
AddCatalogItemTypeRequestCatalogItemType.prototype['name'] = undefined;

/**
 * Useful shortcode for provisioning naming schemes and export reference.
 * @member {String} code
 */
AddCatalogItemTypeRequestCatalogItemType.prototype['code'] = undefined;

/**
 * Catalog Item Type category
 * @member {String} category
 */
AddCatalogItemTypeRequestCatalogItemType.prototype['category'] = undefined;

/**
 * Catalog Item Type description
 * @member {String} description
 */
AddCatalogItemTypeRequestCatalogItemType.prototype['description'] = undefined;

/**
 * Array of label strings, can be used for filtering.
 * @member {Array.<String>} labels
 */
AddCatalogItemTypeRequestCatalogItemType.prototype['labels'] = undefined;

/**
 * Type, `instance`, `blueprint` or `workflow`. This determines whether an Instance or App will be provisioned. Instance types require a config and blueprint requires a blueprint and appSpec, while workflow types requires a workflow and context.
 * @member {module:model/AddCatalogItemTypeRequestCatalogItemType.TypeEnum} type
 */
AddCatalogItemTypeRequestCatalogItemType.prototype['type'] = undefined;

/**
 * Visibility - Set to public to allow all tenants
 * @member {String} visibility
 * @default 'private'
 */
AddCatalogItemTypeRequestCatalogItemType.prototype['visibility'] = 'private';

/**
 * Identifier primarily used for Plugin Catalog Item Types
 * @member {String} layoutCode
 */
AddCatalogItemTypeRequestCatalogItemType.prototype['layoutCode'] = undefined;

/**
 * Icon Path, relative location of an icon image, eg. /assets/containers-png/nginx.png.
 * @member {String} iconPath
 */
AddCatalogItemTypeRequestCatalogItemType.prototype['iconPath'] = undefined;

/**
 * Can be used to enable / disable the catalog item type.
 * @member {Boolean} enabled
 * @default true
 */
AddCatalogItemTypeRequestCatalogItemType.prototype['enabled'] = true;

/**
 * Can be used to feature the catalog item type.
 * @member {Boolean} featured
 * @default false
 */
AddCatalogItemTypeRequestCatalogItemType.prototype['featured'] = false;

/**
 * Can users order more than one of this item at a time.
 * @member {Boolean} allowQuantity
 * @default false
 */
AddCatalogItemTypeRequestCatalogItemType.prototype['allowQuantity'] = false;

/**
 * @member {Object} config
 */
AddCatalogItemTypeRequestCatalogItemType.prototype['config'] = undefined;

/**
 * Array of option type IDs, see Inputs. Only applies to type instance and blueprint.
 * @member {Array.<Number>} optionTypes
 */
AddCatalogItemTypeRequestCatalogItemType.prototype['optionTypes'] = undefined;

/**
 * Documentation content for this Catalog Item. Markdown-formatted text is accepted and displayed appropriately when the item is ordered from the Service Catalog. A new Catalog Item-type Wiki entry will also be added containing this information.
 * @member {String} content
 */
AddCatalogItemTypeRequestCatalogItemType.prototype['content'] = undefined;

/**
 * @member {module:model/CatalogItemTypeBlueprintCreateBlueprint} blueprint
 */
AddCatalogItemTypeRequestCatalogItemType.prototype['blueprint'] = undefined;

/**
 * The appSpec for blueprint type catalog items is a string in the Scribe YAML format with fields
 * @member {String} appSpec
 */
AddCatalogItemTypeRequestCatalogItemType.prototype['appSpec'] = undefined;

/**
 * @member {module:model/UpdateBlueprintPermissionsRequestResourcePermissionSitesInner} workflow
 */
AddCatalogItemTypeRequestCatalogItemType.prototype['workflow'] = undefined;

/**
 * Context for running the workflow, determines if a target resource must be selected.
 * @member {module:model/AddCatalogItemTypeRequestCatalogItemType.ContextEnum} context
 */
AddCatalogItemTypeRequestCatalogItemType.prototype['context'] = undefined;

/**
 * Configuration object that contains settings for the workflow.
 * @member {String} workflowConfig
 */
AddCatalogItemTypeRequestCatalogItemType.prototype['workflowConfig'] = undefined;


AddCatalogItemTypeRequestCatalogItemType.OneOf = ["CatalogItemTypeBlueprintCreate", "CatalogItemTypeInstanceCreate", "CatalogItemTypeWorkflowCreate"];

export default AddCatalogItemTypeRequestCatalogItemType;

