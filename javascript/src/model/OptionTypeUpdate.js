/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import OptionTypeCreateOptionList from './OptionTypeCreateOptionList';

/**
 * The OptionTypeUpdate model module.
 * @module model/OptionTypeUpdate
 * @version 6.2.1
 */
class OptionTypeUpdate {
    /**
     * Constructs a new <code>OptionTypeUpdate</code>.
     * @alias module:model/OptionTypeUpdate
     */
    constructor() { 
        
        OptionTypeUpdate.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>OptionTypeUpdate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OptionTypeUpdate} obj Optional instance to populate.
     * @return {module:model/OptionTypeUpdate} The populated <code>OptionTypeUpdate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OptionTypeUpdate();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], ['String']);
            }
            if (data.hasOwnProperty('fieldName')) {
                obj['fieldName'] = ApiClient.convertToType(data['fieldName'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('fieldLabel')) {
                obj['fieldLabel'] = ApiClient.convertToType(data['fieldLabel'], 'String');
            }
            if (data.hasOwnProperty('placeholder')) {
                obj['placeholder'] = ApiClient.convertToType(data['placeholder'], 'String');
            }
            if (data.hasOwnProperty('verifyPattern')) {
                obj['verifyPattern'] = ApiClient.convertToType(data['verifyPattern'], 'String');
            }
            if (data.hasOwnProperty('defaultValue')) {
                obj['defaultValue'] = ApiClient.convertToType(data['defaultValue'], 'String');
            }
            if (data.hasOwnProperty('required')) {
                obj['required'] = ApiClient.convertToType(data['required'], 'Boolean');
            }
            if (data.hasOwnProperty('exportMeta')) {
                obj['exportMeta'] = ApiClient.convertToType(data['exportMeta'], 'Boolean');
            }
            if (data.hasOwnProperty('editable')) {
                obj['editable'] = ApiClient.convertToType(data['editable'], 'Boolean');
            }
            if (data.hasOwnProperty('optionList')) {
                obj['optionList'] = OptionTypeCreateOptionList.constructFromObject(data['optionList']);
            }
        }
        return obj;
    }


}

/**
 * The name of the option type for handy reference
 * @member {String} name
 */
OptionTypeUpdate.prototype['name'] = undefined;

/**
 * Short description of the option type
 * @member {String} description
 */
OptionTypeUpdate.prototype['description'] = undefined;

/**
 * Array of label strings, can be used for filtering.
 * @member {Array.<String>} labels
 */
OptionTypeUpdate.prototype['labels'] = undefined;

/**
 * Field Name, the name for user input. This along with fieldContext determines the configuration property name.  The property key for when posting this option type to a JSON POST request
 * @member {String} fieldName
 */
OptionTypeUpdate.prototype['fieldName'] = undefined;

/**
 * Type, the type of input. eg. text, checkbox, select, etc.
 * @member {String} type
 * @default 'text'
 */
OptionTypeUpdate.prototype['type'] = 'text';

/**
 * Field Label, the label for user input.
 * @member {String} fieldLabel
 */
OptionTypeUpdate.prototype['fieldLabel'] = undefined;

/**
 * Any placeholder text when nothing is yet entered
 * @member {String} placeholder
 */
OptionTypeUpdate.prototype['placeholder'] = undefined;

/**
 * Verify Pattern, A regexp string that validates the input, use (?i) to make the matcher case insensitive
 * @member {String} verifyPattern
 */
OptionTypeUpdate.prototype['verifyPattern'] = undefined;

/**
 * The default value if no user entry is specified. This value should be passed to the desired JSON Map if nothing else is entered
 * @member {String} defaultValue
 */
OptionTypeUpdate.prototype['defaultValue'] = undefined;

/**
 * Is this field entry required for the request
 * @member {Boolean} required
 * @default false
 */
OptionTypeUpdate.prototype['required'] = false;

/**
 * Export as Tag
 * @member {Boolean} exportMeta
 * @default false
 */
OptionTypeUpdate.prototype['exportMeta'] = false;

/**
 * Used primarily on tasks and workflows. Basically wether or not the field can be overridden optionally when the object is run
 * @member {Boolean} editable
 * @default false
 */
OptionTypeUpdate.prototype['editable'] = false;

/**
 * @member {module:model/OptionTypeCreateOptionList} optionList
 */
OptionTypeUpdate.prototype['optionList'] = undefined;






export default OptionTypeUpdate;

