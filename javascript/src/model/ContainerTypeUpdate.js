/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ClusterLayoutCreateEnvironmentVariables from './ClusterLayoutCreateEnvironmentVariables';
import ContainerTypeCreateContainerPorts from './ContainerTypeCreateContainerPorts';

/**
 * The ContainerTypeUpdate model module.
 * @module model/ContainerTypeUpdate
 * @version 6.2.1
 */
class ContainerTypeUpdate {
    /**
     * Constructs a new <code>ContainerTypeUpdate</code>.
     * @alias module:model/ContainerTypeUpdate
     */
    constructor() { 
        
        ContainerTypeUpdate.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ContainerTypeUpdate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ContainerTypeUpdate} obj Optional instance to populate.
     * @return {module:model/ContainerTypeUpdate} The populated <code>ContainerTypeUpdate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ContainerTypeUpdate();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], ['String']);
            }
            if (data.hasOwnProperty('shortName')) {
                obj['shortName'] = ApiClient.convertToType(data['shortName'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('containerVersion')) {
                obj['containerVersion'] = ApiClient.convertToType(data['containerVersion'], 'String');
            }
            if (data.hasOwnProperty('provisionTypeCode')) {
                obj['provisionTypeCode'] = ApiClient.convertToType(data['provisionTypeCode'], 'String');
            }
            if (data.hasOwnProperty('scripts')) {
                obj['scripts'] = ApiClient.convertToType(data['scripts'], ['Number']);
            }
            if (data.hasOwnProperty('templates')) {
                obj['templates'] = ApiClient.convertToType(data['templates'], ['Number']);
            }
            if (data.hasOwnProperty('virtualImageId')) {
                obj['virtualImageId'] = ApiClient.convertToType(data['virtualImageId'], 'Number');
            }
            if (data.hasOwnProperty('statTypeCode')) {
                obj['statTypeCode'] = ApiClient.convertToType(data['statTypeCode'], 'String');
            }
            if (data.hasOwnProperty('logTypeCode')) {
                obj['logTypeCode'] = ApiClient.convertToType(data['logTypeCode'], 'String');
            }
            if (data.hasOwnProperty('serverType')) {
                obj['serverType'] = ApiClient.convertToType(data['serverType'], 'String');
            }
            if (data.hasOwnProperty('containerPorts')) {
                obj['containerPorts'] = ApiClient.convertToType(data['containerPorts'], [ContainerTypeCreateContainerPorts]);
            }
            if (data.hasOwnProperty('environmentVariables')) {
                obj['environmentVariables'] = ApiClient.convertToType(data['environmentVariables'], [ClusterLayoutCreateEnvironmentVariables]);
            }
            if (data.hasOwnProperty('config')) {
                obj['config'] = ApiClient.convertToType(data['config'], Object);
            }
        }
        return obj;
    }


}

/**
 * Node type name
 * @member {String} name
 */
ContainerTypeUpdate.prototype['name'] = undefined;

/**
 * @member {Array.<String>} labels
 */
ContainerTypeUpdate.prototype['labels'] = undefined;

/**
 * The short name is a name with no spaces used for display in your container list.
 * @member {String} shortName
 */
ContainerTypeUpdate.prototype['shortName'] = undefined;

/**
 * Node type description
 * @member {String} description
 */
ContainerTypeUpdate.prototype['description'] = undefined;

/**
 * Version of the node type
 * @member {String} containerVersion
 */
ContainerTypeUpdate.prototype['containerVersion'] = undefined;

/**
 * Provision type code, eg. `amazon`, etc.
 * @member {String} provisionTypeCode
 */
ContainerTypeUpdate.prototype['provisionTypeCode'] = undefined;

/**
 * Array of script IDs.
 * @member {Array.<Number>} scripts
 */
ContainerTypeUpdate.prototype['scripts'] = undefined;

/**
 * Array of file template IDs.
 * @member {Array.<Number>} templates
 */
ContainerTypeUpdate.prototype['templates'] = undefined;

/**
 * Virtual image ID
 * @member {Number} virtualImageId
 */
ContainerTypeUpdate.prototype['virtualImageId'] = undefined;

/**
 * Stat type code.  Varies with node type, see Provision Types (customOptionTypes) for allowed values within selected type.
 * @member {String} statTypeCode
 */
ContainerTypeUpdate.prototype['statTypeCode'] = undefined;

/**
 * Log type code.  Varies with node type, see Provision Types (customOptionTypes) for allowed values within selected type.
 * @member {String} logTypeCode
 */
ContainerTypeUpdate.prototype['logTypeCode'] = undefined;

/**
 * Server type.  Always pass \"vm\".
 * @member {String} serverType
 */
ContainerTypeUpdate.prototype['serverType'] = undefined;

/**
 * List of exposed port definitions in the format NAME=PORT|PROTOCOL
 * @member {Array.<module:model/ContainerTypeCreateContainerPorts>} containerPorts
 */
ContainerTypeUpdate.prototype['containerPorts'] = undefined;

/**
 * The environmentVariables parameter is array of env objects.
 * @member {Array.<module:model/ClusterLayoutCreateEnvironmentVariables>} environmentVariables
 */
ContainerTypeUpdate.prototype['environmentVariables'] = undefined;

/**
 * Config object varies with node type.  If using docker, scvmm, ARM, hyperv, or cloudformation, look up provision type details (customOptionTypes) for information.
 * @member {Object} config
 */
ContainerTypeUpdate.prototype['config'] = undefined;






export default ContainerTypeUpdate;

