/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DefaultError from '../model/DefaultError';
import InlineObject82 from '../model/InlineObject82';
import InlineResponse20051 from '../model/InlineResponse20051';
import Model200Success from '../model/Model200Success';
import UserSourceCreate from '../model/UserSourceCreate';

/**
* IdentitySources service.
* @module api/IdentitySourcesApi
* @version 6.2.1
*/
export default class IdentitySourcesApi {

    /**
    * Constructs a new IdentitySourcesApi. 
    * @alias module:api/IdentitySourcesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addIdentitySources operation.
     * @callback module:api/IdentitySourcesApi~addIdentitySourcesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an Identity Source
     * Creates an identity source. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.accountId Filter by Tenant ID. This is only available to master tenant users with permission to manage tenants and users.
     * @param {module:model/UserSourceCreate} opts.userSourceCreate 
     * @param {module:api/IdentitySourcesApi~addIdentitySourcesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    addIdentitySources(opts, callback) {
      opts = opts || {};
      let postBody = opts['userSourceCreate'];

      let pathParams = {
      };
      let queryParams = {
        'accountId': opts['accountId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/user-sources', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getIdentitySources operation.
     * @callback module:api/IdentitySourcesApi~getIdentitySourcesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20051} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a Specific Identity Source
     * Retrieves a specific identity source. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/IdentitySourcesApi~getIdentitySourcesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20051}
     */
    getIdentitySources(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getIdentitySources");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20051;
      return this.apiClient.callApi(
        '/api/user-sources/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listIdentitySources operation.
     * @callback module:api/IdentitySourcesApi~listIdentitySourcesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves all Identity Sources
     * Retrieves all identity sources. 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.type If specified will return all tasks by `task type` code. Refer to `Task Types` API for up to date listings. 
     * @param {Number} opts.max Maximum number of records to return, -1 can be used to fetch all records (default to 25)
     * @param {Number} opts.offset Offset records, the number of records to skip, for paginating requests (default to 0)
     * @param {String} opts.sort Sort order, the name of the property to sort by (default to 'name')
     * @param {module:model/String} opts.direction Sort direction, use 'desc' to reverse sort (default to 'asc')
     * @param {String} opts.phrase Search phrase for partial matches on name or description
     * @param {String} opts.name Filter by name, wildcard may be specified as %, eg. example-%
     * @param {Number} opts.accountId Filter by Tenant ID. This is only available to master tenant users with permission to manage tenants and users.
     * @param {module:api/IdentitySourcesApi~listIdentitySourcesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    listIdentitySources(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'type': opts['type'],
        'max': opts['max'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'direction': opts['direction'],
        'phrase': opts['phrase'],
        'name': opts['name'],
        'accountId': opts['accountId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/user-sources', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeIdentitySources operation.
     * @callback module:api/IdentitySourcesApi~removeIdentitySourcesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an Identity Source
     * Deletes a specified identity source. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/IdentitySourcesApi~removeIdentitySourcesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    removeIdentitySources(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeIdentitySources");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/user-sources/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateIdentitySourceSubdomains operation.
     * @callback module:api/IdentitySourcesApi~updateIdentitySourceSubdomainsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an Identity Source Subdomain
     * Updates an identity source subdomain. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject82} opts.inlineObject82 
     * @param {module:api/IdentitySourcesApi~updateIdentitySourceSubdomainsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateIdentitySourceSubdomains(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject82'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateIdentitySourceSubdomains");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/user-sources/{id}/subdomain', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateIdentitySources operation.
     * @callback module:api/IdentitySourcesApi~updateIdentitySourcesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an Identity Source
     * Updates an identity source. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {module:model/UserSourceCreate} opts.userSourceCreate 
     * @param {module:api/IdentitySourcesApi~updateIdentitySourcesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateIdentitySources(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['userSourceCreate'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateIdentitySources");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/user-sources/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
