/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DefaultError from '../model/DefaultError';
import InlineObject102 from '../model/InlineObject102';

/**
* Invoices service.
* @module api/InvoicesApi
* @version 6.2.1
*/
export default class InvoicesApi {

    /**
    * Constructs a new InvoicesApi. 
    * @alias module:api/InvoicesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getInvoiceLineItems operation.
     * @callback module:api/InvoicesApi~getInvoiceLineItemsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Specific Invoice Line Item
     * Get details about a specific invoice line item.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/InvoicesApi~getInvoiceLineItemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getInvoiceLineItems(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getInvoiceLineItems");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/invoice-line-items/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInvoices operation.
     * @callback module:api/InvoicesApi~getInvoicesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Specific Invoice
     * Get details about a specific invoice.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/InvoicesApi~getInvoicesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getInvoices(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getInvoices");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/invoices/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listInvoiceLineItems operation.
     * @callback module:api/InvoicesApi~listInvoiceLineItemsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List All Invoice Line Items
     * This endpoint retrieves a list of all invoice line items for the specified parameters.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.max Maximum number of records to return, -1 can be used to fetch all records (default to 25)
     * @param {Number} opts.offset Offset records, the number of records to skip, for paginating requests (default to 0)
     * @param {String} opts.sort Sort order, the name of the property to sort by (default to 'name')
     * @param {module:model/String} opts.direction Sort direction, use 'desc' to reverse sort (default to 'asc')
     * @param {String} opts.phrase Search phrase for partial matches on name or description
     * @param {String} opts.name Filter by name, wildcard may be specified as %, eg. example-%
     * @param {String} opts.startDate Filter by startDate greater than or equal to a specified date
     * @param {String} opts.endDate Filter by endDate less than or equal to a specified date
     * @param {String} opts.period Only return records for period that matches with the specified value. This is an alternative to using startDate/endDate. Format is YYYY or YYYYMM. 
     * @param {String} opts.refType If specified will return an exact match on refType. 
     * @param {Number} opts.refId If specified will return an exact match on refId
     * @param {Number} opts.zoneId The Zone ID for Filtering
     * @param {Number} opts.siteId The Site ID for Filtering
     * @param {Number} opts.instanceId The Instance ID for Filtering
     * @param {Number} opts.containerId The Container ID for Filtering
     * @param {Number} opts.serverId The Server ID for Filtering
     * @param {Number} opts.userId Filter by User ID
     * @param {Number} opts.projectId The Project ID for Filtering
     * @param {Boolean} opts.active True or False flag for Active
     * @param {Number} opts.accountId Filter by Tenant ID. This is only available to master tenant users with permission to manage tenants and users.
     * @param {Boolean} opts.includeTotals Pass true to include the summed totals (cost/price values) for all the invoices found in the query. The returned property is called `invoiceTotals`.  (default to false)
     * @param {module:api/InvoicesApi~listInvoiceLineItemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    listInvoiceLineItems(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'max': opts['max'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'direction': opts['direction'],
        'phrase': opts['phrase'],
        'name': opts['name'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'period': opts['period'],
        'refType': opts['refType'],
        'refId': opts['refId'],
        'zoneId': opts['zoneId'],
        'siteId': opts['siteId'],
        'instanceId': opts['instanceId'],
        'containerId': opts['containerId'],
        'serverId': opts['serverId'],
        'userId': opts['userId'],
        'projectId': opts['projectId'],
        'active': opts['active'],
        'accountId': opts['accountId'],
        'includeTotals': opts['includeTotals']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/invoice-line-items', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listInvoices operation.
     * @callback module:api/InvoicesApi~listInvoicesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List All Invoices
     * This endpoint retrieves a list of invoices for the specified parameters.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.max Maximum number of records to return, -1 can be used to fetch all records (default to 25)
     * @param {Number} opts.offset Offset records, the number of records to skip, for paginating requests (default to 0)
     * @param {String} opts.sort Sort order, the name of the property to sort by (default to 'refName')
     * @param {module:model/String} opts.direction Sort direction, use 'desc' to reverse sort (default to 'asc')
     * @param {String} opts.phrase Search phrase for partial matches on name or description
     * @param {String} opts.name Filter by name, wildcard may be specified as %, eg. example-%
     * @param {String} opts.startDate Filter by startDate greater than or equal to a specified date
     * @param {String} opts.endDate Filter by endDate less than or equal to a specified date
     * @param {String} opts.period Only return records for period that matches with the specified value. This is an alternative to using startDate/endDate. Format is YYYY or YYYYMM. 
     * @param {String} opts.refType If specified will return an exact match on refType. 
     * @param {Number} opts.refId If specified will return an exact match on refId
     * @param {String} opts.refStatus If specified, will filter on the associated StorageVolume status. This is only applicable whn `refType=StorageVolume`. 
     * @param {Number} opts.zoneId The Zone ID for Filtering
     * @param {Number} opts.siteId The Site ID for Filtering
     * @param {Number} opts.instanceId The Instance ID for Filtering
     * @param {Number} opts.containerId The Container ID for Filtering
     * @param {Number} opts.serverId The Server ID for Filtering
     * @param {Number} opts.userId Filter by User ID
     * @param {Number} opts.projectId The Project ID for Filtering
     * @param {Boolean} opts.active True or False flag for Active
     * @param {Number} opts.accountId Filter by Tenant ID. This is only available to master tenant users with permission to manage tenants and users.
     * @param {Boolean} opts.includeLineItems Pass true to include the list of `lineItems` for each invoice. Only `lineItemCount` is returned by default.  (default to false)
     * @param {Boolean} opts.includeTotals Pass true to include the summed totals (cost/price values) for all the invoices found in the query. The returned property is called `invoiceTotals`.  (default to false)
     * @param {String} opts.tags Filter by tags (metadata). This allows filtering by a tag name and value(s) 
     * @param {module:api/InvoicesApi~listInvoicesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    listInvoices(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'max': opts['max'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'direction': opts['direction'],
        'phrase': opts['phrase'],
        'name': opts['name'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'period': opts['period'],
        'refType': opts['refType'],
        'refId': opts['refId'],
        'refStatus': opts['refStatus'],
        'zoneId': opts['zoneId'],
        'siteId': opts['siteId'],
        'instanceId': opts['instanceId'],
        'containerId': opts['containerId'],
        'serverId': opts['serverId'],
        'userId': opts['userId'],
        'projectId': opts['projectId'],
        'active': opts['active'],
        'accountId': opts['accountId'],
        'includeLineItems': opts['includeLineItems'],
        'includeTotals': opts['includeTotals'],
        'tags': opts['tags']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/invoices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateInvoices operation.
     * @callback module:api/InvoicesApi~updateInvoicesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Invoice Tags
     * Update, Add, or Remove invoice tag(s).
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject102} opts.inlineObject102 
     * @param {module:api/InvoicesApi~updateInvoicesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateInvoices(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject102'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateInvoices");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/invoices/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
