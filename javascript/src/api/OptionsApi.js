/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DefaultError from '../model/DefaultError';
import Model200Success from '../model/Model200Success';
import ZoneNetworkOptions from '../model/ZoneNetworkOptions';

/**
* Options service.
* @module api/OptionsApi
* @version 6.2.1
*/
export default class OptionsApi {

    /**
    * Constructs a new OptionsApi. 
    * @alias module:api/OptionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getOptionSourceData operation.
     * @callback module:api/OptionsApi~getOptionSourceDataCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Option Source Data
     * Returns a list of name/value pairs for option-type models. Some option-types depend on input data for proper representation. This typically includes zoneId or siteId for the item being provisioned as request parameters or sometimes previous option type parameters. Each option returned has a `value`, which is often the `id`, but may be a `code` or other attribute. 
     * @param {String} optionSource `optionSource` to be listed
     * @param {module:api/OptionsApi~getOptionSourceDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getOptionSourceData(optionSource, callback) {
      let postBody = null;
      // verify the required parameter 'optionSource' is set
      if (optionSource === undefined || optionSource === null) {
        throw new Error("Missing the required parameter 'optionSource' when calling getOptionSourceData");
      }

      let pathParams = {
        'optionSource': optionSource
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/options/{optionSource}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listCodeRepositories operation.
     * @callback module:api/OptionsApi~listCodeRepositoriesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a list of Code/GIT Repositories
     * Retrieves a list of Code/GIT Repositories 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.integrationId Filter by an integration Id.
     * @param {module:api/OptionsApi~listCodeRepositoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    listCodeRepositories(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'integrationId': opts['integrationId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/options/codeRepositories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listOptionNetworkOptions operation.
     * @callback module:api/OptionsApi~listOptionNetworkOptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ZoneNetworkOptions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves network options by zone/cloud
     * This endpoint can be used to see which network options are available for a given cloud (zoneId) and provision type. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.zoneId The Zone ID for Filtering
     * @param {Number} opts.provisionTypeId Provision type filter, restricts query to only load service plans of specified provision type
     * @param {module:api/OptionsApi~listOptionNetworkOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ZoneNetworkOptions}
     */
    listOptionNetworkOptions(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'zoneId': opts['zoneId'],
        'provisionTypeId': opts['provisionTypeId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ZoneNetworkOptions;
      return this.apiClient.callApi(
        '/api/options/zoneNetworkOptions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listOptionValues operation.
     * @callback module:api/OptionsApi~listOptionValuesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves input option values
     * Retrieves all input option values.  Can be used with parameters to supply dependent input values. 
     * @param {Number} optionTypeId Input or Option Type ID
     * @param {Object} opts Optional parameters
     * @param {Object} opts.config Input parameters are required if the input is dependent on them.  Fields must be prefixed with `config.`
     * @param {module:api/OptionsApi~listOptionValuesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    listOptionValues(optionTypeId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'optionTypeId' is set
      if (optionTypeId === undefined || optionTypeId === null) {
        throw new Error("Missing the required parameter 'optionTypeId' when calling listOptionValues");
      }

      let pathParams = {
      };
      let queryParams = {
        'optionTypeId': optionTypeId,
        'config': opts['config']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/options/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
