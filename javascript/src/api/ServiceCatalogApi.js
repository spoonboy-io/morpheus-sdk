/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CatalogCartItemCreate from '../model/CatalogCartItemCreate';
import DefaultError from '../model/DefaultError';
import InlineObject227 from '../model/InlineObject227';
import InlineResponse200139 from '../model/InlineResponse200139';
import InlineResponse200140 from '../model/InlineResponse200140';
import Model200Success from '../model/Model200Success';

/**
* ServiceCatalog service.
* @module api/ServiceCatalogApi
* @version 6.2.1
*/
export default class ServiceCatalogApi {

    /**
    * Constructs a new ServiceCatalogApi. 
    * @alias module:api/ServiceCatalogApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addCatalogCart operation.
     * @callback module:api/ServiceCatalogApi~addCatalogCartCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Checkout Catalog Cart
     * Use this command to checkout, finalizing your cart and placing an order. This converts each item in the cart to an inventory item, changing the status from IN_CART to ORDERED and potentially starts the provisioning process for each item.
     * @param {module:api/ServiceCatalogApi~addCatalogCartCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    addCatalogCart(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/catalog/checkout', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addCatalogCartItem operation.
     * @callback module:api/ServiceCatalogApi~addCatalogCartItemCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add Catalog Item to Cart
     * Use this command to add an item to your service catalog cart.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.validate Validate Only. Use true to validate the configuration without actually placing the order or adding items to your inventory (default to false)
     * @param {module:model/CatalogCartItemCreate} opts.catalogCartItemCreate 
     * @param {module:api/ServiceCatalogApi~addCatalogCartItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    addCatalogCartItem(opts, callback) {
      opts = opts || {};
      let postBody = opts['catalogCartItemCreate'];

      let pathParams = {
      };
      let queryParams = {
        'validate': opts['validate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/catalog/cart/items', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addCatalogOrder operation.
     * @callback module:api/ServiceCatalogApi~addCatalogOrderCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Place Catalog Order
     * This will place an order for the specified items, adding items to the inventory right away, without using the cart.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.validate Validate Only. Use true to validate the configuration without actually placing the order or adding items to your inventory (default to false)
     * @param {module:model/InlineObject227} opts.inlineObject227 
     * @param {module:api/ServiceCatalogApi~addCatalogOrderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    addCatalogOrder(opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject227'];

      let pathParams = {
      };
      let queryParams = {
        'validate': opts['validate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/catalog/orders', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCatalogCart operation.
     * @callback module:api/ServiceCatalogApi~deleteCatalogCartCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Clear Catalog Cart
     * Use this command to empty your cart, deleting all the items in it.
     * @param {module:api/ServiceCatalogApi~deleteCatalogCartCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    deleteCatalogCart(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/catalog/cart', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCatalogCartItem operation.
     * @callback module:api/ServiceCatalogApi~deleteCatalogCartItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a Catalog Item From Cart
     * Will remove a catalog item that is currently in the cart.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/ServiceCatalogApi~deleteCatalogCartItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    deleteCatalogCartItem(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteCatalogCartItem");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/catalog/cart/items/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCatalogItem operation.
     * @callback module:api/ServiceCatalogApi~deleteCatalogItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Catalog Inventory Item
     * Will delete a catalog inventory item, which by default will deprovision any associated any instances and servers.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {String} opts.preserveVolumes Preserve Volumes (default to 'off')
     * @param {String} opts.keepBackups Preserve copy of backups (default to 'off')
     * @param {String} opts.releaseFloatingIps Release Floating IPs (default to 'on')
     * @param {String} opts.releaseEIPs Alias for releaseFloatingIps (default to 'on')
     * @param {String} opts.removeInstances Remove Instances. Only applies to type `blueprint` (Apps) (default to 'on')
     * @param {String} opts.force Force Delete (default to 'off')
     * @param {module:api/ServiceCatalogApi~deleteCatalogItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    deleteCatalogItem(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteCatalogItem");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'preserveVolumes': opts['preserveVolumes'],
        'keepBackups': opts['keepBackups'],
        'releaseFloatingIps': opts['releaseFloatingIps'],
        'releaseEIPs': opts['releaseEIPs'],
        'removeInstances': opts['removeInstances'],
        'force': opts['force']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/catalog/items/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCatalogItem operation.
     * @callback module:api/ServiceCatalogApi~getCatalogItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200140} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Specific Catalog Inventory Item
     * This endpoint retrieves a specific catalog inventory item.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/ServiceCatalogApi~getCatalogItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200140}
     */
    getCatalogItem(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCatalogItem");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200140;
      return this.apiClient.callApi(
        '/api/catalog/items/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCatalogType operation.
     * @callback module:api/ServiceCatalogApi~getCatalogTypeCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Specific Catalog Type
     * This endpoint retrieves a specific catalog item type. This also returns an array of associated optionTypes that are used to configure the catalog item.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/ServiceCatalogApi~getCatalogTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getCatalogType(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCatalogType");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/catalog/types/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listCatalogCart operation.
     * @callback module:api/ServiceCatalogApi~listCatalogCartCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200139} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Catalog Cart
     * This endpoint retrieves the current catalog cart and all the items in it.
     * @param {module:api/ServiceCatalogApi~listCatalogCartCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200139}
     */
    listCatalogCart(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200139;
      return this.apiClient.callApi(
        '/api/catalog/cart', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listCatalogItems operation.
     * @callback module:api/ServiceCatalogApi~listCatalogItemsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Catalog Inventory Items
     * This endpoint retrieves a list of the catalog inventory items.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.max Maximum number of records to return, -1 can be used to fetch all records (default to 25)
     * @param {Number} opts.offset Offset records, the number of records to skip, for paginating requests (default to 0)
     * @param {String} opts.sort Sort order, the name of the property to sort by (default to 'name')
     * @param {module:model/String} opts.direction Sort direction, use 'desc' to reverse sort (default to 'asc')
     * @param {String} opts.phrase Search phrase for partial matches on name or description
     * @param {String} opts.name Filter by name, wildcard may be specified as %, eg. example-%
     * @param {module:api/ServiceCatalogApi~listCatalogItemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    listCatalogItems(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'max': opts['max'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'direction': opts['direction'],
        'phrase': opts['phrase'],
        'name': opts['name']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/catalog/items', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listCatalogTypes operation.
     * @callback module:api/ServiceCatalogApi~listCatalogTypesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Catalog Types
     * This endpoint retrieves the types available for ordering.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.max Maximum number of records to return, -1 can be used to fetch all records (default to 25)
     * @param {Number} opts.offset Offset records, the number of records to skip, for paginating requests (default to 0)
     * @param {String} opts.sort Sort order, the name of the property to sort by (default to 'name')
     * @param {module:model/String} opts.direction Sort direction, use 'desc' to reverse sort (default to 'asc')
     * @param {String} opts.phrase Search phrase for partial matches on name or description
     * @param {String} opts.name Filter by name, wildcard may be specified as %, eg. example-%
     * @param {Boolean} opts.featured Filter by featured
     * @param {module:api/ServiceCatalogApi~listCatalogTypesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    listCatalogTypes(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'max': opts['max'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'direction': opts['direction'],
        'phrase': opts['phrase'],
        'name': opts['name'],
        'featured': opts['featured']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/catalog/types', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
