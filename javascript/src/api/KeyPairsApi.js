/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DefaultError from '../model/DefaultError';
import InlineObject105 from '../model/InlineObject105';
import InlineObject106 from '../model/InlineObject106';
import InlineResponse20066 from '../model/InlineResponse20066';
import InlineResponse20067 from '../model/InlineResponse20067';
import Model200Success from '../model/Model200Success';

/**
* KeyPairs service.
* @module api/KeyPairsApi
* @version 6.2.1
*/
export default class KeyPairsApi {

    /**
    * Constructs a new KeyPairsApi. 
    * @alias module:api/KeyPairsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addKeyPairs operation.
     * @callback module:api/KeyPairsApi~addKeyPairsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a Key Pair
     * Creates a Key Pair.  Private keys are typically optional. 
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject105} opts.inlineObject105 
     * @param {module:api/KeyPairsApi~addKeyPairsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    addKeyPairs(opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject105'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/key-pairs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the generateKeyPairs operation.
     * @callback module:api/KeyPairsApi~generateKeyPairsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20066} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generates a Key Pair
     * Generates a Key Pair. 
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject106} opts.inlineObject106 
     * @param {module:api/KeyPairsApi~generateKeyPairsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20066}
     */
    generateKeyPairs(opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject106'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20066;
      return this.apiClient.callApi(
        '/api/key-pairs/generate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getKeyPairs operation.
     * @callback module:api/KeyPairsApi~getKeyPairsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20067} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a Specific Key Pair
     * Retrieves a specific key pair. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/KeyPairsApi~getKeyPairsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20067}
     */
    getKeyPairs(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getKeyPairs");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20067;
      return this.apiClient.callApi(
        '/api/key-pairs/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeKeyPairs operation.
     * @callback module:api/KeyPairsApi~removeKeyPairsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a Key Pair
     * Deletes a specified key pair. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/KeyPairsApi~removeKeyPairsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    removeKeyPairs(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeKeyPairs");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/key-pairs/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
