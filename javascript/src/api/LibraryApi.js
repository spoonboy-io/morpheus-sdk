/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DefaultError from '../model/DefaultError';
import InlineObject107 from '../model/InlineObject107';
import InlineObject108 from '../model/InlineObject108';
import InlineObject109 from '../model/InlineObject109';
import InlineObject110 from '../model/InlineObject110';
import InlineObject111 from '../model/InlineObject111';
import InlineObject112 from '../model/InlineObject112';
import InlineObject113 from '../model/InlineObject113';
import InlineObject114 from '../model/InlineObject114';
import InlineObject115 from '../model/InlineObject115';
import InlineObject117 from '../model/InlineObject117';
import InlineObject118 from '../model/InlineObject118';
import InlineObject119 from '../model/InlineObject119';
import InlineObject120 from '../model/InlineObject120';
import InlineObject121 from '../model/InlineObject121';
import InlineObject122 from '../model/InlineObject122';
import InlineObject123 from '../model/InlineObject123';
import InlineObject124 from '../model/InlineObject124';
import InlineObject263 from '../model/InlineObject263';
import InlineObject264 from '../model/InlineObject264';
import InlineResponse200136 from '../model/InlineResponse200136';
import InlineResponse200165 from '../model/InlineResponse200165';
import InlineResponse20068 from '../model/InlineResponse20068';
import InlineResponse20069 from '../model/InlineResponse20069';
import InlineResponse20070 from '../model/InlineResponse20070';
import InlineResponse20071 from '../model/InlineResponse20071';
import InlineResponse20072 from '../model/InlineResponse20072';
import InlineResponse20073 from '../model/InlineResponse20073';
import InlineResponse20074 from '../model/InlineResponse20074';
import InlineResponse20075 from '../model/InlineResponse20075';
import InlineResponse20076 from '../model/InlineResponse20076';
import Model200Success from '../model/Model200Success';
import ScriptSuccessId from '../model/ScriptSuccessId';
import SuccessId from '../model/SuccessId';

/**
* Library service.
* @module api/LibraryApi
* @version 6.2.1
*/
export default class LibraryApi {

    /**
    * Constructs a new LibraryApi. 
    * @alias module:api/LibraryApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addFileTemplate operation.
     * @callback module:api/LibraryApi~addFileTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessId} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a File Template
     * Use this command to create a file template.
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject111} opts.inlineObject111 
     * @param {module:api/LibraryApi~addFileTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessId}
     */
    addFileTemplate(opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject111'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SuccessId;
      return this.apiClient.callApi(
        '/api/library/container-templates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addInstanceType operation.
     * @callback module:api/LibraryApi~addInstanceTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an Instance Type
     * Use this command to create an instance type.
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject113} opts.inlineObject113 
     * @param {module:api/LibraryApi~addInstanceTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    addInstanceType(opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject113'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/library/instance-types', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addLayout operation.
     * @callback module:api/LibraryApi~addLayoutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessId} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Layout
     * Use this command to create a layout.
     * @param {Number} instanceTypeId The ID of the instance type
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject115} opts.inlineObject115 
     * @param {module:api/LibraryApi~addLayoutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessId}
     */
    addLayout(instanceTypeId, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject115'];
      // verify the required parameter 'instanceTypeId' is set
      if (instanceTypeId === undefined || instanceTypeId === null) {
        throw new Error("Missing the required parameter 'instanceTypeId' when calling addLayout");
      }

      let pathParams = {
        'instanceTypeId': instanceTypeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SuccessId;
      return this.apiClient.callApi(
        '/api/library/instance-types/{instanceTypeId}/layouts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addNodeType operation.
     * @callback module:api/LibraryApi~addNodeTypeCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Node Type
     * Use this command to create a node type.
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject109} opts.inlineObject109 
     * @param {module:api/LibraryApi~addNodeTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    addNodeType(opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject109'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/library/container-types', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addOptionList operation.
     * @callback module:api/LibraryApi~addOptionListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an Option List
     * Use this command to create an option list.
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject119} opts.inlineObject119 
     * @param {module:api/LibraryApi~addOptionListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    addOptionList(opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject119'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/library/option-type-lists', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addOptionType operation.
     * @callback module:api/LibraryApi~addOptionTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessId} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an Input
     * Use this command to create an option type.
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject121} opts.inlineObject121 
     * @param {module:api/LibraryApi~addOptionTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessId}
     */
    addOptionType(opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject121'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SuccessId;
      return this.apiClient.callApi(
        '/api/library/option-types', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addScript operation.
     * @callback module:api/LibraryApi~addScriptCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScriptSuccessId} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Script
     * Use this command to create a script.
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject107} opts.inlineObject107 
     * @param {module:api/LibraryApi~addScriptCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScriptSuccessId}
     */
    addScript(opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject107'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ScriptSuccessId;
      return this.apiClient.callApi(
        '/api/library/container-scripts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addSpecTemplate operation.
     * @callback module:api/LibraryApi~addSpecTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessId} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Spec Template
     * Use this command to create a spec template.
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject123} opts.inlineObject123 
     * @param {module:api/LibraryApi~addSpecTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessId}
     */
    addSpecTemplate(opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject123'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SuccessId;
      return this.apiClient.callApi(
        '/api/library/spec-templates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addVirtualImage operation.
     * @callback module:api/LibraryApi~addVirtualImageCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Virtual Image
     * This endpoint creates a new virtual image, without any files yet.
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject263} opts.inlineObject263 
     * @param {module:api/LibraryApi~addVirtualImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    addVirtualImage(opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject263'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/virtual-images', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addVirtualImageFile operation.
     * @callback module:api/LibraryApi~addVirtualImageFileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload Virtual Image File
     * This will upload the file and associate it to the Virtual Image.
     * @param {Number} virtualImageId Virtual Image ID
     * @param {Object} opts Optional parameters
     * @param {String} opts.filename The name of the file
     * @param {String} opts.url Download the file from a remote url. This can be used instead of uploading a local file.
     * @param {File} opts.body 
     * @param {module:api/LibraryApi~addVirtualImageFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    addVirtualImageFile(virtualImageId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'virtualImageId' is set
      if (virtualImageId === undefined || virtualImageId === null) {
        throw new Error("Missing the required parameter 'virtualImageId' when calling addVirtualImageFile");
      }

      let pathParams = {
        'virtualImageId': virtualImageId
      };
      let queryParams = {
        'filename': opts['filename'],
        'url': opts['url']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/octet-stream'];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/virtual-images/{virtualImageId}/upload', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteFileTemplate operation.
     * @callback module:api/LibraryApi~deleteFileTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a File Template
     * Will delete a file template
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/LibraryApi~deleteFileTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    deleteFileTemplate(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteFileTemplate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/library/container-templates/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteInstanceType operation.
     * @callback module:api/LibraryApi~deleteInstanceTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an Instance Type
     * Will delete an instance type
     * @param {Number} instanceTypeId The ID of the instance type
     * @param {module:api/LibraryApi~deleteInstanceTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    deleteInstanceType(instanceTypeId, callback) {
      let postBody = null;
      // verify the required parameter 'instanceTypeId' is set
      if (instanceTypeId === undefined || instanceTypeId === null) {
        throw new Error("Missing the required parameter 'instanceTypeId' when calling deleteInstanceType");
      }

      let pathParams = {
        'instanceTypeId': instanceTypeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/library/instance-types/{instanceTypeId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteLayout operation.
     * @callback module:api/LibraryApi~deleteLayoutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Layout
     * Will delete a layout
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/LibraryApi~deleteLayoutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    deleteLayout(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteLayout");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/library/layouts/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNodeType operation.
     * @callback module:api/LibraryApi~deleteNodeTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Node Type
     * Will delete a node type
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/LibraryApi~deleteNodeTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    deleteNodeType(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteNodeType");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/library/container-types/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOptionList operation.
     * @callback module:api/LibraryApi~deleteOptionListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an Option List
     * Will delete an option list.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/LibraryApi~deleteOptionListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    deleteOptionList(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteOptionList");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/library/option-type-lists/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOptionType operation.
     * @callback module:api/LibraryApi~deleteOptionTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an Input
     * Will delete an option type.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/LibraryApi~deleteOptionTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    deleteOptionType(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteOptionType");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/library/option-types/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteScript operation.
     * @callback module:api/LibraryApi~deleteScriptCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Script
     * Will delete a script
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/LibraryApi~deleteScriptCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    deleteScript(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteScript");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/library/container-scripts/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSpecTemplate operation.
     * @callback module:api/LibraryApi~deleteSpecTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Spec Template
     * Will delete a spec template
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/LibraryApi~deleteSpecTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    deleteSpecTemplate(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteSpecTemplate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/library/spec-templates/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFileTemplate operation.
     * @callback module:api/LibraryApi~getFileTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20070} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Specific File Template
     * This endpoint retrieves a specific file template.  The value of template will be masked as ************ for system owned file templates. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/LibraryApi~getFileTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20070}
     */
    getFileTemplate(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getFileTemplate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20070;
      return this.apiClient.callApi(
        '/api/library/container-templates/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInput operation.
     * @callback module:api/LibraryApi~getInputCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20075} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get A Specific Input
     * This endpoint retrieves a specific option type. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/LibraryApi~getInputCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20075}
     */
    getInput(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getInput");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20075;
      return this.apiClient.callApi(
        '/api/library/option-types/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInstanceType operation.
     * @callback module:api/LibraryApi~getInstanceTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20071} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Specific Instance Type
     * This endpoint retrieves a specific instance type.
     * @param {Number} instanceTypeId The ID of the instance type
     * @param {module:api/LibraryApi~getInstanceTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20071}
     */
    getInstanceType(instanceTypeId, callback) {
      let postBody = null;
      // verify the required parameter 'instanceTypeId' is set
      if (instanceTypeId === undefined || instanceTypeId === null) {
        throw new Error("Missing the required parameter 'instanceTypeId' when calling getInstanceType");
      }

      let pathParams = {
        'instanceTypeId': instanceTypeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20071;
      return this.apiClient.callApi(
        '/api/library/instance-types/{instanceTypeId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLayout operation.
     * @callback module:api/LibraryApi~getLayoutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20072} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Specific Layout
     * This endpoint retrieves a specific layout.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/LibraryApi~getLayoutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20072}
     */
    getLayout(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getLayout");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20072;
      return this.apiClient.callApi(
        '/api/library/layouts/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNodeType operation.
     * @callback module:api/LibraryApi~getNodeTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20069} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Specific Node Type
     * This endpoint retrieves a specific node type.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/LibraryApi~getNodeTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20069}
     */
    getNodeType(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getNodeType");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20069;
      return this.apiClient.callApi(
        '/api/library/container-types/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOptionList operation.
     * @callback module:api/LibraryApi~getOptionListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20073} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Specific Option List
     * This endpoint retrieves a specific option list.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/LibraryApi~getOptionListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20073}
     */
    getOptionList(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOptionList");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20073;
      return this.apiClient.callApi(
        '/api/library/option-type-lists/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOptionListItems operation.
     * @callback module:api/LibraryApi~getOptionListItemsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20074} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Items for a Specific Option List
     * This endpoint retrieves the items for a specific option list.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/LibraryApi~getOptionListItemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20074}
     */
    getOptionListItems(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOptionListItems");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20074;
      return this.apiClient.callApi(
        '/api/library/option-type-lists/{id}/items', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getScript operation.
     * @callback module:api/LibraryApi~getScriptCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20068} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Specific Script
     * This endpoint retrieves a specific script.  The value of script will be masked as ************ for system owned scripts. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/LibraryApi~getScriptCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20068}
     */
    getScript(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getScript");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20068;
      return this.apiClient.callApi(
        '/api/library/container-scripts/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSecurityPackageType operation.
     * @callback module:api/LibraryApi~getSecurityPackageTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200136} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a Specific Security Package Type
     * Retrieves a specific security package type. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/LibraryApi~getSecurityPackageTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200136}
     */
    getSecurityPackageType(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSecurityPackageType");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200136;
      return this.apiClient.callApi(
        '/api/security-package-types/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSpecTemplate operation.
     * @callback module:api/LibraryApi~getSpecTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20076} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Specific Spec Template
     * This endpoint retrieves a specific spec template.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/LibraryApi~getSpecTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20076}
     */
    getSpecTemplate(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSpecTemplate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20076;
      return this.apiClient.callApi(
        '/api/library/spec-templates/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVirtualImage operation.
     * @callback module:api/LibraryApi~getVirtualImageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200165} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Specific Virtual Image
     * This endpoint retrieves a specific virtual image and its files.
     * @param {Number} virtualImageId Virtual Image ID
     * @param {module:api/LibraryApi~getVirtualImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200165}
     */
    getVirtualImage(virtualImageId, callback) {
      let postBody = null;
      // verify the required parameter 'virtualImageId' is set
      if (virtualImageId === undefined || virtualImageId === null) {
        throw new Error("Missing the required parameter 'virtualImageId' when calling getVirtualImage");
      }

      let pathParams = {
        'virtualImageId': virtualImageId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200165;
      return this.apiClient.callApi(
        '/api/virtual-images/{virtualImageId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listFileTemplates operation.
     * @callback module:api/LibraryApi~listFileTemplatesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All File Templates
     * This endpoint retrieves all file templates.  The value of template will be masked as ************ for system owned file templates. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.max Maximum number of records to return, -1 can be used to fetch all records (default to 25)
     * @param {Number} opts.offset Offset records, the number of records to skip, for paginating requests (default to 0)
     * @param {String} opts.sort Sort order, the name of the property to sort by (default to 'name')
     * @param {module:model/String} opts.direction Sort direction, use 'desc' to reverse sort (default to 'asc')
     * @param {String} opts.phrase Search phrase for partial matches on name or description
     * @param {String} opts.name Filter by name, wildcard may be specified as %, eg. example-%
     * @param {String} opts.labels Filter by label(s), matches records that contain any of the specified labels
     * @param {String} opts.allLabels Filter by label(s), matches records that contain all of the specified labels
     * @param {String} opts.fileName Filename filter, restricts query to only load file template matching fileName specified
     * @param {module:api/LibraryApi~listFileTemplatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    listFileTemplates(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'max': opts['max'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'direction': opts['direction'],
        'phrase': opts['phrase'],
        'name': opts['name'],
        'labels': opts['labels'],
        'allLabels': opts['allLabels'],
        'fileName': opts['fileName']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/library/container-templates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listInputs operation.
     * @callback module:api/LibraryApi~listInputsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Inputs
     * This endpoint retrieves all option types. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.max Maximum number of records to return, -1 can be used to fetch all records (default to 25)
     * @param {Number} opts.offset Offset records, the number of records to skip, for paginating requests (default to 0)
     * @param {String} opts.sort Sort order, the name of the property to sort by (default to 'name')
     * @param {module:model/String} opts.direction Sort direction, use 'desc' to reverse sort (default to 'asc')
     * @param {String} opts.phrase Search phrase for partial matches on name or description
     * @param {String} opts.name Filter by name, wildcard may be specified as %, eg. example-%
     * @param {String} opts.code If specified will return an exact match on code
     * @param {String} opts.labels Filter by label(s), matches records that contain any of the specified labels
     * @param {String} opts.allLabels Filter by label(s), matches records that contain all of the specified labels
     * @param {String} opts.fieldName Field Name filter, restricts query to only load type matching fieldName specified
     * @param {String} opts.fieldContext Field Context filter, restricts query to only load type matching fieldContext specified
     * @param {String} opts.fieldLabel Field Label filter, restricts query to only load type matching fieldLabel specified
     * @param {module:api/LibraryApi~listInputsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    listInputs(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'max': opts['max'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'direction': opts['direction'],
        'phrase': opts['phrase'],
        'name': opts['name'],
        'code': opts['code'],
        'labels': opts['labels'],
        'allLabels': opts['allLabels'],
        'fieldName': opts['fieldName'],
        'fieldContext': opts['fieldContext'],
        'fieldLabel': opts['fieldLabel']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/library/option-types', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listInstanceTypes operation.
     * @callback module:api/LibraryApi~listInstanceTypesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Instance Types
     * This endpoint retrieves all instance types. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.max Maximum number of records to return, -1 can be used to fetch all records (default to 25)
     * @param {Number} opts.offset Offset records, the number of records to skip, for paginating requests (default to 0)
     * @param {String} opts.sort Sort order, the name of the property to sort by (default to 'name')
     * @param {module:model/String} opts.direction Sort direction, use 'desc' to reverse sort (default to 'asc')
     * @param {String} opts.phrase Search phrase for partial matches on name or description
     * @param {String} opts.name Filter by name, wildcard may be specified as %, eg. example-%
     * @param {String} opts.code If specified will return an exact match on code
     * @param {Boolean} opts.featured Filter by featured
     * @param {String} opts.labels Filter by label(s), matches records that contain any of the specified labels
     * @param {String} opts.allLabels Filter by label(s), matches records that contain all of the specified labels
     * @param {Boolean} opts.details Load full details including optionTypes, environmentVariables, etc. These properties are excluded by default.
     * @param {module:api/LibraryApi~listInstanceTypesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    listInstanceTypes(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'max': opts['max'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'direction': opts['direction'],
        'phrase': opts['phrase'],
        'name': opts['name'],
        'code': opts['code'],
        'featured': opts['featured'],
        'labels': opts['labels'],
        'allLabels': opts['allLabels'],
        'details': opts['details']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/library/instance-types', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listLayouts operation.
     * @callback module:api/LibraryApi~listLayoutsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Layouts
     * This endpoint retrieves all layouts. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.max Maximum number of records to return, -1 can be used to fetch all records (default to 25)
     * @param {Number} opts.offset Offset records, the number of records to skip, for paginating requests (default to 0)
     * @param {String} opts.sort Sort order, the name of the property to sort by (default to 'name')
     * @param {module:model/String} opts.direction Sort direction, use 'desc' to reverse sort (default to 'asc')
     * @param {String} opts.phrase Search phrase for partial matches on name or description
     * @param {String} opts.name Filter by name, wildcard may be specified as %, eg. example-%
     * @param {String} opts.code If specified will return an exact match on code
     * @param {module:model/String} opts.provisionType Filter by `Provision Type` code. Refer to `Provision Types` API for up to date listings. 
     * @param {String} opts.labels Filter by label(s), matches records that contain any of the specified labels
     * @param {String} opts.allLabels Filter by label(s), matches records that contain all of the specified labels
     * @param {module:api/LibraryApi~listLayoutsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    listLayouts(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'max': opts['max'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'direction': opts['direction'],
        'phrase': opts['phrase'],
        'name': opts['name'],
        'code': opts['code'],
        'provisionType': opts['provisionType'],
        'labels': opts['labels'],
        'allLabels': opts['allLabels']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/library/layouts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listLayoutsForInstanceType operation.
     * @callback module:api/LibraryApi~listLayoutsForInstanceTypeCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Layouts For an Instance Type
     * This endpoint retrieves all layouts for a specific instance type.
     * @param {Number} instanceTypeId The ID of the instance type
     * @param {Object} opts Optional parameters
     * @param {Number} opts.max Maximum number of records to return, -1 can be used to fetch all records (default to 25)
     * @param {Number} opts.offset Offset records, the number of records to skip, for paginating requests (default to 0)
     * @param {String} opts.sort Sort order, the name of the property to sort by (default to 'name')
     * @param {module:model/String} opts.direction Sort direction, use 'desc' to reverse sort (default to 'asc')
     * @param {String} opts.phrase Search phrase for partial matches on name or description
     * @param {String} opts.name Filter by name, wildcard may be specified as %, eg. example-%
     * @param {String} opts.code If specified will return an exact match on code
     * @param {module:model/String} opts.provisionType Filter by `Provision Type` code. Refer to `Provision Types` API for up to date listings. 
     * @param {String} opts.labels Filter by label(s), matches records that contain any of the specified labels
     * @param {String} opts.allLabels Filter by label(s), matches records that contain all of the specified labels
     * @param {module:api/LibraryApi~listLayoutsForInstanceTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    listLayoutsForInstanceType(instanceTypeId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'instanceTypeId' is set
      if (instanceTypeId === undefined || instanceTypeId === null) {
        throw new Error("Missing the required parameter 'instanceTypeId' when calling listLayoutsForInstanceType");
      }

      let pathParams = {
        'instanceTypeId': instanceTypeId
      };
      let queryParams = {
        'max': opts['max'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'direction': opts['direction'],
        'phrase': opts['phrase'],
        'name': opts['name'],
        'code': opts['code'],
        'provisionType': opts['provisionType'],
        'labels': opts['labels'],
        'allLabels': opts['allLabels']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/library/instance-types/{instanceTypeId}/layouts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listNodeTypes operation.
     * @callback module:api/LibraryApi~listNodeTypesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Node Types
     * This endpoint retrieves all node types.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.max Maximum number of records to return, -1 can be used to fetch all records (default to 25)
     * @param {Number} opts.offset Offset records, the number of records to skip, for paginating requests (default to 0)
     * @param {String} opts.sort Sort order, the name of the property to sort by (default to 'name')
     * @param {module:model/String} opts.direction Sort direction, use 'desc' to reverse sort (default to 'asc')
     * @param {String} opts.phrase Search phrase for partial matches on name or description
     * @param {String} opts.name Filter by name, wildcard may be specified as %, eg. example-%
     * @param {String} opts.code If specified will return an exact match on code
     * @param {module:model/String} opts.provisionType Filter by `Provision Type` code. Refer to `Provision Types` API for up to date listings. 
     * @param {String} opts.labels Filter by label(s), matches records that contain any of the specified labels
     * @param {String} opts.allLabels Filter by label(s), matches records that contain all of the specified labels
     * @param {module:api/LibraryApi~listNodeTypesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    listNodeTypes(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'max': opts['max'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'direction': opts['direction'],
        'phrase': opts['phrase'],
        'name': opts['name'],
        'code': opts['code'],
        'provisionType': opts['provisionType'],
        'labels': opts['labels'],
        'allLabels': opts['allLabels']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/library/container-types', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listOptionLists operation.
     * @callback module:api/LibraryApi~listOptionListsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Option Lists
     * This endpoint retrieves all option lists.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.max Maximum number of records to return, -1 can be used to fetch all records (default to 25)
     * @param {Number} opts.offset Offset records, the number of records to skip, for paginating requests (default to 0)
     * @param {String} opts.sort Sort order, the name of the property to sort by (default to 'name')
     * @param {module:model/String} opts.direction Sort direction, use 'desc' to reverse sort (default to 'asc')
     * @param {String} opts.phrase Search phrase for partial matches on name or description
     * @param {String} opts.name Filter by name, wildcard may be specified as %, eg. example-%
     * @param {String} opts.labels Filter by label(s), matches records that contain any of the specified labels
     * @param {String} opts.allLabels Filter by label(s), matches records that contain all of the specified labels
     * @param {module:api/LibraryApi~listOptionListsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    listOptionLists(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'max': opts['max'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'direction': opts['direction'],
        'phrase': opts['phrase'],
        'name': opts['name'],
        'labels': opts['labels'],
        'allLabels': opts['allLabels']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/library/option-type-lists', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listScripts operation.
     * @callback module:api/LibraryApi~listScriptsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Scripts
     * This endpoint retrieves all scripts.  The value of script will be masked as ************ for system owned scripts. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.max Maximum number of records to return, -1 can be used to fetch all records (default to 25)
     * @param {Number} opts.offset Offset records, the number of records to skip, for paginating requests (default to 0)
     * @param {String} opts.sort Sort order, the name of the property to sort by (default to 'name')
     * @param {module:model/String} opts.direction Sort direction, use 'desc' to reverse sort (default to 'asc')
     * @param {String} opts.phrase Search phrase for partial matches on name or description
     * @param {String} opts.labels Filter by label(s), matches records that contain any of the specified labels
     * @param {String} opts.allLabels Filter by label(s), matches records that contain all of the specified labels
     * @param {String} opts.scriptType Script type code filter, restricts query to only load scripts of specified type
     * @param {String} opts.scriptPhase Script phase filter, restricts query to only load scripts of specified phase
     * @param {module:api/LibraryApi~listScriptsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    listScripts(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'max': opts['max'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'direction': opts['direction'],
        'phrase': opts['phrase'],
        'labels': opts['labels'],
        'allLabels': opts['allLabels'],
        'scriptType': opts['scriptType'],
        'scriptPhase': opts['scriptPhase']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/library/container-scripts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSecurityPackageTypes operation.
     * @callback module:api/LibraryApi~listSecurityPackageTypesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves all Security Package Types
     * Retrieves all Security Package Types 
     * @param {module:api/LibraryApi~listSecurityPackageTypesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    listSecurityPackageTypes(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/security-package-types', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSpecTemplates operation.
     * @callback module:api/LibraryApi~listSpecTemplatesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Spec Templates
     * This endpoint retrieves all spec templates.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.max Maximum number of records to return, -1 can be used to fetch all records (default to 25)
     * @param {Number} opts.offset Offset records, the number of records to skip, for paginating requests (default to 0)
     * @param {String} opts.sort Sort order, the name of the property to sort by (default to 'name')
     * @param {module:model/String} opts.direction Sort direction, use 'desc' to reverse sort (default to 'asc')
     * @param {String} opts.phrase Search phrase for partial matches on name or description
     * @param {String} opts.name Filter by name, wildcard may be specified as %, eg. example-%
     * @param {String} opts.labels Filter by label(s), matches records that contain any of the specified labels
     * @param {String} opts.allLabels Filter by label(s), matches records that contain all of the specified labels
     * @param {module:api/LibraryApi~listSpecTemplatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    listSpecTemplates(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'max': opts['max'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'direction': opts['direction'],
        'phrase': opts['phrase'],
        'name': opts['name'],
        'labels': opts['labels'],
        'allLabels': opts['allLabels']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/library/spec-templates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listVirtualImageLocations operation.
     * @callback module:api/LibraryApi~listVirtualImageLocationsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a List of Virtual Image Locations
     * This endpoint retrieves a specific virtual image and its files.
     * @param {Number} virtualImageId Virtual Image ID
     * @param {module:api/LibraryApi~listVirtualImageLocationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    listVirtualImageLocations(virtualImageId, callback) {
      let postBody = null;
      // verify the required parameter 'virtualImageId' is set
      if (virtualImageId === undefined || virtualImageId === null) {
        throw new Error("Missing the required parameter 'virtualImageId' when calling listVirtualImageLocations");
      }

      let pathParams = {
        'virtualImageId': virtualImageId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/virtual-images/{virtualImageId}/locations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listVirtualImages operation.
     * @callback module:api/LibraryApi~listVirtualImagesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get List of Virtual Images
     * This endpoint retrieves a list of virtual images for the specified filter.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.max Maximum number of records to return, -1 can be used to fetch all records (default to 25)
     * @param {Number} opts.offset Offset records, the number of records to skip, for paginating requests (default to 0)
     * @param {String} opts.name Filter by name, wildcard may be specified as %, eg. example-%
     * @param {String} opts.phrase Search phrase for partial matches on name or description
     * @param {Date} opts.lastUpdated Date filter, restricts query to only load resources updated more recently than the date specified (ISO 8601)
     * @param {module:model/String} opts.filterType Filter by type, \"User\", \"System\", \"Synced\", or \"All\" (default to 'User')
     * @param {String} opts.imageType Filter by image type code, \"vmware\", \"ami\", etc
     * @param {String} opts.tags Filter by tags (metadata). This allows filtering by a tag name and value(s) 
     * @param {String} opts.labels Filter by label(s), matches records that contain any of the specified labels
     * @param {String} opts.allLabels Filter by label(s), matches records that contain all of the specified labels
     * @param {module:api/LibraryApi~listVirtualImagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    listVirtualImages(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'max': opts['max'],
        'offset': opts['offset'],
        'name': opts['name'],
        'phrase': opts['phrase'],
        'lastUpdated': opts['lastUpdated'],
        'filterType': opts['filterType'],
        'imageType': opts['imageType'],
        'tags': opts['tags'],
        'labels': opts['labels'],
        'allLabels': opts['allLabels']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/virtual-images', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeSecurityScans operation.
     * @callback module:api/LibraryApi~removeSecurityScansCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a Security Scan
     * Deletes a specified security scan. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/LibraryApi~removeSecurityScansCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    removeSecurityScans(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeSecurityScans");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/security-scans/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeVirtualImage operation.
     * @callback module:api/LibraryApi~removeVirtualImageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Virtual Image
     * Will delete a virtual image and any associated files, use removeFromCloud=true to also delete image locations from all clouds.
     * @param {Number} virtualImageId Virtual Image ID
     * @param {module:api/LibraryApi~removeVirtualImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    removeVirtualImage(virtualImageId, callback) {
      let postBody = null;
      // verify the required parameter 'virtualImageId' is set
      if (virtualImageId === undefined || virtualImageId === null) {
        throw new Error("Missing the required parameter 'virtualImageId' when calling removeVirtualImage");
      }

      let pathParams = {
        'virtualImageId': virtualImageId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/virtual-images/{virtualImageId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeVirtualImageFile operation.
     * @callback module:api/LibraryApi~removeVirtualImageFileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove Virtual Image File
     * Remove Virtual Image File
     * @param {Number} virtualImageId Virtual Image ID
     * @param {Object} opts Optional parameters
     * @param {String} opts.filename The name of the file
     * @param {module:api/LibraryApi~removeVirtualImageFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    removeVirtualImageFile(virtualImageId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'virtualImageId' is set
      if (virtualImageId === undefined || virtualImageId === null) {
        throw new Error("Missing the required parameter 'virtualImageId' when calling removeVirtualImageFile");
      }

      let pathParams = {
        'virtualImageId': virtualImageId
      };
      let queryParams = {
        'filename': opts['filename']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/virtual-images/{virtualImageId}/files', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeVirtualImageLocation operation.
     * @callback module:api/LibraryApi~removeVirtualImageLocationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Virtual Image Location
     * Will delete a virtual image location, use removeFromCloud=true to all also delete image locations from all clouds as well.
     * @param {Number} virtualImageId Virtual Image ID
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/LibraryApi~removeVirtualImageLocationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    removeVirtualImageLocation(virtualImageId, id, callback) {
      let postBody = null;
      // verify the required parameter 'virtualImageId' is set
      if (virtualImageId === undefined || virtualImageId === null) {
        throw new Error("Missing the required parameter 'virtualImageId' when calling removeVirtualImageLocation");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeVirtualImageLocation");
      }

      let pathParams = {
        'virtualImageId': virtualImageId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/virtual-images/{virtualImageId}/locations/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setInstanceTypeFeatured operation.
     * @callback module:api/LibraryApi~setInstanceTypeFeaturedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Toggle Featured For Instance Type
     * Use this command to toggle the featured flag for an existing instance type. This will change the value from false to true, or from true to false. 
     * @param {Number} instanceTypeId The ID of the instance type
     * @param {module:api/LibraryApi~setInstanceTypeFeaturedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    setInstanceTypeFeatured(instanceTypeId, callback) {
      let postBody = null;
      // verify the required parameter 'instanceTypeId' is set
      if (instanceTypeId === undefined || instanceTypeId === null) {
        throw new Error("Missing the required parameter 'instanceTypeId' when calling setInstanceTypeFeatured");
      }

      let pathParams = {
        'instanceTypeId': instanceTypeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/library/instance-types/{instanceTypeId}/toggle-featured', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateFileTemplate operation.
     * @callback module:api/LibraryApi~updateFileTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a File Template
     * Use this command to update an existing file template.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject112} opts.inlineObject112 
     * @param {module:api/LibraryApi~updateFileTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    updateFileTemplate(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject112'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateFileTemplate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/library/container-templates/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateInstanceType operation.
     * @callback module:api/LibraryApi~updateInstanceTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an Instance Type
     * Use this command to update an existing instance type.
     * @param {Number} instanceTypeId The ID of the instance type
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject114} opts.inlineObject114 
     * @param {module:api/LibraryApi~updateInstanceTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    updateInstanceType(instanceTypeId, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject114'];
      // verify the required parameter 'instanceTypeId' is set
      if (instanceTypeId === undefined || instanceTypeId === null) {
        throw new Error("Missing the required parameter 'instanceTypeId' when calling updateInstanceType");
      }

      let pathParams = {
        'instanceTypeId': instanceTypeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/library/instance-types/{instanceTypeId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateInstanceTypeLogo operation.
     * @callback module:api/LibraryApi~updateInstanceTypeLogoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Logo For Instance Type
     * Use this command to update the logo and dark logo images for an existing instance type. This endpoint expects multipart form data as the request format, not JSON. 
     * @param {Number} instanceTypeId The ID of the instance type
     * @param {Object} opts Optional parameters
     * @param {File} opts.logo Logo File png,jpg,svg
     * @param {File} opts.darkLogo Dark Logo File png,jpg,svg
     * @param {module:api/LibraryApi~updateInstanceTypeLogoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    updateInstanceTypeLogo(instanceTypeId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'instanceTypeId' is set
      if (instanceTypeId === undefined || instanceTypeId === null) {
        throw new Error("Missing the required parameter 'instanceTypeId' when calling updateInstanceTypeLogo");
      }

      let pathParams = {
        'instanceTypeId': instanceTypeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'logo': opts['logo'],
        'darkLogo': opts['darkLogo']
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/library/instance-types/{instanceTypeId}/update-logo', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateLayout operation.
     * @callback module:api/LibraryApi~updateLayoutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Layout
     * Use this command to update an existing layout.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject117} opts.inlineObject117 
     * @param {module:api/LibraryApi~updateLayoutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    updateLayout(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject117'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateLayout");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/library/layouts/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateLayoutPermissions operation.
     * @callback module:api/LibraryApi~updateLayoutPermissionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Layout Permissions
     * Use this command to update permissions for an existing layout.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject118} opts.inlineObject118 
     * @param {module:api/LibraryApi~updateLayoutPermissionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    updateLayoutPermissions(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject118'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateLayoutPermissions");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/library/layouts/{id}/permissions', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNodeType operation.
     * @callback module:api/LibraryApi~updateNodeTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Node Type
     * Use this command to update an existing node type.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject110} opts.inlineObject110 
     * @param {module:api/LibraryApi~updateNodeTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    updateNodeType(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject110'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateNodeType");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/library/container-types/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOptionList operation.
     * @callback module:api/LibraryApi~updateOptionListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an Option List
     * Use this command to update an existing option list.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject120} opts.inlineObject120 
     * @param {module:api/LibraryApi~updateOptionListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    updateOptionList(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject120'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateOptionList");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/library/option-type-lists/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOptionType operation.
     * @callback module:api/LibraryApi~updateOptionTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an Input
     * Use this command to update an existing option type.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject122} opts.inlineObject122 
     * @param {module:api/LibraryApi~updateOptionTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    updateOptionType(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject122'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateOptionType");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/library/option-types/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateScript operation.
     * @callback module:api/LibraryApi~updateScriptCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScriptSuccessId} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Script
     * Use this command to update an existing script.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject108} opts.inlineObject108 
     * @param {module:api/LibraryApi~updateScriptCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScriptSuccessId}
     */
    updateScript(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject108'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateScript");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ScriptSuccessId;
      return this.apiClient.callApi(
        '/api/library/container-scripts/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSpecTemplate operation.
     * @callback module:api/LibraryApi~updateSpecTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Spec Template
     * Use this command to update an existing spec template.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject124} opts.inlineObject124 
     * @param {module:api/LibraryApi~updateSpecTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    updateSpecTemplate(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject124'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateSpecTemplate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/library/spec-templates/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateVirtualImage operation.
     * @callback module:api/LibraryApi~updateVirtualImageCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Virtual Image
     * This endpoint updates an existing virtual image.
     * @param {Number} virtualImageId Virtual Image ID
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject264} opts.inlineObject264 
     * @param {module:api/LibraryApi~updateVirtualImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateVirtualImage(virtualImageId, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject264'];
      // verify the required parameter 'virtualImageId' is set
      if (virtualImageId === undefined || virtualImageId === null) {
        throw new Error("Missing the required parameter 'virtualImageId' when calling updateVirtualImage");
      }

      let pathParams = {
        'virtualImageId': virtualImageId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/virtual-images/{virtualImageId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
