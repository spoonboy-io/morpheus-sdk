/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.1.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddClient200Response from '../model/AddClient200Response';
import AddClientRequest from '../model/AddClientRequest';
import DefaultError from '../model/DefaultError';
import GetClients200Response from '../model/GetClients200Response';
import ListClients200Response from '../model/ListClients200Response';
import Model200Success from '../model/Model200Success';
import UpdateClientsRequest from '../model/UpdateClientsRequest';

/**
* Clients service.
* @module api/ClientsApi
* @version 6.1.1
*/
export default class ClientsApi {

    /**
    * Constructs a new ClientsApi. 
    * @alias module:api/ClientsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addClient operation.
     * @callback module:api/ClientsApi~addClientCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddClient200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an Oauth Client
     * Create a new Oauth Client.
     * @param {Object} opts Optional parameters
     * @param {module:model/AddClientRequest} [addClientRequest] 
     * @param {module:api/ClientsApi~addClientCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddClient200Response}
     */
    addClient(opts, callback) {
      opts = opts || {};
      let postBody = opts['addClientRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AddClient200Response;
      return this.apiClient.callApi(
        '/api/clients', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getClients operation.
     * @callback module:api/ClientsApi~getClientsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetClients200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a Specific Oauth Client
     * Retrieves a specific oauth client. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/ClientsApi~getClientsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetClients200Response}
     */
    getClients(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getClients");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetClients200Response;
      return this.apiClient.callApi(
        '/api/clients/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listClients operation.
     * @callback module:api/ClientsApi~listClientsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListClients200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Oauth Clients
     * This endpoint retrieves a paginated list of oauth clients.
     * @param {Object} opts Optional parameters
     * @param {Number} [max = 25)] Maximum number of records to return
     * @param {Number} [offset = 0)] Offset records, the number of records to skip, for paginating requests
     * @param {String} [sort = 'clientId')] Sort order, the name of the property to sort by
     * @param {module:model/String} [direction = 'asc')] Sort direction, use 'desc' to reverse sort
     * @param {String} [phrase] Search phrase for partial matches on clientId
     * @param {String} [clientId] Search phrase for partial matches on clientId
     * @param {module:api/ClientsApi~listClientsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListClients200Response}
     */
    listClients(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'max': opts['max'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'direction': opts['direction'],
        'phrase': opts['phrase'],
        'clientId': opts['clientId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListClients200Response;
      return this.apiClient.callApi(
        '/api/clients', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeClients operation.
     * @callback module:api/ClientsApi~removeClientsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an Oauth Client
     * Deletes a specified oauth client. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/ClientsApi~removeClientsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    removeClients(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeClients");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/clients/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateClients operation.
     * @callback module:api/ClientsApi~updateClientsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddClient200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an Oauth Client
     * Updates an oauth client. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateClientsRequest} [updateClientsRequest] 
     * @param {module:api/ClientsApi~updateClientsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddClient200Response}
     */
    updateClients(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateClientsRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateClients");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AddClient200Response;
      return this.apiClient.callApi(
        '/api/clients/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
