/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DefaultError from '../model/DefaultError';
import InlineObject196 from '../model/InlineObject196';
import InlineObject197 from '../model/InlineObject197';
import InlineObject83 from '../model/InlineObject83';
import InlineObject84 from '../model/InlineObject84';
import InlineObject85 from '../model/InlineObject85';
import InlineObject86 from '../model/InlineObject86';
import InlineResponse200122 from '../model/InlineResponse200122';
import InlineResponse20052 from '../model/InlineResponse20052';
import InlineResponse20053 from '../model/InlineResponse20053';
import InlineResponse20054 from '../model/InlineResponse20054';
import Model200Success from '../model/Model200Success';

/**
* ImageBuilds service.
* @module api/ImageBuildsApi
* @version 6.2.1
*/
export default class ImageBuildsApi {

    /**
    * Constructs a new ImageBuildsApi. 
    * @alias module:api/ImageBuildsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addBootScript operation.
     * @callback module:api/ImageBuildsApi~addBootScriptCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Boot Script
     * Create a Boot Script
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject83} opts.inlineObject83 
     * @param {module:api/ImageBuildsApi~addBootScriptCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    addBootScript(opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject83'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/boot-scripts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addImageBuild operation.
     * @callback module:api/ImageBuildsApi~addImageBuildCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an Image Build
     * Create an Image Build
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject85} opts.inlineObject85 
     * @param {module:api/ImageBuildsApi~addImageBuildCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    addImageBuild(opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject85'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/image-builds', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addPreseedScript operation.
     * @callback module:api/ImageBuildsApi~addPreseedScriptCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Preseed Script
     * Create a Preseed Script
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject196} opts.inlineObject196 
     * @param {module:api/ImageBuildsApi~addPreseedScriptCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    addPreseedScript(opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject196'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/preseed-scripts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBootScript operation.
     * @callback module:api/ImageBuildsApi~deleteBootScriptCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Boot Script
     * Will delete a boot script from the system and make it no longer usable.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/ImageBuildsApi~deleteBootScriptCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    deleteBootScript(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteBootScript");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/boot-scripts/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteImageBuild operation.
     * @callback module:api/ImageBuildsApi~deleteImageBuildCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an Image Build
     * Will delete an image build from the system and make it no longer usable.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/ImageBuildsApi~deleteImageBuildCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    deleteImageBuild(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteImageBuild");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/image-builds/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePreseedScript operation.
     * @callback module:api/ImageBuildsApi~deletePreseedScriptCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Preseed Script
     * Will delete a preseed script from the system and make it no longer usable.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/ImageBuildsApi~deletePreseedScriptCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    deletePreseedScript(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deletePreseedScript");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/preseed-scripts/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the executeImageBuild operation.
     * @callback module:api/ImageBuildsApi~executeImageBuildCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Run an Image Build
     * Running an image build is done asynchronously. This api will kick off the new execution and update the image build status.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/ImageBuildsApi~executeImageBuildCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    executeImageBuild(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling executeImageBuild");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/image-builds/{id}/run', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBootScript operation.
     * @callback module:api/ImageBuildsApi~getBootScriptCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20052} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Specific Boot Script
     * This endpoint retrieves a specific boot script.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/ImageBuildsApi~getBootScriptCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20052}
     */
    getBootScript(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getBootScript");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20052;
      return this.apiClient.callApi(
        '/api/boot-scripts/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getImageBuild operation.
     * @callback module:api/ImageBuildsApi~getImageBuildCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20053} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Specific Image Build
     * This endpoint retrieves a specific image build.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/ImageBuildsApi~getImageBuildCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20053}
     */
    getImageBuild(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getImageBuild");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20053;
      return this.apiClient.callApi(
        '/api/image-builds/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getImageBuildExecutions operation.
     * @callback module:api/ImageBuildsApi~getImageBuildExecutionsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Image Build Executions
     * List all executions for an image build. This same info is also returned by the image build GET api, which returns the 100 most recent executions.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {Number} opts.buildNumber If specified will return an exact match on buildNumber
     * @param {module:model/String} opts.status Filter by status
     * @param {module:api/ImageBuildsApi~getImageBuildExecutionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getImageBuildExecutions(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getImageBuildExecutions");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'buildNumber': opts['buildNumber'],
        'status': opts['status']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/image-builds/{id}/list-executions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPreseedScript operation.
     * @callback module:api/ImageBuildsApi~getPreseedScriptCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200122} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Specific Preseed Script
     * This endpoint retrieves a specific preseed script.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/ImageBuildsApi~getPreseedScriptCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200122}
     */
    getPreseedScript(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getPreseedScript");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200122;
      return this.apiClient.callApi(
        '/api/preseed-scripts/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listBootScripts operation.
     * @callback module:api/ImageBuildsApi~listBootScriptsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Boot Scripts
     * Boot Scripts are used in the Image Builder service. See Image Builds.  This endpoint retrieves all boot scripts associated with the account. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter by name, wildcard may be specified as %, eg. example-%
     * @param {String} opts.phrase Search phrase for partial matches on name or description
     * @param {module:api/ImageBuildsApi~listBootScriptsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    listBootScripts(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name'],
        'phrase': opts['phrase']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/boot-scripts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listImageBuilds operation.
     * @callback module:api/ImageBuildsApi~listImageBuildsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Image Builds
     * This endpoint retrieves all image builds associated with the account.
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter by name, wildcard may be specified as %, eg. example-%
     * @param {String} opts.phrase Search phrase for partial matches on name or description
     * @param {module:api/ImageBuildsApi~listImageBuildsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    listImageBuilds(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name'],
        'phrase': opts['phrase']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/image-builds', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listPreseedScripts operation.
     * @callback module:api/ImageBuildsApi~listPreseedScriptsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Preseed Scripts
     * Preseed Scripts are used in the Image Builder service. See Image Builds.  This endpoint retrieves all preseed scripts associated with the account. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter by name, wildcard may be specified as %, eg. example-%
     * @param {String} opts.phrase Search phrase for partial matches on name or description
     * @param {module:api/ImageBuildsApi~listPreseedScriptsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    listPreseedScripts(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name'],
        'phrase': opts['phrase']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/preseed-scripts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBootScript operation.
     * @callback module:api/ImageBuildsApi~updateBootScriptCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Boot Script
     * Update a Boot Script
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject84} opts.inlineObject84 
     * @param {module:api/ImageBuildsApi~updateBootScriptCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateBootScript(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject84'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateBootScript");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/boot-scripts/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateImageBuild operation.
     * @callback module:api/ImageBuildsApi~updateImageBuildCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20054} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an Image Build
     * Update an Image Build
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject86} opts.inlineObject86 
     * @param {module:api/ImageBuildsApi~updateImageBuildCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20054}
     */
    updateImageBuild(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject86'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateImageBuild");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20054;
      return this.apiClient.callApi(
        '/api/image-builds/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePreseedScript operation.
     * @callback module:api/ImageBuildsApi~updatePreseedScriptCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Preseed Script
     * Update a Preseed Script
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject197} opts.inlineObject197 
     * @param {module:api/ImageBuildsApi~updatePreseedScriptCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updatePreseedScript(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject197'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updatePreseedScript");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/preseed-scripts/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
