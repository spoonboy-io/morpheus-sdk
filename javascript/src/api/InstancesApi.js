/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DefaultError from '../model/DefaultError';
import InlineObject270 from '../model/InlineObject270';
import InlineObject91 from '../model/InlineObject91';
import InlineObject93 from '../model/InlineObject93';
import InlineObject94 from '../model/InlineObject94';
import InlineObject95 from '../model/InlineObject95';
import InlineObject96 from '../model/InlineObject96';
import InlineObject97 from '../model/InlineObject97';
import InlineObject98 from '../model/InlineObject98';
import InlineObject99 from '../model/InlineObject99';
import InlineResponse200168 from '../model/InlineResponse200168';
import InlineResponse20056 from '../model/InlineResponse20056';
import InlineResponse20057 from '../model/InlineResponse20057';
import InlineResponse20058 from '../model/InlineResponse20058';
import InlineResponse20059 from '../model/InlineResponse20059';
import InlineResponse20060 from '../model/InlineResponse20060';
import InstanceBackups from '../model/InstanceBackups';
import InstanceClone from '../model/InstanceClone';
import InstanceCreate from '../model/InstanceCreate';
import InstanceResize from '../model/InstanceResize';
import InstanceSnapshot from '../model/InstanceSnapshot';
import InstanceSnapshots from '../model/InstanceSnapshots';
import InstanceUpdate from '../model/InstanceUpdate';
import InstanceWorkflow from '../model/InstanceWorkflow';
import InstancesCloneImage from '../model/InstancesCloneImage';
import Model200Success from '../model/Model200Success';
import NetworkInterfaceUpdate from '../model/NetworkInterfaceUpdate';
import Snapshot from '../model/Snapshot';
import SuccessMessage from '../model/SuccessMessage';

/**
* Instances service.
* @module api/InstancesApi
* @version 6.2.1
*/
export default class InstancesApi {

    /**
    * Constructs a new InstancesApi. 
    * @alias module:api/InstancesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addInstance operation.
     * @callback module:api/InstancesApi~addInstanceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an Instance
     * Create an Instance
     * @param {Object} opts Optional parameters
     * @param {module:model/InstanceCreate} opts.instanceCreate 
     * @param {module:api/InstancesApi~addInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    addInstance(opts, callback) {
      opts = opts || {};
      let postBody = opts['instanceCreate'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/instances', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the backupInstance operation.
     * @callback module:api/InstancesApi~backupInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Backup an instance
     * Backup an instance
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/InstancesApi~backupInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    backupInstance(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling backupInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/instances/{id}/backup', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the backupsInstance operation.
     * @callback module:api/InstancesApi~backupsInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InstanceBackups} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of backups for an Instance
     * Get list of backups for an Instance
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/InstancesApi~backupsInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InstanceBackups}
     */
    backupsInstance(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling backupsInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InstanceBackups;
      return this.apiClient.callApi(
        '/api/instances/{id}/backups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cancelExpirationInstance operation.
     * @callback module:api/InstancesApi~cancelExpirationInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel Expiration of an Instance
     * This operation will cancel the expiration of an instance.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/InstancesApi~cancelExpirationInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    cancelExpirationInstance(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cancelExpirationInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/instances/{id}/cancel-expiration', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cancelRemovalInstance operation.
     * @callback module:api/InstancesApi~cancelRemovalInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel Removal of an Instance
     * This operation will undo the delete of an instance that is pending removal.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/InstancesApi~cancelRemovalInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    cancelRemovalInstance(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cancelRemovalInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/instances/{id}/cancel-removal', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cancelShutdownInstance operation.
     * @callback module:api/InstancesApi~cancelShutdownInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel Shutdown of an Instance
     * This operation will cancel the shutdown of an instance.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/InstancesApi~cancelShutdownInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    cancelShutdownInstance(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cancelShutdownInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/instances/{id}/cancel-shutdown', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloneImageInstance operation.
     * @callback module:api/InstancesApi~cloneImageInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Clone to Image
     * This endpoint allows creating an image template from an existing instance.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {module:model/InstancesCloneImage} opts.instancesCloneImage 
     * @param {module:api/InstancesApi~cloneImageInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    cloneImageInstance(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['instancesCloneImage'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cloneImageInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/instances/{id}/clone-image', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloneInstance operation.
     * @callback module:api/InstancesApi~cloneInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Clone an Instance
     * One can easily clone an instance and all containers within that instance. The containers are backed up via the backup services and used as a snapshot to produce a clone of the instance. It is possible to clone this app instance into an entirely different availability zone.  This endpoint also supports all of the same parameters as instance creation, so you can override any configuration options when provisioning the clone. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {module:model/InstanceClone} opts.instanceClone 
     * @param {module:api/InstancesApi~cloneInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    cloneInstance(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['instanceClone'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cloneInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/instances/{id}/clone', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createInstanceSchedule operation.
     * @callback module:api/InstancesApi~createInstanceScheduleCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new Instance Schedule
     * Create a new schedule for a specific instance.  This creates an instance scaling threshold that only applies during a defined schedule. 
     * @param {Number} id Instance ID
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject96} opts.inlineObject96 
     * @param {module:api/InstancesApi~createInstanceScheduleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createInstanceSchedule(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject96'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling createInstanceSchedule");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/instances/{id}/schedules', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAllSnapshotsInstance operation.
     * @callback module:api/InstancesApi~deleteAllSnapshotsInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete All Snapshots of Instance
     * Delete All Snapshots attached to Instance.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/InstancesApi~deleteAllSnapshotsInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    deleteAllSnapshotsInstance(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteAllSnapshotsInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/instances/{id}/delete-all-snapshots', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAllSnapshotsInstanceContainer operation.
     * @callback module:api/InstancesApi~deleteAllSnapshotsInstanceContainerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete All Snapshots of Instance Container
     * Delete All Snapshots attached to Instance Container.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Number} containerId Container ID
     * @param {module:api/InstancesApi~deleteAllSnapshotsInstanceContainerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    deleteAllSnapshotsInstanceContainer(id, containerId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteAllSnapshotsInstanceContainer");
      }
      // verify the required parameter 'containerId' is set
      if (containerId === undefined || containerId === null) {
        throw new Error("Missing the required parameter 'containerId' when calling deleteAllSnapshotsInstanceContainer");
      }

      let pathParams = {
        'id': id,
        'containerId': containerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/instances/{id}/delete-container-snapshots/{containerId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteInstance operation.
     * @callback module:api/InstancesApi~deleteInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an instance
     * Will delete an instance and all associated monitors and backups.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {String} opts.preserveVolumes Preserve Volumes (default to 'off')
     * @param {String} opts.keepBackups Preserve copy of backups (default to 'off')
     * @param {String} opts.releaseFloatingIps Release Floating IPs (default to 'on')
     * @param {String} opts.releaseEIPs Alias for releaseFloatingIps (default to 'on')
     * @param {String} opts.force Force Delete (default to 'off')
     * @param {module:api/InstancesApi~deleteInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    deleteInstance(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'preserveVolumes': opts['preserveVolumes'],
        'keepBackups': opts['keepBackups'],
        'releaseFloatingIps': opts['releaseFloatingIps'],
        'releaseEIPs': opts['releaseEIPs'],
        'force': opts['force']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/instances/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteInstanceSchedule operation.
     * @callback module:api/InstancesApi~deleteInstanceScheduleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an Instance Schedule
     * Deletes a specified instance scaling schedule 
     * @param {Number} id Instance ID
     * @param {Number} scheduleId Instance Schedule ID
     * @param {module:api/InstancesApi~deleteInstanceScheduleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    deleteInstanceSchedule(id, scheduleId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteInstanceSchedule");
      }
      // verify the required parameter 'scheduleId' is set
      if (scheduleId === undefined || scheduleId === null) {
        throw new Error("Missing the required parameter 'scheduleId' when calling deleteInstanceSchedule");
      }

      let pathParams = {
        'id': id,
        'scheduleId': scheduleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/instances/{id}/schedules/{scheduleId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSnapshotInstance operation.
     * @callback module:api/InstancesApi~deleteSnapshotInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Snapshot of Instance
     * Delete snapshot of instance.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/InstancesApi~deleteSnapshotInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    deleteSnapshotInstance(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteSnapshotInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/snapshots/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ejectInstance operation.
     * @callback module:api/InstancesApi~ejectInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Eject an instance
     * This will eject any ISO media on all containers in the instance.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/InstancesApi~ejectInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    ejectInstance(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ejectInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/instances/{id}/eject', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the extendExpirationInstance operation.
     * @callback module:api/InstancesApi~extendExpirationInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Extend Expiration of an Instance
     * This operation will extend the expiration of an instance. The period of time it is extended is equal to the number of renewal days in the expiration policy.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/InstancesApi~extendExpirationInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    extendExpirationInstance(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling extendExpirationInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/instances/{id}/extend-expiration', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the extendShutdownInstance operation.
     * @callback module:api/InstancesApi~extendShutdownInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Extend Shutdown of an Instance
     * This operation will extend the shutdown of an instance. The period of time it is extended is equal to the number of renewal days in the expiration policy.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/InstancesApi~extendShutdownInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    extendShutdownInstance(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling extendShutdownInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/instances/{id}/extend-shutdown', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEnvVariables operation.
     * @callback module:api/InstancesApi~getEnvVariablesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20057} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Env Variables
     * This gets all the environment variables associated with the instance.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/InstancesApi~getEnvVariablesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20057}
     */
    getEnvVariables(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getEnvVariables");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20057;
      return this.apiClient.callApi(
        '/api/instances/{id}/envs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInstance operation.
     * @callback module:api/InstancesApi~getInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20056} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a Specific Instance
     * Retrieves a specific instance.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.details Include details=true to return more details about the instance, ie. containerDetails. Available in api version 5.2.8/5.3.2. (default to false)
     * @param {module:api/InstancesApi~getInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20056}
     */
    getInstance(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'details': opts['details']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20056;
      return this.apiClient.callApi(
        '/api/instances/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInstanceContainers operation.
     * @callback module:api/InstancesApi~getInstanceContainersCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Container Details
     * This can be valuable for evaluating the details of the compute server(s) running on an instance
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/InstancesApi~getInstanceContainersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getInstanceContainers(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getInstanceContainers");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/instances/{id}/containers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInstanceHistory operation.
     * @callback module:api/InstancesApi~getInstanceHistoryCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Instance History
     * This endpoint retrieves the process history for a specific instance. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {String} opts.phrase Search phrase for partial matches on name or description
     * @param {Number} opts.containerId The Container ID for Filtering
     * @param {Number} opts.serverId The Server ID for Filtering
     * @param {Number} opts.zoneId The Zone ID for Filtering
     * @param {module:api/InstancesApi~getInstanceHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getInstanceHistory(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getInstanceHistory");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'phrase': opts['phrase'],
        'containerId': opts['containerId'],
        'serverId': opts['serverId'],
        'zoneId': opts['zoneId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/instances/{id}/history', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInstanceSchedule operation.
     * @callback module:api/InstancesApi~getInstanceScheduleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20059} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Specific Instance Schedule
     * This endpoint retrieves a specific instance scaling schedule. 
     * @param {Number} id Instance ID
     * @param {Number} scheduleId Instance Schedule ID
     * @param {module:api/InstancesApi~getInstanceScheduleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20059}
     */
    getInstanceSchedule(id, scheduleId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getInstanceSchedule");
      }
      // verify the required parameter 'scheduleId' is set
      if (scheduleId === undefined || scheduleId === null) {
        throw new Error("Missing the required parameter 'scheduleId' when calling getInstanceSchedule");
      }

      let pathParams = {
        'id': id,
        'scheduleId': scheduleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20059;
      return this.apiClient.callApi(
        '/api/instances/{id}/schedules/{scheduleId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInstanceSchedules operation.
     * @callback module:api/InstancesApi~getInstanceSchedulesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all Instance Schedules
     * This endpoint retrieves all the scaling threshold schedules for a specific instance.
     * @param {Number} id Instance ID
     * @param {module:api/InstancesApi~getInstanceSchedulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getInstanceSchedules(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getInstanceSchedules");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/instances/{id}/schedules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInstanceThreshold operation.
     * @callback module:api/InstancesApi~getInstanceThresholdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20058} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an Instance Scale Threshold
     * Retrieves the scale threshold settings for a specific instance
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/InstancesApi~getInstanceThresholdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20058}
     */
    getInstanceThreshold(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getInstanceThreshold");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20058;
      return this.apiClient.callApi(
        '/api/instances/{id}/threshold', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInstanceTypeProvisioning operation.
     * @callback module:api/InstancesApi~getInstanceTypeProvisioningCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Specific Instance Type for Provisioning
     * Fetch an instance type by ID. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/InstancesApi~getInstanceTypeProvisioningCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getInstanceTypeProvisioning(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getInstanceTypeProvisioning");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/instance-types/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPrepareApplyInstance operation.
     * @callback module:api/InstancesApi~getPrepareApplyInstanceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Prepare To Apply an Instance
     * This endpoint provides a way to view the current instance configuration and templateParameter variables available to apply. This action only applies to Terraform, CloudFormation and ARM and will return an HTTP 400 error for other types.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/InstancesApi~getPrepareApplyInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getPrepareApplyInstance(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getPrepareApplyInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/instances/{id}/prepare-apply', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSnapshotInstance operation.
     * @callback module:api/InstancesApi~getSnapshotInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Snapshot} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Specific Snapshot
     * This endpoint retrieves a specific snapshot.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/InstancesApi~getSnapshotInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Snapshot}
     */
    getSnapshotInstance(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSnapshotInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Snapshot;
      return this.apiClient.callApi(
        '/api/snapshots/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getStateInstance operation.
     * @callback module:api/InstancesApi~getStateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get State of an Instance
     * This endpoint provides a way to view the state of an instance. The response includes output and resource planning information from the template provider software such as Terraform. This action only applies to Terraform, CloudFormation and ARM and will return an HTTP 400 error for other types.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/InstancesApi~getStateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getStateInstance(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getStateInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/instances/{id}/state', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getValidateApplyInstance operation.
     * @callback module:api/InstancesApi~getValidateApplyInstanceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Validate Apply State for an Instance
     * This endpoint provides a way to validate instance configuration and templateParameter variables before executing the apply. This only validates the configuration to see any planned changes and it does not actually apply the changes. This action only applies to Terraform, CloudFormation and ARM and will return an HTTP 400 error for other types.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject98} opts.inlineObject98 
     * @param {module:api/InstancesApi~getValidateApplyInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getValidateApplyInstance(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject98'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getValidateApplyInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/instances/{id}/validate-apply', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getWikiInstance operation.
     * @callback module:api/InstancesApi~getWikiInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200168} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves an Instance Wiki Page
     * This endpoint retrieves an instance Wiki page. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/InstancesApi~getWikiInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200168}
     */
    getWikiInstance(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getWikiInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200168;
      return this.apiClient.callApi(
        '/api/instances/{id}/wiki', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the importSnapshotInstance operation.
     * @callback module:api/InstancesApi~importSnapshotInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Import Snapshot of an Instance
     * It is possible to import a snapshot of an instance. This creates a Virtual Image of the instance as it currently exists.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject93} opts.inlineObject93 
     * @param {module:api/InstancesApi~importSnapshotInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    importSnapshotInstance(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject93'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling importSnapshotInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/instances/{id}/import-snapshot', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the linkedCloneSnapshotInstance operation.
     * @callback module:api/InstancesApi~linkedCloneSnapshotInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Linked Clone of Instance Snapshot
     * It is possible to create a linked clone of an Instance Snapshot.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Number} snapshotId Snapshot ID
     * @param {module:api/InstancesApi~linkedCloneSnapshotInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    linkedCloneSnapshotInstance(id, snapshotId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling linkedCloneSnapshotInstance");
      }
      // verify the required parameter 'snapshotId' is set
      if (snapshotId === undefined || snapshotId === null) {
        throw new Error("Missing the required parameter 'snapshotId' when calling linkedCloneSnapshotInstance");
      }

      let pathParams = {
        'id': id,
        'snapshotId': snapshotId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/instances/{id}/linked-clone/{snapshotId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listInstanceServicePlans operation.
     * @callback module:api/InstancesApi~listInstanceServicePlansCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20060} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Available Service Plans for an Instance
     * This endpoint retrieves all the Service Plans available for the specified cloud and instance layout. The response includes details about the plans and their configuration options. It may be used to get the list of available plans when creating a new instance or resizing an existing instance. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.zoneId The Zone ID for Filtering
     * @param {Number} opts.layoutId The Layout ID for Filtering
     * @param {Number} opts.siteId The Site ID for Filtering
     * @param {module:api/InstancesApi~listInstanceServicePlansCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20060}
     */
    listInstanceServicePlans(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'zoneId': opts['zoneId'],
        'layoutId': opts['layoutId'],
        'siteId': opts['siteId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20060;
      return this.apiClient.callApi(
        '/api/instances/service-plans', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listInstanceTypesProvisioning operation.
     * @callback module:api/InstancesApi~listInstanceTypesProvisioningCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Instance Types for Provisioning
     * Fetch the list of available instance types. These can vary in range from database containers, to web containers, to custom containers. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.max Maximum number of records to return, -1 can be used to fetch all records (default to 25)
     * @param {Number} opts.offset Offset records, the number of records to skip, for paginating requests (default to 0)
     * @param {String} opts.sort Sort order, the name of the property to sort by (default to 'name')
     * @param {module:model/String} opts.direction Sort direction, use 'desc' to reverse sort (default to 'asc')
     * @param {String} opts.phrase Search phrase for partial matches on name or description
     * @param {String} opts.name Filter by name, wildcard may be specified as %, eg. example-%
     * @param {String} opts.code If specified will return an exact match on code
     * @param {Boolean} opts.featured Filter by featured
     * @param {Boolean} opts.details Load full details including optionTypes, environmentVariables, etc. These properties are excluded by default.
     * @param {module:api/InstancesApi~listInstanceTypesProvisioningCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    listInstanceTypesProvisioning(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'max': opts['max'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'direction': opts['direction'],
        'phrase': opts['phrase'],
        'name': opts['name'],
        'code': opts['code'],
        'featured': opts['featured'],
        'details': opts['details']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/instance-types', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listInstances operation.
     * @callback module:api/InstancesApi~listInstancesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Instances
     * This endpoint retrieves a paginated list of instances. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.max Maximum number of records to return, -1 can be used to fetch all records (default to 25)
     * @param {Number} opts.offset Offset records, the number of records to skip, for paginating requests (default to 0)
     * @param {String} opts.name Filter by name, wildcard may be specified as %, eg. example-%
     * @param {String} opts.phrase Search phrase for partial matches on name or description
     * @param {String} opts.instanceType The Instance Type Code for Filtering
     * @param {Date} opts.lastUpdated Date filter, restricts query to only load resources updated more recently than the date specified (ISO 8601)
     * @param {Number} opts.createdBy The User ID for Filtering
     * @param {Boolean} opts.agentInstalled Filter instances by if agent is installed or not on the associated servers.
     * @param {String} opts.status The instance status for filtering.
     * @param {String} opts.environment The environment for filtering.
     * @param {Boolean} opts.showDeleted If true, includes instances in pending removal status. (default to false)
     * @param {Boolean} opts.deleted If true, only deleted resources or instances in pending removal status are returned.
     * @param {String} opts.expireDate Filter by expireDate less than or equal to specified date
     * @param {String} opts.expireDateMin Filter expireDate greater than or equal to the specified date
     * @param {String} opts.expireDays Filter by expireDays less than or equal to the specified value
     * @param {String} opts.expireDaysMin Filter by expireDays greater than or equal to the specified value
     * @param {String} opts.shutdownDate Filter by shutdownDate less than equal to the specified date
     * @param {String} opts.shutdownDateMin Filter by shutdownDate greater than or equal to the specified date
     * @param {String} opts.shutdownDays Filter by shutdownDays less than or equal to the specified value
     * @param {String} opts.shutdownDaysMin Filter by shutdownDays greater than or equal to the specified value
     * @param {String} opts.labels Filter by label(s), matches records that contain any of the specified labels
     * @param {String} opts.allLabels Filter by label(s), matches records that contain all of the specified labels
     * @param {String} opts.tags Filter by tags (metadata). This allows filtering by a tag name and value(s) 
     * @param {String} opts.metadata Alias for tags
     * @param {Boolean} opts.details Include details=true to return more details about the instance, ie. containerDetails. Available in api version 5.2.8/5.3.2. (default to false)
     * @param {module:api/InstancesApi~listInstancesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    listInstances(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'max': opts['max'],
        'offset': opts['offset'],
        'name': opts['name'],
        'phrase': opts['phrase'],
        'instanceType': opts['instanceType'],
        'lastUpdated': opts['lastUpdated'],
        'createdBy': opts['createdBy'],
        'agentInstalled': opts['agentInstalled'],
        'status': opts['status'],
        'environment': opts['environment'],
        'showDeleted': opts['showDeleted'],
        'deleted': opts['deleted'],
        'expireDate': opts['expireDate'],
        'expireDateMin': opts['expireDateMin'],
        'expireDays': opts['expireDays'],
        'expireDaysMin': opts['expireDaysMin'],
        'shutdownDate': opts['shutdownDate'],
        'shutdownDateMin': opts['shutdownDateMin'],
        'shutdownDays': opts['shutdownDays'],
        'shutdownDaysMin': opts['shutdownDaysMin'],
        'labels': opts['labels'],
        'allLabels': opts['allLabels'],
        'tags': opts['tags'],
        'metadata': opts['metadata'],
        'details': opts['details']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/instances', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSecurityGroupsInstance operation.
     * @callback module:api/InstancesApi~listSecurityGroupsInstanceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Security Groups for an Instance
     * This returns a list of all of the security groups applied to an instance and whether the firewall is enabled.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/InstancesApi~listSecurityGroupsInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    listSecurityGroupsInstance(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listSecurityGroupsInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/instances/{id}/security-groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the lockInstance operation.
     * @callback module:api/InstancesApi~lockInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lock an Instance
     * This will lock the instance. While locked, instances may not be removed.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/InstancesApi~lockInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    lockInstance(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling lockInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/instances/{id}/lock', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the refreshStateInstance operation.
     * @callback module:api/InstancesApi~refreshStateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Refresh State of an Instance
     * This endpoint provides a way to refresh the state of an instance. This action only applies to Terraform, CloudFormation and ARM and will return an HTTP 400 error for other types.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/InstancesApi~refreshStateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    refreshStateInstance(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling refreshStateInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/instances/{id}/refresh', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeInstancesFromControl operation.
     * @callback module:api/InstancesApi~removeInstancesFromControlCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove From Control
     * Will delete a brownfield instance (or instances) asynchronously (Only deletes records local to Morpheus, actual VMs remain unchanged).
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject99} opts.inlineObject99 
     * @param {module:api/InstancesApi~removeInstancesFromControlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessMessage}
     */
    removeInstancesFromControl(opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject99'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SuccessMessage;
      return this.apiClient.callApi(
        '/api/instances/remove-from-control', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resizeInstance operation.
     * @callback module:api/InstancesApi~resizeInstanceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Resize an Instance
     * It is possible to resize containers within an instance by increasing their memory plan or storage limit. This is done by assigning a new service plan to the container. This endpoint also allows for NIC reconfiguration by passing a new array of networkInterfaces
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {module:model/InstanceResize} opts.instanceResize 
     * @param {module:api/InstancesApi~resizeInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    resizeInstance(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['instanceResize'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling resizeInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/instances/{id}/resize', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the restartInstance operation.
     * @callback module:api/InstancesApi~restartInstanceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Restart an instance
     * This will restart all containers running within an instance. This includes rebuilding the environment variables and applying settings to the docker containers.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/InstancesApi~restartInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    restartInstance(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling restartInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/instances/{id}/restart', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the revertSnapshotInstance operation.
     * @callback module:api/InstancesApi~revertSnapshotInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Revert Instance to Snapshot
     * It is possible to restore an Instance to a snapshot.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Number} snapshotId Snapshot ID
     * @param {module:api/InstancesApi~revertSnapshotInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    revertSnapshotInstance(id, snapshotId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling revertSnapshotInstance");
      }
      // verify the required parameter 'snapshotId' is set
      if (snapshotId === undefined || snapshotId === null) {
        throw new Error("Missing the required parameter 'snapshotId' when calling revertSnapshotInstance");
      }

      let pathParams = {
        'id': id,
        'snapshotId': snapshotId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/instances/{id}/revert-snapshot/{snapshotId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the runWorkflowInstance operation.
     * @callback module:api/InstancesApi~runWorkflowInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Run Workflow on an Instance
     * This will run a provisioning workflow on all containers in an instance.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {Number} opts.workflowId ID of the workflow to execute
     * @param {String} opts.workflowName Name of the workflow to execute
     * @param {module:model/InstanceWorkflow} opts.instanceWorkflow 
     * @param {module:api/InstancesApi~runWorkflowInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    runWorkflowInstance(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['instanceWorkflow'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling runWorkflowInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'workflowId': opts['workflowId'],
        'workflowName': opts['workflowName']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/instances/{id}/workflow', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setApplyInstance operation.
     * @callback module:api/InstancesApi~setApplyInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Apply State of an Instance
     * This endpoint provides a way to apply the state of an instance. This action only applies to Terraform, CloudFormation and ARM and will return an HTTP 400 error for other types.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject91} opts.inlineObject91 
     * @param {module:api/InstancesApi~setApplyInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    setApplyInstance(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject91'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setApplyInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/instances/{id}/apply', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setInstanceSecurityGroups operation.
     * @callback module:api/InstancesApi~setInstanceSecurityGroupsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set Security Groups for an Instance
     * Set Security Groups for an Instance
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject94} opts.inlineObject94 
     * @param {module:api/InstancesApi~setInstanceSecurityGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    setInstanceSecurityGroups(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject94'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setInstanceSecurityGroups");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/instances/{id}/security-groups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the snapshotInstance operation.
     * @callback module:api/InstancesApi~snapshotInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Snapshot an Instance
     * This endpoint will create a snapshot of an instance. This is done asychronously, so the ID of the snapshot is not returned.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {module:model/InstanceSnapshot} opts.instanceSnapshot 
     * @param {module:api/InstancesApi~snapshotInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    snapshotInstance(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['instanceSnapshot'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling snapshotInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/instances/{id}/snapshot', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the snapshotsInstance operation.
     * @callback module:api/InstancesApi~snapshotsInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InstanceSnapshots} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of snapshots for an Instance
     * Get list of snapshots for an Instance
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/InstancesApi~snapshotsInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InstanceSnapshots}
     */
    snapshotsInstance(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling snapshotsInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InstanceSnapshots;
      return this.apiClient.callApi(
        '/api/instances/{id}/snapshots', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startInstance operation.
     * @callback module:api/InstancesApi~startInstanceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start an instance
     * This will start all containers running within an instance.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/InstancesApi~startInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    startInstance(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling startInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/instances/{id}/start', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopInstance operation.
     * @callback module:api/InstancesApi~stopInstanceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stop an instance
     * This will stop all containers running within an instance.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/InstancesApi~stopInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    stopInstance(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling stopInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/instances/{id}/stop', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the suspendInstance operation.
     * @callback module:api/InstancesApi~suspendInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Suspend an instance
     * This will suspend all containers in the instance.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/InstancesApi~suspendInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    suspendInstance(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling suspendInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/instances/{id}/suspend', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the unlockInstance operation.
     * @callback module:api/InstancesApi~unlockInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unlock an Instance
     * This will unlock the instance.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/InstancesApi~unlockInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    unlockInstance(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling unlockInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/instances/{id}/unlock', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateInstance operation.
     * @callback module:api/InstancesApi~updateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updating an Instance
     * Updating an Instance
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {module:model/InstanceUpdate} opts.instanceUpdate 
     * @param {module:api/InstancesApi~updateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateInstance(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['instanceUpdate'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/instances/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateInstanceNetworkInterface operation.
     * @callback module:api/InstancesApi~updateInstanceNetworkInterfaceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updating a label for an Instance's Network
     * Updating an Instance's Network's Label
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Number} networkInterfaceId NetworkInterface (ComputeServerInterface) ID of the Object being created or referenced
     * @param {Object} opts Optional parameters
     * @param {module:model/NetworkInterfaceUpdate} opts.networkInterfaceUpdate 
     * @param {module:api/InstancesApi~updateInstanceNetworkInterfaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateInstanceNetworkInterface(id, networkInterfaceId, opts, callback) {
      opts = opts || {};
      let postBody = opts['networkInterfaceUpdate'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateInstanceNetworkInterface");
      }
      // verify the required parameter 'networkInterfaceId' is set
      if (networkInterfaceId === undefined || networkInterfaceId === null) {
        throw new Error("Missing the required parameter 'networkInterfaceId' when calling updateInstanceNetworkInterface");
      }

      let pathParams = {
        'id': id,
        'networkInterfaceId': networkInterfaceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/instances/{id}/networkInterfaces/{networkInterfaceId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateInstanceSchedule operation.
     * @callback module:api/InstancesApi~updateInstanceScheduleCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updating an Instance Schedule
     * This endpoint provides updating of an instance schedule
     * @param {Number} id Instance ID
     * @param {Number} scheduleId Instance Schedule ID
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject97} opts.inlineObject97 
     * @param {module:api/InstancesApi~updateInstanceScheduleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateInstanceSchedule(id, scheduleId, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject97'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateInstanceSchedule");
      }
      // verify the required parameter 'scheduleId' is set
      if (scheduleId === undefined || scheduleId === null) {
        throw new Error("Missing the required parameter 'scheduleId' when calling updateInstanceSchedule");
      }

      let pathParams = {
        'id': id,
        'scheduleId': scheduleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/instances/{id}/schedules/{scheduleId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateInstanceThreshold operation.
     * @callback module:api/InstancesApi~updateInstanceThresholdCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an Instance Scale Threshold
     * Updates the scale threshold settings for a specific instance 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject95} opts.inlineObject95 
     * @param {module:api/InstancesApi~updateInstanceThresholdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateInstanceThreshold(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject95'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateInstanceThreshold");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/instances/{id}/threshold', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateWikiInstance operation.
     * @callback module:api/InstancesApi~updateWikiInstanceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an Instance Wiki Page
     * Updates an instance Wiki page. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject270} opts.inlineObject270 
     * @param {module:api/InstancesApi~updateWikiInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateWikiInstance(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject270'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateWikiInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/instances/{id}/wiki', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
