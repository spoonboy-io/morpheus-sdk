/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DefaultError from '../model/DefaultError';
import InlineObject139 from '../model/InlineObject139';
import InlineObject140 from '../model/InlineObject140';
import InlineResponse20084 from '../model/InlineResponse20084';
import Model200Success from '../model/Model200Success';

/**
* LogSettings service.
* @module api/LogSettingsApi
* @version 6.2.1
*/
export default class LogSettingsApi {

    /**
    * Constructs a new LogSettingsApi. 
    * @alias module:api/LogSettingsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addLogSettingsSyslogRules operation.
     * @callback module:api/LogSettingsApi~addLogSettingsSyslogRulesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a New Syslog Rule
     * Creates a new syslog rule. This command will also update existing syslog rule by specified name if already exists
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject140} opts.inlineObject140 
     * @param {module:api/LogSettingsApi~addLogSettingsSyslogRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    addLogSettingsSyslogRules(opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject140'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/log-settings/syslog-rules', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteLogSettingsSyslogRules operation.
     * @callback module:api/LogSettingsApi~deleteLogSettingsSyslogRulesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Specific Syslog Rule
     * Will delete the syslog rule matching the specified name.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/LogSettingsApi~deleteLogSettingsSyslogRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    deleteLogSettingsSyslogRules(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteLogSettingsSyslogRules");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/log-settings/syslog-rules/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listLogSettings operation.
     * @callback module:api/LogSettingsApi~listLogSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20084} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List All Log Settings
     * This endpoint retrieves log settings.
     * @param {module:api/LogSettingsApi~listLogSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20084}
     */
    listLogSettings(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20084;
      return this.apiClient.callApi(
        '/api/log-settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateLogSettings operation.
     * @callback module:api/LogSettingsApi~updateLogSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Log Settings
     * Update Log Settings
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject139} opts.inlineObject139 
     * @param {module:api/LogSettingsApi~updateLogSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    updateLogSettings(opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject139'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/log-settings', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
