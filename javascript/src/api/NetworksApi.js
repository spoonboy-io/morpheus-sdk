/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DefaultError from '../model/DefaultError';
import InlineObject142 from '../model/InlineObject142';
import InlineObject143 from '../model/InlineObject143';
import InlineObject144 from '../model/InlineObject144';
import InlineObject145 from '../model/InlineObject145';
import InlineObject146 from '../model/InlineObject146';
import InlineObject147 from '../model/InlineObject147';
import InlineObject148 from '../model/InlineObject148';
import InlineObject149 from '../model/InlineObject149';
import InlineObject150 from '../model/InlineObject150';
import InlineObject151 from '../model/InlineObject151';
import InlineObject152 from '../model/InlineObject152';
import InlineObject153 from '../model/InlineObject153';
import InlineObject154 from '../model/InlineObject154';
import InlineObject155 from '../model/InlineObject155';
import InlineObject156 from '../model/InlineObject156';
import InlineObject157 from '../model/InlineObject157';
import InlineObject158 from '../model/InlineObject158';
import InlineObject159 from '../model/InlineObject159';
import InlineObject160 from '../model/InlineObject160';
import InlineObject161 from '../model/InlineObject161';
import InlineObject162 from '../model/InlineObject162';
import InlineObject163 from '../model/InlineObject163';
import InlineObject164 from '../model/InlineObject164';
import InlineObject165 from '../model/InlineObject165';
import InlineObject166 from '../model/InlineObject166';
import InlineObject167 from '../model/InlineObject167';
import InlineObject168 from '../model/InlineObject168';
import InlineObject169 from '../model/InlineObject169';
import InlineObject170 from '../model/InlineObject170';
import InlineObject171 from '../model/InlineObject171';
import InlineObject172 from '../model/InlineObject172';
import InlineObject173 from '../model/InlineObject173';
import InlineObject174 from '../model/InlineObject174';
import InlineObject175 from '../model/InlineObject175';
import InlineObject176 from '../model/InlineObject176';
import InlineObject177 from '../model/InlineObject177';
import InlineObject178 from '../model/InlineObject178';
import InlineObject179 from '../model/InlineObject179';
import InlineObject180 from '../model/InlineObject180';
import InlineObject181 from '../model/InlineObject181';
import InlineObject244 from '../model/InlineObject244';
import InlineObject245 from '../model/InlineObject245';
import InlineResponse200100 from '../model/InlineResponse200100';
import InlineResponse200101 from '../model/InlineResponse200101';
import InlineResponse200102 from '../model/InlineResponse200102';
import InlineResponse200103 from '../model/InlineResponse200103';
import InlineResponse200104 from '../model/InlineResponse200104';
import InlineResponse200105 from '../model/InlineResponse200105';
import InlineResponse200106 from '../model/InlineResponse200106';
import InlineResponse200107 from '../model/InlineResponse200107';
import InlineResponse200108 from '../model/InlineResponse200108';
import InlineResponse200109 from '../model/InlineResponse200109';
import InlineResponse200110 from '../model/InlineResponse200110';
import InlineResponse200111 from '../model/InlineResponse200111';
import InlineResponse200112 from '../model/InlineResponse200112';
import InlineResponse200113 from '../model/InlineResponse200113';
import InlineResponse200114 from '../model/InlineResponse200114';
import InlineResponse200115 from '../model/InlineResponse200115';
import InlineResponse200116 from '../model/InlineResponse200116';
import InlineResponse200117 from '../model/InlineResponse200117';
import InlineResponse200118 from '../model/InlineResponse200118';
import InlineResponse200119 from '../model/InlineResponse200119';
import InlineResponse200120 from '../model/InlineResponse200120';
import InlineResponse200121 from '../model/InlineResponse200121';
import InlineResponse200154 from '../model/InlineResponse200154';
import InlineResponse20086 from '../model/InlineResponse20086';
import InlineResponse20087 from '../model/InlineResponse20087';
import InlineResponse20088 from '../model/InlineResponse20088';
import InlineResponse20089 from '../model/InlineResponse20089';
import InlineResponse20090 from '../model/InlineResponse20090';
import InlineResponse20091 from '../model/InlineResponse20091';
import InlineResponse20092 from '../model/InlineResponse20092';
import InlineResponse20093 from '../model/InlineResponse20093';
import InlineResponse20094 from '../model/InlineResponse20094';
import InlineResponse20095 from '../model/InlineResponse20095';
import InlineResponse20096 from '../model/InlineResponse20096';
import InlineResponse20097 from '../model/InlineResponse20097';
import InlineResponse20098 from '../model/InlineResponse20098';
import InlineResponse20099 from '../model/InlineResponse20099';
import Model200Success from '../model/Model200Success';
import Model400Error from '../model/Model400Error';
import Model401Error from '../model/Model401Error';
import Model403Error from '../model/Model403Error';
import Model404Error from '../model/Model404Error';
import Model405Error from '../model/Model405Error';
import Model406Error from '../model/Model406Error';
import Model410Error from '../model/Model410Error';
import Model429Error from '../model/Model429Error';
import Model500Error from '../model/Model500Error';
import Model503Error from '../model/Model503Error';
import SuccessId from '../model/SuccessId';

/**
* Networks service.
* @module api/NetworksApi
* @version 6.2.1
*/
export default class NetworksApi {

    /**
    * Constructs a new NetworksApi. 
    * @alias module:api/NetworksApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createNetworkDhcpRelay operation.
     * @callback module:api/NetworksApi~createNetworkDhcpRelayCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessId} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Network DHCP Relay
     * Create a Network DHCP Relay. 
     * @param {Number} serverId Server ID
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject167} opts.inlineObject167 
     * @param {module:api/NetworksApi~createNetworkDhcpRelayCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessId}
     */
    createNetworkDhcpRelay(serverId, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject167'];
      // verify the required parameter 'serverId' is set
      if (serverId === undefined || serverId === null) {
        throw new Error("Missing the required parameter 'serverId' when calling createNetworkDhcpRelay");
      }

      let pathParams = {
        'serverId': serverId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SuccessId;
      return this.apiClient.callApi(
        '/api/networks/servers/{serverId}/dhcp-relays', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworkDhcpServer operation.
     * @callback module:api/NetworksApi~createNetworkDhcpServerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessId} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Network DHCP Server
     * Create a Network DHCP Server. 
     * @param {Number} serverId Server ID
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject169} opts.inlineObject169 
     * @param {module:api/NetworksApi~createNetworkDhcpServerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessId}
     */
    createNetworkDhcpServer(serverId, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject169'];
      // verify the required parameter 'serverId' is set
      if (serverId === undefined || serverId === null) {
        throw new Error("Missing the required parameter 'serverId' when calling createNetworkDhcpServer");
      }

      let pathParams = {
        'serverId': serverId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SuccessId;
      return this.apiClient.callApi(
        '/api/networks/servers/{serverId}/dhcp-servers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworkDomain operation.
     * @callback module:api/NetworksApi~createNetworkDomainCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200109} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Network Domain
     * Create a Network Domain. 
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject163} opts.inlineObject163 
     * @param {module:api/NetworksApi~createNetworkDomainCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200109}
     */
    createNetworkDomain(opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject163'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse200109;
      return this.apiClient.callApi(
        '/api/networks/domains', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworkFirewallRule operation.
     * @callback module:api/NetworksApi~createNetworkFirewallRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessId} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Network Firewall Rule
     * Use this command to create a network firewall rule. 
     * @param {Number} serverId Server ID
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject172} opts.inlineObject172 
     * @param {module:api/NetworksApi~createNetworkFirewallRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessId}
     */
    createNetworkFirewallRule(serverId, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject172'];
      // verify the required parameter 'serverId' is set
      if (serverId === undefined || serverId === null) {
        throw new Error("Missing the required parameter 'serverId' when calling createNetworkFirewallRule");
      }

      let pathParams = {
        'serverId': serverId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SuccessId;
      return this.apiClient.callApi(
        '/api/networks/servers/{serverId}/firewall-rules', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworkFirewallRuleGroup operation.
     * @callback module:api/NetworksApi~createNetworkFirewallRuleGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessId} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Network Firewall Rule Group
     * Use this command to create a network firewall rule group. 
     * @param {Number} serverId Server ID
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject174} opts.inlineObject174 
     * @param {module:api/NetworksApi~createNetworkFirewallRuleGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessId}
     */
    createNetworkFirewallRuleGroup(serverId, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject174'];
      // verify the required parameter 'serverId' is set
      if (serverId === undefined || serverId === null) {
        throw new Error("Missing the required parameter 'serverId' when calling createNetworkFirewallRuleGroup");
      }

      let pathParams = {
        'serverId': serverId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SuccessId;
      return this.apiClient.callApi(
        '/api/networks/servers/{serverId}/firewall-rule-groups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworkGroup operation.
     * @callback module:api/NetworksApi~createNetworkGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessId} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Network Group
     * Use this command to create a network group. 
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject146} opts.inlineObject146 
     * @param {module:api/NetworksApi~createNetworkGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessId}
     */
    createNetworkGroup(opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject146'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SuccessId;
      return this.apiClient.callApi(
        '/api/networks/groups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworkPool operation.
     * @callback module:api/NetworksApi~createNetworkPoolCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200106} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Network Pool
     * Create a Network Pool. 
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject160} opts.inlineObject160 
     * @param {module:api/NetworksApi~createNetworkPoolCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200106}
     */
    createNetworkPool(opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject160'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse200106;
      return this.apiClient.callApi(
        '/api/networks/pools', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworkPoolIp operation.
     * @callback module:api/NetworksApi~createNetworkPoolIpCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200107} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Network Pool IP Address
     * Create an IP Address for a Specific Network Pool 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject162} opts.inlineObject162 
     * @param {module:api/NetworksApi~createNetworkPoolIpCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200107}
     */
    createNetworkPoolIp(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject162'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling createNetworkPoolIp");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse200107;
      return this.apiClient.callApi(
        '/api/networks/pools/{id}/ips', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworkPoolServer operation.
     * @callback module:api/NetworksApi~createNetworkPoolServerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Network Pool Server
     * This endpoint allows creating a Network Pool Server. Only certain types of integrations support creating and deleting network pool servers, such as Bluecat, Infoblox, phpIPAM, and Solar Winds. Configuration options vary by type. Note that creating a pool server will automatically create and associate the corresponding network integration object, but management is done via the network pool server object.
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject180} opts.inlineObject180 
     * @param {module:api/NetworksApi~createNetworkPoolServerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    createNetworkPoolServer(opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject180'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/networks/pool-servers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworkProxy operation.
     * @callback module:api/NetworksApi~createNetworkProxyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200110} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Network Proxy
     * Create a Network Proxy. 
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject165} opts.inlineObject165 
     * @param {module:api/NetworksApi~createNetworkProxyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200110}
     */
    createNetworkProxy(opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject165'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse200110;
      return this.apiClient.callApi(
        '/api/networks/proxies', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworkRouter operation.
     * @callback module:api/NetworksApi~createNetworkRouterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessId} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Network Router
     * Use this command to create a network router. 
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject148} opts.inlineObject148 
     * @param {module:api/NetworksApi~createNetworkRouterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessId}
     */
    createNetworkRouter(opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject148'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SuccessId;
      return this.apiClient.callApi(
        '/api/networks/routers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworkRouterBgpNeighbor operation.
     * @callback module:api/NetworksApi~createNetworkRouterBgpNeighborCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessId} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Network Router BGP Neighbor
     * Use this command to create a BGP Neighbor for an existing network router.
     * @param {Number} routerId Router ID
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject150} opts.inlineObject150 
     * @param {module:api/NetworksApi~createNetworkRouterBgpNeighborCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessId}
     */
    createNetworkRouterBgpNeighbor(routerId, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject150'];
      // verify the required parameter 'routerId' is set
      if (routerId === undefined || routerId === null) {
        throw new Error("Missing the required parameter 'routerId' when calling createNetworkRouterBgpNeighbor");
      }

      let pathParams = {
        'routerId': routerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SuccessId;
      return this.apiClient.callApi(
        '/api/networks/routers/{routerId}/bgp-neighbors', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworkRouterFirewallRule operation.
     * @callback module:api/NetworksApi~createNetworkRouterFirewallRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessId} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Network Router Firewall Rule
     * Use this command to create a firewall rule for an existing network router. 
     * @param {Number} routerId Router ID
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject152} opts.inlineObject152 
     * @param {module:api/NetworksApi~createNetworkRouterFirewallRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessId}
     */
    createNetworkRouterFirewallRule(routerId, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject152'];
      // verify the required parameter 'routerId' is set
      if (routerId === undefined || routerId === null) {
        throw new Error("Missing the required parameter 'routerId' when calling createNetworkRouterFirewallRule");
      }

      let pathParams = {
        'routerId': routerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SuccessId;
      return this.apiClient.callApi(
        '/api/networks/routers/{routerId}/firewall-rules', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworkRouterFirewallRuleGroup operation.
     * @callback module:api/NetworksApi~createNetworkRouterFirewallRuleGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessId} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Network Router Firewall Rule Group
     * Use this command to create a network firewall rule group. 
     * @param {Number} routerId Router ID
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject154} opts.inlineObject154 
     * @param {module:api/NetworksApi~createNetworkRouterFirewallRuleGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessId}
     */
    createNetworkRouterFirewallRuleGroup(routerId, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject154'];
      // verify the required parameter 'routerId' is set
      if (routerId === undefined || routerId === null) {
        throw new Error("Missing the required parameter 'routerId' when calling createNetworkRouterFirewallRuleGroup");
      }

      let pathParams = {
        'routerId': routerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SuccessId;
      return this.apiClient.callApi(
        '/api/networks/routers/{routerId}/firewall-rule-groups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworkRouterNat operation.
     * @callback module:api/NetworksApi~createNetworkRouterNatCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessId} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Network Router NAT
     * Use this command to create a NAT for an existing network router.
     * @param {Number} routerId Router ID
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject156} opts.inlineObject156 
     * @param {module:api/NetworksApi~createNetworkRouterNatCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessId}
     */
    createNetworkRouterNat(routerId, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject156'];
      // verify the required parameter 'routerId' is set
      if (routerId === undefined || routerId === null) {
        throw new Error("Missing the required parameter 'routerId' when calling createNetworkRouterNat");
      }

      let pathParams = {
        'routerId': routerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SuccessId;
      return this.apiClient.callApi(
        '/api/networks/routers/{routerId}/nats', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworkRouterRoute operation.
     * @callback module:api/NetworksApi~createNetworkRouterRouteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessId} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Network Router Route
     * Use this command to create a route for an existing network router.
     * @param {Number} routerId Router ID
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject159} opts.inlineObject159 
     * @param {module:api/NetworksApi~createNetworkRouterRouteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessId}
     */
    createNetworkRouterRoute(routerId, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject159'];
      // verify the required parameter 'routerId' is set
      if (routerId === undefined || routerId === null) {
        throw new Error("Missing the required parameter 'routerId' when calling createNetworkRouterRoute");
      }

      let pathParams = {
        'routerId': routerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SuccessId;
      return this.apiClient.callApi(
        '/api/networks/routers/{routerId}/routes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworkServerGroup operation.
     * @callback module:api/NetworksApi~createNetworkServerGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessId} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Network Server Group
     * Use this command to create a network server group. Note: Only available for NSX-T network integrations. 
     * @param {Number} serverId Server ID
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject176} opts.inlineObject176 
     * @param {module:api/NetworksApi~createNetworkServerGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessId}
     */
    createNetworkServerGroup(serverId, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject176'];
      // verify the required parameter 'serverId' is set
      if (serverId === undefined || serverId === null) {
        throw new Error("Missing the required parameter 'serverId' when calling createNetworkServerGroup");
      }

      let pathParams = {
        'serverId': serverId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SuccessId;
      return this.apiClient.callApi(
        '/api/networks/servers/{serverId}/groups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworkTransportZone operation.
     * @callback module:api/NetworksApi~createNetworkTransportZoneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessId} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Network Transport Zone
     * Use this command to create a network transport zone.
     * @param {Number} serverId Server ID
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject178} opts.inlineObject178 
     * @param {module:api/NetworksApi~createNetworkTransportZoneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessId}
     */
    createNetworkTransportZone(serverId, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject178'];
      // verify the required parameter 'serverId' is set
      if (serverId === undefined || serverId === null) {
        throw new Error("Missing the required parameter 'serverId' when calling createNetworkTransportZone");
      }

      let pathParams = {
        'serverId': serverId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SuccessId;
      return this.apiClient.callApi(
        '/api/networks/servers/{serverId}/scopes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworks operation.
     * @callback module:api/NetworksApi~createNetworksCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Network
     * This endpoint allows creating a Network. Only certain types of clouds support creating and deleting networks. Configuration options vary by Network Types.
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject142} opts.inlineObject142 
     * @param {module:api/NetworksApi~createNetworksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createNetworks(opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject142'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/networks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createStaticRoute operation.
     * @callback module:api/NetworksApi~createStaticRouteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessId} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Network Static Route
     * Use this command to create a route for an existing network. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject144} opts.inlineObject144 
     * @param {module:api/NetworksApi~createStaticRouteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessId}
     */
    createStaticRoute(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject144'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling createStaticRoute");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SuccessId;
      return this.apiClient.callApi(
        '/api/networks/{id}/routes', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createSubnet operation.
     * @callback module:api/NetworksApi~createSubnetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200154} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Subnet
     * This endpoint allows creating a Subnet. Only certain types of clouds support creating and deleting subnets. Configuration options vary for each Subnet Type.
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject244} opts.inlineObject244 
     * @param {module:api/NetworksApi~createSubnetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200154}
     */
    createSubnet(opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject244'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse200154;
      return this.apiClient.callApi(
        '/api/subnets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetwork operation.
     * @callback module:api/NetworksApi~deleteNetworkCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Network
     * Will delete a Network from the system and make it no longer usable.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/NetworksApi~deleteNetworkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    deleteNetwork(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteNetwork");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/networks/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkDhcpRelay operation.
     * @callback module:api/NetworksApi~deleteNetworkDhcpRelayCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Network DHCP Relay
     * Will delete a Network DHCP Relay from the system and make it no longer usable.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Number} serverId Server ID
     * @param {module:api/NetworksApi~deleteNetworkDhcpRelayCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    deleteNetworkDhcpRelay(id, serverId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteNetworkDhcpRelay");
      }
      // verify the required parameter 'serverId' is set
      if (serverId === undefined || serverId === null) {
        throw new Error("Missing the required parameter 'serverId' when calling deleteNetworkDhcpRelay");
      }

      let pathParams = {
        'id': id,
        'serverId': serverId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/networks/servers/{serverId}/dhcp-relays/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkDhcpServer operation.
     * @callback module:api/NetworksApi~deleteNetworkDhcpServerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Network DHCP Server
     * Will delete a Network DHCP Server from the system and make it no longer usable.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Number} serverId Server ID
     * @param {module:api/NetworksApi~deleteNetworkDhcpServerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    deleteNetworkDhcpServer(id, serverId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteNetworkDhcpServer");
      }
      // verify the required parameter 'serverId' is set
      if (serverId === undefined || serverId === null) {
        throw new Error("Missing the required parameter 'serverId' when calling deleteNetworkDhcpServer");
      }

      let pathParams = {
        'id': id,
        'serverId': serverId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/networks/servers/{serverId}/dhcp-servers/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkDomain operation.
     * @callback module:api/NetworksApi~deleteNetworkDomainCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Network Domain
     * Will delete a Network Domain from the system and make it no longer usable.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/NetworksApi~deleteNetworkDomainCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    deleteNetworkDomain(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteNetworkDomain");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/networks/domains/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkFirewallRule operation.
     * @callback module:api/NetworksApi~deleteNetworkFirewallRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Network Firewall Rule
     * Will delete a Network Firewall Rule from the system and make it no longer usable.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Number} serverId Server ID
     * @param {module:api/NetworksApi~deleteNetworkFirewallRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    deleteNetworkFirewallRule(id, serverId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteNetworkFirewallRule");
      }
      // verify the required parameter 'serverId' is set
      if (serverId === undefined || serverId === null) {
        throw new Error("Missing the required parameter 'serverId' when calling deleteNetworkFirewallRule");
      }

      let pathParams = {
        'id': id,
        'serverId': serverId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/networks/servers/{serverId}/firewall-rules/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkFirewallRuleGroup operation.
     * @callback module:api/NetworksApi~deleteNetworkFirewallRuleGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Network firewall rule group
     * Will delete a network firewall rule group.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Number} serverId Server ID
     * @param {module:api/NetworksApi~deleteNetworkFirewallRuleGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    deleteNetworkFirewallRuleGroup(id, serverId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteNetworkFirewallRuleGroup");
      }
      // verify the required parameter 'serverId' is set
      if (serverId === undefined || serverId === null) {
        throw new Error("Missing the required parameter 'serverId' when calling deleteNetworkFirewallRuleGroup");
      }

      let pathParams = {
        'id': id,
        'serverId': serverId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/networks/servers/{serverId}/firewall-rule-groups/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkGroup operation.
     * @callback module:api/NetworksApi~deleteNetworkGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Network Group
     * Will delete a Network Group from the system and make it no longer usable.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/NetworksApi~deleteNetworkGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    deleteNetworkGroup(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteNetworkGroup");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/networks/groups/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkPool operation.
     * @callback module:api/NetworksApi~deleteNetworkPoolCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Network Pool
     * Will delete a Network Pool from the system and make it no longer usable.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/NetworksApi~deleteNetworkPoolCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    deleteNetworkPool(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteNetworkPool");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/networks/pools/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkPoolIp operation.
     * @callback module:api/NetworksApi~deleteNetworkPoolIpCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a host record associated with an IP Address for a Specific Network Pool
     * Will delete a host record associated with an IP address for a specific network pool and free up the address
     * @param {Number} networkPoolId Morpheus Network Pool ID of the Object being referenced
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/NetworksApi~deleteNetworkPoolIpCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    deleteNetworkPoolIp(networkPoolId, id, callback) {
      let postBody = null;
      // verify the required parameter 'networkPoolId' is set
      if (networkPoolId === undefined || networkPoolId === null) {
        throw new Error("Missing the required parameter 'networkPoolId' when calling deleteNetworkPoolIp");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteNetworkPoolIp");
      }

      let pathParams = {
        'networkPoolId': networkPoolId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/networks/pools/{networkPoolId}/ips/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkPoolServer operation.
     * @callback module:api/NetworksApi~deleteNetworkPoolServerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Network Pool Server
     * Will delete a Network Pool Server from the system and make it no longer usable.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/NetworksApi~deleteNetworkPoolServerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    deleteNetworkPoolServer(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteNetworkPoolServer");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/networks/pool-servers/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkProxy operation.
     * @callback module:api/NetworksApi~deleteNetworkProxyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Network Proxy
     * Will delete a Network Proxy from the system and make it no longer usable.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/NetworksApi~deleteNetworkProxyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    deleteNetworkProxy(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteNetworkProxy");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/networks/proxies/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkRouter operation.
     * @callback module:api/NetworksApi~deleteNetworkRouterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Network Router
     * Will delete a Network Router from the system and make it no longer usable.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/NetworksApi~deleteNetworkRouterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    deleteNetworkRouter(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteNetworkRouter");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/networks/routers/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkRouterBgpNeighbor operation.
     * @callback module:api/NetworksApi~deleteNetworkRouterBgpNeighborCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Network Router BGP Neighbor
     * Will delete a BGP Neighbor from a network router.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Number} routerId Router ID
     * @param {module:api/NetworksApi~deleteNetworkRouterBgpNeighborCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    deleteNetworkRouterBgpNeighbor(id, routerId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteNetworkRouterBgpNeighbor");
      }
      // verify the required parameter 'routerId' is set
      if (routerId === undefined || routerId === null) {
        throw new Error("Missing the required parameter 'routerId' when calling deleteNetworkRouterBgpNeighbor");
      }

      let pathParams = {
        'id': id,
        'routerId': routerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/networks/routers/{routerId}/bgp-neighbors/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkRouterFirewallRule operation.
     * @callback module:api/NetworksApi~deleteNetworkRouterFirewallRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Network Router Firewall Rule
     * Will delete a firewall rule from a network router.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Number} routerId Router ID
     * @param {module:api/NetworksApi~deleteNetworkRouterFirewallRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    deleteNetworkRouterFirewallRule(id, routerId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteNetworkRouterFirewallRule");
      }
      // verify the required parameter 'routerId' is set
      if (routerId === undefined || routerId === null) {
        throw new Error("Missing the required parameter 'routerId' when calling deleteNetworkRouterFirewallRule");
      }

      let pathParams = {
        'id': id,
        'routerId': routerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/networks/routers/{routerId}/firewall-rules/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkRouterFirewallRuleGroup operation.
     * @callback module:api/NetworksApi~deleteNetworkRouterFirewallRuleGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Network Router firewall rule group
     * Will delete a network router firewall rule group.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Number} routerId Router ID
     * @param {module:api/NetworksApi~deleteNetworkRouterFirewallRuleGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    deleteNetworkRouterFirewallRuleGroup(id, routerId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteNetworkRouterFirewallRuleGroup");
      }
      // verify the required parameter 'routerId' is set
      if (routerId === undefined || routerId === null) {
        throw new Error("Missing the required parameter 'routerId' when calling deleteNetworkRouterFirewallRuleGroup");
      }

      let pathParams = {
        'id': id,
        'routerId': routerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/networks/routers/{routerId}/firewall-rule-groups/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkRouterNat operation.
     * @callback module:api/NetworksApi~deleteNetworkRouterNatCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Network Router NAT
     * Will delete a NAT from a network router.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Number} routerId Router ID
     * @param {module:api/NetworksApi~deleteNetworkRouterNatCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    deleteNetworkRouterNat(id, routerId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteNetworkRouterNat");
      }
      // verify the required parameter 'routerId' is set
      if (routerId === undefined || routerId === null) {
        throw new Error("Missing the required parameter 'routerId' when calling deleteNetworkRouterNat");
      }

      let pathParams = {
        'id': id,
        'routerId': routerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/networks/routers/{routerId}/nats/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkRouterRoute operation.
     * @callback module:api/NetworksApi~deleteNetworkRouterRouteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Network Router Route
     * Will delete a Route from a network router.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Number} routerId Router ID
     * @param {module:api/NetworksApi~deleteNetworkRouterRouteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    deleteNetworkRouterRoute(id, routerId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteNetworkRouterRoute");
      }
      // verify the required parameter 'routerId' is set
      if (routerId === undefined || routerId === null) {
        throw new Error("Missing the required parameter 'routerId' when calling deleteNetworkRouterRoute");
      }

      let pathParams = {
        'id': id,
        'routerId': routerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/networks/routers/{routerId}/routes/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkServerGroup operation.
     * @callback module:api/NetworksApi~deleteNetworkServerGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Network Server Group
     * Will delete a Network Server Group from the system and make it no longer usable. Note: Only available for NSX-T network integrations. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Number} serverId Server ID
     * @param {module:api/NetworksApi~deleteNetworkServerGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    deleteNetworkServerGroup(id, serverId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteNetworkServerGroup");
      }
      // verify the required parameter 'serverId' is set
      if (serverId === undefined || serverId === null) {
        throw new Error("Missing the required parameter 'serverId' when calling deleteNetworkServerGroup");
      }

      let pathParams = {
        'id': id,
        'serverId': serverId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/networks/servers/{serverId}/groups/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkTransportZone operation.
     * @callback module:api/NetworksApi~deleteNetworkTransportZoneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Network Transport Zone
     * Will delete a Network Transport Zone from the system and make it no longer usable.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Number} serverId Server ID
     * @param {module:api/NetworksApi~deleteNetworkTransportZoneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    deleteNetworkTransportZone(id, serverId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteNetworkTransportZone");
      }
      // verify the required parameter 'serverId' is set
      if (serverId === undefined || serverId === null) {
        throw new Error("Missing the required parameter 'serverId' when calling deleteNetworkTransportZone");
      }

      let pathParams = {
        'id': id,
        'serverId': serverId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/networks/servers/{serverId}/scopes/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteStaticRoute operation.
     * @callback module:api/NetworksApi~deleteStaticRouteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Network Static Route
     * Will delete a route from a network.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Number} routeId The ID of the route
     * @param {module:api/NetworksApi~deleteStaticRouteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    deleteStaticRoute(id, routeId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteStaticRoute");
      }
      // verify the required parameter 'routeId' is set
      if (routeId === undefined || routeId === null) {
        throw new Error("Missing the required parameter 'routeId' when calling deleteStaticRoute");
      }

      let pathParams = {
        'id': id,
        'routeId': routeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/networks/{id}/routes/{routeId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSubnet operation.
     * @callback module:api/NetworksApi~deleteSubnetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Subnet
     * Will delete a Subnet from the system and make it no longer usable.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/NetworksApi~deleteSubnetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    deleteSubnet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteSubnet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/subnets/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllNetworkFloatingIps operation.
     * @callback module:api/NetworksApi~getAllNetworkFloatingIpsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Floating IPs
     * This endpoint retrieves all network floating IPs associated with the account. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.phrase Search phrase for partial matches on name or description
     * @param {String} opts.ipAddress Filter by IP Address
     * @param {module:model/String} opts.ipStatus Filter by IP Status
     * @param {Number} opts.zoneId Filter by Cloud ID
     * @param {Number} opts.serverId Filter by Server ID
     * @param {module:api/NetworksApi~getAllNetworkFloatingIpsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getAllNetworkFloatingIps(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'phrase': opts['phrase'],
        'ipAddress': opts['ipAddress'],
        'ipStatus': opts['ipStatus'],
        'zoneId': opts['zoneId'],
        'serverId': opts['serverId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/networks/floating-ips', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetwork operation.
     * @callback module:api/NetworksApi~getNetworkCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20087} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Specific Network
     * This endpoint retrieves a specific Network. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/NetworksApi~getNetworkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20087}
     */
    getNetwork(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getNetwork");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20087;
      return this.apiClient.callApi(
        '/api/networks/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkDhcpRelay operation.
     * @callback module:api/NetworksApi~getNetworkDhcpRelayCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200112} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Specific Network DHCP Relay
     * This endpoint retrieves a specific Network DHCP Relay. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Number} serverId Server ID
     * @param {module:api/NetworksApi~getNetworkDhcpRelayCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200112}
     */
    getNetworkDhcpRelay(id, serverId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getNetworkDhcpRelay");
      }
      // verify the required parameter 'serverId' is set
      if (serverId === undefined || serverId === null) {
        throw new Error("Missing the required parameter 'serverId' when calling getNetworkDhcpRelay");
      }

      let pathParams = {
        'id': id,
        'serverId': serverId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200112;
      return this.apiClient.callApi(
        '/api/networks/servers/{serverId}/dhcp-relays/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkDhcpRelays operation.
     * @callback module:api/NetworksApi~getNetworkDhcpRelaysCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all Network DHCP Relays for Network Relay
     * This endpoint retrieves all Network DHCP Relays for a specified Network Service. 
     * @param {Number} serverId Server ID
     * @param {Object} opts Optional parameters
     * @param {Number} opts.max Maximum number of records to return, -1 can be used to fetch all records (default to 25)
     * @param {Number} opts.offset Offset records, the number of records to skip, for paginating requests (default to 0)
     * @param {String} opts.sort Sort order, the name of the property to sort by (default to 'name')
     * @param {module:model/String} opts.direction Sort direction, use 'desc' to reverse sort (default to 'asc')
     * @param {String} opts.phrase Search phrase for partial matches on name or description
     * @param {module:api/NetworksApi~getNetworkDhcpRelaysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkDhcpRelays(serverId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serverId' is set
      if (serverId === undefined || serverId === null) {
        throw new Error("Missing the required parameter 'serverId' when calling getNetworkDhcpRelays");
      }

      let pathParams = {
        'serverId': serverId
      };
      let queryParams = {
        'max': opts['max'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'direction': opts['direction'],
        'phrase': opts['phrase']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/networks/servers/{serverId}/dhcp-relays', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkDhcpServer operation.
     * @callback module:api/NetworksApi~getNetworkDhcpServerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200113} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Specific Network DHCP Server
     * This endpoint retrieves a specific Network DHCP Server. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Number} serverId Server ID
     * @param {module:api/NetworksApi~getNetworkDhcpServerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200113}
     */
    getNetworkDhcpServer(id, serverId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getNetworkDhcpServer");
      }
      // verify the required parameter 'serverId' is set
      if (serverId === undefined || serverId === null) {
        throw new Error("Missing the required parameter 'serverId' when calling getNetworkDhcpServer");
      }

      let pathParams = {
        'id': id,
        'serverId': serverId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200113;
      return this.apiClient.callApi(
        '/api/networks/servers/{serverId}/dhcp-servers/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkDhcpServers operation.
     * @callback module:api/NetworksApi~getNetworkDhcpServersCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all Network DHCP Servers for Network Server
     * This endpoint retrieves all Network DHCP Servers for a specified Network Service. 
     * @param {Number} serverId Server ID
     * @param {Object} opts Optional parameters
     * @param {Number} opts.max Maximum number of records to return, -1 can be used to fetch all records (default to 25)
     * @param {Number} opts.offset Offset records, the number of records to skip, for paginating requests (default to 0)
     * @param {String} opts.sort Sort order, the name of the property to sort by (default to 'name')
     * @param {module:model/String} opts.direction Sort direction, use 'desc' to reverse sort (default to 'asc')
     * @param {String} opts.phrase Search phrase for partial matches on name or description
     * @param {module:api/NetworksApi~getNetworkDhcpServersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkDhcpServers(serverId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serverId' is set
      if (serverId === undefined || serverId === null) {
        throw new Error("Missing the required parameter 'serverId' when calling getNetworkDhcpServers");
      }

      let pathParams = {
        'serverId': serverId
      };
      let queryParams = {
        'max': opts['max'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'direction': opts['direction'],
        'phrase': opts['phrase']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/networks/servers/{serverId}/dhcp-servers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkDomain operation.
     * @callback module:api/NetworksApi~getNetworkDomainCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200109} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Specific Network Domain
     * This endpoint retrieves a specific Network Domain. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/NetworksApi~getNetworkDomainCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200109}
     */
    getNetworkDomain(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getNetworkDomain");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200109;
      return this.apiClient.callApi(
        '/api/networks/domains/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkDomains operation.
     * @callback module:api/NetworksApi~getNetworkDomainsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all Network Domains
     * This endpoint retrieves all Network Domains associated with the account. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter by name, wildcard may be specified as %, eg. example-%
     * @param {String} opts.phrase Search phrase for partial matches on name or description
     * @param {module:api/NetworksApi~getNetworkDomainsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkDomains(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name'],
        'phrase': opts['phrase']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/networks/domains', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkEdgeCluster operation.
     * @callback module:api/NetworksApi~getNetworkEdgeClusterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200114} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Specific Network Edge Cluster
     * This endpoint retrieves a specific network Edge Cluster. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Number} serverId Server ID
     * @param {module:api/NetworksApi~getNetworkEdgeClusterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200114}
     */
    getNetworkEdgeCluster(id, serverId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getNetworkEdgeCluster");
      }
      // verify the required parameter 'serverId' is set
      if (serverId === undefined || serverId === null) {
        throw new Error("Missing the required parameter 'serverId' when calling getNetworkEdgeCluster");
      }

      let pathParams = {
        'id': id,
        'serverId': serverId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200114;
      return this.apiClient.callApi(
        '/api/networks/servers/{serverId}/edge-clusters/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkEdgeClusters operation.
     * @callback module:api/NetworksApi~getNetworkEdgeClustersCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all Network Edge Clusters for Network Server
     * This endpoint retrieves all Network Edge Clusters for a specified Network Service. 
     * @param {Number} serverId Server ID
     * @param {Object} opts Optional parameters
     * @param {Number} opts.max Maximum number of records to return, -1 can be used to fetch all records (default to 25)
     * @param {Number} opts.offset Offset records, the number of records to skip, for paginating requests (default to 0)
     * @param {String} opts.sort Sort order, the name of the property to sort by (default to 'name')
     * @param {module:model/String} opts.direction Sort direction, use 'desc' to reverse sort (default to 'asc')
     * @param {String} opts.phrase Search phrase for partial matches on name or description
     * @param {module:api/NetworksApi~getNetworkEdgeClustersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkEdgeClusters(serverId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serverId' is set
      if (serverId === undefined || serverId === null) {
        throw new Error("Missing the required parameter 'serverId' when calling getNetworkEdgeClusters");
      }

      let pathParams = {
        'serverId': serverId
      };
      let queryParams = {
        'max': opts['max'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'direction': opts['direction'],
        'phrase': opts['phrase']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/networks/servers/{serverId}/edge-clusters', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkFirewallRule operation.
     * @callback module:api/NetworksApi~getNetworkFirewallRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200115} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Specific Network Firewall Rule
     * This endpoint retrieves a specific Network Firewall Rule. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Number} serverId Server ID
     * @param {module:api/NetworksApi~getNetworkFirewallRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200115}
     */
    getNetworkFirewallRule(id, serverId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getNetworkFirewallRule");
      }
      // verify the required parameter 'serverId' is set
      if (serverId === undefined || serverId === null) {
        throw new Error("Missing the required parameter 'serverId' when calling getNetworkFirewallRule");
      }

      let pathParams = {
        'id': id,
        'serverId': serverId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200115;
      return this.apiClient.callApi(
        '/api/networks/servers/{serverId}/firewall-rules/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkFirewallRuleGroup operation.
     * @callback module:api/NetworksApi~getNetworkFirewallRuleGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200116} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Specific Network Firewall Rule Group
     * This endpoint retrieves a specific Network Firewall Rule Group. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Number} serverId Server ID
     * @param {module:api/NetworksApi~getNetworkFirewallRuleGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200116}
     */
    getNetworkFirewallRuleGroup(id, serverId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getNetworkFirewallRuleGroup");
      }
      // verify the required parameter 'serverId' is set
      if (serverId === undefined || serverId === null) {
        throw new Error("Missing the required parameter 'serverId' when calling getNetworkFirewallRuleGroup");
      }

      let pathParams = {
        'id': id,
        'serverId': serverId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200116;
      return this.apiClient.callApi(
        '/api/networks/servers/{serverId}/firewall-rule-groups/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkFirewallRuleGroups operation.
     * @callback module:api/NetworksApi~getNetworkFirewallRuleGroupsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all Network Firewall Rule Groups for Network Server
     * This endpoint retrieves all Network Firewall Rule Groups for a specified Network Service. 
     * @param {Number} serverId Server ID
     * @param {Object} opts Optional parameters
     * @param {Number} opts.max Maximum number of records to return, -1 can be used to fetch all records (default to 25)
     * @param {Number} opts.offset Offset records, the number of records to skip, for paginating requests (default to 0)
     * @param {String} opts.sort Sort order, the name of the property to sort by (default to 'name')
     * @param {module:model/String} opts.direction Sort direction, use 'desc' to reverse sort (default to 'asc')
     * @param {String} opts.phrase Search phrase for partial matches on name or description
     * @param {module:api/NetworksApi~getNetworkFirewallRuleGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkFirewallRuleGroups(serverId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serverId' is set
      if (serverId === undefined || serverId === null) {
        throw new Error("Missing the required parameter 'serverId' when calling getNetworkFirewallRuleGroups");
      }

      let pathParams = {
        'serverId': serverId
      };
      let queryParams = {
        'max': opts['max'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'direction': opts['direction'],
        'phrase': opts['phrase']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/networks/servers/{serverId}/firewall-rule-groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkFirewallRules operation.
     * @callback module:api/NetworksApi~getNetworkFirewallRulesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all Network Firewall Rules for Network Server
     * This endpoint retrieves all Network Firewall Rules for a specified Network Service. 
     * @param {Number} serverId Server ID
     * @param {Object} opts Optional parameters
     * @param {Number} opts.max Maximum number of records to return, -1 can be used to fetch all records (default to 25)
     * @param {Number} opts.offset Offset records, the number of records to skip, for paginating requests (default to 0)
     * @param {String} opts.sort Sort order, the name of the property to sort by (default to 'name')
     * @param {module:model/String} opts.direction Sort direction, use 'desc' to reverse sort (default to 'asc')
     * @param {String} opts.phrase Search phrase for partial matches on name or description
     * @param {module:api/NetworksApi~getNetworkFirewallRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkFirewallRules(serverId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serverId' is set
      if (serverId === undefined || serverId === null) {
        throw new Error("Missing the required parameter 'serverId' when calling getNetworkFirewallRules");
      }

      let pathParams = {
        'serverId': serverId
      };
      let queryParams = {
        'max': opts['max'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'direction': opts['direction'],
        'phrase': opts['phrase']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/networks/servers/{serverId}/firewall-rules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkFloatingIp operation.
     * @callback module:api/NetworksApi~getNetworkFloatingIpCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200108} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Specific Floating IP
     * This endpoint retrieves a specific Floating IP. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/NetworksApi~getNetworkFloatingIpCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200108}
     */
    getNetworkFloatingIp(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getNetworkFloatingIp");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200108;
      return this.apiClient.callApi(
        '/api/networks/floating-ips/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkGroup operation.
     * @callback module:api/NetworksApi~getNetworkGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20091} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Specific Network Group
     * This endpoint retrieves a specific Network Group. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/NetworksApi~getNetworkGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20091}
     */
    getNetworkGroup(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getNetworkGroup");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20091;
      return this.apiClient.callApi(
        '/api/networks/groups/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkGroups operation.
     * @callback module:api/NetworksApi~getNetworkGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20090} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all Network Groups
     * This endpoint retrieves all Network Groups associated with the account. 
     * @param {module:api/NetworksApi~getNetworkGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20090}
     */
    getNetworkGroups(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20090;
      return this.apiClient.callApi(
        '/api/networks/groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkPool operation.
     * @callback module:api/NetworksApi~getNetworkPoolCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200106} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Specific Network Pool
     * This endpoint retrieves a specific Network Pool. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/NetworksApi~getNetworkPoolCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200106}
     */
    getNetworkPool(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getNetworkPool");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200106;
      return this.apiClient.callApi(
        '/api/networks/pools/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkPoolIp operation.
     * @callback module:api/NetworksApi~getNetworkPoolIpCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Specific IP Address for a Specific Network Pool
     * This endpoint retrieves a specific IP address for a specific Network Pool. 
     * @param {Number} networkPoolId Morpheus Network Pool ID of the Object being referenced
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/NetworksApi~getNetworkPoolIpCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkPoolIp(networkPoolId, id, callback) {
      let postBody = null;
      // verify the required parameter 'networkPoolId' is set
      if (networkPoolId === undefined || networkPoolId === null) {
        throw new Error("Missing the required parameter 'networkPoolId' when calling getNetworkPoolIp");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getNetworkPoolIp");
      }

      let pathParams = {
        'networkPoolId': networkPoolId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/networks/pools/{networkPoolId}/ips/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkPoolIps operation.
     * @callback module:api/NetworksApi~getNetworkPoolIpsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all IP Addresses for a Specific Network Pool
     * This endpoint retrieves a list of IP addresses for a specific Network Pool. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/NetworksApi~getNetworkPoolIpsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkPoolIps(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getNetworkPoolIps");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/networks/pools/{id}/ips', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkPoolServer operation.
     * @callback module:api/NetworksApi~getNetworkPoolServerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200120} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Specific Network Pool Server
     * This endpoint retrieves a specific Network Pool Server. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/NetworksApi~getNetworkPoolServerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200120}
     */
    getNetworkPoolServer(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getNetworkPoolServer");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200120;
      return this.apiClient.callApi(
        '/api/networks/pool-servers/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkPoolServerType operation.
     * @callback module:api/NetworksApi~getNetworkPoolServerTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200121} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a Specific Network Pool Server Type
     * Retrieves a specific Network Pool Server Type. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/NetworksApi~getNetworkPoolServerTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200121}
     */
    getNetworkPoolServerType(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getNetworkPoolServerType");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200121;
      return this.apiClient.callApi(
        '/api/networks/pool-server-types/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkPools operation.
     * @callback module:api/NetworksApi~getNetworkPoolsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all Network Pools
     * This endpoint retrieves all Network Pools associated with the account. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter by name, wildcard may be specified as %, eg. example-%
     * @param {String} opts.phrase Search phrase for partial matches on name or description
     * @param {module:api/NetworksApi~getNetworkPoolsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkPools(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name'],
        'phrase': opts['phrase']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/networks/pools', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkProxies operation.
     * @callback module:api/NetworksApi~getNetworkProxiesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all Network Proxies
     * This endpoint retrieves all Network Proxies associated with the account. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter by name, wildcard may be specified as %, eg. example-%
     * @param {String} opts.phrase Search phrase for partial matches on name or description
     * @param {module:api/NetworksApi~getNetworkProxiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkProxies(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name'],
        'phrase': opts['phrase']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/networks/proxies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkProxy operation.
     * @callback module:api/NetworksApi~getNetworkProxyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200111} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Specific Network Proxy
     * This endpoint retrieves a specific Network Proxy. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/NetworksApi~getNetworkProxyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200111}
     */
    getNetworkProxy(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getNetworkProxy");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200111;
      return this.apiClient.callApi(
        '/api/networks/proxies/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkRouter operation.
     * @callback module:api/NetworksApi~getNetworkRouterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20095} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Specific Network Router
     * This endpoint retrieves a specific Network Router. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/NetworksApi~getNetworkRouterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20095}
     */
    getNetworkRouter(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getNetworkRouter");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20095;
      return this.apiClient.callApi(
        '/api/networks/routers/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkRouterBgpNeighbor operation.
     * @callback module:api/NetworksApi~getNetworkRouterBgpNeighborCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20097} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Network Router BGP Neighbor
     * This endpoint retrieves a network router BGP Neighbor for specified network router.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Number} routerId Router ID
     * @param {module:api/NetworksApi~getNetworkRouterBgpNeighborCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20097}
     */
    getNetworkRouterBgpNeighbor(id, routerId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getNetworkRouterBgpNeighbor");
      }
      // verify the required parameter 'routerId' is set
      if (routerId === undefined || routerId === null) {
        throw new Error("Missing the required parameter 'routerId' when calling getNetworkRouterBgpNeighbor");
      }

      let pathParams = {
        'id': id,
        'routerId': routerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20097;
      return this.apiClient.callApi(
        '/api/networks/routers/{routerId}/bgp-neighbors/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkRouterFirewallRule operation.
     * @callback module:api/NetworksApi~getNetworkRouterFirewallRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20099} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Firewall Rule for Network Router
     * This endpoint retrieves a firewall rule. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Number} routerId Router ID
     * @param {module:api/NetworksApi~getNetworkRouterFirewallRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20099}
     */
    getNetworkRouterFirewallRule(id, routerId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getNetworkRouterFirewallRule");
      }
      // verify the required parameter 'routerId' is set
      if (routerId === undefined || routerId === null) {
        throw new Error("Missing the required parameter 'routerId' when calling getNetworkRouterFirewallRule");
      }

      let pathParams = {
        'id': id,
        'routerId': routerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20099;
      return this.apiClient.callApi(
        '/api/networks/routers/{routerId}/firewall-rules/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkRouterFirewallRuleGroup operation.
     * @callback module:api/NetworksApi~getNetworkRouterFirewallRuleGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200101} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Firewall Rule Group for Network Router
     * This endpoint retrieves a firewall rule group for specified network router. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Number} routerId Router ID
     * @param {module:api/NetworksApi~getNetworkRouterFirewallRuleGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200101}
     */
    getNetworkRouterFirewallRuleGroup(id, routerId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getNetworkRouterFirewallRuleGroup");
      }
      // verify the required parameter 'routerId' is set
      if (routerId === undefined || routerId === null) {
        throw new Error("Missing the required parameter 'routerId' when calling getNetworkRouterFirewallRuleGroup");
      }

      let pathParams = {
        'id': id,
        'routerId': routerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200101;
      return this.apiClient.callApi(
        '/api/networks/routers/{routerId}/firewall-rule-groups/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkRouterFirewallRuleGroups operation.
     * @callback module:api/NetworksApi~getNetworkRouterFirewallRuleGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200100} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all Network Firewall Rule Groups for Network Router
     * This endpoint retrieves all Network Firewall Rule Groups for a specified Network Service. 
     * @param {Number} routerId Router ID
     * @param {module:api/NetworksApi~getNetworkRouterFirewallRuleGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200100}
     */
    getNetworkRouterFirewallRuleGroups(routerId, callback) {
      let postBody = null;
      // verify the required parameter 'routerId' is set
      if (routerId === undefined || routerId === null) {
        throw new Error("Missing the required parameter 'routerId' when calling getNetworkRouterFirewallRuleGroups");
      }

      let pathParams = {
        'routerId': routerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200100;
      return this.apiClient.callApi(
        '/api/networks/routers/{routerId}/firewall-rule-groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkRouterNat operation.
     * @callback module:api/NetworksApi~getNetworkRouterNatCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200103} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Network Router NAT
     * This endpoint retrieves a network router NAT for specified network router.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Number} routerId Router ID
     * @param {module:api/NetworksApi~getNetworkRouterNatCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200103}
     */
    getNetworkRouterNat(id, routerId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getNetworkRouterNat");
      }
      // verify the required parameter 'routerId' is set
      if (routerId === undefined || routerId === null) {
        throw new Error("Missing the required parameter 'routerId' when calling getNetworkRouterNat");
      }

      let pathParams = {
        'id': id,
        'routerId': routerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200103;
      return this.apiClient.callApi(
        '/api/networks/routers/{routerId}/nats/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkRouterRoute operation.
     * @callback module:api/NetworksApi~getNetworkRouterRouteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200105} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Route for Network Router
     * This endpoint retrieves a Route. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Number} routerId Router ID
     * @param {module:api/NetworksApi~getNetworkRouterRouteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200105}
     */
    getNetworkRouterRoute(id, routerId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getNetworkRouterRoute");
      }
      // verify the required parameter 'routerId' is set
      if (routerId === undefined || routerId === null) {
        throw new Error("Missing the required parameter 'routerId' when calling getNetworkRouterRoute");
      }

      let pathParams = {
        'id': id,
        'routerId': routerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200105;
      return this.apiClient.callApi(
        '/api/networks/routers/{routerId}/routes/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkRouterType operation.
     * @callback module:api/NetworksApi~getNetworkRouterTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20093} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Specific Network Router Type
     * This endpoint retrieves a specific network router type. Use this API to retrieve list of available option types for a specific network router type. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/NetworksApi~getNetworkRouterTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20093}
     */
    getNetworkRouterType(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getNetworkRouterType");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20093;
      return this.apiClient.callApi(
        '/api/network-router-types/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkRouters operation.
     * @callback module:api/NetworksApi~getNetworkRoutersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20094} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all Network Routers
     * This endpoint retrieves all Network Routers 
     * @param {module:api/NetworksApi~getNetworkRoutersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20094}
     */
    getNetworkRouters(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20094;
      return this.apiClient.callApi(
        '/api/networks/routers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkRoutersBgpNeighbors operation.
     * @callback module:api/NetworksApi~getNetworkRoutersBgpNeighborsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20096} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all BGP Neighbors for Network Router
     * This endpoint retrieves all BGP Neighbors for specified network router.
     * @param {Number} routerId Router ID
     * @param {module:api/NetworksApi~getNetworkRoutersBgpNeighborsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20096}
     */
    getNetworkRoutersBgpNeighbors(routerId, callback) {
      let postBody = null;
      // verify the required parameter 'routerId' is set
      if (routerId === undefined || routerId === null) {
        throw new Error("Missing the required parameter 'routerId' when calling getNetworkRoutersBgpNeighbors");
      }

      let pathParams = {
        'routerId': routerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20096;
      return this.apiClient.callApi(
        '/api/networks/routers/{routerId}/bgp-neighbors', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkRoutersFirewallRules operation.
     * @callback module:api/NetworksApi~getNetworkRoutersFirewallRulesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20098} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all Firewall Rules for Network Router
     * This endpoint retrieves all firewall rules for specified network router. 
     * @param {Number} routerId Router ID
     * @param {module:api/NetworksApi~getNetworkRoutersFirewallRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20098}
     */
    getNetworkRoutersFirewallRules(routerId, callback) {
      let postBody = null;
      // verify the required parameter 'routerId' is set
      if (routerId === undefined || routerId === null) {
        throw new Error("Missing the required parameter 'routerId' when calling getNetworkRoutersFirewallRules");
      }

      let pathParams = {
        'routerId': routerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20098;
      return this.apiClient.callApi(
        '/api/networks/routers/{routerId}/firewall-rules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkRoutersNats operation.
     * @callback module:api/NetworksApi~getNetworkRoutersNatsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200102} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all Network Router NATs for Network Router
     * This endpoint retrieves all NATs for specified network router. 
     * @param {Number} routerId Router ID
     * @param {module:api/NetworksApi~getNetworkRoutersNatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200102}
     */
    getNetworkRoutersNats(routerId, callback) {
      let postBody = null;
      // verify the required parameter 'routerId' is set
      if (routerId === undefined || routerId === null) {
        throw new Error("Missing the required parameter 'routerId' when calling getNetworkRoutersNats");
      }

      let pathParams = {
        'routerId': routerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200102;
      return this.apiClient.callApi(
        '/api/networks/routers/{routerId}/nats', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkRoutersRoutes operation.
     * @callback module:api/NetworksApi~getNetworkRoutersRoutesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200104} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all Routes for Network Router
     * This endpoint retrieves all Routes for specified network router. 
     * @param {Number} routerId Router ID
     * @param {module:api/NetworksApi~getNetworkRoutersRoutesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200104}
     */
    getNetworkRoutersRoutes(routerId, callback) {
      let postBody = null;
      // verify the required parameter 'routerId' is set
      if (routerId === undefined || routerId === null) {
        throw new Error("Missing the required parameter 'routerId' when calling getNetworkRoutersRoutes");
      }

      let pathParams = {
        'routerId': routerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200104;
      return this.apiClient.callApi(
        '/api/networks/routers/{routerId}/routes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkServerGroup operation.
     * @callback module:api/NetworksApi~getNetworkServerGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200117} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific Network Server Group
     * This endpoint retrieves a specific Network Server Group for a Network Server. Note: Only available for NSX-T network integrations. 
     * @param {Number} serverId Server ID
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/NetworksApi~getNetworkServerGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200117}
     */
    getNetworkServerGroup(serverId, id, callback) {
      let postBody = null;
      // verify the required parameter 'serverId' is set
      if (serverId === undefined || serverId === null) {
        throw new Error("Missing the required parameter 'serverId' when calling getNetworkServerGroup");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getNetworkServerGroup");
      }

      let pathParams = {
        'serverId': serverId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200117;
      return this.apiClient.callApi(
        '/api/networks/servers/{serverId}/groups/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSubnets operation.
     * @callback module:api/NetworksApi~getNetworkSubnetsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Subnets for a Network
     * This endpoint retrieves all Subnets under a specific network. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/NetworksApi~getNetworkSubnetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkSubnets(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getNetworkSubnets");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/networks/{id}/subnets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkTransportZone operation.
     * @callback module:api/NetworksApi~getNetworkTransportZoneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200118} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Specific Network Transport Zone
     * This endpoint retrieves a specific Network Transport Zone. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Number} serverId Server ID
     * @param {module:api/NetworksApi~getNetworkTransportZoneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200118}
     */
    getNetworkTransportZone(id, serverId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getNetworkTransportZone");
      }
      // verify the required parameter 'serverId' is set
      if (serverId === undefined || serverId === null) {
        throw new Error("Missing the required parameter 'serverId' when calling getNetworkTransportZone");
      }

      let pathParams = {
        'id': id,
        'serverId': serverId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200118;
      return this.apiClient.callApi(
        '/api/networks/servers/{serverId}/scopes/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkTransportZones operation.
     * @callback module:api/NetworksApi~getNetworkTransportZonesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all Network Transport Zones for Network Server
     * This endpoint retrieves all Network Transport Zones for a specified Network Service.
     * @param {Number} serverId Server ID
     * @param {Object} opts Optional parameters
     * @param {Number} opts.max Maximum number of records to return, -1 can be used to fetch all records (default to 25)
     * @param {Number} opts.offset Offset records, the number of records to skip, for paginating requests (default to 0)
     * @param {String} opts.sort Sort order, the name of the property to sort by (default to 'name')
     * @param {module:model/String} opts.direction Sort direction, use 'desc' to reverse sort (default to 'asc')
     * @param {String} opts.phrase Search phrase for partial matches on name or description
     * @param {module:api/NetworksApi~getNetworkTransportZonesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getNetworkTransportZones(serverId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serverId' is set
      if (serverId === undefined || serverId === null) {
        throw new Error("Missing the required parameter 'serverId' when calling getNetworkTransportZones");
      }

      let pathParams = {
        'serverId': serverId
      };
      let queryParams = {
        'max': opts['max'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'direction': opts['direction'],
        'phrase': opts['phrase']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/networks/servers/{serverId}/scopes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkType operation.
     * @callback module:api/NetworksApi~getNetworkTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20086} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Specific Network Type
     * This endpoint retrieves a specific Network Type.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/NetworksApi~getNetworkTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20086}
     */
    getNetworkType(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getNetworkType");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20086;
      return this.apiClient.callApi(
        '/api/network-types/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getStaticRoute operation.
     * @callback module:api/NetworksApi~getStaticRouteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20089} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Static Route for a Network
     * This endpoint retrieves a network static route for specified network. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Number} routeId The ID of the route
     * @param {module:api/NetworksApi~getStaticRouteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20089}
     */
    getStaticRoute(id, routeId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getStaticRoute");
      }
      // verify the required parameter 'routeId' is set
      if (routeId === undefined || routeId === null) {
        throw new Error("Missing the required parameter 'routeId' when calling getStaticRoute");
      }

      let pathParams = {
        'id': id,
        'routeId': routeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20089;
      return this.apiClient.callApi(
        '/api/networks/{id}/routes/{routeId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getStaticRoutes operation.
     * @callback module:api/NetworksApi~getStaticRoutesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20088} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all Static Routes for a Network
     * This endpoint retrieves all routes for specified network. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/NetworksApi~getStaticRoutesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20088}
     */
    getStaticRoutes(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getStaticRoutes");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20088;
      return this.apiClient.callApi(
        '/api/networks/{id}/routes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSubnet operation.
     * @callback module:api/NetworksApi~getSubnetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200154} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Specific Subnet
     * This endpoint retrieves a specific Subnet. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/NetworksApi~getSubnetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200154}
     */
    getSubnet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSubnet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200154;
      return this.apiClient.callApi(
        '/api/subnets/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listNetworkPoolServerTypes operation.
     * @callback module:api/NetworksApi~listNetworkPoolServerTypesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Network Pool Server Types
     * This endpoint retrieves all Network Pool Server Types 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.max Maximum number of records to return, -1 can be used to fetch all records (default to 25)
     * @param {Number} opts.offset Offset records, the number of records to skip, for paginating requests (default to 0)
     * @param {String} opts.sort Sort order, the name of the property to sort by (default to 'name')
     * @param {module:model/String} opts.direction Sort direction, use 'desc' to reverse sort (default to 'asc')
     * @param {String} opts.phrase Search phrase for partial matches on name or description
     * @param {String} opts.name Filter by name, wildcard may be specified as %, eg. example-%
     * @param {String} opts.code If specified will return an exact match on code
     * @param {module:api/NetworksApi~listNetworkPoolServerTypesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    listNetworkPoolServerTypes(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'max': opts['max'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'direction': opts['direction'],
        'phrase': opts['phrase'],
        'name': opts['name'],
        'code': opts['code']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/networks/pool-server-types', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listNetworkPoolServers operation.
     * @callback module:api/NetworksApi~listNetworkPoolServersCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Network Pool Servers
     * This endpoint retrieves all Network Pool Servers associated with the account. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.max Maximum number of records to return, -1 can be used to fetch all records (default to 25)
     * @param {Number} opts.offset Offset records, the number of records to skip, for paginating requests (default to 0)
     * @param {String} opts.sort Sort order, the name of the property to sort by (default to 'name')
     * @param {module:model/String} opts.direction Sort direction, use 'desc' to reverse sort (default to 'asc')
     * @param {String} opts.phrase Search phrase for partial matches on name or description
     * @param {String} opts.name Filter by name, wildcard may be specified as %, eg. example-%
     * @param {module:api/NetworksApi~listNetworkPoolServersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    listNetworkPoolServers(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'max': opts['max'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'direction': opts['direction'],
        'phrase': opts['phrase'],
        'name': opts['name']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/networks/pool-servers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listNetworkRouterTypes operation.
     * @callback module:api/NetworksApi~listNetworkRouterTypesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20092} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all Network Router Types
     * Get all Network Router Types. 
     * @param {module:api/NetworksApi~listNetworkRouterTypesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20092}
     */
    listNetworkRouterTypes(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20092;
      return this.apiClient.callApi(
        '/api/network-router-types', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listNetworkServerGroups operation.
     * @callback module:api/NetworksApi~listNetworkServerGroupsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all Network Server Groups for Network Server
     * This endpoint retrieves all Network Server Groups for a specified Network Service. Note: Only available for NSX-T network integrations. 
     * @param {Number} serverId Server ID
     * @param {Object} opts Optional parameters
     * @param {Number} opts.max Maximum number of records to return, -1 can be used to fetch all records (default to 25)
     * @param {Number} opts.offset Offset records, the number of records to skip, for paginating requests (default to 0)
     * @param {String} opts.sort Sort order, the name of the property to sort by (default to 'name')
     * @param {module:model/String} opts.direction Sort direction, use 'desc' to reverse sort (default to 'asc')
     * @param {String} opts.phrase Search phrase for partial matches on name or description
     * @param {module:api/NetworksApi~listNetworkServerGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    listNetworkServerGroups(serverId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serverId' is set
      if (serverId === undefined || serverId === null) {
        throw new Error("Missing the required parameter 'serverId' when calling listNetworkServerGroups");
      }

      let pathParams = {
        'serverId': serverId
      };
      let queryParams = {
        'max': opts['max'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'direction': opts['direction'],
        'phrase': opts['phrase']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/networks/servers/{serverId}/groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listNetworkServices operation.
     * @callback module:api/NetworksApi~listNetworkServicesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200119} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Network Services
     * This endpoint retrieves all Network Services associated with the account.
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter by name, wildcard may be specified as %, eg. example-%
     * @param {String} opts.phrase Search phrase for partial matches on name or description
     * @param {module:api/NetworksApi~listNetworkServicesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200119}
     */
    listNetworkServices(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name'],
        'phrase': opts['phrase']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200119;
      return this.apiClient.callApi(
        '/api/networks/services', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listNetworkTypes operation.
     * @callback module:api/NetworksApi~listNetworkTypesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Network Types
     * Provides API for viewing Network Types and their configuration options.  This endpoint retrieves all Network Types. The sample response has been abbreviated. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter by name, wildcard may be specified as %, eg. example-%
     * @param {String} opts.code If specified will return an exact match on code
     * @param {String} opts.phrase Search phrase for partial matches on name or description
     * @param {module:api/NetworksApi~listNetworkTypesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    listNetworkTypes(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name'],
        'code': opts['code'],
        'phrase': opts['phrase']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/network-types', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listNetworks operation.
     * @callback module:api/NetworksApi~listNetworksCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Networks
     * This endpoint retrieves all Networks associated with the account. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter by name, wildcard may be specified as %, eg. example-%
     * @param {String} opts.phrase Search phrase for partial matches on name or description
     * @param {String} opts.labels Filter by label(s), matches records that contain any of the specified labels
     * @param {String} opts.allLabels Filter by label(s), matches records that contain all of the specified labels
     * @param {module:api/NetworksApi~listNetworksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    listNetworks(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name'],
        'phrase': opts['phrase'],
        'labels': opts['labels'],
        'allLabels': opts['allLabels']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/networks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSubnetTypes operation.
     * @callback module:api/NetworksApi~listSubnetTypesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Subnet Types
     * Provides API for viewing Network Subnet Types and their configuration options.  This endpoint retrieves all Network Types. The sample response has been abbreviated. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter by name, wildcard may be specified as %, eg. example-%
     * @param {String} opts.phrase Search phrase for partial matches on name or description
     * @param {module:api/NetworksApi~listSubnetTypesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    listSubnetTypes(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name'],
        'phrase': opts['phrase']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/subnet-types', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSubnets operation.
     * @callback module:api/NetworksApi~listSubnetsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Subnets
     * This endpoint retrieves all Subnets associated with the account. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter by name, wildcard may be specified as %, eg. example-%
     * @param {String} opts.phrase Search phrase for partial matches on name or description
     * @param {String} opts.labels Filter by label(s), matches records that contain any of the specified labels
     * @param {String} opts.allLabels Filter by label(s), matches records that contain all of the specified labels
     * @param {module:api/NetworksApi~listSubnetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    listSubnets(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name'],
        'phrase': opts['phrase'],
        'labels': opts['labels'],
        'allLabels': opts['allLabels']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/subnets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the refreshNetworkServer operation.
     * @callback module:api/NetworksApi~refreshNetworkServerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessId} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Refresh a Network Server/Integration
     * Refreshes a network server/integration. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/NetworksApi~refreshNetworkServerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessId}
     */
    refreshNetworkServer(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling refreshNetworkServer");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SuccessId;
      return this.apiClient.callApi(
        '/api/networks/servers/{id}/refresh', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the releaseNetworkFloatingIp operation.
     * @callback module:api/NetworksApi~releaseNetworkFloatingIpCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Release a Floating IP
     * Release a floating IP detaching it from the associated node/VM. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/NetworksApi~releaseNetworkFloatingIpCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    releaseNetworkFloatingIp(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling releaseNetworkFloatingIp");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/networks/floating-ips/{id}/release', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetwork operation.
     * @callback module:api/NetworksApi~updateNetworkCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Network
     * This endpoint allows updating a Network. Configuration options vary by Network Types. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject143} opts.inlineObject143 
     * @param {module:api/NetworksApi~updateNetworkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetwork(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject143'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateNetwork");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/networks/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkDhcpRelay operation.
     * @callback module:api/NetworksApi~updateNetworkDhcpRelayCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Network DHCP Relay
     * Use this command to update an existing Network DHCP Relay. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Number} serverId Server ID
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject168} opts.inlineObject168 
     * @param {module:api/NetworksApi~updateNetworkDhcpRelayCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    updateNetworkDhcpRelay(id, serverId, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject168'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateNetworkDhcpRelay");
      }
      // verify the required parameter 'serverId' is set
      if (serverId === undefined || serverId === null) {
        throw new Error("Missing the required parameter 'serverId' when calling updateNetworkDhcpRelay");
      }

      let pathParams = {
        'id': id,
        'serverId': serverId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/networks/servers/{serverId}/dhcp-relays/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkDhcpServer operation.
     * @callback module:api/NetworksApi~updateNetworkDhcpServerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Network DHCP Server
     * Use this command to update an existing Network DHCP Server. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Number} serverId Server ID
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject170} opts.inlineObject170 
     * @param {module:api/NetworksApi~updateNetworkDhcpServerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    updateNetworkDhcpServer(id, serverId, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject170'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateNetworkDhcpServer");
      }
      // verify the required parameter 'serverId' is set
      if (serverId === undefined || serverId === null) {
        throw new Error("Missing the required parameter 'serverId' when calling updateNetworkDhcpServer");
      }

      let pathParams = {
        'id': id,
        'serverId': serverId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/networks/servers/{serverId}/dhcp-servers/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkDomain operation.
     * @callback module:api/NetworksApi~updateNetworkDomainCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200109} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Network Domain
     * Update a Network Domain. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject164} opts.inlineObject164 
     * @param {module:api/NetworksApi~updateNetworkDomainCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200109}
     */
    updateNetworkDomain(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject164'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateNetworkDomain");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse200109;
      return this.apiClient.callApi(
        '/api/networks/domains/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkEdgeCluster operation.
     * @callback module:api/NetworksApi~updateNetworkEdgeClusterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Network Edge Cluster
     * Use this command to update an existing network Edge Cluster. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Number} serverId Server ID
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject171} opts.inlineObject171 
     * @param {module:api/NetworksApi~updateNetworkEdgeClusterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    updateNetworkEdgeCluster(id, serverId, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject171'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateNetworkEdgeCluster");
      }
      // verify the required parameter 'serverId' is set
      if (serverId === undefined || serverId === null) {
        throw new Error("Missing the required parameter 'serverId' when calling updateNetworkEdgeCluster");
      }

      let pathParams = {
        'id': id,
        'serverId': serverId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/networks/servers/{serverId}/edge-clusters/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkFirewallRule operation.
     * @callback module:api/NetworksApi~updateNetworkFirewallRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Network Firewall Rule
     * Use this command to update an existing network firewall Rule. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Number} serverId Server ID
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject173} opts.inlineObject173 
     * @param {module:api/NetworksApi~updateNetworkFirewallRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    updateNetworkFirewallRule(id, serverId, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject173'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateNetworkFirewallRule");
      }
      // verify the required parameter 'serverId' is set
      if (serverId === undefined || serverId === null) {
        throw new Error("Missing the required parameter 'serverId' when calling updateNetworkFirewallRule");
      }

      let pathParams = {
        'id': id,
        'serverId': serverId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/networks/servers/{serverId}/firewall-rules/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkFirewallRuleGroup operation.
     * @callback module:api/NetworksApi~updateNetworkFirewallRuleGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Network Firewall Rule Group
     * Use this command to update an existing Network Firewall Rule Group. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Number} serverId Server ID
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject175} opts.inlineObject175 
     * @param {module:api/NetworksApi~updateNetworkFirewallRuleGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    updateNetworkFirewallRuleGroup(id, serverId, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject175'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateNetworkFirewallRuleGroup");
      }
      // verify the required parameter 'serverId' is set
      if (serverId === undefined || serverId === null) {
        throw new Error("Missing the required parameter 'serverId' when calling updateNetworkFirewallRuleGroup");
      }

      let pathParams = {
        'id': id,
        'serverId': serverId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/networks/servers/{serverId}/firewall-rule-groups/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkGroup operation.
     * @callback module:api/NetworksApi~updateNetworkGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Network Group
     * Use this command to update an existing network Group. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject147} opts.inlineObject147 
     * @param {module:api/NetworksApi~updateNetworkGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    updateNetworkGroup(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject147'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateNetworkGroup");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/networks/groups/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkPool operation.
     * @callback module:api/NetworksApi~updateNetworkPoolCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200106} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Network Pool
     * Update a Network Pool. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject161} opts.inlineObject161 
     * @param {module:api/NetworksApi~updateNetworkPoolCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200106}
     */
    updateNetworkPool(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject161'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateNetworkPool");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse200106;
      return this.apiClient.callApi(
        '/api/networks/pools/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkPoolServer operation.
     * @callback module:api/NetworksApi~updateNetworkPoolServerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Network Pool Server
     * This endpoint allows updating a Network Pool Server. Configuration options vary by type. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject181} opts.inlineObject181 
     * @param {module:api/NetworksApi~updateNetworkPoolServerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    updateNetworkPoolServer(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject181'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateNetworkPoolServer");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/networks/pool-servers/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkProxy operation.
     * @callback module:api/NetworksApi~updateNetworkProxyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Network Proxy
     * Use this command to update an existing network Proxy. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject166} opts.inlineObject166 
     * @param {module:api/NetworksApi~updateNetworkProxyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    updateNetworkProxy(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject166'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateNetworkProxy");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/networks/proxies/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkRouter operation.
     * @callback module:api/NetworksApi~updateNetworkRouterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Network Router
     * Use this command to update an existing network Router. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject149} opts.inlineObject149 
     * @param {module:api/NetworksApi~updateNetworkRouterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    updateNetworkRouter(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject149'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateNetworkRouter");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/networks/routers/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkRouterBgpNeighbor operation.
     * @callback module:api/NetworksApi~updateNetworkRouterBgpNeighborCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Network Router BGP Neighbor
     * Use this command to update an existing Network Router BGP Neighbor. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Number} routerId Router ID
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject151} opts.inlineObject151 
     * @param {module:api/NetworksApi~updateNetworkRouterBgpNeighborCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    updateNetworkRouterBgpNeighbor(id, routerId, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject151'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateNetworkRouterBgpNeighbor");
      }
      // verify the required parameter 'routerId' is set
      if (routerId === undefined || routerId === null) {
        throw new Error("Missing the required parameter 'routerId' when calling updateNetworkRouterBgpNeighbor");
      }

      let pathParams = {
        'id': id,
        'routerId': routerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/networks/routers/{routerId}/bgp-neighbors/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkRouterFirewallRule operation.
     * @callback module:api/NetworksApi~updateNetworkRouterFirewallRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Network Router Firewall Rule
     * Use this command to update an existing network router firewall rule. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Number} routerId Router ID
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject153} opts.inlineObject153 
     * @param {module:api/NetworksApi~updateNetworkRouterFirewallRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    updateNetworkRouterFirewallRule(id, routerId, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject153'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateNetworkRouterFirewallRule");
      }
      // verify the required parameter 'routerId' is set
      if (routerId === undefined || routerId === null) {
        throw new Error("Missing the required parameter 'routerId' when calling updateNetworkRouterFirewallRule");
      }

      let pathParams = {
        'id': id,
        'routerId': routerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/networks/routers/{routerId}/firewall-rules/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkRouterFirewallRuleGroup operation.
     * @callback module:api/NetworksApi~updateNetworkRouterFirewallRuleGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Network Router Firewall Rule Group
     * Use this command to update an existing Network Router Firewall Rule Group. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Number} routerId Router ID
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject155} opts.inlineObject155 
     * @param {module:api/NetworksApi~updateNetworkRouterFirewallRuleGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    updateNetworkRouterFirewallRuleGroup(id, routerId, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject155'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateNetworkRouterFirewallRuleGroup");
      }
      // verify the required parameter 'routerId' is set
      if (routerId === undefined || routerId === null) {
        throw new Error("Missing the required parameter 'routerId' when calling updateNetworkRouterFirewallRuleGroup");
      }

      let pathParams = {
        'id': id,
        'routerId': routerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/networks/routers/{routerId}/firewall-rule-groups/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkRouterNat operation.
     * @callback module:api/NetworksApi~updateNetworkRouterNatCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Network Router NAT
     * Use this command to update an existing Network Router NAT. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Number} routerId Router ID
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject157} opts.inlineObject157 
     * @param {module:api/NetworksApi~updateNetworkRouterNatCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    updateNetworkRouterNat(id, routerId, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject157'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateNetworkRouterNat");
      }
      // verify the required parameter 'routerId' is set
      if (routerId === undefined || routerId === null) {
        throw new Error("Missing the required parameter 'routerId' when calling updateNetworkRouterNat");
      }

      let pathParams = {
        'id': id,
        'routerId': routerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/networks/routers/{routerId}/nats/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkRouterPermissions operation.
     * @callback module:api/NetworksApi~updateNetworkRouterPermissionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessId} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Network Router Permissions
     * Update Network Router Permissions 
     * @param {Number} routerId Router ID
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject158} opts.inlineObject158 
     * @param {module:api/NetworksApi~updateNetworkRouterPermissionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessId}
     */
    updateNetworkRouterPermissions(routerId, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject158'];
      // verify the required parameter 'routerId' is set
      if (routerId === undefined || routerId === null) {
        throw new Error("Missing the required parameter 'routerId' when calling updateNetworkRouterPermissions");
      }

      let pathParams = {
        'routerId': routerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SuccessId;
      return this.apiClient.callApi(
        '/api/networks/routers/{routerId}/permissions', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkServerGroup operation.
     * @callback module:api/NetworksApi~updateNetworkServerGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Network Server Group
     * Use this command to update an existing network server group. Note: Only available for NSX-T network integrations. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Number} serverId Server ID
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject177} opts.inlineObject177 
     * @param {module:api/NetworksApi~updateNetworkServerGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    updateNetworkServerGroup(id, serverId, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject177'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateNetworkServerGroup");
      }
      // verify the required parameter 'serverId' is set
      if (serverId === undefined || serverId === null) {
        throw new Error("Missing the required parameter 'serverId' when calling updateNetworkServerGroup");
      }

      let pathParams = {
        'id': id,
        'serverId': serverId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/networks/servers/{serverId}/groups/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkTransportZone operation.
     * @callback module:api/NetworksApi~updateNetworkTransportZoneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Network Transport Zone
     * Use this command to update an existing network Transport Zone. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Number} serverId Server ID
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject179} opts.inlineObject179 
     * @param {module:api/NetworksApi~updateNetworkTransportZoneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    updateNetworkTransportZone(id, serverId, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject179'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateNetworkTransportZone");
      }
      // verify the required parameter 'serverId' is set
      if (serverId === undefined || serverId === null) {
        throw new Error("Missing the required parameter 'serverId' when calling updateNetworkTransportZone");
      }

      let pathParams = {
        'id': id,
        'serverId': serverId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/networks/servers/{serverId}/scopes/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateStaticRoute operation.
     * @callback module:api/NetworksApi~updateStaticRouteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessId} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Network Static Route
     * Use this command to update a route. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Number} routeId The ID of the route
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject145} opts.inlineObject145 
     * @param {module:api/NetworksApi~updateStaticRouteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessId}
     */
    updateStaticRoute(id, routeId, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject145'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateStaticRoute");
      }
      // verify the required parameter 'routeId' is set
      if (routeId === undefined || routeId === null) {
        throw new Error("Missing the required parameter 'routeId' when calling updateStaticRoute");
      }

      let pathParams = {
        'id': id,
        'routeId': routeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SuccessId;
      return this.apiClient.callApi(
        '/api/networks/{id}/routes/{routeId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSubnet operation.
     * @callback module:api/NetworksApi~updateSubnetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200154} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Subnet
     * This endpoint allows updating a Subnet. Only certain types of clouds support this action. Configuration options vary for each Subnet Type. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject245} opts.inlineObject245 
     * @param {module:api/NetworksApi~updateSubnetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200154}
     */
    updateSubnet(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject245'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateSubnet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse200154;
      return this.apiClient.callApi(
        '/api/subnets/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
