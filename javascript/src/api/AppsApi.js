/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.1.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddAppInstanceRequest from '../model/AddAppInstanceRequest';
import AddApps200Response from '../model/AddApps200Response';
import AppCreate from '../model/AppCreate';
import AppUpdate from '../model/AppUpdate';
import ApplyAppStateRequest from '../model/ApplyAppStateRequest';
import DefaultError from '../model/DefaultError';
import GetApp200Response from '../model/GetApp200Response';
import GetAppSecurityGroups200Response from '../model/GetAppSecurityGroups200Response';
import GetAppState200Response from '../model/GetAppState200Response';
import ListApps200Response from '../model/ListApps200Response';
import Model200Success from '../model/Model200Success';
import PrepareAppApply200Response from '../model/PrepareAppApply200Response';
import RemoveAppInstanceRequest from '../model/RemoveAppInstanceRequest';
import SetAppSecurityGroups200Response from '../model/SetAppSecurityGroups200Response';
import SetAppSecurityGroupsRequest from '../model/SetAppSecurityGroupsRequest';
import ValidateAppState200Response from '../model/ValidateAppState200Response';

/**
* Apps service.
* @module api/AppsApi
* @version 6.1.1
*/
export default class AppsApi {

    /**
    * Constructs a new AppsApi. 
    * @alias module:api/AppsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addAppInstance operation.
     * @callback module:api/AppsApi~addAppInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetApp200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add Existing Instance to App
     * Add Existing Instance to App
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {module:model/AddAppInstanceRequest} [addAppInstanceRequest] 
     * @param {module:api/AppsApi~addAppInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetApp200Response}
     */
    addAppInstance(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['addAppInstanceRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addAppInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetApp200Response;
      return this.apiClient.callApi(
        '/api/apps/{id}/add-instance', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addAppUndoDelete operation.
     * @callback module:api/AppsApi~addAppUndoDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetApp200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Undo Delete of an App
     * This operation will undo the delete of an app that is pending removal.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/AppsApi~addAppUndoDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetApp200Response}
     */
    addAppUndoDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addAppUndoDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetApp200Response;
      return this.apiClient.callApi(
        '/api/apps/{id}/cancel-removal', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addApps operation.
     * @callback module:api/AppsApi~addAppsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddApps200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an App
     * Create an App
     * @param {Object} opts Optional parameters
     * @param {module:model/AppCreate} [appCreate] 
     * @param {module:api/AppsApi~addAppsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddApps200Response}
     */
    addApps(opts, callback) {
      opts = opts || {};
      let postBody = opts['appCreate'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AddApps200Response;
      return this.apiClient.callApi(
        '/api/apps', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the applyAppState operation.
     * @callback module:api/AppsApi~applyAppStateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Apply State of an App
     * This endpoint provides a way to apply the state of an app. This action only applies to Terraform, CloudFormation and ARM and will return an HTTP 400 error for other types. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {module:model/ApplyAppStateRequest} [applyAppStateRequest] 
     * @param {module:api/AppsApi~applyAppStateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    applyAppState(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['applyAppStateRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling applyAppState");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/apps/{id}/apply', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteApp operation.
     * @callback module:api/AppsApi~deleteAppCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an App
     * Will delete an app. Use removeInstances=on to also delete the instances in the app and all associated monitors and backups.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {String} [removeInstances = 'off')] Remove Instances
     * @param {String} [preserveVolumes = 'off')] Preserve Volumes
     * @param {String} [keepBackups = 'off')] Preserve copy of backups
     * @param {String} [releaseFloatingIps = 'on')] Release Floating IPs
     * @param {String} [releaseEIPs = 'on')] Alias for releaseFloatingIps
     * @param {String} [force = 'off')] Force Delete
     * @param {module:api/AppsApi~deleteAppCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    deleteApp(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteApp");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'removeInstances': opts['removeInstances'],
        'preserveVolumes': opts['preserveVolumes'],
        'keepBackups': opts['keepBackups'],
        'releaseFloatingIps': opts['releaseFloatingIps'],
        'releaseEIPs': opts['releaseEIPs'],
        'force': opts['force']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/apps/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getApp operation.
     * @callback module:api/AppsApi~getAppCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetApp200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Specific App
     * This endpoint retrieves a specific app.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/AppsApi~getAppCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetApp200Response}
     */
    getApp(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getApp");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetApp200Response;
      return this.apiClient.callApi(
        '/api/apps/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAppSecurityGroups operation.
     * @callback module:api/AppsApi~getAppSecurityGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAppSecurityGroups200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Security Groups for an App
     * This returns a list of all of the security groups applied to an app and whether the firewall is enabled.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/AppsApi~getAppSecurityGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAppSecurityGroups200Response}
     */
    getAppSecurityGroups(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAppSecurityGroups");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetAppSecurityGroups200Response;
      return this.apiClient.callApi(
        '/api/apps/{id}/security-groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAppState operation.
     * @callback module:api/AppsApi~getAppStateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAppState200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get State of an App
     * This endpoint provides a way to view the state of an app. The response includes output and resource planning information from the template provider software such as Terraform. This action only applies to Terraform, CloudFormation and ARM and will return an HTTP 400 error for other types. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/AppsApi~getAppStateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAppState200Response}
     */
    getAppState(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAppState");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetAppState200Response;
      return this.apiClient.callApi(
        '/api/apps/{id}/state', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listApps operation.
     * @callback module:api/AppsApi~listAppsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListApps200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Apps
     * This endpoint retrieves a paginated list of apps. 
     * @param {Object} opts Optional parameters
     * @param {Number} [max = 25)] Maximum number of records to return
     * @param {Number} [offset = 0)] Offset records, the number of records to skip, for paginating requests
     * @param {String} [name] Filter by name, wildcard may be specified as %, eg. example-%
     * @param {String} [phrase] Search phrase for partial matches on name or description
     * @param {Number} [createdBy] The User ID for Filtering
     * @param {Boolean} [showDeleted = false)] If true, includes instances in pending removal status.
     * @param {String} [labels] Filter by label(s), matches records that contain any of the specified labels
     * @param {String} [allLabels] Filter by label(s), matches records that contain all of the specified labels
     * @param {module:api/AppsApi~listAppsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListApps200Response}
     */
    listApps(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'max': opts['max'],
        'offset': opts['offset'],
        'name': opts['name'],
        'phrase': opts['phrase'],
        'createdBy': opts['createdBy'],
        'showDeleted': opts['showDeleted'],
        'labels': opts['labels'],
        'allLabels': opts['allLabels']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListApps200Response;
      return this.apiClient.callApi(
        '/api/apps', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the prepareAppApply operation.
     * @callback module:api/AppsApi~prepareAppApplyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PrepareAppApply200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Prepare To Apply an App
     * This endpoint provides a way to view the current app configuration and templateParameter variables available to apply. This action only applies to Terraform, CloudFormation and ARM and will return an HTTP 400 error for other types. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/AppsApi~prepareAppApplyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PrepareAppApply200Response}
     */
    prepareAppApply(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling prepareAppApply");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PrepareAppApply200Response;
      return this.apiClient.callApi(
        '/api/apps/{id}/prepare-apply', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the refreshAppState operation.
     * @callback module:api/AppsApi~refreshAppStateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Refresh State of an App
     * This endpoint provides a way to refresh the state of an app. This action only applies to Terraform, CloudFormation and ARM and will return an HTTP 400 error for other types.   
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {Object.<String, Object>} [body] 
     * @param {module:api/AppsApi~refreshAppStateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    refreshAppState(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling refreshAppState");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/apps/{id}/refresh', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeAppInstance operation.
     * @callback module:api/AppsApi~removeAppInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetApp200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove Instance from App
     * Remove Instance from App
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {module:model/RemoveAppInstanceRequest} [removeAppInstanceRequest] 
     * @param {module:api/AppsApi~removeAppInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetApp200Response}
     */
    removeAppInstance(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['removeAppInstanceRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeAppInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetApp200Response;
      return this.apiClient.callApi(
        '/api/apps/{id}/remove-instance', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setAppSecurityGroups operation.
     * @callback module:api/AppsApi~setAppSecurityGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SetAppSecurityGroups200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set Security Groups for an App
     * Set Security Groups for an App
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {module:model/SetAppSecurityGroupsRequest} [setAppSecurityGroupsRequest] 
     * @param {module:api/AppsApi~setAppSecurityGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SetAppSecurityGroups200Response}
     */
    setAppSecurityGroups(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['setAppSecurityGroupsRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setAppSecurityGroups");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SetAppSecurityGroups200Response;
      return this.apiClient.callApi(
        '/api/apps/{id}/security-groups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateApp operation.
     * @callback module:api/AppsApi~updateAppCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetApp200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updating an App
     * This endpoint provides updating of some basic app settings.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {module:model/AppUpdate} [appUpdate] 
     * @param {module:api/AppsApi~updateAppCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetApp200Response}
     */
    updateApp(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['appUpdate'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateApp");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetApp200Response;
      return this.apiClient.callApi(
        '/api/apps/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the validateAppState operation.
     * @callback module:api/AppsApi~validateAppStateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ValidateAppState200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Validate Apply State for an App
     * This endpoint provides a way to validate app configuration and templateParameter variables before executing the apply. This only validates the configuration to see any planned changes and it does not actually apply the changes. This action only applies to Terraform, CloudFormation and ARM and will return an HTTP 400 error for other types. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {module:model/ApplyAppStateRequest} [applyAppStateRequest] 
     * @param {module:api/AppsApi~validateAppStateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ValidateAppState200Response}
     */
    validateAppState(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['applyAppStateRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling validateAppState");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ValidateAppState200Response;
      return this.apiClient.callApi(
        '/api/apps/{id}/validate-apply', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
