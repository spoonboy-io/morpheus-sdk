/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.1.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddExecuteSchedules200Response from '../model/AddExecuteSchedules200Response';
import AddExecuteSchedulesRequest from '../model/AddExecuteSchedulesRequest';
import DefaultError from '../model/DefaultError';
import ExecuteExecutionRequest200Response from '../model/ExecuteExecutionRequest200Response';
import ExecuteExecutionRequestRequest from '../model/ExecuteExecutionRequestRequest';
import GetExecuteSchedules200Response from '../model/GetExecuteSchedules200Response';
import GetExecutionRequest200Response from '../model/GetExecutionRequest200Response';
import ListExecuteSchedules200Response from '../model/ListExecuteSchedules200Response';
import Model200Success from '../model/Model200Success';
import UpdateExecuteSchedulesRequest from '../model/UpdateExecuteSchedulesRequest';

/**
* Automation service.
* @module api/AutomationApi
* @version 6.1.1
*/
export default class AutomationApi {

    /**
    * Constructs a new AutomationApi. 
    * @alias module:api/AutomationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addExecuteSchedules operation.
     * @callback module:api/AutomationApi~addExecuteSchedulesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddExecuteSchedules200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a Execute Schedule
     * Creates a execute schedule. 
     * @param {Object} opts Optional parameters
     * @param {module:model/AddExecuteSchedulesRequest} [addExecuteSchedulesRequest] 
     * @param {module:api/AutomationApi~addExecuteSchedulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddExecuteSchedules200Response}
     */
    addExecuteSchedules(opts, callback) {
      opts = opts || {};
      let postBody = opts['addExecuteSchedulesRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AddExecuteSchedules200Response;
      return this.apiClient.callApi(
        '/api/execute-schedules', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the executeExecutionRequest operation.
     * @callback module:api/AutomationApi~executeExecutionRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExecuteExecutionRequest200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Executes an Execution Request
     * Provides API interfaces for executing an arbitrary script or command on an instance, container or host. 
     * @param {Object} opts Optional parameters
     * @param {Number} [instanceId] The Instance ID for Filtering
     * @param {Number} [containerId] The Container ID for Filtering
     * @param {Number} [serverId] The Server ID for Filtering
     * @param {module:model/ExecuteExecutionRequestRequest} [executeExecutionRequestRequest] 
     * @param {module:api/AutomationApi~executeExecutionRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExecuteExecutionRequest200Response}
     */
    executeExecutionRequest(opts, callback) {
      opts = opts || {};
      let postBody = opts['executeExecutionRequestRequest'];

      let pathParams = {
      };
      let queryParams = {
        'instanceId': opts['instanceId'],
        'containerId': opts['containerId'],
        'serverId': opts['serverId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ExecuteExecutionRequest200Response;
      return this.apiClient.callApi(
        '/api/execution-request/execute', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getExecuteSchedules operation.
     * @callback module:api/AutomationApi~getExecuteSchedulesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetExecuteSchedules200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a Specific Execute Schedule
     * Retrieves a specific execute schedule. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/AutomationApi~getExecuteSchedulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetExecuteSchedules200Response}
     */
    getExecuteSchedules(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getExecuteSchedules");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetExecuteSchedules200Response;
      return this.apiClient.callApi(
        '/api/execute-schedules/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getExecutionRequest operation.
     * @callback module:api/AutomationApi~getExecutionRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetExecutionRequest200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a Specific Execution Request
     * Retrieves a specific execution request. 
     * @param {String} uniqueId The Unique ID of the execution request
     * @param {module:api/AutomationApi~getExecutionRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetExecutionRequest200Response}
     */
    getExecutionRequest(uniqueId, callback) {
      let postBody = null;
      // verify the required parameter 'uniqueId' is set
      if (uniqueId === undefined || uniqueId === null) {
        throw new Error("Missing the required parameter 'uniqueId' when calling getExecutionRequest");
      }

      let pathParams = {
        'uniqueId': uniqueId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetExecutionRequest200Response;
      return this.apiClient.callApi(
        '/api/execution-request/{uniqueId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listExecuteSchedules operation.
     * @callback module:api/AutomationApi~listExecuteSchedulesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListExecuteSchedules200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves all Execute Schedules
     * Retrieves all execute schedules. 
     * @param {Object} opts Optional parameters
     * @param {Number} [max = 25)] Maximum number of records to return
     * @param {Number} [offset = 0)] Offset records, the number of records to skip, for paginating requests
     * @param {String} [sort = 'name')] Sort order, the name of the property to sort by
     * @param {module:model/String} [direction = 'asc')] Sort direction, use 'desc' to reverse sort
     * @param {String} [phrase] Search phrase for partial matches on name or description
     * @param {String} [name] Filter by name, wildcard may be specified as %, eg. example-%
     * @param {module:api/AutomationApi~listExecuteSchedulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListExecuteSchedules200Response}
     */
    listExecuteSchedules(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'max': opts['max'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'direction': opts['direction'],
        'phrase': opts['phrase'],
        'name': opts['name']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListExecuteSchedules200Response;
      return this.apiClient.callApi(
        '/api/execute-schedules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeExecuteSchedules operation.
     * @callback module:api/AutomationApi~removeExecuteSchedulesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a Execute Schedule
     * Deletes a specified execute schedule. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/AutomationApi~removeExecuteSchedulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    removeExecuteSchedules(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeExecuteSchedules");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/execute-schedules/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateExecuteSchedules operation.
     * @callback module:api/AutomationApi~updateExecuteSchedulesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddExecuteSchedules200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a Execute Schedule
     * Updates a execute schedule. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateExecuteSchedulesRequest} [updateExecuteSchedulesRequest] 
     * @param {module:api/AutomationApi~updateExecuteSchedulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddExecuteSchedules200Response}
     */
    updateExecuteSchedules(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateExecuteSchedulesRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateExecuteSchedules");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AddExecuteSchedules200Response;
      return this.apiClient.callApi(
        '/api/execute-schedules/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
