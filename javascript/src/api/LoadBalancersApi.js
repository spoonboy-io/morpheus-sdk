/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DefaultError from '../model/DefaultError';
import InlineObject127 from '../model/InlineObject127';
import InlineObject128 from '../model/InlineObject128';
import InlineObject129 from '../model/InlineObject129';
import InlineObject130 from '../model/InlineObject130';
import InlineObject131 from '../model/InlineObject131';
import InlineObject132 from '../model/InlineObject132';
import InlineObject133 from '../model/InlineObject133';
import InlineObject134 from '../model/InlineObject134';
import InlineObject135 from '../model/InlineObject135';
import InlineObject136 from '../model/InlineObject136';
import InlineObject137 from '../model/InlineObject137';
import InlineObject138 from '../model/InlineObject138';
import InlineResponse20077 from '../model/InlineResponse20077';
import InlineResponse20078 from '../model/InlineResponse20078';
import InlineResponse20079 from '../model/InlineResponse20079';
import InlineResponse20080 from '../model/InlineResponse20080';
import InlineResponse20081 from '../model/InlineResponse20081';
import InlineResponse20082 from '../model/InlineResponse20082';
import InlineResponse20083 from '../model/InlineResponse20083';
import Model200Success from '../model/Model200Success';

/**
* LoadBalancers service.
* @module api/LoadBalancersApi
* @version 6.2.1
*/
export default class LoadBalancersApi {

    /**
    * Constructs a new LoadBalancersApi. 
    * @alias module:api/LoadBalancersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createLoadBalancer operation.
     * @callback module:api/LoadBalancersApi~createLoadBalancerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20078} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Load Balancer
     * Available for NSX load balancers only  Use this command to create a load balancer. 
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject127} opts.inlineObject127 
     * @param {module:api/LoadBalancersApi~createLoadBalancerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20078}
     */
    createLoadBalancer(opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject127'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20078;
      return this.apiClient.callApi(
        '/api/load-balancers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createLoadBalancerMonitor operation.
     * @callback module:api/LoadBalancersApi~createLoadBalancerMonitorCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Load Balancer Monitor
     * Use this command to create a load balancer Monitor.  This endpoint allows creating a Load Balancer Monitor. Configuration options vary by Load Balancer Type. 
     * @param {Number} loadBalancerId Load Balancer ID
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject129} opts.inlineObject129 
     * @param {module:api/LoadBalancersApi~createLoadBalancerMonitorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createLoadBalancerMonitor(loadBalancerId, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject129'];
      // verify the required parameter 'loadBalancerId' is set
      if (loadBalancerId === undefined || loadBalancerId === null) {
        throw new Error("Missing the required parameter 'loadBalancerId' when calling createLoadBalancerMonitor");
      }

      let pathParams = {
        'loadBalancerId': loadBalancerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/load-balancers/{loadBalancerId}/monitors', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createLoadBalancerPool operation.
     * @callback module:api/LoadBalancersApi~createLoadBalancerPoolCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Load Balancer Pool
     * Use this command to create a load balancer pool.  This endpoint allows creating a Load Balancer Pool. Configuration options vary by Load Balancer Type. 
     * @param {Number} loadBalancerId Load Balancer ID
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject131} opts.inlineObject131 
     * @param {module:api/LoadBalancersApi~createLoadBalancerPoolCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createLoadBalancerPool(loadBalancerId, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject131'];
      // verify the required parameter 'loadBalancerId' is set
      if (loadBalancerId === undefined || loadBalancerId === null) {
        throw new Error("Missing the required parameter 'loadBalancerId' when calling createLoadBalancerPool");
      }

      let pathParams = {
        'loadBalancerId': loadBalancerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/load-balancers/{loadBalancerId}/pools', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createLoadBalancerPoolNode operation.
     * @callback module:api/LoadBalancersApi~createLoadBalancerPoolNodeCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Load Balancer Pool Node
     * Use this command to create a load balancer pool node.  This endpoint allows creating a Load Balancer Pool Node. Configuration options vary by Load Balancer Type. 
     * @param {Number} loadBalancerPoolId Load Balancer Pool ID
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject137} opts.inlineObject137 
     * @param {module:api/LoadBalancersApi~createLoadBalancerPoolNodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createLoadBalancerPoolNode(loadBalancerPoolId, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject137'];
      // verify the required parameter 'loadBalancerPoolId' is set
      if (loadBalancerPoolId === undefined || loadBalancerPoolId === null) {
        throw new Error("Missing the required parameter 'loadBalancerPoolId' when calling createLoadBalancerPoolNode");
      }

      let pathParams = {
        'loadBalancerPoolId': loadBalancerPoolId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/load-balancer-pools/{loadBalancerPoolId}/nodes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createLoadBalancerProfile operation.
     * @callback module:api/LoadBalancersApi~createLoadBalancerProfileCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Load Balancer Profile
     * Use this command to create a load balancer Profile.  This endpoint allows creating a Load Balancer Profile. Configuration options vary by Load Balancer Type. 
     * @param {Number} loadBalancerId Load Balancer ID
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject133} opts.inlineObject133 
     * @param {module:api/LoadBalancersApi~createLoadBalancerProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createLoadBalancerProfile(loadBalancerId, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject133'];
      // verify the required parameter 'loadBalancerId' is set
      if (loadBalancerId === undefined || loadBalancerId === null) {
        throw new Error("Missing the required parameter 'loadBalancerId' when calling createLoadBalancerProfile");
      }

      let pathParams = {
        'loadBalancerId': loadBalancerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/load-balancers/{loadBalancerId}/profiles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createLoadBalancerVirtualServer operation.
     * @callback module:api/LoadBalancersApi~createLoadBalancerVirtualServerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20082} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Load Balancer Virtual Server
     * Use this command to create a load balancer virtual server.  This endpoint allows creating a Load Balancer Virtual Server. Configuration options vary by Load Balancer Type. 
     * @param {Number} loadBalancerId Load Balancer ID
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject135} opts.inlineObject135 
     * @param {module:api/LoadBalancersApi~createLoadBalancerVirtualServerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20082}
     */
    createLoadBalancerVirtualServer(loadBalancerId, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject135'];
      // verify the required parameter 'loadBalancerId' is set
      if (loadBalancerId === undefined || loadBalancerId === null) {
        throw new Error("Missing the required parameter 'loadBalancerId' when calling createLoadBalancerVirtualServer");
      }

      let pathParams = {
        'loadBalancerId': loadBalancerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20082;
      return this.apiClient.callApi(
        '/api/load-balancers/{loadBalancerId}/virtual-servers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteLoadBalancer operation.
     * @callback module:api/LoadBalancersApi~deleteLoadBalancerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Load Balancer
     * Will delete a Load Balancer from the system and make it no longer usable.
     * @param {Number} loadBalancerId Load Balancer ID
     * @param {module:api/LoadBalancersApi~deleteLoadBalancerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    deleteLoadBalancer(loadBalancerId, callback) {
      let postBody = null;
      // verify the required parameter 'loadBalancerId' is set
      if (loadBalancerId === undefined || loadBalancerId === null) {
        throw new Error("Missing the required parameter 'loadBalancerId' when calling deleteLoadBalancer");
      }

      let pathParams = {
        'loadBalancerId': loadBalancerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/load-balancers/{loadBalancerId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteLoadBalancerMonitor operation.
     * @callback module:api/LoadBalancersApi~deleteLoadBalancerMonitorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Load Balancer Monitor
     * Will delete a Load Balancer Monitor from the system and make it no longer usable.
     * @param {Number} loadBalancerId Load Balancer ID
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/LoadBalancersApi~deleteLoadBalancerMonitorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    deleteLoadBalancerMonitor(loadBalancerId, id, callback) {
      let postBody = null;
      // verify the required parameter 'loadBalancerId' is set
      if (loadBalancerId === undefined || loadBalancerId === null) {
        throw new Error("Missing the required parameter 'loadBalancerId' when calling deleteLoadBalancerMonitor");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteLoadBalancerMonitor");
      }

      let pathParams = {
        'loadBalancerId': loadBalancerId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/load-balancers/{loadBalancerId}/monitors/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteLoadBalancerPool operation.
     * @callback module:api/LoadBalancersApi~deleteLoadBalancerPoolCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Load Balancer Pool
     * Will delete a Load Balancer Pool from the system and make it no longer usable.
     * @param {Number} loadBalancerId Load Balancer ID
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/LoadBalancersApi~deleteLoadBalancerPoolCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    deleteLoadBalancerPool(loadBalancerId, id, callback) {
      let postBody = null;
      // verify the required parameter 'loadBalancerId' is set
      if (loadBalancerId === undefined || loadBalancerId === null) {
        throw new Error("Missing the required parameter 'loadBalancerId' when calling deleteLoadBalancerPool");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteLoadBalancerPool");
      }

      let pathParams = {
        'loadBalancerId': loadBalancerId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/load-balancers/{loadBalancerId}/pools/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteLoadBalancerPoolNode operation.
     * @callback module:api/LoadBalancersApi~deleteLoadBalancerPoolNodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Load Balancer Pool Node
     * Will delete a Load Balancer Pool Node from the system and make it no longer usable.
     * @param {Number} loadBalancerPoolId Load Balancer Pool ID
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/LoadBalancersApi~deleteLoadBalancerPoolNodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    deleteLoadBalancerPoolNode(loadBalancerPoolId, id, callback) {
      let postBody = null;
      // verify the required parameter 'loadBalancerPoolId' is set
      if (loadBalancerPoolId === undefined || loadBalancerPoolId === null) {
        throw new Error("Missing the required parameter 'loadBalancerPoolId' when calling deleteLoadBalancerPoolNode");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteLoadBalancerPoolNode");
      }

      let pathParams = {
        'loadBalancerPoolId': loadBalancerPoolId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/load-balancer-pools/{loadBalancerPoolId}/nodes/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteLoadBalancerProfile operation.
     * @callback module:api/LoadBalancersApi~deleteLoadBalancerProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Load Balancer Profile
     * Will delete a Load Balancer Profile from the system and make it no longer usable.
     * @param {Number} loadBalancerId Load Balancer ID
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/LoadBalancersApi~deleteLoadBalancerProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    deleteLoadBalancerProfile(loadBalancerId, id, callback) {
      let postBody = null;
      // verify the required parameter 'loadBalancerId' is set
      if (loadBalancerId === undefined || loadBalancerId === null) {
        throw new Error("Missing the required parameter 'loadBalancerId' when calling deleteLoadBalancerProfile");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteLoadBalancerProfile");
      }

      let pathParams = {
        'loadBalancerId': loadBalancerId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/load-balancers/{loadBalancerId}/profiles/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteLoadBalancerVirtualServer operation.
     * @callback module:api/LoadBalancersApi~deleteLoadBalancerVirtualServerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Load Balancer Virtual Server
     * Will delete a Load Balancer Virtual Server from the system and make it no longer usable.
     * @param {Number} loadBalancerId Load Balancer ID
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/LoadBalancersApi~deleteLoadBalancerVirtualServerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    deleteLoadBalancerVirtualServer(loadBalancerId, id, callback) {
      let postBody = null;
      // verify the required parameter 'loadBalancerId' is set
      if (loadBalancerId === undefined || loadBalancerId === null) {
        throw new Error("Missing the required parameter 'loadBalancerId' when calling deleteLoadBalancerVirtualServer");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteLoadBalancerVirtualServer");
      }

      let pathParams = {
        'loadBalancerId': loadBalancerId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/load-balancers/{loadBalancerId}/virtual-servers/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLoadBalancer operation.
     * @callback module:api/LoadBalancersApi~getLoadBalancerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20078} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Specific Load Balancer
     * This endpoint retrieves a specific Load Balancer.
     * @param {Number} loadBalancerId Load Balancer ID
     * @param {module:api/LoadBalancersApi~getLoadBalancerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20078}
     */
    getLoadBalancer(loadBalancerId, callback) {
      let postBody = null;
      // verify the required parameter 'loadBalancerId' is set
      if (loadBalancerId === undefined || loadBalancerId === null) {
        throw new Error("Missing the required parameter 'loadBalancerId' when calling getLoadBalancer");
      }

      let pathParams = {
        'loadBalancerId': loadBalancerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20078;
      return this.apiClient.callApi(
        '/api/load-balancers/{loadBalancerId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLoadBalancerMonitor operation.
     * @callback module:api/LoadBalancersApi~getLoadBalancerMonitorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20079} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Specific Load Balancer Monitor
     * This endpoint retrieves a specific Load Balancer Monitor.
     * @param {Number} loadBalancerId Load Balancer ID
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/LoadBalancersApi~getLoadBalancerMonitorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20079}
     */
    getLoadBalancerMonitor(loadBalancerId, id, callback) {
      let postBody = null;
      // verify the required parameter 'loadBalancerId' is set
      if (loadBalancerId === undefined || loadBalancerId === null) {
        throw new Error("Missing the required parameter 'loadBalancerId' when calling getLoadBalancerMonitor");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getLoadBalancerMonitor");
      }

      let pathParams = {
        'loadBalancerId': loadBalancerId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20079;
      return this.apiClient.callApi(
        '/api/load-balancers/{loadBalancerId}/monitors/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLoadBalancerPool operation.
     * @callback module:api/LoadBalancersApi~getLoadBalancerPoolCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20080} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Specific Load Balancer Pool
     * This endpoint retrieves a specific Load Balancer Pool.
     * @param {Number} loadBalancerId Load Balancer ID
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/LoadBalancersApi~getLoadBalancerPoolCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20080}
     */
    getLoadBalancerPool(loadBalancerId, id, callback) {
      let postBody = null;
      // verify the required parameter 'loadBalancerId' is set
      if (loadBalancerId === undefined || loadBalancerId === null) {
        throw new Error("Missing the required parameter 'loadBalancerId' when calling getLoadBalancerPool");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getLoadBalancerPool");
      }

      let pathParams = {
        'loadBalancerId': loadBalancerId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20080;
      return this.apiClient.callApi(
        '/api/load-balancers/{loadBalancerId}/pools/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLoadBalancerPoolNode operation.
     * @callback module:api/LoadBalancersApi~getLoadBalancerPoolNodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20083} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Specific Load Balancer Pool Node
     * This endpoint retrieves a specific Load Balancer Pool Node.
     * @param {Number} loadBalancerPoolId Load Balancer Pool ID
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/LoadBalancersApi~getLoadBalancerPoolNodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20083}
     */
    getLoadBalancerPoolNode(loadBalancerPoolId, id, callback) {
      let postBody = null;
      // verify the required parameter 'loadBalancerPoolId' is set
      if (loadBalancerPoolId === undefined || loadBalancerPoolId === null) {
        throw new Error("Missing the required parameter 'loadBalancerPoolId' when calling getLoadBalancerPoolNode");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getLoadBalancerPoolNode");
      }

      let pathParams = {
        'loadBalancerPoolId': loadBalancerPoolId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20083;
      return this.apiClient.callApi(
        '/api/load-balancer-pools/{loadBalancerPoolId}/nodes/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLoadBalancerProfile operation.
     * @callback module:api/LoadBalancersApi~getLoadBalancerProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20081} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Specific Load Balancer Profile
     * This endpoint retrieves a specific Load Balancer Profile.
     * @param {Number} loadBalancerId Load Balancer ID
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/LoadBalancersApi~getLoadBalancerProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20081}
     */
    getLoadBalancerProfile(loadBalancerId, id, callback) {
      let postBody = null;
      // verify the required parameter 'loadBalancerId' is set
      if (loadBalancerId === undefined || loadBalancerId === null) {
        throw new Error("Missing the required parameter 'loadBalancerId' when calling getLoadBalancerProfile");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getLoadBalancerProfile");
      }

      let pathParams = {
        'loadBalancerId': loadBalancerId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20081;
      return this.apiClient.callApi(
        '/api/load-balancers/{loadBalancerId}/profiles/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLoadBalancerType operation.
     * @callback module:api/LoadBalancersApi~getLoadBalancerTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20077} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Specific Load Balancer Type
     * This endpoint will retrieve a specific load balancer type by id.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/LoadBalancersApi~getLoadBalancerTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20077}
     */
    getLoadBalancerType(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getLoadBalancerType");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20077;
      return this.apiClient.callApi(
        '/api/load-balancer-types/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLoadBalancerVirtualServer operation.
     * @callback module:api/LoadBalancersApi~getLoadBalancerVirtualServerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20082} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Specific Load Balancer Virtual Server
     * This endpoint retrieves a specific Load Balancer Virtual Server.
     * @param {Number} loadBalancerId Load Balancer ID
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/LoadBalancersApi~getLoadBalancerVirtualServerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20082}
     */
    getLoadBalancerVirtualServer(loadBalancerId, id, callback) {
      let postBody = null;
      // verify the required parameter 'loadBalancerId' is set
      if (loadBalancerId === undefined || loadBalancerId === null) {
        throw new Error("Missing the required parameter 'loadBalancerId' when calling getLoadBalancerVirtualServer");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getLoadBalancerVirtualServer");
      }

      let pathParams = {
        'loadBalancerId': loadBalancerId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20082;
      return this.apiClient.callApi(
        '/api/load-balancers/{loadBalancerId}/virtual-servers/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listLoadBalancerMonitors operation.
     * @callback module:api/LoadBalancersApi~listLoadBalancerMonitorsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Load Balancer Monitors For Load Balancer
     * This endpoint retrieves all load balancer monitors associated with a specified load balancer.
     * @param {Number} loadBalancerId Load Balancer ID
     * @param {Object} opts Optional parameters
     * @param {Number} opts.max Maximum number of records to return, -1 can be used to fetch all records (default to 25)
     * @param {Number} opts.offset Offset records, the number of records to skip, for paginating requests (default to 0)
     * @param {String} opts.sort Sort order, the name of the property to sort by (default to 'name')
     * @param {module:model/String} opts.direction Sort direction, use 'desc' to reverse sort (default to 'asc')
     * @param {String} opts.name Filter by name, wildcard may be specified as %, eg. example-%
     * @param {String} opts.phrase Search phrase for partial matches on name or description
     * @param {module:api/LoadBalancersApi~listLoadBalancerMonitorsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    listLoadBalancerMonitors(loadBalancerId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'loadBalancerId' is set
      if (loadBalancerId === undefined || loadBalancerId === null) {
        throw new Error("Missing the required parameter 'loadBalancerId' when calling listLoadBalancerMonitors");
      }

      let pathParams = {
        'loadBalancerId': loadBalancerId
      };
      let queryParams = {
        'max': opts['max'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'direction': opts['direction'],
        'name': opts['name'],
        'phrase': opts['phrase']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/load-balancers/{loadBalancerId}/monitors', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listLoadBalancerPoolNodes operation.
     * @callback module:api/LoadBalancersApi~listLoadBalancerPoolNodesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Load Balancer Pool Nodes For Load Balancer Pool
     * This endpoint retrieves all load balancer pool nodes associated with a specified load balancer pool.
     * @param {Number} loadBalancerPoolId Load Balancer Pool ID
     * @param {Object} opts Optional parameters
     * @param {Number} opts.max Maximum number of records to return, -1 can be used to fetch all records (default to 25)
     * @param {Number} opts.offset Offset records, the number of records to skip, for paginating requests (default to 0)
     * @param {String} opts.sort Sort order, the name of the property to sort by (default to 'name')
     * @param {module:model/String} opts.direction Sort direction, use 'desc' to reverse sort (default to 'asc')
     * @param {String} opts.phrase Search phrase for partial matches on name or description
     * @param {module:api/LoadBalancersApi~listLoadBalancerPoolNodesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    listLoadBalancerPoolNodes(loadBalancerPoolId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'loadBalancerPoolId' is set
      if (loadBalancerPoolId === undefined || loadBalancerPoolId === null) {
        throw new Error("Missing the required parameter 'loadBalancerPoolId' when calling listLoadBalancerPoolNodes");
      }

      let pathParams = {
        'loadBalancerPoolId': loadBalancerPoolId
      };
      let queryParams = {
        'max': opts['max'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'direction': opts['direction'],
        'phrase': opts['phrase']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/load-balancer-pools/{loadBalancerPoolId}/nodes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listLoadBalancerPools operation.
     * @callback module:api/LoadBalancersApi~listLoadBalancerPoolsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Load Balancer Pools For Load Balancer
     * This endpoint retrieves all load balancer pools associated with a specified load balancer.
     * @param {Number} loadBalancerId Load Balancer ID
     * @param {Object} opts Optional parameters
     * @param {Number} opts.max Maximum number of records to return, -1 can be used to fetch all records (default to 25)
     * @param {Number} opts.offset Offset records, the number of records to skip, for paginating requests (default to 0)
     * @param {String} opts.sort Sort order, the name of the property to sort by (default to 'name')
     * @param {module:model/String} opts.direction Sort direction, use 'desc' to reverse sort (default to 'asc')
     * @param {String} opts.name Filter by name, wildcard may be specified as %, eg. example-%
     * @param {String} opts.phrase Search phrase for partial matches on name or description
     * @param {module:api/LoadBalancersApi~listLoadBalancerPoolsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    listLoadBalancerPools(loadBalancerId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'loadBalancerId' is set
      if (loadBalancerId === undefined || loadBalancerId === null) {
        throw new Error("Missing the required parameter 'loadBalancerId' when calling listLoadBalancerPools");
      }

      let pathParams = {
        'loadBalancerId': loadBalancerId
      };
      let queryParams = {
        'max': opts['max'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'direction': opts['direction'],
        'name': opts['name'],
        'phrase': opts['phrase']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/load-balancers/{loadBalancerId}/pools', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listLoadBalancerProfiles operation.
     * @callback module:api/LoadBalancersApi~listLoadBalancerProfilesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Load Balancer Profiles For Load Balancer
     * This endpoint retrieves all load balancer profiles associated with a specified load balancer.
     * @param {Number} loadBalancerId Load Balancer ID
     * @param {Object} opts Optional parameters
     * @param {Number} opts.max Maximum number of records to return, -1 can be used to fetch all records (default to 25)
     * @param {Number} opts.offset Offset records, the number of records to skip, for paginating requests (default to 0)
     * @param {String} opts.sort Sort order, the name of the property to sort by (default to 'name')
     * @param {module:model/String} opts.direction Sort direction, use 'desc' to reverse sort (default to 'asc')
     * @param {String} opts.name Filter by name, wildcard may be specified as %, eg. example-%
     * @param {String} opts.phrase Search phrase for partial matches on name or description
     * @param {module:api/LoadBalancersApi~listLoadBalancerProfilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    listLoadBalancerProfiles(loadBalancerId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'loadBalancerId' is set
      if (loadBalancerId === undefined || loadBalancerId === null) {
        throw new Error("Missing the required parameter 'loadBalancerId' when calling listLoadBalancerProfiles");
      }

      let pathParams = {
        'loadBalancerId': loadBalancerId
      };
      let queryParams = {
        'max': opts['max'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'direction': opts['direction'],
        'name': opts['name'],
        'phrase': opts['phrase']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/load-balancers/{loadBalancerId}/profiles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listLoadBalancerTypes operation.
     * @callback module:api/LoadBalancersApi~listLoadBalancerTypesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Load Balancer Types
     * This endpoint retrieves all Load Balancer Types.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.max Maximum number of records to return, -1 can be used to fetch all records (default to 25)
     * @param {Number} opts.offset Offset records, the number of records to skip, for paginating requests (default to 0)
     * @param {String} opts.sort Sort order, the name of the property to sort by (default to 'name')
     * @param {module:model/String} opts.direction Sort direction, use 'desc' to reverse sort (default to 'asc')
     * @param {Boolean} opts.optionTypes Pass true to include optionTypes in the response for each entry. (default to false)
     * @param {String} opts.phrase Search phrase for partial matches on name or description
     * @param {String} opts.name Filter by name, wildcard may be specified as %, eg. example-%
     * @param {String} opts.code If specified will return an exact match on code
     * @param {module:api/LoadBalancersApi~listLoadBalancerTypesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    listLoadBalancerTypes(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'max': opts['max'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'direction': opts['direction'],
        'optionTypes': opts['optionTypes'],
        'phrase': opts['phrase'],
        'name': opts['name'],
        'code': opts['code']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/load-balancer-types', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listLoadBalancerVirtualServers operation.
     * @callback module:api/LoadBalancersApi~listLoadBalancerVirtualServersCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Load Balancer Virtual Servers For Load Balancer
     * This endpoint retrieves load balancer virtual servers associated with a specified load balancer.
     * @param {Number} loadBalancerId Load Balancer ID
     * @param {Object} opts Optional parameters
     * @param {Number} opts.max Maximum number of records to return, -1 can be used to fetch all records (default to 25)
     * @param {Number} opts.offset Offset records, the number of records to skip, for paginating requests (default to 0)
     * @param {String} opts.sort Sort order, the name of the property to sort by (default to 'name')
     * @param {module:model/String} opts.direction Sort direction, use 'desc' to reverse sort (default to 'asc')
     * @param {String} opts.phrase Search phrase for partial matches on name or description
     * @param {String} opts.vipName If specified will return an exact match on vipName
     * @param {String} opts.vipAddress If specified will return an exact match on vipAddress
     * @param {String} opts.vipHostname If specified will return an exact match on vipHostname
     * @param {module:api/LoadBalancersApi~listLoadBalancerVirtualServersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    listLoadBalancerVirtualServers(loadBalancerId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'loadBalancerId' is set
      if (loadBalancerId === undefined || loadBalancerId === null) {
        throw new Error("Missing the required parameter 'loadBalancerId' when calling listLoadBalancerVirtualServers");
      }

      let pathParams = {
        'loadBalancerId': loadBalancerId
      };
      let queryParams = {
        'max': opts['max'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'direction': opts['direction'],
        'phrase': opts['phrase'],
        'vipName': opts['vipName'],
        'vipAddress': opts['vipAddress'],
        'vipHostname': opts['vipHostname']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/load-balancers/{loadBalancerId}/virtual-servers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listLoadBalancers operation.
     * @callback module:api/LoadBalancersApi~listLoadBalancersCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Load Balancers
     * This endpoint retrieves all load balancers associated with the account.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.max Maximum number of records to return, -1 can be used to fetch all records (default to 25)
     * @param {Number} opts.offset Offset records, the number of records to skip, for paginating requests (default to 0)
     * @param {String} opts.sort Sort order, the name of the property to sort by (default to 'name')
     * @param {module:model/String} opts.direction Sort direction, use 'desc' to reverse sort (default to 'asc')
     * @param {String} opts.name Filter by name, wildcard may be specified as %, eg. example-%
     * @param {String} opts.phrase Search phrase for partial matches on name or description
     * @param {module:api/LoadBalancersApi~listLoadBalancersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    listLoadBalancers(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'max': opts['max'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'direction': opts['direction'],
        'name': opts['name'],
        'phrase': opts['phrase']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/load-balancers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the refreshLoadBalancer operation.
     * @callback module:api/LoadBalancersApi~refreshLoadBalancerCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Refresh a Load Balancer
     * Will refresh a Load Balancer.
     * @param {Number} loadBalancerId Load Balancer ID
     * @param {module:api/LoadBalancersApi~refreshLoadBalancerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    refreshLoadBalancer(loadBalancerId, callback) {
      let postBody = null;
      // verify the required parameter 'loadBalancerId' is set
      if (loadBalancerId === undefined || loadBalancerId === null) {
        throw new Error("Missing the required parameter 'loadBalancerId' when calling refreshLoadBalancer");
      }

      let pathParams = {
        'loadBalancerId': loadBalancerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/load-balancers/{loadBalancerId}/refresh', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateLoadBalancer operation.
     * @callback module:api/LoadBalancersApi~updateLoadBalancerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20078} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Load Balancer
     * Available for NSX load balancers only  Use this command to update an existing load balancer. 
     * @param {Number} loadBalancerId Load Balancer ID
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject128} opts.inlineObject128 
     * @param {module:api/LoadBalancersApi~updateLoadBalancerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20078}
     */
    updateLoadBalancer(loadBalancerId, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject128'];
      // verify the required parameter 'loadBalancerId' is set
      if (loadBalancerId === undefined || loadBalancerId === null) {
        throw new Error("Missing the required parameter 'loadBalancerId' when calling updateLoadBalancer");
      }

      let pathParams = {
        'loadBalancerId': loadBalancerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20078;
      return this.apiClient.callApi(
        '/api/load-balancers/{loadBalancerId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateLoadBalancerMonitor operation.
     * @callback module:api/LoadBalancersApi~updateLoadBalancerMonitorCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Load Balancer Monitor
     * Use this command to update an existing load balancer monitor.  This endpoint allows updating a Load Balancer Monitor. Configuration options vary by Load Balancer Type. 
     * @param {Number} loadBalancerId Load Balancer ID
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject130} opts.inlineObject130 
     * @param {module:api/LoadBalancersApi~updateLoadBalancerMonitorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateLoadBalancerMonitor(loadBalancerId, id, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject130'];
      // verify the required parameter 'loadBalancerId' is set
      if (loadBalancerId === undefined || loadBalancerId === null) {
        throw new Error("Missing the required parameter 'loadBalancerId' when calling updateLoadBalancerMonitor");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateLoadBalancerMonitor");
      }

      let pathParams = {
        'loadBalancerId': loadBalancerId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/load-balancers/{loadBalancerId}/monitors/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateLoadBalancerPool operation.
     * @callback module:api/LoadBalancersApi~updateLoadBalancerPoolCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Load Balancer Pool
     * Use this command to update an existing load balancer pool.
     * @param {Number} loadBalancerId Load Balancer ID
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject132} opts.inlineObject132 
     * @param {module:api/LoadBalancersApi~updateLoadBalancerPoolCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateLoadBalancerPool(loadBalancerId, id, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject132'];
      // verify the required parameter 'loadBalancerId' is set
      if (loadBalancerId === undefined || loadBalancerId === null) {
        throw new Error("Missing the required parameter 'loadBalancerId' when calling updateLoadBalancerPool");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateLoadBalancerPool");
      }

      let pathParams = {
        'loadBalancerId': loadBalancerId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/load-balancers/{loadBalancerId}/pools/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateLoadBalancerPoolNode operation.
     * @callback module:api/LoadBalancersApi~updateLoadBalancerPoolNodeCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Load Balancer Pool Node
     * Use this command to update an existing load balancer pool node.
     * @param {Number} loadBalancerPoolId Load Balancer Pool ID
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject138} opts.inlineObject138 
     * @param {module:api/LoadBalancersApi~updateLoadBalancerPoolNodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateLoadBalancerPoolNode(loadBalancerPoolId, id, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject138'];
      // verify the required parameter 'loadBalancerPoolId' is set
      if (loadBalancerPoolId === undefined || loadBalancerPoolId === null) {
        throw new Error("Missing the required parameter 'loadBalancerPoolId' when calling updateLoadBalancerPoolNode");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateLoadBalancerPoolNode");
      }

      let pathParams = {
        'loadBalancerPoolId': loadBalancerPoolId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/load-balancer-pools/{loadBalancerPoolId}/nodes/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateLoadBalancerProfile operation.
     * @callback module:api/LoadBalancersApi~updateLoadBalancerProfileCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Load Balancer Profile
     * Use this command to update an existing load balancer Profile.
     * @param {Number} loadBalancerId Load Balancer ID
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject134} opts.inlineObject134 
     * @param {module:api/LoadBalancersApi~updateLoadBalancerProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateLoadBalancerProfile(loadBalancerId, id, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject134'];
      // verify the required parameter 'loadBalancerId' is set
      if (loadBalancerId === undefined || loadBalancerId === null) {
        throw new Error("Missing the required parameter 'loadBalancerId' when calling updateLoadBalancerProfile");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateLoadBalancerProfile");
      }

      let pathParams = {
        'loadBalancerId': loadBalancerId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/load-balancers/{loadBalancerId}/profiles/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateLoadBalancerVirtualServer operation.
     * @callback module:api/LoadBalancersApi~updateLoadBalancerVirtualServerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20082} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Load Balancer Virtual Server
     * Use this command to update an existing load balancer virtual server.
     * @param {Number} loadBalancerId Load Balancer ID
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject136} opts.inlineObject136 
     * @param {module:api/LoadBalancersApi~updateLoadBalancerVirtualServerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20082}
     */
    updateLoadBalancerVirtualServer(loadBalancerId, id, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject136'];
      // verify the required parameter 'loadBalancerId' is set
      if (loadBalancerId === undefined || loadBalancerId === null) {
        throw new Error("Missing the required parameter 'loadBalancerId' when calling updateLoadBalancerVirtualServer");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateLoadBalancerVirtualServer");
      }

      let pathParams = {
        'loadBalancerId': loadBalancerId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20082;
      return this.apiClient.callApi(
        '/api/load-balancers/{loadBalancerId}/virtual-servers/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
