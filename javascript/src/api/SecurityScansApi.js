/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DefaultError from '../model/DefaultError';

/**
* SecurityScans service.
* @module api/SecurityScansApi
* @version 6.2.1
*/
export default class SecurityScansApi {

    /**
    * Constructs a new SecurityScansApi. 
    * @alias module:api/SecurityScansApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getSecurityScans operation.
     * @callback module:api/SecurityScansApi~getSecurityScansCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a Specific Security Scan
     * Retrieves a specific security scan. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.results Include the `results` object in the response under the security scan. This is a potentially very large object containing the raw results of the scan. (default to false)
     * @param {module:api/SecurityScansApi~getSecurityScansCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getSecurityScans(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSecurityScans");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'results': opts['results']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/security-scans/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSecurityScans operation.
     * @callback module:api/SecurityScansApi~listSecurityScansCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves all Security Scans
     * Retrieves all security scans. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.max Maximum number of records to return, -1 can be used to fetch all records (default to 25)
     * @param {Number} opts.offset Offset records, the number of records to skip, for paginating requests (default to 0)
     * @param {String} opts.sort Sort order, the name of the property to sort by (default to 'scanDate')
     * @param {module:model/String} opts.direction Sort direction, use 'desc' to reverse sort (default to 'desc')
     * @param {String} opts.phrase Search phrase for partial matches on name or description of security package
     * @param {Number} opts.securityPackageId Filter results by security package id(s). This parameter can be passed multiple times to match more than one id.
     * @param {Number} opts.serverId The Server ID for Filtering
     * @param {Boolean} opts.results Include the `results` object in the response under each security scan. This is a potentially very large object containing the raw results of the scan. (default to false)
     * @param {module:api/SecurityScansApi~listSecurityScansCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    listSecurityScans(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'max': opts['max'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'direction': opts['direction'],
        'phrase': opts['phrase'],
        'securityPackageId': opts['securityPackageId'],
        'serverId': opts['serverId'],
        'results': opts['results']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/security-scans', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
