/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.1.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddBlueprint200Response from '../model/AddBlueprint200Response';
import AddBlueprintRequest from '../model/AddBlueprintRequest';
import DefaultError from '../model/DefaultError';
import GetBlueprint200Response from '../model/GetBlueprint200Response';
import ListBlueprints200Response from '../model/ListBlueprints200Response';
import Model200Success from '../model/Model200Success';
import UpdateBlueprintPermissionsRequest from '../model/UpdateBlueprintPermissionsRequest';

/**
* Blueprints service.
* @module api/BlueprintsApi
* @version 6.1.1
*/
export default class BlueprintsApi {

    /**
    * Constructs a new BlueprintsApi. 
    * @alias module:api/BlueprintsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addBlueprint operation.
     * @callback module:api/BlueprintsApi~addBlueprintCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddBlueprint200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Blueprint
     * Create a Blueprint
     * @param {Object} opts Optional parameters
     * @param {module:model/AddBlueprintRequest} [addBlueprintRequest] 
     * @param {module:api/BlueprintsApi~addBlueprintCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddBlueprint200Response}
     */
    addBlueprint(opts, callback) {
      opts = opts || {};
      let postBody = opts['addBlueprintRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AddBlueprint200Response;
      return this.apiClient.callApi(
        '/api/blueprints', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBlueprint operation.
     * @callback module:api/BlueprintsApi~deleteBlueprintCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Blueprint
     * Delete a Blueprint
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/BlueprintsApi~deleteBlueprintCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    deleteBlueprint(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteBlueprint");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/blueprints/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBlueprint operation.
     * @callback module:api/BlueprintsApi~getBlueprintCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetBlueprint200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Specific Blueprint
     * This endpoint retrieves a specific blueprint.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/BlueprintsApi~getBlueprintCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetBlueprint200Response}
     */
    getBlueprint(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getBlueprint");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetBlueprint200Response;
      return this.apiClient.callApi(
        '/api/blueprints/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listBlueprints operation.
     * @callback module:api/BlueprintsApi~listBlueprintsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListBlueprints200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Blueprints
     * This endpoint retrieves all blueprints.
     * @param {Object} opts Optional parameters
     * @param {Number} [max = 25)] Maximum number of records to return
     * @param {Number} [offset = 0)] Offset records, the number of records to skip, for paginating requests
     * @param {String} [name] Filter by name, wildcard may be specified as %, eg. example-%
     * @param {String} [phrase] Search phrase for partial matches on name or description
     * @param {String} [labels] Filter by label(s), matches records that contain any of the specified labels
     * @param {String} [allLabels] Filter by label(s), matches records that contain all of the specified labels
     * @param {module:api/BlueprintsApi~listBlueprintsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListBlueprints200Response}
     */
    listBlueprints(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'max': opts['max'],
        'offset': opts['offset'],
        'name': opts['name'],
        'phrase': opts['phrase'],
        'labels': opts['labels'],
        'allLabels': opts['allLabels']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListBlueprints200Response;
      return this.apiClient.callApi(
        '/api/blueprints', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBlueprint operation.
     * @callback module:api/BlueprintsApi~updateBlueprintCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetBlueprint200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updating a Blueprint
     * Update a Blueprint. This overwrites the entire config, so the entire blueprint config should be passed.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {module:model/AddBlueprintRequest} [addBlueprintRequest] 
     * @param {module:api/BlueprintsApi~updateBlueprintCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetBlueprint200Response}
     */
    updateBlueprint(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['addBlueprintRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateBlueprint");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetBlueprint200Response;
      return this.apiClient.callApi(
        '/api/blueprints/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBlueprintImage operation.
     * @callback module:api/BlueprintsApi~updateBlueprintImageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetBlueprint200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Blueprint Image
     * Update Blueprint Image
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {File} [templateImage] 
     * @param {module:api/BlueprintsApi~updateBlueprintImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetBlueprint200Response}
     */
    updateBlueprintImage(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateBlueprintImage");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'templateImage': opts['templateImage']
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = GetBlueprint200Response;
      return this.apiClient.callApi(
        '/api/blueprints/{id}/image', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBlueprintPermissions operation.
     * @callback module:api/BlueprintsApi~updateBlueprintPermissionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetBlueprint200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Blueprint Permissions
     * Update Blueprint Permissions
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateBlueprintPermissionsRequest} [updateBlueprintPermissionsRequest] 
     * @param {module:api/BlueprintsApi~updateBlueprintPermissionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetBlueprint200Response}
     */
    updateBlueprintPermissions(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateBlueprintPermissionsRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateBlueprintPermissions");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetBlueprint200Response;
      return this.apiClient.callApi(
        '/api/blueprints/{id}/update-permissions', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
