/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DefaultError from '../model/DefaultError';
import InlineObject66 from '../model/InlineObject66';
import Model200Success from '../model/Model200Success';
import OneOfstringlong from '../model/OneOfstringlong';

/**
* Cypher service.
* @module api/CypherApi
* @version 6.2.1
*/
export default class CypherApi {

    /**
    * Constructs a new CypherApi. 
    * @alias module:api/CypherApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addCypherKey operation.
     * @callback module:api/CypherApi~addCypherKeyCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Write a Cypher
     * This endpoint will create or update a cypher key.
     * @param {String} cypherPath The key includes a mount prefix separated by a /. For example, the key secret/foo uses the secret mount.  Available Mounts  <table>   <tr>     <th>Mount</th>     <th>Description</th>     <th>Example</th>   </tr>   <tr>     <td>password</td>     <td>Generates a secure password of specified character length in the key pattern (or 15) with symbols, numbers, upper case, and lower case letters (i.e. password/15/mypass generates a 15 character password).</td>     <td>password/15/mypass</td>   </tr>   <tr>     <td>tfvars</td>     <td>This is a module to store a tfvars file for terraform.</td>     <td>tfvars/mytfvar</td>   </tr>   <tr>     <td>secret</td>     <td>This is the standard secret module that stores a key/value in encrypted form. Capable of storing entire JSON object or a String.</td>     <td>secret/foo</td>   </tr>   <tr>     <td>uuid</td>     <td>Returns a new UUID by key name when requested and stores the generated UUID by key name for a given lease timeout period.</td>     <td>uuid/autoMac1</td>   </tr>   <tr>     <td>key</td>     <td>Generates a Base 64 encoded AES Key of specified bit length in the key pattern (i.e. key/128/mykey generates a 128-bit key)</td>     <td>key/128/mykey</td>   </tr> </table> 
     * @param {Object} opts Optional parameters
     * @param {module:model/OneOfstringlong} opts.ttl Time to Live. The lease duration in seconds, or a human readable format eg. '15m', 8h, '7d'.  0 means no expiry.
     * @param {String} opts.value The secret value to be stored. Only required for certain mounts. Some mounts generate their own value and do not require a value to be passed. eg. `uuid`, `key` and `password`.
     * @param {String} opts.type The type of data being stored, `string` or `object`. The data type depends on the cypher mount being used. Most mounts use `string` as their data type, but `secret` uses `object` by default. You can store a string instead by passing `type=string`. This means the `data` value returned by the API will be a string instead of an object.
     * @param {module:model/InlineObject66} opts.inlineObject66 
     * @param {module:api/CypherApi~addCypherKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    addCypherKey(cypherPath, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject66'];
      // verify the required parameter 'cypherPath' is set
      if (cypherPath === undefined || cypherPath === null) {
        throw new Error("Missing the required parameter 'cypherPath' when calling addCypherKey");
      }

      let pathParams = {
        'cypherPath': cypherPath
      };
      let queryParams = {
        'ttl': opts['ttl'],
        'value': opts['value'],
        'type': opts['type']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/cypher/{cypherPath}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCypherKey operation.
     * @callback module:api/CypherApi~getCypherKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Read or Create a Cypher Key
     * This endpoint retrieves a specific cypher key. The value of the key is decrypted and returned as data. It may be a String or an object with many {\"key\":\"value\"} pairs.  The type depends on the cypher mount's capabilities and what type of data was written to the key.  For example the `secret/` mount allows either a string or an object, while the `password/` mount will always store and return a string. This endpoint can also create a key. This only applies to mount types `uuid`, `key`, `password`.  Refer to the `POST` endpoint for more information. 
     * @param {String} cypherPath The cypher key including the mount prefix.
     * @param {Object} opts Optional parameters
     * @param {String} opts.leaseToken An execution lease token.
     * @param {String} opts.sort Sort order, the name of the property to sort by (default to 'name')
     * @param {module:model/String} opts.direction Sort direction, use 'desc' to reverse sort (default to 'asc')
     * @param {module:api/CypherApi~getCypherKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    getCypherKey(cypherPath, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'cypherPath' is set
      if (cypherPath === undefined || cypherPath === null) {
        throw new Error("Missing the required parameter 'cypherPath' when calling getCypherKey");
      }

      let pathParams = {
        'cypherPath': cypherPath
      };
      let queryParams = {
        'leaseToken': opts['leaseToken'],
        'sort': opts['sort'],
        'direction': opts['direction']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth', 'cypherAuth-XCToken', 'cypherAuth-XMLease', 'cypherAuth-XVToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/cypher/{cypherPath}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listCypherKeys operation.
     * @callback module:api/CypherApi~listCypherKeysCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Cypher Keys
     * This endpoint retrieves all cypher keys associated with the account, or user.  This method can be used to list keys as well, by passing the query parameter list=true.
     * @param {Object} opts Optional parameters
     * @param {String} opts.leaseToken An execution lease token.
     * @param {Boolean} opts.list This endpoint is available via the http method LIST. The GET method can be used to list keys as well, by passing the query parameter list=true. (default to false)
     * @param {String} opts.phrase Search phrase for partial matches on name or description
     * @param {Number} opts.max Maximum number of records to return, -1 can be used to fetch all records (default to 25)
     * @param {Number} opts.offset Offset records, the number of records to skip, for paginating requests (default to 0)
     * @param {String} opts.sort Sort order, the name of the property to sort by (default to 'name')
     * @param {module:model/String} opts.direction Sort direction, use 'desc' to reverse sort (default to 'asc')
     * @param {module:api/CypherApi~listCypherKeysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    listCypherKeys(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'leaseToken': opts['leaseToken'],
        'list': opts['list'],
        'phrase': opts['phrase'],
        'max': opts['max'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'direction': opts['direction']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth', 'cypherAuth-XCToken', 'cypherAuth-XMLease', 'cypherAuth-XVToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/cypher', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeCypher operation.
     * @callback module:api/CypherApi~removeCypherCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Cypher
     * Will delete a cypher from the system and make it no longer usable. 
     * @param {String} cypherPath The cypher key including the mount prefix.
     * @param {module:api/CypherApi~removeCypherCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    removeCypher(cypherPath, callback) {
      let postBody = null;
      // verify the required parameter 'cypherPath' is set
      if (cypherPath === undefined || cypherPath === null) {
        throw new Error("Missing the required parameter 'cypherPath' when calling removeCypher");
      }

      let pathParams = {
        'cypherPath': cypherPath
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/cypher/{cypherPath}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
