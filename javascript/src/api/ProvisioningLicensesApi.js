/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DefaultError from '../model/DefaultError';
import InlineObject202 from '../model/InlineObject202';
import InlineObject203 from '../model/InlineObject203';
import InlineResponse200126 from '../model/InlineResponse200126';
import InlineResponse200127 from '../model/InlineResponse200127';
import Model200Success from '../model/Model200Success';

/**
* ProvisioningLicenses service.
* @module api/ProvisioningLicensesApi
* @version 6.2.1
*/
export default class ProvisioningLicensesApi {

    /**
    * Constructs a new ProvisioningLicensesApi. 
    * @alias module:api/ProvisioningLicensesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addProvisioningLicense operation.
     * @callback module:api/ProvisioningLicensesApi~addProvisioningLicenseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a License
     * Use this command to create a new license.
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject202} opts.inlineObject202 
     * @param {module:api/ProvisioningLicensesApi~addProvisioningLicenseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    addProvisioningLicense(opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject202'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/provisioning-licenses', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProvisioningLicense operation.
     * @callback module:api/ProvisioningLicensesApi~getProvisioningLicenseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200126} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Specific License
     * This endpoint retrieves a specific license.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/ProvisioningLicensesApi~getProvisioningLicenseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200126}
     */
    getProvisioningLicense(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getProvisioningLicense");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200126;
      return this.apiClient.callApi(
        '/api/provisioning-licenses/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProvisioningLicenseReservations operation.
     * @callback module:api/ProvisioningLicensesApi~getProvisioningLicenseReservationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200127} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Reservations for Specific License
     * This endpoint retrieves all reservations for a specific license. Each time a license is applied to a new server, a reservation is created, reducing the available copies for the license.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/ProvisioningLicensesApi~getProvisioningLicenseReservationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200127}
     */
    getProvisioningLicenseReservations(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getProvisioningLicenseReservations");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200127;
      return this.apiClient.callApi(
        '/api/provisioning-licenses/{id}/reservations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listProvisioningLicenses operation.
     * @callback module:api/ProvisioningLicensesApi~listProvisioningLicensesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Licenses
     * This endpoint retrieves all licenses.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.max Maximum number of records to return, -1 can be used to fetch all records (default to 25)
     * @param {Number} opts.offset Offset records, the number of records to skip, for paginating requests (default to 0)
     * @param {String} opts.sort Sort order, the name of the property to sort by (default to 'name')
     * @param {module:model/String} opts.direction Sort direction, use 'desc' to reverse sort (default to 'asc')
     * @param {String} opts.phrase Search phrase for partial matches on name or description
     * @param {String} opts.name Filter by name, wildcard may be specified as %, eg. example-%
     * @param {String} opts.licenseType If specified will return an exact match on licenseType code
     * @param {String} opts.licenseVersion If specified will return an exact match on licenseVersion
     * @param {String} opts.orgName If specified will return an exact match on orgName
     * @param {String} opts.fullName If specified will return an exact match on fullName
     * @param {module:api/ProvisioningLicensesApi~listProvisioningLicensesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    listProvisioningLicenses(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'max': opts['max'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'direction': opts['direction'],
        'phrase': opts['phrase'],
        'name': opts['name'],
        'licenseType': opts['licenseType'],
        'licenseVersion': opts['licenseVersion'],
        'orgName': opts['orgName'],
        'fullName': opts['fullName']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/provisioning-licenses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeProvisioningLicense operation.
     * @callback module:api/ProvisioningLicensesApi~removeProvisioningLicenseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a License
     * Will delete a license.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/ProvisioningLicensesApi~removeProvisioningLicenseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    removeProvisioningLicense(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeProvisioningLicense");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/provisioning-licenses/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateProvisioningLicense operation.
     * @callback module:api/ProvisioningLicensesApi~updateProvisioningLicenseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a License
     * Use this command to update an existing license.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject203} opts.inlineObject203 
     * @param {module:api/ProvisioningLicensesApi~updateProvisioningLicenseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    updateProvisioningLicense(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject203'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateProvisioningLicense");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/provisioning-licenses/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
