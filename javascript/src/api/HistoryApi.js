/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DefaultError from '../model/DefaultError';
import InlineResponse20048 from '../model/InlineResponse20048';
import InlineResponse20049 from '../model/InlineResponse20049';

/**
* History service.
* @module api/HistoryApi
* @version 6.2.1
*/
export default class HistoryApi {

    /**
    * Constructs a new HistoryApi. 
    * @alias module:api/HistoryApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getHistory operation.
     * @callback module:api/HistoryApi~getHistoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20048} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a Specific Process
     * Retrieves a specific process. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/HistoryApi~getHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20048}
     */
    getHistory(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getHistory");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20048;
      return this.apiClient.callApi(
        '/api/processes/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getHistoryEvent operation.
     * @callback module:api/HistoryApi~getHistoryEventCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20049} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a Specific Process Event
     * Retrieves a specific process event. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/HistoryApi~getHistoryEventCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20049}
     */
    getHistoryEvent(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getHistoryEvent");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20049;
      return this.apiClient.callApi(
        '/api/processes/events/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listHistory operation.
     * @callback module:api/HistoryApi~listHistoryCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves Process History
     * Retrieves process history for objects 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.instanceId The Instance ID for Filtering
     * @param {Number} opts.containerId The Container ID for Filtering
     * @param {Number} opts.serverId The Server ID for Filtering
     * @param {Number} opts.zoneId The Zone ID for Filtering
     * @param {Number} opts.appId The App ID for Filtering
     * @param {String} opts.phrase Search phrase for partial matches on message, displayName, output, event.message, event.output or event.error
     * @param {module:api/HistoryApi~listHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    listHistory(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'instanceId': opts['instanceId'],
        'containerId': opts['containerId'],
        'serverId': opts['serverId'],
        'zoneId': opts['zoneId'],
        'appId': opts['appId'],
        'phrase': opts['phrase']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/processes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
