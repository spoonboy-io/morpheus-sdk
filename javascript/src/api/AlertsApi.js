/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.1.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddAlerts200Response from '../model/AddAlerts200Response';
import AddAlertsRequest from '../model/AddAlertsRequest';
import DefaultError from '../model/DefaultError';
import GetAlerts200Response from '../model/GetAlerts200Response';
import ListAlerts200Response from '../model/ListAlerts200Response';
import Model200Success from '../model/Model200Success';
import UpdateAlerts200Response from '../model/UpdateAlerts200Response';
import UpdateAlertsRequest from '../model/UpdateAlertsRequest';

/**
* Alerts service.
* @module api/AlertsApi
* @version 6.1.1
*/
export default class AlertsApi {

    /**
    * Constructs a new AlertsApi. 
    * @alias module:api/AlertsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addAlerts operation.
     * @callback module:api/AlertsApi~addAlertsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddAlerts200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a New Alert
     * Create a new monitoring alert.
     * @param {Object} opts Optional parameters
     * @param {module:model/AddAlertsRequest} [addAlertsRequest] 
     * @param {module:api/AlertsApi~addAlertsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddAlerts200Response}
     */
    addAlerts(opts, callback) {
      opts = opts || {};
      let postBody = opts['addAlertsRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AddAlerts200Response;
      return this.apiClient.callApi(
        '/api/monitoring/alerts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAlerts operation.
     * @callback module:api/AlertsApi~deleteAlertsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Specific Alert
     * Delete an existing monitoring alert.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/AlertsApi~deleteAlertsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    deleteAlerts(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteAlerts");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/monitoring/alerts/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAlerts operation.
     * @callback module:api/AlertsApi~getAlertsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAlerts200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Specific Alert
     * Get details about a specific monitoring alert.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/AlertsApi~getAlertsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAlerts200Response}
     */
    getAlerts(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAlerts");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetAlerts200Response;
      return this.apiClient.callApi(
        '/api/monitoring/alerts/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAlerts operation.
     * @callback module:api/AlertsApi~listAlertsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListAlerts200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List All Alerts
     * Get a list of monitoring alerts.
     * @param {Object} opts Optional parameters
     * @param {Number} [max = 25)] Maximum number of records to return
     * @param {Number} [offset = 0)] Offset records, the number of records to skip, for paginating requests
     * @param {Date} [lastUpdated] Date filter, restricts query to only load resources updated more recently than the date specified (ISO 8601)
     * @param {module:api/AlertsApi~listAlertsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListAlerts200Response}
     */
    listAlerts(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'max': opts['max'],
        'offset': opts['offset'],
        'lastUpdated': opts['lastUpdated']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListAlerts200Response;
      return this.apiClient.callApi(
        '/api/monitoring/alerts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAlerts operation.
     * @callback module:api/AlertsApi~updateAlertsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateAlerts200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Alert
     * Update an existing monitoring alert.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateAlertsRequest} [updateAlertsRequest] 
     * @param {module:api/AlertsApi~updateAlertsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateAlerts200Response}
     */
    updateAlerts(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateAlertsRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateAlerts");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateAlerts200Response;
      return this.apiClient.callApi(
        '/api/monitoring/alerts/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
