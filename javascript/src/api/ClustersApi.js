/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ClusterApiConfig from '../model/ClusterApiConfig';
import ClusterApplyTemplate from '../model/ClusterApplyTemplate';
import DefaultError from '../model/DefaultError';
import InlineObject268 from '../model/InlineObject268';
import InlineObject52 from '../model/InlineObject52';
import InlineObject53 from '../model/InlineObject53';
import InlineObject54 from '../model/InlineObject54';
import InlineObject55 from '../model/InlineObject55';
import InlineObject56 from '../model/InlineObject56';
import InlineObject57 from '../model/InlineObject57';
import InlineObject58 from '../model/InlineObject58';
import InlineObject59 from '../model/InlineObject59';
import InlineResponse200168 from '../model/InlineResponse200168';
import InlineResponse20026 from '../model/InlineResponse20026';
import InlineResponse20027 from '../model/InlineResponse20027';
import InlineResponse20028 from '../model/InlineResponse20028';
import InlineResponse20029 from '../model/InlineResponse20029';
import InlineResponse20030 from '../model/InlineResponse20030';
import InlineResponse20031 from '../model/InlineResponse20031';
import InlineResponse20032 from '../model/InlineResponse20032';
import Model200Success from '../model/Model200Success';
import SuccessError from '../model/SuccessError';

/**
* Clusters service.
* @module api/ClustersApi
* @version 6.2.1
*/
export default class ClustersApi {

    /**
    * Constructs a new ClustersApi. 
    * @alias module:api/ClustersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addCluster operation.
     * @callback module:api/ClustersApi~addClusterCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Cluster
     * This endpoint will create a cluster.
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject52} opts.inlineObject52 
     * @param {module:api/ClustersApi~addClusterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    addCluster(opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject52'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/clusters', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addClusterNamespace operation.
     * @callback module:api/ClustersApi~addClusterNamespaceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add Namespace (Kubernetes)
     * Add Namespace (Kubernetes)
     * @param {Number} clusterId The ID of the cluster
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject56} opts.inlineObject56 
     * @param {module:api/ClustersApi~addClusterNamespaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    addClusterNamespace(clusterId, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject56'];
      // verify the required parameter 'clusterId' is set
      if (clusterId === undefined || clusterId === null) {
        throw new Error("Missing the required parameter 'clusterId' when calling addClusterNamespace");
      }

      let pathParams = {
        'clusterId': clusterId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/clusters/{clusterId}/namespaces', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addClusterWorker operation.
     * @callback module:api/ClustersApi~addClusterWorkerCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add Worker
     * Add Worker
     * @param {Number} clusterId The ID of the cluster
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject59} opts.inlineObject59 
     * @param {module:api/ClustersApi~addClusterWorkerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    addClusterWorker(clusterId, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject59'];
      // verify the required parameter 'clusterId' is set
      if (clusterId === undefined || clusterId === null) {
        throw new Error("Missing the required parameter 'clusterId' when calling addClusterWorker");
      }

      let pathParams = {
        'clusterId': clusterId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/clusters/{clusterId}/servers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the applyTemplate operation.
     * @callback module:api/ClustersApi~applyTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClusterApplyTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Apply Template to Cluster (Kubernetes)
     * This endpoint applies the requested template, via Service Url, YAML, or Spec Template name/id, to a Kubernetes cluster.  **Note**: The success response informs of status of submission of request. Results of the actual template application can be assesed with the returned execution id via [/api/execution-request/{uniqueId}](/reference/getexecutionrequest) 
     * @param {Number} clusterId The ID of the cluster
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject54} opts.inlineObject54 
     * @param {module:api/ClustersApi~applyTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClusterApplyTemplate}
     */
    applyTemplate(clusterId, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject54'];
      // verify the required parameter 'clusterId' is set
      if (clusterId === undefined || clusterId === null) {
        throw new Error("Missing the required parameter 'clusterId' when calling applyTemplate");
      }

      let pathParams = {
        'clusterId': clusterId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ClusterApplyTemplate;
      return this.apiClient.callApi(
        '/api/clusters/{clusterId}/apply-template', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCluster operation.
     * @callback module:api/ClustersApi~deleteClusterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Cluster
     * Will delete a cluster and associated resources, hosts, volumes asynchronously
     * @param {Number} clusterId The ID of the cluster
     * @param {Object} opts Optional parameters
     * @param {String} opts.removeInstances Remove Instances (default to 'off')
     * @param {String} opts.removeResources Remove Resources (default to 'on')
     * @param {String} opts.preserveVolumes Preserve Volumes (default to 'off')
     * @param {String} opts.releaseFloatingIps Release Floating IPs (default to 'on')
     * @param {String} opts.releaseEIPs Alias for releaseFloatingIps (default to 'on')
     * @param {String} opts.force Force Delete (default to 'off')
     * @param {module:api/ClustersApi~deleteClusterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    deleteCluster(clusterId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clusterId' is set
      if (clusterId === undefined || clusterId === null) {
        throw new Error("Missing the required parameter 'clusterId' when calling deleteCluster");
      }

      let pathParams = {
        'clusterId': clusterId
      };
      let queryParams = {
        'removeInstances': opts['removeInstances'],
        'removeResources': opts['removeResources'],
        'preserveVolumes': opts['preserveVolumes'],
        'releaseFloatingIps': opts['releaseFloatingIps'],
        'releaseEIPs': opts['releaseEIPs'],
        'force': opts['force']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/clusters/{clusterId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteClusterContainer operation.
     * @callback module:api/ClustersApi~deleteClusterContainerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Container
     * This endpoint deletes a specified container from a specified cluster.
     * @param {Number} clusterId The ID of the cluster
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {String} opts.force Force Delete (default to 'off')
     * @param {module:api/ClustersApi~deleteClusterContainerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    deleteClusterContainer(clusterId, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clusterId' is set
      if (clusterId === undefined || clusterId === null) {
        throw new Error("Missing the required parameter 'clusterId' when calling deleteClusterContainer");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteClusterContainer");
      }

      let pathParams = {
        'clusterId': clusterId,
        'id': id
      };
      let queryParams = {
        'force': opts['force']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/clusters/{clusterId}/containers/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteClusterDeployment operation.
     * @callback module:api/ClustersApi~deleteClusterDeploymentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Deployment
     * This endpoint deletes a specified deployment from a specified cluster.
     * @param {Number} clusterId The ID of the cluster
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {String} opts.force Force Delete (default to 'off')
     * @param {module:api/ClustersApi~deleteClusterDeploymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    deleteClusterDeployment(clusterId, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clusterId' is set
      if (clusterId === undefined || clusterId === null) {
        throw new Error("Missing the required parameter 'clusterId' when calling deleteClusterDeployment");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteClusterDeployment");
      }

      let pathParams = {
        'clusterId': clusterId,
        'id': id
      };
      let queryParams = {
        'force': opts['force']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/clusters/{clusterId}/deployments/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteClusterJob operation.
     * @callback module:api/ClustersApi~deleteClusterJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Job
     * This endpoint deletes a specified job from a specified cluster.
     * @param {Number} clusterId The ID of the cluster
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {String} opts.force Force Delete (default to 'off')
     * @param {module:api/ClustersApi~deleteClusterJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    deleteClusterJob(clusterId, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clusterId' is set
      if (clusterId === undefined || clusterId === null) {
        throw new Error("Missing the required parameter 'clusterId' when calling deleteClusterJob");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteClusterJob");
      }

      let pathParams = {
        'clusterId': clusterId,
        'id': id
      };
      let queryParams = {
        'force': opts['force']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/clusters/{clusterId}/jobs/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteClusterNamespace operation.
     * @callback module:api/ClustersApi~deleteClusterNamespaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Namespace (Kubernetes)
     * Will delete a namespace from the specified cluster
     * @param {Number} clusterId The ID of the cluster
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {String} opts.force Force Delete (default to 'off')
     * @param {module:api/ClustersApi~deleteClusterNamespaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    deleteClusterNamespace(clusterId, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clusterId' is set
      if (clusterId === undefined || clusterId === null) {
        throw new Error("Missing the required parameter 'clusterId' when calling deleteClusterNamespace");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteClusterNamespace");
      }

      let pathParams = {
        'clusterId': clusterId,
        'id': id
      };
      let queryParams = {
        'force': opts['force']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/clusters/{clusterId}/namespaces/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteClusterService operation.
     * @callback module:api/ClustersApi~deleteClusterServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Service
     * This endpoint deletes a specified service from a specified cluster.
     * @param {Number} clusterId The ID of the cluster
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {String} opts.force Force Delete (default to 'off')
     * @param {module:api/ClustersApi~deleteClusterServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    deleteClusterService(clusterId, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clusterId' is set
      if (clusterId === undefined || clusterId === null) {
        throw new Error("Missing the required parameter 'clusterId' when calling deleteClusterService");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteClusterService");
      }

      let pathParams = {
        'clusterId': clusterId,
        'id': id
      };
      let queryParams = {
        'force': opts['force']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/clusters/{clusterId}/services/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteClusterStatefulSet operation.
     * @callback module:api/ClustersApi~deleteClusterStatefulSetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessError} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Stateful Set
     * Will delete a stateful set from the specified cluster
     * @param {Number} clusterId The ID of the cluster
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {String} opts.force Force Delete (default to 'off')
     * @param {module:api/ClustersApi~deleteClusterStatefulSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessError}
     */
    deleteClusterStatefulSet(clusterId, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clusterId' is set
      if (clusterId === undefined || clusterId === null) {
        throw new Error("Missing the required parameter 'clusterId' when calling deleteClusterStatefulSet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteClusterStatefulSet");
      }

      let pathParams = {
        'clusterId': clusterId,
        'id': id
      };
      let queryParams = {
        'force': opts['force']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SuccessError;
      return this.apiClient.callApi(
        '/api/clusters/{clusterId}/statefulsets/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteClusterVolume operation.
     * @callback module:api/ClustersApi~deleteClusterVolumeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Volume
     * Will delete a volume from the specified cluster
     * @param {Number} clusterId The ID of the cluster
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {String} opts.force Force Delete (default to 'off')
     * @param {module:api/ClustersApi~deleteClusterVolumeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    deleteClusterVolume(clusterId, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clusterId' is set
      if (clusterId === undefined || clusterId === null) {
        throw new Error("Missing the required parameter 'clusterId' when calling deleteClusterVolume");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteClusterVolume");
      }

      let pathParams = {
        'clusterId': clusterId,
        'id': id
      };
      let queryParams = {
        'force': opts['force']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/clusters/{clusterId}/volumes/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteClusterWorker operation.
     * @callback module:api/ClustersApi~deleteClusterWorkerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Worker
     * This endpoint deletes a specified worker from a specified cluster.
     * @param {Number} clusterId The ID of the cluster
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {String} opts.force Force Delete (default to 'off')
     * @param {module:api/ClustersApi~deleteClusterWorkerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    deleteClusterWorker(clusterId, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clusterId' is set
      if (clusterId === undefined || clusterId === null) {
        throw new Error("Missing the required parameter 'clusterId' when calling deleteClusterWorker");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteClusterWorker");
      }

      let pathParams = {
        'clusterId': clusterId,
        'id': id
      };
      let queryParams = {
        'force': opts['force']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/clusters/{clusterId}/servers/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCluster operation.
     * @callback module:api/ClustersApi~getClusterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20026} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Specific Cluster
     * This endpoint retrieves a specific cluster.
     * @param {Number} clusterId The ID of the cluster
     * @param {module:api/ClustersApi~getClusterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20026}
     */
    getCluster(clusterId, callback) {
      let postBody = null;
      // verify the required parameter 'clusterId' is set
      if (clusterId === undefined || clusterId === null) {
        throw new Error("Missing the required parameter 'clusterId' when calling getCluster");
      }

      let pathParams = {
        'clusterId': clusterId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20026;
      return this.apiClient.callApi(
        '/api/clusters/{clusterId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getClusterApiConfig operation.
     * @callback module:api/ClustersApi~getClusterApiConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClusterApiConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get API Config
     * This endpoint retrieves the API configuration for a specified cluster. The configuration is cluster type specific.
     * @param {Number} clusterId The ID of the cluster
     * @param {module:api/ClustersApi~getClusterApiConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClusterApiConfig}
     */
    getClusterApiConfig(clusterId, callback) {
      let postBody = null;
      // verify the required parameter 'clusterId' is set
      if (clusterId === undefined || clusterId === null) {
        throw new Error("Missing the required parameter 'clusterId' when calling getClusterApiConfig");
      }

      let pathParams = {
        'clusterId': clusterId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ClusterApiConfig;
      return this.apiClient.callApi(
        '/api/clusters/{clusterId}/api-config', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getClusterDatastore operation.
     * @callback module:api/ClustersApi~getClusterDatastoreCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20027} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Specific Datastore
     * This endpoint retrieves a specific cluster datastore.
     * @param {Number} clusterId The ID of the cluster
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/ClustersApi~getClusterDatastoreCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20027}
     */
    getClusterDatastore(clusterId, id, callback) {
      let postBody = null;
      // verify the required parameter 'clusterId' is set
      if (clusterId === undefined || clusterId === null) {
        throw new Error("Missing the required parameter 'clusterId' when calling getClusterDatastore");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getClusterDatastore");
      }

      let pathParams = {
        'clusterId': clusterId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20027;
      return this.apiClient.callApi(
        '/api/clusters/{clusterId}/datastores/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getClusterHistory operation.
     * @callback module:api/ClustersApi~getClusterHistoryCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Cluster History
     * This endpoint retrieves the process history for a specific cluster.
     * @param {Number} clusterId The ID of the cluster
     * @param {module:api/ClustersApi~getClusterHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getClusterHistory(clusterId, callback) {
      let postBody = null;
      // verify the required parameter 'clusterId' is set
      if (clusterId === undefined || clusterId === null) {
        throw new Error("Missing the required parameter 'clusterId' when calling getClusterHistory");
      }

      let pathParams = {
        'clusterId': clusterId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/clusters/{clusterId}/history', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getClusterHistoryDetail operation.
     * @callback module:api/ClustersApi~getClusterHistoryDetailCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20028} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Cluster History Details
     * This endpoint retrieves the history for a specific cluster process.
     * @param {Number} clusterId The ID of the cluster
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/ClustersApi~getClusterHistoryDetailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20028}
     */
    getClusterHistoryDetail(clusterId, id, callback) {
      let postBody = null;
      // verify the required parameter 'clusterId' is set
      if (clusterId === undefined || clusterId === null) {
        throw new Error("Missing the required parameter 'clusterId' when calling getClusterHistoryDetail");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getClusterHistoryDetail");
      }

      let pathParams = {
        'clusterId': clusterId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20028;
      return this.apiClient.callApi(
        '/api/clusters/{clusterId}/history/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getClusterHistoryEventDetail operation.
     * @callback module:api/ClustersApi~getClusterHistoryEventDetailCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20029} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Cluster History Event
     * This endpoint retrieves the process event for a specific cluster process event.
     * @param {Number} clusterId The ID of the cluster
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/ClustersApi~getClusterHistoryEventDetailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20029}
     */
    getClusterHistoryEventDetail(clusterId, id, callback) {
      let postBody = null;
      // verify the required parameter 'clusterId' is set
      if (clusterId === undefined || clusterId === null) {
        throw new Error("Missing the required parameter 'clusterId' when calling getClusterHistoryEventDetail");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getClusterHistoryEventDetail");
      }

      let pathParams = {
        'clusterId': clusterId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20029;
      return this.apiClient.callApi(
        '/api/clusters/{clusterId}/history/events/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getClusterMasters operation.
     * @callback module:api/ClustersApi~getClusterMastersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20030} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Masters (Kubernetes)
     * This endpoint retrieves masters of a specified kubernetes cluster.
     * @param {Number} clusterId The ID of the cluster
     * @param {Object} opts Optional parameters
     * @param {String} opts.phrase Search phrase for partial matches on name or description
     * @param {module:api/ClustersApi~getClusterMastersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20030}
     */
    getClusterMasters(clusterId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clusterId' is set
      if (clusterId === undefined || clusterId === null) {
        throw new Error("Missing the required parameter 'clusterId' when calling getClusterMasters");
      }

      let pathParams = {
        'clusterId': clusterId
      };
      let queryParams = {
        'phrase': opts['phrase']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20030;
      return this.apiClient.callApi(
        '/api/clusters/{clusterId}/masters', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getClusterNamespace operation.
     * @callback module:api/ClustersApi~getClusterNamespaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20031} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Namespace (Kubernetes)
     * This endpoint retrieves a specific namespace of a Kubernetes cluster
     * @param {Number} clusterId The ID of the cluster
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/ClustersApi~getClusterNamespaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20031}
     */
    getClusterNamespace(clusterId, id, callback) {
      let postBody = null;
      // verify the required parameter 'clusterId' is set
      if (clusterId === undefined || clusterId === null) {
        throw new Error("Missing the required parameter 'clusterId' when calling getClusterNamespace");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getClusterNamespace");
      }

      let pathParams = {
        'clusterId': clusterId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20031;
      return this.apiClient.callApi(
        '/api/clusters/{clusterId}/namespaces/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getClusterNamespaces operation.
     * @callback module:api/ClustersApi~getClusterNamespacesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Namespaces (Kubernetes)
     * List Namespaces (Kubernetes)
     * @param {Number} clusterId The ID of the cluster
     * @param {module:api/ClustersApi~getClusterNamespacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getClusterNamespaces(clusterId, callback) {
      let postBody = null;
      // verify the required parameter 'clusterId' is set
      if (clusterId === undefined || clusterId === null) {
        throw new Error("Missing the required parameter 'clusterId' when calling getClusterNamespaces");
      }

      let pathParams = {
        'clusterId': clusterId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/clusters/{clusterId}/namespaces', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getClusterUpgradeVersions operation.
     * @callback module:api/ClustersApi~getClusterUpgradeVersionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20032} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Cluster Upgrade Versions (Kubernetes)
     * This endpoint returns valid version targets for upgrading kubectl and kubeadm on the cluster.
     * @param {Number} clusterId The ID of the cluster
     * @param {module:api/ClustersApi~getClusterUpgradeVersionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20032}
     */
    getClusterUpgradeVersions(clusterId, callback) {
      let postBody = null;
      // verify the required parameter 'clusterId' is set
      if (clusterId === undefined || clusterId === null) {
        throw new Error("Missing the required parameter 'clusterId' when calling getClusterUpgradeVersions");
      }

      let pathParams = {
        'clusterId': clusterId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20032;
      return this.apiClient.callApi(
        '/api/clusters/{clusterId}/upgrade-cluster', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getWikiCluster operation.
     * @callback module:api/ClustersApi~getWikiClusterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200168} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a Cluster Wiki Page
     * This endpoint retrieves a cluster Wiki page. 
     * @param {Number} clusterId The ID of the cluster
     * @param {module:api/ClustersApi~getWikiClusterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200168}
     */
    getWikiCluster(clusterId, callback) {
      let postBody = null;
      // verify the required parameter 'clusterId' is set
      if (clusterId === undefined || clusterId === null) {
        throw new Error("Missing the required parameter 'clusterId' when calling getWikiCluster");
      }

      let pathParams = {
        'clusterId': clusterId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200168;
      return this.apiClient.callApi(
        '/api/clusters/{clusterId}/wiki', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listClusterContainers operation.
     * @callback module:api/ClustersApi~listClusterContainersCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Containers
     * This endpoint retrieves containers of a specified cluster.
     * @param {Number} clusterId The ID of the cluster
     * @param {Object} opts Optional parameters
     * @param {Number} opts.max Maximum number of records to return, -1 can be used to fetch all records (default to 25)
     * @param {Number} opts.offset Offset records, the number of records to skip, for paginating requests (default to 0)
     * @param {String} opts.sort Sort order, the name of the property to sort by (default to 'name')
     * @param {module:model/String} opts.order Sort direction, use 'desc' to reverse sort (default to 'asc')
     * @param {String} opts.phrase Search phrase for partial matches on name or description
     * @param {module:model/String} opts.resourceLevel Resource level filter
     * @param {module:api/ClustersApi~listClusterContainersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    listClusterContainers(clusterId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clusterId' is set
      if (clusterId === undefined || clusterId === null) {
        throw new Error("Missing the required parameter 'clusterId' when calling listClusterContainers");
      }

      let pathParams = {
        'clusterId': clusterId
      };
      let queryParams = {
        'max': opts['max'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'order': opts['order'],
        'phrase': opts['phrase'],
        'resourceLevel': opts['resourceLevel']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/clusters/{clusterId}/containers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listClusterDatastores operation.
     * @callback module:api/ClustersApi~listClusterDatastoresCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Datastores
     * This endpoint retrieves datastores of a specified cluster.
     * @param {Number} clusterId The ID of the cluster
     * @param {Object} opts Optional parameters
     * @param {Number} opts.max Maximum number of records to return, -1 can be used to fetch all records (default to 25)
     * @param {Number} opts.offset Offset records, the number of records to skip, for paginating requests (default to 0)
     * @param {String} opts.sort Sort order, the name of the property to sort by (default to 'name')
     * @param {module:model/String} opts.order Sort direction, use 'desc' to reverse sort (default to 'asc')
     * @param {String} opts.phrase Search phrase for partial matches on name or description
     * @param {String} opts.name Filter by name, wildcard may be specified as %, eg. example-%
     * @param {String} opts.code If specified will return an exact match on code
     * @param {Boolean} opts.hideInactive If true restricts query to only load active datastores (default to false)
     * @param {module:api/ClustersApi~listClusterDatastoresCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    listClusterDatastores(clusterId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clusterId' is set
      if (clusterId === undefined || clusterId === null) {
        throw new Error("Missing the required parameter 'clusterId' when calling listClusterDatastores");
      }

      let pathParams = {
        'clusterId': clusterId
      };
      let queryParams = {
        'max': opts['max'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'order': opts['order'],
        'phrase': opts['phrase'],
        'name': opts['name'],
        'code': opts['code'],
        'hideInactive': opts['hideInactive']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/clusters/{clusterId}/datastores', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listClusterDeployments operation.
     * @callback module:api/ClustersApi~listClusterDeploymentsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Deployments
     * This endpoint retrieves deployments of a specified cluster.
     * @param {Number} clusterId The ID of the cluster
     * @param {Object} opts Optional parameters
     * @param {Number} opts.max Maximum number of records to return, -1 can be used to fetch all records (default to 25)
     * @param {Number} opts.offset Offset records, the number of records to skip, for paginating requests (default to 0)
     * @param {String} opts.sort Sort order, the name of the property to sort by (default to 'name')
     * @param {module:model/String} opts.order Sort direction, use 'desc' to reverse sort (default to 'asc')
     * @param {String} opts.phrase Search phrase for partial matches on name or description
     * @param {module:model/String} opts.resourceLevel Resource level filter
     * @param {module:api/ClustersApi~listClusterDeploymentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    listClusterDeployments(clusterId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clusterId' is set
      if (clusterId === undefined || clusterId === null) {
        throw new Error("Missing the required parameter 'clusterId' when calling listClusterDeployments");
      }

      let pathParams = {
        'clusterId': clusterId
      };
      let queryParams = {
        'max': opts['max'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'order': opts['order'],
        'phrase': opts['phrase'],
        'resourceLevel': opts['resourceLevel']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/clusters/{clusterId}/deployments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listClusterJobs operation.
     * @callback module:api/ClustersApi~listClusterJobsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Jobs
     * This endpoint retrieves jobs of a specified cluster.
     * @param {Number} clusterId The ID of the cluster
     * @param {Object} opts Optional parameters
     * @param {Number} opts.max Maximum number of records to return, -1 can be used to fetch all records (default to 25)
     * @param {Number} opts.offset Offset records, the number of records to skip, for paginating requests (default to 0)
     * @param {String} opts.sort Sort order, the name of the property to sort by (default to 'name')
     * @param {module:model/String} opts.order Sort direction, use 'desc' to reverse sort (default to 'asc')
     * @param {String} opts.phrase Search phrase for partial matches on name or description
     * @param {module:api/ClustersApi~listClusterJobsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    listClusterJobs(clusterId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clusterId' is set
      if (clusterId === undefined || clusterId === null) {
        throw new Error("Missing the required parameter 'clusterId' when calling listClusterJobs");
      }

      let pathParams = {
        'clusterId': clusterId
      };
      let queryParams = {
        'max': opts['max'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'order': opts['order'],
        'phrase': opts['phrase']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/clusters/{clusterId}/jobs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listClusterPods operation.
     * @callback module:api/ClustersApi~listClusterPodsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Pods
     * This endpoint retrieves pods of a specified cluster.
     * @param {Number} clusterId The ID of the cluster
     * @param {Object} opts Optional parameters
     * @param {Number} opts.max Maximum number of records to return, -1 can be used to fetch all records (default to 25)
     * @param {Number} opts.offset Offset records, the number of records to skip, for paginating requests (default to 0)
     * @param {String} opts.sort Sort order, the name of the property to sort by (default to 'name')
     * @param {module:model/String} opts.order Sort direction, use 'desc' to reverse sort (default to 'asc')
     * @param {String} opts.phrase Search phrase for partial matches on name or description
     * @param {module:model/String} opts.resourceLevel Resource level filter
     * @param {module:api/ClustersApi~listClusterPodsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    listClusterPods(clusterId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clusterId' is set
      if (clusterId === undefined || clusterId === null) {
        throw new Error("Missing the required parameter 'clusterId' when calling listClusterPods");
      }

      let pathParams = {
        'clusterId': clusterId
      };
      let queryParams = {
        'max': opts['max'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'order': opts['order'],
        'phrase': opts['phrase'],
        'resourceLevel': opts['resourceLevel']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/clusters/{clusterId}/pods', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listClusterServices operation.
     * @callback module:api/ClustersApi~listClusterServicesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Services
     * This endpoint retrieves services of a specified cluster.
     * @param {Number} clusterId The ID of the cluster
     * @param {Object} opts Optional parameters
     * @param {Number} opts.max Maximum number of records to return, -1 can be used to fetch all records (default to 25)
     * @param {Number} opts.offset Offset records, the number of records to skip, for paginating requests (default to 0)
     * @param {String} opts.sort Sort order, the name of the property to sort by (default to 'name')
     * @param {module:model/String} opts.order Sort direction, use 'desc' to reverse sort (default to 'asc')
     * @param {String} opts.phrase Search phrase for partial matches on name or description
     * @param {module:api/ClustersApi~listClusterServicesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    listClusterServices(clusterId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clusterId' is set
      if (clusterId === undefined || clusterId === null) {
        throw new Error("Missing the required parameter 'clusterId' when calling listClusterServices");
      }

      let pathParams = {
        'clusterId': clusterId
      };
      let queryParams = {
        'max': opts['max'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'order': opts['order'],
        'phrase': opts['phrase']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/clusters/{clusterId}/services', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listClusterStatefulSets operation.
     * @callback module:api/ClustersApi~listClusterStatefulSetsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Stateful Sets
     * This endpoint retrieves stateful sets of a specified cluster.
     * @param {Number} clusterId The ID of the cluster
     * @param {Object} opts Optional parameters
     * @param {Number} opts.max Maximum number of records to return, -1 can be used to fetch all records (default to 25)
     * @param {Number} opts.offset Offset records, the number of records to skip, for paginating requests (default to 0)
     * @param {String} opts.sort Sort order, the name of the property to sort by (default to 'name')
     * @param {module:model/String} opts.order Sort direction, use 'desc' to reverse sort (default to 'asc')
     * @param {String} opts.phrase Search phrase for partial matches on name or description
     * @param {module:model/String} opts.resourceLevel Resource level filter
     * @param {module:api/ClustersApi~listClusterStatefulSetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    listClusterStatefulSets(clusterId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clusterId' is set
      if (clusterId === undefined || clusterId === null) {
        throw new Error("Missing the required parameter 'clusterId' when calling listClusterStatefulSets");
      }

      let pathParams = {
        'clusterId': clusterId
      };
      let queryParams = {
        'max': opts['max'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'order': opts['order'],
        'phrase': opts['phrase'],
        'resourceLevel': opts['resourceLevel']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/clusters/{clusterId}/statefulsets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listClusterTypes operation.
     * @callback module:api/ClustersApi~listClusterTypesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Cluster Types
     * Fetch a list of available cluster types.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.max Maximum number of records to return, -1 can be used to fetch all records (default to 25)
     * @param {Number} opts.offset Offset records, the number of records to skip, for paginating requests (default to 0)
     * @param {String} opts.sort Sort order, the name of the property to sort by (default to 'name')
     * @param {module:model/String} opts.direction Sort direction, use 'desc' to reverse sort (default to 'asc')
     * @param {String} opts.phrase Search phrase for partial matches on name or description
     * @param {String} opts.name Filter by name, wildcard may be specified as %, eg. example-%
     * @param {String} opts.code If specified will return an exact match on code
     * @param {module:model/String} opts.providerType Filter by `Provider Type` code. 
     * @param {module:api/ClustersApi~listClusterTypesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    listClusterTypes(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'max': opts['max'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'direction': opts['direction'],
        'phrase': opts['phrase'],
        'name': opts['name'],
        'code': opts['code'],
        'providerType': opts['providerType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/cluster-types', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listClusterVolumes operation.
     * @callback module:api/ClustersApi~listClusterVolumesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Volumes
     * This endpoint retrieves volumes of a specified cluster.
     * @param {Number} clusterId The ID of the cluster
     * @param {module:api/ClustersApi~listClusterVolumesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    listClusterVolumes(clusterId, callback) {
      let postBody = null;
      // verify the required parameter 'clusterId' is set
      if (clusterId === undefined || clusterId === null) {
        throw new Error("Missing the required parameter 'clusterId' when calling listClusterVolumes");
      }

      let pathParams = {
        'clusterId': clusterId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/clusters/{clusterId}/volumes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listClusterWorkers operation.
     * @callback module:api/ClustersApi~listClusterWorkersCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Workers
     * This endpoint retrieves workers of a specified cluster.
     * @param {Number} clusterId The ID of the cluster
     * @param {module:api/ClustersApi~listClusterWorkersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    listClusterWorkers(clusterId, callback) {
      let postBody = null;
      // verify the required parameter 'clusterId' is set
      if (clusterId === undefined || clusterId === null) {
        throw new Error("Missing the required parameter 'clusterId' when calling listClusterWorkers");
      }

      let pathParams = {
        'clusterId': clusterId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/clusters/{clusterId}/workers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listClusters operation.
     * @callback module:api/ClustersApi~listClustersCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Clusters
     * This endpoint retrieves all clusters and a list of clusters associated with the zone by id.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.max Maximum number of records to return, -1 can be used to fetch all records (default to 25)
     * @param {Number} opts.offset Offset records, the number of records to skip, for paginating requests (default to 0)
     * @param {String} opts.sort Sort order, the name of the property to sort by (default to 'name')
     * @param {module:model/String} opts.direction Sort direction, use 'desc' to reverse sort (default to 'asc')
     * @param {String} opts.phrase Search phrase for partial matches on name or description
     * @param {String} opts.name Filter by name, wildcard may be specified as %, eg. example-%
     * @param {Number} opts.zoneId The Zone ID for Filtering
     * @param {Number} opts.typeId Type filter, restricts query to only load clusters of a specified cluster type
     * @param {String} opts.labels Filter by label(s), matches records that contain any of the specified labels
     * @param {String} opts.allLabels Filter by label(s), matches records that contain all of the specified labels
     * @param {module:api/ClustersApi~listClustersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    listClusters(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'max': opts['max'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'direction': opts['direction'],
        'phrase': opts['phrase'],
        'name': opts['name'],
        'zoneId': opts['zoneId'],
        'typeId': opts['typeId'],
        'labels': opts['labels'],
        'allLabels': opts['allLabels']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/clusters', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the restartClusterContainer operation.
     * @callback module:api/ClustersApi~restartClusterContainerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessError} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Restart a Container
     * Will restart a container in the specified cluster.
     * @param {Number} clusterId The ID of the cluster
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/ClustersApi~restartClusterContainerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessError}
     */
    restartClusterContainer(clusterId, id, callback) {
      let postBody = null;
      // verify the required parameter 'clusterId' is set
      if (clusterId === undefined || clusterId === null) {
        throw new Error("Missing the required parameter 'clusterId' when calling restartClusterContainer");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling restartClusterContainer");
      }

      let pathParams = {
        'clusterId': clusterId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SuccessError;
      return this.apiClient.callApi(
        '/api/clusters/{clusterId}/containers/{id}/restart', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the restartClusterDeployment operation.
     * @callback module:api/ClustersApi~restartClusterDeploymentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessError} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Restart a Deployment
     * Will restart a deployment in the specified cluster.
     * @param {Number} clusterId The ID of the cluster
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/ClustersApi~restartClusterDeploymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessError}
     */
    restartClusterDeployment(clusterId, id, callback) {
      let postBody = null;
      // verify the required parameter 'clusterId' is set
      if (clusterId === undefined || clusterId === null) {
        throw new Error("Missing the required parameter 'clusterId' when calling restartClusterDeployment");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling restartClusterDeployment");
      }

      let pathParams = {
        'clusterId': clusterId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SuccessError;
      return this.apiClient.callApi(
        '/api/clusters/{clusterId}/deployments/{id}/restart', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the restartClusterPod operation.
     * @callback module:api/ClustersApi~restartClusterPodCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessError} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Restart a Pod
     * Will restart a pod in the specified cluster.
     * @param {Number} clusterId The ID of the cluster
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/ClustersApi~restartClusterPodCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessError}
     */
    restartClusterPod(clusterId, id, callback) {
      let postBody = null;
      // verify the required parameter 'clusterId' is set
      if (clusterId === undefined || clusterId === null) {
        throw new Error("Missing the required parameter 'clusterId' when calling restartClusterPod");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling restartClusterPod");
      }

      let pathParams = {
        'clusterId': clusterId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SuccessError;
      return this.apiClient.callApi(
        '/api/clusters/{clusterId}/pods/{id}/restart', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the restartClusterStatefulSet operation.
     * @callback module:api/ClustersApi~restartClusterStatefulSetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessError} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Restart a Stateful Set
     * Will restart a stateful set in the specified cluster.
     * @param {Number} clusterId The ID of the cluster
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/ClustersApi~restartClusterStatefulSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessError}
     */
    restartClusterStatefulSet(clusterId, id, callback) {
      let postBody = null;
      // verify the required parameter 'clusterId' is set
      if (clusterId === undefined || clusterId === null) {
        throw new Error("Missing the required parameter 'clusterId' when calling restartClusterStatefulSet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling restartClusterStatefulSet");
      }

      let pathParams = {
        'clusterId': clusterId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SuccessError;
      return this.apiClient.callApi(
        '/api/clusters/{clusterId}/statefulsets/{id}/restart', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCluster operation.
     * @callback module:api/ClustersApi~updateClusterCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Cluster
     * Update Cluster
     * @param {Number} clusterId The ID of the cluster
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject53} opts.inlineObject53 
     * @param {module:api/ClustersApi~updateClusterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateCluster(clusterId, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject53'];
      // verify the required parameter 'clusterId' is set
      if (clusterId === undefined || clusterId === null) {
        throw new Error("Missing the required parameter 'clusterId' when calling updateCluster");
      }

      let pathParams = {
        'clusterId': clusterId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/clusters/{clusterId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateClusterDatastore operation.
     * @callback module:api/ClustersApi~updateClusterDatastoreCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Datastore
     * Update Datastore
     * @param {Number} clusterId The ID of the cluster
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject55} opts.inlineObject55 
     * @param {module:api/ClustersApi~updateClusterDatastoreCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateClusterDatastore(clusterId, id, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject55'];
      // verify the required parameter 'clusterId' is set
      if (clusterId === undefined || clusterId === null) {
        throw new Error("Missing the required parameter 'clusterId' when calling updateClusterDatastore");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateClusterDatastore");
      }

      let pathParams = {
        'clusterId': clusterId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/clusters/{clusterId}/datastores/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateClusterNamespace operation.
     * @callback module:api/ClustersApi~updateClusterNamespaceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Namespace (Kubernetes)
     * Update Namespace (Kubernetes)
     * @param {Number} clusterId The ID of the cluster
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject57} opts.inlineObject57 
     * @param {module:api/ClustersApi~updateClusterNamespaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateClusterNamespace(clusterId, id, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject57'];
      // verify the required parameter 'clusterId' is set
      if (clusterId === undefined || clusterId === null) {
        throw new Error("Missing the required parameter 'clusterId' when calling updateClusterNamespace");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateClusterNamespace");
      }

      let pathParams = {
        'clusterId': clusterId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/clusters/{clusterId}/namespaces/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateClusterPermissions operation.
     * @callback module:api/ClustersApi~updateClusterPermissionsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Cluster Permissions
     * Update Cluster Permissions
     * @param {Number} clusterId The ID of the cluster
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject58} opts.inlineObject58 
     * @param {module:api/ClustersApi~updateClusterPermissionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateClusterPermissions(clusterId, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject58'];
      // verify the required parameter 'clusterId' is set
      if (clusterId === undefined || clusterId === null) {
        throw new Error("Missing the required parameter 'clusterId' when calling updateClusterPermissions");
      }

      let pathParams = {
        'clusterId': clusterId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/clusters/{clusterId}/permissions', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateClusterUpgradeVersions operation.
     * @callback module:api/ClustersApi~updateClusterUpgradeVersionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upgrade a Cluster (Kubernetes)
     * This endpoint updates the kubectl and kudeadm versions on a Kubernetes cluster to the specified version. Use Get Cluster Upgrade Versions to list valid version targets for the cluster.
     * @param {Number} clusterId The ID of the cluster
     * @param {String} targetVersion Target version for cluster after upgrade
     * @param {module:api/ClustersApi~updateClusterUpgradeVersionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    updateClusterUpgradeVersions(clusterId, targetVersion, callback) {
      let postBody = null;
      // verify the required parameter 'clusterId' is set
      if (clusterId === undefined || clusterId === null) {
        throw new Error("Missing the required parameter 'clusterId' when calling updateClusterUpgradeVersions");
      }
      // verify the required parameter 'targetVersion' is set
      if (targetVersion === undefined || targetVersion === null) {
        throw new Error("Missing the required parameter 'targetVersion' when calling updateClusterUpgradeVersions");
      }

      let pathParams = {
        'clusterId': clusterId
      };
      let queryParams = {
        'targetVersion': targetVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/clusters/{clusterId}/upgrade-cluster', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateClusterWorkerCount operation.
     * @callback module:api/ClustersApi~updateClusterWorkerCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Worker Count
     * This endpoint resizes a cluster to the specified number of worker nodes (only supports Azure AKS, Google GKE, and Amazon EKS clusters).
     * @param {Number} clusterId The ID of the cluster
     * @param {Number} workerCount The target number of worker nodes
     * @param {module:api/ClustersApi~updateClusterWorkerCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    updateClusterWorkerCount(clusterId, workerCount, callback) {
      let postBody = null;
      // verify the required parameter 'clusterId' is set
      if (clusterId === undefined || clusterId === null) {
        throw new Error("Missing the required parameter 'clusterId' when calling updateClusterWorkerCount");
      }
      // verify the required parameter 'workerCount' is set
      if (workerCount === undefined || workerCount === null) {
        throw new Error("Missing the required parameter 'workerCount' when calling updateClusterWorkerCount");
      }

      let pathParams = {
        'clusterId': clusterId
      };
      let queryParams = {
        'workerCount': workerCount
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/clusters/{clusterId}/worker-count', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateWikiCluster operation.
     * @callback module:api/ClustersApi~updateWikiClusterCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Cluster Wiki Page
     * Updates a cluster Wiki page. 
     * @param {Number} clusterId The ID of the cluster
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject268} opts.inlineObject268 
     * @param {module:api/ClustersApi~updateWikiClusterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateWikiCluster(clusterId, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject268'];
      // verify the required parameter 'clusterId' is set
      if (clusterId === undefined || clusterId === null) {
        throw new Error("Missing the required parameter 'clusterId' when calling updateWikiCluster");
      }

      let pathParams = {
        'clusterId': clusterId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/clusters/{clusterId}/wiki', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
