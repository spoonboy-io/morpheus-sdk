/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DefaultError from '../model/DefaultError';
import InlineObject220 from '../model/InlineObject220';
import InlineObject221 from '../model/InlineObject221';
import InlineObject222 from '../model/InlineObject222';
import InlineObject223 from '../model/InlineObject223';
import InlineObject224 from '../model/InlineObject224';
import InlineObject225 from '../model/InlineObject225';
import InlineObject226 from '../model/InlineObject226';
import InlineObject271 from '../model/InlineObject271';
import InlineResponse200137 from '../model/InlineResponse200137';
import InlineResponse200138 from '../model/InlineResponse200138';
import InlineResponse200141 from '../model/InlineResponse200141';
import InlineResponse200168 from '../model/InlineResponse200168';
import InlineResponse20050 from '../model/InlineResponse20050';
import Model200Success from '../model/Model200Success';
import NetworkInterfaceUpdate from '../model/NetworkInterfaceUpdate';

/**
* Hosts service.
* @module api/HostsApi
* @version 6.2.1
*/
export default class HostsApi {

    /**
    * Constructs a new HostsApi. 
    * @alias module:api/HostsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getHost operation.
     * @callback module:api/HostsApi~getHostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200137} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Specific Host
     * This endpoint retrieves a specific host.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/HostsApi~getHostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200137}
     */
    getHost(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getHost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200137;
      return this.apiClient.callApi(
        '/api/servers/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getHostSnpshots operation.
     * @callback module:api/HostsApi~getHostSnpshotsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200138} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of snapshots for a Host
     * Get list of snapshots for a Host
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/HostsApi~getHostSnpshotsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200138}
     */
    getHostSnpshots(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getHostSnpshots");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200138;
      return this.apiClient.callApi(
        '/api/servers/{id}/snapshots', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getHostType operation.
     * @callback module:api/HostsApi~getHostTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20050} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Specific Host Type
     * This endpoint will retrieve a specific host type by id
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/HostsApi~getHostTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20050}
     */
    getHostType(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getHostType");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20050;
      return this.apiClient.callApi(
        '/api/server-types/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getWikiServer operation.
     * @callback module:api/HostsApi~getWikiServerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200168} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a Server Wiki Page
     * This endpoint retrieves a server Wiki page. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/HostsApi~getWikiServerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200168}
     */
    getWikiServer(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getWikiServer");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200168;
      return this.apiClient.callApi(
        '/api/servers/{id}/wiki', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listHostTypes operation.
     * @callback module:api/HostsApi~listHostTypesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Host Types
     * Fetch a paginated list of available host types. This returns the configuration options for each type.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.max Maximum number of records to return, -1 can be used to fetch all records (default to 25)
     * @param {Number} opts.offset Offset records, the number of records to skip, for paginating requests (default to 0)
     * @param {String} opts.sort Sort order, the name of the property to sort by (default to 'name')
     * @param {module:model/String} opts.direction Sort direction, use 'desc' to reverse sort (default to 'asc')
     * @param {String} opts.name Filter by name, wildcard may be specified as %, eg. example-%
     * @param {String} opts.code If specified will return an exact match on code
     * @param {String} opts.phrase Search phrase for partial matches on name or description
     * @param {module:model/String} opts.provisionType Filter by `Provision Type` code. Refer to `Provision Types` API for up to date listings. 
     * @param {module:model/String} opts.zoneType Filter by Cloud Type code.
     * @param {Boolean} opts.creatable Filter by creatable flag. This is whether or not it can be provisioned.
     * @param {module:api/HostsApi~listHostTypesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    listHostTypes(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'max': opts['max'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'direction': opts['direction'],
        'name': opts['name'],
        'code': opts['code'],
        'phrase': opts['phrase'],
        'provisionType': opts['provisionType'],
        'zoneType': opts['zoneType'],
        'creatable': opts['creatable']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/server-types', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listHosts operation.
     * @callback module:api/HostsApi~listHostsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Hosts
     * This endpoint retrieves a paginated list of hosts.
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter by name, wildcard may be specified as %, eg. example-%
     * @param {String} opts.phrase Search phrase for partial matches on name or description
     * @param {Number} opts.zoneId The Zone ID for Filtering
     * @param {Number} opts.siteId The Site ID for Filtering
     * @param {Number} opts.clusterId The Cluster ID(s) for filtering. Accepts multiple values.
     * @param {Boolean} opts.managed Filter by managed (true) or unmanaged (false)
     * @param {String} opts.serverType Filter by server type code
     * @param {String} opts.powerState Filter by power status
     * @param {String} opts.ip Filter by IP address
     * @param {Boolean} opts.vm Filter to show only Virtual Machines (true)
     * @param {Boolean} opts.vmHypervisor Filter to show only VM Hypervisors (true)
     * @param {Boolean} opts.bareMetalHost Filter to show only Baremetal Servers
     * @param {String} opts.status Filter by status
     * @param {Boolean} opts.agentInstalled Filter by agent installed (true)
     * @param {Number} opts.max Maximum number of records to return, -1 can be used to fetch all records (default to 25)
     * @param {Number} opts.offset Offset records, the number of records to skip, for paginating requests (default to 0)
     * @param {Date} opts.lastUpdated Date filter, restricts query to only load resources updated more recently than the date specified (ISO 8601)
     * @param {Number} opts.createdBy The User ID for Filtering
     * @param {String} opts.labels Filter by label(s), matches records that contain any of the specified labels
     * @param {String} opts.allLabels Filter by label(s), matches records that contain all of the specified labels
     * @param {String} opts.tags Filter by tags (metadata). This allows filtering by a tag name and value(s) 
     * @param {String} opts.metadata Alias for tags
     * @param {String} opts.uuid Filter by UUID
     * @param {String} opts.externalId Filter by External ID
     * @param {String} opts.internalId Filter by Internal ID
     * @param {String} opts.externalUniquelId Filter by External Unique ID
     * @param {module:api/HostsApi~listHostsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    listHosts(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name'],
        'phrase': opts['phrase'],
        'zoneId': opts['zoneId'],
        'siteId': opts['siteId'],
        'clusterId': opts['clusterId'],
        'managed': opts['managed'],
        'serverType': opts['serverType'],
        'powerState': opts['powerState'],
        'ip': opts['ip'],
        'vm': opts['vm'],
        'vmHypervisor': opts['vmHypervisor'],
        'bareMetalHost': opts['bareMetalHost'],
        'status': opts['status'],
        'agentInstalled': opts['agentInstalled'],
        'max': opts['max'],
        'offset': opts['offset'],
        'lastUpdated': opts['lastUpdated'],
        'createdBy': opts['createdBy'],
        'labels': opts['labels'],
        'allLabels': opts['allLabels'],
        'tags': opts['tags'],
        'metadata': opts['metadata'],
        'uuid': opts['uuid'],
        'externalId': opts['externalId'],
        'internalId': opts['internalId'],
        'externalUniquelId': opts['externalUniquelId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/servers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listServerServicePlans operation.
     * @callback module:api/HostsApi~listServerServicePlansCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200141} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Available Service Plans for a Host
     * This endpoint retrieves all the Service Plans available for the specified cloud and host type. It may be used to get the list of available plans when creating a new host or resizing an existing host.
     * @param {Number} zoneId The Zone ID for Filtering
     * @param {Object} opts Optional parameters
     * @param {Number} opts.serverTypeId The ID of the Host Type
     * @param {Number} opts.siteId The Site ID for Filtering
     * @param {module:api/HostsApi~listServerServicePlansCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200141}
     */
    listServerServicePlans(zoneId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'zoneId' is set
      if (zoneId === undefined || zoneId === null) {
        throw new Error("Missing the required parameter 'zoneId' when calling listServerServicePlans");
      }

      let pathParams = {
      };
      let queryParams = {
        'zoneId': zoneId,
        'serverTypeId': opts['serverTypeId'],
        'siteId': opts['siteId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200141;
      return this.apiClient.callApi(
        '/api/servers/service-plans', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeHost operation.
     * @callback module:api/HostsApi~removeHostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Host
     * Will delete a host asynchronously.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {String} opts.removeResources Remove Resources (default to 'on')
     * @param {String} opts.removeInstances Remove Instances (default to 'off')
     * @param {String} opts.preserveVolumes Preserve Volumes (default to 'off')
     * @param {String} opts.releaseFloatingIps Release Floating IPs (default to 'on')
     * @param {String} opts.releaseEIPs Alias for releaseFloatingIps (default to 'on')
     * @param {String} opts.force Force Delete (default to 'off')
     * @param {module:api/HostsApi~removeHostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    removeHost(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeHost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'removeResources': opts['removeResources'],
        'removeInstances': opts['removeInstances'],
        'preserveVolumes': opts['preserveVolumes'],
        'releaseFloatingIps': opts['releaseFloatingIps'],
        'releaseEIPs': opts['releaseEIPs'],
        'force': opts['force']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/servers/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the restartHost operation.
     * @callback module:api/HostsApi~restartHostCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Restart a Host
     * This will restart a host.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/HostsApi~restartHostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    restartHost(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling restartHost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/servers/{id}/restart', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startHost operation.
     * @callback module:api/HostsApi~startHostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start a Host
     * This will start a host.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/HostsApi~startHostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    startHost(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling startHost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/servers/{id}/start', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopHost operation.
     * @callback module:api/HostsApi~stopHostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stop a Host
     * This will stop a host.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/HostsApi~stopHostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    stopHost(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling stopHost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/servers/{id}/stop', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateHost operation.
     * @callback module:api/HostsApi~updateHostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200137} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updating a Host
     * Updating a Host
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject220} opts.inlineObject220 
     * @param {module:api/HostsApi~updateHostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200137}
     */
    updateHost(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject220'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateHost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse200137;
      return this.apiClient.callApi(
        '/api/servers/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateHostAssignTenant operation.
     * @callback module:api/HostsApi~updateHostAssignTenantCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Assign To Tenant
     * This will change the ownership of the host to the specified Tenant account. This is only available to Master Tenant users.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {Number} opts.accountId ID of the Tenant
     * @param {module:model/InlineObject221} opts.inlineObject221 
     * @param {module:api/HostsApi~updateHostAssignTenantCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateHostAssignTenant(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject221'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateHostAssignTenant");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'accountId': opts['accountId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/servers/{id}/assign-account', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateHostCloud operation.
     * @callback module:api/HostsApi~updateHostCloudCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change Server Cloud
     * This api call is reserved for migrating servers from one cloud to another. This could be due to moving clusters or resource pool scoping of a server without losing the data.
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject226} opts.inlineObject226 
     * @param {module:api/HostsApi~updateHostCloudCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateHostCloud(opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject226'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/servers/change-cloud', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateHostExecuteWorkflow operation.
     * @callback module:api/HostsApi~updateHostExecuteWorkflowCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Run Workflow on a Host
     * This will run a provisioning workflow on a host.  For operational workflows, see Execute a Workflow. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {Number} opts.workflowId ID of the workflow to execute
     * @param {String} opts.workflowName Name of the workflow to execute
     * @param {module:model/InlineObject225} opts.inlineObject225 
     * @param {module:api/HostsApi~updateHostExecuteWorkflowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    updateHostExecuteWorkflow(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject225'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateHostExecuteWorkflow");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'workflowId': opts['workflowId'],
        'workflowName': opts['workflowName']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/servers/{id}/workflow', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateHostInstallAgent operation.
     * @callback module:api/HostsApi~updateHostInstallAgentCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Install Agent
     * This will make the host a managed server, and install the agent.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject222} opts.inlineObject222 
     * @param {module:api/HostsApi~updateHostInstallAgentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateHostInstallAgent(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject222'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateHostInstallAgent");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/servers/{id}/install-agent', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateHostManaged operation.
     * @callback module:api/HostsApi~updateHostManagedCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Convert To Managed
     * This will make the host a managed server, and install the agent.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject223} opts.inlineObject223 
     * @param {module:api/HostsApi~updateHostManagedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateHostManaged(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject223'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateHostManaged");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/servers/{id}/make-managed', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateHostResize operation.
     * @callback module:api/HostsApi~updateHostResizeCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Resize a Host
     * Will resize a host asynchronously. This endpoint also allows for NIC reconfiguration by passing a new array of `networkInterfaces`.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject224} opts.inlineObject224 
     * @param {module:api/HostsApi~updateHostResizeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateHostResize(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject224'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateHostResize");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/servers/{id}/resize', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateHostUpgradeAgent operation.
     * @callback module:api/HostsApi~updateHostUpgradeAgentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upgrade Agent
     * This will upgrade the version of the agent installed on the host.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/HostsApi~updateHostUpgradeAgentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    updateHostUpgradeAgent(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateHostUpgradeAgent");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/servers/{id}/upgrade', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateServerNetworkInterface operation.
     * @callback module:api/HostsApi~updateServerNetworkInterfaceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updating a label for a Server's Network
     * Updating a Server's Network's Label
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Number} networkInterfaceId NetworkInterface (ComputeServerInterface) ID of the Object being created or referenced
     * @param {Object} opts Optional parameters
     * @param {module:model/NetworkInterfaceUpdate} opts.networkInterfaceUpdate 
     * @param {module:api/HostsApi~updateServerNetworkInterfaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateServerNetworkInterface(id, networkInterfaceId, opts, callback) {
      opts = opts || {};
      let postBody = opts['networkInterfaceUpdate'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateServerNetworkInterface");
      }
      // verify the required parameter 'networkInterfaceId' is set
      if (networkInterfaceId === undefined || networkInterfaceId === null) {
        throw new Error("Missing the required parameter 'networkInterfaceId' when calling updateServerNetworkInterface");
      }

      let pathParams = {
        'id': id,
        'networkInterfaceId': networkInterfaceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/servers/{id}/networkInterfaces/{networkInterfaceId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateWikiServer operation.
     * @callback module:api/HostsApi~updateWikiServerCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Server Wiki Page
     * Updates a server Wiki page. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject271} opts.inlineObject271 
     * @param {module:api/HostsApi~updateWikiServerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateWikiServer(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject271'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateWikiServer");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/servers/{id}/wiki', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
