/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DefaultError from '../model/DefaultError';
import InlineObject67 from '../model/InlineObject67';
import InlineObject68 from '../model/InlineObject68';
import InlineObject69 from '../model/InlineObject69';
import InlineObject70 from '../model/InlineObject70';
import InlineResponse20038 from '../model/InlineResponse20038';
import InlineResponse20039 from '../model/InlineResponse20039';
import Model200Success from '../model/Model200Success';

/**
* Deployments service.
* @module api/DeploymentsApi
* @version 6.2.1
*/
export default class DeploymentsApi {

    /**
    * Constructs a new DeploymentsApi. 
    * @alias module:api/DeploymentsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addDeploymentFile operation.
     * @callback module:api/DeploymentsApi~addDeploymentFileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload a Deployment File
     * This endpoint will upload a file for a specific deployment version. This will overwrite the file if one with the same name exists already.
     * @param {Number} deploymentId Deployment ID
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {String} filepath The path to to search for files under. Default is the root directory /.
     * @param {Object} opts Optional parameters
     * @param {File} opts.file 
     * @param {module:api/DeploymentsApi~addDeploymentFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    addDeploymentFile(deploymentId, id, filepath, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'deploymentId' is set
      if (deploymentId === undefined || deploymentId === null) {
        throw new Error("Missing the required parameter 'deploymentId' when calling addDeploymentFile");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addDeploymentFile");
      }
      // verify the required parameter 'filepath' is set
      if (filepath === undefined || filepath === null) {
        throw new Error("Missing the required parameter 'filepath' when calling addDeploymentFile");
      }

      let pathParams = {
        'deploymentId': deploymentId,
        'id': id,
        'filepath': filepath
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': opts['file']
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/deployments/{deploymentId}/versions/{id}/files{filepath}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addDeploymentVersion operation.
     * @callback module:api/DeploymentsApi~addDeploymentVersionCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new Deployment Version
     * This endpoint will create a new deployment version that is ready to have files uploaded to it. The default type is file, which has files directly uploaded via Morpheus. Alternatively, the type git or fetch can be used to just point to a repository or remote url.
     * @param {Number} deploymentId Deployment ID
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject69} opts.inlineObject69 
     * @param {module:api/DeploymentsApi~addDeploymentVersionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    addDeploymentVersion(deploymentId, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject69'];
      // verify the required parameter 'deploymentId' is set
      if (deploymentId === undefined || deploymentId === null) {
        throw new Error("Missing the required parameter 'deploymentId' when calling addDeploymentVersion");
      }

      let pathParams = {
        'deploymentId': deploymentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/deployments/{deploymentId}/versions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addDeployments operation.
     * @callback module:api/DeploymentsApi~addDeploymentsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new Deployment
     * This endpoint will create a new deployment that is ready to have versions added to it.
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject67} opts.inlineObject67 
     * @param {module:api/DeploymentsApi~addDeploymentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    addDeployments(opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject67'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/deployments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDeployment operation.
     * @callback module:api/DeploymentsApi~deleteDeploymentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Deployment
     * This endpoint will delete an existing deployment.
     * @param {Number} deploymentId Deployment ID
     * @param {module:api/DeploymentsApi~deleteDeploymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    deleteDeployment(deploymentId, callback) {
      let postBody = null;
      // verify the required parameter 'deploymentId' is set
      if (deploymentId === undefined || deploymentId === null) {
        throw new Error("Missing the required parameter 'deploymentId' when calling deleteDeployment");
      }

      let pathParams = {
        'deploymentId': deploymentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/deployments/{deploymentId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDeploymentFile operation.
     * @callback module:api/DeploymentsApi~deleteDeploymentFileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Deployment File
     * This endpoint will delete an existing deployment file. To recursively delete a directory and all of its contents, the force parameter must be specified.
     * @param {Number} deploymentId Deployment ID
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {String} filepath The path to to search for files under. Default is the root directory /.
     * @param {Object} opts Optional parameters
     * @param {String} opts.force Force Delete (default to 'off')
     * @param {module:api/DeploymentsApi~deleteDeploymentFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    deleteDeploymentFile(deploymentId, id, filepath, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'deploymentId' is set
      if (deploymentId === undefined || deploymentId === null) {
        throw new Error("Missing the required parameter 'deploymentId' when calling deleteDeploymentFile");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteDeploymentFile");
      }
      // verify the required parameter 'filepath' is set
      if (filepath === undefined || filepath === null) {
        throw new Error("Missing the required parameter 'filepath' when calling deleteDeploymentFile");
      }

      let pathParams = {
        'deploymentId': deploymentId,
        'id': id,
        'filepath': filepath
      };
      let queryParams = {
        'force': opts['force']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/deployments/{deploymentId}/versions/{id}/files{filepath}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDeploymentVersion operation.
     * @callback module:api/DeploymentsApi~deleteDeploymentVersionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Deployment Version
     * This endpoint will delete an existing deployment version.
     * @param {Number} deploymentId Deployment ID
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/DeploymentsApi~deleteDeploymentVersionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    deleteDeploymentVersion(deploymentId, id, callback) {
      let postBody = null;
      // verify the required parameter 'deploymentId' is set
      if (deploymentId === undefined || deploymentId === null) {
        throw new Error("Missing the required parameter 'deploymentId' when calling deleteDeploymentVersion");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteDeploymentVersion");
      }

      let pathParams = {
        'deploymentId': deploymentId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/deployments/{deploymentId}/versions/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeployment operation.
     * @callback module:api/DeploymentsApi~getDeploymentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20038} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Specific Deployment
     * This endpoint retrieves a specific deployment. By default the 5 most recent versions are returned, more can be returned by specifying the maxVersions parameter.
     * @param {Number} deploymentId Deployment ID
     * @param {Object} opts Optional parameters
     * @param {Number} opts.maxVersions Max number of recent versions to return.
     * @param {module:api/DeploymentsApi~getDeploymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20038}
     */
    getDeployment(deploymentId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'deploymentId' is set
      if (deploymentId === undefined || deploymentId === null) {
        throw new Error("Missing the required parameter 'deploymentId' when calling getDeployment");
      }

      let pathParams = {
        'deploymentId': deploymentId
      };
      let queryParams = {
        'maxVersions': opts['maxVersions']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20038;
      return this.apiClient.callApi(
        '/api/deployments/{deploymentId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeploymentVersion operation.
     * @callback module:api/DeploymentsApi~getDeploymentVersionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20039} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Specific Deployment Version
     * This endpoint retrieves a specific deployment version.
     * @param {Number} deploymentId Deployment ID
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/DeploymentsApi~getDeploymentVersionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20039}
     */
    getDeploymentVersion(deploymentId, id, callback) {
      let postBody = null;
      // verify the required parameter 'deploymentId' is set
      if (deploymentId === undefined || deploymentId === null) {
        throw new Error("Missing the required parameter 'deploymentId' when calling getDeploymentVersion");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDeploymentVersion");
      }

      let pathParams = {
        'deploymentId': deploymentId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20039;
      return this.apiClient.callApi(
        '/api/deployments/{deploymentId}/versions/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listDeploymentFiles operation.
     * @callback module:api/DeploymentsApi~listDeploymentFilesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Deployment Files
     * This endpoint returns a list of files for a specific deployment version. This only applies to deploy type file. Files are sorted alphabetically, with directories appearing at the beginning of the list.  The filepath parameter can be specified to search for specific files or directories. To list files under a directory, use a trailing / in the filepath parameter.  To list a specific file, provide it's full path. 
     * @param {Number} deploymentId Deployment ID
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {String} filepath The path to to search for files under. Default is the root directory /.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.max Maximum number of records to return, -1 can be used to fetch all records (default to 25)
     * @param {Number} opts.offset Offset records, the number of records to skip, for paginating requests (default to 0)
     * @param {String} opts.phrase Search phrase for partial matches on name or description
     * @param {Number} opts.version Filter by version number (userVersion)
     * @param {module:api/DeploymentsApi~listDeploymentFilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    listDeploymentFiles(deploymentId, id, filepath, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'deploymentId' is set
      if (deploymentId === undefined || deploymentId === null) {
        throw new Error("Missing the required parameter 'deploymentId' when calling listDeploymentFiles");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listDeploymentFiles");
      }
      // verify the required parameter 'filepath' is set
      if (filepath === undefined || filepath === null) {
        throw new Error("Missing the required parameter 'filepath' when calling listDeploymentFiles");
      }

      let pathParams = {
        'deploymentId': deploymentId,
        'id': id,
        'filepath': filepath
      };
      let queryParams = {
        'max': opts['max'],
        'offset': opts['offset'],
        'phrase': opts['phrase'],
        'version': opts['version']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/deployments/{deploymentId}/versions/{id}/files{filepath}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listDeploymentVersions operation.
     * @callback module:api/DeploymentsApi~listDeploymentVersionsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Versions For a Deployment
     * This endpoint returns a paginated list of versions for a specific deployment.
     * @param {Number} deploymentId Deployment ID
     * @param {Object} opts Optional parameters
     * @param {Number} opts.max Maximum number of records to return, -1 can be used to fetch all records (default to 25)
     * @param {Number} opts.offset Offset records, the number of records to skip, for paginating requests (default to 0)
     * @param {String} opts.phrase Search phrase for partial matches on name or description
     * @param {Number} opts.version Filter by version number (userVersion)
     * @param {module:model/String} opts.type Filter by type (deployType), file, git, fetch
     * @param {String} opts.dateCreated Filter by dateCreated, the created timestamp is more recent or equal to the date specified
     * @param {Date} opts.lastUpdated Date filter, restricts query to only load resources updated more recently than the date specified (ISO 8601)
     * @param {module:api/DeploymentsApi~listDeploymentVersionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    listDeploymentVersions(deploymentId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'deploymentId' is set
      if (deploymentId === undefined || deploymentId === null) {
        throw new Error("Missing the required parameter 'deploymentId' when calling listDeploymentVersions");
      }

      let pathParams = {
        'deploymentId': deploymentId
      };
      let queryParams = {
        'max': opts['max'],
        'offset': opts['offset'],
        'phrase': opts['phrase'],
        'version': opts['version'],
        'type': opts['type'],
        'dateCreated': opts['dateCreated'],
        'lastUpdated': opts['lastUpdated']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/deployments/{deploymentId}/versions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listDeployments operation.
     * @callback module:api/DeploymentsApi~listDeploymentsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Deployments
     * This endpoint returns a paginated list of deployments.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.max Maximum number of records to return, -1 can be used to fetch all records (default to 25)
     * @param {Number} opts.offset Offset records, the number of records to skip, for paginating requests (default to 0)
     * @param {String} opts.phrase Search phrase for partial matches on name or description
     * @param {String} opts.name Filter by name, wildcard may be specified as %, eg. example-%
     * @param {String} opts.description Filter by description, wildcard may be specified as %. eg. `example-%`
     * @param {String} opts.dateCreated Filter by dateCreated, the created timestamp is more recent or equal to the date specified
     * @param {Date} opts.lastUpdated Date filter, restricts query to only load resources updated more recently than the date specified (ISO 8601)
     * @param {module:api/DeploymentsApi~listDeploymentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    listDeployments(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'max': opts['max'],
        'offset': opts['offset'],
        'phrase': opts['phrase'],
        'name': opts['name'],
        'description': opts['description'],
        'dateCreated': opts['dateCreated'],
        'lastUpdated': opts['lastUpdated']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/deployments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDeployment operation.
     * @callback module:api/DeploymentsApi~updateDeploymentCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updating a Deployment
     * This endpoint will update an existing deployment.
     * @param {Number} deploymentId Deployment ID
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject68} opts.inlineObject68 
     * @param {module:api/DeploymentsApi~updateDeploymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateDeployment(deploymentId, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject68'];
      // verify the required parameter 'deploymentId' is set
      if (deploymentId === undefined || deploymentId === null) {
        throw new Error("Missing the required parameter 'deploymentId' when calling updateDeployment");
      }

      let pathParams = {
        'deploymentId': deploymentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/deployments/{deploymentId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDeploymentVersion operation.
     * @callback module:api/DeploymentsApi~updateDeploymentVersionCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updating a Deployment Version
     * This endpoint will update an existing deployment version.
     * @param {Number} deploymentId Deployment ID
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject70} opts.inlineObject70 
     * @param {module:api/DeploymentsApi~updateDeploymentVersionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateDeploymentVersion(deploymentId, id, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject70'];
      // verify the required parameter 'deploymentId' is set
      if (deploymentId === undefined || deploymentId === null) {
        throw new Error("Missing the required parameter 'deploymentId' when calling updateDeploymentVersion");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateDeploymentVersion");
      }

      let pathParams = {
        'deploymentId': deploymentId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/deployments/{deploymentId}/versions/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
