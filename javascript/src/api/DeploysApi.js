/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DefaultError from '../model/DefaultError';
import InlineObject72 from '../model/InlineObject72';
import InlineObject73 from '../model/InlineObject73';
import InlineObject92 from '../model/InlineObject92';
import InlineResponse20040 from '../model/InlineResponse20040';
import Model200Success from '../model/Model200Success';

/**
* Deploys service.
* @module api/DeploysApi
* @version 6.2.1
*/
export default class DeploysApi {

    /**
    * Constructs a new DeploysApi. 
    * @alias module:api/DeploysApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addInstanceDeploy operation.
     * @callback module:api/DeploysApi~addInstanceDeployCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20040} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deploy to an Instance
     * This endpoint will deploy the specified deployment version to specified instance. The version to deploy can be identified with deploymentId and version or with versionId alone.  By default, the deployment is executed right away. To prevent this so that it can be run manually later on. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject92} opts.inlineObject92 
     * @param {module:api/DeploysApi~addInstanceDeployCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20040}
     */
    addInstanceDeploy(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject92'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addInstanceDeploy");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20040;
      return this.apiClient.callApi(
        '/api/instances/{id}/deploys', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletedeploy operation.
     * @callback module:api/DeploysApi~deletedeployCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Deploy
     * This endpoint will delete an archived instance deploy.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/DeploysApi~deletedeployCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    deletedeploy(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deletedeploy");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/deploys/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInstanceDeploys operation.
     * @callback module:api/DeploysApi~getInstanceDeploysCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all Deploys for an Instance
     * This endpoint retrieves all deploys for a specific instance.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {Number} opts.max Maximum number of records to return, -1 can be used to fetch all records (default to 25)
     * @param {Number} opts.offset Offset records, the number of records to skip, for paginating requests (default to 0)
     * @param {String} opts.phrase Search phrase for partial matches on name or description
     * @param {String} opts.name Filter by name, wildcard may be specified as %, eg. example-%
     * @param {Number} opts.deploymentId Filter by deployment id
     * @param {String} opts.instanceName Filter by instance name
     * @param {Number} opts.instanceId The Instance ID for Filtering
     * @param {Number} opts.version Filter by version number (userVersion)
     * @param {Number} opts.versionId Filter by deployment version id
     * @param {Number} opts.createdById Filter by owner (user) id
     * @param {module:model/String} opts.deployType Filter by type (deployType), file, git, fetch
     * @param {String} opts.dateCreated Filter by dateCreated, the created timestamp is more recent or equal to the date specified
     * @param {Date} opts.lastUpdated Date filter, restricts query to only load resources updated more recently than the date specified (ISO 8601)
     * @param {String} opts.deployDate Filter by deployDate, deployment completion timestamp is more recent or equal to the date specified
     * @param {module:model/String} opts.status Filter by status
     * @param {module:api/DeploysApi~getInstanceDeploysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getInstanceDeploys(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getInstanceDeploys");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'max': opts['max'],
        'offset': opts['offset'],
        'phrase': opts['phrase'],
        'name': opts['name'],
        'deploymentId': opts['deploymentId'],
        'instanceName': opts['instanceName'],
        'instanceId': opts['instanceId'],
        'version': opts['version'],
        'versionId': opts['versionId'],
        'createdById': opts['createdById'],
        'deployType': opts['deployType'],
        'dateCreated': opts['dateCreated'],
        'lastUpdated': opts['lastUpdated'],
        'deployDate': opts['deployDate'],
        'status': opts['status']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/instances/{id}/deploys', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listDeploys operation.
     * @callback module:api/DeploysApi~listDeploysCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all Deploys
     * This endpoint retrieves all deploys.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.max Maximum number of records to return, -1 can be used to fetch all records (default to 25)
     * @param {Number} opts.offset Offset records, the number of records to skip, for paginating requests (default to 0)
     * @param {String} opts.phrase Search phrase for partial matches on name or description
     * @param {String} opts.name Filter by name, wildcard may be specified as %, eg. example-%
     * @param {Number} opts.deploymentId Filter by deployment id
     * @param {String} opts.instanceName Filter by instance name
     * @param {Number} opts.instanceId The Instance ID for Filtering
     * @param {Number} opts.version Filter by version number (userVersion)
     * @param {Number} opts.versionId Filter by deployment version id
     * @param {Number} opts.createdById Filter by owner (user) id
     * @param {module:model/String} opts.deployType Filter by type (deployType), file, git, fetch
     * @param {String} opts.dateCreated Filter by dateCreated, the created timestamp is more recent or equal to the date specified
     * @param {Date} opts.lastUpdated Date filter, restricts query to only load resources updated more recently than the date specified (ISO 8601)
     * @param {String} opts.deployDate Filter by deployDate, deployment completion timestamp is more recent or equal to the date specified
     * @param {module:model/String} opts.status Filter by status
     * @param {module:api/DeploysApi~listDeploysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    listDeploys(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'max': opts['max'],
        'offset': opts['offset'],
        'phrase': opts['phrase'],
        'name': opts['name'],
        'deploymentId': opts['deploymentId'],
        'instanceName': opts['instanceName'],
        'instanceId': opts['instanceId'],
        'version': opts['version'],
        'versionId': opts['versionId'],
        'createdById': opts['createdById'],
        'deployType': opts['deployType'],
        'dateCreated': opts['dateCreated'],
        'lastUpdated': opts['lastUpdated'],
        'deployDate': opts['deployDate'],
        'status': opts['status']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/deploys', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the runDeploy operation.
     * @callback module:api/DeploysApi~runDeployCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20040} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Run a Deploy
     * This endpoint will run an existing instance deploy. This is for running a new staged deploy or to rollback to previous version by re-running a deploy that is archived.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject73} opts.inlineObject73 
     * @param {module:api/DeploysApi~runDeployCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20040}
     */
    runDeploy(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject73'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling runDeploy");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20040;
      return this.apiClient.callApi(
        '/api/deploys/{id}/deploy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDeploy operation.
     * @callback module:api/DeploysApi~updateDeployCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20040} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Deploy
     * This endpoint will update an existing deploy. This is typically only needed to change settings on a deploy that is staged, before it is run.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject72} opts.inlineObject72 
     * @param {module:api/DeploysApi~updateDeployCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20040}
     */
    updateDeploy(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject72'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateDeploy");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20040;
      return this.apiClient.callApi(
        '/api/deploys/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
