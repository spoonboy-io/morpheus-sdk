/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DefaultError from '../model/DefaultError';
import InlineObject24 from '../model/InlineObject24';
import InlineObject25 from '../model/InlineObject25';
import InlineResponse20015 from '../model/InlineResponse20015';
import Model200Success from '../model/Model200Success';

/**
* CatalogItems service.
* @module api/CatalogItemsApi
* @version 6.2.1
*/
export default class CatalogItemsApi {

    /**
    * Constructs a new CatalogItemsApi. 
    * @alias module:api/CatalogItemsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addCatalogItemType operation.
     * @callback module:api/CatalogItemsApi~addCatalogItemTypeCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Catalog Item Type
     * Use this command to create a catalog item type.
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject24} opts.inlineObject24 
     * @param {module:api/CatalogItemsApi~addCatalogItemTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    addCatalogItemType(opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject24'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/catalog-item-types', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCatalogItemType operation.
     * @callback module:api/CatalogItemsApi~getCatalogItemTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20015} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Specific Catalog Item Type
     * This endpoint retrieves a specific category item type.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/CatalogItemsApi~getCatalogItemTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20015}
     */
    getCatalogItemType(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCatalogItemType");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20015;
      return this.apiClient.callApi(
        '/api/catalog-item-types/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listCatalogItemTypes operation.
     * @callback module:api/CatalogItemsApi~listCatalogItemTypesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Catalog Item Types
     * This endpoint retrieves all catalog item types.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.max Maximum number of records to return, -1 can be used to fetch all records (default to 25)
     * @param {Number} opts.offset Offset records, the number of records to skip, for paginating requests (default to 0)
     * @param {String} opts.sort Sort order, the name of the property to sort by (default to 'name')
     * @param {module:model/String} opts.direction Sort direction, use 'desc' to reverse sort (default to 'asc')
     * @param {String} opts.phrase Search phrase for partial matches on name or description
     * @param {String} opts.name Filter by name, wildcard may be specified as %, eg. example-%
     * @param {String} opts.description Filter by description, wildcard may be specified as %. eg. `example-%`
     * @param {Boolean} opts.enabled Filter by enabled
     * @param {Boolean} opts.featured Filter by featured
     * @param {String} opts.labels Filter by label(s), matches records that contain any of the specified labels
     * @param {String} opts.allLabels Filter by label(s), matches records that contain all of the specified labels
     * @param {String} opts.code If specified will return an exact match on code
     * @param {module:api/CatalogItemsApi~listCatalogItemTypesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    listCatalogItemTypes(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'max': opts['max'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'direction': opts['direction'],
        'phrase': opts['phrase'],
        'name': opts['name'],
        'description': opts['description'],
        'enabled': opts['enabled'],
        'featured': opts['featured'],
        'labels': opts['labels'],
        'allLabels': opts['allLabels'],
        'code': opts['code']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/catalog-item-types', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeCatalogItemType operation.
     * @callback module:api/CatalogItemsApi~removeCatalogItemTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Catalog Item Type
     * Will delete a catalog item type.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/CatalogItemsApi~removeCatalogItemTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    removeCatalogItemType(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeCatalogItemType");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/catalog-item-types/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCatalogItemType operation.
     * @callback module:api/CatalogItemsApi~updateCatalogItemTypeCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Catalog Item Type
     * Use this command to update an existing catalog item type.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject25} opts.inlineObject25 
     * @param {module:api/CatalogItemsApi~updateCatalogItemTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateCatalogItemType(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject25'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateCatalogItemType");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/catalog-item-types/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCatalogItemTypeLogo operation.
     * @callback module:api/CatalogItemsApi~updateCatalogItemTypeLogoCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Logo For Catalog Item Type
     * Use this command to update the logo and dark logo images for an existing catalog item type. This endpoint expects multipart form data as the request format, not JSON.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {File} opts.catalogItemTypeLogo Logo File png,jpg,svg
     * @param {File} opts.catalogItemTypeDarkLogo Dark Logo File png,jpg,svg
     * @param {module:api/CatalogItemsApi~updateCatalogItemTypeLogoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateCatalogItemTypeLogo(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateCatalogItemTypeLogo");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'catalogItemType.logo': opts['catalogItemTypeLogo'],
        'catalogItemType.darkLogo': opts['catalogItemTypeDarkLogo']
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/catalog-item-types/{id}/update-logo', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
