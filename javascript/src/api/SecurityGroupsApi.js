/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DefaultError from '../model/DefaultError';
import InlineObject213 from '../model/InlineObject213';
import InlineObject214 from '../model/InlineObject214';
import InlineObject215 from '../model/InlineObject215';
import InlineObject216 from '../model/InlineObject216';
import InlineObject217 from '../model/InlineObject217';
import InlineResponse200133 from '../model/InlineResponse200133';
import InlineResponse200134 from '../model/InlineResponse200134';
import InlineResponse200135 from '../model/InlineResponse200135';
import Model200Success from '../model/Model200Success';

/**
* SecurityGroups service.
* @module api/SecurityGroupsApi
* @version 6.2.1
*/
export default class SecurityGroupsApi {

    /**
    * Constructs a new SecurityGroupsApi. 
    * @alias module:api/SecurityGroupsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addSecurityGroupLocations operation.
     * @callback module:api/SecurityGroupsApi~addSecurityGroupLocationsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a Security Group Location
     * Creates a security group location. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject215} opts.inlineObject215 
     * @param {module:api/SecurityGroupsApi~addSecurityGroupLocationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    addSecurityGroupLocations(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject215'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addSecurityGroupLocations");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/security-groups/{id}/locations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addSecurityGroupRules operation.
     * @callback module:api/SecurityGroupsApi~addSecurityGroupRulesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a Security Group Rule
     * Creates a security group rule on specified security group. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject216} opts.inlineObject216 
     * @param {module:api/SecurityGroupsApi~addSecurityGroupRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    addSecurityGroupRules(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject216'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addSecurityGroupRules");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/security-groups/{id}/rules', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addSecurityGroups operation.
     * @callback module:api/SecurityGroupsApi~addSecurityGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200133} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a Security Group
     * Creates a security group. 
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject213} opts.inlineObject213 
     * @param {module:api/SecurityGroupsApi~addSecurityGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200133}
     */
    addSecurityGroups(opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject213'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse200133;
      return this.apiClient.callApi(
        '/api/security-groups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSecurityGroupRules operation.
     * @callback module:api/SecurityGroupsApi~getSecurityGroupRulesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200135} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a Specific Security Group Rule
     * Retrieves a specific security group rule. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Number} sgId Morpheus ID of the security group rule being referenced
     * @param {module:api/SecurityGroupsApi~getSecurityGroupRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200135}
     */
    getSecurityGroupRules(id, sgId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSecurityGroupRules");
      }
      // verify the required parameter 'sgId' is set
      if (sgId === undefined || sgId === null) {
        throw new Error("Missing the required parameter 'sgId' when calling getSecurityGroupRules");
      }

      let pathParams = {
        'id': id,
        'sgId': sgId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200135;
      return this.apiClient.callApi(
        '/api/security-groups/{id}/rules/{sgId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSecurityGroups operation.
     * @callback module:api/SecurityGroupsApi~getSecurityGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200134} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a Specific Security Group
     * Retrieves a specific security group. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/SecurityGroupsApi~getSecurityGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200134}
     */
    getSecurityGroups(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSecurityGroups");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200134;
      return this.apiClient.callApi(
        '/api/security-groups/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSecurityGroupRules operation.
     * @callback module:api/SecurityGroupsApi~listSecurityGroupRulesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves all Security Group Rules
     * Retrieves all security group rules for specified security group. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {Number} opts.max Maximum number of records to return, -1 can be used to fetch all records (default to 25)
     * @param {Number} opts.offset Offset records, the number of records to skip, for paginating requests (default to 0)
     * @param {String} opts.sort Sort order, the name of the property to sort by (default to 'name')
     * @param {module:model/String} opts.direction Sort direction, use 'desc' to reverse sort (default to 'asc')
     * @param {String} opts.phrase Search phrase for partial matches on name or description
     * @param {String} opts.name Filter by name, wildcard may be specified as %, eg. example-%
     * @param {module:api/SecurityGroupsApi~listSecurityGroupRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    listSecurityGroupRules(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listSecurityGroupRules");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'max': opts['max'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'direction': opts['direction'],
        'phrase': opts['phrase'],
        'name': opts['name']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/security-groups/{id}/rules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSecurityGroups operation.
     * @callback module:api/SecurityGroupsApi~listSecurityGroupsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves all Security Groups
     * This endpoint retrieves all security groups and their JSON encoded configuration attributes. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.max Maximum number of records to return, -1 can be used to fetch all records (default to 25)
     * @param {Number} opts.offset Offset records, the number of records to skip, for paginating requests (default to 0)
     * @param {String} opts.sort Sort order, the name of the property to sort by (default to 'name')
     * @param {module:model/String} opts.direction Sort direction, use 'desc' to reverse sort (default to 'asc')
     * @param {String} opts.phrase Search phrase for partial matches on name or description
     * @param {String} opts.name Filter by name, wildcard may be specified as %, eg. example-%
     * @param {module:api/SecurityGroupsApi~listSecurityGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    listSecurityGroups(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'max': opts['max'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'direction': opts['direction'],
        'phrase': opts['phrase'],
        'name': opts['name']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/security-groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeSecurityGroupLocations operation.
     * @callback module:api/SecurityGroupsApi~removeSecurityGroupLocationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a Security Group Location
     * Deletes a security group location. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Number} locationId The ID of the location
     * @param {module:api/SecurityGroupsApi~removeSecurityGroupLocationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    removeSecurityGroupLocations(id, locationId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeSecurityGroupLocations");
      }
      // verify the required parameter 'locationId' is set
      if (locationId === undefined || locationId === null) {
        throw new Error("Missing the required parameter 'locationId' when calling removeSecurityGroupLocations");
      }

      let pathParams = {
        'id': id,
        'locationId': locationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/security-groups/{id}/locations/{locationId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeSecurityGroupRules operation.
     * @callback module:api/SecurityGroupsApi~removeSecurityGroupRulesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a Security Group Rule
     * Deletes a security group rule. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Number} sgId Morpheus ID of the security group rule being referenced
     * @param {module:api/SecurityGroupsApi~removeSecurityGroupRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    removeSecurityGroupRules(id, sgId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeSecurityGroupRules");
      }
      // verify the required parameter 'sgId' is set
      if (sgId === undefined || sgId === null) {
        throw new Error("Missing the required parameter 'sgId' when calling removeSecurityGroupRules");
      }

      let pathParams = {
        'id': id,
        'sgId': sgId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/security-groups/{id}/rules/{sgId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeSecurityGroups operation.
     * @callback module:api/SecurityGroupsApi~removeSecurityGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a Security Group
     * Deletes a specified security group. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/SecurityGroupsApi~removeSecurityGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    removeSecurityGroups(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeSecurityGroups");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/security-groups/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSecurityGroupRules operation.
     * @callback module:api/SecurityGroupsApi~updateSecurityGroupRulesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a Security Group Rule
     * Updates a security group rule. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Number} sgId Morpheus ID of the security group rule being referenced
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject217} opts.inlineObject217 
     * @param {module:api/SecurityGroupsApi~updateSecurityGroupRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateSecurityGroupRules(id, sgId, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject217'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateSecurityGroupRules");
      }
      // verify the required parameter 'sgId' is set
      if (sgId === undefined || sgId === null) {
        throw new Error("Missing the required parameter 'sgId' when calling updateSecurityGroupRules");
      }

      let pathParams = {
        'id': id,
        'sgId': sgId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/security-groups/{id}/rules/{sgId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSecurityGroups operation.
     * @callback module:api/SecurityGroupsApi~updateSecurityGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200133} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updating a Security Group
     * Updating a Security Group 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject214} opts.inlineObject214 
     * @param {module:api/SecurityGroupsApi~updateSecurityGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200133}
     */
    updateSecurityGroups(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject214'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateSecurityGroups");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse200133;
      return this.apiClient.callApi(
        '/api/security-groups/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
