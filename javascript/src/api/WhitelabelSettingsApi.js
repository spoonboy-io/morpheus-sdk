/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DefaultError from '../model/DefaultError';
import InlineObject265 from '../model/InlineObject265';
import InlineResponse200166 from '../model/InlineResponse200166';
import Model200Success from '../model/Model200Success';

/**
* WhitelabelSettings service.
* @module api/WhitelabelSettingsApi
* @version 6.2.1
*/
export default class WhitelabelSettingsApi {

    /**
    * Constructs a new WhitelabelSettingsApi. 
    * @alias module:api/WhitelabelSettingsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getWhitelabelImage operation.
     * @callback module:api/WhitelabelSettingsApi~getWhitelabelImageCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download Image
     * Downloads the specified image.
     * @param {module:model/String} imageType Valid image types
     * @param {module:api/WhitelabelSettingsApi~getWhitelabelImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getWhitelabelImage(imageType, callback) {
      let postBody = null;
      // verify the required parameter 'imageType' is set
      if (imageType === undefined || imageType === null) {
        throw new Error("Missing the required parameter 'imageType' when calling getWhitelabelImage");
      }

      let pathParams = {
        'imageType': imageType
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['image/ico', 'image/jpeg', 'image/png', 'image/svg+xml', 'application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/api/whitelabel-settings/images/{imageType}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listWhitelabelSettings operation.
     * @callback module:api/WhitelabelSettingsApi~listWhitelabelSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200166} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Whitelabel Settings
     * This endpoint retrieves whitelabel settings.
     * @param {module:api/WhitelabelSettingsApi~listWhitelabelSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200166}
     */
    listWhitelabelSettings(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200166;
      return this.apiClient.callApi(
        '/api/whitelabel-settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeWhitelabelImage operation.
     * @callback module:api/WhitelabelSettingsApi~removeWhitelabelImageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reset Image
     * Resets the specified image to the Morpheus default.
     * @param {module:model/String} imageType Valid image types
     * @param {module:api/WhitelabelSettingsApi~removeWhitelabelImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    removeWhitelabelImage(imageType, callback) {
      let postBody = null;
      // verify the required parameter 'imageType' is set
      if (imageType === undefined || imageType === null) {
        throw new Error("Missing the required parameter 'imageType' when calling removeWhitelabelImage");
      }

      let pathParams = {
        'imageType': imageType
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/whitelabel-settings/images/{imageType}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateWhitelabelImages operation.
     * @callback module:api/WhitelabelSettingsApi~updateWhitelabelImagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Images
     * Uploads whitelabel images. Expects multipart form data as the request format, not JSON.
     * @param {Object} opts Optional parameters
     * @param {File} opts.headerLogoFile Header logo image file, valid image types `png|jpg|svg`
     * @param {Boolean} opts.resetHeaderLogo Resets header logo to default
     * @param {File} opts.footerLogoFile Footer logo image file, valid image types `png|jpg|svg`
     * @param {Boolean} opts.resetFooterLogo Resets footer logo to default
     * @param {File} opts.loginLogoFile Login logo image file, valid image types `png|jpg|svg`
     * @param {Boolean} opts.resetLoginLogo Resets login logo to default
     * @param {File} opts.faviconFile Favicon image file, valid image type ico
     * @param {Boolean} opts.resetFaviconLogo Resets favicon logo to default
     * @param {module:api/WhitelabelSettingsApi~updateWhitelabelImagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    updateWhitelabelImages(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'headerLogo.file': opts['headerLogoFile'],
        'resetHeaderLogo': opts['resetHeaderLogo'],
        'footerLogo.file': opts['footerLogoFile'],
        'resetFooterLogo': opts['resetFooterLogo'],
        'loginLogo.file': opts['loginLogoFile'],
        'resetLoginLogo': opts['resetLoginLogo'],
        'favicon.file': opts['faviconFile'],
        'resetFaviconLogo': opts['resetFaviconLogo']
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/whitelabel-settings/images', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateWhitelabelSettings operation.
     * @callback module:api/WhitelabelSettingsApi~updateWhitelabelSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Whitelabel Settings
     * Update Whitelabel Settings
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject265} opts.inlineObject265 
     * @param {module:api/WhitelabelSettingsApi~updateWhitelabelSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    updateWhitelabelSettings(opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject265'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/whitelabel-settings', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
