/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AnyOfobject200Success from '../model/AnyOfobject200Success';
import DefaultError from '../model/DefaultError';
import InlineObject257 from '../model/InlineObject257';
import InlineObject258 from '../model/InlineObject258';
import InlineObject259 from '../model/InlineObject259';
import InlineObject260 from '../model/InlineObject260';
import InlineObject261 from '../model/InlineObject261';
import InlineObject262 from '../model/InlineObject262';
import InlineResponse200160 from '../model/InlineResponse200160';
import InlineResponse200161 from '../model/InlineResponse200161';
import InlineResponse200162 from '../model/InlineResponse200162';
import InlineResponse200163 from '../model/InlineResponse200163';
import InlineResponse200164 from '../model/InlineResponse200164';
import Model200Success from '../model/Model200Success';

/**
* VDI service.
* @module api/VDIApi
* @version 6.2.1
*/
export default class VDIApi {

    /**
    * Constructs a new VDIApi. 
    * @alias module:api/VDIApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addVDIApps operation.
     * @callback module:api/VDIApi~addVDIAppsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnyOfobject200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a VDI App
     * Creates a VDI app. 
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject257} opts.inlineObject257 
     * @param {module:api/VDIApi~addVDIAppsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnyOfobject200Success}
     */
    addVDIApps(opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject257'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = AnyOfobject200Success;
      return this.apiClient.callApi(
        '/api/vdi-apps', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addVDIGateways operation.
     * @callback module:api/VDIApi~addVDIGatewaysCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnyOfobject200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a VDI Gateway
     * Creates a VDI gateway. 
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject259} opts.inlineObject259 
     * @param {module:api/VDIApi~addVDIGatewaysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnyOfobject200Success}
     */
    addVDIGateways(opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject259'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AnyOfobject200Success;
      return this.apiClient.callApi(
        '/api/vdi-gateways', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addVDIPools operation.
     * @callback module:api/VDIApi~addVDIPoolsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnyOfobject200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a VDI Pool
     * Creates a VDI pool. 
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject261} opts.inlineObject261 
     * @param {module:api/VDIApi~addVDIPoolsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnyOfobject200Success}
     */
    addVDIPools(opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject261'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = AnyOfobject200Success;
      return this.apiClient.callApi(
        '/api/vdi-pools', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addVdiAllocation operation.
     * @callback module:api/VDIApi~addVdiAllocationCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Allocate Virtual Desktop
     * This endpoint allocates a specific virtual desktop for use by your user. It will return the desktop and its allocation for your user, or an error if allocation fails, which will occur if the desktop is fully allocated already. If your user already has an allocation, the desktop and allocation will still be returned succesfully and the server does not make any changes. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/VDIApi~addVdiAllocationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    addVdiAllocation(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addVdiAllocation");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/vdi/{id}/allocate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVDIAllocations operation.
     * @callback module:api/VDIApi~getVDIAllocationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200163} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a Specific VDI Allocation
     * Retrieves a specific VDI allocation. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/VDIApi~getVDIAllocationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200163}
     */
    getVDIAllocations(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getVDIAllocations");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200163;
      return this.apiClient.callApi(
        '/api/vdi-allocations/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVDIApps operation.
     * @callback module:api/VDIApi~getVDIAppsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200160} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a Specific VDI App
     * Retrieves a specific VDI app. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/VDIApi~getVDIAppsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200160}
     */
    getVDIApps(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getVDIApps");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200160;
      return this.apiClient.callApi(
        '/api/vdi-apps/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVDIGateways operation.
     * @callback module:api/VDIApi~getVDIGatewaysCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200161} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a Specific VDI Gateway
     * Retrieves a specific VDI gateway. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/VDIApi~getVDIGatewaysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200161}
     */
    getVDIGateways(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getVDIGateways");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200161;
      return this.apiClient.callApi(
        '/api/vdi-gateways/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVDIPools operation.
     * @callback module:api/VDIApi~getVDIPoolsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200162} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a Specific VDI Pool
     * Retrieves a specific VDI pool. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/VDIApi~getVDIPoolsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200162}
     */
    getVDIPools(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getVDIPools");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200162;
      return this.apiClient.callApi(
        '/api/vdi-pools/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVdi operation.
     * @callback module:api/VDIApi~getVdiCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200164} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Specific Virtual Desktop
     * This endpoint retrieves a specific virtual desktop along with the allocation for your user if one exists. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/VDIApi~getVdiCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200164}
     */
    getVdi(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getVdi");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200164;
      return this.apiClient.callApi(
        '/api/vdi/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listVDIAllocations operation.
     * @callback module:api/VDIApi~listVDIAllocationsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves all VDI Allocations
     * Retrieves all VDI allocations. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.max Maximum number of records to return, -1 can be used to fetch all records (default to 25)
     * @param {Number} opts.offset Offset records, the number of records to skip, for paginating requests (default to 0)
     * @param {String} opts.sort Sort order, the name of the property to sort by (default to 'name')
     * @param {module:model/String} opts.direction Sort direction, use 'desc' to reverse sort (default to 'asc')
     * @param {String} opts.phrase Search phrase for partial matches on name or description
     * @param {String} opts.name Filter by name, wildcard may be specified as %, eg. example-%
     * @param {String} opts.id Filter by allocation ID
     * @param {String} opts.status Filter by allocation status
     * @param {Number} opts.poolId Filter by `VDI Pool` ID
     * @param {Number} opts.userId Filter by User ID
     * @param {module:api/VDIApi~listVDIAllocationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    listVDIAllocations(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'max': opts['max'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'direction': opts['direction'],
        'phrase': opts['phrase'],
        'name': opts['name'],
        'id': opts['id'],
        'status': opts['status'],
        'poolId': opts['poolId'],
        'userId': opts['userId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/vdi-allocations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listVDIApps operation.
     * @callback module:api/VDIApi~listVDIAppsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves all VDI Apps
     * Retrieves all VDI apps. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.max Maximum number of records to return, -1 can be used to fetch all records (default to 25)
     * @param {Number} opts.offset Offset records, the number of records to skip, for paginating requests (default to 0)
     * @param {String} opts.sort Sort order, the name of the property to sort by (default to 'name')
     * @param {module:model/String} opts.direction Sort direction, use 'desc' to reverse sort (default to 'asc')
     * @param {String} opts.phrase Search phrase for partial matches on name or description
     * @param {String} opts.name Filter by name, wildcard may be specified as %, eg. example-%
     * @param {String} opts.description Filter by description, wildcard may be specified as %. eg. `example-%`
     * @param {module:api/VDIApi~listVDIAppsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    listVDIApps(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'max': opts['max'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'direction': opts['direction'],
        'phrase': opts['phrase'],
        'name': opts['name'],
        'description': opts['description']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/vdi-apps', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listVDIGateways operation.
     * @callback module:api/VDIApi~listVDIGatewaysCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves all VDI Gateways
     * Retrieves all VDI gateways. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.max Maximum number of records to return, -1 can be used to fetch all records (default to 25)
     * @param {Number} opts.offset Offset records, the number of records to skip, for paginating requests (default to 0)
     * @param {String} opts.sort Sort order, the name of the property to sort by (default to 'name')
     * @param {module:model/String} opts.direction Sort direction, use 'desc' to reverse sort (default to 'asc')
     * @param {String} opts.phrase Search phrase for partial matches on name or description
     * @param {String} opts.name Filter by name, wildcard may be specified as %, eg. example-%
     * @param {String} opts.description Filter by description, wildcard may be specified as %. eg. `example-%`
     * @param {module:api/VDIApi~listVDIGatewaysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    listVDIGateways(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'max': opts['max'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'direction': opts['direction'],
        'phrase': opts['phrase'],
        'name': opts['name'],
        'description': opts['description']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/vdi-gateways', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listVDIPools operation.
     * @callback module:api/VDIApi~listVDIPoolsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves all VDI Pools
     * Retrieves all VDI pools. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.max Maximum number of records to return, -1 can be used to fetch all records (default to 25)
     * @param {Number} opts.offset Offset records, the number of records to skip, for paginating requests (default to 0)
     * @param {String} opts.sort Sort order, the name of the property to sort by (default to 'name')
     * @param {module:model/String} opts.direction Sort direction, use 'desc' to reverse sort (default to 'asc')
     * @param {String} opts.phrase Search phrase for partial matches on name or description
     * @param {String} opts.name Filter by name, wildcard may be specified as %, eg. example-%
     * @param {String} opts.description Filter by description, wildcard may be specified as %. eg. `example-%`
     * @param {Boolean} opts.enabled Filter by enabled
     * @param {module:api/VDIApi~listVDIPoolsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    listVDIPools(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'max': opts['max'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'direction': opts['direction'],
        'phrase': opts['phrase'],
        'name': opts['name'],
        'description': opts['description'],
        'enabled': opts['enabled']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/vdi-pools', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listVdi operation.
     * @callback module:api/VDIApi~listVdiCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Virtual Desktops
     * This endpoint retrieves all virtual desktops along with the allocation for your user if one exists. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.phrase Search phrase for partial matches on name or description
     * @param {Number} opts.max Maximum number of records to return, -1 can be used to fetch all records (default to 25)
     * @param {Number} opts.offset Offset records, the number of records to skip, for paginating requests (default to 0)
     * @param {String} opts.sort Sort order, the name of the property to sort by (default to 'name')
     * @param {module:model/String} opts.direction Sort direction, use 'desc' to reverse sort (default to 'asc')
     * @param {String} opts.name Filter by name, wildcard may be specified as %, eg. example-%
     * @param {String} opts.description Filter by description, wildcard may be specified as %. eg. `example-%`
     * @param {module:api/VDIApi~listVdiCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    listVdi(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'phrase': opts['phrase'],
        'max': opts['max'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'direction': opts['direction'],
        'name': opts['name'],
        'description': opts['description']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/vdi', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeVDIApps operation.
     * @callback module:api/VDIApi~removeVDIAppsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a VDI App
     * Deletes a specified VDI App. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/VDIApi~removeVDIAppsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    removeVDIApps(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeVDIApps");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/vdi-apps/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeVDIGateways operation.
     * @callback module:api/VDIApi~removeVDIGatewaysCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a VDI Gateway
     * Deletes a specified VDI Gateway. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/VDIApi~removeVDIGatewaysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    removeVDIGateways(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeVDIGateways");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/vdi-gateways/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeVDIPools operation.
     * @callback module:api/VDIApi~removeVDIPoolsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a VDI Pool
     * Deletes a specified VDI Pool. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/VDIApi~removeVDIPoolsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    removeVDIPools(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeVDIPools");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/vdi-pools/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateVDIApps operation.
     * @callback module:api/VDIApi~updateVDIAppsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnyOfobject200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a VDI App Configuration or Icon
     * Updates a VDI App configuration or icon. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject258} opts.inlineObject258 
     * @param {module:api/VDIApi~updateVDIAppsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnyOfobject200Success}
     */
    updateVDIApps(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject258'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateVDIApps");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = AnyOfobject200Success;
      return this.apiClient.callApi(
        '/api/vdi-apps/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateVDIGateways operation.
     * @callback module:api/VDIApi~updateVDIGatewaysCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnyOfobject200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a VDI Gateway Configuration
     * Updates a VDI Gateway configuration or icon. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject260} opts.inlineObject260 
     * @param {module:api/VDIApi~updateVDIGatewaysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnyOfobject200Success}
     */
    updateVDIGateways(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject260'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateVDIGateways");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AnyOfobject200Success;
      return this.apiClient.callApi(
        '/api/vdi-gateways/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateVDIPools operation.
     * @callback module:api/VDIApi~updateVDIPoolsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnyOfobject200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a VDI Pool Configuration or Icon
     * Updates a VDI Pool configuration or icon. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject262} opts.inlineObject262 
     * @param {module:api/VDIApi~updateVDIPoolsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnyOfobject200Success}
     */
    updateVDIPools(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject262'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateVDIPools");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = AnyOfobject200Success;
      return this.apiClient.callApi(
        '/api/vdi-pools/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
