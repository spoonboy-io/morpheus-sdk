/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DefaultError from '../model/DefaultError';
import InlineObject274 from '../model/InlineObject274';
import InlineObject41 from '../model/InlineObject41';
import InlineObject42 from '../model/InlineObject42';
import InlineObject43 from '../model/InlineObject43';
import InlineObject44 from '../model/InlineObject44';
import InlineObject45 from '../model/InlineObject45';
import InlineObject46 from '../model/InlineObject46';
import InlineObject47 from '../model/InlineObject47';
import InlineObject49 from '../model/InlineObject49';
import InlineResponse200168 from '../model/InlineResponse200168';
import InlineResponse20020 from '../model/InlineResponse20020';
import InlineResponse20021 from '../model/InlineResponse20021';
import InlineResponse20022 from '../model/InlineResponse20022';
import InlineResponse20023 from '../model/InlineResponse20023';
import InlineResponse20024 from '../model/InlineResponse20024';
import Model200Success from '../model/Model200Success';

/**
* Clouds service.
* @module api/CloudsApi
* @version 6.2.1
*/
export default class CloudsApi {

    /**
    * Constructs a new CloudsApi. 
    * @alias module:api/CloudsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addCloudResourcePool operation.
     * @callback module:api/CloudsApi~addCloudResourcePoolCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20024} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a Specified Resource Pool for Specified Cloud
     * Creates a resource pool for specified cloud. Only certain types of clouds support creating and deleting resource pools. Configuration options vary by type. 
     * @param {Number} zoneId The ID of the cloud
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject45} opts.inlineObject45 
     * @param {module:api/CloudsApi~addCloudResourcePoolCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20024}
     */
    addCloudResourcePool(zoneId, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject45'];
      // verify the required parameter 'zoneId' is set
      if (zoneId === undefined || zoneId === null) {
        throw new Error("Missing the required parameter 'zoneId' when calling addCloudResourcePool");
      }

      let pathParams = {
        'zoneId': zoneId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20024;
      return this.apiClient.callApi(
        '/api/zones/{zoneId}/resource-pools', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addClouds operation.
     * @callback module:api/CloudsApi~addCloudsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a Cloud
     * Creates a cloud. 
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject41} opts.inlineObject41 
     * @param {module:api/CloudsApi~addCloudsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    addClouds(opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject41'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/zones', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCloudDatastores operation.
     * @callback module:api/CloudsApi~getCloudDatastoresCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a Datastore for Specified Cloud
     * Data Stores can be managed for each Compute Zone (Cloud) in your infrastructure. This endpoint retrieves a specific datastore under a cloud. 
     * @param {Number} zoneId The ID of the cloud
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/CloudsApi~getCloudDatastoresCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getCloudDatastores(zoneId, id, callback) {
      let postBody = null;
      // verify the required parameter 'zoneId' is set
      if (zoneId === undefined || zoneId === null) {
        throw new Error("Missing the required parameter 'zoneId' when calling getCloudDatastores");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCloudDatastores");
      }

      let pathParams = {
        'zoneId': zoneId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/zones/{zoneId}/data-stores/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCloudFolders operation.
     * @callback module:api/CloudsApi~getCloudFoldersCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a Resource Folder for Specified Cloud
     * Resource Folders can be managed for each Compute Zone (Cloud) in your infrastructure. This endpoint retrieves a specific folder under a cloud. 
     * @param {Number} zoneId The ID of the cloud
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/CloudsApi~getCloudFoldersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getCloudFolders(zoneId, id, callback) {
      let postBody = null;
      // verify the required parameter 'zoneId' is set
      if (zoneId === undefined || zoneId === null) {
        throw new Error("Missing the required parameter 'zoneId' when calling getCloudFolders");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCloudFolders");
      }

      let pathParams = {
        'zoneId': zoneId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/zones/{zoneId}/folders/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCloudResourcePools operation.
     * @callback module:api/CloudsApi~getCloudResourcePoolsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a Resource Pool for Specified Cloud
     * This endpoint retrieves a specific resource pool. 
     * @param {Number} zoneId The ID of the cloud
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/CloudsApi~getCloudResourcePoolsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getCloudResourcePools(zoneId, id, callback) {
      let postBody = null;
      // verify the required parameter 'zoneId' is set
      if (zoneId === undefined || zoneId === null) {
        throw new Error("Missing the required parameter 'zoneId' when calling getCloudResourcePools");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCloudResourcePools");
      }

      let pathParams = {
        'zoneId': zoneId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/zones/{zoneId}/resource-pools/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCloudTypes operation.
     * @callback module:api/CloudsApi~getCloudTypesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20020} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a Specific Cloud Type
     * Retrieves a specific cloud type. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/CloudsApi~getCloudTypesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20020}
     */
    getCloudTypes(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCloudTypes");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20020;
      return this.apiClient.callApi(
        '/api/zone-types/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getClouds operation.
     * @callback module:api/CloudsApi~getCloudsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20021} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a Specific Cloud
     * Retrieves a specific cloud. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/CloudsApi~getCloudsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20021}
     */
    getClouds(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getClouds");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20021;
      return this.apiClient.callApi(
        '/api/zones/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getWikiCloud operation.
     * @callback module:api/CloudsApi~getWikiCloudCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200168} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a Cloud Wiki Page
     * This endpoint retrieves a cloud Wiki page. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/CloudsApi~getWikiCloudCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200168}
     */
    getWikiCloud(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getWikiCloud");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200168;
      return this.apiClient.callApi(
        '/api/zones/{id}/wiki', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listCloudDatastores operation.
     * @callback module:api/CloudsApi~listCloudDatastoresCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves all Datastores for Specified Cloud
     * Data Stores can be managed for each Compute Zone (Cloud) in your infrastructure. This endpoint retrieves all data stores under a cloud. 
     * @param {Number} zoneId The ID of the cloud
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter by name, wildcard may be specified as %, eg. example-%
     * @param {String} opts.phrase Search phrase for partial matches on name or description
     * @param {Number} opts.max Maximum number of records to return, -1 can be used to fetch all records (default to 25)
     * @param {String} opts.sort Sort order, the name of the property to sort by (default to 'name')
     * @param {module:model/String} opts.direction Sort direction, use 'desc' to reverse sort (default to 'asc')
     * @param {module:api/CloudsApi~listCloudDatastoresCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    listCloudDatastores(zoneId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'zoneId' is set
      if (zoneId === undefined || zoneId === null) {
        throw new Error("Missing the required parameter 'zoneId' when calling listCloudDatastores");
      }

      let pathParams = {
        'zoneId': zoneId
      };
      let queryParams = {
        'name': opts['name'],
        'phrase': opts['phrase'],
        'max': opts['max'],
        'sort': opts['sort'],
        'direction': opts['direction']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/zones/{zoneId}/data-stores', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listCloudFolders operation.
     * @callback module:api/CloudsApi~listCloudFoldersCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves all resource folders for Specified Cloud
     * Resource Folders can be managed for each Compute Zone (Cloud) in your infrastructure. This endpoint retrieves all resource folders under a cloud. 
     * @param {Number} zoneId The ID of the cloud
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter by name, wildcard may be specified as %, eg. example-%
     * @param {String} opts.phrase Search phrase for partial matches on name or description
     * @param {Number} opts.max Maximum number of records to return, -1 can be used to fetch all records (default to 25)
     * @param {module:api/CloudsApi~listCloudFoldersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    listCloudFolders(zoneId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'zoneId' is set
      if (zoneId === undefined || zoneId === null) {
        throw new Error("Missing the required parameter 'zoneId' when calling listCloudFolders");
      }

      let pathParams = {
        'zoneId': zoneId
      };
      let queryParams = {
        'name': opts['name'],
        'phrase': opts['phrase'],
        'max': opts['max']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/zones/{zoneId}/folders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listCloudResourcePools operation.
     * @callback module:api/CloudsApi~listCloudResourcePoolsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves all Resource Pools for Specified Cloud
     * Resource Pools can be managed for each Compute Zone (Cloud) in your infrastructure. This endpoint retrieves all resource pools under a cloud. 
     * @param {Number} zoneId The ID of the cloud
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter by name, wildcard may be specified as %, eg. example-%
     * @param {String} opts.phrase Search phrase for partial matches on name or description
     * @param {Number} opts.max Maximum number of records to return, -1 can be used to fetch all records (default to 25)
     * @param {module:api/CloudsApi~listCloudResourcePoolsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    listCloudResourcePools(zoneId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'zoneId' is set
      if (zoneId === undefined || zoneId === null) {
        throw new Error("Missing the required parameter 'zoneId' when calling listCloudResourcePools");
      }

      let pathParams = {
        'zoneId': zoneId
      };
      let queryParams = {
        'name': opts['name'],
        'phrase': opts['phrase'],
        'max': opts['max']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/zones/{zoneId}/resource-pools', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listCloudSecurityGroups operation.
     * @callback module:api/CloudsApi~listCloudSecurityGroupsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves all Security Groups for a Cloud
     * Retrieves all security groups for a cloud. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/CloudsApi~listCloudSecurityGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    listCloudSecurityGroups(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listCloudSecurityGroups");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/zones/{id}/security-groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listCloudTypes operation.
     * @callback module:api/CloudsApi~listCloudTypesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves all Cloud Types
     * Fetch a paginated list of available cloud types. This returns the configuration options for each type. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.max Maximum number of records to return, -1 can be used to fetch all records (default to 25)
     * @param {Number} opts.offset Offset records, the number of records to skip, for paginating requests (default to 0)
     * @param {String} opts.sort Sort order, the name of the property to sort by (default to 'name')
     * @param {module:model/String} opts.direction Sort direction, use 'desc' to reverse sort (default to 'asc')
     * @param {String} opts.name Filter by name, wildcard may be specified as %, eg. example-%
     * @param {String} opts.code If specified will return an exact match on code
     * @param {String} opts.phrase Search phrase for partial matches on name or description
     * @param {module:model/String} opts.provisionType Filter by `Provision Type` code. Refer to `Provision Types` API for up to date listings. 
     * @param {module:api/CloudsApi~listCloudTypesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    listCloudTypes(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'max': opts['max'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'direction': opts['direction'],
        'name': opts['name'],
        'code': opts['code'],
        'phrase': opts['phrase'],
        'provisionType': opts['provisionType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/zone-types', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listClouds operation.
     * @callback module:api/CloudsApi~listCloudsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves all Clouds
     * Retrieves all clouds. 
     * @param {Object} opts Optional parameters
     * @param {Date} opts.lastUpdated Date filter, restricts query to only load resources updated more recently than the date specified (ISO 8601)
     * @param {module:model/String} opts.type If specified will return all zones by cloud type code. Refer to `Zone Types` API for up to date listings. 
     * @param {Number} opts.groupId If specified will return all zones assigned to a server group by id. Accepts multiple values.
     * @param {Number} opts.max Maximum number of records to return, -1 can be used to fetch all records (default to 25)
     * @param {Number} opts.offset Offset records, the number of records to skip, for paginating requests (default to 0)
     * @param {String} opts.sort Sort order, the name of the property to sort by (default to 'name')
     * @param {module:model/String} opts.direction Sort direction, use 'desc' to reverse sort (default to 'asc')
     * @param {String} opts.phrase Search phrase for partial matches on name or description
     * @param {String} opts.name Filter by name, wildcard may be specified as %, eg. example-%
     * @param {module:api/CloudsApi~listCloudsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    listClouds(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'lastUpdated': opts['lastUpdated'],
        'type': opts['type'],
        'groupId': opts['groupId'],
        'max': opts['max'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'direction': opts['direction'],
        'phrase': opts['phrase'],
        'name': opts['name']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/zones', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the refreshClouds operation.
     * @callback module:api/CloudsApi~refreshCloudsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Refreshes a Cloud
     * Refreshes a cloud. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject47} opts.inlineObject47 
     * @param {module:api/CloudsApi~refreshCloudsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    refreshClouds(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject47'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling refreshClouds");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/zones/{id}/refresh', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeCloudResourcePools operation.
     * @callback module:api/CloudsApi~removeCloudResourcePoolsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a Resource Pool for Specified Cloud
     * Deletes a resource pool for specified Cloud. 
     * @param {Number} zoneId The ID of the cloud
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/CloudsApi~removeCloudResourcePoolsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    removeCloudResourcePools(zoneId, id, callback) {
      let postBody = null;
      // verify the required parameter 'zoneId' is set
      if (zoneId === undefined || zoneId === null) {
        throw new Error("Missing the required parameter 'zoneId' when calling removeCloudResourcePools");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeCloudResourcePools");
      }

      let pathParams = {
        'zoneId': zoneId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/zones/{zoneId}/resource-pools/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeClouds operation.
     * @callback module:api/CloudsApi~removeCloudsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a Cloud
     * Deletes a specified Cloud. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.removeResources Removing associated resources will delete the instances and the associated resources underneath.  This includes Virtual Machines and other forms of compute. (default to false)
     * @param {module:api/CloudsApi~removeCloudsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    removeClouds(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeClouds");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'removeResources': opts['removeResources']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/zones/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCloudDatastores operation.
     * @callback module:api/CloudsApi~updateCloudDatastoresCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20022} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a Specified Datastore for Specified Cloud
     * Updates a datastore for specified cloud. 
     * @param {Number} zoneId The ID of the cloud
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject43} opts.inlineObject43 
     * @param {module:api/CloudsApi~updateCloudDatastoresCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20022}
     */
    updateCloudDatastores(zoneId, id, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject43'];
      // verify the required parameter 'zoneId' is set
      if (zoneId === undefined || zoneId === null) {
        throw new Error("Missing the required parameter 'zoneId' when calling updateCloudDatastores");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateCloudDatastores");
      }

      let pathParams = {
        'zoneId': zoneId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20022;
      return this.apiClient.callApi(
        '/api/zones/{zoneId}/data-stores/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCloudFolders operation.
     * @callback module:api/CloudsApi~updateCloudFoldersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20023} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a Resource Folder for Specified Cloud
     * Updates a resource folder for specified cloud. 
     * @param {Number} zoneId The ID of the cloud
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject44} opts.inlineObject44 
     * @param {module:api/CloudsApi~updateCloudFoldersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20023}
     */
    updateCloudFolders(zoneId, id, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject44'];
      // verify the required parameter 'zoneId' is set
      if (zoneId === undefined || zoneId === null) {
        throw new Error("Missing the required parameter 'zoneId' when calling updateCloudFolders");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateCloudFolders");
      }

      let pathParams = {
        'zoneId': zoneId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20023;
      return this.apiClient.callApi(
        '/api/zones/{zoneId}/folders/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCloudLogo operation.
     * @callback module:api/CloudsApi~updateCloudLogoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Logo For Cloud
     * Use this command to update the logo and dark logo images for a cloud. This endpoint expects multipart form data as the request format, not JSON. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {File} opts.logo Logo File png,jpg,svg
     * @param {File} opts.darkLogo Dark Logo File png,jpg,svg
     * @param {module:api/CloudsApi~updateCloudLogoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    updateCloudLogo(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateCloudLogo");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'logo': opts['logo'],
        'darkLogo': opts['darkLogo']
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/zones/{id}/update-logo', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCloudResourcePool operation.
     * @callback module:api/CloudsApi~updateCloudResourcePoolCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20024} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a Specified Resource Pool for Specified Cloud
     * Updates a resource pool for specified cloud. 
     * @param {Number} zoneId The ID of the cloud
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject46} opts.inlineObject46 
     * @param {module:api/CloudsApi~updateCloudResourcePoolCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20024}
     */
    updateCloudResourcePool(zoneId, id, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject46'];
      // verify the required parameter 'zoneId' is set
      if (zoneId === undefined || zoneId === null) {
        throw new Error("Missing the required parameter 'zoneId' when calling updateCloudResourcePool");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateCloudResourcePool");
      }

      let pathParams = {
        'zoneId': zoneId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20024;
      return this.apiClient.callApi(
        '/api/zones/{zoneId}/resource-pools/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCloudSecurityGroups operation.
     * @callback module:api/CloudsApi~updateCloudSecurityGroupsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets Security Groups for a Cloud
     * Sets security groups for acloud. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject49} opts.inlineObject49 
     * @param {module:api/CloudsApi~updateCloudSecurityGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateCloudSecurityGroups(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject49'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateCloudSecurityGroups");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/zones/{id}/security-groups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateClouds operation.
     * @callback module:api/CloudsApi~updateCloudsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a Cloud
     * Updates a cloud. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject42} opts.inlineObject42 
     * @param {module:api/CloudsApi~updateCloudsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateClouds(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject42'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateClouds");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/zones/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateWikiCloud operation.
     * @callback module:api/CloudsApi~updateWikiCloudCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Cloud Wiki Page
     * Updates a cloud Wiki page. 
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject274} opts.inlineObject274 
     * @param {module:api/CloudsApi~updateWikiCloudCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateWikiCloud(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject274'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateWikiCloud");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/zones/{id}/wiki', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
