/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DefaultError from '../model/DefaultError';
import InlineObject50 from '../model/InlineObject50';
import InlineObject51 from '../model/InlineObject51';
import InlineResponse20025 from '../model/InlineResponse20025';
import Model200Success from '../model/Model200Success';
import SuccessId from '../model/SuccessId';

/**
* ClusterLayouts service.
* @module api/ClusterLayoutsApi
* @version 6.2.1
*/
export default class ClusterLayoutsApi {

    /**
    * Constructs a new ClusterLayoutsApi. 
    * @alias module:api/ClusterLayoutsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addClusterLayoutClone operation.
     * @callback module:api/ClusterLayoutsApi~addClusterLayoutCloneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessId} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Clone a Cluster Layout
     * Use this command to clone a cluster layout.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Name of cluster layout. Defaults to Copy of <cloned layout name>
     * @param {String} opts.description Description of cluster layout. Defaults to cloned layout description
     * @param {String} opts.computeVersion Version of cluster layout. Defaults to cloned layout version
     * @param {module:api/ClusterLayoutsApi~addClusterLayoutCloneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessId}
     */
    addClusterLayoutClone(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addClusterLayoutClone");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'name': opts['name'],
        'description': opts['description'],
        'computeVersion': opts['computeVersion']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SuccessId;
      return this.apiClient.callApi(
        '/api/library/cluster-layouts/{id}/clone', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addClusterLayouts operation.
     * @callback module:api/ClusterLayoutsApi~addClusterLayoutsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessId} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Cluster Layout
     * Use this command to create a cluster layout.
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject50} opts.inlineObject50 
     * @param {module:api/ClusterLayoutsApi~addClusterLayoutsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessId}
     */
    addClusterLayouts(opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject50'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SuccessId;
      return this.apiClient.callApi(
        '/api/library/cluster-layouts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteClusterLayout operation.
     * @callback module:api/ClusterLayoutsApi~deleteClusterLayoutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Cluster Layout
     * Will delete a cluster layout
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/ClusterLayoutsApi~deleteClusterLayoutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    deleteClusterLayout(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteClusterLayout");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/library/cluster-layouts/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getClusterLayout operation.
     * @callback module:api/ClusterLayoutsApi~getClusterLayoutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20025} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Specific Cluster Layout
     * This endpoint retrieves a specific cluster layout.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/ClusterLayoutsApi~getClusterLayoutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20025}
     */
    getClusterLayout(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getClusterLayout");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20025;
      return this.apiClient.callApi(
        '/api/library/cluster-layouts/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listClusterLayouts operation.
     * @callback module:api/ClusterLayoutsApi~listClusterLayoutsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Cluster Layouts
     * This endpoint retrieves all cluster layouts.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.max Maximum number of records to return, -1 can be used to fetch all records (default to 25)
     * @param {Number} opts.offset Offset records, the number of records to skip, for paginating requests (default to 0)
     * @param {String} opts.sort Sort order, the name of the property to sort by (default to 'name')
     * @param {module:model/String} opts.direction Sort direction, use 'desc' to reverse sort (default to 'asc')
     * @param {String} opts.phrase Search phrase for partial matches on name or description
     * @param {module:model/String} opts.provisionType Filter by `Provision Type` code. Refer to `Provision Types` API for up to date listings. 
     * @param {String} opts.labels Filter by label(s), matches records that contain any of the specified labels
     * @param {String} opts.allLabels Filter by label(s), matches records that contain all of the specified labels
     * @param {module:api/ClusterLayoutsApi~listClusterLayoutsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    listClusterLayouts(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'max': opts['max'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'direction': opts['direction'],
        'phrase': opts['phrase'],
        'provisionType': opts['provisionType'],
        'labels': opts['labels'],
        'allLabels': opts['allLabels']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/library/cluster-layouts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateClusterLayout operation.
     * @callback module:api/ClusterLayoutsApi~updateClusterLayoutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessId} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Cluster Layout
     * Use this command to update an existing cluster layout.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject51} opts.inlineObject51 
     * @param {module:api/ClusterLayoutsApi~updateClusterLayoutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessId}
     */
    updateClusterLayout(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject51'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateClusterLayout");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SuccessId;
      return this.apiClient.callApi(
        '/api/library/cluster-layouts/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
