/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DefaultError from '../model/DefaultError';
import InlineObject125 from '../model/InlineObject125';
import InlineObject126 from '../model/InlineObject126';
import License from '../model/License';
import Model200Success from '../model/Model200Success';

/**
* License service.
* @module api/LicenseApi
* @version 6.2.1
*/
export default class LicenseApi {

    /**
    * Constructs a new LicenseApi. 
    * @alias module:api/LicenseApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getLicense operation.
     * @callback module:api/LicenseApi~getLicenseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/License} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get license
     * Get details about the license that is currently installed on the appliance. This returns the license details, but not the key itself. Your license key will never be returned and should always be kept secret.
     * @param {module:api/LicenseApi~getLicenseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/License}
     */
    getLicense(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = License;
      return this.apiClient.callApi(
        '/api/license', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the installLicense operation.
     * @callback module:api/LicenseApi~installLicenseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/License} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Install license key
     * Install a new license key. This will potentially change the enabled features and capabilities of your Morpheus appliance.
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject125} opts.inlineObject125 
     * @param {module:api/LicenseApi~installLicenseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/License}
     */
    installLicense(opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject125'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = License;
      return this.apiClient.callApi(
        '/api/license', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the testLicense operation.
     * @callback module:api/LicenseApi~testLicenseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/License} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Test license key
     * This endpoint can be used to decode a license to see if it is valid and inspect the license settings, such as who it belongs to and the enabled features. This is only a test, it does not install the key, or make any changes to your appliance.
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject126} opts.inlineObject126 
     * @param {module:api/LicenseApi~testLicenseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/License}
     */
    testLicense(opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject126'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = License;
      return this.apiClient.callApi(
        '/api/license/test', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uninstallLicense operation.
     * @callback module:api/LicenseApi~uninstallLicenseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Uninstall license key
     * Uninstall your appliance license, leaving the appliance with no license installed. This will change the enabled features and capabilities of your Morpheus appliance.
     * @param {module:api/LicenseApi~uninstallLicenseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    uninstallLicense(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/license', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
