/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DefaultError from '../model/DefaultError';
import InlineObject230 from '../model/InlineObject230';
import InlineObject231 from '../model/InlineObject231';
import InlineResponse200143 from '../model/InlineResponse200143';
import InlineResponse200144 from '../model/InlineResponse200144';
import Model200Success from '../model/Model200Success';

/**
* SSLCertificates service.
* @module api/SSLCertificatesApi
* @version 6.2.1
*/
export default class SSLCertificatesApi {

    /**
    * Constructs a new SSLCertificatesApi. 
    * @alias module:api/SSLCertificatesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addCertificate operation.
     * @callback module:api/SSLCertificatesApi~addCertificateCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Certificate
     * Create a Certificate
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject230} opts.inlineObject230 
     * @param {module:api/SSLCertificatesApi~addCertificateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    addCertificate(opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject230'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/certificates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCertificate operation.
     * @callback module:api/SSLCertificatesApi~deleteCertificateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Certificate
     * Will delete a certificate from the system and make it no longer usable.  If a certificate is actively in use, a delete will fail.  
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/SSLCertificatesApi~deleteCertificateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    deleteCertificate(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteCertificate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/certificates/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCertificate operation.
     * @callback module:api/SSLCertificatesApi~getCertificateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200144} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Specific Certificate
     * This endpoint retrieves a specific certificate.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/SSLCertificatesApi~getCertificateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200144}
     */
    getCertificate(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCertificate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200144;
      return this.apiClient.callApi(
        '/api/certificates/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listCertificates operation.
     * @callback module:api/SSLCertificatesApi~listCertificatesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200143} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All SSL Certificates
     * This endpoint retrieves all SSL certificates associated with the account.
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter by name, wildcard may be specified as %, eg. example-%
     * @param {module:api/SSLCertificatesApi~listCertificatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200143}
     */
    listCertificates(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200143;
      return this.apiClient.callApi(
        '/api/certificates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCertificate operation.
     * @callback module:api/SSLCertificatesApi~updateCertificateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200144} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Certificate
     * Update a Certificate.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject231} opts.inlineObject231 
     * @param {module:api/SSLCertificatesApi~updateCertificateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200144}
     */
    updateCertificate(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject231'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateCertificate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse200144;
      return this.apiClient.callApi(
        '/api/certificates/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
