/**
 * Morpheus API
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DefaultError from '../model/DefaultError';
import Error from '../model/Error';
import InlineObject238 from '../model/InlineObject238';
import InlineObject239 from '../model/InlineObject239';
import InlineObject240 from '../model/InlineObject240';
import InlineObject241 from '../model/InlineObject241';
import InlineObject242 from '../model/InlineObject242';
import InlineObject243 from '../model/InlineObject243';
import InlineResponse200150 from '../model/InlineResponse200150';
import InlineResponse200151 from '../model/InlineResponse200151';
import InlineResponse200152 from '../model/InlineResponse200152';
import InlineResponse200153 from '../model/InlineResponse200153';
import Model200Success from '../model/Model200Success';
import TenantsAvailableRoles from '../model/TenantsAvailableRoles';

/**
* Tenants service.
* @module api/TenantsApi
* @version 6.2.1
*/
export default class TenantsApi {

    /**
    * Constructs a new TenantsApi. 
    * @alias module:api/TenantsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addTenant operation.
     * @callback module:api/TenantsApi~addTenantCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Tenant
     * Create a new tenant. This new account will be a sub-tenant with the master tenant as its parent.
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject238} opts.inlineObject238 
     * @param {module:api/TenantsApi~addTenantCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    addTenant(opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject238'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/accounts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addUserTenant operation.
     * @callback module:api/TenantsApi~addUserTenantCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a User For a Tenant
     * Create a User For a Tenant.
     * @param {Number} accountId The ID of the subtenant account
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject243} opts.inlineObject243 
     * @param {module:api/TenantsApi~addUserTenantCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    addUserTenant(accountId, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject243'];
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling addUserTenant");
      }

      let pathParams = {
        'accountId': accountId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/accounts/{accountId}/users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createTenantSubtenantGroup operation.
     * @callback module:api/TenantsApi~createTenantSubtenantGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200152} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Group for Subtenant
     * Create a Group for Subtenant.
     * @param {Number} accountId The ID of the subtenant account
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject240} opts.inlineObject240 
     * @param {module:api/TenantsApi~createTenantSubtenantGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200152}
     */
    createTenantSubtenantGroup(accountId, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject240'];
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling createTenantSubtenantGroup");
      }

      let pathParams = {
        'accountId': accountId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse200152;
      return this.apiClient.callApi(
        '/api/accounts/{accountId}/groups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTenant operation.
     * @callback module:api/TenantsApi~getTenantCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200150} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get tenant
     * Get details about a tenant
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/TenantsApi~getTenantCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200150}
     */
    getTenant(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getTenant");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200150;
      return this.apiClient.callApi(
        '/api/accounts/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTenantSubtenantGroup operation.
     * @callback module:api/TenantsApi~getTenantSubtenantGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200153} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Specific Group for Subtenant
     * This endpoint retrieves a specific group.
     * @param {Number} accountId The ID of the subtenant account
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/TenantsApi~getTenantSubtenantGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200153}
     */
    getTenantSubtenantGroup(accountId, id, callback) {
      let postBody = null;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling getTenantSubtenantGroup");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getTenantSubtenantGroup");
      }

      let pathParams = {
        'accountId': accountId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200153;
      return this.apiClient.callApi(
        '/api/accounts/{accountId}/groups/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTenantSubtenantGroups operation.
     * @callback module:api/TenantsApi~listTenantSubtenantGroupsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Subtenant Groups
     * Groups belonging to a subtenant can be managed by the master account.  This endpoint retrieves all groups and a list of zones associated with the group by id. 
     * @param {Number} accountId The ID of the subtenant account
     * @param {Object} opts Optional parameters
     * @param {String} opts.phrase Search phrase for partial matches on name or description
     * @param {String} opts.name Filter by name, wildcard may be specified as %, eg. example-%
     * @param {Date} opts.lastUpdated Date filter, restricts query to only load resources updated more recently than the date specified (ISO 8601)
     * @param {module:api/TenantsApi~listTenantSubtenantGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    listTenantSubtenantGroups(accountId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling listTenantSubtenantGroups");
      }

      let pathParams = {
        'accountId': accountId
      };
      let queryParams = {
        'phrase': opts['phrase'],
        'name': opts['name'],
        'lastUpdated': opts['lastUpdated']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/accounts/{accountId}/groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTenants operation.
     * @callback module:api/TenantsApi~listTenantsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List All Tenants
     * Get a list of tenants. A tenant is also referred to as an account.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.max Maximum number of records to return, -1 can be used to fetch all records (default to 25)
     * @param {Number} opts.offset Offset records, the number of records to skip, for paginating requests (default to 0)
     * @param {String} opts.sort Sort order, the name of the property to sort by (default to 'name')
     * @param {module:model/String} opts.direction Sort direction, use 'desc' to reverse sort (default to 'asc')
     * @param {String} opts.phrase Search phrase for partial matches on name or description
     * @param {String} opts.name Filter by name, wildcard may be specified as %, eg. example-%
     * @param {Date} opts.lastUpdated Date filter, restricts query to only load resources updated more recently than the date specified (ISO 8601)
     * @param {module:api/TenantsApi~listTenantsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    listTenants(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'max': opts['max'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'direction': opts['direction'],
        'phrase': opts['phrase'],
        'name': opts['name'],
        'lastUpdated': opts['lastUpdated']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/accounts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTenantsAvailableRoles operation.
     * @callback module:api/TenantsApi~listTenantsAvailableRolesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TenantsAvailableRoles} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List available roles for a tenant
     * Get a list of available roles that can be assigned as the default base role for a sub tenant account.
     * @param {module:api/TenantsApi~listTenantsAvailableRolesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TenantsAvailableRoles}
     */
    listTenantsAvailableRoles(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TenantsAvailableRoles;
      return this.apiClient.callApi(
        '/api/accounts/available-roles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeTenant operation.
     * @callback module:api/TenantsApi~removeTenantCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Specific Tenant
     * Delete an existing tenant. This action is not reversible and will result in the removal of all data pertaining to this tenant as well as potentially any provisioned assets depending on the value of `removeResources`.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.removeResources Remove Resources. This will delete all the managed resources in the tenant. (default to false)
     * @param {module:api/TenantsApi~removeTenantCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    removeTenant(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeTenant");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'removeResources': opts['removeResources']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/accounts/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeTenantSubtenantGroup operation.
     * @callback module:api/TenantsApi~removeTenantSubtenantGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Group for Subtenant
     * If a group has zones or servers still tied to it, a delete action will fail.
     * @param {Number} accountId The ID of the subtenant account
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {module:api/TenantsApi~removeTenantSubtenantGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    removeTenantSubtenantGroup(accountId, id, callback) {
      let postBody = null;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling removeTenantSubtenantGroup");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeTenantSubtenantGroup");
      }

      let pathParams = {
        'accountId': accountId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/accounts/{accountId}/groups/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTenant operation.
     * @callback module:api/TenantsApi~updateTenantCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200151} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update tenant
     * Update an existing tenant.
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject239} opts.inlineObject239 
     * @param {module:api/TenantsApi~updateTenantCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200151}
     */
    updateTenant(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject239'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateTenant");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse200151;
      return this.apiClient.callApi(
        '/api/accounts/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTenantSubtenantGroup operation.
     * @callback module:api/TenantsApi~updateTenantSubtenantGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200152} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updating a Group for Subtenant
     * Updating a Group for Subtenant.
     * @param {Number} accountId The ID of the subtenant account
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject241} opts.inlineObject241 
     * @param {module:api/TenantsApi~updateTenantSubtenantGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200152}
     */
    updateTenantSubtenantGroup(accountId, id, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject241'];
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling updateTenantSubtenantGroup");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateTenantSubtenantGroup");
      }

      let pathParams = {
        'accountId': accountId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse200152;
      return this.apiClient.callApi(
        '/api/accounts/{accountId}/groups/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTenantSubtenantGroupZones operation.
     * @callback module:api/TenantsApi~updateTenantSubtenantGroupZonesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updating Group Zones for Subtenant
     * This will update the zones that are assigned to the group. Any zones that are not passed in the zones parameter will be removed from the group.
     * @param {Number} accountId The ID of the subtenant account
     * @param {Number} id Morpheus ID of the Object being referenced
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject242} opts.inlineObject242 
     * @param {module:api/TenantsApi~updateTenantSubtenantGroupZonesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Success}
     */
    updateTenantSubtenantGroupZones(accountId, id, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject242'];
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling updateTenantSubtenantGroupZones");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateTenantSubtenantGroupZones");
      }

      let pathParams = {
        'accountId': accountId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Model200Success;
      return this.apiClient.callApi(
        '/api/accounts/{accountId}/groups/{id}/update-zones', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
