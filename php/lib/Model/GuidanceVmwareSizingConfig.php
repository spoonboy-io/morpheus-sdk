<?php
/**
 * GuidanceVmwareSizingConfig
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * GuidanceVmwareSizingConfig Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class GuidanceVmwareSizingConfig implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'guidanceVmwareSizing_config';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'exists' => 'bool',
        'object_id' => 'int',
        'cpu_total_time_count' => 'float',
        'cpu_total_time_min' => 'float',
        'cpu_total_time_max' => 'float',
        'cpu_total_time_avg' => 'float',
        'cpu_total_time_sum' => 'float',
        'cpu_idle_time_count' => 'float',
        'cpu_idle_time_min' => 'float',
        'cpu_idle_time_max' => 'float',
        'cpu_idle_time_avg' => 'float',
        'cpu_idle_time_sum' => 'float',
        'cpu_usage_count' => 'float',
        'cpu_usage_min' => 'float',
        'cpu_usage_max' => 'float',
        'cpu_usage_avg' => 'float',
        'cpu_usage_sum' => 'float',
        'max_memory_count' => 'float',
        'max_memory_min' => 'float',
        'max_memory_max' => 'float',
        'max_memory_avg' => 'float',
        'max_memory_sum' => 'float',
        'cpu_user_time_count' => 'float',
        'cpu_user_time_min' => 'float',
        'cpu_user_time_max' => 'float',
        'cpu_user_time_avg' => 'float',
        'cpu_user_time_sum' => 'float',
        'cpu_system_time_count' => 'float',
        'cpu_system_time_min' => 'float',
        'cpu_system_time_max' => 'float',
        'cpu_system_time_avg' => 'float',
        'cpu_system_time_sum' => 'float',
        'used_memory_count' => 'float',
        'used_memory_min' => 'float',
        'used_memory_max' => 'float',
        'used_memory_avg' => 'float',
        'used_memory_sum' => 'float',
        'free_memory_count' => 'float',
        'free_memory_min' => 'float',
        'free_memory_max' => 'float',
        'free_memory_avg' => 'float',
        'free_memory_sum' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'exists' => null,
        'object_id' => 'int64',
        'cpu_total_time_count' => null,
        'cpu_total_time_min' => null,
        'cpu_total_time_max' => null,
        'cpu_total_time_avg' => null,
        'cpu_total_time_sum' => null,
        'cpu_idle_time_count' => null,
        'cpu_idle_time_min' => null,
        'cpu_idle_time_max' => null,
        'cpu_idle_time_avg' => null,
        'cpu_idle_time_sum' => null,
        'cpu_usage_count' => null,
        'cpu_usage_min' => null,
        'cpu_usage_max' => null,
        'cpu_usage_avg' => null,
        'cpu_usage_sum' => null,
        'max_memory_count' => null,
        'max_memory_min' => null,
        'max_memory_max' => null,
        'max_memory_avg' => null,
        'max_memory_sum' => null,
        'cpu_user_time_count' => null,
        'cpu_user_time_min' => null,
        'cpu_user_time_max' => null,
        'cpu_user_time_avg' => null,
        'cpu_user_time_sum' => null,
        'cpu_system_time_count' => null,
        'cpu_system_time_min' => null,
        'cpu_system_time_max' => null,
        'cpu_system_time_avg' => null,
        'cpu_system_time_sum' => null,
        'used_memory_count' => null,
        'used_memory_min' => null,
        'used_memory_max' => null,
        'used_memory_avg' => null,
        'used_memory_sum' => null,
        'free_memory_count' => null,
        'free_memory_min' => null,
        'free_memory_max' => null,
        'free_memory_avg' => null,
        'free_memory_sum' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'exists' => 'exists',
        'object_id' => 'objectId',
        'cpu_total_time_count' => 'cpuTotalTimeCount',
        'cpu_total_time_min' => 'cpuTotalTimeMin',
        'cpu_total_time_max' => 'cpuTotalTimeMax',
        'cpu_total_time_avg' => 'cpuTotalTimeAvg',
        'cpu_total_time_sum' => 'cpuTotalTimeSum',
        'cpu_idle_time_count' => 'cpuIdleTimeCount',
        'cpu_idle_time_min' => 'cpuIdleTimeMin',
        'cpu_idle_time_max' => 'cpuIdleTimeMax',
        'cpu_idle_time_avg' => 'cpuIdleTimeAvg',
        'cpu_idle_time_sum' => 'cpuIdleTimeSum',
        'cpu_usage_count' => 'cpuUsageCount',
        'cpu_usage_min' => 'cpuUsageMin',
        'cpu_usage_max' => 'cpuUsageMax',
        'cpu_usage_avg' => 'cpuUsageAvg',
        'cpu_usage_sum' => 'cpuUsageSum',
        'max_memory_count' => 'maxMemoryCount',
        'max_memory_min' => 'maxMemoryMin',
        'max_memory_max' => 'maxMemoryMax',
        'max_memory_avg' => 'maxMemoryAvg',
        'max_memory_sum' => 'maxMemorySum',
        'cpu_user_time_count' => 'cpuUserTimeCount',
        'cpu_user_time_min' => 'cpuUserTimeMin',
        'cpu_user_time_max' => 'cpuUserTimeMax',
        'cpu_user_time_avg' => 'cpuUserTimeAvg',
        'cpu_user_time_sum' => 'cpuUserTimeSum',
        'cpu_system_time_count' => 'cpuSystemTimeCount',
        'cpu_system_time_min' => 'cpuSystemTimeMin',
        'cpu_system_time_max' => 'cpuSystemTimeMax',
        'cpu_system_time_avg' => 'cpuSystemTimeAvg',
        'cpu_system_time_sum' => 'cpuSystemTimeSum',
        'used_memory_count' => 'usedMemoryCount',
        'used_memory_min' => 'usedMemoryMin',
        'used_memory_max' => 'usedMemoryMax',
        'used_memory_avg' => 'usedMemoryAvg',
        'used_memory_sum' => 'usedMemorySum',
        'free_memory_count' => 'freeMemoryCount',
        'free_memory_min' => 'freeMemoryMin',
        'free_memory_max' => 'freeMemoryMax',
        'free_memory_avg' => 'freeMemoryAvg',
        'free_memory_sum' => 'freeMemorySum'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'exists' => 'setExists',
        'object_id' => 'setObjectId',
        'cpu_total_time_count' => 'setCpuTotalTimeCount',
        'cpu_total_time_min' => 'setCpuTotalTimeMin',
        'cpu_total_time_max' => 'setCpuTotalTimeMax',
        'cpu_total_time_avg' => 'setCpuTotalTimeAvg',
        'cpu_total_time_sum' => 'setCpuTotalTimeSum',
        'cpu_idle_time_count' => 'setCpuIdleTimeCount',
        'cpu_idle_time_min' => 'setCpuIdleTimeMin',
        'cpu_idle_time_max' => 'setCpuIdleTimeMax',
        'cpu_idle_time_avg' => 'setCpuIdleTimeAvg',
        'cpu_idle_time_sum' => 'setCpuIdleTimeSum',
        'cpu_usage_count' => 'setCpuUsageCount',
        'cpu_usage_min' => 'setCpuUsageMin',
        'cpu_usage_max' => 'setCpuUsageMax',
        'cpu_usage_avg' => 'setCpuUsageAvg',
        'cpu_usage_sum' => 'setCpuUsageSum',
        'max_memory_count' => 'setMaxMemoryCount',
        'max_memory_min' => 'setMaxMemoryMin',
        'max_memory_max' => 'setMaxMemoryMax',
        'max_memory_avg' => 'setMaxMemoryAvg',
        'max_memory_sum' => 'setMaxMemorySum',
        'cpu_user_time_count' => 'setCpuUserTimeCount',
        'cpu_user_time_min' => 'setCpuUserTimeMin',
        'cpu_user_time_max' => 'setCpuUserTimeMax',
        'cpu_user_time_avg' => 'setCpuUserTimeAvg',
        'cpu_user_time_sum' => 'setCpuUserTimeSum',
        'cpu_system_time_count' => 'setCpuSystemTimeCount',
        'cpu_system_time_min' => 'setCpuSystemTimeMin',
        'cpu_system_time_max' => 'setCpuSystemTimeMax',
        'cpu_system_time_avg' => 'setCpuSystemTimeAvg',
        'cpu_system_time_sum' => 'setCpuSystemTimeSum',
        'used_memory_count' => 'setUsedMemoryCount',
        'used_memory_min' => 'setUsedMemoryMin',
        'used_memory_max' => 'setUsedMemoryMax',
        'used_memory_avg' => 'setUsedMemoryAvg',
        'used_memory_sum' => 'setUsedMemorySum',
        'free_memory_count' => 'setFreeMemoryCount',
        'free_memory_min' => 'setFreeMemoryMin',
        'free_memory_max' => 'setFreeMemoryMax',
        'free_memory_avg' => 'setFreeMemoryAvg',
        'free_memory_sum' => 'setFreeMemorySum'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'exists' => 'getExists',
        'object_id' => 'getObjectId',
        'cpu_total_time_count' => 'getCpuTotalTimeCount',
        'cpu_total_time_min' => 'getCpuTotalTimeMin',
        'cpu_total_time_max' => 'getCpuTotalTimeMax',
        'cpu_total_time_avg' => 'getCpuTotalTimeAvg',
        'cpu_total_time_sum' => 'getCpuTotalTimeSum',
        'cpu_idle_time_count' => 'getCpuIdleTimeCount',
        'cpu_idle_time_min' => 'getCpuIdleTimeMin',
        'cpu_idle_time_max' => 'getCpuIdleTimeMax',
        'cpu_idle_time_avg' => 'getCpuIdleTimeAvg',
        'cpu_idle_time_sum' => 'getCpuIdleTimeSum',
        'cpu_usage_count' => 'getCpuUsageCount',
        'cpu_usage_min' => 'getCpuUsageMin',
        'cpu_usage_max' => 'getCpuUsageMax',
        'cpu_usage_avg' => 'getCpuUsageAvg',
        'cpu_usage_sum' => 'getCpuUsageSum',
        'max_memory_count' => 'getMaxMemoryCount',
        'max_memory_min' => 'getMaxMemoryMin',
        'max_memory_max' => 'getMaxMemoryMax',
        'max_memory_avg' => 'getMaxMemoryAvg',
        'max_memory_sum' => 'getMaxMemorySum',
        'cpu_user_time_count' => 'getCpuUserTimeCount',
        'cpu_user_time_min' => 'getCpuUserTimeMin',
        'cpu_user_time_max' => 'getCpuUserTimeMax',
        'cpu_user_time_avg' => 'getCpuUserTimeAvg',
        'cpu_user_time_sum' => 'getCpuUserTimeSum',
        'cpu_system_time_count' => 'getCpuSystemTimeCount',
        'cpu_system_time_min' => 'getCpuSystemTimeMin',
        'cpu_system_time_max' => 'getCpuSystemTimeMax',
        'cpu_system_time_avg' => 'getCpuSystemTimeAvg',
        'cpu_system_time_sum' => 'getCpuSystemTimeSum',
        'used_memory_count' => 'getUsedMemoryCount',
        'used_memory_min' => 'getUsedMemoryMin',
        'used_memory_max' => 'getUsedMemoryMax',
        'used_memory_avg' => 'getUsedMemoryAvg',
        'used_memory_sum' => 'getUsedMemorySum',
        'free_memory_count' => 'getFreeMemoryCount',
        'free_memory_min' => 'getFreeMemoryMin',
        'free_memory_max' => 'getFreeMemoryMax',
        'free_memory_avg' => 'getFreeMemoryAvg',
        'free_memory_sum' => 'getFreeMemorySum'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['exists'] = $data['exists'] ?? null;
        $this->container['object_id'] = $data['object_id'] ?? null;
        $this->container['cpu_total_time_count'] = $data['cpu_total_time_count'] ?? null;
        $this->container['cpu_total_time_min'] = $data['cpu_total_time_min'] ?? null;
        $this->container['cpu_total_time_max'] = $data['cpu_total_time_max'] ?? null;
        $this->container['cpu_total_time_avg'] = $data['cpu_total_time_avg'] ?? null;
        $this->container['cpu_total_time_sum'] = $data['cpu_total_time_sum'] ?? null;
        $this->container['cpu_idle_time_count'] = $data['cpu_idle_time_count'] ?? null;
        $this->container['cpu_idle_time_min'] = $data['cpu_idle_time_min'] ?? null;
        $this->container['cpu_idle_time_max'] = $data['cpu_idle_time_max'] ?? null;
        $this->container['cpu_idle_time_avg'] = $data['cpu_idle_time_avg'] ?? null;
        $this->container['cpu_idle_time_sum'] = $data['cpu_idle_time_sum'] ?? null;
        $this->container['cpu_usage_count'] = $data['cpu_usage_count'] ?? null;
        $this->container['cpu_usage_min'] = $data['cpu_usage_min'] ?? null;
        $this->container['cpu_usage_max'] = $data['cpu_usage_max'] ?? null;
        $this->container['cpu_usage_avg'] = $data['cpu_usage_avg'] ?? null;
        $this->container['cpu_usage_sum'] = $data['cpu_usage_sum'] ?? null;
        $this->container['max_memory_count'] = $data['max_memory_count'] ?? null;
        $this->container['max_memory_min'] = $data['max_memory_min'] ?? null;
        $this->container['max_memory_max'] = $data['max_memory_max'] ?? null;
        $this->container['max_memory_avg'] = $data['max_memory_avg'] ?? null;
        $this->container['max_memory_sum'] = $data['max_memory_sum'] ?? null;
        $this->container['cpu_user_time_count'] = $data['cpu_user_time_count'] ?? null;
        $this->container['cpu_user_time_min'] = $data['cpu_user_time_min'] ?? null;
        $this->container['cpu_user_time_max'] = $data['cpu_user_time_max'] ?? null;
        $this->container['cpu_user_time_avg'] = $data['cpu_user_time_avg'] ?? null;
        $this->container['cpu_user_time_sum'] = $data['cpu_user_time_sum'] ?? null;
        $this->container['cpu_system_time_count'] = $data['cpu_system_time_count'] ?? null;
        $this->container['cpu_system_time_min'] = $data['cpu_system_time_min'] ?? null;
        $this->container['cpu_system_time_max'] = $data['cpu_system_time_max'] ?? null;
        $this->container['cpu_system_time_avg'] = $data['cpu_system_time_avg'] ?? null;
        $this->container['cpu_system_time_sum'] = $data['cpu_system_time_sum'] ?? null;
        $this->container['used_memory_count'] = $data['used_memory_count'] ?? null;
        $this->container['used_memory_min'] = $data['used_memory_min'] ?? null;
        $this->container['used_memory_max'] = $data['used_memory_max'] ?? null;
        $this->container['used_memory_avg'] = $data['used_memory_avg'] ?? null;
        $this->container['used_memory_sum'] = $data['used_memory_sum'] ?? null;
        $this->container['free_memory_count'] = $data['free_memory_count'] ?? null;
        $this->container['free_memory_min'] = $data['free_memory_min'] ?? null;
        $this->container['free_memory_max'] = $data['free_memory_max'] ?? null;
        $this->container['free_memory_avg'] = $data['free_memory_avg'] ?? null;
        $this->container['free_memory_sum'] = $data['free_memory_sum'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets exists
     *
     * @return bool|null
     */
    public function getExists()
    {
        return $this->container['exists'];
    }

    /**
     * Sets exists
     *
     * @param bool|null $exists exists
     *
     * @return self
     */
    public function setExists($exists)
    {
        $this->container['exists'] = $exists;

        return $this;
    }

    /**
     * Gets object_id
     *
     * @return int|null
     */
    public function getObjectId()
    {
        return $this->container['object_id'];
    }

    /**
     * Sets object_id
     *
     * @param int|null $object_id object_id
     *
     * @return self
     */
    public function setObjectId($object_id)
    {
        $this->container['object_id'] = $object_id;

        return $this;
    }

    /**
     * Gets cpu_total_time_count
     *
     * @return float|null
     */
    public function getCpuTotalTimeCount()
    {
        return $this->container['cpu_total_time_count'];
    }

    /**
     * Sets cpu_total_time_count
     *
     * @param float|null $cpu_total_time_count cpu_total_time_count
     *
     * @return self
     */
    public function setCpuTotalTimeCount($cpu_total_time_count)
    {
        $this->container['cpu_total_time_count'] = $cpu_total_time_count;

        return $this;
    }

    /**
     * Gets cpu_total_time_min
     *
     * @return float|null
     */
    public function getCpuTotalTimeMin()
    {
        return $this->container['cpu_total_time_min'];
    }

    /**
     * Sets cpu_total_time_min
     *
     * @param float|null $cpu_total_time_min cpu_total_time_min
     *
     * @return self
     */
    public function setCpuTotalTimeMin($cpu_total_time_min)
    {
        $this->container['cpu_total_time_min'] = $cpu_total_time_min;

        return $this;
    }

    /**
     * Gets cpu_total_time_max
     *
     * @return float|null
     */
    public function getCpuTotalTimeMax()
    {
        return $this->container['cpu_total_time_max'];
    }

    /**
     * Sets cpu_total_time_max
     *
     * @param float|null $cpu_total_time_max cpu_total_time_max
     *
     * @return self
     */
    public function setCpuTotalTimeMax($cpu_total_time_max)
    {
        $this->container['cpu_total_time_max'] = $cpu_total_time_max;

        return $this;
    }

    /**
     * Gets cpu_total_time_avg
     *
     * @return float|null
     */
    public function getCpuTotalTimeAvg()
    {
        return $this->container['cpu_total_time_avg'];
    }

    /**
     * Sets cpu_total_time_avg
     *
     * @param float|null $cpu_total_time_avg cpu_total_time_avg
     *
     * @return self
     */
    public function setCpuTotalTimeAvg($cpu_total_time_avg)
    {
        $this->container['cpu_total_time_avg'] = $cpu_total_time_avg;

        return $this;
    }

    /**
     * Gets cpu_total_time_sum
     *
     * @return float|null
     */
    public function getCpuTotalTimeSum()
    {
        return $this->container['cpu_total_time_sum'];
    }

    /**
     * Sets cpu_total_time_sum
     *
     * @param float|null $cpu_total_time_sum cpu_total_time_sum
     *
     * @return self
     */
    public function setCpuTotalTimeSum($cpu_total_time_sum)
    {
        $this->container['cpu_total_time_sum'] = $cpu_total_time_sum;

        return $this;
    }

    /**
     * Gets cpu_idle_time_count
     *
     * @return float|null
     */
    public function getCpuIdleTimeCount()
    {
        return $this->container['cpu_idle_time_count'];
    }

    /**
     * Sets cpu_idle_time_count
     *
     * @param float|null $cpu_idle_time_count cpu_idle_time_count
     *
     * @return self
     */
    public function setCpuIdleTimeCount($cpu_idle_time_count)
    {
        $this->container['cpu_idle_time_count'] = $cpu_idle_time_count;

        return $this;
    }

    /**
     * Gets cpu_idle_time_min
     *
     * @return float|null
     */
    public function getCpuIdleTimeMin()
    {
        return $this->container['cpu_idle_time_min'];
    }

    /**
     * Sets cpu_idle_time_min
     *
     * @param float|null $cpu_idle_time_min cpu_idle_time_min
     *
     * @return self
     */
    public function setCpuIdleTimeMin($cpu_idle_time_min)
    {
        $this->container['cpu_idle_time_min'] = $cpu_idle_time_min;

        return $this;
    }

    /**
     * Gets cpu_idle_time_max
     *
     * @return float|null
     */
    public function getCpuIdleTimeMax()
    {
        return $this->container['cpu_idle_time_max'];
    }

    /**
     * Sets cpu_idle_time_max
     *
     * @param float|null $cpu_idle_time_max cpu_idle_time_max
     *
     * @return self
     */
    public function setCpuIdleTimeMax($cpu_idle_time_max)
    {
        $this->container['cpu_idle_time_max'] = $cpu_idle_time_max;

        return $this;
    }

    /**
     * Gets cpu_idle_time_avg
     *
     * @return float|null
     */
    public function getCpuIdleTimeAvg()
    {
        return $this->container['cpu_idle_time_avg'];
    }

    /**
     * Sets cpu_idle_time_avg
     *
     * @param float|null $cpu_idle_time_avg cpu_idle_time_avg
     *
     * @return self
     */
    public function setCpuIdleTimeAvg($cpu_idle_time_avg)
    {
        $this->container['cpu_idle_time_avg'] = $cpu_idle_time_avg;

        return $this;
    }

    /**
     * Gets cpu_idle_time_sum
     *
     * @return float|null
     */
    public function getCpuIdleTimeSum()
    {
        return $this->container['cpu_idle_time_sum'];
    }

    /**
     * Sets cpu_idle_time_sum
     *
     * @param float|null $cpu_idle_time_sum cpu_idle_time_sum
     *
     * @return self
     */
    public function setCpuIdleTimeSum($cpu_idle_time_sum)
    {
        $this->container['cpu_idle_time_sum'] = $cpu_idle_time_sum;

        return $this;
    }

    /**
     * Gets cpu_usage_count
     *
     * @return float|null
     */
    public function getCpuUsageCount()
    {
        return $this->container['cpu_usage_count'];
    }

    /**
     * Sets cpu_usage_count
     *
     * @param float|null $cpu_usage_count cpu_usage_count
     *
     * @return self
     */
    public function setCpuUsageCount($cpu_usage_count)
    {
        $this->container['cpu_usage_count'] = $cpu_usage_count;

        return $this;
    }

    /**
     * Gets cpu_usage_min
     *
     * @return float|null
     */
    public function getCpuUsageMin()
    {
        return $this->container['cpu_usage_min'];
    }

    /**
     * Sets cpu_usage_min
     *
     * @param float|null $cpu_usage_min cpu_usage_min
     *
     * @return self
     */
    public function setCpuUsageMin($cpu_usage_min)
    {
        $this->container['cpu_usage_min'] = $cpu_usage_min;

        return $this;
    }

    /**
     * Gets cpu_usage_max
     *
     * @return float|null
     */
    public function getCpuUsageMax()
    {
        return $this->container['cpu_usage_max'];
    }

    /**
     * Sets cpu_usage_max
     *
     * @param float|null $cpu_usage_max cpu_usage_max
     *
     * @return self
     */
    public function setCpuUsageMax($cpu_usage_max)
    {
        $this->container['cpu_usage_max'] = $cpu_usage_max;

        return $this;
    }

    /**
     * Gets cpu_usage_avg
     *
     * @return float|null
     */
    public function getCpuUsageAvg()
    {
        return $this->container['cpu_usage_avg'];
    }

    /**
     * Sets cpu_usage_avg
     *
     * @param float|null $cpu_usage_avg cpu_usage_avg
     *
     * @return self
     */
    public function setCpuUsageAvg($cpu_usage_avg)
    {
        $this->container['cpu_usage_avg'] = $cpu_usage_avg;

        return $this;
    }

    /**
     * Gets cpu_usage_sum
     *
     * @return float|null
     */
    public function getCpuUsageSum()
    {
        return $this->container['cpu_usage_sum'];
    }

    /**
     * Sets cpu_usage_sum
     *
     * @param float|null $cpu_usage_sum cpu_usage_sum
     *
     * @return self
     */
    public function setCpuUsageSum($cpu_usage_sum)
    {
        $this->container['cpu_usage_sum'] = $cpu_usage_sum;

        return $this;
    }

    /**
     * Gets max_memory_count
     *
     * @return float|null
     */
    public function getMaxMemoryCount()
    {
        return $this->container['max_memory_count'];
    }

    /**
     * Sets max_memory_count
     *
     * @param float|null $max_memory_count max_memory_count
     *
     * @return self
     */
    public function setMaxMemoryCount($max_memory_count)
    {
        $this->container['max_memory_count'] = $max_memory_count;

        return $this;
    }

    /**
     * Gets max_memory_min
     *
     * @return float|null
     */
    public function getMaxMemoryMin()
    {
        return $this->container['max_memory_min'];
    }

    /**
     * Sets max_memory_min
     *
     * @param float|null $max_memory_min max_memory_min
     *
     * @return self
     */
    public function setMaxMemoryMin($max_memory_min)
    {
        $this->container['max_memory_min'] = $max_memory_min;

        return $this;
    }

    /**
     * Gets max_memory_max
     *
     * @return float|null
     */
    public function getMaxMemoryMax()
    {
        return $this->container['max_memory_max'];
    }

    /**
     * Sets max_memory_max
     *
     * @param float|null $max_memory_max max_memory_max
     *
     * @return self
     */
    public function setMaxMemoryMax($max_memory_max)
    {
        $this->container['max_memory_max'] = $max_memory_max;

        return $this;
    }

    /**
     * Gets max_memory_avg
     *
     * @return float|null
     */
    public function getMaxMemoryAvg()
    {
        return $this->container['max_memory_avg'];
    }

    /**
     * Sets max_memory_avg
     *
     * @param float|null $max_memory_avg max_memory_avg
     *
     * @return self
     */
    public function setMaxMemoryAvg($max_memory_avg)
    {
        $this->container['max_memory_avg'] = $max_memory_avg;

        return $this;
    }

    /**
     * Gets max_memory_sum
     *
     * @return float|null
     */
    public function getMaxMemorySum()
    {
        return $this->container['max_memory_sum'];
    }

    /**
     * Sets max_memory_sum
     *
     * @param float|null $max_memory_sum max_memory_sum
     *
     * @return self
     */
    public function setMaxMemorySum($max_memory_sum)
    {
        $this->container['max_memory_sum'] = $max_memory_sum;

        return $this;
    }

    /**
     * Gets cpu_user_time_count
     *
     * @return float|null
     */
    public function getCpuUserTimeCount()
    {
        return $this->container['cpu_user_time_count'];
    }

    /**
     * Sets cpu_user_time_count
     *
     * @param float|null $cpu_user_time_count cpu_user_time_count
     *
     * @return self
     */
    public function setCpuUserTimeCount($cpu_user_time_count)
    {
        $this->container['cpu_user_time_count'] = $cpu_user_time_count;

        return $this;
    }

    /**
     * Gets cpu_user_time_min
     *
     * @return float|null
     */
    public function getCpuUserTimeMin()
    {
        return $this->container['cpu_user_time_min'];
    }

    /**
     * Sets cpu_user_time_min
     *
     * @param float|null $cpu_user_time_min cpu_user_time_min
     *
     * @return self
     */
    public function setCpuUserTimeMin($cpu_user_time_min)
    {
        $this->container['cpu_user_time_min'] = $cpu_user_time_min;

        return $this;
    }

    /**
     * Gets cpu_user_time_max
     *
     * @return float|null
     */
    public function getCpuUserTimeMax()
    {
        return $this->container['cpu_user_time_max'];
    }

    /**
     * Sets cpu_user_time_max
     *
     * @param float|null $cpu_user_time_max cpu_user_time_max
     *
     * @return self
     */
    public function setCpuUserTimeMax($cpu_user_time_max)
    {
        $this->container['cpu_user_time_max'] = $cpu_user_time_max;

        return $this;
    }

    /**
     * Gets cpu_user_time_avg
     *
     * @return float|null
     */
    public function getCpuUserTimeAvg()
    {
        return $this->container['cpu_user_time_avg'];
    }

    /**
     * Sets cpu_user_time_avg
     *
     * @param float|null $cpu_user_time_avg cpu_user_time_avg
     *
     * @return self
     */
    public function setCpuUserTimeAvg($cpu_user_time_avg)
    {
        $this->container['cpu_user_time_avg'] = $cpu_user_time_avg;

        return $this;
    }

    /**
     * Gets cpu_user_time_sum
     *
     * @return float|null
     */
    public function getCpuUserTimeSum()
    {
        return $this->container['cpu_user_time_sum'];
    }

    /**
     * Sets cpu_user_time_sum
     *
     * @param float|null $cpu_user_time_sum cpu_user_time_sum
     *
     * @return self
     */
    public function setCpuUserTimeSum($cpu_user_time_sum)
    {
        $this->container['cpu_user_time_sum'] = $cpu_user_time_sum;

        return $this;
    }

    /**
     * Gets cpu_system_time_count
     *
     * @return float|null
     */
    public function getCpuSystemTimeCount()
    {
        return $this->container['cpu_system_time_count'];
    }

    /**
     * Sets cpu_system_time_count
     *
     * @param float|null $cpu_system_time_count cpu_system_time_count
     *
     * @return self
     */
    public function setCpuSystemTimeCount($cpu_system_time_count)
    {
        $this->container['cpu_system_time_count'] = $cpu_system_time_count;

        return $this;
    }

    /**
     * Gets cpu_system_time_min
     *
     * @return float|null
     */
    public function getCpuSystemTimeMin()
    {
        return $this->container['cpu_system_time_min'];
    }

    /**
     * Sets cpu_system_time_min
     *
     * @param float|null $cpu_system_time_min cpu_system_time_min
     *
     * @return self
     */
    public function setCpuSystemTimeMin($cpu_system_time_min)
    {
        $this->container['cpu_system_time_min'] = $cpu_system_time_min;

        return $this;
    }

    /**
     * Gets cpu_system_time_max
     *
     * @return float|null
     */
    public function getCpuSystemTimeMax()
    {
        return $this->container['cpu_system_time_max'];
    }

    /**
     * Sets cpu_system_time_max
     *
     * @param float|null $cpu_system_time_max cpu_system_time_max
     *
     * @return self
     */
    public function setCpuSystemTimeMax($cpu_system_time_max)
    {
        $this->container['cpu_system_time_max'] = $cpu_system_time_max;

        return $this;
    }

    /**
     * Gets cpu_system_time_avg
     *
     * @return float|null
     */
    public function getCpuSystemTimeAvg()
    {
        return $this->container['cpu_system_time_avg'];
    }

    /**
     * Sets cpu_system_time_avg
     *
     * @param float|null $cpu_system_time_avg cpu_system_time_avg
     *
     * @return self
     */
    public function setCpuSystemTimeAvg($cpu_system_time_avg)
    {
        $this->container['cpu_system_time_avg'] = $cpu_system_time_avg;

        return $this;
    }

    /**
     * Gets cpu_system_time_sum
     *
     * @return float|null
     */
    public function getCpuSystemTimeSum()
    {
        return $this->container['cpu_system_time_sum'];
    }

    /**
     * Sets cpu_system_time_sum
     *
     * @param float|null $cpu_system_time_sum cpu_system_time_sum
     *
     * @return self
     */
    public function setCpuSystemTimeSum($cpu_system_time_sum)
    {
        $this->container['cpu_system_time_sum'] = $cpu_system_time_sum;

        return $this;
    }

    /**
     * Gets used_memory_count
     *
     * @return float|null
     */
    public function getUsedMemoryCount()
    {
        return $this->container['used_memory_count'];
    }

    /**
     * Sets used_memory_count
     *
     * @param float|null $used_memory_count used_memory_count
     *
     * @return self
     */
    public function setUsedMemoryCount($used_memory_count)
    {
        $this->container['used_memory_count'] = $used_memory_count;

        return $this;
    }

    /**
     * Gets used_memory_min
     *
     * @return float|null
     */
    public function getUsedMemoryMin()
    {
        return $this->container['used_memory_min'];
    }

    /**
     * Sets used_memory_min
     *
     * @param float|null $used_memory_min used_memory_min
     *
     * @return self
     */
    public function setUsedMemoryMin($used_memory_min)
    {
        $this->container['used_memory_min'] = $used_memory_min;

        return $this;
    }

    /**
     * Gets used_memory_max
     *
     * @return float|null
     */
    public function getUsedMemoryMax()
    {
        return $this->container['used_memory_max'];
    }

    /**
     * Sets used_memory_max
     *
     * @param float|null $used_memory_max used_memory_max
     *
     * @return self
     */
    public function setUsedMemoryMax($used_memory_max)
    {
        $this->container['used_memory_max'] = $used_memory_max;

        return $this;
    }

    /**
     * Gets used_memory_avg
     *
     * @return float|null
     */
    public function getUsedMemoryAvg()
    {
        return $this->container['used_memory_avg'];
    }

    /**
     * Sets used_memory_avg
     *
     * @param float|null $used_memory_avg used_memory_avg
     *
     * @return self
     */
    public function setUsedMemoryAvg($used_memory_avg)
    {
        $this->container['used_memory_avg'] = $used_memory_avg;

        return $this;
    }

    /**
     * Gets used_memory_sum
     *
     * @return float|null
     */
    public function getUsedMemorySum()
    {
        return $this->container['used_memory_sum'];
    }

    /**
     * Sets used_memory_sum
     *
     * @param float|null $used_memory_sum used_memory_sum
     *
     * @return self
     */
    public function setUsedMemorySum($used_memory_sum)
    {
        $this->container['used_memory_sum'] = $used_memory_sum;

        return $this;
    }

    /**
     * Gets free_memory_count
     *
     * @return float|null
     */
    public function getFreeMemoryCount()
    {
        return $this->container['free_memory_count'];
    }

    /**
     * Sets free_memory_count
     *
     * @param float|null $free_memory_count free_memory_count
     *
     * @return self
     */
    public function setFreeMemoryCount($free_memory_count)
    {
        $this->container['free_memory_count'] = $free_memory_count;

        return $this;
    }

    /**
     * Gets free_memory_min
     *
     * @return float|null
     */
    public function getFreeMemoryMin()
    {
        return $this->container['free_memory_min'];
    }

    /**
     * Sets free_memory_min
     *
     * @param float|null $free_memory_min free_memory_min
     *
     * @return self
     */
    public function setFreeMemoryMin($free_memory_min)
    {
        $this->container['free_memory_min'] = $free_memory_min;

        return $this;
    }

    /**
     * Gets free_memory_max
     *
     * @return float|null
     */
    public function getFreeMemoryMax()
    {
        return $this->container['free_memory_max'];
    }

    /**
     * Sets free_memory_max
     *
     * @param float|null $free_memory_max free_memory_max
     *
     * @return self
     */
    public function setFreeMemoryMax($free_memory_max)
    {
        $this->container['free_memory_max'] = $free_memory_max;

        return $this;
    }

    /**
     * Gets free_memory_avg
     *
     * @return float|null
     */
    public function getFreeMemoryAvg()
    {
        return $this->container['free_memory_avg'];
    }

    /**
     * Sets free_memory_avg
     *
     * @param float|null $free_memory_avg free_memory_avg
     *
     * @return self
     */
    public function setFreeMemoryAvg($free_memory_avg)
    {
        $this->container['free_memory_avg'] = $free_memory_avg;

        return $this;
    }

    /**
     * Gets free_memory_sum
     *
     * @return float|null
     */
    public function getFreeMemorySum()
    {
        return $this->container['free_memory_sum'];
    }

    /**
     * Sets free_memory_sum
     *
     * @param float|null $free_memory_sum free_memory_sum
     *
     * @return self
     */
    public function setFreeMemorySum($free_memory_sum)
    {
        $this->container['free_memory_sum'] = $free_memory_sum;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


