<?php
/**
 * BackupSettingsUpdate
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * BackupSettingsUpdate Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class BackupSettingsUpdate implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'backupSettingsUpdate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'backups_enabled' => 'bool',
        'retention_count' => 'int',
        'create_backups' => 'bool',
        'backup_appliance' => 'bool',
        'update_existing' => 'bool',
        'default_schedule' => '\OpenAPI\Client\Model\BackupSettingsUpdateDefaultSchedule',
        'clear_default_schedule' => 'bool',
        'default_storage_bucket' => '\OpenAPI\Client\Model\BackupSettingsUpdateDefaultStorageBucket',
        'clear_default_storage_bucket' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'backups_enabled' => null,
        'retention_count' => 'int64',
        'create_backups' => null,
        'backup_appliance' => null,
        'update_existing' => null,
        'default_schedule' => null,
        'clear_default_schedule' => null,
        'default_storage_bucket' => null,
        'clear_default_storage_bucket' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'backups_enabled' => 'backupsEnabled',
        'retention_count' => 'retentionCount',
        'create_backups' => 'createBackups',
        'backup_appliance' => 'backupAppliance',
        'update_existing' => 'updateExisting',
        'default_schedule' => 'defaultSchedule',
        'clear_default_schedule' => 'clearDefaultSchedule',
        'default_storage_bucket' => 'defaultStorageBucket',
        'clear_default_storage_bucket' => 'clearDefaultStorageBucket'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'backups_enabled' => 'setBackupsEnabled',
        'retention_count' => 'setRetentionCount',
        'create_backups' => 'setCreateBackups',
        'backup_appliance' => 'setBackupAppliance',
        'update_existing' => 'setUpdateExisting',
        'default_schedule' => 'setDefaultSchedule',
        'clear_default_schedule' => 'setClearDefaultSchedule',
        'default_storage_bucket' => 'setDefaultStorageBucket',
        'clear_default_storage_bucket' => 'setClearDefaultStorageBucket'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'backups_enabled' => 'getBackupsEnabled',
        'retention_count' => 'getRetentionCount',
        'create_backups' => 'getCreateBackups',
        'backup_appliance' => 'getBackupAppliance',
        'update_existing' => 'getUpdateExisting',
        'default_schedule' => 'getDefaultSchedule',
        'clear_default_schedule' => 'getClearDefaultSchedule',
        'default_storage_bucket' => 'getDefaultStorageBucket',
        'clear_default_storage_bucket' => 'getClearDefaultStorageBucket'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['backups_enabled'] = $data['backups_enabled'] ?? null;
        $this->container['retention_count'] = $data['retention_count'] ?? null;
        $this->container['create_backups'] = $data['create_backups'] ?? null;
        $this->container['backup_appliance'] = $data['backup_appliance'] ?? null;
        $this->container['update_existing'] = $data['update_existing'] ?? null;
        $this->container['default_schedule'] = $data['default_schedule'] ?? null;
        $this->container['clear_default_schedule'] = $data['clear_default_schedule'] ?? null;
        $this->container['default_storage_bucket'] = $data['default_storage_bucket'] ?? null;
        $this->container['clear_default_storage_bucket'] = $data['clear_default_storage_bucket'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets backups_enabled
     *
     * @return bool|null
     */
    public function getBackupsEnabled()
    {
        return $this->container['backups_enabled'];
    }

    /**
     * Sets backups_enabled
     *
     * @param bool|null $backups_enabled Use this to enable / disable scheduled backups
     *
     * @return self
     */
    public function setBackupsEnabled($backups_enabled)
    {
        $this->container['backups_enabled'] = $backups_enabled;

        return $this;
    }

    /**
     * Gets retention_count
     *
     * @return int|null
     */
    public function getRetentionCount()
    {
        return $this->container['retention_count'];
    }

    /**
     * Sets retention_count
     *
     * @param int|null $retention_count Maximum number of successful backups to retain
     *
     * @return self
     */
    public function setRetentionCount($retention_count)
    {
        $this->container['retention_count'] = $retention_count;

        return $this;
    }

    /**
     * Gets create_backups
     *
     * @return bool|null
     */
    public function getCreateBackups()
    {
        return $this->container['create_backups'];
    }

    /**
     * Sets create_backups
     *
     * @param bool|null $create_backups Use this to enable / disable create backups
     *
     * @return self
     */
    public function setCreateBackups($create_backups)
    {
        $this->container['create_backups'] = $create_backups;

        return $this;
    }

    /**
     * Gets backup_appliance
     *
     * @return bool|null
     */
    public function getBackupAppliance()
    {
        return $this->container['backup_appliance'];
    }

    /**
     * Sets backup_appliance
     *
     * @param bool|null $backup_appliance When enabled, a Backup will be created to backup the Morpheus appliance database
     *
     * @return self
     */
    public function setBackupAppliance($backup_appliance)
    {
        $this->container['backup_appliance'] = $backup_appliance;

        return $this;
    }

    /**
     * Gets update_existing
     *
     * @return bool|null
     */
    public function getUpdateExisting()
    {
        return $this->container['update_existing'];
    }

    /**
     * Sets update_existing
     *
     * @param bool|null $update_existing Use this to update existing backups with new settings
     *
     * @return self
     */
    public function setUpdateExisting($update_existing)
    {
        $this->container['update_existing'] = $update_existing;

        return $this;
    }

    /**
     * Gets default_schedule
     *
     * @return \OpenAPI\Client\Model\BackupSettingsUpdateDefaultSchedule|null
     */
    public function getDefaultSchedule()
    {
        return $this->container['default_schedule'];
    }

    /**
     * Sets default_schedule
     *
     * @param \OpenAPI\Client\Model\BackupSettingsUpdateDefaultSchedule|null $default_schedule default_schedule
     *
     * @return self
     */
    public function setDefaultSchedule($default_schedule)
    {
        $this->container['default_schedule'] = $default_schedule;

        return $this;
    }

    /**
     * Gets clear_default_schedule
     *
     * @return bool|null
     */
    public function getClearDefaultSchedule()
    {
        return $this->container['clear_default_schedule'];
    }

    /**
     * Sets clear_default_schedule
     *
     * @param bool|null $clear_default_schedule Use this to clear existing default backup schedule
     *
     * @return self
     */
    public function setClearDefaultSchedule($clear_default_schedule)
    {
        $this->container['clear_default_schedule'] = $clear_default_schedule;

        return $this;
    }

    /**
     * Gets default_storage_bucket
     *
     * @return \OpenAPI\Client\Model\BackupSettingsUpdateDefaultStorageBucket|null
     */
    public function getDefaultStorageBucket()
    {
        return $this->container['default_storage_bucket'];
    }

    /**
     * Sets default_storage_bucket
     *
     * @param \OpenAPI\Client\Model\BackupSettingsUpdateDefaultStorageBucket|null $default_storage_bucket default_storage_bucket
     *
     * @return self
     */
    public function setDefaultStorageBucket($default_storage_bucket)
    {
        $this->container['default_storage_bucket'] = $default_storage_bucket;

        return $this;
    }

    /**
     * Gets clear_default_storage_bucket
     *
     * @return bool|null
     */
    public function getClearDefaultStorageBucket()
    {
        return $this->container['clear_default_storage_bucket'];
    }

    /**
     * Sets clear_default_storage_bucket
     *
     * @param bool|null $clear_default_storage_bucket Use this to clear default store bucket
     *
     * @return self
     */
    public function setClearDefaultStorageBucket($clear_default_storage_bucket)
    {
        $this->container['clear_default_storage_bucket'] = $clear_default_storage_bucket;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


