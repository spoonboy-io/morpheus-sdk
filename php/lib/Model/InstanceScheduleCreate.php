<?php
/**
 * InstanceScheduleCreate
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * InstanceScheduleCreate Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InstanceScheduleCreate implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'instanceScheduleCreate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'schedule_type' => 'string',
        'schedule_timezone' => 'string',
        'start_day_of_week' => 'int',
        'start_time' => 'string',
        'end_day_of_week' => 'int',
        'end_time' => 'string',
        'start_date' => '\DateTime',
        'end_date' => '\DateTime',
        'threshold' => '\OpenAPI\Client\Model\InstanceScheduleCreateThreshold'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'schedule_type' => null,
        'schedule_timezone' => null,
        'start_day_of_week' => null,
        'start_time' => null,
        'end_day_of_week' => null,
        'end_time' => null,
        'start_date' => 'date-time',
        'end_date' => 'date-time',
        'threshold' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'schedule_type' => 'scheduleType',
        'schedule_timezone' => 'scheduleTimezone',
        'start_day_of_week' => 'startDayOfWeek',
        'start_time' => 'startTime',
        'end_day_of_week' => 'endDayOfWeek',
        'end_time' => 'endTime',
        'start_date' => 'startDate',
        'end_date' => 'endDate',
        'threshold' => 'threshold'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'schedule_type' => 'setScheduleType',
        'schedule_timezone' => 'setScheduleTimezone',
        'start_day_of_week' => 'setStartDayOfWeek',
        'start_time' => 'setStartTime',
        'end_day_of_week' => 'setEndDayOfWeek',
        'end_time' => 'setEndTime',
        'start_date' => 'setStartDate',
        'end_date' => 'setEndDate',
        'threshold' => 'setThreshold'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'schedule_type' => 'getScheduleType',
        'schedule_timezone' => 'getScheduleTimezone',
        'start_day_of_week' => 'getStartDayOfWeek',
        'start_time' => 'getStartTime',
        'end_day_of_week' => 'getEndDayOfWeek',
        'end_time' => 'getEndTime',
        'start_date' => 'getStartDate',
        'end_date' => 'getEndDate',
        'threshold' => 'getThreshold'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const SCHEDULE_TYPE_DAY_OF_WEEK = 'dayOfWeek';
    const SCHEDULE_TYPE_EXACT = 'exact';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getScheduleTypeAllowableValues()
    {
        return [
            self::SCHEDULE_TYPE_DAY_OF_WEEK,
            self::SCHEDULE_TYPE_EXACT,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['schedule_type'] = $data['schedule_type'] ?? 'dayOfWeek';
        $this->container['schedule_timezone'] = $data['schedule_timezone'] ?? 'UTC';
        $this->container['start_day_of_week'] = $data['start_day_of_week'] ?? null;
        $this->container['start_time'] = $data['start_time'] ?? null;
        $this->container['end_day_of_week'] = $data['end_day_of_week'] ?? null;
        $this->container['end_time'] = $data['end_time'] ?? null;
        $this->container['start_date'] = $data['start_date'] ?? null;
        $this->container['end_date'] = $data['end_date'] ?? null;
        $this->container['threshold'] = $data['threshold'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getScheduleTypeAllowableValues();
        if (!is_null($this->container['schedule_type']) && !in_array($this->container['schedule_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'schedule_type', must be one of '%s'",
                $this->container['schedule_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets schedule_type
     *
     * @return string|null
     */
    public function getScheduleType()
    {
        return $this->container['schedule_type'];
    }

    /**
     * Sets schedule_type
     *
     * @param string|null $schedule_type schedule_type
     *
     * @return self
     */
    public function setScheduleType($schedule_type)
    {
        $allowedValues = $this->getScheduleTypeAllowableValues();
        if (!is_null($schedule_type) && !in_array($schedule_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'schedule_type', must be one of '%s'",
                    $schedule_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['schedule_type'] = $schedule_type;

        return $this;
    }

    /**
     * Gets schedule_timezone
     *
     * @return string|null
     */
    public function getScheduleTimezone()
    {
        return $this->container['schedule_timezone'];
    }

    /**
     * Sets schedule_timezone
     *
     * @param string|null $schedule_timezone Time Zone eg. America/New_York, Europe/Amsterdam, etc. Only used and required for scheduleType `dayOfWeek`
     *
     * @return self
     */
    public function setScheduleTimezone($schedule_timezone)
    {
        $this->container['schedule_timezone'] = $schedule_timezone;

        return $this;
    }

    /**
     * Gets start_day_of_week
     *
     * @return int|null
     */
    public function getStartDayOfWeek()
    {
        return $this->container['start_day_of_week'];
    }

    /**
     * Sets start_day_of_week
     *
     * @param int|null $start_day_of_week Start day of the week 1-7 (Sun-Sat). Only used and required for scheduleType `dayOfWeek`
     *
     * @return self
     */
    public function setStartDayOfWeek($start_day_of_week)
    {
        $this->container['start_day_of_week'] = $start_day_of_week;

        return $this;
    }

    /**
     * Gets start_time
     *
     * @return string|null
     */
    public function getStartTime()
    {
        return $this->container['start_time'];
    }

    /**
     * Sets start_time
     *
     * @param string|null $start_time Start time of the day in 24-hour format. Only used and required for scheduleType `dayOfWeek`
     *
     * @return self
     */
    public function setStartTime($start_time)
    {
        $this->container['start_time'] = $start_time;

        return $this;
    }

    /**
     * Gets end_day_of_week
     *
     * @return int|null
     */
    public function getEndDayOfWeek()
    {
        return $this->container['end_day_of_week'];
    }

    /**
     * Sets end_day_of_week
     *
     * @param int|null $end_day_of_week End day of the week 1-7 (Sun-Sat). Only used and required for scheduleType `dayOfWeek`
     *
     * @return self
     */
    public function setEndDayOfWeek($end_day_of_week)
    {
        $this->container['end_day_of_week'] = $end_day_of_week;

        return $this;
    }

    /**
     * Gets end_time
     *
     * @return string|null
     */
    public function getEndTime()
    {
        return $this->container['end_time'];
    }

    /**
     * Sets end_time
     *
     * @param string|null $end_time End time of the day in 24-hour format. Only used and required for scheduleType `dayOfWeek`
     *
     * @return self
     */
    public function setEndTime($end_time)
    {
        $this->container['end_time'] = $end_time;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return \DateTime|null
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime|null $start_date Start Date. Only used and required for scheduleType `exact`
     *
     * @return self
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime|null
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime|null $end_date End Date. Only used and required for scheduleType `exact`
     *
     * @return self
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets threshold
     *
     * @return \OpenAPI\Client\Model\InstanceScheduleCreateThreshold|null
     */
    public function getThreshold()
    {
        return $this->container['threshold'];
    }

    /**
     * Sets threshold
     *
     * @param \OpenAPI\Client\Model\InstanceScheduleCreateThreshold|null $threshold threshold
     *
     * @return self
     */
    public function setThreshold($threshold)
    {
        $this->container['threshold'] = $threshold;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


