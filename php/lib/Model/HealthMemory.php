<?php
/**
 * HealthMemory
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * HealthMemory Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class HealthMemory implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'health_memory';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'success' => 'bool',
        'max_memory' => 'int',
        'total_memory' => 'int',
        'free_memory' => 'int',
        'used_memory' => 'int',
        'system_memory' => 'int',
        'committed_memory' => 'int',
        'system_free_memory' => 'int',
        'system_swap' => 'int',
        'system_free_swap' => 'int',
        'swap_percent' => 'int',
        'memory_percent' => 'float',
        'system_memory_percent' => 'float',
        'status' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'success' => null,
        'max_memory' => 'int64',
        'total_memory' => 'int64',
        'free_memory' => 'int64',
        'used_memory' => 'int64',
        'system_memory' => 'int64',
        'committed_memory' => 'int64',
        'system_free_memory' => 'int64',
        'system_swap' => 'int64',
        'system_free_swap' => 'int64',
        'swap_percent' => 'int64',
        'memory_percent' => null,
        'system_memory_percent' => null,
        'status' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'success' => 'success',
        'max_memory' => 'maxMemory',
        'total_memory' => 'totalMemory',
        'free_memory' => 'freeMemory',
        'used_memory' => 'usedMemory',
        'system_memory' => 'systemMemory',
        'committed_memory' => 'committedMemory',
        'system_free_memory' => 'systemFreeMemory',
        'system_swap' => 'systemSwap',
        'system_free_swap' => 'systemFreeSwap',
        'swap_percent' => 'swapPercent',
        'memory_percent' => 'memoryPercent',
        'system_memory_percent' => 'systemMemoryPercent',
        'status' => 'status'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'success' => 'setSuccess',
        'max_memory' => 'setMaxMemory',
        'total_memory' => 'setTotalMemory',
        'free_memory' => 'setFreeMemory',
        'used_memory' => 'setUsedMemory',
        'system_memory' => 'setSystemMemory',
        'committed_memory' => 'setCommittedMemory',
        'system_free_memory' => 'setSystemFreeMemory',
        'system_swap' => 'setSystemSwap',
        'system_free_swap' => 'setSystemFreeSwap',
        'swap_percent' => 'setSwapPercent',
        'memory_percent' => 'setMemoryPercent',
        'system_memory_percent' => 'setSystemMemoryPercent',
        'status' => 'setStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'success' => 'getSuccess',
        'max_memory' => 'getMaxMemory',
        'total_memory' => 'getTotalMemory',
        'free_memory' => 'getFreeMemory',
        'used_memory' => 'getUsedMemory',
        'system_memory' => 'getSystemMemory',
        'committed_memory' => 'getCommittedMemory',
        'system_free_memory' => 'getSystemFreeMemory',
        'system_swap' => 'getSystemSwap',
        'system_free_swap' => 'getSystemFreeSwap',
        'swap_percent' => 'getSwapPercent',
        'memory_percent' => 'getMemoryPercent',
        'system_memory_percent' => 'getSystemMemoryPercent',
        'status' => 'getStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['success'] = $data['success'] ?? null;
        $this->container['max_memory'] = $data['max_memory'] ?? null;
        $this->container['total_memory'] = $data['total_memory'] ?? null;
        $this->container['free_memory'] = $data['free_memory'] ?? null;
        $this->container['used_memory'] = $data['used_memory'] ?? null;
        $this->container['system_memory'] = $data['system_memory'] ?? null;
        $this->container['committed_memory'] = $data['committed_memory'] ?? null;
        $this->container['system_free_memory'] = $data['system_free_memory'] ?? null;
        $this->container['system_swap'] = $data['system_swap'] ?? null;
        $this->container['system_free_swap'] = $data['system_free_swap'] ?? null;
        $this->container['swap_percent'] = $data['swap_percent'] ?? null;
        $this->container['memory_percent'] = $data['memory_percent'] ?? null;
        $this->container['system_memory_percent'] = $data['system_memory_percent'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets success
     *
     * @return bool|null
     */
    public function getSuccess()
    {
        return $this->container['success'];
    }

    /**
     * Sets success
     *
     * @param bool|null $success success
     *
     * @return self
     */
    public function setSuccess($success)
    {
        $this->container['success'] = $success;

        return $this;
    }

    /**
     * Gets max_memory
     *
     * @return int|null
     */
    public function getMaxMemory()
    {
        return $this->container['max_memory'];
    }

    /**
     * Sets max_memory
     *
     * @param int|null $max_memory max_memory
     *
     * @return self
     */
    public function setMaxMemory($max_memory)
    {
        $this->container['max_memory'] = $max_memory;

        return $this;
    }

    /**
     * Gets total_memory
     *
     * @return int|null
     */
    public function getTotalMemory()
    {
        return $this->container['total_memory'];
    }

    /**
     * Sets total_memory
     *
     * @param int|null $total_memory total_memory
     *
     * @return self
     */
    public function setTotalMemory($total_memory)
    {
        $this->container['total_memory'] = $total_memory;

        return $this;
    }

    /**
     * Gets free_memory
     *
     * @return int|null
     */
    public function getFreeMemory()
    {
        return $this->container['free_memory'];
    }

    /**
     * Sets free_memory
     *
     * @param int|null $free_memory free_memory
     *
     * @return self
     */
    public function setFreeMemory($free_memory)
    {
        $this->container['free_memory'] = $free_memory;

        return $this;
    }

    /**
     * Gets used_memory
     *
     * @return int|null
     */
    public function getUsedMemory()
    {
        return $this->container['used_memory'];
    }

    /**
     * Sets used_memory
     *
     * @param int|null $used_memory used_memory
     *
     * @return self
     */
    public function setUsedMemory($used_memory)
    {
        $this->container['used_memory'] = $used_memory;

        return $this;
    }

    /**
     * Gets system_memory
     *
     * @return int|null
     */
    public function getSystemMemory()
    {
        return $this->container['system_memory'];
    }

    /**
     * Sets system_memory
     *
     * @param int|null $system_memory system_memory
     *
     * @return self
     */
    public function setSystemMemory($system_memory)
    {
        $this->container['system_memory'] = $system_memory;

        return $this;
    }

    /**
     * Gets committed_memory
     *
     * @return int|null
     */
    public function getCommittedMemory()
    {
        return $this->container['committed_memory'];
    }

    /**
     * Sets committed_memory
     *
     * @param int|null $committed_memory committed_memory
     *
     * @return self
     */
    public function setCommittedMemory($committed_memory)
    {
        $this->container['committed_memory'] = $committed_memory;

        return $this;
    }

    /**
     * Gets system_free_memory
     *
     * @return int|null
     */
    public function getSystemFreeMemory()
    {
        return $this->container['system_free_memory'];
    }

    /**
     * Sets system_free_memory
     *
     * @param int|null $system_free_memory system_free_memory
     *
     * @return self
     */
    public function setSystemFreeMemory($system_free_memory)
    {
        $this->container['system_free_memory'] = $system_free_memory;

        return $this;
    }

    /**
     * Gets system_swap
     *
     * @return int|null
     */
    public function getSystemSwap()
    {
        return $this->container['system_swap'];
    }

    /**
     * Sets system_swap
     *
     * @param int|null $system_swap system_swap
     *
     * @return self
     */
    public function setSystemSwap($system_swap)
    {
        $this->container['system_swap'] = $system_swap;

        return $this;
    }

    /**
     * Gets system_free_swap
     *
     * @return int|null
     */
    public function getSystemFreeSwap()
    {
        return $this->container['system_free_swap'];
    }

    /**
     * Sets system_free_swap
     *
     * @param int|null $system_free_swap system_free_swap
     *
     * @return self
     */
    public function setSystemFreeSwap($system_free_swap)
    {
        $this->container['system_free_swap'] = $system_free_swap;

        return $this;
    }

    /**
     * Gets swap_percent
     *
     * @return int|null
     */
    public function getSwapPercent()
    {
        return $this->container['swap_percent'];
    }

    /**
     * Sets swap_percent
     *
     * @param int|null $swap_percent swap_percent
     *
     * @return self
     */
    public function setSwapPercent($swap_percent)
    {
        $this->container['swap_percent'] = $swap_percent;

        return $this;
    }

    /**
     * Gets memory_percent
     *
     * @return float|null
     */
    public function getMemoryPercent()
    {
        return $this->container['memory_percent'];
    }

    /**
     * Sets memory_percent
     *
     * @param float|null $memory_percent memory_percent
     *
     * @return self
     */
    public function setMemoryPercent($memory_percent)
    {
        $this->container['memory_percent'] = $memory_percent;

        return $this;
    }

    /**
     * Gets system_memory_percent
     *
     * @return float|null
     */
    public function getSystemMemoryPercent()
    {
        return $this->container['system_memory_percent'];
    }

    /**
     * Sets system_memory_percent
     *
     * @param float|null $system_memory_percent system_memory_percent
     *
     * @return self
     */
    public function setSystemMemoryPercent($system_memory_percent)
    {
        $this->container['system_memory_percent'] = $system_memory_percent;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


