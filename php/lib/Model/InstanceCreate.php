<?php
/**
 * InstanceCreate
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * InstanceCreate Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InstanceCreate implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'instanceCreate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'instance' => '\OpenAPI\Client\Model\InstanceCreateInstance',
        'zone_id' => 'int',
        'evars' => '\OpenAPI\Client\Model\ApiServersIdMakeManagedServerTags[]',
        'copies' => 'int',
        'layout_size' => 'int',
        'service_plan_options' => 'object',
        'security_groups' => 'object[]',
        'volumes' => '\OpenAPI\Client\Model\InstanceCreateVolume[]',
        'network_interfaces' => '\OpenAPI\Client\Model\InstanceCreateNetwork[]',
        'config' => 'AnyOfInstancesConfigAzureInstancesConfigVMWareInstancesConfigGCPInstancesConfigAWSObject',
        'labels' => 'string[]',
        'tags' => '\OpenAPI\Client\Model\ApiServersIdMakeManagedServerTags[]',
        'metadata' => '\OpenAPI\Client\Model\ApiServersIdMakeManagedServerTags[]',
        'ports' => '\OpenAPI\Client\Model\InstanceCreatePorts[]',
        'task_set_id' => 'int',
        'task_set_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'instance' => null,
        'zone_id' => 'int64',
        'evars' => null,
        'copies' => 'int64',
        'layout_size' => 'int64',
        'service_plan_options' => null,
        'security_groups' => null,
        'volumes' => null,
        'network_interfaces' => null,
        'config' => null,
        'labels' => null,
        'tags' => null,
        'metadata' => null,
        'ports' => null,
        'task_set_id' => 'int64',
        'task_set_name' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'instance' => 'instance',
        'zone_id' => 'zoneId',
        'evars' => 'evars',
        'copies' => 'copies',
        'layout_size' => 'layoutSize',
        'service_plan_options' => 'servicePlanOptions',
        'security_groups' => 'securityGroups',
        'volumes' => 'volumes',
        'network_interfaces' => 'networkInterfaces',
        'config' => 'config',
        'labels' => 'labels',
        'tags' => 'tags',
        'metadata' => 'metadata',
        'ports' => 'ports',
        'task_set_id' => 'taskSetId',
        'task_set_name' => 'taskSetName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'instance' => 'setInstance',
        'zone_id' => 'setZoneId',
        'evars' => 'setEvars',
        'copies' => 'setCopies',
        'layout_size' => 'setLayoutSize',
        'service_plan_options' => 'setServicePlanOptions',
        'security_groups' => 'setSecurityGroups',
        'volumes' => 'setVolumes',
        'network_interfaces' => 'setNetworkInterfaces',
        'config' => 'setConfig',
        'labels' => 'setLabels',
        'tags' => 'setTags',
        'metadata' => 'setMetadata',
        'ports' => 'setPorts',
        'task_set_id' => 'setTaskSetId',
        'task_set_name' => 'setTaskSetName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'instance' => 'getInstance',
        'zone_id' => 'getZoneId',
        'evars' => 'getEvars',
        'copies' => 'getCopies',
        'layout_size' => 'getLayoutSize',
        'service_plan_options' => 'getServicePlanOptions',
        'security_groups' => 'getSecurityGroups',
        'volumes' => 'getVolumes',
        'network_interfaces' => 'getNetworkInterfaces',
        'config' => 'getConfig',
        'labels' => 'getLabels',
        'tags' => 'getTags',
        'metadata' => 'getMetadata',
        'ports' => 'getPorts',
        'task_set_id' => 'getTaskSetId',
        'task_set_name' => 'getTaskSetName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['instance'] = $data['instance'] ?? null;
        $this->container['zone_id'] = $data['zone_id'] ?? null;
        $this->container['evars'] = $data['evars'] ?? null;
        $this->container['copies'] = $data['copies'] ?? 1;
        $this->container['layout_size'] = $data['layout_size'] ?? 1;
        $this->container['service_plan_options'] = $data['service_plan_options'] ?? null;
        $this->container['security_groups'] = $data['security_groups'] ?? null;
        $this->container['volumes'] = $data['volumes'] ?? null;
        $this->container['network_interfaces'] = $data['network_interfaces'] ?? null;
        $this->container['config'] = $data['config'] ?? null;
        $this->container['labels'] = $data['labels'] ?? null;
        $this->container['tags'] = $data['tags'] ?? null;
        $this->container['metadata'] = $data['metadata'] ?? null;
        $this->container['ports'] = $data['ports'] ?? null;
        $this->container['task_set_id'] = $data['task_set_id'] ?? null;
        $this->container['task_set_name'] = $data['task_set_name'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['instance'] === null) {
            $invalidProperties[] = "'instance' can't be null";
        }
        if ($this->container['config'] === null) {
            $invalidProperties[] = "'config' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets instance
     *
     * @return \OpenAPI\Client\Model\InstanceCreateInstance
     */
    public function getInstance()
    {
        return $this->container['instance'];
    }

    /**
     * Sets instance
     *
     * @param \OpenAPI\Client\Model\InstanceCreateInstance $instance instance
     *
     * @return self
     */
    public function setInstance($instance)
    {
        $this->container['instance'] = $instance;

        return $this;
    }

    /**
     * Gets zone_id
     *
     * @return int|null
     */
    public function getZoneId()
    {
        return $this->container['zone_id'];
    }

    /**
     * Sets zone_id
     *
     * @param int|null $zone_id The Cloud ID to provision the instance onto.
     *
     * @return self
     */
    public function setZoneId($zone_id)
    {
        $this->container['zone_id'] = $zone_id;

        return $this;
    }

    /**
     * Gets evars
     *
     * @return \OpenAPI\Client\Model\ApiServersIdMakeManagedServerTags[]|null
     */
    public function getEvars()
    {
        return $this->container['evars'];
    }

    /**
     * Sets evars
     *
     * @param \OpenAPI\Client\Model\ApiServersIdMakeManagedServerTags[]|null $evars Environment Variables, an array of objects that have name and value.
     *
     * @return self
     */
    public function setEvars($evars)
    {
        $this->container['evars'] = $evars;

        return $this;
    }

    /**
     * Gets copies
     *
     * @return int|null
     */
    public function getCopies()
    {
        return $this->container['copies'];
    }

    /**
     * Sets copies
     *
     * @param int|null $copies Number of copies to provision.
     *
     * @return self
     */
    public function setCopies($copies)
    {
        $this->container['copies'] = $copies;

        return $this;
    }

    /**
     * Gets layout_size
     *
     * @return int|null
     */
    public function getLayoutSize()
    {
        return $this->container['layout_size'];
    }

    /**
     * Sets layout_size
     *
     * @param int|null $layout_size Apply a multiply factor of containers/vms within the instance.
     *
     * @return self
     */
    public function setLayoutSize($layout_size)
    {
        $this->container['layout_size'] = $layout_size;

        return $this;
    }

    /**
     * Gets service_plan_options
     *
     * @return object|null
     */
    public function getServicePlanOptions()
    {
        return $this->container['service_plan_options'];
    }

    /**
     * Sets service_plan_options
     *
     * @param object|null $service_plan_options Map of custom options depending on selected service plan.
     *
     * @return self
     */
    public function setServicePlanOptions($service_plan_options)
    {
        $this->container['service_plan_options'] = $service_plan_options;

        return $this;
    }

    /**
     * Gets security_groups
     *
     * @return object[]|null
     */
    public function getSecurityGroups()
    {
        return $this->container['security_groups'];
    }

    /**
     * Sets security_groups
     *
     * @param object[]|null $security_groups Key for security group configuration. It should be passed as an array of objects containing the id of the security group to assign the instance to.
     *
     * @return self
     */
    public function setSecurityGroups($security_groups)
    {
        $this->container['security_groups'] = $security_groups;

        return $this;
    }

    /**
     * Gets volumes
     *
     * @return \OpenAPI\Client\Model\InstanceCreateVolume[]|null
     */
    public function getVolumes()
    {
        return $this->container['volumes'];
    }

    /**
     * Sets volumes
     *
     * @param \OpenAPI\Client\Model\InstanceCreateVolume[]|null $volumes The (optional) volumes parameter is for LV configuration, can create additional LVs at provision It should be passed as an array of
     *
     * @return self
     */
    public function setVolumes($volumes)
    {
        $this->container['volumes'] = $volumes;

        return $this;
    }

    /**
     * Gets network_interfaces
     *
     * @return \OpenAPI\Client\Model\InstanceCreateNetwork[]|null
     */
    public function getNetworkInterfaces()
    {
        return $this->container['network_interfaces'];
    }

    /**
     * Sets network_interfaces
     *
     * @param \OpenAPI\Client\Model\InstanceCreateNetwork[]|null $network_interfaces The networkInterfaces parameter is for network configuration.  The Options API `/api/options/zoneNetworkOptions?zoneId=5&provisionTypeId=10` can be used to see which options are available.
     *
     * @return self
     */
    public function setNetworkInterfaces($network_interfaces)
    {
        $this->container['network_interfaces'] = $network_interfaces;

        return $this;
    }

    /**
     * Gets config
     *
     * @return AnyOfInstancesConfigAzureInstancesConfigVMWareInstancesConfigGCPInstancesConfigAWSObject
     */
    public function getConfig()
    {
        return $this->container['config'];
    }

    /**
     * Sets config
     *
     * @param AnyOfInstancesConfigAzureInstancesConfigVMWareInstancesConfigGCPInstancesConfigAWSObject $config config
     *
     * @return self
     */
    public function setConfig($config)
    {
        $this->container['config'] = $config;

        return $this;
    }

    /**
     * Gets labels
     *
     * @return string[]|null
     */
    public function getLabels()
    {
        return $this->container['labels'];
    }

    /**
     * Sets labels
     *
     * @param string[]|null $labels Array of strings (keywords).
     *
     * @return self
     */
    public function setLabels($labels)
    {
        $this->container['labels'] = $labels;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return \OpenAPI\Client\Model\ApiServersIdMakeManagedServerTags[]|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param \OpenAPI\Client\Model\ApiServersIdMakeManagedServerTags[]|null $tags Metadata tags, Array of objects having a name and value.
     *
     * @return self
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return \OpenAPI\Client\Model\ApiServersIdMakeManagedServerTags[]|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param \OpenAPI\Client\Model\ApiServersIdMakeManagedServerTags[]|null $metadata Alias for `tags`.
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets ports
     *
     * @return \OpenAPI\Client\Model\InstanceCreatePorts[]|null
     */
    public function getPorts()
    {
        return $this->container['ports'];
    }

    /**
     * Sets ports
     *
     * @param \OpenAPI\Client\Model\InstanceCreatePorts[]|null $ports The ports parameter is for port configuration.  The layout may have default ports, which are defined in node types, that are always configured. This parameter will be for additional custom ports to be opened.
     *
     * @return self
     */
    public function setPorts($ports)
    {
        $this->container['ports'] = $ports;

        return $this;
    }

    /**
     * Gets task_set_id
     *
     * @return int|null
     */
    public function getTaskSetId()
    {
        return $this->container['task_set_id'];
    }

    /**
     * Sets task_set_id
     *
     * @param int|null $task_set_id The Workflow ID to execute.
     *
     * @return self
     */
    public function setTaskSetId($task_set_id)
    {
        $this->container['task_set_id'] = $task_set_id;

        return $this;
    }

    /**
     * Gets task_set_name
     *
     * @return string|null
     */
    public function getTaskSetName()
    {
        return $this->container['task_set_name'];
    }

    /**
     * Sets task_set_name
     *
     * @param string|null $task_set_name The Workflow Name to execute.
     *
     * @return self
     */
    public function setTaskSetName($task_set_name)
    {
        $this->container['task_set_name'] = $task_set_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


