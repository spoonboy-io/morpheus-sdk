<?php
/**
 * VirtualImageCreate
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * VirtualImageCreate Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class VirtualImageCreate implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'virtualImageCreate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'labels' => 'string[]',
        'image_type' => 'string',
        'storage_provider' => '\OpenAPI\Client\Model\VirtualImageCreateStorageProvider',
        'is_cloud_init' => 'bool',
        'user_data' => 'string',
        'install_agent' => 'bool',
        'ssh_username' => 'string',
        'ssh_password' => 'string',
        'ssh_key' => 'string',
        'os_type' => 'OneOfObjectString',
        'visibility' => 'string',
        'accounts' => 'int[]',
        'is_auto_join_domain' => 'bool',
        'virtio_supported' => 'bool',
        'vm_tools_installed' => 'bool',
        'is_force_customization' => 'bool',
        'trial_version' => 'bool',
        'is_sysprep' => 'bool',
        'config' => 'OneOfObjectObject',
        'tags' => '\OpenAPI\Client\Model\VirtualImageCreateTags[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'labels' => null,
        'image_type' => null,
        'storage_provider' => null,
        'is_cloud_init' => null,
        'user_data' => null,
        'install_agent' => null,
        'ssh_username' => null,
        'ssh_password' => null,
        'ssh_key' => null,
        'os_type' => null,
        'visibility' => null,
        'accounts' => 'int64',
        'is_auto_join_domain' => null,
        'virtio_supported' => null,
        'vm_tools_installed' => null,
        'is_force_customization' => null,
        'trial_version' => null,
        'is_sysprep' => null,
        'config' => null,
        'tags' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'labels' => 'labels',
        'image_type' => 'imageType',
        'storage_provider' => 'storageProvider',
        'is_cloud_init' => 'isCloudInit',
        'user_data' => 'userData',
        'install_agent' => 'installAgent',
        'ssh_username' => 'sshUsername',
        'ssh_password' => 'sshPassword',
        'ssh_key' => 'sshKey',
        'os_type' => 'osType',
        'visibility' => 'visibility',
        'accounts' => 'accounts',
        'is_auto_join_domain' => 'isAutoJoinDomain',
        'virtio_supported' => 'virtioSupported',
        'vm_tools_installed' => 'vmToolsInstalled',
        'is_force_customization' => 'isForceCustomization',
        'trial_version' => 'trialVersion',
        'is_sysprep' => 'isSysprep',
        'config' => 'config',
        'tags' => 'tags'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'labels' => 'setLabels',
        'image_type' => 'setImageType',
        'storage_provider' => 'setStorageProvider',
        'is_cloud_init' => 'setIsCloudInit',
        'user_data' => 'setUserData',
        'install_agent' => 'setInstallAgent',
        'ssh_username' => 'setSshUsername',
        'ssh_password' => 'setSshPassword',
        'ssh_key' => 'setSshKey',
        'os_type' => 'setOsType',
        'visibility' => 'setVisibility',
        'accounts' => 'setAccounts',
        'is_auto_join_domain' => 'setIsAutoJoinDomain',
        'virtio_supported' => 'setVirtioSupported',
        'vm_tools_installed' => 'setVmToolsInstalled',
        'is_force_customization' => 'setIsForceCustomization',
        'trial_version' => 'setTrialVersion',
        'is_sysprep' => 'setIsSysprep',
        'config' => 'setConfig',
        'tags' => 'setTags'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'labels' => 'getLabels',
        'image_type' => 'getImageType',
        'storage_provider' => 'getStorageProvider',
        'is_cloud_init' => 'getIsCloudInit',
        'user_data' => 'getUserData',
        'install_agent' => 'getInstallAgent',
        'ssh_username' => 'getSshUsername',
        'ssh_password' => 'getSshPassword',
        'ssh_key' => 'getSshKey',
        'os_type' => 'getOsType',
        'visibility' => 'getVisibility',
        'accounts' => 'getAccounts',
        'is_auto_join_domain' => 'getIsAutoJoinDomain',
        'virtio_supported' => 'getVirtioSupported',
        'vm_tools_installed' => 'getVmToolsInstalled',
        'is_force_customization' => 'getIsForceCustomization',
        'trial_version' => 'getTrialVersion',
        'is_sysprep' => 'getIsSysprep',
        'config' => 'getConfig',
        'tags' => 'getTags'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['labels'] = $data['labels'] ?? null;
        $this->container['image_type'] = $data['image_type'] ?? null;
        $this->container['storage_provider'] = $data['storage_provider'] ?? null;
        $this->container['is_cloud_init'] = $data['is_cloud_init'] ?? false;
        $this->container['user_data'] = $data['user_data'] ?? null;
        $this->container['install_agent'] = $data['install_agent'] ?? false;
        $this->container['ssh_username'] = $data['ssh_username'] ?? null;
        $this->container['ssh_password'] = $data['ssh_password'] ?? null;
        $this->container['ssh_key'] = $data['ssh_key'] ?? null;
        $this->container['os_type'] = $data['os_type'] ?? null;
        $this->container['visibility'] = $data['visibility'] ?? 'private';
        $this->container['accounts'] = $data['accounts'] ?? null;
        $this->container['is_auto_join_domain'] = $data['is_auto_join_domain'] ?? false;
        $this->container['virtio_supported'] = $data['virtio_supported'] ?? true;
        $this->container['vm_tools_installed'] = $data['vm_tools_installed'] ?? true;
        $this->container['is_force_customization'] = $data['is_force_customization'] ?? false;
        $this->container['trial_version'] = $data['trial_version'] ?? false;
        $this->container['is_sysprep'] = $data['is_sysprep'] ?? false;
        $this->container['config'] = $data['config'] ?? null;
        $this->container['tags'] = $data['tags'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name A name for the virtual image
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets labels
     *
     * @return string[]|null
     */
    public function getLabels()
    {
        return $this->container['labels'];
    }

    /**
     * Sets labels
     *
     * @param string[]|null $labels Array of label strings, can be used for filtering.
     *
     * @return self
     */
    public function setLabels($labels)
    {
        $this->container['labels'] = $labels;

        return $this;
    }

    /**
     * Gets image_type
     *
     * @return string|null
     */
    public function getImageType()
    {
        return $this->container['image_type'];
    }

    /**
     * Sets image_type
     *
     * @param string|null $image_type Code of image type. eg. vmware, ami, etc.
     *
     * @return self
     */
    public function setImageType($image_type)
    {
        $this->container['image_type'] = $image_type;

        return $this;
    }

    /**
     * Gets storage_provider
     *
     * @return \OpenAPI\Client\Model\VirtualImageCreateStorageProvider|null
     */
    public function getStorageProvider()
    {
        return $this->container['storage_provider'];
    }

    /**
     * Sets storage_provider
     *
     * @param \OpenAPI\Client\Model\VirtualImageCreateStorageProvider|null $storage_provider storage_provider
     *
     * @return self
     */
    public function setStorageProvider($storage_provider)
    {
        $this->container['storage_provider'] = $storage_provider;

        return $this;
    }

    /**
     * Gets is_cloud_init
     *
     * @return bool|null
     */
    public function getIsCloudInit()
    {
        return $this->container['is_cloud_init'];
    }

    /**
     * Sets is_cloud_init
     *
     * @param bool|null $is_cloud_init Cloud Init Enabled?
     *
     * @return self
     */
    public function setIsCloudInit($is_cloud_init)
    {
        $this->container['is_cloud_init'] = $is_cloud_init;

        return $this;
    }

    /**
     * Gets user_data
     *
     * @return string|null
     */
    public function getUserData()
    {
        return $this->container['user_data'];
    }

    /**
     * Sets user_data
     *
     * @param string|null $user_data Cloud-Init User Data, a bash script
     *
     * @return self
     */
    public function setUserData($user_data)
    {
        $this->container['user_data'] = $user_data;

        return $this;
    }

    /**
     * Gets install_agent
     *
     * @return bool|null
     */
    public function getInstallAgent()
    {
        return $this->container['install_agent'];
    }

    /**
     * Sets install_agent
     *
     * @param bool|null $install_agent Install Agent?
     *
     * @return self
     */
    public function setInstallAgent($install_agent)
    {
        $this->container['install_agent'] = $install_agent;

        return $this;
    }

    /**
     * Gets ssh_username
     *
     * @return string|null
     */
    public function getSshUsername()
    {
        return $this->container['ssh_username'];
    }

    /**
     * Sets ssh_username
     *
     * @param string|null $ssh_username SSH Username
     *
     * @return self
     */
    public function setSshUsername($ssh_username)
    {
        $this->container['ssh_username'] = $ssh_username;

        return $this;
    }

    /**
     * Gets ssh_password
     *
     * @return string|null
     */
    public function getSshPassword()
    {
        return $this->container['ssh_password'];
    }

    /**
     * Sets ssh_password
     *
     * @param string|null $ssh_password SSH Password
     *
     * @return self
     */
    public function setSshPassword($ssh_password)
    {
        $this->container['ssh_password'] = $ssh_password;

        return $this;
    }

    /**
     * Gets ssh_key
     *
     * @return string|null
     */
    public function getSshKey()
    {
        return $this->container['ssh_key'];
    }

    /**
     * Sets ssh_key
     *
     * @param string|null $ssh_key SSH Key
     *
     * @return self
     */
    public function setSshKey($ssh_key)
    {
        $this->container['ssh_key'] = $ssh_key;

        return $this;
    }

    /**
     * Gets os_type
     *
     * @return OneOfObjectString|null
     */
    public function getOsType()
    {
        return $this->container['os_type'];
    }

    /**
     * Sets os_type
     *
     * @param OneOfObjectString|null $os_type A Map containing the id of the OS Type. This can also be passed as a string (code or name) instead.
     *
     * @return self
     */
    public function setOsType($os_type)
    {
        $this->container['os_type'] = $os_type;

        return $this;
    }

    /**
     * Gets visibility
     *
     * @return string|null
     */
    public function getVisibility()
    {
        return $this->container['visibility'];
    }

    /**
     * Sets visibility
     *
     * @param string|null $visibility private or public
     *
     * @return self
     */
    public function setVisibility($visibility)
    {
        $this->container['visibility'] = $visibility;

        return $this;
    }

    /**
     * Gets accounts
     *
     * @return int[]|null
     */
    public function getAccounts()
    {
        return $this->container['accounts'];
    }

    /**
     * Sets accounts
     *
     * @param int[]|null $accounts accounts
     *
     * @return self
     */
    public function setAccounts($accounts)
    {
        $this->container['accounts'] = $accounts;

        return $this;
    }

    /**
     * Gets is_auto_join_domain
     *
     * @return bool|null
     */
    public function getIsAutoJoinDomain()
    {
        return $this->container['is_auto_join_domain'];
    }

    /**
     * Sets is_auto_join_domain
     *
     * @param bool|null $is_auto_join_domain Auto Join Domain?
     *
     * @return self
     */
    public function setIsAutoJoinDomain($is_auto_join_domain)
    {
        $this->container['is_auto_join_domain'] = $is_auto_join_domain;

        return $this;
    }

    /**
     * Gets virtio_supported
     *
     * @return bool|null
     */
    public function getVirtioSupported()
    {
        return $this->container['virtio_supported'];
    }

    /**
     * Sets virtio_supported
     *
     * @param bool|null $virtio_supported VirtIO Drivers Loaded?
     *
     * @return self
     */
    public function setVirtioSupported($virtio_supported)
    {
        $this->container['virtio_supported'] = $virtio_supported;

        return $this;
    }

    /**
     * Gets vm_tools_installed
     *
     * @return bool|null
     */
    public function getVmToolsInstalled()
    {
        return $this->container['vm_tools_installed'];
    }

    /**
     * Sets vm_tools_installed
     *
     * @param bool|null $vm_tools_installed VM Tools Installed?
     *
     * @return self
     */
    public function setVmToolsInstalled($vm_tools_installed)
    {
        $this->container['vm_tools_installed'] = $vm_tools_installed;

        return $this;
    }

    /**
     * Gets is_force_customization
     *
     * @return bool|null
     */
    public function getIsForceCustomization()
    {
        return $this->container['is_force_customization'];
    }

    /**
     * Sets is_force_customization
     *
     * @param bool|null $is_force_customization Force Guest Customization?
     *
     * @return self
     */
    public function setIsForceCustomization($is_force_customization)
    {
        $this->container['is_force_customization'] = $is_force_customization;

        return $this;
    }

    /**
     * Gets trial_version
     *
     * @return bool|null
     */
    public function getTrialVersion()
    {
        return $this->container['trial_version'];
    }

    /**
     * Sets trial_version
     *
     * @param bool|null $trial_version Trial Version
     *
     * @return self
     */
    public function setTrialVersion($trial_version)
    {
        $this->container['trial_version'] = $trial_version;

        return $this;
    }

    /**
     * Gets is_sysprep
     *
     * @return bool|null
     */
    public function getIsSysprep()
    {
        return $this->container['is_sysprep'];
    }

    /**
     * Sets is_sysprep
     *
     * @param bool|null $is_sysprep Sysprep Enabled?
     *
     * @return self
     */
    public function setIsSysprep($is_sysprep)
    {
        $this->container['is_sysprep'] = $is_sysprep;

        return $this;
    }

    /**
     * Gets config
     *
     * @return OneOfObjectObject|null
     */
    public function getConfig()
    {
        return $this->container['config'];
    }

    /**
     * Sets config
     *
     * @param OneOfObjectObject|null $config Map of configuration properties, varies by image type.
     *
     * @return self
     */
    public function setConfig($config)
    {
        $this->container['config'] = $config;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return \OpenAPI\Client\Model\VirtualImageCreateTags[]|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param \OpenAPI\Client\Model\VirtualImageCreateTags[]|null $tags Metadata tags, Array of objects having a name and value
     *
     * @return self
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


