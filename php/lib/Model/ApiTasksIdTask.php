<?php
/**
 * ApiTasksIdTask
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ApiTasksIdTask Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class ApiTasksIdTask implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_api_tasks__id__task';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'code' => 'string',
        'visibility' => 'string',
        'task_type' => '\OpenAPI\Client\Model\ApiTasksTaskTaskType',
        'labels' => 'string[]',
        'task_options' => 'object',
        'result_type' => 'string',
        'execute_target' => 'string',
        'retryable' => 'bool',
        'retry_count' => 'int',
        'retry_delay_seconds' => 'float',
        'file' => '\OpenAPI\Client\Model\ApiTasksTaskFile',
        'credential' => 'OneOfObjectObject'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'code' => null,
        'visibility' => null,
        'task_type' => null,
        'labels' => null,
        'task_options' => null,
        'result_type' => null,
        'execute_target' => null,
        'retryable' => null,
        'retry_count' => null,
        'retry_delay_seconds' => null,
        'file' => null,
        'credential' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'code' => 'code',
        'visibility' => 'visibility',
        'task_type' => 'taskType',
        'labels' => 'labels',
        'task_options' => 'taskOptions',
        'result_type' => 'resultType',
        'execute_target' => 'executeTarget',
        'retryable' => 'retryable',
        'retry_count' => 'retryCount',
        'retry_delay_seconds' => 'retryDelaySeconds',
        'file' => 'file',
        'credential' => 'credential'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'code' => 'setCode',
        'visibility' => 'setVisibility',
        'task_type' => 'setTaskType',
        'labels' => 'setLabels',
        'task_options' => 'setTaskOptions',
        'result_type' => 'setResultType',
        'execute_target' => 'setExecuteTarget',
        'retryable' => 'setRetryable',
        'retry_count' => 'setRetryCount',
        'retry_delay_seconds' => 'setRetryDelaySeconds',
        'file' => 'setFile',
        'credential' => 'setCredential'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'code' => 'getCode',
        'visibility' => 'getVisibility',
        'task_type' => 'getTaskType',
        'labels' => 'getLabels',
        'task_options' => 'getTaskOptions',
        'result_type' => 'getResultType',
        'execute_target' => 'getExecuteTarget',
        'retryable' => 'getRetryable',
        'retry_count' => 'getRetryCount',
        'retry_delay_seconds' => 'getRetryDelaySeconds',
        'file' => 'getFile',
        'credential' => 'getCredential'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const RESULT_TYPE_EXIT_CODE = 'exitCode';
    const RESULT_TYPE_KEY_VALUE = 'keyValue';
    const RESULT_TYPE_JSON = 'json';
    const EXECUTE_TARGET_LOCAL = 'local';
    const EXECUTE_TARGET_REMOTE = 'remote';
    const EXECUTE_TARGET_RESOURCE = 'resource';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getResultTypeAllowableValues()
    {
        return [
            self::RESULT_TYPE_EXIT_CODE,
            self::RESULT_TYPE_KEY_VALUE,
            self::RESULT_TYPE_JSON,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getExecuteTargetAllowableValues()
    {
        return [
            self::EXECUTE_TARGET_LOCAL,
            self::EXECUTE_TARGET_REMOTE,
            self::EXECUTE_TARGET_RESOURCE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['code'] = $data['code'] ?? null;
        $this->container['visibility'] = $data['visibility'] ?? 'private';
        $this->container['task_type'] = $data['task_type'] ?? null;
        $this->container['labels'] = $data['labels'] ?? null;
        $this->container['task_options'] = $data['task_options'] ?? null;
        $this->container['result_type'] = $data['result_type'] ?? null;
        $this->container['execute_target'] = $data['execute_target'] ?? null;
        $this->container['retryable'] = $data['retryable'] ?? false;
        $this->container['retry_count'] = $data['retry_count'] ?? null;
        $this->container['retry_delay_seconds'] = $data['retry_delay_seconds'] ?? null;
        $this->container['file'] = $data['file'] ?? null;
        $this->container['credential'] = $data['credential'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getResultTypeAllowableValues();
        if (!is_null($this->container['result_type']) && !in_array($this->container['result_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'result_type', must be one of '%s'",
                $this->container['result_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getExecuteTargetAllowableValues();
        if (!is_null($this->container['execute_target']) && !in_array($this->container['execute_target'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'execute_target', must be one of '%s'",
                $this->container['execute_target'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name A unique name for the task
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string|null
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string|null $code A unique code for the task
     *
     * @return self
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets visibility
     *
     * @return string|null
     */
    public function getVisibility()
    {
        return $this->container['visibility'];
    }

    /**
     * Sets visibility
     *
     * @param string|null $visibility Visibility
     *
     * @return self
     */
    public function setVisibility($visibility)
    {
        $this->container['visibility'] = $visibility;

        return $this;
    }

    /**
     * Gets task_type
     *
     * @return \OpenAPI\Client\Model\ApiTasksTaskTaskType|null
     */
    public function getTaskType()
    {
        return $this->container['task_type'];
    }

    /**
     * Sets task_type
     *
     * @param \OpenAPI\Client\Model\ApiTasksTaskTaskType|null $task_type task_type
     *
     * @return self
     */
    public function setTaskType($task_type)
    {
        $this->container['task_type'] = $task_type;

        return $this;
    }

    /**
     * Gets labels
     *
     * @return string[]|null
     */
    public function getLabels()
    {
        return $this->container['labels'];
    }

    /**
     * Sets labels
     *
     * @param string[]|null $labels An array of Category labels for filtering
     *
     * @return self
     */
    public function setLabels($labels)
    {
        $this->container['labels'] = $labels;

        return $this;
    }

    /**
     * Gets task_options
     *
     * @return object|null
     */
    public function getTaskOptions()
    {
        return $this->container['task_options'];
    }

    /**
     * Sets task_options
     *
     * @param object|null $task_options Map of options specific to each `task type`. eg. script
     *
     * @return self
     */
    public function setTaskOptions($task_options)
    {
        $this->container['task_options'] = $task_options;

        return $this;
    }

    /**
     * Gets result_type
     *
     * @return string|null
     */
    public function getResultType()
    {
        return $this->container['result_type'];
    }

    /**
     * Sets result_type
     *
     * @param string|null $result_type result_type
     *
     * @return self
     */
    public function setResultType($result_type)
    {
        $allowedValues = $this->getResultTypeAllowableValues();
        if (!is_null($result_type) && !in_array($result_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'result_type', must be one of '%s'",
                    $result_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['result_type'] = $result_type;

        return $this;
    }

    /**
     * Gets execute_target
     *
     * @return string|null
     */
    public function getExecuteTarget()
    {
        return $this->container['execute_target'];
    }

    /**
     * Sets execute_target
     *
     * @param string|null $execute_target The execution target. eg. local,remote,resource. The default value varies by task type.
     *
     * @return self
     */
    public function setExecuteTarget($execute_target)
    {
        $allowedValues = $this->getExecuteTargetAllowableValues();
        if (!is_null($execute_target) && !in_array($execute_target, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'execute_target', must be one of '%s'",
                    $execute_target,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['execute_target'] = $execute_target;

        return $this;
    }

    /**
     * Gets retryable
     *
     * @return bool|null
     */
    public function getRetryable()
    {
        return $this->container['retryable'];
    }

    /**
     * Sets retryable
     *
     * @param bool|null $retryable If the task should be retried or not.
     *
     * @return self
     */
    public function setRetryable($retryable)
    {
        $this->container['retryable'] = $retryable;

        return $this;
    }

    /**
     * Gets retry_count
     *
     * @return int|null
     */
    public function getRetryCount()
    {
        return $this->container['retry_count'];
    }

    /**
     * Sets retry_count
     *
     * @param int|null $retry_count The number of times to retry.
     *
     * @return self
     */
    public function setRetryCount($retry_count)
    {
        $this->container['retry_count'] = $retry_count;

        return $this;
    }

    /**
     * Gets retry_delay_seconds
     *
     * @return float|null
     */
    public function getRetryDelaySeconds()
    {
        return $this->container['retry_delay_seconds'];
    }

    /**
     * Sets retry_delay_seconds
     *
     * @param float|null $retry_delay_seconds The delay, between retries.
     *
     * @return self
     */
    public function setRetryDelaySeconds($retry_delay_seconds)
    {
        $this->container['retry_delay_seconds'] = $retry_delay_seconds;

        return $this;
    }

    /**
     * Gets file
     *
     * @return \OpenAPI\Client\Model\ApiTasksTaskFile|null
     */
    public function getFile()
    {
        return $this->container['file'];
    }

    /**
     * Sets file
     *
     * @param \OpenAPI\Client\Model\ApiTasksTaskFile|null $file file
     *
     * @return self
     */
    public function setFile($file)
    {
        $this->container['file'] = $file;

        return $this;
    }

    /**
     * Gets credential
     *
     * @return OneOfObjectObject|null
     */
    public function getCredential()
    {
        return $this->container['credential'];
    }

    /**
     * Sets credential
     *
     * @param OneOfObjectObject|null $credential Map containing Credential ID or the default {\"type\": \"local\"}  which means use the values set in the local task options username and password instead of associating a credential.
     *
     * @return self
     */
    public function setCredential($credential)
    {
        $this->container['credential'] = $credential;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


