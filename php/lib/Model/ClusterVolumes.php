<?php
/**
 * ClusterVolumes
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ClusterVolumes Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class ClusterVolumes implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'clusterVolumes';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'internal_id' => 'string',
        'display_order' => 'int',
        'active' => 'bool',
        'used_storage' => 'int',
        'provision_type' => 'string',
        'resizeable' => 'bool',
        'online' => 'bool',
        'device_display_name' => 'string',
        'ref_type' => 'string',
        'name' => 'string',
        'external_id' => 'string',
        'datastore_option' => 'string',
        'claim_name' => 'string',
        'volume_type' => 'string',
        'device_name' => 'string',
        'removable' => 'bool',
        'pool_name' => 'string',
        'read_only' => 'bool',
        'source_id' => 'string',
        'zone_id' => 'int',
        'root_volume' => 'bool',
        'ref_id' => 'int',
        'category' => 'string',
        'status' => 'string',
        'raw_data' => 'string',
        'max_storage' => 'int',
        'account' => '\OpenAPI\Client\Model\ApiBlueprintsIdUpdatePermissionsResourcePermissionSites',
        'type' => '\OpenAPI\Client\Model\ApiBlueprintsIdUpdatePermissionsResourcePermissionSites',
        'datastore' => '\OpenAPI\Client\Model\ApiBlueprintsIdUpdatePermissionsResourcePermissionSites'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'internal_id' => null,
        'display_order' => 'int64',
        'active' => null,
        'used_storage' => 'int64',
        'provision_type' => null,
        'resizeable' => null,
        'online' => null,
        'device_display_name' => null,
        'ref_type' => null,
        'name' => null,
        'external_id' => null,
        'datastore_option' => null,
        'claim_name' => null,
        'volume_type' => null,
        'device_name' => null,
        'removable' => null,
        'pool_name' => null,
        'read_only' => null,
        'source_id' => null,
        'zone_id' => 'int64',
        'root_volume' => null,
        'ref_id' => 'int64',
        'category' => null,
        'status' => null,
        'raw_data' => null,
        'max_storage' => 'int64',
        'account' => null,
        'type' => null,
        'datastore' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'internal_id' => 'internalId',
        'display_order' => 'displayOrder',
        'active' => 'active',
        'used_storage' => 'usedStorage',
        'provision_type' => 'provisionType',
        'resizeable' => 'resizeable',
        'online' => 'online',
        'device_display_name' => 'deviceDisplayName',
        'ref_type' => 'refType',
        'name' => 'name',
        'external_id' => 'externalId',
        'datastore_option' => 'datastoreOption',
        'claim_name' => 'claimName',
        'volume_type' => 'volumeType',
        'device_name' => 'deviceName',
        'removable' => 'removable',
        'pool_name' => 'poolName',
        'read_only' => 'readOnly',
        'source_id' => 'sourceId',
        'zone_id' => 'zoneId',
        'root_volume' => 'rootVolume',
        'ref_id' => 'refId',
        'category' => 'category',
        'status' => 'status',
        'raw_data' => 'rawData',
        'max_storage' => 'maxStorage',
        'account' => 'account',
        'type' => 'type',
        'datastore' => 'datastore'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'internal_id' => 'setInternalId',
        'display_order' => 'setDisplayOrder',
        'active' => 'setActive',
        'used_storage' => 'setUsedStorage',
        'provision_type' => 'setProvisionType',
        'resizeable' => 'setResizeable',
        'online' => 'setOnline',
        'device_display_name' => 'setDeviceDisplayName',
        'ref_type' => 'setRefType',
        'name' => 'setName',
        'external_id' => 'setExternalId',
        'datastore_option' => 'setDatastoreOption',
        'claim_name' => 'setClaimName',
        'volume_type' => 'setVolumeType',
        'device_name' => 'setDeviceName',
        'removable' => 'setRemovable',
        'pool_name' => 'setPoolName',
        'read_only' => 'setReadOnly',
        'source_id' => 'setSourceId',
        'zone_id' => 'setZoneId',
        'root_volume' => 'setRootVolume',
        'ref_id' => 'setRefId',
        'category' => 'setCategory',
        'status' => 'setStatus',
        'raw_data' => 'setRawData',
        'max_storage' => 'setMaxStorage',
        'account' => 'setAccount',
        'type' => 'setType',
        'datastore' => 'setDatastore'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'internal_id' => 'getInternalId',
        'display_order' => 'getDisplayOrder',
        'active' => 'getActive',
        'used_storage' => 'getUsedStorage',
        'provision_type' => 'getProvisionType',
        'resizeable' => 'getResizeable',
        'online' => 'getOnline',
        'device_display_name' => 'getDeviceDisplayName',
        'ref_type' => 'getRefType',
        'name' => 'getName',
        'external_id' => 'getExternalId',
        'datastore_option' => 'getDatastoreOption',
        'claim_name' => 'getClaimName',
        'volume_type' => 'getVolumeType',
        'device_name' => 'getDeviceName',
        'removable' => 'getRemovable',
        'pool_name' => 'getPoolName',
        'read_only' => 'getReadOnly',
        'source_id' => 'getSourceId',
        'zone_id' => 'getZoneId',
        'root_volume' => 'getRootVolume',
        'ref_id' => 'getRefId',
        'category' => 'getCategory',
        'status' => 'getStatus',
        'raw_data' => 'getRawData',
        'max_storage' => 'getMaxStorage',
        'account' => 'getAccount',
        'type' => 'getType',
        'datastore' => 'getDatastore'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['internal_id'] = $data['internal_id'] ?? null;
        $this->container['display_order'] = $data['display_order'] ?? null;
        $this->container['active'] = $data['active'] ?? null;
        $this->container['used_storage'] = $data['used_storage'] ?? null;
        $this->container['provision_type'] = $data['provision_type'] ?? null;
        $this->container['resizeable'] = $data['resizeable'] ?? null;
        $this->container['online'] = $data['online'] ?? null;
        $this->container['device_display_name'] = $data['device_display_name'] ?? null;
        $this->container['ref_type'] = $data['ref_type'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['external_id'] = $data['external_id'] ?? null;
        $this->container['datastore_option'] = $data['datastore_option'] ?? null;
        $this->container['claim_name'] = $data['claim_name'] ?? null;
        $this->container['volume_type'] = $data['volume_type'] ?? null;
        $this->container['device_name'] = $data['device_name'] ?? null;
        $this->container['removable'] = $data['removable'] ?? null;
        $this->container['pool_name'] = $data['pool_name'] ?? null;
        $this->container['read_only'] = $data['read_only'] ?? null;
        $this->container['source_id'] = $data['source_id'] ?? null;
        $this->container['zone_id'] = $data['zone_id'] ?? null;
        $this->container['root_volume'] = $data['root_volume'] ?? null;
        $this->container['ref_id'] = $data['ref_id'] ?? null;
        $this->container['category'] = $data['category'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['raw_data'] = $data['raw_data'] ?? null;
        $this->container['max_storage'] = $data['max_storage'] ?? null;
        $this->container['account'] = $data['account'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['datastore'] = $data['datastore'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets internal_id
     *
     * @return string|null
     */
    public function getInternalId()
    {
        return $this->container['internal_id'];
    }

    /**
     * Sets internal_id
     *
     * @param string|null $internal_id internal_id
     *
     * @return self
     */
    public function setInternalId($internal_id)
    {
        $this->container['internal_id'] = $internal_id;

        return $this;
    }

    /**
     * Gets display_order
     *
     * @return int|null
     */
    public function getDisplayOrder()
    {
        return $this->container['display_order'];
    }

    /**
     * Sets display_order
     *
     * @param int|null $display_order display_order
     *
     * @return self
     */
    public function setDisplayOrder($display_order)
    {
        $this->container['display_order'] = $display_order;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool|null
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool|null $active active
     *
     * @return self
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets used_storage
     *
     * @return int|null
     */
    public function getUsedStorage()
    {
        return $this->container['used_storage'];
    }

    /**
     * Sets used_storage
     *
     * @param int|null $used_storage used_storage
     *
     * @return self
     */
    public function setUsedStorage($used_storage)
    {
        $this->container['used_storage'] = $used_storage;

        return $this;
    }

    /**
     * Gets provision_type
     *
     * @return string|null
     */
    public function getProvisionType()
    {
        return $this->container['provision_type'];
    }

    /**
     * Sets provision_type
     *
     * @param string|null $provision_type provision_type
     *
     * @return self
     */
    public function setProvisionType($provision_type)
    {
        $this->container['provision_type'] = $provision_type;

        return $this;
    }

    /**
     * Gets resizeable
     *
     * @return bool|null
     */
    public function getResizeable()
    {
        return $this->container['resizeable'];
    }

    /**
     * Sets resizeable
     *
     * @param bool|null $resizeable resizeable
     *
     * @return self
     */
    public function setResizeable($resizeable)
    {
        $this->container['resizeable'] = $resizeable;

        return $this;
    }

    /**
     * Gets online
     *
     * @return bool|null
     */
    public function getOnline()
    {
        return $this->container['online'];
    }

    /**
     * Sets online
     *
     * @param bool|null $online online
     *
     * @return self
     */
    public function setOnline($online)
    {
        $this->container['online'] = $online;

        return $this;
    }

    /**
     * Gets device_display_name
     *
     * @return string|null
     */
    public function getDeviceDisplayName()
    {
        return $this->container['device_display_name'];
    }

    /**
     * Sets device_display_name
     *
     * @param string|null $device_display_name device_display_name
     *
     * @return self
     */
    public function setDeviceDisplayName($device_display_name)
    {
        $this->container['device_display_name'] = $device_display_name;

        return $this;
    }

    /**
     * Gets ref_type
     *
     * @return string|null
     */
    public function getRefType()
    {
        return $this->container['ref_type'];
    }

    /**
     * Sets ref_type
     *
     * @param string|null $ref_type ref_type
     *
     * @return self
     */
    public function setRefType($ref_type)
    {
        $this->container['ref_type'] = $ref_type;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string|null
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string|null $external_id external_id
     *
     * @return self
     */
    public function setExternalId($external_id)
    {
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets datastore_option
     *
     * @return string|null
     */
    public function getDatastoreOption()
    {
        return $this->container['datastore_option'];
    }

    /**
     * Sets datastore_option
     *
     * @param string|null $datastore_option datastore_option
     *
     * @return self
     */
    public function setDatastoreOption($datastore_option)
    {
        $this->container['datastore_option'] = $datastore_option;

        return $this;
    }

    /**
     * Gets claim_name
     *
     * @return string|null
     */
    public function getClaimName()
    {
        return $this->container['claim_name'];
    }

    /**
     * Sets claim_name
     *
     * @param string|null $claim_name claim_name
     *
     * @return self
     */
    public function setClaimName($claim_name)
    {
        $this->container['claim_name'] = $claim_name;

        return $this;
    }

    /**
     * Gets volume_type
     *
     * @return string|null
     */
    public function getVolumeType()
    {
        return $this->container['volume_type'];
    }

    /**
     * Sets volume_type
     *
     * @param string|null $volume_type volume_type
     *
     * @return self
     */
    public function setVolumeType($volume_type)
    {
        $this->container['volume_type'] = $volume_type;

        return $this;
    }

    /**
     * Gets device_name
     *
     * @return string|null
     */
    public function getDeviceName()
    {
        return $this->container['device_name'];
    }

    /**
     * Sets device_name
     *
     * @param string|null $device_name device_name
     *
     * @return self
     */
    public function setDeviceName($device_name)
    {
        $this->container['device_name'] = $device_name;

        return $this;
    }

    /**
     * Gets removable
     *
     * @return bool|null
     */
    public function getRemovable()
    {
        return $this->container['removable'];
    }

    /**
     * Sets removable
     *
     * @param bool|null $removable removable
     *
     * @return self
     */
    public function setRemovable($removable)
    {
        $this->container['removable'] = $removable;

        return $this;
    }

    /**
     * Gets pool_name
     *
     * @return string|null
     */
    public function getPoolName()
    {
        return $this->container['pool_name'];
    }

    /**
     * Sets pool_name
     *
     * @param string|null $pool_name pool_name
     *
     * @return self
     */
    public function setPoolName($pool_name)
    {
        $this->container['pool_name'] = $pool_name;

        return $this;
    }

    /**
     * Gets read_only
     *
     * @return bool|null
     */
    public function getReadOnly()
    {
        return $this->container['read_only'];
    }

    /**
     * Sets read_only
     *
     * @param bool|null $read_only read_only
     *
     * @return self
     */
    public function setReadOnly($read_only)
    {
        $this->container['read_only'] = $read_only;

        return $this;
    }

    /**
     * Gets source_id
     *
     * @return string|null
     */
    public function getSourceId()
    {
        return $this->container['source_id'];
    }

    /**
     * Sets source_id
     *
     * @param string|null $source_id source_id
     *
     * @return self
     */
    public function setSourceId($source_id)
    {
        $this->container['source_id'] = $source_id;

        return $this;
    }

    /**
     * Gets zone_id
     *
     * @return int|null
     */
    public function getZoneId()
    {
        return $this->container['zone_id'];
    }

    /**
     * Sets zone_id
     *
     * @param int|null $zone_id zone_id
     *
     * @return self
     */
    public function setZoneId($zone_id)
    {
        $this->container['zone_id'] = $zone_id;

        return $this;
    }

    /**
     * Gets root_volume
     *
     * @return bool|null
     */
    public function getRootVolume()
    {
        return $this->container['root_volume'];
    }

    /**
     * Sets root_volume
     *
     * @param bool|null $root_volume root_volume
     *
     * @return self
     */
    public function setRootVolume($root_volume)
    {
        $this->container['root_volume'] = $root_volume;

        return $this;
    }

    /**
     * Gets ref_id
     *
     * @return int|null
     */
    public function getRefId()
    {
        return $this->container['ref_id'];
    }

    /**
     * Sets ref_id
     *
     * @param int|null $ref_id ref_id
     *
     * @return self
     */
    public function setRefId($ref_id)
    {
        $this->container['ref_id'] = $ref_id;

        return $this;
    }

    /**
     * Gets category
     *
     * @return string|null
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param string|null $category category
     *
     * @return self
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets raw_data
     *
     * @return string|null
     */
    public function getRawData()
    {
        return $this->container['raw_data'];
    }

    /**
     * Sets raw_data
     *
     * @param string|null $raw_data raw_data
     *
     * @return self
     */
    public function setRawData($raw_data)
    {
        $this->container['raw_data'] = $raw_data;

        return $this;
    }

    /**
     * Gets max_storage
     *
     * @return int|null
     */
    public function getMaxStorage()
    {
        return $this->container['max_storage'];
    }

    /**
     * Sets max_storage
     *
     * @param int|null $max_storage max_storage
     *
     * @return self
     */
    public function setMaxStorage($max_storage)
    {
        $this->container['max_storage'] = $max_storage;

        return $this;
    }

    /**
     * Gets account
     *
     * @return \OpenAPI\Client\Model\ApiBlueprintsIdUpdatePermissionsResourcePermissionSites|null
     */
    public function getAccount()
    {
        return $this->container['account'];
    }

    /**
     * Sets account
     *
     * @param \OpenAPI\Client\Model\ApiBlueprintsIdUpdatePermissionsResourcePermissionSites|null $account account
     *
     * @return self
     */
    public function setAccount($account)
    {
        $this->container['account'] = $account;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \OpenAPI\Client\Model\ApiBlueprintsIdUpdatePermissionsResourcePermissionSites|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \OpenAPI\Client\Model\ApiBlueprintsIdUpdatePermissionsResourcePermissionSites|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets datastore
     *
     * @return \OpenAPI\Client\Model\ApiBlueprintsIdUpdatePermissionsResourcePermissionSites|null
     */
    public function getDatastore()
    {
        return $this->container['datastore'];
    }

    /**
     * Sets datastore
     *
     * @param \OpenAPI\Client\Model\ApiBlueprintsIdUpdatePermissionsResourcePermissionSites|null $datastore datastore
     *
     * @return self
     */
    public function setDatastore($datastore)
    {
        $this->container['datastore'] = $datastore;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


