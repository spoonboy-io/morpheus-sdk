<?php
/**
 * NetworkUpdate
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * NetworkUpdate Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class NetworkUpdate implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'networkUpdate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'display_name' => 'string',
        'labels' => 'string[]',
        'description' => 'string',
        'cidr' => 'string',
        'gateway' => 'string',
        'dns_primary' => 'string',
        'dns_secondary' => 'string',
        'vlan_id' => 'int',
        'pool' => 'int',
        'allow_static_override' => 'bool',
        'assign_public_ip' => 'bool',
        'active' => 'bool',
        'dhcp_server' => 'bool',
        'network_domain' => '\OpenAPI\Client\Model\NetworkCreateNetworkDomain',
        'search_domains' => 'string',
        'network_proxy' => '\OpenAPI\Client\Model\NetworkCreateNetworkProxy',
        'appliance_url_proxy_bypass' => 'bool',
        'no_proxy' => 'string',
        'visibility' => 'string',
        'config' => 'object',
        'tenants' => '\OpenAPI\Client\Model\ApiBlueprintsIdUpdatePermissionsResourcePermissionSites[]',
        'resource_permissions' => '\OpenAPI\Client\Model\NetworkCreateResourcePermissions'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'display_name' => null,
        'labels' => null,
        'description' => null,
        'cidr' => null,
        'gateway' => null,
        'dns_primary' => null,
        'dns_secondary' => null,
        'vlan_id' => 'int64',
        'pool' => 'int64',
        'allow_static_override' => null,
        'assign_public_ip' => null,
        'active' => null,
        'dhcp_server' => null,
        'network_domain' => null,
        'search_domains' => null,
        'network_proxy' => null,
        'appliance_url_proxy_bypass' => null,
        'no_proxy' => null,
        'visibility' => null,
        'config' => null,
        'tenants' => null,
        'resource_permissions' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'display_name' => 'displayName',
        'labels' => 'labels',
        'description' => 'description',
        'cidr' => 'cidr',
        'gateway' => 'gateway',
        'dns_primary' => 'dnsPrimary',
        'dns_secondary' => 'dnsSecondary',
        'vlan_id' => 'vlanId',
        'pool' => 'pool',
        'allow_static_override' => 'allowStaticOverride',
        'assign_public_ip' => 'assignPublicIp',
        'active' => 'active',
        'dhcp_server' => 'dhcpServer',
        'network_domain' => 'networkDomain',
        'search_domains' => 'searchDomains',
        'network_proxy' => 'networkProxy',
        'appliance_url_proxy_bypass' => 'applianceUrlProxyBypass',
        'no_proxy' => 'noProxy',
        'visibility' => 'visibility',
        'config' => 'config',
        'tenants' => 'tenants',
        'resource_permissions' => 'resourcePermissions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'display_name' => 'setDisplayName',
        'labels' => 'setLabels',
        'description' => 'setDescription',
        'cidr' => 'setCidr',
        'gateway' => 'setGateway',
        'dns_primary' => 'setDnsPrimary',
        'dns_secondary' => 'setDnsSecondary',
        'vlan_id' => 'setVlanId',
        'pool' => 'setPool',
        'allow_static_override' => 'setAllowStaticOverride',
        'assign_public_ip' => 'setAssignPublicIp',
        'active' => 'setActive',
        'dhcp_server' => 'setDhcpServer',
        'network_domain' => 'setNetworkDomain',
        'search_domains' => 'setSearchDomains',
        'network_proxy' => 'setNetworkProxy',
        'appliance_url_proxy_bypass' => 'setApplianceUrlProxyBypass',
        'no_proxy' => 'setNoProxy',
        'visibility' => 'setVisibility',
        'config' => 'setConfig',
        'tenants' => 'setTenants',
        'resource_permissions' => 'setResourcePermissions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'display_name' => 'getDisplayName',
        'labels' => 'getLabels',
        'description' => 'getDescription',
        'cidr' => 'getCidr',
        'gateway' => 'getGateway',
        'dns_primary' => 'getDnsPrimary',
        'dns_secondary' => 'getDnsSecondary',
        'vlan_id' => 'getVlanId',
        'pool' => 'getPool',
        'allow_static_override' => 'getAllowStaticOverride',
        'assign_public_ip' => 'getAssignPublicIp',
        'active' => 'getActive',
        'dhcp_server' => 'getDhcpServer',
        'network_domain' => 'getNetworkDomain',
        'search_domains' => 'getSearchDomains',
        'network_proxy' => 'getNetworkProxy',
        'appliance_url_proxy_bypass' => 'getApplianceUrlProxyBypass',
        'no_proxy' => 'getNoProxy',
        'visibility' => 'getVisibility',
        'config' => 'getConfig',
        'tenants' => 'getTenants',
        'resource_permissions' => 'getResourcePermissions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const VISIBILITY__PRIVATE = 'private';
    const VISIBILITY__PUBLIC = 'public';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVisibilityAllowableValues()
    {
        return [
            self::VISIBILITY__PRIVATE,
            self::VISIBILITY__PUBLIC,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['display_name'] = $data['display_name'] ?? null;
        $this->container['labels'] = $data['labels'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['cidr'] = $data['cidr'] ?? null;
        $this->container['gateway'] = $data['gateway'] ?? null;
        $this->container['dns_primary'] = $data['dns_primary'] ?? null;
        $this->container['dns_secondary'] = $data['dns_secondary'] ?? null;
        $this->container['vlan_id'] = $data['vlan_id'] ?? null;
        $this->container['pool'] = $data['pool'] ?? null;
        $this->container['allow_static_override'] = $data['allow_static_override'] ?? null;
        $this->container['assign_public_ip'] = $data['assign_public_ip'] ?? null;
        $this->container['active'] = $data['active'] ?? null;
        $this->container['dhcp_server'] = $data['dhcp_server'] ?? null;
        $this->container['network_domain'] = $data['network_domain'] ?? null;
        $this->container['search_domains'] = $data['search_domains'] ?? null;
        $this->container['network_proxy'] = $data['network_proxy'] ?? null;
        $this->container['appliance_url_proxy_bypass'] = $data['appliance_url_proxy_bypass'] ?? null;
        $this->container['no_proxy'] = $data['no_proxy'] ?? null;
        $this->container['visibility'] = $data['visibility'] ?? 'private';
        $this->container['config'] = $data['config'] ?? null;
        $this->container['tenants'] = $data['tenants'] ?? null;
        $this->container['resource_permissions'] = $data['resource_permissions'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getVisibilityAllowableValues();
        if (!is_null($this->container['visibility']) && !in_array($this->container['visibility'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'visibility', must be one of '%s'",
                $this->container['visibility'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets display_name
     *
     * @return string|null
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string|null $display_name Display Name
     *
     * @return self
     */
    public function setDisplayName($display_name)
    {
        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets labels
     *
     * @return string[]|null
     */
    public function getLabels()
    {
        return $this->container['labels'];
    }

    /**
     * Sets labels
     *
     * @param string[]|null $labels Array of label strings, can be used for filtering.
     *
     * @return self
     */
    public function setLabels($labels)
    {
        $this->container['labels'] = $labels;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Description
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets cidr
     *
     * @return string|null
     */
    public function getCidr()
    {
        return $this->container['cidr'];
    }

    /**
     * Sets cidr
     *
     * @param string|null $cidr CIDR Network
     *
     * @return self
     */
    public function setCidr($cidr)
    {
        $this->container['cidr'] = $cidr;

        return $this;
    }

    /**
     * Gets gateway
     *
     * @return string|null
     */
    public function getGateway()
    {
        return $this->container['gateway'];
    }

    /**
     * Sets gateway
     *
     * @param string|null $gateway Network Gateway
     *
     * @return self
     */
    public function setGateway($gateway)
    {
        $this->container['gateway'] = $gateway;

        return $this;
    }

    /**
     * Gets dns_primary
     *
     * @return string|null
     */
    public function getDnsPrimary()
    {
        return $this->container['dns_primary'];
    }

    /**
     * Sets dns_primary
     *
     * @param string|null $dns_primary Primary DNS Server
     *
     * @return self
     */
    public function setDnsPrimary($dns_primary)
    {
        $this->container['dns_primary'] = $dns_primary;

        return $this;
    }

    /**
     * Gets dns_secondary
     *
     * @return string|null
     */
    public function getDnsSecondary()
    {
        return $this->container['dns_secondary'];
    }

    /**
     * Sets dns_secondary
     *
     * @param string|null $dns_secondary Secondary DNS Server
     *
     * @return self
     */
    public function setDnsSecondary($dns_secondary)
    {
        $this->container['dns_secondary'] = $dns_secondary;

        return $this;
    }

    /**
     * Gets vlan_id
     *
     * @return int|null
     */
    public function getVlanId()
    {
        return $this->container['vlan_id'];
    }

    /**
     * Sets vlan_id
     *
     * @param int|null $vlan_id vlan_id
     *
     * @return self
     */
    public function setVlanId($vlan_id)
    {
        $this->container['vlan_id'] = $vlan_id;

        return $this;
    }

    /**
     * Gets pool
     *
     * @return int|null
     */
    public function getPool()
    {
        return $this->container['pool'];
    }

    /**
     * Sets pool
     *
     * @param int|null $pool Network Pool ID
     *
     * @return self
     */
    public function setPool($pool)
    {
        $this->container['pool'] = $pool;

        return $this;
    }

    /**
     * Gets allow_static_override
     *
     * @return bool|null
     */
    public function getAllowStaticOverride()
    {
        return $this->container['allow_static_override'];
    }

    /**
     * Sets allow_static_override
     *
     * @param bool|null $allow_static_override Allow IP Override
     *
     * @return self
     */
    public function setAllowStaticOverride($allow_static_override)
    {
        $this->container['allow_static_override'] = $allow_static_override;

        return $this;
    }

    /**
     * Gets assign_public_ip
     *
     * @return bool|null
     */
    public function getAssignPublicIp()
    {
        return $this->container['assign_public_ip'];
    }

    /**
     * Sets assign_public_ip
     *
     * @param bool|null $assign_public_ip Assign Public IP
     *
     * @return self
     */
    public function setAssignPublicIp($assign_public_ip)
    {
        $this->container['assign_public_ip'] = $assign_public_ip;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool|null
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool|null $active Activate (true) or disable (false) the network
     *
     * @return self
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets dhcp_server
     *
     * @return bool|null
     */
    public function getDhcpServer()
    {
        return $this->container['dhcp_server'];
    }

    /**
     * Sets dhcp_server
     *
     * @param bool|null $dhcp_server DHCP Server enabled network
     *
     * @return self
     */
    public function setDhcpServer($dhcp_server)
    {
        $this->container['dhcp_server'] = $dhcp_server;

        return $this;
    }

    /**
     * Gets network_domain
     *
     * @return \OpenAPI\Client\Model\NetworkCreateNetworkDomain|null
     */
    public function getNetworkDomain()
    {
        return $this->container['network_domain'];
    }

    /**
     * Sets network_domain
     *
     * @param \OpenAPI\Client\Model\NetworkCreateNetworkDomain|null $network_domain network_domain
     *
     * @return self
     */
    public function setNetworkDomain($network_domain)
    {
        $this->container['network_domain'] = $network_domain;

        return $this;
    }

    /**
     * Gets search_domains
     *
     * @return string|null
     */
    public function getSearchDomains()
    {
        return $this->container['search_domains'];
    }

    /**
     * Sets search_domains
     *
     * @param string|null $search_domains Search Domains
     *
     * @return self
     */
    public function setSearchDomains($search_domains)
    {
        $this->container['search_domains'] = $search_domains;

        return $this;
    }

    /**
     * Gets network_proxy
     *
     * @return \OpenAPI\Client\Model\NetworkCreateNetworkProxy|null
     */
    public function getNetworkProxy()
    {
        return $this->container['network_proxy'];
    }

    /**
     * Sets network_proxy
     *
     * @param \OpenAPI\Client\Model\NetworkCreateNetworkProxy|null $network_proxy network_proxy
     *
     * @return self
     */
    public function setNetworkProxy($network_proxy)
    {
        $this->container['network_proxy'] = $network_proxy;

        return $this;
    }

    /**
     * Gets appliance_url_proxy_bypass
     *
     * @return bool|null
     */
    public function getApplianceUrlProxyBypass()
    {
        return $this->container['appliance_url_proxy_bypass'];
    }

    /**
     * Sets appliance_url_proxy_bypass
     *
     * @param bool|null $appliance_url_proxy_bypass Bypass Proxy for Appliance URL
     *
     * @return self
     */
    public function setApplianceUrlProxyBypass($appliance_url_proxy_bypass)
    {
        $this->container['appliance_url_proxy_bypass'] = $appliance_url_proxy_bypass;

        return $this;
    }

    /**
     * Gets no_proxy
     *
     * @return string|null
     */
    public function getNoProxy()
    {
        return $this->container['no_proxy'];
    }

    /**
     * Sets no_proxy
     *
     * @param string|null $no_proxy Comma-separated list of ip addresses or name servers to exclude proxy traversal for. Typically locally routable servers are excluded.
     *
     * @return self
     */
    public function setNoProxy($no_proxy)
    {
        $this->container['no_proxy'] = $no_proxy;

        return $this;
    }

    /**
     * Gets visibility
     *
     * @return string|null
     */
    public function getVisibility()
    {
        return $this->container['visibility'];
    }

    /**
     * Sets visibility
     *
     * @param string|null $visibility Visibility, private or public.
     *
     * @return self
     */
    public function setVisibility($visibility)
    {
        $allowedValues = $this->getVisibilityAllowableValues();
        if (!is_null($visibility) && !in_array($visibility, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'visibility', must be one of '%s'",
                    $visibility,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['visibility'] = $visibility;

        return $this;
    }

    /**
     * Gets config
     *
     * @return object|null
     */
    public function getConfig()
    {
        return $this->container['config'];
    }

    /**
     * Sets config
     *
     * @param object|null $config Configuration object. Settings vary by type.
     *
     * @return self
     */
    public function setConfig($config)
    {
        $this->container['config'] = $config;

        return $this;
    }

    /**
     * Gets tenants
     *
     * @return \OpenAPI\Client\Model\ApiBlueprintsIdUpdatePermissionsResourcePermissionSites[]|null
     */
    public function getTenants()
    {
        return $this->container['tenants'];
    }

    /**
     * Sets tenants
     *
     * @param \OpenAPI\Client\Model\ApiBlueprintsIdUpdatePermissionsResourcePermissionSites[]|null $tenants Array of tenant account ids that are allowed access
     *
     * @return self
     */
    public function setTenants($tenants)
    {
        $this->container['tenants'] = $tenants;

        return $this;
    }

    /**
     * Gets resource_permissions
     *
     * @return \OpenAPI\Client\Model\NetworkCreateResourcePermissions|null
     */
    public function getResourcePermissions()
    {
        return $this->container['resource_permissions'];
    }

    /**
     * Sets resource_permissions
     *
     * @param \OpenAPI\Client\Model\NetworkCreateResourcePermissions|null $resource_permissions resource_permissions
     *
     * @return self
     */
    public function setResourcePermissions($resource_permissions)
    {
        $this->container['resource_permissions'] = $resource_permissions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


