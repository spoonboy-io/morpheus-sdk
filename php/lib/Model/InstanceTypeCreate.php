<?php
/**
 * InstanceTypeCreate
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * InstanceTypeCreate Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InstanceTypeCreate implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'instanceTypeCreate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'labels' => 'string[]',
        'description' => 'string',
        'code' => 'string',
        'category' => 'string',
        'visibility' => 'string',
        'featured' => 'bool',
        'has_settings' => 'bool',
        'has_auto_scale' => 'bool',
        'has_deployment' => 'bool',
        'environment_prefix' => 'string',
        'environment_variables' => '\OpenAPI\Client\Model\ClusterLayoutCreateEnvironmentVariables[]',
        'price_sets' => '\OpenAPI\Client\Model\InstanceTypeCreatePriceSets[]',
        'option_types' => 'int[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'labels' => null,
        'description' => null,
        'code' => null,
        'category' => null,
        'visibility' => null,
        'featured' => null,
        'has_settings' => null,
        'has_auto_scale' => null,
        'has_deployment' => null,
        'environment_prefix' => null,
        'environment_variables' => null,
        'price_sets' => null,
        'option_types' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'labels' => 'labels',
        'description' => 'description',
        'code' => 'code',
        'category' => 'category',
        'visibility' => 'visibility',
        'featured' => 'featured',
        'has_settings' => 'hasSettings',
        'has_auto_scale' => 'hasAutoScale',
        'has_deployment' => 'hasDeployment',
        'environment_prefix' => 'environmentPrefix',
        'environment_variables' => 'environmentVariables',
        'price_sets' => 'priceSets',
        'option_types' => 'optionTypes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'labels' => 'setLabels',
        'description' => 'setDescription',
        'code' => 'setCode',
        'category' => 'setCategory',
        'visibility' => 'setVisibility',
        'featured' => 'setFeatured',
        'has_settings' => 'setHasSettings',
        'has_auto_scale' => 'setHasAutoScale',
        'has_deployment' => 'setHasDeployment',
        'environment_prefix' => 'setEnvironmentPrefix',
        'environment_variables' => 'setEnvironmentVariables',
        'price_sets' => 'setPriceSets',
        'option_types' => 'setOptionTypes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'labels' => 'getLabels',
        'description' => 'getDescription',
        'code' => 'getCode',
        'category' => 'getCategory',
        'visibility' => 'getVisibility',
        'featured' => 'getFeatured',
        'has_settings' => 'getHasSettings',
        'has_auto_scale' => 'getHasAutoScale',
        'has_deployment' => 'getHasDeployment',
        'environment_prefix' => 'getEnvironmentPrefix',
        'environment_variables' => 'getEnvironmentVariables',
        'price_sets' => 'getPriceSets',
        'option_types' => 'getOptionTypes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const VISIBILITY__PRIVATE = 'private';
    const VISIBILITY__PUBLIC = 'public';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVisibilityAllowableValues()
    {
        return [
            self::VISIBILITY__PRIVATE,
            self::VISIBILITY__PUBLIC,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['labels'] = $data['labels'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['code'] = $data['code'] ?? null;
        $this->container['category'] = $data['category'] ?? null;
        $this->container['visibility'] = $data['visibility'] ?? 'private';
        $this->container['featured'] = $data['featured'] ?? null;
        $this->container['has_settings'] = $data['has_settings'] ?? null;
        $this->container['has_auto_scale'] = $data['has_auto_scale'] ?? null;
        $this->container['has_deployment'] = $data['has_deployment'] ?? null;
        $this->container['environment_prefix'] = $data['environment_prefix'] ?? null;
        $this->container['environment_variables'] = $data['environment_variables'] ?? null;
        $this->container['price_sets'] = $data['price_sets'] ?? null;
        $this->container['option_types'] = $data['option_types'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        $allowedValues = $this->getVisibilityAllowableValues();
        if (!is_null($this->container['visibility']) && !in_array($this->container['visibility'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'visibility', must be one of '%s'",
                $this->container['visibility'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Instance type name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets labels
     *
     * @return string[]|null
     */
    public function getLabels()
    {
        return $this->container['labels'];
    }

    /**
     * Sets labels
     *
     * @param string[]|null $labels Array of label strings, can be used for filtering.
     *
     * @return self
     */
    public function setLabels($labels)
    {
        $this->container['labels'] = $labels;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Instance type description
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string|null
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string|null $code Instance type code
     *
     * @return self
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets category
     *
     * @return string|null
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param string|null $category Category
     *
     * @return self
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets visibility
     *
     * @return string|null
     */
    public function getVisibility()
    {
        return $this->container['visibility'];
    }

    /**
     * Sets visibility
     *
     * @param string|null $visibility Visibility
     *
     * @return self
     */
    public function setVisibility($visibility)
    {
        $allowedValues = $this->getVisibilityAllowableValues();
        if (!is_null($visibility) && !in_array($visibility, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'visibility', must be one of '%s'",
                    $visibility,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['visibility'] = $visibility;

        return $this;
    }

    /**
     * Gets featured
     *
     * @return bool|null
     */
    public function getFeatured()
    {
        return $this->container['featured'];
    }

    /**
     * Sets featured
     *
     * @param bool|null $featured Featured
     *
     * @return self
     */
    public function setFeatured($featured)
    {
        $this->container['featured'] = $featured;

        return $this;
    }

    /**
     * Gets has_settings
     *
     * @return bool|null
     */
    public function getHasSettings()
    {
        return $this->container['has_settings'];
    }

    /**
     * Sets has_settings
     *
     * @param bool|null $has_settings Enable Settings
     *
     * @return self
     */
    public function setHasSettings($has_settings)
    {
        $this->container['has_settings'] = $has_settings;

        return $this;
    }

    /**
     * Gets has_auto_scale
     *
     * @return bool|null
     */
    public function getHasAutoScale()
    {
        return $this->container['has_auto_scale'];
    }

    /**
     * Sets has_auto_scale
     *
     * @param bool|null $has_auto_scale Enable Scaling (Horizontal)
     *
     * @return self
     */
    public function setHasAutoScale($has_auto_scale)
    {
        $this->container['has_auto_scale'] = $has_auto_scale;

        return $this;
    }

    /**
     * Gets has_deployment
     *
     * @return bool|null
     */
    public function getHasDeployment()
    {
        return $this->container['has_deployment'];
    }

    /**
     * Sets has_deployment
     *
     * @param bool|null $has_deployment Supports Deployments
     *
     * @return self
     */
    public function setHasDeployment($has_deployment)
    {
        $this->container['has_deployment'] = $has_deployment;

        return $this;
    }

    /**
     * Gets environment_prefix
     *
     * @return string|null
     */
    public function getEnvironmentPrefix()
    {
        return $this->container['environment_prefix'];
    }

    /**
     * Sets environment_prefix
     *
     * @param string|null $environment_prefix Environment Prefix, can be used to make exported evars unique.
     *
     * @return self
     */
    public function setEnvironmentPrefix($environment_prefix)
    {
        $this->container['environment_prefix'] = $environment_prefix;

        return $this;
    }

    /**
     * Gets environment_variables
     *
     * @return \OpenAPI\Client\Model\ClusterLayoutCreateEnvironmentVariables[]|null
     */
    public function getEnvironmentVariables()
    {
        return $this->container['environment_variables'];
    }

    /**
     * Sets environment_variables
     *
     * @param \OpenAPI\Client\Model\ClusterLayoutCreateEnvironmentVariables[]|null $environment_variables Array of instance type env variables.
     *
     * @return self
     */
    public function setEnvironmentVariables($environment_variables)
    {
        $this->container['environment_variables'] = $environment_variables;

        return $this;
    }

    /**
     * Gets price_sets
     *
     * @return \OpenAPI\Client\Model\InstanceTypeCreatePriceSets[]|null
     */
    public function getPriceSets()
    {
        return $this->container['price_sets'];
    }

    /**
     * Sets price_sets
     *
     * @param \OpenAPI\Client\Model\InstanceTypeCreatePriceSets[]|null $price_sets Array of price set objects
     *
     * @return self
     */
    public function setPriceSets($price_sets)
    {
        $this->container['price_sets'] = $price_sets;

        return $this;
    }

    /**
     * Gets option_types
     *
     * @return int[]|null
     */
    public function getOptionTypes()
    {
        return $this->container['option_types'];
    }

    /**
     * Sets option_types
     *
     * @param int[]|null $option_types Array of instance type option type IDs
     *
     * @return self
     */
    public function setOptionTypes($option_types)
    {
        $this->container['option_types'] = $option_types;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


