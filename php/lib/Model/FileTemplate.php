<?php
/**
 * FileTemplate
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * FileTemplate Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class FileTemplate implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'fileTemplate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'code' => 'string',
        'account' => '\OpenAPI\Client\Model\InlineResponse20082LoadBalancerInstanceSslCert',
        'name' => 'string',
        'labels' => 'string[]',
        'file_name' => 'string',
        'file_path' => 'string',
        'template_type' => 'string',
        'template_phase' => 'string',
        'template' => 'string',
        'category' => 'string',
        'setting_category' => 'string',
        'setting_name' => 'string',
        'auto_run' => 'bool',
        'run_on_scale' => 'bool',
        'run_on_deploy' => 'bool',
        'file_owner' => 'string',
        'file_group' => 'string',
        'permissions' => 'string',
        'date_created' => '\DateTime',
        'last_updated' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'code' => null,
        'account' => null,
        'name' => null,
        'labels' => null,
        'file_name' => null,
        'file_path' => null,
        'template_type' => null,
        'template_phase' => null,
        'template' => null,
        'category' => null,
        'setting_category' => null,
        'setting_name' => null,
        'auto_run' => null,
        'run_on_scale' => null,
        'run_on_deploy' => null,
        'file_owner' => null,
        'file_group' => null,
        'permissions' => null,
        'date_created' => 'date-time',
        'last_updated' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'code' => 'code',
        'account' => 'account',
        'name' => 'name',
        'labels' => 'labels',
        'file_name' => 'fileName',
        'file_path' => 'filePath',
        'template_type' => 'templateType',
        'template_phase' => 'templatePhase',
        'template' => 'template',
        'category' => 'category',
        'setting_category' => 'settingCategory',
        'setting_name' => 'settingName',
        'auto_run' => 'autoRun',
        'run_on_scale' => 'runOnScale',
        'run_on_deploy' => 'runOnDeploy',
        'file_owner' => 'fileOwner',
        'file_group' => 'fileGroup',
        'permissions' => 'permissions',
        'date_created' => 'dateCreated',
        'last_updated' => 'lastUpdated'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'code' => 'setCode',
        'account' => 'setAccount',
        'name' => 'setName',
        'labels' => 'setLabels',
        'file_name' => 'setFileName',
        'file_path' => 'setFilePath',
        'template_type' => 'setTemplateType',
        'template_phase' => 'setTemplatePhase',
        'template' => 'setTemplate',
        'category' => 'setCategory',
        'setting_category' => 'setSettingCategory',
        'setting_name' => 'setSettingName',
        'auto_run' => 'setAutoRun',
        'run_on_scale' => 'setRunOnScale',
        'run_on_deploy' => 'setRunOnDeploy',
        'file_owner' => 'setFileOwner',
        'file_group' => 'setFileGroup',
        'permissions' => 'setPermissions',
        'date_created' => 'setDateCreated',
        'last_updated' => 'setLastUpdated'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'code' => 'getCode',
        'account' => 'getAccount',
        'name' => 'getName',
        'labels' => 'getLabels',
        'file_name' => 'getFileName',
        'file_path' => 'getFilePath',
        'template_type' => 'getTemplateType',
        'template_phase' => 'getTemplatePhase',
        'template' => 'getTemplate',
        'category' => 'getCategory',
        'setting_category' => 'getSettingCategory',
        'setting_name' => 'getSettingName',
        'auto_run' => 'getAutoRun',
        'run_on_scale' => 'getRunOnScale',
        'run_on_deploy' => 'getRunOnDeploy',
        'file_owner' => 'getFileOwner',
        'file_group' => 'getFileGroup',
        'permissions' => 'getPermissions',
        'date_created' => 'getDateCreated',
        'last_updated' => 'getLastUpdated'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['code'] = $data['code'] ?? null;
        $this->container['account'] = $data['account'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['labels'] = $data['labels'] ?? null;
        $this->container['file_name'] = $data['file_name'] ?? null;
        $this->container['file_path'] = $data['file_path'] ?? null;
        $this->container['template_type'] = $data['template_type'] ?? null;
        $this->container['template_phase'] = $data['template_phase'] ?? null;
        $this->container['template'] = $data['template'] ?? null;
        $this->container['category'] = $data['category'] ?? null;
        $this->container['setting_category'] = $data['setting_category'] ?? null;
        $this->container['setting_name'] = $data['setting_name'] ?? null;
        $this->container['auto_run'] = $data['auto_run'] ?? null;
        $this->container['run_on_scale'] = $data['run_on_scale'] ?? null;
        $this->container['run_on_deploy'] = $data['run_on_deploy'] ?? null;
        $this->container['file_owner'] = $data['file_owner'] ?? null;
        $this->container['file_group'] = $data['file_group'] ?? null;
        $this->container['permissions'] = $data['permissions'] ?? null;
        $this->container['date_created'] = $data['date_created'] ?? null;
        $this->container['last_updated'] = $data['last_updated'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string|null
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string|null $code code
     *
     * @return self
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets account
     *
     * @return \OpenAPI\Client\Model\InlineResponse20082LoadBalancerInstanceSslCert|null
     */
    public function getAccount()
    {
        return $this->container['account'];
    }

    /**
     * Sets account
     *
     * @param \OpenAPI\Client\Model\InlineResponse20082LoadBalancerInstanceSslCert|null $account account
     *
     * @return self
     */
    public function setAccount($account)
    {
        $this->container['account'] = $account;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets labels
     *
     * @return string[]|null
     */
    public function getLabels()
    {
        return $this->container['labels'];
    }

    /**
     * Sets labels
     *
     * @param string[]|null $labels labels
     *
     * @return self
     */
    public function setLabels($labels)
    {
        $this->container['labels'] = $labels;

        return $this;
    }

    /**
     * Gets file_name
     *
     * @return string|null
     */
    public function getFileName()
    {
        return $this->container['file_name'];
    }

    /**
     * Sets file_name
     *
     * @param string|null $file_name file_name
     *
     * @return self
     */
    public function setFileName($file_name)
    {
        $this->container['file_name'] = $file_name;

        return $this;
    }

    /**
     * Gets file_path
     *
     * @return string|null
     */
    public function getFilePath()
    {
        return $this->container['file_path'];
    }

    /**
     * Sets file_path
     *
     * @param string|null $file_path file_path
     *
     * @return self
     */
    public function setFilePath($file_path)
    {
        $this->container['file_path'] = $file_path;

        return $this;
    }

    /**
     * Gets template_type
     *
     * @return string|null
     */
    public function getTemplateType()
    {
        return $this->container['template_type'];
    }

    /**
     * Sets template_type
     *
     * @param string|null $template_type template_type
     *
     * @return self
     */
    public function setTemplateType($template_type)
    {
        $this->container['template_type'] = $template_type;

        return $this;
    }

    /**
     * Gets template_phase
     *
     * @return string|null
     */
    public function getTemplatePhase()
    {
        return $this->container['template_phase'];
    }

    /**
     * Sets template_phase
     *
     * @param string|null $template_phase template_phase
     *
     * @return self
     */
    public function setTemplatePhase($template_phase)
    {
        $this->container['template_phase'] = $template_phase;

        return $this;
    }

    /**
     * Gets template
     *
     * @return string|null
     */
    public function getTemplate()
    {
        return $this->container['template'];
    }

    /**
     * Sets template
     *
     * @param string|null $template template
     *
     * @return self
     */
    public function setTemplate($template)
    {
        $this->container['template'] = $template;

        return $this;
    }

    /**
     * Gets category
     *
     * @return string|null
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param string|null $category category
     *
     * @return self
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets setting_category
     *
     * @return string|null
     */
    public function getSettingCategory()
    {
        return $this->container['setting_category'];
    }

    /**
     * Sets setting_category
     *
     * @param string|null $setting_category setting_category
     *
     * @return self
     */
    public function setSettingCategory($setting_category)
    {
        $this->container['setting_category'] = $setting_category;

        return $this;
    }

    /**
     * Gets setting_name
     *
     * @return string|null
     */
    public function getSettingName()
    {
        return $this->container['setting_name'];
    }

    /**
     * Sets setting_name
     *
     * @param string|null $setting_name setting_name
     *
     * @return self
     */
    public function setSettingName($setting_name)
    {
        $this->container['setting_name'] = $setting_name;

        return $this;
    }

    /**
     * Gets auto_run
     *
     * @return bool|null
     */
    public function getAutoRun()
    {
        return $this->container['auto_run'];
    }

    /**
     * Sets auto_run
     *
     * @param bool|null $auto_run auto_run
     *
     * @return self
     */
    public function setAutoRun($auto_run)
    {
        $this->container['auto_run'] = $auto_run;

        return $this;
    }

    /**
     * Gets run_on_scale
     *
     * @return bool|null
     */
    public function getRunOnScale()
    {
        return $this->container['run_on_scale'];
    }

    /**
     * Sets run_on_scale
     *
     * @param bool|null $run_on_scale run_on_scale
     *
     * @return self
     */
    public function setRunOnScale($run_on_scale)
    {
        $this->container['run_on_scale'] = $run_on_scale;

        return $this;
    }

    /**
     * Gets run_on_deploy
     *
     * @return bool|null
     */
    public function getRunOnDeploy()
    {
        return $this->container['run_on_deploy'];
    }

    /**
     * Sets run_on_deploy
     *
     * @param bool|null $run_on_deploy run_on_deploy
     *
     * @return self
     */
    public function setRunOnDeploy($run_on_deploy)
    {
        $this->container['run_on_deploy'] = $run_on_deploy;

        return $this;
    }

    /**
     * Gets file_owner
     *
     * @return string|null
     */
    public function getFileOwner()
    {
        return $this->container['file_owner'];
    }

    /**
     * Sets file_owner
     *
     * @param string|null $file_owner file_owner
     *
     * @return self
     */
    public function setFileOwner($file_owner)
    {
        $this->container['file_owner'] = $file_owner;

        return $this;
    }

    /**
     * Gets file_group
     *
     * @return string|null
     */
    public function getFileGroup()
    {
        return $this->container['file_group'];
    }

    /**
     * Sets file_group
     *
     * @param string|null $file_group file_group
     *
     * @return self
     */
    public function setFileGroup($file_group)
    {
        $this->container['file_group'] = $file_group;

        return $this;
    }

    /**
     * Gets permissions
     *
     * @return string|null
     */
    public function getPermissions()
    {
        return $this->container['permissions'];
    }

    /**
     * Sets permissions
     *
     * @param string|null $permissions permissions
     *
     * @return self
     */
    public function setPermissions($permissions)
    {
        $this->container['permissions'] = $permissions;

        return $this;
    }

    /**
     * Gets date_created
     *
     * @return \DateTime|null
     */
    public function getDateCreated()
    {
        return $this->container['date_created'];
    }

    /**
     * Sets date_created
     *
     * @param \DateTime|null $date_created date_created
     *
     * @return self
     */
    public function setDateCreated($date_created)
    {
        $this->container['date_created'] = $date_created;

        return $this;
    }

    /**
     * Gets last_updated
     *
     * @return \DateTime|null
     */
    public function getLastUpdated()
    {
        return $this->container['last_updated'];
    }

    /**
     * Sets last_updated
     *
     * @param \DateTime|null $last_updated last_updated
     *
     * @return self
     */
    public function setLastUpdated($last_updated)
    {
        $this->container['last_updated'] = $last_updated;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


