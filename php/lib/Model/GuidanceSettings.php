<?php
/**
 * GuidanceSettings
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * GuidanceSettings Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class GuidanceSettings implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'guidanceSettings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'cpu_avg_cutoff_power' => 'int',
        'cpu_max_cutoff_power' => 'int',
        'network_cutoff_power' => 'int',
        'cpu_up_avg_standard_cutoff_right_size' => 'int',
        'cpu_up_max_standard_cutoff_right_size' => 'int',
        'memory_up_avg_standard_cutoff_right_size' => 'int',
        'memory_down_avg_standard_cutoff_right_size' => 'int',
        'memory_down_max_standard_cutoff_right_size' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'cpu_avg_cutoff_power' => 'int32',
        'cpu_max_cutoff_power' => 'int32',
        'network_cutoff_power' => 'int32',
        'cpu_up_avg_standard_cutoff_right_size' => 'int32',
        'cpu_up_max_standard_cutoff_right_size' => 'int32',
        'memory_up_avg_standard_cutoff_right_size' => 'int32',
        'memory_down_avg_standard_cutoff_right_size' => 'int32',
        'memory_down_max_standard_cutoff_right_size' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cpu_avg_cutoff_power' => 'cpuAvgCutoffPower',
        'cpu_max_cutoff_power' => 'cpuMaxCutoffPower',
        'network_cutoff_power' => 'networkCutoffPower',
        'cpu_up_avg_standard_cutoff_right_size' => 'cpuUpAvgStandardCutoffRightSize',
        'cpu_up_max_standard_cutoff_right_size' => 'cpuUpMaxStandardCutoffRightSize',
        'memory_up_avg_standard_cutoff_right_size' => 'memoryUpAvgStandardCutoffRightSize',
        'memory_down_avg_standard_cutoff_right_size' => 'memoryDownAvgStandardCutoffRightSize',
        'memory_down_max_standard_cutoff_right_size' => 'memoryDownMaxStandardCutoffRightSize'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cpu_avg_cutoff_power' => 'setCpuAvgCutoffPower',
        'cpu_max_cutoff_power' => 'setCpuMaxCutoffPower',
        'network_cutoff_power' => 'setNetworkCutoffPower',
        'cpu_up_avg_standard_cutoff_right_size' => 'setCpuUpAvgStandardCutoffRightSize',
        'cpu_up_max_standard_cutoff_right_size' => 'setCpuUpMaxStandardCutoffRightSize',
        'memory_up_avg_standard_cutoff_right_size' => 'setMemoryUpAvgStandardCutoffRightSize',
        'memory_down_avg_standard_cutoff_right_size' => 'setMemoryDownAvgStandardCutoffRightSize',
        'memory_down_max_standard_cutoff_right_size' => 'setMemoryDownMaxStandardCutoffRightSize'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cpu_avg_cutoff_power' => 'getCpuAvgCutoffPower',
        'cpu_max_cutoff_power' => 'getCpuMaxCutoffPower',
        'network_cutoff_power' => 'getNetworkCutoffPower',
        'cpu_up_avg_standard_cutoff_right_size' => 'getCpuUpAvgStandardCutoffRightSize',
        'cpu_up_max_standard_cutoff_right_size' => 'getCpuUpMaxStandardCutoffRightSize',
        'memory_up_avg_standard_cutoff_right_size' => 'getMemoryUpAvgStandardCutoffRightSize',
        'memory_down_avg_standard_cutoff_right_size' => 'getMemoryDownAvgStandardCutoffRightSize',
        'memory_down_max_standard_cutoff_right_size' => 'getMemoryDownMaxStandardCutoffRightSize'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cpu_avg_cutoff_power'] = $data['cpu_avg_cutoff_power'] ?? null;
        $this->container['cpu_max_cutoff_power'] = $data['cpu_max_cutoff_power'] ?? null;
        $this->container['network_cutoff_power'] = $data['network_cutoff_power'] ?? null;
        $this->container['cpu_up_avg_standard_cutoff_right_size'] = $data['cpu_up_avg_standard_cutoff_right_size'] ?? null;
        $this->container['cpu_up_max_standard_cutoff_right_size'] = $data['cpu_up_max_standard_cutoff_right_size'] ?? null;
        $this->container['memory_up_avg_standard_cutoff_right_size'] = $data['memory_up_avg_standard_cutoff_right_size'] ?? null;
        $this->container['memory_down_avg_standard_cutoff_right_size'] = $data['memory_down_avg_standard_cutoff_right_size'] ?? null;
        $this->container['memory_down_max_standard_cutoff_right_size'] = $data['memory_down_max_standard_cutoff_right_size'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cpu_avg_cutoff_power
     *
     * @return int|null
     */
    public function getCpuAvgCutoffPower()
    {
        return $this->container['cpu_avg_cutoff_power'];
    }

    /**
     * Sets cpu_avg_cutoff_power
     *
     * @param int|null $cpu_avg_cutoff_power Power Shutdown Average CPU (%). Lower limit for average CPU usage
     *
     * @return self
     */
    public function setCpuAvgCutoffPower($cpu_avg_cutoff_power)
    {
        $this->container['cpu_avg_cutoff_power'] = $cpu_avg_cutoff_power;

        return $this;
    }

    /**
     * Gets cpu_max_cutoff_power
     *
     * @return int|null
     */
    public function getCpuMaxCutoffPower()
    {
        return $this->container['cpu_max_cutoff_power'];
    }

    /**
     * Sets cpu_max_cutoff_power
     *
     * @param int|null $cpu_max_cutoff_power Power Shutdown Maximum CPU (%). Lower limit for peak CPU usage
     *
     * @return self
     */
    public function setCpuMaxCutoffPower($cpu_max_cutoff_power)
    {
        $this->container['cpu_max_cutoff_power'] = $cpu_max_cutoff_power;

        return $this;
    }

    /**
     * Gets network_cutoff_power
     *
     * @return int|null
     */
    public function getNetworkCutoffPower()
    {
        return $this->container['network_cutoff_power'];
    }

    /**
     * Sets network_cutoff_power
     *
     * @param int|null $network_cutoff_power Power Shutdown Network threshold (bytes). Lower limit for average network bandwidth
     *
     * @return self
     */
    public function setNetworkCutoffPower($network_cutoff_power)
    {
        $this->container['network_cutoff_power'] = $network_cutoff_power;

        return $this;
    }

    /**
     * Gets cpu_up_avg_standard_cutoff_right_size
     *
     * @return int|null
     */
    public function getCpuUpAvgStandardCutoffRightSize()
    {
        return $this->container['cpu_up_avg_standard_cutoff_right_size'];
    }

    /**
     * Sets cpu_up_avg_standard_cutoff_right_size
     *
     * @param int|null $cpu_up_avg_standard_cutoff_right_size CPU Up-size Average CPU (%). Upper limit for CPU usage
     *
     * @return self
     */
    public function setCpuUpAvgStandardCutoffRightSize($cpu_up_avg_standard_cutoff_right_size)
    {
        $this->container['cpu_up_avg_standard_cutoff_right_size'] = $cpu_up_avg_standard_cutoff_right_size;

        return $this;
    }

    /**
     * Gets cpu_up_max_standard_cutoff_right_size
     *
     * @return int|null
     */
    public function getCpuUpMaxStandardCutoffRightSize()
    {
        return $this->container['cpu_up_max_standard_cutoff_right_size'];
    }

    /**
     * Sets cpu_up_max_standard_cutoff_right_size
     *
     * @param int|null $cpu_up_max_standard_cutoff_right_size CPU Up-size Maximum CPU (%). Upper limit for peak CPU usage
     *
     * @return self
     */
    public function setCpuUpMaxStandardCutoffRightSize($cpu_up_max_standard_cutoff_right_size)
    {
        $this->container['cpu_up_max_standard_cutoff_right_size'] = $cpu_up_max_standard_cutoff_right_size;

        return $this;
    }

    /**
     * Gets memory_up_avg_standard_cutoff_right_size
     *
     * @return int|null
     */
    public function getMemoryUpAvgStandardCutoffRightSize()
    {
        return $this->container['memory_up_avg_standard_cutoff_right_size'];
    }

    /**
     * Sets memory_up_avg_standard_cutoff_right_size
     *
     * @param int|null $memory_up_avg_standard_cutoff_right_size Memory Up-size Minimum Free Memory (%). Lower limit for average free memory usage
     *
     * @return self
     */
    public function setMemoryUpAvgStandardCutoffRightSize($memory_up_avg_standard_cutoff_right_size)
    {
        $this->container['memory_up_avg_standard_cutoff_right_size'] = $memory_up_avg_standard_cutoff_right_size;

        return $this;
    }

    /**
     * Gets memory_down_avg_standard_cutoff_right_size
     *
     * @return int|null
     */
    public function getMemoryDownAvgStandardCutoffRightSize()
    {
        return $this->container['memory_down_avg_standard_cutoff_right_size'];
    }

    /**
     * Sets memory_down_avg_standard_cutoff_right_size
     *
     * @param int|null $memory_down_avg_standard_cutoff_right_size Memory Down-size Maximum Free Memory (%). Upper limit for average free memory
     *
     * @return self
     */
    public function setMemoryDownAvgStandardCutoffRightSize($memory_down_avg_standard_cutoff_right_size)
    {
        $this->container['memory_down_avg_standard_cutoff_right_size'] = $memory_down_avg_standard_cutoff_right_size;

        return $this;
    }

    /**
     * Gets memory_down_max_standard_cutoff_right_size
     *
     * @return int|null
     */
    public function getMemoryDownMaxStandardCutoffRightSize()
    {
        return $this->container['memory_down_max_standard_cutoff_right_size'];
    }

    /**
     * Sets memory_down_max_standard_cutoff_right_size
     *
     * @param int|null $memory_down_max_standard_cutoff_right_size Memory Down-size Maximum Free Memory (%). Upper limit for peak memory usage
     *
     * @return self
     */
    public function setMemoryDownMaxStandardCutoffRightSize($memory_down_max_standard_cutoff_right_size)
    {
        $this->container['memory_down_max_standard_cutoff_right_size'] = $memory_down_max_standard_cutoff_right_size;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


