<?php
/**
 * InstanceServicePlan
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * InstanceServicePlan Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InstanceServicePlan implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'instanceServicePlan';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'name' => 'string',
        'value' => 'int',
        'code' => 'string',
        'max_storage' => 'int',
        'max_memory' => 'int',
        'max_cpu' => 'int',
        'max_cores' => 'int',
        'custom_cpu' => 'bool',
        'custom_max_memory' => 'bool',
        'custom_max_storage' => 'bool',
        'custom_max_data_storage' => 'bool',
        'custom_cores_per_socket' => 'bool',
        'cores_per_socket' => 'int',
        'storage_types' => '\OpenAPI\Client\Model\InstanceServicePlanStorageType[]',
        'root_storage_types' => '\OpenAPI\Client\Model\InstanceServicePlanStorageType[]',
        'add_volumes' => 'bool',
        'customize_volume' => 'bool',
        'root_disk_customizable' => 'bool',
        'no_disks' => 'bool',
        'has_datastore' => 'bool',
        'min_disk' => 'int',
        'max_disk' => 'string',
        'lvm_supported' => 'bool',
        'datastores' => '\OpenAPI\Client\Model\InstanceServicePlanDatastores',
        'supports_auto_datastore' => 'bool',
        'auto_options' => '\OpenAPI\Client\Model\InstanceServicePlanAutoOptions[]',
        'cpu_options' => 'object[]',
        'core_options' => 'object[]',
        'memory_options' => 'object[]',
        'root_custom_size_options' => 'object',
        'custom_size_options' => 'object',
        'custom_cores' => 'bool',
        'max_disks' => 'string',
        'memory_size_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int32',
        'name' => null,
        'value' => 'int32',
        'code' => null,
        'max_storage' => 'int64',
        'max_memory' => 'int32',
        'max_cpu' => 'int32',
        'max_cores' => 'int32',
        'custom_cpu' => null,
        'custom_max_memory' => null,
        'custom_max_storage' => null,
        'custom_max_data_storage' => null,
        'custom_cores_per_socket' => null,
        'cores_per_socket' => 'int32',
        'storage_types' => null,
        'root_storage_types' => null,
        'add_volumes' => null,
        'customize_volume' => null,
        'root_disk_customizable' => null,
        'no_disks' => null,
        'has_datastore' => null,
        'min_disk' => 'int32',
        'max_disk' => null,
        'lvm_supported' => null,
        'datastores' => null,
        'supports_auto_datastore' => null,
        'auto_options' => null,
        'cpu_options' => null,
        'core_options' => null,
        'memory_options' => null,
        'root_custom_size_options' => null,
        'custom_size_options' => null,
        'custom_cores' => null,
        'max_disks' => null,
        'memory_size_type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'value' => 'value',
        'code' => 'code',
        'max_storage' => 'maxStorage',
        'max_memory' => 'maxMemory',
        'max_cpu' => 'maxCpu',
        'max_cores' => 'maxCores',
        'custom_cpu' => 'customCpu',
        'custom_max_memory' => 'customMaxMemory',
        'custom_max_storage' => 'customMaxStorage',
        'custom_max_data_storage' => 'customMaxDataStorage',
        'custom_cores_per_socket' => 'customCoresPerSocket',
        'cores_per_socket' => 'coresPerSocket',
        'storage_types' => 'storageTypes',
        'root_storage_types' => 'rootStorageTypes',
        'add_volumes' => 'addVolumes',
        'customize_volume' => 'customizeVolume',
        'root_disk_customizable' => 'rootDiskCustomizable',
        'no_disks' => 'noDisks',
        'has_datastore' => 'hasDatastore',
        'min_disk' => 'minDisk',
        'max_disk' => 'maxDisk',
        'lvm_supported' => 'lvmSupported',
        'datastores' => 'datastores',
        'supports_auto_datastore' => 'supportsAutoDatastore',
        'auto_options' => 'autoOptions',
        'cpu_options' => 'cpuOptions',
        'core_options' => 'coreOptions',
        'memory_options' => 'memoryOptions',
        'root_custom_size_options' => 'rootCustomSizeOptions',
        'custom_size_options' => 'customSizeOptions',
        'custom_cores' => 'customCores',
        'max_disks' => 'maxDisks',
        'memory_size_type' => 'memorySizeType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'value' => 'setValue',
        'code' => 'setCode',
        'max_storage' => 'setMaxStorage',
        'max_memory' => 'setMaxMemory',
        'max_cpu' => 'setMaxCpu',
        'max_cores' => 'setMaxCores',
        'custom_cpu' => 'setCustomCpu',
        'custom_max_memory' => 'setCustomMaxMemory',
        'custom_max_storage' => 'setCustomMaxStorage',
        'custom_max_data_storage' => 'setCustomMaxDataStorage',
        'custom_cores_per_socket' => 'setCustomCoresPerSocket',
        'cores_per_socket' => 'setCoresPerSocket',
        'storage_types' => 'setStorageTypes',
        'root_storage_types' => 'setRootStorageTypes',
        'add_volumes' => 'setAddVolumes',
        'customize_volume' => 'setCustomizeVolume',
        'root_disk_customizable' => 'setRootDiskCustomizable',
        'no_disks' => 'setNoDisks',
        'has_datastore' => 'setHasDatastore',
        'min_disk' => 'setMinDisk',
        'max_disk' => 'setMaxDisk',
        'lvm_supported' => 'setLvmSupported',
        'datastores' => 'setDatastores',
        'supports_auto_datastore' => 'setSupportsAutoDatastore',
        'auto_options' => 'setAutoOptions',
        'cpu_options' => 'setCpuOptions',
        'core_options' => 'setCoreOptions',
        'memory_options' => 'setMemoryOptions',
        'root_custom_size_options' => 'setRootCustomSizeOptions',
        'custom_size_options' => 'setCustomSizeOptions',
        'custom_cores' => 'setCustomCores',
        'max_disks' => 'setMaxDisks',
        'memory_size_type' => 'setMemorySizeType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'value' => 'getValue',
        'code' => 'getCode',
        'max_storage' => 'getMaxStorage',
        'max_memory' => 'getMaxMemory',
        'max_cpu' => 'getMaxCpu',
        'max_cores' => 'getMaxCores',
        'custom_cpu' => 'getCustomCpu',
        'custom_max_memory' => 'getCustomMaxMemory',
        'custom_max_storage' => 'getCustomMaxStorage',
        'custom_max_data_storage' => 'getCustomMaxDataStorage',
        'custom_cores_per_socket' => 'getCustomCoresPerSocket',
        'cores_per_socket' => 'getCoresPerSocket',
        'storage_types' => 'getStorageTypes',
        'root_storage_types' => 'getRootStorageTypes',
        'add_volumes' => 'getAddVolumes',
        'customize_volume' => 'getCustomizeVolume',
        'root_disk_customizable' => 'getRootDiskCustomizable',
        'no_disks' => 'getNoDisks',
        'has_datastore' => 'getHasDatastore',
        'min_disk' => 'getMinDisk',
        'max_disk' => 'getMaxDisk',
        'lvm_supported' => 'getLvmSupported',
        'datastores' => 'getDatastores',
        'supports_auto_datastore' => 'getSupportsAutoDatastore',
        'auto_options' => 'getAutoOptions',
        'cpu_options' => 'getCpuOptions',
        'core_options' => 'getCoreOptions',
        'memory_options' => 'getMemoryOptions',
        'root_custom_size_options' => 'getRootCustomSizeOptions',
        'custom_size_options' => 'getCustomSizeOptions',
        'custom_cores' => 'getCustomCores',
        'max_disks' => 'getMaxDisks',
        'memory_size_type' => 'getMemorySizeType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['value'] = $data['value'] ?? null;
        $this->container['code'] = $data['code'] ?? null;
        $this->container['max_storage'] = $data['max_storage'] ?? null;
        $this->container['max_memory'] = $data['max_memory'] ?? null;
        $this->container['max_cpu'] = $data['max_cpu'] ?? null;
        $this->container['max_cores'] = $data['max_cores'] ?? null;
        $this->container['custom_cpu'] = $data['custom_cpu'] ?? null;
        $this->container['custom_max_memory'] = $data['custom_max_memory'] ?? null;
        $this->container['custom_max_storage'] = $data['custom_max_storage'] ?? null;
        $this->container['custom_max_data_storage'] = $data['custom_max_data_storage'] ?? null;
        $this->container['custom_cores_per_socket'] = $data['custom_cores_per_socket'] ?? null;
        $this->container['cores_per_socket'] = $data['cores_per_socket'] ?? null;
        $this->container['storage_types'] = $data['storage_types'] ?? null;
        $this->container['root_storage_types'] = $data['root_storage_types'] ?? null;
        $this->container['add_volumes'] = $data['add_volumes'] ?? null;
        $this->container['customize_volume'] = $data['customize_volume'] ?? null;
        $this->container['root_disk_customizable'] = $data['root_disk_customizable'] ?? null;
        $this->container['no_disks'] = $data['no_disks'] ?? null;
        $this->container['has_datastore'] = $data['has_datastore'] ?? null;
        $this->container['min_disk'] = $data['min_disk'] ?? null;
        $this->container['max_disk'] = $data['max_disk'] ?? null;
        $this->container['lvm_supported'] = $data['lvm_supported'] ?? null;
        $this->container['datastores'] = $data['datastores'] ?? null;
        $this->container['supports_auto_datastore'] = $data['supports_auto_datastore'] ?? null;
        $this->container['auto_options'] = $data['auto_options'] ?? null;
        $this->container['cpu_options'] = $data['cpu_options'] ?? null;
        $this->container['core_options'] = $data['core_options'] ?? null;
        $this->container['memory_options'] = $data['memory_options'] ?? null;
        $this->container['root_custom_size_options'] = $data['root_custom_size_options'] ?? null;
        $this->container['custom_size_options'] = $data['custom_size_options'] ?? null;
        $this->container['custom_cores'] = $data['custom_cores'] ?? null;
        $this->container['max_disks'] = $data['max_disks'] ?? null;
        $this->container['memory_size_type'] = $data['memory_size_type'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets value
     *
     * @return int|null
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param int|null $value value
     *
     * @return self
     */
    public function setValue($value)
    {
        $this->container['value'] = $value;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string|null
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string|null $code code
     *
     * @return self
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets max_storage
     *
     * @return int|null
     */
    public function getMaxStorage()
    {
        return $this->container['max_storage'];
    }

    /**
     * Sets max_storage
     *
     * @param int|null $max_storage max_storage
     *
     * @return self
     */
    public function setMaxStorage($max_storage)
    {
        $this->container['max_storage'] = $max_storage;

        return $this;
    }

    /**
     * Gets max_memory
     *
     * @return int|null
     */
    public function getMaxMemory()
    {
        return $this->container['max_memory'];
    }

    /**
     * Sets max_memory
     *
     * @param int|null $max_memory max_memory
     *
     * @return self
     */
    public function setMaxMemory($max_memory)
    {
        $this->container['max_memory'] = $max_memory;

        return $this;
    }

    /**
     * Gets max_cpu
     *
     * @return int|null
     */
    public function getMaxCpu()
    {
        return $this->container['max_cpu'];
    }

    /**
     * Sets max_cpu
     *
     * @param int|null $max_cpu max_cpu
     *
     * @return self
     */
    public function setMaxCpu($max_cpu)
    {
        $this->container['max_cpu'] = $max_cpu;

        return $this;
    }

    /**
     * Gets max_cores
     *
     * @return int|null
     */
    public function getMaxCores()
    {
        return $this->container['max_cores'];
    }

    /**
     * Sets max_cores
     *
     * @param int|null $max_cores max_cores
     *
     * @return self
     */
    public function setMaxCores($max_cores)
    {
        $this->container['max_cores'] = $max_cores;

        return $this;
    }

    /**
     * Gets custom_cpu
     *
     * @return bool|null
     */
    public function getCustomCpu()
    {
        return $this->container['custom_cpu'];
    }

    /**
     * Sets custom_cpu
     *
     * @param bool|null $custom_cpu custom_cpu
     *
     * @return self
     */
    public function setCustomCpu($custom_cpu)
    {
        $this->container['custom_cpu'] = $custom_cpu;

        return $this;
    }

    /**
     * Gets custom_max_memory
     *
     * @return bool|null
     */
    public function getCustomMaxMemory()
    {
        return $this->container['custom_max_memory'];
    }

    /**
     * Sets custom_max_memory
     *
     * @param bool|null $custom_max_memory custom_max_memory
     *
     * @return self
     */
    public function setCustomMaxMemory($custom_max_memory)
    {
        $this->container['custom_max_memory'] = $custom_max_memory;

        return $this;
    }

    /**
     * Gets custom_max_storage
     *
     * @return bool|null
     */
    public function getCustomMaxStorage()
    {
        return $this->container['custom_max_storage'];
    }

    /**
     * Sets custom_max_storage
     *
     * @param bool|null $custom_max_storage custom_max_storage
     *
     * @return self
     */
    public function setCustomMaxStorage($custom_max_storage)
    {
        $this->container['custom_max_storage'] = $custom_max_storage;

        return $this;
    }

    /**
     * Gets custom_max_data_storage
     *
     * @return bool|null
     */
    public function getCustomMaxDataStorage()
    {
        return $this->container['custom_max_data_storage'];
    }

    /**
     * Sets custom_max_data_storage
     *
     * @param bool|null $custom_max_data_storage custom_max_data_storage
     *
     * @return self
     */
    public function setCustomMaxDataStorage($custom_max_data_storage)
    {
        $this->container['custom_max_data_storage'] = $custom_max_data_storage;

        return $this;
    }

    /**
     * Gets custom_cores_per_socket
     *
     * @return bool|null
     */
    public function getCustomCoresPerSocket()
    {
        return $this->container['custom_cores_per_socket'];
    }

    /**
     * Sets custom_cores_per_socket
     *
     * @param bool|null $custom_cores_per_socket custom_cores_per_socket
     *
     * @return self
     */
    public function setCustomCoresPerSocket($custom_cores_per_socket)
    {
        $this->container['custom_cores_per_socket'] = $custom_cores_per_socket;

        return $this;
    }

    /**
     * Gets cores_per_socket
     *
     * @return int|null
     */
    public function getCoresPerSocket()
    {
        return $this->container['cores_per_socket'];
    }

    /**
     * Sets cores_per_socket
     *
     * @param int|null $cores_per_socket cores_per_socket
     *
     * @return self
     */
    public function setCoresPerSocket($cores_per_socket)
    {
        $this->container['cores_per_socket'] = $cores_per_socket;

        return $this;
    }

    /**
     * Gets storage_types
     *
     * @return \OpenAPI\Client\Model\InstanceServicePlanStorageType[]|null
     */
    public function getStorageTypes()
    {
        return $this->container['storage_types'];
    }

    /**
     * Sets storage_types
     *
     * @param \OpenAPI\Client\Model\InstanceServicePlanStorageType[]|null $storage_types storage_types
     *
     * @return self
     */
    public function setStorageTypes($storage_types)
    {
        $this->container['storage_types'] = $storage_types;

        return $this;
    }

    /**
     * Gets root_storage_types
     *
     * @return \OpenAPI\Client\Model\InstanceServicePlanStorageType[]|null
     */
    public function getRootStorageTypes()
    {
        return $this->container['root_storage_types'];
    }

    /**
     * Sets root_storage_types
     *
     * @param \OpenAPI\Client\Model\InstanceServicePlanStorageType[]|null $root_storage_types root_storage_types
     *
     * @return self
     */
    public function setRootStorageTypes($root_storage_types)
    {
        $this->container['root_storage_types'] = $root_storage_types;

        return $this;
    }

    /**
     * Gets add_volumes
     *
     * @return bool|null
     */
    public function getAddVolumes()
    {
        return $this->container['add_volumes'];
    }

    /**
     * Sets add_volumes
     *
     * @param bool|null $add_volumes add_volumes
     *
     * @return self
     */
    public function setAddVolumes($add_volumes)
    {
        $this->container['add_volumes'] = $add_volumes;

        return $this;
    }

    /**
     * Gets customize_volume
     *
     * @return bool|null
     */
    public function getCustomizeVolume()
    {
        return $this->container['customize_volume'];
    }

    /**
     * Sets customize_volume
     *
     * @param bool|null $customize_volume customize_volume
     *
     * @return self
     */
    public function setCustomizeVolume($customize_volume)
    {
        $this->container['customize_volume'] = $customize_volume;

        return $this;
    }

    /**
     * Gets root_disk_customizable
     *
     * @return bool|null
     */
    public function getRootDiskCustomizable()
    {
        return $this->container['root_disk_customizable'];
    }

    /**
     * Sets root_disk_customizable
     *
     * @param bool|null $root_disk_customizable root_disk_customizable
     *
     * @return self
     */
    public function setRootDiskCustomizable($root_disk_customizable)
    {
        $this->container['root_disk_customizable'] = $root_disk_customizable;

        return $this;
    }

    /**
     * Gets no_disks
     *
     * @return bool|null
     */
    public function getNoDisks()
    {
        return $this->container['no_disks'];
    }

    /**
     * Sets no_disks
     *
     * @param bool|null $no_disks no_disks
     *
     * @return self
     */
    public function setNoDisks($no_disks)
    {
        $this->container['no_disks'] = $no_disks;

        return $this;
    }

    /**
     * Gets has_datastore
     *
     * @return bool|null
     */
    public function getHasDatastore()
    {
        return $this->container['has_datastore'];
    }

    /**
     * Sets has_datastore
     *
     * @param bool|null $has_datastore has_datastore
     *
     * @return self
     */
    public function setHasDatastore($has_datastore)
    {
        $this->container['has_datastore'] = $has_datastore;

        return $this;
    }

    /**
     * Gets min_disk
     *
     * @return int|null
     */
    public function getMinDisk()
    {
        return $this->container['min_disk'];
    }

    /**
     * Sets min_disk
     *
     * @param int|null $min_disk min_disk
     *
     * @return self
     */
    public function setMinDisk($min_disk)
    {
        $this->container['min_disk'] = $min_disk;

        return $this;
    }

    /**
     * Gets max_disk
     *
     * @return string|null
     */
    public function getMaxDisk()
    {
        return $this->container['max_disk'];
    }

    /**
     * Sets max_disk
     *
     * @param string|null $max_disk max_disk
     *
     * @return self
     */
    public function setMaxDisk($max_disk)
    {
        $this->container['max_disk'] = $max_disk;

        return $this;
    }

    /**
     * Gets lvm_supported
     *
     * @return bool|null
     */
    public function getLvmSupported()
    {
        return $this->container['lvm_supported'];
    }

    /**
     * Sets lvm_supported
     *
     * @param bool|null $lvm_supported lvm_supported
     *
     * @return self
     */
    public function setLvmSupported($lvm_supported)
    {
        $this->container['lvm_supported'] = $lvm_supported;

        return $this;
    }

    /**
     * Gets datastores
     *
     * @return \OpenAPI\Client\Model\InstanceServicePlanDatastores|null
     */
    public function getDatastores()
    {
        return $this->container['datastores'];
    }

    /**
     * Sets datastores
     *
     * @param \OpenAPI\Client\Model\InstanceServicePlanDatastores|null $datastores datastores
     *
     * @return self
     */
    public function setDatastores($datastores)
    {
        $this->container['datastores'] = $datastores;

        return $this;
    }

    /**
     * Gets supports_auto_datastore
     *
     * @return bool|null
     */
    public function getSupportsAutoDatastore()
    {
        return $this->container['supports_auto_datastore'];
    }

    /**
     * Sets supports_auto_datastore
     *
     * @param bool|null $supports_auto_datastore supports_auto_datastore
     *
     * @return self
     */
    public function setSupportsAutoDatastore($supports_auto_datastore)
    {
        $this->container['supports_auto_datastore'] = $supports_auto_datastore;

        return $this;
    }

    /**
     * Gets auto_options
     *
     * @return \OpenAPI\Client\Model\InstanceServicePlanAutoOptions[]|null
     */
    public function getAutoOptions()
    {
        return $this->container['auto_options'];
    }

    /**
     * Sets auto_options
     *
     * @param \OpenAPI\Client\Model\InstanceServicePlanAutoOptions[]|null $auto_options auto_options
     *
     * @return self
     */
    public function setAutoOptions($auto_options)
    {
        $this->container['auto_options'] = $auto_options;

        return $this;
    }

    /**
     * Gets cpu_options
     *
     * @return object[]|null
     */
    public function getCpuOptions()
    {
        return $this->container['cpu_options'];
    }

    /**
     * Sets cpu_options
     *
     * @param object[]|null $cpu_options cpu_options
     *
     * @return self
     */
    public function setCpuOptions($cpu_options)
    {
        $this->container['cpu_options'] = $cpu_options;

        return $this;
    }

    /**
     * Gets core_options
     *
     * @return object[]|null
     */
    public function getCoreOptions()
    {
        return $this->container['core_options'];
    }

    /**
     * Sets core_options
     *
     * @param object[]|null $core_options core_options
     *
     * @return self
     */
    public function setCoreOptions($core_options)
    {
        $this->container['core_options'] = $core_options;

        return $this;
    }

    /**
     * Gets memory_options
     *
     * @return object[]|null
     */
    public function getMemoryOptions()
    {
        return $this->container['memory_options'];
    }

    /**
     * Sets memory_options
     *
     * @param object[]|null $memory_options memory_options
     *
     * @return self
     */
    public function setMemoryOptions($memory_options)
    {
        $this->container['memory_options'] = $memory_options;

        return $this;
    }

    /**
     * Gets root_custom_size_options
     *
     * @return object|null
     */
    public function getRootCustomSizeOptions()
    {
        return $this->container['root_custom_size_options'];
    }

    /**
     * Sets root_custom_size_options
     *
     * @param object|null $root_custom_size_options root_custom_size_options
     *
     * @return self
     */
    public function setRootCustomSizeOptions($root_custom_size_options)
    {
        $this->container['root_custom_size_options'] = $root_custom_size_options;

        return $this;
    }

    /**
     * Gets custom_size_options
     *
     * @return object|null
     */
    public function getCustomSizeOptions()
    {
        return $this->container['custom_size_options'];
    }

    /**
     * Sets custom_size_options
     *
     * @param object|null $custom_size_options custom_size_options
     *
     * @return self
     */
    public function setCustomSizeOptions($custom_size_options)
    {
        $this->container['custom_size_options'] = $custom_size_options;

        return $this;
    }

    /**
     * Gets custom_cores
     *
     * @return bool|null
     */
    public function getCustomCores()
    {
        return $this->container['custom_cores'];
    }

    /**
     * Sets custom_cores
     *
     * @param bool|null $custom_cores custom_cores
     *
     * @return self
     */
    public function setCustomCores($custom_cores)
    {
        $this->container['custom_cores'] = $custom_cores;

        return $this;
    }

    /**
     * Gets max_disks
     *
     * @return string|null
     */
    public function getMaxDisks()
    {
        return $this->container['max_disks'];
    }

    /**
     * Sets max_disks
     *
     * @param string|null $max_disks max_disks
     *
     * @return self
     */
    public function setMaxDisks($max_disks)
    {
        $this->container['max_disks'] = $max_disks;

        return $this;
    }

    /**
     * Gets memory_size_type
     *
     * @return string|null
     */
    public function getMemorySizeType()
    {
        return $this->container['memory_size_type'];
    }

    /**
     * Sets memory_size_type
     *
     * @param string|null $memory_size_type memory_size_type
     *
     * @return self
     */
    public function setMemorySizeType($memory_size_type)
    {
        $this->container['memory_size_type'] = $memory_size_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


