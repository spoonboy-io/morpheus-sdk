<?php
/**
 * DashboardMonitoring
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DashboardMonitoring Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class DashboardMonitoring implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'dashboard_monitoring';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'avg_health' => 'float',
        'avg_response_time' => 'float',
        'warning_apps' => 'float',
        'warning_checks' => 'float',
        'fail_apps' => 'float',
        'total_apps' => 'float',
        'fail_checks' => 'float',
        'success_apps' => 'float',
        'muted_apps' => 'float',
        'success_checks' => 'float',
        'total_checks' => 'float',
        'muted_checks' => 'float',
        'response_times' => 'float[]',
        'all_success' => 'bool',
        'open_incidents' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'avg_health' => null,
        'avg_response_time' => null,
        'warning_apps' => null,
        'warning_checks' => null,
        'fail_apps' => null,
        'total_apps' => null,
        'fail_checks' => null,
        'success_apps' => null,
        'muted_apps' => null,
        'success_checks' => null,
        'total_checks' => null,
        'muted_checks' => null,
        'response_times' => null,
        'all_success' => null,
        'open_incidents' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'avg_health' => 'avgHealth',
        'avg_response_time' => 'avgResponseTime',
        'warning_apps' => 'warningApps',
        'warning_checks' => 'warningChecks',
        'fail_apps' => 'failApps',
        'total_apps' => 'totalApps',
        'fail_checks' => 'failChecks',
        'success_apps' => 'successApps',
        'muted_apps' => 'mutedApps',
        'success_checks' => 'successChecks',
        'total_checks' => 'totalChecks',
        'muted_checks' => 'mutedChecks',
        'response_times' => 'responseTimes',
        'all_success' => 'allSuccess',
        'open_incidents' => 'openIncidents'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'avg_health' => 'setAvgHealth',
        'avg_response_time' => 'setAvgResponseTime',
        'warning_apps' => 'setWarningApps',
        'warning_checks' => 'setWarningChecks',
        'fail_apps' => 'setFailApps',
        'total_apps' => 'setTotalApps',
        'fail_checks' => 'setFailChecks',
        'success_apps' => 'setSuccessApps',
        'muted_apps' => 'setMutedApps',
        'success_checks' => 'setSuccessChecks',
        'total_checks' => 'setTotalChecks',
        'muted_checks' => 'setMutedChecks',
        'response_times' => 'setResponseTimes',
        'all_success' => 'setAllSuccess',
        'open_incidents' => 'setOpenIncidents'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'avg_health' => 'getAvgHealth',
        'avg_response_time' => 'getAvgResponseTime',
        'warning_apps' => 'getWarningApps',
        'warning_checks' => 'getWarningChecks',
        'fail_apps' => 'getFailApps',
        'total_apps' => 'getTotalApps',
        'fail_checks' => 'getFailChecks',
        'success_apps' => 'getSuccessApps',
        'muted_apps' => 'getMutedApps',
        'success_checks' => 'getSuccessChecks',
        'total_checks' => 'getTotalChecks',
        'muted_checks' => 'getMutedChecks',
        'response_times' => 'getResponseTimes',
        'all_success' => 'getAllSuccess',
        'open_incidents' => 'getOpenIncidents'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['avg_health'] = $data['avg_health'] ?? null;
        $this->container['avg_response_time'] = $data['avg_response_time'] ?? null;
        $this->container['warning_apps'] = $data['warning_apps'] ?? null;
        $this->container['warning_checks'] = $data['warning_checks'] ?? null;
        $this->container['fail_apps'] = $data['fail_apps'] ?? null;
        $this->container['total_apps'] = $data['total_apps'] ?? null;
        $this->container['fail_checks'] = $data['fail_checks'] ?? null;
        $this->container['success_apps'] = $data['success_apps'] ?? null;
        $this->container['muted_apps'] = $data['muted_apps'] ?? null;
        $this->container['success_checks'] = $data['success_checks'] ?? null;
        $this->container['total_checks'] = $data['total_checks'] ?? null;
        $this->container['muted_checks'] = $data['muted_checks'] ?? null;
        $this->container['response_times'] = $data['response_times'] ?? null;
        $this->container['all_success'] = $data['all_success'] ?? null;
        $this->container['open_incidents'] = $data['open_incidents'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets avg_health
     *
     * @return float|null
     */
    public function getAvgHealth()
    {
        return $this->container['avg_health'];
    }

    /**
     * Sets avg_health
     *
     * @param float|null $avg_health avg_health
     *
     * @return self
     */
    public function setAvgHealth($avg_health)
    {
        $this->container['avg_health'] = $avg_health;

        return $this;
    }

    /**
     * Gets avg_response_time
     *
     * @return float|null
     */
    public function getAvgResponseTime()
    {
        return $this->container['avg_response_time'];
    }

    /**
     * Sets avg_response_time
     *
     * @param float|null $avg_response_time avg_response_time
     *
     * @return self
     */
    public function setAvgResponseTime($avg_response_time)
    {
        $this->container['avg_response_time'] = $avg_response_time;

        return $this;
    }

    /**
     * Gets warning_apps
     *
     * @return float|null
     */
    public function getWarningApps()
    {
        return $this->container['warning_apps'];
    }

    /**
     * Sets warning_apps
     *
     * @param float|null $warning_apps warning_apps
     *
     * @return self
     */
    public function setWarningApps($warning_apps)
    {
        $this->container['warning_apps'] = $warning_apps;

        return $this;
    }

    /**
     * Gets warning_checks
     *
     * @return float|null
     */
    public function getWarningChecks()
    {
        return $this->container['warning_checks'];
    }

    /**
     * Sets warning_checks
     *
     * @param float|null $warning_checks warning_checks
     *
     * @return self
     */
    public function setWarningChecks($warning_checks)
    {
        $this->container['warning_checks'] = $warning_checks;

        return $this;
    }

    /**
     * Gets fail_apps
     *
     * @return float|null
     */
    public function getFailApps()
    {
        return $this->container['fail_apps'];
    }

    /**
     * Sets fail_apps
     *
     * @param float|null $fail_apps fail_apps
     *
     * @return self
     */
    public function setFailApps($fail_apps)
    {
        $this->container['fail_apps'] = $fail_apps;

        return $this;
    }

    /**
     * Gets total_apps
     *
     * @return float|null
     */
    public function getTotalApps()
    {
        return $this->container['total_apps'];
    }

    /**
     * Sets total_apps
     *
     * @param float|null $total_apps total_apps
     *
     * @return self
     */
    public function setTotalApps($total_apps)
    {
        $this->container['total_apps'] = $total_apps;

        return $this;
    }

    /**
     * Gets fail_checks
     *
     * @return float|null
     */
    public function getFailChecks()
    {
        return $this->container['fail_checks'];
    }

    /**
     * Sets fail_checks
     *
     * @param float|null $fail_checks fail_checks
     *
     * @return self
     */
    public function setFailChecks($fail_checks)
    {
        $this->container['fail_checks'] = $fail_checks;

        return $this;
    }

    /**
     * Gets success_apps
     *
     * @return float|null
     */
    public function getSuccessApps()
    {
        return $this->container['success_apps'];
    }

    /**
     * Sets success_apps
     *
     * @param float|null $success_apps success_apps
     *
     * @return self
     */
    public function setSuccessApps($success_apps)
    {
        $this->container['success_apps'] = $success_apps;

        return $this;
    }

    /**
     * Gets muted_apps
     *
     * @return float|null
     */
    public function getMutedApps()
    {
        return $this->container['muted_apps'];
    }

    /**
     * Sets muted_apps
     *
     * @param float|null $muted_apps muted_apps
     *
     * @return self
     */
    public function setMutedApps($muted_apps)
    {
        $this->container['muted_apps'] = $muted_apps;

        return $this;
    }

    /**
     * Gets success_checks
     *
     * @return float|null
     */
    public function getSuccessChecks()
    {
        return $this->container['success_checks'];
    }

    /**
     * Sets success_checks
     *
     * @param float|null $success_checks success_checks
     *
     * @return self
     */
    public function setSuccessChecks($success_checks)
    {
        $this->container['success_checks'] = $success_checks;

        return $this;
    }

    /**
     * Gets total_checks
     *
     * @return float|null
     */
    public function getTotalChecks()
    {
        return $this->container['total_checks'];
    }

    /**
     * Sets total_checks
     *
     * @param float|null $total_checks total_checks
     *
     * @return self
     */
    public function setTotalChecks($total_checks)
    {
        $this->container['total_checks'] = $total_checks;

        return $this;
    }

    /**
     * Gets muted_checks
     *
     * @return float|null
     */
    public function getMutedChecks()
    {
        return $this->container['muted_checks'];
    }

    /**
     * Sets muted_checks
     *
     * @param float|null $muted_checks muted_checks
     *
     * @return self
     */
    public function setMutedChecks($muted_checks)
    {
        $this->container['muted_checks'] = $muted_checks;

        return $this;
    }

    /**
     * Gets response_times
     *
     * @return float[]|null
     */
    public function getResponseTimes()
    {
        return $this->container['response_times'];
    }

    /**
     * Sets response_times
     *
     * @param float[]|null $response_times response_times
     *
     * @return self
     */
    public function setResponseTimes($response_times)
    {
        $this->container['response_times'] = $response_times;

        return $this;
    }

    /**
     * Gets all_success
     *
     * @return bool|null
     */
    public function getAllSuccess()
    {
        return $this->container['all_success'];
    }

    /**
     * Sets all_success
     *
     * @param bool|null $all_success all_success
     *
     * @return self
     */
    public function setAllSuccess($all_success)
    {
        $this->container['all_success'] = $all_success;

        return $this;
    }

    /**
     * Gets open_incidents
     *
     * @return float|null
     */
    public function getOpenIncidents()
    {
        return $this->container['open_incidents'];
    }

    /**
     * Sets open_incidents
     *
     * @param float|null $open_incidents open_incidents
     *
     * @return self
     */
    public function setOpenIncidents($open_incidents)
    {
        $this->container['open_incidents'] = $open_incidents;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


