<?php
/**
 * LoadBalancer
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * LoadBalancer Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class LoadBalancer implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'loadBalancer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'uuid' => 'string',
        'name' => 'string',
        'account_id' => 'int',
        'cloud' => '\OpenAPI\Client\Model\InlineResponse20040AppDeployInstance',
        'type' => '\OpenAPI\Client\Model\InlineResponse20094Network',
        'owner' => '\OpenAPI\Client\Model\Owner',
        'visibility' => 'string',
        'description' => 'string',
        'host' => 'string',
        'port' => 'int',
        'username' => 'string',
        'ip' => 'string',
        'internal_ip' => 'string',
        'external_ip' => 'string',
        'api_port' => 'string',
        'admin_port' => 'string',
        'ssl_enabled' => 'bool',
        'ssl_cert' => 'string',
        'config' => 'object',
        'date_created' => '\DateTime',
        'last_updated' => '\DateTime',
        'credential' => '\OpenAPI\Client\Model\Creds',
        'tenants' => 'object[]',
        'resource_permission' => '\OpenAPI\Client\Model\ResourcePermissions'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'uuid' => null,
        'name' => null,
        'account_id' => 'int64',
        'cloud' => null,
        'type' => null,
        'owner' => null,
        'visibility' => null,
        'description' => null,
        'host' => null,
        'port' => 'int64',
        'username' => null,
        'ip' => null,
        'internal_ip' => null,
        'external_ip' => null,
        'api_port' => null,
        'admin_port' => null,
        'ssl_enabled' => null,
        'ssl_cert' => null,
        'config' => null,
        'date_created' => 'date-time',
        'last_updated' => 'date-time',
        'credential' => null,
        'tenants' => null,
        'resource_permission' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'uuid' => 'uuid',
        'name' => 'name',
        'account_id' => 'accountId',
        'cloud' => 'cloud',
        'type' => 'type',
        'owner' => 'owner',
        'visibility' => 'visibility',
        'description' => 'description',
        'host' => 'host',
        'port' => 'port',
        'username' => 'username',
        'ip' => 'ip',
        'internal_ip' => 'internalIp',
        'external_ip' => 'externalIp',
        'api_port' => 'apiPort',
        'admin_port' => 'adminPort',
        'ssl_enabled' => 'sslEnabled',
        'ssl_cert' => 'sslCert',
        'config' => 'config',
        'date_created' => 'dateCreated',
        'last_updated' => 'lastUpdated',
        'credential' => 'credential',
        'tenants' => 'tenants',
        'resource_permission' => 'resourcePermission'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'uuid' => 'setUuid',
        'name' => 'setName',
        'account_id' => 'setAccountId',
        'cloud' => 'setCloud',
        'type' => 'setType',
        'owner' => 'setOwner',
        'visibility' => 'setVisibility',
        'description' => 'setDescription',
        'host' => 'setHost',
        'port' => 'setPort',
        'username' => 'setUsername',
        'ip' => 'setIp',
        'internal_ip' => 'setInternalIp',
        'external_ip' => 'setExternalIp',
        'api_port' => 'setApiPort',
        'admin_port' => 'setAdminPort',
        'ssl_enabled' => 'setSslEnabled',
        'ssl_cert' => 'setSslCert',
        'config' => 'setConfig',
        'date_created' => 'setDateCreated',
        'last_updated' => 'setLastUpdated',
        'credential' => 'setCredential',
        'tenants' => 'setTenants',
        'resource_permission' => 'setResourcePermission'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'uuid' => 'getUuid',
        'name' => 'getName',
        'account_id' => 'getAccountId',
        'cloud' => 'getCloud',
        'type' => 'getType',
        'owner' => 'getOwner',
        'visibility' => 'getVisibility',
        'description' => 'getDescription',
        'host' => 'getHost',
        'port' => 'getPort',
        'username' => 'getUsername',
        'ip' => 'getIp',
        'internal_ip' => 'getInternalIp',
        'external_ip' => 'getExternalIp',
        'api_port' => 'getApiPort',
        'admin_port' => 'getAdminPort',
        'ssl_enabled' => 'getSslEnabled',
        'ssl_cert' => 'getSslCert',
        'config' => 'getConfig',
        'date_created' => 'getDateCreated',
        'last_updated' => 'getLastUpdated',
        'credential' => 'getCredential',
        'tenants' => 'getTenants',
        'resource_permission' => 'getResourcePermission'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['uuid'] = $data['uuid'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['account_id'] = $data['account_id'] ?? null;
        $this->container['cloud'] = $data['cloud'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['owner'] = $data['owner'] ?? null;
        $this->container['visibility'] = $data['visibility'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['host'] = $data['host'] ?? null;
        $this->container['port'] = $data['port'] ?? null;
        $this->container['username'] = $data['username'] ?? null;
        $this->container['ip'] = $data['ip'] ?? null;
        $this->container['internal_ip'] = $data['internal_ip'] ?? null;
        $this->container['external_ip'] = $data['external_ip'] ?? null;
        $this->container['api_port'] = $data['api_port'] ?? null;
        $this->container['admin_port'] = $data['admin_port'] ?? null;
        $this->container['ssl_enabled'] = $data['ssl_enabled'] ?? null;
        $this->container['ssl_cert'] = $data['ssl_cert'] ?? null;
        $this->container['config'] = $data['config'] ?? null;
        $this->container['date_created'] = $data['date_created'] ?? null;
        $this->container['last_updated'] = $data['last_updated'] ?? null;
        $this->container['credential'] = $data['credential'] ?? null;
        $this->container['tenants'] = $data['tenants'] ?? null;
        $this->container['resource_permission'] = $data['resource_permission'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets uuid
     *
     * @return string|null
     */
    public function getUuid()
    {
        return $this->container['uuid'];
    }

    /**
     * Sets uuid
     *
     * @param string|null $uuid uuid
     *
     * @return self
     */
    public function setUuid($uuid)
    {
        $this->container['uuid'] = $uuid;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets account_id
     *
     * @return int|null
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param int|null $account_id account_id
     *
     * @return self
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets cloud
     *
     * @return \OpenAPI\Client\Model\InlineResponse20040AppDeployInstance|null
     */
    public function getCloud()
    {
        return $this->container['cloud'];
    }

    /**
     * Sets cloud
     *
     * @param \OpenAPI\Client\Model\InlineResponse20040AppDeployInstance|null $cloud cloud
     *
     * @return self
     */
    public function setCloud($cloud)
    {
        $this->container['cloud'] = $cloud;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \OpenAPI\Client\Model\InlineResponse20094Network|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \OpenAPI\Client\Model\InlineResponse20094Network|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return \OpenAPI\Client\Model\Owner|null
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param \OpenAPI\Client\Model\Owner|null $owner owner
     *
     * @return self
     */
    public function setOwner($owner)
    {
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets visibility
     *
     * @return string|null
     */
    public function getVisibility()
    {
        return $this->container['visibility'];
    }

    /**
     * Sets visibility
     *
     * @param string|null $visibility visibility
     *
     * @return self
     */
    public function setVisibility($visibility)
    {
        $this->container['visibility'] = $visibility;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets host
     *
     * @return string|null
     */
    public function getHost()
    {
        return $this->container['host'];
    }

    /**
     * Sets host
     *
     * @param string|null $host host
     *
     * @return self
     */
    public function setHost($host)
    {
        $this->container['host'] = $host;

        return $this;
    }

    /**
     * Gets port
     *
     * @return int|null
     */
    public function getPort()
    {
        return $this->container['port'];
    }

    /**
     * Sets port
     *
     * @param int|null $port port
     *
     * @return self
     */
    public function setPort($port)
    {
        $this->container['port'] = $port;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string|null
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string|null $username username
     *
     * @return self
     */
    public function setUsername($username)
    {
        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets ip
     *
     * @return string|null
     */
    public function getIp()
    {
        return $this->container['ip'];
    }

    /**
     * Sets ip
     *
     * @param string|null $ip ip
     *
     * @return self
     */
    public function setIp($ip)
    {
        $this->container['ip'] = $ip;

        return $this;
    }

    /**
     * Gets internal_ip
     *
     * @return string|null
     */
    public function getInternalIp()
    {
        return $this->container['internal_ip'];
    }

    /**
     * Sets internal_ip
     *
     * @param string|null $internal_ip internal_ip
     *
     * @return self
     */
    public function setInternalIp($internal_ip)
    {
        $this->container['internal_ip'] = $internal_ip;

        return $this;
    }

    /**
     * Gets external_ip
     *
     * @return string|null
     */
    public function getExternalIp()
    {
        return $this->container['external_ip'];
    }

    /**
     * Sets external_ip
     *
     * @param string|null $external_ip external_ip
     *
     * @return self
     */
    public function setExternalIp($external_ip)
    {
        $this->container['external_ip'] = $external_ip;

        return $this;
    }

    /**
     * Gets api_port
     *
     * @return string|null
     */
    public function getApiPort()
    {
        return $this->container['api_port'];
    }

    /**
     * Sets api_port
     *
     * @param string|null $api_port api_port
     *
     * @return self
     */
    public function setApiPort($api_port)
    {
        $this->container['api_port'] = $api_port;

        return $this;
    }

    /**
     * Gets admin_port
     *
     * @return string|null
     */
    public function getAdminPort()
    {
        return $this->container['admin_port'];
    }

    /**
     * Sets admin_port
     *
     * @param string|null $admin_port admin_port
     *
     * @return self
     */
    public function setAdminPort($admin_port)
    {
        $this->container['admin_port'] = $admin_port;

        return $this;
    }

    /**
     * Gets ssl_enabled
     *
     * @return bool|null
     */
    public function getSslEnabled()
    {
        return $this->container['ssl_enabled'];
    }

    /**
     * Sets ssl_enabled
     *
     * @param bool|null $ssl_enabled ssl_enabled
     *
     * @return self
     */
    public function setSslEnabled($ssl_enabled)
    {
        $this->container['ssl_enabled'] = $ssl_enabled;

        return $this;
    }

    /**
     * Gets ssl_cert
     *
     * @return string|null
     */
    public function getSslCert()
    {
        return $this->container['ssl_cert'];
    }

    /**
     * Sets ssl_cert
     *
     * @param string|null $ssl_cert ssl_cert
     *
     * @return self
     */
    public function setSslCert($ssl_cert)
    {
        $this->container['ssl_cert'] = $ssl_cert;

        return $this;
    }

    /**
     * Gets config
     *
     * @return object|null
     */
    public function getConfig()
    {
        return $this->container['config'];
    }

    /**
     * Sets config
     *
     * @param object|null $config config
     *
     * @return self
     */
    public function setConfig($config)
    {
        $this->container['config'] = $config;

        return $this;
    }

    /**
     * Gets date_created
     *
     * @return \DateTime|null
     */
    public function getDateCreated()
    {
        return $this->container['date_created'];
    }

    /**
     * Sets date_created
     *
     * @param \DateTime|null $date_created date_created
     *
     * @return self
     */
    public function setDateCreated($date_created)
    {
        $this->container['date_created'] = $date_created;

        return $this;
    }

    /**
     * Gets last_updated
     *
     * @return \DateTime|null
     */
    public function getLastUpdated()
    {
        return $this->container['last_updated'];
    }

    /**
     * Sets last_updated
     *
     * @param \DateTime|null $last_updated last_updated
     *
     * @return self
     */
    public function setLastUpdated($last_updated)
    {
        $this->container['last_updated'] = $last_updated;

        return $this;
    }

    /**
     * Gets credential
     *
     * @return \OpenAPI\Client\Model\Creds|null
     */
    public function getCredential()
    {
        return $this->container['credential'];
    }

    /**
     * Sets credential
     *
     * @param \OpenAPI\Client\Model\Creds|null $credential credential
     *
     * @return self
     */
    public function setCredential($credential)
    {
        $this->container['credential'] = $credential;

        return $this;
    }

    /**
     * Gets tenants
     *
     * @return object[]|null
     */
    public function getTenants()
    {
        return $this->container['tenants'];
    }

    /**
     * Sets tenants
     *
     * @param object[]|null $tenants tenants
     *
     * @return self
     */
    public function setTenants($tenants)
    {
        $this->container['tenants'] = $tenants;

        return $this;
    }

    /**
     * Gets resource_permission
     *
     * @return \OpenAPI\Client\Model\ResourcePermissions|null
     */
    public function getResourcePermission()
    {
        return $this->container['resource_permission'];
    }

    /**
     * Sets resource_permission
     *
     * @param \OpenAPI\Client\Model\ResourcePermissions|null $resource_permission resource_permission
     *
     * @return self
     */
    public function setResourcePermission($resource_permission)
    {
        $this->container['resource_permission'] = $resource_permission;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


