<?php
/**
 * Check
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Check Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class Check implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'check';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'account' => '\OpenAPI\Client\Model\ApiBlueprintsIdUpdatePermissionsResourcePermissionSites',
        'active' => 'bool',
        'api_key' => 'string',
        'availability' => 'float',
        'check_agent' => 'string',
        'check_interval' => 'int',
        'check_spec' => 'string',
        'check_type' => '\OpenAPI\Client\Model\CheckCheckType',
        'config' => 'AnyOfCheckWebConfigCheckSqlConfigCheckElasticsearchConfigCheckSocketConfigObjectCheckVmConfig',
        'container' => '\OpenAPI\Client\Model\CheckContainer',
        'create_incident' => 'bool',
        'muted' => 'bool',
        'created_by' => '\OpenAPI\Client\Model\InlineResponse20083LoadBalancerNodeCreatedBy',
        'date_created' => '\DateTime',
        'description' => 'string',
        'end_date' => '\DateTime',
        'health' => 'int',
        'in_uptime' => 'bool',
        'last_box_stats' => 'string',
        'last_check_status' => 'string',
        'last_error' => 'string',
        'last_error_date' => '\DateTime',
        'last_message' => 'string',
        'last_metric' => 'string',
        'last_run_date' => '\DateTime',
        'last_stats' => 'string',
        'last_success_date' => '\DateTime',
        'last_timer' => 'int',
        'last_updated' => '\DateTime',
        'last_warning_date' => '\DateTime',
        'name' => 'string',
        'next_run_date' => '\DateTime',
        'outage_time' => 'int',
        'severity' => 'string',
        'start_date' => '\DateTime',
        'deleted' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'account' => null,
        'active' => null,
        'api_key' => null,
        'availability' => null,
        'check_agent' => null,
        'check_interval' => 'int64',
        'check_spec' => null,
        'check_type' => null,
        'config' => null,
        'container' => null,
        'create_incident' => null,
        'muted' => null,
        'created_by' => null,
        'date_created' => 'date-time',
        'description' => null,
        'end_date' => 'date-time',
        'health' => 'int64',
        'in_uptime' => null,
        'last_box_stats' => null,
        'last_check_status' => null,
        'last_error' => null,
        'last_error_date' => 'date-time',
        'last_message' => null,
        'last_metric' => null,
        'last_run_date' => 'date-time',
        'last_stats' => null,
        'last_success_date' => 'date-time',
        'last_timer' => 'int64',
        'last_updated' => 'date-time',
        'last_warning_date' => 'date-time',
        'name' => null,
        'next_run_date' => 'date-time',
        'outage_time' => 'int64',
        'severity' => null,
        'start_date' => 'date-time',
        'deleted' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'account' => 'account',
        'active' => 'active',
        'api_key' => 'apiKey',
        'availability' => 'availability',
        'check_agent' => 'checkAgent',
        'check_interval' => 'checkInterval',
        'check_spec' => 'checkSpec',
        'check_type' => 'checkType',
        'config' => 'config',
        'container' => 'container',
        'create_incident' => 'createIncident',
        'muted' => 'muted',
        'created_by' => 'createdBy',
        'date_created' => 'dateCreated',
        'description' => 'description',
        'end_date' => 'endDate',
        'health' => 'health',
        'in_uptime' => 'inUptime',
        'last_box_stats' => 'lastBoxStats',
        'last_check_status' => 'lastCheckStatus',
        'last_error' => 'lastError',
        'last_error_date' => 'lastErrorDate',
        'last_message' => 'lastMessage',
        'last_metric' => 'lastMetric',
        'last_run_date' => 'lastRunDate',
        'last_stats' => 'lastStats',
        'last_success_date' => 'lastSuccessDate',
        'last_timer' => 'lastTimer',
        'last_updated' => 'lastUpdated',
        'last_warning_date' => 'lastWarningDate',
        'name' => 'name',
        'next_run_date' => 'nextRunDate',
        'outage_time' => 'outageTime',
        'severity' => 'severity',
        'start_date' => 'startDate',
        'deleted' => 'deleted'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'account' => 'setAccount',
        'active' => 'setActive',
        'api_key' => 'setApiKey',
        'availability' => 'setAvailability',
        'check_agent' => 'setCheckAgent',
        'check_interval' => 'setCheckInterval',
        'check_spec' => 'setCheckSpec',
        'check_type' => 'setCheckType',
        'config' => 'setConfig',
        'container' => 'setContainer',
        'create_incident' => 'setCreateIncident',
        'muted' => 'setMuted',
        'created_by' => 'setCreatedBy',
        'date_created' => 'setDateCreated',
        'description' => 'setDescription',
        'end_date' => 'setEndDate',
        'health' => 'setHealth',
        'in_uptime' => 'setInUptime',
        'last_box_stats' => 'setLastBoxStats',
        'last_check_status' => 'setLastCheckStatus',
        'last_error' => 'setLastError',
        'last_error_date' => 'setLastErrorDate',
        'last_message' => 'setLastMessage',
        'last_metric' => 'setLastMetric',
        'last_run_date' => 'setLastRunDate',
        'last_stats' => 'setLastStats',
        'last_success_date' => 'setLastSuccessDate',
        'last_timer' => 'setLastTimer',
        'last_updated' => 'setLastUpdated',
        'last_warning_date' => 'setLastWarningDate',
        'name' => 'setName',
        'next_run_date' => 'setNextRunDate',
        'outage_time' => 'setOutageTime',
        'severity' => 'setSeverity',
        'start_date' => 'setStartDate',
        'deleted' => 'setDeleted'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'account' => 'getAccount',
        'active' => 'getActive',
        'api_key' => 'getApiKey',
        'availability' => 'getAvailability',
        'check_agent' => 'getCheckAgent',
        'check_interval' => 'getCheckInterval',
        'check_spec' => 'getCheckSpec',
        'check_type' => 'getCheckType',
        'config' => 'getConfig',
        'container' => 'getContainer',
        'create_incident' => 'getCreateIncident',
        'muted' => 'getMuted',
        'created_by' => 'getCreatedBy',
        'date_created' => 'getDateCreated',
        'description' => 'getDescription',
        'end_date' => 'getEndDate',
        'health' => 'getHealth',
        'in_uptime' => 'getInUptime',
        'last_box_stats' => 'getLastBoxStats',
        'last_check_status' => 'getLastCheckStatus',
        'last_error' => 'getLastError',
        'last_error_date' => 'getLastErrorDate',
        'last_message' => 'getLastMessage',
        'last_metric' => 'getLastMetric',
        'last_run_date' => 'getLastRunDate',
        'last_stats' => 'getLastStats',
        'last_success_date' => 'getLastSuccessDate',
        'last_timer' => 'getLastTimer',
        'last_updated' => 'getLastUpdated',
        'last_warning_date' => 'getLastWarningDate',
        'name' => 'getName',
        'next_run_date' => 'getNextRunDate',
        'outage_time' => 'getOutageTime',
        'severity' => 'getSeverity',
        'start_date' => 'getStartDate',
        'deleted' => 'getDeleted'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['account'] = $data['account'] ?? null;
        $this->container['active'] = $data['active'] ?? null;
        $this->container['api_key'] = $data['api_key'] ?? null;
        $this->container['availability'] = $data['availability'] ?? null;
        $this->container['check_agent'] = $data['check_agent'] ?? null;
        $this->container['check_interval'] = $data['check_interval'] ?? null;
        $this->container['check_spec'] = $data['check_spec'] ?? null;
        $this->container['check_type'] = $data['check_type'] ?? null;
        $this->container['config'] = $data['config'] ?? null;
        $this->container['container'] = $data['container'] ?? null;
        $this->container['create_incident'] = $data['create_incident'] ?? null;
        $this->container['muted'] = $data['muted'] ?? null;
        $this->container['created_by'] = $data['created_by'] ?? null;
        $this->container['date_created'] = $data['date_created'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['end_date'] = $data['end_date'] ?? null;
        $this->container['health'] = $data['health'] ?? null;
        $this->container['in_uptime'] = $data['in_uptime'] ?? null;
        $this->container['last_box_stats'] = $data['last_box_stats'] ?? null;
        $this->container['last_check_status'] = $data['last_check_status'] ?? null;
        $this->container['last_error'] = $data['last_error'] ?? null;
        $this->container['last_error_date'] = $data['last_error_date'] ?? null;
        $this->container['last_message'] = $data['last_message'] ?? null;
        $this->container['last_metric'] = $data['last_metric'] ?? null;
        $this->container['last_run_date'] = $data['last_run_date'] ?? null;
        $this->container['last_stats'] = $data['last_stats'] ?? null;
        $this->container['last_success_date'] = $data['last_success_date'] ?? null;
        $this->container['last_timer'] = $data['last_timer'] ?? null;
        $this->container['last_updated'] = $data['last_updated'] ?? null;
        $this->container['last_warning_date'] = $data['last_warning_date'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['next_run_date'] = $data['next_run_date'] ?? null;
        $this->container['outage_time'] = $data['outage_time'] ?? null;
        $this->container['severity'] = $data['severity'] ?? null;
        $this->container['start_date'] = $data['start_date'] ?? null;
        $this->container['deleted'] = $data['deleted'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets account
     *
     * @return \OpenAPI\Client\Model\ApiBlueprintsIdUpdatePermissionsResourcePermissionSites|null
     */
    public function getAccount()
    {
        return $this->container['account'];
    }

    /**
     * Sets account
     *
     * @param \OpenAPI\Client\Model\ApiBlueprintsIdUpdatePermissionsResourcePermissionSites|null $account account
     *
     * @return self
     */
    public function setAccount($account)
    {
        $this->container['account'] = $account;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool|null
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool|null $active active
     *
     * @return self
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets api_key
     *
     * @return string|null
     */
    public function getApiKey()
    {
        return $this->container['api_key'];
    }

    /**
     * Sets api_key
     *
     * @param string|null $api_key api_key
     *
     * @return self
     */
    public function setApiKey($api_key)
    {
        $this->container['api_key'] = $api_key;

        return $this;
    }

    /**
     * Gets availability
     *
     * @return float|null
     */
    public function getAvailability()
    {
        return $this->container['availability'];
    }

    /**
     * Sets availability
     *
     * @param float|null $availability availability
     *
     * @return self
     */
    public function setAvailability($availability)
    {
        $this->container['availability'] = $availability;

        return $this;
    }

    /**
     * Gets check_agent
     *
     * @return string|null
     */
    public function getCheckAgent()
    {
        return $this->container['check_agent'];
    }

    /**
     * Sets check_agent
     *
     * @param string|null $check_agent check_agent
     *
     * @return self
     */
    public function setCheckAgent($check_agent)
    {
        $this->container['check_agent'] = $check_agent;

        return $this;
    }

    /**
     * Gets check_interval
     *
     * @return int|null
     */
    public function getCheckInterval()
    {
        return $this->container['check_interval'];
    }

    /**
     * Sets check_interval
     *
     * @param int|null $check_interval check_interval
     *
     * @return self
     */
    public function setCheckInterval($check_interval)
    {
        $this->container['check_interval'] = $check_interval;

        return $this;
    }

    /**
     * Gets check_spec
     *
     * @return string|null
     */
    public function getCheckSpec()
    {
        return $this->container['check_spec'];
    }

    /**
     * Sets check_spec
     *
     * @param string|null $check_spec check_spec
     *
     * @return self
     */
    public function setCheckSpec($check_spec)
    {
        $this->container['check_spec'] = $check_spec;

        return $this;
    }

    /**
     * Gets check_type
     *
     * @return \OpenAPI\Client\Model\CheckCheckType|null
     */
    public function getCheckType()
    {
        return $this->container['check_type'];
    }

    /**
     * Sets check_type
     *
     * @param \OpenAPI\Client\Model\CheckCheckType|null $check_type check_type
     *
     * @return self
     */
    public function setCheckType($check_type)
    {
        $this->container['check_type'] = $check_type;

        return $this;
    }

    /**
     * Gets config
     *
     * @return AnyOfCheckWebConfigCheckSqlConfigCheckElasticsearchConfigCheckSocketConfigObjectCheckVmConfig|null
     */
    public function getConfig()
    {
        return $this->container['config'];
    }

    /**
     * Sets config
     *
     * @param AnyOfCheckWebConfigCheckSqlConfigCheckElasticsearchConfigCheckSocketConfigObjectCheckVmConfig|null $config config
     *
     * @return self
     */
    public function setConfig($config)
    {
        $this->container['config'] = $config;

        return $this;
    }

    /**
     * Gets container
     *
     * @return \OpenAPI\Client\Model\CheckContainer|null
     */
    public function getContainer()
    {
        return $this->container['container'];
    }

    /**
     * Sets container
     *
     * @param \OpenAPI\Client\Model\CheckContainer|null $container container
     *
     * @return self
     */
    public function setContainer($container)
    {
        $this->container['container'] = $container;

        return $this;
    }

    /**
     * Gets create_incident
     *
     * @return bool|null
     */
    public function getCreateIncident()
    {
        return $this->container['create_incident'];
    }

    /**
     * Sets create_incident
     *
     * @param bool|null $create_incident create_incident
     *
     * @return self
     */
    public function setCreateIncident($create_incident)
    {
        $this->container['create_incident'] = $create_incident;

        return $this;
    }

    /**
     * Gets muted
     *
     * @return bool|null
     */
    public function getMuted()
    {
        return $this->container['muted'];
    }

    /**
     * Sets muted
     *
     * @param bool|null $muted muted
     *
     * @return self
     */
    public function setMuted($muted)
    {
        $this->container['muted'] = $muted;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return \OpenAPI\Client\Model\InlineResponse20083LoadBalancerNodeCreatedBy|null
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param \OpenAPI\Client\Model\InlineResponse20083LoadBalancerNodeCreatedBy|null $created_by created_by
     *
     * @return self
     */
    public function setCreatedBy($created_by)
    {
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets date_created
     *
     * @return \DateTime|null
     */
    public function getDateCreated()
    {
        return $this->container['date_created'];
    }

    /**
     * Sets date_created
     *
     * @param \DateTime|null $date_created date_created
     *
     * @return self
     */
    public function setDateCreated($date_created)
    {
        $this->container['date_created'] = $date_created;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime|null
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime|null $end_date end_date
     *
     * @return self
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets health
     *
     * @return int|null
     */
    public function getHealth()
    {
        return $this->container['health'];
    }

    /**
     * Sets health
     *
     * @param int|null $health health
     *
     * @return self
     */
    public function setHealth($health)
    {
        $this->container['health'] = $health;

        return $this;
    }

    /**
     * Gets in_uptime
     *
     * @return bool|null
     */
    public function getInUptime()
    {
        return $this->container['in_uptime'];
    }

    /**
     * Sets in_uptime
     *
     * @param bool|null $in_uptime in_uptime
     *
     * @return self
     */
    public function setInUptime($in_uptime)
    {
        $this->container['in_uptime'] = $in_uptime;

        return $this;
    }

    /**
     * Gets last_box_stats
     *
     * @return string|null
     */
    public function getLastBoxStats()
    {
        return $this->container['last_box_stats'];
    }

    /**
     * Sets last_box_stats
     *
     * @param string|null $last_box_stats last_box_stats
     *
     * @return self
     */
    public function setLastBoxStats($last_box_stats)
    {
        $this->container['last_box_stats'] = $last_box_stats;

        return $this;
    }

    /**
     * Gets last_check_status
     *
     * @return string|null
     */
    public function getLastCheckStatus()
    {
        return $this->container['last_check_status'];
    }

    /**
     * Sets last_check_status
     *
     * @param string|null $last_check_status last_check_status
     *
     * @return self
     */
    public function setLastCheckStatus($last_check_status)
    {
        $this->container['last_check_status'] = $last_check_status;

        return $this;
    }

    /**
     * Gets last_error
     *
     * @return string|null
     */
    public function getLastError()
    {
        return $this->container['last_error'];
    }

    /**
     * Sets last_error
     *
     * @param string|null $last_error last_error
     *
     * @return self
     */
    public function setLastError($last_error)
    {
        $this->container['last_error'] = $last_error;

        return $this;
    }

    /**
     * Gets last_error_date
     *
     * @return \DateTime|null
     */
    public function getLastErrorDate()
    {
        return $this->container['last_error_date'];
    }

    /**
     * Sets last_error_date
     *
     * @param \DateTime|null $last_error_date last_error_date
     *
     * @return self
     */
    public function setLastErrorDate($last_error_date)
    {
        $this->container['last_error_date'] = $last_error_date;

        return $this;
    }

    /**
     * Gets last_message
     *
     * @return string|null
     */
    public function getLastMessage()
    {
        return $this->container['last_message'];
    }

    /**
     * Sets last_message
     *
     * @param string|null $last_message last_message
     *
     * @return self
     */
    public function setLastMessage($last_message)
    {
        $this->container['last_message'] = $last_message;

        return $this;
    }

    /**
     * Gets last_metric
     *
     * @return string|null
     */
    public function getLastMetric()
    {
        return $this->container['last_metric'];
    }

    /**
     * Sets last_metric
     *
     * @param string|null $last_metric last_metric
     *
     * @return self
     */
    public function setLastMetric($last_metric)
    {
        $this->container['last_metric'] = $last_metric;

        return $this;
    }

    /**
     * Gets last_run_date
     *
     * @return \DateTime|null
     */
    public function getLastRunDate()
    {
        return $this->container['last_run_date'];
    }

    /**
     * Sets last_run_date
     *
     * @param \DateTime|null $last_run_date last_run_date
     *
     * @return self
     */
    public function setLastRunDate($last_run_date)
    {
        $this->container['last_run_date'] = $last_run_date;

        return $this;
    }

    /**
     * Gets last_stats
     *
     * @return string|null
     */
    public function getLastStats()
    {
        return $this->container['last_stats'];
    }

    /**
     * Sets last_stats
     *
     * @param string|null $last_stats last_stats
     *
     * @return self
     */
    public function setLastStats($last_stats)
    {
        $this->container['last_stats'] = $last_stats;

        return $this;
    }

    /**
     * Gets last_success_date
     *
     * @return \DateTime|null
     */
    public function getLastSuccessDate()
    {
        return $this->container['last_success_date'];
    }

    /**
     * Sets last_success_date
     *
     * @param \DateTime|null $last_success_date last_success_date
     *
     * @return self
     */
    public function setLastSuccessDate($last_success_date)
    {
        $this->container['last_success_date'] = $last_success_date;

        return $this;
    }

    /**
     * Gets last_timer
     *
     * @return int|null
     */
    public function getLastTimer()
    {
        return $this->container['last_timer'];
    }

    /**
     * Sets last_timer
     *
     * @param int|null $last_timer last_timer
     *
     * @return self
     */
    public function setLastTimer($last_timer)
    {
        $this->container['last_timer'] = $last_timer;

        return $this;
    }

    /**
     * Gets last_updated
     *
     * @return \DateTime|null
     */
    public function getLastUpdated()
    {
        return $this->container['last_updated'];
    }

    /**
     * Sets last_updated
     *
     * @param \DateTime|null $last_updated last_updated
     *
     * @return self
     */
    public function setLastUpdated($last_updated)
    {
        $this->container['last_updated'] = $last_updated;

        return $this;
    }

    /**
     * Gets last_warning_date
     *
     * @return \DateTime|null
     */
    public function getLastWarningDate()
    {
        return $this->container['last_warning_date'];
    }

    /**
     * Sets last_warning_date
     *
     * @param \DateTime|null $last_warning_date last_warning_date
     *
     * @return self
     */
    public function setLastWarningDate($last_warning_date)
    {
        $this->container['last_warning_date'] = $last_warning_date;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets next_run_date
     *
     * @return \DateTime|null
     */
    public function getNextRunDate()
    {
        return $this->container['next_run_date'];
    }

    /**
     * Sets next_run_date
     *
     * @param \DateTime|null $next_run_date next_run_date
     *
     * @return self
     */
    public function setNextRunDate($next_run_date)
    {
        $this->container['next_run_date'] = $next_run_date;

        return $this;
    }

    /**
     * Gets outage_time
     *
     * @return int|null
     */
    public function getOutageTime()
    {
        return $this->container['outage_time'];
    }

    /**
     * Sets outage_time
     *
     * @param int|null $outage_time outage_time
     *
     * @return self
     */
    public function setOutageTime($outage_time)
    {
        $this->container['outage_time'] = $outage_time;

        return $this;
    }

    /**
     * Gets severity
     *
     * @return string|null
     */
    public function getSeverity()
    {
        return $this->container['severity'];
    }

    /**
     * Sets severity
     *
     * @param string|null $severity severity
     *
     * @return self
     */
    public function setSeverity($severity)
    {
        $this->container['severity'] = $severity;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return \DateTime|null
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime|null $start_date start_date
     *
     * @return self
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets deleted
     *
     * @return bool|null
     */
    public function getDeleted()
    {
        return $this->container['deleted'];
    }

    /**
     * Sets deleted
     *
     * @param bool|null $deleted deleted
     *
     * @return self
     */
    public function setDeleted($deleted)
    {
        $this->container['deleted'] = $deleted;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


