<?php
/**
 * ClusterServerCreate
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ClusterServerCreate Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class ClusterServerCreate implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'clusterServerCreate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'config' => 'object',
        'server_type' => '\OpenAPI\Client\Model\ClusterServerCreateServerType',
        'name' => 'string',
        'plan' => '\OpenAPI\Client\Model\ClusterServerCreatePlan',
        'volumes' => '\OpenAPI\Client\Model\ClusterServerCreateVolumes[]',
        'network_interfaces' => '\OpenAPI\Client\Model\ClusterServerCreateNetworkInterfaces[]',
        'security_groups' => 'string[]',
        'visibility' => 'string',
        'user_group' => '\OpenAPI\Client\Model\ClusterServerCreateUserGroup',
        'network_domain' => 'string',
        'hostname' => 'string',
        'node_count' => 'int',
        'tags' => '\OpenAPI\Client\Model\ApiServersIdMakeManagedServerTags[]',
        'labels' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'config' => null,
        'server_type' => null,
        'name' => null,
        'plan' => null,
        'volumes' => null,
        'network_interfaces' => null,
        'security_groups' => null,
        'visibility' => null,
        'user_group' => null,
        'network_domain' => null,
        'hostname' => null,
        'node_count' => 'int64',
        'tags' => null,
        'labels' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'config' => 'config',
        'server_type' => 'serverType',
        'name' => 'name',
        'plan' => 'plan',
        'volumes' => 'volumes',
        'network_interfaces' => 'networkInterfaces',
        'security_groups' => 'securityGroups',
        'visibility' => 'visibility',
        'user_group' => 'userGroup',
        'network_domain' => 'networkDomain',
        'hostname' => 'hostname',
        'node_count' => 'nodeCount',
        'tags' => 'tags',
        'labels' => 'labels'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'config' => 'setConfig',
        'server_type' => 'setServerType',
        'name' => 'setName',
        'plan' => 'setPlan',
        'volumes' => 'setVolumes',
        'network_interfaces' => 'setNetworkInterfaces',
        'security_groups' => 'setSecurityGroups',
        'visibility' => 'setVisibility',
        'user_group' => 'setUserGroup',
        'network_domain' => 'setNetworkDomain',
        'hostname' => 'setHostname',
        'node_count' => 'setNodeCount',
        'tags' => 'setTags',
        'labels' => 'setLabels'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'config' => 'getConfig',
        'server_type' => 'getServerType',
        'name' => 'getName',
        'plan' => 'getPlan',
        'volumes' => 'getVolumes',
        'network_interfaces' => 'getNetworkInterfaces',
        'security_groups' => 'getSecurityGroups',
        'visibility' => 'getVisibility',
        'user_group' => 'getUserGroup',
        'network_domain' => 'getNetworkDomain',
        'hostname' => 'getHostname',
        'node_count' => 'getNodeCount',
        'tags' => 'getTags',
        'labels' => 'getLabels'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['config'] = $data['config'] ?? null;
        $this->container['server_type'] = $data['server_type'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['plan'] = $data['plan'] ?? null;
        $this->container['volumes'] = $data['volumes'] ?? null;
        $this->container['network_interfaces'] = $data['network_interfaces'] ?? null;
        $this->container['security_groups'] = $data['security_groups'] ?? null;
        $this->container['visibility'] = $data['visibility'] ?? 'private';
        $this->container['user_group'] = $data['user_group'] ?? null;
        $this->container['network_domain'] = $data['network_domain'] ?? null;
        $this->container['hostname'] = $data['hostname'] ?? null;
        $this->container['node_count'] = $data['node_count'] ?? null;
        $this->container['tags'] = $data['tags'] ?? null;
        $this->container['labels'] = $data['labels'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['config'] === null) {
            $invalidProperties[] = "'config' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['plan'] === null) {
            $invalidProperties[] = "'plan' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets config
     *
     * @return object
     */
    public function getConfig()
    {
        return $this->container['config'];
    }

    /**
     * Sets config
     *
     * @param object $config Key for specific host type configuration  The config parameter is for configuration options that are specific to each Provision Type. The Provision Types api can be used to see which options are available.
     *
     * @return self
     */
    public function setConfig($config)
    {
        $this->container['config'] = $config;

        return $this;
    }

    /**
     * Gets server_type
     *
     * @return \OpenAPI\Client\Model\ClusterServerCreateServerType|null
     */
    public function getServerType()
    {
        return $this->container['server_type'];
    }

    /**
     * Sets server_type
     *
     * @param \OpenAPI\Client\Model\ClusterServerCreateServerType|null $server_type server_type
     *
     * @return self
     */
    public function setServerType($server_type)
    {
        $this->container['server_type'] = $server_type;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name to be used for host(s) created in the cluster
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets plan
     *
     * @return \OpenAPI\Client\Model\ClusterServerCreatePlan
     */
    public function getPlan()
    {
        return $this->container['plan'];
    }

    /**
     * Sets plan
     *
     * @param \OpenAPI\Client\Model\ClusterServerCreatePlan $plan plan
     *
     * @return self
     */
    public function setPlan($plan)
    {
        $this->container['plan'] = $plan;

        return $this;
    }

    /**
     * Gets volumes
     *
     * @return \OpenAPI\Client\Model\ClusterServerCreateVolumes[]|null
     */
    public function getVolumes()
    {
        return $this->container['volumes'];
    }

    /**
     * Sets volumes
     *
     * @param \OpenAPI\Client\Model\ClusterServerCreateVolumes[]|null $volumes The (optional) volumes parameter is for LV configuration, can create additional LVs at provision It should be passed as an array of Objects
     *
     * @return self
     */
    public function setVolumes($volumes)
    {
        $this->container['volumes'] = $volumes;

        return $this;
    }

    /**
     * Gets network_interfaces
     *
     * @return \OpenAPI\Client\Model\ClusterServerCreateNetworkInterfaces[]|null
     */
    public function getNetworkInterfaces()
    {
        return $this->container['network_interfaces'];
    }

    /**
     * Sets network_interfaces
     *
     * @param \OpenAPI\Client\Model\ClusterServerCreateNetworkInterfaces[]|null $network_interfaces The networkInterfaces parameter is for network configuration.  The Options API /api/options/zoneNetworkOptions can be used to see which options are available.  It should be passed as an array of Objects with the following attributes
     *
     * @return self
     */
    public function setNetworkInterfaces($network_interfaces)
    {
        $this->container['network_interfaces'] = $network_interfaces;

        return $this;
    }

    /**
     * Gets security_groups
     *
     * @return string[]|null
     */
    public function getSecurityGroups()
    {
        return $this->container['security_groups'];
    }

    /**
     * Sets security_groups
     *
     * @param string[]|null $security_groups Key for security group configuration.
     *
     * @return self
     */
    public function setSecurityGroups($security_groups)
    {
        $this->container['security_groups'] = $security_groups;

        return $this;
    }

    /**
     * Gets visibility
     *
     * @return string|null
     */
    public function getVisibility()
    {
        return $this->container['visibility'];
    }

    /**
     * Sets visibility
     *
     * @param string|null $visibility Visibility for server host
     *
     * @return self
     */
    public function setVisibility($visibility)
    {
        $this->container['visibility'] = $visibility;

        return $this;
    }

    /**
     * Gets user_group
     *
     * @return \OpenAPI\Client\Model\ClusterServerCreateUserGroup|null
     */
    public function getUserGroup()
    {
        return $this->container['user_group'];
    }

    /**
     * Sets user_group
     *
     * @param \OpenAPI\Client\Model\ClusterServerCreateUserGroup|null $user_group user_group
     *
     * @return self
     */
    public function setUserGroup($user_group)
    {
        $this->container['user_group'] = $user_group;

        return $this;
    }

    /**
     * Gets network_domain
     *
     * @return string|null
     */
    public function getNetworkDomain()
    {
        return $this->container['network_domain'];
    }

    /**
     * Sets network_domain
     *
     * @param string|null $network_domain Network domain
     *
     * @return self
     */
    public function setNetworkDomain($network_domain)
    {
        $this->container['network_domain'] = $network_domain;

        return $this;
    }

    /**
     * Gets hostname
     *
     * @return string|null
     */
    public function getHostname()
    {
        return $this->container['hostname'];
    }

    /**
     * Sets hostname
     *
     * @param string|null $hostname Hostname for server host
     *
     * @return self
     */
    public function setHostname($hostname)
    {
        $this->container['hostname'] = $hostname;

        return $this;
    }

    /**
     * Gets node_count
     *
     * @return int|null
     */
    public function getNodeCount()
    {
        return $this->container['node_count'];
    }

    /**
     * Sets node_count
     *
     * @param int|null $node_count Number of workers or hosts
     *
     * @return self
     */
    public function setNodeCount($node_count)
    {
        $this->container['node_count'] = $node_count;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return \OpenAPI\Client\Model\ApiServersIdMakeManagedServerTags[]|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param \OpenAPI\Client\Model\ApiServersIdMakeManagedServerTags[]|null $tags Metadata tags, Array of objects having a name and value.
     *
     * @return self
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets labels
     *
     * @return string[]|null
     */
    public function getLabels()
    {
        return $this->container['labels'];
    }

    /**
     * Sets labels
     *
     * @param string[]|null $labels Array of strings (keywords). This will set labels on the server and also on the cluster as well by default.
     *
     * @return self
     */
    public function setLabels($labels)
    {
        $this->container['labels'] = $labels;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


