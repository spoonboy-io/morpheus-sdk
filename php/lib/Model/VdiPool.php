<?php
/**
 * VdiPool
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * VdiPool Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class VdiPool implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'vdiPool';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'name' => 'string',
        'description' => 'string',
        'min_idle' => 'int',
        'max_idle' => 'int',
        'initial_pool_size' => 'int',
        'max_pool_size' => 'int',
        'allocation_timeout_minutes' => 'int',
        'persistent_user' => 'bool',
        'recyclable' => 'bool',
        'enabled' => 'bool',
        'auto_create_local_user_on_reservation' => 'bool',
        'allow_hypervisor_console' => 'bool',
        'allow_copy' => 'bool',
        'allow_printer' => 'bool',
        'allow_fileshare' => 'bool',
        'guest_console_jump_host' => 'string',
        'guest_console_jump_port' => 'string',
        'guest_console_jump_username' => 'string',
        'guest_console_jump_password' => 'string',
        'guest_console_jump_keypair' => 'string',
        'gateway' => '\OpenAPI\Client\Model\InlineResponse20082LoadBalancerInstanceSslCert',
        'icon_path' => 'string',
        'logo' => 'string',
        'apps' => '\OpenAPI\Client\Model\InlineResponse20040AppDeployInstance[]',
        'owner' => '\OpenAPI\Client\Model\VdiPoolOwner',
        'config' => '\OpenAPI\Client\Model\VdiPoolConfig',
        'group' => '\OpenAPI\Client\Model\InlineResponse20082LoadBalancerInstanceSslCert',
        'cloud' => '\OpenAPI\Client\Model\InlineResponse20082LoadBalancerInstanceSslCert',
        'used_count' => 'int',
        'reserved_count' => 'int',
        'preparing_count' => 'int',
        'idle_count' => 'int',
        'status' => 'string',
        'date_created' => '\DateTime',
        'last_updated' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'name' => null,
        'description' => null,
        'min_idle' => 'int64',
        'max_idle' => 'int64',
        'initial_pool_size' => 'int64',
        'max_pool_size' => 'int64',
        'allocation_timeout_minutes' => 'int64',
        'persistent_user' => null,
        'recyclable' => null,
        'enabled' => null,
        'auto_create_local_user_on_reservation' => null,
        'allow_hypervisor_console' => null,
        'allow_copy' => null,
        'allow_printer' => null,
        'allow_fileshare' => null,
        'guest_console_jump_host' => null,
        'guest_console_jump_port' => null,
        'guest_console_jump_username' => null,
        'guest_console_jump_password' => null,
        'guest_console_jump_keypair' => null,
        'gateway' => null,
        'icon_path' => null,
        'logo' => null,
        'apps' => null,
        'owner' => null,
        'config' => null,
        'group' => null,
        'cloud' => null,
        'used_count' => 'int64',
        'reserved_count' => 'int64',
        'preparing_count' => 'int64',
        'idle_count' => 'int64',
        'status' => null,
        'date_created' => 'date-time',
        'last_updated' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'description' => 'description',
        'min_idle' => 'minIdle',
        'max_idle' => 'maxIdle',
        'initial_pool_size' => 'initialPoolSize',
        'max_pool_size' => 'maxPoolSize',
        'allocation_timeout_minutes' => 'allocationTimeoutMinutes',
        'persistent_user' => 'persistentUser',
        'recyclable' => 'recyclable',
        'enabled' => 'enabled',
        'auto_create_local_user_on_reservation' => 'autoCreateLocalUserOnReservation',
        'allow_hypervisor_console' => 'allowHypervisorConsole',
        'allow_copy' => 'allowCopy',
        'allow_printer' => 'allowPrinter',
        'allow_fileshare' => 'allowFileshare',
        'guest_console_jump_host' => 'guestConsoleJumpHost',
        'guest_console_jump_port' => 'guestConsoleJumpPort',
        'guest_console_jump_username' => 'guestConsoleJumpUsername',
        'guest_console_jump_password' => 'guestConsoleJumpPassword',
        'guest_console_jump_keypair' => 'guestConsoleJumpKeypair',
        'gateway' => 'gateway',
        'icon_path' => 'iconPath',
        'logo' => 'logo',
        'apps' => 'apps',
        'owner' => 'owner',
        'config' => 'config',
        'group' => 'group',
        'cloud' => 'cloud',
        'used_count' => 'usedCount',
        'reserved_count' => 'reservedCount',
        'preparing_count' => 'preparingCount',
        'idle_count' => 'idleCount',
        'status' => 'status',
        'date_created' => 'dateCreated',
        'last_updated' => 'lastUpdated'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'description' => 'setDescription',
        'min_idle' => 'setMinIdle',
        'max_idle' => 'setMaxIdle',
        'initial_pool_size' => 'setInitialPoolSize',
        'max_pool_size' => 'setMaxPoolSize',
        'allocation_timeout_minutes' => 'setAllocationTimeoutMinutes',
        'persistent_user' => 'setPersistentUser',
        'recyclable' => 'setRecyclable',
        'enabled' => 'setEnabled',
        'auto_create_local_user_on_reservation' => 'setAutoCreateLocalUserOnReservation',
        'allow_hypervisor_console' => 'setAllowHypervisorConsole',
        'allow_copy' => 'setAllowCopy',
        'allow_printer' => 'setAllowPrinter',
        'allow_fileshare' => 'setAllowFileshare',
        'guest_console_jump_host' => 'setGuestConsoleJumpHost',
        'guest_console_jump_port' => 'setGuestConsoleJumpPort',
        'guest_console_jump_username' => 'setGuestConsoleJumpUsername',
        'guest_console_jump_password' => 'setGuestConsoleJumpPassword',
        'guest_console_jump_keypair' => 'setGuestConsoleJumpKeypair',
        'gateway' => 'setGateway',
        'icon_path' => 'setIconPath',
        'logo' => 'setLogo',
        'apps' => 'setApps',
        'owner' => 'setOwner',
        'config' => 'setConfig',
        'group' => 'setGroup',
        'cloud' => 'setCloud',
        'used_count' => 'setUsedCount',
        'reserved_count' => 'setReservedCount',
        'preparing_count' => 'setPreparingCount',
        'idle_count' => 'setIdleCount',
        'status' => 'setStatus',
        'date_created' => 'setDateCreated',
        'last_updated' => 'setLastUpdated'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'description' => 'getDescription',
        'min_idle' => 'getMinIdle',
        'max_idle' => 'getMaxIdle',
        'initial_pool_size' => 'getInitialPoolSize',
        'max_pool_size' => 'getMaxPoolSize',
        'allocation_timeout_minutes' => 'getAllocationTimeoutMinutes',
        'persistent_user' => 'getPersistentUser',
        'recyclable' => 'getRecyclable',
        'enabled' => 'getEnabled',
        'auto_create_local_user_on_reservation' => 'getAutoCreateLocalUserOnReservation',
        'allow_hypervisor_console' => 'getAllowHypervisorConsole',
        'allow_copy' => 'getAllowCopy',
        'allow_printer' => 'getAllowPrinter',
        'allow_fileshare' => 'getAllowFileshare',
        'guest_console_jump_host' => 'getGuestConsoleJumpHost',
        'guest_console_jump_port' => 'getGuestConsoleJumpPort',
        'guest_console_jump_username' => 'getGuestConsoleJumpUsername',
        'guest_console_jump_password' => 'getGuestConsoleJumpPassword',
        'guest_console_jump_keypair' => 'getGuestConsoleJumpKeypair',
        'gateway' => 'getGateway',
        'icon_path' => 'getIconPath',
        'logo' => 'getLogo',
        'apps' => 'getApps',
        'owner' => 'getOwner',
        'config' => 'getConfig',
        'group' => 'getGroup',
        'cloud' => 'getCloud',
        'used_count' => 'getUsedCount',
        'reserved_count' => 'getReservedCount',
        'preparing_count' => 'getPreparingCount',
        'idle_count' => 'getIdleCount',
        'status' => 'getStatus',
        'date_created' => 'getDateCreated',
        'last_updated' => 'getLastUpdated'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['min_idle'] = $data['min_idle'] ?? null;
        $this->container['max_idle'] = $data['max_idle'] ?? null;
        $this->container['initial_pool_size'] = $data['initial_pool_size'] ?? null;
        $this->container['max_pool_size'] = $data['max_pool_size'] ?? null;
        $this->container['allocation_timeout_minutes'] = $data['allocation_timeout_minutes'] ?? null;
        $this->container['persistent_user'] = $data['persistent_user'] ?? null;
        $this->container['recyclable'] = $data['recyclable'] ?? null;
        $this->container['enabled'] = $data['enabled'] ?? null;
        $this->container['auto_create_local_user_on_reservation'] = $data['auto_create_local_user_on_reservation'] ?? null;
        $this->container['allow_hypervisor_console'] = $data['allow_hypervisor_console'] ?? null;
        $this->container['allow_copy'] = $data['allow_copy'] ?? null;
        $this->container['allow_printer'] = $data['allow_printer'] ?? null;
        $this->container['allow_fileshare'] = $data['allow_fileshare'] ?? null;
        $this->container['guest_console_jump_host'] = $data['guest_console_jump_host'] ?? null;
        $this->container['guest_console_jump_port'] = $data['guest_console_jump_port'] ?? null;
        $this->container['guest_console_jump_username'] = $data['guest_console_jump_username'] ?? null;
        $this->container['guest_console_jump_password'] = $data['guest_console_jump_password'] ?? null;
        $this->container['guest_console_jump_keypair'] = $data['guest_console_jump_keypair'] ?? null;
        $this->container['gateway'] = $data['gateway'] ?? null;
        $this->container['icon_path'] = $data['icon_path'] ?? null;
        $this->container['logo'] = $data['logo'] ?? null;
        $this->container['apps'] = $data['apps'] ?? null;
        $this->container['owner'] = $data['owner'] ?? null;
        $this->container['config'] = $data['config'] ?? null;
        $this->container['group'] = $data['group'] ?? null;
        $this->container['cloud'] = $data['cloud'] ?? null;
        $this->container['used_count'] = $data['used_count'] ?? null;
        $this->container['reserved_count'] = $data['reserved_count'] ?? null;
        $this->container['preparing_count'] = $data['preparing_count'] ?? null;
        $this->container['idle_count'] = $data['idle_count'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['date_created'] = $data['date_created'] ?? null;
        $this->container['last_updated'] = $data['last_updated'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets min_idle
     *
     * @return int|null
     */
    public function getMinIdle()
    {
        return $this->container['min_idle'];
    }

    /**
     * Sets min_idle
     *
     * @param int|null $min_idle min_idle
     *
     * @return self
     */
    public function setMinIdle($min_idle)
    {
        $this->container['min_idle'] = $min_idle;

        return $this;
    }

    /**
     * Gets max_idle
     *
     * @return int|null
     */
    public function getMaxIdle()
    {
        return $this->container['max_idle'];
    }

    /**
     * Sets max_idle
     *
     * @param int|null $max_idle max_idle
     *
     * @return self
     */
    public function setMaxIdle($max_idle)
    {
        $this->container['max_idle'] = $max_idle;

        return $this;
    }

    /**
     * Gets initial_pool_size
     *
     * @return int|null
     */
    public function getInitialPoolSize()
    {
        return $this->container['initial_pool_size'];
    }

    /**
     * Sets initial_pool_size
     *
     * @param int|null $initial_pool_size initial_pool_size
     *
     * @return self
     */
    public function setInitialPoolSize($initial_pool_size)
    {
        $this->container['initial_pool_size'] = $initial_pool_size;

        return $this;
    }

    /**
     * Gets max_pool_size
     *
     * @return int|null
     */
    public function getMaxPoolSize()
    {
        return $this->container['max_pool_size'];
    }

    /**
     * Sets max_pool_size
     *
     * @param int|null $max_pool_size max_pool_size
     *
     * @return self
     */
    public function setMaxPoolSize($max_pool_size)
    {
        $this->container['max_pool_size'] = $max_pool_size;

        return $this;
    }

    /**
     * Gets allocation_timeout_minutes
     *
     * @return int|null
     */
    public function getAllocationTimeoutMinutes()
    {
        return $this->container['allocation_timeout_minutes'];
    }

    /**
     * Sets allocation_timeout_minutes
     *
     * @param int|null $allocation_timeout_minutes allocation_timeout_minutes
     *
     * @return self
     */
    public function setAllocationTimeoutMinutes($allocation_timeout_minutes)
    {
        $this->container['allocation_timeout_minutes'] = $allocation_timeout_minutes;

        return $this;
    }

    /**
     * Gets persistent_user
     *
     * @return bool|null
     */
    public function getPersistentUser()
    {
        return $this->container['persistent_user'];
    }

    /**
     * Sets persistent_user
     *
     * @param bool|null $persistent_user persistent_user
     *
     * @return self
     */
    public function setPersistentUser($persistent_user)
    {
        $this->container['persistent_user'] = $persistent_user;

        return $this;
    }

    /**
     * Gets recyclable
     *
     * @return bool|null
     */
    public function getRecyclable()
    {
        return $this->container['recyclable'];
    }

    /**
     * Sets recyclable
     *
     * @param bool|null $recyclable recyclable
     *
     * @return self
     */
    public function setRecyclable($recyclable)
    {
        $this->container['recyclable'] = $recyclable;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool|null
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool|null $enabled enabled
     *
     * @return self
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets auto_create_local_user_on_reservation
     *
     * @return bool|null
     */
    public function getAutoCreateLocalUserOnReservation()
    {
        return $this->container['auto_create_local_user_on_reservation'];
    }

    /**
     * Sets auto_create_local_user_on_reservation
     *
     * @param bool|null $auto_create_local_user_on_reservation auto_create_local_user_on_reservation
     *
     * @return self
     */
    public function setAutoCreateLocalUserOnReservation($auto_create_local_user_on_reservation)
    {
        $this->container['auto_create_local_user_on_reservation'] = $auto_create_local_user_on_reservation;

        return $this;
    }

    /**
     * Gets allow_hypervisor_console
     *
     * @return bool|null
     */
    public function getAllowHypervisorConsole()
    {
        return $this->container['allow_hypervisor_console'];
    }

    /**
     * Sets allow_hypervisor_console
     *
     * @param bool|null $allow_hypervisor_console allow_hypervisor_console
     *
     * @return self
     */
    public function setAllowHypervisorConsole($allow_hypervisor_console)
    {
        $this->container['allow_hypervisor_console'] = $allow_hypervisor_console;

        return $this;
    }

    /**
     * Gets allow_copy
     *
     * @return bool|null
     */
    public function getAllowCopy()
    {
        return $this->container['allow_copy'];
    }

    /**
     * Sets allow_copy
     *
     * @param bool|null $allow_copy allow_copy
     *
     * @return self
     */
    public function setAllowCopy($allow_copy)
    {
        $this->container['allow_copy'] = $allow_copy;

        return $this;
    }

    /**
     * Gets allow_printer
     *
     * @return bool|null
     */
    public function getAllowPrinter()
    {
        return $this->container['allow_printer'];
    }

    /**
     * Sets allow_printer
     *
     * @param bool|null $allow_printer allow_printer
     *
     * @return self
     */
    public function setAllowPrinter($allow_printer)
    {
        $this->container['allow_printer'] = $allow_printer;

        return $this;
    }

    /**
     * Gets allow_fileshare
     *
     * @return bool|null
     */
    public function getAllowFileshare()
    {
        return $this->container['allow_fileshare'];
    }

    /**
     * Sets allow_fileshare
     *
     * @param bool|null $allow_fileshare allow_fileshare
     *
     * @return self
     */
    public function setAllowFileshare($allow_fileshare)
    {
        $this->container['allow_fileshare'] = $allow_fileshare;

        return $this;
    }

    /**
     * Gets guest_console_jump_host
     *
     * @return string|null
     */
    public function getGuestConsoleJumpHost()
    {
        return $this->container['guest_console_jump_host'];
    }

    /**
     * Sets guest_console_jump_host
     *
     * @param string|null $guest_console_jump_host guest_console_jump_host
     *
     * @return self
     */
    public function setGuestConsoleJumpHost($guest_console_jump_host)
    {
        $this->container['guest_console_jump_host'] = $guest_console_jump_host;

        return $this;
    }

    /**
     * Gets guest_console_jump_port
     *
     * @return string|null
     */
    public function getGuestConsoleJumpPort()
    {
        return $this->container['guest_console_jump_port'];
    }

    /**
     * Sets guest_console_jump_port
     *
     * @param string|null $guest_console_jump_port guest_console_jump_port
     *
     * @return self
     */
    public function setGuestConsoleJumpPort($guest_console_jump_port)
    {
        $this->container['guest_console_jump_port'] = $guest_console_jump_port;

        return $this;
    }

    /**
     * Gets guest_console_jump_username
     *
     * @return string|null
     */
    public function getGuestConsoleJumpUsername()
    {
        return $this->container['guest_console_jump_username'];
    }

    /**
     * Sets guest_console_jump_username
     *
     * @param string|null $guest_console_jump_username guest_console_jump_username
     *
     * @return self
     */
    public function setGuestConsoleJumpUsername($guest_console_jump_username)
    {
        $this->container['guest_console_jump_username'] = $guest_console_jump_username;

        return $this;
    }

    /**
     * Gets guest_console_jump_password
     *
     * @return string|null
     */
    public function getGuestConsoleJumpPassword()
    {
        return $this->container['guest_console_jump_password'];
    }

    /**
     * Sets guest_console_jump_password
     *
     * @param string|null $guest_console_jump_password guest_console_jump_password
     *
     * @return self
     */
    public function setGuestConsoleJumpPassword($guest_console_jump_password)
    {
        $this->container['guest_console_jump_password'] = $guest_console_jump_password;

        return $this;
    }

    /**
     * Gets guest_console_jump_keypair
     *
     * @return string|null
     */
    public function getGuestConsoleJumpKeypair()
    {
        return $this->container['guest_console_jump_keypair'];
    }

    /**
     * Sets guest_console_jump_keypair
     *
     * @param string|null $guest_console_jump_keypair guest_console_jump_keypair
     *
     * @return self
     */
    public function setGuestConsoleJumpKeypair($guest_console_jump_keypair)
    {
        $this->container['guest_console_jump_keypair'] = $guest_console_jump_keypair;

        return $this;
    }

    /**
     * Gets gateway
     *
     * @return \OpenAPI\Client\Model\InlineResponse20082LoadBalancerInstanceSslCert|null
     */
    public function getGateway()
    {
        return $this->container['gateway'];
    }

    /**
     * Sets gateway
     *
     * @param \OpenAPI\Client\Model\InlineResponse20082LoadBalancerInstanceSslCert|null $gateway gateway
     *
     * @return self
     */
    public function setGateway($gateway)
    {
        $this->container['gateway'] = $gateway;

        return $this;
    }

    /**
     * Gets icon_path
     *
     * @return string|null
     */
    public function getIconPath()
    {
        return $this->container['icon_path'];
    }

    /**
     * Sets icon_path
     *
     * @param string|null $icon_path icon_path
     *
     * @return self
     */
    public function setIconPath($icon_path)
    {
        $this->container['icon_path'] = $icon_path;

        return $this;
    }

    /**
     * Gets logo
     *
     * @return string|null
     */
    public function getLogo()
    {
        return $this->container['logo'];
    }

    /**
     * Sets logo
     *
     * @param string|null $logo logo
     *
     * @return self
     */
    public function setLogo($logo)
    {
        $this->container['logo'] = $logo;

        return $this;
    }

    /**
     * Gets apps
     *
     * @return \OpenAPI\Client\Model\InlineResponse20040AppDeployInstance[]|null
     */
    public function getApps()
    {
        return $this->container['apps'];
    }

    /**
     * Sets apps
     *
     * @param \OpenAPI\Client\Model\InlineResponse20040AppDeployInstance[]|null $apps apps
     *
     * @return self
     */
    public function setApps($apps)
    {
        $this->container['apps'] = $apps;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return \OpenAPI\Client\Model\VdiPoolOwner|null
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param \OpenAPI\Client\Model\VdiPoolOwner|null $owner owner
     *
     * @return self
     */
    public function setOwner($owner)
    {
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets config
     *
     * @return \OpenAPI\Client\Model\VdiPoolConfig|null
     */
    public function getConfig()
    {
        return $this->container['config'];
    }

    /**
     * Sets config
     *
     * @param \OpenAPI\Client\Model\VdiPoolConfig|null $config config
     *
     * @return self
     */
    public function setConfig($config)
    {
        $this->container['config'] = $config;

        return $this;
    }

    /**
     * Gets group
     *
     * @return \OpenAPI\Client\Model\InlineResponse20082LoadBalancerInstanceSslCert|null
     */
    public function getGroup()
    {
        return $this->container['group'];
    }

    /**
     * Sets group
     *
     * @param \OpenAPI\Client\Model\InlineResponse20082LoadBalancerInstanceSslCert|null $group group
     *
     * @return self
     */
    public function setGroup($group)
    {
        $this->container['group'] = $group;

        return $this;
    }

    /**
     * Gets cloud
     *
     * @return \OpenAPI\Client\Model\InlineResponse20082LoadBalancerInstanceSslCert|null
     */
    public function getCloud()
    {
        return $this->container['cloud'];
    }

    /**
     * Sets cloud
     *
     * @param \OpenAPI\Client\Model\InlineResponse20082LoadBalancerInstanceSslCert|null $cloud cloud
     *
     * @return self
     */
    public function setCloud($cloud)
    {
        $this->container['cloud'] = $cloud;

        return $this;
    }

    /**
     * Gets used_count
     *
     * @return int|null
     */
    public function getUsedCount()
    {
        return $this->container['used_count'];
    }

    /**
     * Sets used_count
     *
     * @param int|null $used_count used_count
     *
     * @return self
     */
    public function setUsedCount($used_count)
    {
        $this->container['used_count'] = $used_count;

        return $this;
    }

    /**
     * Gets reserved_count
     *
     * @return int|null
     */
    public function getReservedCount()
    {
        return $this->container['reserved_count'];
    }

    /**
     * Sets reserved_count
     *
     * @param int|null $reserved_count reserved_count
     *
     * @return self
     */
    public function setReservedCount($reserved_count)
    {
        $this->container['reserved_count'] = $reserved_count;

        return $this;
    }

    /**
     * Gets preparing_count
     *
     * @return int|null
     */
    public function getPreparingCount()
    {
        return $this->container['preparing_count'];
    }

    /**
     * Sets preparing_count
     *
     * @param int|null $preparing_count preparing_count
     *
     * @return self
     */
    public function setPreparingCount($preparing_count)
    {
        $this->container['preparing_count'] = $preparing_count;

        return $this;
    }

    /**
     * Gets idle_count
     *
     * @return int|null
     */
    public function getIdleCount()
    {
        return $this->container['idle_count'];
    }

    /**
     * Sets idle_count
     *
     * @param int|null $idle_count idle_count
     *
     * @return self
     */
    public function setIdleCount($idle_count)
    {
        $this->container['idle_count'] = $idle_count;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets date_created
     *
     * @return \DateTime|null
     */
    public function getDateCreated()
    {
        return $this->container['date_created'];
    }

    /**
     * Sets date_created
     *
     * @param \DateTime|null $date_created date_created
     *
     * @return self
     */
    public function setDateCreated($date_created)
    {
        $this->container['date_created'] = $date_created;

        return $this;
    }

    /**
     * Gets last_updated
     *
     * @return \DateTime|null
     */
    public function getLastUpdated()
    {
        return $this->container['last_updated'];
    }

    /**
     * Sets last_updated
     *
     * @param \DateTime|null $last_updated last_updated
     *
     * @return self
     */
    public function setLastUpdated($last_updated)
    {
        $this->container['last_updated'] = $last_updated;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


