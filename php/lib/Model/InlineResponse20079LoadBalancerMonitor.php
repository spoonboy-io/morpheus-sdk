<?php
/**
 * InlineResponse20079LoadBalancerMonitor
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * InlineResponse20079LoadBalancerMonitor Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineResponse20079LoadBalancerMonitor implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_response_200_79_loadBalancerMonitor';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'load_balancer' => '\OpenAPI\Client\Model\InlineResponse20079LoadBalancerMonitorLoadBalancer',
        'name' => 'string',
        'code' => 'string',
        'category' => 'string',
        'visibility' => 'string',
        'description' => 'string',
        'monitor_type' => 'string',
        'monitor_interval' => 'int',
        'monitor_timeout' => 'int',
        'send_data' => 'string',
        'send_version' => 'string',
        'send_type' => 'string',
        'receive_data' => 'string',
        'receive_code' => 'string',
        'disabled_data' => 'string',
        'monitor_username' => 'string',
        'monitor_password' => 'string',
        'monitor_destination' => 'string',
        'monitor_reverse' => 'bool',
        'monitor_transparent' => 'bool',
        'monitor_adaptive' => 'bool',
        'alias_address' => 'string',
        'alias_port' => 'int',
        'internal_id' => 'string',
        'external_id' => 'string',
        'monitor_source' => 'string',
        'status' => 'string',
        'status_message' => 'string',
        'status_date' => '\DateTime',
        'enabled' => 'bool',
        'max_retry' => 'int',
        'fall_count' => 'int',
        'rise_count' => 'int',
        'data_length' => 'string',
        'config' => 'object',
        'created_by' => 'string',
        'date_created' => '\DateTime',
        'last_updated' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'load_balancer' => null,
        'name' => null,
        'code' => null,
        'category' => null,
        'visibility' => null,
        'description' => null,
        'monitor_type' => null,
        'monitor_interval' => 'int64',
        'monitor_timeout' => 'int64',
        'send_data' => null,
        'send_version' => null,
        'send_type' => null,
        'receive_data' => null,
        'receive_code' => null,
        'disabled_data' => null,
        'monitor_username' => null,
        'monitor_password' => null,
        'monitor_destination' => null,
        'monitor_reverse' => null,
        'monitor_transparent' => null,
        'monitor_adaptive' => null,
        'alias_address' => null,
        'alias_port' => 'int64',
        'internal_id' => null,
        'external_id' => null,
        'monitor_source' => null,
        'status' => null,
        'status_message' => null,
        'status_date' => 'date-time',
        'enabled' => null,
        'max_retry' => 'int64',
        'fall_count' => 'int64',
        'rise_count' => 'int64',
        'data_length' => null,
        'config' => null,
        'created_by' => null,
        'date_created' => 'date-time',
        'last_updated' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'load_balancer' => 'loadBalancer',
        'name' => 'name',
        'code' => 'code',
        'category' => 'category',
        'visibility' => 'visibility',
        'description' => 'description',
        'monitor_type' => 'monitorType',
        'monitor_interval' => 'monitorInterval',
        'monitor_timeout' => 'monitorTimeout',
        'send_data' => 'sendData',
        'send_version' => 'sendVersion',
        'send_type' => 'sendType',
        'receive_data' => 'receiveData',
        'receive_code' => 'receiveCode',
        'disabled_data' => 'disabledData',
        'monitor_username' => 'monitorUsername',
        'monitor_password' => 'monitorPassword',
        'monitor_destination' => 'monitorDestination',
        'monitor_reverse' => 'monitorReverse',
        'monitor_transparent' => 'monitorTransparent',
        'monitor_adaptive' => 'monitorAdaptive',
        'alias_address' => 'aliasAddress',
        'alias_port' => 'aliasPort',
        'internal_id' => 'internalId',
        'external_id' => 'externalId',
        'monitor_source' => 'monitorSource',
        'status' => 'status',
        'status_message' => 'statusMessage',
        'status_date' => 'statusDate',
        'enabled' => 'enabled',
        'max_retry' => 'maxRetry',
        'fall_count' => 'fallCount',
        'rise_count' => 'riseCount',
        'data_length' => 'dataLength',
        'config' => 'config',
        'created_by' => 'createdBy',
        'date_created' => 'dateCreated',
        'last_updated' => 'lastUpdated'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'load_balancer' => 'setLoadBalancer',
        'name' => 'setName',
        'code' => 'setCode',
        'category' => 'setCategory',
        'visibility' => 'setVisibility',
        'description' => 'setDescription',
        'monitor_type' => 'setMonitorType',
        'monitor_interval' => 'setMonitorInterval',
        'monitor_timeout' => 'setMonitorTimeout',
        'send_data' => 'setSendData',
        'send_version' => 'setSendVersion',
        'send_type' => 'setSendType',
        'receive_data' => 'setReceiveData',
        'receive_code' => 'setReceiveCode',
        'disabled_data' => 'setDisabledData',
        'monitor_username' => 'setMonitorUsername',
        'monitor_password' => 'setMonitorPassword',
        'monitor_destination' => 'setMonitorDestination',
        'monitor_reverse' => 'setMonitorReverse',
        'monitor_transparent' => 'setMonitorTransparent',
        'monitor_adaptive' => 'setMonitorAdaptive',
        'alias_address' => 'setAliasAddress',
        'alias_port' => 'setAliasPort',
        'internal_id' => 'setInternalId',
        'external_id' => 'setExternalId',
        'monitor_source' => 'setMonitorSource',
        'status' => 'setStatus',
        'status_message' => 'setStatusMessage',
        'status_date' => 'setStatusDate',
        'enabled' => 'setEnabled',
        'max_retry' => 'setMaxRetry',
        'fall_count' => 'setFallCount',
        'rise_count' => 'setRiseCount',
        'data_length' => 'setDataLength',
        'config' => 'setConfig',
        'created_by' => 'setCreatedBy',
        'date_created' => 'setDateCreated',
        'last_updated' => 'setLastUpdated'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'load_balancer' => 'getLoadBalancer',
        'name' => 'getName',
        'code' => 'getCode',
        'category' => 'getCategory',
        'visibility' => 'getVisibility',
        'description' => 'getDescription',
        'monitor_type' => 'getMonitorType',
        'monitor_interval' => 'getMonitorInterval',
        'monitor_timeout' => 'getMonitorTimeout',
        'send_data' => 'getSendData',
        'send_version' => 'getSendVersion',
        'send_type' => 'getSendType',
        'receive_data' => 'getReceiveData',
        'receive_code' => 'getReceiveCode',
        'disabled_data' => 'getDisabledData',
        'monitor_username' => 'getMonitorUsername',
        'monitor_password' => 'getMonitorPassword',
        'monitor_destination' => 'getMonitorDestination',
        'monitor_reverse' => 'getMonitorReverse',
        'monitor_transparent' => 'getMonitorTransparent',
        'monitor_adaptive' => 'getMonitorAdaptive',
        'alias_address' => 'getAliasAddress',
        'alias_port' => 'getAliasPort',
        'internal_id' => 'getInternalId',
        'external_id' => 'getExternalId',
        'monitor_source' => 'getMonitorSource',
        'status' => 'getStatus',
        'status_message' => 'getStatusMessage',
        'status_date' => 'getStatusDate',
        'enabled' => 'getEnabled',
        'max_retry' => 'getMaxRetry',
        'fall_count' => 'getFallCount',
        'rise_count' => 'getRiseCount',
        'data_length' => 'getDataLength',
        'config' => 'getConfig',
        'created_by' => 'getCreatedBy',
        'date_created' => 'getDateCreated',
        'last_updated' => 'getLastUpdated'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['load_balancer'] = $data['load_balancer'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['code'] = $data['code'] ?? null;
        $this->container['category'] = $data['category'] ?? null;
        $this->container['visibility'] = $data['visibility'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['monitor_type'] = $data['monitor_type'] ?? null;
        $this->container['monitor_interval'] = $data['monitor_interval'] ?? null;
        $this->container['monitor_timeout'] = $data['monitor_timeout'] ?? null;
        $this->container['send_data'] = $data['send_data'] ?? null;
        $this->container['send_version'] = $data['send_version'] ?? null;
        $this->container['send_type'] = $data['send_type'] ?? null;
        $this->container['receive_data'] = $data['receive_data'] ?? null;
        $this->container['receive_code'] = $data['receive_code'] ?? null;
        $this->container['disabled_data'] = $data['disabled_data'] ?? null;
        $this->container['monitor_username'] = $data['monitor_username'] ?? null;
        $this->container['monitor_password'] = $data['monitor_password'] ?? null;
        $this->container['monitor_destination'] = $data['monitor_destination'] ?? null;
        $this->container['monitor_reverse'] = $data['monitor_reverse'] ?? null;
        $this->container['monitor_transparent'] = $data['monitor_transparent'] ?? null;
        $this->container['monitor_adaptive'] = $data['monitor_adaptive'] ?? null;
        $this->container['alias_address'] = $data['alias_address'] ?? null;
        $this->container['alias_port'] = $data['alias_port'] ?? null;
        $this->container['internal_id'] = $data['internal_id'] ?? null;
        $this->container['external_id'] = $data['external_id'] ?? null;
        $this->container['monitor_source'] = $data['monitor_source'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['status_message'] = $data['status_message'] ?? null;
        $this->container['status_date'] = $data['status_date'] ?? null;
        $this->container['enabled'] = $data['enabled'] ?? null;
        $this->container['max_retry'] = $data['max_retry'] ?? null;
        $this->container['fall_count'] = $data['fall_count'] ?? null;
        $this->container['rise_count'] = $data['rise_count'] ?? null;
        $this->container['data_length'] = $data['data_length'] ?? null;
        $this->container['config'] = $data['config'] ?? null;
        $this->container['created_by'] = $data['created_by'] ?? null;
        $this->container['date_created'] = $data['date_created'] ?? null;
        $this->container['last_updated'] = $data['last_updated'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets load_balancer
     *
     * @return \OpenAPI\Client\Model\InlineResponse20079LoadBalancerMonitorLoadBalancer|null
     */
    public function getLoadBalancer()
    {
        return $this->container['load_balancer'];
    }

    /**
     * Sets load_balancer
     *
     * @param \OpenAPI\Client\Model\InlineResponse20079LoadBalancerMonitorLoadBalancer|null $load_balancer load_balancer
     *
     * @return self
     */
    public function setLoadBalancer($load_balancer)
    {
        $this->container['load_balancer'] = $load_balancer;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string|null
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string|null $code code
     *
     * @return self
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets category
     *
     * @return string|null
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param string|null $category category
     *
     * @return self
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets visibility
     *
     * @return string|null
     */
    public function getVisibility()
    {
        return $this->container['visibility'];
    }

    /**
     * Sets visibility
     *
     * @param string|null $visibility visibility
     *
     * @return self
     */
    public function setVisibility($visibility)
    {
        $this->container['visibility'] = $visibility;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets monitor_type
     *
     * @return string|null
     */
    public function getMonitorType()
    {
        return $this->container['monitor_type'];
    }

    /**
     * Sets monitor_type
     *
     * @param string|null $monitor_type monitor_type
     *
     * @return self
     */
    public function setMonitorType($monitor_type)
    {
        $this->container['monitor_type'] = $monitor_type;

        return $this;
    }

    /**
     * Gets monitor_interval
     *
     * @return int|null
     */
    public function getMonitorInterval()
    {
        return $this->container['monitor_interval'];
    }

    /**
     * Sets monitor_interval
     *
     * @param int|null $monitor_interval monitor_interval
     *
     * @return self
     */
    public function setMonitorInterval($monitor_interval)
    {
        $this->container['monitor_interval'] = $monitor_interval;

        return $this;
    }

    /**
     * Gets monitor_timeout
     *
     * @return int|null
     */
    public function getMonitorTimeout()
    {
        return $this->container['monitor_timeout'];
    }

    /**
     * Sets monitor_timeout
     *
     * @param int|null $monitor_timeout monitor_timeout
     *
     * @return self
     */
    public function setMonitorTimeout($monitor_timeout)
    {
        $this->container['monitor_timeout'] = $monitor_timeout;

        return $this;
    }

    /**
     * Gets send_data
     *
     * @return string|null
     */
    public function getSendData()
    {
        return $this->container['send_data'];
    }

    /**
     * Sets send_data
     *
     * @param string|null $send_data send_data
     *
     * @return self
     */
    public function setSendData($send_data)
    {
        $this->container['send_data'] = $send_data;

        return $this;
    }

    /**
     * Gets send_version
     *
     * @return string|null
     */
    public function getSendVersion()
    {
        return $this->container['send_version'];
    }

    /**
     * Sets send_version
     *
     * @param string|null $send_version send_version
     *
     * @return self
     */
    public function setSendVersion($send_version)
    {
        $this->container['send_version'] = $send_version;

        return $this;
    }

    /**
     * Gets send_type
     *
     * @return string|null
     */
    public function getSendType()
    {
        return $this->container['send_type'];
    }

    /**
     * Sets send_type
     *
     * @param string|null $send_type send_type
     *
     * @return self
     */
    public function setSendType($send_type)
    {
        $this->container['send_type'] = $send_type;

        return $this;
    }

    /**
     * Gets receive_data
     *
     * @return string|null
     */
    public function getReceiveData()
    {
        return $this->container['receive_data'];
    }

    /**
     * Sets receive_data
     *
     * @param string|null $receive_data receive_data
     *
     * @return self
     */
    public function setReceiveData($receive_data)
    {
        $this->container['receive_data'] = $receive_data;

        return $this;
    }

    /**
     * Gets receive_code
     *
     * @return string|null
     */
    public function getReceiveCode()
    {
        return $this->container['receive_code'];
    }

    /**
     * Sets receive_code
     *
     * @param string|null $receive_code receive_code
     *
     * @return self
     */
    public function setReceiveCode($receive_code)
    {
        $this->container['receive_code'] = $receive_code;

        return $this;
    }

    /**
     * Gets disabled_data
     *
     * @return string|null
     */
    public function getDisabledData()
    {
        return $this->container['disabled_data'];
    }

    /**
     * Sets disabled_data
     *
     * @param string|null $disabled_data disabled_data
     *
     * @return self
     */
    public function setDisabledData($disabled_data)
    {
        $this->container['disabled_data'] = $disabled_data;

        return $this;
    }

    /**
     * Gets monitor_username
     *
     * @return string|null
     */
    public function getMonitorUsername()
    {
        return $this->container['monitor_username'];
    }

    /**
     * Sets monitor_username
     *
     * @param string|null $monitor_username monitor_username
     *
     * @return self
     */
    public function setMonitorUsername($monitor_username)
    {
        $this->container['monitor_username'] = $monitor_username;

        return $this;
    }

    /**
     * Gets monitor_password
     *
     * @return string|null
     */
    public function getMonitorPassword()
    {
        return $this->container['monitor_password'];
    }

    /**
     * Sets monitor_password
     *
     * @param string|null $monitor_password monitor_password
     *
     * @return self
     */
    public function setMonitorPassword($monitor_password)
    {
        $this->container['monitor_password'] = $monitor_password;

        return $this;
    }

    /**
     * Gets monitor_destination
     *
     * @return string|null
     */
    public function getMonitorDestination()
    {
        return $this->container['monitor_destination'];
    }

    /**
     * Sets monitor_destination
     *
     * @param string|null $monitor_destination monitor_destination
     *
     * @return self
     */
    public function setMonitorDestination($monitor_destination)
    {
        $this->container['monitor_destination'] = $monitor_destination;

        return $this;
    }

    /**
     * Gets monitor_reverse
     *
     * @return bool|null
     */
    public function getMonitorReverse()
    {
        return $this->container['monitor_reverse'];
    }

    /**
     * Sets monitor_reverse
     *
     * @param bool|null $monitor_reverse monitor_reverse
     *
     * @return self
     */
    public function setMonitorReverse($monitor_reverse)
    {
        $this->container['monitor_reverse'] = $monitor_reverse;

        return $this;
    }

    /**
     * Gets monitor_transparent
     *
     * @return bool|null
     */
    public function getMonitorTransparent()
    {
        return $this->container['monitor_transparent'];
    }

    /**
     * Sets monitor_transparent
     *
     * @param bool|null $monitor_transparent monitor_transparent
     *
     * @return self
     */
    public function setMonitorTransparent($monitor_transparent)
    {
        $this->container['monitor_transparent'] = $monitor_transparent;

        return $this;
    }

    /**
     * Gets monitor_adaptive
     *
     * @return bool|null
     */
    public function getMonitorAdaptive()
    {
        return $this->container['monitor_adaptive'];
    }

    /**
     * Sets monitor_adaptive
     *
     * @param bool|null $monitor_adaptive monitor_adaptive
     *
     * @return self
     */
    public function setMonitorAdaptive($monitor_adaptive)
    {
        $this->container['monitor_adaptive'] = $monitor_adaptive;

        return $this;
    }

    /**
     * Gets alias_address
     *
     * @return string|null
     */
    public function getAliasAddress()
    {
        return $this->container['alias_address'];
    }

    /**
     * Sets alias_address
     *
     * @param string|null $alias_address alias_address
     *
     * @return self
     */
    public function setAliasAddress($alias_address)
    {
        $this->container['alias_address'] = $alias_address;

        return $this;
    }

    /**
     * Gets alias_port
     *
     * @return int|null
     */
    public function getAliasPort()
    {
        return $this->container['alias_port'];
    }

    /**
     * Sets alias_port
     *
     * @param int|null $alias_port alias_port
     *
     * @return self
     */
    public function setAliasPort($alias_port)
    {
        $this->container['alias_port'] = $alias_port;

        return $this;
    }

    /**
     * Gets internal_id
     *
     * @return string|null
     */
    public function getInternalId()
    {
        return $this->container['internal_id'];
    }

    /**
     * Sets internal_id
     *
     * @param string|null $internal_id internal_id
     *
     * @return self
     */
    public function setInternalId($internal_id)
    {
        $this->container['internal_id'] = $internal_id;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string|null
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string|null $external_id external_id
     *
     * @return self
     */
    public function setExternalId($external_id)
    {
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets monitor_source
     *
     * @return string|null
     */
    public function getMonitorSource()
    {
        return $this->container['monitor_source'];
    }

    /**
     * Sets monitor_source
     *
     * @param string|null $monitor_source monitor_source
     *
     * @return self
     */
    public function setMonitorSource($monitor_source)
    {
        $this->container['monitor_source'] = $monitor_source;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets status_message
     *
     * @return string|null
     */
    public function getStatusMessage()
    {
        return $this->container['status_message'];
    }

    /**
     * Sets status_message
     *
     * @param string|null $status_message status_message
     *
     * @return self
     */
    public function setStatusMessage($status_message)
    {
        $this->container['status_message'] = $status_message;

        return $this;
    }

    /**
     * Gets status_date
     *
     * @return \DateTime|null
     */
    public function getStatusDate()
    {
        return $this->container['status_date'];
    }

    /**
     * Sets status_date
     *
     * @param \DateTime|null $status_date status_date
     *
     * @return self
     */
    public function setStatusDate($status_date)
    {
        $this->container['status_date'] = $status_date;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool|null
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool|null $enabled enabled
     *
     * @return self
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets max_retry
     *
     * @return int|null
     */
    public function getMaxRetry()
    {
        return $this->container['max_retry'];
    }

    /**
     * Sets max_retry
     *
     * @param int|null $max_retry max_retry
     *
     * @return self
     */
    public function setMaxRetry($max_retry)
    {
        $this->container['max_retry'] = $max_retry;

        return $this;
    }

    /**
     * Gets fall_count
     *
     * @return int|null
     */
    public function getFallCount()
    {
        return $this->container['fall_count'];
    }

    /**
     * Sets fall_count
     *
     * @param int|null $fall_count fall_count
     *
     * @return self
     */
    public function setFallCount($fall_count)
    {
        $this->container['fall_count'] = $fall_count;

        return $this;
    }

    /**
     * Gets rise_count
     *
     * @return int|null
     */
    public function getRiseCount()
    {
        return $this->container['rise_count'];
    }

    /**
     * Sets rise_count
     *
     * @param int|null $rise_count rise_count
     *
     * @return self
     */
    public function setRiseCount($rise_count)
    {
        $this->container['rise_count'] = $rise_count;

        return $this;
    }

    /**
     * Gets data_length
     *
     * @return string|null
     */
    public function getDataLength()
    {
        return $this->container['data_length'];
    }

    /**
     * Sets data_length
     *
     * @param string|null $data_length data_length
     *
     * @return self
     */
    public function setDataLength($data_length)
    {
        $this->container['data_length'] = $data_length;

        return $this;
    }

    /**
     * Gets config
     *
     * @return object|null
     */
    public function getConfig()
    {
        return $this->container['config'];
    }

    /**
     * Sets config
     *
     * @param object|null $config config
     *
     * @return self
     */
    public function setConfig($config)
    {
        $this->container['config'] = $config;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return string|null
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param string|null $created_by created_by
     *
     * @return self
     */
    public function setCreatedBy($created_by)
    {
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets date_created
     *
     * @return \DateTime|null
     */
    public function getDateCreated()
    {
        return $this->container['date_created'];
    }

    /**
     * Sets date_created
     *
     * @param \DateTime|null $date_created date_created
     *
     * @return self
     */
    public function setDateCreated($date_created)
    {
        $this->container['date_created'] = $date_created;

        return $this;
    }

    /**
     * Gets last_updated
     *
     * @return \DateTime|null
     */
    public function getLastUpdated()
    {
        return $this->container['last_updated'];
    }

    /**
     * Sets last_updated
     *
     * @param \DateTime|null $last_updated last_updated
     *
     * @return self
     */
    public function setLastUpdated($last_updated)
    {
        $this->container['last_updated'] = $last_updated;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


