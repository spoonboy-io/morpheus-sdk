<?php
/**
 * Health
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Health Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class Health implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'health';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'success' => 'bool',
        'status_message' => 'string',
        'appliance_url' => 'string',
        'build_version' => 'string',
        'setup_needed' => 'bool',
        'date' => '\DateTime',
        'cpu' => '\OpenAPI\Client\Model\HealthCpu',
        'memory' => '\OpenAPI\Client\Model\HealthMemory',
        'threads' => '\OpenAPI\Client\Model\HealthThreads',
        'database' => '\OpenAPI\Client\Model\HealthDatabase',
        'elastic' => '\OpenAPI\Client\Model\HealthElastic',
        'rabbit' => '\OpenAPI\Client\Model\HealthRabbit'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'success' => null,
        'status_message' => null,
        'appliance_url' => null,
        'build_version' => null,
        'setup_needed' => null,
        'date' => 'date-time',
        'cpu' => null,
        'memory' => null,
        'threads' => null,
        'database' => null,
        'elastic' => null,
        'rabbit' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'success' => 'success',
        'status_message' => 'statusMessage',
        'appliance_url' => 'applianceUrl',
        'build_version' => 'buildVersion',
        'setup_needed' => 'setupNeeded',
        'date' => 'date',
        'cpu' => 'cpu',
        'memory' => 'memory',
        'threads' => 'threads',
        'database' => 'database',
        'elastic' => 'elastic',
        'rabbit' => 'rabbit'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'success' => 'setSuccess',
        'status_message' => 'setStatusMessage',
        'appliance_url' => 'setApplianceUrl',
        'build_version' => 'setBuildVersion',
        'setup_needed' => 'setSetupNeeded',
        'date' => 'setDate',
        'cpu' => 'setCpu',
        'memory' => 'setMemory',
        'threads' => 'setThreads',
        'database' => 'setDatabase',
        'elastic' => 'setElastic',
        'rabbit' => 'setRabbit'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'success' => 'getSuccess',
        'status_message' => 'getStatusMessage',
        'appliance_url' => 'getApplianceUrl',
        'build_version' => 'getBuildVersion',
        'setup_needed' => 'getSetupNeeded',
        'date' => 'getDate',
        'cpu' => 'getCpu',
        'memory' => 'getMemory',
        'threads' => 'getThreads',
        'database' => 'getDatabase',
        'elastic' => 'getElastic',
        'rabbit' => 'getRabbit'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['success'] = $data['success'] ?? null;
        $this->container['status_message'] = $data['status_message'] ?? null;
        $this->container['appliance_url'] = $data['appliance_url'] ?? null;
        $this->container['build_version'] = $data['build_version'] ?? null;
        $this->container['setup_needed'] = $data['setup_needed'] ?? null;
        $this->container['date'] = $data['date'] ?? null;
        $this->container['cpu'] = $data['cpu'] ?? null;
        $this->container['memory'] = $data['memory'] ?? null;
        $this->container['threads'] = $data['threads'] ?? null;
        $this->container['database'] = $data['database'] ?? null;
        $this->container['elastic'] = $data['elastic'] ?? null;
        $this->container['rabbit'] = $data['rabbit'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets success
     *
     * @return bool|null
     */
    public function getSuccess()
    {
        return $this->container['success'];
    }

    /**
     * Sets success
     *
     * @param bool|null $success success
     *
     * @return self
     */
    public function setSuccess($success)
    {
        $this->container['success'] = $success;

        return $this;
    }

    /**
     * Gets status_message
     *
     * @return string|null
     */
    public function getStatusMessage()
    {
        return $this->container['status_message'];
    }

    /**
     * Sets status_message
     *
     * @param string|null $status_message status_message
     *
     * @return self
     */
    public function setStatusMessage($status_message)
    {
        $this->container['status_message'] = $status_message;

        return $this;
    }

    /**
     * Gets appliance_url
     *
     * @return string|null
     */
    public function getApplianceUrl()
    {
        return $this->container['appliance_url'];
    }

    /**
     * Sets appliance_url
     *
     * @param string|null $appliance_url appliance_url
     *
     * @return self
     */
    public function setApplianceUrl($appliance_url)
    {
        $this->container['appliance_url'] = $appliance_url;

        return $this;
    }

    /**
     * Gets build_version
     *
     * @return string|null
     */
    public function getBuildVersion()
    {
        return $this->container['build_version'];
    }

    /**
     * Sets build_version
     *
     * @param string|null $build_version build_version
     *
     * @return self
     */
    public function setBuildVersion($build_version)
    {
        $this->container['build_version'] = $build_version;

        return $this;
    }

    /**
     * Gets setup_needed
     *
     * @return bool|null
     */
    public function getSetupNeeded()
    {
        return $this->container['setup_needed'];
    }

    /**
     * Sets setup_needed
     *
     * @param bool|null $setup_needed setup_needed
     *
     * @return self
     */
    public function setSetupNeeded($setup_needed)
    {
        $this->container['setup_needed'] = $setup_needed;

        return $this;
    }

    /**
     * Gets date
     *
     * @return \DateTime|null
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime|null $date date
     *
     * @return self
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets cpu
     *
     * @return \OpenAPI\Client\Model\HealthCpu|null
     */
    public function getCpu()
    {
        return $this->container['cpu'];
    }

    /**
     * Sets cpu
     *
     * @param \OpenAPI\Client\Model\HealthCpu|null $cpu cpu
     *
     * @return self
     */
    public function setCpu($cpu)
    {
        $this->container['cpu'] = $cpu;

        return $this;
    }

    /**
     * Gets memory
     *
     * @return \OpenAPI\Client\Model\HealthMemory|null
     */
    public function getMemory()
    {
        return $this->container['memory'];
    }

    /**
     * Sets memory
     *
     * @param \OpenAPI\Client\Model\HealthMemory|null $memory memory
     *
     * @return self
     */
    public function setMemory($memory)
    {
        $this->container['memory'] = $memory;

        return $this;
    }

    /**
     * Gets threads
     *
     * @return \OpenAPI\Client\Model\HealthThreads|null
     */
    public function getThreads()
    {
        return $this->container['threads'];
    }

    /**
     * Sets threads
     *
     * @param \OpenAPI\Client\Model\HealthThreads|null $threads threads
     *
     * @return self
     */
    public function setThreads($threads)
    {
        $this->container['threads'] = $threads;

        return $this;
    }

    /**
     * Gets database
     *
     * @return \OpenAPI\Client\Model\HealthDatabase|null
     */
    public function getDatabase()
    {
        return $this->container['database'];
    }

    /**
     * Sets database
     *
     * @param \OpenAPI\Client\Model\HealthDatabase|null $database database
     *
     * @return self
     */
    public function setDatabase($database)
    {
        $this->container['database'] = $database;

        return $this;
    }

    /**
     * Gets elastic
     *
     * @return \OpenAPI\Client\Model\HealthElastic|null
     */
    public function getElastic()
    {
        return $this->container['elastic'];
    }

    /**
     * Sets elastic
     *
     * @param \OpenAPI\Client\Model\HealthElastic|null $elastic elastic
     *
     * @return self
     */
    public function setElastic($elastic)
    {
        $this->container['elastic'] = $elastic;

        return $this;
    }

    /**
     * Gets rabbit
     *
     * @return \OpenAPI\Client\Model\HealthRabbit|null
     */
    public function getRabbit()
    {
        return $this->container['rabbit'];
    }

    /**
     * Sets rabbit
     *
     * @param \OpenAPI\Client\Model\HealthRabbit|null $rabbit rabbit
     *
     * @return self
     */
    public function setRabbit($rabbit)
    {
        $this->container['rabbit'] = $rabbit;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


