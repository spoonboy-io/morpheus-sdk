<?php
/**
 * InlineResponse20080LoadBalancerPool
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * InlineResponse20080LoadBalancerPool Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineResponse20080LoadBalancerPool implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_response_200_80_loadBalancerPool';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'load_balancer' => '\OpenAPI\Client\Model\InlineResponse20079LoadBalancerMonitorLoadBalancer',
        'name' => 'string',
        'category' => 'string',
        'visibility' => 'string',
        'description' => 'string',
        'internal_id' => 'string',
        'external_id' => 'string',
        'enabled' => 'bool',
        'vip_sticky' => 'string',
        'vip_balance' => 'string',
        'allow_nat' => 'string',
        'allow_snat' => 'string',
        'vip_client_ip_mode' => 'string',
        'vip_server_ip_mode' => 'string',
        'min_active' => 'int',
        'min_in_service' => 'string',
        'min_up_monitor' => 'string',
        'min_up_action' => 'string',
        'max_queue_depth' => 'string',
        'max_queue_time' => 'string',
        'number_active' => 'int',
        'number_in_service' => 'int',
        'health_score' => 'int',
        'performance_score' => 'int',
        'health_penalty' => 'int',
        'security_penalty' => 'int',
        'error_penalty' => 'int',
        'down_action' => 'string',
        'ramp_time' => 'string',
        'port' => 'string',
        'port_type' => 'string',
        'status' => 'string',
        'nodes' => '\OpenAPI\Client\Model\InlineResponse20040AppDeployInstance[]',
        'monitors' => '\OpenAPI\Client\Model\InlineResponse20040AppDeployInstance[]',
        'members' => 'object[]',
        'config' => 'object',
        'created_by' => 'string',
        'date_created' => '\DateTime',
        'last_updated' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'load_balancer' => null,
        'name' => null,
        'category' => null,
        'visibility' => null,
        'description' => null,
        'internal_id' => null,
        'external_id' => null,
        'enabled' => null,
        'vip_sticky' => null,
        'vip_balance' => null,
        'allow_nat' => null,
        'allow_snat' => null,
        'vip_client_ip_mode' => null,
        'vip_server_ip_mode' => null,
        'min_active' => 'int64',
        'min_in_service' => null,
        'min_up_monitor' => null,
        'min_up_action' => null,
        'max_queue_depth' => null,
        'max_queue_time' => null,
        'number_active' => 'int64',
        'number_in_service' => 'int64',
        'health_score' => 'int64',
        'performance_score' => 'int64',
        'health_penalty' => 'int64',
        'security_penalty' => 'int64',
        'error_penalty' => 'int64',
        'down_action' => null,
        'ramp_time' => null,
        'port' => null,
        'port_type' => null,
        'status' => null,
        'nodes' => null,
        'monitors' => null,
        'members' => null,
        'config' => null,
        'created_by' => null,
        'date_created' => 'date-time',
        'last_updated' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'load_balancer' => 'loadBalancer',
        'name' => 'name',
        'category' => 'category',
        'visibility' => 'visibility',
        'description' => 'description',
        'internal_id' => 'internalId',
        'external_id' => 'externalId',
        'enabled' => 'enabled',
        'vip_sticky' => 'vipSticky',
        'vip_balance' => 'vipBalance',
        'allow_nat' => 'allowNat',
        'allow_snat' => 'allowSnat',
        'vip_client_ip_mode' => 'vipClientIpMode',
        'vip_server_ip_mode' => 'vipServerIpMode',
        'min_active' => 'minActive',
        'min_in_service' => 'minInService',
        'min_up_monitor' => 'minUpMonitor',
        'min_up_action' => 'minUpAction',
        'max_queue_depth' => 'maxQueueDepth',
        'max_queue_time' => 'maxQueueTime',
        'number_active' => 'numberActive',
        'number_in_service' => 'numberInService',
        'health_score' => 'healthScore',
        'performance_score' => 'performanceScore',
        'health_penalty' => 'healthPenalty',
        'security_penalty' => 'securityPenalty',
        'error_penalty' => 'errorPenalty',
        'down_action' => 'downAction',
        'ramp_time' => 'rampTime',
        'port' => 'port',
        'port_type' => 'portType',
        'status' => 'status',
        'nodes' => 'nodes',
        'monitors' => 'monitors',
        'members' => 'members',
        'config' => 'config',
        'created_by' => 'createdBy',
        'date_created' => 'dateCreated',
        'last_updated' => 'lastUpdated'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'load_balancer' => 'setLoadBalancer',
        'name' => 'setName',
        'category' => 'setCategory',
        'visibility' => 'setVisibility',
        'description' => 'setDescription',
        'internal_id' => 'setInternalId',
        'external_id' => 'setExternalId',
        'enabled' => 'setEnabled',
        'vip_sticky' => 'setVipSticky',
        'vip_balance' => 'setVipBalance',
        'allow_nat' => 'setAllowNat',
        'allow_snat' => 'setAllowSnat',
        'vip_client_ip_mode' => 'setVipClientIpMode',
        'vip_server_ip_mode' => 'setVipServerIpMode',
        'min_active' => 'setMinActive',
        'min_in_service' => 'setMinInService',
        'min_up_monitor' => 'setMinUpMonitor',
        'min_up_action' => 'setMinUpAction',
        'max_queue_depth' => 'setMaxQueueDepth',
        'max_queue_time' => 'setMaxQueueTime',
        'number_active' => 'setNumberActive',
        'number_in_service' => 'setNumberInService',
        'health_score' => 'setHealthScore',
        'performance_score' => 'setPerformanceScore',
        'health_penalty' => 'setHealthPenalty',
        'security_penalty' => 'setSecurityPenalty',
        'error_penalty' => 'setErrorPenalty',
        'down_action' => 'setDownAction',
        'ramp_time' => 'setRampTime',
        'port' => 'setPort',
        'port_type' => 'setPortType',
        'status' => 'setStatus',
        'nodes' => 'setNodes',
        'monitors' => 'setMonitors',
        'members' => 'setMembers',
        'config' => 'setConfig',
        'created_by' => 'setCreatedBy',
        'date_created' => 'setDateCreated',
        'last_updated' => 'setLastUpdated'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'load_balancer' => 'getLoadBalancer',
        'name' => 'getName',
        'category' => 'getCategory',
        'visibility' => 'getVisibility',
        'description' => 'getDescription',
        'internal_id' => 'getInternalId',
        'external_id' => 'getExternalId',
        'enabled' => 'getEnabled',
        'vip_sticky' => 'getVipSticky',
        'vip_balance' => 'getVipBalance',
        'allow_nat' => 'getAllowNat',
        'allow_snat' => 'getAllowSnat',
        'vip_client_ip_mode' => 'getVipClientIpMode',
        'vip_server_ip_mode' => 'getVipServerIpMode',
        'min_active' => 'getMinActive',
        'min_in_service' => 'getMinInService',
        'min_up_monitor' => 'getMinUpMonitor',
        'min_up_action' => 'getMinUpAction',
        'max_queue_depth' => 'getMaxQueueDepth',
        'max_queue_time' => 'getMaxQueueTime',
        'number_active' => 'getNumberActive',
        'number_in_service' => 'getNumberInService',
        'health_score' => 'getHealthScore',
        'performance_score' => 'getPerformanceScore',
        'health_penalty' => 'getHealthPenalty',
        'security_penalty' => 'getSecurityPenalty',
        'error_penalty' => 'getErrorPenalty',
        'down_action' => 'getDownAction',
        'ramp_time' => 'getRampTime',
        'port' => 'getPort',
        'port_type' => 'getPortType',
        'status' => 'getStatus',
        'nodes' => 'getNodes',
        'monitors' => 'getMonitors',
        'members' => 'getMembers',
        'config' => 'getConfig',
        'created_by' => 'getCreatedBy',
        'date_created' => 'getDateCreated',
        'last_updated' => 'getLastUpdated'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['load_balancer'] = $data['load_balancer'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['category'] = $data['category'] ?? null;
        $this->container['visibility'] = $data['visibility'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['internal_id'] = $data['internal_id'] ?? null;
        $this->container['external_id'] = $data['external_id'] ?? null;
        $this->container['enabled'] = $data['enabled'] ?? null;
        $this->container['vip_sticky'] = $data['vip_sticky'] ?? null;
        $this->container['vip_balance'] = $data['vip_balance'] ?? null;
        $this->container['allow_nat'] = $data['allow_nat'] ?? null;
        $this->container['allow_snat'] = $data['allow_snat'] ?? null;
        $this->container['vip_client_ip_mode'] = $data['vip_client_ip_mode'] ?? null;
        $this->container['vip_server_ip_mode'] = $data['vip_server_ip_mode'] ?? null;
        $this->container['min_active'] = $data['min_active'] ?? null;
        $this->container['min_in_service'] = $data['min_in_service'] ?? null;
        $this->container['min_up_monitor'] = $data['min_up_monitor'] ?? null;
        $this->container['min_up_action'] = $data['min_up_action'] ?? null;
        $this->container['max_queue_depth'] = $data['max_queue_depth'] ?? null;
        $this->container['max_queue_time'] = $data['max_queue_time'] ?? null;
        $this->container['number_active'] = $data['number_active'] ?? null;
        $this->container['number_in_service'] = $data['number_in_service'] ?? null;
        $this->container['health_score'] = $data['health_score'] ?? null;
        $this->container['performance_score'] = $data['performance_score'] ?? null;
        $this->container['health_penalty'] = $data['health_penalty'] ?? null;
        $this->container['security_penalty'] = $data['security_penalty'] ?? null;
        $this->container['error_penalty'] = $data['error_penalty'] ?? null;
        $this->container['down_action'] = $data['down_action'] ?? null;
        $this->container['ramp_time'] = $data['ramp_time'] ?? null;
        $this->container['port'] = $data['port'] ?? null;
        $this->container['port_type'] = $data['port_type'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['nodes'] = $data['nodes'] ?? null;
        $this->container['monitors'] = $data['monitors'] ?? null;
        $this->container['members'] = $data['members'] ?? null;
        $this->container['config'] = $data['config'] ?? null;
        $this->container['created_by'] = $data['created_by'] ?? null;
        $this->container['date_created'] = $data['date_created'] ?? null;
        $this->container['last_updated'] = $data['last_updated'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets load_balancer
     *
     * @return \OpenAPI\Client\Model\InlineResponse20079LoadBalancerMonitorLoadBalancer|null
     */
    public function getLoadBalancer()
    {
        return $this->container['load_balancer'];
    }

    /**
     * Sets load_balancer
     *
     * @param \OpenAPI\Client\Model\InlineResponse20079LoadBalancerMonitorLoadBalancer|null $load_balancer load_balancer
     *
     * @return self
     */
    public function setLoadBalancer($load_balancer)
    {
        $this->container['load_balancer'] = $load_balancer;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets category
     *
     * @return string|null
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param string|null $category category
     *
     * @return self
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets visibility
     *
     * @return string|null
     */
    public function getVisibility()
    {
        return $this->container['visibility'];
    }

    /**
     * Sets visibility
     *
     * @param string|null $visibility visibility
     *
     * @return self
     */
    public function setVisibility($visibility)
    {
        $this->container['visibility'] = $visibility;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets internal_id
     *
     * @return string|null
     */
    public function getInternalId()
    {
        return $this->container['internal_id'];
    }

    /**
     * Sets internal_id
     *
     * @param string|null $internal_id internal_id
     *
     * @return self
     */
    public function setInternalId($internal_id)
    {
        $this->container['internal_id'] = $internal_id;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string|null
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string|null $external_id external_id
     *
     * @return self
     */
    public function setExternalId($external_id)
    {
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool|null
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool|null $enabled enabled
     *
     * @return self
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets vip_sticky
     *
     * @return string|null
     */
    public function getVipSticky()
    {
        return $this->container['vip_sticky'];
    }

    /**
     * Sets vip_sticky
     *
     * @param string|null $vip_sticky vip_sticky
     *
     * @return self
     */
    public function setVipSticky($vip_sticky)
    {
        $this->container['vip_sticky'] = $vip_sticky;

        return $this;
    }

    /**
     * Gets vip_balance
     *
     * @return string|null
     */
    public function getVipBalance()
    {
        return $this->container['vip_balance'];
    }

    /**
     * Sets vip_balance
     *
     * @param string|null $vip_balance vip_balance
     *
     * @return self
     */
    public function setVipBalance($vip_balance)
    {
        $this->container['vip_balance'] = $vip_balance;

        return $this;
    }

    /**
     * Gets allow_nat
     *
     * @return string|null
     */
    public function getAllowNat()
    {
        return $this->container['allow_nat'];
    }

    /**
     * Sets allow_nat
     *
     * @param string|null $allow_nat allow_nat
     *
     * @return self
     */
    public function setAllowNat($allow_nat)
    {
        $this->container['allow_nat'] = $allow_nat;

        return $this;
    }

    /**
     * Gets allow_snat
     *
     * @return string|null
     */
    public function getAllowSnat()
    {
        return $this->container['allow_snat'];
    }

    /**
     * Sets allow_snat
     *
     * @param string|null $allow_snat allow_snat
     *
     * @return self
     */
    public function setAllowSnat($allow_snat)
    {
        $this->container['allow_snat'] = $allow_snat;

        return $this;
    }

    /**
     * Gets vip_client_ip_mode
     *
     * @return string|null
     */
    public function getVipClientIpMode()
    {
        return $this->container['vip_client_ip_mode'];
    }

    /**
     * Sets vip_client_ip_mode
     *
     * @param string|null $vip_client_ip_mode vip_client_ip_mode
     *
     * @return self
     */
    public function setVipClientIpMode($vip_client_ip_mode)
    {
        $this->container['vip_client_ip_mode'] = $vip_client_ip_mode;

        return $this;
    }

    /**
     * Gets vip_server_ip_mode
     *
     * @return string|null
     */
    public function getVipServerIpMode()
    {
        return $this->container['vip_server_ip_mode'];
    }

    /**
     * Sets vip_server_ip_mode
     *
     * @param string|null $vip_server_ip_mode vip_server_ip_mode
     *
     * @return self
     */
    public function setVipServerIpMode($vip_server_ip_mode)
    {
        $this->container['vip_server_ip_mode'] = $vip_server_ip_mode;

        return $this;
    }

    /**
     * Gets min_active
     *
     * @return int|null
     */
    public function getMinActive()
    {
        return $this->container['min_active'];
    }

    /**
     * Sets min_active
     *
     * @param int|null $min_active min_active
     *
     * @return self
     */
    public function setMinActive($min_active)
    {
        $this->container['min_active'] = $min_active;

        return $this;
    }

    /**
     * Gets min_in_service
     *
     * @return string|null
     */
    public function getMinInService()
    {
        return $this->container['min_in_service'];
    }

    /**
     * Sets min_in_service
     *
     * @param string|null $min_in_service min_in_service
     *
     * @return self
     */
    public function setMinInService($min_in_service)
    {
        $this->container['min_in_service'] = $min_in_service;

        return $this;
    }

    /**
     * Gets min_up_monitor
     *
     * @return string|null
     */
    public function getMinUpMonitor()
    {
        return $this->container['min_up_monitor'];
    }

    /**
     * Sets min_up_monitor
     *
     * @param string|null $min_up_monitor min_up_monitor
     *
     * @return self
     */
    public function setMinUpMonitor($min_up_monitor)
    {
        $this->container['min_up_monitor'] = $min_up_monitor;

        return $this;
    }

    /**
     * Gets min_up_action
     *
     * @return string|null
     */
    public function getMinUpAction()
    {
        return $this->container['min_up_action'];
    }

    /**
     * Sets min_up_action
     *
     * @param string|null $min_up_action min_up_action
     *
     * @return self
     */
    public function setMinUpAction($min_up_action)
    {
        $this->container['min_up_action'] = $min_up_action;

        return $this;
    }

    /**
     * Gets max_queue_depth
     *
     * @return string|null
     */
    public function getMaxQueueDepth()
    {
        return $this->container['max_queue_depth'];
    }

    /**
     * Sets max_queue_depth
     *
     * @param string|null $max_queue_depth max_queue_depth
     *
     * @return self
     */
    public function setMaxQueueDepth($max_queue_depth)
    {
        $this->container['max_queue_depth'] = $max_queue_depth;

        return $this;
    }

    /**
     * Gets max_queue_time
     *
     * @return string|null
     */
    public function getMaxQueueTime()
    {
        return $this->container['max_queue_time'];
    }

    /**
     * Sets max_queue_time
     *
     * @param string|null $max_queue_time max_queue_time
     *
     * @return self
     */
    public function setMaxQueueTime($max_queue_time)
    {
        $this->container['max_queue_time'] = $max_queue_time;

        return $this;
    }

    /**
     * Gets number_active
     *
     * @return int|null
     */
    public function getNumberActive()
    {
        return $this->container['number_active'];
    }

    /**
     * Sets number_active
     *
     * @param int|null $number_active number_active
     *
     * @return self
     */
    public function setNumberActive($number_active)
    {
        $this->container['number_active'] = $number_active;

        return $this;
    }

    /**
     * Gets number_in_service
     *
     * @return int|null
     */
    public function getNumberInService()
    {
        return $this->container['number_in_service'];
    }

    /**
     * Sets number_in_service
     *
     * @param int|null $number_in_service number_in_service
     *
     * @return self
     */
    public function setNumberInService($number_in_service)
    {
        $this->container['number_in_service'] = $number_in_service;

        return $this;
    }

    /**
     * Gets health_score
     *
     * @return int|null
     */
    public function getHealthScore()
    {
        return $this->container['health_score'];
    }

    /**
     * Sets health_score
     *
     * @param int|null $health_score health_score
     *
     * @return self
     */
    public function setHealthScore($health_score)
    {
        $this->container['health_score'] = $health_score;

        return $this;
    }

    /**
     * Gets performance_score
     *
     * @return int|null
     */
    public function getPerformanceScore()
    {
        return $this->container['performance_score'];
    }

    /**
     * Sets performance_score
     *
     * @param int|null $performance_score performance_score
     *
     * @return self
     */
    public function setPerformanceScore($performance_score)
    {
        $this->container['performance_score'] = $performance_score;

        return $this;
    }

    /**
     * Gets health_penalty
     *
     * @return int|null
     */
    public function getHealthPenalty()
    {
        return $this->container['health_penalty'];
    }

    /**
     * Sets health_penalty
     *
     * @param int|null $health_penalty health_penalty
     *
     * @return self
     */
    public function setHealthPenalty($health_penalty)
    {
        $this->container['health_penalty'] = $health_penalty;

        return $this;
    }

    /**
     * Gets security_penalty
     *
     * @return int|null
     */
    public function getSecurityPenalty()
    {
        return $this->container['security_penalty'];
    }

    /**
     * Sets security_penalty
     *
     * @param int|null $security_penalty security_penalty
     *
     * @return self
     */
    public function setSecurityPenalty($security_penalty)
    {
        $this->container['security_penalty'] = $security_penalty;

        return $this;
    }

    /**
     * Gets error_penalty
     *
     * @return int|null
     */
    public function getErrorPenalty()
    {
        return $this->container['error_penalty'];
    }

    /**
     * Sets error_penalty
     *
     * @param int|null $error_penalty error_penalty
     *
     * @return self
     */
    public function setErrorPenalty($error_penalty)
    {
        $this->container['error_penalty'] = $error_penalty;

        return $this;
    }

    /**
     * Gets down_action
     *
     * @return string|null
     */
    public function getDownAction()
    {
        return $this->container['down_action'];
    }

    /**
     * Sets down_action
     *
     * @param string|null $down_action down_action
     *
     * @return self
     */
    public function setDownAction($down_action)
    {
        $this->container['down_action'] = $down_action;

        return $this;
    }

    /**
     * Gets ramp_time
     *
     * @return string|null
     */
    public function getRampTime()
    {
        return $this->container['ramp_time'];
    }

    /**
     * Sets ramp_time
     *
     * @param string|null $ramp_time ramp_time
     *
     * @return self
     */
    public function setRampTime($ramp_time)
    {
        $this->container['ramp_time'] = $ramp_time;

        return $this;
    }

    /**
     * Gets port
     *
     * @return string|null
     */
    public function getPort()
    {
        return $this->container['port'];
    }

    /**
     * Sets port
     *
     * @param string|null $port port
     *
     * @return self
     */
    public function setPort($port)
    {
        $this->container['port'] = $port;

        return $this;
    }

    /**
     * Gets port_type
     *
     * @return string|null
     */
    public function getPortType()
    {
        return $this->container['port_type'];
    }

    /**
     * Sets port_type
     *
     * @param string|null $port_type port_type
     *
     * @return self
     */
    public function setPortType($port_type)
    {
        $this->container['port_type'] = $port_type;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets nodes
     *
     * @return \OpenAPI\Client\Model\InlineResponse20040AppDeployInstance[]|null
     */
    public function getNodes()
    {
        return $this->container['nodes'];
    }

    /**
     * Sets nodes
     *
     * @param \OpenAPI\Client\Model\InlineResponse20040AppDeployInstance[]|null $nodes nodes
     *
     * @return self
     */
    public function setNodes($nodes)
    {
        $this->container['nodes'] = $nodes;

        return $this;
    }

    /**
     * Gets monitors
     *
     * @return \OpenAPI\Client\Model\InlineResponse20040AppDeployInstance[]|null
     */
    public function getMonitors()
    {
        return $this->container['monitors'];
    }

    /**
     * Sets monitors
     *
     * @param \OpenAPI\Client\Model\InlineResponse20040AppDeployInstance[]|null $monitors monitors
     *
     * @return self
     */
    public function setMonitors($monitors)
    {
        $this->container['monitors'] = $monitors;

        return $this;
    }

    /**
     * Gets members
     *
     * @return object[]|null
     */
    public function getMembers()
    {
        return $this->container['members'];
    }

    /**
     * Sets members
     *
     * @param object[]|null $members members
     *
     * @return self
     */
    public function setMembers($members)
    {
        $this->container['members'] = $members;

        return $this;
    }

    /**
     * Gets config
     *
     * @return object|null
     */
    public function getConfig()
    {
        return $this->container['config'];
    }

    /**
     * Sets config
     *
     * @param object|null $config config
     *
     * @return self
     */
    public function setConfig($config)
    {
        $this->container['config'] = $config;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return string|null
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param string|null $created_by created_by
     *
     * @return self
     */
    public function setCreatedBy($created_by)
    {
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets date_created
     *
     * @return \DateTime|null
     */
    public function getDateCreated()
    {
        return $this->container['date_created'];
    }

    /**
     * Sets date_created
     *
     * @param \DateTime|null $date_created date_created
     *
     * @return self
     */
    public function setDateCreated($date_created)
    {
        $this->container['date_created'] = $date_created;

        return $this;
    }

    /**
     * Gets last_updated
     *
     * @return \DateTime|null
     */
    public function getLastUpdated()
    {
        return $this->container['last_updated'];
    }

    /**
     * Sets last_updated
     *
     * @param \DateTime|null $last_updated last_updated
     *
     * @return self
     */
    public function setLastUpdated($last_updated)
    {
        $this->container['last_updated'] = $last_updated;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


