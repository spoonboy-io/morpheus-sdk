<?php
/**
 * IntegrationSaltMasterConfigIntegration
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * IntegrationSaltMasterConfigIntegration Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class IntegrationSaltMasterConfigIntegration implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'integrationSaltMasterConfig_integration';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'type' => 'string',
        'service_mode' => 'string',
        'service_url' => 'string',
        'secondary' => 'string',
        'service_port' => 'int',
        'service_username' => 'string',
        'service_password' => 'string',
        'service_key' => 'string',
        'auth_key' => 'string',
        'service_path' => 'string',
        'service_version' => 'string',
        'service_windows_version' => 'string',
        'repo_url' => 'string',
        'service_config' => 'string',
        'service_command' => 'string',
        'config' => '\OpenAPI\Client\Model\IntegrationSaltMasterConfigIntegrationConfig'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'type' => null,
        'service_mode' => null,
        'service_url' => null,
        'secondary' => null,
        'service_port' => null,
        'service_username' => null,
        'service_password' => null,
        'service_key' => null,
        'auth_key' => null,
        'service_path' => null,
        'service_version' => null,
        'service_windows_version' => null,
        'repo_url' => null,
        'service_config' => null,
        'service_command' => null,
        'config' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'type' => 'type',
        'service_mode' => 'serviceMode',
        'service_url' => 'serviceUrl',
        'secondary' => 'secondary',
        'service_port' => 'servicePort',
        'service_username' => 'serviceUsername',
        'service_password' => 'servicePassword',
        'service_key' => 'serviceKey',
        'auth_key' => 'authKey',
        'service_path' => 'servicePath',
        'service_version' => 'serviceVersion',
        'service_windows_version' => 'serviceWindowsVersion',
        'repo_url' => 'repoUrl',
        'service_config' => 'serviceConfig',
        'service_command' => 'serviceCommand',
        'config' => 'config'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'type' => 'setType',
        'service_mode' => 'setServiceMode',
        'service_url' => 'setServiceUrl',
        'secondary' => 'setSecondary',
        'service_port' => 'setServicePort',
        'service_username' => 'setServiceUsername',
        'service_password' => 'setServicePassword',
        'service_key' => 'setServiceKey',
        'auth_key' => 'setAuthKey',
        'service_path' => 'setServicePath',
        'service_version' => 'setServiceVersion',
        'service_windows_version' => 'setServiceWindowsVersion',
        'repo_url' => 'setRepoUrl',
        'service_config' => 'setServiceConfig',
        'service_command' => 'setServiceCommand',
        'config' => 'setConfig'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'type' => 'getType',
        'service_mode' => 'getServiceMode',
        'service_url' => 'getServiceUrl',
        'secondary' => 'getSecondary',
        'service_port' => 'getServicePort',
        'service_username' => 'getServiceUsername',
        'service_password' => 'getServicePassword',
        'service_key' => 'getServiceKey',
        'auth_key' => 'getAuthKey',
        'service_path' => 'getServicePath',
        'service_version' => 'getServiceVersion',
        'service_windows_version' => 'getServiceWindowsVersion',
        'repo_url' => 'getRepoUrl',
        'service_config' => 'getServiceConfig',
        'service_command' => 'getServiceCommand',
        'config' => 'getConfig'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const TYPE_SALT_MASTER = 'saltMaster';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_SALT_MASTER,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['service_mode'] = $data['service_mode'] ?? 'single';
        $this->container['service_url'] = $data['service_url'] ?? null;
        $this->container['secondary'] = $data['secondary'] ?? null;
        $this->container['service_port'] = $data['service_port'] ?? 22;
        $this->container['service_username'] = $data['service_username'] ?? null;
        $this->container['service_password'] = $data['service_password'] ?? null;
        $this->container['service_key'] = $data['service_key'] ?? null;
        $this->container['auth_key'] = $data['auth_key'] ?? null;
        $this->container['service_path'] = $data['service_path'] ?? null;
        $this->container['service_version'] = $data['service_version'] ?? null;
        $this->container['service_windows_version'] = $data['service_windows_version'] ?? null;
        $this->container['repo_url'] = $data['repo_url'] ?? null;
        $this->container['service_config'] = $data['service_config'] ?? null;
        $this->container['service_command'] = $data['service_command'] ?? null;
        $this->container['config'] = $data['config'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['service_url'] === null) {
            $invalidProperties[] = "'service_url' can't be null";
        }
        if ($this->container['service_username'] === null) {
            $invalidProperties[] = "'service_username' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name, a unique identifier for the integration
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type Integration Type Code
     *
     * @return self
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets service_mode
     *
     * @return string|null
     */
    public function getServiceMode()
    {
        return $this->container['service_mode'];
    }

    /**
     * Sets service_mode
     *
     * @param string|null $service_mode Topology
     *
     * @return self
     */
    public function setServiceMode($service_mode)
    {
        $this->container['service_mode'] = $service_mode;

        return $this;
    }

    /**
     * Gets service_url
     *
     * @return string
     */
    public function getServiceUrl()
    {
        return $this->container['service_url'];
    }

    /**
     * Sets service_url
     *
     * @param string $service_url Salt Master
     *
     * @return self
     */
    public function setServiceUrl($service_url)
    {
        $this->container['service_url'] = $service_url;

        return $this;
    }

    /**
     * Gets secondary
     *
     * @return string|null
     */
    public function getSecondary()
    {
        return $this->container['secondary'];
    }

    /**
     * Sets secondary
     *
     * @param string|null $secondary Salt Syndic
     *
     * @return self
     */
    public function setSecondary($secondary)
    {
        $this->container['secondary'] = $secondary;

        return $this;
    }

    /**
     * Gets service_port
     *
     * @return int|null
     */
    public function getServicePort()
    {
        return $this->container['service_port'];
    }

    /**
     * Sets service_port
     *
     * @param int|null $service_port SSH Port
     *
     * @return self
     */
    public function setServicePort($service_port)
    {
        $this->container['service_port'] = $service_port;

        return $this;
    }

    /**
     * Gets service_username
     *
     * @return string
     */
    public function getServiceUsername()
    {
        return $this->container['service_username'];
    }

    /**
     * Sets service_username
     *
     * @param string $service_username Username
     *
     * @return self
     */
    public function setServiceUsername($service_username)
    {
        $this->container['service_username'] = $service_username;

        return $this;
    }

    /**
     * Gets service_password
     *
     * @return string|null
     */
    public function getServicePassword()
    {
        return $this->container['service_password'];
    }

    /**
     * Sets service_password
     *
     * @param string|null $service_password Password
     *
     * @return self
     */
    public function setServicePassword($service_password)
    {
        $this->container['service_password'] = $service_password;

        return $this;
    }

    /**
     * Gets service_key
     *
     * @return string|null
     */
    public function getServiceKey()
    {
        return $this->container['service_key'];
    }

    /**
     * Sets service_key
     *
     * @param string|null $service_key Master Key Pair
     *
     * @return self
     */
    public function setServiceKey($service_key)
    {
        $this->container['service_key'] = $service_key;

        return $this;
    }

    /**
     * Gets auth_key
     *
     * @return string|null
     */
    public function getAuthKey()
    {
        return $this->container['auth_key'];
    }

    /**
     * Sets auth_key
     *
     * @param string|null $auth_key Signing Key
     *
     * @return self
     */
    public function setAuthKey($auth_key)
    {
        $this->container['auth_key'] = $auth_key;

        return $this;
    }

    /**
     * Gets service_path
     *
     * @return string|null
     */
    public function getServicePath()
    {
        return $this->container['service_path'];
    }

    /**
     * Sets service_path
     *
     * @param string|null $service_path Working Directory
     *
     * @return self
     */
    public function setServicePath($service_path)
    {
        $this->container['service_path'] = $service_path;

        return $this;
    }

    /**
     * Gets service_version
     *
     * @return string|null
     */
    public function getServiceVersion()
    {
        return $this->container['service_version'];
    }

    /**
     * Sets service_version
     *
     * @param string|null $service_version Salt Version
     *
     * @return self
     */
    public function setServiceVersion($service_version)
    {
        $this->container['service_version'] = $service_version;

        return $this;
    }

    /**
     * Gets service_windows_version
     *
     * @return string|null
     */
    public function getServiceWindowsVersion()
    {
        return $this->container['service_windows_version'];
    }

    /**
     * Sets service_windows_version
     *
     * @param string|null $service_windows_version Salt Version (Windows)
     *
     * @return self
     */
    public function setServiceWindowsVersion($service_windows_version)
    {
        $this->container['service_windows_version'] = $service_windows_version;

        return $this;
    }

    /**
     * Gets repo_url
     *
     * @return string|null
     */
    public function getRepoUrl()
    {
        return $this->container['repo_url'];
    }

    /**
     * Sets repo_url
     *
     * @param string|null $repo_url Repo URL
     *
     * @return self
     */
    public function setRepoUrl($repo_url)
    {
        $this->container['repo_url'] = $repo_url;

        return $this;
    }

    /**
     * Gets service_config
     *
     * @return string|null
     */
    public function getServiceConfig()
    {
        return $this->container['service_config'];
    }

    /**
     * Sets service_config
     *
     * @param string|null $service_config Minion Config
     *
     * @return self
     */
    public function setServiceConfig($service_config)
    {
        $this->container['service_config'] = $service_config;

        return $this;
    }

    /**
     * Gets service_command
     *
     * @return string|null
     */
    public function getServiceCommand()
    {
        return $this->container['service_command'];
    }

    /**
     * Sets service_command
     *
     * @param string|null $service_command Post Provision Commands
     *
     * @return self
     */
    public function setServiceCommand($service_command)
    {
        $this->container['service_command'] = $service_command;

        return $this;
    }

    /**
     * Gets config
     *
     * @return \OpenAPI\Client\Model\IntegrationSaltMasterConfigIntegrationConfig|null
     */
    public function getConfig()
    {
        return $this->container['config'];
    }

    /**
     * Sets config
     *
     * @param \OpenAPI\Client\Model\IntegrationSaltMasterConfigIntegrationConfig|null $config config
     *
     * @return self
     */
    public function setConfig($config)
    {
        $this->container['config'] = $config;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


