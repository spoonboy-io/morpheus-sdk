<?php
/**
 * Script
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Script Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class Script implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'script';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'code' => 'string',
        'account' => 'string',
        'name' => 'string',
        'labels' => 'string[]',
        'category' => 'string',
        'sort_order' => 'int',
        'script_version' => 'string',
        'script_phase' => 'string',
        'script_type' => 'string',
        'script' => 'string',
        'script_service' => 'string',
        'script_method' => 'string',
        'run_as_user' => 'string',
        'run_as_password' => 'string',
        'sudo_user' => 'bool',
        'fail_on_error' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'code' => null,
        'account' => null,
        'name' => null,
        'labels' => null,
        'category' => null,
        'sort_order' => 'int64',
        'script_version' => null,
        'script_phase' => null,
        'script_type' => null,
        'script' => null,
        'script_service' => null,
        'script_method' => null,
        'run_as_user' => null,
        'run_as_password' => null,
        'sudo_user' => null,
        'fail_on_error' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'code' => 'code',
        'account' => 'account',
        'name' => 'name',
        'labels' => 'labels',
        'category' => 'category',
        'sort_order' => 'sortOrder',
        'script_version' => 'scriptVersion',
        'script_phase' => 'scriptPhase',
        'script_type' => 'scriptType',
        'script' => 'script',
        'script_service' => 'scriptService',
        'script_method' => 'scriptMethod',
        'run_as_user' => 'runAsUser',
        'run_as_password' => 'runAsPassword',
        'sudo_user' => 'sudoUser',
        'fail_on_error' => 'failOnError'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'code' => 'setCode',
        'account' => 'setAccount',
        'name' => 'setName',
        'labels' => 'setLabels',
        'category' => 'setCategory',
        'sort_order' => 'setSortOrder',
        'script_version' => 'setScriptVersion',
        'script_phase' => 'setScriptPhase',
        'script_type' => 'setScriptType',
        'script' => 'setScript',
        'script_service' => 'setScriptService',
        'script_method' => 'setScriptMethod',
        'run_as_user' => 'setRunAsUser',
        'run_as_password' => 'setRunAsPassword',
        'sudo_user' => 'setSudoUser',
        'fail_on_error' => 'setFailOnError'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'code' => 'getCode',
        'account' => 'getAccount',
        'name' => 'getName',
        'labels' => 'getLabels',
        'category' => 'getCategory',
        'sort_order' => 'getSortOrder',
        'script_version' => 'getScriptVersion',
        'script_phase' => 'getScriptPhase',
        'script_type' => 'getScriptType',
        'script' => 'getScript',
        'script_service' => 'getScriptService',
        'script_method' => 'getScriptMethod',
        'run_as_user' => 'getRunAsUser',
        'run_as_password' => 'getRunAsPassword',
        'sudo_user' => 'getSudoUser',
        'fail_on_error' => 'getFailOnError'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['code'] = $data['code'] ?? null;
        $this->container['account'] = $data['account'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['labels'] = $data['labels'] ?? null;
        $this->container['category'] = $data['category'] ?? null;
        $this->container['sort_order'] = $data['sort_order'] ?? null;
        $this->container['script_version'] = $data['script_version'] ?? null;
        $this->container['script_phase'] = $data['script_phase'] ?? null;
        $this->container['script_type'] = $data['script_type'] ?? null;
        $this->container['script'] = $data['script'] ?? null;
        $this->container['script_service'] = $data['script_service'] ?? null;
        $this->container['script_method'] = $data['script_method'] ?? null;
        $this->container['run_as_user'] = $data['run_as_user'] ?? null;
        $this->container['run_as_password'] = $data['run_as_password'] ?? null;
        $this->container['sudo_user'] = $data['sudo_user'] ?? null;
        $this->container['fail_on_error'] = $data['fail_on_error'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string|null
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string|null $code code
     *
     * @return self
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets account
     *
     * @return string|null
     */
    public function getAccount()
    {
        return $this->container['account'];
    }

    /**
     * Sets account
     *
     * @param string|null $account account
     *
     * @return self
     */
    public function setAccount($account)
    {
        $this->container['account'] = $account;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets labels
     *
     * @return string[]|null
     */
    public function getLabels()
    {
        return $this->container['labels'];
    }

    /**
     * Sets labels
     *
     * @param string[]|null $labels labels
     *
     * @return self
     */
    public function setLabels($labels)
    {
        $this->container['labels'] = $labels;

        return $this;
    }

    /**
     * Gets category
     *
     * @return string|null
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param string|null $category category
     *
     * @return self
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets sort_order
     *
     * @return int|null
     */
    public function getSortOrder()
    {
        return $this->container['sort_order'];
    }

    /**
     * Sets sort_order
     *
     * @param int|null $sort_order sort_order
     *
     * @return self
     */
    public function setSortOrder($sort_order)
    {
        $this->container['sort_order'] = $sort_order;

        return $this;
    }

    /**
     * Gets script_version
     *
     * @return string|null
     */
    public function getScriptVersion()
    {
        return $this->container['script_version'];
    }

    /**
     * Sets script_version
     *
     * @param string|null $script_version script_version
     *
     * @return self
     */
    public function setScriptVersion($script_version)
    {
        $this->container['script_version'] = $script_version;

        return $this;
    }

    /**
     * Gets script_phase
     *
     * @return string|null
     */
    public function getScriptPhase()
    {
        return $this->container['script_phase'];
    }

    /**
     * Sets script_phase
     *
     * @param string|null $script_phase script_phase
     *
     * @return self
     */
    public function setScriptPhase($script_phase)
    {
        $this->container['script_phase'] = $script_phase;

        return $this;
    }

    /**
     * Gets script_type
     *
     * @return string|null
     */
    public function getScriptType()
    {
        return $this->container['script_type'];
    }

    /**
     * Sets script_type
     *
     * @param string|null $script_type script_type
     *
     * @return self
     */
    public function setScriptType($script_type)
    {
        $this->container['script_type'] = $script_type;

        return $this;
    }

    /**
     * Gets script
     *
     * @return string|null
     */
    public function getScript()
    {
        return $this->container['script'];
    }

    /**
     * Sets script
     *
     * @param string|null $script script
     *
     * @return self
     */
    public function setScript($script)
    {
        $this->container['script'] = $script;

        return $this;
    }

    /**
     * Gets script_service
     *
     * @return string|null
     */
    public function getScriptService()
    {
        return $this->container['script_service'];
    }

    /**
     * Sets script_service
     *
     * @param string|null $script_service script_service
     *
     * @return self
     */
    public function setScriptService($script_service)
    {
        $this->container['script_service'] = $script_service;

        return $this;
    }

    /**
     * Gets script_method
     *
     * @return string|null
     */
    public function getScriptMethod()
    {
        return $this->container['script_method'];
    }

    /**
     * Sets script_method
     *
     * @param string|null $script_method script_method
     *
     * @return self
     */
    public function setScriptMethod($script_method)
    {
        $this->container['script_method'] = $script_method;

        return $this;
    }

    /**
     * Gets run_as_user
     *
     * @return string|null
     */
    public function getRunAsUser()
    {
        return $this->container['run_as_user'];
    }

    /**
     * Sets run_as_user
     *
     * @param string|null $run_as_user run_as_user
     *
     * @return self
     */
    public function setRunAsUser($run_as_user)
    {
        $this->container['run_as_user'] = $run_as_user;

        return $this;
    }

    /**
     * Gets run_as_password
     *
     * @return string|null
     */
    public function getRunAsPassword()
    {
        return $this->container['run_as_password'];
    }

    /**
     * Sets run_as_password
     *
     * @param string|null $run_as_password run_as_password
     *
     * @return self
     */
    public function setRunAsPassword($run_as_password)
    {
        $this->container['run_as_password'] = $run_as_password;

        return $this;
    }

    /**
     * Gets sudo_user
     *
     * @return bool|null
     */
    public function getSudoUser()
    {
        return $this->container['sudo_user'];
    }

    /**
     * Sets sudo_user
     *
     * @param bool|null $sudo_user sudo_user
     *
     * @return self
     */
    public function setSudoUser($sudo_user)
    {
        $this->container['sudo_user'] = $sudo_user;

        return $this;
    }

    /**
     * Gets fail_on_error
     *
     * @return bool|null
     */
    public function getFailOnError()
    {
        return $this->container['fail_on_error'];
    }

    /**
     * Sets fail_on_error
     *
     * @param bool|null $fail_on_error fail_on_error
     *
     * @return self
     */
    public function setFailOnError($fail_on_error)
    {
        $this->container['fail_on_error'] = $fail_on_error;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


