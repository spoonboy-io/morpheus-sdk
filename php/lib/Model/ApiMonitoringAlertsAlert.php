<?php
/**
 * ApiMonitoringAlertsAlert
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ApiMonitoringAlertsAlert Class Doc Comment
 *
 * @category Class
 * @description Payload for creating a new monitoring alert
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class ApiMonitoringAlertsAlert implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_api_monitoring_alerts_alert';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'min_duration' => 'int',
        'min_severity' => 'string',
        'active' => 'bool',
        'all_checks' => 'bool',
        'all_groups' => 'bool',
        'all_apps' => 'bool',
        'checks' => 'int[]',
        'groups' => 'int[]',
        'apps' => 'int[]',
        'contacts' => '\OpenAPI\Client\Model\ApiMonitoringAlertsAlertContacts[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'min_duration' => null,
        'min_severity' => null,
        'active' => null,
        'all_checks' => null,
        'all_groups' => null,
        'all_apps' => null,
        'checks' => null,
        'groups' => null,
        'apps' => null,
        'contacts' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'min_duration' => 'minDuration',
        'min_severity' => 'minSeverity',
        'active' => 'active',
        'all_checks' => 'allChecks',
        'all_groups' => 'allGroups',
        'all_apps' => 'allApps',
        'checks' => 'checks',
        'groups' => 'groups',
        'apps' => 'apps',
        'contacts' => 'contacts'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'min_duration' => 'setMinDuration',
        'min_severity' => 'setMinSeverity',
        'active' => 'setActive',
        'all_checks' => 'setAllChecks',
        'all_groups' => 'setAllGroups',
        'all_apps' => 'setAllApps',
        'checks' => 'setChecks',
        'groups' => 'setGroups',
        'apps' => 'setApps',
        'contacts' => 'setContacts'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'min_duration' => 'getMinDuration',
        'min_severity' => 'getMinSeverity',
        'active' => 'getActive',
        'all_checks' => 'getAllChecks',
        'all_groups' => 'getAllGroups',
        'all_apps' => 'getAllApps',
        'checks' => 'getChecks',
        'groups' => 'getGroups',
        'apps' => 'getApps',
        'contacts' => 'getContacts'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const MIN_SEVERITY_INFO = 'info';
    const MIN_SEVERITY_WARNING = 'warning';
    const MIN_SEVERITY_CRITICAL = 'critical';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMinSeverityAllowableValues()
    {
        return [
            self::MIN_SEVERITY_INFO,
            self::MIN_SEVERITY_WARNING,
            self::MIN_SEVERITY_CRITICAL,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['min_duration'] = $data['min_duration'] ?? 0;
        $this->container['min_severity'] = $data['min_severity'] ?? 'critical';
        $this->container['active'] = $data['active'] ?? true;
        $this->container['all_checks'] = $data['all_checks'] ?? false;
        $this->container['all_groups'] = $data['all_groups'] ?? false;
        $this->container['all_apps'] = $data['all_apps'] ?? false;
        $this->container['checks'] = $data['checks'] ?? null;
        $this->container['groups'] = $data['groups'] ?? null;
        $this->container['apps'] = $data['apps'] ?? null;
        $this->container['contacts'] = $data['contacts'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        $allowedValues = $this->getMinSeverityAllowableValues();
        if (!is_null($this->container['min_severity']) && !in_array($this->container['min_severity'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'min_severity', must be one of '%s'",
                $this->container['min_severity'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Unique name scoped to your account for the alert
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets min_duration
     *
     * @return int|null
     */
    public function getMinDuration()
    {
        return $this->container['min_duration'];
    }

    /**
     * Sets min_duration
     *
     * @param int|null $min_duration Duration in minutes of the delay before sending notification(s)
     *
     * @return self
     */
    public function setMinDuration($min_duration)
    {
        $this->container['min_duration'] = $min_duration;

        return $this;
    }

    /**
     * Gets min_severity
     *
     * @return string|null
     */
    public function getMinSeverity()
    {
        return $this->container['min_severity'];
    }

    /**
     * Sets min_severity
     *
     * @param string|null $min_severity Severity level threshold for sending notifications.
     *
     * @return self
     */
    public function setMinSeverity($min_severity)
    {
        $allowedValues = $this->getMinSeverityAllowableValues();
        if (!is_null($min_severity) && !in_array($min_severity, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'min_severity', must be one of '%s'",
                    $min_severity,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['min_severity'] = $min_severity;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool|null
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool|null $active Set to false to disable notifications
     *
     * @return self
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets all_checks
     *
     * @return bool|null
     */
    public function getAllChecks()
    {
        return $this->container['all_checks'];
    }

    /**
     * Sets all_checks
     *
     * @param bool|null $all_checks Trigger for all checks
     *
     * @return self
     */
    public function setAllChecks($all_checks)
    {
        $this->container['all_checks'] = $all_checks;

        return $this;
    }

    /**
     * Gets all_groups
     *
     * @return bool|null
     */
    public function getAllGroups()
    {
        return $this->container['all_groups'];
    }

    /**
     * Sets all_groups
     *
     * @param bool|null $all_groups Trigger for all check groups
     *
     * @return self
     */
    public function setAllGroups($all_groups)
    {
        $this->container['all_groups'] = $all_groups;

        return $this;
    }

    /**
     * Gets all_apps
     *
     * @return bool|null
     */
    public function getAllApps()
    {
        return $this->container['all_apps'];
    }

    /**
     * Sets all_apps
     *
     * @param bool|null $all_apps Trigger for all monitor apps
     *
     * @return self
     */
    public function setAllApps($all_apps)
    {
        $this->container['all_apps'] = $all_apps;

        return $this;
    }

    /**
     * Gets checks
     *
     * @return int[]|null
     */
    public function getChecks()
    {
        return $this->container['checks'];
    }

    /**
     * Sets checks
     *
     * @param int[]|null $checks checks
     *
     * @return self
     */
    public function setChecks($checks)
    {
        $this->container['checks'] = $checks;

        return $this;
    }

    /**
     * Gets groups
     *
     * @return int[]|null
     */
    public function getGroups()
    {
        return $this->container['groups'];
    }

    /**
     * Sets groups
     *
     * @param int[]|null $groups groups
     *
     * @return self
     */
    public function setGroups($groups)
    {
        $this->container['groups'] = $groups;

        return $this;
    }

    /**
     * Gets apps
     *
     * @return int[]|null
     */
    public function getApps()
    {
        return $this->container['apps'];
    }

    /**
     * Sets apps
     *
     * @param int[]|null $apps apps
     *
     * @return self
     */
    public function setApps($apps)
    {
        $this->container['apps'] = $apps;

        return $this;
    }

    /**
     * Gets contacts
     *
     * @return \OpenAPI\Client\Model\ApiMonitoringAlertsAlertContacts[]|null
     */
    public function getContacts()
    {
        return $this->container['contacts'];
    }

    /**
     * Sets contacts
     *
     * @param \OpenAPI\Client\Model\ApiMonitoringAlertsAlertContacts[]|null $contacts contacts
     *
     * @return self
     */
    public function setContacts($contacts)
    {
        $this->container['contacts'] = $contacts;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


