<?php
/**
 * CatalogItemType
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CatalogItemType Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class CatalogItemType implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'catalogItemType';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'name' => 'string',
        'code' => 'string',
        'category' => 'string',
        'description' => 'string',
        'labels' => 'string[]',
        'type' => 'string',
        'enabled' => 'bool',
        'featured' => 'bool',
        'allow_quantity' => 'bool',
        'icon_path' => 'string',
        'image_path' => 'string',
        'dark_image_path' => 'string',
        'visibility' => 'string',
        'layout_code' => 'string',
        'blueprint' => 'object',
        'app_spec' => 'string',
        'config' => 'object',
        'workflow' => '\OpenAPI\Client\Model\InlineResponse20082LoadBalancerInstanceSslCert',
        'content' => 'string',
        'option_types' => '\OpenAPI\Client\Model\OptionType[]',
        'created_by' => 'string',
        'owner' => '\OpenAPI\Client\Model\InlineResponse20040AppDeployInstance',
        'date_created' => '\DateTime',
        'last_updated' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'name' => null,
        'code' => null,
        'category' => null,
        'description' => null,
        'labels' => null,
        'type' => null,
        'enabled' => null,
        'featured' => null,
        'allow_quantity' => null,
        'icon_path' => null,
        'image_path' => null,
        'dark_image_path' => null,
        'visibility' => null,
        'layout_code' => null,
        'blueprint' => null,
        'app_spec' => null,
        'config' => null,
        'workflow' => null,
        'content' => null,
        'option_types' => null,
        'created_by' => null,
        'owner' => null,
        'date_created' => 'date-time',
        'last_updated' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'code' => 'code',
        'category' => 'category',
        'description' => 'description',
        'labels' => 'labels',
        'type' => 'type',
        'enabled' => 'enabled',
        'featured' => 'featured',
        'allow_quantity' => 'allowQuantity',
        'icon_path' => 'iconPath',
        'image_path' => 'imagePath',
        'dark_image_path' => 'darkImagePath',
        'visibility' => 'visibility',
        'layout_code' => 'layoutCode',
        'blueprint' => 'blueprint',
        'app_spec' => 'appSpec',
        'config' => 'config',
        'workflow' => 'workflow',
        'content' => 'content',
        'option_types' => 'optionTypes',
        'created_by' => 'createdBy',
        'owner' => 'owner',
        'date_created' => 'dateCreated',
        'last_updated' => 'lastUpdated'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'code' => 'setCode',
        'category' => 'setCategory',
        'description' => 'setDescription',
        'labels' => 'setLabels',
        'type' => 'setType',
        'enabled' => 'setEnabled',
        'featured' => 'setFeatured',
        'allow_quantity' => 'setAllowQuantity',
        'icon_path' => 'setIconPath',
        'image_path' => 'setImagePath',
        'dark_image_path' => 'setDarkImagePath',
        'visibility' => 'setVisibility',
        'layout_code' => 'setLayoutCode',
        'blueprint' => 'setBlueprint',
        'app_spec' => 'setAppSpec',
        'config' => 'setConfig',
        'workflow' => 'setWorkflow',
        'content' => 'setContent',
        'option_types' => 'setOptionTypes',
        'created_by' => 'setCreatedBy',
        'owner' => 'setOwner',
        'date_created' => 'setDateCreated',
        'last_updated' => 'setLastUpdated'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'code' => 'getCode',
        'category' => 'getCategory',
        'description' => 'getDescription',
        'labels' => 'getLabels',
        'type' => 'getType',
        'enabled' => 'getEnabled',
        'featured' => 'getFeatured',
        'allow_quantity' => 'getAllowQuantity',
        'icon_path' => 'getIconPath',
        'image_path' => 'getImagePath',
        'dark_image_path' => 'getDarkImagePath',
        'visibility' => 'getVisibility',
        'layout_code' => 'getLayoutCode',
        'blueprint' => 'getBlueprint',
        'app_spec' => 'getAppSpec',
        'config' => 'getConfig',
        'workflow' => 'getWorkflow',
        'content' => 'getContent',
        'option_types' => 'getOptionTypes',
        'created_by' => 'getCreatedBy',
        'owner' => 'getOwner',
        'date_created' => 'getDateCreated',
        'last_updated' => 'getLastUpdated'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['code'] = $data['code'] ?? null;
        $this->container['category'] = $data['category'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['labels'] = $data['labels'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['enabled'] = $data['enabled'] ?? null;
        $this->container['featured'] = $data['featured'] ?? null;
        $this->container['allow_quantity'] = $data['allow_quantity'] ?? null;
        $this->container['icon_path'] = $data['icon_path'] ?? null;
        $this->container['image_path'] = $data['image_path'] ?? null;
        $this->container['dark_image_path'] = $data['dark_image_path'] ?? null;
        $this->container['visibility'] = $data['visibility'] ?? null;
        $this->container['layout_code'] = $data['layout_code'] ?? null;
        $this->container['blueprint'] = $data['blueprint'] ?? null;
        $this->container['app_spec'] = $data['app_spec'] ?? null;
        $this->container['config'] = $data['config'] ?? null;
        $this->container['workflow'] = $data['workflow'] ?? null;
        $this->container['content'] = $data['content'] ?? null;
        $this->container['option_types'] = $data['option_types'] ?? null;
        $this->container['created_by'] = $data['created_by'] ?? null;
        $this->container['owner'] = $data['owner'] ?? null;
        $this->container['date_created'] = $data['date_created'] ?? null;
        $this->container['last_updated'] = $data['last_updated'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string|null
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string|null $code Useful shortcode for provisioning naming schemes and export reference.
     *
     * @return self
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets category
     *
     * @return string|null
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param string|null $category Catalog Item Type category
     *
     * @return self
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets labels
     *
     * @return string[]|null
     */
    public function getLabels()
    {
        return $this->container['labels'];
    }

    /**
     * Sets labels
     *
     * @param string[]|null $labels labels
     *
     * @return self
     */
    public function setLabels($labels)
    {
        $this->container['labels'] = $labels;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool|null
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool|null $enabled enabled
     *
     * @return self
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets featured
     *
     * @return bool|null
     */
    public function getFeatured()
    {
        return $this->container['featured'];
    }

    /**
     * Sets featured
     *
     * @param bool|null $featured featured
     *
     * @return self
     */
    public function setFeatured($featured)
    {
        $this->container['featured'] = $featured;

        return $this;
    }

    /**
     * Gets allow_quantity
     *
     * @return bool|null
     */
    public function getAllowQuantity()
    {
        return $this->container['allow_quantity'];
    }

    /**
     * Sets allow_quantity
     *
     * @param bool|null $allow_quantity Can users order more than one of this item at a time.
     *
     * @return self
     */
    public function setAllowQuantity($allow_quantity)
    {
        $this->container['allow_quantity'] = $allow_quantity;

        return $this;
    }

    /**
     * Gets icon_path
     *
     * @return string|null
     */
    public function getIconPath()
    {
        return $this->container['icon_path'];
    }

    /**
     * Sets icon_path
     *
     * @param string|null $icon_path icon_path
     *
     * @return self
     */
    public function setIconPath($icon_path)
    {
        $this->container['icon_path'] = $icon_path;

        return $this;
    }

    /**
     * Gets image_path
     *
     * @return string|null
     */
    public function getImagePath()
    {
        return $this->container['image_path'];
    }

    /**
     * Sets image_path
     *
     * @param string|null $image_path image_path
     *
     * @return self
     */
    public function setImagePath($image_path)
    {
        $this->container['image_path'] = $image_path;

        return $this;
    }

    /**
     * Gets dark_image_path
     *
     * @return string|null
     */
    public function getDarkImagePath()
    {
        return $this->container['dark_image_path'];
    }

    /**
     * Sets dark_image_path
     *
     * @param string|null $dark_image_path dark_image_path
     *
     * @return self
     */
    public function setDarkImagePath($dark_image_path)
    {
        $this->container['dark_image_path'] = $dark_image_path;

        return $this;
    }

    /**
     * Gets visibility
     *
     * @return string|null
     */
    public function getVisibility()
    {
        return $this->container['visibility'];
    }

    /**
     * Sets visibility
     *
     * @param string|null $visibility visibility
     *
     * @return self
     */
    public function setVisibility($visibility)
    {
        $this->container['visibility'] = $visibility;

        return $this;
    }

    /**
     * Gets layout_code
     *
     * @return string|null
     */
    public function getLayoutCode()
    {
        return $this->container['layout_code'];
    }

    /**
     * Sets layout_code
     *
     * @param string|null $layout_code layout_code
     *
     * @return self
     */
    public function setLayoutCode($layout_code)
    {
        $this->container['layout_code'] = $layout_code;

        return $this;
    }

    /**
     * Gets blueprint
     *
     * @return object|null
     */
    public function getBlueprint()
    {
        return $this->container['blueprint'];
    }

    /**
     * Sets blueprint
     *
     * @param object|null $blueprint blueprint
     *
     * @return self
     */
    public function setBlueprint($blueprint)
    {
        $this->container['blueprint'] = $blueprint;

        return $this;
    }

    /**
     * Gets app_spec
     *
     * @return string|null
     */
    public function getAppSpec()
    {
        return $this->container['app_spec'];
    }

    /**
     * Sets app_spec
     *
     * @param string|null $app_spec app_spec
     *
     * @return self
     */
    public function setAppSpec($app_spec)
    {
        $this->container['app_spec'] = $app_spec;

        return $this;
    }

    /**
     * Gets config
     *
     * @return object|null
     */
    public function getConfig()
    {
        return $this->container['config'];
    }

    /**
     * Sets config
     *
     * @param object|null $config config
     *
     * @return self
     */
    public function setConfig($config)
    {
        $this->container['config'] = $config;

        return $this;
    }

    /**
     * Gets workflow
     *
     * @return \OpenAPI\Client\Model\InlineResponse20082LoadBalancerInstanceSslCert|null
     */
    public function getWorkflow()
    {
        return $this->container['workflow'];
    }

    /**
     * Sets workflow
     *
     * @param \OpenAPI\Client\Model\InlineResponse20082LoadBalancerInstanceSslCert|null $workflow workflow
     *
     * @return self
     */
    public function setWorkflow($workflow)
    {
        $this->container['workflow'] = $workflow;

        return $this;
    }

    /**
     * Gets content
     *
     * @return string|null
     */
    public function getContent()
    {
        return $this->container['content'];
    }

    /**
     * Sets content
     *
     * @param string|null $content content
     *
     * @return self
     */
    public function setContent($content)
    {
        $this->container['content'] = $content;

        return $this;
    }

    /**
     * Gets option_types
     *
     * @return \OpenAPI\Client\Model\OptionType[]|null
     */
    public function getOptionTypes()
    {
        return $this->container['option_types'];
    }

    /**
     * Sets option_types
     *
     * @param \OpenAPI\Client\Model\OptionType[]|null $option_types option_types
     *
     * @return self
     */
    public function setOptionTypes($option_types)
    {
        $this->container['option_types'] = $option_types;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return string|null
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param string|null $created_by created_by
     *
     * @return self
     */
    public function setCreatedBy($created_by)
    {
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return \OpenAPI\Client\Model\InlineResponse20040AppDeployInstance|null
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param \OpenAPI\Client\Model\InlineResponse20040AppDeployInstance|null $owner owner
     *
     * @return self
     */
    public function setOwner($owner)
    {
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets date_created
     *
     * @return \DateTime|null
     */
    public function getDateCreated()
    {
        return $this->container['date_created'];
    }

    /**
     * Sets date_created
     *
     * @param \DateTime|null $date_created date_created
     *
     * @return self
     */
    public function setDateCreated($date_created)
    {
        $this->container['date_created'] = $date_created;

        return $this;
    }

    /**
     * Gets last_updated
     *
     * @return \DateTime|null
     */
    public function getLastUpdated()
    {
        return $this->container['last_updated'];
    }

    /**
     * Sets last_updated
     *
     * @param \DateTime|null $last_updated last_updated
     *
     * @return self
     */
    public function setLastUpdated($last_updated)
    {
        $this->container['last_updated'] = $last_updated;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


