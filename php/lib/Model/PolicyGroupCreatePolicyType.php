<?php
/**
 * PolicyGroupCreatePolicyType
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * PolicyGroupCreatePolicyType Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class PolicyGroupCreatePolicyType implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'policyGroupCreate_policyType';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'code' => 'string',
        'config' => 'OneOfObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObject',
        'enabled' => 'bool',
        'ref_type' => 'string',
        'ref_id' => 'int',
        'accounts' => 'int[]',
        'each_user' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'code' => null,
        'config' => null,
        'enabled' => null,
        'ref_type' => null,
        'ref_id' => 'int64',
        'accounts' => 'int64',
        'each_user' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'code' => 'code',
        'config' => 'config',
        'enabled' => 'enabled',
        'ref_type' => 'refType',
        'ref_id' => 'refId',
        'accounts' => 'accounts',
        'each_user' => 'eachUser'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'code' => 'setCode',
        'config' => 'setConfig',
        'enabled' => 'setEnabled',
        'ref_type' => 'setRefType',
        'ref_id' => 'setRefId',
        'accounts' => 'setAccounts',
        'each_user' => 'setEachUser'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'code' => 'getCode',
        'config' => 'getConfig',
        'enabled' => 'getEnabled',
        'ref_type' => 'getRefType',
        'ref_id' => 'getRefId',
        'accounts' => 'getAccounts',
        'each_user' => 'getEachUser'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const CODE_APPROVE_DELETE = 'Approve Delete';
    const CODE_APPROVE_PROVISION = 'Approve Provision';
    const CODE_APPROVE_RECONFIGURE = 'Approve Reconfigure';
    const CODE_BACKUP_CREATION = 'Backup Creation';
    const CODE_BACKUP_TARGETS = 'Backup Targets';
    const CODE_BUDGET = 'Budget';
    const CODE_CLUSTER_RESOURCE_NAME = 'Cluster Resource Name';
    const CODE_CYPHER_ACCESS = 'Cypher Access';
    const CODE_DELAYED_DELETE = 'Delayed Delete';
    const CODE_EXPIRATION = 'Expiration';
    const CODE_FILE_SHARE_STORAGE_QUOTA = 'File Share Storage Quota';
    const CODE_HOSTNAME = 'Hostname';
    const CODE_INSTANCE_NAME = 'Instance Name';
    const CODE_MAX_CONTAINERS = 'Max Containers';
    const CODE_MAX_CORES = 'Max Cores';
    const CODE_MAX_HOSTS = 'Max Hosts';
    const CODE_MAX_LOAD_BALANCER_POOLS = 'Max Load Balancer Pools';
    const CODE_MAX_MEMORY = 'Max Memory';
    const CODE_MAX_POOL_MEMBERS = 'Max Pool Members';
    const CODE_MAX_STORAGE = 'Max Storage';
    const CODE_MAX_VIRTUAL_SERVERS = 'Max Virtual Servers';
    const CODE_MAX_V_MS = 'Max VMs';
    const CODE_MESSAGE_OF_THE_DAY = 'Message of the Day';
    const CODE_NETWORK_QUOTA = 'Network Quota';
    const CODE_OBJECT_STORAGE_QUOTA = 'Object Storage Quota';
    const CODE_POWER_SCHEDULE = 'Power Schedule';
    const CODE_ROUTER_QUOTA = 'Router Quota';
    const CODE_SHUTDOWN = 'Shutdown';
    const CODE_STORAGE_SERVER_STORAGE_QUOTA = 'Storage Server Storage Quota';
    const CODE_TAGS = 'Tags';
    const CODE_USER_CREATION = 'User Creation';
    const CODE_USER_GROUP_CREATION = 'User Group Creation';
    const CODE_WORKFLOW = 'Workflow';
    const REF_TYPE_COMPUTE_SITE = 'ComputeSite';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCodeAllowableValues()
    {
        return [
            self::CODE_APPROVE_DELETE,
            self::CODE_APPROVE_PROVISION,
            self::CODE_APPROVE_RECONFIGURE,
            self::CODE_BACKUP_CREATION,
            self::CODE_BACKUP_TARGETS,
            self::CODE_BUDGET,
            self::CODE_CLUSTER_RESOURCE_NAME,
            self::CODE_CYPHER_ACCESS,
            self::CODE_DELAYED_DELETE,
            self::CODE_EXPIRATION,
            self::CODE_FILE_SHARE_STORAGE_QUOTA,
            self::CODE_HOSTNAME,
            self::CODE_INSTANCE_NAME,
            self::CODE_MAX_CONTAINERS,
            self::CODE_MAX_CORES,
            self::CODE_MAX_HOSTS,
            self::CODE_MAX_LOAD_BALANCER_POOLS,
            self::CODE_MAX_MEMORY,
            self::CODE_MAX_POOL_MEMBERS,
            self::CODE_MAX_STORAGE,
            self::CODE_MAX_VIRTUAL_SERVERS,
            self::CODE_MAX_V_MS,
            self::CODE_MESSAGE_OF_THE_DAY,
            self::CODE_NETWORK_QUOTA,
            self::CODE_OBJECT_STORAGE_QUOTA,
            self::CODE_POWER_SCHEDULE,
            self::CODE_ROUTER_QUOTA,
            self::CODE_SHUTDOWN,
            self::CODE_STORAGE_SERVER_STORAGE_QUOTA,
            self::CODE_TAGS,
            self::CODE_USER_CREATION,
            self::CODE_USER_GROUP_CREATION,
            self::CODE_WORKFLOW,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRefTypeAllowableValues()
    {
        return [
            self::REF_TYPE_COMPUTE_SITE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['code'] = $data['code'] ?? null;
        $this->container['config'] = $data['config'] ?? null;
        $this->container['enabled'] = $data['enabled'] ?? true;
        $this->container['ref_type'] = $data['ref_type'] ?? null;
        $this->container['ref_id'] = $data['ref_id'] ?? null;
        $this->container['accounts'] = $data['accounts'] ?? null;
        $this->container['each_user'] = $data['each_user'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getCodeAllowableValues();
        if (!is_null($this->container['code']) && !in_array($this->container['code'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'code', must be one of '%s'",
                $this->container['code'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRefTypeAllowableValues();
        if (!is_null($this->container['ref_type']) && !in_array($this->container['ref_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ref_type', must be one of '%s'",
                $this->container['ref_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets code
     *
     * @return string|null
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string|null $code The policy type
     *
     * @return self
     */
    public function setCode($code)
    {
        $allowedValues = $this->getCodeAllowableValues();
        if (!is_null($code) && !in_array($code, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'code', must be one of '%s'",
                    $code,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets config
     *
     * @return OneOfObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObject|null
     */
    public function getConfig()
    {
        return $this->container['config'];
    }

    /**
     * Sets config
     *
     * @param OneOfObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObjectObject|null $config A map of config values. The expected values vary by policyType.
     *
     * @return self
     */
    public function setConfig($config)
    {
        $this->container['config'] = $config;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool|null
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool|null $enabled Set to false to disable
     *
     * @return self
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets ref_type
     *
     * @return string|null
     */
    public function getRefType()
    {
        return $this->container['ref_type'];
    }

    /**
     * Sets ref_type
     *
     * @param string|null $ref_type Scope object type
     *
     * @return self
     */
    public function setRefType($ref_type)
    {
        $allowedValues = $this->getRefTypeAllowableValues();
        if (!is_null($ref_type) && !in_array($ref_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ref_type', must be one of '%s'",
                    $ref_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ref_type'] = $ref_type;

        return $this;
    }

    /**
     * Gets ref_id
     *
     * @return int|null
     */
    public function getRefId()
    {
        return $this->container['ref_id'];
    }

    /**
     * Sets ref_id
     *
     * @param int|null $ref_id Scope object ID (`group`)
     *
     * @return self
     */
    public function setRefId($ref_id)
    {
        $this->container['ref_id'] = $ref_id;

        return $this;
    }

    /**
     * Gets accounts
     *
     * @return int[]|null
     */
    public function getAccounts()
    {
        return $this->container['accounts'];
    }

    /**
     * Sets accounts
     *
     * @param int[]|null $accounts Array of tenants to scope the policy to
     *
     * @return self
     */
    public function setAccounts($accounts)
    {
        $this->container['accounts'] = $accounts;

        return $this;
    }

    /**
     * Gets each_user
     *
     * @return bool|null
     */
    public function getEachUser()
    {
        return $this->container['each_user'];
    }

    /**
     * Sets each_user
     *
     * @param bool|null $each_user Apply individually to each user in role.  Only when `refType` equals `Role`
     *
     * @return self
     */
    public function setEachUser($each_user)
    {
        $this->container['each_user'] = $each_user;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


