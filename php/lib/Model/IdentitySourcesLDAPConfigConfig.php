<?php
/**
 * IdentitySourcesLDAPConfigConfig
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * IdentitySourcesLDAPConfigConfig Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class IdentitySourcesLDAPConfigConfig implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'identitySourcesLDAPConfig_config';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'url' => 'string',
        'binding_username' => 'string',
        'binding_password' => 'string',
        'user_fqn_expression' => 'string',
        'required_role_fqn' => 'string',
        'username_attribute' => 'string',
        'common_name_attribute' => 'string',
        'first_name_attribute' => 'string',
        'last_name_attribute' => 'string',
        'email_attribute' => 'string',
        'unique_member_attribute' => 'string',
        'member_of_attribute' => 'string',
        'binding_password_hash' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'url' => null,
        'binding_username' => null,
        'binding_password' => null,
        'user_fqn_expression' => null,
        'required_role_fqn' => null,
        'username_attribute' => null,
        'common_name_attribute' => null,
        'first_name_attribute' => null,
        'last_name_attribute' => null,
        'email_attribute' => null,
        'unique_member_attribute' => null,
        'member_of_attribute' => null,
        'binding_password_hash' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'url' => 'url',
        'binding_username' => 'bindingUsername',
        'binding_password' => 'bindingPassword',
        'user_fqn_expression' => 'userFqnExpression',
        'required_role_fqn' => 'requiredRoleFqn',
        'username_attribute' => 'usernameAttribute',
        'common_name_attribute' => 'commonNameAttribute',
        'first_name_attribute' => 'firstNameAttribute',
        'last_name_attribute' => 'lastNameAttribute',
        'email_attribute' => 'emailAttribute',
        'unique_member_attribute' => 'uniqueMemberAttribute',
        'member_of_attribute' => 'memberOfAttribute',
        'binding_password_hash' => 'bindingPasswordHash'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'url' => 'setUrl',
        'binding_username' => 'setBindingUsername',
        'binding_password' => 'setBindingPassword',
        'user_fqn_expression' => 'setUserFqnExpression',
        'required_role_fqn' => 'setRequiredRoleFqn',
        'username_attribute' => 'setUsernameAttribute',
        'common_name_attribute' => 'setCommonNameAttribute',
        'first_name_attribute' => 'setFirstNameAttribute',
        'last_name_attribute' => 'setLastNameAttribute',
        'email_attribute' => 'setEmailAttribute',
        'unique_member_attribute' => 'setUniqueMemberAttribute',
        'member_of_attribute' => 'setMemberOfAttribute',
        'binding_password_hash' => 'setBindingPasswordHash'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'url' => 'getUrl',
        'binding_username' => 'getBindingUsername',
        'binding_password' => 'getBindingPassword',
        'user_fqn_expression' => 'getUserFqnExpression',
        'required_role_fqn' => 'getRequiredRoleFqn',
        'username_attribute' => 'getUsernameAttribute',
        'common_name_attribute' => 'getCommonNameAttribute',
        'first_name_attribute' => 'getFirstNameAttribute',
        'last_name_attribute' => 'getLastNameAttribute',
        'email_attribute' => 'getEmailAttribute',
        'unique_member_attribute' => 'getUniqueMemberAttribute',
        'member_of_attribute' => 'getMemberOfAttribute',
        'binding_password_hash' => 'getBindingPasswordHash'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['url'] = $data['url'] ?? null;
        $this->container['binding_username'] = $data['binding_username'] ?? null;
        $this->container['binding_password'] = $data['binding_password'] ?? null;
        $this->container['user_fqn_expression'] = $data['user_fqn_expression'] ?? null;
        $this->container['required_role_fqn'] = $data['required_role_fqn'] ?? null;
        $this->container['username_attribute'] = $data['username_attribute'] ?? null;
        $this->container['common_name_attribute'] = $data['common_name_attribute'] ?? null;
        $this->container['first_name_attribute'] = $data['first_name_attribute'] ?? null;
        $this->container['last_name_attribute'] = $data['last_name_attribute'] ?? null;
        $this->container['email_attribute'] = $data['email_attribute'] ?? null;
        $this->container['unique_member_attribute'] = $data['unique_member_attribute'] ?? null;
        $this->container['member_of_attribute'] = $data['member_of_attribute'] ?? null;
        $this->container['binding_password_hash'] = $data['binding_password_hash'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets url
     *
     * @return string|null
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string|null $url url
     *
     * @return self
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets binding_username
     *
     * @return string|null
     */
    public function getBindingUsername()
    {
        return $this->container['binding_username'];
    }

    /**
     * Sets binding_username
     *
     * @param string|null $binding_username binding_username
     *
     * @return self
     */
    public function setBindingUsername($binding_username)
    {
        $this->container['binding_username'] = $binding_username;

        return $this;
    }

    /**
     * Gets binding_password
     *
     * @return string|null
     */
    public function getBindingPassword()
    {
        return $this->container['binding_password'];
    }

    /**
     * Sets binding_password
     *
     * @param string|null $binding_password binding_password
     *
     * @return self
     */
    public function setBindingPassword($binding_password)
    {
        $this->container['binding_password'] = $binding_password;

        return $this;
    }

    /**
     * Gets user_fqn_expression
     *
     * @return string|null
     */
    public function getUserFqnExpression()
    {
        return $this->container['user_fqn_expression'];
    }

    /**
     * Sets user_fqn_expression
     *
     * @param string|null $user_fqn_expression user_fqn_expression
     *
     * @return self
     */
    public function setUserFqnExpression($user_fqn_expression)
    {
        $this->container['user_fqn_expression'] = $user_fqn_expression;

        return $this;
    }

    /**
     * Gets required_role_fqn
     *
     * @return string|null
     */
    public function getRequiredRoleFqn()
    {
        return $this->container['required_role_fqn'];
    }

    /**
     * Sets required_role_fqn
     *
     * @param string|null $required_role_fqn required_role_fqn
     *
     * @return self
     */
    public function setRequiredRoleFqn($required_role_fqn)
    {
        $this->container['required_role_fqn'] = $required_role_fqn;

        return $this;
    }

    /**
     * Gets username_attribute
     *
     * @return string|null
     */
    public function getUsernameAttribute()
    {
        return $this->container['username_attribute'];
    }

    /**
     * Sets username_attribute
     *
     * @param string|null $username_attribute username_attribute
     *
     * @return self
     */
    public function setUsernameAttribute($username_attribute)
    {
        $this->container['username_attribute'] = $username_attribute;

        return $this;
    }

    /**
     * Gets common_name_attribute
     *
     * @return string|null
     */
    public function getCommonNameAttribute()
    {
        return $this->container['common_name_attribute'];
    }

    /**
     * Sets common_name_attribute
     *
     * @param string|null $common_name_attribute common_name_attribute
     *
     * @return self
     */
    public function setCommonNameAttribute($common_name_attribute)
    {
        $this->container['common_name_attribute'] = $common_name_attribute;

        return $this;
    }

    /**
     * Gets first_name_attribute
     *
     * @return string|null
     */
    public function getFirstNameAttribute()
    {
        return $this->container['first_name_attribute'];
    }

    /**
     * Sets first_name_attribute
     *
     * @param string|null $first_name_attribute first_name_attribute
     *
     * @return self
     */
    public function setFirstNameAttribute($first_name_attribute)
    {
        $this->container['first_name_attribute'] = $first_name_attribute;

        return $this;
    }

    /**
     * Gets last_name_attribute
     *
     * @return string|null
     */
    public function getLastNameAttribute()
    {
        return $this->container['last_name_attribute'];
    }

    /**
     * Sets last_name_attribute
     *
     * @param string|null $last_name_attribute last_name_attribute
     *
     * @return self
     */
    public function setLastNameAttribute($last_name_attribute)
    {
        $this->container['last_name_attribute'] = $last_name_attribute;

        return $this;
    }

    /**
     * Gets email_attribute
     *
     * @return string|null
     */
    public function getEmailAttribute()
    {
        return $this->container['email_attribute'];
    }

    /**
     * Sets email_attribute
     *
     * @param string|null $email_attribute email_attribute
     *
     * @return self
     */
    public function setEmailAttribute($email_attribute)
    {
        $this->container['email_attribute'] = $email_attribute;

        return $this;
    }

    /**
     * Gets unique_member_attribute
     *
     * @return string|null
     */
    public function getUniqueMemberAttribute()
    {
        return $this->container['unique_member_attribute'];
    }

    /**
     * Sets unique_member_attribute
     *
     * @param string|null $unique_member_attribute unique_member_attribute
     *
     * @return self
     */
    public function setUniqueMemberAttribute($unique_member_attribute)
    {
        $this->container['unique_member_attribute'] = $unique_member_attribute;

        return $this;
    }

    /**
     * Gets member_of_attribute
     *
     * @return string|null
     */
    public function getMemberOfAttribute()
    {
        return $this->container['member_of_attribute'];
    }

    /**
     * Sets member_of_attribute
     *
     * @param string|null $member_of_attribute member_of_attribute
     *
     * @return self
     */
    public function setMemberOfAttribute($member_of_attribute)
    {
        $this->container['member_of_attribute'] = $member_of_attribute;

        return $this;
    }

    /**
     * Gets binding_password_hash
     *
     * @return string|null
     */
    public function getBindingPasswordHash()
    {
        return $this->container['binding_password_hash'];
    }

    /**
     * Sets binding_password_hash
     *
     * @param string|null $binding_password_hash binding_password_hash
     *
     * @return self
     */
    public function setBindingPasswordHash($binding_password_hash)
    {
        $this->container['binding_password_hash'] = $binding_password_hash;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


