<?php
/**
 * HealthDatabase
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * HealthDatabase Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class HealthDatabase implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'health_database';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'success' => 'bool',
        'connection_list' => 'object[]',
        'busy_connections' => 'string[]',
        'max_connections' => 'int',
        'max_used_connections' => 'int',
        'used_connections' => 'int',
        'aborted_connections' => 'int',
        'innodb_status' => 'string',
        'stats' => '\OpenAPI\Client\Model\HealthDatabaseStats',
        'scans' => '\OpenAPI\Client\Model\HealthDatabaseScans',
        'slow_queries' => '\OpenAPI\Client\Model\HealthDatabaseSlowQueries[]',
        'innodb_stats' => '\OpenAPI\Client\Model\HealthDatabaseInnodbStats',
        'scan_percent' => 'float',
        'status' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'success' => null,
        'connection_list' => null,
        'busy_connections' => null,
        'max_connections' => 'int64',
        'max_used_connections' => 'int64',
        'used_connections' => 'int64',
        'aborted_connections' => 'int64',
        'innodb_status' => null,
        'stats' => null,
        'scans' => null,
        'slow_queries' => null,
        'innodb_stats' => null,
        'scan_percent' => null,
        'status' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'success' => 'success',
        'connection_list' => 'connectionList',
        'busy_connections' => 'busyConnections',
        'max_connections' => 'maxConnections',
        'max_used_connections' => 'maxUsedConnections',
        'used_connections' => 'usedConnections',
        'aborted_connections' => 'abortedConnections',
        'innodb_status' => 'innodbStatus',
        'stats' => 'stats',
        'scans' => 'scans',
        'slow_queries' => 'slowQueries',
        'innodb_stats' => 'innodbStats',
        'scan_percent' => 'scanPercent',
        'status' => 'status'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'success' => 'setSuccess',
        'connection_list' => 'setConnectionList',
        'busy_connections' => 'setBusyConnections',
        'max_connections' => 'setMaxConnections',
        'max_used_connections' => 'setMaxUsedConnections',
        'used_connections' => 'setUsedConnections',
        'aborted_connections' => 'setAbortedConnections',
        'innodb_status' => 'setInnodbStatus',
        'stats' => 'setStats',
        'scans' => 'setScans',
        'slow_queries' => 'setSlowQueries',
        'innodb_stats' => 'setInnodbStats',
        'scan_percent' => 'setScanPercent',
        'status' => 'setStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'success' => 'getSuccess',
        'connection_list' => 'getConnectionList',
        'busy_connections' => 'getBusyConnections',
        'max_connections' => 'getMaxConnections',
        'max_used_connections' => 'getMaxUsedConnections',
        'used_connections' => 'getUsedConnections',
        'aborted_connections' => 'getAbortedConnections',
        'innodb_status' => 'getInnodbStatus',
        'stats' => 'getStats',
        'scans' => 'getScans',
        'slow_queries' => 'getSlowQueries',
        'innodb_stats' => 'getInnodbStats',
        'scan_percent' => 'getScanPercent',
        'status' => 'getStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['success'] = $data['success'] ?? null;
        $this->container['connection_list'] = $data['connection_list'] ?? null;
        $this->container['busy_connections'] = $data['busy_connections'] ?? null;
        $this->container['max_connections'] = $data['max_connections'] ?? null;
        $this->container['max_used_connections'] = $data['max_used_connections'] ?? null;
        $this->container['used_connections'] = $data['used_connections'] ?? null;
        $this->container['aborted_connections'] = $data['aborted_connections'] ?? null;
        $this->container['innodb_status'] = $data['innodb_status'] ?? null;
        $this->container['stats'] = $data['stats'] ?? null;
        $this->container['scans'] = $data['scans'] ?? null;
        $this->container['slow_queries'] = $data['slow_queries'] ?? null;
        $this->container['innodb_stats'] = $data['innodb_stats'] ?? null;
        $this->container['scan_percent'] = $data['scan_percent'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets success
     *
     * @return bool|null
     */
    public function getSuccess()
    {
        return $this->container['success'];
    }

    /**
     * Sets success
     *
     * @param bool|null $success success
     *
     * @return self
     */
    public function setSuccess($success)
    {
        $this->container['success'] = $success;

        return $this;
    }

    /**
     * Gets connection_list
     *
     * @return object[]|null
     */
    public function getConnectionList()
    {
        return $this->container['connection_list'];
    }

    /**
     * Sets connection_list
     *
     * @param object[]|null $connection_list connection_list
     *
     * @return self
     */
    public function setConnectionList($connection_list)
    {
        $this->container['connection_list'] = $connection_list;

        return $this;
    }

    /**
     * Gets busy_connections
     *
     * @return string[]|null
     */
    public function getBusyConnections()
    {
        return $this->container['busy_connections'];
    }

    /**
     * Sets busy_connections
     *
     * @param string[]|null $busy_connections busy_connections
     *
     * @return self
     */
    public function setBusyConnections($busy_connections)
    {
        $this->container['busy_connections'] = $busy_connections;

        return $this;
    }

    /**
     * Gets max_connections
     *
     * @return int|null
     */
    public function getMaxConnections()
    {
        return $this->container['max_connections'];
    }

    /**
     * Sets max_connections
     *
     * @param int|null $max_connections max_connections
     *
     * @return self
     */
    public function setMaxConnections($max_connections)
    {
        $this->container['max_connections'] = $max_connections;

        return $this;
    }

    /**
     * Gets max_used_connections
     *
     * @return int|null
     */
    public function getMaxUsedConnections()
    {
        return $this->container['max_used_connections'];
    }

    /**
     * Sets max_used_connections
     *
     * @param int|null $max_used_connections max_used_connections
     *
     * @return self
     */
    public function setMaxUsedConnections($max_used_connections)
    {
        $this->container['max_used_connections'] = $max_used_connections;

        return $this;
    }

    /**
     * Gets used_connections
     *
     * @return int|null
     */
    public function getUsedConnections()
    {
        return $this->container['used_connections'];
    }

    /**
     * Sets used_connections
     *
     * @param int|null $used_connections used_connections
     *
     * @return self
     */
    public function setUsedConnections($used_connections)
    {
        $this->container['used_connections'] = $used_connections;

        return $this;
    }

    /**
     * Gets aborted_connections
     *
     * @return int|null
     */
    public function getAbortedConnections()
    {
        return $this->container['aborted_connections'];
    }

    /**
     * Sets aborted_connections
     *
     * @param int|null $aborted_connections aborted_connections
     *
     * @return self
     */
    public function setAbortedConnections($aborted_connections)
    {
        $this->container['aborted_connections'] = $aborted_connections;

        return $this;
    }

    /**
     * Gets innodb_status
     *
     * @return string|null
     */
    public function getInnodbStatus()
    {
        return $this->container['innodb_status'];
    }

    /**
     * Sets innodb_status
     *
     * @param string|null $innodb_status innodb_status
     *
     * @return self
     */
    public function setInnodbStatus($innodb_status)
    {
        $this->container['innodb_status'] = $innodb_status;

        return $this;
    }

    /**
     * Gets stats
     *
     * @return \OpenAPI\Client\Model\HealthDatabaseStats|null
     */
    public function getStats()
    {
        return $this->container['stats'];
    }

    /**
     * Sets stats
     *
     * @param \OpenAPI\Client\Model\HealthDatabaseStats|null $stats stats
     *
     * @return self
     */
    public function setStats($stats)
    {
        $this->container['stats'] = $stats;

        return $this;
    }

    /**
     * Gets scans
     *
     * @return \OpenAPI\Client\Model\HealthDatabaseScans|null
     */
    public function getScans()
    {
        return $this->container['scans'];
    }

    /**
     * Sets scans
     *
     * @param \OpenAPI\Client\Model\HealthDatabaseScans|null $scans scans
     *
     * @return self
     */
    public function setScans($scans)
    {
        $this->container['scans'] = $scans;

        return $this;
    }

    /**
     * Gets slow_queries
     *
     * @return \OpenAPI\Client\Model\HealthDatabaseSlowQueries[]|null
     */
    public function getSlowQueries()
    {
        return $this->container['slow_queries'];
    }

    /**
     * Sets slow_queries
     *
     * @param \OpenAPI\Client\Model\HealthDatabaseSlowQueries[]|null $slow_queries slow_queries
     *
     * @return self
     */
    public function setSlowQueries($slow_queries)
    {
        $this->container['slow_queries'] = $slow_queries;

        return $this;
    }

    /**
     * Gets innodb_stats
     *
     * @return \OpenAPI\Client\Model\HealthDatabaseInnodbStats|null
     */
    public function getInnodbStats()
    {
        return $this->container['innodb_stats'];
    }

    /**
     * Sets innodb_stats
     *
     * @param \OpenAPI\Client\Model\HealthDatabaseInnodbStats|null $innodb_stats innodb_stats
     *
     * @return self
     */
    public function setInnodbStats($innodb_stats)
    {
        $this->container['innodb_stats'] = $innodb_stats;

        return $this;
    }

    /**
     * Gets scan_percent
     *
     * @return float|null
     */
    public function getScanPercent()
    {
        return $this->container['scan_percent'];
    }

    /**
     * Sets scan_percent
     *
     * @param float|null $scan_percent scan_percent
     *
     * @return self
     */
    public function setScanPercent($scan_percent)
    {
        $this->container['scan_percent'] = $scan_percent;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


