<?php
/**
 * TaskEmailConfigTaskOptions
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * TaskEmailConfigTaskOptions Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class TaskEmailConfigTaskOptions implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'taskEmailConfig_taskOptions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'local_script_git_id' => 'string',
        'email_skip_template' => 'string',
        'username' => 'string',
        'email_subject' => 'string',
        'host' => 'string',
        'password' => 'string',
        'password_hash' => 'string',
        'email_address' => 'string',
        'port' => 'string',
        'ssh_key' => 'string',
        'local_script_git_ref' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'local_script_git_id' => null,
        'email_skip_template' => null,
        'username' => null,
        'email_subject' => null,
        'host' => null,
        'password' => null,
        'password_hash' => null,
        'email_address' => null,
        'port' => null,
        'ssh_key' => null,
        'local_script_git_ref' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'local_script_git_id' => 'localScriptGitId',
        'email_skip_template' => 'emailSkipTemplate',
        'username' => 'username',
        'email_subject' => 'emailSubject',
        'host' => 'host',
        'password' => 'password',
        'password_hash' => 'passwordHash',
        'email_address' => 'emailAddress',
        'port' => 'port',
        'ssh_key' => 'sshKey',
        'local_script_git_ref' => 'localScriptGitRef'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'local_script_git_id' => 'setLocalScriptGitId',
        'email_skip_template' => 'setEmailSkipTemplate',
        'username' => 'setUsername',
        'email_subject' => 'setEmailSubject',
        'host' => 'setHost',
        'password' => 'setPassword',
        'password_hash' => 'setPasswordHash',
        'email_address' => 'setEmailAddress',
        'port' => 'setPort',
        'ssh_key' => 'setSshKey',
        'local_script_git_ref' => 'setLocalScriptGitRef'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'local_script_git_id' => 'getLocalScriptGitId',
        'email_skip_template' => 'getEmailSkipTemplate',
        'username' => 'getUsername',
        'email_subject' => 'getEmailSubject',
        'host' => 'getHost',
        'password' => 'getPassword',
        'password_hash' => 'getPasswordHash',
        'email_address' => 'getEmailAddress',
        'port' => 'getPort',
        'ssh_key' => 'getSshKey',
        'local_script_git_ref' => 'getLocalScriptGitRef'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['local_script_git_id'] = $data['local_script_git_id'] ?? null;
        $this->container['email_skip_template'] = $data['email_skip_template'] ?? null;
        $this->container['username'] = $data['username'] ?? null;
        $this->container['email_subject'] = $data['email_subject'] ?? null;
        $this->container['host'] = $data['host'] ?? null;
        $this->container['password'] = $data['password'] ?? null;
        $this->container['password_hash'] = $data['password_hash'] ?? null;
        $this->container['email_address'] = $data['email_address'] ?? null;
        $this->container['port'] = $data['port'] ?? null;
        $this->container['ssh_key'] = $data['ssh_key'] ?? null;
        $this->container['local_script_git_ref'] = $data['local_script_git_ref'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets local_script_git_id
     *
     * @return string|null
     */
    public function getLocalScriptGitId()
    {
        return $this->container['local_script_git_id'];
    }

    /**
     * Sets local_script_git_id
     *
     * @param string|null $local_script_git_id local_script_git_id
     *
     * @return self
     */
    public function setLocalScriptGitId($local_script_git_id)
    {
        $this->container['local_script_git_id'] = $local_script_git_id;

        return $this;
    }

    /**
     * Gets email_skip_template
     *
     * @return string|null
     */
    public function getEmailSkipTemplate()
    {
        return $this->container['email_skip_template'];
    }

    /**
     * Sets email_skip_template
     *
     * @param string|null $email_skip_template email_skip_template
     *
     * @return self
     */
    public function setEmailSkipTemplate($email_skip_template)
    {
        $this->container['email_skip_template'] = $email_skip_template;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string|null
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string|null $username username
     *
     * @return self
     */
    public function setUsername($username)
    {
        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets email_subject
     *
     * @return string|null
     */
    public function getEmailSubject()
    {
        return $this->container['email_subject'];
    }

    /**
     * Sets email_subject
     *
     * @param string|null $email_subject email_subject
     *
     * @return self
     */
    public function setEmailSubject($email_subject)
    {
        $this->container['email_subject'] = $email_subject;

        return $this;
    }

    /**
     * Gets host
     *
     * @return string|null
     */
    public function getHost()
    {
        return $this->container['host'];
    }

    /**
     * Sets host
     *
     * @param string|null $host host
     *
     * @return self
     */
    public function setHost($host)
    {
        $this->container['host'] = $host;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string|null
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string|null $password password
     *
     * @return self
     */
    public function setPassword($password)
    {
        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets password_hash
     *
     * @return string|null
     */
    public function getPasswordHash()
    {
        return $this->container['password_hash'];
    }

    /**
     * Sets password_hash
     *
     * @param string|null $password_hash password_hash
     *
     * @return self
     */
    public function setPasswordHash($password_hash)
    {
        $this->container['password_hash'] = $password_hash;

        return $this;
    }

    /**
     * Gets email_address
     *
     * @return string|null
     */
    public function getEmailAddress()
    {
        return $this->container['email_address'];
    }

    /**
     * Sets email_address
     *
     * @param string|null $email_address email_address
     *
     * @return self
     */
    public function setEmailAddress($email_address)
    {
        $this->container['email_address'] = $email_address;

        return $this;
    }

    /**
     * Gets port
     *
     * @return string|null
     */
    public function getPort()
    {
        return $this->container['port'];
    }

    /**
     * Sets port
     *
     * @param string|null $port port
     *
     * @return self
     */
    public function setPort($port)
    {
        $this->container['port'] = $port;

        return $this;
    }

    /**
     * Gets ssh_key
     *
     * @return string|null
     */
    public function getSshKey()
    {
        return $this->container['ssh_key'];
    }

    /**
     * Sets ssh_key
     *
     * @param string|null $ssh_key ssh_key
     *
     * @return self
     */
    public function setSshKey($ssh_key)
    {
        $this->container['ssh_key'] = $ssh_key;

        return $this;
    }

    /**
     * Gets local_script_git_ref
     *
     * @return string|null
     */
    public function getLocalScriptGitRef()
    {
        return $this->container['local_script_git_ref'];
    }

    /**
     * Sets local_script_git_ref
     *
     * @param string|null $local_script_git_ref local_script_git_ref
     *
     * @return self
     */
    public function setLocalScriptGitRef($local_script_git_ref)
    {
        $this->container['local_script_git_ref'] = $local_script_git_ref;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


