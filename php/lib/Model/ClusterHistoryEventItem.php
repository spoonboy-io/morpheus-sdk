<?php
/**
 * ClusterHistoryEventItem
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ClusterHistoryEventItem Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class ClusterHistoryEventItem implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'clusterHistoryEventItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'process_id' => 'int',
        'account_id' => 'int',
        'unique_id' => 'string',
        'process_type' => '\OpenAPI\Client\Model\ClusterContainersAvailableActions',
        'description' => 'string',
        'ref_type' => 'string',
        'ref_id' => 'int',
        'sub_type' => 'string',
        'sub_id' => 'string',
        'zone_id' => 'string',
        'integration_id' => 'string',
        'instance_id' => 'string',
        'container_id' => 'string',
        'server_id' => 'int',
        'container_name' => 'string',
        'display_name' => 'string',
        'status' => 'string',
        'reason' => 'string',
        'percent' => 'int',
        'status_eta' => 'int',
        'message' => 'string',
        'output' => 'string',
        'error' => 'string',
        'start_date' => '\DateTime',
        'end_date' => '\DateTime',
        'duration' => 'int',
        'date_created' => '\DateTime',
        'last_updated' => '\DateTime',
        'created_by' => '\OpenAPI\Client\Model\ClusterHistoryCreatedBy',
        'updated_by' => '\OpenAPI\Client\Model\ClusterHistoryCreatedBy'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'process_id' => 'int64',
        'account_id' => 'int64',
        'unique_id' => null,
        'process_type' => null,
        'description' => null,
        'ref_type' => null,
        'ref_id' => 'int64',
        'sub_type' => null,
        'sub_id' => null,
        'zone_id' => null,
        'integration_id' => null,
        'instance_id' => null,
        'container_id' => null,
        'server_id' => 'int64',
        'container_name' => null,
        'display_name' => null,
        'status' => null,
        'reason' => null,
        'percent' => 'int64',
        'status_eta' => 'int64',
        'message' => null,
        'output' => null,
        'error' => null,
        'start_date' => 'date-time',
        'end_date' => 'date-time',
        'duration' => 'int64',
        'date_created' => 'date-time',
        'last_updated' => 'date-time',
        'created_by' => null,
        'updated_by' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'process_id' => 'processId',
        'account_id' => 'accountId',
        'unique_id' => 'uniqueId',
        'process_type' => 'processType',
        'description' => 'description',
        'ref_type' => 'refType',
        'ref_id' => 'refId',
        'sub_type' => 'subType',
        'sub_id' => 'subId',
        'zone_id' => 'zoneId',
        'integration_id' => 'integrationId',
        'instance_id' => 'instanceId',
        'container_id' => 'containerId',
        'server_id' => 'serverId',
        'container_name' => 'containerName',
        'display_name' => 'displayName',
        'status' => 'status',
        'reason' => 'reason',
        'percent' => 'percent',
        'status_eta' => 'statusEta',
        'message' => 'message',
        'output' => 'output',
        'error' => 'error',
        'start_date' => 'startDate',
        'end_date' => 'endDate',
        'duration' => 'duration',
        'date_created' => 'dateCreated',
        'last_updated' => 'lastUpdated',
        'created_by' => 'createdBy',
        'updated_by' => 'updatedBy'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'process_id' => 'setProcessId',
        'account_id' => 'setAccountId',
        'unique_id' => 'setUniqueId',
        'process_type' => 'setProcessType',
        'description' => 'setDescription',
        'ref_type' => 'setRefType',
        'ref_id' => 'setRefId',
        'sub_type' => 'setSubType',
        'sub_id' => 'setSubId',
        'zone_id' => 'setZoneId',
        'integration_id' => 'setIntegrationId',
        'instance_id' => 'setInstanceId',
        'container_id' => 'setContainerId',
        'server_id' => 'setServerId',
        'container_name' => 'setContainerName',
        'display_name' => 'setDisplayName',
        'status' => 'setStatus',
        'reason' => 'setReason',
        'percent' => 'setPercent',
        'status_eta' => 'setStatusEta',
        'message' => 'setMessage',
        'output' => 'setOutput',
        'error' => 'setError',
        'start_date' => 'setStartDate',
        'end_date' => 'setEndDate',
        'duration' => 'setDuration',
        'date_created' => 'setDateCreated',
        'last_updated' => 'setLastUpdated',
        'created_by' => 'setCreatedBy',
        'updated_by' => 'setUpdatedBy'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'process_id' => 'getProcessId',
        'account_id' => 'getAccountId',
        'unique_id' => 'getUniqueId',
        'process_type' => 'getProcessType',
        'description' => 'getDescription',
        'ref_type' => 'getRefType',
        'ref_id' => 'getRefId',
        'sub_type' => 'getSubType',
        'sub_id' => 'getSubId',
        'zone_id' => 'getZoneId',
        'integration_id' => 'getIntegrationId',
        'instance_id' => 'getInstanceId',
        'container_id' => 'getContainerId',
        'server_id' => 'getServerId',
        'container_name' => 'getContainerName',
        'display_name' => 'getDisplayName',
        'status' => 'getStatus',
        'reason' => 'getReason',
        'percent' => 'getPercent',
        'status_eta' => 'getStatusEta',
        'message' => 'getMessage',
        'output' => 'getOutput',
        'error' => 'getError',
        'start_date' => 'getStartDate',
        'end_date' => 'getEndDate',
        'duration' => 'getDuration',
        'date_created' => 'getDateCreated',
        'last_updated' => 'getLastUpdated',
        'created_by' => 'getCreatedBy',
        'updated_by' => 'getUpdatedBy'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['process_id'] = $data['process_id'] ?? null;
        $this->container['account_id'] = $data['account_id'] ?? null;
        $this->container['unique_id'] = $data['unique_id'] ?? null;
        $this->container['process_type'] = $data['process_type'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['ref_type'] = $data['ref_type'] ?? null;
        $this->container['ref_id'] = $data['ref_id'] ?? null;
        $this->container['sub_type'] = $data['sub_type'] ?? null;
        $this->container['sub_id'] = $data['sub_id'] ?? null;
        $this->container['zone_id'] = $data['zone_id'] ?? null;
        $this->container['integration_id'] = $data['integration_id'] ?? null;
        $this->container['instance_id'] = $data['instance_id'] ?? null;
        $this->container['container_id'] = $data['container_id'] ?? null;
        $this->container['server_id'] = $data['server_id'] ?? null;
        $this->container['container_name'] = $data['container_name'] ?? null;
        $this->container['display_name'] = $data['display_name'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['reason'] = $data['reason'] ?? null;
        $this->container['percent'] = $data['percent'] ?? null;
        $this->container['status_eta'] = $data['status_eta'] ?? null;
        $this->container['message'] = $data['message'] ?? null;
        $this->container['output'] = $data['output'] ?? null;
        $this->container['error'] = $data['error'] ?? null;
        $this->container['start_date'] = $data['start_date'] ?? null;
        $this->container['end_date'] = $data['end_date'] ?? null;
        $this->container['duration'] = $data['duration'] ?? null;
        $this->container['date_created'] = $data['date_created'] ?? null;
        $this->container['last_updated'] = $data['last_updated'] ?? null;
        $this->container['created_by'] = $data['created_by'] ?? null;
        $this->container['updated_by'] = $data['updated_by'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets process_id
     *
     * @return int|null
     */
    public function getProcessId()
    {
        return $this->container['process_id'];
    }

    /**
     * Sets process_id
     *
     * @param int|null $process_id process_id
     *
     * @return self
     */
    public function setProcessId($process_id)
    {
        $this->container['process_id'] = $process_id;

        return $this;
    }

    /**
     * Gets account_id
     *
     * @return int|null
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param int|null $account_id account_id
     *
     * @return self
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets unique_id
     *
     * @return string|null
     */
    public function getUniqueId()
    {
        return $this->container['unique_id'];
    }

    /**
     * Sets unique_id
     *
     * @param string|null $unique_id unique_id
     *
     * @return self
     */
    public function setUniqueId($unique_id)
    {
        $this->container['unique_id'] = $unique_id;

        return $this;
    }

    /**
     * Gets process_type
     *
     * @return \OpenAPI\Client\Model\ClusterContainersAvailableActions|null
     */
    public function getProcessType()
    {
        return $this->container['process_type'];
    }

    /**
     * Sets process_type
     *
     * @param \OpenAPI\Client\Model\ClusterContainersAvailableActions|null $process_type process_type
     *
     * @return self
     */
    public function setProcessType($process_type)
    {
        $this->container['process_type'] = $process_type;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets ref_type
     *
     * @return string|null
     */
    public function getRefType()
    {
        return $this->container['ref_type'];
    }

    /**
     * Sets ref_type
     *
     * @param string|null $ref_type ref_type
     *
     * @return self
     */
    public function setRefType($ref_type)
    {
        $this->container['ref_type'] = $ref_type;

        return $this;
    }

    /**
     * Gets ref_id
     *
     * @return int|null
     */
    public function getRefId()
    {
        return $this->container['ref_id'];
    }

    /**
     * Sets ref_id
     *
     * @param int|null $ref_id ref_id
     *
     * @return self
     */
    public function setRefId($ref_id)
    {
        $this->container['ref_id'] = $ref_id;

        return $this;
    }

    /**
     * Gets sub_type
     *
     * @return string|null
     */
    public function getSubType()
    {
        return $this->container['sub_type'];
    }

    /**
     * Sets sub_type
     *
     * @param string|null $sub_type sub_type
     *
     * @return self
     */
    public function setSubType($sub_type)
    {
        $this->container['sub_type'] = $sub_type;

        return $this;
    }

    /**
     * Gets sub_id
     *
     * @return string|null
     */
    public function getSubId()
    {
        return $this->container['sub_id'];
    }

    /**
     * Sets sub_id
     *
     * @param string|null $sub_id sub_id
     *
     * @return self
     */
    public function setSubId($sub_id)
    {
        $this->container['sub_id'] = $sub_id;

        return $this;
    }

    /**
     * Gets zone_id
     *
     * @return string|null
     */
    public function getZoneId()
    {
        return $this->container['zone_id'];
    }

    /**
     * Sets zone_id
     *
     * @param string|null $zone_id zone_id
     *
     * @return self
     */
    public function setZoneId($zone_id)
    {
        $this->container['zone_id'] = $zone_id;

        return $this;
    }

    /**
     * Gets integration_id
     *
     * @return string|null
     */
    public function getIntegrationId()
    {
        return $this->container['integration_id'];
    }

    /**
     * Sets integration_id
     *
     * @param string|null $integration_id integration_id
     *
     * @return self
     */
    public function setIntegrationId($integration_id)
    {
        $this->container['integration_id'] = $integration_id;

        return $this;
    }

    /**
     * Gets instance_id
     *
     * @return string|null
     */
    public function getInstanceId()
    {
        return $this->container['instance_id'];
    }

    /**
     * Sets instance_id
     *
     * @param string|null $instance_id instance_id
     *
     * @return self
     */
    public function setInstanceId($instance_id)
    {
        $this->container['instance_id'] = $instance_id;

        return $this;
    }

    /**
     * Gets container_id
     *
     * @return string|null
     */
    public function getContainerId()
    {
        return $this->container['container_id'];
    }

    /**
     * Sets container_id
     *
     * @param string|null $container_id container_id
     *
     * @return self
     */
    public function setContainerId($container_id)
    {
        $this->container['container_id'] = $container_id;

        return $this;
    }

    /**
     * Gets server_id
     *
     * @return int|null
     */
    public function getServerId()
    {
        return $this->container['server_id'];
    }

    /**
     * Sets server_id
     *
     * @param int|null $server_id server_id
     *
     * @return self
     */
    public function setServerId($server_id)
    {
        $this->container['server_id'] = $server_id;

        return $this;
    }

    /**
     * Gets container_name
     *
     * @return string|null
     */
    public function getContainerName()
    {
        return $this->container['container_name'];
    }

    /**
     * Sets container_name
     *
     * @param string|null $container_name container_name
     *
     * @return self
     */
    public function setContainerName($container_name)
    {
        $this->container['container_name'] = $container_name;

        return $this;
    }

    /**
     * Gets display_name
     *
     * @return string|null
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string|null $display_name display_name
     *
     * @return self
     */
    public function setDisplayName($display_name)
    {
        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets reason
     *
     * @return string|null
     */
    public function getReason()
    {
        return $this->container['reason'];
    }

    /**
     * Sets reason
     *
     * @param string|null $reason reason
     *
     * @return self
     */
    public function setReason($reason)
    {
        $this->container['reason'] = $reason;

        return $this;
    }

    /**
     * Gets percent
     *
     * @return int|null
     */
    public function getPercent()
    {
        return $this->container['percent'];
    }

    /**
     * Sets percent
     *
     * @param int|null $percent percent
     *
     * @return self
     */
    public function setPercent($percent)
    {
        $this->container['percent'] = $percent;

        return $this;
    }

    /**
     * Gets status_eta
     *
     * @return int|null
     */
    public function getStatusEta()
    {
        return $this->container['status_eta'];
    }

    /**
     * Sets status_eta
     *
     * @param int|null $status_eta status_eta
     *
     * @return self
     */
    public function setStatusEta($status_eta)
    {
        $this->container['status_eta'] = $status_eta;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string|null
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string|null $message message
     *
     * @return self
     */
    public function setMessage($message)
    {
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets output
     *
     * @return string|null
     */
    public function getOutput()
    {
        return $this->container['output'];
    }

    /**
     * Sets output
     *
     * @param string|null $output output
     *
     * @return self
     */
    public function setOutput($output)
    {
        $this->container['output'] = $output;

        return $this;
    }

    /**
     * Gets error
     *
     * @return string|null
     */
    public function getError()
    {
        return $this->container['error'];
    }

    /**
     * Sets error
     *
     * @param string|null $error error
     *
     * @return self
     */
    public function setError($error)
    {
        $this->container['error'] = $error;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return \DateTime|null
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime|null $start_date start_date
     *
     * @return self
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime|null
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime|null $end_date end_date
     *
     * @return self
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets duration
     *
     * @return int|null
     */
    public function getDuration()
    {
        return $this->container['duration'];
    }

    /**
     * Sets duration
     *
     * @param int|null $duration duration
     *
     * @return self
     */
    public function setDuration($duration)
    {
        $this->container['duration'] = $duration;

        return $this;
    }

    /**
     * Gets date_created
     *
     * @return \DateTime|null
     */
    public function getDateCreated()
    {
        return $this->container['date_created'];
    }

    /**
     * Sets date_created
     *
     * @param \DateTime|null $date_created date_created
     *
     * @return self
     */
    public function setDateCreated($date_created)
    {
        $this->container['date_created'] = $date_created;

        return $this;
    }

    /**
     * Gets last_updated
     *
     * @return \DateTime|null
     */
    public function getLastUpdated()
    {
        return $this->container['last_updated'];
    }

    /**
     * Sets last_updated
     *
     * @param \DateTime|null $last_updated last_updated
     *
     * @return self
     */
    public function setLastUpdated($last_updated)
    {
        $this->container['last_updated'] = $last_updated;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return \OpenAPI\Client\Model\ClusterHistoryCreatedBy|null
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param \OpenAPI\Client\Model\ClusterHistoryCreatedBy|null $created_by created_by
     *
     * @return self
     */
    public function setCreatedBy($created_by)
    {
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets updated_by
     *
     * @return \OpenAPI\Client\Model\ClusterHistoryCreatedBy|null
     */
    public function getUpdatedBy()
    {
        return $this->container['updated_by'];
    }

    /**
     * Sets updated_by
     *
     * @param \OpenAPI\Client\Model\ClusterHistoryCreatedBy|null $updated_by updated_by
     *
     * @return self
     */
    public function setUpdatedBy($updated_by)
    {
        $this->container['updated_by'] = $updated_by;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


