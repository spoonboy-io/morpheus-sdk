<?php
/**
 * StorageBucket
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * StorageBucket Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class StorageBucket implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'storageBucket';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'name' => 'string',
        'active' => 'bool',
        'account_id' => 'int',
        'provider_type' => 'string',
        'config' => '\OpenAPI\Client\Model\StorageBucketConfig',
        'bucket_name' => 'string',
        'read_only' => 'bool',
        'default_backup_target' => 'bool',
        'default_deployment_target' => 'bool',
        'default_virtual_image_target' => 'bool',
        'copy_to_store' => 'bool',
        'retention_policy_type' => 'string',
        'retention_policy_days' => 'string',
        'retention_provider' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'name' => null,
        'active' => null,
        'account_id' => 'int64',
        'provider_type' => null,
        'config' => null,
        'bucket_name' => null,
        'read_only' => null,
        'default_backup_target' => null,
        'default_deployment_target' => null,
        'default_virtual_image_target' => null,
        'copy_to_store' => null,
        'retention_policy_type' => null,
        'retention_policy_days' => null,
        'retention_provider' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'active' => 'active',
        'account_id' => 'accountId',
        'provider_type' => 'providerType',
        'config' => 'config',
        'bucket_name' => 'bucketName',
        'read_only' => 'readOnly',
        'default_backup_target' => 'defaultBackupTarget',
        'default_deployment_target' => 'defaultDeploymentTarget',
        'default_virtual_image_target' => 'defaultVirtualImageTarget',
        'copy_to_store' => 'copyToStore',
        'retention_policy_type' => 'retentionPolicyType',
        'retention_policy_days' => 'retentionPolicyDays',
        'retention_provider' => 'retentionProvider'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'active' => 'setActive',
        'account_id' => 'setAccountId',
        'provider_type' => 'setProviderType',
        'config' => 'setConfig',
        'bucket_name' => 'setBucketName',
        'read_only' => 'setReadOnly',
        'default_backup_target' => 'setDefaultBackupTarget',
        'default_deployment_target' => 'setDefaultDeploymentTarget',
        'default_virtual_image_target' => 'setDefaultVirtualImageTarget',
        'copy_to_store' => 'setCopyToStore',
        'retention_policy_type' => 'setRetentionPolicyType',
        'retention_policy_days' => 'setRetentionPolicyDays',
        'retention_provider' => 'setRetentionProvider'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'active' => 'getActive',
        'account_id' => 'getAccountId',
        'provider_type' => 'getProviderType',
        'config' => 'getConfig',
        'bucket_name' => 'getBucketName',
        'read_only' => 'getReadOnly',
        'default_backup_target' => 'getDefaultBackupTarget',
        'default_deployment_target' => 'getDefaultDeploymentTarget',
        'default_virtual_image_target' => 'getDefaultVirtualImageTarget',
        'copy_to_store' => 'getCopyToStore',
        'retention_policy_type' => 'getRetentionPolicyType',
        'retention_policy_days' => 'getRetentionPolicyDays',
        'retention_provider' => 'getRetentionProvider'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['active'] = $data['active'] ?? null;
        $this->container['account_id'] = $data['account_id'] ?? null;
        $this->container['provider_type'] = $data['provider_type'] ?? null;
        $this->container['config'] = $data['config'] ?? null;
        $this->container['bucket_name'] = $data['bucket_name'] ?? null;
        $this->container['read_only'] = $data['read_only'] ?? null;
        $this->container['default_backup_target'] = $data['default_backup_target'] ?? null;
        $this->container['default_deployment_target'] = $data['default_deployment_target'] ?? null;
        $this->container['default_virtual_image_target'] = $data['default_virtual_image_target'] ?? null;
        $this->container['copy_to_store'] = $data['copy_to_store'] ?? null;
        $this->container['retention_policy_type'] = $data['retention_policy_type'] ?? null;
        $this->container['retention_policy_days'] = $data['retention_policy_days'] ?? null;
        $this->container['retention_provider'] = $data['retention_provider'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool|null
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool|null $active active
     *
     * @return self
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets account_id
     *
     * @return int|null
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param int|null $account_id account_id
     *
     * @return self
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets provider_type
     *
     * @return string|null
     */
    public function getProviderType()
    {
        return $this->container['provider_type'];
    }

    /**
     * Sets provider_type
     *
     * @param string|null $provider_type provider_type
     *
     * @return self
     */
    public function setProviderType($provider_type)
    {
        $this->container['provider_type'] = $provider_type;

        return $this;
    }

    /**
     * Gets config
     *
     * @return \OpenAPI\Client\Model\StorageBucketConfig|null
     */
    public function getConfig()
    {
        return $this->container['config'];
    }

    /**
     * Sets config
     *
     * @param \OpenAPI\Client\Model\StorageBucketConfig|null $config config
     *
     * @return self
     */
    public function setConfig($config)
    {
        $this->container['config'] = $config;

        return $this;
    }

    /**
     * Gets bucket_name
     *
     * @return string|null
     */
    public function getBucketName()
    {
        return $this->container['bucket_name'];
    }

    /**
     * Sets bucket_name
     *
     * @param string|null $bucket_name bucket_name
     *
     * @return self
     */
    public function setBucketName($bucket_name)
    {
        $this->container['bucket_name'] = $bucket_name;

        return $this;
    }

    /**
     * Gets read_only
     *
     * @return bool|null
     */
    public function getReadOnly()
    {
        return $this->container['read_only'];
    }

    /**
     * Sets read_only
     *
     * @param bool|null $read_only read_only
     *
     * @return self
     */
    public function setReadOnly($read_only)
    {
        $this->container['read_only'] = $read_only;

        return $this;
    }

    /**
     * Gets default_backup_target
     *
     * @return bool|null
     */
    public function getDefaultBackupTarget()
    {
        return $this->container['default_backup_target'];
    }

    /**
     * Sets default_backup_target
     *
     * @param bool|null $default_backup_target default_backup_target
     *
     * @return self
     */
    public function setDefaultBackupTarget($default_backup_target)
    {
        $this->container['default_backup_target'] = $default_backup_target;

        return $this;
    }

    /**
     * Gets default_deployment_target
     *
     * @return bool|null
     */
    public function getDefaultDeploymentTarget()
    {
        return $this->container['default_deployment_target'];
    }

    /**
     * Sets default_deployment_target
     *
     * @param bool|null $default_deployment_target default_deployment_target
     *
     * @return self
     */
    public function setDefaultDeploymentTarget($default_deployment_target)
    {
        $this->container['default_deployment_target'] = $default_deployment_target;

        return $this;
    }

    /**
     * Gets default_virtual_image_target
     *
     * @return bool|null
     */
    public function getDefaultVirtualImageTarget()
    {
        return $this->container['default_virtual_image_target'];
    }

    /**
     * Sets default_virtual_image_target
     *
     * @param bool|null $default_virtual_image_target default_virtual_image_target
     *
     * @return self
     */
    public function setDefaultVirtualImageTarget($default_virtual_image_target)
    {
        $this->container['default_virtual_image_target'] = $default_virtual_image_target;

        return $this;
    }

    /**
     * Gets copy_to_store
     *
     * @return bool|null
     */
    public function getCopyToStore()
    {
        return $this->container['copy_to_store'];
    }

    /**
     * Sets copy_to_store
     *
     * @param bool|null $copy_to_store copy_to_store
     *
     * @return self
     */
    public function setCopyToStore($copy_to_store)
    {
        $this->container['copy_to_store'] = $copy_to_store;

        return $this;
    }

    /**
     * Gets retention_policy_type
     *
     * @return string|null
     */
    public function getRetentionPolicyType()
    {
        return $this->container['retention_policy_type'];
    }

    /**
     * Sets retention_policy_type
     *
     * @param string|null $retention_policy_type retention_policy_type
     *
     * @return self
     */
    public function setRetentionPolicyType($retention_policy_type)
    {
        $this->container['retention_policy_type'] = $retention_policy_type;

        return $this;
    }

    /**
     * Gets retention_policy_days
     *
     * @return string|null
     */
    public function getRetentionPolicyDays()
    {
        return $this->container['retention_policy_days'];
    }

    /**
     * Sets retention_policy_days
     *
     * @param string|null $retention_policy_days retention_policy_days
     *
     * @return self
     */
    public function setRetentionPolicyDays($retention_policy_days)
    {
        $this->container['retention_policy_days'] = $retention_policy_days;

        return $this;
    }

    /**
     * Gets retention_provider
     *
     * @return string|null
     */
    public function getRetentionProvider()
    {
        return $this->container['retention_provider'];
    }

    /**
     * Sets retention_provider
     *
     * @param string|null $retention_provider retention_provider
     *
     * @return self
     */
    public function setRetentionProvider($retention_provider)
    {
        $this->container['retention_provider'] = $retention_provider;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


