<?php
/**
 * Backup
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Backup Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class Backup implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'backup';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'name' => 'string',
        'location_type' => 'string',
        'instance' => '\OpenAPI\Client\Model\BackupInstance',
        'container_id' => 'int',
        'job' => '\OpenAPI\Client\Model\BackupJob',
        'schedule' => '\OpenAPI\Client\Model\BackupSchedule',
        'retention_count' => 'int',
        'backup_type' => '\OpenAPI\Client\Model\BackupBackupType',
        'storage_provider' => '\OpenAPI\Client\Model\BackupStorageProvider',
        'backup_provider' => '\OpenAPI\Client\Model\BackupBackupProvider',
        'backup_respository' => '\OpenAPI\Client\Model\BackupBackupRespository',
        'cron_expression' => 'string',
        'next_fire' => '\DateTime',
        'last_status' => 'string',
        'last_result' => '\OpenAPI\Client\Model\BackupLastResult',
        'stats' => '\OpenAPI\Client\Model\BackupStats',
        'enabled' => 'bool',
        'date_created' => '\DateTime',
        'last_updated' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'name' => null,
        'location_type' => null,
        'instance' => null,
        'container_id' => 'int64',
        'job' => null,
        'schedule' => null,
        'retention_count' => 'int64',
        'backup_type' => null,
        'storage_provider' => null,
        'backup_provider' => null,
        'backup_respository' => null,
        'cron_expression' => null,
        'next_fire' => 'date-time',
        'last_status' => null,
        'last_result' => null,
        'stats' => null,
        'enabled' => null,
        'date_created' => 'date-time',
        'last_updated' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'location_type' => 'locationType',
        'instance' => 'instance',
        'container_id' => 'containerId',
        'job' => 'job',
        'schedule' => 'schedule',
        'retention_count' => 'retentionCount',
        'backup_type' => 'backupType',
        'storage_provider' => 'storageProvider',
        'backup_provider' => 'backupProvider',
        'backup_respository' => 'backupRespository',
        'cron_expression' => 'cronExpression',
        'next_fire' => 'nextFire',
        'last_status' => 'lastStatus',
        'last_result' => 'lastResult',
        'stats' => 'stats',
        'enabled' => 'enabled',
        'date_created' => 'dateCreated',
        'last_updated' => 'lastUpdated'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'location_type' => 'setLocationType',
        'instance' => 'setInstance',
        'container_id' => 'setContainerId',
        'job' => 'setJob',
        'schedule' => 'setSchedule',
        'retention_count' => 'setRetentionCount',
        'backup_type' => 'setBackupType',
        'storage_provider' => 'setStorageProvider',
        'backup_provider' => 'setBackupProvider',
        'backup_respository' => 'setBackupRespository',
        'cron_expression' => 'setCronExpression',
        'next_fire' => 'setNextFire',
        'last_status' => 'setLastStatus',
        'last_result' => 'setLastResult',
        'stats' => 'setStats',
        'enabled' => 'setEnabled',
        'date_created' => 'setDateCreated',
        'last_updated' => 'setLastUpdated'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'location_type' => 'getLocationType',
        'instance' => 'getInstance',
        'container_id' => 'getContainerId',
        'job' => 'getJob',
        'schedule' => 'getSchedule',
        'retention_count' => 'getRetentionCount',
        'backup_type' => 'getBackupType',
        'storage_provider' => 'getStorageProvider',
        'backup_provider' => 'getBackupProvider',
        'backup_respository' => 'getBackupRespository',
        'cron_expression' => 'getCronExpression',
        'next_fire' => 'getNextFire',
        'last_status' => 'getLastStatus',
        'last_result' => 'getLastResult',
        'stats' => 'getStats',
        'enabled' => 'getEnabled',
        'date_created' => 'getDateCreated',
        'last_updated' => 'getLastUpdated'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['location_type'] = $data['location_type'] ?? null;
        $this->container['instance'] = $data['instance'] ?? null;
        $this->container['container_id'] = $data['container_id'] ?? null;
        $this->container['job'] = $data['job'] ?? null;
        $this->container['schedule'] = $data['schedule'] ?? null;
        $this->container['retention_count'] = $data['retention_count'] ?? null;
        $this->container['backup_type'] = $data['backup_type'] ?? null;
        $this->container['storage_provider'] = $data['storage_provider'] ?? null;
        $this->container['backup_provider'] = $data['backup_provider'] ?? null;
        $this->container['backup_respository'] = $data['backup_respository'] ?? null;
        $this->container['cron_expression'] = $data['cron_expression'] ?? null;
        $this->container['next_fire'] = $data['next_fire'] ?? null;
        $this->container['last_status'] = $data['last_status'] ?? null;
        $this->container['last_result'] = $data['last_result'] ?? null;
        $this->container['stats'] = $data['stats'] ?? null;
        $this->container['enabled'] = $data['enabled'] ?? null;
        $this->container['date_created'] = $data['date_created'] ?? null;
        $this->container['last_updated'] = $data['last_updated'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id Backup ID
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets location_type
     *
     * @return string|null
     */
    public function getLocationType()
    {
        return $this->container['location_type'];
    }

    /**
     * Sets location_type
     *
     * @param string|null $location_type Source Type (instance, server, storage)
     *
     * @return self
     */
    public function setLocationType($location_type)
    {
        $this->container['location_type'] = $location_type;

        return $this;
    }

    /**
     * Gets instance
     *
     * @return \OpenAPI\Client\Model\BackupInstance|null
     */
    public function getInstance()
    {
        return $this->container['instance'];
    }

    /**
     * Sets instance
     *
     * @param \OpenAPI\Client\Model\BackupInstance|null $instance instance
     *
     * @return self
     */
    public function setInstance($instance)
    {
        $this->container['instance'] = $instance;

        return $this;
    }

    /**
     * Gets container_id
     *
     * @return int|null
     */
    public function getContainerId()
    {
        return $this->container['container_id'];
    }

    /**
     * Sets container_id
     *
     * @param int|null $container_id container_id
     *
     * @return self
     */
    public function setContainerId($container_id)
    {
        $this->container['container_id'] = $container_id;

        return $this;
    }

    /**
     * Gets job
     *
     * @return \OpenAPI\Client\Model\BackupJob|null
     */
    public function getJob()
    {
        return $this->container['job'];
    }

    /**
     * Sets job
     *
     * @param \OpenAPI\Client\Model\BackupJob|null $job job
     *
     * @return self
     */
    public function setJob($job)
    {
        $this->container['job'] = $job;

        return $this;
    }

    /**
     * Gets schedule
     *
     * @return \OpenAPI\Client\Model\BackupSchedule|null
     */
    public function getSchedule()
    {
        return $this->container['schedule'];
    }

    /**
     * Sets schedule
     *
     * @param \OpenAPI\Client\Model\BackupSchedule|null $schedule schedule
     *
     * @return self
     */
    public function setSchedule($schedule)
    {
        $this->container['schedule'] = $schedule;

        return $this;
    }

    /**
     * Gets retention_count
     *
     * @return int|null
     */
    public function getRetentionCount()
    {
        return $this->container['retention_count'];
    }

    /**
     * Sets retention_count
     *
     * @param int|null $retention_count retention_count
     *
     * @return self
     */
    public function setRetentionCount($retention_count)
    {
        $this->container['retention_count'] = $retention_count;

        return $this;
    }

    /**
     * Gets backup_type
     *
     * @return \OpenAPI\Client\Model\BackupBackupType|null
     */
    public function getBackupType()
    {
        return $this->container['backup_type'];
    }

    /**
     * Sets backup_type
     *
     * @param \OpenAPI\Client\Model\BackupBackupType|null $backup_type backup_type
     *
     * @return self
     */
    public function setBackupType($backup_type)
    {
        $this->container['backup_type'] = $backup_type;

        return $this;
    }

    /**
     * Gets storage_provider
     *
     * @return \OpenAPI\Client\Model\BackupStorageProvider|null
     */
    public function getStorageProvider()
    {
        return $this->container['storage_provider'];
    }

    /**
     * Sets storage_provider
     *
     * @param \OpenAPI\Client\Model\BackupStorageProvider|null $storage_provider storage_provider
     *
     * @return self
     */
    public function setStorageProvider($storage_provider)
    {
        $this->container['storage_provider'] = $storage_provider;

        return $this;
    }

    /**
     * Gets backup_provider
     *
     * @return \OpenAPI\Client\Model\BackupBackupProvider|null
     */
    public function getBackupProvider()
    {
        return $this->container['backup_provider'];
    }

    /**
     * Sets backup_provider
     *
     * @param \OpenAPI\Client\Model\BackupBackupProvider|null $backup_provider backup_provider
     *
     * @return self
     */
    public function setBackupProvider($backup_provider)
    {
        $this->container['backup_provider'] = $backup_provider;

        return $this;
    }

    /**
     * Gets backup_respository
     *
     * @return \OpenAPI\Client\Model\BackupBackupRespository|null
     */
    public function getBackupRespository()
    {
        return $this->container['backup_respository'];
    }

    /**
     * Sets backup_respository
     *
     * @param \OpenAPI\Client\Model\BackupBackupRespository|null $backup_respository backup_respository
     *
     * @return self
     */
    public function setBackupRespository($backup_respository)
    {
        $this->container['backup_respository'] = $backup_respository;

        return $this;
    }

    /**
     * Gets cron_expression
     *
     * @return string|null
     */
    public function getCronExpression()
    {
        return $this->container['cron_expression'];
    }

    /**
     * Sets cron_expression
     *
     * @param string|null $cron_expression Cron Expression
     *
     * @return self
     */
    public function setCronExpression($cron_expression)
    {
        $this->container['cron_expression'] = $cron_expression;

        return $this;
    }

    /**
     * Gets next_fire
     *
     * @return \DateTime|null
     */
    public function getNextFire()
    {
        return $this->container['next_fire'];
    }

    /**
     * Sets next_fire
     *
     * @param \DateTime|null $next_fire Next Fire
     *
     * @return self
     */
    public function setNextFire($next_fire)
    {
        $this->container['next_fire'] = $next_fire;

        return $this;
    }

    /**
     * Gets last_status
     *
     * @return string|null
     */
    public function getLastStatus()
    {
        return $this->container['last_status'];
    }

    /**
     * Sets last_status
     *
     * @param string|null $last_status Last Status
     *
     * @return self
     */
    public function setLastStatus($last_status)
    {
        $this->container['last_status'] = $last_status;

        return $this;
    }

    /**
     * Gets last_result
     *
     * @return \OpenAPI\Client\Model\BackupLastResult|null
     */
    public function getLastResult()
    {
        return $this->container['last_result'];
    }

    /**
     * Sets last_result
     *
     * @param \OpenAPI\Client\Model\BackupLastResult|null $last_result last_result
     *
     * @return self
     */
    public function setLastResult($last_result)
    {
        $this->container['last_result'] = $last_result;

        return $this;
    }

    /**
     * Gets stats
     *
     * @return \OpenAPI\Client\Model\BackupStats|null
     */
    public function getStats()
    {
        return $this->container['stats'];
    }

    /**
     * Sets stats
     *
     * @param \OpenAPI\Client\Model\BackupStats|null $stats stats
     *
     * @return self
     */
    public function setStats($stats)
    {
        $this->container['stats'] = $stats;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool|null
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool|null $enabled Enabled
     *
     * @return self
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets date_created
     *
     * @return \DateTime|null
     */
    public function getDateCreated()
    {
        return $this->container['date_created'];
    }

    /**
     * Sets date_created
     *
     * @param \DateTime|null $date_created Date Created
     *
     * @return self
     */
    public function setDateCreated($date_created)
    {
        $this->container['date_created'] = $date_created;

        return $this;
    }

    /**
     * Gets last_updated
     *
     * @return \DateTime|null
     */
    public function getLastUpdated()
    {
        return $this->container['last_updated'];
    }

    /**
     * Sets last_updated
     *
     * @param \DateTime|null $last_updated Last Updated
     *
     * @return self
     */
    public function setLastUpdated($last_updated)
    {
        $this->container['last_updated'] = $last_updated;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


