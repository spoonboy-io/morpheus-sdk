<?php
/**
 * InstanceServicePlanStorageType
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * InstanceServicePlanStorageType Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InstanceServicePlanStorageType implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'instanceServicePlanStorageType';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'editable' => 'bool',
        'option_types' => 'object[]',
        'display_order' => 'int',
        'code' => 'string',
        'volume_type' => 'string',
        'min_storage' => 'string',
        'deletable' => 'bool',
        'default_type' => 'bool',
        'create_datastore' => 'string',
        'resizable' => 'bool',
        'storage_type' => 'string',
        'allow_search' => 'bool',
        'volume_option_source' => 'string',
        'display_name' => 'string',
        'min_iops' => 'string',
        'max_iops' => 'string',
        'has_datastore' => 'bool',
        'custom_size' => 'bool',
        'auto_delete' => 'bool',
        'name' => 'string',
        'configurable_iops' => 'bool',
        'custom_label' => 'bool',
        'enabled' => 'bool',
        'description' => 'string',
        'volume_category' => 'string',
        'external_id' => 'string',
        'max_storage' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int32',
        'editable' => null,
        'option_types' => null,
        'display_order' => 'int32',
        'code' => null,
        'volume_type' => null,
        'min_storage' => null,
        'deletable' => null,
        'default_type' => null,
        'create_datastore' => null,
        'resizable' => null,
        'storage_type' => null,
        'allow_search' => null,
        'volume_option_source' => null,
        'display_name' => null,
        'min_iops' => null,
        'max_iops' => null,
        'has_datastore' => null,
        'custom_size' => null,
        'auto_delete' => null,
        'name' => null,
        'configurable_iops' => null,
        'custom_label' => null,
        'enabled' => null,
        'description' => null,
        'volume_category' => null,
        'external_id' => null,
        'max_storage' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'editable' => 'editable',
        'option_types' => 'optionTypes',
        'display_order' => 'displayOrder',
        'code' => 'code',
        'volume_type' => 'volumeType',
        'min_storage' => 'minStorage',
        'deletable' => 'deletable',
        'default_type' => 'defaultType',
        'create_datastore' => 'createDatastore',
        'resizable' => 'resizable',
        'storage_type' => 'storageType',
        'allow_search' => 'allowSearch',
        'volume_option_source' => 'volumeOptionSource',
        'display_name' => 'displayName',
        'min_iops' => 'minIOPS',
        'max_iops' => 'maxIOPS',
        'has_datastore' => 'hasDatastore',
        'custom_size' => 'customSize',
        'auto_delete' => 'autoDelete',
        'name' => 'name',
        'configurable_iops' => 'configurableIOPS',
        'custom_label' => 'customLabel',
        'enabled' => 'enabled',
        'description' => 'description',
        'volume_category' => 'volumeCategory',
        'external_id' => 'externalId',
        'max_storage' => 'maxStorage'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'editable' => 'setEditable',
        'option_types' => 'setOptionTypes',
        'display_order' => 'setDisplayOrder',
        'code' => 'setCode',
        'volume_type' => 'setVolumeType',
        'min_storage' => 'setMinStorage',
        'deletable' => 'setDeletable',
        'default_type' => 'setDefaultType',
        'create_datastore' => 'setCreateDatastore',
        'resizable' => 'setResizable',
        'storage_type' => 'setStorageType',
        'allow_search' => 'setAllowSearch',
        'volume_option_source' => 'setVolumeOptionSource',
        'display_name' => 'setDisplayName',
        'min_iops' => 'setMinIops',
        'max_iops' => 'setMaxIops',
        'has_datastore' => 'setHasDatastore',
        'custom_size' => 'setCustomSize',
        'auto_delete' => 'setAutoDelete',
        'name' => 'setName',
        'configurable_iops' => 'setConfigurableIops',
        'custom_label' => 'setCustomLabel',
        'enabled' => 'setEnabled',
        'description' => 'setDescription',
        'volume_category' => 'setVolumeCategory',
        'external_id' => 'setExternalId',
        'max_storage' => 'setMaxStorage'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'editable' => 'getEditable',
        'option_types' => 'getOptionTypes',
        'display_order' => 'getDisplayOrder',
        'code' => 'getCode',
        'volume_type' => 'getVolumeType',
        'min_storage' => 'getMinStorage',
        'deletable' => 'getDeletable',
        'default_type' => 'getDefaultType',
        'create_datastore' => 'getCreateDatastore',
        'resizable' => 'getResizable',
        'storage_type' => 'getStorageType',
        'allow_search' => 'getAllowSearch',
        'volume_option_source' => 'getVolumeOptionSource',
        'display_name' => 'getDisplayName',
        'min_iops' => 'getMinIops',
        'max_iops' => 'getMaxIops',
        'has_datastore' => 'getHasDatastore',
        'custom_size' => 'getCustomSize',
        'auto_delete' => 'getAutoDelete',
        'name' => 'getName',
        'configurable_iops' => 'getConfigurableIops',
        'custom_label' => 'getCustomLabel',
        'enabled' => 'getEnabled',
        'description' => 'getDescription',
        'volume_category' => 'getVolumeCategory',
        'external_id' => 'getExternalId',
        'max_storage' => 'getMaxStorage'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['editable'] = $data['editable'] ?? null;
        $this->container['option_types'] = $data['option_types'] ?? null;
        $this->container['display_order'] = $data['display_order'] ?? null;
        $this->container['code'] = $data['code'] ?? null;
        $this->container['volume_type'] = $data['volume_type'] ?? null;
        $this->container['min_storage'] = $data['min_storage'] ?? null;
        $this->container['deletable'] = $data['deletable'] ?? null;
        $this->container['default_type'] = $data['default_type'] ?? null;
        $this->container['create_datastore'] = $data['create_datastore'] ?? null;
        $this->container['resizable'] = $data['resizable'] ?? null;
        $this->container['storage_type'] = $data['storage_type'] ?? null;
        $this->container['allow_search'] = $data['allow_search'] ?? null;
        $this->container['volume_option_source'] = $data['volume_option_source'] ?? null;
        $this->container['display_name'] = $data['display_name'] ?? null;
        $this->container['min_iops'] = $data['min_iops'] ?? null;
        $this->container['max_iops'] = $data['max_iops'] ?? null;
        $this->container['has_datastore'] = $data['has_datastore'] ?? null;
        $this->container['custom_size'] = $data['custom_size'] ?? null;
        $this->container['auto_delete'] = $data['auto_delete'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['configurable_iops'] = $data['configurable_iops'] ?? null;
        $this->container['custom_label'] = $data['custom_label'] ?? null;
        $this->container['enabled'] = $data['enabled'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['volume_category'] = $data['volume_category'] ?? null;
        $this->container['external_id'] = $data['external_id'] ?? null;
        $this->container['max_storage'] = $data['max_storage'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets editable
     *
     * @return bool|null
     */
    public function getEditable()
    {
        return $this->container['editable'];
    }

    /**
     * Sets editable
     *
     * @param bool|null $editable editable
     *
     * @return self
     */
    public function setEditable($editable)
    {
        $this->container['editable'] = $editable;

        return $this;
    }

    /**
     * Gets option_types
     *
     * @return object[]|null
     */
    public function getOptionTypes()
    {
        return $this->container['option_types'];
    }

    /**
     * Sets option_types
     *
     * @param object[]|null $option_types option_types
     *
     * @return self
     */
    public function setOptionTypes($option_types)
    {
        $this->container['option_types'] = $option_types;

        return $this;
    }

    /**
     * Gets display_order
     *
     * @return int|null
     */
    public function getDisplayOrder()
    {
        return $this->container['display_order'];
    }

    /**
     * Sets display_order
     *
     * @param int|null $display_order display_order
     *
     * @return self
     */
    public function setDisplayOrder($display_order)
    {
        $this->container['display_order'] = $display_order;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string|null
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string|null $code code
     *
     * @return self
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets volume_type
     *
     * @return string|null
     */
    public function getVolumeType()
    {
        return $this->container['volume_type'];
    }

    /**
     * Sets volume_type
     *
     * @param string|null $volume_type volume_type
     *
     * @return self
     */
    public function setVolumeType($volume_type)
    {
        $this->container['volume_type'] = $volume_type;

        return $this;
    }

    /**
     * Gets min_storage
     *
     * @return string|null
     */
    public function getMinStorage()
    {
        return $this->container['min_storage'];
    }

    /**
     * Sets min_storage
     *
     * @param string|null $min_storage min_storage
     *
     * @return self
     */
    public function setMinStorage($min_storage)
    {
        $this->container['min_storage'] = $min_storage;

        return $this;
    }

    /**
     * Gets deletable
     *
     * @return bool|null
     */
    public function getDeletable()
    {
        return $this->container['deletable'];
    }

    /**
     * Sets deletable
     *
     * @param bool|null $deletable deletable
     *
     * @return self
     */
    public function setDeletable($deletable)
    {
        $this->container['deletable'] = $deletable;

        return $this;
    }

    /**
     * Gets default_type
     *
     * @return bool|null
     */
    public function getDefaultType()
    {
        return $this->container['default_type'];
    }

    /**
     * Sets default_type
     *
     * @param bool|null $default_type default_type
     *
     * @return self
     */
    public function setDefaultType($default_type)
    {
        $this->container['default_type'] = $default_type;

        return $this;
    }

    /**
     * Gets create_datastore
     *
     * @return string|null
     */
    public function getCreateDatastore()
    {
        return $this->container['create_datastore'];
    }

    /**
     * Sets create_datastore
     *
     * @param string|null $create_datastore create_datastore
     *
     * @return self
     */
    public function setCreateDatastore($create_datastore)
    {
        $this->container['create_datastore'] = $create_datastore;

        return $this;
    }

    /**
     * Gets resizable
     *
     * @return bool|null
     */
    public function getResizable()
    {
        return $this->container['resizable'];
    }

    /**
     * Sets resizable
     *
     * @param bool|null $resizable resizable
     *
     * @return self
     */
    public function setResizable($resizable)
    {
        $this->container['resizable'] = $resizable;

        return $this;
    }

    /**
     * Gets storage_type
     *
     * @return string|null
     */
    public function getStorageType()
    {
        return $this->container['storage_type'];
    }

    /**
     * Sets storage_type
     *
     * @param string|null $storage_type storage_type
     *
     * @return self
     */
    public function setStorageType($storage_type)
    {
        $this->container['storage_type'] = $storage_type;

        return $this;
    }

    /**
     * Gets allow_search
     *
     * @return bool|null
     */
    public function getAllowSearch()
    {
        return $this->container['allow_search'];
    }

    /**
     * Sets allow_search
     *
     * @param bool|null $allow_search allow_search
     *
     * @return self
     */
    public function setAllowSearch($allow_search)
    {
        $this->container['allow_search'] = $allow_search;

        return $this;
    }

    /**
     * Gets volume_option_source
     *
     * @return string|null
     */
    public function getVolumeOptionSource()
    {
        return $this->container['volume_option_source'];
    }

    /**
     * Sets volume_option_source
     *
     * @param string|null $volume_option_source volume_option_source
     *
     * @return self
     */
    public function setVolumeOptionSource($volume_option_source)
    {
        $this->container['volume_option_source'] = $volume_option_source;

        return $this;
    }

    /**
     * Gets display_name
     *
     * @return string|null
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string|null $display_name display_name
     *
     * @return self
     */
    public function setDisplayName($display_name)
    {
        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets min_iops
     *
     * @return string|null
     */
    public function getMinIops()
    {
        return $this->container['min_iops'];
    }

    /**
     * Sets min_iops
     *
     * @param string|null $min_iops min_iops
     *
     * @return self
     */
    public function setMinIops($min_iops)
    {
        $this->container['min_iops'] = $min_iops;

        return $this;
    }

    /**
     * Gets max_iops
     *
     * @return string|null
     */
    public function getMaxIops()
    {
        return $this->container['max_iops'];
    }

    /**
     * Sets max_iops
     *
     * @param string|null $max_iops max_iops
     *
     * @return self
     */
    public function setMaxIops($max_iops)
    {
        $this->container['max_iops'] = $max_iops;

        return $this;
    }

    /**
     * Gets has_datastore
     *
     * @return bool|null
     */
    public function getHasDatastore()
    {
        return $this->container['has_datastore'];
    }

    /**
     * Sets has_datastore
     *
     * @param bool|null $has_datastore has_datastore
     *
     * @return self
     */
    public function setHasDatastore($has_datastore)
    {
        $this->container['has_datastore'] = $has_datastore;

        return $this;
    }

    /**
     * Gets custom_size
     *
     * @return bool|null
     */
    public function getCustomSize()
    {
        return $this->container['custom_size'];
    }

    /**
     * Sets custom_size
     *
     * @param bool|null $custom_size custom_size
     *
     * @return self
     */
    public function setCustomSize($custom_size)
    {
        $this->container['custom_size'] = $custom_size;

        return $this;
    }

    /**
     * Gets auto_delete
     *
     * @return bool|null
     */
    public function getAutoDelete()
    {
        return $this->container['auto_delete'];
    }

    /**
     * Sets auto_delete
     *
     * @param bool|null $auto_delete auto_delete
     *
     * @return self
     */
    public function setAutoDelete($auto_delete)
    {
        $this->container['auto_delete'] = $auto_delete;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets configurable_iops
     *
     * @return bool|null
     */
    public function getConfigurableIops()
    {
        return $this->container['configurable_iops'];
    }

    /**
     * Sets configurable_iops
     *
     * @param bool|null $configurable_iops configurable_iops
     *
     * @return self
     */
    public function setConfigurableIops($configurable_iops)
    {
        $this->container['configurable_iops'] = $configurable_iops;

        return $this;
    }

    /**
     * Gets custom_label
     *
     * @return bool|null
     */
    public function getCustomLabel()
    {
        return $this->container['custom_label'];
    }

    /**
     * Sets custom_label
     *
     * @param bool|null $custom_label custom_label
     *
     * @return self
     */
    public function setCustomLabel($custom_label)
    {
        $this->container['custom_label'] = $custom_label;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool|null
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool|null $enabled enabled
     *
     * @return self
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets volume_category
     *
     * @return string|null
     */
    public function getVolumeCategory()
    {
        return $this->container['volume_category'];
    }

    /**
     * Sets volume_category
     *
     * @param string|null $volume_category volume_category
     *
     * @return self
     */
    public function setVolumeCategory($volume_category)
    {
        $this->container['volume_category'] = $volume_category;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string|null
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string|null $external_id external_id
     *
     * @return self
     */
    public function setExternalId($external_id)
    {
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets max_storage
     *
     * @return string|null
     */
    public function getMaxStorage()
    {
        return $this->container['max_storage'];
    }

    /**
     * Sets max_storage
     *
     * @param string|null $max_storage max_storage
     *
     * @return self
     */
    public function setMaxStorage($max_storage)
    {
        $this->container['max_storage'] = $max_storage;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


