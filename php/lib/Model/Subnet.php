<?php
/**
 * Subnet
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Subnet Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class Subnet implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'subnet';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'code' => 'string',
        'name' => 'string',
        'labels' => 'string[]',
        'active' => 'bool',
        'description' => 'string',
        'external_id' => 'string',
        'unique_id' => 'string',
        'address_prefix' => 'string',
        'cidr' => 'string',
        'gateway' => 'string',
        'netmask' => 'string',
        'subnet_address' => 'string',
        'tftp_server' => 'string',
        'boot_file' => 'string',
        'pool' => 'string',
        'dhcp_server' => 'bool',
        'has_floating_ips' => 'bool',
        'dhcp_ip' => 'string',
        'dns_primary' => 'string',
        'dns_secondary' => 'string',
        'dhcp_start' => 'string',
        'dhcp_end' => 'string',
        'dhcp_range' => 'string',
        'network_proxy' => 'string',
        'network_domain' => 'string',
        'search_domains' => 'string',
        'default_network' => 'bool',
        'assign_public_ip' => 'bool',
        'visibility' => 'string',
        'status' => '\OpenAPI\Client\Model\AppStateInputProviders',
        'network' => '\OpenAPI\Client\Model\InlineResponse20040AppDeployInstance',
        'type' => '\OpenAPI\Client\Model\InlineResponse20079LoadBalancerMonitorLoadBalancerType',
        'account' => '\OpenAPI\Client\Model\InlineResponse20040AppDeployInstance',
        'security_groups' => 'object[]',
        'tenants' => '\OpenAPI\Client\Model\InlineResponse20040AppDeployInstance[]',
        'resource_permission' => '\OpenAPI\Client\Model\SubnetResourcePermission'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'code' => null,
        'name' => null,
        'labels' => null,
        'active' => null,
        'description' => null,
        'external_id' => null,
        'unique_id' => null,
        'address_prefix' => null,
        'cidr' => null,
        'gateway' => null,
        'netmask' => null,
        'subnet_address' => null,
        'tftp_server' => null,
        'boot_file' => null,
        'pool' => null,
        'dhcp_server' => null,
        'has_floating_ips' => null,
        'dhcp_ip' => null,
        'dns_primary' => null,
        'dns_secondary' => null,
        'dhcp_start' => null,
        'dhcp_end' => null,
        'dhcp_range' => null,
        'network_proxy' => null,
        'network_domain' => null,
        'search_domains' => null,
        'default_network' => null,
        'assign_public_ip' => null,
        'visibility' => null,
        'status' => null,
        'network' => null,
        'type' => null,
        'account' => null,
        'security_groups' => null,
        'tenants' => null,
        'resource_permission' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'code' => 'code',
        'name' => 'name',
        'labels' => 'labels',
        'active' => 'active',
        'description' => 'description',
        'external_id' => 'externalId',
        'unique_id' => 'uniqueId',
        'address_prefix' => 'addressPrefix',
        'cidr' => 'cidr',
        'gateway' => 'gateway',
        'netmask' => 'netmask',
        'subnet_address' => 'subnetAddress',
        'tftp_server' => 'tftpServer',
        'boot_file' => 'bootFile',
        'pool' => 'pool',
        'dhcp_server' => 'dhcpServer',
        'has_floating_ips' => 'hasFloatingIps',
        'dhcp_ip' => 'dhcpIp',
        'dns_primary' => 'dnsPrimary',
        'dns_secondary' => 'dnsSecondary',
        'dhcp_start' => 'dhcpStart',
        'dhcp_end' => 'dhcpEnd',
        'dhcp_range' => 'dhcpRange',
        'network_proxy' => 'networkProxy',
        'network_domain' => 'networkDomain',
        'search_domains' => 'searchDomains',
        'default_network' => 'defaultNetwork',
        'assign_public_ip' => 'assignPublicIp',
        'visibility' => 'visibility',
        'status' => 'status',
        'network' => 'network',
        'type' => 'type',
        'account' => 'account',
        'security_groups' => 'securityGroups',
        'tenants' => 'tenants',
        'resource_permission' => 'resourcePermission'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'code' => 'setCode',
        'name' => 'setName',
        'labels' => 'setLabels',
        'active' => 'setActive',
        'description' => 'setDescription',
        'external_id' => 'setExternalId',
        'unique_id' => 'setUniqueId',
        'address_prefix' => 'setAddressPrefix',
        'cidr' => 'setCidr',
        'gateway' => 'setGateway',
        'netmask' => 'setNetmask',
        'subnet_address' => 'setSubnetAddress',
        'tftp_server' => 'setTftpServer',
        'boot_file' => 'setBootFile',
        'pool' => 'setPool',
        'dhcp_server' => 'setDhcpServer',
        'has_floating_ips' => 'setHasFloatingIps',
        'dhcp_ip' => 'setDhcpIp',
        'dns_primary' => 'setDnsPrimary',
        'dns_secondary' => 'setDnsSecondary',
        'dhcp_start' => 'setDhcpStart',
        'dhcp_end' => 'setDhcpEnd',
        'dhcp_range' => 'setDhcpRange',
        'network_proxy' => 'setNetworkProxy',
        'network_domain' => 'setNetworkDomain',
        'search_domains' => 'setSearchDomains',
        'default_network' => 'setDefaultNetwork',
        'assign_public_ip' => 'setAssignPublicIp',
        'visibility' => 'setVisibility',
        'status' => 'setStatus',
        'network' => 'setNetwork',
        'type' => 'setType',
        'account' => 'setAccount',
        'security_groups' => 'setSecurityGroups',
        'tenants' => 'setTenants',
        'resource_permission' => 'setResourcePermission'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'code' => 'getCode',
        'name' => 'getName',
        'labels' => 'getLabels',
        'active' => 'getActive',
        'description' => 'getDescription',
        'external_id' => 'getExternalId',
        'unique_id' => 'getUniqueId',
        'address_prefix' => 'getAddressPrefix',
        'cidr' => 'getCidr',
        'gateway' => 'getGateway',
        'netmask' => 'getNetmask',
        'subnet_address' => 'getSubnetAddress',
        'tftp_server' => 'getTftpServer',
        'boot_file' => 'getBootFile',
        'pool' => 'getPool',
        'dhcp_server' => 'getDhcpServer',
        'has_floating_ips' => 'getHasFloatingIps',
        'dhcp_ip' => 'getDhcpIp',
        'dns_primary' => 'getDnsPrimary',
        'dns_secondary' => 'getDnsSecondary',
        'dhcp_start' => 'getDhcpStart',
        'dhcp_end' => 'getDhcpEnd',
        'dhcp_range' => 'getDhcpRange',
        'network_proxy' => 'getNetworkProxy',
        'network_domain' => 'getNetworkDomain',
        'search_domains' => 'getSearchDomains',
        'default_network' => 'getDefaultNetwork',
        'assign_public_ip' => 'getAssignPublicIp',
        'visibility' => 'getVisibility',
        'status' => 'getStatus',
        'network' => 'getNetwork',
        'type' => 'getType',
        'account' => 'getAccount',
        'security_groups' => 'getSecurityGroups',
        'tenants' => 'getTenants',
        'resource_permission' => 'getResourcePermission'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['code'] = $data['code'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['labels'] = $data['labels'] ?? null;
        $this->container['active'] = $data['active'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['external_id'] = $data['external_id'] ?? null;
        $this->container['unique_id'] = $data['unique_id'] ?? null;
        $this->container['address_prefix'] = $data['address_prefix'] ?? null;
        $this->container['cidr'] = $data['cidr'] ?? null;
        $this->container['gateway'] = $data['gateway'] ?? null;
        $this->container['netmask'] = $data['netmask'] ?? null;
        $this->container['subnet_address'] = $data['subnet_address'] ?? null;
        $this->container['tftp_server'] = $data['tftp_server'] ?? null;
        $this->container['boot_file'] = $data['boot_file'] ?? null;
        $this->container['pool'] = $data['pool'] ?? null;
        $this->container['dhcp_server'] = $data['dhcp_server'] ?? null;
        $this->container['has_floating_ips'] = $data['has_floating_ips'] ?? null;
        $this->container['dhcp_ip'] = $data['dhcp_ip'] ?? null;
        $this->container['dns_primary'] = $data['dns_primary'] ?? null;
        $this->container['dns_secondary'] = $data['dns_secondary'] ?? null;
        $this->container['dhcp_start'] = $data['dhcp_start'] ?? null;
        $this->container['dhcp_end'] = $data['dhcp_end'] ?? null;
        $this->container['dhcp_range'] = $data['dhcp_range'] ?? null;
        $this->container['network_proxy'] = $data['network_proxy'] ?? null;
        $this->container['network_domain'] = $data['network_domain'] ?? null;
        $this->container['search_domains'] = $data['search_domains'] ?? null;
        $this->container['default_network'] = $data['default_network'] ?? null;
        $this->container['assign_public_ip'] = $data['assign_public_ip'] ?? null;
        $this->container['visibility'] = $data['visibility'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['network'] = $data['network'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['account'] = $data['account'] ?? null;
        $this->container['security_groups'] = $data['security_groups'] ?? null;
        $this->container['tenants'] = $data['tenants'] ?? null;
        $this->container['resource_permission'] = $data['resource_permission'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string|null
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string|null $code code
     *
     * @return self
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets labels
     *
     * @return string[]|null
     */
    public function getLabels()
    {
        return $this->container['labels'];
    }

    /**
     * Sets labels
     *
     * @param string[]|null $labels labels
     *
     * @return self
     */
    public function setLabels($labels)
    {
        $this->container['labels'] = $labels;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool|null
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool|null $active active
     *
     * @return self
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string|null
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string|null $external_id external_id
     *
     * @return self
     */
    public function setExternalId($external_id)
    {
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets unique_id
     *
     * @return string|null
     */
    public function getUniqueId()
    {
        return $this->container['unique_id'];
    }

    /**
     * Sets unique_id
     *
     * @param string|null $unique_id unique_id
     *
     * @return self
     */
    public function setUniqueId($unique_id)
    {
        $this->container['unique_id'] = $unique_id;

        return $this;
    }

    /**
     * Gets address_prefix
     *
     * @return string|null
     */
    public function getAddressPrefix()
    {
        return $this->container['address_prefix'];
    }

    /**
     * Sets address_prefix
     *
     * @param string|null $address_prefix address_prefix
     *
     * @return self
     */
    public function setAddressPrefix($address_prefix)
    {
        $this->container['address_prefix'] = $address_prefix;

        return $this;
    }

    /**
     * Gets cidr
     *
     * @return string|null
     */
    public function getCidr()
    {
        return $this->container['cidr'];
    }

    /**
     * Sets cidr
     *
     * @param string|null $cidr cidr
     *
     * @return self
     */
    public function setCidr($cidr)
    {
        $this->container['cidr'] = $cidr;

        return $this;
    }

    /**
     * Gets gateway
     *
     * @return string|null
     */
    public function getGateway()
    {
        return $this->container['gateway'];
    }

    /**
     * Sets gateway
     *
     * @param string|null $gateway gateway
     *
     * @return self
     */
    public function setGateway($gateway)
    {
        $this->container['gateway'] = $gateway;

        return $this;
    }

    /**
     * Gets netmask
     *
     * @return string|null
     */
    public function getNetmask()
    {
        return $this->container['netmask'];
    }

    /**
     * Sets netmask
     *
     * @param string|null $netmask netmask
     *
     * @return self
     */
    public function setNetmask($netmask)
    {
        $this->container['netmask'] = $netmask;

        return $this;
    }

    /**
     * Gets subnet_address
     *
     * @return string|null
     */
    public function getSubnetAddress()
    {
        return $this->container['subnet_address'];
    }

    /**
     * Sets subnet_address
     *
     * @param string|null $subnet_address subnet_address
     *
     * @return self
     */
    public function setSubnetAddress($subnet_address)
    {
        $this->container['subnet_address'] = $subnet_address;

        return $this;
    }

    /**
     * Gets tftp_server
     *
     * @return string|null
     */
    public function getTftpServer()
    {
        return $this->container['tftp_server'];
    }

    /**
     * Sets tftp_server
     *
     * @param string|null $tftp_server tftp_server
     *
     * @return self
     */
    public function setTftpServer($tftp_server)
    {
        $this->container['tftp_server'] = $tftp_server;

        return $this;
    }

    /**
     * Gets boot_file
     *
     * @return string|null
     */
    public function getBootFile()
    {
        return $this->container['boot_file'];
    }

    /**
     * Sets boot_file
     *
     * @param string|null $boot_file boot_file
     *
     * @return self
     */
    public function setBootFile($boot_file)
    {
        $this->container['boot_file'] = $boot_file;

        return $this;
    }

    /**
     * Gets pool
     *
     * @return string|null
     */
    public function getPool()
    {
        return $this->container['pool'];
    }

    /**
     * Sets pool
     *
     * @param string|null $pool pool
     *
     * @return self
     */
    public function setPool($pool)
    {
        $this->container['pool'] = $pool;

        return $this;
    }

    /**
     * Gets dhcp_server
     *
     * @return bool|null
     */
    public function getDhcpServer()
    {
        return $this->container['dhcp_server'];
    }

    /**
     * Sets dhcp_server
     *
     * @param bool|null $dhcp_server dhcp_server
     *
     * @return self
     */
    public function setDhcpServer($dhcp_server)
    {
        $this->container['dhcp_server'] = $dhcp_server;

        return $this;
    }

    /**
     * Gets has_floating_ips
     *
     * @return bool|null
     */
    public function getHasFloatingIps()
    {
        return $this->container['has_floating_ips'];
    }

    /**
     * Sets has_floating_ips
     *
     * @param bool|null $has_floating_ips has_floating_ips
     *
     * @return self
     */
    public function setHasFloatingIps($has_floating_ips)
    {
        $this->container['has_floating_ips'] = $has_floating_ips;

        return $this;
    }

    /**
     * Gets dhcp_ip
     *
     * @return string|null
     */
    public function getDhcpIp()
    {
        return $this->container['dhcp_ip'];
    }

    /**
     * Sets dhcp_ip
     *
     * @param string|null $dhcp_ip dhcp_ip
     *
     * @return self
     */
    public function setDhcpIp($dhcp_ip)
    {
        $this->container['dhcp_ip'] = $dhcp_ip;

        return $this;
    }

    /**
     * Gets dns_primary
     *
     * @return string|null
     */
    public function getDnsPrimary()
    {
        return $this->container['dns_primary'];
    }

    /**
     * Sets dns_primary
     *
     * @param string|null $dns_primary dns_primary
     *
     * @return self
     */
    public function setDnsPrimary($dns_primary)
    {
        $this->container['dns_primary'] = $dns_primary;

        return $this;
    }

    /**
     * Gets dns_secondary
     *
     * @return string|null
     */
    public function getDnsSecondary()
    {
        return $this->container['dns_secondary'];
    }

    /**
     * Sets dns_secondary
     *
     * @param string|null $dns_secondary dns_secondary
     *
     * @return self
     */
    public function setDnsSecondary($dns_secondary)
    {
        $this->container['dns_secondary'] = $dns_secondary;

        return $this;
    }

    /**
     * Gets dhcp_start
     *
     * @return string|null
     */
    public function getDhcpStart()
    {
        return $this->container['dhcp_start'];
    }

    /**
     * Sets dhcp_start
     *
     * @param string|null $dhcp_start dhcp_start
     *
     * @return self
     */
    public function setDhcpStart($dhcp_start)
    {
        $this->container['dhcp_start'] = $dhcp_start;

        return $this;
    }

    /**
     * Gets dhcp_end
     *
     * @return string|null
     */
    public function getDhcpEnd()
    {
        return $this->container['dhcp_end'];
    }

    /**
     * Sets dhcp_end
     *
     * @param string|null $dhcp_end dhcp_end
     *
     * @return self
     */
    public function setDhcpEnd($dhcp_end)
    {
        $this->container['dhcp_end'] = $dhcp_end;

        return $this;
    }

    /**
     * Gets dhcp_range
     *
     * @return string|null
     */
    public function getDhcpRange()
    {
        return $this->container['dhcp_range'];
    }

    /**
     * Sets dhcp_range
     *
     * @param string|null $dhcp_range dhcp_range
     *
     * @return self
     */
    public function setDhcpRange($dhcp_range)
    {
        $this->container['dhcp_range'] = $dhcp_range;

        return $this;
    }

    /**
     * Gets network_proxy
     *
     * @return string|null
     */
    public function getNetworkProxy()
    {
        return $this->container['network_proxy'];
    }

    /**
     * Sets network_proxy
     *
     * @param string|null $network_proxy network_proxy
     *
     * @return self
     */
    public function setNetworkProxy($network_proxy)
    {
        $this->container['network_proxy'] = $network_proxy;

        return $this;
    }

    /**
     * Gets network_domain
     *
     * @return string|null
     */
    public function getNetworkDomain()
    {
        return $this->container['network_domain'];
    }

    /**
     * Sets network_domain
     *
     * @param string|null $network_domain network_domain
     *
     * @return self
     */
    public function setNetworkDomain($network_domain)
    {
        $this->container['network_domain'] = $network_domain;

        return $this;
    }

    /**
     * Gets search_domains
     *
     * @return string|null
     */
    public function getSearchDomains()
    {
        return $this->container['search_domains'];
    }

    /**
     * Sets search_domains
     *
     * @param string|null $search_domains search_domains
     *
     * @return self
     */
    public function setSearchDomains($search_domains)
    {
        $this->container['search_domains'] = $search_domains;

        return $this;
    }

    /**
     * Gets default_network
     *
     * @return bool|null
     */
    public function getDefaultNetwork()
    {
        return $this->container['default_network'];
    }

    /**
     * Sets default_network
     *
     * @param bool|null $default_network default_network
     *
     * @return self
     */
    public function setDefaultNetwork($default_network)
    {
        $this->container['default_network'] = $default_network;

        return $this;
    }

    /**
     * Gets assign_public_ip
     *
     * @return bool|null
     */
    public function getAssignPublicIp()
    {
        return $this->container['assign_public_ip'];
    }

    /**
     * Sets assign_public_ip
     *
     * @param bool|null $assign_public_ip assign_public_ip
     *
     * @return self
     */
    public function setAssignPublicIp($assign_public_ip)
    {
        $this->container['assign_public_ip'] = $assign_public_ip;

        return $this;
    }

    /**
     * Gets visibility
     *
     * @return string|null
     */
    public function getVisibility()
    {
        return $this->container['visibility'];
    }

    /**
     * Sets visibility
     *
     * @param string|null $visibility visibility
     *
     * @return self
     */
    public function setVisibility($visibility)
    {
        $this->container['visibility'] = $visibility;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \OpenAPI\Client\Model\AppStateInputProviders|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \OpenAPI\Client\Model\AppStateInputProviders|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets network
     *
     * @return \OpenAPI\Client\Model\InlineResponse20040AppDeployInstance|null
     */
    public function getNetwork()
    {
        return $this->container['network'];
    }

    /**
     * Sets network
     *
     * @param \OpenAPI\Client\Model\InlineResponse20040AppDeployInstance|null $network network
     *
     * @return self
     */
    public function setNetwork($network)
    {
        $this->container['network'] = $network;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \OpenAPI\Client\Model\InlineResponse20079LoadBalancerMonitorLoadBalancerType|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \OpenAPI\Client\Model\InlineResponse20079LoadBalancerMonitorLoadBalancerType|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets account
     *
     * @return \OpenAPI\Client\Model\InlineResponse20040AppDeployInstance|null
     */
    public function getAccount()
    {
        return $this->container['account'];
    }

    /**
     * Sets account
     *
     * @param \OpenAPI\Client\Model\InlineResponse20040AppDeployInstance|null $account account
     *
     * @return self
     */
    public function setAccount($account)
    {
        $this->container['account'] = $account;

        return $this;
    }

    /**
     * Gets security_groups
     *
     * @return object[]|null
     */
    public function getSecurityGroups()
    {
        return $this->container['security_groups'];
    }

    /**
     * Sets security_groups
     *
     * @param object[]|null $security_groups security_groups
     *
     * @return self
     */
    public function setSecurityGroups($security_groups)
    {
        $this->container['security_groups'] = $security_groups;

        return $this;
    }

    /**
     * Gets tenants
     *
     * @return \OpenAPI\Client\Model\InlineResponse20040AppDeployInstance[]|null
     */
    public function getTenants()
    {
        return $this->container['tenants'];
    }

    /**
     * Sets tenants
     *
     * @param \OpenAPI\Client\Model\InlineResponse20040AppDeployInstance[]|null $tenants tenants
     *
     * @return self
     */
    public function setTenants($tenants)
    {
        $this->container['tenants'] = $tenants;

        return $this;
    }

    /**
     * Gets resource_permission
     *
     * @return \OpenAPI\Client\Model\SubnetResourcePermission|null
     */
    public function getResourcePermission()
    {
        return $this->container['resource_permission'];
    }

    /**
     * Sets resource_permission
     *
     * @param \OpenAPI\Client\Model\SubnetResourcePermission|null $resource_permission resource_permission
     *
     * @return self
     */
    public function setResourcePermission($resource_permission)
    {
        $this->container['resource_permission'] = $resource_permission;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


