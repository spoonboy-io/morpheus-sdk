<?php
/**
 * GuidanceAzureReservationsConfigDetailList
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * GuidanceAzureReservationsConfigDetailList Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class GuidanceAzureReservationsConfigDetailList implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'guidanceAzureReservations_config_detailList';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'api_name' => 'string',
        'api_type' => 'string',
        'external_id' => 'string',
        'period' => 'string',
        'name' => 'string',
        'type' => 'string',
        'category' => 'string',
        'size' => 'string',
        'region' => 'string',
        'term' => 'string',
        'meter_id' => 'string',
        'on_demand_count' => 'int',
        'on_demand_cost' => 'float',
        'reserved_count' => 'int',
        'reserved_cost' => 'int',
        'recommended_count' => 'int',
        'recommended_cost' => 'float',
        'total_savings' => 'float',
        'total_savings_percent' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'api_name' => null,
        'api_type' => null,
        'external_id' => null,
        'period' => null,
        'name' => null,
        'type' => null,
        'category' => null,
        'size' => null,
        'region' => null,
        'term' => null,
        'meter_id' => null,
        'on_demand_count' => 'int64',
        'on_demand_cost' => null,
        'reserved_count' => 'int64',
        'reserved_cost' => 'int64',
        'recommended_count' => 'int64',
        'recommended_cost' => null,
        'total_savings' => null,
        'total_savings_percent' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'api_name' => 'apiName',
        'api_type' => 'apiType',
        'external_id' => 'externalId',
        'period' => 'period',
        'name' => 'name',
        'type' => 'type',
        'category' => 'category',
        'size' => 'size',
        'region' => 'region',
        'term' => 'term',
        'meter_id' => 'meterId',
        'on_demand_count' => 'onDemandCount',
        'on_demand_cost' => 'onDemandCost',
        'reserved_count' => 'reservedCount',
        'reserved_cost' => 'reservedCost',
        'recommended_count' => 'recommendedCount',
        'recommended_cost' => 'recommendedCost',
        'total_savings' => 'totalSavings',
        'total_savings_percent' => 'totalSavingsPercent'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'api_name' => 'setApiName',
        'api_type' => 'setApiType',
        'external_id' => 'setExternalId',
        'period' => 'setPeriod',
        'name' => 'setName',
        'type' => 'setType',
        'category' => 'setCategory',
        'size' => 'setSize',
        'region' => 'setRegion',
        'term' => 'setTerm',
        'meter_id' => 'setMeterId',
        'on_demand_count' => 'setOnDemandCount',
        'on_demand_cost' => 'setOnDemandCost',
        'reserved_count' => 'setReservedCount',
        'reserved_cost' => 'setReservedCost',
        'recommended_count' => 'setRecommendedCount',
        'recommended_cost' => 'setRecommendedCost',
        'total_savings' => 'setTotalSavings',
        'total_savings_percent' => 'setTotalSavingsPercent'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'api_name' => 'getApiName',
        'api_type' => 'getApiType',
        'external_id' => 'getExternalId',
        'period' => 'getPeriod',
        'name' => 'getName',
        'type' => 'getType',
        'category' => 'getCategory',
        'size' => 'getSize',
        'region' => 'getRegion',
        'term' => 'getTerm',
        'meter_id' => 'getMeterId',
        'on_demand_count' => 'getOnDemandCount',
        'on_demand_cost' => 'getOnDemandCost',
        'reserved_count' => 'getReservedCount',
        'reserved_cost' => 'getReservedCost',
        'recommended_count' => 'getRecommendedCount',
        'recommended_cost' => 'getRecommendedCost',
        'total_savings' => 'getTotalSavings',
        'total_savings_percent' => 'getTotalSavingsPercent'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['api_name'] = $data['api_name'] ?? null;
        $this->container['api_type'] = $data['api_type'] ?? null;
        $this->container['external_id'] = $data['external_id'] ?? null;
        $this->container['period'] = $data['period'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['category'] = $data['category'] ?? null;
        $this->container['size'] = $data['size'] ?? null;
        $this->container['region'] = $data['region'] ?? null;
        $this->container['term'] = $data['term'] ?? null;
        $this->container['meter_id'] = $data['meter_id'] ?? null;
        $this->container['on_demand_count'] = $data['on_demand_count'] ?? null;
        $this->container['on_demand_cost'] = $data['on_demand_cost'] ?? null;
        $this->container['reserved_count'] = $data['reserved_count'] ?? null;
        $this->container['reserved_cost'] = $data['reserved_cost'] ?? null;
        $this->container['recommended_count'] = $data['recommended_count'] ?? null;
        $this->container['recommended_cost'] = $data['recommended_cost'] ?? null;
        $this->container['total_savings'] = $data['total_savings'] ?? null;
        $this->container['total_savings_percent'] = $data['total_savings_percent'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets api_name
     *
     * @return string|null
     */
    public function getApiName()
    {
        return $this->container['api_name'];
    }

    /**
     * Sets api_name
     *
     * @param string|null $api_name api_name
     *
     * @return self
     */
    public function setApiName($api_name)
    {
        $this->container['api_name'] = $api_name;

        return $this;
    }

    /**
     * Gets api_type
     *
     * @return string|null
     */
    public function getApiType()
    {
        return $this->container['api_type'];
    }

    /**
     * Sets api_type
     *
     * @param string|null $api_type api_type
     *
     * @return self
     */
    public function setApiType($api_type)
    {
        $this->container['api_type'] = $api_type;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string|null
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string|null $external_id external_id
     *
     * @return self
     */
    public function setExternalId($external_id)
    {
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets period
     *
     * @return string|null
     */
    public function getPeriod()
    {
        return $this->container['period'];
    }

    /**
     * Sets period
     *
     * @param string|null $period period
     *
     * @return self
     */
    public function setPeriod($period)
    {
        $this->container['period'] = $period;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets category
     *
     * @return string|null
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param string|null $category category
     *
     * @return self
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets size
     *
     * @return string|null
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param string|null $size size
     *
     * @return self
     */
    public function setSize($size)
    {
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets region
     *
     * @return string|null
     */
    public function getRegion()
    {
        return $this->container['region'];
    }

    /**
     * Sets region
     *
     * @param string|null $region region
     *
     * @return self
     */
    public function setRegion($region)
    {
        $this->container['region'] = $region;

        return $this;
    }

    /**
     * Gets term
     *
     * @return string|null
     */
    public function getTerm()
    {
        return $this->container['term'];
    }

    /**
     * Sets term
     *
     * @param string|null $term term
     *
     * @return self
     */
    public function setTerm($term)
    {
        $this->container['term'] = $term;

        return $this;
    }

    /**
     * Gets meter_id
     *
     * @return string|null
     */
    public function getMeterId()
    {
        return $this->container['meter_id'];
    }

    /**
     * Sets meter_id
     *
     * @param string|null $meter_id meter_id
     *
     * @return self
     */
    public function setMeterId($meter_id)
    {
        $this->container['meter_id'] = $meter_id;

        return $this;
    }

    /**
     * Gets on_demand_count
     *
     * @return int|null
     */
    public function getOnDemandCount()
    {
        return $this->container['on_demand_count'];
    }

    /**
     * Sets on_demand_count
     *
     * @param int|null $on_demand_count on_demand_count
     *
     * @return self
     */
    public function setOnDemandCount($on_demand_count)
    {
        $this->container['on_demand_count'] = $on_demand_count;

        return $this;
    }

    /**
     * Gets on_demand_cost
     *
     * @return float|null
     */
    public function getOnDemandCost()
    {
        return $this->container['on_demand_cost'];
    }

    /**
     * Sets on_demand_cost
     *
     * @param float|null $on_demand_cost on_demand_cost
     *
     * @return self
     */
    public function setOnDemandCost($on_demand_cost)
    {
        $this->container['on_demand_cost'] = $on_demand_cost;

        return $this;
    }

    /**
     * Gets reserved_count
     *
     * @return int|null
     */
    public function getReservedCount()
    {
        return $this->container['reserved_count'];
    }

    /**
     * Sets reserved_count
     *
     * @param int|null $reserved_count reserved_count
     *
     * @return self
     */
    public function setReservedCount($reserved_count)
    {
        $this->container['reserved_count'] = $reserved_count;

        return $this;
    }

    /**
     * Gets reserved_cost
     *
     * @return int|null
     */
    public function getReservedCost()
    {
        return $this->container['reserved_cost'];
    }

    /**
     * Sets reserved_cost
     *
     * @param int|null $reserved_cost reserved_cost
     *
     * @return self
     */
    public function setReservedCost($reserved_cost)
    {
        $this->container['reserved_cost'] = $reserved_cost;

        return $this;
    }

    /**
     * Gets recommended_count
     *
     * @return int|null
     */
    public function getRecommendedCount()
    {
        return $this->container['recommended_count'];
    }

    /**
     * Sets recommended_count
     *
     * @param int|null $recommended_count recommended_count
     *
     * @return self
     */
    public function setRecommendedCount($recommended_count)
    {
        $this->container['recommended_count'] = $recommended_count;

        return $this;
    }

    /**
     * Gets recommended_cost
     *
     * @return float|null
     */
    public function getRecommendedCost()
    {
        return $this->container['recommended_cost'];
    }

    /**
     * Sets recommended_cost
     *
     * @param float|null $recommended_cost recommended_cost
     *
     * @return self
     */
    public function setRecommendedCost($recommended_cost)
    {
        $this->container['recommended_cost'] = $recommended_cost;

        return $this;
    }

    /**
     * Gets total_savings
     *
     * @return float|null
     */
    public function getTotalSavings()
    {
        return $this->container['total_savings'];
    }

    /**
     * Sets total_savings
     *
     * @param float|null $total_savings total_savings
     *
     * @return self
     */
    public function setTotalSavings($total_savings)
    {
        $this->container['total_savings'] = $total_savings;

        return $this;
    }

    /**
     * Gets total_savings_percent
     *
     * @return float|null
     */
    public function getTotalSavingsPercent()
    {
        return $this->container['total_savings_percent'];
    }

    /**
     * Sets total_savings_percent
     *
     * @param float|null $total_savings_percent total_savings_percent
     *
     * @return self
     */
    public function setTotalSavingsPercent($total_savings_percent)
    {
        $this->container['total_savings_percent'] = $total_savings_percent;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


