<?php
/**
 * RolePermissionFeature
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * RolePermissionFeature Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class RolePermissionFeature implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'rolePermissionFeature';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'permission_code' => 'string',
        'access' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'permission_code' => null,
        'access' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'permission_code' => 'permissionCode',
        'access' => 'access'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'permission_code' => 'setPermissionCode',
        'access' => 'setAccess'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'permission_code' => 'getPermissionCode',
        'access' => 'getAccess'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const PERMISSION_CODE_ACCOUNT_USAGE = 'account-usage';
    const PERMISSION_CODE_ACTIVITY = 'activity';
    const PERMISSION_CODE_ADMIN_ACCOUNTS = 'admin-accounts';
    const PERMISSION_CODE_ADMIN_ACCOUNTS_USERS = 'admin-accounts-users';
    const PERMISSION_CODE_ADMIN_APPLIANCE = 'admin-appliance';
    const PERMISSION_CODE_ADMIN_BACKUP_SETTINGS = 'admin-backupSettings';
    const PERMISSION_CODE_ADMIN_CERTIFICATES = 'admin-certificates';
    const PERMISSION_CODE_ADMIN_CLIENTS = 'admin-clients';
    const PERMISSION_CODE_ADMIN_CM = 'admin-cm';
    const PERMISSION_CODE_ADMIN_CONTAINERS = 'admin-containers';
    const PERMISSION_CODE_ADMIN_DISTRIBUTED_WORKERS = 'admin-distributed-workers';
    const PERMISSION_CODE_ADMIN_ENVIRONMENTS = 'admin-environments';
    const PERMISSION_CODE_ADMIN_GLOBAL_POLICIES = 'admin-global-policies';
    const PERMISSION_CODE_ADMIN_GROUPS = 'admin-groups';
    const PERMISSION_CODE_ADMIN_GUIDANCE_SETTINGS = 'admin-guidanceSettings';
    const PERMISSION_CODE_ADMIN_HEALTH = 'admin-health';
    const PERMISSION_CODE_ADMIN_IDENTITY_SOURCES = 'admin-identity-sources';
    const PERMISSION_CODE_ADMIN_KEYPAIRS = 'admin-keypairs';
    const PERMISSION_CODE_ADMIN_LICENSES = 'admin-licenses';
    const PERMISSION_CODE_ADMIN_LOG_SETTINGS = 'admin-logSettings';
    const PERMISSION_CODE_ADMIN_MONITOR_SETTINGS = 'admin-monitorSettings';
    const PERMISSION_CODE_ADMIN_MOTD = 'admin-motd';
    const PERMISSION_CODE_ADMIN_PACKAGES = 'admin-packages';
    const PERMISSION_CODE_ADMIN_PLUGINS = 'admin-plugins';
    const PERMISSION_CODE_ADMIN_POLICIES = 'admin-policies';
    const PERMISSION_CODE_ADMIN_PROFILES = 'admin-profiles';
    const PERMISSION_CODE_ADMIN_PROVISIONING_SETTINGS = 'admin-provisioningSettings';
    const PERMISSION_CODE_ADMIN_ROLES = 'admin-roles';
    const PERMISSION_CODE_ADMIN_SERVERS = 'admin-servers';
    const PERMISSION_CODE_ADMIN_SERVICE_PLANS = 'admin-servicePlans';
    const PERMISSION_CODE_ADMIN_USERS = 'admin-users';
    const PERMISSION_CODE_ADMIN_WHITELABEL = 'admin-whitelabel';
    const PERMISSION_CODE_ADMIN_ZONES = 'admin-zones';
    const PERMISSION_CODE_APP_TEMPLATES = 'app-templates';
    const PERMISSION_CODE_APPS = 'apps';
    const PERMISSION_CODE_ARM_TEMPLATE = 'arm-template';
    const PERMISSION_CODE_AUTOMATION_SERVICES = 'automation-services';
    const PERMISSION_CODE_BACKUP_SERVICES = 'backup-services';
    const PERMISSION_CODE_BACKUPS = 'backups';
    const PERMISSION_CODE_BILLING = 'billing';
    const PERMISSION_CODE_CATALOG = 'catalog';
    const PERMISSION_CODE_CLOUD_FORMATION_TEMPLATE = 'cloudFormation-template';
    const PERMISSION_CODE_CODE_REPOSITORIES = 'code-repositories';
    const PERMISSION_CODE_CREDENTIALS = 'credentials';
    const PERMISSION_CODE_DASHBOARD = 'dashboard';
    const PERMISSION_CODE_DEPLOYMENT_SERVICES = 'deployment-services';
    const PERMISSION_CODE_DEPLOYMENTS = 'deployments';
    const PERMISSION_CODE_EXECUTION_REQUEST = 'execution-request';
    const PERMISSION_CODE_EXECUTIONS = 'executions';
    const PERMISSION_CODE_GUIDANCE = 'guidance';
    const PERMISSION_CODE_HELM_TEMPLATE = 'helm-template';
    const PERMISSION_CODE_INFRASTRUCTURE_BOOT = 'infrastructure-boot';
    const PERMISSION_CODE_INFRASTRUCTURE_CLUSTER = 'infrastructure-cluster';
    const PERMISSION_CODE_INFRASTRUCTURE_DHCP_POOL = 'infrastructure-dhcp-pool';
    const PERMISSION_CODE_INFRASTRUCTURE_DOMAINS = 'infrastructure-domains';
    const PERMISSION_CODE_INFRASTRUCTURE_IPPOOLS = 'infrastructure-ippools';
    const PERMISSION_CODE_INFRASTRUCTURE_KUBE_CNTL = 'infrastructure-kube-cntl';
    const PERMISSION_CODE_INFRASTRUCTURE_LOADBALANCER = 'infrastructure-loadbalancer';
    const PERMISSION_CODE_INFRASTRUCTURE_MOVE_SERVER = 'infrastructure-move-server';
    const PERMISSION_CODE_INFRASTRUCTURE_NAT = 'infrastructure-nat';
    const PERMISSION_CODE_INFRASTRUCTURE_NETWORK_DHCP_RELAY = 'infrastructure-network-dhcp-relay';
    const PERMISSION_CODE_INFRASTRUCTURE_NETWORK_DHCP_ROUTES = 'infrastructure-network-dhcp-routes';
    const PERMISSION_CODE_INFRASTRUCTURE_NETWORK_DHCP_SERVER = 'infrastructure-network-dhcp-server';
    const PERMISSION_CODE_INFRASTRUCTURE_NETWORK_FIREWALLS = 'infrastructure-network-firewalls';
    const PERMISSION_CODE_INFRASTRUCTURE_NETWORK_INTEGRATIONS = 'infrastructure-network-integrations';
    const PERMISSION_CODE_INFRASTRUCTURE_NETWORK_ROUTER_FIREWALLS = 'infrastructure-network-router-firewalls';
    const PERMISSION_CODE_INFRASTRUCTURE_NETWORK_ROUTER_INTERFACES = 'infrastructure-network-router-interfaces';
    const PERMISSION_CODE_INFRASTRUCTURE_NETWORK_ROUTER_REDISTRIBUTION = 'infrastructure-network-router-redistribution';
    const PERMISSION_CODE_INFRASTRUCTURE_NETWORK_ROUTER_ROUTES = 'infrastructure-network-router-routes';
    const PERMISSION_CODE_INFRASTRUCTURE_NETWORK_SERVER_GROUPS = 'infrastructure-network-server-groups';
    const PERMISSION_CODE_INFRASTRUCTURE_NETWORKS = 'infrastructure-networks';
    const PERMISSION_CODE_INFRASTRUCTURE_PROXIES = 'infrastructure-proxies';
    const PERMISSION_CODE_INFRASTRUCTURE_ROUTER_DHCP_BINDING = 'infrastructure-router-dhcp-binding';
    const PERMISSION_CODE_INFRASTRUCTURE_ROUTER_DHCP_RELAY = 'infrastructure-router-dhcp-relay';
    const PERMISSION_CODE_INFRASTRUCTURE_ROUTERS = 'infrastructure-routers';
    const PERMISSION_CODE_INFRASTRUCTURE_SECURITY_GROUPS = 'infrastructure-securityGroups';
    const PERMISSION_CODE_INFRASTRUCTURE_STATE = 'infrastructure-state';
    const PERMISSION_CODE_INFRASTRUCTURE_STORAGE = 'infrastructure-storage';
    const PERMISSION_CODE_INFRASTRUCTURE_STORAGE_BROWSER = 'infrastructure-storage-browser';
    const PERMISSION_CODE_INTEGRATIONS_ANSIBLE = 'integrations-ansible';
    const PERMISSION_CODE_JOB_EXECUTIONS = 'job-executions';
    const PERMISSION_CODE_JOB_TEMPLATES = 'job-templates';
    const PERMISSION_CODE_KUBERNETES_TEMPLATE = 'kubernetes-template';
    const PERMISSION_CODE_LIBRARY_ADVANCED_NODE_TYPE_OPTIONS = 'library-advanced-node-type-options';
    const PERMISSION_CODE_LIBRARY_OPTIONS = 'library-options';
    const PERMISSION_CODE_LIBRARY_TEMPLATES = 'library-templates';
    const PERMISSION_CODE_LOGS = 'logs';
    const PERMISSION_CODE_MONITORING = 'monitoring';
    const PERMISSION_CODE_OPERATIONS_ALARMS = 'operations-alarms';
    const PERMISSION_CODE_OPERATIONS_APPROVALS = 'operations-approvals';
    const PERMISSION_CODE_OPERATIONS_BUDGETS = 'operations-budgets';
    const PERMISSION_CODE_OPERATIONS_INVOICES = 'operations-invoices';
    const PERMISSION_CODE_OPERATIONS_WIKI = 'operations-wiki';
    const PERMISSION_CODE_PROJECTS = 'projects';
    const PERMISSION_CODE_PROVISIONING = 'provisioning';
    const PERMISSION_CODE_PROVISIONING_ADD = 'provisioning-add';
    const PERMISSION_CODE_PROVISIONING_ADMIN = 'provisioning-admin';
    const PERMISSION_CODE_PROVISIONING_CLONE = 'provisioning-clone';
    const PERMISSION_CODE_PROVISIONING_DELETE = 'provisioning-delete';
    const PERMISSION_CODE_PROVISIONING_EDIT = 'provisioning-edit';
    const PERMISSION_CODE_PROVISIONING_ENVIRONMENT = 'provisioning-environment';
    const PERMISSION_CODE_PROVISIONING_EXECUTE_SCRIPT = 'provisioning-execute-script';
    const PERMISSION_CODE_PROVISIONING_EXECUTE_TASK = 'provisioning-execute-task';
    const PERMISSION_CODE_PROVISIONING_EXECUTE_WORKFLOW = 'provisioning-execute-workflow';
    const PERMISSION_CODE_PROVISIONING_FORCE_DELETE = 'provisioning-force-delete';
    const PERMISSION_CODE_PROVISIONING_IMPORT_IMAGE = 'provisioning-import-image';
    const PERMISSION_CODE_PROVISIONING_LOCK = 'provisioning-lock';
    const PERMISSION_CODE_PROVISIONING_POWER = 'provisioning-power';
    const PERMISSION_CODE_PROVISIONING_RECONFIGURE = 'provisioning-reconfigure';
    const PERMISSION_CODE_PROVISIONING_RECONFIGURE_ADD_DISK = 'provisioning-reconfigure-add-disk';
    const PERMISSION_CODE_PROVISIONING_RECONFIGURE_ADD_NETWORK = 'provisioning-reconfigure-add-network';
    const PERMISSION_CODE_PROVISIONING_RECONFIGURE_CHANGE_PLAN = 'provisioning-reconfigure-change-plan';
    const PERMISSION_CODE_PROVISIONING_RECONFIGURE_DISK_TYPE = 'provisioning-reconfigure-disk-type';
    const PERMISSION_CODE_PROVISIONING_RECONFIGURE_MODIFY_DISK = 'provisioning-reconfigure-modify-disk';
    const PERMISSION_CODE_PROVISIONING_RECONFIGURE_MODIFY_NETWORK = 'provisioning-reconfigure-modify-network';
    const PERMISSION_CODE_PROVISIONING_RECONFIGURE_REMOVE_DISK = 'provisioning-reconfigure-remove-disk';
    const PERMISSION_CODE_PROVISIONING_RECONFIGURE_REMOVE_NETWORK = 'provisioning-reconfigure-remove-network';
    const PERMISSION_CODE_PROVISIONING_REMOVE_CONTROL = 'provisioning-remove-control';
    const PERMISSION_CODE_PROVISIONING_SCALE = 'provisioning-scale';
    const PERMISSION_CODE_PROVISIONING_SETTINGS = 'provisioning-settings';
    const PERMISSION_CODE_PROVISIONING_STATE = 'provisioning-state';
    const PERMISSION_CODE_REPORTS = 'reports';
    const PERMISSION_CODE_REPORTS_ANALYTICS = 'reports-analytics';
    const PERMISSION_CODE_SCHEDULING_EXECUTE = 'scheduling-execute';
    const PERMISSION_CODE_SCHEDULING_POWER = 'scheduling-power';
    const PERMISSION_CODE_SECURITY_SCAN = 'security-scan';
    const PERMISSION_CODE_SERVICE_CATALOG = 'service-catalog';
    const PERMISSION_CODE_SERVICE_CATALOG_DASHBOARD = 'service-catalog-dashboard';
    const PERMISSION_CODE_SERVICE_CATALOG_INVENTORY = 'service-catalog-inventory';
    const PERMISSION_CODE_SERVICES_ARCHIVES = 'services-archives';
    const PERMISSION_CODE_SERVICES_CYPHER = 'services-cypher';
    const PERMISSION_CODE_SERVICES_IMAGE_BUILDER = 'services-image-builder';
    const PERMISSION_CODE_SERVICES_KUBERNETES = 'services-kubernetes';
    const PERMISSION_CODE_SERVICES_NETWORK_REGISTRY = 'services-network-registry';
    const PERMISSION_CODE_SERVICES_VDI_COPY = 'services-vdi-copy';
    const PERMISSION_CODE_SERVICES_VDI_POOLS = 'services-vdi-pools';
    const PERMISSION_CODE_SERVICES_VDI_PRINTER = 'services-vdi-printer';
    const PERMISSION_CODE_SNAPSHOTS = 'snapshots';
    const PERMISSION_CODE_TASK_SCRIPTS = 'task-scripts';
    const PERMISSION_CODE_TASKS = 'tasks';
    const PERMISSION_CODE_TERMINAL = 'terminal';
    const PERMISSION_CODE_TERMINAL_ACCESS = 'terminal-access';
    const PERMISSION_CODE_TERRAFORM_TEMPLATE = 'terraform-template';
    const PERMISSION_CODE_THRESHOLDS = 'thresholds';
    const PERMISSION_CODE_TRUST_SERVICES = 'trust-services';
    const PERMISSION_CODE_VIRTUAL_IMAGES = 'virtual-images';
    const ACCESS_FULL = 'full';
    const ACCESS_FULL_DECRYPTED = 'full_decrypted';
    const ACCESS_GROUP = 'group';
    const ACCESS_LISTFILES = 'listfiles';
    const ACCESS_MANAGERULES = 'managerules';
    const ACCESS_NO = 'no';
    const ACCESS_NONE = 'none';
    const ACCESS_PROVISION = 'provision';
    const ACCESS_READ = 'read';
    const ACCESS_ROLEMAPPINGS = 'rolemappings';
    const ACCESS_USER = 'user';
    const ACCESS_VIEW = 'view';
    const ACCESS_YES = 'yes';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPermissionCodeAllowableValues()
    {
        return [
            self::PERMISSION_CODE_ACCOUNT_USAGE,
            self::PERMISSION_CODE_ACTIVITY,
            self::PERMISSION_CODE_ADMIN_ACCOUNTS,
            self::PERMISSION_CODE_ADMIN_ACCOUNTS_USERS,
            self::PERMISSION_CODE_ADMIN_APPLIANCE,
            self::PERMISSION_CODE_ADMIN_BACKUP_SETTINGS,
            self::PERMISSION_CODE_ADMIN_CERTIFICATES,
            self::PERMISSION_CODE_ADMIN_CLIENTS,
            self::PERMISSION_CODE_ADMIN_CM,
            self::PERMISSION_CODE_ADMIN_CONTAINERS,
            self::PERMISSION_CODE_ADMIN_DISTRIBUTED_WORKERS,
            self::PERMISSION_CODE_ADMIN_ENVIRONMENTS,
            self::PERMISSION_CODE_ADMIN_GLOBAL_POLICIES,
            self::PERMISSION_CODE_ADMIN_GROUPS,
            self::PERMISSION_CODE_ADMIN_GUIDANCE_SETTINGS,
            self::PERMISSION_CODE_ADMIN_HEALTH,
            self::PERMISSION_CODE_ADMIN_IDENTITY_SOURCES,
            self::PERMISSION_CODE_ADMIN_KEYPAIRS,
            self::PERMISSION_CODE_ADMIN_LICENSES,
            self::PERMISSION_CODE_ADMIN_LOG_SETTINGS,
            self::PERMISSION_CODE_ADMIN_MONITOR_SETTINGS,
            self::PERMISSION_CODE_ADMIN_MOTD,
            self::PERMISSION_CODE_ADMIN_PACKAGES,
            self::PERMISSION_CODE_ADMIN_PLUGINS,
            self::PERMISSION_CODE_ADMIN_POLICIES,
            self::PERMISSION_CODE_ADMIN_PROFILES,
            self::PERMISSION_CODE_ADMIN_PROVISIONING_SETTINGS,
            self::PERMISSION_CODE_ADMIN_ROLES,
            self::PERMISSION_CODE_ADMIN_SERVERS,
            self::PERMISSION_CODE_ADMIN_SERVICE_PLANS,
            self::PERMISSION_CODE_ADMIN_USERS,
            self::PERMISSION_CODE_ADMIN_WHITELABEL,
            self::PERMISSION_CODE_ADMIN_ZONES,
            self::PERMISSION_CODE_APP_TEMPLATES,
            self::PERMISSION_CODE_APPS,
            self::PERMISSION_CODE_ARM_TEMPLATE,
            self::PERMISSION_CODE_AUTOMATION_SERVICES,
            self::PERMISSION_CODE_BACKUP_SERVICES,
            self::PERMISSION_CODE_BACKUPS,
            self::PERMISSION_CODE_BILLING,
            self::PERMISSION_CODE_CATALOG,
            self::PERMISSION_CODE_CLOUD_FORMATION_TEMPLATE,
            self::PERMISSION_CODE_CODE_REPOSITORIES,
            self::PERMISSION_CODE_CREDENTIALS,
            self::PERMISSION_CODE_DASHBOARD,
            self::PERMISSION_CODE_DEPLOYMENT_SERVICES,
            self::PERMISSION_CODE_DEPLOYMENTS,
            self::PERMISSION_CODE_EXECUTION_REQUEST,
            self::PERMISSION_CODE_EXECUTIONS,
            self::PERMISSION_CODE_GUIDANCE,
            self::PERMISSION_CODE_HELM_TEMPLATE,
            self::PERMISSION_CODE_INFRASTRUCTURE_BOOT,
            self::PERMISSION_CODE_INFRASTRUCTURE_CLUSTER,
            self::PERMISSION_CODE_INFRASTRUCTURE_DHCP_POOL,
            self::PERMISSION_CODE_INFRASTRUCTURE_DOMAINS,
            self::PERMISSION_CODE_INFRASTRUCTURE_IPPOOLS,
            self::PERMISSION_CODE_INFRASTRUCTURE_KUBE_CNTL,
            self::PERMISSION_CODE_INFRASTRUCTURE_LOADBALANCER,
            self::PERMISSION_CODE_INFRASTRUCTURE_MOVE_SERVER,
            self::PERMISSION_CODE_INFRASTRUCTURE_NAT,
            self::PERMISSION_CODE_INFRASTRUCTURE_NETWORK_DHCP_RELAY,
            self::PERMISSION_CODE_INFRASTRUCTURE_NETWORK_DHCP_ROUTES,
            self::PERMISSION_CODE_INFRASTRUCTURE_NETWORK_DHCP_SERVER,
            self::PERMISSION_CODE_INFRASTRUCTURE_NETWORK_FIREWALLS,
            self::PERMISSION_CODE_INFRASTRUCTURE_NETWORK_INTEGRATIONS,
            self::PERMISSION_CODE_INFRASTRUCTURE_NETWORK_ROUTER_FIREWALLS,
            self::PERMISSION_CODE_INFRASTRUCTURE_NETWORK_ROUTER_INTERFACES,
            self::PERMISSION_CODE_INFRASTRUCTURE_NETWORK_ROUTER_REDISTRIBUTION,
            self::PERMISSION_CODE_INFRASTRUCTURE_NETWORK_ROUTER_ROUTES,
            self::PERMISSION_CODE_INFRASTRUCTURE_NETWORK_SERVER_GROUPS,
            self::PERMISSION_CODE_INFRASTRUCTURE_NETWORKS,
            self::PERMISSION_CODE_INFRASTRUCTURE_PROXIES,
            self::PERMISSION_CODE_INFRASTRUCTURE_ROUTER_DHCP_BINDING,
            self::PERMISSION_CODE_INFRASTRUCTURE_ROUTER_DHCP_RELAY,
            self::PERMISSION_CODE_INFRASTRUCTURE_ROUTERS,
            self::PERMISSION_CODE_INFRASTRUCTURE_SECURITY_GROUPS,
            self::PERMISSION_CODE_INFRASTRUCTURE_STATE,
            self::PERMISSION_CODE_INFRASTRUCTURE_STORAGE,
            self::PERMISSION_CODE_INFRASTRUCTURE_STORAGE_BROWSER,
            self::PERMISSION_CODE_INTEGRATIONS_ANSIBLE,
            self::PERMISSION_CODE_JOB_EXECUTIONS,
            self::PERMISSION_CODE_JOB_TEMPLATES,
            self::PERMISSION_CODE_KUBERNETES_TEMPLATE,
            self::PERMISSION_CODE_LIBRARY_ADVANCED_NODE_TYPE_OPTIONS,
            self::PERMISSION_CODE_LIBRARY_OPTIONS,
            self::PERMISSION_CODE_LIBRARY_TEMPLATES,
            self::PERMISSION_CODE_LOGS,
            self::PERMISSION_CODE_MONITORING,
            self::PERMISSION_CODE_OPERATIONS_ALARMS,
            self::PERMISSION_CODE_OPERATIONS_APPROVALS,
            self::PERMISSION_CODE_OPERATIONS_BUDGETS,
            self::PERMISSION_CODE_OPERATIONS_INVOICES,
            self::PERMISSION_CODE_OPERATIONS_WIKI,
            self::PERMISSION_CODE_PROJECTS,
            self::PERMISSION_CODE_PROVISIONING,
            self::PERMISSION_CODE_PROVISIONING_ADD,
            self::PERMISSION_CODE_PROVISIONING_ADMIN,
            self::PERMISSION_CODE_PROVISIONING_CLONE,
            self::PERMISSION_CODE_PROVISIONING_DELETE,
            self::PERMISSION_CODE_PROVISIONING_EDIT,
            self::PERMISSION_CODE_PROVISIONING_ENVIRONMENT,
            self::PERMISSION_CODE_PROVISIONING_EXECUTE_SCRIPT,
            self::PERMISSION_CODE_PROVISIONING_EXECUTE_TASK,
            self::PERMISSION_CODE_PROVISIONING_EXECUTE_WORKFLOW,
            self::PERMISSION_CODE_PROVISIONING_FORCE_DELETE,
            self::PERMISSION_CODE_PROVISIONING_IMPORT_IMAGE,
            self::PERMISSION_CODE_PROVISIONING_LOCK,
            self::PERMISSION_CODE_PROVISIONING_POWER,
            self::PERMISSION_CODE_PROVISIONING_RECONFIGURE,
            self::PERMISSION_CODE_PROVISIONING_RECONFIGURE_ADD_DISK,
            self::PERMISSION_CODE_PROVISIONING_RECONFIGURE_ADD_NETWORK,
            self::PERMISSION_CODE_PROVISIONING_RECONFIGURE_CHANGE_PLAN,
            self::PERMISSION_CODE_PROVISIONING_RECONFIGURE_DISK_TYPE,
            self::PERMISSION_CODE_PROVISIONING_RECONFIGURE_MODIFY_DISK,
            self::PERMISSION_CODE_PROVISIONING_RECONFIGURE_MODIFY_NETWORK,
            self::PERMISSION_CODE_PROVISIONING_RECONFIGURE_REMOVE_DISK,
            self::PERMISSION_CODE_PROVISIONING_RECONFIGURE_REMOVE_NETWORK,
            self::PERMISSION_CODE_PROVISIONING_REMOVE_CONTROL,
            self::PERMISSION_CODE_PROVISIONING_SCALE,
            self::PERMISSION_CODE_PROVISIONING_SETTINGS,
            self::PERMISSION_CODE_PROVISIONING_STATE,
            self::PERMISSION_CODE_REPORTS,
            self::PERMISSION_CODE_REPORTS_ANALYTICS,
            self::PERMISSION_CODE_SCHEDULING_EXECUTE,
            self::PERMISSION_CODE_SCHEDULING_POWER,
            self::PERMISSION_CODE_SECURITY_SCAN,
            self::PERMISSION_CODE_SERVICE_CATALOG,
            self::PERMISSION_CODE_SERVICE_CATALOG_DASHBOARD,
            self::PERMISSION_CODE_SERVICE_CATALOG_INVENTORY,
            self::PERMISSION_CODE_SERVICES_ARCHIVES,
            self::PERMISSION_CODE_SERVICES_CYPHER,
            self::PERMISSION_CODE_SERVICES_IMAGE_BUILDER,
            self::PERMISSION_CODE_SERVICES_KUBERNETES,
            self::PERMISSION_CODE_SERVICES_NETWORK_REGISTRY,
            self::PERMISSION_CODE_SERVICES_VDI_COPY,
            self::PERMISSION_CODE_SERVICES_VDI_POOLS,
            self::PERMISSION_CODE_SERVICES_VDI_PRINTER,
            self::PERMISSION_CODE_SNAPSHOTS,
            self::PERMISSION_CODE_TASK_SCRIPTS,
            self::PERMISSION_CODE_TASKS,
            self::PERMISSION_CODE_TERMINAL,
            self::PERMISSION_CODE_TERMINAL_ACCESS,
            self::PERMISSION_CODE_TERRAFORM_TEMPLATE,
            self::PERMISSION_CODE_THRESHOLDS,
            self::PERMISSION_CODE_TRUST_SERVICES,
            self::PERMISSION_CODE_VIRTUAL_IMAGES,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAccessAllowableValues()
    {
        return [
            self::ACCESS_FULL,
            self::ACCESS_FULL_DECRYPTED,
            self::ACCESS_GROUP,
            self::ACCESS_LISTFILES,
            self::ACCESS_MANAGERULES,
            self::ACCESS_NO,
            self::ACCESS_NONE,
            self::ACCESS_PROVISION,
            self::ACCESS_READ,
            self::ACCESS_ROLEMAPPINGS,
            self::ACCESS_USER,
            self::ACCESS_VIEW,
            self::ACCESS_YES,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['permission_code'] = $data['permission_code'] ?? null;
        $this->container['access'] = $data['access'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['permission_code'] === null) {
            $invalidProperties[] = "'permission_code' can't be null";
        }
        $allowedValues = $this->getPermissionCodeAllowableValues();
        if (!is_null($this->container['permission_code']) && !in_array($this->container['permission_code'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'permission_code', must be one of '%s'",
                $this->container['permission_code'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['access'] === null) {
            $invalidProperties[] = "'access' can't be null";
        }
        $allowedValues = $this->getAccessAllowableValues();
        if (!is_null($this->container['access']) && !in_array($this->container['access'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'access', must be one of '%s'",
                $this->container['access'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets permission_code
     *
     * @return string
     */
    public function getPermissionCode()
    {
        return $this->container['permission_code'];
    }

    /**
     * Sets permission_code
     *
     * @param string $permission_code The code of the feature permission being changed
     *
     * @return self
     */
    public function setPermissionCode($permission_code)
    {
        $allowedValues = $this->getPermissionCodeAllowableValues();
        if (!in_array($permission_code, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'permission_code', must be one of '%s'",
                    $permission_code,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['permission_code'] = $permission_code;

        return $this;
    }

    /**
     * Gets access
     *
     * @return string
     */
    public function getAccess()
    {
        return $this->container['access'];
    }

    /**
     * Sets access
     *
     * @param string $access The new access level.
     *
     * @return self
     */
    public function setAccess($access)
    {
        $allowedValues = $this->getAccessAllowableValues();
        if (!in_array($access, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'access', must be one of '%s'",
                    $access,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['access'] = $access;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


