<?php
/**
 * BackupStats
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * BackupStats Class Doc Comment
 *
 * @category Class
 * @description Backup Result Statistics
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class BackupStats implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'backup_stats';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'total_size' => 'int',
        'avg_size' => 'int',
        'total_completed' => 'int',
        'success' => 'int',
        'failed' => 'int',
        'success_rate' => 'double',
        'fail_rate' => 'double',
        'last_five_results' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'total_size' => 'int64',
        'avg_size' => 'int64',
        'total_completed' => 'int64',
        'success' => 'int64',
        'failed' => 'int64',
        'success_rate' => 'double',
        'fail_rate' => 'double',
        'last_five_results' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'total_size' => 'totalSize',
        'avg_size' => 'avgSize',
        'total_completed' => 'totalCompleted',
        'success' => 'success',
        'failed' => 'failed',
        'success_rate' => 'successRate',
        'fail_rate' => 'failRate',
        'last_five_results' => 'lastFiveResults'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'total_size' => 'setTotalSize',
        'avg_size' => 'setAvgSize',
        'total_completed' => 'setTotalCompleted',
        'success' => 'setSuccess',
        'failed' => 'setFailed',
        'success_rate' => 'setSuccessRate',
        'fail_rate' => 'setFailRate',
        'last_five_results' => 'setLastFiveResults'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'total_size' => 'getTotalSize',
        'avg_size' => 'getAvgSize',
        'total_completed' => 'getTotalCompleted',
        'success' => 'getSuccess',
        'failed' => 'getFailed',
        'success_rate' => 'getSuccessRate',
        'fail_rate' => 'getFailRate',
        'last_five_results' => 'getLastFiveResults'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const LAST_FIVE_RESULTS_SUCCEEDED = 'SUCCEEDED';
    const LAST_FIVE_RESULTS_FAILED = 'FAILED';
    const LAST_FIVE_RESULTS_IN_PROGRESS = 'IN_PROGRESS';
    const LAST_FIVE_RESULTS_START_REQUESTED = 'START_REQUESTED';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLastFiveResultsAllowableValues()
    {
        return [
            self::LAST_FIVE_RESULTS_SUCCEEDED,
            self::LAST_FIVE_RESULTS_FAILED,
            self::LAST_FIVE_RESULTS_IN_PROGRESS,
            self::LAST_FIVE_RESULTS_START_REQUESTED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['total_size'] = $data['total_size'] ?? null;
        $this->container['avg_size'] = $data['avg_size'] ?? null;
        $this->container['total_completed'] = $data['total_completed'] ?? null;
        $this->container['success'] = $data['success'] ?? null;
        $this->container['failed'] = $data['failed'] ?? null;
        $this->container['success_rate'] = $data['success_rate'] ?? null;
        $this->container['fail_rate'] = $data['fail_rate'] ?? null;
        $this->container['last_five_results'] = $data['last_five_results'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets total_size
     *
     * @return int|null
     */
    public function getTotalSize()
    {
        return $this->container['total_size'];
    }

    /**
     * Sets total_size
     *
     * @param int|null $total_size Total size of all backups in bytes
     *
     * @return self
     */
    public function setTotalSize($total_size)
    {
        $this->container['total_size'] = $total_size;

        return $this;
    }

    /**
     * Gets avg_size
     *
     * @return int|null
     */
    public function getAvgSize()
    {
        return $this->container['avg_size'];
    }

    /**
     * Sets avg_size
     *
     * @param int|null $avg_size Average size of each backup in bytes
     *
     * @return self
     */
    public function setAvgSize($avg_size)
    {
        $this->container['avg_size'] = $avg_size;

        return $this;
    }

    /**
     * Gets total_completed
     *
     * @return int|null
     */
    public function getTotalCompleted()
    {
        return $this->container['total_completed'];
    }

    /**
     * Sets total_completed
     *
     * @param int|null $total_completed Total completed count
     *
     * @return self
     */
    public function setTotalCompleted($total_completed)
    {
        $this->container['total_completed'] = $total_completed;

        return $this;
    }

    /**
     * Gets success
     *
     * @return int|null
     */
    public function getSuccess()
    {
        return $this->container['success'];
    }

    /**
     * Sets success
     *
     * @param int|null $success Successful backup count
     *
     * @return self
     */
    public function setSuccess($success)
    {
        $this->container['success'] = $success;

        return $this;
    }

    /**
     * Gets failed
     *
     * @return int|null
     */
    public function getFailed()
    {
        return $this->container['failed'];
    }

    /**
     * Sets failed
     *
     * @param int|null $failed Failed backup count
     *
     * @return self
     */
    public function setFailed($failed)
    {
        $this->container['failed'] = $failed;

        return $this;
    }

    /**
     * Gets success_rate
     *
     * @return double|null
     */
    public function getSuccessRate()
    {
        return $this->container['success_rate'];
    }

    /**
     * Sets success_rate
     *
     * @param double|null $success_rate Success rate 0-1
     *
     * @return self
     */
    public function setSuccessRate($success_rate)
    {
        $this->container['success_rate'] = $success_rate;

        return $this;
    }

    /**
     * Gets fail_rate
     *
     * @return double|null
     */
    public function getFailRate()
    {
        return $this->container['fail_rate'];
    }

    /**
     * Sets fail_rate
     *
     * @param double|null $fail_rate Failure rate 0-1
     *
     * @return self
     */
    public function setFailRate($fail_rate)
    {
        $this->container['fail_rate'] = $fail_rate;

        return $this;
    }

    /**
     * Gets last_five_results
     *
     * @return string[]|null
     */
    public function getLastFiveResults()
    {
        return $this->container['last_five_results'];
    }

    /**
     * Sets last_five_results
     *
     * @param string[]|null $last_five_results List of the last 5 backup result statuses
     *
     * @return self
     */
    public function setLastFiveResults($last_five_results)
    {
        $allowedValues = $this->getLastFiveResultsAllowableValues();
        if (!is_null($last_five_results) && array_diff($last_five_results, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'last_five_results', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['last_five_results'] = $last_five_results;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


