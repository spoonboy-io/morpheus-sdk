<?php
/**
 * ProvisionType
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ProvisionType Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class ProvisionType implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'provisionType';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'name' => 'string',
        'description' => 'string',
        'code' => 'string',
        'acl_enabled' => 'bool',
        'multi_tenant' => 'bool',
        'managed' => 'bool',
        'host_network' => 'bool',
        'custom_supported' => 'bool',
        'map_ports' => 'bool',
        'export_server' => 'bool',
        'view_set' => 'string',
        'server_type' => 'string',
        'host_type' => 'string',
        'add_volumes' => 'bool',
        'has_volumes' => 'bool',
        'has_datastore' => 'bool',
        'has_networks' => 'bool',
        'max_networks' => 'int',
        'customize_volume' => 'bool',
        'root_disk_customizable' => 'bool',
        'root_disk_size_known' => 'bool',
        'root_disk_resizable' => 'bool',
        'lvm_supported' => 'bool',
        'host_disk_mode' => 'string',
        'min_disk' => 'int',
        'max_disk' => 'string',
        'resize_copies_volumes' => 'bool',
        'supports_auto_datastore' => 'bool',
        'has_zone_pools' => 'bool',
        'has_security_groups' => 'bool',
        'has_parameters' => 'bool',
        'can_enforce_tags' => 'bool',
        'disable_root_datastore' => 'bool',
        'has_snapshots' => 'bool',
        'has_spec_templates' => 'bool',
        'has_preview' => 'bool',
        'zone_pool_required' => 'bool',
        'plan_requires_pool' => 'bool',
        'has_folders' => 'bool',
        'option_types' => '\OpenAPI\Client\Model\OptionType[]',
        'custom_option_types' => '\OpenAPI\Client\Model\OptionType[]',
        'network_types' => '\OpenAPI\Client\Model\NetworkType[]',
        'storage_types' => '\OpenAPI\Client\Model\StorageType[]',
        'root_storage_types' => '\OpenAPI\Client\Model\StorageType[]',
        'controller_types' => '\OpenAPI\Client\Model\ControllerType[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'name' => null,
        'description' => null,
        'code' => null,
        'acl_enabled' => null,
        'multi_tenant' => null,
        'managed' => null,
        'host_network' => null,
        'custom_supported' => null,
        'map_ports' => null,
        'export_server' => null,
        'view_set' => null,
        'server_type' => null,
        'host_type' => null,
        'add_volumes' => null,
        'has_volumes' => null,
        'has_datastore' => null,
        'has_networks' => null,
        'max_networks' => 'int64',
        'customize_volume' => null,
        'root_disk_customizable' => null,
        'root_disk_size_known' => null,
        'root_disk_resizable' => null,
        'lvm_supported' => null,
        'host_disk_mode' => null,
        'min_disk' => 'int64',
        'max_disk' => null,
        'resize_copies_volumes' => null,
        'supports_auto_datastore' => null,
        'has_zone_pools' => null,
        'has_security_groups' => null,
        'has_parameters' => null,
        'can_enforce_tags' => null,
        'disable_root_datastore' => null,
        'has_snapshots' => null,
        'has_spec_templates' => null,
        'has_preview' => null,
        'zone_pool_required' => null,
        'plan_requires_pool' => null,
        'has_folders' => null,
        'option_types' => null,
        'custom_option_types' => null,
        'network_types' => null,
        'storage_types' => null,
        'root_storage_types' => null,
        'controller_types' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'description' => 'description',
        'code' => 'code',
        'acl_enabled' => 'aclEnabled',
        'multi_tenant' => 'multiTenant',
        'managed' => 'managed',
        'host_network' => 'hostNetwork',
        'custom_supported' => 'customSupported',
        'map_ports' => 'mapPorts',
        'export_server' => 'exportServer',
        'view_set' => 'viewSet',
        'server_type' => 'serverType',
        'host_type' => 'hostType',
        'add_volumes' => 'addVolumes',
        'has_volumes' => 'hasVolumes',
        'has_datastore' => 'hasDatastore',
        'has_networks' => 'hasNetworks',
        'max_networks' => 'maxNetworks',
        'customize_volume' => 'customizeVolume',
        'root_disk_customizable' => 'rootDiskCustomizable',
        'root_disk_size_known' => 'rootDiskSizeKnown',
        'root_disk_resizable' => 'rootDiskResizable',
        'lvm_supported' => 'lvmSupported',
        'host_disk_mode' => 'hostDiskMode',
        'min_disk' => 'minDisk',
        'max_disk' => 'maxDisk',
        'resize_copies_volumes' => 'resizeCopiesVolumes',
        'supports_auto_datastore' => 'supportsAutoDatastore',
        'has_zone_pools' => 'hasZonePools',
        'has_security_groups' => 'hasSecurityGroups',
        'has_parameters' => 'hasParameters',
        'can_enforce_tags' => 'canEnforceTags',
        'disable_root_datastore' => 'disableRootDatastore',
        'has_snapshots' => 'hasSnapshots',
        'has_spec_templates' => 'hasSpecTemplates',
        'has_preview' => 'hasPreview',
        'zone_pool_required' => 'zonePoolRequired',
        'plan_requires_pool' => 'planRequiresPool',
        'has_folders' => 'hasFolders',
        'option_types' => 'optionTypes',
        'custom_option_types' => 'customOptionTypes',
        'network_types' => 'networkTypes',
        'storage_types' => 'storageTypes',
        'root_storage_types' => 'rootStorageTypes',
        'controller_types' => 'controllerTypes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'description' => 'setDescription',
        'code' => 'setCode',
        'acl_enabled' => 'setAclEnabled',
        'multi_tenant' => 'setMultiTenant',
        'managed' => 'setManaged',
        'host_network' => 'setHostNetwork',
        'custom_supported' => 'setCustomSupported',
        'map_ports' => 'setMapPorts',
        'export_server' => 'setExportServer',
        'view_set' => 'setViewSet',
        'server_type' => 'setServerType',
        'host_type' => 'setHostType',
        'add_volumes' => 'setAddVolumes',
        'has_volumes' => 'setHasVolumes',
        'has_datastore' => 'setHasDatastore',
        'has_networks' => 'setHasNetworks',
        'max_networks' => 'setMaxNetworks',
        'customize_volume' => 'setCustomizeVolume',
        'root_disk_customizable' => 'setRootDiskCustomizable',
        'root_disk_size_known' => 'setRootDiskSizeKnown',
        'root_disk_resizable' => 'setRootDiskResizable',
        'lvm_supported' => 'setLvmSupported',
        'host_disk_mode' => 'setHostDiskMode',
        'min_disk' => 'setMinDisk',
        'max_disk' => 'setMaxDisk',
        'resize_copies_volumes' => 'setResizeCopiesVolumes',
        'supports_auto_datastore' => 'setSupportsAutoDatastore',
        'has_zone_pools' => 'setHasZonePools',
        'has_security_groups' => 'setHasSecurityGroups',
        'has_parameters' => 'setHasParameters',
        'can_enforce_tags' => 'setCanEnforceTags',
        'disable_root_datastore' => 'setDisableRootDatastore',
        'has_snapshots' => 'setHasSnapshots',
        'has_spec_templates' => 'setHasSpecTemplates',
        'has_preview' => 'setHasPreview',
        'zone_pool_required' => 'setZonePoolRequired',
        'plan_requires_pool' => 'setPlanRequiresPool',
        'has_folders' => 'setHasFolders',
        'option_types' => 'setOptionTypes',
        'custom_option_types' => 'setCustomOptionTypes',
        'network_types' => 'setNetworkTypes',
        'storage_types' => 'setStorageTypes',
        'root_storage_types' => 'setRootStorageTypes',
        'controller_types' => 'setControllerTypes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'description' => 'getDescription',
        'code' => 'getCode',
        'acl_enabled' => 'getAclEnabled',
        'multi_tenant' => 'getMultiTenant',
        'managed' => 'getManaged',
        'host_network' => 'getHostNetwork',
        'custom_supported' => 'getCustomSupported',
        'map_ports' => 'getMapPorts',
        'export_server' => 'getExportServer',
        'view_set' => 'getViewSet',
        'server_type' => 'getServerType',
        'host_type' => 'getHostType',
        'add_volumes' => 'getAddVolumes',
        'has_volumes' => 'getHasVolumes',
        'has_datastore' => 'getHasDatastore',
        'has_networks' => 'getHasNetworks',
        'max_networks' => 'getMaxNetworks',
        'customize_volume' => 'getCustomizeVolume',
        'root_disk_customizable' => 'getRootDiskCustomizable',
        'root_disk_size_known' => 'getRootDiskSizeKnown',
        'root_disk_resizable' => 'getRootDiskResizable',
        'lvm_supported' => 'getLvmSupported',
        'host_disk_mode' => 'getHostDiskMode',
        'min_disk' => 'getMinDisk',
        'max_disk' => 'getMaxDisk',
        'resize_copies_volumes' => 'getResizeCopiesVolumes',
        'supports_auto_datastore' => 'getSupportsAutoDatastore',
        'has_zone_pools' => 'getHasZonePools',
        'has_security_groups' => 'getHasSecurityGroups',
        'has_parameters' => 'getHasParameters',
        'can_enforce_tags' => 'getCanEnforceTags',
        'disable_root_datastore' => 'getDisableRootDatastore',
        'has_snapshots' => 'getHasSnapshots',
        'has_spec_templates' => 'getHasSpecTemplates',
        'has_preview' => 'getHasPreview',
        'zone_pool_required' => 'getZonePoolRequired',
        'plan_requires_pool' => 'getPlanRequiresPool',
        'has_folders' => 'getHasFolders',
        'option_types' => 'getOptionTypes',
        'custom_option_types' => 'getCustomOptionTypes',
        'network_types' => 'getNetworkTypes',
        'storage_types' => 'getStorageTypes',
        'root_storage_types' => 'getRootStorageTypes',
        'controller_types' => 'getControllerTypes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['code'] = $data['code'] ?? null;
        $this->container['acl_enabled'] = $data['acl_enabled'] ?? null;
        $this->container['multi_tenant'] = $data['multi_tenant'] ?? null;
        $this->container['managed'] = $data['managed'] ?? null;
        $this->container['host_network'] = $data['host_network'] ?? null;
        $this->container['custom_supported'] = $data['custom_supported'] ?? null;
        $this->container['map_ports'] = $data['map_ports'] ?? null;
        $this->container['export_server'] = $data['export_server'] ?? null;
        $this->container['view_set'] = $data['view_set'] ?? null;
        $this->container['server_type'] = $data['server_type'] ?? null;
        $this->container['host_type'] = $data['host_type'] ?? null;
        $this->container['add_volumes'] = $data['add_volumes'] ?? null;
        $this->container['has_volumes'] = $data['has_volumes'] ?? null;
        $this->container['has_datastore'] = $data['has_datastore'] ?? null;
        $this->container['has_networks'] = $data['has_networks'] ?? null;
        $this->container['max_networks'] = $data['max_networks'] ?? null;
        $this->container['customize_volume'] = $data['customize_volume'] ?? null;
        $this->container['root_disk_customizable'] = $data['root_disk_customizable'] ?? null;
        $this->container['root_disk_size_known'] = $data['root_disk_size_known'] ?? null;
        $this->container['root_disk_resizable'] = $data['root_disk_resizable'] ?? null;
        $this->container['lvm_supported'] = $data['lvm_supported'] ?? null;
        $this->container['host_disk_mode'] = $data['host_disk_mode'] ?? null;
        $this->container['min_disk'] = $data['min_disk'] ?? null;
        $this->container['max_disk'] = $data['max_disk'] ?? null;
        $this->container['resize_copies_volumes'] = $data['resize_copies_volumes'] ?? null;
        $this->container['supports_auto_datastore'] = $data['supports_auto_datastore'] ?? null;
        $this->container['has_zone_pools'] = $data['has_zone_pools'] ?? null;
        $this->container['has_security_groups'] = $data['has_security_groups'] ?? null;
        $this->container['has_parameters'] = $data['has_parameters'] ?? null;
        $this->container['can_enforce_tags'] = $data['can_enforce_tags'] ?? null;
        $this->container['disable_root_datastore'] = $data['disable_root_datastore'] ?? null;
        $this->container['has_snapshots'] = $data['has_snapshots'] ?? null;
        $this->container['has_spec_templates'] = $data['has_spec_templates'] ?? null;
        $this->container['has_preview'] = $data['has_preview'] ?? null;
        $this->container['zone_pool_required'] = $data['zone_pool_required'] ?? null;
        $this->container['plan_requires_pool'] = $data['plan_requires_pool'] ?? null;
        $this->container['has_folders'] = $data['has_folders'] ?? null;
        $this->container['option_types'] = $data['option_types'] ?? null;
        $this->container['custom_option_types'] = $data['custom_option_types'] ?? null;
        $this->container['network_types'] = $data['network_types'] ?? null;
        $this->container['storage_types'] = $data['storage_types'] ?? null;
        $this->container['root_storage_types'] = $data['root_storage_types'] ?? null;
        $this->container['controller_types'] = $data['controller_types'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string|null
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string|null $code code
     *
     * @return self
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets acl_enabled
     *
     * @return bool|null
     */
    public function getAclEnabled()
    {
        return $this->container['acl_enabled'];
    }

    /**
     * Sets acl_enabled
     *
     * @param bool|null $acl_enabled acl_enabled
     *
     * @return self
     */
    public function setAclEnabled($acl_enabled)
    {
        $this->container['acl_enabled'] = $acl_enabled;

        return $this;
    }

    /**
     * Gets multi_tenant
     *
     * @return bool|null
     */
    public function getMultiTenant()
    {
        return $this->container['multi_tenant'];
    }

    /**
     * Sets multi_tenant
     *
     * @param bool|null $multi_tenant multi_tenant
     *
     * @return self
     */
    public function setMultiTenant($multi_tenant)
    {
        $this->container['multi_tenant'] = $multi_tenant;

        return $this;
    }

    /**
     * Gets managed
     *
     * @return bool|null
     */
    public function getManaged()
    {
        return $this->container['managed'];
    }

    /**
     * Sets managed
     *
     * @param bool|null $managed managed
     *
     * @return self
     */
    public function setManaged($managed)
    {
        $this->container['managed'] = $managed;

        return $this;
    }

    /**
     * Gets host_network
     *
     * @return bool|null
     */
    public function getHostNetwork()
    {
        return $this->container['host_network'];
    }

    /**
     * Sets host_network
     *
     * @param bool|null $host_network host_network
     *
     * @return self
     */
    public function setHostNetwork($host_network)
    {
        $this->container['host_network'] = $host_network;

        return $this;
    }

    /**
     * Gets custom_supported
     *
     * @return bool|null
     */
    public function getCustomSupported()
    {
        return $this->container['custom_supported'];
    }

    /**
     * Sets custom_supported
     *
     * @param bool|null $custom_supported custom_supported
     *
     * @return self
     */
    public function setCustomSupported($custom_supported)
    {
        $this->container['custom_supported'] = $custom_supported;

        return $this;
    }

    /**
     * Gets map_ports
     *
     * @return bool|null
     */
    public function getMapPorts()
    {
        return $this->container['map_ports'];
    }

    /**
     * Sets map_ports
     *
     * @param bool|null $map_ports map_ports
     *
     * @return self
     */
    public function setMapPorts($map_ports)
    {
        $this->container['map_ports'] = $map_ports;

        return $this;
    }

    /**
     * Gets export_server
     *
     * @return bool|null
     */
    public function getExportServer()
    {
        return $this->container['export_server'];
    }

    /**
     * Sets export_server
     *
     * @param bool|null $export_server export_server
     *
     * @return self
     */
    public function setExportServer($export_server)
    {
        $this->container['export_server'] = $export_server;

        return $this;
    }

    /**
     * Gets view_set
     *
     * @return string|null
     */
    public function getViewSet()
    {
        return $this->container['view_set'];
    }

    /**
     * Sets view_set
     *
     * @param string|null $view_set view_set
     *
     * @return self
     */
    public function setViewSet($view_set)
    {
        $this->container['view_set'] = $view_set;

        return $this;
    }

    /**
     * Gets server_type
     *
     * @return string|null
     */
    public function getServerType()
    {
        return $this->container['server_type'];
    }

    /**
     * Sets server_type
     *
     * @param string|null $server_type server_type
     *
     * @return self
     */
    public function setServerType($server_type)
    {
        $this->container['server_type'] = $server_type;

        return $this;
    }

    /**
     * Gets host_type
     *
     * @return string|null
     */
    public function getHostType()
    {
        return $this->container['host_type'];
    }

    /**
     * Sets host_type
     *
     * @param string|null $host_type host_type
     *
     * @return self
     */
    public function setHostType($host_type)
    {
        $this->container['host_type'] = $host_type;

        return $this;
    }

    /**
     * Gets add_volumes
     *
     * @return bool|null
     */
    public function getAddVolumes()
    {
        return $this->container['add_volumes'];
    }

    /**
     * Sets add_volumes
     *
     * @param bool|null $add_volumes add_volumes
     *
     * @return self
     */
    public function setAddVolumes($add_volumes)
    {
        $this->container['add_volumes'] = $add_volumes;

        return $this;
    }

    /**
     * Gets has_volumes
     *
     * @return bool|null
     */
    public function getHasVolumes()
    {
        return $this->container['has_volumes'];
    }

    /**
     * Sets has_volumes
     *
     * @param bool|null $has_volumes has_volumes
     *
     * @return self
     */
    public function setHasVolumes($has_volumes)
    {
        $this->container['has_volumes'] = $has_volumes;

        return $this;
    }

    /**
     * Gets has_datastore
     *
     * @return bool|null
     */
    public function getHasDatastore()
    {
        return $this->container['has_datastore'];
    }

    /**
     * Sets has_datastore
     *
     * @param bool|null $has_datastore has_datastore
     *
     * @return self
     */
    public function setHasDatastore($has_datastore)
    {
        $this->container['has_datastore'] = $has_datastore;

        return $this;
    }

    /**
     * Gets has_networks
     *
     * @return bool|null
     */
    public function getHasNetworks()
    {
        return $this->container['has_networks'];
    }

    /**
     * Sets has_networks
     *
     * @param bool|null $has_networks has_networks
     *
     * @return self
     */
    public function setHasNetworks($has_networks)
    {
        $this->container['has_networks'] = $has_networks;

        return $this;
    }

    /**
     * Gets max_networks
     *
     * @return int|null
     */
    public function getMaxNetworks()
    {
        return $this->container['max_networks'];
    }

    /**
     * Sets max_networks
     *
     * @param int|null $max_networks max_networks
     *
     * @return self
     */
    public function setMaxNetworks($max_networks)
    {
        $this->container['max_networks'] = $max_networks;

        return $this;
    }

    /**
     * Gets customize_volume
     *
     * @return bool|null
     */
    public function getCustomizeVolume()
    {
        return $this->container['customize_volume'];
    }

    /**
     * Sets customize_volume
     *
     * @param bool|null $customize_volume customize_volume
     *
     * @return self
     */
    public function setCustomizeVolume($customize_volume)
    {
        $this->container['customize_volume'] = $customize_volume;

        return $this;
    }

    /**
     * Gets root_disk_customizable
     *
     * @return bool|null
     */
    public function getRootDiskCustomizable()
    {
        return $this->container['root_disk_customizable'];
    }

    /**
     * Sets root_disk_customizable
     *
     * @param bool|null $root_disk_customizable root_disk_customizable
     *
     * @return self
     */
    public function setRootDiskCustomizable($root_disk_customizable)
    {
        $this->container['root_disk_customizable'] = $root_disk_customizable;

        return $this;
    }

    /**
     * Gets root_disk_size_known
     *
     * @return bool|null
     */
    public function getRootDiskSizeKnown()
    {
        return $this->container['root_disk_size_known'];
    }

    /**
     * Sets root_disk_size_known
     *
     * @param bool|null $root_disk_size_known root_disk_size_known
     *
     * @return self
     */
    public function setRootDiskSizeKnown($root_disk_size_known)
    {
        $this->container['root_disk_size_known'] = $root_disk_size_known;

        return $this;
    }

    /**
     * Gets root_disk_resizable
     *
     * @return bool|null
     */
    public function getRootDiskResizable()
    {
        return $this->container['root_disk_resizable'];
    }

    /**
     * Sets root_disk_resizable
     *
     * @param bool|null $root_disk_resizable root_disk_resizable
     *
     * @return self
     */
    public function setRootDiskResizable($root_disk_resizable)
    {
        $this->container['root_disk_resizable'] = $root_disk_resizable;

        return $this;
    }

    /**
     * Gets lvm_supported
     *
     * @return bool|null
     */
    public function getLvmSupported()
    {
        return $this->container['lvm_supported'];
    }

    /**
     * Sets lvm_supported
     *
     * @param bool|null $lvm_supported lvm_supported
     *
     * @return self
     */
    public function setLvmSupported($lvm_supported)
    {
        $this->container['lvm_supported'] = $lvm_supported;

        return $this;
    }

    /**
     * Gets host_disk_mode
     *
     * @return string|null
     */
    public function getHostDiskMode()
    {
        return $this->container['host_disk_mode'];
    }

    /**
     * Sets host_disk_mode
     *
     * @param string|null $host_disk_mode host_disk_mode
     *
     * @return self
     */
    public function setHostDiskMode($host_disk_mode)
    {
        $this->container['host_disk_mode'] = $host_disk_mode;

        return $this;
    }

    /**
     * Gets min_disk
     *
     * @return int|null
     */
    public function getMinDisk()
    {
        return $this->container['min_disk'];
    }

    /**
     * Sets min_disk
     *
     * @param int|null $min_disk min_disk
     *
     * @return self
     */
    public function setMinDisk($min_disk)
    {
        $this->container['min_disk'] = $min_disk;

        return $this;
    }

    /**
     * Gets max_disk
     *
     * @return string|null
     */
    public function getMaxDisk()
    {
        return $this->container['max_disk'];
    }

    /**
     * Sets max_disk
     *
     * @param string|null $max_disk max_disk
     *
     * @return self
     */
    public function setMaxDisk($max_disk)
    {
        $this->container['max_disk'] = $max_disk;

        return $this;
    }

    /**
     * Gets resize_copies_volumes
     *
     * @return bool|null
     */
    public function getResizeCopiesVolumes()
    {
        return $this->container['resize_copies_volumes'];
    }

    /**
     * Sets resize_copies_volumes
     *
     * @param bool|null $resize_copies_volumes resize_copies_volumes
     *
     * @return self
     */
    public function setResizeCopiesVolumes($resize_copies_volumes)
    {
        $this->container['resize_copies_volumes'] = $resize_copies_volumes;

        return $this;
    }

    /**
     * Gets supports_auto_datastore
     *
     * @return bool|null
     */
    public function getSupportsAutoDatastore()
    {
        return $this->container['supports_auto_datastore'];
    }

    /**
     * Sets supports_auto_datastore
     *
     * @param bool|null $supports_auto_datastore supports_auto_datastore
     *
     * @return self
     */
    public function setSupportsAutoDatastore($supports_auto_datastore)
    {
        $this->container['supports_auto_datastore'] = $supports_auto_datastore;

        return $this;
    }

    /**
     * Gets has_zone_pools
     *
     * @return bool|null
     */
    public function getHasZonePools()
    {
        return $this->container['has_zone_pools'];
    }

    /**
     * Sets has_zone_pools
     *
     * @param bool|null $has_zone_pools has_zone_pools
     *
     * @return self
     */
    public function setHasZonePools($has_zone_pools)
    {
        $this->container['has_zone_pools'] = $has_zone_pools;

        return $this;
    }

    /**
     * Gets has_security_groups
     *
     * @return bool|null
     */
    public function getHasSecurityGroups()
    {
        return $this->container['has_security_groups'];
    }

    /**
     * Sets has_security_groups
     *
     * @param bool|null $has_security_groups has_security_groups
     *
     * @return self
     */
    public function setHasSecurityGroups($has_security_groups)
    {
        $this->container['has_security_groups'] = $has_security_groups;

        return $this;
    }

    /**
     * Gets has_parameters
     *
     * @return bool|null
     */
    public function getHasParameters()
    {
        return $this->container['has_parameters'];
    }

    /**
     * Sets has_parameters
     *
     * @param bool|null $has_parameters has_parameters
     *
     * @return self
     */
    public function setHasParameters($has_parameters)
    {
        $this->container['has_parameters'] = $has_parameters;

        return $this;
    }

    /**
     * Gets can_enforce_tags
     *
     * @return bool|null
     */
    public function getCanEnforceTags()
    {
        return $this->container['can_enforce_tags'];
    }

    /**
     * Sets can_enforce_tags
     *
     * @param bool|null $can_enforce_tags can_enforce_tags
     *
     * @return self
     */
    public function setCanEnforceTags($can_enforce_tags)
    {
        $this->container['can_enforce_tags'] = $can_enforce_tags;

        return $this;
    }

    /**
     * Gets disable_root_datastore
     *
     * @return bool|null
     */
    public function getDisableRootDatastore()
    {
        return $this->container['disable_root_datastore'];
    }

    /**
     * Sets disable_root_datastore
     *
     * @param bool|null $disable_root_datastore disable_root_datastore
     *
     * @return self
     */
    public function setDisableRootDatastore($disable_root_datastore)
    {
        $this->container['disable_root_datastore'] = $disable_root_datastore;

        return $this;
    }

    /**
     * Gets has_snapshots
     *
     * @return bool|null
     */
    public function getHasSnapshots()
    {
        return $this->container['has_snapshots'];
    }

    /**
     * Sets has_snapshots
     *
     * @param bool|null $has_snapshots has_snapshots
     *
     * @return self
     */
    public function setHasSnapshots($has_snapshots)
    {
        $this->container['has_snapshots'] = $has_snapshots;

        return $this;
    }

    /**
     * Gets has_spec_templates
     *
     * @return bool|null
     */
    public function getHasSpecTemplates()
    {
        return $this->container['has_spec_templates'];
    }

    /**
     * Sets has_spec_templates
     *
     * @param bool|null $has_spec_templates has_spec_templates
     *
     * @return self
     */
    public function setHasSpecTemplates($has_spec_templates)
    {
        $this->container['has_spec_templates'] = $has_spec_templates;

        return $this;
    }

    /**
     * Gets has_preview
     *
     * @return bool|null
     */
    public function getHasPreview()
    {
        return $this->container['has_preview'];
    }

    /**
     * Sets has_preview
     *
     * @param bool|null $has_preview has_preview
     *
     * @return self
     */
    public function setHasPreview($has_preview)
    {
        $this->container['has_preview'] = $has_preview;

        return $this;
    }

    /**
     * Gets zone_pool_required
     *
     * @return bool|null
     */
    public function getZonePoolRequired()
    {
        return $this->container['zone_pool_required'];
    }

    /**
     * Sets zone_pool_required
     *
     * @param bool|null $zone_pool_required zone_pool_required
     *
     * @return self
     */
    public function setZonePoolRequired($zone_pool_required)
    {
        $this->container['zone_pool_required'] = $zone_pool_required;

        return $this;
    }

    /**
     * Gets plan_requires_pool
     *
     * @return bool|null
     */
    public function getPlanRequiresPool()
    {
        return $this->container['plan_requires_pool'];
    }

    /**
     * Sets plan_requires_pool
     *
     * @param bool|null $plan_requires_pool plan_requires_pool
     *
     * @return self
     */
    public function setPlanRequiresPool($plan_requires_pool)
    {
        $this->container['plan_requires_pool'] = $plan_requires_pool;

        return $this;
    }

    /**
     * Gets has_folders
     *
     * @return bool|null
     */
    public function getHasFolders()
    {
        return $this->container['has_folders'];
    }

    /**
     * Sets has_folders
     *
     * @param bool|null $has_folders has_folders
     *
     * @return self
     */
    public function setHasFolders($has_folders)
    {
        $this->container['has_folders'] = $has_folders;

        return $this;
    }

    /**
     * Gets option_types
     *
     * @return \OpenAPI\Client\Model\OptionType[]|null
     */
    public function getOptionTypes()
    {
        return $this->container['option_types'];
    }

    /**
     * Sets option_types
     *
     * @param \OpenAPI\Client\Model\OptionType[]|null $option_types option_types
     *
     * @return self
     */
    public function setOptionTypes($option_types)
    {
        $this->container['option_types'] = $option_types;

        return $this;
    }

    /**
     * Gets custom_option_types
     *
     * @return \OpenAPI\Client\Model\OptionType[]|null
     */
    public function getCustomOptionTypes()
    {
        return $this->container['custom_option_types'];
    }

    /**
     * Sets custom_option_types
     *
     * @param \OpenAPI\Client\Model\OptionType[]|null $custom_option_types custom_option_types
     *
     * @return self
     */
    public function setCustomOptionTypes($custom_option_types)
    {
        $this->container['custom_option_types'] = $custom_option_types;

        return $this;
    }

    /**
     * Gets network_types
     *
     * @return \OpenAPI\Client\Model\NetworkType[]|null
     */
    public function getNetworkTypes()
    {
        return $this->container['network_types'];
    }

    /**
     * Sets network_types
     *
     * @param \OpenAPI\Client\Model\NetworkType[]|null $network_types network_types
     *
     * @return self
     */
    public function setNetworkTypes($network_types)
    {
        $this->container['network_types'] = $network_types;

        return $this;
    }

    /**
     * Gets storage_types
     *
     * @return \OpenAPI\Client\Model\StorageType[]|null
     */
    public function getStorageTypes()
    {
        return $this->container['storage_types'];
    }

    /**
     * Sets storage_types
     *
     * @param \OpenAPI\Client\Model\StorageType[]|null $storage_types storage_types
     *
     * @return self
     */
    public function setStorageTypes($storage_types)
    {
        $this->container['storage_types'] = $storage_types;

        return $this;
    }

    /**
     * Gets root_storage_types
     *
     * @return \OpenAPI\Client\Model\StorageType[]|null
     */
    public function getRootStorageTypes()
    {
        return $this->container['root_storage_types'];
    }

    /**
     * Sets root_storage_types
     *
     * @param \OpenAPI\Client\Model\StorageType[]|null $root_storage_types root_storage_types
     *
     * @return self
     */
    public function setRootStorageTypes($root_storage_types)
    {
        $this->container['root_storage_types'] = $root_storage_types;

        return $this;
    }

    /**
     * Gets controller_types
     *
     * @return \OpenAPI\Client\Model\ControllerType[]|null
     */
    public function getControllerTypes()
    {
        return $this->container['controller_types'];
    }

    /**
     * Sets controller_types
     *
     * @param \OpenAPI\Client\Model\ControllerType[]|null $controller_types controller_types
     *
     * @return self
     */
    public function setControllerTypes($controller_types)
    {
        $this->container['controller_types'] = $controller_types;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


