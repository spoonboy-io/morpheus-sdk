<?php
/**
 * IntegrationAnsibleConfig
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * IntegrationAnsibleConfig Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class IntegrationAnsibleConfig implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'integrationAnsible_config';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'inventory' => 'string',
        'default_branch' => 'string',
        'cache_enabled' => 'string',
        'ansible_playbooks' => 'string',
        'ansible_roles' => 'string',
        'ansible_group_vars' => 'string',
        'ansible_host_vars' => 'string',
        'ansible_command_bus' => 'bool',
        'ansible_verbose' => 'bool',
        'ansible_galaxy_enabled' => 'bool',
        'ansible_default_branch' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'inventory' => null,
        'default_branch' => null,
        'cache_enabled' => null,
        'ansible_playbooks' => null,
        'ansible_roles' => null,
        'ansible_group_vars' => null,
        'ansible_host_vars' => null,
        'ansible_command_bus' => null,
        'ansible_verbose' => null,
        'ansible_galaxy_enabled' => null,
        'ansible_default_branch' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'inventory' => 'inventory',
        'default_branch' => 'defaultBranch',
        'cache_enabled' => 'cacheEnabled',
        'ansible_playbooks' => 'ansiblePlaybooks',
        'ansible_roles' => 'ansibleRoles',
        'ansible_group_vars' => 'ansibleGroupVars',
        'ansible_host_vars' => 'ansibleHostVars',
        'ansible_command_bus' => 'ansibleCommandBus',
        'ansible_verbose' => 'ansibleVerbose',
        'ansible_galaxy_enabled' => 'ansibleGalaxyEnabled',
        'ansible_default_branch' => 'ansibleDefaultBranch'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'inventory' => 'setInventory',
        'default_branch' => 'setDefaultBranch',
        'cache_enabled' => 'setCacheEnabled',
        'ansible_playbooks' => 'setAnsiblePlaybooks',
        'ansible_roles' => 'setAnsibleRoles',
        'ansible_group_vars' => 'setAnsibleGroupVars',
        'ansible_host_vars' => 'setAnsibleHostVars',
        'ansible_command_bus' => 'setAnsibleCommandBus',
        'ansible_verbose' => 'setAnsibleVerbose',
        'ansible_galaxy_enabled' => 'setAnsibleGalaxyEnabled',
        'ansible_default_branch' => 'setAnsibleDefaultBranch'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'inventory' => 'getInventory',
        'default_branch' => 'getDefaultBranch',
        'cache_enabled' => 'getCacheEnabled',
        'ansible_playbooks' => 'getAnsiblePlaybooks',
        'ansible_roles' => 'getAnsibleRoles',
        'ansible_group_vars' => 'getAnsibleGroupVars',
        'ansible_host_vars' => 'getAnsibleHostVars',
        'ansible_command_bus' => 'getAnsibleCommandBus',
        'ansible_verbose' => 'getAnsibleVerbose',
        'ansible_galaxy_enabled' => 'getAnsibleGalaxyEnabled',
        'ansible_default_branch' => 'getAnsibleDefaultBranch'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['inventory'] = $data['inventory'] ?? null;
        $this->container['default_branch'] = $data['default_branch'] ?? null;
        $this->container['cache_enabled'] = $data['cache_enabled'] ?? null;
        $this->container['ansible_playbooks'] = $data['ansible_playbooks'] ?? null;
        $this->container['ansible_roles'] = $data['ansible_roles'] ?? null;
        $this->container['ansible_group_vars'] = $data['ansible_group_vars'] ?? null;
        $this->container['ansible_host_vars'] = $data['ansible_host_vars'] ?? null;
        $this->container['ansible_command_bus'] = $data['ansible_command_bus'] ?? null;
        $this->container['ansible_verbose'] = $data['ansible_verbose'] ?? null;
        $this->container['ansible_galaxy_enabled'] = $data['ansible_galaxy_enabled'] ?? null;
        $this->container['ansible_default_branch'] = $data['ansible_default_branch'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets inventory
     *
     * @return string|null
     */
    public function getInventory()
    {
        return $this->container['inventory'];
    }

    /**
     * Sets inventory
     *
     * @param string|null $inventory inventory
     *
     * @return self
     */
    public function setInventory($inventory)
    {
        $this->container['inventory'] = $inventory;

        return $this;
    }

    /**
     * Gets default_branch
     *
     * @return string|null
     */
    public function getDefaultBranch()
    {
        return $this->container['default_branch'];
    }

    /**
     * Sets default_branch
     *
     * @param string|null $default_branch default_branch
     *
     * @return self
     */
    public function setDefaultBranch($default_branch)
    {
        $this->container['default_branch'] = $default_branch;

        return $this;
    }

    /**
     * Gets cache_enabled
     *
     * @return string|null
     */
    public function getCacheEnabled()
    {
        return $this->container['cache_enabled'];
    }

    /**
     * Sets cache_enabled
     *
     * @param string|null $cache_enabled cache_enabled
     *
     * @return self
     */
    public function setCacheEnabled($cache_enabled)
    {
        $this->container['cache_enabled'] = $cache_enabled;

        return $this;
    }

    /**
     * Gets ansible_playbooks
     *
     * @return string|null
     */
    public function getAnsiblePlaybooks()
    {
        return $this->container['ansible_playbooks'];
    }

    /**
     * Sets ansible_playbooks
     *
     * @param string|null $ansible_playbooks ansible_playbooks
     *
     * @return self
     */
    public function setAnsiblePlaybooks($ansible_playbooks)
    {
        $this->container['ansible_playbooks'] = $ansible_playbooks;

        return $this;
    }

    /**
     * Gets ansible_roles
     *
     * @return string|null
     */
    public function getAnsibleRoles()
    {
        return $this->container['ansible_roles'];
    }

    /**
     * Sets ansible_roles
     *
     * @param string|null $ansible_roles ansible_roles
     *
     * @return self
     */
    public function setAnsibleRoles($ansible_roles)
    {
        $this->container['ansible_roles'] = $ansible_roles;

        return $this;
    }

    /**
     * Gets ansible_group_vars
     *
     * @return string|null
     */
    public function getAnsibleGroupVars()
    {
        return $this->container['ansible_group_vars'];
    }

    /**
     * Sets ansible_group_vars
     *
     * @param string|null $ansible_group_vars ansible_group_vars
     *
     * @return self
     */
    public function setAnsibleGroupVars($ansible_group_vars)
    {
        $this->container['ansible_group_vars'] = $ansible_group_vars;

        return $this;
    }

    /**
     * Gets ansible_host_vars
     *
     * @return string|null
     */
    public function getAnsibleHostVars()
    {
        return $this->container['ansible_host_vars'];
    }

    /**
     * Sets ansible_host_vars
     *
     * @param string|null $ansible_host_vars ansible_host_vars
     *
     * @return self
     */
    public function setAnsibleHostVars($ansible_host_vars)
    {
        $this->container['ansible_host_vars'] = $ansible_host_vars;

        return $this;
    }

    /**
     * Gets ansible_command_bus
     *
     * @return bool|null
     */
    public function getAnsibleCommandBus()
    {
        return $this->container['ansible_command_bus'];
    }

    /**
     * Sets ansible_command_bus
     *
     * @param bool|null $ansible_command_bus ansible_command_bus
     *
     * @return self
     */
    public function setAnsibleCommandBus($ansible_command_bus)
    {
        $this->container['ansible_command_bus'] = $ansible_command_bus;

        return $this;
    }

    /**
     * Gets ansible_verbose
     *
     * @return bool|null
     */
    public function getAnsibleVerbose()
    {
        return $this->container['ansible_verbose'];
    }

    /**
     * Sets ansible_verbose
     *
     * @param bool|null $ansible_verbose ansible_verbose
     *
     * @return self
     */
    public function setAnsibleVerbose($ansible_verbose)
    {
        $this->container['ansible_verbose'] = $ansible_verbose;

        return $this;
    }

    /**
     * Gets ansible_galaxy_enabled
     *
     * @return bool|null
     */
    public function getAnsibleGalaxyEnabled()
    {
        return $this->container['ansible_galaxy_enabled'];
    }

    /**
     * Sets ansible_galaxy_enabled
     *
     * @param bool|null $ansible_galaxy_enabled ansible_galaxy_enabled
     *
     * @return self
     */
    public function setAnsibleGalaxyEnabled($ansible_galaxy_enabled)
    {
        $this->container['ansible_galaxy_enabled'] = $ansible_galaxy_enabled;

        return $this;
    }

    /**
     * Gets ansible_default_branch
     *
     * @return string|null
     */
    public function getAnsibleDefaultBranch()
    {
        return $this->container['ansible_default_branch'];
    }

    /**
     * Sets ansible_default_branch
     *
     * @param string|null $ansible_default_branch ansible_default_branch
     *
     * @return self
     */
    public function setAnsibleDefaultBranch($ansible_default_branch)
    {
        $this->container['ansible_default_branch'] = $ansible_default_branch;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


