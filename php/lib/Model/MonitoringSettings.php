<?php
/**
 * MonitoringSettings
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * MonitoringSettings Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class MonitoringSettings implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'monitoringSettings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'auto_manage_checks' => 'bool',
        'availability_time_frame' => 'int',
        'availability_precision' => 'int',
        'default_check_interval' => 'int',
        'service_now' => '\OpenAPI\Client\Model\MonitoringSettingsServiceNow'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'auto_manage_checks' => null,
        'availability_time_frame' => 'int32',
        'availability_precision' => 'int32',
        'default_check_interval' => 'int32',
        'service_now' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'auto_manage_checks' => 'autoManageChecks',
        'availability_time_frame' => 'availabilityTimeFrame',
        'availability_precision' => 'availabilityPrecision',
        'default_check_interval' => 'defaultCheckInterval',
        'service_now' => 'serviceNow'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'auto_manage_checks' => 'setAutoManageChecks',
        'availability_time_frame' => 'setAvailabilityTimeFrame',
        'availability_precision' => 'setAvailabilityPrecision',
        'default_check_interval' => 'setDefaultCheckInterval',
        'service_now' => 'setServiceNow'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'auto_manage_checks' => 'getAutoManageChecks',
        'availability_time_frame' => 'getAvailabilityTimeFrame',
        'availability_precision' => 'getAvailabilityPrecision',
        'default_check_interval' => 'getDefaultCheckInterval',
        'service_now' => 'getServiceNow'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['auto_manage_checks'] = $data['auto_manage_checks'] ?? null;
        $this->container['availability_time_frame'] = $data['availability_time_frame'] ?? null;
        $this->container['availability_precision'] = $data['availability_precision'] ?? null;
        $this->container['default_check_interval'] = $data['default_check_interval'] ?? null;
        $this->container['service_now'] = $data['service_now'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets auto_manage_checks
     *
     * @return bool|null
     */
    public function getAutoManageChecks()
    {
        return $this->container['auto_manage_checks'];
    }

    /**
     * Sets auto_manage_checks
     *
     * @param bool|null $auto_manage_checks Auto Create Checks
     *
     * @return self
     */
    public function setAutoManageChecks($auto_manage_checks)
    {
        $this->container['auto_manage_checks'] = $auto_manage_checks;

        return $this;
    }

    /**
     * Gets availability_time_frame
     *
     * @return int|null
     */
    public function getAvailabilityTimeFrame()
    {
        return $this->container['availability_time_frame'];
    }

    /**
     * Sets availability_time_frame
     *
     * @param int|null $availability_time_frame Availability Time Frame. The number of days availability should be calculated for. Changes will not take effect until your checks have passed their check interval.
     *
     * @return self
     */
    public function setAvailabilityTimeFrame($availability_time_frame)
    {
        $this->container['availability_time_frame'] = $availability_time_frame;

        return $this;
    }

    /**
     * Gets availability_precision
     *
     * @return int|null
     */
    public function getAvailabilityPrecision()
    {
        return $this->container['availability_precision'];
    }

    /**
     * Sets availability_precision
     *
     * @param int|null $availability_precision Availability Precision. The number of decimal places availability should be displayed in. Can be anywhere between 0 and 5.
     *
     * @return self
     */
    public function setAvailabilityPrecision($availability_precision)
    {
        $this->container['availability_precision'] = $availability_precision;

        return $this;
    }

    /**
     * Gets default_check_interval
     *
     * @return int|null
     */
    public function getDefaultCheckInterval()
    {
        return $this->container['default_check_interval'];
    }

    /**
     * Sets default_check_interval
     *
     * @param int|null $default_check_interval Default Check Interval. The number of minutes to use as the default interval to use when creating new checks.
     *
     * @return self
     */
    public function setDefaultCheckInterval($default_check_interval)
    {
        $this->container['default_check_interval'] = $default_check_interval;

        return $this;
    }

    /**
     * Gets service_now
     *
     * @return \OpenAPI\Client\Model\MonitoringSettingsServiceNow|null
     */
    public function getServiceNow()
    {
        return $this->container['service_now'];
    }

    /**
     * Sets service_now
     *
     * @param \OpenAPI\Client\Model\MonitoringSettingsServiceNow|null $service_now service_now
     *
     * @return self
     */
    public function setServiceNow($service_now)
    {
        $this->container['service_now'] = $service_now;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


