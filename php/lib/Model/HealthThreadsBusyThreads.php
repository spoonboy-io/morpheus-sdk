<?php
/**
 * HealthThreadsBusyThreads
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * HealthThreadsBusyThreads Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class HealthThreadsBusyThreads implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'health_threads_busyThreads';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'thread_id' => 'int',
        'name' => 'string',
        'cpu_time' => 'int',
        'blocked_time' => 'int',
        'lock_name' => 'string',
        'lock_owner_id' => 'int',
        'lock_owner_name' => 'string',
        'state' => 'string',
        'waited_count' => 'int',
        'waited_time' => 'int',
        'is_in_native' => 'bool',
        'is_suspended' => 'bool',
        'locked_monitors' => 'object[]',
        'locked_synchronizers' => 'object[]',
        'lock_info' => 'string',
        'current_lines' => 'string',
        'cpu_percent' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'thread_id' => 'int64',
        'name' => null,
        'cpu_time' => 'int64',
        'blocked_time' => 'int64',
        'lock_name' => null,
        'lock_owner_id' => 'int64',
        'lock_owner_name' => null,
        'state' => null,
        'waited_count' => 'int64',
        'waited_time' => 'int64',
        'is_in_native' => null,
        'is_suspended' => null,
        'locked_monitors' => null,
        'locked_synchronizers' => null,
        'lock_info' => null,
        'current_lines' => null,
        'cpu_percent' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'thread_id' => 'threadId',
        'name' => 'name',
        'cpu_time' => 'cpuTime',
        'blocked_time' => 'blockedTime',
        'lock_name' => 'lockName',
        'lock_owner_id' => 'lockOwnerId',
        'lock_owner_name' => 'lockOwnerName',
        'state' => 'state',
        'waited_count' => 'waitedCount',
        'waited_time' => 'waitedTime',
        'is_in_native' => 'isInNative',
        'is_suspended' => 'isSuspended',
        'locked_monitors' => 'lockedMonitors',
        'locked_synchronizers' => 'lockedSynchronizers',
        'lock_info' => 'lockInfo',
        'current_lines' => 'currentLines',
        'cpu_percent' => 'cpuPercent'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'thread_id' => 'setThreadId',
        'name' => 'setName',
        'cpu_time' => 'setCpuTime',
        'blocked_time' => 'setBlockedTime',
        'lock_name' => 'setLockName',
        'lock_owner_id' => 'setLockOwnerId',
        'lock_owner_name' => 'setLockOwnerName',
        'state' => 'setState',
        'waited_count' => 'setWaitedCount',
        'waited_time' => 'setWaitedTime',
        'is_in_native' => 'setIsInNative',
        'is_suspended' => 'setIsSuspended',
        'locked_monitors' => 'setLockedMonitors',
        'locked_synchronizers' => 'setLockedSynchronizers',
        'lock_info' => 'setLockInfo',
        'current_lines' => 'setCurrentLines',
        'cpu_percent' => 'setCpuPercent'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'thread_id' => 'getThreadId',
        'name' => 'getName',
        'cpu_time' => 'getCpuTime',
        'blocked_time' => 'getBlockedTime',
        'lock_name' => 'getLockName',
        'lock_owner_id' => 'getLockOwnerId',
        'lock_owner_name' => 'getLockOwnerName',
        'state' => 'getState',
        'waited_count' => 'getWaitedCount',
        'waited_time' => 'getWaitedTime',
        'is_in_native' => 'getIsInNative',
        'is_suspended' => 'getIsSuspended',
        'locked_monitors' => 'getLockedMonitors',
        'locked_synchronizers' => 'getLockedSynchronizers',
        'lock_info' => 'getLockInfo',
        'current_lines' => 'getCurrentLines',
        'cpu_percent' => 'getCpuPercent'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['thread_id'] = $data['thread_id'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['cpu_time'] = $data['cpu_time'] ?? null;
        $this->container['blocked_time'] = $data['blocked_time'] ?? null;
        $this->container['lock_name'] = $data['lock_name'] ?? null;
        $this->container['lock_owner_id'] = $data['lock_owner_id'] ?? null;
        $this->container['lock_owner_name'] = $data['lock_owner_name'] ?? null;
        $this->container['state'] = $data['state'] ?? null;
        $this->container['waited_count'] = $data['waited_count'] ?? null;
        $this->container['waited_time'] = $data['waited_time'] ?? null;
        $this->container['is_in_native'] = $data['is_in_native'] ?? null;
        $this->container['is_suspended'] = $data['is_suspended'] ?? null;
        $this->container['locked_monitors'] = $data['locked_monitors'] ?? null;
        $this->container['locked_synchronizers'] = $data['locked_synchronizers'] ?? null;
        $this->container['lock_info'] = $data['lock_info'] ?? null;
        $this->container['current_lines'] = $data['current_lines'] ?? null;
        $this->container['cpu_percent'] = $data['cpu_percent'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets thread_id
     *
     * @return int|null
     */
    public function getThreadId()
    {
        return $this->container['thread_id'];
    }

    /**
     * Sets thread_id
     *
     * @param int|null $thread_id thread_id
     *
     * @return self
     */
    public function setThreadId($thread_id)
    {
        $this->container['thread_id'] = $thread_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets cpu_time
     *
     * @return int|null
     */
    public function getCpuTime()
    {
        return $this->container['cpu_time'];
    }

    /**
     * Sets cpu_time
     *
     * @param int|null $cpu_time cpu_time
     *
     * @return self
     */
    public function setCpuTime($cpu_time)
    {
        $this->container['cpu_time'] = $cpu_time;

        return $this;
    }

    /**
     * Gets blocked_time
     *
     * @return int|null
     */
    public function getBlockedTime()
    {
        return $this->container['blocked_time'];
    }

    /**
     * Sets blocked_time
     *
     * @param int|null $blocked_time blocked_time
     *
     * @return self
     */
    public function setBlockedTime($blocked_time)
    {
        $this->container['blocked_time'] = $blocked_time;

        return $this;
    }

    /**
     * Gets lock_name
     *
     * @return string|null
     */
    public function getLockName()
    {
        return $this->container['lock_name'];
    }

    /**
     * Sets lock_name
     *
     * @param string|null $lock_name lock_name
     *
     * @return self
     */
    public function setLockName($lock_name)
    {
        $this->container['lock_name'] = $lock_name;

        return $this;
    }

    /**
     * Gets lock_owner_id
     *
     * @return int|null
     */
    public function getLockOwnerId()
    {
        return $this->container['lock_owner_id'];
    }

    /**
     * Sets lock_owner_id
     *
     * @param int|null $lock_owner_id lock_owner_id
     *
     * @return self
     */
    public function setLockOwnerId($lock_owner_id)
    {
        $this->container['lock_owner_id'] = $lock_owner_id;

        return $this;
    }

    /**
     * Gets lock_owner_name
     *
     * @return string|null
     */
    public function getLockOwnerName()
    {
        return $this->container['lock_owner_name'];
    }

    /**
     * Sets lock_owner_name
     *
     * @param string|null $lock_owner_name lock_owner_name
     *
     * @return self
     */
    public function setLockOwnerName($lock_owner_name)
    {
        $this->container['lock_owner_name'] = $lock_owner_name;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string|null $state state
     *
     * @return self
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets waited_count
     *
     * @return int|null
     */
    public function getWaitedCount()
    {
        return $this->container['waited_count'];
    }

    /**
     * Sets waited_count
     *
     * @param int|null $waited_count waited_count
     *
     * @return self
     */
    public function setWaitedCount($waited_count)
    {
        $this->container['waited_count'] = $waited_count;

        return $this;
    }

    /**
     * Gets waited_time
     *
     * @return int|null
     */
    public function getWaitedTime()
    {
        return $this->container['waited_time'];
    }

    /**
     * Sets waited_time
     *
     * @param int|null $waited_time waited_time
     *
     * @return self
     */
    public function setWaitedTime($waited_time)
    {
        $this->container['waited_time'] = $waited_time;

        return $this;
    }

    /**
     * Gets is_in_native
     *
     * @return bool|null
     */
    public function getIsInNative()
    {
        return $this->container['is_in_native'];
    }

    /**
     * Sets is_in_native
     *
     * @param bool|null $is_in_native is_in_native
     *
     * @return self
     */
    public function setIsInNative($is_in_native)
    {
        $this->container['is_in_native'] = $is_in_native;

        return $this;
    }

    /**
     * Gets is_suspended
     *
     * @return bool|null
     */
    public function getIsSuspended()
    {
        return $this->container['is_suspended'];
    }

    /**
     * Sets is_suspended
     *
     * @param bool|null $is_suspended is_suspended
     *
     * @return self
     */
    public function setIsSuspended($is_suspended)
    {
        $this->container['is_suspended'] = $is_suspended;

        return $this;
    }

    /**
     * Gets locked_monitors
     *
     * @return object[]|null
     */
    public function getLockedMonitors()
    {
        return $this->container['locked_monitors'];
    }

    /**
     * Sets locked_monitors
     *
     * @param object[]|null $locked_monitors locked_monitors
     *
     * @return self
     */
    public function setLockedMonitors($locked_monitors)
    {
        $this->container['locked_monitors'] = $locked_monitors;

        return $this;
    }

    /**
     * Gets locked_synchronizers
     *
     * @return object[]|null
     */
    public function getLockedSynchronizers()
    {
        return $this->container['locked_synchronizers'];
    }

    /**
     * Sets locked_synchronizers
     *
     * @param object[]|null $locked_synchronizers locked_synchronizers
     *
     * @return self
     */
    public function setLockedSynchronizers($locked_synchronizers)
    {
        $this->container['locked_synchronizers'] = $locked_synchronizers;

        return $this;
    }

    /**
     * Gets lock_info
     *
     * @return string|null
     */
    public function getLockInfo()
    {
        return $this->container['lock_info'];
    }

    /**
     * Sets lock_info
     *
     * @param string|null $lock_info lock_info
     *
     * @return self
     */
    public function setLockInfo($lock_info)
    {
        $this->container['lock_info'] = $lock_info;

        return $this;
    }

    /**
     * Gets current_lines
     *
     * @return string|null
     */
    public function getCurrentLines()
    {
        return $this->container['current_lines'];
    }

    /**
     * Sets current_lines
     *
     * @param string|null $current_lines current_lines
     *
     * @return self
     */
    public function setCurrentLines($current_lines)
    {
        $this->container['current_lines'] = $current_lines;

        return $this;
    }

    /**
     * Gets cpu_percent
     *
     * @return float|null
     */
    public function getCpuPercent()
    {
        return $this->container['cpu_percent'];
    }

    /**
     * Sets cpu_percent
     *
     * @param float|null $cpu_percent cpu_percent
     *
     * @return self
     */
    public function setCpuPercent($cpu_percent)
    {
        $this->container['cpu_percent'] = $cpu_percent;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


