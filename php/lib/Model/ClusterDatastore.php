<?php
/**
 * ClusterDatastore
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ClusterDatastore Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class ClusterDatastore implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'clusterDatastore';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'name' => 'string',
        'code' => 'string',
        'type' => 'string',
        'visibility' => 'string',
        'storage_size' => 'int',
        'free_space' => 'int',
        'drs_enabled' => 'bool',
        'active' => 'bool',
        'allow_write' => 'bool',
        'default_store' => 'bool',
        'online' => 'bool',
        'allow_read' => 'bool',
        'allow_provision' => 'bool',
        'ref_type' => 'string',
        'ref_id' => 'int',
        'external_id' => 'string',
        'zone' => '\OpenAPI\Client\Model\ApiBlueprintsIdUpdatePermissionsResourcePermissionSites',
        'zone_pool' => '\OpenAPI\Client\Model\ApiBlueprintsIdUpdatePermissionsResourcePermissionSites',
        'owner' => '\OpenAPI\Client\Model\ApiBlueprintsIdUpdatePermissionsResourcePermissionSites',
        'tenants' => '\OpenAPI\Client\Model\InlineResponse20040AppDeployInstance[]',
        'permissions' => '\OpenAPI\Client\Model\ClusterDatastorePermissions',
        'datastores' => 'object[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'name' => null,
        'code' => null,
        'type' => null,
        'visibility' => null,
        'storage_size' => 'int64',
        'free_space' => 'int64',
        'drs_enabled' => null,
        'active' => null,
        'allow_write' => null,
        'default_store' => null,
        'online' => null,
        'allow_read' => null,
        'allow_provision' => null,
        'ref_type' => null,
        'ref_id' => 'int64',
        'external_id' => null,
        'zone' => null,
        'zone_pool' => null,
        'owner' => null,
        'tenants' => null,
        'permissions' => null,
        'datastores' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'code' => 'code',
        'type' => 'type',
        'visibility' => 'visibility',
        'storage_size' => 'storageSize',
        'free_space' => 'freeSpace',
        'drs_enabled' => 'drsEnabled',
        'active' => 'active',
        'allow_write' => 'allowWrite',
        'default_store' => 'defaultStore',
        'online' => 'online',
        'allow_read' => 'allowRead',
        'allow_provision' => 'allowProvision',
        'ref_type' => 'refType',
        'ref_id' => 'refId',
        'external_id' => 'externalId',
        'zone' => 'zone',
        'zone_pool' => 'zonePool',
        'owner' => 'owner',
        'tenants' => 'tenants',
        'permissions' => 'permissions',
        'datastores' => 'datastores'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'code' => 'setCode',
        'type' => 'setType',
        'visibility' => 'setVisibility',
        'storage_size' => 'setStorageSize',
        'free_space' => 'setFreeSpace',
        'drs_enabled' => 'setDrsEnabled',
        'active' => 'setActive',
        'allow_write' => 'setAllowWrite',
        'default_store' => 'setDefaultStore',
        'online' => 'setOnline',
        'allow_read' => 'setAllowRead',
        'allow_provision' => 'setAllowProvision',
        'ref_type' => 'setRefType',
        'ref_id' => 'setRefId',
        'external_id' => 'setExternalId',
        'zone' => 'setZone',
        'zone_pool' => 'setZonePool',
        'owner' => 'setOwner',
        'tenants' => 'setTenants',
        'permissions' => 'setPermissions',
        'datastores' => 'setDatastores'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'code' => 'getCode',
        'type' => 'getType',
        'visibility' => 'getVisibility',
        'storage_size' => 'getStorageSize',
        'free_space' => 'getFreeSpace',
        'drs_enabled' => 'getDrsEnabled',
        'active' => 'getActive',
        'allow_write' => 'getAllowWrite',
        'default_store' => 'getDefaultStore',
        'online' => 'getOnline',
        'allow_read' => 'getAllowRead',
        'allow_provision' => 'getAllowProvision',
        'ref_type' => 'getRefType',
        'ref_id' => 'getRefId',
        'external_id' => 'getExternalId',
        'zone' => 'getZone',
        'zone_pool' => 'getZonePool',
        'owner' => 'getOwner',
        'tenants' => 'getTenants',
        'permissions' => 'getPermissions',
        'datastores' => 'getDatastores'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['code'] = $data['code'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['visibility'] = $data['visibility'] ?? null;
        $this->container['storage_size'] = $data['storage_size'] ?? null;
        $this->container['free_space'] = $data['free_space'] ?? null;
        $this->container['drs_enabled'] = $data['drs_enabled'] ?? null;
        $this->container['active'] = $data['active'] ?? null;
        $this->container['allow_write'] = $data['allow_write'] ?? null;
        $this->container['default_store'] = $data['default_store'] ?? null;
        $this->container['online'] = $data['online'] ?? null;
        $this->container['allow_read'] = $data['allow_read'] ?? null;
        $this->container['allow_provision'] = $data['allow_provision'] ?? null;
        $this->container['ref_type'] = $data['ref_type'] ?? null;
        $this->container['ref_id'] = $data['ref_id'] ?? null;
        $this->container['external_id'] = $data['external_id'] ?? null;
        $this->container['zone'] = $data['zone'] ?? null;
        $this->container['zone_pool'] = $data['zone_pool'] ?? null;
        $this->container['owner'] = $data['owner'] ?? null;
        $this->container['tenants'] = $data['tenants'] ?? null;
        $this->container['permissions'] = $data['permissions'] ?? null;
        $this->container['datastores'] = $data['datastores'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string|null
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string|null $code code
     *
     * @return self
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets visibility
     *
     * @return string|null
     */
    public function getVisibility()
    {
        return $this->container['visibility'];
    }

    /**
     * Sets visibility
     *
     * @param string|null $visibility visibility
     *
     * @return self
     */
    public function setVisibility($visibility)
    {
        $this->container['visibility'] = $visibility;

        return $this;
    }

    /**
     * Gets storage_size
     *
     * @return int|null
     */
    public function getStorageSize()
    {
        return $this->container['storage_size'];
    }

    /**
     * Sets storage_size
     *
     * @param int|null $storage_size storage_size
     *
     * @return self
     */
    public function setStorageSize($storage_size)
    {
        $this->container['storage_size'] = $storage_size;

        return $this;
    }

    /**
     * Gets free_space
     *
     * @return int|null
     */
    public function getFreeSpace()
    {
        return $this->container['free_space'];
    }

    /**
     * Sets free_space
     *
     * @param int|null $free_space free_space
     *
     * @return self
     */
    public function setFreeSpace($free_space)
    {
        $this->container['free_space'] = $free_space;

        return $this;
    }

    /**
     * Gets drs_enabled
     *
     * @return bool|null
     */
    public function getDrsEnabled()
    {
        return $this->container['drs_enabled'];
    }

    /**
     * Sets drs_enabled
     *
     * @param bool|null $drs_enabled drs_enabled
     *
     * @return self
     */
    public function setDrsEnabled($drs_enabled)
    {
        $this->container['drs_enabled'] = $drs_enabled;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool|null
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool|null $active active
     *
     * @return self
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets allow_write
     *
     * @return bool|null
     */
    public function getAllowWrite()
    {
        return $this->container['allow_write'];
    }

    /**
     * Sets allow_write
     *
     * @param bool|null $allow_write allow_write
     *
     * @return self
     */
    public function setAllowWrite($allow_write)
    {
        $this->container['allow_write'] = $allow_write;

        return $this;
    }

    /**
     * Gets default_store
     *
     * @return bool|null
     */
    public function getDefaultStore()
    {
        return $this->container['default_store'];
    }

    /**
     * Sets default_store
     *
     * @param bool|null $default_store default_store
     *
     * @return self
     */
    public function setDefaultStore($default_store)
    {
        $this->container['default_store'] = $default_store;

        return $this;
    }

    /**
     * Gets online
     *
     * @return bool|null
     */
    public function getOnline()
    {
        return $this->container['online'];
    }

    /**
     * Sets online
     *
     * @param bool|null $online online
     *
     * @return self
     */
    public function setOnline($online)
    {
        $this->container['online'] = $online;

        return $this;
    }

    /**
     * Gets allow_read
     *
     * @return bool|null
     */
    public function getAllowRead()
    {
        return $this->container['allow_read'];
    }

    /**
     * Sets allow_read
     *
     * @param bool|null $allow_read allow_read
     *
     * @return self
     */
    public function setAllowRead($allow_read)
    {
        $this->container['allow_read'] = $allow_read;

        return $this;
    }

    /**
     * Gets allow_provision
     *
     * @return bool|null
     */
    public function getAllowProvision()
    {
        return $this->container['allow_provision'];
    }

    /**
     * Sets allow_provision
     *
     * @param bool|null $allow_provision allow_provision
     *
     * @return self
     */
    public function setAllowProvision($allow_provision)
    {
        $this->container['allow_provision'] = $allow_provision;

        return $this;
    }

    /**
     * Gets ref_type
     *
     * @return string|null
     */
    public function getRefType()
    {
        return $this->container['ref_type'];
    }

    /**
     * Sets ref_type
     *
     * @param string|null $ref_type ref_type
     *
     * @return self
     */
    public function setRefType($ref_type)
    {
        $this->container['ref_type'] = $ref_type;

        return $this;
    }

    /**
     * Gets ref_id
     *
     * @return int|null
     */
    public function getRefId()
    {
        return $this->container['ref_id'];
    }

    /**
     * Sets ref_id
     *
     * @param int|null $ref_id ref_id
     *
     * @return self
     */
    public function setRefId($ref_id)
    {
        $this->container['ref_id'] = $ref_id;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string|null
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string|null $external_id external_id
     *
     * @return self
     */
    public function setExternalId($external_id)
    {
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets zone
     *
     * @return \OpenAPI\Client\Model\ApiBlueprintsIdUpdatePermissionsResourcePermissionSites|null
     */
    public function getZone()
    {
        return $this->container['zone'];
    }

    /**
     * Sets zone
     *
     * @param \OpenAPI\Client\Model\ApiBlueprintsIdUpdatePermissionsResourcePermissionSites|null $zone zone
     *
     * @return self
     */
    public function setZone($zone)
    {
        $this->container['zone'] = $zone;

        return $this;
    }

    /**
     * Gets zone_pool
     *
     * @return \OpenAPI\Client\Model\ApiBlueprintsIdUpdatePermissionsResourcePermissionSites|null
     */
    public function getZonePool()
    {
        return $this->container['zone_pool'];
    }

    /**
     * Sets zone_pool
     *
     * @param \OpenAPI\Client\Model\ApiBlueprintsIdUpdatePermissionsResourcePermissionSites|null $zone_pool zone_pool
     *
     * @return self
     */
    public function setZonePool($zone_pool)
    {
        $this->container['zone_pool'] = $zone_pool;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return \OpenAPI\Client\Model\ApiBlueprintsIdUpdatePermissionsResourcePermissionSites|null
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param \OpenAPI\Client\Model\ApiBlueprintsIdUpdatePermissionsResourcePermissionSites|null $owner owner
     *
     * @return self
     */
    public function setOwner($owner)
    {
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets tenants
     *
     * @return \OpenAPI\Client\Model\InlineResponse20040AppDeployInstance[]|null
     */
    public function getTenants()
    {
        return $this->container['tenants'];
    }

    /**
     * Sets tenants
     *
     * @param \OpenAPI\Client\Model\InlineResponse20040AppDeployInstance[]|null $tenants tenants
     *
     * @return self
     */
    public function setTenants($tenants)
    {
        $this->container['tenants'] = $tenants;

        return $this;
    }

    /**
     * Gets permissions
     *
     * @return \OpenAPI\Client\Model\ClusterDatastorePermissions|null
     */
    public function getPermissions()
    {
        return $this->container['permissions'];
    }

    /**
     * Sets permissions
     *
     * @param \OpenAPI\Client\Model\ClusterDatastorePermissions|null $permissions permissions
     *
     * @return self
     */
    public function setPermissions($permissions)
    {
        $this->container['permissions'] = $permissions;

        return $this;
    }

    /**
     * Gets datastores
     *
     * @return object[]|null
     */
    public function getDatastores()
    {
        return $this->container['datastores'];
    }

    /**
     * Sets datastores
     *
     * @param object[]|null $datastores datastores
     *
     * @return self
     */
    public function setDatastores($datastores)
    {
        $this->container['datastores'] = $datastores;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


