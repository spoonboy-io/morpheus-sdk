<?php
/**
 * HealthElasticStats
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * HealthElasticStats Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class HealthElasticStats implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'health_elastic_stats';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'status' => 'string',
        'cluster_name' => 'string',
        'node_total' => 'string',
        'node_data' => 'string',
        'shards' => 'string',
        'primary' => 'string',
        'relocating' => 'string',
        'initializing' => 'string',
        'unassigned' => 'string',
        'pending_tasks' => 'string',
        'active_percent' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'status' => null,
        'cluster_name' => null,
        'node_total' => null,
        'node_data' => null,
        'shards' => null,
        'primary' => null,
        'relocating' => null,
        'initializing' => null,
        'unassigned' => null,
        'pending_tasks' => null,
        'active_percent' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'status' => 'status',
        'cluster_name' => 'clusterName',
        'node_total' => 'nodeTotal',
        'node_data' => 'nodeData',
        'shards' => 'shards',
        'primary' => 'primary',
        'relocating' => 'relocating',
        'initializing' => 'initializing',
        'unassigned' => 'unassigned',
        'pending_tasks' => 'pendingTasks',
        'active_percent' => 'activePercent'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'status' => 'setStatus',
        'cluster_name' => 'setClusterName',
        'node_total' => 'setNodeTotal',
        'node_data' => 'setNodeData',
        'shards' => 'setShards',
        'primary' => 'setPrimary',
        'relocating' => 'setRelocating',
        'initializing' => 'setInitializing',
        'unassigned' => 'setUnassigned',
        'pending_tasks' => 'setPendingTasks',
        'active_percent' => 'setActivePercent'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'status' => 'getStatus',
        'cluster_name' => 'getClusterName',
        'node_total' => 'getNodeTotal',
        'node_data' => 'getNodeData',
        'shards' => 'getShards',
        'primary' => 'getPrimary',
        'relocating' => 'getRelocating',
        'initializing' => 'getInitializing',
        'unassigned' => 'getUnassigned',
        'pending_tasks' => 'getPendingTasks',
        'active_percent' => 'getActivePercent'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['status'] = $data['status'] ?? null;
        $this->container['cluster_name'] = $data['cluster_name'] ?? null;
        $this->container['node_total'] = $data['node_total'] ?? null;
        $this->container['node_data'] = $data['node_data'] ?? null;
        $this->container['shards'] = $data['shards'] ?? null;
        $this->container['primary'] = $data['primary'] ?? null;
        $this->container['relocating'] = $data['relocating'] ?? null;
        $this->container['initializing'] = $data['initializing'] ?? null;
        $this->container['unassigned'] = $data['unassigned'] ?? null;
        $this->container['pending_tasks'] = $data['pending_tasks'] ?? null;
        $this->container['active_percent'] = $data['active_percent'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets cluster_name
     *
     * @return string|null
     */
    public function getClusterName()
    {
        return $this->container['cluster_name'];
    }

    /**
     * Sets cluster_name
     *
     * @param string|null $cluster_name cluster_name
     *
     * @return self
     */
    public function setClusterName($cluster_name)
    {
        $this->container['cluster_name'] = $cluster_name;

        return $this;
    }

    /**
     * Gets node_total
     *
     * @return string|null
     */
    public function getNodeTotal()
    {
        return $this->container['node_total'];
    }

    /**
     * Sets node_total
     *
     * @param string|null $node_total node_total
     *
     * @return self
     */
    public function setNodeTotal($node_total)
    {
        $this->container['node_total'] = $node_total;

        return $this;
    }

    /**
     * Gets node_data
     *
     * @return string|null
     */
    public function getNodeData()
    {
        return $this->container['node_data'];
    }

    /**
     * Sets node_data
     *
     * @param string|null $node_data node_data
     *
     * @return self
     */
    public function setNodeData($node_data)
    {
        $this->container['node_data'] = $node_data;

        return $this;
    }

    /**
     * Gets shards
     *
     * @return string|null
     */
    public function getShards()
    {
        return $this->container['shards'];
    }

    /**
     * Sets shards
     *
     * @param string|null $shards shards
     *
     * @return self
     */
    public function setShards($shards)
    {
        $this->container['shards'] = $shards;

        return $this;
    }

    /**
     * Gets primary
     *
     * @return string|null
     */
    public function getPrimary()
    {
        return $this->container['primary'];
    }

    /**
     * Sets primary
     *
     * @param string|null $primary primary
     *
     * @return self
     */
    public function setPrimary($primary)
    {
        $this->container['primary'] = $primary;

        return $this;
    }

    /**
     * Gets relocating
     *
     * @return string|null
     */
    public function getRelocating()
    {
        return $this->container['relocating'];
    }

    /**
     * Sets relocating
     *
     * @param string|null $relocating relocating
     *
     * @return self
     */
    public function setRelocating($relocating)
    {
        $this->container['relocating'] = $relocating;

        return $this;
    }

    /**
     * Gets initializing
     *
     * @return string|null
     */
    public function getInitializing()
    {
        return $this->container['initializing'];
    }

    /**
     * Sets initializing
     *
     * @param string|null $initializing initializing
     *
     * @return self
     */
    public function setInitializing($initializing)
    {
        $this->container['initializing'] = $initializing;

        return $this;
    }

    /**
     * Gets unassigned
     *
     * @return string|null
     */
    public function getUnassigned()
    {
        return $this->container['unassigned'];
    }

    /**
     * Sets unassigned
     *
     * @param string|null $unassigned unassigned
     *
     * @return self
     */
    public function setUnassigned($unassigned)
    {
        $this->container['unassigned'] = $unassigned;

        return $this;
    }

    /**
     * Gets pending_tasks
     *
     * @return string|null
     */
    public function getPendingTasks()
    {
        return $this->container['pending_tasks'];
    }

    /**
     * Sets pending_tasks
     *
     * @param string|null $pending_tasks pending_tasks
     *
     * @return self
     */
    public function setPendingTasks($pending_tasks)
    {
        $this->container['pending_tasks'] = $pending_tasks;

        return $this;
    }

    /**
     * Gets active_percent
     *
     * @return string|null
     */
    public function getActivePercent()
    {
        return $this->container['active_percent'];
    }

    /**
     * Sets active_percent
     *
     * @param string|null $active_percent active_percent
     *
     * @return self
     */
    public function setActivePercent($active_percent)
    {
        $this->container['active_percent'] = $active_percent;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


