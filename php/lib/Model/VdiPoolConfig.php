<?php
/**
 * VdiPoolConfig
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * VdiPoolConfig Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class VdiPoolConfig implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'vdiPool_config';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'group' => '\OpenAPI\Client\Model\InstanceServicePlanAutoOptions',
        'cloud' => '\OpenAPI\Client\Model\InlineResponse20040AppDeployInstance',
        'type' => 'string',
        'instance' => '\OpenAPI\Client\Model\VdiPoolConfigInstance',
        'name' => 'string',
        'environment' => 'string',
        'config' => '\OpenAPI\Client\Model\VdiPoolConfigConfig',
        'volumes' => '\OpenAPI\Client\Model\VdiPoolConfigVolumes[]',
        'host_name' => 'string',
        'layout' => '\OpenAPI\Client\Model\InstanceConfigLayout',
        'storage_controllers' => '\OpenAPI\Client\Model\VdiPoolConfigStorageControllers[]',
        'plan' => '\OpenAPI\Client\Model\InstanceConfigLayout',
        'version' => 'string',
        'network_interfaces' => '\OpenAPI\Client\Model\VdiPoolConfigNetworkInterfaces[]',
        'execution_id' => 'string',
        'backup' => '\OpenAPI\Client\Model\InstanceConfigBackup',
        'load_balancer' => 'object[]',
        'hide_lock' => 'bool',
        'has_networks' => 'bool',
        'display_networks' => '\OpenAPI\Client\Model\VdiPoolConfigDisplayNetworks[]',
        'copies' => 'int',
        'show_scale' => 'bool',
        'has_preview' => 'bool',
        'volumes_display' => '\OpenAPI\Client\Model\VdiPoolConfigVolumesDisplay[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'group' => null,
        'cloud' => null,
        'type' => null,
        'instance' => null,
        'name' => null,
        'environment' => null,
        'config' => null,
        'volumes' => null,
        'host_name' => null,
        'layout' => null,
        'storage_controllers' => null,
        'plan' => null,
        'version' => null,
        'network_interfaces' => null,
        'execution_id' => null,
        'backup' => null,
        'load_balancer' => null,
        'hide_lock' => null,
        'has_networks' => null,
        'display_networks' => null,
        'copies' => 'int64',
        'show_scale' => null,
        'has_preview' => null,
        'volumes_display' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'group' => 'group',
        'cloud' => 'cloud',
        'type' => 'type',
        'instance' => 'instance',
        'name' => 'name',
        'environment' => 'environment',
        'config' => 'config',
        'volumes' => 'volumes',
        'host_name' => 'hostName',
        'layout' => 'layout',
        'storage_controllers' => 'storageControllers',
        'plan' => 'plan',
        'version' => 'version',
        'network_interfaces' => 'networkInterfaces',
        'execution_id' => 'executionId',
        'backup' => 'backup',
        'load_balancer' => 'loadBalancer',
        'hide_lock' => 'hideLock',
        'has_networks' => 'hasNetworks',
        'display_networks' => 'displayNetworks',
        'copies' => 'copies',
        'show_scale' => 'showScale',
        'has_preview' => 'hasPreview',
        'volumes_display' => 'volumesDisplay'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'group' => 'setGroup',
        'cloud' => 'setCloud',
        'type' => 'setType',
        'instance' => 'setInstance',
        'name' => 'setName',
        'environment' => 'setEnvironment',
        'config' => 'setConfig',
        'volumes' => 'setVolumes',
        'host_name' => 'setHostName',
        'layout' => 'setLayout',
        'storage_controllers' => 'setStorageControllers',
        'plan' => 'setPlan',
        'version' => 'setVersion',
        'network_interfaces' => 'setNetworkInterfaces',
        'execution_id' => 'setExecutionId',
        'backup' => 'setBackup',
        'load_balancer' => 'setLoadBalancer',
        'hide_lock' => 'setHideLock',
        'has_networks' => 'setHasNetworks',
        'display_networks' => 'setDisplayNetworks',
        'copies' => 'setCopies',
        'show_scale' => 'setShowScale',
        'has_preview' => 'setHasPreview',
        'volumes_display' => 'setVolumesDisplay'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'group' => 'getGroup',
        'cloud' => 'getCloud',
        'type' => 'getType',
        'instance' => 'getInstance',
        'name' => 'getName',
        'environment' => 'getEnvironment',
        'config' => 'getConfig',
        'volumes' => 'getVolumes',
        'host_name' => 'getHostName',
        'layout' => 'getLayout',
        'storage_controllers' => 'getStorageControllers',
        'plan' => 'getPlan',
        'version' => 'getVersion',
        'network_interfaces' => 'getNetworkInterfaces',
        'execution_id' => 'getExecutionId',
        'backup' => 'getBackup',
        'load_balancer' => 'getLoadBalancer',
        'hide_lock' => 'getHideLock',
        'has_networks' => 'getHasNetworks',
        'display_networks' => 'getDisplayNetworks',
        'copies' => 'getCopies',
        'show_scale' => 'getShowScale',
        'has_preview' => 'getHasPreview',
        'volumes_display' => 'getVolumesDisplay'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['group'] = $data['group'] ?? null;
        $this->container['cloud'] = $data['cloud'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['instance'] = $data['instance'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['environment'] = $data['environment'] ?? null;
        $this->container['config'] = $data['config'] ?? null;
        $this->container['volumes'] = $data['volumes'] ?? null;
        $this->container['host_name'] = $data['host_name'] ?? null;
        $this->container['layout'] = $data['layout'] ?? null;
        $this->container['storage_controllers'] = $data['storage_controllers'] ?? null;
        $this->container['plan'] = $data['plan'] ?? null;
        $this->container['version'] = $data['version'] ?? null;
        $this->container['network_interfaces'] = $data['network_interfaces'] ?? null;
        $this->container['execution_id'] = $data['execution_id'] ?? null;
        $this->container['backup'] = $data['backup'] ?? null;
        $this->container['load_balancer'] = $data['load_balancer'] ?? null;
        $this->container['hide_lock'] = $data['hide_lock'] ?? null;
        $this->container['has_networks'] = $data['has_networks'] ?? null;
        $this->container['display_networks'] = $data['display_networks'] ?? null;
        $this->container['copies'] = $data['copies'] ?? null;
        $this->container['show_scale'] = $data['show_scale'] ?? null;
        $this->container['has_preview'] = $data['has_preview'] ?? null;
        $this->container['volumes_display'] = $data['volumes_display'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets group
     *
     * @return \OpenAPI\Client\Model\InstanceServicePlanAutoOptions|null
     */
    public function getGroup()
    {
        return $this->container['group'];
    }

    /**
     * Sets group
     *
     * @param \OpenAPI\Client\Model\InstanceServicePlanAutoOptions|null $group group
     *
     * @return self
     */
    public function setGroup($group)
    {
        $this->container['group'] = $group;

        return $this;
    }

    /**
     * Gets cloud
     *
     * @return \OpenAPI\Client\Model\InlineResponse20040AppDeployInstance|null
     */
    public function getCloud()
    {
        return $this->container['cloud'];
    }

    /**
     * Sets cloud
     *
     * @param \OpenAPI\Client\Model\InlineResponse20040AppDeployInstance|null $cloud cloud
     *
     * @return self
     */
    public function setCloud($cloud)
    {
        $this->container['cloud'] = $cloud;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets instance
     *
     * @return \OpenAPI\Client\Model\VdiPoolConfigInstance|null
     */
    public function getInstance()
    {
        return $this->container['instance'];
    }

    /**
     * Sets instance
     *
     * @param \OpenAPI\Client\Model\VdiPoolConfigInstance|null $instance instance
     *
     * @return self
     */
    public function setInstance($instance)
    {
        $this->container['instance'] = $instance;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets environment
     *
     * @return string|null
     */
    public function getEnvironment()
    {
        return $this->container['environment'];
    }

    /**
     * Sets environment
     *
     * @param string|null $environment environment
     *
     * @return self
     */
    public function setEnvironment($environment)
    {
        $this->container['environment'] = $environment;

        return $this;
    }

    /**
     * Gets config
     *
     * @return \OpenAPI\Client\Model\VdiPoolConfigConfig|null
     */
    public function getConfig()
    {
        return $this->container['config'];
    }

    /**
     * Sets config
     *
     * @param \OpenAPI\Client\Model\VdiPoolConfigConfig|null $config config
     *
     * @return self
     */
    public function setConfig($config)
    {
        $this->container['config'] = $config;

        return $this;
    }

    /**
     * Gets volumes
     *
     * @return \OpenAPI\Client\Model\VdiPoolConfigVolumes[]|null
     */
    public function getVolumes()
    {
        return $this->container['volumes'];
    }

    /**
     * Sets volumes
     *
     * @param \OpenAPI\Client\Model\VdiPoolConfigVolumes[]|null $volumes volumes
     *
     * @return self
     */
    public function setVolumes($volumes)
    {
        $this->container['volumes'] = $volumes;

        return $this;
    }

    /**
     * Gets host_name
     *
     * @return string|null
     */
    public function getHostName()
    {
        return $this->container['host_name'];
    }

    /**
     * Sets host_name
     *
     * @param string|null $host_name host_name
     *
     * @return self
     */
    public function setHostName($host_name)
    {
        $this->container['host_name'] = $host_name;

        return $this;
    }

    /**
     * Gets layout
     *
     * @return \OpenAPI\Client\Model\InstanceConfigLayout|null
     */
    public function getLayout()
    {
        return $this->container['layout'];
    }

    /**
     * Sets layout
     *
     * @param \OpenAPI\Client\Model\InstanceConfigLayout|null $layout layout
     *
     * @return self
     */
    public function setLayout($layout)
    {
        $this->container['layout'] = $layout;

        return $this;
    }

    /**
     * Gets storage_controllers
     *
     * @return \OpenAPI\Client\Model\VdiPoolConfigStorageControllers[]|null
     */
    public function getStorageControllers()
    {
        return $this->container['storage_controllers'];
    }

    /**
     * Sets storage_controllers
     *
     * @param \OpenAPI\Client\Model\VdiPoolConfigStorageControllers[]|null $storage_controllers storage_controllers
     *
     * @return self
     */
    public function setStorageControllers($storage_controllers)
    {
        $this->container['storage_controllers'] = $storage_controllers;

        return $this;
    }

    /**
     * Gets plan
     *
     * @return \OpenAPI\Client\Model\InstanceConfigLayout|null
     */
    public function getPlan()
    {
        return $this->container['plan'];
    }

    /**
     * Sets plan
     *
     * @param \OpenAPI\Client\Model\InstanceConfigLayout|null $plan plan
     *
     * @return self
     */
    public function setPlan($plan)
    {
        $this->container['plan'] = $plan;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string|null
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string|null $version version
     *
     * @return self
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets network_interfaces
     *
     * @return \OpenAPI\Client\Model\VdiPoolConfigNetworkInterfaces[]|null
     */
    public function getNetworkInterfaces()
    {
        return $this->container['network_interfaces'];
    }

    /**
     * Sets network_interfaces
     *
     * @param \OpenAPI\Client\Model\VdiPoolConfigNetworkInterfaces[]|null $network_interfaces network_interfaces
     *
     * @return self
     */
    public function setNetworkInterfaces($network_interfaces)
    {
        $this->container['network_interfaces'] = $network_interfaces;

        return $this;
    }

    /**
     * Gets execution_id
     *
     * @return string|null
     */
    public function getExecutionId()
    {
        return $this->container['execution_id'];
    }

    /**
     * Sets execution_id
     *
     * @param string|null $execution_id execution_id
     *
     * @return self
     */
    public function setExecutionId($execution_id)
    {
        $this->container['execution_id'] = $execution_id;

        return $this;
    }

    /**
     * Gets backup
     *
     * @return \OpenAPI\Client\Model\InstanceConfigBackup|null
     */
    public function getBackup()
    {
        return $this->container['backup'];
    }

    /**
     * Sets backup
     *
     * @param \OpenAPI\Client\Model\InstanceConfigBackup|null $backup backup
     *
     * @return self
     */
    public function setBackup($backup)
    {
        $this->container['backup'] = $backup;

        return $this;
    }

    /**
     * Gets load_balancer
     *
     * @return object[]|null
     */
    public function getLoadBalancer()
    {
        return $this->container['load_balancer'];
    }

    /**
     * Sets load_balancer
     *
     * @param object[]|null $load_balancer load_balancer
     *
     * @return self
     */
    public function setLoadBalancer($load_balancer)
    {
        $this->container['load_balancer'] = $load_balancer;

        return $this;
    }

    /**
     * Gets hide_lock
     *
     * @return bool|null
     */
    public function getHideLock()
    {
        return $this->container['hide_lock'];
    }

    /**
     * Sets hide_lock
     *
     * @param bool|null $hide_lock hide_lock
     *
     * @return self
     */
    public function setHideLock($hide_lock)
    {
        $this->container['hide_lock'] = $hide_lock;

        return $this;
    }

    /**
     * Gets has_networks
     *
     * @return bool|null
     */
    public function getHasNetworks()
    {
        return $this->container['has_networks'];
    }

    /**
     * Sets has_networks
     *
     * @param bool|null $has_networks has_networks
     *
     * @return self
     */
    public function setHasNetworks($has_networks)
    {
        $this->container['has_networks'] = $has_networks;

        return $this;
    }

    /**
     * Gets display_networks
     *
     * @return \OpenAPI\Client\Model\VdiPoolConfigDisplayNetworks[]|null
     */
    public function getDisplayNetworks()
    {
        return $this->container['display_networks'];
    }

    /**
     * Sets display_networks
     *
     * @param \OpenAPI\Client\Model\VdiPoolConfigDisplayNetworks[]|null $display_networks display_networks
     *
     * @return self
     */
    public function setDisplayNetworks($display_networks)
    {
        $this->container['display_networks'] = $display_networks;

        return $this;
    }

    /**
     * Gets copies
     *
     * @return int|null
     */
    public function getCopies()
    {
        return $this->container['copies'];
    }

    /**
     * Sets copies
     *
     * @param int|null $copies copies
     *
     * @return self
     */
    public function setCopies($copies)
    {
        $this->container['copies'] = $copies;

        return $this;
    }

    /**
     * Gets show_scale
     *
     * @return bool|null
     */
    public function getShowScale()
    {
        return $this->container['show_scale'];
    }

    /**
     * Sets show_scale
     *
     * @param bool|null $show_scale show_scale
     *
     * @return self
     */
    public function setShowScale($show_scale)
    {
        $this->container['show_scale'] = $show_scale;

        return $this;
    }

    /**
     * Gets has_preview
     *
     * @return bool|null
     */
    public function getHasPreview()
    {
        return $this->container['has_preview'];
    }

    /**
     * Sets has_preview
     *
     * @param bool|null $has_preview has_preview
     *
     * @return self
     */
    public function setHasPreview($has_preview)
    {
        $this->container['has_preview'] = $has_preview;

        return $this;
    }

    /**
     * Gets volumes_display
     *
     * @return \OpenAPI\Client\Model\VdiPoolConfigVolumesDisplay[]|null
     */
    public function getVolumesDisplay()
    {
        return $this->container['volumes_display'];
    }

    /**
     * Sets volumes_display
     *
     * @param \OpenAPI\Client\Model\VdiPoolConfigVolumesDisplay[]|null $volumes_display volumes_display
     *
     * @return self
     */
    public function setVolumesDisplay($volumes_display)
    {
        $this->container['volumes_display'] = $volumes_display;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


