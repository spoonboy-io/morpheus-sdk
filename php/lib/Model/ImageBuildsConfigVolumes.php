<?php
/**
 * ImageBuildsConfigVolumes
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ImageBuildsConfigVolumes Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class ImageBuildsConfigVolumes implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'imageBuilds_config_volumes';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'volume_customizable' => 'bool',
        'v_id' => 'int',
        'readonly_name' => 'bool',
        'size' => 'int',
        'max_iops' => 'string',
        'name' => 'string',
        'root_volume' => 'bool',
        'storage_type' => 'int',
        'datastore_id' => 'string',
        'max_storage' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'volume_customizable' => null,
        'v_id' => 'int64',
        'readonly_name' => null,
        'size' => 'int64',
        'max_iops' => null,
        'name' => null,
        'root_volume' => null,
        'storage_type' => 'int64',
        'datastore_id' => null,
        'max_storage' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'volume_customizable' => 'volumeCustomizable',
        'v_id' => 'vId',
        'readonly_name' => 'readonlyName',
        'size' => 'size',
        'max_iops' => 'maxIOPS',
        'name' => 'name',
        'root_volume' => 'rootVolume',
        'storage_type' => 'storageType',
        'datastore_id' => 'datastoreId',
        'max_storage' => 'maxStorage'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'volume_customizable' => 'setVolumeCustomizable',
        'v_id' => 'setVId',
        'readonly_name' => 'setReadonlyName',
        'size' => 'setSize',
        'max_iops' => 'setMaxIops',
        'name' => 'setName',
        'root_volume' => 'setRootVolume',
        'storage_type' => 'setStorageType',
        'datastore_id' => 'setDatastoreId',
        'max_storage' => 'setMaxStorage'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'volume_customizable' => 'getVolumeCustomizable',
        'v_id' => 'getVId',
        'readonly_name' => 'getReadonlyName',
        'size' => 'getSize',
        'max_iops' => 'getMaxIops',
        'name' => 'getName',
        'root_volume' => 'getRootVolume',
        'storage_type' => 'getStorageType',
        'datastore_id' => 'getDatastoreId',
        'max_storage' => 'getMaxStorage'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['volume_customizable'] = $data['volume_customizable'] ?? null;
        $this->container['v_id'] = $data['v_id'] ?? null;
        $this->container['readonly_name'] = $data['readonly_name'] ?? null;
        $this->container['size'] = $data['size'] ?? null;
        $this->container['max_iops'] = $data['max_iops'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['root_volume'] = $data['root_volume'] ?? null;
        $this->container['storage_type'] = $data['storage_type'] ?? null;
        $this->container['datastore_id'] = $data['datastore_id'] ?? null;
        $this->container['max_storage'] = $data['max_storage'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets volume_customizable
     *
     * @return bool|null
     */
    public function getVolumeCustomizable()
    {
        return $this->container['volume_customizable'];
    }

    /**
     * Sets volume_customizable
     *
     * @param bool|null $volume_customizable volume_customizable
     *
     * @return self
     */
    public function setVolumeCustomizable($volume_customizable)
    {
        $this->container['volume_customizable'] = $volume_customizable;

        return $this;
    }

    /**
     * Gets v_id
     *
     * @return int|null
     */
    public function getVId()
    {
        return $this->container['v_id'];
    }

    /**
     * Sets v_id
     *
     * @param int|null $v_id v_id
     *
     * @return self
     */
    public function setVId($v_id)
    {
        $this->container['v_id'] = $v_id;

        return $this;
    }

    /**
     * Gets readonly_name
     *
     * @return bool|null
     */
    public function getReadonlyName()
    {
        return $this->container['readonly_name'];
    }

    /**
     * Sets readonly_name
     *
     * @param bool|null $readonly_name readonly_name
     *
     * @return self
     */
    public function setReadonlyName($readonly_name)
    {
        $this->container['readonly_name'] = $readonly_name;

        return $this;
    }

    /**
     * Gets size
     *
     * @return int|null
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param int|null $size size
     *
     * @return self
     */
    public function setSize($size)
    {
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets max_iops
     *
     * @return string|null
     */
    public function getMaxIops()
    {
        return $this->container['max_iops'];
    }

    /**
     * Sets max_iops
     *
     * @param string|null $max_iops max_iops
     *
     * @return self
     */
    public function setMaxIops($max_iops)
    {
        $this->container['max_iops'] = $max_iops;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets root_volume
     *
     * @return bool|null
     */
    public function getRootVolume()
    {
        return $this->container['root_volume'];
    }

    /**
     * Sets root_volume
     *
     * @param bool|null $root_volume root_volume
     *
     * @return self
     */
    public function setRootVolume($root_volume)
    {
        $this->container['root_volume'] = $root_volume;

        return $this;
    }

    /**
     * Gets storage_type
     *
     * @return int|null
     */
    public function getStorageType()
    {
        return $this->container['storage_type'];
    }

    /**
     * Sets storage_type
     *
     * @param int|null $storage_type storage_type
     *
     * @return self
     */
    public function setStorageType($storage_type)
    {
        $this->container['storage_type'] = $storage_type;

        return $this;
    }

    /**
     * Gets datastore_id
     *
     * @return string|null
     */
    public function getDatastoreId()
    {
        return $this->container['datastore_id'];
    }

    /**
     * Sets datastore_id
     *
     * @param string|null $datastore_id datastore_id
     *
     * @return self
     */
    public function setDatastoreId($datastore_id)
    {
        $this->container['datastore_id'] = $datastore_id;

        return $this;
    }

    /**
     * Gets max_storage
     *
     * @return int|null
     */
    public function getMaxStorage()
    {
        return $this->container['max_storage'];
    }

    /**
     * Sets max_storage
     *
     * @param int|null $max_storage max_storage
     *
     * @return self
     */
    public function setMaxStorage($max_storage)
    {
        $this->container['max_storage'] = $max_storage;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


