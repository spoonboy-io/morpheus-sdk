<?php
/**
 * ImageBuildCreate
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ImageBuildCreate Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class ImageBuildCreate implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'imageBuildCreate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'description' => 'string',
        'type' => 'string',
        'site' => '\OpenAPI\Client\Model\ImageBuildCreateSite',
        'zone' => '\OpenAPI\Client\Model\ImageBuildCreateZone',
        'config' => 'object',
        'boot_script' => '\OpenAPI\Client\Model\ImageBuildCreateBootScript',
        'preseed_script' => '\OpenAPI\Client\Model\ImageBuildCreatePreseedScript',
        'ssh_username' => 'string',
        'ssh_password' => 'string',
        'storage_provider' => 'string',
        'is_cloud_init' => 'string',
        'build_output_name' => 'string',
        'conversion_formats' => 'string',
        'keep_results' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'description' => null,
        'type' => null,
        'site' => null,
        'zone' => null,
        'config' => null,
        'boot_script' => null,
        'preseed_script' => null,
        'ssh_username' => null,
        'ssh_password' => null,
        'storage_provider' => null,
        'is_cloud_init' => null,
        'build_output_name' => null,
        'conversion_formats' => null,
        'keep_results' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'description' => 'description',
        'type' => 'type',
        'site' => 'site',
        'zone' => 'zone',
        'config' => 'config',
        'boot_script' => 'bootScript',
        'preseed_script' => 'preseedScript',
        'ssh_username' => 'sshUsername',
        'ssh_password' => 'sshPassword',
        'storage_provider' => 'storageProvider',
        'is_cloud_init' => 'isCloudInit',
        'build_output_name' => 'buildOutputName',
        'conversion_formats' => 'conversionFormats',
        'keep_results' => 'keepResults'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'description' => 'setDescription',
        'type' => 'setType',
        'site' => 'setSite',
        'zone' => 'setZone',
        'config' => 'setConfig',
        'boot_script' => 'setBootScript',
        'preseed_script' => 'setPreseedScript',
        'ssh_username' => 'setSshUsername',
        'ssh_password' => 'setSshPassword',
        'storage_provider' => 'setStorageProvider',
        'is_cloud_init' => 'setIsCloudInit',
        'build_output_name' => 'setBuildOutputName',
        'conversion_formats' => 'setConversionFormats',
        'keep_results' => 'setKeepResults'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'description' => 'getDescription',
        'type' => 'getType',
        'site' => 'getSite',
        'zone' => 'getZone',
        'config' => 'getConfig',
        'boot_script' => 'getBootScript',
        'preseed_script' => 'getPreseedScript',
        'ssh_username' => 'getSshUsername',
        'ssh_password' => 'getSshPassword',
        'storage_provider' => 'getStorageProvider',
        'is_cloud_init' => 'getIsCloudInit',
        'build_output_name' => 'getBuildOutputName',
        'conversion_formats' => 'getConversionFormats',
        'keep_results' => 'getKeepResults'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const TYPE_VMWARE = 'vmware';
    const CONVERSION_FORMATS_NULL = 'null';
    const CONVERSION_FORMATS_OVF = 'ovf';
    const CONVERSION_FORMATS_QCOW2 = 'qcow2';
    const CONVERSION_FORMATS_VHD = 'vhd';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_VMWARE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getConversionFormatsAllowableValues()
    {
        return [
            self::CONVERSION_FORMATS_NULL,
            self::CONVERSION_FORMATS_OVF,
            self::CONVERSION_FORMATS_QCOW2,
            self::CONVERSION_FORMATS_VHD,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['site'] = $data['site'] ?? null;
        $this->container['zone'] = $data['zone'] ?? null;
        $this->container['config'] = $data['config'] ?? null;
        $this->container['boot_script'] = $data['boot_script'] ?? null;
        $this->container['preseed_script'] = $data['preseed_script'] ?? null;
        $this->container['ssh_username'] = $data['ssh_username'] ?? null;
        $this->container['ssh_password'] = $data['ssh_password'] ?? null;
        $this->container['storage_provider'] = $data['storage_provider'] ?? null;
        $this->container['is_cloud_init'] = $data['is_cloud_init'] ?? null;
        $this->container['build_output_name'] = $data['build_output_name'] ?? null;
        $this->container['conversion_formats'] = $data['conversion_formats'] ?? null;
        $this->container['keep_results'] = $data['keep_results'] ?? 0;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getConversionFormatsAllowableValues();
        if (!is_null($this->container['conversion_formats']) && !in_array($this->container['conversion_formats'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'conversion_formats', must be one of '%s'",
                $this->container['conversion_formats'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name A name for the image build
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description A description for the image build
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type The image builder type.
     *
     * @return self
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets site
     *
     * @return \OpenAPI\Client\Model\ImageBuildCreateSite|null
     */
    public function getSite()
    {
        return $this->container['site'];
    }

    /**
     * Sets site
     *
     * @param \OpenAPI\Client\Model\ImageBuildCreateSite|null $site site
     *
     * @return self
     */
    public function setSite($site)
    {
        $this->container['site'] = $site;

        return $this;
    }

    /**
     * Gets zone
     *
     * @return \OpenAPI\Client\Model\ImageBuildCreateZone|null
     */
    public function getZone()
    {
        return $this->container['zone'];
    }

    /**
     * Sets zone
     *
     * @param \OpenAPI\Client\Model\ImageBuildCreateZone|null $zone zone
     *
     * @return self
     */
    public function setZone($zone)
    {
        $this->container['zone'] = $zone;

        return $this;
    }

    /**
     * Gets config
     *
     * @return object|null
     */
    public function getConfig()
    {
        return $this->container['config'];
    }

    /**
     * Sets config
     *
     * @param object|null $config A map of config values. This is the instance config that is used for provisioning. See Provisioning Types.
     *
     * @return self
     */
    public function setConfig($config)
    {
        $this->container['config'] = $config;

        return $this;
    }

    /**
     * Gets boot_script
     *
     * @return \OpenAPI\Client\Model\ImageBuildCreateBootScript|null
     */
    public function getBootScript()
    {
        return $this->container['boot_script'];
    }

    /**
     * Sets boot_script
     *
     * @param \OpenAPI\Client\Model\ImageBuildCreateBootScript|null $boot_script boot_script
     *
     * @return self
     */
    public function setBootScript($boot_script)
    {
        $this->container['boot_script'] = $boot_script;

        return $this;
    }

    /**
     * Gets preseed_script
     *
     * @return \OpenAPI\Client\Model\ImageBuildCreatePreseedScript|null
     */
    public function getPreseedScript()
    {
        return $this->container['preseed_script'];
    }

    /**
     * Sets preseed_script
     *
     * @param \OpenAPI\Client\Model\ImageBuildCreatePreseedScript|null $preseed_script preseed_script
     *
     * @return self
     */
    public function setPreseedScript($preseed_script)
    {
        $this->container['preseed_script'] = $preseed_script;

        return $this;
    }

    /**
     * Gets ssh_username
     *
     * @return string|null
     */
    public function getSshUsername()
    {
        return $this->container['ssh_username'];
    }

    /**
     * Sets ssh_username
     *
     * @param string|null $ssh_username SSH Username
     *
     * @return self
     */
    public function setSshUsername($ssh_username)
    {
        $this->container['ssh_username'] = $ssh_username;

        return $this;
    }

    /**
     * Gets ssh_password
     *
     * @return string|null
     */
    public function getSshPassword()
    {
        return $this->container['ssh_password'];
    }

    /**
     * Sets ssh_password
     *
     * @param string|null $ssh_password SSH Password
     *
     * @return self
     */
    public function setSshPassword($ssh_password)
    {
        $this->container['ssh_password'] = $ssh_password;

        return $this;
    }

    /**
     * Gets storage_provider
     *
     * @return string|null
     */
    public function getStorageProvider()
    {
        return $this->container['storage_provider'];
    }

    /**
     * Sets storage_provider
     *
     * @param string|null $storage_provider Storage Provider
     *
     * @return self
     */
    public function setStorageProvider($storage_provider)
    {
        $this->container['storage_provider'] = $storage_provider;

        return $this;
    }

    /**
     * Gets is_cloud_init
     *
     * @return string|null
     */
    public function getIsCloudInit()
    {
        return $this->container['is_cloud_init'];
    }

    /**
     * Sets is_cloud_init
     *
     * @param string|null $is_cloud_init Cloud Init
     *
     * @return self
     */
    public function setIsCloudInit($is_cloud_init)
    {
        $this->container['is_cloud_init'] = $is_cloud_init;

        return $this;
    }

    /**
     * Gets build_output_name
     *
     * @return string|null
     */
    public function getBuildOutputName()
    {
        return $this->container['build_output_name'];
    }

    /**
     * Sets build_output_name
     *
     * @param string|null $build_output_name Build Output Name
     *
     * @return self
     */
    public function setBuildOutputName($build_output_name)
    {
        $this->container['build_output_name'] = $build_output_name;

        return $this;
    }

    /**
     * Gets conversion_formats
     *
     * @return string|null
     */
    public function getConversionFormats()
    {
        return $this->container['conversion_formats'];
    }

    /**
     * Sets conversion_formats
     *
     * @param string|null $conversion_formats Conversion Formats
     *
     * @return self
     */
    public function setConversionFormats($conversion_formats)
    {
        $allowedValues = $this->getConversionFormatsAllowableValues();
        if (!is_null($conversion_formats) && !in_array($conversion_formats, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'conversion_formats', must be one of '%s'",
                    $conversion_formats,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['conversion_formats'] = $conversion_formats;

        return $this;
    }

    /**
     * Gets keep_results
     *
     * @return int|null
     */
    public function getKeepResults()
    {
        return $this->container['keep_results'];
    }

    /**
     * Sets keep_results
     *
     * @param int|null $keep_results Keep Results - Keep only the most recent builds. Older executions will be deleted along with their associated Virtual Images. The value 0 disables this functionality.
     *
     * @return self
     */
    public function setKeepResults($keep_results)
    {
        $this->container['keep_results'] = $keep_results;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


