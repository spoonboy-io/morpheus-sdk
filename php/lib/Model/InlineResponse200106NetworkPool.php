<?php
/**
 * InlineResponse200106NetworkPool
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * InlineResponse200106NetworkPool Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineResponse200106NetworkPool implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_response_200_106_networkPool';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'type' => '\OpenAPI\Client\Model\InlineResponse20094Network',
        'account' => '\OpenAPI\Client\Model\InlineResponse20040AppDeployInstance',
        'category' => 'string',
        'code' => 'string',
        'name' => 'string',
        'display_name' => 'string',
        'internal_id' => 'string',
        'external_id' => 'string',
        'dns_domain' => 'string',
        'dns_search_path' => 'string',
        'host_prefix' => 'string',
        'http_proxy' => 'string',
        'dns_servers' => 'string[]',
        'dns_suffix_list' => 'string[]',
        'dhcp_server' => 'bool',
        'dhcp_ip' => 'string',
        'gateway' => 'string',
        'netmask' => 'string',
        'subnet_address' => 'string',
        'ip_count' => 'int',
        'free_count' => 'int',
        'pool_enabled' => 'bool',
        'tftp_server' => 'string',
        'boot_file' => 'string',
        'ref_type' => 'string',
        'ref_id' => 'string',
        'parent_type' => 'string',
        'parent_id' => 'string',
        'pool_group' => 'string',
        'ip_ranges' => '\OpenAPI\Client\Model\InlineResponse200106NetworkPoolIpRanges[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'type' => null,
        'account' => null,
        'category' => null,
        'code' => null,
        'name' => null,
        'display_name' => null,
        'internal_id' => null,
        'external_id' => null,
        'dns_domain' => null,
        'dns_search_path' => null,
        'host_prefix' => null,
        'http_proxy' => null,
        'dns_servers' => null,
        'dns_suffix_list' => null,
        'dhcp_server' => null,
        'dhcp_ip' => null,
        'gateway' => null,
        'netmask' => null,
        'subnet_address' => null,
        'ip_count' => 'int64',
        'free_count' => 'int64',
        'pool_enabled' => null,
        'tftp_server' => null,
        'boot_file' => null,
        'ref_type' => null,
        'ref_id' => null,
        'parent_type' => null,
        'parent_id' => null,
        'pool_group' => null,
        'ip_ranges' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'type' => 'type',
        'account' => 'account',
        'category' => 'category',
        'code' => 'code',
        'name' => 'name',
        'display_name' => 'displayName',
        'internal_id' => 'internalId',
        'external_id' => 'externalId',
        'dns_domain' => 'dnsDomain',
        'dns_search_path' => 'dnsSearchPath',
        'host_prefix' => 'hostPrefix',
        'http_proxy' => 'httpProxy',
        'dns_servers' => 'dnsServers',
        'dns_suffix_list' => 'dnsSuffixList',
        'dhcp_server' => 'dhcpServer',
        'dhcp_ip' => 'dhcpIp',
        'gateway' => 'gateway',
        'netmask' => 'netmask',
        'subnet_address' => 'subnetAddress',
        'ip_count' => 'ipCount',
        'free_count' => 'freeCount',
        'pool_enabled' => 'poolEnabled',
        'tftp_server' => 'tftpServer',
        'boot_file' => 'bootFile',
        'ref_type' => 'refType',
        'ref_id' => 'refId',
        'parent_type' => 'parentType',
        'parent_id' => 'parentId',
        'pool_group' => 'poolGroup',
        'ip_ranges' => 'ipRanges'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'type' => 'setType',
        'account' => 'setAccount',
        'category' => 'setCategory',
        'code' => 'setCode',
        'name' => 'setName',
        'display_name' => 'setDisplayName',
        'internal_id' => 'setInternalId',
        'external_id' => 'setExternalId',
        'dns_domain' => 'setDnsDomain',
        'dns_search_path' => 'setDnsSearchPath',
        'host_prefix' => 'setHostPrefix',
        'http_proxy' => 'setHttpProxy',
        'dns_servers' => 'setDnsServers',
        'dns_suffix_list' => 'setDnsSuffixList',
        'dhcp_server' => 'setDhcpServer',
        'dhcp_ip' => 'setDhcpIp',
        'gateway' => 'setGateway',
        'netmask' => 'setNetmask',
        'subnet_address' => 'setSubnetAddress',
        'ip_count' => 'setIpCount',
        'free_count' => 'setFreeCount',
        'pool_enabled' => 'setPoolEnabled',
        'tftp_server' => 'setTftpServer',
        'boot_file' => 'setBootFile',
        'ref_type' => 'setRefType',
        'ref_id' => 'setRefId',
        'parent_type' => 'setParentType',
        'parent_id' => 'setParentId',
        'pool_group' => 'setPoolGroup',
        'ip_ranges' => 'setIpRanges'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'type' => 'getType',
        'account' => 'getAccount',
        'category' => 'getCategory',
        'code' => 'getCode',
        'name' => 'getName',
        'display_name' => 'getDisplayName',
        'internal_id' => 'getInternalId',
        'external_id' => 'getExternalId',
        'dns_domain' => 'getDnsDomain',
        'dns_search_path' => 'getDnsSearchPath',
        'host_prefix' => 'getHostPrefix',
        'http_proxy' => 'getHttpProxy',
        'dns_servers' => 'getDnsServers',
        'dns_suffix_list' => 'getDnsSuffixList',
        'dhcp_server' => 'getDhcpServer',
        'dhcp_ip' => 'getDhcpIp',
        'gateway' => 'getGateway',
        'netmask' => 'getNetmask',
        'subnet_address' => 'getSubnetAddress',
        'ip_count' => 'getIpCount',
        'free_count' => 'getFreeCount',
        'pool_enabled' => 'getPoolEnabled',
        'tftp_server' => 'getTftpServer',
        'boot_file' => 'getBootFile',
        'ref_type' => 'getRefType',
        'ref_id' => 'getRefId',
        'parent_type' => 'getParentType',
        'parent_id' => 'getParentId',
        'pool_group' => 'getPoolGroup',
        'ip_ranges' => 'getIpRanges'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['account'] = $data['account'] ?? null;
        $this->container['category'] = $data['category'] ?? null;
        $this->container['code'] = $data['code'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['display_name'] = $data['display_name'] ?? null;
        $this->container['internal_id'] = $data['internal_id'] ?? null;
        $this->container['external_id'] = $data['external_id'] ?? null;
        $this->container['dns_domain'] = $data['dns_domain'] ?? null;
        $this->container['dns_search_path'] = $data['dns_search_path'] ?? null;
        $this->container['host_prefix'] = $data['host_prefix'] ?? null;
        $this->container['http_proxy'] = $data['http_proxy'] ?? null;
        $this->container['dns_servers'] = $data['dns_servers'] ?? null;
        $this->container['dns_suffix_list'] = $data['dns_suffix_list'] ?? null;
        $this->container['dhcp_server'] = $data['dhcp_server'] ?? null;
        $this->container['dhcp_ip'] = $data['dhcp_ip'] ?? null;
        $this->container['gateway'] = $data['gateway'] ?? null;
        $this->container['netmask'] = $data['netmask'] ?? null;
        $this->container['subnet_address'] = $data['subnet_address'] ?? null;
        $this->container['ip_count'] = $data['ip_count'] ?? null;
        $this->container['free_count'] = $data['free_count'] ?? null;
        $this->container['pool_enabled'] = $data['pool_enabled'] ?? null;
        $this->container['tftp_server'] = $data['tftp_server'] ?? null;
        $this->container['boot_file'] = $data['boot_file'] ?? null;
        $this->container['ref_type'] = $data['ref_type'] ?? null;
        $this->container['ref_id'] = $data['ref_id'] ?? null;
        $this->container['parent_type'] = $data['parent_type'] ?? null;
        $this->container['parent_id'] = $data['parent_id'] ?? null;
        $this->container['pool_group'] = $data['pool_group'] ?? null;
        $this->container['ip_ranges'] = $data['ip_ranges'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \OpenAPI\Client\Model\InlineResponse20094Network|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \OpenAPI\Client\Model\InlineResponse20094Network|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets account
     *
     * @return \OpenAPI\Client\Model\InlineResponse20040AppDeployInstance|null
     */
    public function getAccount()
    {
        return $this->container['account'];
    }

    /**
     * Sets account
     *
     * @param \OpenAPI\Client\Model\InlineResponse20040AppDeployInstance|null $account account
     *
     * @return self
     */
    public function setAccount($account)
    {
        $this->container['account'] = $account;

        return $this;
    }

    /**
     * Gets category
     *
     * @return string|null
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param string|null $category category
     *
     * @return self
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string|null
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string|null $code code
     *
     * @return self
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets display_name
     *
     * @return string|null
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string|null $display_name display_name
     *
     * @return self
     */
    public function setDisplayName($display_name)
    {
        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets internal_id
     *
     * @return string|null
     */
    public function getInternalId()
    {
        return $this->container['internal_id'];
    }

    /**
     * Sets internal_id
     *
     * @param string|null $internal_id internal_id
     *
     * @return self
     */
    public function setInternalId($internal_id)
    {
        $this->container['internal_id'] = $internal_id;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string|null
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string|null $external_id external_id
     *
     * @return self
     */
    public function setExternalId($external_id)
    {
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets dns_domain
     *
     * @return string|null
     */
    public function getDnsDomain()
    {
        return $this->container['dns_domain'];
    }

    /**
     * Sets dns_domain
     *
     * @param string|null $dns_domain dns_domain
     *
     * @return self
     */
    public function setDnsDomain($dns_domain)
    {
        $this->container['dns_domain'] = $dns_domain;

        return $this;
    }

    /**
     * Gets dns_search_path
     *
     * @return string|null
     */
    public function getDnsSearchPath()
    {
        return $this->container['dns_search_path'];
    }

    /**
     * Sets dns_search_path
     *
     * @param string|null $dns_search_path dns_search_path
     *
     * @return self
     */
    public function setDnsSearchPath($dns_search_path)
    {
        $this->container['dns_search_path'] = $dns_search_path;

        return $this;
    }

    /**
     * Gets host_prefix
     *
     * @return string|null
     */
    public function getHostPrefix()
    {
        return $this->container['host_prefix'];
    }

    /**
     * Sets host_prefix
     *
     * @param string|null $host_prefix host_prefix
     *
     * @return self
     */
    public function setHostPrefix($host_prefix)
    {
        $this->container['host_prefix'] = $host_prefix;

        return $this;
    }

    /**
     * Gets http_proxy
     *
     * @return string|null
     */
    public function getHttpProxy()
    {
        return $this->container['http_proxy'];
    }

    /**
     * Sets http_proxy
     *
     * @param string|null $http_proxy http_proxy
     *
     * @return self
     */
    public function setHttpProxy($http_proxy)
    {
        $this->container['http_proxy'] = $http_proxy;

        return $this;
    }

    /**
     * Gets dns_servers
     *
     * @return string[]|null
     */
    public function getDnsServers()
    {
        return $this->container['dns_servers'];
    }

    /**
     * Sets dns_servers
     *
     * @param string[]|null $dns_servers dns_servers
     *
     * @return self
     */
    public function setDnsServers($dns_servers)
    {
        $this->container['dns_servers'] = $dns_servers;

        return $this;
    }

    /**
     * Gets dns_suffix_list
     *
     * @return string[]|null
     */
    public function getDnsSuffixList()
    {
        return $this->container['dns_suffix_list'];
    }

    /**
     * Sets dns_suffix_list
     *
     * @param string[]|null $dns_suffix_list dns_suffix_list
     *
     * @return self
     */
    public function setDnsSuffixList($dns_suffix_list)
    {
        $this->container['dns_suffix_list'] = $dns_suffix_list;

        return $this;
    }

    /**
     * Gets dhcp_server
     *
     * @return bool|null
     */
    public function getDhcpServer()
    {
        return $this->container['dhcp_server'];
    }

    /**
     * Sets dhcp_server
     *
     * @param bool|null $dhcp_server dhcp_server
     *
     * @return self
     */
    public function setDhcpServer($dhcp_server)
    {
        $this->container['dhcp_server'] = $dhcp_server;

        return $this;
    }

    /**
     * Gets dhcp_ip
     *
     * @return string|null
     */
    public function getDhcpIp()
    {
        return $this->container['dhcp_ip'];
    }

    /**
     * Sets dhcp_ip
     *
     * @param string|null $dhcp_ip dhcp_ip
     *
     * @return self
     */
    public function setDhcpIp($dhcp_ip)
    {
        $this->container['dhcp_ip'] = $dhcp_ip;

        return $this;
    }

    /**
     * Gets gateway
     *
     * @return string|null
     */
    public function getGateway()
    {
        return $this->container['gateway'];
    }

    /**
     * Sets gateway
     *
     * @param string|null $gateway gateway
     *
     * @return self
     */
    public function setGateway($gateway)
    {
        $this->container['gateway'] = $gateway;

        return $this;
    }

    /**
     * Gets netmask
     *
     * @return string|null
     */
    public function getNetmask()
    {
        return $this->container['netmask'];
    }

    /**
     * Sets netmask
     *
     * @param string|null $netmask netmask
     *
     * @return self
     */
    public function setNetmask($netmask)
    {
        $this->container['netmask'] = $netmask;

        return $this;
    }

    /**
     * Gets subnet_address
     *
     * @return string|null
     */
    public function getSubnetAddress()
    {
        return $this->container['subnet_address'];
    }

    /**
     * Sets subnet_address
     *
     * @param string|null $subnet_address subnet_address
     *
     * @return self
     */
    public function setSubnetAddress($subnet_address)
    {
        $this->container['subnet_address'] = $subnet_address;

        return $this;
    }

    /**
     * Gets ip_count
     *
     * @return int|null
     */
    public function getIpCount()
    {
        return $this->container['ip_count'];
    }

    /**
     * Sets ip_count
     *
     * @param int|null $ip_count ip_count
     *
     * @return self
     */
    public function setIpCount($ip_count)
    {
        $this->container['ip_count'] = $ip_count;

        return $this;
    }

    /**
     * Gets free_count
     *
     * @return int|null
     */
    public function getFreeCount()
    {
        return $this->container['free_count'];
    }

    /**
     * Sets free_count
     *
     * @param int|null $free_count free_count
     *
     * @return self
     */
    public function setFreeCount($free_count)
    {
        $this->container['free_count'] = $free_count;

        return $this;
    }

    /**
     * Gets pool_enabled
     *
     * @return bool|null
     */
    public function getPoolEnabled()
    {
        return $this->container['pool_enabled'];
    }

    /**
     * Sets pool_enabled
     *
     * @param bool|null $pool_enabled pool_enabled
     *
     * @return self
     */
    public function setPoolEnabled($pool_enabled)
    {
        $this->container['pool_enabled'] = $pool_enabled;

        return $this;
    }

    /**
     * Gets tftp_server
     *
     * @return string|null
     */
    public function getTftpServer()
    {
        return $this->container['tftp_server'];
    }

    /**
     * Sets tftp_server
     *
     * @param string|null $tftp_server tftp_server
     *
     * @return self
     */
    public function setTftpServer($tftp_server)
    {
        $this->container['tftp_server'] = $tftp_server;

        return $this;
    }

    /**
     * Gets boot_file
     *
     * @return string|null
     */
    public function getBootFile()
    {
        return $this->container['boot_file'];
    }

    /**
     * Sets boot_file
     *
     * @param string|null $boot_file boot_file
     *
     * @return self
     */
    public function setBootFile($boot_file)
    {
        $this->container['boot_file'] = $boot_file;

        return $this;
    }

    /**
     * Gets ref_type
     *
     * @return string|null
     */
    public function getRefType()
    {
        return $this->container['ref_type'];
    }

    /**
     * Sets ref_type
     *
     * @param string|null $ref_type ref_type
     *
     * @return self
     */
    public function setRefType($ref_type)
    {
        $this->container['ref_type'] = $ref_type;

        return $this;
    }

    /**
     * Gets ref_id
     *
     * @return string|null
     */
    public function getRefId()
    {
        return $this->container['ref_id'];
    }

    /**
     * Sets ref_id
     *
     * @param string|null $ref_id ref_id
     *
     * @return self
     */
    public function setRefId($ref_id)
    {
        $this->container['ref_id'] = $ref_id;

        return $this;
    }

    /**
     * Gets parent_type
     *
     * @return string|null
     */
    public function getParentType()
    {
        return $this->container['parent_type'];
    }

    /**
     * Sets parent_type
     *
     * @param string|null $parent_type parent_type
     *
     * @return self
     */
    public function setParentType($parent_type)
    {
        $this->container['parent_type'] = $parent_type;

        return $this;
    }

    /**
     * Gets parent_id
     *
     * @return string|null
     */
    public function getParentId()
    {
        return $this->container['parent_id'];
    }

    /**
     * Sets parent_id
     *
     * @param string|null $parent_id parent_id
     *
     * @return self
     */
    public function setParentId($parent_id)
    {
        $this->container['parent_id'] = $parent_id;

        return $this;
    }

    /**
     * Gets pool_group
     *
     * @return string|null
     */
    public function getPoolGroup()
    {
        return $this->container['pool_group'];
    }

    /**
     * Sets pool_group
     *
     * @param string|null $pool_group pool_group
     *
     * @return self
     */
    public function setPoolGroup($pool_group)
    {
        $this->container['pool_group'] = $pool_group;

        return $this;
    }

    /**
     * Gets ip_ranges
     *
     * @return \OpenAPI\Client\Model\InlineResponse200106NetworkPoolIpRanges[]|null
     */
    public function getIpRanges()
    {
        return $this->container['ip_ranges'];
    }

    /**
     * Sets ip_ranges
     *
     * @param \OpenAPI\Client\Model\InlineResponse200106NetworkPoolIpRanges[]|null $ip_ranges ip_ranges
     *
     * @return self
     */
    public function setIpRanges($ip_ranges)
    {
        $this->container['ip_ranges'] = $ip_ranges;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


