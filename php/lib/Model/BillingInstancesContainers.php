<?php
/**
 * BillingInstancesContainers
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * BillingInstancesContainers Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class BillingInstancesContainers implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'billingInstances_containers';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'ref_type' => 'string',
        'ref_uuid' => 'string',
        'ref_id' => 'int',
        'start_date' => '\DateTime',
        'end_date' => '\DateTime',
        'cost' => 'float',
        'price' => 'float',
        'num_units' => 'float',
        'unit' => 'string',
        'currency' => 'string',
        'usages' => '\OpenAPI\Client\Model\BillingInstancesUsages[]',
        'num_usages' => 'int',
        'total_usages' => 'int',
        'has_more_usages' => 'bool',
        'found_pricing' => 'bool',
        'name' => 'string',
        'server_id' => 'int',
        'server_uuid' => 'string',
        'server_unique_id' => 'string',
        'server_external_id' => 'string',
        'server_internal_id' => 'string',
        'resource_pool_id' => 'int',
        'resource_pool_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'ref_type' => null,
        'ref_uuid' => null,
        'ref_id' => 'int64',
        'start_date' => 'date-time',
        'end_date' => 'date-time',
        'cost' => null,
        'price' => null,
        'num_units' => null,
        'unit' => null,
        'currency' => null,
        'usages' => null,
        'num_usages' => 'int64',
        'total_usages' => 'int64',
        'has_more_usages' => null,
        'found_pricing' => null,
        'name' => null,
        'server_id' => 'int64',
        'server_uuid' => null,
        'server_unique_id' => null,
        'server_external_id' => null,
        'server_internal_id' => null,
        'resource_pool_id' => 'int64',
        'resource_pool_name' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ref_type' => 'refType',
        'ref_uuid' => 'refUUID',
        'ref_id' => 'refId',
        'start_date' => 'startDate',
        'end_date' => 'endDate',
        'cost' => 'cost',
        'price' => 'price',
        'num_units' => 'numUnits',
        'unit' => 'unit',
        'currency' => 'currency',
        'usages' => 'usages',
        'num_usages' => 'numUsages',
        'total_usages' => 'totalUsages',
        'has_more_usages' => 'hasMoreUsages',
        'found_pricing' => 'foundPricing',
        'name' => 'name',
        'server_id' => 'serverId',
        'server_uuid' => 'serverUUID',
        'server_unique_id' => 'serverUniqueId',
        'server_external_id' => 'serverExternalId',
        'server_internal_id' => 'serverInternalId',
        'resource_pool_id' => 'resourcePoolId',
        'resource_pool_name' => 'resourcePoolName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ref_type' => 'setRefType',
        'ref_uuid' => 'setRefUuid',
        'ref_id' => 'setRefId',
        'start_date' => 'setStartDate',
        'end_date' => 'setEndDate',
        'cost' => 'setCost',
        'price' => 'setPrice',
        'num_units' => 'setNumUnits',
        'unit' => 'setUnit',
        'currency' => 'setCurrency',
        'usages' => 'setUsages',
        'num_usages' => 'setNumUsages',
        'total_usages' => 'setTotalUsages',
        'has_more_usages' => 'setHasMoreUsages',
        'found_pricing' => 'setFoundPricing',
        'name' => 'setName',
        'server_id' => 'setServerId',
        'server_uuid' => 'setServerUuid',
        'server_unique_id' => 'setServerUniqueId',
        'server_external_id' => 'setServerExternalId',
        'server_internal_id' => 'setServerInternalId',
        'resource_pool_id' => 'setResourcePoolId',
        'resource_pool_name' => 'setResourcePoolName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ref_type' => 'getRefType',
        'ref_uuid' => 'getRefUuid',
        'ref_id' => 'getRefId',
        'start_date' => 'getStartDate',
        'end_date' => 'getEndDate',
        'cost' => 'getCost',
        'price' => 'getPrice',
        'num_units' => 'getNumUnits',
        'unit' => 'getUnit',
        'currency' => 'getCurrency',
        'usages' => 'getUsages',
        'num_usages' => 'getNumUsages',
        'total_usages' => 'getTotalUsages',
        'has_more_usages' => 'getHasMoreUsages',
        'found_pricing' => 'getFoundPricing',
        'name' => 'getName',
        'server_id' => 'getServerId',
        'server_uuid' => 'getServerUuid',
        'server_unique_id' => 'getServerUniqueId',
        'server_external_id' => 'getServerExternalId',
        'server_internal_id' => 'getServerInternalId',
        'resource_pool_id' => 'getResourcePoolId',
        'resource_pool_name' => 'getResourcePoolName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['ref_type'] = $data['ref_type'] ?? null;
        $this->container['ref_uuid'] = $data['ref_uuid'] ?? null;
        $this->container['ref_id'] = $data['ref_id'] ?? null;
        $this->container['start_date'] = $data['start_date'] ?? null;
        $this->container['end_date'] = $data['end_date'] ?? null;
        $this->container['cost'] = $data['cost'] ?? null;
        $this->container['price'] = $data['price'] ?? null;
        $this->container['num_units'] = $data['num_units'] ?? null;
        $this->container['unit'] = $data['unit'] ?? null;
        $this->container['currency'] = $data['currency'] ?? null;
        $this->container['usages'] = $data['usages'] ?? null;
        $this->container['num_usages'] = $data['num_usages'] ?? null;
        $this->container['total_usages'] = $data['total_usages'] ?? null;
        $this->container['has_more_usages'] = $data['has_more_usages'] ?? null;
        $this->container['found_pricing'] = $data['found_pricing'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['server_id'] = $data['server_id'] ?? null;
        $this->container['server_uuid'] = $data['server_uuid'] ?? null;
        $this->container['server_unique_id'] = $data['server_unique_id'] ?? null;
        $this->container['server_external_id'] = $data['server_external_id'] ?? null;
        $this->container['server_internal_id'] = $data['server_internal_id'] ?? null;
        $this->container['resource_pool_id'] = $data['resource_pool_id'] ?? null;
        $this->container['resource_pool_name'] = $data['resource_pool_name'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ref_type
     *
     * @return string|null
     */
    public function getRefType()
    {
        return $this->container['ref_type'];
    }

    /**
     * Sets ref_type
     *
     * @param string|null $ref_type ref_type
     *
     * @return self
     */
    public function setRefType($ref_type)
    {
        $this->container['ref_type'] = $ref_type;

        return $this;
    }

    /**
     * Gets ref_uuid
     *
     * @return string|null
     */
    public function getRefUuid()
    {
        return $this->container['ref_uuid'];
    }

    /**
     * Sets ref_uuid
     *
     * @param string|null $ref_uuid ref_uuid
     *
     * @return self
     */
    public function setRefUuid($ref_uuid)
    {
        $this->container['ref_uuid'] = $ref_uuid;

        return $this;
    }

    /**
     * Gets ref_id
     *
     * @return int|null
     */
    public function getRefId()
    {
        return $this->container['ref_id'];
    }

    /**
     * Sets ref_id
     *
     * @param int|null $ref_id ref_id
     *
     * @return self
     */
    public function setRefId($ref_id)
    {
        $this->container['ref_id'] = $ref_id;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return \DateTime|null
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime|null $start_date start_date
     *
     * @return self
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime|null
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime|null $end_date end_date
     *
     * @return self
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets cost
     *
     * @return float|null
     */
    public function getCost()
    {
        return $this->container['cost'];
    }

    /**
     * Sets cost
     *
     * @param float|null $cost cost
     *
     * @return self
     */
    public function setCost($cost)
    {
        $this->container['cost'] = $cost;

        return $this;
    }

    /**
     * Gets price
     *
     * @return float|null
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param float|null $price price
     *
     * @return self
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets num_units
     *
     * @return float|null
     */
    public function getNumUnits()
    {
        return $this->container['num_units'];
    }

    /**
     * Sets num_units
     *
     * @param float|null $num_units num_units
     *
     * @return self
     */
    public function setNumUnits($num_units)
    {
        $this->container['num_units'] = $num_units;

        return $this;
    }

    /**
     * Gets unit
     *
     * @return string|null
     */
    public function getUnit()
    {
        return $this->container['unit'];
    }

    /**
     * Sets unit
     *
     * @param string|null $unit unit
     *
     * @return self
     */
    public function setUnit($unit)
    {
        $this->container['unit'] = $unit;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency currency
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets usages
     *
     * @return \OpenAPI\Client\Model\BillingInstancesUsages[]|null
     */
    public function getUsages()
    {
        return $this->container['usages'];
    }

    /**
     * Sets usages
     *
     * @param \OpenAPI\Client\Model\BillingInstancesUsages[]|null $usages usages
     *
     * @return self
     */
    public function setUsages($usages)
    {
        $this->container['usages'] = $usages;

        return $this;
    }

    /**
     * Gets num_usages
     *
     * @return int|null
     */
    public function getNumUsages()
    {
        return $this->container['num_usages'];
    }

    /**
     * Sets num_usages
     *
     * @param int|null $num_usages num_usages
     *
     * @return self
     */
    public function setNumUsages($num_usages)
    {
        $this->container['num_usages'] = $num_usages;

        return $this;
    }

    /**
     * Gets total_usages
     *
     * @return int|null
     */
    public function getTotalUsages()
    {
        return $this->container['total_usages'];
    }

    /**
     * Sets total_usages
     *
     * @param int|null $total_usages total_usages
     *
     * @return self
     */
    public function setTotalUsages($total_usages)
    {
        $this->container['total_usages'] = $total_usages;

        return $this;
    }

    /**
     * Gets has_more_usages
     *
     * @return bool|null
     */
    public function getHasMoreUsages()
    {
        return $this->container['has_more_usages'];
    }

    /**
     * Sets has_more_usages
     *
     * @param bool|null $has_more_usages has_more_usages
     *
     * @return self
     */
    public function setHasMoreUsages($has_more_usages)
    {
        $this->container['has_more_usages'] = $has_more_usages;

        return $this;
    }

    /**
     * Gets found_pricing
     *
     * @return bool|null
     */
    public function getFoundPricing()
    {
        return $this->container['found_pricing'];
    }

    /**
     * Sets found_pricing
     *
     * @param bool|null $found_pricing found_pricing
     *
     * @return self
     */
    public function setFoundPricing($found_pricing)
    {
        $this->container['found_pricing'] = $found_pricing;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets server_id
     *
     * @return int|null
     */
    public function getServerId()
    {
        return $this->container['server_id'];
    }

    /**
     * Sets server_id
     *
     * @param int|null $server_id server_id
     *
     * @return self
     */
    public function setServerId($server_id)
    {
        $this->container['server_id'] = $server_id;

        return $this;
    }

    /**
     * Gets server_uuid
     *
     * @return string|null
     */
    public function getServerUuid()
    {
        return $this->container['server_uuid'];
    }

    /**
     * Sets server_uuid
     *
     * @param string|null $server_uuid server_uuid
     *
     * @return self
     */
    public function setServerUuid($server_uuid)
    {
        $this->container['server_uuid'] = $server_uuid;

        return $this;
    }

    /**
     * Gets server_unique_id
     *
     * @return string|null
     */
    public function getServerUniqueId()
    {
        return $this->container['server_unique_id'];
    }

    /**
     * Sets server_unique_id
     *
     * @param string|null $server_unique_id server_unique_id
     *
     * @return self
     */
    public function setServerUniqueId($server_unique_id)
    {
        $this->container['server_unique_id'] = $server_unique_id;

        return $this;
    }

    /**
     * Gets server_external_id
     *
     * @return string|null
     */
    public function getServerExternalId()
    {
        return $this->container['server_external_id'];
    }

    /**
     * Sets server_external_id
     *
     * @param string|null $server_external_id server_external_id
     *
     * @return self
     */
    public function setServerExternalId($server_external_id)
    {
        $this->container['server_external_id'] = $server_external_id;

        return $this;
    }

    /**
     * Gets server_internal_id
     *
     * @return string|null
     */
    public function getServerInternalId()
    {
        return $this->container['server_internal_id'];
    }

    /**
     * Sets server_internal_id
     *
     * @param string|null $server_internal_id server_internal_id
     *
     * @return self
     */
    public function setServerInternalId($server_internal_id)
    {
        $this->container['server_internal_id'] = $server_internal_id;

        return $this;
    }

    /**
     * Gets resource_pool_id
     *
     * @return int|null
     */
    public function getResourcePoolId()
    {
        return $this->container['resource_pool_id'];
    }

    /**
     * Sets resource_pool_id
     *
     * @param int|null $resource_pool_id resource_pool_id
     *
     * @return self
     */
    public function setResourcePoolId($resource_pool_id)
    {
        $this->container['resource_pool_id'] = $resource_pool_id;

        return $this;
    }

    /**
     * Gets resource_pool_name
     *
     * @return string|null
     */
    public function getResourcePoolName()
    {
        return $this->container['resource_pool_name'];
    }

    /**
     * Sets resource_pool_name
     *
     * @param string|null $resource_pool_name resource_pool_name
     *
     * @return self
     */
    public function setResourcePoolName($resource_pool_name)
    {
        $this->container['resource_pool_name'] = $resource_pool_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


