<?php
/**
 * MonitoringSettingsServiceNow
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * MonitoringSettingsServiceNow Class Doc Comment
 *
 * @category Class
 * @description Service Now Settings
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class MonitoringSettingsServiceNow implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'monitoringSettings_serviceNow';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'enabled' => 'bool',
        'integration' => '\OpenAPI\Client\Model\MonitoringSettingsServiceNowIntegration',
        'new_incident_action' => 'string',
        'close_incident_action' => 'string',
        'info_mapping' => 'string',
        'warning_mapping' => 'string',
        'critical_mapping' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'enabled' => null,
        'integration' => null,
        'new_incident_action' => null,
        'close_incident_action' => null,
        'info_mapping' => null,
        'warning_mapping' => null,
        'critical_mapping' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'enabled' => 'enabled',
        'integration' => 'integration',
        'new_incident_action' => 'newIncidentAction',
        'close_incident_action' => 'closeIncidentAction',
        'info_mapping' => 'infoMapping',
        'warning_mapping' => 'warningMapping',
        'critical_mapping' => 'criticalMapping'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'enabled' => 'setEnabled',
        'integration' => 'setIntegration',
        'new_incident_action' => 'setNewIncidentAction',
        'close_incident_action' => 'setCloseIncidentAction',
        'info_mapping' => 'setInfoMapping',
        'warning_mapping' => 'setWarningMapping',
        'critical_mapping' => 'setCriticalMapping'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'enabled' => 'getEnabled',
        'integration' => 'getIntegration',
        'new_incident_action' => 'getNewIncidentAction',
        'close_incident_action' => 'getCloseIncidentAction',
        'info_mapping' => 'getInfoMapping',
        'warning_mapping' => 'getWarningMapping',
        'critical_mapping' => 'getCriticalMapping'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const NEW_INCIDENT_ACTION_CREATE = 'create';
    const NEW_INCIDENT_ACTION_NONE = 'none';
    const CLOSE_INCIDENT_ACTION_CLOSE = 'close';
    const CLOSE_INCIDENT_ACTION_ACTIVITY = 'activity';
    const CLOSE_INCIDENT_ACTION_NONE = 'none';
    const INFO_MAPPING_LOW = 'low';
    const INFO_MAPPING_MEDIUM = 'medium';
    const INFO_MAPPING_HIGH = 'high';
    const WARNING_MAPPING_LOW = 'low';
    const WARNING_MAPPING_MEDIUM = 'medium';
    const WARNING_MAPPING_HIGH = 'high';
    const CRITICAL_MAPPING_LOW = 'low';
    const CRITICAL_MAPPING_MEDIUM = 'medium';
    const CRITICAL_MAPPING_HIGH = 'high';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getNewIncidentActionAllowableValues()
    {
        return [
            self::NEW_INCIDENT_ACTION_CREATE,
            self::NEW_INCIDENT_ACTION_NONE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCloseIncidentActionAllowableValues()
    {
        return [
            self::CLOSE_INCIDENT_ACTION_CLOSE,
            self::CLOSE_INCIDENT_ACTION_ACTIVITY,
            self::CLOSE_INCIDENT_ACTION_NONE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getInfoMappingAllowableValues()
    {
        return [
            self::INFO_MAPPING_LOW,
            self::INFO_MAPPING_MEDIUM,
            self::INFO_MAPPING_HIGH,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWarningMappingAllowableValues()
    {
        return [
            self::WARNING_MAPPING_LOW,
            self::WARNING_MAPPING_MEDIUM,
            self::WARNING_MAPPING_HIGH,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCriticalMappingAllowableValues()
    {
        return [
            self::CRITICAL_MAPPING_LOW,
            self::CRITICAL_MAPPING_MEDIUM,
            self::CRITICAL_MAPPING_HIGH,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['enabled'] = $data['enabled'] ?? null;
        $this->container['integration'] = $data['integration'] ?? null;
        $this->container['new_incident_action'] = $data['new_incident_action'] ?? null;
        $this->container['close_incident_action'] = $data['close_incident_action'] ?? null;
        $this->container['info_mapping'] = $data['info_mapping'] ?? null;
        $this->container['warning_mapping'] = $data['warning_mapping'] ?? null;
        $this->container['critical_mapping'] = $data['critical_mapping'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getNewIncidentActionAllowableValues();
        if (!is_null($this->container['new_incident_action']) && !in_array($this->container['new_incident_action'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'new_incident_action', must be one of '%s'",
                $this->container['new_incident_action'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCloseIncidentActionAllowableValues();
        if (!is_null($this->container['close_incident_action']) && !in_array($this->container['close_incident_action'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'close_incident_action', must be one of '%s'",
                $this->container['close_incident_action'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getInfoMappingAllowableValues();
        if (!is_null($this->container['info_mapping']) && !in_array($this->container['info_mapping'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'info_mapping', must be one of '%s'",
                $this->container['info_mapping'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getWarningMappingAllowableValues();
        if (!is_null($this->container['warning_mapping']) && !in_array($this->container['warning_mapping'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'warning_mapping', must be one of '%s'",
                $this->container['warning_mapping'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCriticalMappingAllowableValues();
        if (!is_null($this->container['critical_mapping']) && !in_array($this->container['critical_mapping'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'critical_mapping', must be one of '%s'",
                $this->container['critical_mapping'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets enabled
     *
     * @return bool|null
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool|null $enabled Enabled
     *
     * @return self
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets integration
     *
     * @return \OpenAPI\Client\Model\MonitoringSettingsServiceNowIntegration|null
     */
    public function getIntegration()
    {
        return $this->container['integration'];
    }

    /**
     * Sets integration
     *
     * @param \OpenAPI\Client\Model\MonitoringSettingsServiceNowIntegration|null $integration integration
     *
     * @return self
     */
    public function setIntegration($integration)
    {
        $this->container['integration'] = $integration;

        return $this;
    }

    /**
     * Gets new_incident_action
     *
     * @return string|null
     */
    public function getNewIncidentAction()
    {
        return $this->container['new_incident_action'];
    }

    /**
     * Sets new_incident_action
     *
     * @param string|null $new_incident_action New Incident Action
     *
     * @return self
     */
    public function setNewIncidentAction($new_incident_action)
    {
        $allowedValues = $this->getNewIncidentActionAllowableValues();
        if (!is_null($new_incident_action) && !in_array($new_incident_action, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'new_incident_action', must be one of '%s'",
                    $new_incident_action,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['new_incident_action'] = $new_incident_action;

        return $this;
    }

    /**
     * Gets close_incident_action
     *
     * @return string|null
     */
    public function getCloseIncidentAction()
    {
        return $this->container['close_incident_action'];
    }

    /**
     * Sets close_incident_action
     *
     * @param string|null $close_incident_action Close Incident Action
     *
     * @return self
     */
    public function setCloseIncidentAction($close_incident_action)
    {
        $allowedValues = $this->getCloseIncidentActionAllowableValues();
        if (!is_null($close_incident_action) && !in_array($close_incident_action, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'close_incident_action', must be one of '%s'",
                    $close_incident_action,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['close_incident_action'] = $close_incident_action;

        return $this;
    }

    /**
     * Gets info_mapping
     *
     * @return string|null
     */
    public function getInfoMapping()
    {
        return $this->container['info_mapping'];
    }

    /**
     * Sets info_mapping
     *
     * @param string|null $info_mapping Info Mapping
     *
     * @return self
     */
    public function setInfoMapping($info_mapping)
    {
        $allowedValues = $this->getInfoMappingAllowableValues();
        if (!is_null($info_mapping) && !in_array($info_mapping, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'info_mapping', must be one of '%s'",
                    $info_mapping,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['info_mapping'] = $info_mapping;

        return $this;
    }

    /**
     * Gets warning_mapping
     *
     * @return string|null
     */
    public function getWarningMapping()
    {
        return $this->container['warning_mapping'];
    }

    /**
     * Sets warning_mapping
     *
     * @param string|null $warning_mapping Warning Mapping
     *
     * @return self
     */
    public function setWarningMapping($warning_mapping)
    {
        $allowedValues = $this->getWarningMappingAllowableValues();
        if (!is_null($warning_mapping) && !in_array($warning_mapping, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'warning_mapping', must be one of '%s'",
                    $warning_mapping,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['warning_mapping'] = $warning_mapping;

        return $this;
    }

    /**
     * Gets critical_mapping
     *
     * @return string|null
     */
    public function getCriticalMapping()
    {
        return $this->container['critical_mapping'];
    }

    /**
     * Sets critical_mapping
     *
     * @param string|null $critical_mapping Critical Mapping
     *
     * @return self
     */
    public function setCriticalMapping($critical_mapping)
    {
        $allowedValues = $this->getCriticalMappingAllowableValues();
        if (!is_null($critical_mapping) && !in_array($critical_mapping, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'critical_mapping', must be one of '%s'",
                    $critical_mapping,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['critical_mapping'] = $critical_mapping;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


