<?php
/**
 * NetworkPoolServer
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * NetworkPoolServer Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class NetworkPoolServer implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'networkPoolServer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'type' => '\OpenAPI\Client\Model\NetworkPoolServerType',
        'name' => 'string',
        'enabled' => 'bool',
        'service_url' => 'string',
        'service_host' => 'string',
        'service_port' => 'int',
        'service_mode' => 'string',
        'service_username' => 'string',
        'service_password' => 'string',
        'service_password_hash' => 'string',
        'service_throttle_rate' => 'int',
        'ignore_ssl' => 'bool',
        'status' => 'string',
        'status_message' => 'string',
        'status_date' => '\DateTime',
        'config' => 'object',
        'network_filter' => 'string',
        'zone_filter' => 'string',
        'tenant_match' => 'string',
        'date_created' => '\DateTime',
        'last_updated' => '\DateTime',
        'account' => '\OpenAPI\Client\Model\NetworkPoolServerAccount',
        'integration' => '\OpenAPI\Client\Model\NetworkPoolServerIntegration',
        'pools' => '\OpenAPI\Client\Model\InlineResponse20040AppDeployInstance[]',
        'credential' => '\OpenAPI\Client\Model\Creds2'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'type' => null,
        'name' => null,
        'enabled' => null,
        'service_url' => null,
        'service_host' => null,
        'service_port' => null,
        'service_mode' => null,
        'service_username' => null,
        'service_password' => null,
        'service_password_hash' => null,
        'service_throttle_rate' => 'int64',
        'ignore_ssl' => null,
        'status' => null,
        'status_message' => null,
        'status_date' => 'date-time',
        'config' => null,
        'network_filter' => null,
        'zone_filter' => null,
        'tenant_match' => null,
        'date_created' => 'date-time',
        'last_updated' => 'date-time',
        'account' => null,
        'integration' => null,
        'pools' => null,
        'credential' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'type' => 'type',
        'name' => 'name',
        'enabled' => 'enabled',
        'service_url' => 'serviceUrl',
        'service_host' => 'serviceHost',
        'service_port' => 'servicePort',
        'service_mode' => 'serviceMode',
        'service_username' => 'serviceUsername',
        'service_password' => 'servicePassword',
        'service_password_hash' => 'servicePasswordHash',
        'service_throttle_rate' => 'serviceThrottleRate',
        'ignore_ssl' => 'ignoreSsl',
        'status' => 'status',
        'status_message' => 'statusMessage',
        'status_date' => 'statusDate',
        'config' => 'config',
        'network_filter' => 'networkFilter',
        'zone_filter' => 'zoneFilter',
        'tenant_match' => 'tenantMatch',
        'date_created' => 'dateCreated',
        'last_updated' => 'lastUpdated',
        'account' => 'account',
        'integration' => 'integration',
        'pools' => 'pools',
        'credential' => 'credential'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'type' => 'setType',
        'name' => 'setName',
        'enabled' => 'setEnabled',
        'service_url' => 'setServiceUrl',
        'service_host' => 'setServiceHost',
        'service_port' => 'setServicePort',
        'service_mode' => 'setServiceMode',
        'service_username' => 'setServiceUsername',
        'service_password' => 'setServicePassword',
        'service_password_hash' => 'setServicePasswordHash',
        'service_throttle_rate' => 'setServiceThrottleRate',
        'ignore_ssl' => 'setIgnoreSsl',
        'status' => 'setStatus',
        'status_message' => 'setStatusMessage',
        'status_date' => 'setStatusDate',
        'config' => 'setConfig',
        'network_filter' => 'setNetworkFilter',
        'zone_filter' => 'setZoneFilter',
        'tenant_match' => 'setTenantMatch',
        'date_created' => 'setDateCreated',
        'last_updated' => 'setLastUpdated',
        'account' => 'setAccount',
        'integration' => 'setIntegration',
        'pools' => 'setPools',
        'credential' => 'setCredential'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'type' => 'getType',
        'name' => 'getName',
        'enabled' => 'getEnabled',
        'service_url' => 'getServiceUrl',
        'service_host' => 'getServiceHost',
        'service_port' => 'getServicePort',
        'service_mode' => 'getServiceMode',
        'service_username' => 'getServiceUsername',
        'service_password' => 'getServicePassword',
        'service_password_hash' => 'getServicePasswordHash',
        'service_throttle_rate' => 'getServiceThrottleRate',
        'ignore_ssl' => 'getIgnoreSsl',
        'status' => 'getStatus',
        'status_message' => 'getStatusMessage',
        'status_date' => 'getStatusDate',
        'config' => 'getConfig',
        'network_filter' => 'getNetworkFilter',
        'zone_filter' => 'getZoneFilter',
        'tenant_match' => 'getTenantMatch',
        'date_created' => 'getDateCreated',
        'last_updated' => 'getLastUpdated',
        'account' => 'getAccount',
        'integration' => 'getIntegration',
        'pools' => 'getPools',
        'credential' => 'getCredential'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['enabled'] = $data['enabled'] ?? null;
        $this->container['service_url'] = $data['service_url'] ?? null;
        $this->container['service_host'] = $data['service_host'] ?? null;
        $this->container['service_port'] = $data['service_port'] ?? null;
        $this->container['service_mode'] = $data['service_mode'] ?? null;
        $this->container['service_username'] = $data['service_username'] ?? null;
        $this->container['service_password'] = $data['service_password'] ?? null;
        $this->container['service_password_hash'] = $data['service_password_hash'] ?? null;
        $this->container['service_throttle_rate'] = $data['service_throttle_rate'] ?? 0;
        $this->container['ignore_ssl'] = $data['ignore_ssl'] ?? true;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['status_message'] = $data['status_message'] ?? null;
        $this->container['status_date'] = $data['status_date'] ?? null;
        $this->container['config'] = $data['config'] ?? null;
        $this->container['network_filter'] = $data['network_filter'] ?? null;
        $this->container['zone_filter'] = $data['zone_filter'] ?? null;
        $this->container['tenant_match'] = $data['tenant_match'] ?? null;
        $this->container['date_created'] = $data['date_created'] ?? null;
        $this->container['last_updated'] = $data['last_updated'] ?? null;
        $this->container['account'] = $data['account'] ?? null;
        $this->container['integration'] = $data['integration'] ?? null;
        $this->container['pools'] = $data['pools'] ?? null;
        $this->container['credential'] = $data['credential'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id Network Pool Server ID
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \OpenAPI\Client\Model\NetworkPoolServerType|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \OpenAPI\Client\Model\NetworkPoolServerType|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool|null
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool|null $enabled enabled
     *
     * @return self
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets service_url
     *
     * @return string|null
     */
    public function getServiceUrl()
    {
        return $this->container['service_url'];
    }

    /**
     * Sets service_url
     *
     * @param string|null $service_url Service URL
     *
     * @return self
     */
    public function setServiceUrl($service_url)
    {
        $this->container['service_url'] = $service_url;

        return $this;
    }

    /**
     * Gets service_host
     *
     * @return string|null
     */
    public function getServiceHost()
    {
        return $this->container['service_host'];
    }

    /**
     * Sets service_host
     *
     * @param string|null $service_host Service Host
     *
     * @return self
     */
    public function setServiceHost($service_host)
    {
        $this->container['service_host'] = $service_host;

        return $this;
    }

    /**
     * Gets service_port
     *
     * @return int|null
     */
    public function getServicePort()
    {
        return $this->container['service_port'];
    }

    /**
     * Sets service_port
     *
     * @param int|null $service_port Service Port
     *
     * @return self
     */
    public function setServicePort($service_port)
    {
        $this->container['service_port'] = $service_port;

        return $this;
    }

    /**
     * Gets service_mode
     *
     * @return string|null
     */
    public function getServiceMode()
    {
        return $this->container['service_mode'];
    }

    /**
     * Sets service_mode
     *
     * @param string|null $service_mode Service Mode
     *
     * @return self
     */
    public function setServiceMode($service_mode)
    {
        $this->container['service_mode'] = $service_mode;

        return $this;
    }

    /**
     * Gets service_username
     *
     * @return string|null
     */
    public function getServiceUsername()
    {
        return $this->container['service_username'];
    }

    /**
     * Sets service_username
     *
     * @param string|null $service_username Service Username
     *
     * @return self
     */
    public function setServiceUsername($service_username)
    {
        $this->container['service_username'] = $service_username;

        return $this;
    }

    /**
     * Gets service_password
     *
     * @return string|null
     */
    public function getServicePassword()
    {
        return $this->container['service_password'];
    }

    /**
     * Sets service_password
     *
     * @param string|null $service_password Service Password
     *
     * @return self
     */
    public function setServicePassword($service_password)
    {
        $this->container['service_password'] = $service_password;

        return $this;
    }

    /**
     * Gets service_password_hash
     *
     * @return string|null
     */
    public function getServicePasswordHash()
    {
        return $this->container['service_password_hash'];
    }

    /**
     * Sets service_password_hash
     *
     * @param string|null $service_password_hash service_password_hash
     *
     * @return self
     */
    public function setServicePasswordHash($service_password_hash)
    {
        $this->container['service_password_hash'] = $service_password_hash;

        return $this;
    }

    /**
     * Gets service_throttle_rate
     *
     * @return int|null
     */
    public function getServiceThrottleRate()
    {
        return $this->container['service_throttle_rate'];
    }

    /**
     * Sets service_throttle_rate
     *
     * @param int|null $service_throttle_rate Throttle Rate
     *
     * @return self
     */
    public function setServiceThrottleRate($service_throttle_rate)
    {
        $this->container['service_throttle_rate'] = $service_throttle_rate;

        return $this;
    }

    /**
     * Gets ignore_ssl
     *
     * @return bool|null
     */
    public function getIgnoreSsl()
    {
        return $this->container['ignore_ssl'];
    }

    /**
     * Sets ignore_ssl
     *
     * @param bool|null $ignore_ssl Disable SSL SNI Verification
     *
     * @return self
     */
    public function setIgnoreSsl($ignore_ssl)
    {
        $this->container['ignore_ssl'] = $ignore_ssl;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Status
     *
     * @return self
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets status_message
     *
     * @return string|null
     */
    public function getStatusMessage()
    {
        return $this->container['status_message'];
    }

    /**
     * Sets status_message
     *
     * @param string|null $status_message Status Message
     *
     * @return self
     */
    public function setStatusMessage($status_message)
    {
        $this->container['status_message'] = $status_message;

        return $this;
    }

    /**
     * Gets status_date
     *
     * @return \DateTime|null
     */
    public function getStatusDate()
    {
        return $this->container['status_date'];
    }

    /**
     * Sets status_date
     *
     * @param \DateTime|null $status_date status_date
     *
     * @return self
     */
    public function setStatusDate($status_date)
    {
        $this->container['status_date'] = $status_date;

        return $this;
    }

    /**
     * Gets config
     *
     * @return object|null
     */
    public function getConfig()
    {
        return $this->container['config'];
    }

    /**
     * Sets config
     *
     * @param object|null $config Config object varies with pool server type.
     *
     * @return self
     */
    public function setConfig($config)
    {
        $this->container['config'] = $config;

        return $this;
    }

    /**
     * Gets network_filter
     *
     * @return string|null
     */
    public function getNetworkFilter()
    {
        return $this->container['network_filter'];
    }

    /**
     * Sets network_filter
     *
     * @param string|null $network_filter Network Filter
     *
     * @return self
     */
    public function setNetworkFilter($network_filter)
    {
        $this->container['network_filter'] = $network_filter;

        return $this;
    }

    /**
     * Gets zone_filter
     *
     * @return string|null
     */
    public function getZoneFilter()
    {
        return $this->container['zone_filter'];
    }

    /**
     * Sets zone_filter
     *
     * @param string|null $zone_filter Zone Filter
     *
     * @return self
     */
    public function setZoneFilter($zone_filter)
    {
        $this->container['zone_filter'] = $zone_filter;

        return $this;
    }

    /**
     * Gets tenant_match
     *
     * @return string|null
     */
    public function getTenantMatch()
    {
        return $this->container['tenant_match'];
    }

    /**
     * Sets tenant_match
     *
     * @param string|null $tenant_match Tenant Match
     *
     * @return self
     */
    public function setTenantMatch($tenant_match)
    {
        $this->container['tenant_match'] = $tenant_match;

        return $this;
    }

    /**
     * Gets date_created
     *
     * @return \DateTime|null
     */
    public function getDateCreated()
    {
        return $this->container['date_created'];
    }

    /**
     * Sets date_created
     *
     * @param \DateTime|null $date_created date_created
     *
     * @return self
     */
    public function setDateCreated($date_created)
    {
        $this->container['date_created'] = $date_created;

        return $this;
    }

    /**
     * Gets last_updated
     *
     * @return \DateTime|null
     */
    public function getLastUpdated()
    {
        return $this->container['last_updated'];
    }

    /**
     * Sets last_updated
     *
     * @param \DateTime|null $last_updated last_updated
     *
     * @return self
     */
    public function setLastUpdated($last_updated)
    {
        $this->container['last_updated'] = $last_updated;

        return $this;
    }

    /**
     * Gets account
     *
     * @return \OpenAPI\Client\Model\NetworkPoolServerAccount|null
     */
    public function getAccount()
    {
        return $this->container['account'];
    }

    /**
     * Sets account
     *
     * @param \OpenAPI\Client\Model\NetworkPoolServerAccount|null $account account
     *
     * @return self
     */
    public function setAccount($account)
    {
        $this->container['account'] = $account;

        return $this;
    }

    /**
     * Gets integration
     *
     * @return \OpenAPI\Client\Model\NetworkPoolServerIntegration|null
     */
    public function getIntegration()
    {
        return $this->container['integration'];
    }

    /**
     * Sets integration
     *
     * @param \OpenAPI\Client\Model\NetworkPoolServerIntegration|null $integration integration
     *
     * @return self
     */
    public function setIntegration($integration)
    {
        $this->container['integration'] = $integration;

        return $this;
    }

    /**
     * Gets pools
     *
     * @return \OpenAPI\Client\Model\InlineResponse20040AppDeployInstance[]|null
     */
    public function getPools()
    {
        return $this->container['pools'];
    }

    /**
     * Sets pools
     *
     * @param \OpenAPI\Client\Model\InlineResponse20040AppDeployInstance[]|null $pools pools
     *
     * @return self
     */
    public function setPools($pools)
    {
        $this->container['pools'] = $pools;

        return $this;
    }

    /**
     * Gets credential
     *
     * @return \OpenAPI\Client\Model\Creds2|null
     */
    public function getCredential()
    {
        return $this->container['credential'];
    }

    /**
     * Sets credential
     *
     * @param \OpenAPI\Client\Model\Creds2|null $credential credential
     *
     * @return self
     */
    public function setCredential($credential)
    {
        $this->container['credential'] = $credential;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


