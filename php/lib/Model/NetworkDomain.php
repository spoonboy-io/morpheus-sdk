<?php
/**
 * NetworkDomain
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * NetworkDomain Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class NetworkDomain implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'networkDomain';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'name' => 'string',
        'active' => 'bool',
        'fqdn' => 'string',
        'description' => 'string',
        'visibility' => 'string',
        'domain_controller' => 'bool',
        'public_zone' => 'bool',
        'domain_username' => 'string',
        'domain_password' => 'string',
        'ref_type' => 'string',
        'ref_id' => 'int',
        'ref_source' => 'string',
        'internal_id' => 'string',
        'ou_path' => 'string',
        'dc_server' => 'string',
        'zone_type' => 'string',
        'dnssec' => 'string',
        'domain_serial' => 'string',
        'account' => '\OpenAPI\Client\Model\InlineResponse20040AppDeployInstance',
        'owner' => '\OpenAPI\Client\Model\InlineResponse20040AppDeployInstance'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'name' => null,
        'active' => null,
        'fqdn' => null,
        'description' => null,
        'visibility' => null,
        'domain_controller' => null,
        'public_zone' => null,
        'domain_username' => null,
        'domain_password' => null,
        'ref_type' => null,
        'ref_id' => 'int64',
        'ref_source' => null,
        'internal_id' => null,
        'ou_path' => null,
        'dc_server' => null,
        'zone_type' => null,
        'dnssec' => null,
        'domain_serial' => null,
        'account' => null,
        'owner' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'active' => 'active',
        'fqdn' => 'fqdn',
        'description' => 'description',
        'visibility' => 'visibility',
        'domain_controller' => 'domainController',
        'public_zone' => 'publicZone',
        'domain_username' => 'domainUsername',
        'domain_password' => 'domainPassword',
        'ref_type' => 'refType',
        'ref_id' => 'refId',
        'ref_source' => 'refSource',
        'internal_id' => 'internalId',
        'ou_path' => 'ouPath',
        'dc_server' => 'dcServer',
        'zone_type' => 'zoneType',
        'dnssec' => 'dnssec',
        'domain_serial' => 'domainSerial',
        'account' => 'account',
        'owner' => 'owner'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'active' => 'setActive',
        'fqdn' => 'setFqdn',
        'description' => 'setDescription',
        'visibility' => 'setVisibility',
        'domain_controller' => 'setDomainController',
        'public_zone' => 'setPublicZone',
        'domain_username' => 'setDomainUsername',
        'domain_password' => 'setDomainPassword',
        'ref_type' => 'setRefType',
        'ref_id' => 'setRefId',
        'ref_source' => 'setRefSource',
        'internal_id' => 'setInternalId',
        'ou_path' => 'setOuPath',
        'dc_server' => 'setDcServer',
        'zone_type' => 'setZoneType',
        'dnssec' => 'setDnssec',
        'domain_serial' => 'setDomainSerial',
        'account' => 'setAccount',
        'owner' => 'setOwner'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'active' => 'getActive',
        'fqdn' => 'getFqdn',
        'description' => 'getDescription',
        'visibility' => 'getVisibility',
        'domain_controller' => 'getDomainController',
        'public_zone' => 'getPublicZone',
        'domain_username' => 'getDomainUsername',
        'domain_password' => 'getDomainPassword',
        'ref_type' => 'getRefType',
        'ref_id' => 'getRefId',
        'ref_source' => 'getRefSource',
        'internal_id' => 'getInternalId',
        'ou_path' => 'getOuPath',
        'dc_server' => 'getDcServer',
        'zone_type' => 'getZoneType',
        'dnssec' => 'getDnssec',
        'domain_serial' => 'getDomainSerial',
        'account' => 'getAccount',
        'owner' => 'getOwner'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['active'] = $data['active'] ?? null;
        $this->container['fqdn'] = $data['fqdn'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['visibility'] = $data['visibility'] ?? null;
        $this->container['domain_controller'] = $data['domain_controller'] ?? null;
        $this->container['public_zone'] = $data['public_zone'] ?? null;
        $this->container['domain_username'] = $data['domain_username'] ?? null;
        $this->container['domain_password'] = $data['domain_password'] ?? null;
        $this->container['ref_type'] = $data['ref_type'] ?? null;
        $this->container['ref_id'] = $data['ref_id'] ?? null;
        $this->container['ref_source'] = $data['ref_source'] ?? null;
        $this->container['internal_id'] = $data['internal_id'] ?? null;
        $this->container['ou_path'] = $data['ou_path'] ?? null;
        $this->container['dc_server'] = $data['dc_server'] ?? null;
        $this->container['zone_type'] = $data['zone_type'] ?? null;
        $this->container['dnssec'] = $data['dnssec'] ?? null;
        $this->container['domain_serial'] = $data['domain_serial'] ?? null;
        $this->container['account'] = $data['account'] ?? null;
        $this->container['owner'] = $data['owner'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool|null
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool|null $active active
     *
     * @return self
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets fqdn
     *
     * @return string|null
     */
    public function getFqdn()
    {
        return $this->container['fqdn'];
    }

    /**
     * Sets fqdn
     *
     * @param string|null $fqdn fqdn
     *
     * @return self
     */
    public function setFqdn($fqdn)
    {
        $this->container['fqdn'] = $fqdn;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets visibility
     *
     * @return string|null
     */
    public function getVisibility()
    {
        return $this->container['visibility'];
    }

    /**
     * Sets visibility
     *
     * @param string|null $visibility visibility
     *
     * @return self
     */
    public function setVisibility($visibility)
    {
        $this->container['visibility'] = $visibility;

        return $this;
    }

    /**
     * Gets domain_controller
     *
     * @return bool|null
     */
    public function getDomainController()
    {
        return $this->container['domain_controller'];
    }

    /**
     * Sets domain_controller
     *
     * @param bool|null $domain_controller domain_controller
     *
     * @return self
     */
    public function setDomainController($domain_controller)
    {
        $this->container['domain_controller'] = $domain_controller;

        return $this;
    }

    /**
     * Gets public_zone
     *
     * @return bool|null
     */
    public function getPublicZone()
    {
        return $this->container['public_zone'];
    }

    /**
     * Sets public_zone
     *
     * @param bool|null $public_zone public_zone
     *
     * @return self
     */
    public function setPublicZone($public_zone)
    {
        $this->container['public_zone'] = $public_zone;

        return $this;
    }

    /**
     * Gets domain_username
     *
     * @return string|null
     */
    public function getDomainUsername()
    {
        return $this->container['domain_username'];
    }

    /**
     * Sets domain_username
     *
     * @param string|null $domain_username domain_username
     *
     * @return self
     */
    public function setDomainUsername($domain_username)
    {
        $this->container['domain_username'] = $domain_username;

        return $this;
    }

    /**
     * Gets domain_password
     *
     * @return string|null
     */
    public function getDomainPassword()
    {
        return $this->container['domain_password'];
    }

    /**
     * Sets domain_password
     *
     * @param string|null $domain_password domain_password
     *
     * @return self
     */
    public function setDomainPassword($domain_password)
    {
        $this->container['domain_password'] = $domain_password;

        return $this;
    }

    /**
     * Gets ref_type
     *
     * @return string|null
     */
    public function getRefType()
    {
        return $this->container['ref_type'];
    }

    /**
     * Sets ref_type
     *
     * @param string|null $ref_type ref_type
     *
     * @return self
     */
    public function setRefType($ref_type)
    {
        $this->container['ref_type'] = $ref_type;

        return $this;
    }

    /**
     * Gets ref_id
     *
     * @return int|null
     */
    public function getRefId()
    {
        return $this->container['ref_id'];
    }

    /**
     * Sets ref_id
     *
     * @param int|null $ref_id ref_id
     *
     * @return self
     */
    public function setRefId($ref_id)
    {
        $this->container['ref_id'] = $ref_id;

        return $this;
    }

    /**
     * Gets ref_source
     *
     * @return string|null
     */
    public function getRefSource()
    {
        return $this->container['ref_source'];
    }

    /**
     * Sets ref_source
     *
     * @param string|null $ref_source ref_source
     *
     * @return self
     */
    public function setRefSource($ref_source)
    {
        $this->container['ref_source'] = $ref_source;

        return $this;
    }

    /**
     * Gets internal_id
     *
     * @return string|null
     */
    public function getInternalId()
    {
        return $this->container['internal_id'];
    }

    /**
     * Sets internal_id
     *
     * @param string|null $internal_id internal_id
     *
     * @return self
     */
    public function setInternalId($internal_id)
    {
        $this->container['internal_id'] = $internal_id;

        return $this;
    }

    /**
     * Gets ou_path
     *
     * @return string|null
     */
    public function getOuPath()
    {
        return $this->container['ou_path'];
    }

    /**
     * Sets ou_path
     *
     * @param string|null $ou_path ou_path
     *
     * @return self
     */
    public function setOuPath($ou_path)
    {
        $this->container['ou_path'] = $ou_path;

        return $this;
    }

    /**
     * Gets dc_server
     *
     * @return string|null
     */
    public function getDcServer()
    {
        return $this->container['dc_server'];
    }

    /**
     * Sets dc_server
     *
     * @param string|null $dc_server dc_server
     *
     * @return self
     */
    public function setDcServer($dc_server)
    {
        $this->container['dc_server'] = $dc_server;

        return $this;
    }

    /**
     * Gets zone_type
     *
     * @return string|null
     */
    public function getZoneType()
    {
        return $this->container['zone_type'];
    }

    /**
     * Sets zone_type
     *
     * @param string|null $zone_type zone_type
     *
     * @return self
     */
    public function setZoneType($zone_type)
    {
        $this->container['zone_type'] = $zone_type;

        return $this;
    }

    /**
     * Gets dnssec
     *
     * @return string|null
     */
    public function getDnssec()
    {
        return $this->container['dnssec'];
    }

    /**
     * Sets dnssec
     *
     * @param string|null $dnssec dnssec
     *
     * @return self
     */
    public function setDnssec($dnssec)
    {
        $this->container['dnssec'] = $dnssec;

        return $this;
    }

    /**
     * Gets domain_serial
     *
     * @return string|null
     */
    public function getDomainSerial()
    {
        return $this->container['domain_serial'];
    }

    /**
     * Sets domain_serial
     *
     * @param string|null $domain_serial domain_serial
     *
     * @return self
     */
    public function setDomainSerial($domain_serial)
    {
        $this->container['domain_serial'] = $domain_serial;

        return $this;
    }

    /**
     * Gets account
     *
     * @return \OpenAPI\Client\Model\InlineResponse20040AppDeployInstance|null
     */
    public function getAccount()
    {
        return $this->container['account'];
    }

    /**
     * Sets account
     *
     * @param \OpenAPI\Client\Model\InlineResponse20040AppDeployInstance|null $account account
     *
     * @return self
     */
    public function setAccount($account)
    {
        $this->container['account'] = $account;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return \OpenAPI\Client\Model\InlineResponse20040AppDeployInstance|null
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param \OpenAPI\Client\Model\InlineResponse20040AppDeployInstance|null $owner owner
     *
     * @return self
     */
    public function setOwner($owner)
    {
        $this->container['owner'] = $owner;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


