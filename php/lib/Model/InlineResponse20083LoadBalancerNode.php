<?php
/**
 * InlineResponse20083LoadBalancerNode
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * InlineResponse20083LoadBalancerNode Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineResponse20083LoadBalancerNode implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_response_200_83_loadBalancerNode';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'name' => 'string',
        'visibility' => 'string',
        'description' => 'string',
        'ip_address' => 'string',
        'port' => 'int',
        'port_type' => 'string',
        'monitor_port' => 'string',
        'weight' => 'int',
        'node_state' => 'string',
        'internal_id' => 'string',
        'external_id' => 'string',
        'enabled' => 'bool',
        'status' => 'string',
        'status_message' => 'string',
        'status_date' => '\DateTime',
        'server' => '\OpenAPI\Client\Model\InlineResponse20082LoadBalancerInstanceSslCert',
        'instance_id' => 'int',
        'container_id' => 'int',
        'node_source' => 'string',
        'monitor' => '\OpenAPI\Client\Model\InlineResponse20082LoadBalancerInstanceSslCert',
        'max_connections' => 'int',
        'external_ref_type' => 'string',
        'external_ref_id' => 'string',
        'external_ref_name' => 'string',
        'created_by' => '\OpenAPI\Client\Model\InlineResponse20083LoadBalancerNodeCreatedBy',
        'date_created' => '\DateTime',
        'last_updated' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'name' => null,
        'visibility' => null,
        'description' => null,
        'ip_address' => null,
        'port' => 'int64',
        'port_type' => null,
        'monitor_port' => null,
        'weight' => 'int64',
        'node_state' => null,
        'internal_id' => null,
        'external_id' => null,
        'enabled' => null,
        'status' => null,
        'status_message' => null,
        'status_date' => 'date-time',
        'server' => null,
        'instance_id' => 'int64',
        'container_id' => 'int64',
        'node_source' => null,
        'monitor' => null,
        'max_connections' => 'int64',
        'external_ref_type' => null,
        'external_ref_id' => null,
        'external_ref_name' => null,
        'created_by' => null,
        'date_created' => 'date-time',
        'last_updated' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'visibility' => 'visibility',
        'description' => 'description',
        'ip_address' => 'ipAddress',
        'port' => 'port',
        'port_type' => 'portType',
        'monitor_port' => 'monitorPort',
        'weight' => 'weight',
        'node_state' => 'nodeState',
        'internal_id' => 'internalId',
        'external_id' => 'externalId',
        'enabled' => 'enabled',
        'status' => 'status',
        'status_message' => 'statusMessage',
        'status_date' => 'statusDate',
        'server' => 'server',
        'instance_id' => 'instanceId',
        'container_id' => 'containerId',
        'node_source' => 'nodeSource',
        'monitor' => 'monitor',
        'max_connections' => 'maxConnections',
        'external_ref_type' => 'externalRefType',
        'external_ref_id' => 'externalRefId',
        'external_ref_name' => 'externalRefName',
        'created_by' => 'createdBy',
        'date_created' => 'dateCreated',
        'last_updated' => 'lastUpdated'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'visibility' => 'setVisibility',
        'description' => 'setDescription',
        'ip_address' => 'setIpAddress',
        'port' => 'setPort',
        'port_type' => 'setPortType',
        'monitor_port' => 'setMonitorPort',
        'weight' => 'setWeight',
        'node_state' => 'setNodeState',
        'internal_id' => 'setInternalId',
        'external_id' => 'setExternalId',
        'enabled' => 'setEnabled',
        'status' => 'setStatus',
        'status_message' => 'setStatusMessage',
        'status_date' => 'setStatusDate',
        'server' => 'setServer',
        'instance_id' => 'setInstanceId',
        'container_id' => 'setContainerId',
        'node_source' => 'setNodeSource',
        'monitor' => 'setMonitor',
        'max_connections' => 'setMaxConnections',
        'external_ref_type' => 'setExternalRefType',
        'external_ref_id' => 'setExternalRefId',
        'external_ref_name' => 'setExternalRefName',
        'created_by' => 'setCreatedBy',
        'date_created' => 'setDateCreated',
        'last_updated' => 'setLastUpdated'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'visibility' => 'getVisibility',
        'description' => 'getDescription',
        'ip_address' => 'getIpAddress',
        'port' => 'getPort',
        'port_type' => 'getPortType',
        'monitor_port' => 'getMonitorPort',
        'weight' => 'getWeight',
        'node_state' => 'getNodeState',
        'internal_id' => 'getInternalId',
        'external_id' => 'getExternalId',
        'enabled' => 'getEnabled',
        'status' => 'getStatus',
        'status_message' => 'getStatusMessage',
        'status_date' => 'getStatusDate',
        'server' => 'getServer',
        'instance_id' => 'getInstanceId',
        'container_id' => 'getContainerId',
        'node_source' => 'getNodeSource',
        'monitor' => 'getMonitor',
        'max_connections' => 'getMaxConnections',
        'external_ref_type' => 'getExternalRefType',
        'external_ref_id' => 'getExternalRefId',
        'external_ref_name' => 'getExternalRefName',
        'created_by' => 'getCreatedBy',
        'date_created' => 'getDateCreated',
        'last_updated' => 'getLastUpdated'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['visibility'] = $data['visibility'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['ip_address'] = $data['ip_address'] ?? null;
        $this->container['port'] = $data['port'] ?? null;
        $this->container['port_type'] = $data['port_type'] ?? null;
        $this->container['monitor_port'] = $data['monitor_port'] ?? null;
        $this->container['weight'] = $data['weight'] ?? null;
        $this->container['node_state'] = $data['node_state'] ?? null;
        $this->container['internal_id'] = $data['internal_id'] ?? null;
        $this->container['external_id'] = $data['external_id'] ?? null;
        $this->container['enabled'] = $data['enabled'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['status_message'] = $data['status_message'] ?? null;
        $this->container['status_date'] = $data['status_date'] ?? null;
        $this->container['server'] = $data['server'] ?? null;
        $this->container['instance_id'] = $data['instance_id'] ?? null;
        $this->container['container_id'] = $data['container_id'] ?? null;
        $this->container['node_source'] = $data['node_source'] ?? null;
        $this->container['monitor'] = $data['monitor'] ?? null;
        $this->container['max_connections'] = $data['max_connections'] ?? null;
        $this->container['external_ref_type'] = $data['external_ref_type'] ?? null;
        $this->container['external_ref_id'] = $data['external_ref_id'] ?? null;
        $this->container['external_ref_name'] = $data['external_ref_name'] ?? null;
        $this->container['created_by'] = $data['created_by'] ?? null;
        $this->container['date_created'] = $data['date_created'] ?? null;
        $this->container['last_updated'] = $data['last_updated'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets visibility
     *
     * @return string|null
     */
    public function getVisibility()
    {
        return $this->container['visibility'];
    }

    /**
     * Sets visibility
     *
     * @param string|null $visibility visibility
     *
     * @return self
     */
    public function setVisibility($visibility)
    {
        $this->container['visibility'] = $visibility;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets ip_address
     *
     * @return string|null
     */
    public function getIpAddress()
    {
        return $this->container['ip_address'];
    }

    /**
     * Sets ip_address
     *
     * @param string|null $ip_address ip_address
     *
     * @return self
     */
    public function setIpAddress($ip_address)
    {
        $this->container['ip_address'] = $ip_address;

        return $this;
    }

    /**
     * Gets port
     *
     * @return int|null
     */
    public function getPort()
    {
        return $this->container['port'];
    }

    /**
     * Sets port
     *
     * @param int|null $port port
     *
     * @return self
     */
    public function setPort($port)
    {
        $this->container['port'] = $port;

        return $this;
    }

    /**
     * Gets port_type
     *
     * @return string|null
     */
    public function getPortType()
    {
        return $this->container['port_type'];
    }

    /**
     * Sets port_type
     *
     * @param string|null $port_type port_type
     *
     * @return self
     */
    public function setPortType($port_type)
    {
        $this->container['port_type'] = $port_type;

        return $this;
    }

    /**
     * Gets monitor_port
     *
     * @return string|null
     */
    public function getMonitorPort()
    {
        return $this->container['monitor_port'];
    }

    /**
     * Sets monitor_port
     *
     * @param string|null $monitor_port monitor_port
     *
     * @return self
     */
    public function setMonitorPort($monitor_port)
    {
        $this->container['monitor_port'] = $monitor_port;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return int|null
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param int|null $weight weight
     *
     * @return self
     */
    public function setWeight($weight)
    {
        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets node_state
     *
     * @return string|null
     */
    public function getNodeState()
    {
        return $this->container['node_state'];
    }

    /**
     * Sets node_state
     *
     * @param string|null $node_state node_state
     *
     * @return self
     */
    public function setNodeState($node_state)
    {
        $this->container['node_state'] = $node_state;

        return $this;
    }

    /**
     * Gets internal_id
     *
     * @return string|null
     */
    public function getInternalId()
    {
        return $this->container['internal_id'];
    }

    /**
     * Sets internal_id
     *
     * @param string|null $internal_id internal_id
     *
     * @return self
     */
    public function setInternalId($internal_id)
    {
        $this->container['internal_id'] = $internal_id;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string|null
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string|null $external_id external_id
     *
     * @return self
     */
    public function setExternalId($external_id)
    {
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool|null
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool|null $enabled enabled
     *
     * @return self
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets status_message
     *
     * @return string|null
     */
    public function getStatusMessage()
    {
        return $this->container['status_message'];
    }

    /**
     * Sets status_message
     *
     * @param string|null $status_message status_message
     *
     * @return self
     */
    public function setStatusMessage($status_message)
    {
        $this->container['status_message'] = $status_message;

        return $this;
    }

    /**
     * Gets status_date
     *
     * @return \DateTime|null
     */
    public function getStatusDate()
    {
        return $this->container['status_date'];
    }

    /**
     * Sets status_date
     *
     * @param \DateTime|null $status_date status_date
     *
     * @return self
     */
    public function setStatusDate($status_date)
    {
        $this->container['status_date'] = $status_date;

        return $this;
    }

    /**
     * Gets server
     *
     * @return \OpenAPI\Client\Model\InlineResponse20082LoadBalancerInstanceSslCert|null
     */
    public function getServer()
    {
        return $this->container['server'];
    }

    /**
     * Sets server
     *
     * @param \OpenAPI\Client\Model\InlineResponse20082LoadBalancerInstanceSslCert|null $server server
     *
     * @return self
     */
    public function setServer($server)
    {
        $this->container['server'] = $server;

        return $this;
    }

    /**
     * Gets instance_id
     *
     * @return int|null
     */
    public function getInstanceId()
    {
        return $this->container['instance_id'];
    }

    /**
     * Sets instance_id
     *
     * @param int|null $instance_id instance_id
     *
     * @return self
     */
    public function setInstanceId($instance_id)
    {
        $this->container['instance_id'] = $instance_id;

        return $this;
    }

    /**
     * Gets container_id
     *
     * @return int|null
     */
    public function getContainerId()
    {
        return $this->container['container_id'];
    }

    /**
     * Sets container_id
     *
     * @param int|null $container_id container_id
     *
     * @return self
     */
    public function setContainerId($container_id)
    {
        $this->container['container_id'] = $container_id;

        return $this;
    }

    /**
     * Gets node_source
     *
     * @return string|null
     */
    public function getNodeSource()
    {
        return $this->container['node_source'];
    }

    /**
     * Sets node_source
     *
     * @param string|null $node_source node_source
     *
     * @return self
     */
    public function setNodeSource($node_source)
    {
        $this->container['node_source'] = $node_source;

        return $this;
    }

    /**
     * Gets monitor
     *
     * @return \OpenAPI\Client\Model\InlineResponse20082LoadBalancerInstanceSslCert|null
     */
    public function getMonitor()
    {
        return $this->container['monitor'];
    }

    /**
     * Sets monitor
     *
     * @param \OpenAPI\Client\Model\InlineResponse20082LoadBalancerInstanceSslCert|null $monitor monitor
     *
     * @return self
     */
    public function setMonitor($monitor)
    {
        $this->container['monitor'] = $monitor;

        return $this;
    }

    /**
     * Gets max_connections
     *
     * @return int|null
     */
    public function getMaxConnections()
    {
        return $this->container['max_connections'];
    }

    /**
     * Sets max_connections
     *
     * @param int|null $max_connections max_connections
     *
     * @return self
     */
    public function setMaxConnections($max_connections)
    {
        $this->container['max_connections'] = $max_connections;

        return $this;
    }

    /**
     * Gets external_ref_type
     *
     * @return string|null
     */
    public function getExternalRefType()
    {
        return $this->container['external_ref_type'];
    }

    /**
     * Sets external_ref_type
     *
     * @param string|null $external_ref_type external_ref_type
     *
     * @return self
     */
    public function setExternalRefType($external_ref_type)
    {
        $this->container['external_ref_type'] = $external_ref_type;

        return $this;
    }

    /**
     * Gets external_ref_id
     *
     * @return string|null
     */
    public function getExternalRefId()
    {
        return $this->container['external_ref_id'];
    }

    /**
     * Sets external_ref_id
     *
     * @param string|null $external_ref_id external_ref_id
     *
     * @return self
     */
    public function setExternalRefId($external_ref_id)
    {
        $this->container['external_ref_id'] = $external_ref_id;

        return $this;
    }

    /**
     * Gets external_ref_name
     *
     * @return string|null
     */
    public function getExternalRefName()
    {
        return $this->container['external_ref_name'];
    }

    /**
     * Sets external_ref_name
     *
     * @param string|null $external_ref_name external_ref_name
     *
     * @return self
     */
    public function setExternalRefName($external_ref_name)
    {
        $this->container['external_ref_name'] = $external_ref_name;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return \OpenAPI\Client\Model\InlineResponse20083LoadBalancerNodeCreatedBy|null
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param \OpenAPI\Client\Model\InlineResponse20083LoadBalancerNodeCreatedBy|null $created_by created_by
     *
     * @return self
     */
    public function setCreatedBy($created_by)
    {
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets date_created
     *
     * @return \DateTime|null
     */
    public function getDateCreated()
    {
        return $this->container['date_created'];
    }

    /**
     * Sets date_created
     *
     * @param \DateTime|null $date_created date_created
     *
     * @return self
     */
    public function setDateCreated($date_created)
    {
        $this->container['date_created'] = $date_created;

        return $this;
    }

    /**
     * Gets last_updated
     *
     * @return \DateTime|null
     */
    public function getLastUpdated()
    {
        return $this->container['last_updated'];
    }

    /**
     * Sets last_updated
     *
     * @param \DateTime|null $last_updated last_updated
     *
     * @return self
     */
    public function setLastUpdated($last_updated)
    {
        $this->container['last_updated'] = $last_updated;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


