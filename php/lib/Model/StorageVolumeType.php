<?php
/**
 * StorageVolumeType
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * StorageVolumeType Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class StorageVolumeType implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'storageVolumeType';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'code' => 'string',
        'name' => 'string',
        'description' => 'string',
        'display_order' => 'int',
        'default_type' => 'bool',
        'custom_label' => 'bool',
        'custom_size' => 'bool',
        'custom_size_options' => 'string',
        'configurable_iops' => 'bool',
        'has_datastore' => 'bool',
        'category' => 'string',
        'enabled' => 'bool',
        'option_types' => '\OpenAPI\Client\Model\StorageServerTypeOptionTypes[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'code' => null,
        'name' => null,
        'description' => null,
        'display_order' => 'int64',
        'default_type' => null,
        'custom_label' => null,
        'custom_size' => null,
        'custom_size_options' => null,
        'configurable_iops' => null,
        'has_datastore' => null,
        'category' => null,
        'enabled' => null,
        'option_types' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'code' => 'code',
        'name' => 'name',
        'description' => 'description',
        'display_order' => 'displayOrder',
        'default_type' => 'defaultType',
        'custom_label' => 'customLabel',
        'custom_size' => 'customSize',
        'custom_size_options' => 'customSizeOptions',
        'configurable_iops' => 'configurableIOPS',
        'has_datastore' => 'hasDatastore',
        'category' => 'category',
        'enabled' => 'enabled',
        'option_types' => 'optionTypes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'code' => 'setCode',
        'name' => 'setName',
        'description' => 'setDescription',
        'display_order' => 'setDisplayOrder',
        'default_type' => 'setDefaultType',
        'custom_label' => 'setCustomLabel',
        'custom_size' => 'setCustomSize',
        'custom_size_options' => 'setCustomSizeOptions',
        'configurable_iops' => 'setConfigurableIops',
        'has_datastore' => 'setHasDatastore',
        'category' => 'setCategory',
        'enabled' => 'setEnabled',
        'option_types' => 'setOptionTypes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'code' => 'getCode',
        'name' => 'getName',
        'description' => 'getDescription',
        'display_order' => 'getDisplayOrder',
        'default_type' => 'getDefaultType',
        'custom_label' => 'getCustomLabel',
        'custom_size' => 'getCustomSize',
        'custom_size_options' => 'getCustomSizeOptions',
        'configurable_iops' => 'getConfigurableIops',
        'has_datastore' => 'getHasDatastore',
        'category' => 'getCategory',
        'enabled' => 'getEnabled',
        'option_types' => 'getOptionTypes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['code'] = $data['code'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['display_order'] = $data['display_order'] ?? null;
        $this->container['default_type'] = $data['default_type'] ?? null;
        $this->container['custom_label'] = $data['custom_label'] ?? null;
        $this->container['custom_size'] = $data['custom_size'] ?? null;
        $this->container['custom_size_options'] = $data['custom_size_options'] ?? null;
        $this->container['configurable_iops'] = $data['configurable_iops'] ?? null;
        $this->container['has_datastore'] = $data['has_datastore'] ?? null;
        $this->container['category'] = $data['category'] ?? null;
        $this->container['enabled'] = $data['enabled'] ?? null;
        $this->container['option_types'] = $data['option_types'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string|null
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string|null $code code
     *
     * @return self
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets display_order
     *
     * @return int|null
     */
    public function getDisplayOrder()
    {
        return $this->container['display_order'];
    }

    /**
     * Sets display_order
     *
     * @param int|null $display_order display_order
     *
     * @return self
     */
    public function setDisplayOrder($display_order)
    {
        $this->container['display_order'] = $display_order;

        return $this;
    }

    /**
     * Gets default_type
     *
     * @return bool|null
     */
    public function getDefaultType()
    {
        return $this->container['default_type'];
    }

    /**
     * Sets default_type
     *
     * @param bool|null $default_type default_type
     *
     * @return self
     */
    public function setDefaultType($default_type)
    {
        $this->container['default_type'] = $default_type;

        return $this;
    }

    /**
     * Gets custom_label
     *
     * @return bool|null
     */
    public function getCustomLabel()
    {
        return $this->container['custom_label'];
    }

    /**
     * Sets custom_label
     *
     * @param bool|null $custom_label custom_label
     *
     * @return self
     */
    public function setCustomLabel($custom_label)
    {
        $this->container['custom_label'] = $custom_label;

        return $this;
    }

    /**
     * Gets custom_size
     *
     * @return bool|null
     */
    public function getCustomSize()
    {
        return $this->container['custom_size'];
    }

    /**
     * Sets custom_size
     *
     * @param bool|null $custom_size custom_size
     *
     * @return self
     */
    public function setCustomSize($custom_size)
    {
        $this->container['custom_size'] = $custom_size;

        return $this;
    }

    /**
     * Gets custom_size_options
     *
     * @return string|null
     */
    public function getCustomSizeOptions()
    {
        return $this->container['custom_size_options'];
    }

    /**
     * Sets custom_size_options
     *
     * @param string|null $custom_size_options custom_size_options
     *
     * @return self
     */
    public function setCustomSizeOptions($custom_size_options)
    {
        $this->container['custom_size_options'] = $custom_size_options;

        return $this;
    }

    /**
     * Gets configurable_iops
     *
     * @return bool|null
     */
    public function getConfigurableIops()
    {
        return $this->container['configurable_iops'];
    }

    /**
     * Sets configurable_iops
     *
     * @param bool|null $configurable_iops configurable_iops
     *
     * @return self
     */
    public function setConfigurableIops($configurable_iops)
    {
        $this->container['configurable_iops'] = $configurable_iops;

        return $this;
    }

    /**
     * Gets has_datastore
     *
     * @return bool|null
     */
    public function getHasDatastore()
    {
        return $this->container['has_datastore'];
    }

    /**
     * Sets has_datastore
     *
     * @param bool|null $has_datastore has_datastore
     *
     * @return self
     */
    public function setHasDatastore($has_datastore)
    {
        $this->container['has_datastore'] = $has_datastore;

        return $this;
    }

    /**
     * Gets category
     *
     * @return string|null
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param string|null $category category
     *
     * @return self
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool|null
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool|null $enabled enabled
     *
     * @return self
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets option_types
     *
     * @return \OpenAPI\Client\Model\StorageServerTypeOptionTypes[]|null
     */
    public function getOptionTypes()
    {
        return $this->container['option_types'];
    }

    /**
     * Sets option_types
     *
     * @param \OpenAPI\Client\Model\StorageServerTypeOptionTypes[]|null $option_types option_types
     *
     * @return self
     */
    public function setOptionTypes($option_types)
    {
        $this->container['option_types'] = $option_types;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


