<?php
/**
 * NetworkRouterNat
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * NetworkRouterNat Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class NetworkRouterNat implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'networkRouterNat';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'name' => 'string',
        'description' => 'string',
        'enabled' => 'bool',
        'source_network' => 'string',
        'destination_network' => 'string',
        'translated_network' => 'string',
        'source_ports' => 'string',
        'destination_ports' => 'string',
        'translated_ports' => 'string',
        'priority' => 'int',
        'protocol' => 'string',
        'match_ipv6_destination_prefix' => 'string',
        'translated_ipv4_source_prefix' => 'string',
        'ref_type' => 'string',
        'ref_id' => 'string',
        'sync_source' => 'string',
        'internal_id' => 'string',
        'external_id' => 'string',
        'provider_id' => 'string',
        'date_created' => '\DateTime',
        'last_updated' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int32',
        'name' => null,
        'description' => null,
        'enabled' => null,
        'source_network' => null,
        'destination_network' => null,
        'translated_network' => null,
        'source_ports' => null,
        'destination_ports' => null,
        'translated_ports' => null,
        'priority' => 'int32',
        'protocol' => null,
        'match_ipv6_destination_prefix' => null,
        'translated_ipv4_source_prefix' => null,
        'ref_type' => null,
        'ref_id' => null,
        'sync_source' => null,
        'internal_id' => null,
        'external_id' => null,
        'provider_id' => null,
        'date_created' => 'date-time',
        'last_updated' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'description' => 'description',
        'enabled' => 'enabled',
        'source_network' => 'sourceNetwork',
        'destination_network' => 'destinationNetwork',
        'translated_network' => 'translatedNetwork',
        'source_ports' => 'sourcePorts',
        'destination_ports' => 'destinationPorts',
        'translated_ports' => 'translatedPorts',
        'priority' => 'priority',
        'protocol' => 'protocol',
        'match_ipv6_destination_prefix' => 'matchIpv6DestinationPrefix',
        'translated_ipv4_source_prefix' => 'translatedIpv4SourcePrefix',
        'ref_type' => 'refType',
        'ref_id' => 'refId',
        'sync_source' => 'syncSource',
        'internal_id' => 'internalId',
        'external_id' => 'externalId',
        'provider_id' => 'providerId',
        'date_created' => 'dateCreated',
        'last_updated' => 'lastUpdated'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'description' => 'setDescription',
        'enabled' => 'setEnabled',
        'source_network' => 'setSourceNetwork',
        'destination_network' => 'setDestinationNetwork',
        'translated_network' => 'setTranslatedNetwork',
        'source_ports' => 'setSourcePorts',
        'destination_ports' => 'setDestinationPorts',
        'translated_ports' => 'setTranslatedPorts',
        'priority' => 'setPriority',
        'protocol' => 'setProtocol',
        'match_ipv6_destination_prefix' => 'setMatchIpv6DestinationPrefix',
        'translated_ipv4_source_prefix' => 'setTranslatedIpv4SourcePrefix',
        'ref_type' => 'setRefType',
        'ref_id' => 'setRefId',
        'sync_source' => 'setSyncSource',
        'internal_id' => 'setInternalId',
        'external_id' => 'setExternalId',
        'provider_id' => 'setProviderId',
        'date_created' => 'setDateCreated',
        'last_updated' => 'setLastUpdated'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'description' => 'getDescription',
        'enabled' => 'getEnabled',
        'source_network' => 'getSourceNetwork',
        'destination_network' => 'getDestinationNetwork',
        'translated_network' => 'getTranslatedNetwork',
        'source_ports' => 'getSourcePorts',
        'destination_ports' => 'getDestinationPorts',
        'translated_ports' => 'getTranslatedPorts',
        'priority' => 'getPriority',
        'protocol' => 'getProtocol',
        'match_ipv6_destination_prefix' => 'getMatchIpv6DestinationPrefix',
        'translated_ipv4_source_prefix' => 'getTranslatedIpv4SourcePrefix',
        'ref_type' => 'getRefType',
        'ref_id' => 'getRefId',
        'sync_source' => 'getSyncSource',
        'internal_id' => 'getInternalId',
        'external_id' => 'getExternalId',
        'provider_id' => 'getProviderId',
        'date_created' => 'getDateCreated',
        'last_updated' => 'getLastUpdated'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['enabled'] = $data['enabled'] ?? null;
        $this->container['source_network'] = $data['source_network'] ?? null;
        $this->container['destination_network'] = $data['destination_network'] ?? null;
        $this->container['translated_network'] = $data['translated_network'] ?? null;
        $this->container['source_ports'] = $data['source_ports'] ?? null;
        $this->container['destination_ports'] = $data['destination_ports'] ?? null;
        $this->container['translated_ports'] = $data['translated_ports'] ?? null;
        $this->container['priority'] = $data['priority'] ?? null;
        $this->container['protocol'] = $data['protocol'] ?? null;
        $this->container['match_ipv6_destination_prefix'] = $data['match_ipv6_destination_prefix'] ?? null;
        $this->container['translated_ipv4_source_prefix'] = $data['translated_ipv4_source_prefix'] ?? null;
        $this->container['ref_type'] = $data['ref_type'] ?? null;
        $this->container['ref_id'] = $data['ref_id'] ?? null;
        $this->container['sync_source'] = $data['sync_source'] ?? null;
        $this->container['internal_id'] = $data['internal_id'] ?? null;
        $this->container['external_id'] = $data['external_id'] ?? null;
        $this->container['provider_id'] = $data['provider_id'] ?? null;
        $this->container['date_created'] = $data['date_created'] ?? null;
        $this->container['last_updated'] = $data['last_updated'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool|null
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool|null $enabled enabled
     *
     * @return self
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets source_network
     *
     * @return string|null
     */
    public function getSourceNetwork()
    {
        return $this->container['source_network'];
    }

    /**
     * Sets source_network
     *
     * @param string|null $source_network source_network
     *
     * @return self
     */
    public function setSourceNetwork($source_network)
    {
        $this->container['source_network'] = $source_network;

        return $this;
    }

    /**
     * Gets destination_network
     *
     * @return string|null
     */
    public function getDestinationNetwork()
    {
        return $this->container['destination_network'];
    }

    /**
     * Sets destination_network
     *
     * @param string|null $destination_network destination_network
     *
     * @return self
     */
    public function setDestinationNetwork($destination_network)
    {
        $this->container['destination_network'] = $destination_network;

        return $this;
    }

    /**
     * Gets translated_network
     *
     * @return string|null
     */
    public function getTranslatedNetwork()
    {
        return $this->container['translated_network'];
    }

    /**
     * Sets translated_network
     *
     * @param string|null $translated_network translated_network
     *
     * @return self
     */
    public function setTranslatedNetwork($translated_network)
    {
        $this->container['translated_network'] = $translated_network;

        return $this;
    }

    /**
     * Gets source_ports
     *
     * @return string|null
     */
    public function getSourcePorts()
    {
        return $this->container['source_ports'];
    }

    /**
     * Sets source_ports
     *
     * @param string|null $source_ports source_ports
     *
     * @return self
     */
    public function setSourcePorts($source_ports)
    {
        $this->container['source_ports'] = $source_ports;

        return $this;
    }

    /**
     * Gets destination_ports
     *
     * @return string|null
     */
    public function getDestinationPorts()
    {
        return $this->container['destination_ports'];
    }

    /**
     * Sets destination_ports
     *
     * @param string|null $destination_ports destination_ports
     *
     * @return self
     */
    public function setDestinationPorts($destination_ports)
    {
        $this->container['destination_ports'] = $destination_ports;

        return $this;
    }

    /**
     * Gets translated_ports
     *
     * @return string|null
     */
    public function getTranslatedPorts()
    {
        return $this->container['translated_ports'];
    }

    /**
     * Sets translated_ports
     *
     * @param string|null $translated_ports translated_ports
     *
     * @return self
     */
    public function setTranslatedPorts($translated_ports)
    {
        $this->container['translated_ports'] = $translated_ports;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return int|null
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param int|null $priority priority
     *
     * @return self
     */
    public function setPriority($priority)
    {
        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets protocol
     *
     * @return string|null
     */
    public function getProtocol()
    {
        return $this->container['protocol'];
    }

    /**
     * Sets protocol
     *
     * @param string|null $protocol protocol
     *
     * @return self
     */
    public function setProtocol($protocol)
    {
        $this->container['protocol'] = $protocol;

        return $this;
    }

    /**
     * Gets match_ipv6_destination_prefix
     *
     * @return string|null
     */
    public function getMatchIpv6DestinationPrefix()
    {
        return $this->container['match_ipv6_destination_prefix'];
    }

    /**
     * Sets match_ipv6_destination_prefix
     *
     * @param string|null $match_ipv6_destination_prefix match_ipv6_destination_prefix
     *
     * @return self
     */
    public function setMatchIpv6DestinationPrefix($match_ipv6_destination_prefix)
    {
        $this->container['match_ipv6_destination_prefix'] = $match_ipv6_destination_prefix;

        return $this;
    }

    /**
     * Gets translated_ipv4_source_prefix
     *
     * @return string|null
     */
    public function getTranslatedIpv4SourcePrefix()
    {
        return $this->container['translated_ipv4_source_prefix'];
    }

    /**
     * Sets translated_ipv4_source_prefix
     *
     * @param string|null $translated_ipv4_source_prefix translated_ipv4_source_prefix
     *
     * @return self
     */
    public function setTranslatedIpv4SourcePrefix($translated_ipv4_source_prefix)
    {
        $this->container['translated_ipv4_source_prefix'] = $translated_ipv4_source_prefix;

        return $this;
    }

    /**
     * Gets ref_type
     *
     * @return string|null
     */
    public function getRefType()
    {
        return $this->container['ref_type'];
    }

    /**
     * Sets ref_type
     *
     * @param string|null $ref_type ref_type
     *
     * @return self
     */
    public function setRefType($ref_type)
    {
        $this->container['ref_type'] = $ref_type;

        return $this;
    }

    /**
     * Gets ref_id
     *
     * @return string|null
     */
    public function getRefId()
    {
        return $this->container['ref_id'];
    }

    /**
     * Sets ref_id
     *
     * @param string|null $ref_id ref_id
     *
     * @return self
     */
    public function setRefId($ref_id)
    {
        $this->container['ref_id'] = $ref_id;

        return $this;
    }

    /**
     * Gets sync_source
     *
     * @return string|null
     */
    public function getSyncSource()
    {
        return $this->container['sync_source'];
    }

    /**
     * Sets sync_source
     *
     * @param string|null $sync_source sync_source
     *
     * @return self
     */
    public function setSyncSource($sync_source)
    {
        $this->container['sync_source'] = $sync_source;

        return $this;
    }

    /**
     * Gets internal_id
     *
     * @return string|null
     */
    public function getInternalId()
    {
        return $this->container['internal_id'];
    }

    /**
     * Sets internal_id
     *
     * @param string|null $internal_id internal_id
     *
     * @return self
     */
    public function setInternalId($internal_id)
    {
        $this->container['internal_id'] = $internal_id;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string|null
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string|null $external_id external_id
     *
     * @return self
     */
    public function setExternalId($external_id)
    {
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets provider_id
     *
     * @return string|null
     */
    public function getProviderId()
    {
        return $this->container['provider_id'];
    }

    /**
     * Sets provider_id
     *
     * @param string|null $provider_id provider_id
     *
     * @return self
     */
    public function setProviderId($provider_id)
    {
        $this->container['provider_id'] = $provider_id;

        return $this;
    }

    /**
     * Gets date_created
     *
     * @return \DateTime|null
     */
    public function getDateCreated()
    {
        return $this->container['date_created'];
    }

    /**
     * Sets date_created
     *
     * @param \DateTime|null $date_created date_created
     *
     * @return self
     */
    public function setDateCreated($date_created)
    {
        $this->container['date_created'] = $date_created;

        return $this;
    }

    /**
     * Gets last_updated
     *
     * @return \DateTime|null
     */
    public function getLastUpdated()
    {
        return $this->container['last_updated'];
    }

    /**
     * Sets last_updated
     *
     * @param \DateTime|null $last_updated last_updated
     *
     * @return self
     */
    public function setLastUpdated($last_updated)
    {
        $this->container['last_updated'] = $last_updated;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


