<?php
/**
 * Issue
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Issue Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class Issue implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'issue';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'attachment_type' => 'string',
        'app' => 'string',
        'available' => 'bool',
        'check' => 'string',
        'check_group' => '\OpenAPI\Client\Model\InlineResponse20040AppDeployInstance',
        'check_status' => 'string',
        'end_date' => '\DateTime',
        'health' => 'int',
        'in_uptime' => 'bool',
        'incident' => '\OpenAPI\Client\Model\ApiBlueprintsIdUpdatePermissionsResourcePermissionSites',
        'last_check_time' => '\DateTime',
        'last_error' => 'string',
        'last_message' => 'string',
        'name' => 'string',
        'severity' => 'string',
        'severity_id' => 'int',
        'start_date' => '\DateTime',
        'status' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'attachment_type' => null,
        'app' => null,
        'available' => null,
        'check' => null,
        'check_group' => null,
        'check_status' => null,
        'end_date' => 'date-time',
        'health' => 'int64',
        'in_uptime' => null,
        'incident' => null,
        'last_check_time' => 'date-time',
        'last_error' => null,
        'last_message' => null,
        'name' => null,
        'severity' => null,
        'severity_id' => 'int64',
        'start_date' => 'date-time',
        'status' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'attachment_type' => 'attachmentType',
        'app' => 'app',
        'available' => 'available',
        'check' => 'check',
        'check_group' => 'checkGroup',
        'check_status' => 'checkStatus',
        'end_date' => 'endDate',
        'health' => 'health',
        'in_uptime' => 'inUptime',
        'incident' => 'incident',
        'last_check_time' => 'lastCheckTime',
        'last_error' => 'lastError',
        'last_message' => 'lastMessage',
        'name' => 'name',
        'severity' => 'severity',
        'severity_id' => 'severityId',
        'start_date' => 'startDate',
        'status' => 'status'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'attachment_type' => 'setAttachmentType',
        'app' => 'setApp',
        'available' => 'setAvailable',
        'check' => 'setCheck',
        'check_group' => 'setCheckGroup',
        'check_status' => 'setCheckStatus',
        'end_date' => 'setEndDate',
        'health' => 'setHealth',
        'in_uptime' => 'setInUptime',
        'incident' => 'setIncident',
        'last_check_time' => 'setLastCheckTime',
        'last_error' => 'setLastError',
        'last_message' => 'setLastMessage',
        'name' => 'setName',
        'severity' => 'setSeverity',
        'severity_id' => 'setSeverityId',
        'start_date' => 'setStartDate',
        'status' => 'setStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'attachment_type' => 'getAttachmentType',
        'app' => 'getApp',
        'available' => 'getAvailable',
        'check' => 'getCheck',
        'check_group' => 'getCheckGroup',
        'check_status' => 'getCheckStatus',
        'end_date' => 'getEndDate',
        'health' => 'getHealth',
        'in_uptime' => 'getInUptime',
        'incident' => 'getIncident',
        'last_check_time' => 'getLastCheckTime',
        'last_error' => 'getLastError',
        'last_message' => 'getLastMessage',
        'name' => 'getName',
        'severity' => 'getSeverity',
        'severity_id' => 'getSeverityId',
        'start_date' => 'getStartDate',
        'status' => 'getStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['attachment_type'] = $data['attachment_type'] ?? null;
        $this->container['app'] = $data['app'] ?? null;
        $this->container['available'] = $data['available'] ?? null;
        $this->container['check'] = $data['check'] ?? null;
        $this->container['check_group'] = $data['check_group'] ?? null;
        $this->container['check_status'] = $data['check_status'] ?? null;
        $this->container['end_date'] = $data['end_date'] ?? null;
        $this->container['health'] = $data['health'] ?? null;
        $this->container['in_uptime'] = $data['in_uptime'] ?? null;
        $this->container['incident'] = $data['incident'] ?? null;
        $this->container['last_check_time'] = $data['last_check_time'] ?? null;
        $this->container['last_error'] = $data['last_error'] ?? null;
        $this->container['last_message'] = $data['last_message'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['severity'] = $data['severity'] ?? null;
        $this->container['severity_id'] = $data['severity_id'] ?? null;
        $this->container['start_date'] = $data['start_date'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets attachment_type
     *
     * @return string|null
     */
    public function getAttachmentType()
    {
        return $this->container['attachment_type'];
    }

    /**
     * Sets attachment_type
     *
     * @param string|null $attachment_type attachment_type
     *
     * @return self
     */
    public function setAttachmentType($attachment_type)
    {
        $this->container['attachment_type'] = $attachment_type;

        return $this;
    }

    /**
     * Gets app
     *
     * @return string|null
     */
    public function getApp()
    {
        return $this->container['app'];
    }

    /**
     * Sets app
     *
     * @param string|null $app app
     *
     * @return self
     */
    public function setApp($app)
    {
        $this->container['app'] = $app;

        return $this;
    }

    /**
     * Gets available
     *
     * @return bool|null
     */
    public function getAvailable()
    {
        return $this->container['available'];
    }

    /**
     * Sets available
     *
     * @param bool|null $available available
     *
     * @return self
     */
    public function setAvailable($available)
    {
        $this->container['available'] = $available;

        return $this;
    }

    /**
     * Gets check
     *
     * @return string|null
     */
    public function getCheck()
    {
        return $this->container['check'];
    }

    /**
     * Sets check
     *
     * @param string|null $check check
     *
     * @return self
     */
    public function setCheck($check)
    {
        $this->container['check'] = $check;

        return $this;
    }

    /**
     * Gets check_group
     *
     * @return \OpenAPI\Client\Model\InlineResponse20040AppDeployInstance|null
     */
    public function getCheckGroup()
    {
        return $this->container['check_group'];
    }

    /**
     * Sets check_group
     *
     * @param \OpenAPI\Client\Model\InlineResponse20040AppDeployInstance|null $check_group check_group
     *
     * @return self
     */
    public function setCheckGroup($check_group)
    {
        $this->container['check_group'] = $check_group;

        return $this;
    }

    /**
     * Gets check_status
     *
     * @return string|null
     */
    public function getCheckStatus()
    {
        return $this->container['check_status'];
    }

    /**
     * Sets check_status
     *
     * @param string|null $check_status check_status
     *
     * @return self
     */
    public function setCheckStatus($check_status)
    {
        $this->container['check_status'] = $check_status;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime|null
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime|null $end_date end_date
     *
     * @return self
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets health
     *
     * @return int|null
     */
    public function getHealth()
    {
        return $this->container['health'];
    }

    /**
     * Sets health
     *
     * @param int|null $health health
     *
     * @return self
     */
    public function setHealth($health)
    {
        $this->container['health'] = $health;

        return $this;
    }

    /**
     * Gets in_uptime
     *
     * @return bool|null
     */
    public function getInUptime()
    {
        return $this->container['in_uptime'];
    }

    /**
     * Sets in_uptime
     *
     * @param bool|null $in_uptime in_uptime
     *
     * @return self
     */
    public function setInUptime($in_uptime)
    {
        $this->container['in_uptime'] = $in_uptime;

        return $this;
    }

    /**
     * Gets incident
     *
     * @return \OpenAPI\Client\Model\ApiBlueprintsIdUpdatePermissionsResourcePermissionSites|null
     */
    public function getIncident()
    {
        return $this->container['incident'];
    }

    /**
     * Sets incident
     *
     * @param \OpenAPI\Client\Model\ApiBlueprintsIdUpdatePermissionsResourcePermissionSites|null $incident incident
     *
     * @return self
     */
    public function setIncident($incident)
    {
        $this->container['incident'] = $incident;

        return $this;
    }

    /**
     * Gets last_check_time
     *
     * @return \DateTime|null
     */
    public function getLastCheckTime()
    {
        return $this->container['last_check_time'];
    }

    /**
     * Sets last_check_time
     *
     * @param \DateTime|null $last_check_time last_check_time
     *
     * @return self
     */
    public function setLastCheckTime($last_check_time)
    {
        $this->container['last_check_time'] = $last_check_time;

        return $this;
    }

    /**
     * Gets last_error
     *
     * @return string|null
     */
    public function getLastError()
    {
        return $this->container['last_error'];
    }

    /**
     * Sets last_error
     *
     * @param string|null $last_error last_error
     *
     * @return self
     */
    public function setLastError($last_error)
    {
        $this->container['last_error'] = $last_error;

        return $this;
    }

    /**
     * Gets last_message
     *
     * @return string|null
     */
    public function getLastMessage()
    {
        return $this->container['last_message'];
    }

    /**
     * Sets last_message
     *
     * @param string|null $last_message last_message
     *
     * @return self
     */
    public function setLastMessage($last_message)
    {
        $this->container['last_message'] = $last_message;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets severity
     *
     * @return string|null
     */
    public function getSeverity()
    {
        return $this->container['severity'];
    }

    /**
     * Sets severity
     *
     * @param string|null $severity severity
     *
     * @return self
     */
    public function setSeverity($severity)
    {
        $this->container['severity'] = $severity;

        return $this;
    }

    /**
     * Gets severity_id
     *
     * @return int|null
     */
    public function getSeverityId()
    {
        return $this->container['severity_id'];
    }

    /**
     * Sets severity_id
     *
     * @param int|null $severity_id severity_id
     *
     * @return self
     */
    public function setSeverityId($severity_id)
    {
        $this->container['severity_id'] = $severity_id;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return \DateTime|null
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime|null $start_date start_date
     *
     * @return self
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


