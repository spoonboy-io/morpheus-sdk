<?php
/**
 * StorageServerType
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * StorageServerType Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class StorageServerType implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'storageServerType';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'code' => 'string',
        'name' => 'string',
        'description' => 'string',
        'enabled' => 'bool',
        'creatable' => 'bool',
        'has_namespaces' => 'bool',
        'has_groups' => 'bool',
        'has_block' => 'bool',
        'has_object' => 'bool',
        'has_file' => 'bool',
        'has_datastore' => 'bool',
        'has_disks' => 'bool',
        'has_hosts' => 'bool',
        'create_namespaces' => 'bool',
        'create_group' => 'bool',
        'create_block' => 'bool',
        'create_object' => 'bool',
        'create_file' => 'bool',
        'create_datastore' => 'bool',
        'create_disk' => 'bool',
        'create_host' => 'bool',
        'icon_code' => 'string',
        'has_file_browser' => 'bool',
        'option_types' => '\OpenAPI\Client\Model\StorageServerTypeOptionTypes[]',
        'group_option_types' => '\OpenAPI\Client\Model\StorageServerTypeGroupOptionTypes[]',
        'bucket_option_types' => 'object[]',
        'share_option_types' => 'object[]',
        'share_access_option_types' => 'object[]',
        'storage_volume_types' => '\OpenAPI\Client\Model\StorageServerTypeStorageVolumeTypes[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'code' => null,
        'name' => null,
        'description' => null,
        'enabled' => null,
        'creatable' => null,
        'has_namespaces' => null,
        'has_groups' => null,
        'has_block' => null,
        'has_object' => null,
        'has_file' => null,
        'has_datastore' => null,
        'has_disks' => null,
        'has_hosts' => null,
        'create_namespaces' => null,
        'create_group' => null,
        'create_block' => null,
        'create_object' => null,
        'create_file' => null,
        'create_datastore' => null,
        'create_disk' => null,
        'create_host' => null,
        'icon_code' => null,
        'has_file_browser' => null,
        'option_types' => null,
        'group_option_types' => null,
        'bucket_option_types' => null,
        'share_option_types' => null,
        'share_access_option_types' => null,
        'storage_volume_types' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'code' => 'code',
        'name' => 'name',
        'description' => 'description',
        'enabled' => 'enabled',
        'creatable' => 'creatable',
        'has_namespaces' => 'hasNamespaces',
        'has_groups' => 'hasGroups',
        'has_block' => 'hasBlock',
        'has_object' => 'hasObject',
        'has_file' => 'hasFile',
        'has_datastore' => 'hasDatastore',
        'has_disks' => 'hasDisks',
        'has_hosts' => 'hasHosts',
        'create_namespaces' => 'createNamespaces',
        'create_group' => 'createGroup',
        'create_block' => 'createBlock',
        'create_object' => 'createObject',
        'create_file' => 'createFile',
        'create_datastore' => 'createDatastore',
        'create_disk' => 'createDisk',
        'create_host' => 'createHost',
        'icon_code' => 'iconCode',
        'has_file_browser' => 'hasFileBrowser',
        'option_types' => 'optionTypes',
        'group_option_types' => 'groupOptionTypes',
        'bucket_option_types' => 'bucketOptionTypes',
        'share_option_types' => 'shareOptionTypes',
        'share_access_option_types' => 'shareAccessOptionTypes',
        'storage_volume_types' => 'storageVolumeTypes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'code' => 'setCode',
        'name' => 'setName',
        'description' => 'setDescription',
        'enabled' => 'setEnabled',
        'creatable' => 'setCreatable',
        'has_namespaces' => 'setHasNamespaces',
        'has_groups' => 'setHasGroups',
        'has_block' => 'setHasBlock',
        'has_object' => 'setHasObject',
        'has_file' => 'setHasFile',
        'has_datastore' => 'setHasDatastore',
        'has_disks' => 'setHasDisks',
        'has_hosts' => 'setHasHosts',
        'create_namespaces' => 'setCreateNamespaces',
        'create_group' => 'setCreateGroup',
        'create_block' => 'setCreateBlock',
        'create_object' => 'setCreateObject',
        'create_file' => 'setCreateFile',
        'create_datastore' => 'setCreateDatastore',
        'create_disk' => 'setCreateDisk',
        'create_host' => 'setCreateHost',
        'icon_code' => 'setIconCode',
        'has_file_browser' => 'setHasFileBrowser',
        'option_types' => 'setOptionTypes',
        'group_option_types' => 'setGroupOptionTypes',
        'bucket_option_types' => 'setBucketOptionTypes',
        'share_option_types' => 'setShareOptionTypes',
        'share_access_option_types' => 'setShareAccessOptionTypes',
        'storage_volume_types' => 'setStorageVolumeTypes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'code' => 'getCode',
        'name' => 'getName',
        'description' => 'getDescription',
        'enabled' => 'getEnabled',
        'creatable' => 'getCreatable',
        'has_namespaces' => 'getHasNamespaces',
        'has_groups' => 'getHasGroups',
        'has_block' => 'getHasBlock',
        'has_object' => 'getHasObject',
        'has_file' => 'getHasFile',
        'has_datastore' => 'getHasDatastore',
        'has_disks' => 'getHasDisks',
        'has_hosts' => 'getHasHosts',
        'create_namespaces' => 'getCreateNamespaces',
        'create_group' => 'getCreateGroup',
        'create_block' => 'getCreateBlock',
        'create_object' => 'getCreateObject',
        'create_file' => 'getCreateFile',
        'create_datastore' => 'getCreateDatastore',
        'create_disk' => 'getCreateDisk',
        'create_host' => 'getCreateHost',
        'icon_code' => 'getIconCode',
        'has_file_browser' => 'getHasFileBrowser',
        'option_types' => 'getOptionTypes',
        'group_option_types' => 'getGroupOptionTypes',
        'bucket_option_types' => 'getBucketOptionTypes',
        'share_option_types' => 'getShareOptionTypes',
        'share_access_option_types' => 'getShareAccessOptionTypes',
        'storage_volume_types' => 'getStorageVolumeTypes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['code'] = $data['code'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['enabled'] = $data['enabled'] ?? null;
        $this->container['creatable'] = $data['creatable'] ?? null;
        $this->container['has_namespaces'] = $data['has_namespaces'] ?? null;
        $this->container['has_groups'] = $data['has_groups'] ?? null;
        $this->container['has_block'] = $data['has_block'] ?? null;
        $this->container['has_object'] = $data['has_object'] ?? null;
        $this->container['has_file'] = $data['has_file'] ?? null;
        $this->container['has_datastore'] = $data['has_datastore'] ?? null;
        $this->container['has_disks'] = $data['has_disks'] ?? null;
        $this->container['has_hosts'] = $data['has_hosts'] ?? null;
        $this->container['create_namespaces'] = $data['create_namespaces'] ?? null;
        $this->container['create_group'] = $data['create_group'] ?? null;
        $this->container['create_block'] = $data['create_block'] ?? null;
        $this->container['create_object'] = $data['create_object'] ?? null;
        $this->container['create_file'] = $data['create_file'] ?? null;
        $this->container['create_datastore'] = $data['create_datastore'] ?? null;
        $this->container['create_disk'] = $data['create_disk'] ?? null;
        $this->container['create_host'] = $data['create_host'] ?? null;
        $this->container['icon_code'] = $data['icon_code'] ?? null;
        $this->container['has_file_browser'] = $data['has_file_browser'] ?? null;
        $this->container['option_types'] = $data['option_types'] ?? null;
        $this->container['group_option_types'] = $data['group_option_types'] ?? null;
        $this->container['bucket_option_types'] = $data['bucket_option_types'] ?? null;
        $this->container['share_option_types'] = $data['share_option_types'] ?? null;
        $this->container['share_access_option_types'] = $data['share_access_option_types'] ?? null;
        $this->container['storage_volume_types'] = $data['storage_volume_types'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string|null
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string|null $code code
     *
     * @return self
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool|null
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool|null $enabled enabled
     *
     * @return self
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets creatable
     *
     * @return bool|null
     */
    public function getCreatable()
    {
        return $this->container['creatable'];
    }

    /**
     * Sets creatable
     *
     * @param bool|null $creatable creatable
     *
     * @return self
     */
    public function setCreatable($creatable)
    {
        $this->container['creatable'] = $creatable;

        return $this;
    }

    /**
     * Gets has_namespaces
     *
     * @return bool|null
     */
    public function getHasNamespaces()
    {
        return $this->container['has_namespaces'];
    }

    /**
     * Sets has_namespaces
     *
     * @param bool|null $has_namespaces has_namespaces
     *
     * @return self
     */
    public function setHasNamespaces($has_namespaces)
    {
        $this->container['has_namespaces'] = $has_namespaces;

        return $this;
    }

    /**
     * Gets has_groups
     *
     * @return bool|null
     */
    public function getHasGroups()
    {
        return $this->container['has_groups'];
    }

    /**
     * Sets has_groups
     *
     * @param bool|null $has_groups has_groups
     *
     * @return self
     */
    public function setHasGroups($has_groups)
    {
        $this->container['has_groups'] = $has_groups;

        return $this;
    }

    /**
     * Gets has_block
     *
     * @return bool|null
     */
    public function getHasBlock()
    {
        return $this->container['has_block'];
    }

    /**
     * Sets has_block
     *
     * @param bool|null $has_block has_block
     *
     * @return self
     */
    public function setHasBlock($has_block)
    {
        $this->container['has_block'] = $has_block;

        return $this;
    }

    /**
     * Gets has_object
     *
     * @return bool|null
     */
    public function getHasObject()
    {
        return $this->container['has_object'];
    }

    /**
     * Sets has_object
     *
     * @param bool|null $has_object has_object
     *
     * @return self
     */
    public function setHasObject($has_object)
    {
        $this->container['has_object'] = $has_object;

        return $this;
    }

    /**
     * Gets has_file
     *
     * @return bool|null
     */
    public function getHasFile()
    {
        return $this->container['has_file'];
    }

    /**
     * Sets has_file
     *
     * @param bool|null $has_file has_file
     *
     * @return self
     */
    public function setHasFile($has_file)
    {
        $this->container['has_file'] = $has_file;

        return $this;
    }

    /**
     * Gets has_datastore
     *
     * @return bool|null
     */
    public function getHasDatastore()
    {
        return $this->container['has_datastore'];
    }

    /**
     * Sets has_datastore
     *
     * @param bool|null $has_datastore has_datastore
     *
     * @return self
     */
    public function setHasDatastore($has_datastore)
    {
        $this->container['has_datastore'] = $has_datastore;

        return $this;
    }

    /**
     * Gets has_disks
     *
     * @return bool|null
     */
    public function getHasDisks()
    {
        return $this->container['has_disks'];
    }

    /**
     * Sets has_disks
     *
     * @param bool|null $has_disks has_disks
     *
     * @return self
     */
    public function setHasDisks($has_disks)
    {
        $this->container['has_disks'] = $has_disks;

        return $this;
    }

    /**
     * Gets has_hosts
     *
     * @return bool|null
     */
    public function getHasHosts()
    {
        return $this->container['has_hosts'];
    }

    /**
     * Sets has_hosts
     *
     * @param bool|null $has_hosts has_hosts
     *
     * @return self
     */
    public function setHasHosts($has_hosts)
    {
        $this->container['has_hosts'] = $has_hosts;

        return $this;
    }

    /**
     * Gets create_namespaces
     *
     * @return bool|null
     */
    public function getCreateNamespaces()
    {
        return $this->container['create_namespaces'];
    }

    /**
     * Sets create_namespaces
     *
     * @param bool|null $create_namespaces create_namespaces
     *
     * @return self
     */
    public function setCreateNamespaces($create_namespaces)
    {
        $this->container['create_namespaces'] = $create_namespaces;

        return $this;
    }

    /**
     * Gets create_group
     *
     * @return bool|null
     */
    public function getCreateGroup()
    {
        return $this->container['create_group'];
    }

    /**
     * Sets create_group
     *
     * @param bool|null $create_group create_group
     *
     * @return self
     */
    public function setCreateGroup($create_group)
    {
        $this->container['create_group'] = $create_group;

        return $this;
    }

    /**
     * Gets create_block
     *
     * @return bool|null
     */
    public function getCreateBlock()
    {
        return $this->container['create_block'];
    }

    /**
     * Sets create_block
     *
     * @param bool|null $create_block create_block
     *
     * @return self
     */
    public function setCreateBlock($create_block)
    {
        $this->container['create_block'] = $create_block;

        return $this;
    }

    /**
     * Gets create_object
     *
     * @return bool|null
     */
    public function getCreateObject()
    {
        return $this->container['create_object'];
    }

    /**
     * Sets create_object
     *
     * @param bool|null $create_object create_object
     *
     * @return self
     */
    public function setCreateObject($create_object)
    {
        $this->container['create_object'] = $create_object;

        return $this;
    }

    /**
     * Gets create_file
     *
     * @return bool|null
     */
    public function getCreateFile()
    {
        return $this->container['create_file'];
    }

    /**
     * Sets create_file
     *
     * @param bool|null $create_file create_file
     *
     * @return self
     */
    public function setCreateFile($create_file)
    {
        $this->container['create_file'] = $create_file;

        return $this;
    }

    /**
     * Gets create_datastore
     *
     * @return bool|null
     */
    public function getCreateDatastore()
    {
        return $this->container['create_datastore'];
    }

    /**
     * Sets create_datastore
     *
     * @param bool|null $create_datastore create_datastore
     *
     * @return self
     */
    public function setCreateDatastore($create_datastore)
    {
        $this->container['create_datastore'] = $create_datastore;

        return $this;
    }

    /**
     * Gets create_disk
     *
     * @return bool|null
     */
    public function getCreateDisk()
    {
        return $this->container['create_disk'];
    }

    /**
     * Sets create_disk
     *
     * @param bool|null $create_disk create_disk
     *
     * @return self
     */
    public function setCreateDisk($create_disk)
    {
        $this->container['create_disk'] = $create_disk;

        return $this;
    }

    /**
     * Gets create_host
     *
     * @return bool|null
     */
    public function getCreateHost()
    {
        return $this->container['create_host'];
    }

    /**
     * Sets create_host
     *
     * @param bool|null $create_host create_host
     *
     * @return self
     */
    public function setCreateHost($create_host)
    {
        $this->container['create_host'] = $create_host;

        return $this;
    }

    /**
     * Gets icon_code
     *
     * @return string|null
     */
    public function getIconCode()
    {
        return $this->container['icon_code'];
    }

    /**
     * Sets icon_code
     *
     * @param string|null $icon_code icon_code
     *
     * @return self
     */
    public function setIconCode($icon_code)
    {
        $this->container['icon_code'] = $icon_code;

        return $this;
    }

    /**
     * Gets has_file_browser
     *
     * @return bool|null
     */
    public function getHasFileBrowser()
    {
        return $this->container['has_file_browser'];
    }

    /**
     * Sets has_file_browser
     *
     * @param bool|null $has_file_browser has_file_browser
     *
     * @return self
     */
    public function setHasFileBrowser($has_file_browser)
    {
        $this->container['has_file_browser'] = $has_file_browser;

        return $this;
    }

    /**
     * Gets option_types
     *
     * @return \OpenAPI\Client\Model\StorageServerTypeOptionTypes[]|null
     */
    public function getOptionTypes()
    {
        return $this->container['option_types'];
    }

    /**
     * Sets option_types
     *
     * @param \OpenAPI\Client\Model\StorageServerTypeOptionTypes[]|null $option_types option_types
     *
     * @return self
     */
    public function setOptionTypes($option_types)
    {
        $this->container['option_types'] = $option_types;

        return $this;
    }

    /**
     * Gets group_option_types
     *
     * @return \OpenAPI\Client\Model\StorageServerTypeGroupOptionTypes[]|null
     */
    public function getGroupOptionTypes()
    {
        return $this->container['group_option_types'];
    }

    /**
     * Sets group_option_types
     *
     * @param \OpenAPI\Client\Model\StorageServerTypeGroupOptionTypes[]|null $group_option_types group_option_types
     *
     * @return self
     */
    public function setGroupOptionTypes($group_option_types)
    {
        $this->container['group_option_types'] = $group_option_types;

        return $this;
    }

    /**
     * Gets bucket_option_types
     *
     * @return object[]|null
     */
    public function getBucketOptionTypes()
    {
        return $this->container['bucket_option_types'];
    }

    /**
     * Sets bucket_option_types
     *
     * @param object[]|null $bucket_option_types bucket_option_types
     *
     * @return self
     */
    public function setBucketOptionTypes($bucket_option_types)
    {
        $this->container['bucket_option_types'] = $bucket_option_types;

        return $this;
    }

    /**
     * Gets share_option_types
     *
     * @return object[]|null
     */
    public function getShareOptionTypes()
    {
        return $this->container['share_option_types'];
    }

    /**
     * Sets share_option_types
     *
     * @param object[]|null $share_option_types share_option_types
     *
     * @return self
     */
    public function setShareOptionTypes($share_option_types)
    {
        $this->container['share_option_types'] = $share_option_types;

        return $this;
    }

    /**
     * Gets share_access_option_types
     *
     * @return object[]|null
     */
    public function getShareAccessOptionTypes()
    {
        return $this->container['share_access_option_types'];
    }

    /**
     * Sets share_access_option_types
     *
     * @param object[]|null $share_access_option_types share_access_option_types
     *
     * @return self
     */
    public function setShareAccessOptionTypes($share_access_option_types)
    {
        $this->container['share_access_option_types'] = $share_access_option_types;

        return $this;
    }

    /**
     * Gets storage_volume_types
     *
     * @return \OpenAPI\Client\Model\StorageServerTypeStorageVolumeTypes[]|null
     */
    public function getStorageVolumeTypes()
    {
        return $this->container['storage_volume_types'];
    }

    /**
     * Sets storage_volume_types
     *
     * @param \OpenAPI\Client\Model\StorageServerTypeStorageVolumeTypes[]|null $storage_volume_types storage_volume_types
     *
     * @return self
     */
    public function setStorageVolumeTypes($storage_volume_types)
    {
        $this->container['storage_volume_types'] = $storage_volume_types;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


