<?php
/**
 * ClusterTypes
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ClusterTypes Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class ClusterTypes implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'clusterTypes';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'deploy_target_service' => 'string',
        'short_name' => 'string',
        'provider_type' => 'string',
        'code' => 'string',
        'host_service' => 'string',
        'managed' => 'bool',
        'has_masters' => 'bool',
        'has_workers' => 'bool',
        'view_set' => 'string',
        'image_code' => 'string',
        'kube_ctl_local' => 'bool',
        'has_datastore' => 'bool',
        'supports_cloud_scaling' => 'bool',
        'name' => 'string',
        'has_default_data_disk' => 'bool',
        'can_manage' => 'bool',
        'has_cluster' => 'bool',
        'description' => 'string',
        'option_types' => '\OpenAPI\Client\Model\OptionType[]',
        'controller_types' => '\OpenAPI\Client\Model\ClusterTypesControllerTypes[]',
        'worker_types' => '\OpenAPI\Client\Model\ClusterTypesControllerTypes[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'deploy_target_service' => null,
        'short_name' => null,
        'provider_type' => null,
        'code' => null,
        'host_service' => null,
        'managed' => null,
        'has_masters' => null,
        'has_workers' => null,
        'view_set' => null,
        'image_code' => null,
        'kube_ctl_local' => null,
        'has_datastore' => null,
        'supports_cloud_scaling' => null,
        'name' => null,
        'has_default_data_disk' => null,
        'can_manage' => null,
        'has_cluster' => null,
        'description' => null,
        'option_types' => null,
        'controller_types' => null,
        'worker_types' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'deploy_target_service' => 'deployTargetService',
        'short_name' => 'shortName',
        'provider_type' => 'providerType',
        'code' => 'code',
        'host_service' => 'hostService',
        'managed' => 'managed',
        'has_masters' => 'hasMasters',
        'has_workers' => 'hasWorkers',
        'view_set' => 'viewSet',
        'image_code' => 'imageCode',
        'kube_ctl_local' => 'kubeCtlLocal',
        'has_datastore' => 'hasDatastore',
        'supports_cloud_scaling' => 'supportsCloudScaling',
        'name' => 'name',
        'has_default_data_disk' => 'hasDefaultDataDisk',
        'can_manage' => 'canManage',
        'has_cluster' => 'hasCluster',
        'description' => 'description',
        'option_types' => 'optionTypes',
        'controller_types' => 'controllerTypes',
        'worker_types' => 'workerTypes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'deploy_target_service' => 'setDeployTargetService',
        'short_name' => 'setShortName',
        'provider_type' => 'setProviderType',
        'code' => 'setCode',
        'host_service' => 'setHostService',
        'managed' => 'setManaged',
        'has_masters' => 'setHasMasters',
        'has_workers' => 'setHasWorkers',
        'view_set' => 'setViewSet',
        'image_code' => 'setImageCode',
        'kube_ctl_local' => 'setKubeCtlLocal',
        'has_datastore' => 'setHasDatastore',
        'supports_cloud_scaling' => 'setSupportsCloudScaling',
        'name' => 'setName',
        'has_default_data_disk' => 'setHasDefaultDataDisk',
        'can_manage' => 'setCanManage',
        'has_cluster' => 'setHasCluster',
        'description' => 'setDescription',
        'option_types' => 'setOptionTypes',
        'controller_types' => 'setControllerTypes',
        'worker_types' => 'setWorkerTypes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'deploy_target_service' => 'getDeployTargetService',
        'short_name' => 'getShortName',
        'provider_type' => 'getProviderType',
        'code' => 'getCode',
        'host_service' => 'getHostService',
        'managed' => 'getManaged',
        'has_masters' => 'getHasMasters',
        'has_workers' => 'getHasWorkers',
        'view_set' => 'getViewSet',
        'image_code' => 'getImageCode',
        'kube_ctl_local' => 'getKubeCtlLocal',
        'has_datastore' => 'getHasDatastore',
        'supports_cloud_scaling' => 'getSupportsCloudScaling',
        'name' => 'getName',
        'has_default_data_disk' => 'getHasDefaultDataDisk',
        'can_manage' => 'getCanManage',
        'has_cluster' => 'getHasCluster',
        'description' => 'getDescription',
        'option_types' => 'getOptionTypes',
        'controller_types' => 'getControllerTypes',
        'worker_types' => 'getWorkerTypes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['deploy_target_service'] = $data['deploy_target_service'] ?? null;
        $this->container['short_name'] = $data['short_name'] ?? null;
        $this->container['provider_type'] = $data['provider_type'] ?? null;
        $this->container['code'] = $data['code'] ?? null;
        $this->container['host_service'] = $data['host_service'] ?? null;
        $this->container['managed'] = $data['managed'] ?? null;
        $this->container['has_masters'] = $data['has_masters'] ?? null;
        $this->container['has_workers'] = $data['has_workers'] ?? null;
        $this->container['view_set'] = $data['view_set'] ?? null;
        $this->container['image_code'] = $data['image_code'] ?? null;
        $this->container['kube_ctl_local'] = $data['kube_ctl_local'] ?? null;
        $this->container['has_datastore'] = $data['has_datastore'] ?? null;
        $this->container['supports_cloud_scaling'] = $data['supports_cloud_scaling'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['has_default_data_disk'] = $data['has_default_data_disk'] ?? null;
        $this->container['can_manage'] = $data['can_manage'] ?? null;
        $this->container['has_cluster'] = $data['has_cluster'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['option_types'] = $data['option_types'] ?? null;
        $this->container['controller_types'] = $data['controller_types'] ?? null;
        $this->container['worker_types'] = $data['worker_types'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets deploy_target_service
     *
     * @return string|null
     */
    public function getDeployTargetService()
    {
        return $this->container['deploy_target_service'];
    }

    /**
     * Sets deploy_target_service
     *
     * @param string|null $deploy_target_service deploy_target_service
     *
     * @return self
     */
    public function setDeployTargetService($deploy_target_service)
    {
        $this->container['deploy_target_service'] = $deploy_target_service;

        return $this;
    }

    /**
     * Gets short_name
     *
     * @return string|null
     */
    public function getShortName()
    {
        return $this->container['short_name'];
    }

    /**
     * Sets short_name
     *
     * @param string|null $short_name short_name
     *
     * @return self
     */
    public function setShortName($short_name)
    {
        $this->container['short_name'] = $short_name;

        return $this;
    }

    /**
     * Gets provider_type
     *
     * @return string|null
     */
    public function getProviderType()
    {
        return $this->container['provider_type'];
    }

    /**
     * Sets provider_type
     *
     * @param string|null $provider_type provider_type
     *
     * @return self
     */
    public function setProviderType($provider_type)
    {
        $this->container['provider_type'] = $provider_type;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string|null
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string|null $code code
     *
     * @return self
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets host_service
     *
     * @return string|null
     */
    public function getHostService()
    {
        return $this->container['host_service'];
    }

    /**
     * Sets host_service
     *
     * @param string|null $host_service host_service
     *
     * @return self
     */
    public function setHostService($host_service)
    {
        $this->container['host_service'] = $host_service;

        return $this;
    }

    /**
     * Gets managed
     *
     * @return bool|null
     */
    public function getManaged()
    {
        return $this->container['managed'];
    }

    /**
     * Sets managed
     *
     * @param bool|null $managed managed
     *
     * @return self
     */
    public function setManaged($managed)
    {
        $this->container['managed'] = $managed;

        return $this;
    }

    /**
     * Gets has_masters
     *
     * @return bool|null
     */
    public function getHasMasters()
    {
        return $this->container['has_masters'];
    }

    /**
     * Sets has_masters
     *
     * @param bool|null $has_masters has_masters
     *
     * @return self
     */
    public function setHasMasters($has_masters)
    {
        $this->container['has_masters'] = $has_masters;

        return $this;
    }

    /**
     * Gets has_workers
     *
     * @return bool|null
     */
    public function getHasWorkers()
    {
        return $this->container['has_workers'];
    }

    /**
     * Sets has_workers
     *
     * @param bool|null $has_workers has_workers
     *
     * @return self
     */
    public function setHasWorkers($has_workers)
    {
        $this->container['has_workers'] = $has_workers;

        return $this;
    }

    /**
     * Gets view_set
     *
     * @return string|null
     */
    public function getViewSet()
    {
        return $this->container['view_set'];
    }

    /**
     * Sets view_set
     *
     * @param string|null $view_set view_set
     *
     * @return self
     */
    public function setViewSet($view_set)
    {
        $this->container['view_set'] = $view_set;

        return $this;
    }

    /**
     * Gets image_code
     *
     * @return string|null
     */
    public function getImageCode()
    {
        return $this->container['image_code'];
    }

    /**
     * Sets image_code
     *
     * @param string|null $image_code image_code
     *
     * @return self
     */
    public function setImageCode($image_code)
    {
        $this->container['image_code'] = $image_code;

        return $this;
    }

    /**
     * Gets kube_ctl_local
     *
     * @return bool|null
     */
    public function getKubeCtlLocal()
    {
        return $this->container['kube_ctl_local'];
    }

    /**
     * Sets kube_ctl_local
     *
     * @param bool|null $kube_ctl_local kube_ctl_local
     *
     * @return self
     */
    public function setKubeCtlLocal($kube_ctl_local)
    {
        $this->container['kube_ctl_local'] = $kube_ctl_local;

        return $this;
    }

    /**
     * Gets has_datastore
     *
     * @return bool|null
     */
    public function getHasDatastore()
    {
        return $this->container['has_datastore'];
    }

    /**
     * Sets has_datastore
     *
     * @param bool|null $has_datastore has_datastore
     *
     * @return self
     */
    public function setHasDatastore($has_datastore)
    {
        $this->container['has_datastore'] = $has_datastore;

        return $this;
    }

    /**
     * Gets supports_cloud_scaling
     *
     * @return bool|null
     */
    public function getSupportsCloudScaling()
    {
        return $this->container['supports_cloud_scaling'];
    }

    /**
     * Sets supports_cloud_scaling
     *
     * @param bool|null $supports_cloud_scaling supports_cloud_scaling
     *
     * @return self
     */
    public function setSupportsCloudScaling($supports_cloud_scaling)
    {
        $this->container['supports_cloud_scaling'] = $supports_cloud_scaling;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets has_default_data_disk
     *
     * @return bool|null
     */
    public function getHasDefaultDataDisk()
    {
        return $this->container['has_default_data_disk'];
    }

    /**
     * Sets has_default_data_disk
     *
     * @param bool|null $has_default_data_disk has_default_data_disk
     *
     * @return self
     */
    public function setHasDefaultDataDisk($has_default_data_disk)
    {
        $this->container['has_default_data_disk'] = $has_default_data_disk;

        return $this;
    }

    /**
     * Gets can_manage
     *
     * @return bool|null
     */
    public function getCanManage()
    {
        return $this->container['can_manage'];
    }

    /**
     * Sets can_manage
     *
     * @param bool|null $can_manage can_manage
     *
     * @return self
     */
    public function setCanManage($can_manage)
    {
        $this->container['can_manage'] = $can_manage;

        return $this;
    }

    /**
     * Gets has_cluster
     *
     * @return bool|null
     */
    public function getHasCluster()
    {
        return $this->container['has_cluster'];
    }

    /**
     * Sets has_cluster
     *
     * @param bool|null $has_cluster has_cluster
     *
     * @return self
     */
    public function setHasCluster($has_cluster)
    {
        $this->container['has_cluster'] = $has_cluster;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets option_types
     *
     * @return \OpenAPI\Client\Model\OptionType[]|null
     */
    public function getOptionTypes()
    {
        return $this->container['option_types'];
    }

    /**
     * Sets option_types
     *
     * @param \OpenAPI\Client\Model\OptionType[]|null $option_types option_types
     *
     * @return self
     */
    public function setOptionTypes($option_types)
    {
        $this->container['option_types'] = $option_types;

        return $this;
    }

    /**
     * Gets controller_types
     *
     * @return \OpenAPI\Client\Model\ClusterTypesControllerTypes[]|null
     */
    public function getControllerTypes()
    {
        return $this->container['controller_types'];
    }

    /**
     * Sets controller_types
     *
     * @param \OpenAPI\Client\Model\ClusterTypesControllerTypes[]|null $controller_types controller_types
     *
     * @return self
     */
    public function setControllerTypes($controller_types)
    {
        $this->container['controller_types'] = $controller_types;

        return $this;
    }

    /**
     * Gets worker_types
     *
     * @return \OpenAPI\Client\Model\ClusterTypesControllerTypes[]|null
     */
    public function getWorkerTypes()
    {
        return $this->container['worker_types'];
    }

    /**
     * Sets worker_types
     *
     * @param \OpenAPI\Client\Model\ClusterTypesControllerTypes[]|null $worker_types worker_types
     *
     * @return self
     */
    public function setWorkerTypes($worker_types)
    {
        $this->container['worker_types'] = $worker_types;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


