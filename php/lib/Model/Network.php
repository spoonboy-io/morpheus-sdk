<?php
/**
 * Network
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Network Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class Network implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'network';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'name' => 'string',
        'display_name' => 'string',
        'labels' => 'string[]',
        'zone' => '\OpenAPI\Client\Model\NetworkZone',
        'type' => '\OpenAPI\Client\Model\NetworkType',
        'owner' => '\OpenAPI\Client\Model\NetworkOwner',
        'code' => 'string',
        'ipv4_enabled' => 'bool',
        'ipv6_enabled' => 'bool',
        'category' => 'string',
        'interface_name' => 'string',
        'bridge_name' => 'string',
        'bridge_interface' => 'string',
        'description' => 'string',
        'external_id' => 'string',
        'internal_id' => 'string',
        'unique_id' => 'string',
        'external_type' => 'string',
        'ref_url' => 'string',
        'ref_type' => 'string',
        'ref_id' => 'int',
        'vlan_id' => 'int',
        'vswitch_name' => 'string',
        'dhcp_server' => 'bool',
        'dhcp_ip' => 'string',
        'dhcp_server_i_pv6' => 'bool',
        'gateway' => 'string',
        'netmask' => 'string',
        'broadcast' => 'string',
        'subnet_address' => 'string',
        'dns_primary' => 'string',
        'dns_secondary' => 'string',
        'cidr' => 'string',
        'gateway_i_pv6' => 'string',
        'netmask_i_pv6' => 'string',
        'dns_primary_i_pv6' => 'string',
        'dns_secondary_i_pv6' => 'string',
        'cidr_i_pv6' => 'string',
        'tftp_server' => 'string',
        'boot_file' => 'string',
        'switch_id' => 'string',
        'fabric_id' => 'string',
        'network_role' => 'string',
        'status' => 'string',
        'availability_zone' => 'string',
        'pool' => 'object',
        'pool_i_pv6' => 'object',
        'network_proxy' => '\OpenAPI\Client\Model\NetworkNetworkProxy',
        'network_domain' => '\OpenAPI\Client\Model\InlineResponse200108NetworkFloatingIpNetworkDomain',
        'search_domains' => 'string',
        'prefix_length' => 'string',
        'visibility' => 'string',
        'enable_admin' => 'bool',
        'active' => 'bool',
        'default_network' => 'bool',
        'assign_public_ip' => 'bool',
        'no_proxy' => 'string',
        'appliance_url_proxy_bypass' => 'bool',
        'zone_pool' => '\OpenAPI\Client\Model\InlineResponse20082LoadBalancerInstanceSslCert',
        'allow_static_override' => 'bool',
        'config' => '\OpenAPI\Client\Model\NetworkConfig',
        'tenants' => '\OpenAPI\Client\Model\InlineResponse20040AppDeployInstance[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'name' => null,
        'display_name' => null,
        'labels' => null,
        'zone' => null,
        'type' => null,
        'owner' => null,
        'code' => null,
        'ipv4_enabled' => null,
        'ipv6_enabled' => null,
        'category' => null,
        'interface_name' => null,
        'bridge_name' => null,
        'bridge_interface' => null,
        'description' => null,
        'external_id' => null,
        'internal_id' => null,
        'unique_id' => null,
        'external_type' => null,
        'ref_url' => null,
        'ref_type' => null,
        'ref_id' => 'int64',
        'vlan_id' => 'int64',
        'vswitch_name' => null,
        'dhcp_server' => null,
        'dhcp_ip' => null,
        'dhcp_server_i_pv6' => null,
        'gateway' => null,
        'netmask' => null,
        'broadcast' => null,
        'subnet_address' => null,
        'dns_primary' => null,
        'dns_secondary' => null,
        'cidr' => null,
        'gateway_i_pv6' => null,
        'netmask_i_pv6' => null,
        'dns_primary_i_pv6' => null,
        'dns_secondary_i_pv6' => null,
        'cidr_i_pv6' => null,
        'tftp_server' => null,
        'boot_file' => null,
        'switch_id' => null,
        'fabric_id' => null,
        'network_role' => null,
        'status' => null,
        'availability_zone' => null,
        'pool' => null,
        'pool_i_pv6' => null,
        'network_proxy' => null,
        'network_domain' => null,
        'search_domains' => null,
        'prefix_length' => null,
        'visibility' => null,
        'enable_admin' => null,
        'active' => null,
        'default_network' => null,
        'assign_public_ip' => null,
        'no_proxy' => null,
        'appliance_url_proxy_bypass' => null,
        'zone_pool' => null,
        'allow_static_override' => null,
        'config' => null,
        'tenants' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'display_name' => 'displayName',
        'labels' => 'labels',
        'zone' => 'zone',
        'type' => 'type',
        'owner' => 'owner',
        'code' => 'code',
        'ipv4_enabled' => 'ipv4Enabled',
        'ipv6_enabled' => 'ipv6Enabled',
        'category' => 'category',
        'interface_name' => 'interfaceName',
        'bridge_name' => 'bridgeName',
        'bridge_interface' => 'bridgeInterface',
        'description' => 'description',
        'external_id' => 'externalId',
        'internal_id' => 'internalId',
        'unique_id' => 'uniqueId',
        'external_type' => 'externalType',
        'ref_url' => 'refUrl',
        'ref_type' => 'refType',
        'ref_id' => 'refId',
        'vlan_id' => 'vlanId',
        'vswitch_name' => 'vswitchName',
        'dhcp_server' => 'dhcpServer',
        'dhcp_ip' => 'dhcpIp',
        'dhcp_server_i_pv6' => 'dhcpServerIPv6',
        'gateway' => 'gateway',
        'netmask' => 'netmask',
        'broadcast' => 'broadcast',
        'subnet_address' => 'subnetAddress',
        'dns_primary' => 'dnsPrimary',
        'dns_secondary' => 'dnsSecondary',
        'cidr' => 'cidr',
        'gateway_i_pv6' => 'gatewayIPv6',
        'netmask_i_pv6' => 'netmaskIPv6',
        'dns_primary_i_pv6' => 'dnsPrimaryIPv6',
        'dns_secondary_i_pv6' => 'dnsSecondaryIPv6',
        'cidr_i_pv6' => 'cidrIPv6',
        'tftp_server' => 'tftpServer',
        'boot_file' => 'bootFile',
        'switch_id' => 'switchId',
        'fabric_id' => 'fabricId',
        'network_role' => 'networkRole',
        'status' => 'status',
        'availability_zone' => 'availabilityZone',
        'pool' => 'pool',
        'pool_i_pv6' => 'poolIPv6',
        'network_proxy' => 'networkProxy',
        'network_domain' => 'networkDomain',
        'search_domains' => 'searchDomains',
        'prefix_length' => 'prefixLength',
        'visibility' => 'visibility',
        'enable_admin' => 'enableAdmin',
        'active' => 'active',
        'default_network' => 'defaultNetwork',
        'assign_public_ip' => 'assignPublicIp',
        'no_proxy' => 'noProxy',
        'appliance_url_proxy_bypass' => 'applianceUrlProxyBypass',
        'zone_pool' => 'zonePool',
        'allow_static_override' => 'allowStaticOverride',
        'config' => 'config',
        'tenants' => 'tenants'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'display_name' => 'setDisplayName',
        'labels' => 'setLabels',
        'zone' => 'setZone',
        'type' => 'setType',
        'owner' => 'setOwner',
        'code' => 'setCode',
        'ipv4_enabled' => 'setIpv4Enabled',
        'ipv6_enabled' => 'setIpv6Enabled',
        'category' => 'setCategory',
        'interface_name' => 'setInterfaceName',
        'bridge_name' => 'setBridgeName',
        'bridge_interface' => 'setBridgeInterface',
        'description' => 'setDescription',
        'external_id' => 'setExternalId',
        'internal_id' => 'setInternalId',
        'unique_id' => 'setUniqueId',
        'external_type' => 'setExternalType',
        'ref_url' => 'setRefUrl',
        'ref_type' => 'setRefType',
        'ref_id' => 'setRefId',
        'vlan_id' => 'setVlanId',
        'vswitch_name' => 'setVswitchName',
        'dhcp_server' => 'setDhcpServer',
        'dhcp_ip' => 'setDhcpIp',
        'dhcp_server_i_pv6' => 'setDhcpServerIPv6',
        'gateway' => 'setGateway',
        'netmask' => 'setNetmask',
        'broadcast' => 'setBroadcast',
        'subnet_address' => 'setSubnetAddress',
        'dns_primary' => 'setDnsPrimary',
        'dns_secondary' => 'setDnsSecondary',
        'cidr' => 'setCidr',
        'gateway_i_pv6' => 'setGatewayIPv6',
        'netmask_i_pv6' => 'setNetmaskIPv6',
        'dns_primary_i_pv6' => 'setDnsPrimaryIPv6',
        'dns_secondary_i_pv6' => 'setDnsSecondaryIPv6',
        'cidr_i_pv6' => 'setCidrIPv6',
        'tftp_server' => 'setTftpServer',
        'boot_file' => 'setBootFile',
        'switch_id' => 'setSwitchId',
        'fabric_id' => 'setFabricId',
        'network_role' => 'setNetworkRole',
        'status' => 'setStatus',
        'availability_zone' => 'setAvailabilityZone',
        'pool' => 'setPool',
        'pool_i_pv6' => 'setPoolIPv6',
        'network_proxy' => 'setNetworkProxy',
        'network_domain' => 'setNetworkDomain',
        'search_domains' => 'setSearchDomains',
        'prefix_length' => 'setPrefixLength',
        'visibility' => 'setVisibility',
        'enable_admin' => 'setEnableAdmin',
        'active' => 'setActive',
        'default_network' => 'setDefaultNetwork',
        'assign_public_ip' => 'setAssignPublicIp',
        'no_proxy' => 'setNoProxy',
        'appliance_url_proxy_bypass' => 'setApplianceUrlProxyBypass',
        'zone_pool' => 'setZonePool',
        'allow_static_override' => 'setAllowStaticOverride',
        'config' => 'setConfig',
        'tenants' => 'setTenants'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'display_name' => 'getDisplayName',
        'labels' => 'getLabels',
        'zone' => 'getZone',
        'type' => 'getType',
        'owner' => 'getOwner',
        'code' => 'getCode',
        'ipv4_enabled' => 'getIpv4Enabled',
        'ipv6_enabled' => 'getIpv6Enabled',
        'category' => 'getCategory',
        'interface_name' => 'getInterfaceName',
        'bridge_name' => 'getBridgeName',
        'bridge_interface' => 'getBridgeInterface',
        'description' => 'getDescription',
        'external_id' => 'getExternalId',
        'internal_id' => 'getInternalId',
        'unique_id' => 'getUniqueId',
        'external_type' => 'getExternalType',
        'ref_url' => 'getRefUrl',
        'ref_type' => 'getRefType',
        'ref_id' => 'getRefId',
        'vlan_id' => 'getVlanId',
        'vswitch_name' => 'getVswitchName',
        'dhcp_server' => 'getDhcpServer',
        'dhcp_ip' => 'getDhcpIp',
        'dhcp_server_i_pv6' => 'getDhcpServerIPv6',
        'gateway' => 'getGateway',
        'netmask' => 'getNetmask',
        'broadcast' => 'getBroadcast',
        'subnet_address' => 'getSubnetAddress',
        'dns_primary' => 'getDnsPrimary',
        'dns_secondary' => 'getDnsSecondary',
        'cidr' => 'getCidr',
        'gateway_i_pv6' => 'getGatewayIPv6',
        'netmask_i_pv6' => 'getNetmaskIPv6',
        'dns_primary_i_pv6' => 'getDnsPrimaryIPv6',
        'dns_secondary_i_pv6' => 'getDnsSecondaryIPv6',
        'cidr_i_pv6' => 'getCidrIPv6',
        'tftp_server' => 'getTftpServer',
        'boot_file' => 'getBootFile',
        'switch_id' => 'getSwitchId',
        'fabric_id' => 'getFabricId',
        'network_role' => 'getNetworkRole',
        'status' => 'getStatus',
        'availability_zone' => 'getAvailabilityZone',
        'pool' => 'getPool',
        'pool_i_pv6' => 'getPoolIPv6',
        'network_proxy' => 'getNetworkProxy',
        'network_domain' => 'getNetworkDomain',
        'search_domains' => 'getSearchDomains',
        'prefix_length' => 'getPrefixLength',
        'visibility' => 'getVisibility',
        'enable_admin' => 'getEnableAdmin',
        'active' => 'getActive',
        'default_network' => 'getDefaultNetwork',
        'assign_public_ip' => 'getAssignPublicIp',
        'no_proxy' => 'getNoProxy',
        'appliance_url_proxy_bypass' => 'getApplianceUrlProxyBypass',
        'zone_pool' => 'getZonePool',
        'allow_static_override' => 'getAllowStaticOverride',
        'config' => 'getConfig',
        'tenants' => 'getTenants'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['display_name'] = $data['display_name'] ?? null;
        $this->container['labels'] = $data['labels'] ?? null;
        $this->container['zone'] = $data['zone'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['owner'] = $data['owner'] ?? null;
        $this->container['code'] = $data['code'] ?? null;
        $this->container['ipv4_enabled'] = $data['ipv4_enabled'] ?? null;
        $this->container['ipv6_enabled'] = $data['ipv6_enabled'] ?? null;
        $this->container['category'] = $data['category'] ?? null;
        $this->container['interface_name'] = $data['interface_name'] ?? null;
        $this->container['bridge_name'] = $data['bridge_name'] ?? null;
        $this->container['bridge_interface'] = $data['bridge_interface'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['external_id'] = $data['external_id'] ?? null;
        $this->container['internal_id'] = $data['internal_id'] ?? null;
        $this->container['unique_id'] = $data['unique_id'] ?? null;
        $this->container['external_type'] = $data['external_type'] ?? null;
        $this->container['ref_url'] = $data['ref_url'] ?? null;
        $this->container['ref_type'] = $data['ref_type'] ?? null;
        $this->container['ref_id'] = $data['ref_id'] ?? null;
        $this->container['vlan_id'] = $data['vlan_id'] ?? null;
        $this->container['vswitch_name'] = $data['vswitch_name'] ?? null;
        $this->container['dhcp_server'] = $data['dhcp_server'] ?? null;
        $this->container['dhcp_ip'] = $data['dhcp_ip'] ?? null;
        $this->container['dhcp_server_i_pv6'] = $data['dhcp_server_i_pv6'] ?? null;
        $this->container['gateway'] = $data['gateway'] ?? null;
        $this->container['netmask'] = $data['netmask'] ?? null;
        $this->container['broadcast'] = $data['broadcast'] ?? null;
        $this->container['subnet_address'] = $data['subnet_address'] ?? null;
        $this->container['dns_primary'] = $data['dns_primary'] ?? null;
        $this->container['dns_secondary'] = $data['dns_secondary'] ?? null;
        $this->container['cidr'] = $data['cidr'] ?? null;
        $this->container['gateway_i_pv6'] = $data['gateway_i_pv6'] ?? null;
        $this->container['netmask_i_pv6'] = $data['netmask_i_pv6'] ?? null;
        $this->container['dns_primary_i_pv6'] = $data['dns_primary_i_pv6'] ?? null;
        $this->container['dns_secondary_i_pv6'] = $data['dns_secondary_i_pv6'] ?? null;
        $this->container['cidr_i_pv6'] = $data['cidr_i_pv6'] ?? null;
        $this->container['tftp_server'] = $data['tftp_server'] ?? null;
        $this->container['boot_file'] = $data['boot_file'] ?? null;
        $this->container['switch_id'] = $data['switch_id'] ?? null;
        $this->container['fabric_id'] = $data['fabric_id'] ?? null;
        $this->container['network_role'] = $data['network_role'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['availability_zone'] = $data['availability_zone'] ?? null;
        $this->container['pool'] = $data['pool'] ?? null;
        $this->container['pool_i_pv6'] = $data['pool_i_pv6'] ?? null;
        $this->container['network_proxy'] = $data['network_proxy'] ?? null;
        $this->container['network_domain'] = $data['network_domain'] ?? null;
        $this->container['search_domains'] = $data['search_domains'] ?? null;
        $this->container['prefix_length'] = $data['prefix_length'] ?? null;
        $this->container['visibility'] = $data['visibility'] ?? null;
        $this->container['enable_admin'] = $data['enable_admin'] ?? null;
        $this->container['active'] = $data['active'] ?? null;
        $this->container['default_network'] = $data['default_network'] ?? null;
        $this->container['assign_public_ip'] = $data['assign_public_ip'] ?? null;
        $this->container['no_proxy'] = $data['no_proxy'] ?? null;
        $this->container['appliance_url_proxy_bypass'] = $data['appliance_url_proxy_bypass'] ?? null;
        $this->container['zone_pool'] = $data['zone_pool'] ?? null;
        $this->container['allow_static_override'] = $data['allow_static_override'] ?? null;
        $this->container['config'] = $data['config'] ?? null;
        $this->container['tenants'] = $data['tenants'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id Network ID
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets display_name
     *
     * @return string|null
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string|null $display_name Network Display Name
     *
     * @return self
     */
    public function setDisplayName($display_name)
    {
        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets labels
     *
     * @return string[]|null
     */
    public function getLabels()
    {
        return $this->container['labels'];
    }

    /**
     * Sets labels
     *
     * @param string[]|null $labels labels
     *
     * @return self
     */
    public function setLabels($labels)
    {
        $this->container['labels'] = $labels;

        return $this;
    }

    /**
     * Gets zone
     *
     * @return \OpenAPI\Client\Model\NetworkZone|null
     */
    public function getZone()
    {
        return $this->container['zone'];
    }

    /**
     * Sets zone
     *
     * @param \OpenAPI\Client\Model\NetworkZone|null $zone zone
     *
     * @return self
     */
    public function setZone($zone)
    {
        $this->container['zone'] = $zone;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \OpenAPI\Client\Model\NetworkType|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \OpenAPI\Client\Model\NetworkType|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return \OpenAPI\Client\Model\NetworkOwner|null
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param \OpenAPI\Client\Model\NetworkOwner|null $owner owner
     *
     * @return self
     */
    public function setOwner($owner)
    {
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string|null
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string|null $code Network Code
     *
     * @return self
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets ipv4_enabled
     *
     * @return bool|null
     */
    public function getIpv4Enabled()
    {
        return $this->container['ipv4_enabled'];
    }

    /**
     * Sets ipv4_enabled
     *
     * @param bool|null $ipv4_enabled ipv4_enabled
     *
     * @return self
     */
    public function setIpv4Enabled($ipv4_enabled)
    {
        $this->container['ipv4_enabled'] = $ipv4_enabled;

        return $this;
    }

    /**
     * Gets ipv6_enabled
     *
     * @return bool|null
     */
    public function getIpv6Enabled()
    {
        return $this->container['ipv6_enabled'];
    }

    /**
     * Sets ipv6_enabled
     *
     * @param bool|null $ipv6_enabled ipv6_enabled
     *
     * @return self
     */
    public function setIpv6Enabled($ipv6_enabled)
    {
        $this->container['ipv6_enabled'] = $ipv6_enabled;

        return $this;
    }

    /**
     * Gets category
     *
     * @return string|null
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param string|null $category Network Category
     *
     * @return self
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets interface_name
     *
     * @return string|null
     */
    public function getInterfaceName()
    {
        return $this->container['interface_name'];
    }

    /**
     * Sets interface_name
     *
     * @param string|null $interface_name interface_name
     *
     * @return self
     */
    public function setInterfaceName($interface_name)
    {
        $this->container['interface_name'] = $interface_name;

        return $this;
    }

    /**
     * Gets bridge_name
     *
     * @return string|null
     */
    public function getBridgeName()
    {
        return $this->container['bridge_name'];
    }

    /**
     * Sets bridge_name
     *
     * @param string|null $bridge_name bridge_name
     *
     * @return self
     */
    public function setBridgeName($bridge_name)
    {
        $this->container['bridge_name'] = $bridge_name;

        return $this;
    }

    /**
     * Gets bridge_interface
     *
     * @return string|null
     */
    public function getBridgeInterface()
    {
        return $this->container['bridge_interface'];
    }

    /**
     * Sets bridge_interface
     *
     * @param string|null $bridge_interface bridge_interface
     *
     * @return self
     */
    public function setBridgeInterface($bridge_interface)
    {
        $this->container['bridge_interface'] = $bridge_interface;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Description
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string|null
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string|null $external_id external_id
     *
     * @return self
     */
    public function setExternalId($external_id)
    {
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets internal_id
     *
     * @return string|null
     */
    public function getInternalId()
    {
        return $this->container['internal_id'];
    }

    /**
     * Sets internal_id
     *
     * @param string|null $internal_id internal_id
     *
     * @return self
     */
    public function setInternalId($internal_id)
    {
        $this->container['internal_id'] = $internal_id;

        return $this;
    }

    /**
     * Gets unique_id
     *
     * @return string|null
     */
    public function getUniqueId()
    {
        return $this->container['unique_id'];
    }

    /**
     * Sets unique_id
     *
     * @param string|null $unique_id unique_id
     *
     * @return self
     */
    public function setUniqueId($unique_id)
    {
        $this->container['unique_id'] = $unique_id;

        return $this;
    }

    /**
     * Gets external_type
     *
     * @return string|null
     */
    public function getExternalType()
    {
        return $this->container['external_type'];
    }

    /**
     * Sets external_type
     *
     * @param string|null $external_type external_type
     *
     * @return self
     */
    public function setExternalType($external_type)
    {
        $this->container['external_type'] = $external_type;

        return $this;
    }

    /**
     * Gets ref_url
     *
     * @return string|null
     */
    public function getRefUrl()
    {
        return $this->container['ref_url'];
    }

    /**
     * Sets ref_url
     *
     * @param string|null $ref_url ref_url
     *
     * @return self
     */
    public function setRefUrl($ref_url)
    {
        $this->container['ref_url'] = $ref_url;

        return $this;
    }

    /**
     * Gets ref_type
     *
     * @return string|null
     */
    public function getRefType()
    {
        return $this->container['ref_type'];
    }

    /**
     * Sets ref_type
     *
     * @param string|null $ref_type ref_type
     *
     * @return self
     */
    public function setRefType($ref_type)
    {
        $this->container['ref_type'] = $ref_type;

        return $this;
    }

    /**
     * Gets ref_id
     *
     * @return int|null
     */
    public function getRefId()
    {
        return $this->container['ref_id'];
    }

    /**
     * Sets ref_id
     *
     * @param int|null $ref_id ref_id
     *
     * @return self
     */
    public function setRefId($ref_id)
    {
        $this->container['ref_id'] = $ref_id;

        return $this;
    }

    /**
     * Gets vlan_id
     *
     * @return int|null
     */
    public function getVlanId()
    {
        return $this->container['vlan_id'];
    }

    /**
     * Sets vlan_id
     *
     * @param int|null $vlan_id vlan_id
     *
     * @return self
     */
    public function setVlanId($vlan_id)
    {
        $this->container['vlan_id'] = $vlan_id;

        return $this;
    }

    /**
     * Gets vswitch_name
     *
     * @return string|null
     */
    public function getVswitchName()
    {
        return $this->container['vswitch_name'];
    }

    /**
     * Sets vswitch_name
     *
     * @param string|null $vswitch_name vswitch_name
     *
     * @return self
     */
    public function setVswitchName($vswitch_name)
    {
        $this->container['vswitch_name'] = $vswitch_name;

        return $this;
    }

    /**
     * Gets dhcp_server
     *
     * @return bool|null
     */
    public function getDhcpServer()
    {
        return $this->container['dhcp_server'];
    }

    /**
     * Sets dhcp_server
     *
     * @param bool|null $dhcp_server dhcp_server
     *
     * @return self
     */
    public function setDhcpServer($dhcp_server)
    {
        $this->container['dhcp_server'] = $dhcp_server;

        return $this;
    }

    /**
     * Gets dhcp_ip
     *
     * @return string|null
     */
    public function getDhcpIp()
    {
        return $this->container['dhcp_ip'];
    }

    /**
     * Sets dhcp_ip
     *
     * @param string|null $dhcp_ip dhcp_ip
     *
     * @return self
     */
    public function setDhcpIp($dhcp_ip)
    {
        $this->container['dhcp_ip'] = $dhcp_ip;

        return $this;
    }

    /**
     * Gets dhcp_server_i_pv6
     *
     * @return bool|null
     */
    public function getDhcpServerIPv6()
    {
        return $this->container['dhcp_server_i_pv6'];
    }

    /**
     * Sets dhcp_server_i_pv6
     *
     * @param bool|null $dhcp_server_i_pv6 dhcp_server_i_pv6
     *
     * @return self
     */
    public function setDhcpServerIPv6($dhcp_server_i_pv6)
    {
        $this->container['dhcp_server_i_pv6'] = $dhcp_server_i_pv6;

        return $this;
    }

    /**
     * Gets gateway
     *
     * @return string|null
     */
    public function getGateway()
    {
        return $this->container['gateway'];
    }

    /**
     * Sets gateway
     *
     * @param string|null $gateway Network Gateway
     *
     * @return self
     */
    public function setGateway($gateway)
    {
        $this->container['gateway'] = $gateway;

        return $this;
    }

    /**
     * Gets netmask
     *
     * @return string|null
     */
    public function getNetmask()
    {
        return $this->container['netmask'];
    }

    /**
     * Sets netmask
     *
     * @param string|null $netmask netmask
     *
     * @return self
     */
    public function setNetmask($netmask)
    {
        $this->container['netmask'] = $netmask;

        return $this;
    }

    /**
     * Gets broadcast
     *
     * @return string|null
     */
    public function getBroadcast()
    {
        return $this->container['broadcast'];
    }

    /**
     * Sets broadcast
     *
     * @param string|null $broadcast broadcast
     *
     * @return self
     */
    public function setBroadcast($broadcast)
    {
        $this->container['broadcast'] = $broadcast;

        return $this;
    }

    /**
     * Gets subnet_address
     *
     * @return string|null
     */
    public function getSubnetAddress()
    {
        return $this->container['subnet_address'];
    }

    /**
     * Sets subnet_address
     *
     * @param string|null $subnet_address subnet_address
     *
     * @return self
     */
    public function setSubnetAddress($subnet_address)
    {
        $this->container['subnet_address'] = $subnet_address;

        return $this;
    }

    /**
     * Gets dns_primary
     *
     * @return string|null
     */
    public function getDnsPrimary()
    {
        return $this->container['dns_primary'];
    }

    /**
     * Sets dns_primary
     *
     * @param string|null $dns_primary Primary DNS Server
     *
     * @return self
     */
    public function setDnsPrimary($dns_primary)
    {
        $this->container['dns_primary'] = $dns_primary;

        return $this;
    }

    /**
     * Gets dns_secondary
     *
     * @return string|null
     */
    public function getDnsSecondary()
    {
        return $this->container['dns_secondary'];
    }

    /**
     * Sets dns_secondary
     *
     * @param string|null $dns_secondary Secondary DNS Server
     *
     * @return self
     */
    public function setDnsSecondary($dns_secondary)
    {
        $this->container['dns_secondary'] = $dns_secondary;

        return $this;
    }

    /**
     * Gets cidr
     *
     * @return string|null
     */
    public function getCidr()
    {
        return $this->container['cidr'];
    }

    /**
     * Sets cidr
     *
     * @param string|null $cidr Network CIDR
     *
     * @return self
     */
    public function setCidr($cidr)
    {
        $this->container['cidr'] = $cidr;

        return $this;
    }

    /**
     * Gets gateway_i_pv6
     *
     * @return string|null
     */
    public function getGatewayIPv6()
    {
        return $this->container['gateway_i_pv6'];
    }

    /**
     * Sets gateway_i_pv6
     *
     * @param string|null $gateway_i_pv6 IPv6 Network Gateway
     *
     * @return self
     */
    public function setGatewayIPv6($gateway_i_pv6)
    {
        $this->container['gateway_i_pv6'] = $gateway_i_pv6;

        return $this;
    }

    /**
     * Gets netmask_i_pv6
     *
     * @return string|null
     */
    public function getNetmaskIPv6()
    {
        return $this->container['netmask_i_pv6'];
    }

    /**
     * Sets netmask_i_pv6
     *
     * @param string|null $netmask_i_pv6 netmask_i_pv6
     *
     * @return self
     */
    public function setNetmaskIPv6($netmask_i_pv6)
    {
        $this->container['netmask_i_pv6'] = $netmask_i_pv6;

        return $this;
    }

    /**
     * Gets dns_primary_i_pv6
     *
     * @return string|null
     */
    public function getDnsPrimaryIPv6()
    {
        return $this->container['dns_primary_i_pv6'];
    }

    /**
     * Sets dns_primary_i_pv6
     *
     * @param string|null $dns_primary_i_pv6 Primary IPv6 DNS Server
     *
     * @return self
     */
    public function setDnsPrimaryIPv6($dns_primary_i_pv6)
    {
        $this->container['dns_primary_i_pv6'] = $dns_primary_i_pv6;

        return $this;
    }

    /**
     * Gets dns_secondary_i_pv6
     *
     * @return string|null
     */
    public function getDnsSecondaryIPv6()
    {
        return $this->container['dns_secondary_i_pv6'];
    }

    /**
     * Sets dns_secondary_i_pv6
     *
     * @param string|null $dns_secondary_i_pv6 Secondary IPv6 DNS Server
     *
     * @return self
     */
    public function setDnsSecondaryIPv6($dns_secondary_i_pv6)
    {
        $this->container['dns_secondary_i_pv6'] = $dns_secondary_i_pv6;

        return $this;
    }

    /**
     * Gets cidr_i_pv6
     *
     * @return string|null
     */
    public function getCidrIPv6()
    {
        return $this->container['cidr_i_pv6'];
    }

    /**
     * Sets cidr_i_pv6
     *
     * @param string|null $cidr_i_pv6 IPv6 Network CIDR
     *
     * @return self
     */
    public function setCidrIPv6($cidr_i_pv6)
    {
        $this->container['cidr_i_pv6'] = $cidr_i_pv6;

        return $this;
    }

    /**
     * Gets tftp_server
     *
     * @return string|null
     */
    public function getTftpServer()
    {
        return $this->container['tftp_server'];
    }

    /**
     * Sets tftp_server
     *
     * @param string|null $tftp_server tftp_server
     *
     * @return self
     */
    public function setTftpServer($tftp_server)
    {
        $this->container['tftp_server'] = $tftp_server;

        return $this;
    }

    /**
     * Gets boot_file
     *
     * @return string|null
     */
    public function getBootFile()
    {
        return $this->container['boot_file'];
    }

    /**
     * Sets boot_file
     *
     * @param string|null $boot_file boot_file
     *
     * @return self
     */
    public function setBootFile($boot_file)
    {
        $this->container['boot_file'] = $boot_file;

        return $this;
    }

    /**
     * Gets switch_id
     *
     * @return string|null
     */
    public function getSwitchId()
    {
        return $this->container['switch_id'];
    }

    /**
     * Sets switch_id
     *
     * @param string|null $switch_id switch_id
     *
     * @return self
     */
    public function setSwitchId($switch_id)
    {
        $this->container['switch_id'] = $switch_id;

        return $this;
    }

    /**
     * Gets fabric_id
     *
     * @return string|null
     */
    public function getFabricId()
    {
        return $this->container['fabric_id'];
    }

    /**
     * Sets fabric_id
     *
     * @param string|null $fabric_id fabric_id
     *
     * @return self
     */
    public function setFabricId($fabric_id)
    {
        $this->container['fabric_id'] = $fabric_id;

        return $this;
    }

    /**
     * Gets network_role
     *
     * @return string|null
     */
    public function getNetworkRole()
    {
        return $this->container['network_role'];
    }

    /**
     * Sets network_role
     *
     * @param string|null $network_role network_role
     *
     * @return self
     */
    public function setNetworkRole($network_role)
    {
        $this->container['network_role'] = $network_role;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets availability_zone
     *
     * @return string|null
     */
    public function getAvailabilityZone()
    {
        return $this->container['availability_zone'];
    }

    /**
     * Sets availability_zone
     *
     * @param string|null $availability_zone availability_zone
     *
     * @return self
     */
    public function setAvailabilityZone($availability_zone)
    {
        $this->container['availability_zone'] = $availability_zone;

        return $this;
    }

    /**
     * Gets pool
     *
     * @return object|null
     */
    public function getPool()
    {
        return $this->container['pool'];
    }

    /**
     * Sets pool
     *
     * @param object|null $pool pool
     *
     * @return self
     */
    public function setPool($pool)
    {
        $this->container['pool'] = $pool;

        return $this;
    }

    /**
     * Gets pool_i_pv6
     *
     * @return object|null
     */
    public function getPoolIPv6()
    {
        return $this->container['pool_i_pv6'];
    }

    /**
     * Sets pool_i_pv6
     *
     * @param object|null $pool_i_pv6 pool_i_pv6
     *
     * @return self
     */
    public function setPoolIPv6($pool_i_pv6)
    {
        $this->container['pool_i_pv6'] = $pool_i_pv6;

        return $this;
    }

    /**
     * Gets network_proxy
     *
     * @return \OpenAPI\Client\Model\NetworkNetworkProxy|null
     */
    public function getNetworkProxy()
    {
        return $this->container['network_proxy'];
    }

    /**
     * Sets network_proxy
     *
     * @param \OpenAPI\Client\Model\NetworkNetworkProxy|null $network_proxy network_proxy
     *
     * @return self
     */
    public function setNetworkProxy($network_proxy)
    {
        $this->container['network_proxy'] = $network_proxy;

        return $this;
    }

    /**
     * Gets network_domain
     *
     * @return \OpenAPI\Client\Model\InlineResponse200108NetworkFloatingIpNetworkDomain|null
     */
    public function getNetworkDomain()
    {
        return $this->container['network_domain'];
    }

    /**
     * Sets network_domain
     *
     * @param \OpenAPI\Client\Model\InlineResponse200108NetworkFloatingIpNetworkDomain|null $network_domain network_domain
     *
     * @return self
     */
    public function setNetworkDomain($network_domain)
    {
        $this->container['network_domain'] = $network_domain;

        return $this;
    }

    /**
     * Gets search_domains
     *
     * @return string|null
     */
    public function getSearchDomains()
    {
        return $this->container['search_domains'];
    }

    /**
     * Sets search_domains
     *
     * @param string|null $search_domains search_domains
     *
     * @return self
     */
    public function setSearchDomains($search_domains)
    {
        $this->container['search_domains'] = $search_domains;

        return $this;
    }

    /**
     * Gets prefix_length
     *
     * @return string|null
     */
    public function getPrefixLength()
    {
        return $this->container['prefix_length'];
    }

    /**
     * Sets prefix_length
     *
     * @param string|null $prefix_length prefix_length
     *
     * @return self
     */
    public function setPrefixLength($prefix_length)
    {
        $this->container['prefix_length'] = $prefix_length;

        return $this;
    }

    /**
     * Gets visibility
     *
     * @return string|null
     */
    public function getVisibility()
    {
        return $this->container['visibility'];
    }

    /**
     * Sets visibility
     *
     * @param string|null $visibility visibility
     *
     * @return self
     */
    public function setVisibility($visibility)
    {
        $this->container['visibility'] = $visibility;

        return $this;
    }

    /**
     * Gets enable_admin
     *
     * @return bool|null
     */
    public function getEnableAdmin()
    {
        return $this->container['enable_admin'];
    }

    /**
     * Sets enable_admin
     *
     * @param bool|null $enable_admin enable_admin
     *
     * @return self
     */
    public function setEnableAdmin($enable_admin)
    {
        $this->container['enable_admin'] = $enable_admin;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool|null
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool|null $active active
     *
     * @return self
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets default_network
     *
     * @return bool|null
     */
    public function getDefaultNetwork()
    {
        return $this->container['default_network'];
    }

    /**
     * Sets default_network
     *
     * @param bool|null $default_network default_network
     *
     * @return self
     */
    public function setDefaultNetwork($default_network)
    {
        $this->container['default_network'] = $default_network;

        return $this;
    }

    /**
     * Gets assign_public_ip
     *
     * @return bool|null
     */
    public function getAssignPublicIp()
    {
        return $this->container['assign_public_ip'];
    }

    /**
     * Sets assign_public_ip
     *
     * @param bool|null $assign_public_ip assign_public_ip
     *
     * @return self
     */
    public function setAssignPublicIp($assign_public_ip)
    {
        $this->container['assign_public_ip'] = $assign_public_ip;

        return $this;
    }

    /**
     * Gets no_proxy
     *
     * @return string|null
     */
    public function getNoProxy()
    {
        return $this->container['no_proxy'];
    }

    /**
     * Sets no_proxy
     *
     * @param string|null $no_proxy no_proxy
     *
     * @return self
     */
    public function setNoProxy($no_proxy)
    {
        $this->container['no_proxy'] = $no_proxy;

        return $this;
    }

    /**
     * Gets appliance_url_proxy_bypass
     *
     * @return bool|null
     */
    public function getApplianceUrlProxyBypass()
    {
        return $this->container['appliance_url_proxy_bypass'];
    }

    /**
     * Sets appliance_url_proxy_bypass
     *
     * @param bool|null $appliance_url_proxy_bypass appliance_url_proxy_bypass
     *
     * @return self
     */
    public function setApplianceUrlProxyBypass($appliance_url_proxy_bypass)
    {
        $this->container['appliance_url_proxy_bypass'] = $appliance_url_proxy_bypass;

        return $this;
    }

    /**
     * Gets zone_pool
     *
     * @return \OpenAPI\Client\Model\InlineResponse20082LoadBalancerInstanceSslCert|null
     */
    public function getZonePool()
    {
        return $this->container['zone_pool'];
    }

    /**
     * Sets zone_pool
     *
     * @param \OpenAPI\Client\Model\InlineResponse20082LoadBalancerInstanceSslCert|null $zone_pool zone_pool
     *
     * @return self
     */
    public function setZonePool($zone_pool)
    {
        $this->container['zone_pool'] = $zone_pool;

        return $this;
    }

    /**
     * Gets allow_static_override
     *
     * @return bool|null
     */
    public function getAllowStaticOverride()
    {
        return $this->container['allow_static_override'];
    }

    /**
     * Sets allow_static_override
     *
     * @param bool|null $allow_static_override allow_static_override
     *
     * @return self
     */
    public function setAllowStaticOverride($allow_static_override)
    {
        $this->container['allow_static_override'] = $allow_static_override;

        return $this;
    }

    /**
     * Gets config
     *
     * @return \OpenAPI\Client\Model\NetworkConfig|null
     */
    public function getConfig()
    {
        return $this->container['config'];
    }

    /**
     * Sets config
     *
     * @param \OpenAPI\Client\Model\NetworkConfig|null $config config
     *
     * @return self
     */
    public function setConfig($config)
    {
        $this->container['config'] = $config;

        return $this;
    }

    /**
     * Gets tenants
     *
     * @return \OpenAPI\Client\Model\InlineResponse20040AppDeployInstance[]|null
     */
    public function getTenants()
    {
        return $this->container['tenants'];
    }

    /**
     * Sets tenants
     *
     * @param \OpenAPI\Client\Model\InlineResponse20040AppDeployInstance[]|null $tenants tenants
     *
     * @return self
     */
    public function setTenants($tenants)
    {
        $this->container['tenants'] = $tenants;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


