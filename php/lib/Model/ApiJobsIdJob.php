<?php
/**
 * ApiJobsIdJob
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ApiJobsIdJob Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class ApiJobsIdJob implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_api_jobs__id__job';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'labels' => 'string[]',
        'enabled' => 'bool',
        'task' => '\OpenAPI\Client\Model\ApiJobsIdJobTask',
        'workflow' => '\OpenAPI\Client\Model\ApiJobsIdJobTask',
        'scan_path' => 'string',
        'security_profile' => 'string',
        'target_type' => 'string',
        'targets' => '\OpenAPI\Client\Model\ApiJobsIdJobTargets[]',
        'instance_label' => 'string',
        'server_label' => 'string',
        'schedule_mode' => 'OneOfStringLong',
        'custom_options' => 'object',
        'custom_config' => 'string',
        'date_time' => '\DateTime',
        'run' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'labels' => null,
        'enabled' => null,
        'task' => null,
        'workflow' => null,
        'scan_path' => null,
        'security_profile' => null,
        'target_type' => null,
        'targets' => null,
        'instance_label' => null,
        'server_label' => null,
        'schedule_mode' => null,
        'custom_options' => null,
        'custom_config' => null,
        'date_time' => 'date-time',
        'run' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'labels' => 'labels',
        'enabled' => 'enabled',
        'task' => 'task',
        'workflow' => 'workflow',
        'scan_path' => 'scanPath',
        'security_profile' => 'securityProfile',
        'target_type' => 'targetType',
        'targets' => 'targets',
        'instance_label' => 'instanceLabel',
        'server_label' => 'serverLabel',
        'schedule_mode' => 'scheduleMode',
        'custom_options' => 'customOptions',
        'custom_config' => 'customConfig',
        'date_time' => 'dateTime',
        'run' => 'run'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'labels' => 'setLabels',
        'enabled' => 'setEnabled',
        'task' => 'setTask',
        'workflow' => 'setWorkflow',
        'scan_path' => 'setScanPath',
        'security_profile' => 'setSecurityProfile',
        'target_type' => 'setTargetType',
        'targets' => 'setTargets',
        'instance_label' => 'setInstanceLabel',
        'server_label' => 'setServerLabel',
        'schedule_mode' => 'setScheduleMode',
        'custom_options' => 'setCustomOptions',
        'custom_config' => 'setCustomConfig',
        'date_time' => 'setDateTime',
        'run' => 'setRun'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'labels' => 'getLabels',
        'enabled' => 'getEnabled',
        'task' => 'getTask',
        'workflow' => 'getWorkflow',
        'scan_path' => 'getScanPath',
        'security_profile' => 'getSecurityProfile',
        'target_type' => 'getTargetType',
        'targets' => 'getTargets',
        'instance_label' => 'getInstanceLabel',
        'server_label' => 'getServerLabel',
        'schedule_mode' => 'getScheduleMode',
        'custom_options' => 'getCustomOptions',
        'custom_config' => 'getCustomConfig',
        'date_time' => 'getDateTime',
        'run' => 'getRun'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const TARGET_TYPE_APPLIANCE = 'appliance';
    const TARGET_TYPE_INSTANCE = 'instance';
    const TARGET_TYPE_INSTANCE_LABEL = 'instance-label';
    const TARGET_TYPE_SERVER = 'server';
    const TARGET_TYPE_SERVER_LABEL = 'server-label';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTargetTypeAllowableValues()
    {
        return [
            self::TARGET_TYPE_APPLIANCE,
            self::TARGET_TYPE_INSTANCE,
            self::TARGET_TYPE_INSTANCE_LABEL,
            self::TARGET_TYPE_SERVER,
            self::TARGET_TYPE_SERVER_LABEL,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['labels'] = $data['labels'] ?? null;
        $this->container['enabled'] = $data['enabled'] ?? true;
        $this->container['task'] = $data['task'] ?? null;
        $this->container['workflow'] = $data['workflow'] ?? null;
        $this->container['scan_path'] = $data['scan_path'] ?? null;
        $this->container['security_profile'] = $data['security_profile'] ?? null;
        $this->container['target_type'] = $data['target_type'] ?? null;
        $this->container['targets'] = $data['targets'] ?? null;
        $this->container['instance_label'] = $data['instance_label'] ?? null;
        $this->container['server_label'] = $data['server_label'] ?? null;
        $this->container['schedule_mode'] = $data['schedule_mode'] ?? null;
        $this->container['custom_options'] = $data['custom_options'] ?? null;
        $this->container['custom_config'] = $data['custom_config'] ?? null;
        $this->container['date_time'] = $data['date_time'] ?? null;
        $this->container['run'] = $data['run'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTargetTypeAllowableValues();
        if (!is_null($this->container['target_type']) && !in_array($this->container['target_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'target_type', must be one of '%s'",
                $this->container['target_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name A name for the Job
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets labels
     *
     * @return string[]|null
     */
    public function getLabels()
    {
        return $this->container['labels'];
    }

    /**
     * Sets labels
     *
     * @param string[]|null $labels Array of label strings, can be used for filtering.
     *
     * @return self
     */
    public function setLabels($labels)
    {
        $this->container['labels'] = $labels;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool|null
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool|null $enabled Use this to set enabled state
     *
     * @return self
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets task
     *
     * @return \OpenAPI\Client\Model\ApiJobsIdJobTask|null
     */
    public function getTask()
    {
        return $this->container['task'];
    }

    /**
     * Sets task
     *
     * @param \OpenAPI\Client\Model\ApiJobsIdJobTask|null $task task
     *
     * @return self
     */
    public function setTask($task)
    {
        $this->container['task'] = $task;

        return $this;
    }

    /**
     * Gets workflow
     *
     * @return \OpenAPI\Client\Model\ApiJobsIdJobTask|null
     */
    public function getWorkflow()
    {
        return $this->container['workflow'];
    }

    /**
     * Sets workflow
     *
     * @param \OpenAPI\Client\Model\ApiJobsIdJobTask|null $workflow workflow
     *
     * @return self
     */
    public function setWorkflow($workflow)
    {
        $this->container['workflow'] = $workflow;

        return $this;
    }

    /**
     * Gets scan_path
     *
     * @return string|null
     */
    public function getScanPath()
    {
        return $this->container['scan_path'];
    }

    /**
     * Sets scan_path
     *
     * @param string|null $scan_path Scan Checklist. Only applies to type scap-package.
     *
     * @return self
     */
    public function setScanPath($scan_path)
    {
        $this->container['scan_path'] = $scan_path;

        return $this;
    }

    /**
     * Gets security_profile
     *
     * @return string|null
     */
    public function getSecurityProfile()
    {
        return $this->container['security_profile'];
    }

    /**
     * Sets security_profile
     *
     * @param string|null $security_profile Security Profile. Only applies to type scap-package.
     *
     * @return self
     */
    public function setSecurityProfile($security_profile)
    {
        $this->container['security_profile'] = $security_profile;

        return $this;
    }

    /**
     * Gets target_type
     *
     * @return string|null
     */
    public function getTargetType()
    {
        return $this->container['target_type'];
    }

    /**
     * Sets target_type
     *
     * @param string|null $target_type Target type where job will execute
     *
     * @return self
     */
    public function setTargetType($target_type)
    {
        $allowedValues = $this->getTargetTypeAllowableValues();
        if (!is_null($target_type) && !in_array($target_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'target_type', must be one of '%s'",
                    $target_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['target_type'] = $target_type;

        return $this;
    }

    /**
     * Gets targets
     *
     * @return \OpenAPI\Client\Model\ApiJobsIdJobTargets[]|null
     */
    public function getTargets()
    {
        return $this->container['targets'];
    }

    /**
     * Sets targets
     *
     * @param \OpenAPI\Client\Model\ApiJobsIdJobTargets[]|null $targets targets
     *
     * @return self
     */
    public function setTargets($targets)
    {
        $this->container['targets'] = $targets;

        return $this;
    }

    /**
     * Gets instance_label
     *
     * @return string|null
     */
    public function getInstanceLabel()
    {
        return $this->container['instance_label'];
    }

    /**
     * Sets instance_label
     *
     * @param string|null $instance_label Instance Label. Only applicable if `targetType` is `instance-label`.
     *
     * @return self
     */
    public function setInstanceLabel($instance_label)
    {
        $this->container['instance_label'] = $instance_label;

        return $this;
    }

    /**
     * Gets server_label
     *
     * @return string|null
     */
    public function getServerLabel()
    {
        return $this->container['server_label'];
    }

    /**
     * Sets server_label
     *
     * @param string|null $server_label Server Label. Only applicable if `targetType` is `server-label`.
     *
     * @return self
     */
    public function setServerLabel($server_label)
    {
        $this->container['server_label'] = $server_label;

        return $this;
    }

    /**
     * Gets schedule_mode
     *
     * @return OneOfStringLong|null
     */
    public function getScheduleMode()
    {
        return $this->container['schedule_mode'];
    }

    /**
     * Sets schedule_mode
     *
     * @param OneOfStringLong|null $schedule_mode schedule_mode
     *
     * @return self
     */
    public function setScheduleMode($schedule_mode)
    {
        $this->container['schedule_mode'] = $schedule_mode;

        return $this;
    }

    /**
     * Gets custom_options
     *
     * @return object|null
     */
    public function getCustomOptions()
    {
        return $this->container['custom_options'];
    }

    /**
     * Sets custom_options
     *
     * @param object|null $custom_options Map of options to be used as values in the workflow tasks. These correspond to option types.
     *
     * @return self
     */
    public function setCustomOptions($custom_options)
    {
        $this->container['custom_options'] = $custom_options;

        return $this;
    }

    /**
     * Gets custom_config
     *
     * @return string|null
     */
    public function getCustomConfig()
    {
        return $this->container['custom_config'];
    }

    /**
     * Sets custom_config
     *
     * @param string|null $custom_config Job custom configuration (String in JSON format)
     *
     * @return self
     */
    public function setCustomConfig($custom_config)
    {
        $this->container['custom_config'] = $custom_config;

        return $this;
    }

    /**
     * Gets date_time
     *
     * @return \DateTime|null
     */
    public function getDateTime()
    {
        return $this->container['date_time'];
    }

    /**
     * Sets date_time
     *
     * @param \DateTime|null $date_time Date and Time to execute the job. Use UTC time in the format 2020-02-15T05:00:00Z. Required when scheduleMode is 'dateTime'.
     *
     * @return self
     */
    public function setDateTime($date_time)
    {
        $this->container['date_time'] = $date_time;

        return $this;
    }

    /**
     * Gets run
     *
     * @return bool|null
     */
    public function getRun()
    {
        return $this->container['run'];
    }

    /**
     * Sets run
     *
     * @param bool|null $run If true, executes job
     *
     * @return self
     */
    public function setRun($run)
    {
        $this->container['run'] = $run;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


