<?php
/**
 * InstanceThreshold
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * InstanceThreshold Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InstanceThreshold implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'instanceThreshold';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'auto_up' => 'bool',
        'auto_down' => 'bool',
        'min_count' => 'int',
        'max_count' => 'int',
        'scale_increment' => 'int',
        'cpu_enabled' => 'bool',
        'min_cpu' => 'int',
        'max_cpu' => 'int',
        'memory_enabled' => 'bool',
        'min_memory' => 'int',
        'max_memory' => 'int',
        'disk_enabled' => 'bool',
        'min_disk' => 'int',
        'max_disk' => 'int',
        'min_network' => 'string',
        'network_enabled' => 'bool',
        'iops_enabled' => 'bool',
        'min_iops' => 'string',
        'max_iops' => 'string',
        'comment' => 'string',
        'zone_id' => 'int',
        'date_created' => '\DateTime',
        'last_updated' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'auto_up' => null,
        'auto_down' => null,
        'min_count' => 'int64',
        'max_count' => 'int64',
        'scale_increment' => 'int64',
        'cpu_enabled' => null,
        'min_cpu' => 'int64',
        'max_cpu' => 'int64',
        'memory_enabled' => null,
        'min_memory' => 'int64',
        'max_memory' => 'int64',
        'disk_enabled' => null,
        'min_disk' => 'int64',
        'max_disk' => 'int64',
        'min_network' => null,
        'network_enabled' => null,
        'iops_enabled' => null,
        'min_iops' => null,
        'max_iops' => null,
        'comment' => null,
        'zone_id' => 'int64',
        'date_created' => 'date-time',
        'last_updated' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'auto_up' => 'autoUp',
        'auto_down' => 'autoDown',
        'min_count' => 'minCount',
        'max_count' => 'maxCount',
        'scale_increment' => 'scaleIncrement',
        'cpu_enabled' => 'cpuEnabled',
        'min_cpu' => 'minCpu',
        'max_cpu' => 'maxCpu',
        'memory_enabled' => 'memoryEnabled',
        'min_memory' => 'minMemory',
        'max_memory' => 'maxMemory',
        'disk_enabled' => 'diskEnabled',
        'min_disk' => 'minDisk',
        'max_disk' => 'maxDisk',
        'min_network' => 'minNetwork',
        'network_enabled' => 'networkEnabled',
        'iops_enabled' => 'iopsEnabled',
        'min_iops' => 'minIops',
        'max_iops' => 'maxIops',
        'comment' => 'comment',
        'zone_id' => 'zoneId',
        'date_created' => 'dateCreated',
        'last_updated' => 'lastUpdated'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'auto_up' => 'setAutoUp',
        'auto_down' => 'setAutoDown',
        'min_count' => 'setMinCount',
        'max_count' => 'setMaxCount',
        'scale_increment' => 'setScaleIncrement',
        'cpu_enabled' => 'setCpuEnabled',
        'min_cpu' => 'setMinCpu',
        'max_cpu' => 'setMaxCpu',
        'memory_enabled' => 'setMemoryEnabled',
        'min_memory' => 'setMinMemory',
        'max_memory' => 'setMaxMemory',
        'disk_enabled' => 'setDiskEnabled',
        'min_disk' => 'setMinDisk',
        'max_disk' => 'setMaxDisk',
        'min_network' => 'setMinNetwork',
        'network_enabled' => 'setNetworkEnabled',
        'iops_enabled' => 'setIopsEnabled',
        'min_iops' => 'setMinIops',
        'max_iops' => 'setMaxIops',
        'comment' => 'setComment',
        'zone_id' => 'setZoneId',
        'date_created' => 'setDateCreated',
        'last_updated' => 'setLastUpdated'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'auto_up' => 'getAutoUp',
        'auto_down' => 'getAutoDown',
        'min_count' => 'getMinCount',
        'max_count' => 'getMaxCount',
        'scale_increment' => 'getScaleIncrement',
        'cpu_enabled' => 'getCpuEnabled',
        'min_cpu' => 'getMinCpu',
        'max_cpu' => 'getMaxCpu',
        'memory_enabled' => 'getMemoryEnabled',
        'min_memory' => 'getMinMemory',
        'max_memory' => 'getMaxMemory',
        'disk_enabled' => 'getDiskEnabled',
        'min_disk' => 'getMinDisk',
        'max_disk' => 'getMaxDisk',
        'min_network' => 'getMinNetwork',
        'network_enabled' => 'getNetworkEnabled',
        'iops_enabled' => 'getIopsEnabled',
        'min_iops' => 'getMinIops',
        'max_iops' => 'getMaxIops',
        'comment' => 'getComment',
        'zone_id' => 'getZoneId',
        'date_created' => 'getDateCreated',
        'last_updated' => 'getLastUpdated'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['auto_up'] = $data['auto_up'] ?? null;
        $this->container['auto_down'] = $data['auto_down'] ?? null;
        $this->container['min_count'] = $data['min_count'] ?? null;
        $this->container['max_count'] = $data['max_count'] ?? null;
        $this->container['scale_increment'] = $data['scale_increment'] ?? null;
        $this->container['cpu_enabled'] = $data['cpu_enabled'] ?? null;
        $this->container['min_cpu'] = $data['min_cpu'] ?? null;
        $this->container['max_cpu'] = $data['max_cpu'] ?? null;
        $this->container['memory_enabled'] = $data['memory_enabled'] ?? null;
        $this->container['min_memory'] = $data['min_memory'] ?? null;
        $this->container['max_memory'] = $data['max_memory'] ?? null;
        $this->container['disk_enabled'] = $data['disk_enabled'] ?? null;
        $this->container['min_disk'] = $data['min_disk'] ?? null;
        $this->container['max_disk'] = $data['max_disk'] ?? null;
        $this->container['min_network'] = $data['min_network'] ?? null;
        $this->container['network_enabled'] = $data['network_enabled'] ?? null;
        $this->container['iops_enabled'] = $data['iops_enabled'] ?? null;
        $this->container['min_iops'] = $data['min_iops'] ?? null;
        $this->container['max_iops'] = $data['max_iops'] ?? null;
        $this->container['comment'] = $data['comment'] ?? null;
        $this->container['zone_id'] = $data['zone_id'] ?? null;
        $this->container['date_created'] = $data['date_created'] ?? null;
        $this->container['last_updated'] = $data['last_updated'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets auto_up
     *
     * @return bool|null
     */
    public function getAutoUp()
    {
        return $this->container['auto_up'];
    }

    /**
     * Sets auto_up
     *
     * @param bool|null $auto_up auto_up
     *
     * @return self
     */
    public function setAutoUp($auto_up)
    {
        $this->container['auto_up'] = $auto_up;

        return $this;
    }

    /**
     * Gets auto_down
     *
     * @return bool|null
     */
    public function getAutoDown()
    {
        return $this->container['auto_down'];
    }

    /**
     * Sets auto_down
     *
     * @param bool|null $auto_down auto_down
     *
     * @return self
     */
    public function setAutoDown($auto_down)
    {
        $this->container['auto_down'] = $auto_down;

        return $this;
    }

    /**
     * Gets min_count
     *
     * @return int|null
     */
    public function getMinCount()
    {
        return $this->container['min_count'];
    }

    /**
     * Sets min_count
     *
     * @param int|null $min_count min_count
     *
     * @return self
     */
    public function setMinCount($min_count)
    {
        $this->container['min_count'] = $min_count;

        return $this;
    }

    /**
     * Gets max_count
     *
     * @return int|null
     */
    public function getMaxCount()
    {
        return $this->container['max_count'];
    }

    /**
     * Sets max_count
     *
     * @param int|null $max_count max_count
     *
     * @return self
     */
    public function setMaxCount($max_count)
    {
        $this->container['max_count'] = $max_count;

        return $this;
    }

    /**
     * Gets scale_increment
     *
     * @return int|null
     */
    public function getScaleIncrement()
    {
        return $this->container['scale_increment'];
    }

    /**
     * Sets scale_increment
     *
     * @param int|null $scale_increment scale_increment
     *
     * @return self
     */
    public function setScaleIncrement($scale_increment)
    {
        $this->container['scale_increment'] = $scale_increment;

        return $this;
    }

    /**
     * Gets cpu_enabled
     *
     * @return bool|null
     */
    public function getCpuEnabled()
    {
        return $this->container['cpu_enabled'];
    }

    /**
     * Sets cpu_enabled
     *
     * @param bool|null $cpu_enabled cpu_enabled
     *
     * @return self
     */
    public function setCpuEnabled($cpu_enabled)
    {
        $this->container['cpu_enabled'] = $cpu_enabled;

        return $this;
    }

    /**
     * Gets min_cpu
     *
     * @return int|null
     */
    public function getMinCpu()
    {
        return $this->container['min_cpu'];
    }

    /**
     * Sets min_cpu
     *
     * @param int|null $min_cpu min_cpu
     *
     * @return self
     */
    public function setMinCpu($min_cpu)
    {
        $this->container['min_cpu'] = $min_cpu;

        return $this;
    }

    /**
     * Gets max_cpu
     *
     * @return int|null
     */
    public function getMaxCpu()
    {
        return $this->container['max_cpu'];
    }

    /**
     * Sets max_cpu
     *
     * @param int|null $max_cpu max_cpu
     *
     * @return self
     */
    public function setMaxCpu($max_cpu)
    {
        $this->container['max_cpu'] = $max_cpu;

        return $this;
    }

    /**
     * Gets memory_enabled
     *
     * @return bool|null
     */
    public function getMemoryEnabled()
    {
        return $this->container['memory_enabled'];
    }

    /**
     * Sets memory_enabled
     *
     * @param bool|null $memory_enabled memory_enabled
     *
     * @return self
     */
    public function setMemoryEnabled($memory_enabled)
    {
        $this->container['memory_enabled'] = $memory_enabled;

        return $this;
    }

    /**
     * Gets min_memory
     *
     * @return int|null
     */
    public function getMinMemory()
    {
        return $this->container['min_memory'];
    }

    /**
     * Sets min_memory
     *
     * @param int|null $min_memory min_memory
     *
     * @return self
     */
    public function setMinMemory($min_memory)
    {
        $this->container['min_memory'] = $min_memory;

        return $this;
    }

    /**
     * Gets max_memory
     *
     * @return int|null
     */
    public function getMaxMemory()
    {
        return $this->container['max_memory'];
    }

    /**
     * Sets max_memory
     *
     * @param int|null $max_memory max_memory
     *
     * @return self
     */
    public function setMaxMemory($max_memory)
    {
        $this->container['max_memory'] = $max_memory;

        return $this;
    }

    /**
     * Gets disk_enabled
     *
     * @return bool|null
     */
    public function getDiskEnabled()
    {
        return $this->container['disk_enabled'];
    }

    /**
     * Sets disk_enabled
     *
     * @param bool|null $disk_enabled disk_enabled
     *
     * @return self
     */
    public function setDiskEnabled($disk_enabled)
    {
        $this->container['disk_enabled'] = $disk_enabled;

        return $this;
    }

    /**
     * Gets min_disk
     *
     * @return int|null
     */
    public function getMinDisk()
    {
        return $this->container['min_disk'];
    }

    /**
     * Sets min_disk
     *
     * @param int|null $min_disk min_disk
     *
     * @return self
     */
    public function setMinDisk($min_disk)
    {
        $this->container['min_disk'] = $min_disk;

        return $this;
    }

    /**
     * Gets max_disk
     *
     * @return int|null
     */
    public function getMaxDisk()
    {
        return $this->container['max_disk'];
    }

    /**
     * Sets max_disk
     *
     * @param int|null $max_disk max_disk
     *
     * @return self
     */
    public function setMaxDisk($max_disk)
    {
        $this->container['max_disk'] = $max_disk;

        return $this;
    }

    /**
     * Gets min_network
     *
     * @return string|null
     */
    public function getMinNetwork()
    {
        return $this->container['min_network'];
    }

    /**
     * Sets min_network
     *
     * @param string|null $min_network min_network
     *
     * @return self
     */
    public function setMinNetwork($min_network)
    {
        $this->container['min_network'] = $min_network;

        return $this;
    }

    /**
     * Gets network_enabled
     *
     * @return bool|null
     */
    public function getNetworkEnabled()
    {
        return $this->container['network_enabled'];
    }

    /**
     * Sets network_enabled
     *
     * @param bool|null $network_enabled network_enabled
     *
     * @return self
     */
    public function setNetworkEnabled($network_enabled)
    {
        $this->container['network_enabled'] = $network_enabled;

        return $this;
    }

    /**
     * Gets iops_enabled
     *
     * @return bool|null
     */
    public function getIopsEnabled()
    {
        return $this->container['iops_enabled'];
    }

    /**
     * Sets iops_enabled
     *
     * @param bool|null $iops_enabled iops_enabled
     *
     * @return self
     */
    public function setIopsEnabled($iops_enabled)
    {
        $this->container['iops_enabled'] = $iops_enabled;

        return $this;
    }

    /**
     * Gets min_iops
     *
     * @return string|null
     */
    public function getMinIops()
    {
        return $this->container['min_iops'];
    }

    /**
     * Sets min_iops
     *
     * @param string|null $min_iops min_iops
     *
     * @return self
     */
    public function setMinIops($min_iops)
    {
        $this->container['min_iops'] = $min_iops;

        return $this;
    }

    /**
     * Gets max_iops
     *
     * @return string|null
     */
    public function getMaxIops()
    {
        return $this->container['max_iops'];
    }

    /**
     * Sets max_iops
     *
     * @param string|null $max_iops max_iops
     *
     * @return self
     */
    public function setMaxIops($max_iops)
    {
        $this->container['max_iops'] = $max_iops;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string|null
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string|null $comment comment
     *
     * @return self
     */
    public function setComment($comment)
    {
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets zone_id
     *
     * @return int|null
     */
    public function getZoneId()
    {
        return $this->container['zone_id'];
    }

    /**
     * Sets zone_id
     *
     * @param int|null $zone_id zone_id
     *
     * @return self
     */
    public function setZoneId($zone_id)
    {
        $this->container['zone_id'] = $zone_id;

        return $this;
    }

    /**
     * Gets date_created
     *
     * @return \DateTime|null
     */
    public function getDateCreated()
    {
        return $this->container['date_created'];
    }

    /**
     * Sets date_created
     *
     * @param \DateTime|null $date_created date_created
     *
     * @return self
     */
    public function setDateCreated($date_created)
    {
        $this->container['date_created'] = $date_created;

        return $this;
    }

    /**
     * Gets last_updated
     *
     * @return \DateTime|null
     */
    public function getLastUpdated()
    {
        return $this->container['last_updated'];
    }

    /**
     * Sets last_updated
     *
     * @param \DateTime|null $last_updated last_updated
     *
     * @return self
     */
    public function setLastUpdated($last_updated)
    {
        $this->container['last_updated'] = $last_updated;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


