<?php
/**
 * User
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * User Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class User implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'user';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'account_id' => 'int',
        'username' => 'string',
        'display_name' => 'string',
        'email' => 'string',
        'first_name' => 'string',
        'last_name' => 'string',
        'enabled' => 'bool',
        'receive_notifications' => 'bool',
        'is_using2_fa' => 'bool',
        'account_expired' => 'bool',
        'account_locked' => 'bool',
        'password_expired' => 'bool',
        'login_count' => 'int',
        'login_attempts' => 'int',
        'last_login_date' => '\DateTime',
        'roles' => '\OpenAPI\Client\Model\UserRoles[]',
        'account' => '\OpenAPI\Client\Model\InlineResponse20040AppDeployInstance',
        'linux_username' => 'string',
        'linux_password' => 'string',
        'linux_key_pair_id' => 'int',
        'windows_username' => 'string',
        'windows_password' => 'string',
        'default_persona' => '\OpenAPI\Client\Model\InlineResponse20079LoadBalancerMonitorLoadBalancerType',
        'date_created' => '\DateTime',
        'last_updated' => '\DateTime',
        'access' => '\OpenAPI\Client\Model\UserAccess'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'account_id' => 'int64',
        'username' => null,
        'display_name' => null,
        'email' => null,
        'first_name' => null,
        'last_name' => null,
        'enabled' => null,
        'receive_notifications' => null,
        'is_using2_fa' => null,
        'account_expired' => null,
        'account_locked' => null,
        'password_expired' => null,
        'login_count' => 'int64',
        'login_attempts' => 'int64',
        'last_login_date' => 'date-time',
        'roles' => null,
        'account' => null,
        'linux_username' => null,
        'linux_password' => null,
        'linux_key_pair_id' => 'int64',
        'windows_username' => null,
        'windows_password' => null,
        'default_persona' => null,
        'date_created' => 'date-time',
        'last_updated' => 'date-time',
        'access' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'account_id' => 'accountId',
        'username' => 'username',
        'display_name' => 'displayName',
        'email' => 'email',
        'first_name' => 'firstName',
        'last_name' => 'lastName',
        'enabled' => 'enabled',
        'receive_notifications' => 'receiveNotifications',
        'is_using2_fa' => 'isUsing2FA',
        'account_expired' => 'accountExpired',
        'account_locked' => 'accountLocked',
        'password_expired' => 'passwordExpired',
        'login_count' => 'loginCount',
        'login_attempts' => 'loginAttempts',
        'last_login_date' => 'lastLoginDate',
        'roles' => 'roles',
        'account' => 'account',
        'linux_username' => 'linuxUsername',
        'linux_password' => 'linuxPassword',
        'linux_key_pair_id' => 'linuxKeyPairId',
        'windows_username' => 'windowsUsername',
        'windows_password' => 'windowsPassword',
        'default_persona' => 'defaultPersona',
        'date_created' => 'dateCreated',
        'last_updated' => 'lastUpdated',
        'access' => 'access'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'account_id' => 'setAccountId',
        'username' => 'setUsername',
        'display_name' => 'setDisplayName',
        'email' => 'setEmail',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'enabled' => 'setEnabled',
        'receive_notifications' => 'setReceiveNotifications',
        'is_using2_fa' => 'setIsUsing2Fa',
        'account_expired' => 'setAccountExpired',
        'account_locked' => 'setAccountLocked',
        'password_expired' => 'setPasswordExpired',
        'login_count' => 'setLoginCount',
        'login_attempts' => 'setLoginAttempts',
        'last_login_date' => 'setLastLoginDate',
        'roles' => 'setRoles',
        'account' => 'setAccount',
        'linux_username' => 'setLinuxUsername',
        'linux_password' => 'setLinuxPassword',
        'linux_key_pair_id' => 'setLinuxKeyPairId',
        'windows_username' => 'setWindowsUsername',
        'windows_password' => 'setWindowsPassword',
        'default_persona' => 'setDefaultPersona',
        'date_created' => 'setDateCreated',
        'last_updated' => 'setLastUpdated',
        'access' => 'setAccess'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'account_id' => 'getAccountId',
        'username' => 'getUsername',
        'display_name' => 'getDisplayName',
        'email' => 'getEmail',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'enabled' => 'getEnabled',
        'receive_notifications' => 'getReceiveNotifications',
        'is_using2_fa' => 'getIsUsing2Fa',
        'account_expired' => 'getAccountExpired',
        'account_locked' => 'getAccountLocked',
        'password_expired' => 'getPasswordExpired',
        'login_count' => 'getLoginCount',
        'login_attempts' => 'getLoginAttempts',
        'last_login_date' => 'getLastLoginDate',
        'roles' => 'getRoles',
        'account' => 'getAccount',
        'linux_username' => 'getLinuxUsername',
        'linux_password' => 'getLinuxPassword',
        'linux_key_pair_id' => 'getLinuxKeyPairId',
        'windows_username' => 'getWindowsUsername',
        'windows_password' => 'getWindowsPassword',
        'default_persona' => 'getDefaultPersona',
        'date_created' => 'getDateCreated',
        'last_updated' => 'getLastUpdated',
        'access' => 'getAccess'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['account_id'] = $data['account_id'] ?? null;
        $this->container['username'] = $data['username'] ?? null;
        $this->container['display_name'] = $data['display_name'] ?? null;
        $this->container['email'] = $data['email'] ?? null;
        $this->container['first_name'] = $data['first_name'] ?? null;
        $this->container['last_name'] = $data['last_name'] ?? null;
        $this->container['enabled'] = $data['enabled'] ?? null;
        $this->container['receive_notifications'] = $data['receive_notifications'] ?? null;
        $this->container['is_using2_fa'] = $data['is_using2_fa'] ?? null;
        $this->container['account_expired'] = $data['account_expired'] ?? null;
        $this->container['account_locked'] = $data['account_locked'] ?? null;
        $this->container['password_expired'] = $data['password_expired'] ?? null;
        $this->container['login_count'] = $data['login_count'] ?? null;
        $this->container['login_attempts'] = $data['login_attempts'] ?? null;
        $this->container['last_login_date'] = $data['last_login_date'] ?? null;
        $this->container['roles'] = $data['roles'] ?? null;
        $this->container['account'] = $data['account'] ?? null;
        $this->container['linux_username'] = $data['linux_username'] ?? null;
        $this->container['linux_password'] = $data['linux_password'] ?? null;
        $this->container['linux_key_pair_id'] = $data['linux_key_pair_id'] ?? null;
        $this->container['windows_username'] = $data['windows_username'] ?? null;
        $this->container['windows_password'] = $data['windows_password'] ?? null;
        $this->container['default_persona'] = $data['default_persona'] ?? null;
        $this->container['date_created'] = $data['date_created'] ?? null;
        $this->container['last_updated'] = $data['last_updated'] ?? null;
        $this->container['access'] = $data['access'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets account_id
     *
     * @return int|null
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param int|null $account_id account_id
     *
     * @return self
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string|null
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string|null $username username
     *
     * @return self
     */
    public function setUsername($username)
    {
        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets display_name
     *
     * @return string|null
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string|null $display_name display_name
     *
     * @return self
     */
    public function setDisplayName($display_name)
    {
        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email email
     *
     * @return self
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string|null $first_name first_name
     *
     * @return self
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string|null
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string|null $last_name last_name
     *
     * @return self
     */
    public function setLastName($last_name)
    {
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool|null
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool|null $enabled enabled
     *
     * @return self
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets receive_notifications
     *
     * @return bool|null
     */
    public function getReceiveNotifications()
    {
        return $this->container['receive_notifications'];
    }

    /**
     * Sets receive_notifications
     *
     * @param bool|null $receive_notifications receive_notifications
     *
     * @return self
     */
    public function setReceiveNotifications($receive_notifications)
    {
        $this->container['receive_notifications'] = $receive_notifications;

        return $this;
    }

    /**
     * Gets is_using2_fa
     *
     * @return bool|null
     */
    public function getIsUsing2Fa()
    {
        return $this->container['is_using2_fa'];
    }

    /**
     * Sets is_using2_fa
     *
     * @param bool|null $is_using2_fa is_using2_fa
     *
     * @return self
     */
    public function setIsUsing2Fa($is_using2_fa)
    {
        $this->container['is_using2_fa'] = $is_using2_fa;

        return $this;
    }

    /**
     * Gets account_expired
     *
     * @return bool|null
     */
    public function getAccountExpired()
    {
        return $this->container['account_expired'];
    }

    /**
     * Sets account_expired
     *
     * @param bool|null $account_expired account_expired
     *
     * @return self
     */
    public function setAccountExpired($account_expired)
    {
        $this->container['account_expired'] = $account_expired;

        return $this;
    }

    /**
     * Gets account_locked
     *
     * @return bool|null
     */
    public function getAccountLocked()
    {
        return $this->container['account_locked'];
    }

    /**
     * Sets account_locked
     *
     * @param bool|null $account_locked account_locked
     *
     * @return self
     */
    public function setAccountLocked($account_locked)
    {
        $this->container['account_locked'] = $account_locked;

        return $this;
    }

    /**
     * Gets password_expired
     *
     * @return bool|null
     */
    public function getPasswordExpired()
    {
        return $this->container['password_expired'];
    }

    /**
     * Sets password_expired
     *
     * @param bool|null $password_expired password_expired
     *
     * @return self
     */
    public function setPasswordExpired($password_expired)
    {
        $this->container['password_expired'] = $password_expired;

        return $this;
    }

    /**
     * Gets login_count
     *
     * @return int|null
     */
    public function getLoginCount()
    {
        return $this->container['login_count'];
    }

    /**
     * Sets login_count
     *
     * @param int|null $login_count login_count
     *
     * @return self
     */
    public function setLoginCount($login_count)
    {
        $this->container['login_count'] = $login_count;

        return $this;
    }

    /**
     * Gets login_attempts
     *
     * @return int|null
     */
    public function getLoginAttempts()
    {
        return $this->container['login_attempts'];
    }

    /**
     * Sets login_attempts
     *
     * @param int|null $login_attempts login_attempts
     *
     * @return self
     */
    public function setLoginAttempts($login_attempts)
    {
        $this->container['login_attempts'] = $login_attempts;

        return $this;
    }

    /**
     * Gets last_login_date
     *
     * @return \DateTime|null
     */
    public function getLastLoginDate()
    {
        return $this->container['last_login_date'];
    }

    /**
     * Sets last_login_date
     *
     * @param \DateTime|null $last_login_date last_login_date
     *
     * @return self
     */
    public function setLastLoginDate($last_login_date)
    {
        $this->container['last_login_date'] = $last_login_date;

        return $this;
    }

    /**
     * Gets roles
     *
     * @return \OpenAPI\Client\Model\UserRoles[]|null
     */
    public function getRoles()
    {
        return $this->container['roles'];
    }

    /**
     * Sets roles
     *
     * @param \OpenAPI\Client\Model\UserRoles[]|null $roles roles
     *
     * @return self
     */
    public function setRoles($roles)
    {
        $this->container['roles'] = $roles;

        return $this;
    }

    /**
     * Gets account
     *
     * @return \OpenAPI\Client\Model\InlineResponse20040AppDeployInstance|null
     */
    public function getAccount()
    {
        return $this->container['account'];
    }

    /**
     * Sets account
     *
     * @param \OpenAPI\Client\Model\InlineResponse20040AppDeployInstance|null $account account
     *
     * @return self
     */
    public function setAccount($account)
    {
        $this->container['account'] = $account;

        return $this;
    }

    /**
     * Gets linux_username
     *
     * @return string|null
     */
    public function getLinuxUsername()
    {
        return $this->container['linux_username'];
    }

    /**
     * Sets linux_username
     *
     * @param string|null $linux_username linux_username
     *
     * @return self
     */
    public function setLinuxUsername($linux_username)
    {
        $this->container['linux_username'] = $linux_username;

        return $this;
    }

    /**
     * Gets linux_password
     *
     * @return string|null
     */
    public function getLinuxPassword()
    {
        return $this->container['linux_password'];
    }

    /**
     * Sets linux_password
     *
     * @param string|null $linux_password linux_password
     *
     * @return self
     */
    public function setLinuxPassword($linux_password)
    {
        $this->container['linux_password'] = $linux_password;

        return $this;
    }

    /**
     * Gets linux_key_pair_id
     *
     * @return int|null
     */
    public function getLinuxKeyPairId()
    {
        return $this->container['linux_key_pair_id'];
    }

    /**
     * Sets linux_key_pair_id
     *
     * @param int|null $linux_key_pair_id linux_key_pair_id
     *
     * @return self
     */
    public function setLinuxKeyPairId($linux_key_pair_id)
    {
        $this->container['linux_key_pair_id'] = $linux_key_pair_id;

        return $this;
    }

    /**
     * Gets windows_username
     *
     * @return string|null
     */
    public function getWindowsUsername()
    {
        return $this->container['windows_username'];
    }

    /**
     * Sets windows_username
     *
     * @param string|null $windows_username windows_username
     *
     * @return self
     */
    public function setWindowsUsername($windows_username)
    {
        $this->container['windows_username'] = $windows_username;

        return $this;
    }

    /**
     * Gets windows_password
     *
     * @return string|null
     */
    public function getWindowsPassword()
    {
        return $this->container['windows_password'];
    }

    /**
     * Sets windows_password
     *
     * @param string|null $windows_password windows_password
     *
     * @return self
     */
    public function setWindowsPassword($windows_password)
    {
        $this->container['windows_password'] = $windows_password;

        return $this;
    }

    /**
     * Gets default_persona
     *
     * @return \OpenAPI\Client\Model\InlineResponse20079LoadBalancerMonitorLoadBalancerType|null
     */
    public function getDefaultPersona()
    {
        return $this->container['default_persona'];
    }

    /**
     * Sets default_persona
     *
     * @param \OpenAPI\Client\Model\InlineResponse20079LoadBalancerMonitorLoadBalancerType|null $default_persona default_persona
     *
     * @return self
     */
    public function setDefaultPersona($default_persona)
    {
        $this->container['default_persona'] = $default_persona;

        return $this;
    }

    /**
     * Gets date_created
     *
     * @return \DateTime|null
     */
    public function getDateCreated()
    {
        return $this->container['date_created'];
    }

    /**
     * Sets date_created
     *
     * @param \DateTime|null $date_created date_created
     *
     * @return self
     */
    public function setDateCreated($date_created)
    {
        $this->container['date_created'] = $date_created;

        return $this;
    }

    /**
     * Gets last_updated
     *
     * @return \DateTime|null
     */
    public function getLastUpdated()
    {
        return $this->container['last_updated'];
    }

    /**
     * Sets last_updated
     *
     * @param \DateTime|null $last_updated last_updated
     *
     * @return self
     */
    public function setLastUpdated($last_updated)
    {
        $this->container['last_updated'] = $last_updated;

        return $this;
    }

    /**
     * Gets access
     *
     * @return \OpenAPI\Client\Model\UserAccess|null
     */
    public function getAccess()
    {
        return $this->container['access'];
    }

    /**
     * Sets access
     *
     * @param \OpenAPI\Client\Model\UserAccess|null $access access
     *
     * @return self
     */
    public function setAccess($access)
    {
        $this->container['access'] = $access;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


