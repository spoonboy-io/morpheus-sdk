<?php
/**
 * BillingZone
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * BillingZone Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class BillingZone implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'billingZone';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'zone_name' => 'string',
        'zone_id' => 'int',
        'zone_uuid' => 'string',
        'zone_code' => 'string',
        'start_date' => '\DateTime',
        'end_date' => '\DateTime',
        'price_unit' => 'string',
        'compute_servers' => '\OpenAPI\Client\Model\BillingComputeServers',
        'instances' => '\OpenAPI\Client\Model\BillingInstances',
        'discovered_servers' => '\OpenAPI\Client\Model\BillingComputeServers',
        'load_balancers' => '\OpenAPI\Client\Model\BillingLoadBalancers',
        'virtual_images' => '\OpenAPI\Client\Model\BillingVirtualImages',
        'snapshots' => '\OpenAPI\Client\Model\BillingSnapshots',
        'price' => 'float',
        'cost' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'zone_name' => null,
        'zone_id' => 'int64',
        'zone_uuid' => null,
        'zone_code' => null,
        'start_date' => 'date-time',
        'end_date' => 'date-time',
        'price_unit' => null,
        'compute_servers' => null,
        'instances' => null,
        'discovered_servers' => null,
        'load_balancers' => null,
        'virtual_images' => null,
        'snapshots' => null,
        'price' => null,
        'cost' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'zone_name' => 'zoneName',
        'zone_id' => 'zoneId',
        'zone_uuid' => 'zoneUUID',
        'zone_code' => 'zoneCode',
        'start_date' => 'startDate',
        'end_date' => 'endDate',
        'price_unit' => 'priceUnit',
        'compute_servers' => 'computeServers',
        'instances' => 'instances',
        'discovered_servers' => 'discoveredServers',
        'load_balancers' => 'loadBalancers',
        'virtual_images' => 'virtualImages',
        'snapshots' => 'snapshots',
        'price' => 'price',
        'cost' => 'cost'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'zone_name' => 'setZoneName',
        'zone_id' => 'setZoneId',
        'zone_uuid' => 'setZoneUuid',
        'zone_code' => 'setZoneCode',
        'start_date' => 'setStartDate',
        'end_date' => 'setEndDate',
        'price_unit' => 'setPriceUnit',
        'compute_servers' => 'setComputeServers',
        'instances' => 'setInstances',
        'discovered_servers' => 'setDiscoveredServers',
        'load_balancers' => 'setLoadBalancers',
        'virtual_images' => 'setVirtualImages',
        'snapshots' => 'setSnapshots',
        'price' => 'setPrice',
        'cost' => 'setCost'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'zone_name' => 'getZoneName',
        'zone_id' => 'getZoneId',
        'zone_uuid' => 'getZoneUuid',
        'zone_code' => 'getZoneCode',
        'start_date' => 'getStartDate',
        'end_date' => 'getEndDate',
        'price_unit' => 'getPriceUnit',
        'compute_servers' => 'getComputeServers',
        'instances' => 'getInstances',
        'discovered_servers' => 'getDiscoveredServers',
        'load_balancers' => 'getLoadBalancers',
        'virtual_images' => 'getVirtualImages',
        'snapshots' => 'getSnapshots',
        'price' => 'getPrice',
        'cost' => 'getCost'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['zone_name'] = $data['zone_name'] ?? null;
        $this->container['zone_id'] = $data['zone_id'] ?? null;
        $this->container['zone_uuid'] = $data['zone_uuid'] ?? null;
        $this->container['zone_code'] = $data['zone_code'] ?? null;
        $this->container['start_date'] = $data['start_date'] ?? null;
        $this->container['end_date'] = $data['end_date'] ?? null;
        $this->container['price_unit'] = $data['price_unit'] ?? null;
        $this->container['compute_servers'] = $data['compute_servers'] ?? null;
        $this->container['instances'] = $data['instances'] ?? null;
        $this->container['discovered_servers'] = $data['discovered_servers'] ?? null;
        $this->container['load_balancers'] = $data['load_balancers'] ?? null;
        $this->container['virtual_images'] = $data['virtual_images'] ?? null;
        $this->container['snapshots'] = $data['snapshots'] ?? null;
        $this->container['price'] = $data['price'] ?? null;
        $this->container['cost'] = $data['cost'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets zone_name
     *
     * @return string|null
     */
    public function getZoneName()
    {
        return $this->container['zone_name'];
    }

    /**
     * Sets zone_name
     *
     * @param string|null $zone_name zone_name
     *
     * @return self
     */
    public function setZoneName($zone_name)
    {
        $this->container['zone_name'] = $zone_name;

        return $this;
    }

    /**
     * Gets zone_id
     *
     * @return int|null
     */
    public function getZoneId()
    {
        return $this->container['zone_id'];
    }

    /**
     * Sets zone_id
     *
     * @param int|null $zone_id zone_id
     *
     * @return self
     */
    public function setZoneId($zone_id)
    {
        $this->container['zone_id'] = $zone_id;

        return $this;
    }

    /**
     * Gets zone_uuid
     *
     * @return string|null
     */
    public function getZoneUuid()
    {
        return $this->container['zone_uuid'];
    }

    /**
     * Sets zone_uuid
     *
     * @param string|null $zone_uuid zone_uuid
     *
     * @return self
     */
    public function setZoneUuid($zone_uuid)
    {
        $this->container['zone_uuid'] = $zone_uuid;

        return $this;
    }

    /**
     * Gets zone_code
     *
     * @return string|null
     */
    public function getZoneCode()
    {
        return $this->container['zone_code'];
    }

    /**
     * Sets zone_code
     *
     * @param string|null $zone_code zone_code
     *
     * @return self
     */
    public function setZoneCode($zone_code)
    {
        $this->container['zone_code'] = $zone_code;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return \DateTime|null
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime|null $start_date start_date
     *
     * @return self
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime|null
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime|null $end_date end_date
     *
     * @return self
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets price_unit
     *
     * @return string|null
     */
    public function getPriceUnit()
    {
        return $this->container['price_unit'];
    }

    /**
     * Sets price_unit
     *
     * @param string|null $price_unit price_unit
     *
     * @return self
     */
    public function setPriceUnit($price_unit)
    {
        $this->container['price_unit'] = $price_unit;

        return $this;
    }

    /**
     * Gets compute_servers
     *
     * @return \OpenAPI\Client\Model\BillingComputeServers|null
     */
    public function getComputeServers()
    {
        return $this->container['compute_servers'];
    }

    /**
     * Sets compute_servers
     *
     * @param \OpenAPI\Client\Model\BillingComputeServers|null $compute_servers compute_servers
     *
     * @return self
     */
    public function setComputeServers($compute_servers)
    {
        $this->container['compute_servers'] = $compute_servers;

        return $this;
    }

    /**
     * Gets instances
     *
     * @return \OpenAPI\Client\Model\BillingInstances|null
     */
    public function getInstances()
    {
        return $this->container['instances'];
    }

    /**
     * Sets instances
     *
     * @param \OpenAPI\Client\Model\BillingInstances|null $instances instances
     *
     * @return self
     */
    public function setInstances($instances)
    {
        $this->container['instances'] = $instances;

        return $this;
    }

    /**
     * Gets discovered_servers
     *
     * @return \OpenAPI\Client\Model\BillingComputeServers|null
     */
    public function getDiscoveredServers()
    {
        return $this->container['discovered_servers'];
    }

    /**
     * Sets discovered_servers
     *
     * @param \OpenAPI\Client\Model\BillingComputeServers|null $discovered_servers discovered_servers
     *
     * @return self
     */
    public function setDiscoveredServers($discovered_servers)
    {
        $this->container['discovered_servers'] = $discovered_servers;

        return $this;
    }

    /**
     * Gets load_balancers
     *
     * @return \OpenAPI\Client\Model\BillingLoadBalancers|null
     */
    public function getLoadBalancers()
    {
        return $this->container['load_balancers'];
    }

    /**
     * Sets load_balancers
     *
     * @param \OpenAPI\Client\Model\BillingLoadBalancers|null $load_balancers load_balancers
     *
     * @return self
     */
    public function setLoadBalancers($load_balancers)
    {
        $this->container['load_balancers'] = $load_balancers;

        return $this;
    }

    /**
     * Gets virtual_images
     *
     * @return \OpenAPI\Client\Model\BillingVirtualImages|null
     */
    public function getVirtualImages()
    {
        return $this->container['virtual_images'];
    }

    /**
     * Sets virtual_images
     *
     * @param \OpenAPI\Client\Model\BillingVirtualImages|null $virtual_images virtual_images
     *
     * @return self
     */
    public function setVirtualImages($virtual_images)
    {
        $this->container['virtual_images'] = $virtual_images;

        return $this;
    }

    /**
     * Gets snapshots
     *
     * @return \OpenAPI\Client\Model\BillingSnapshots|null
     */
    public function getSnapshots()
    {
        return $this->container['snapshots'];
    }

    /**
     * Sets snapshots
     *
     * @param \OpenAPI\Client\Model\BillingSnapshots|null $snapshots snapshots
     *
     * @return self
     */
    public function setSnapshots($snapshots)
    {
        $this->container['snapshots'] = $snapshots;

        return $this;
    }

    /**
     * Gets price
     *
     * @return float|null
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param float|null $price price
     *
     * @return self
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets cost
     *
     * @return float|null
     */
    public function getCost()
    {
        return $this->container['cost'];
    }

    /**
     * Sets cost
     *
     * @param float|null $cost cost
     *
     * @return self
     */
    public function setCost($cost)
    {
        $this->container['cost'] = $cost;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


