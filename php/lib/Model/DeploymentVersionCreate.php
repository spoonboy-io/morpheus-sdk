<?php
/**
 * DeploymentVersionCreate
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DeploymentVersionCreate Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class DeploymentVersionCreate implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'deploymentVersionCreate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'version' => 'string',
        'user_version' => 'string',
        'deploy_type' => 'string',
        'git_url' => 'string',
        'git_ref' => 'string',
        'fetch_url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'version' => null,
        'user_version' => null,
        'deploy_type' => null,
        'git_url' => null,
        'git_ref' => null,
        'fetch_url' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'version' => 'version',
        'user_version' => 'userVersion',
        'deploy_type' => 'deployType',
        'git_url' => 'gitUrl',
        'git_ref' => 'gitRef',
        'fetch_url' => 'fetchUrl'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'version' => 'setVersion',
        'user_version' => 'setUserVersion',
        'deploy_type' => 'setDeployType',
        'git_url' => 'setGitUrl',
        'git_ref' => 'setGitRef',
        'fetch_url' => 'setFetchUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'version' => 'getVersion',
        'user_version' => 'getUserVersion',
        'deploy_type' => 'getDeployType',
        'git_url' => 'getGitUrl',
        'git_ref' => 'getGitRef',
        'fetch_url' => 'getFetchUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const DEPLOY_TYPE_FILE = 'file';
    const DEPLOY_TYPE_GIT = 'git';
    const DEPLOY_TYPE_FETCH = 'fetch';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDeployTypeAllowableValues()
    {
        return [
            self::DEPLOY_TYPE_FILE,
            self::DEPLOY_TYPE_GIT,
            self::DEPLOY_TYPE_FETCH,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['version'] = $data['version'] ?? null;
        $this->container['user_version'] = $data['user_version'] ?? null;
        $this->container['deploy_type'] = $data['deploy_type'] ?? null;
        $this->container['git_url'] = $data['git_url'] ?? null;
        $this->container['git_ref'] = $data['git_ref'] ?? null;
        $this->container['fetch_url'] = $data['fetch_url'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getDeployTypeAllowableValues();
        if (!is_null($this->container['deploy_type']) && !in_array($this->container['deploy_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'deploy_type', must be one of '%s'",
                $this->container['deploy_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets version
     *
     * @return string|null
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string|null $version Version number (userVersion), a unique version identifier for the deployment version.
     *
     * @return self
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets user_version
     *
     * @return string|null
     */
    public function getUserVersion()
    {
        return $this->container['user_version'];
    }

    /**
     * Sets user_version
     *
     * @param string|null $user_version Alias for version
     *
     * @return self
     */
    public function setUserVersion($user_version)
    {
        $this->container['user_version'] = $user_version;

        return $this;
    }

    /**
     * Gets deploy_type
     *
     * @return string|null
     */
    public function getDeployType()
    {
        return $this->container['deploy_type'];
    }

    /**
     * Sets deploy_type
     *
     * @param string|null $deploy_type Deploy Type, eg. file, git, fetch
     *
     * @return self
     */
    public function setDeployType($deploy_type)
    {
        $allowedValues = $this->getDeployTypeAllowableValues();
        if (!is_null($deploy_type) && !in_array($deploy_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'deploy_type', must be one of '%s'",
                    $deploy_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['deploy_type'] = $deploy_type;

        return $this;
    }

    /**
     * Gets git_url
     *
     * @return string|null
     */
    public function getGitUrl()
    {
        return $this->container['git_url'];
    }

    /**
     * Sets git_url
     *
     * @param string|null $git_url git_url
     *
     * @return self
     */
    public function setGitUrl($git_url)
    {
        $this->container['git_url'] = $git_url;

        return $this;
    }

    /**
     * Gets git_ref
     *
     * @return string|null
     */
    public function getGitRef()
    {
        return $this->container['git_ref'];
    }

    /**
     * Sets git_ref
     *
     * @param string|null $git_ref git_ref
     *
     * @return self
     */
    public function setGitRef($git_ref)
    {
        $this->container['git_ref'] = $git_ref;

        return $this;
    }

    /**
     * Gets fetch_url
     *
     * @return string|null
     */
    public function getFetchUrl()
    {
        return $this->container['fetch_url'];
    }

    /**
     * Sets fetch_url
     *
     * @param string|null $fetch_url fetch_url
     *
     * @return self
     */
    public function setFetchUrl($fetch_url)
    {
        $this->container['fetch_url'] = $fetch_url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


