<?php
/**
 * NetworkDomainCreate
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * NetworkDomainCreate Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class NetworkDomainCreate implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'networkDomainCreate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'description' => 'string',
        'display_name' => 'string',
        'public_zone' => 'bool',
        'task_set_id' => 'int',
        'active' => 'bool',
        'domain_controller' => 'bool',
        'domain_username' => 'string',
        'domain_password' => 'string',
        'dc_server' => 'string',
        'ou_path' => 'string',
        'guest_username' => 'string',
        'guest_password' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'description' => null,
        'display_name' => null,
        'public_zone' => null,
        'task_set_id' => 'int64',
        'active' => null,
        'domain_controller' => null,
        'domain_username' => null,
        'domain_password' => null,
        'dc_server' => null,
        'ou_path' => null,
        'guest_username' => null,
        'guest_password' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'description' => 'description',
        'display_name' => 'displayName',
        'public_zone' => 'publicZone',
        'task_set_id' => 'taskSetId',
        'active' => 'active',
        'domain_controller' => 'domainController',
        'domain_username' => 'domainUsername',
        'domain_password' => 'domainPassword',
        'dc_server' => 'dcServer',
        'ou_path' => 'ouPath',
        'guest_username' => 'guestUsername',
        'guest_password' => 'guestPassword'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'description' => 'setDescription',
        'display_name' => 'setDisplayName',
        'public_zone' => 'setPublicZone',
        'task_set_id' => 'setTaskSetId',
        'active' => 'setActive',
        'domain_controller' => 'setDomainController',
        'domain_username' => 'setDomainUsername',
        'domain_password' => 'setDomainPassword',
        'dc_server' => 'setDcServer',
        'ou_path' => 'setOuPath',
        'guest_username' => 'setGuestUsername',
        'guest_password' => 'setGuestPassword'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'description' => 'getDescription',
        'display_name' => 'getDisplayName',
        'public_zone' => 'getPublicZone',
        'task_set_id' => 'getTaskSetId',
        'active' => 'getActive',
        'domain_controller' => 'getDomainController',
        'domain_username' => 'getDomainUsername',
        'domain_password' => 'getDomainPassword',
        'dc_server' => 'getDcServer',
        'ou_path' => 'getOuPath',
        'guest_username' => 'getGuestUsername',
        'guest_password' => 'getGuestPassword'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['display_name'] = $data['display_name'] ?? null;
        $this->container['public_zone'] = $data['public_zone'] ?? false;
        $this->container['task_set_id'] = $data['task_set_id'] ?? null;
        $this->container['active'] = $data['active'] ?? null;
        $this->container['domain_controller'] = $data['domain_controller'] ?? true;
        $this->container['domain_username'] = $data['domain_username'] ?? null;
        $this->container['domain_password'] = $data['domain_password'] ?? null;
        $this->container['dc_server'] = $data['dc_server'] ?? null;
        $this->container['ou_path'] = $data['ou_path'] ?? null;
        $this->container['guest_username'] = $data['guest_username'] ?? null;
        $this->container['guest_password'] = $data['guest_password'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Description
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets display_name
     *
     * @return string|null
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string|null $display_name Overrides displayed name in domain selection components. Useful if using many OU Paths.
     *
     * @return self
     */
    public function setDisplayName($display_name)
    {
        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets public_zone
     *
     * @return bool|null
     */
    public function getPublicZone()
    {
        return $this->container['public_zone'];
    }

    /**
     * Sets public_zone
     *
     * @param bool|null $public_zone Public Zone
     *
     * @return self
     */
    public function setPublicZone($public_zone)
    {
        $this->container['public_zone'] = $public_zone;

        return $this;
    }

    /**
     * Gets task_set_id
     *
     * @return int|null
     */
    public function getTaskSetId()
    {
        return $this->container['task_set_id'];
    }

    /**
     * Sets task_set_id
     *
     * @param int|null $task_set_id Workflow ID. Workflows can be applied to an instance when associated with a domain. Useful for custom domain related scripting. (Important if wanting to ensure the computer is removed from the domain using teardown phased workflows.)
     *
     * @return self
     */
    public function setTaskSetId($task_set_id)
    {
        $this->container['task_set_id'] = $task_set_id;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool|null
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool|null $active Active
     *
     * @return self
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets domain_controller
     *
     * @return bool|null
     */
    public function getDomainController()
    {
        return $this->container['domain_controller'];
    }

    /**
     * Sets domain_controller
     *
     * @param bool|null $domain_controller Join Domain Controller
     *
     * @return self
     */
    public function setDomainController($domain_controller)
    {
        $this->container['domain_controller'] = $domain_controller;

        return $this;
    }

    /**
     * Gets domain_username
     *
     * @return string|null
     */
    public function getDomainUsername()
    {
        return $this->container['domain_username'];
    }

    /**
     * Sets domain_username
     *
     * @param string|null $domain_username Domain Username
     *
     * @return self
     */
    public function setDomainUsername($domain_username)
    {
        $this->container['domain_username'] = $domain_username;

        return $this;
    }

    /**
     * Gets domain_password
     *
     * @return string|null
     */
    public function getDomainPassword()
    {
        return $this->container['domain_password'];
    }

    /**
     * Sets domain_password
     *
     * @param string|null $domain_password Domain Password
     *
     * @return self
     */
    public function setDomainPassword($domain_password)
    {
        $this->container['domain_password'] = $domain_password;

        return $this;
    }

    /**
     * Gets dc_server
     *
     * @return string|null
     */
    public function getDcServer()
    {
        return $this->container['dc_server'];
    }

    /**
     * Sets dc_server
     *
     * @param string|null $dc_server DC Server. If specified, must be the server name and not an IP Address
     *
     * @return self
     */
    public function setDcServer($dc_server)
    {
        $this->container['dc_server'] = $dc_server;

        return $this;
    }

    /**
     * Gets ou_path
     *
     * @return string|null
     */
    public function getOuPath()
    {
        return $this->container['ou_path'];
    }

    /**
     * Sets ou_path
     *
     * @param string|null $ou_path OU Path. (i.e. 'OU=staging,DC=ad,DC=yourdomain,DC=com')
     *
     * @return self
     */
    public function setOuPath($ou_path)
    {
        $this->container['ou_path'] = $ou_path;

        return $this;
    }

    /**
     * Gets guest_username
     *
     * @return string|null
     */
    public function getGuestUsername()
    {
        return $this->container['guest_username'];
    }

    /**
     * Sets guest_username
     *
     * @param string|null $guest_username Guest Username. If set, will change the instances RPC Service User after joining a Domain.
     *
     * @return self
     */
    public function setGuestUsername($guest_username)
    {
        $this->container['guest_username'] = $guest_username;

        return $this;
    }

    /**
     * Gets guest_password
     *
     * @return string|null
     */
    public function getGuestPassword()
    {
        return $this->container['guest_password'];
    }

    /**
     * Sets guest_password
     *
     * @param string|null $guest_password Guest Password
     *
     * @return self
     */
    public function setGuestPassword($guest_password)
    {
        $this->container['guest_password'] = $guest_password;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


