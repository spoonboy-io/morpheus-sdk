<?php
/**
 * ZoneVcenterConfig
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ZoneVcenterConfig Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class ZoneVcenterConfig implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'zoneVcenterConfig';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'api_url' => 'string',
        'username' => 'string',
        'password' => 'string',
        'datacenter' => 'string',
        'cluster' => 'string',
        'resource_pool_id' => 'string',
        'resource_pool' => 'string',
        'rpc_mode' => 'string',
        '_hide_host_selection' => 'string',
        'hide_host_selection' => 'string',
        '_import_existing' => 'string',
        'import_existing' => 'string',
        '_enable_vnc' => 'string',
        'enable_vnc' => 'string',
        '_enable_disk_type_selection' => 'string',
        '_enable_network_type_selection' => 'string',
        'disk_storage_type' => 'string',
        'appliance_url' => 'string',
        'datacenter_name' => 'string',
        'network_server_id' => 'string',
        'network_server' => '\OpenAPI\Client\Model\ZoneVcenterConfigNetworkServer',
        'security_mode' => 'string',
        'certificate_provider' => 'string',
        'backup_mode' => 'string',
        'replication_mode' => 'string',
        'dns_integration_id' => 'string',
        'config_cmdb_id' => 'string',
        'config_management_id' => 'string',
        'config_cm_id' => 'string',
        'security_server' => 'string',
        'service_registry_id' => 'string',
        'enable_disk_type_selection' => 'string',
        'kube_url' => 'string',
        'api_version' => 'string',
        'datacenter_id' => 'string',
        'config_cmdb_discovery' => 'bool',
        'distributed_worker_id' => 'string',
        'password_hash' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'api_url' => null,
        'username' => null,
        'password' => null,
        'datacenter' => null,
        'cluster' => null,
        'resource_pool_id' => null,
        'resource_pool' => null,
        'rpc_mode' => null,
        '_hide_host_selection' => null,
        'hide_host_selection' => null,
        '_import_existing' => null,
        'import_existing' => null,
        '_enable_vnc' => null,
        'enable_vnc' => null,
        '_enable_disk_type_selection' => null,
        '_enable_network_type_selection' => null,
        'disk_storage_type' => null,
        'appliance_url' => null,
        'datacenter_name' => null,
        'network_server_id' => null,
        'network_server' => null,
        'security_mode' => null,
        'certificate_provider' => null,
        'backup_mode' => null,
        'replication_mode' => null,
        'dns_integration_id' => null,
        'config_cmdb_id' => null,
        'config_management_id' => null,
        'config_cm_id' => null,
        'security_server' => null,
        'service_registry_id' => null,
        'enable_disk_type_selection' => null,
        'kube_url' => null,
        'api_version' => null,
        'datacenter_id' => null,
        'config_cmdb_discovery' => null,
        'distributed_worker_id' => null,
        'password_hash' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'api_url' => 'apiUrl',
        'username' => 'username',
        'password' => 'password',
        'datacenter' => 'datacenter',
        'cluster' => 'cluster',
        'resource_pool_id' => 'resourcePoolId',
        'resource_pool' => 'resourcePool',
        'rpc_mode' => 'rpcMode',
        '_hide_host_selection' => '_hideHostSelection',
        'hide_host_selection' => 'hideHostSelection',
        '_import_existing' => '_importExisting',
        'import_existing' => 'importExisting',
        '_enable_vnc' => '_enableVnc',
        'enable_vnc' => 'enableVnc',
        '_enable_disk_type_selection' => '_enableDiskTypeSelection',
        '_enable_network_type_selection' => '_enableNetworkTypeSelection',
        'disk_storage_type' => 'diskStorageType',
        'appliance_url' => 'applianceUrl',
        'datacenter_name' => 'datacenterName',
        'network_server_id' => 'networkServer.id',
        'network_server' => 'networkServer',
        'security_mode' => 'securityMode',
        'certificate_provider' => 'certificateProvider',
        'backup_mode' => 'backupMode',
        'replication_mode' => 'replicationMode',
        'dns_integration_id' => 'dnsIntegrationId',
        'config_cmdb_id' => 'configCmdbId',
        'config_management_id' => 'configManagementId',
        'config_cm_id' => 'configCmId',
        'security_server' => 'securityServer',
        'service_registry_id' => 'serviceRegistryId',
        'enable_disk_type_selection' => 'enableDiskTypeSelection',
        'kube_url' => 'kubeUrl',
        'api_version' => 'apiVersion',
        'datacenter_id' => 'datacenterId',
        'config_cmdb_discovery' => 'configCmdbDiscovery',
        'distributed_worker_id' => 'distributedWorkerId',
        'password_hash' => 'passwordHash'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'api_url' => 'setApiUrl',
        'username' => 'setUsername',
        'password' => 'setPassword',
        'datacenter' => 'setDatacenter',
        'cluster' => 'setCluster',
        'resource_pool_id' => 'setResourcePoolId',
        'resource_pool' => 'setResourcePool',
        'rpc_mode' => 'setRpcMode',
        '_hide_host_selection' => 'setHideHostSelection',
        'hide_host_selection' => 'setHideHostSelection',
        '_import_existing' => 'setImportExisting',
        'import_existing' => 'setImportExisting',
        '_enable_vnc' => 'setEnableVnc',
        'enable_vnc' => 'setEnableVnc',
        '_enable_disk_type_selection' => 'setEnableDiskTypeSelection',
        '_enable_network_type_selection' => 'setEnableNetworkTypeSelection',
        'disk_storage_type' => 'setDiskStorageType',
        'appliance_url' => 'setApplianceUrl',
        'datacenter_name' => 'setDatacenterName',
        'network_server_id' => 'setNetworkServerId',
        'network_server' => 'setNetworkServer',
        'security_mode' => 'setSecurityMode',
        'certificate_provider' => 'setCertificateProvider',
        'backup_mode' => 'setBackupMode',
        'replication_mode' => 'setReplicationMode',
        'dns_integration_id' => 'setDnsIntegrationId',
        'config_cmdb_id' => 'setConfigCmdbId',
        'config_management_id' => 'setConfigManagementId',
        'config_cm_id' => 'setConfigCmId',
        'security_server' => 'setSecurityServer',
        'service_registry_id' => 'setServiceRegistryId',
        'enable_disk_type_selection' => 'setEnableDiskTypeSelection',
        'kube_url' => 'setKubeUrl',
        'api_version' => 'setApiVersion',
        'datacenter_id' => 'setDatacenterId',
        'config_cmdb_discovery' => 'setConfigCmdbDiscovery',
        'distributed_worker_id' => 'setDistributedWorkerId',
        'password_hash' => 'setPasswordHash'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'api_url' => 'getApiUrl',
        'username' => 'getUsername',
        'password' => 'getPassword',
        'datacenter' => 'getDatacenter',
        'cluster' => 'getCluster',
        'resource_pool_id' => 'getResourcePoolId',
        'resource_pool' => 'getResourcePool',
        'rpc_mode' => 'getRpcMode',
        '_hide_host_selection' => 'getHideHostSelection',
        'hide_host_selection' => 'getHideHostSelection',
        '_import_existing' => 'getImportExisting',
        'import_existing' => 'getImportExisting',
        '_enable_vnc' => 'getEnableVnc',
        'enable_vnc' => 'getEnableVnc',
        '_enable_disk_type_selection' => 'getEnableDiskTypeSelection',
        '_enable_network_type_selection' => 'getEnableNetworkTypeSelection',
        'disk_storage_type' => 'getDiskStorageType',
        'appliance_url' => 'getApplianceUrl',
        'datacenter_name' => 'getDatacenterName',
        'network_server_id' => 'getNetworkServerId',
        'network_server' => 'getNetworkServer',
        'security_mode' => 'getSecurityMode',
        'certificate_provider' => 'getCertificateProvider',
        'backup_mode' => 'getBackupMode',
        'replication_mode' => 'getReplicationMode',
        'dns_integration_id' => 'getDnsIntegrationId',
        'config_cmdb_id' => 'getConfigCmdbId',
        'config_management_id' => 'getConfigManagementId',
        'config_cm_id' => 'getConfigCmId',
        'security_server' => 'getSecurityServer',
        'service_registry_id' => 'getServiceRegistryId',
        'enable_disk_type_selection' => 'getEnableDiskTypeSelection',
        'kube_url' => 'getKubeUrl',
        'api_version' => 'getApiVersion',
        'datacenter_id' => 'getDatacenterId',
        'config_cmdb_discovery' => 'getConfigCmdbDiscovery',
        'distributed_worker_id' => 'getDistributedWorkerId',
        'password_hash' => 'getPasswordHash'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['api_url'] = $data['api_url'] ?? null;
        $this->container['username'] = $data['username'] ?? null;
        $this->container['password'] = $data['password'] ?? null;
        $this->container['datacenter'] = $data['datacenter'] ?? null;
        $this->container['cluster'] = $data['cluster'] ?? null;
        $this->container['resource_pool_id'] = $data['resource_pool_id'] ?? null;
        $this->container['resource_pool'] = $data['resource_pool'] ?? null;
        $this->container['rpc_mode'] = $data['rpc_mode'] ?? null;
        $this->container['_hide_host_selection'] = $data['_hide_host_selection'] ?? null;
        $this->container['hide_host_selection'] = $data['hide_host_selection'] ?? null;
        $this->container['_import_existing'] = $data['_import_existing'] ?? null;
        $this->container['import_existing'] = $data['import_existing'] ?? null;
        $this->container['_enable_vnc'] = $data['_enable_vnc'] ?? null;
        $this->container['enable_vnc'] = $data['enable_vnc'] ?? null;
        $this->container['_enable_disk_type_selection'] = $data['_enable_disk_type_selection'] ?? null;
        $this->container['_enable_network_type_selection'] = $data['_enable_network_type_selection'] ?? null;
        $this->container['disk_storage_type'] = $data['disk_storage_type'] ?? null;
        $this->container['appliance_url'] = $data['appliance_url'] ?? null;
        $this->container['datacenter_name'] = $data['datacenter_name'] ?? null;
        $this->container['network_server_id'] = $data['network_server_id'] ?? null;
        $this->container['network_server'] = $data['network_server'] ?? null;
        $this->container['security_mode'] = $data['security_mode'] ?? null;
        $this->container['certificate_provider'] = $data['certificate_provider'] ?? null;
        $this->container['backup_mode'] = $data['backup_mode'] ?? null;
        $this->container['replication_mode'] = $data['replication_mode'] ?? null;
        $this->container['dns_integration_id'] = $data['dns_integration_id'] ?? null;
        $this->container['config_cmdb_id'] = $data['config_cmdb_id'] ?? null;
        $this->container['config_management_id'] = $data['config_management_id'] ?? null;
        $this->container['config_cm_id'] = $data['config_cm_id'] ?? null;
        $this->container['security_server'] = $data['security_server'] ?? null;
        $this->container['service_registry_id'] = $data['service_registry_id'] ?? null;
        $this->container['enable_disk_type_selection'] = $data['enable_disk_type_selection'] ?? null;
        $this->container['kube_url'] = $data['kube_url'] ?? null;
        $this->container['api_version'] = $data['api_version'] ?? null;
        $this->container['datacenter_id'] = $data['datacenter_id'] ?? null;
        $this->container['config_cmdb_discovery'] = $data['config_cmdb_discovery'] ?? null;
        $this->container['distributed_worker_id'] = $data['distributed_worker_id'] ?? null;
        $this->container['password_hash'] = $data['password_hash'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets api_url
     *
     * @return string|null
     */
    public function getApiUrl()
    {
        return $this->container['api_url'];
    }

    /**
     * Sets api_url
     *
     * @param string|null $api_url api_url
     *
     * @return self
     */
    public function setApiUrl($api_url)
    {
        $this->container['api_url'] = $api_url;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string|null
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string|null $username username
     *
     * @return self
     */
    public function setUsername($username)
    {
        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string|null
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string|null $password password
     *
     * @return self
     */
    public function setPassword($password)
    {
        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets datacenter
     *
     * @return string|null
     */
    public function getDatacenter()
    {
        return $this->container['datacenter'];
    }

    /**
     * Sets datacenter
     *
     * @param string|null $datacenter datacenter
     *
     * @return self
     */
    public function setDatacenter($datacenter)
    {
        $this->container['datacenter'] = $datacenter;

        return $this;
    }

    /**
     * Gets cluster
     *
     * @return string|null
     */
    public function getCluster()
    {
        return $this->container['cluster'];
    }

    /**
     * Sets cluster
     *
     * @param string|null $cluster cluster
     *
     * @return self
     */
    public function setCluster($cluster)
    {
        $this->container['cluster'] = $cluster;

        return $this;
    }

    /**
     * Gets resource_pool_id
     *
     * @return string|null
     */
    public function getResourcePoolId()
    {
        return $this->container['resource_pool_id'];
    }

    /**
     * Sets resource_pool_id
     *
     * @param string|null $resource_pool_id resource_pool_id
     *
     * @return self
     */
    public function setResourcePoolId($resource_pool_id)
    {
        $this->container['resource_pool_id'] = $resource_pool_id;

        return $this;
    }

    /**
     * Gets resource_pool
     *
     * @return string|null
     */
    public function getResourcePool()
    {
        return $this->container['resource_pool'];
    }

    /**
     * Sets resource_pool
     *
     * @param string|null $resource_pool resource_pool
     *
     * @return self
     */
    public function setResourcePool($resource_pool)
    {
        $this->container['resource_pool'] = $resource_pool;

        return $this;
    }

    /**
     * Gets rpc_mode
     *
     * @return string|null
     */
    public function getRpcMode()
    {
        return $this->container['rpc_mode'];
    }

    /**
     * Sets rpc_mode
     *
     * @param string|null $rpc_mode rpc_mode
     *
     * @return self
     */
    public function setRpcMode($rpc_mode)
    {
        $this->container['rpc_mode'] = $rpc_mode;

        return $this;
    }

    /**
     * Gets _hide_host_selection
     *
     * @return string|null
     */
    public function getHideHostSelection()
    {
        return $this->container['_hide_host_selection'];
    }

    /**
     * Sets _hide_host_selection
     *
     * @param string|null $_hide_host_selection _hide_host_selection
     *
     * @return self
     */
    public function setHideHostSelection($_hide_host_selection)
    {
        $this->container['_hide_host_selection'] = $_hide_host_selection;

        return $this;
    }

    /**
     * Gets hide_host_selection
     *
     * @return string|null
     */
    public function getHideHostSelection()
    {
        return $this->container['hide_host_selection'];
    }

    /**
     * Sets hide_host_selection
     *
     * @param string|null $hide_host_selection hide_host_selection
     *
     * @return self
     */
    public function setHideHostSelection($hide_host_selection)
    {
        $this->container['hide_host_selection'] = $hide_host_selection;

        return $this;
    }

    /**
     * Gets _import_existing
     *
     * @return string|null
     */
    public function getImportExisting()
    {
        return $this->container['_import_existing'];
    }

    /**
     * Sets _import_existing
     *
     * @param string|null $_import_existing _import_existing
     *
     * @return self
     */
    public function setImportExisting($_import_existing)
    {
        $this->container['_import_existing'] = $_import_existing;

        return $this;
    }

    /**
     * Gets import_existing
     *
     * @return string|null
     */
    public function getImportExisting()
    {
        return $this->container['import_existing'];
    }

    /**
     * Sets import_existing
     *
     * @param string|null $import_existing import_existing
     *
     * @return self
     */
    public function setImportExisting($import_existing)
    {
        $this->container['import_existing'] = $import_existing;

        return $this;
    }

    /**
     * Gets _enable_vnc
     *
     * @return string|null
     */
    public function getEnableVnc()
    {
        return $this->container['_enable_vnc'];
    }

    /**
     * Sets _enable_vnc
     *
     * @param string|null $_enable_vnc _enable_vnc
     *
     * @return self
     */
    public function setEnableVnc($_enable_vnc)
    {
        $this->container['_enable_vnc'] = $_enable_vnc;

        return $this;
    }

    /**
     * Gets enable_vnc
     *
     * @return string|null
     */
    public function getEnableVnc()
    {
        return $this->container['enable_vnc'];
    }

    /**
     * Sets enable_vnc
     *
     * @param string|null $enable_vnc enable_vnc
     *
     * @return self
     */
    public function setEnableVnc($enable_vnc)
    {
        $this->container['enable_vnc'] = $enable_vnc;

        return $this;
    }

    /**
     * Gets _enable_disk_type_selection
     *
     * @return string|null
     */
    public function getEnableDiskTypeSelection()
    {
        return $this->container['_enable_disk_type_selection'];
    }

    /**
     * Sets _enable_disk_type_selection
     *
     * @param string|null $_enable_disk_type_selection _enable_disk_type_selection
     *
     * @return self
     */
    public function setEnableDiskTypeSelection($_enable_disk_type_selection)
    {
        $this->container['_enable_disk_type_selection'] = $_enable_disk_type_selection;

        return $this;
    }

    /**
     * Gets _enable_network_type_selection
     *
     * @return string|null
     */
    public function getEnableNetworkTypeSelection()
    {
        return $this->container['_enable_network_type_selection'];
    }

    /**
     * Sets _enable_network_type_selection
     *
     * @param string|null $_enable_network_type_selection _enable_network_type_selection
     *
     * @return self
     */
    public function setEnableNetworkTypeSelection($_enable_network_type_selection)
    {
        $this->container['_enable_network_type_selection'] = $_enable_network_type_selection;

        return $this;
    }

    /**
     * Gets disk_storage_type
     *
     * @return string|null
     */
    public function getDiskStorageType()
    {
        return $this->container['disk_storage_type'];
    }

    /**
     * Sets disk_storage_type
     *
     * @param string|null $disk_storage_type disk_storage_type
     *
     * @return self
     */
    public function setDiskStorageType($disk_storage_type)
    {
        $this->container['disk_storage_type'] = $disk_storage_type;

        return $this;
    }

    /**
     * Gets appliance_url
     *
     * @return string|null
     */
    public function getApplianceUrl()
    {
        return $this->container['appliance_url'];
    }

    /**
     * Sets appliance_url
     *
     * @param string|null $appliance_url appliance_url
     *
     * @return self
     */
    public function setApplianceUrl($appliance_url)
    {
        $this->container['appliance_url'] = $appliance_url;

        return $this;
    }

    /**
     * Gets datacenter_name
     *
     * @return string|null
     */
    public function getDatacenterName()
    {
        return $this->container['datacenter_name'];
    }

    /**
     * Sets datacenter_name
     *
     * @param string|null $datacenter_name datacenter_name
     *
     * @return self
     */
    public function setDatacenterName($datacenter_name)
    {
        $this->container['datacenter_name'] = $datacenter_name;

        return $this;
    }

    /**
     * Gets network_server_id
     *
     * @return string|null
     */
    public function getNetworkServerId()
    {
        return $this->container['network_server_id'];
    }

    /**
     * Sets network_server_id
     *
     * @param string|null $network_server_id network_server_id
     *
     * @return self
     */
    public function setNetworkServerId($network_server_id)
    {
        $this->container['network_server_id'] = $network_server_id;

        return $this;
    }

    /**
     * Gets network_server
     *
     * @return \OpenAPI\Client\Model\ZoneVcenterConfigNetworkServer|null
     */
    public function getNetworkServer()
    {
        return $this->container['network_server'];
    }

    /**
     * Sets network_server
     *
     * @param \OpenAPI\Client\Model\ZoneVcenterConfigNetworkServer|null $network_server network_server
     *
     * @return self
     */
    public function setNetworkServer($network_server)
    {
        $this->container['network_server'] = $network_server;

        return $this;
    }

    /**
     * Gets security_mode
     *
     * @return string|null
     */
    public function getSecurityMode()
    {
        return $this->container['security_mode'];
    }

    /**
     * Sets security_mode
     *
     * @param string|null $security_mode security_mode
     *
     * @return self
     */
    public function setSecurityMode($security_mode)
    {
        $this->container['security_mode'] = $security_mode;

        return $this;
    }

    /**
     * Gets certificate_provider
     *
     * @return string|null
     */
    public function getCertificateProvider()
    {
        return $this->container['certificate_provider'];
    }

    /**
     * Sets certificate_provider
     *
     * @param string|null $certificate_provider certificate_provider
     *
     * @return self
     */
    public function setCertificateProvider($certificate_provider)
    {
        $this->container['certificate_provider'] = $certificate_provider;

        return $this;
    }

    /**
     * Gets backup_mode
     *
     * @return string|null
     */
    public function getBackupMode()
    {
        return $this->container['backup_mode'];
    }

    /**
     * Sets backup_mode
     *
     * @param string|null $backup_mode backup_mode
     *
     * @return self
     */
    public function setBackupMode($backup_mode)
    {
        $this->container['backup_mode'] = $backup_mode;

        return $this;
    }

    /**
     * Gets replication_mode
     *
     * @return string|null
     */
    public function getReplicationMode()
    {
        return $this->container['replication_mode'];
    }

    /**
     * Sets replication_mode
     *
     * @param string|null $replication_mode replication_mode
     *
     * @return self
     */
    public function setReplicationMode($replication_mode)
    {
        $this->container['replication_mode'] = $replication_mode;

        return $this;
    }

    /**
     * Gets dns_integration_id
     *
     * @return string|null
     */
    public function getDnsIntegrationId()
    {
        return $this->container['dns_integration_id'];
    }

    /**
     * Sets dns_integration_id
     *
     * @param string|null $dns_integration_id dns_integration_id
     *
     * @return self
     */
    public function setDnsIntegrationId($dns_integration_id)
    {
        $this->container['dns_integration_id'] = $dns_integration_id;

        return $this;
    }

    /**
     * Gets config_cmdb_id
     *
     * @return string|null
     */
    public function getConfigCmdbId()
    {
        return $this->container['config_cmdb_id'];
    }

    /**
     * Sets config_cmdb_id
     *
     * @param string|null $config_cmdb_id config_cmdb_id
     *
     * @return self
     */
    public function setConfigCmdbId($config_cmdb_id)
    {
        $this->container['config_cmdb_id'] = $config_cmdb_id;

        return $this;
    }

    /**
     * Gets config_management_id
     *
     * @return string|null
     */
    public function getConfigManagementId()
    {
        return $this->container['config_management_id'];
    }

    /**
     * Sets config_management_id
     *
     * @param string|null $config_management_id config_management_id
     *
     * @return self
     */
    public function setConfigManagementId($config_management_id)
    {
        $this->container['config_management_id'] = $config_management_id;

        return $this;
    }

    /**
     * Gets config_cm_id
     *
     * @return string|null
     */
    public function getConfigCmId()
    {
        return $this->container['config_cm_id'];
    }

    /**
     * Sets config_cm_id
     *
     * @param string|null $config_cm_id config_cm_id
     *
     * @return self
     */
    public function setConfigCmId($config_cm_id)
    {
        $this->container['config_cm_id'] = $config_cm_id;

        return $this;
    }

    /**
     * Gets security_server
     *
     * @return string|null
     */
    public function getSecurityServer()
    {
        return $this->container['security_server'];
    }

    /**
     * Sets security_server
     *
     * @param string|null $security_server security_server
     *
     * @return self
     */
    public function setSecurityServer($security_server)
    {
        $this->container['security_server'] = $security_server;

        return $this;
    }

    /**
     * Gets service_registry_id
     *
     * @return string|null
     */
    public function getServiceRegistryId()
    {
        return $this->container['service_registry_id'];
    }

    /**
     * Sets service_registry_id
     *
     * @param string|null $service_registry_id service_registry_id
     *
     * @return self
     */
    public function setServiceRegistryId($service_registry_id)
    {
        $this->container['service_registry_id'] = $service_registry_id;

        return $this;
    }

    /**
     * Gets enable_disk_type_selection
     *
     * @return string|null
     */
    public function getEnableDiskTypeSelection()
    {
        return $this->container['enable_disk_type_selection'];
    }

    /**
     * Sets enable_disk_type_selection
     *
     * @param string|null $enable_disk_type_selection enable_disk_type_selection
     *
     * @return self
     */
    public function setEnableDiskTypeSelection($enable_disk_type_selection)
    {
        $this->container['enable_disk_type_selection'] = $enable_disk_type_selection;

        return $this;
    }

    /**
     * Gets kube_url
     *
     * @return string|null
     */
    public function getKubeUrl()
    {
        return $this->container['kube_url'];
    }

    /**
     * Sets kube_url
     *
     * @param string|null $kube_url kube_url
     *
     * @return self
     */
    public function setKubeUrl($kube_url)
    {
        $this->container['kube_url'] = $kube_url;

        return $this;
    }

    /**
     * Gets api_version
     *
     * @return string|null
     */
    public function getApiVersion()
    {
        return $this->container['api_version'];
    }

    /**
     * Sets api_version
     *
     * @param string|null $api_version api_version
     *
     * @return self
     */
    public function setApiVersion($api_version)
    {
        $this->container['api_version'] = $api_version;

        return $this;
    }

    /**
     * Gets datacenter_id
     *
     * @return string|null
     */
    public function getDatacenterId()
    {
        return $this->container['datacenter_id'];
    }

    /**
     * Sets datacenter_id
     *
     * @param string|null $datacenter_id datacenter_id
     *
     * @return self
     */
    public function setDatacenterId($datacenter_id)
    {
        $this->container['datacenter_id'] = $datacenter_id;

        return $this;
    }

    /**
     * Gets config_cmdb_discovery
     *
     * @return bool|null
     */
    public function getConfigCmdbDiscovery()
    {
        return $this->container['config_cmdb_discovery'];
    }

    /**
     * Sets config_cmdb_discovery
     *
     * @param bool|null $config_cmdb_discovery config_cmdb_discovery
     *
     * @return self
     */
    public function setConfigCmdbDiscovery($config_cmdb_discovery)
    {
        $this->container['config_cmdb_discovery'] = $config_cmdb_discovery;

        return $this;
    }

    /**
     * Gets distributed_worker_id
     *
     * @return string|null
     */
    public function getDistributedWorkerId()
    {
        return $this->container['distributed_worker_id'];
    }

    /**
     * Sets distributed_worker_id
     *
     * @param string|null $distributed_worker_id distributed_worker_id
     *
     * @return self
     */
    public function setDistributedWorkerId($distributed_worker_id)
    {
        $this->container['distributed_worker_id'] = $distributed_worker_id;

        return $this;
    }

    /**
     * Gets password_hash
     *
     * @return string|null
     */
    public function getPasswordHash()
    {
        return $this->container['password_hash'];
    }

    /**
     * Sets password_hash
     *
     * @param string|null $password_hash password_hash
     *
     * @return self
     */
    public function setPasswordHash($password_hash)
    {
        $this->container['password_hash'] = $password_hash;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


