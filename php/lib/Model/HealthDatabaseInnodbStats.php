<?php
/**
 * HealthDatabaseInnodbStats
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * HealthDatabaseInnodbStats Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class HealthDatabaseInnodbStats implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'health_database_innodbStats';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'large_memory' => 'int',
        'dictionary_memory' => 'int',
        'buffer_pool_size' => 'int',
        'free_buffers' => 'int',
        'database_pages' => 'int',
        'old_pages' => 'int',
        'pending_reads' => 'int',
        'inserts_per_second' => 'float',
        'updates_per_second' => 'float',
        'deletes_per_second' => 'float',
        'reads_per_second' => 'float',
        'buffer_hit_rate' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'large_memory' => 'int64',
        'dictionary_memory' => 'int64',
        'buffer_pool_size' => 'int64',
        'free_buffers' => 'int64',
        'database_pages' => 'int64',
        'old_pages' => 'int64',
        'pending_reads' => 'int64',
        'inserts_per_second' => null,
        'updates_per_second' => null,
        'deletes_per_second' => null,
        'reads_per_second' => null,
        'buffer_hit_rate' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'large_memory' => 'largeMemory',
        'dictionary_memory' => 'dictionaryMemory',
        'buffer_pool_size' => 'bufferPoolSize',
        'free_buffers' => 'freeBuffers',
        'database_pages' => 'databasePages',
        'old_pages' => 'oldPages',
        'pending_reads' => 'pendingReads',
        'inserts_per_second' => 'insertsPerSecond',
        'updates_per_second' => 'updatesPerSecond',
        'deletes_per_second' => 'deletesPerSecond',
        'reads_per_second' => 'readsPerSecond',
        'buffer_hit_rate' => 'bufferHitRate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'large_memory' => 'setLargeMemory',
        'dictionary_memory' => 'setDictionaryMemory',
        'buffer_pool_size' => 'setBufferPoolSize',
        'free_buffers' => 'setFreeBuffers',
        'database_pages' => 'setDatabasePages',
        'old_pages' => 'setOldPages',
        'pending_reads' => 'setPendingReads',
        'inserts_per_second' => 'setInsertsPerSecond',
        'updates_per_second' => 'setUpdatesPerSecond',
        'deletes_per_second' => 'setDeletesPerSecond',
        'reads_per_second' => 'setReadsPerSecond',
        'buffer_hit_rate' => 'setBufferHitRate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'large_memory' => 'getLargeMemory',
        'dictionary_memory' => 'getDictionaryMemory',
        'buffer_pool_size' => 'getBufferPoolSize',
        'free_buffers' => 'getFreeBuffers',
        'database_pages' => 'getDatabasePages',
        'old_pages' => 'getOldPages',
        'pending_reads' => 'getPendingReads',
        'inserts_per_second' => 'getInsertsPerSecond',
        'updates_per_second' => 'getUpdatesPerSecond',
        'deletes_per_second' => 'getDeletesPerSecond',
        'reads_per_second' => 'getReadsPerSecond',
        'buffer_hit_rate' => 'getBufferHitRate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['large_memory'] = $data['large_memory'] ?? null;
        $this->container['dictionary_memory'] = $data['dictionary_memory'] ?? null;
        $this->container['buffer_pool_size'] = $data['buffer_pool_size'] ?? null;
        $this->container['free_buffers'] = $data['free_buffers'] ?? null;
        $this->container['database_pages'] = $data['database_pages'] ?? null;
        $this->container['old_pages'] = $data['old_pages'] ?? null;
        $this->container['pending_reads'] = $data['pending_reads'] ?? null;
        $this->container['inserts_per_second'] = $data['inserts_per_second'] ?? null;
        $this->container['updates_per_second'] = $data['updates_per_second'] ?? null;
        $this->container['deletes_per_second'] = $data['deletes_per_second'] ?? null;
        $this->container['reads_per_second'] = $data['reads_per_second'] ?? null;
        $this->container['buffer_hit_rate'] = $data['buffer_hit_rate'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets large_memory
     *
     * @return int|null
     */
    public function getLargeMemory()
    {
        return $this->container['large_memory'];
    }

    /**
     * Sets large_memory
     *
     * @param int|null $large_memory large_memory
     *
     * @return self
     */
    public function setLargeMemory($large_memory)
    {
        $this->container['large_memory'] = $large_memory;

        return $this;
    }

    /**
     * Gets dictionary_memory
     *
     * @return int|null
     */
    public function getDictionaryMemory()
    {
        return $this->container['dictionary_memory'];
    }

    /**
     * Sets dictionary_memory
     *
     * @param int|null $dictionary_memory dictionary_memory
     *
     * @return self
     */
    public function setDictionaryMemory($dictionary_memory)
    {
        $this->container['dictionary_memory'] = $dictionary_memory;

        return $this;
    }

    /**
     * Gets buffer_pool_size
     *
     * @return int|null
     */
    public function getBufferPoolSize()
    {
        return $this->container['buffer_pool_size'];
    }

    /**
     * Sets buffer_pool_size
     *
     * @param int|null $buffer_pool_size buffer_pool_size
     *
     * @return self
     */
    public function setBufferPoolSize($buffer_pool_size)
    {
        $this->container['buffer_pool_size'] = $buffer_pool_size;

        return $this;
    }

    /**
     * Gets free_buffers
     *
     * @return int|null
     */
    public function getFreeBuffers()
    {
        return $this->container['free_buffers'];
    }

    /**
     * Sets free_buffers
     *
     * @param int|null $free_buffers free_buffers
     *
     * @return self
     */
    public function setFreeBuffers($free_buffers)
    {
        $this->container['free_buffers'] = $free_buffers;

        return $this;
    }

    /**
     * Gets database_pages
     *
     * @return int|null
     */
    public function getDatabasePages()
    {
        return $this->container['database_pages'];
    }

    /**
     * Sets database_pages
     *
     * @param int|null $database_pages database_pages
     *
     * @return self
     */
    public function setDatabasePages($database_pages)
    {
        $this->container['database_pages'] = $database_pages;

        return $this;
    }

    /**
     * Gets old_pages
     *
     * @return int|null
     */
    public function getOldPages()
    {
        return $this->container['old_pages'];
    }

    /**
     * Sets old_pages
     *
     * @param int|null $old_pages old_pages
     *
     * @return self
     */
    public function setOldPages($old_pages)
    {
        $this->container['old_pages'] = $old_pages;

        return $this;
    }

    /**
     * Gets pending_reads
     *
     * @return int|null
     */
    public function getPendingReads()
    {
        return $this->container['pending_reads'];
    }

    /**
     * Sets pending_reads
     *
     * @param int|null $pending_reads pending_reads
     *
     * @return self
     */
    public function setPendingReads($pending_reads)
    {
        $this->container['pending_reads'] = $pending_reads;

        return $this;
    }

    /**
     * Gets inserts_per_second
     *
     * @return float|null
     */
    public function getInsertsPerSecond()
    {
        return $this->container['inserts_per_second'];
    }

    /**
     * Sets inserts_per_second
     *
     * @param float|null $inserts_per_second inserts_per_second
     *
     * @return self
     */
    public function setInsertsPerSecond($inserts_per_second)
    {
        $this->container['inserts_per_second'] = $inserts_per_second;

        return $this;
    }

    /**
     * Gets updates_per_second
     *
     * @return float|null
     */
    public function getUpdatesPerSecond()
    {
        return $this->container['updates_per_second'];
    }

    /**
     * Sets updates_per_second
     *
     * @param float|null $updates_per_second updates_per_second
     *
     * @return self
     */
    public function setUpdatesPerSecond($updates_per_second)
    {
        $this->container['updates_per_second'] = $updates_per_second;

        return $this;
    }

    /**
     * Gets deletes_per_second
     *
     * @return float|null
     */
    public function getDeletesPerSecond()
    {
        return $this->container['deletes_per_second'];
    }

    /**
     * Sets deletes_per_second
     *
     * @param float|null $deletes_per_second deletes_per_second
     *
     * @return self
     */
    public function setDeletesPerSecond($deletes_per_second)
    {
        $this->container['deletes_per_second'] = $deletes_per_second;

        return $this;
    }

    /**
     * Gets reads_per_second
     *
     * @return float|null
     */
    public function getReadsPerSecond()
    {
        return $this->container['reads_per_second'];
    }

    /**
     * Sets reads_per_second
     *
     * @param float|null $reads_per_second reads_per_second
     *
     * @return self
     */
    public function setReadsPerSecond($reads_per_second)
    {
        $this->container['reads_per_second'] = $reads_per_second;

        return $this;
    }

    /**
     * Gets buffer_hit_rate
     *
     * @return int|null
     */
    public function getBufferHitRate()
    {
        return $this->container['buffer_hit_rate'];
    }

    /**
     * Sets buffer_hit_rate
     *
     * @param int|null $buffer_hit_rate buffer_hit_rate
     *
     * @return self
     */
    public function setBufferHitRate($buffer_hit_rate)
    {
        $this->container['buffer_hit_rate'] = $buffer_hit_rate;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


