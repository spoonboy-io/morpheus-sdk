<?php
/**
 * InlineResponse200107NetworkPool
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * InlineResponse200107NetworkPool Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineResponse200107NetworkPool implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_response_200_107_networkPool';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'network_pool_id' => 'int',
        'ip_type' => 'string',
        'ip_address' => 'string',
        'gateway_address' => 'string',
        'subnet_mask' => 'string',
        'dns_server' => 'string',
        'interface_name' => 'string',
        'description' => 'string',
        'active' => 'bool',
        'static_ip' => 'bool',
        'fqdn' => 'string',
        'domain_name' => 'string',
        'hostname' => 'string',
        'internal_id' => 'string',
        'external_id' => 'string',
        'ptr_id' => 'string',
        'date_created' => '\DateTime',
        'last_updated' => '\DateTime',
        'start_date' => '\DateTime',
        'end_date' => '\DateTime',
        'ref_type' => 'string',
        'ref_id' => 'string',
        'sub_ref_id' => 'string',
        'network_domain' => 'string',
        'created_by' => '\OpenAPI\Client\Model\InlineResponse200107NetworkPoolCreatedBy'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'network_pool_id' => 'int64',
        'ip_type' => null,
        'ip_address' => null,
        'gateway_address' => null,
        'subnet_mask' => null,
        'dns_server' => null,
        'interface_name' => null,
        'description' => null,
        'active' => null,
        'static_ip' => null,
        'fqdn' => null,
        'domain_name' => null,
        'hostname' => null,
        'internal_id' => null,
        'external_id' => null,
        'ptr_id' => null,
        'date_created' => 'date-time',
        'last_updated' => 'date-time',
        'start_date' => 'date-time',
        'end_date' => 'date-time',
        'ref_type' => null,
        'ref_id' => null,
        'sub_ref_id' => null,
        'network_domain' => null,
        'created_by' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'network_pool_id' => 'networkPoolId',
        'ip_type' => 'ipType',
        'ip_address' => 'ipAddress',
        'gateway_address' => 'gatewayAddress',
        'subnet_mask' => 'subnetMask',
        'dns_server' => 'dnsServer',
        'interface_name' => 'interfaceName',
        'description' => 'description',
        'active' => 'active',
        'static_ip' => 'staticIp',
        'fqdn' => 'fqdn',
        'domain_name' => 'domainName',
        'hostname' => 'hostname',
        'internal_id' => 'internalId',
        'external_id' => 'externalId',
        'ptr_id' => 'ptrId',
        'date_created' => 'dateCreated',
        'last_updated' => 'lastUpdated',
        'start_date' => 'startDate',
        'end_date' => 'endDate',
        'ref_type' => 'refType',
        'ref_id' => 'refId',
        'sub_ref_id' => 'subRefId',
        'network_domain' => 'networkDomain',
        'created_by' => 'createdBy'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'network_pool_id' => 'setNetworkPoolId',
        'ip_type' => 'setIpType',
        'ip_address' => 'setIpAddress',
        'gateway_address' => 'setGatewayAddress',
        'subnet_mask' => 'setSubnetMask',
        'dns_server' => 'setDnsServer',
        'interface_name' => 'setInterfaceName',
        'description' => 'setDescription',
        'active' => 'setActive',
        'static_ip' => 'setStaticIp',
        'fqdn' => 'setFqdn',
        'domain_name' => 'setDomainName',
        'hostname' => 'setHostname',
        'internal_id' => 'setInternalId',
        'external_id' => 'setExternalId',
        'ptr_id' => 'setPtrId',
        'date_created' => 'setDateCreated',
        'last_updated' => 'setLastUpdated',
        'start_date' => 'setStartDate',
        'end_date' => 'setEndDate',
        'ref_type' => 'setRefType',
        'ref_id' => 'setRefId',
        'sub_ref_id' => 'setSubRefId',
        'network_domain' => 'setNetworkDomain',
        'created_by' => 'setCreatedBy'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'network_pool_id' => 'getNetworkPoolId',
        'ip_type' => 'getIpType',
        'ip_address' => 'getIpAddress',
        'gateway_address' => 'getGatewayAddress',
        'subnet_mask' => 'getSubnetMask',
        'dns_server' => 'getDnsServer',
        'interface_name' => 'getInterfaceName',
        'description' => 'getDescription',
        'active' => 'getActive',
        'static_ip' => 'getStaticIp',
        'fqdn' => 'getFqdn',
        'domain_name' => 'getDomainName',
        'hostname' => 'getHostname',
        'internal_id' => 'getInternalId',
        'external_id' => 'getExternalId',
        'ptr_id' => 'getPtrId',
        'date_created' => 'getDateCreated',
        'last_updated' => 'getLastUpdated',
        'start_date' => 'getStartDate',
        'end_date' => 'getEndDate',
        'ref_type' => 'getRefType',
        'ref_id' => 'getRefId',
        'sub_ref_id' => 'getSubRefId',
        'network_domain' => 'getNetworkDomain',
        'created_by' => 'getCreatedBy'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['network_pool_id'] = $data['network_pool_id'] ?? null;
        $this->container['ip_type'] = $data['ip_type'] ?? null;
        $this->container['ip_address'] = $data['ip_address'] ?? null;
        $this->container['gateway_address'] = $data['gateway_address'] ?? null;
        $this->container['subnet_mask'] = $data['subnet_mask'] ?? null;
        $this->container['dns_server'] = $data['dns_server'] ?? null;
        $this->container['interface_name'] = $data['interface_name'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['active'] = $data['active'] ?? null;
        $this->container['static_ip'] = $data['static_ip'] ?? null;
        $this->container['fqdn'] = $data['fqdn'] ?? null;
        $this->container['domain_name'] = $data['domain_name'] ?? null;
        $this->container['hostname'] = $data['hostname'] ?? null;
        $this->container['internal_id'] = $data['internal_id'] ?? null;
        $this->container['external_id'] = $data['external_id'] ?? null;
        $this->container['ptr_id'] = $data['ptr_id'] ?? null;
        $this->container['date_created'] = $data['date_created'] ?? null;
        $this->container['last_updated'] = $data['last_updated'] ?? null;
        $this->container['start_date'] = $data['start_date'] ?? null;
        $this->container['end_date'] = $data['end_date'] ?? null;
        $this->container['ref_type'] = $data['ref_type'] ?? null;
        $this->container['ref_id'] = $data['ref_id'] ?? null;
        $this->container['sub_ref_id'] = $data['sub_ref_id'] ?? null;
        $this->container['network_domain'] = $data['network_domain'] ?? null;
        $this->container['created_by'] = $data['created_by'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets network_pool_id
     *
     * @return int|null
     */
    public function getNetworkPoolId()
    {
        return $this->container['network_pool_id'];
    }

    /**
     * Sets network_pool_id
     *
     * @param int|null $network_pool_id network_pool_id
     *
     * @return self
     */
    public function setNetworkPoolId($network_pool_id)
    {
        $this->container['network_pool_id'] = $network_pool_id;

        return $this;
    }

    /**
     * Gets ip_type
     *
     * @return string|null
     */
    public function getIpType()
    {
        return $this->container['ip_type'];
    }

    /**
     * Sets ip_type
     *
     * @param string|null $ip_type ip_type
     *
     * @return self
     */
    public function setIpType($ip_type)
    {
        $this->container['ip_type'] = $ip_type;

        return $this;
    }

    /**
     * Gets ip_address
     *
     * @return string|null
     */
    public function getIpAddress()
    {
        return $this->container['ip_address'];
    }

    /**
     * Sets ip_address
     *
     * @param string|null $ip_address ip_address
     *
     * @return self
     */
    public function setIpAddress($ip_address)
    {
        $this->container['ip_address'] = $ip_address;

        return $this;
    }

    /**
     * Gets gateway_address
     *
     * @return string|null
     */
    public function getGatewayAddress()
    {
        return $this->container['gateway_address'];
    }

    /**
     * Sets gateway_address
     *
     * @param string|null $gateway_address gateway_address
     *
     * @return self
     */
    public function setGatewayAddress($gateway_address)
    {
        $this->container['gateway_address'] = $gateway_address;

        return $this;
    }

    /**
     * Gets subnet_mask
     *
     * @return string|null
     */
    public function getSubnetMask()
    {
        return $this->container['subnet_mask'];
    }

    /**
     * Sets subnet_mask
     *
     * @param string|null $subnet_mask subnet_mask
     *
     * @return self
     */
    public function setSubnetMask($subnet_mask)
    {
        $this->container['subnet_mask'] = $subnet_mask;

        return $this;
    }

    /**
     * Gets dns_server
     *
     * @return string|null
     */
    public function getDnsServer()
    {
        return $this->container['dns_server'];
    }

    /**
     * Sets dns_server
     *
     * @param string|null $dns_server dns_server
     *
     * @return self
     */
    public function setDnsServer($dns_server)
    {
        $this->container['dns_server'] = $dns_server;

        return $this;
    }

    /**
     * Gets interface_name
     *
     * @return string|null
     */
    public function getInterfaceName()
    {
        return $this->container['interface_name'];
    }

    /**
     * Sets interface_name
     *
     * @param string|null $interface_name interface_name
     *
     * @return self
     */
    public function setInterfaceName($interface_name)
    {
        $this->container['interface_name'] = $interface_name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool|null
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool|null $active active
     *
     * @return self
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets static_ip
     *
     * @return bool|null
     */
    public function getStaticIp()
    {
        return $this->container['static_ip'];
    }

    /**
     * Sets static_ip
     *
     * @param bool|null $static_ip static_ip
     *
     * @return self
     */
    public function setStaticIp($static_ip)
    {
        $this->container['static_ip'] = $static_ip;

        return $this;
    }

    /**
     * Gets fqdn
     *
     * @return string|null
     */
    public function getFqdn()
    {
        return $this->container['fqdn'];
    }

    /**
     * Sets fqdn
     *
     * @param string|null $fqdn fqdn
     *
     * @return self
     */
    public function setFqdn($fqdn)
    {
        $this->container['fqdn'] = $fqdn;

        return $this;
    }

    /**
     * Gets domain_name
     *
     * @return string|null
     */
    public function getDomainName()
    {
        return $this->container['domain_name'];
    }

    /**
     * Sets domain_name
     *
     * @param string|null $domain_name domain_name
     *
     * @return self
     */
    public function setDomainName($domain_name)
    {
        $this->container['domain_name'] = $domain_name;

        return $this;
    }

    /**
     * Gets hostname
     *
     * @return string|null
     */
    public function getHostname()
    {
        return $this->container['hostname'];
    }

    /**
     * Sets hostname
     *
     * @param string|null $hostname hostname
     *
     * @return self
     */
    public function setHostname($hostname)
    {
        $this->container['hostname'] = $hostname;

        return $this;
    }

    /**
     * Gets internal_id
     *
     * @return string|null
     */
    public function getInternalId()
    {
        return $this->container['internal_id'];
    }

    /**
     * Sets internal_id
     *
     * @param string|null $internal_id internal_id
     *
     * @return self
     */
    public function setInternalId($internal_id)
    {
        $this->container['internal_id'] = $internal_id;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string|null
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string|null $external_id external_id
     *
     * @return self
     */
    public function setExternalId($external_id)
    {
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets ptr_id
     *
     * @return string|null
     */
    public function getPtrId()
    {
        return $this->container['ptr_id'];
    }

    /**
     * Sets ptr_id
     *
     * @param string|null $ptr_id ptr_id
     *
     * @return self
     */
    public function setPtrId($ptr_id)
    {
        $this->container['ptr_id'] = $ptr_id;

        return $this;
    }

    /**
     * Gets date_created
     *
     * @return \DateTime|null
     */
    public function getDateCreated()
    {
        return $this->container['date_created'];
    }

    /**
     * Sets date_created
     *
     * @param \DateTime|null $date_created date_created
     *
     * @return self
     */
    public function setDateCreated($date_created)
    {
        $this->container['date_created'] = $date_created;

        return $this;
    }

    /**
     * Gets last_updated
     *
     * @return \DateTime|null
     */
    public function getLastUpdated()
    {
        return $this->container['last_updated'];
    }

    /**
     * Sets last_updated
     *
     * @param \DateTime|null $last_updated last_updated
     *
     * @return self
     */
    public function setLastUpdated($last_updated)
    {
        $this->container['last_updated'] = $last_updated;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return \DateTime|null
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime|null $start_date start_date
     *
     * @return self
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime|null
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime|null $end_date end_date
     *
     * @return self
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets ref_type
     *
     * @return string|null
     */
    public function getRefType()
    {
        return $this->container['ref_type'];
    }

    /**
     * Sets ref_type
     *
     * @param string|null $ref_type ref_type
     *
     * @return self
     */
    public function setRefType($ref_type)
    {
        $this->container['ref_type'] = $ref_type;

        return $this;
    }

    /**
     * Gets ref_id
     *
     * @return string|null
     */
    public function getRefId()
    {
        return $this->container['ref_id'];
    }

    /**
     * Sets ref_id
     *
     * @param string|null $ref_id ref_id
     *
     * @return self
     */
    public function setRefId($ref_id)
    {
        $this->container['ref_id'] = $ref_id;

        return $this;
    }

    /**
     * Gets sub_ref_id
     *
     * @return string|null
     */
    public function getSubRefId()
    {
        return $this->container['sub_ref_id'];
    }

    /**
     * Sets sub_ref_id
     *
     * @param string|null $sub_ref_id sub_ref_id
     *
     * @return self
     */
    public function setSubRefId($sub_ref_id)
    {
        $this->container['sub_ref_id'] = $sub_ref_id;

        return $this;
    }

    /**
     * Gets network_domain
     *
     * @return string|null
     */
    public function getNetworkDomain()
    {
        return $this->container['network_domain'];
    }

    /**
     * Sets network_domain
     *
     * @param string|null $network_domain network_domain
     *
     * @return self
     */
    public function setNetworkDomain($network_domain)
    {
        $this->container['network_domain'] = $network_domain;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return \OpenAPI\Client\Model\InlineResponse200107NetworkPoolCreatedBy|null
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param \OpenAPI\Client\Model\InlineResponse200107NetworkPoolCreatedBy|null $created_by created_by
     *
     * @return self
     */
    public function setCreatedBy($created_by)
    {
        $this->container['created_by'] = $created_by;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


