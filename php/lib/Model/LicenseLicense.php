<?php
/**
 * LicenseLicense
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * LicenseLicense Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class LicenseLicense implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'license_license';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'product_tier' => 'string',
        'start_date' => '\DateTime',
        'end_date' => '\DateTime',
        'max_instances' => 'int',
        'max_memory' => 'int',
        'max_storage' => 'int',
        'hard_limit' => 'bool',
        'free_trial' => 'bool',
        'multi_tenant' => 'bool',
        'whitelabel' => 'bool',
        'report_status' => 'bool',
        'support_level' => 'string',
        'account_name' => 'string',
        'config' => 'object',
        'amazon_product_codes' => 'string',
        'features' => '\OpenAPI\Client\Model\LicenseLicenseFeatures',
        'zone_types' => 'string',
        'last_updated' => '\DateTime',
        'date_created' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'product_tier' => null,
        'start_date' => 'date-time',
        'end_date' => 'date-time',
        'max_instances' => 'int64',
        'max_memory' => 'int64',
        'max_storage' => 'int64',
        'hard_limit' => null,
        'free_trial' => null,
        'multi_tenant' => null,
        'whitelabel' => null,
        'report_status' => null,
        'support_level' => null,
        'account_name' => null,
        'config' => null,
        'amazon_product_codes' => null,
        'features' => null,
        'zone_types' => null,
        'last_updated' => 'date-time',
        'date_created' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'product_tier' => 'productTier',
        'start_date' => 'startDate',
        'end_date' => 'endDate',
        'max_instances' => 'maxInstances',
        'max_memory' => 'maxMemory',
        'max_storage' => 'maxStorage',
        'hard_limit' => 'hardLimit',
        'free_trial' => 'freeTrial',
        'multi_tenant' => 'multiTenant',
        'whitelabel' => 'whitelabel',
        'report_status' => 'reportStatus',
        'support_level' => 'supportLevel',
        'account_name' => 'accountName',
        'config' => 'config',
        'amazon_product_codes' => 'amazonProductCodes',
        'features' => 'features',
        'zone_types' => 'zoneTypes',
        'last_updated' => 'lastUpdated',
        'date_created' => 'dateCreated'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'product_tier' => 'setProductTier',
        'start_date' => 'setStartDate',
        'end_date' => 'setEndDate',
        'max_instances' => 'setMaxInstances',
        'max_memory' => 'setMaxMemory',
        'max_storage' => 'setMaxStorage',
        'hard_limit' => 'setHardLimit',
        'free_trial' => 'setFreeTrial',
        'multi_tenant' => 'setMultiTenant',
        'whitelabel' => 'setWhitelabel',
        'report_status' => 'setReportStatus',
        'support_level' => 'setSupportLevel',
        'account_name' => 'setAccountName',
        'config' => 'setConfig',
        'amazon_product_codes' => 'setAmazonProductCodes',
        'features' => 'setFeatures',
        'zone_types' => 'setZoneTypes',
        'last_updated' => 'setLastUpdated',
        'date_created' => 'setDateCreated'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'product_tier' => 'getProductTier',
        'start_date' => 'getStartDate',
        'end_date' => 'getEndDate',
        'max_instances' => 'getMaxInstances',
        'max_memory' => 'getMaxMemory',
        'max_storage' => 'getMaxStorage',
        'hard_limit' => 'getHardLimit',
        'free_trial' => 'getFreeTrial',
        'multi_tenant' => 'getMultiTenant',
        'whitelabel' => 'getWhitelabel',
        'report_status' => 'getReportStatus',
        'support_level' => 'getSupportLevel',
        'account_name' => 'getAccountName',
        'config' => 'getConfig',
        'amazon_product_codes' => 'getAmazonProductCodes',
        'features' => 'getFeatures',
        'zone_types' => 'getZoneTypes',
        'last_updated' => 'getLastUpdated',
        'date_created' => 'getDateCreated'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['product_tier'] = $data['product_tier'] ?? null;
        $this->container['start_date'] = $data['start_date'] ?? null;
        $this->container['end_date'] = $data['end_date'] ?? null;
        $this->container['max_instances'] = $data['max_instances'] ?? null;
        $this->container['max_memory'] = $data['max_memory'] ?? null;
        $this->container['max_storage'] = $data['max_storage'] ?? null;
        $this->container['hard_limit'] = $data['hard_limit'] ?? null;
        $this->container['free_trial'] = $data['free_trial'] ?? null;
        $this->container['multi_tenant'] = $data['multi_tenant'] ?? null;
        $this->container['whitelabel'] = $data['whitelabel'] ?? null;
        $this->container['report_status'] = $data['report_status'] ?? null;
        $this->container['support_level'] = $data['support_level'] ?? null;
        $this->container['account_name'] = $data['account_name'] ?? null;
        $this->container['config'] = $data['config'] ?? null;
        $this->container['amazon_product_codes'] = $data['amazon_product_codes'] ?? null;
        $this->container['features'] = $data['features'] ?? null;
        $this->container['zone_types'] = $data['zone_types'] ?? null;
        $this->container['last_updated'] = $data['last_updated'] ?? null;
        $this->container['date_created'] = $data['date_created'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets product_tier
     *
     * @return string|null
     */
    public function getProductTier()
    {
        return $this->container['product_tier'];
    }

    /**
     * Sets product_tier
     *
     * @param string|null $product_tier product_tier
     *
     * @return self
     */
    public function setProductTier($product_tier)
    {
        $this->container['product_tier'] = $product_tier;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return \DateTime|null
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime|null $start_date start_date
     *
     * @return self
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime|null
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime|null $end_date end_date
     *
     * @return self
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets max_instances
     *
     * @return int|null
     */
    public function getMaxInstances()
    {
        return $this->container['max_instances'];
    }

    /**
     * Sets max_instances
     *
     * @param int|null $max_instances max_instances
     *
     * @return self
     */
    public function setMaxInstances($max_instances)
    {
        $this->container['max_instances'] = $max_instances;

        return $this;
    }

    /**
     * Gets max_memory
     *
     * @return int|null
     */
    public function getMaxMemory()
    {
        return $this->container['max_memory'];
    }

    /**
     * Sets max_memory
     *
     * @param int|null $max_memory max_memory
     *
     * @return self
     */
    public function setMaxMemory($max_memory)
    {
        $this->container['max_memory'] = $max_memory;

        return $this;
    }

    /**
     * Gets max_storage
     *
     * @return int|null
     */
    public function getMaxStorage()
    {
        return $this->container['max_storage'];
    }

    /**
     * Sets max_storage
     *
     * @param int|null $max_storage max_storage
     *
     * @return self
     */
    public function setMaxStorage($max_storage)
    {
        $this->container['max_storage'] = $max_storage;

        return $this;
    }

    /**
     * Gets hard_limit
     *
     * @return bool|null
     */
    public function getHardLimit()
    {
        return $this->container['hard_limit'];
    }

    /**
     * Sets hard_limit
     *
     * @param bool|null $hard_limit hard_limit
     *
     * @return self
     */
    public function setHardLimit($hard_limit)
    {
        $this->container['hard_limit'] = $hard_limit;

        return $this;
    }

    /**
     * Gets free_trial
     *
     * @return bool|null
     */
    public function getFreeTrial()
    {
        return $this->container['free_trial'];
    }

    /**
     * Sets free_trial
     *
     * @param bool|null $free_trial free_trial
     *
     * @return self
     */
    public function setFreeTrial($free_trial)
    {
        $this->container['free_trial'] = $free_trial;

        return $this;
    }

    /**
     * Gets multi_tenant
     *
     * @return bool|null
     */
    public function getMultiTenant()
    {
        return $this->container['multi_tenant'];
    }

    /**
     * Sets multi_tenant
     *
     * @param bool|null $multi_tenant multi_tenant
     *
     * @return self
     */
    public function setMultiTenant($multi_tenant)
    {
        $this->container['multi_tenant'] = $multi_tenant;

        return $this;
    }

    /**
     * Gets whitelabel
     *
     * @return bool|null
     */
    public function getWhitelabel()
    {
        return $this->container['whitelabel'];
    }

    /**
     * Sets whitelabel
     *
     * @param bool|null $whitelabel whitelabel
     *
     * @return self
     */
    public function setWhitelabel($whitelabel)
    {
        $this->container['whitelabel'] = $whitelabel;

        return $this;
    }

    /**
     * Gets report_status
     *
     * @return bool|null
     */
    public function getReportStatus()
    {
        return $this->container['report_status'];
    }

    /**
     * Sets report_status
     *
     * @param bool|null $report_status report_status
     *
     * @return self
     */
    public function setReportStatus($report_status)
    {
        $this->container['report_status'] = $report_status;

        return $this;
    }

    /**
     * Gets support_level
     *
     * @return string|null
     */
    public function getSupportLevel()
    {
        return $this->container['support_level'];
    }

    /**
     * Sets support_level
     *
     * @param string|null $support_level support_level
     *
     * @return self
     */
    public function setSupportLevel($support_level)
    {
        $this->container['support_level'] = $support_level;

        return $this;
    }

    /**
     * Gets account_name
     *
     * @return string|null
     */
    public function getAccountName()
    {
        return $this->container['account_name'];
    }

    /**
     * Sets account_name
     *
     * @param string|null $account_name account_name
     *
     * @return self
     */
    public function setAccountName($account_name)
    {
        $this->container['account_name'] = $account_name;

        return $this;
    }

    /**
     * Gets config
     *
     * @return object|null
     */
    public function getConfig()
    {
        return $this->container['config'];
    }

    /**
     * Sets config
     *
     * @param object|null $config config
     *
     * @return self
     */
    public function setConfig($config)
    {
        $this->container['config'] = $config;

        return $this;
    }

    /**
     * Gets amazon_product_codes
     *
     * @return string|null
     */
    public function getAmazonProductCodes()
    {
        return $this->container['amazon_product_codes'];
    }

    /**
     * Sets amazon_product_codes
     *
     * @param string|null $amazon_product_codes amazon_product_codes
     *
     * @return self
     */
    public function setAmazonProductCodes($amazon_product_codes)
    {
        $this->container['amazon_product_codes'] = $amazon_product_codes;

        return $this;
    }

    /**
     * Gets features
     *
     * @return \OpenAPI\Client\Model\LicenseLicenseFeatures|null
     */
    public function getFeatures()
    {
        return $this->container['features'];
    }

    /**
     * Sets features
     *
     * @param \OpenAPI\Client\Model\LicenseLicenseFeatures|null $features features
     *
     * @return self
     */
    public function setFeatures($features)
    {
        $this->container['features'] = $features;

        return $this;
    }

    /**
     * Gets zone_types
     *
     * @return string|null
     */
    public function getZoneTypes()
    {
        return $this->container['zone_types'];
    }

    /**
     * Sets zone_types
     *
     * @param string|null $zone_types zone_types
     *
     * @return self
     */
    public function setZoneTypes($zone_types)
    {
        $this->container['zone_types'] = $zone_types;

        return $this;
    }

    /**
     * Gets last_updated
     *
     * @return \DateTime|null
     */
    public function getLastUpdated()
    {
        return $this->container['last_updated'];
    }

    /**
     * Sets last_updated
     *
     * @param \DateTime|null $last_updated last_updated
     *
     * @return self
     */
    public function setLastUpdated($last_updated)
    {
        $this->container['last_updated'] = $last_updated;

        return $this;
    }

    /**
     * Gets date_created
     *
     * @return \DateTime|null
     */
    public function getDateCreated()
    {
        return $this->container['date_created'];
    }

    /**
     * Sets date_created
     *
     * @param \DateTime|null $date_created date_created
     *
     * @return self
     */
    public function setDateCreated($date_created)
    {
        $this->container['date_created'] = $date_created;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


