<?php
/**
 * ApiStorageBucketsStorageBucket
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ApiStorageBucketsStorageBucket Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class ApiStorageBucketsStorageBucket implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_api_storage_buckets_storageBucket';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'provider_type' => 'string',
        'default_backup_target' => 'bool',
        'copy_to_store' => 'bool',
        'default_deployment_target' => 'bool',
        'default_virtual_image_target' => 'bool',
        'retention_policy_type' => 'string',
        'retention_policy_days' => 'int',
        'retention_provider' => 'string',
        'bucket_name' => 'string',
        'create_bucket' => 'bool',
        'config' => 'OneOfObjectObjectObjectObjectObjectObjectObject'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'provider_type' => null,
        'default_backup_target' => null,
        'copy_to_store' => null,
        'default_deployment_target' => null,
        'default_virtual_image_target' => null,
        'retention_policy_type' => null,
        'retention_policy_days' => 'int64',
        'retention_provider' => null,
        'bucket_name' => null,
        'create_bucket' => null,
        'config' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'provider_type' => 'providerType',
        'default_backup_target' => 'defaultBackupTarget',
        'copy_to_store' => 'copyToStore',
        'default_deployment_target' => 'defaultDeploymentTarget',
        'default_virtual_image_target' => 'defaultVirtualImageTarget',
        'retention_policy_type' => 'retentionPolicyType',
        'retention_policy_days' => 'retentionPolicyDays',
        'retention_provider' => 'retentionProvider',
        'bucket_name' => 'bucketName',
        'create_bucket' => 'createBucket',
        'config' => 'config'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'provider_type' => 'setProviderType',
        'default_backup_target' => 'setDefaultBackupTarget',
        'copy_to_store' => 'setCopyToStore',
        'default_deployment_target' => 'setDefaultDeploymentTarget',
        'default_virtual_image_target' => 'setDefaultVirtualImageTarget',
        'retention_policy_type' => 'setRetentionPolicyType',
        'retention_policy_days' => 'setRetentionPolicyDays',
        'retention_provider' => 'setRetentionProvider',
        'bucket_name' => 'setBucketName',
        'create_bucket' => 'setCreateBucket',
        'config' => 'setConfig'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'provider_type' => 'getProviderType',
        'default_backup_target' => 'getDefaultBackupTarget',
        'copy_to_store' => 'getCopyToStore',
        'default_deployment_target' => 'getDefaultDeploymentTarget',
        'default_virtual_image_target' => 'getDefaultVirtualImageTarget',
        'retention_policy_type' => 'getRetentionPolicyType',
        'retention_policy_days' => 'getRetentionPolicyDays',
        'retention_provider' => 'getRetentionProvider',
        'bucket_name' => 'getBucketName',
        'create_bucket' => 'getCreateBucket',
        'config' => 'getConfig'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const PROVIDER_TYPE_S3 = 's3';
    const PROVIDER_TYPE_AZURE = 'azure';
    const PROVIDER_TYPE_CIFS = 'cifs';
    const PROVIDER_TYPE_LOCAL = 'local';
    const PROVIDER_TYPE_NFS = 'nfs';
    const PROVIDER_TYPE_OPENSTACK = 'openstack';
    const PROVIDER_TYPE_RACKSPACE = 'rackspace';
    const RETENTION_POLICY_TYPE_BACKUP = 'backup';
    const RETENTION_POLICY_TYPE_DELETE = 'delete';
    const RETENTION_POLICY_TYPE_NONE = 'none';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getProviderTypeAllowableValues()
    {
        return [
            self::PROVIDER_TYPE_S3,
            self::PROVIDER_TYPE_AZURE,
            self::PROVIDER_TYPE_CIFS,
            self::PROVIDER_TYPE_LOCAL,
            self::PROVIDER_TYPE_NFS,
            self::PROVIDER_TYPE_OPENSTACK,
            self::PROVIDER_TYPE_RACKSPACE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRetentionPolicyTypeAllowableValues()
    {
        return [
            self::RETENTION_POLICY_TYPE_BACKUP,
            self::RETENTION_POLICY_TYPE_DELETE,
            self::RETENTION_POLICY_TYPE_NONE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['provider_type'] = $data['provider_type'] ?? null;
        $this->container['default_backup_target'] = $data['default_backup_target'] ?? false;
        $this->container['copy_to_store'] = $data['copy_to_store'] ?? null;
        $this->container['default_deployment_target'] = $data['default_deployment_target'] ?? false;
        $this->container['default_virtual_image_target'] = $data['default_virtual_image_target'] ?? false;
        $this->container['retention_policy_type'] = $data['retention_policy_type'] ?? 'none';
        $this->container['retention_policy_days'] = $data['retention_policy_days'] ?? null;
        $this->container['retention_provider'] = $data['retention_provider'] ?? null;
        $this->container['bucket_name'] = $data['bucket_name'] ?? null;
        $this->container['create_bucket'] = $data['create_bucket'] ?? false;
        $this->container['config'] = $data['config'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['provider_type'] === null) {
            $invalidProperties[] = "'provider_type' can't be null";
        }
        $allowedValues = $this->getProviderTypeAllowableValues();
        if (!is_null($this->container['provider_type']) && !in_array($this->container['provider_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'provider_type', must be one of '%s'",
                $this->container['provider_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRetentionPolicyTypeAllowableValues();
        if (!is_null($this->container['retention_policy_type']) && !in_array($this->container['retention_policy_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'retention_policy_type', must be one of '%s'",
                $this->container['retention_policy_type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['config'] === null) {
            $invalidProperties[] = "'config' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name A unique name scoped to your account for the storage bucket
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets provider_type
     *
     * @return string
     */
    public function getProviderType()
    {
        return $this->container['provider_type'];
    }

    /**
     * Sets provider_type
     *
     * @param string $provider_type The type of storage bucket
     *
     * @return self
     */
    public function setProviderType($provider_type)
    {
        $allowedValues = $this->getProviderTypeAllowableValues();
        if (!in_array($provider_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'provider_type', must be one of '%s'",
                    $provider_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['provider_type'] = $provider_type;

        return $this;
    }

    /**
     * Gets default_backup_target
     *
     * @return bool|null
     */
    public function getDefaultBackupTarget()
    {
        return $this->container['default_backup_target'];
    }

    /**
     * Sets default_backup_target
     *
     * @param bool|null $default_backup_target Default Backup Target
     *
     * @return self
     */
    public function setDefaultBackupTarget($default_backup_target)
    {
        $this->container['default_backup_target'] = $default_backup_target;

        return $this;
    }

    /**
     * Gets copy_to_store
     *
     * @return bool|null
     */
    public function getCopyToStore()
    {
        return $this->container['copy_to_store'];
    }

    /**
     * Sets copy_to_store
     *
     * @param bool|null $copy_to_store Archive Snapshots
     *
     * @return self
     */
    public function setCopyToStore($copy_to_store)
    {
        $this->container['copy_to_store'] = $copy_to_store;

        return $this;
    }

    /**
     * Gets default_deployment_target
     *
     * @return bool|null
     */
    public function getDefaultDeploymentTarget()
    {
        return $this->container['default_deployment_target'];
    }

    /**
     * Sets default_deployment_target
     *
     * @param bool|null $default_deployment_target Default Deployment Target
     *
     * @return self
     */
    public function setDefaultDeploymentTarget($default_deployment_target)
    {
        $this->container['default_deployment_target'] = $default_deployment_target;

        return $this;
    }

    /**
     * Gets default_virtual_image_target
     *
     * @return bool|null
     */
    public function getDefaultVirtualImageTarget()
    {
        return $this->container['default_virtual_image_target'];
    }

    /**
     * Sets default_virtual_image_target
     *
     * @param bool|null $default_virtual_image_target Default Virtual Image Store
     *
     * @return self
     */
    public function setDefaultVirtualImageTarget($default_virtual_image_target)
    {
        $this->container['default_virtual_image_target'] = $default_virtual_image_target;

        return $this;
    }

    /**
     * Gets retention_policy_type
     *
     * @return string|null
     */
    public function getRetentionPolicyType()
    {
        return $this->container['retention_policy_type'];
    }

    /**
     * Sets retention_policy_type
     *
     * @param string|null $retention_policy_type Cleanup mode. `backup` - Move old files to a backup provider. `delete` - Delete old files. `none` - Keep all files.
     *
     * @return self
     */
    public function setRetentionPolicyType($retention_policy_type)
    {
        $allowedValues = $this->getRetentionPolicyTypeAllowableValues();
        if (!is_null($retention_policy_type) && !in_array($retention_policy_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'retention_policy_type', must be one of '%s'",
                    $retention_policy_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['retention_policy_type'] = $retention_policy_type;

        return $this;
    }

    /**
     * Gets retention_policy_days
     *
     * @return int|null
     */
    public function getRetentionPolicyDays()
    {
        return $this->container['retention_policy_days'];
    }

    /**
     * Sets retention_policy_days
     *
     * @param int|null $retention_policy_days The number of days old a file must be before it is deleted.
     *
     * @return self
     */
    public function setRetentionPolicyDays($retention_policy_days)
    {
        $this->container['retention_policy_days'] = $retention_policy_days;

        return $this;
    }

    /**
     * Gets retention_provider
     *
     * @return string|null
     */
    public function getRetentionProvider()
    {
        return $this->container['retention_provider'];
    }

    /**
     * Sets retention_provider
     *
     * @param string|null $retention_provider The backup Storage Bucket where old files are moved to.
     *
     * @return self
     */
    public function setRetentionProvider($retention_provider)
    {
        $this->container['retention_provider'] = $retention_provider;

        return $this;
    }

    /**
     * Gets bucket_name
     *
     * @return string|null
     */
    public function getBucketName()
    {
        return $this->container['bucket_name'];
    }

    /**
     * Sets bucket_name
     *
     * @param string|null $bucket_name The name of the bucket. Only applies to `Amazon`, `Azure`, `CIFS`, `NFSv3`, `Openstack Swift`, and `Rackspace CDN`.
     *
     * @return self
     */
    public function setBucketName($bucket_name)
    {
        $this->container['bucket_name'] = $bucket_name;

        return $this;
    }

    /**
     * Gets create_bucket
     *
     * @return bool|null
     */
    public function getCreateBucket()
    {
        return $this->container['create_bucket'];
    }

    /**
     * Sets create_bucket
     *
     * @param bool|null $create_bucket Create the bucket if it does not exist. Only applies to `Amazon`, `Azure`, `Openstack Swift`, and `Rackspace CDN`.
     *
     * @return self
     */
    public function setCreateBucket($create_bucket)
    {
        $this->container['create_bucket'] = $create_bucket;

        return $this;
    }

    /**
     * Gets config
     *
     * @return OneOfObjectObjectObjectObjectObjectObjectObject
     */
    public function getConfig()
    {
        return $this->container['config'];
    }

    /**
     * Sets config
     *
     * @param OneOfObjectObjectObjectObjectObjectObjectObject $config config
     *
     * @return self
     */
    public function setConfig($config)
    {
        $this->container['config'] = $config;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


