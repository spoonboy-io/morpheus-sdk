<?php
/**
 * ApiRolesRolePermissions
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ApiRolesRolePermissions Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class ApiRolesRolePermissions implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_api_roles_role_permissions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'code' => 'string',
        'access' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'code' => null,
        'access' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'code' => 'code',
        'access' => 'access'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'code' => 'setCode',
        'access' => 'setAccess'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'code' => 'getCode',
        'access' => 'getAccess'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const CODE_ACCOUNT_USAGE = 'account-usage';
    const CODE_ACTIVITY = 'activity';
    const CODE_ADMIN_ACCOUNTS = 'admin-accounts';
    const CODE_ADMIN_ACCOUNTS_USERS = 'admin-accounts-users';
    const CODE_ADMIN_APPLIANCE = 'admin-appliance';
    const CODE_ADMIN_BACKUP_SETTINGS = 'admin-backupSettings';
    const CODE_ADMIN_CERTIFICATES = 'admin-certificates';
    const CODE_ADMIN_CLIENTS = 'admin-clients';
    const CODE_ADMIN_CM = 'admin-cm';
    const CODE_ADMIN_CONTAINERS = 'admin-containers';
    const CODE_ADMIN_DISTRIBUTED_WORKERS = 'admin-distributed-workers';
    const CODE_ADMIN_ENVIRONMENTS = 'admin-environments';
    const CODE_ADMIN_GLOBAL_POLICIES = 'admin-global-policies';
    const CODE_ADMIN_GROUPS = 'admin-groups';
    const CODE_ADMIN_GUIDANCE_SETTINGS = 'admin-guidanceSettings';
    const CODE_ADMIN_HEALTH = 'admin-health';
    const CODE_ADMIN_IDENTITY_SOURCES = 'admin-identity-sources';
    const CODE_ADMIN_KEYPAIRS = 'admin-keypairs';
    const CODE_ADMIN_LICENSES = 'admin-licenses';
    const CODE_ADMIN_LOG_SETTINGS = 'admin-logSettings';
    const CODE_ADMIN_MONITOR_SETTINGS = 'admin-monitorSettings';
    const CODE_ADMIN_MOTD = 'admin-motd';
    const CODE_ADMIN_PACKAGES = 'admin-packages';
    const CODE_ADMIN_PLUGINS = 'admin-plugins';
    const CODE_ADMIN_POLICIES = 'admin-policies';
    const CODE_ADMIN_PROFILES = 'admin-profiles';
    const CODE_ADMIN_PROVISIONING_SETTINGS = 'admin-provisioningSettings';
    const CODE_ADMIN_ROLES = 'admin-roles';
    const CODE_ADMIN_SERVERS = 'admin-servers';
    const CODE_ADMIN_SERVICE_PLANS = 'admin-servicePlans';
    const CODE_ADMIN_USERS = 'admin-users';
    const CODE_ADMIN_WHITELABEL = 'admin-whitelabel';
    const CODE_ADMIN_ZONES = 'admin-zones';
    const CODE_APP_TEMPLATES = 'app-templates';
    const CODE_APPS = 'apps';
    const CODE_ARM_TEMPLATE = 'arm-template';
    const CODE_AUTOMATION_SERVICES = 'automation-services';
    const CODE_BACKUP_SERVICES = 'backup-services';
    const CODE_BACKUPS = 'backups';
    const CODE_BILLING = 'billing';
    const CODE_CATALOG = 'catalog';
    const CODE_CLOUD_FORMATION_TEMPLATE = 'cloudFormation-template';
    const CODE_CODE_REPOSITORIES = 'code-repositories';
    const CODE_CREDENTIALS = 'credentials';
    const CODE_DASHBOARD = 'dashboard';
    const CODE_DEPLOYMENT_SERVICES = 'deployment-services';
    const CODE_DEPLOYMENTS = 'deployments';
    const CODE_EXECUTION_REQUEST = 'execution-request';
    const CODE_EXECUTIONS = 'executions';
    const CODE_GUIDANCE = 'guidance';
    const CODE_HELM_TEMPLATE = 'helm-template';
    const CODE_INFRASTRUCTURE_BOOT = 'infrastructure-boot';
    const CODE_INFRASTRUCTURE_CLUSTER = 'infrastructure-cluster';
    const CODE_INFRASTRUCTURE_DHCP_POOL = 'infrastructure-dhcp-pool';
    const CODE_INFRASTRUCTURE_DOMAINS = 'infrastructure-domains';
    const CODE_INFRASTRUCTURE_IPPOOLS = 'infrastructure-ippools';
    const CODE_INFRASTRUCTURE_KUBE_CNTL = 'infrastructure-kube-cntl';
    const CODE_INFRASTRUCTURE_LOADBALANCER = 'infrastructure-loadbalancer';
    const CODE_INFRASTRUCTURE_MOVE_SERVER = 'infrastructure-move-server';
    const CODE_INFRASTRUCTURE_NAT = 'infrastructure-nat';
    const CODE_INFRASTRUCTURE_NETWORK_DHCP_RELAY = 'infrastructure-network-dhcp-relay';
    const CODE_INFRASTRUCTURE_NETWORK_DHCP_ROUTES = 'infrastructure-network-dhcp-routes';
    const CODE_INFRASTRUCTURE_NETWORK_DHCP_SERVER = 'infrastructure-network-dhcp-server';
    const CODE_INFRASTRUCTURE_NETWORK_FIREWALLS = 'infrastructure-network-firewalls';
    const CODE_INFRASTRUCTURE_NETWORK_INTEGRATIONS = 'infrastructure-network-integrations';
    const CODE_INFRASTRUCTURE_NETWORK_ROUTER_FIREWALLS = 'infrastructure-network-router-firewalls';
    const CODE_INFRASTRUCTURE_NETWORK_ROUTER_INTERFACES = 'infrastructure-network-router-interfaces';
    const CODE_INFRASTRUCTURE_NETWORK_ROUTER_REDISTRIBUTION = 'infrastructure-network-router-redistribution';
    const CODE_INFRASTRUCTURE_NETWORK_ROUTER_ROUTES = 'infrastructure-network-router-routes';
    const CODE_INFRASTRUCTURE_NETWORK_SERVER_GROUPS = 'infrastructure-network-server-groups';
    const CODE_INFRASTRUCTURE_NETWORKS = 'infrastructure-networks';
    const CODE_INFRASTRUCTURE_PROXIES = 'infrastructure-proxies';
    const CODE_INFRASTRUCTURE_ROUTER_DHCP_BINDING = 'infrastructure-router-dhcp-binding';
    const CODE_INFRASTRUCTURE_ROUTER_DHCP_RELAY = 'infrastructure-router-dhcp-relay';
    const CODE_INFRASTRUCTURE_ROUTERS = 'infrastructure-routers';
    const CODE_INFRASTRUCTURE_SECURITY_GROUPS = 'infrastructure-securityGroups';
    const CODE_INFRASTRUCTURE_STATE = 'infrastructure-state';
    const CODE_INFRASTRUCTURE_STORAGE = 'infrastructure-storage';
    const CODE_INFRASTRUCTURE_STORAGE_BROWSER = 'infrastructure-storage-browser';
    const CODE_INTEGRATIONS_ANSIBLE = 'integrations-ansible';
    const CODE_JOB_EXECUTIONS = 'job-executions';
    const CODE_JOB_TEMPLATES = 'job-templates';
    const CODE_KUBERNETES_TEMPLATE = 'kubernetes-template';
    const CODE_LIBRARY_ADVANCED_NODE_TYPE_OPTIONS = 'library-advanced-node-type-options';
    const CODE_LIBRARY_OPTIONS = 'library-options';
    const CODE_LIBRARY_TEMPLATES = 'library-templates';
    const CODE_LOGS = 'logs';
    const CODE_MONITORING = 'monitoring';
    const CODE_OPERATIONS_ALARMS = 'operations-alarms';
    const CODE_OPERATIONS_APPROVALS = 'operations-approvals';
    const CODE_OPERATIONS_BUDGETS = 'operations-budgets';
    const CODE_OPERATIONS_INVOICES = 'operations-invoices';
    const CODE_OPERATIONS_WIKI = 'operations-wiki';
    const CODE_PROJECTS = 'projects';
    const CODE_PROVISIONING = 'provisioning';
    const CODE_PROVISIONING_ADD = 'provisioning-add';
    const CODE_PROVISIONING_ADMIN = 'provisioning-admin';
    const CODE_PROVISIONING_CLONE = 'provisioning-clone';
    const CODE_PROVISIONING_DELETE = 'provisioning-delete';
    const CODE_PROVISIONING_EDIT = 'provisioning-edit';
    const CODE_PROVISIONING_ENVIRONMENT = 'provisioning-environment';
    const CODE_PROVISIONING_EXECUTE_SCRIPT = 'provisioning-execute-script';
    const CODE_PROVISIONING_EXECUTE_TASK = 'provisioning-execute-task';
    const CODE_PROVISIONING_EXECUTE_WORKFLOW = 'provisioning-execute-workflow';
    const CODE_PROVISIONING_FORCE_DELETE = 'provisioning-force-delete';
    const CODE_PROVISIONING_IMPORT_IMAGE = 'provisioning-import-image';
    const CODE_PROVISIONING_LOCK = 'provisioning-lock';
    const CODE_PROVISIONING_POWER = 'provisioning-power';
    const CODE_PROVISIONING_RECONFIGURE = 'provisioning-reconfigure';
    const CODE_PROVISIONING_RECONFIGURE_ADD_DISK = 'provisioning-reconfigure-add-disk';
    const CODE_PROVISIONING_RECONFIGURE_ADD_NETWORK = 'provisioning-reconfigure-add-network';
    const CODE_PROVISIONING_RECONFIGURE_CHANGE_PLAN = 'provisioning-reconfigure-change-plan';
    const CODE_PROVISIONING_RECONFIGURE_DISK_TYPE = 'provisioning-reconfigure-disk-type';
    const CODE_PROVISIONING_RECONFIGURE_MODIFY_DISK = 'provisioning-reconfigure-modify-disk';
    const CODE_PROVISIONING_RECONFIGURE_MODIFY_NETWORK = 'provisioning-reconfigure-modify-network';
    const CODE_PROVISIONING_RECONFIGURE_REMOVE_DISK = 'provisioning-reconfigure-remove-disk';
    const CODE_PROVISIONING_RECONFIGURE_REMOVE_NETWORK = 'provisioning-reconfigure-remove-network';
    const CODE_PROVISIONING_REMOVE_CONTROL = 'provisioning-remove-control';
    const CODE_PROVISIONING_SCALE = 'provisioning-scale';
    const CODE_PROVISIONING_SETTINGS = 'provisioning-settings';
    const CODE_PROVISIONING_STATE = 'provisioning-state';
    const CODE_REPORTS = 'reports';
    const CODE_REPORTS_ANALYTICS = 'reports-analytics';
    const CODE_SCHEDULING_EXECUTE = 'scheduling-execute';
    const CODE_SCHEDULING_POWER = 'scheduling-power';
    const CODE_SECURITY_SCAN = 'security-scan';
    const CODE_SERVICE_CATALOG = 'service-catalog';
    const CODE_SERVICE_CATALOG_DASHBOARD = 'service-catalog-dashboard';
    const CODE_SERVICE_CATALOG_INVENTORY = 'service-catalog-inventory';
    const CODE_SERVICES_ARCHIVES = 'services-archives';
    const CODE_SERVICES_CYPHER = 'services-cypher';
    const CODE_SERVICES_IMAGE_BUILDER = 'services-image-builder';
    const CODE_SERVICES_KUBERNETES = 'services-kubernetes';
    const CODE_SERVICES_NETWORK_REGISTRY = 'services-network-registry';
    const CODE_SERVICES_VDI_COPY = 'services-vdi-copy';
    const CODE_SERVICES_VDI_POOLS = 'services-vdi-pools';
    const CODE_SERVICES_VDI_PRINTER = 'services-vdi-printer';
    const CODE_SNAPSHOTS = 'snapshots';
    const CODE_TASK_SCRIPTS = 'task-scripts';
    const CODE_TASKS = 'tasks';
    const CODE_TERMINAL = 'terminal';
    const CODE_TERMINAL_ACCESS = 'terminal-access';
    const CODE_TERRAFORM_TEMPLATE = 'terraform-template';
    const CODE_THRESHOLDS = 'thresholds';
    const CODE_TRUST_SERVICES = 'trust-services';
    const CODE_VIRTUAL_IMAGES = 'virtual-images';
    const ACCESS_FULL = 'full';
    const ACCESS_FULL_DECRYPTED = 'full_decrypted';
    const ACCESS_GROUP = 'group';
    const ACCESS_LISTFILES = 'listfiles';
    const ACCESS_MANAGERULES = 'managerules';
    const ACCESS_NO = 'no';
    const ACCESS_NONE = 'none';
    const ACCESS_PROVISION = 'provision';
    const ACCESS_READ = 'read';
    const ACCESS_ROLEMAPPINGS = 'rolemappings';
    const ACCESS_USER = 'user';
    const ACCESS_VIEW = 'view';
    const ACCESS_YES = 'yes';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCodeAllowableValues()
    {
        return [
            self::CODE_ACCOUNT_USAGE,
            self::CODE_ACTIVITY,
            self::CODE_ADMIN_ACCOUNTS,
            self::CODE_ADMIN_ACCOUNTS_USERS,
            self::CODE_ADMIN_APPLIANCE,
            self::CODE_ADMIN_BACKUP_SETTINGS,
            self::CODE_ADMIN_CERTIFICATES,
            self::CODE_ADMIN_CLIENTS,
            self::CODE_ADMIN_CM,
            self::CODE_ADMIN_CONTAINERS,
            self::CODE_ADMIN_DISTRIBUTED_WORKERS,
            self::CODE_ADMIN_ENVIRONMENTS,
            self::CODE_ADMIN_GLOBAL_POLICIES,
            self::CODE_ADMIN_GROUPS,
            self::CODE_ADMIN_GUIDANCE_SETTINGS,
            self::CODE_ADMIN_HEALTH,
            self::CODE_ADMIN_IDENTITY_SOURCES,
            self::CODE_ADMIN_KEYPAIRS,
            self::CODE_ADMIN_LICENSES,
            self::CODE_ADMIN_LOG_SETTINGS,
            self::CODE_ADMIN_MONITOR_SETTINGS,
            self::CODE_ADMIN_MOTD,
            self::CODE_ADMIN_PACKAGES,
            self::CODE_ADMIN_PLUGINS,
            self::CODE_ADMIN_POLICIES,
            self::CODE_ADMIN_PROFILES,
            self::CODE_ADMIN_PROVISIONING_SETTINGS,
            self::CODE_ADMIN_ROLES,
            self::CODE_ADMIN_SERVERS,
            self::CODE_ADMIN_SERVICE_PLANS,
            self::CODE_ADMIN_USERS,
            self::CODE_ADMIN_WHITELABEL,
            self::CODE_ADMIN_ZONES,
            self::CODE_APP_TEMPLATES,
            self::CODE_APPS,
            self::CODE_ARM_TEMPLATE,
            self::CODE_AUTOMATION_SERVICES,
            self::CODE_BACKUP_SERVICES,
            self::CODE_BACKUPS,
            self::CODE_BILLING,
            self::CODE_CATALOG,
            self::CODE_CLOUD_FORMATION_TEMPLATE,
            self::CODE_CODE_REPOSITORIES,
            self::CODE_CREDENTIALS,
            self::CODE_DASHBOARD,
            self::CODE_DEPLOYMENT_SERVICES,
            self::CODE_DEPLOYMENTS,
            self::CODE_EXECUTION_REQUEST,
            self::CODE_EXECUTIONS,
            self::CODE_GUIDANCE,
            self::CODE_HELM_TEMPLATE,
            self::CODE_INFRASTRUCTURE_BOOT,
            self::CODE_INFRASTRUCTURE_CLUSTER,
            self::CODE_INFRASTRUCTURE_DHCP_POOL,
            self::CODE_INFRASTRUCTURE_DOMAINS,
            self::CODE_INFRASTRUCTURE_IPPOOLS,
            self::CODE_INFRASTRUCTURE_KUBE_CNTL,
            self::CODE_INFRASTRUCTURE_LOADBALANCER,
            self::CODE_INFRASTRUCTURE_MOVE_SERVER,
            self::CODE_INFRASTRUCTURE_NAT,
            self::CODE_INFRASTRUCTURE_NETWORK_DHCP_RELAY,
            self::CODE_INFRASTRUCTURE_NETWORK_DHCP_ROUTES,
            self::CODE_INFRASTRUCTURE_NETWORK_DHCP_SERVER,
            self::CODE_INFRASTRUCTURE_NETWORK_FIREWALLS,
            self::CODE_INFRASTRUCTURE_NETWORK_INTEGRATIONS,
            self::CODE_INFRASTRUCTURE_NETWORK_ROUTER_FIREWALLS,
            self::CODE_INFRASTRUCTURE_NETWORK_ROUTER_INTERFACES,
            self::CODE_INFRASTRUCTURE_NETWORK_ROUTER_REDISTRIBUTION,
            self::CODE_INFRASTRUCTURE_NETWORK_ROUTER_ROUTES,
            self::CODE_INFRASTRUCTURE_NETWORK_SERVER_GROUPS,
            self::CODE_INFRASTRUCTURE_NETWORKS,
            self::CODE_INFRASTRUCTURE_PROXIES,
            self::CODE_INFRASTRUCTURE_ROUTER_DHCP_BINDING,
            self::CODE_INFRASTRUCTURE_ROUTER_DHCP_RELAY,
            self::CODE_INFRASTRUCTURE_ROUTERS,
            self::CODE_INFRASTRUCTURE_SECURITY_GROUPS,
            self::CODE_INFRASTRUCTURE_STATE,
            self::CODE_INFRASTRUCTURE_STORAGE,
            self::CODE_INFRASTRUCTURE_STORAGE_BROWSER,
            self::CODE_INTEGRATIONS_ANSIBLE,
            self::CODE_JOB_EXECUTIONS,
            self::CODE_JOB_TEMPLATES,
            self::CODE_KUBERNETES_TEMPLATE,
            self::CODE_LIBRARY_ADVANCED_NODE_TYPE_OPTIONS,
            self::CODE_LIBRARY_OPTIONS,
            self::CODE_LIBRARY_TEMPLATES,
            self::CODE_LOGS,
            self::CODE_MONITORING,
            self::CODE_OPERATIONS_ALARMS,
            self::CODE_OPERATIONS_APPROVALS,
            self::CODE_OPERATIONS_BUDGETS,
            self::CODE_OPERATIONS_INVOICES,
            self::CODE_OPERATIONS_WIKI,
            self::CODE_PROJECTS,
            self::CODE_PROVISIONING,
            self::CODE_PROVISIONING_ADD,
            self::CODE_PROVISIONING_ADMIN,
            self::CODE_PROVISIONING_CLONE,
            self::CODE_PROVISIONING_DELETE,
            self::CODE_PROVISIONING_EDIT,
            self::CODE_PROVISIONING_ENVIRONMENT,
            self::CODE_PROVISIONING_EXECUTE_SCRIPT,
            self::CODE_PROVISIONING_EXECUTE_TASK,
            self::CODE_PROVISIONING_EXECUTE_WORKFLOW,
            self::CODE_PROVISIONING_FORCE_DELETE,
            self::CODE_PROVISIONING_IMPORT_IMAGE,
            self::CODE_PROVISIONING_LOCK,
            self::CODE_PROVISIONING_POWER,
            self::CODE_PROVISIONING_RECONFIGURE,
            self::CODE_PROVISIONING_RECONFIGURE_ADD_DISK,
            self::CODE_PROVISIONING_RECONFIGURE_ADD_NETWORK,
            self::CODE_PROVISIONING_RECONFIGURE_CHANGE_PLAN,
            self::CODE_PROVISIONING_RECONFIGURE_DISK_TYPE,
            self::CODE_PROVISIONING_RECONFIGURE_MODIFY_DISK,
            self::CODE_PROVISIONING_RECONFIGURE_MODIFY_NETWORK,
            self::CODE_PROVISIONING_RECONFIGURE_REMOVE_DISK,
            self::CODE_PROVISIONING_RECONFIGURE_REMOVE_NETWORK,
            self::CODE_PROVISIONING_REMOVE_CONTROL,
            self::CODE_PROVISIONING_SCALE,
            self::CODE_PROVISIONING_SETTINGS,
            self::CODE_PROVISIONING_STATE,
            self::CODE_REPORTS,
            self::CODE_REPORTS_ANALYTICS,
            self::CODE_SCHEDULING_EXECUTE,
            self::CODE_SCHEDULING_POWER,
            self::CODE_SECURITY_SCAN,
            self::CODE_SERVICE_CATALOG,
            self::CODE_SERVICE_CATALOG_DASHBOARD,
            self::CODE_SERVICE_CATALOG_INVENTORY,
            self::CODE_SERVICES_ARCHIVES,
            self::CODE_SERVICES_CYPHER,
            self::CODE_SERVICES_IMAGE_BUILDER,
            self::CODE_SERVICES_KUBERNETES,
            self::CODE_SERVICES_NETWORK_REGISTRY,
            self::CODE_SERVICES_VDI_COPY,
            self::CODE_SERVICES_VDI_POOLS,
            self::CODE_SERVICES_VDI_PRINTER,
            self::CODE_SNAPSHOTS,
            self::CODE_TASK_SCRIPTS,
            self::CODE_TASKS,
            self::CODE_TERMINAL,
            self::CODE_TERMINAL_ACCESS,
            self::CODE_TERRAFORM_TEMPLATE,
            self::CODE_THRESHOLDS,
            self::CODE_TRUST_SERVICES,
            self::CODE_VIRTUAL_IMAGES,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAccessAllowableValues()
    {
        return [
            self::ACCESS_FULL,
            self::ACCESS_FULL_DECRYPTED,
            self::ACCESS_GROUP,
            self::ACCESS_LISTFILES,
            self::ACCESS_MANAGERULES,
            self::ACCESS_NO,
            self::ACCESS_NONE,
            self::ACCESS_PROVISION,
            self::ACCESS_READ,
            self::ACCESS_ROLEMAPPINGS,
            self::ACCESS_USER,
            self::ACCESS_VIEW,
            self::ACCESS_YES,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['code'] = $data['code'] ?? null;
        $this->container['access'] = $data['access'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['code'] === null) {
            $invalidProperties[] = "'code' can't be null";
        }
        $allowedValues = $this->getCodeAllowableValues();
        if (!is_null($this->container['code']) && !in_array($this->container['code'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'code', must be one of '%s'",
                $this->container['code'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['access'] === null) {
            $invalidProperties[] = "'access' can't be null";
        }
        $allowedValues = $this->getAccessAllowableValues();
        if (!is_null($this->container['access']) && !in_array($this->container['access'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'access', must be one of '%s'",
                $this->container['access'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code `code` of the feature permission
     *
     * @return self
     */
    public function setCode($code)
    {
        $allowedValues = $this->getCodeAllowableValues();
        if (!in_array($code, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'code', must be one of '%s'",
                    $code,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets access
     *
     * @return string
     */
    public function getAccess()
    {
        return $this->container['access'];
    }

    /**
     * Sets access
     *
     * @param string $access The new access level.
     *
     * @return self
     */
    public function setAccess($access)
    {
        $allowedValues = $this->getAccessAllowableValues();
        if (!in_array($access, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'access', must be one of '%s'",
                    $access,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['access'] = $access;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


