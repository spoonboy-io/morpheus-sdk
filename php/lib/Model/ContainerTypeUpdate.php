<?php
/**
 * ContainerTypeUpdate
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ContainerTypeUpdate Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class ContainerTypeUpdate implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'containerTypeUpdate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'labels' => 'string[]',
        'short_name' => 'string',
        'description' => 'string',
        'container_version' => 'string',
        'provision_type_code' => 'string',
        'scripts' => 'int[]',
        'templates' => 'int[]',
        'virtual_image_id' => 'int',
        'stat_type_code' => 'string',
        'log_type_code' => 'string',
        'server_type' => 'string',
        'container_ports' => '\OpenAPI\Client\Model\ContainerTypeCreateContainerPorts[]',
        'environment_variables' => '\OpenAPI\Client\Model\ClusterLayoutCreateEnvironmentVariables[]',
        'config' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'labels' => null,
        'short_name' => null,
        'description' => null,
        'container_version' => null,
        'provision_type_code' => null,
        'scripts' => 'int64',
        'templates' => 'int64',
        'virtual_image_id' => 'int64',
        'stat_type_code' => null,
        'log_type_code' => null,
        'server_type' => null,
        'container_ports' => null,
        'environment_variables' => null,
        'config' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'labels' => 'labels',
        'short_name' => 'shortName',
        'description' => 'description',
        'container_version' => 'containerVersion',
        'provision_type_code' => 'provisionTypeCode',
        'scripts' => 'scripts',
        'templates' => 'templates',
        'virtual_image_id' => 'virtualImageId',
        'stat_type_code' => 'statTypeCode',
        'log_type_code' => 'logTypeCode',
        'server_type' => 'serverType',
        'container_ports' => 'containerPorts',
        'environment_variables' => 'environmentVariables',
        'config' => 'config'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'labels' => 'setLabels',
        'short_name' => 'setShortName',
        'description' => 'setDescription',
        'container_version' => 'setContainerVersion',
        'provision_type_code' => 'setProvisionTypeCode',
        'scripts' => 'setScripts',
        'templates' => 'setTemplates',
        'virtual_image_id' => 'setVirtualImageId',
        'stat_type_code' => 'setStatTypeCode',
        'log_type_code' => 'setLogTypeCode',
        'server_type' => 'setServerType',
        'container_ports' => 'setContainerPorts',
        'environment_variables' => 'setEnvironmentVariables',
        'config' => 'setConfig'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'labels' => 'getLabels',
        'short_name' => 'getShortName',
        'description' => 'getDescription',
        'container_version' => 'getContainerVersion',
        'provision_type_code' => 'getProvisionTypeCode',
        'scripts' => 'getScripts',
        'templates' => 'getTemplates',
        'virtual_image_id' => 'getVirtualImageId',
        'stat_type_code' => 'getStatTypeCode',
        'log_type_code' => 'getLogTypeCode',
        'server_type' => 'getServerType',
        'container_ports' => 'getContainerPorts',
        'environment_variables' => 'getEnvironmentVariables',
        'config' => 'getConfig'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['labels'] = $data['labels'] ?? null;
        $this->container['short_name'] = $data['short_name'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['container_version'] = $data['container_version'] ?? null;
        $this->container['provision_type_code'] = $data['provision_type_code'] ?? null;
        $this->container['scripts'] = $data['scripts'] ?? null;
        $this->container['templates'] = $data['templates'] ?? null;
        $this->container['virtual_image_id'] = $data['virtual_image_id'] ?? null;
        $this->container['stat_type_code'] = $data['stat_type_code'] ?? null;
        $this->container['log_type_code'] = $data['log_type_code'] ?? null;
        $this->container['server_type'] = $data['server_type'] ?? null;
        $this->container['container_ports'] = $data['container_ports'] ?? null;
        $this->container['environment_variables'] = $data['environment_variables'] ?? null;
        $this->container['config'] = $data['config'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Node type name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets labels
     *
     * @return string[]|null
     */
    public function getLabels()
    {
        return $this->container['labels'];
    }

    /**
     * Sets labels
     *
     * @param string[]|null $labels labels
     *
     * @return self
     */
    public function setLabels($labels)
    {
        $this->container['labels'] = $labels;

        return $this;
    }

    /**
     * Gets short_name
     *
     * @return string|null
     */
    public function getShortName()
    {
        return $this->container['short_name'];
    }

    /**
     * Sets short_name
     *
     * @param string|null $short_name The short name is a name with no spaces used for display in your container list.
     *
     * @return self
     */
    public function setShortName($short_name)
    {
        $this->container['short_name'] = $short_name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Node type description
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets container_version
     *
     * @return string|null
     */
    public function getContainerVersion()
    {
        return $this->container['container_version'];
    }

    /**
     * Sets container_version
     *
     * @param string|null $container_version Version of the node type
     *
     * @return self
     */
    public function setContainerVersion($container_version)
    {
        $this->container['container_version'] = $container_version;

        return $this;
    }

    /**
     * Gets provision_type_code
     *
     * @return string|null
     */
    public function getProvisionTypeCode()
    {
        return $this->container['provision_type_code'];
    }

    /**
     * Sets provision_type_code
     *
     * @param string|null $provision_type_code Provision type code, eg. `amazon`, etc.
     *
     * @return self
     */
    public function setProvisionTypeCode($provision_type_code)
    {
        $this->container['provision_type_code'] = $provision_type_code;

        return $this;
    }

    /**
     * Gets scripts
     *
     * @return int[]|null
     */
    public function getScripts()
    {
        return $this->container['scripts'];
    }

    /**
     * Sets scripts
     *
     * @param int[]|null $scripts Array of script IDs.
     *
     * @return self
     */
    public function setScripts($scripts)
    {
        $this->container['scripts'] = $scripts;

        return $this;
    }

    /**
     * Gets templates
     *
     * @return int[]|null
     */
    public function getTemplates()
    {
        return $this->container['templates'];
    }

    /**
     * Sets templates
     *
     * @param int[]|null $templates Array of file template IDs.
     *
     * @return self
     */
    public function setTemplates($templates)
    {
        $this->container['templates'] = $templates;

        return $this;
    }

    /**
     * Gets virtual_image_id
     *
     * @return int|null
     */
    public function getVirtualImageId()
    {
        return $this->container['virtual_image_id'];
    }

    /**
     * Sets virtual_image_id
     *
     * @param int|null $virtual_image_id Virtual image ID
     *
     * @return self
     */
    public function setVirtualImageId($virtual_image_id)
    {
        $this->container['virtual_image_id'] = $virtual_image_id;

        return $this;
    }

    /**
     * Gets stat_type_code
     *
     * @return string|null
     */
    public function getStatTypeCode()
    {
        return $this->container['stat_type_code'];
    }

    /**
     * Sets stat_type_code
     *
     * @param string|null $stat_type_code Stat type code.  Varies with node type, see Provision Types (customOptionTypes) for allowed values within selected type.
     *
     * @return self
     */
    public function setStatTypeCode($stat_type_code)
    {
        $this->container['stat_type_code'] = $stat_type_code;

        return $this;
    }

    /**
     * Gets log_type_code
     *
     * @return string|null
     */
    public function getLogTypeCode()
    {
        return $this->container['log_type_code'];
    }

    /**
     * Sets log_type_code
     *
     * @param string|null $log_type_code Log type code.  Varies with node type, see Provision Types (customOptionTypes) for allowed values within selected type.
     *
     * @return self
     */
    public function setLogTypeCode($log_type_code)
    {
        $this->container['log_type_code'] = $log_type_code;

        return $this;
    }

    /**
     * Gets server_type
     *
     * @return string|null
     */
    public function getServerType()
    {
        return $this->container['server_type'];
    }

    /**
     * Sets server_type
     *
     * @param string|null $server_type Server type.  Always pass \"vm\".
     *
     * @return self
     */
    public function setServerType($server_type)
    {
        $this->container['server_type'] = $server_type;

        return $this;
    }

    /**
     * Gets container_ports
     *
     * @return \OpenAPI\Client\Model\ContainerTypeCreateContainerPorts[]|null
     */
    public function getContainerPorts()
    {
        return $this->container['container_ports'];
    }

    /**
     * Sets container_ports
     *
     * @param \OpenAPI\Client\Model\ContainerTypeCreateContainerPorts[]|null $container_ports List of exposed port definitions in the format NAME=PORT|PROTOCOL
     *
     * @return self
     */
    public function setContainerPorts($container_ports)
    {
        $this->container['container_ports'] = $container_ports;

        return $this;
    }

    /**
     * Gets environment_variables
     *
     * @return \OpenAPI\Client\Model\ClusterLayoutCreateEnvironmentVariables[]|null
     */
    public function getEnvironmentVariables()
    {
        return $this->container['environment_variables'];
    }

    /**
     * Sets environment_variables
     *
     * @param \OpenAPI\Client\Model\ClusterLayoutCreateEnvironmentVariables[]|null $environment_variables The environmentVariables parameter is array of env objects.
     *
     * @return self
     */
    public function setEnvironmentVariables($environment_variables)
    {
        $this->container['environment_variables'] = $environment_variables;

        return $this;
    }

    /**
     * Gets config
     *
     * @return object|null
     */
    public function getConfig()
    {
        return $this->container['config'];
    }

    /**
     * Sets config
     *
     * @param object|null $config Config object varies with node type.  If using docker, scvmm, ARM, hyperv, or cloudformation, look up provision type details (customOptionTypes) for information.
     *
     * @return self
     */
    public function setConfig($config)
    {
        $this->container['config'] = $config;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


