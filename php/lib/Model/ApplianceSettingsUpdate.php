<?php
/**
 * ApplianceSettingsUpdate
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ApplianceSettingsUpdate Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class ApplianceSettingsUpdate implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'applianceSettingsUpdate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'appliance_url' => 'string',
        'internal_appliance_url' => 'string',
        'cors_allowed' => 'string',
        'registration_enabled' => 'bool',
        'default_role_id' => 'int',
        'default_user_role_id' => 'int',
        'docker_privileged_mode' => 'bool',
        'password_min_length' => 'string',
        'password_min_upper_case' => 'string',
        'password_min_numbers' => 'string',
        'password_min_symbols' => 'string',
        'user_browser_session_timeout' => 'string',
        'user_browser_session_warning' => 'string',
        'expire_pwd_days' => 'int',
        'disable_after_attempts' => 'int',
        'disable_after_days_inactive' => 'int',
        'warn_user_days_before' => 'int',
        'smtp_mail_from' => 'string',
        'smtp_server' => 'string',
        'smtp_port' => 'int',
        'smtp_ssl' => 'bool',
        'smtp_tls' => 'bool',
        'smtp_user' => 'string',
        'smtp_password' => 'string',
        'proxy_host' => 'string',
        'proxy_port' => 'string',
        'proxy_user' => 'string',
        'proxy_password' => 'string',
        'proxy_domain' => 'string',
        'proxy_workstation' => 'string',
        'currency_provider' => 'string',
        'currency_key' => 'string',
        'enable_all_zone_types' => 'bool',
        'enable_zone_types' => 'int[]',
        'disable_zone_types' => 'int[]',
        'disable_all_zone_types' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'appliance_url' => null,
        'internal_appliance_url' => null,
        'cors_allowed' => null,
        'registration_enabled' => null,
        'default_role_id' => 'int64',
        'default_user_role_id' => 'int64',
        'docker_privileged_mode' => null,
        'password_min_length' => null,
        'password_min_upper_case' => null,
        'password_min_numbers' => null,
        'password_min_symbols' => null,
        'user_browser_session_timeout' => null,
        'user_browser_session_warning' => null,
        'expire_pwd_days' => 'int64',
        'disable_after_attempts' => 'int64',
        'disable_after_days_inactive' => 'int64',
        'warn_user_days_before' => 'int64',
        'smtp_mail_from' => null,
        'smtp_server' => null,
        'smtp_port' => 'int64',
        'smtp_ssl' => null,
        'smtp_tls' => null,
        'smtp_user' => null,
        'smtp_password' => null,
        'proxy_host' => null,
        'proxy_port' => null,
        'proxy_user' => null,
        'proxy_password' => null,
        'proxy_domain' => null,
        'proxy_workstation' => null,
        'currency_provider' => null,
        'currency_key' => null,
        'enable_all_zone_types' => null,
        'enable_zone_types' => 'int64',
        'disable_zone_types' => 'int64',
        'disable_all_zone_types' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'appliance_url' => 'applianceUrl',
        'internal_appliance_url' => 'internalApplianceUrl',
        'cors_allowed' => 'corsAllowed',
        'registration_enabled' => 'registrationEnabled',
        'default_role_id' => 'defaultRoleId',
        'default_user_role_id' => 'defaultUserRoleId',
        'docker_privileged_mode' => 'dockerPrivilegedMode',
        'password_min_length' => 'passwordMinLength',
        'password_min_upper_case' => 'passwordMinUpperCase',
        'password_min_numbers' => 'passwordMinNumbers',
        'password_min_symbols' => 'passwordMinSymbols',
        'user_browser_session_timeout' => 'userBrowserSessionTimeout',
        'user_browser_session_warning' => 'userBrowserSessionWarning',
        'expire_pwd_days' => 'expirePwdDays',
        'disable_after_attempts' => 'disableAfterAttempts',
        'disable_after_days_inactive' => 'disableAfterDaysInactive',
        'warn_user_days_before' => 'warnUserDaysBefore',
        'smtp_mail_from' => 'smtpMailFrom',
        'smtp_server' => 'smtpServer',
        'smtp_port' => 'smtpPort',
        'smtp_ssl' => 'smtpSSL',
        'smtp_tls' => 'smtpTLS',
        'smtp_user' => 'smtpUser',
        'smtp_password' => 'smtpPassword',
        'proxy_host' => 'proxyHost',
        'proxy_port' => 'proxyPort',
        'proxy_user' => 'proxyUser',
        'proxy_password' => 'proxyPassword',
        'proxy_domain' => 'proxyDomain',
        'proxy_workstation' => 'proxyWorkstation',
        'currency_provider' => 'currencyProvider',
        'currency_key' => 'currencyKey',
        'enable_all_zone_types' => 'enableAllZoneTypes',
        'enable_zone_types' => 'enableZoneTypes',
        'disable_zone_types' => 'disableZoneTypes',
        'disable_all_zone_types' => 'disableAllZoneTypes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'appliance_url' => 'setApplianceUrl',
        'internal_appliance_url' => 'setInternalApplianceUrl',
        'cors_allowed' => 'setCorsAllowed',
        'registration_enabled' => 'setRegistrationEnabled',
        'default_role_id' => 'setDefaultRoleId',
        'default_user_role_id' => 'setDefaultUserRoleId',
        'docker_privileged_mode' => 'setDockerPrivilegedMode',
        'password_min_length' => 'setPasswordMinLength',
        'password_min_upper_case' => 'setPasswordMinUpperCase',
        'password_min_numbers' => 'setPasswordMinNumbers',
        'password_min_symbols' => 'setPasswordMinSymbols',
        'user_browser_session_timeout' => 'setUserBrowserSessionTimeout',
        'user_browser_session_warning' => 'setUserBrowserSessionWarning',
        'expire_pwd_days' => 'setExpirePwdDays',
        'disable_after_attempts' => 'setDisableAfterAttempts',
        'disable_after_days_inactive' => 'setDisableAfterDaysInactive',
        'warn_user_days_before' => 'setWarnUserDaysBefore',
        'smtp_mail_from' => 'setSmtpMailFrom',
        'smtp_server' => 'setSmtpServer',
        'smtp_port' => 'setSmtpPort',
        'smtp_ssl' => 'setSmtpSsl',
        'smtp_tls' => 'setSmtpTls',
        'smtp_user' => 'setSmtpUser',
        'smtp_password' => 'setSmtpPassword',
        'proxy_host' => 'setProxyHost',
        'proxy_port' => 'setProxyPort',
        'proxy_user' => 'setProxyUser',
        'proxy_password' => 'setProxyPassword',
        'proxy_domain' => 'setProxyDomain',
        'proxy_workstation' => 'setProxyWorkstation',
        'currency_provider' => 'setCurrencyProvider',
        'currency_key' => 'setCurrencyKey',
        'enable_all_zone_types' => 'setEnableAllZoneTypes',
        'enable_zone_types' => 'setEnableZoneTypes',
        'disable_zone_types' => 'setDisableZoneTypes',
        'disable_all_zone_types' => 'setDisableAllZoneTypes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'appliance_url' => 'getApplianceUrl',
        'internal_appliance_url' => 'getInternalApplianceUrl',
        'cors_allowed' => 'getCorsAllowed',
        'registration_enabled' => 'getRegistrationEnabled',
        'default_role_id' => 'getDefaultRoleId',
        'default_user_role_id' => 'getDefaultUserRoleId',
        'docker_privileged_mode' => 'getDockerPrivilegedMode',
        'password_min_length' => 'getPasswordMinLength',
        'password_min_upper_case' => 'getPasswordMinUpperCase',
        'password_min_numbers' => 'getPasswordMinNumbers',
        'password_min_symbols' => 'getPasswordMinSymbols',
        'user_browser_session_timeout' => 'getUserBrowserSessionTimeout',
        'user_browser_session_warning' => 'getUserBrowserSessionWarning',
        'expire_pwd_days' => 'getExpirePwdDays',
        'disable_after_attempts' => 'getDisableAfterAttempts',
        'disable_after_days_inactive' => 'getDisableAfterDaysInactive',
        'warn_user_days_before' => 'getWarnUserDaysBefore',
        'smtp_mail_from' => 'getSmtpMailFrom',
        'smtp_server' => 'getSmtpServer',
        'smtp_port' => 'getSmtpPort',
        'smtp_ssl' => 'getSmtpSsl',
        'smtp_tls' => 'getSmtpTls',
        'smtp_user' => 'getSmtpUser',
        'smtp_password' => 'getSmtpPassword',
        'proxy_host' => 'getProxyHost',
        'proxy_port' => 'getProxyPort',
        'proxy_user' => 'getProxyUser',
        'proxy_password' => 'getProxyPassword',
        'proxy_domain' => 'getProxyDomain',
        'proxy_workstation' => 'getProxyWorkstation',
        'currency_provider' => 'getCurrencyProvider',
        'currency_key' => 'getCurrencyKey',
        'enable_all_zone_types' => 'getEnableAllZoneTypes',
        'enable_zone_types' => 'getEnableZoneTypes',
        'disable_zone_types' => 'getDisableZoneTypes',
        'disable_all_zone_types' => 'getDisableAllZoneTypes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['appliance_url'] = $data['appliance_url'] ?? null;
        $this->container['internal_appliance_url'] = $data['internal_appliance_url'] ?? null;
        $this->container['cors_allowed'] = $data['cors_allowed'] ?? null;
        $this->container['registration_enabled'] = $data['registration_enabled'] ?? null;
        $this->container['default_role_id'] = $data['default_role_id'] ?? null;
        $this->container['default_user_role_id'] = $data['default_user_role_id'] ?? null;
        $this->container['docker_privileged_mode'] = $data['docker_privileged_mode'] ?? null;
        $this->container['password_min_length'] = $data['password_min_length'] ?? null;
        $this->container['password_min_upper_case'] = $data['password_min_upper_case'] ?? null;
        $this->container['password_min_numbers'] = $data['password_min_numbers'] ?? null;
        $this->container['password_min_symbols'] = $data['password_min_symbols'] ?? null;
        $this->container['user_browser_session_timeout'] = $data['user_browser_session_timeout'] ?? null;
        $this->container['user_browser_session_warning'] = $data['user_browser_session_warning'] ?? null;
        $this->container['expire_pwd_days'] = $data['expire_pwd_days'] ?? null;
        $this->container['disable_after_attempts'] = $data['disable_after_attempts'] ?? null;
        $this->container['disable_after_days_inactive'] = $data['disable_after_days_inactive'] ?? null;
        $this->container['warn_user_days_before'] = $data['warn_user_days_before'] ?? null;
        $this->container['smtp_mail_from'] = $data['smtp_mail_from'] ?? null;
        $this->container['smtp_server'] = $data['smtp_server'] ?? null;
        $this->container['smtp_port'] = $data['smtp_port'] ?? null;
        $this->container['smtp_ssl'] = $data['smtp_ssl'] ?? null;
        $this->container['smtp_tls'] = $data['smtp_tls'] ?? null;
        $this->container['smtp_user'] = $data['smtp_user'] ?? null;
        $this->container['smtp_password'] = $data['smtp_password'] ?? null;
        $this->container['proxy_host'] = $data['proxy_host'] ?? null;
        $this->container['proxy_port'] = $data['proxy_port'] ?? null;
        $this->container['proxy_user'] = $data['proxy_user'] ?? null;
        $this->container['proxy_password'] = $data['proxy_password'] ?? null;
        $this->container['proxy_domain'] = $data['proxy_domain'] ?? null;
        $this->container['proxy_workstation'] = $data['proxy_workstation'] ?? null;
        $this->container['currency_provider'] = $data['currency_provider'] ?? null;
        $this->container['currency_key'] = $data['currency_key'] ?? null;
        $this->container['enable_all_zone_types'] = $data['enable_all_zone_types'] ?? null;
        $this->container['enable_zone_types'] = $data['enable_zone_types'] ?? null;
        $this->container['disable_zone_types'] = $data['disable_zone_types'] ?? null;
        $this->container['disable_all_zone_types'] = $data['disable_all_zone_types'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets appliance_url
     *
     * @return string|null
     */
    public function getApplianceUrl()
    {
        return $this->container['appliance_url'];
    }

    /**
     * Sets appliance_url
     *
     * @param string|null $appliance_url Appliance URL
     *
     * @return self
     */
    public function setApplianceUrl($appliance_url)
    {
        $this->container['appliance_url'] = $appliance_url;

        return $this;
    }

    /**
     * Gets internal_appliance_url
     *
     * @return string|null
     */
    public function getInternalApplianceUrl()
    {
        return $this->container['internal_appliance_url'];
    }

    /**
     * Sets internal_appliance_url
     *
     * @param string|null $internal_appliance_url Internal Appliance URL (PXE)
     *
     * @return self
     */
    public function setInternalApplianceUrl($internal_appliance_url)
    {
        $this->container['internal_appliance_url'] = $internal_appliance_url;

        return $this;
    }

    /**
     * Gets cors_allowed
     *
     * @return string|null
     */
    public function getCorsAllowed()
    {
        return $this->container['cors_allowed'];
    }

    /**
     * Sets cors_allowed
     *
     * @param string|null $cors_allowed API Allowed Origins
     *
     * @return self
     */
    public function setCorsAllowed($cors_allowed)
    {
        $this->container['cors_allowed'] = $cors_allowed;

        return $this;
    }

    /**
     * Gets registration_enabled
     *
     * @return bool|null
     */
    public function getRegistrationEnabled()
    {
        return $this->container['registration_enabled'];
    }

    /**
     * Sets registration_enabled
     *
     * @param bool|null $registration_enabled Registration enabled (true, false)
     *
     * @return self
     */
    public function setRegistrationEnabled($registration_enabled)
    {
        $this->container['registration_enabled'] = $registration_enabled;

        return $this;
    }

    /**
     * Gets default_role_id
     *
     * @return int|null
     */
    public function getDefaultRoleId()
    {
        return $this->container['default_role_id'];
    }

    /**
     * Sets default_role_id
     *
     * @param int|null $default_role_id Default tenant role ID
     *
     * @return self
     */
    public function setDefaultRoleId($default_role_id)
    {
        $this->container['default_role_id'] = $default_role_id;

        return $this;
    }

    /**
     * Gets default_user_role_id
     *
     * @return int|null
     */
    public function getDefaultUserRoleId()
    {
        return $this->container['default_user_role_id'];
    }

    /**
     * Sets default_user_role_id
     *
     * @param int|null $default_user_role_id Default user role ID
     *
     * @return self
     */
    public function setDefaultUserRoleId($default_user_role_id)
    {
        $this->container['default_user_role_id'] = $default_user_role_id;

        return $this;
    }

    /**
     * Gets docker_privileged_mode
     *
     * @return bool|null
     */
    public function getDockerPrivilegedMode()
    {
        return $this->container['docker_privileged_mode'];
    }

    /**
     * Sets docker_privileged_mode
     *
     * @param bool|null $docker_privileged_mode Docker privileged mode (true, false)
     *
     * @return self
     */
    public function setDockerPrivilegedMode($docker_privileged_mode)
    {
        $this->container['docker_privileged_mode'] = $docker_privileged_mode;

        return $this;
    }

    /**
     * Gets password_min_length
     *
     * @return string|null
     */
    public function getPasswordMinLength()
    {
        return $this->container['password_min_length'];
    }

    /**
     * Sets password_min_length
     *
     * @param string|null $password_min_length Min Password Length
     *
     * @return self
     */
    public function setPasswordMinLength($password_min_length)
    {
        $this->container['password_min_length'] = $password_min_length;

        return $this;
    }

    /**
     * Gets password_min_upper_case
     *
     * @return string|null
     */
    public function getPasswordMinUpperCase()
    {
        return $this->container['password_min_upper_case'];
    }

    /**
     * Sets password_min_upper_case
     *
     * @param string|null $password_min_upper_case Min Password Uppercase
     *
     * @return self
     */
    public function setPasswordMinUpperCase($password_min_upper_case)
    {
        $this->container['password_min_upper_case'] = $password_min_upper_case;

        return $this;
    }

    /**
     * Gets password_min_numbers
     *
     * @return string|null
     */
    public function getPasswordMinNumbers()
    {
        return $this->container['password_min_numbers'];
    }

    /**
     * Sets password_min_numbers
     *
     * @param string|null $password_min_numbers Min Password Numbers
     *
     * @return self
     */
    public function setPasswordMinNumbers($password_min_numbers)
    {
        $this->container['password_min_numbers'] = $password_min_numbers;

        return $this;
    }

    /**
     * Gets password_min_symbols
     *
     * @return string|null
     */
    public function getPasswordMinSymbols()
    {
        return $this->container['password_min_symbols'];
    }

    /**
     * Sets password_min_symbols
     *
     * @param string|null $password_min_symbols Min Password Symbols
     *
     * @return self
     */
    public function setPasswordMinSymbols($password_min_symbols)
    {
        $this->container['password_min_symbols'] = $password_min_symbols;

        return $this;
    }

    /**
     * Gets user_browser_session_timeout
     *
     * @return string|null
     */
    public function getUserBrowserSessionTimeout()
    {
        return $this->container['user_browser_session_timeout'];
    }

    /**
     * Sets user_browser_session_timeout
     *
     * @param string|null $user_browser_session_timeout User Browser Session Timeout (Minutes)
     *
     * @return self
     */
    public function setUserBrowserSessionTimeout($user_browser_session_timeout)
    {
        $this->container['user_browser_session_timeout'] = $user_browser_session_timeout;

        return $this;
    }

    /**
     * Gets user_browser_session_warning
     *
     * @return string|null
     */
    public function getUserBrowserSessionWarning()
    {
        return $this->container['user_browser_session_warning'];
    }

    /**
     * Sets user_browser_session_warning
     *
     * @param string|null $user_browser_session_warning User Browser Session Warning (Minutes)
     *
     * @return self
     */
    public function setUserBrowserSessionWarning($user_browser_session_warning)
    {
        $this->container['user_browser_session_warning'] = $user_browser_session_warning;

        return $this;
    }

    /**
     * Gets expire_pwd_days
     *
     * @return int|null
     */
    public function getExpirePwdDays()
    {
        return $this->container['expire_pwd_days'];
    }

    /**
     * Sets expire_pwd_days
     *
     * @param int|null $expire_pwd_days Expire password after days. Setting to 0 disabled this feature
     *
     * @return self
     */
    public function setExpirePwdDays($expire_pwd_days)
    {
        $this->container['expire_pwd_days'] = $expire_pwd_days;

        return $this;
    }

    /**
     * Gets disable_after_attempts
     *
     * @return int|null
     */
    public function getDisableAfterAttempts()
    {
        return $this->container['disable_after_attempts'];
    }

    /**
     * Sets disable_after_attempts
     *
     * @param int|null $disable_after_attempts Disable user after number of attempts. Set to 0 to disable this feature
     *
     * @return self
     */
    public function setDisableAfterAttempts($disable_after_attempts)
    {
        $this->container['disable_after_attempts'] = $disable_after_attempts;

        return $this;
    }

    /**
     * Gets disable_after_days_inactive
     *
     * @return int|null
     */
    public function getDisableAfterDaysInactive()
    {
        return $this->container['disable_after_days_inactive'];
    }

    /**
     * Sets disable_after_days_inactive
     *
     * @param int|null $disable_after_days_inactive Disable user if inactive for specified days. Set to 0 to disable this feature
     *
     * @return self
     */
    public function setDisableAfterDaysInactive($disable_after_days_inactive)
    {
        $this->container['disable_after_days_inactive'] = $disable_after_days_inactive;

        return $this;
    }

    /**
     * Gets warn_user_days_before
     *
     * @return int|null
     */
    public function getWarnUserDaysBefore()
    {
        return $this->container['warn_user_days_before'];
    }

    /**
     * Sets warn_user_days_before
     *
     * @param int|null $warn_user_days_before Send warning email number of days in advance before deactivating. Set to 0 to disable this feature
     *
     * @return self
     */
    public function setWarnUserDaysBefore($warn_user_days_before)
    {
        $this->container['warn_user_days_before'] = $warn_user_days_before;

        return $this;
    }

    /**
     * Gets smtp_mail_from
     *
     * @return string|null
     */
    public function getSmtpMailFrom()
    {
        return $this->container['smtp_mail_from'];
    }

    /**
     * Sets smtp_mail_from
     *
     * @param string|null $smtp_mail_from From email address
     *
     * @return self
     */
    public function setSmtpMailFrom($smtp_mail_from)
    {
        $this->container['smtp_mail_from'] = $smtp_mail_from;

        return $this;
    }

    /**
     * Gets smtp_server
     *
     * @return string|null
     */
    public function getSmtpServer()
    {
        return $this->container['smtp_server'];
    }

    /**
     * Sets smtp_server
     *
     * @param string|null $smtp_server SMTP server / host
     *
     * @return self
     */
    public function setSmtpServer($smtp_server)
    {
        $this->container['smtp_server'] = $smtp_server;

        return $this;
    }

    /**
     * Gets smtp_port
     *
     * @return int|null
     */
    public function getSmtpPort()
    {
        return $this->container['smtp_port'];
    }

    /**
     * Sets smtp_port
     *
     * @param int|null $smtp_port SMTP port
     *
     * @return self
     */
    public function setSmtpPort($smtp_port)
    {
        $this->container['smtp_port'] = $smtp_port;

        return $this;
    }

    /**
     * Gets smtp_ssl
     *
     * @return bool|null
     */
    public function getSmtpSsl()
    {
        return $this->container['smtp_ssl'];
    }

    /**
     * Sets smtp_ssl
     *
     * @param bool|null $smtp_ssl Use SSL for SMTP connection
     *
     * @return self
     */
    public function setSmtpSsl($smtp_ssl)
    {
        $this->container['smtp_ssl'] = $smtp_ssl;

        return $this;
    }

    /**
     * Gets smtp_tls
     *
     * @return bool|null
     */
    public function getSmtpTls()
    {
        return $this->container['smtp_tls'];
    }

    /**
     * Sets smtp_tls
     *
     * @param bool|null $smtp_tls Use TLS for SMTP connections
     *
     * @return self
     */
    public function setSmtpTls($smtp_tls)
    {
        $this->container['smtp_tls'] = $smtp_tls;

        return $this;
    }

    /**
     * Gets smtp_user
     *
     * @return string|null
     */
    public function getSmtpUser()
    {
        return $this->container['smtp_user'];
    }

    /**
     * Sets smtp_user
     *
     * @param string|null $smtp_user SMTP username
     *
     * @return self
     */
    public function setSmtpUser($smtp_user)
    {
        $this->container['smtp_user'] = $smtp_user;

        return $this;
    }

    /**
     * Gets smtp_password
     *
     * @return string|null
     */
    public function getSmtpPassword()
    {
        return $this->container['smtp_password'];
    }

    /**
     * Sets smtp_password
     *
     * @param string|null $smtp_password SMTP password
     *
     * @return self
     */
    public function setSmtpPassword($smtp_password)
    {
        $this->container['smtp_password'] = $smtp_password;

        return $this;
    }

    /**
     * Gets proxy_host
     *
     * @return string|null
     */
    public function getProxyHost()
    {
        return $this->container['proxy_host'];
    }

    /**
     * Sets proxy_host
     *
     * @param string|null $proxy_host Proxy host
     *
     * @return self
     */
    public function setProxyHost($proxy_host)
    {
        $this->container['proxy_host'] = $proxy_host;

        return $this;
    }

    /**
     * Gets proxy_port
     *
     * @return string|null
     */
    public function getProxyPort()
    {
        return $this->container['proxy_port'];
    }

    /**
     * Sets proxy_port
     *
     * @param string|null $proxy_port Proxy port
     *
     * @return self
     */
    public function setProxyPort($proxy_port)
    {
        $this->container['proxy_port'] = $proxy_port;

        return $this;
    }

    /**
     * Gets proxy_user
     *
     * @return string|null
     */
    public function getProxyUser()
    {
        return $this->container['proxy_user'];
    }

    /**
     * Sets proxy_user
     *
     * @param string|null $proxy_user Proxy username
     *
     * @return self
     */
    public function setProxyUser($proxy_user)
    {
        $this->container['proxy_user'] = $proxy_user;

        return $this;
    }

    /**
     * Gets proxy_password
     *
     * @return string|null
     */
    public function getProxyPassword()
    {
        return $this->container['proxy_password'];
    }

    /**
     * Sets proxy_password
     *
     * @param string|null $proxy_password Proxy password
     *
     * @return self
     */
    public function setProxyPassword($proxy_password)
    {
        $this->container['proxy_password'] = $proxy_password;

        return $this;
    }

    /**
     * Gets proxy_domain
     *
     * @return string|null
     */
    public function getProxyDomain()
    {
        return $this->container['proxy_domain'];
    }

    /**
     * Sets proxy_domain
     *
     * @param string|null $proxy_domain Proxy domain
     *
     * @return self
     */
    public function setProxyDomain($proxy_domain)
    {
        $this->container['proxy_domain'] = $proxy_domain;

        return $this;
    }

    /**
     * Gets proxy_workstation
     *
     * @return string|null
     */
    public function getProxyWorkstation()
    {
        return $this->container['proxy_workstation'];
    }

    /**
     * Sets proxy_workstation
     *
     * @param string|null $proxy_workstation Proxy workstation
     *
     * @return self
     */
    public function setProxyWorkstation($proxy_workstation)
    {
        $this->container['proxy_workstation'] = $proxy_workstation;

        return $this;
    }

    /**
     * Gets currency_provider
     *
     * @return string|null
     */
    public function getCurrencyProvider()
    {
        return $this->container['currency_provider'];
    }

    /**
     * Sets currency_provider
     *
     * @param string|null $currency_provider Currency provider
     *
     * @return self
     */
    public function setCurrencyProvider($currency_provider)
    {
        $this->container['currency_provider'] = $currency_provider;

        return $this;
    }

    /**
     * Gets currency_key
     *
     * @return string|null
     */
    public function getCurrencyKey()
    {
        return $this->container['currency_key'];
    }

    /**
     * Sets currency_key
     *
     * @param string|null $currency_key Currency provider API key
     *
     * @return self
     */
    public function setCurrencyKey($currency_key)
    {
        $this->container['currency_key'] = $currency_key;

        return $this;
    }

    /**
     * Gets enable_all_zone_types
     *
     * @return bool|null
     */
    public function getEnableAllZoneTypes()
    {
        return $this->container['enable_all_zone_types'];
    }

    /**
     * Sets enable_all_zone_types
     *
     * @param bool|null $enable_all_zone_types Set all cloud types enabled status on, overrides enableZoneTypes and disableZoneTypes parameters
     *
     * @return self
     */
    public function setEnableAllZoneTypes($enable_all_zone_types)
    {
        $this->container['enable_all_zone_types'] = $enable_all_zone_types;

        return $this;
    }

    /**
     * Gets enable_zone_types
     *
     * @return int[]|null
     */
    public function getEnableZoneTypes()
    {
        return $this->container['enable_zone_types'];
    }

    /**
     * Sets enable_zone_types
     *
     * @param int[]|null $enable_zone_types List of cloud type IDs to set enabled status on
     *
     * @return self
     */
    public function setEnableZoneTypes($enable_zone_types)
    {
        $this->container['enable_zone_types'] = $enable_zone_types;

        return $this;
    }

    /**
     * Gets disable_zone_types
     *
     * @return int[]|null
     */
    public function getDisableZoneTypes()
    {
        return $this->container['disable_zone_types'];
    }

    /**
     * Sets disable_zone_types
     *
     * @param int[]|null $disable_zone_types List of cloud type IDs to set enabled status off
     *
     * @return self
     */
    public function setDisableZoneTypes($disable_zone_types)
    {
        $this->container['disable_zone_types'] = $disable_zone_types;

        return $this;
    }

    /**
     * Gets disable_all_zone_types
     *
     * @return bool|null
     */
    public function getDisableAllZoneTypes()
    {
        return $this->container['disable_all_zone_types'];
    }

    /**
     * Sets disable_all_zone_types
     *
     * @param bool|null $disable_all_zone_types Set all cloud types enabled status off, can be used in conjunction with enableZoneTypes
     *
     * @return self
     */
    public function setDisableAllZoneTypes($disable_all_zone_types)
    {
        $this->container['disable_all_zone_types'] = $disable_all_zone_types;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


