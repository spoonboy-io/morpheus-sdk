<?php
/**
 * ExecutionRequest
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ExecutionRequest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class ExecutionRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'executionRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'unique_id' => 'string',
        'container_id' => 'string',
        'server_id' => 'string',
        'instance_id' => 'int',
        'resource_id' => 'string',
        'app_id' => 'string',
        'std_out' => 'string',
        'std_err' => 'string',
        'exit_code' => 'int',
        'status' => 'string',
        'expires_at' => '\DateTime',
        'created_by_id' => 'int',
        'status_message' => 'string',
        'error_message' => 'string',
        'config' => 'object',
        'raw_data' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'unique_id' => null,
        'container_id' => null,
        'server_id' => null,
        'instance_id' => 'int64',
        'resource_id' => null,
        'app_id' => null,
        'std_out' => null,
        'std_err' => null,
        'exit_code' => 'int64',
        'status' => null,
        'expires_at' => 'date-time',
        'created_by_id' => 'int64',
        'status_message' => null,
        'error_message' => null,
        'config' => null,
        'raw_data' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'unique_id' => 'uniqueId',
        'container_id' => 'containerId',
        'server_id' => 'serverId',
        'instance_id' => 'instanceId',
        'resource_id' => 'resourceId',
        'app_id' => 'appId',
        'std_out' => 'stdOut',
        'std_err' => 'stdErr',
        'exit_code' => 'exitCode',
        'status' => 'status',
        'expires_at' => 'expiresAt',
        'created_by_id' => 'createdById',
        'status_message' => 'statusMessage',
        'error_message' => 'errorMessage',
        'config' => 'config',
        'raw_data' => 'rawData'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'unique_id' => 'setUniqueId',
        'container_id' => 'setContainerId',
        'server_id' => 'setServerId',
        'instance_id' => 'setInstanceId',
        'resource_id' => 'setResourceId',
        'app_id' => 'setAppId',
        'std_out' => 'setStdOut',
        'std_err' => 'setStdErr',
        'exit_code' => 'setExitCode',
        'status' => 'setStatus',
        'expires_at' => 'setExpiresAt',
        'created_by_id' => 'setCreatedById',
        'status_message' => 'setStatusMessage',
        'error_message' => 'setErrorMessage',
        'config' => 'setConfig',
        'raw_data' => 'setRawData'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'unique_id' => 'getUniqueId',
        'container_id' => 'getContainerId',
        'server_id' => 'getServerId',
        'instance_id' => 'getInstanceId',
        'resource_id' => 'getResourceId',
        'app_id' => 'getAppId',
        'std_out' => 'getStdOut',
        'std_err' => 'getStdErr',
        'exit_code' => 'getExitCode',
        'status' => 'getStatus',
        'expires_at' => 'getExpiresAt',
        'created_by_id' => 'getCreatedById',
        'status_message' => 'getStatusMessage',
        'error_message' => 'getErrorMessage',
        'config' => 'getConfig',
        'raw_data' => 'getRawData'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['unique_id'] = $data['unique_id'] ?? null;
        $this->container['container_id'] = $data['container_id'] ?? null;
        $this->container['server_id'] = $data['server_id'] ?? null;
        $this->container['instance_id'] = $data['instance_id'] ?? null;
        $this->container['resource_id'] = $data['resource_id'] ?? null;
        $this->container['app_id'] = $data['app_id'] ?? null;
        $this->container['std_out'] = $data['std_out'] ?? null;
        $this->container['std_err'] = $data['std_err'] ?? null;
        $this->container['exit_code'] = $data['exit_code'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['expires_at'] = $data['expires_at'] ?? null;
        $this->container['created_by_id'] = $data['created_by_id'] ?? null;
        $this->container['status_message'] = $data['status_message'] ?? null;
        $this->container['error_message'] = $data['error_message'] ?? null;
        $this->container['config'] = $data['config'] ?? null;
        $this->container['raw_data'] = $data['raw_data'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets unique_id
     *
     * @return string|null
     */
    public function getUniqueId()
    {
        return $this->container['unique_id'];
    }

    /**
     * Sets unique_id
     *
     * @param string|null $unique_id unique_id
     *
     * @return self
     */
    public function setUniqueId($unique_id)
    {
        $this->container['unique_id'] = $unique_id;

        return $this;
    }

    /**
     * Gets container_id
     *
     * @return string|null
     */
    public function getContainerId()
    {
        return $this->container['container_id'];
    }

    /**
     * Sets container_id
     *
     * @param string|null $container_id container_id
     *
     * @return self
     */
    public function setContainerId($container_id)
    {
        $this->container['container_id'] = $container_id;

        return $this;
    }

    /**
     * Gets server_id
     *
     * @return string|null
     */
    public function getServerId()
    {
        return $this->container['server_id'];
    }

    /**
     * Sets server_id
     *
     * @param string|null $server_id server_id
     *
     * @return self
     */
    public function setServerId($server_id)
    {
        $this->container['server_id'] = $server_id;

        return $this;
    }

    /**
     * Gets instance_id
     *
     * @return int|null
     */
    public function getInstanceId()
    {
        return $this->container['instance_id'];
    }

    /**
     * Sets instance_id
     *
     * @param int|null $instance_id instance_id
     *
     * @return self
     */
    public function setInstanceId($instance_id)
    {
        $this->container['instance_id'] = $instance_id;

        return $this;
    }

    /**
     * Gets resource_id
     *
     * @return string|null
     */
    public function getResourceId()
    {
        return $this->container['resource_id'];
    }

    /**
     * Sets resource_id
     *
     * @param string|null $resource_id resource_id
     *
     * @return self
     */
    public function setResourceId($resource_id)
    {
        $this->container['resource_id'] = $resource_id;

        return $this;
    }

    /**
     * Gets app_id
     *
     * @return string|null
     */
    public function getAppId()
    {
        return $this->container['app_id'];
    }

    /**
     * Sets app_id
     *
     * @param string|null $app_id app_id
     *
     * @return self
     */
    public function setAppId($app_id)
    {
        $this->container['app_id'] = $app_id;

        return $this;
    }

    /**
     * Gets std_out
     *
     * @return string|null
     */
    public function getStdOut()
    {
        return $this->container['std_out'];
    }

    /**
     * Sets std_out
     *
     * @param string|null $std_out std_out
     *
     * @return self
     */
    public function setStdOut($std_out)
    {
        $this->container['std_out'] = $std_out;

        return $this;
    }

    /**
     * Gets std_err
     *
     * @return string|null
     */
    public function getStdErr()
    {
        return $this->container['std_err'];
    }

    /**
     * Sets std_err
     *
     * @param string|null $std_err std_err
     *
     * @return self
     */
    public function setStdErr($std_err)
    {
        $this->container['std_err'] = $std_err;

        return $this;
    }

    /**
     * Gets exit_code
     *
     * @return int|null
     */
    public function getExitCode()
    {
        return $this->container['exit_code'];
    }

    /**
     * Sets exit_code
     *
     * @param int|null $exit_code exit_code
     *
     * @return self
     */
    public function setExitCode($exit_code)
    {
        $this->container['exit_code'] = $exit_code;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets expires_at
     *
     * @return \DateTime|null
     */
    public function getExpiresAt()
    {
        return $this->container['expires_at'];
    }

    /**
     * Sets expires_at
     *
     * @param \DateTime|null $expires_at expires_at
     *
     * @return self
     */
    public function setExpiresAt($expires_at)
    {
        $this->container['expires_at'] = $expires_at;

        return $this;
    }

    /**
     * Gets created_by_id
     *
     * @return int|null
     */
    public function getCreatedById()
    {
        return $this->container['created_by_id'];
    }

    /**
     * Sets created_by_id
     *
     * @param int|null $created_by_id created_by_id
     *
     * @return self
     */
    public function setCreatedById($created_by_id)
    {
        $this->container['created_by_id'] = $created_by_id;

        return $this;
    }

    /**
     * Gets status_message
     *
     * @return string|null
     */
    public function getStatusMessage()
    {
        return $this->container['status_message'];
    }

    /**
     * Sets status_message
     *
     * @param string|null $status_message status_message
     *
     * @return self
     */
    public function setStatusMessage($status_message)
    {
        $this->container['status_message'] = $status_message;

        return $this;
    }

    /**
     * Gets error_message
     *
     * @return string|null
     */
    public function getErrorMessage()
    {
        return $this->container['error_message'];
    }

    /**
     * Sets error_message
     *
     * @param string|null $error_message error_message
     *
     * @return self
     */
    public function setErrorMessage($error_message)
    {
        $this->container['error_message'] = $error_message;

        return $this;
    }

    /**
     * Gets config
     *
     * @return object|null
     */
    public function getConfig()
    {
        return $this->container['config'];
    }

    /**
     * Sets config
     *
     * @param object|null $config config
     *
     * @return self
     */
    public function setConfig($config)
    {
        $this->container['config'] = $config;

        return $this;
    }

    /**
     * Gets raw_data
     *
     * @return string|null
     */
    public function getRawData()
    {
        return $this->container['raw_data'];
    }

    /**
     * Sets raw_data
     *
     * @param string|null $raw_data raw_data
     *
     * @return self
     */
    public function setRawData($raw_data)
    {
        $this->container['raw_data'] = $raw_data;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


