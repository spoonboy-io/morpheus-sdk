<?php
/**
 * ApiBudgetsBudget
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ApiBudgetsBudget Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class ApiBudgetsBudget implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_api_budgets_budget';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'description' => 'string',
        'scope' => 'string',
        'period' => 'string',
        'year' => 'int',
        'start_date' => '\DateTime',
        'end_date' => '\DateTime',
        'interval' => 'string',
        'scope_tenant_id' => 'int',
        'scope_group_id' => 'int',
        'scope_cloud_id' => 'int',
        'scope_user_id' => 'int',
        'costs' => 'int[]',
        'enabled' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'description' => null,
        'scope' => null,
        'period' => null,
        'year' => 'int64',
        'start_date' => 'date-time',
        'end_date' => 'date-time',
        'interval' => null,
        'scope_tenant_id' => 'int64',
        'scope_group_id' => 'int64',
        'scope_cloud_id' => 'int64',
        'scope_user_id' => 'int64',
        'costs' => 'int64',
        'enabled' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'description' => 'description',
        'scope' => 'scope',
        'period' => 'period',
        'year' => 'year',
        'start_date' => 'startDate',
        'end_date' => 'endDate',
        'interval' => 'interval',
        'scope_tenant_id' => 'scopeTenantId',
        'scope_group_id' => 'scopeGroupId',
        'scope_cloud_id' => 'scopeCloudId',
        'scope_user_id' => 'scopeUserId',
        'costs' => 'costs',
        'enabled' => 'enabled'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'description' => 'setDescription',
        'scope' => 'setScope',
        'period' => 'setPeriod',
        'year' => 'setYear',
        'start_date' => 'setStartDate',
        'end_date' => 'setEndDate',
        'interval' => 'setInterval',
        'scope_tenant_id' => 'setScopeTenantId',
        'scope_group_id' => 'setScopeGroupId',
        'scope_cloud_id' => 'setScopeCloudId',
        'scope_user_id' => 'setScopeUserId',
        'costs' => 'setCosts',
        'enabled' => 'setEnabled'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'description' => 'getDescription',
        'scope' => 'getScope',
        'period' => 'getPeriod',
        'year' => 'getYear',
        'start_date' => 'getStartDate',
        'end_date' => 'getEndDate',
        'interval' => 'getInterval',
        'scope_tenant_id' => 'getScopeTenantId',
        'scope_group_id' => 'getScopeGroupId',
        'scope_cloud_id' => 'getScopeCloudId',
        'scope_user_id' => 'getScopeUserId',
        'costs' => 'getCosts',
        'enabled' => 'getEnabled'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const SCOPE_ACCOUNT = 'account';
    const SCOPE_GROUP = 'group';
    const SCOPE_CLOUD = 'cloud';
    const SCOPE_USER = 'user';
    const INTERVAL_YEAR = 'year';
    const INTERVAL_QUARTER = 'quarter';
    const INTERVAL_MONTH = 'month';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getScopeAllowableValues()
    {
        return [
            self::SCOPE_ACCOUNT,
            self::SCOPE_GROUP,
            self::SCOPE_CLOUD,
            self::SCOPE_USER,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIntervalAllowableValues()
    {
        return [
            self::INTERVAL_YEAR,
            self::INTERVAL_QUARTER,
            self::INTERVAL_MONTH,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['scope'] = $data['scope'] ?? 'account';
        $this->container['period'] = $data['period'] ?? 'year';
        $this->container['year'] = $data['year'] ?? null;
        $this->container['start_date'] = $data['start_date'] ?? null;
        $this->container['end_date'] = $data['end_date'] ?? null;
        $this->container['interval'] = $data['interval'] ?? 'year';
        $this->container['scope_tenant_id'] = $data['scope_tenant_id'] ?? null;
        $this->container['scope_group_id'] = $data['scope_group_id'] ?? null;
        $this->container['scope_cloud_id'] = $data['scope_cloud_id'] ?? null;
        $this->container['scope_user_id'] = $data['scope_user_id'] ?? null;
        $this->container['costs'] = $data['costs'] ?? null;
        $this->container['enabled'] = $data['enabled'] ?? true;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        $allowedValues = $this->getScopeAllowableValues();
        if (!is_null($this->container['scope']) && !in_array($this->container['scope'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'scope', must be one of '%s'",
                $this->container['scope'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIntervalAllowableValues();
        if (!is_null($this->container['interval']) && !in_array($this->container['interval'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'interval', must be one of '%s'",
                $this->container['interval'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets scope
     *
     * @return string|null
     */
    public function getScope()
    {
        return $this->container['scope'];
    }

    /**
     * Sets scope
     *
     * @param string|null $scope scope
     *
     * @return self
     */
    public function setScope($scope)
    {
        $allowedValues = $this->getScopeAllowableValues();
        if (!is_null($scope) && !in_array($scope, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'scope', must be one of '%s'",
                    $scope,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['scope'] = $scope;

        return $this;
    }

    /**
     * Gets period
     *
     * @return string|null
     */
    public function getPeriod()
    {
        return $this->container['period'];
    }

    /**
     * Sets period
     *
     * @param string|null $period period
     *
     * @return self
     */
    public function setPeriod($period)
    {
        $this->container['period'] = $period;

        return $this;
    }

    /**
     * Gets year
     *
     * @return int|null
     */
    public function getYear()
    {
        return $this->container['year'];
    }

    /**
     * Sets year
     *
     * @param int|null $year year
     *
     * @return self
     */
    public function setYear($year)
    {
        $this->container['year'] = $year;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return \DateTime|null
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime|null $start_date start_date
     *
     * @return self
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime|null
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime|null $end_date end_date
     *
     * @return self
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets interval
     *
     * @return string|null
     */
    public function getInterval()
    {
        return $this->container['interval'];
    }

    /**
     * Sets interval
     *
     * @param string|null $interval interval
     *
     * @return self
     */
    public function setInterval($interval)
    {
        $allowedValues = $this->getIntervalAllowableValues();
        if (!is_null($interval) && !in_array($interval, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'interval', must be one of '%s'",
                    $interval,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['interval'] = $interval;

        return $this;
    }

    /**
     * Gets scope_tenant_id
     *
     * @return int|null
     */
    public function getScopeTenantId()
    {
        return $this->container['scope_tenant_id'];
    }

    /**
     * Sets scope_tenant_id
     *
     * @param int|null $scope_tenant_id The Tenant ID to scope to, for use with ``scope``=tenant
     *
     * @return self
     */
    public function setScopeTenantId($scope_tenant_id)
    {
        $this->container['scope_tenant_id'] = $scope_tenant_id;

        return $this;
    }

    /**
     * Gets scope_group_id
     *
     * @return int|null
     */
    public function getScopeGroupId()
    {
        return $this->container['scope_group_id'];
    }

    /**
     * Sets scope_group_id
     *
     * @param int|null $scope_group_id The Tenant ID to scope to, for use with ``scope``=group
     *
     * @return self
     */
    public function setScopeGroupId($scope_group_id)
    {
        $this->container['scope_group_id'] = $scope_group_id;

        return $this;
    }

    /**
     * Gets scope_cloud_id
     *
     * @return int|null
     */
    public function getScopeCloudId()
    {
        return $this->container['scope_cloud_id'];
    }

    /**
     * Sets scope_cloud_id
     *
     * @param int|null $scope_cloud_id The Tenant ID to scope to, for use with ``scope``=cloud
     *
     * @return self
     */
    public function setScopeCloudId($scope_cloud_id)
    {
        $this->container['scope_cloud_id'] = $scope_cloud_id;

        return $this;
    }

    /**
     * Gets scope_user_id
     *
     * @return int|null
     */
    public function getScopeUserId()
    {
        return $this->container['scope_user_id'];
    }

    /**
     * Sets scope_user_id
     *
     * @param int|null $scope_user_id The Tenant ID to scope to, for use with ``scope``=user
     *
     * @return self
     */
    public function setScopeUserId($scope_user_id)
    {
        $this->container['scope_user_id'] = $scope_user_id;

        return $this;
    }

    /**
     * Gets costs
     *
     * @return int[]|null
     */
    public function getCosts()
    {
        return $this->container['costs'];
    }

    /**
     * Sets costs
     *
     * @param int[]|null $costs costs
     *
     * @return self
     */
    public function setCosts($costs)
    {
        $this->container['costs'] = $costs;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool|null
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool|null $enabled enabled
     *
     * @return self
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


