<?php
/**
 * ApiRolesIdRole
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ApiRolesIdRole Class Doc Comment
 *
 * @category Class
 * @description Payload for updating an existing role
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class ApiRolesIdRole implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_api_roles__id__role';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'authority' => 'string',
        'description' => 'string',
        'default_persona' => 'string',
        'permissions' => '\OpenAPI\Client\Model\ApiRolesRolePermissions[]',
        'global_site_access' => 'string',
        'sites' => '\OpenAPI\Client\Model\ApiRolesRoleSites[]',
        'global_zone_access' => 'string',
        'zones' => '\OpenAPI\Client\Model\ApiRolesRoleZones[]',
        'global_instance_type_access' => 'string',
        'instance_types' => '\OpenAPI\Client\Model\ApiRolesRoleInstanceTypes[]',
        'global_app_template_access' => 'string',
        'app_templates' => '\OpenAPI\Client\Model\ApiRolesRoleAppTemplates[]',
        'global_catalog_item_type_access' => 'string',
        'catalog_item_types' => '\OpenAPI\Client\Model\ApiRolesRoleCatalogItemTypes[]',
        'global_persona_access' => 'string',
        'personas' => '\OpenAPI\Client\Model\ApiRolesRolePersonas[]',
        'global_vdi_pool_access' => 'string',
        'vdi_pools' => '\OpenAPI\Client\Model\ApiRolesRoleVdiPools[]',
        'global_report_type_access' => 'string',
        'report_types' => '\OpenAPI\Client\Model\ApiRolesRoleReportTypes[]',
        'global_task_access' => 'string',
        'tasks' => '\OpenAPI\Client\Model\ApiRolesRoleTasks[]',
        'global_task_set_access' => 'string',
        'task_sets' => '\OpenAPI\Client\Model\ApiRolesRoleTaskSets[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'authority' => null,
        'description' => null,
        'default_persona' => null,
        'permissions' => null,
        'global_site_access' => null,
        'sites' => null,
        'global_zone_access' => null,
        'zones' => null,
        'global_instance_type_access' => null,
        'instance_types' => null,
        'global_app_template_access' => null,
        'app_templates' => null,
        'global_catalog_item_type_access' => null,
        'catalog_item_types' => null,
        'global_persona_access' => null,
        'personas' => null,
        'global_vdi_pool_access' => null,
        'vdi_pools' => null,
        'global_report_type_access' => null,
        'report_types' => null,
        'global_task_access' => null,
        'tasks' => null,
        'global_task_set_access' => null,
        'task_sets' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'authority' => 'authority',
        'description' => 'description',
        'default_persona' => 'defaultPersona',
        'permissions' => 'permissions',
        'global_site_access' => 'globalSiteAccess',
        'sites' => 'sites',
        'global_zone_access' => 'globalZoneAccess',
        'zones' => 'zones',
        'global_instance_type_access' => 'globalInstanceTypeAccess',
        'instance_types' => 'instanceTypes',
        'global_app_template_access' => 'globalAppTemplateAccess',
        'app_templates' => 'appTemplates',
        'global_catalog_item_type_access' => 'globalCatalogItemTypeAccess',
        'catalog_item_types' => 'catalogItemTypes',
        'global_persona_access' => 'globalPersonaAccess',
        'personas' => 'personas',
        'global_vdi_pool_access' => 'globalVdiPoolAccess',
        'vdi_pools' => 'vdiPools',
        'global_report_type_access' => 'globalReportTypeAccess',
        'report_types' => 'reportTypes',
        'global_task_access' => 'globalTaskAccess',
        'tasks' => 'tasks',
        'global_task_set_access' => 'globalTaskSetAccess',
        'task_sets' => 'taskSets'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'authority' => 'setAuthority',
        'description' => 'setDescription',
        'default_persona' => 'setDefaultPersona',
        'permissions' => 'setPermissions',
        'global_site_access' => 'setGlobalSiteAccess',
        'sites' => 'setSites',
        'global_zone_access' => 'setGlobalZoneAccess',
        'zones' => 'setZones',
        'global_instance_type_access' => 'setGlobalInstanceTypeAccess',
        'instance_types' => 'setInstanceTypes',
        'global_app_template_access' => 'setGlobalAppTemplateAccess',
        'app_templates' => 'setAppTemplates',
        'global_catalog_item_type_access' => 'setGlobalCatalogItemTypeAccess',
        'catalog_item_types' => 'setCatalogItemTypes',
        'global_persona_access' => 'setGlobalPersonaAccess',
        'personas' => 'setPersonas',
        'global_vdi_pool_access' => 'setGlobalVdiPoolAccess',
        'vdi_pools' => 'setVdiPools',
        'global_report_type_access' => 'setGlobalReportTypeAccess',
        'report_types' => 'setReportTypes',
        'global_task_access' => 'setGlobalTaskAccess',
        'tasks' => 'setTasks',
        'global_task_set_access' => 'setGlobalTaskSetAccess',
        'task_sets' => 'setTaskSets'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'authority' => 'getAuthority',
        'description' => 'getDescription',
        'default_persona' => 'getDefaultPersona',
        'permissions' => 'getPermissions',
        'global_site_access' => 'getGlobalSiteAccess',
        'sites' => 'getSites',
        'global_zone_access' => 'getGlobalZoneAccess',
        'zones' => 'getZones',
        'global_instance_type_access' => 'getGlobalInstanceTypeAccess',
        'instance_types' => 'getInstanceTypes',
        'global_app_template_access' => 'getGlobalAppTemplateAccess',
        'app_templates' => 'getAppTemplates',
        'global_catalog_item_type_access' => 'getGlobalCatalogItemTypeAccess',
        'catalog_item_types' => 'getCatalogItemTypes',
        'global_persona_access' => 'getGlobalPersonaAccess',
        'personas' => 'getPersonas',
        'global_vdi_pool_access' => 'getGlobalVdiPoolAccess',
        'vdi_pools' => 'getVdiPools',
        'global_report_type_access' => 'getGlobalReportTypeAccess',
        'report_types' => 'getReportTypes',
        'global_task_access' => 'getGlobalTaskAccess',
        'tasks' => 'getTasks',
        'global_task_set_access' => 'getGlobalTaskSetAccess',
        'task_sets' => 'getTaskSets'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const DEFAULT_PERSONA_STANDARD = 'standard';
    const DEFAULT_PERSONA_SERVICE_CATALOG = 'serviceCatalog';
    const DEFAULT_PERSONA_VDI = 'vdi';
    const GLOBAL_SITE_ACCESS_FULL = 'full';
    const GLOBAL_SITE_ACCESS_READ = 'read';
    const GLOBAL_SITE_ACCESS_NONE = 'none';
    const GLOBAL_ZONE_ACCESS_FULL = 'full';
    const GLOBAL_ZONE_ACCESS_READ = 'read';
    const GLOBAL_ZONE_ACCESS_NONE = 'none';
    const GLOBAL_INSTANCE_TYPE_ACCESS_FULL = 'full';
    const GLOBAL_INSTANCE_TYPE_ACCESS_NONE = 'none';
    const GLOBAL_APP_TEMPLATE_ACCESS_FULL = 'full';
    const GLOBAL_APP_TEMPLATE_ACCESS_NONE = 'none';
    const GLOBAL_CATALOG_ITEM_TYPE_ACCESS_FULL = 'full';
    const GLOBAL_CATALOG_ITEM_TYPE_ACCESS_NONE = 'none';
    const GLOBAL_PERSONA_ACCESS_FULL = 'full';
    const GLOBAL_PERSONA_ACCESS_NONE = 'none';
    const GLOBAL_VDI_POOL_ACCESS_FULL = 'full';
    const GLOBAL_VDI_POOL_ACCESS_NONE = 'none';
    const GLOBAL_REPORT_TYPE_ACCESS_FULL = 'full';
    const GLOBAL_REPORT_TYPE_ACCESS_NONE = 'none';
    const GLOBAL_TASK_ACCESS_FULL = 'full';
    const GLOBAL_TASK_ACCESS_NONE = 'none';
    const GLOBAL_TASK_SET_ACCESS_FULL = 'full';
    const GLOBAL_TASK_SET_ACCESS_NONE = 'none';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDefaultPersonaAllowableValues()
    {
        return [
            self::DEFAULT_PERSONA_STANDARD,
            self::DEFAULT_PERSONA_SERVICE_CATALOG,
            self::DEFAULT_PERSONA_VDI,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGlobalSiteAccessAllowableValues()
    {
        return [
            self::GLOBAL_SITE_ACCESS_FULL,
            self::GLOBAL_SITE_ACCESS_READ,
            self::GLOBAL_SITE_ACCESS_NONE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGlobalZoneAccessAllowableValues()
    {
        return [
            self::GLOBAL_ZONE_ACCESS_FULL,
            self::GLOBAL_ZONE_ACCESS_READ,
            self::GLOBAL_ZONE_ACCESS_NONE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGlobalInstanceTypeAccessAllowableValues()
    {
        return [
            self::GLOBAL_INSTANCE_TYPE_ACCESS_FULL,
            self::GLOBAL_INSTANCE_TYPE_ACCESS_NONE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGlobalAppTemplateAccessAllowableValues()
    {
        return [
            self::GLOBAL_APP_TEMPLATE_ACCESS_FULL,
            self::GLOBAL_APP_TEMPLATE_ACCESS_NONE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGlobalCatalogItemTypeAccessAllowableValues()
    {
        return [
            self::GLOBAL_CATALOG_ITEM_TYPE_ACCESS_FULL,
            self::GLOBAL_CATALOG_ITEM_TYPE_ACCESS_NONE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGlobalPersonaAccessAllowableValues()
    {
        return [
            self::GLOBAL_PERSONA_ACCESS_FULL,
            self::GLOBAL_PERSONA_ACCESS_NONE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGlobalVdiPoolAccessAllowableValues()
    {
        return [
            self::GLOBAL_VDI_POOL_ACCESS_FULL,
            self::GLOBAL_VDI_POOL_ACCESS_NONE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGlobalReportTypeAccessAllowableValues()
    {
        return [
            self::GLOBAL_REPORT_TYPE_ACCESS_FULL,
            self::GLOBAL_REPORT_TYPE_ACCESS_NONE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGlobalTaskAccessAllowableValues()
    {
        return [
            self::GLOBAL_TASK_ACCESS_FULL,
            self::GLOBAL_TASK_ACCESS_NONE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGlobalTaskSetAccessAllowableValues()
    {
        return [
            self::GLOBAL_TASK_SET_ACCESS_FULL,
            self::GLOBAL_TASK_SET_ACCESS_NONE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['authority'] = $data['authority'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['default_persona'] = $data['default_persona'] ?? null;
        $this->container['permissions'] = $data['permissions'] ?? null;
        $this->container['global_site_access'] = $data['global_site_access'] ?? null;
        $this->container['sites'] = $data['sites'] ?? null;
        $this->container['global_zone_access'] = $data['global_zone_access'] ?? null;
        $this->container['zones'] = $data['zones'] ?? null;
        $this->container['global_instance_type_access'] = $data['global_instance_type_access'] ?? null;
        $this->container['instance_types'] = $data['instance_types'] ?? null;
        $this->container['global_app_template_access'] = $data['global_app_template_access'] ?? null;
        $this->container['app_templates'] = $data['app_templates'] ?? null;
        $this->container['global_catalog_item_type_access'] = $data['global_catalog_item_type_access'] ?? null;
        $this->container['catalog_item_types'] = $data['catalog_item_types'] ?? null;
        $this->container['global_persona_access'] = $data['global_persona_access'] ?? null;
        $this->container['personas'] = $data['personas'] ?? null;
        $this->container['global_vdi_pool_access'] = $data['global_vdi_pool_access'] ?? null;
        $this->container['vdi_pools'] = $data['vdi_pools'] ?? null;
        $this->container['global_report_type_access'] = $data['global_report_type_access'] ?? null;
        $this->container['report_types'] = $data['report_types'] ?? null;
        $this->container['global_task_access'] = $data['global_task_access'] ?? null;
        $this->container['tasks'] = $data['tasks'] ?? null;
        $this->container['global_task_set_access'] = $data['global_task_set_access'] ?? null;
        $this->container['task_sets'] = $data['task_sets'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getDefaultPersonaAllowableValues();
        if (!is_null($this->container['default_persona']) && !in_array($this->container['default_persona'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'default_persona', must be one of '%s'",
                $this->container['default_persona'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getGlobalSiteAccessAllowableValues();
        if (!is_null($this->container['global_site_access']) && !in_array($this->container['global_site_access'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'global_site_access', must be one of '%s'",
                $this->container['global_site_access'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getGlobalZoneAccessAllowableValues();
        if (!is_null($this->container['global_zone_access']) && !in_array($this->container['global_zone_access'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'global_zone_access', must be one of '%s'",
                $this->container['global_zone_access'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getGlobalInstanceTypeAccessAllowableValues();
        if (!is_null($this->container['global_instance_type_access']) && !in_array($this->container['global_instance_type_access'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'global_instance_type_access', must be one of '%s'",
                $this->container['global_instance_type_access'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getGlobalAppTemplateAccessAllowableValues();
        if (!is_null($this->container['global_app_template_access']) && !in_array($this->container['global_app_template_access'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'global_app_template_access', must be one of '%s'",
                $this->container['global_app_template_access'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getGlobalCatalogItemTypeAccessAllowableValues();
        if (!is_null($this->container['global_catalog_item_type_access']) && !in_array($this->container['global_catalog_item_type_access'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'global_catalog_item_type_access', must be one of '%s'",
                $this->container['global_catalog_item_type_access'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getGlobalPersonaAccessAllowableValues();
        if (!is_null($this->container['global_persona_access']) && !in_array($this->container['global_persona_access'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'global_persona_access', must be one of '%s'",
                $this->container['global_persona_access'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getGlobalVdiPoolAccessAllowableValues();
        if (!is_null($this->container['global_vdi_pool_access']) && !in_array($this->container['global_vdi_pool_access'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'global_vdi_pool_access', must be one of '%s'",
                $this->container['global_vdi_pool_access'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getGlobalReportTypeAccessAllowableValues();
        if (!is_null($this->container['global_report_type_access']) && !in_array($this->container['global_report_type_access'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'global_report_type_access', must be one of '%s'",
                $this->container['global_report_type_access'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getGlobalTaskAccessAllowableValues();
        if (!is_null($this->container['global_task_access']) && !in_array($this->container['global_task_access'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'global_task_access', must be one of '%s'",
                $this->container['global_task_access'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getGlobalTaskSetAccessAllowableValues();
        if (!is_null($this->container['global_task_set_access']) && !in_array($this->container['global_task_set_access'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'global_task_set_access', must be one of '%s'",
                $this->container['global_task_set_access'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets authority
     *
     * @return string|null
     */
    public function getAuthority()
    {
        return $this->container['authority'];
    }

    /**
     * Sets authority
     *
     * @param string|null $authority Authority (Name)
     *
     * @return self
     */
    public function setAuthority($authority)
    {
        $this->container['authority'] = $authority;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Description
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets default_persona
     *
     * @return string|null
     */
    public function getDefaultPersona()
    {
        return $this->container['default_persona'];
    }

    /**
     * Sets default_persona
     *
     * @param string|null $default_persona Set the default persona by code.
     *
     * @return self
     */
    public function setDefaultPersona($default_persona)
    {
        $allowedValues = $this->getDefaultPersonaAllowableValues();
        if (!is_null($default_persona) && !in_array($default_persona, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'default_persona', must be one of '%s'",
                    $default_persona,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['default_persona'] = $default_persona;

        return $this;
    }

    /**
     * Gets permissions
     *
     * @return \OpenAPI\Client\Model\ApiRolesRolePermissions[]|null
     */
    public function getPermissions()
    {
        return $this->container['permissions'];
    }

    /**
     * Sets permissions
     *
     * @param \OpenAPI\Client\Model\ApiRolesRolePermissions[]|null $permissions Set the access level for the specified permissions.
     *
     * @return self
     */
    public function setPermissions($permissions)
    {
        $this->container['permissions'] = $permissions;

        return $this;
    }

    /**
     * Gets global_site_access
     *
     * @return string|null
     */
    public function getGlobalSiteAccess()
    {
        return $this->container['global_site_access'];
    }

    /**
     * Sets global_site_access
     *
     * @param string|null $global_site_access Set the default access level for for groups (sites). Only applies to user roles.
     *
     * @return self
     */
    public function setGlobalSiteAccess($global_site_access)
    {
        $allowedValues = $this->getGlobalSiteAccessAllowableValues();
        if (!is_null($global_site_access) && !in_array($global_site_access, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'global_site_access', must be one of '%s'",
                    $global_site_access,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['global_site_access'] = $global_site_access;

        return $this;
    }

    /**
     * Gets sites
     *
     * @return \OpenAPI\Client\Model\ApiRolesRoleSites[]|null
     */
    public function getSites()
    {
        return $this->container['sites'];
    }

    /**
     * Sets sites
     *
     * @param \OpenAPI\Client\Model\ApiRolesRoleSites[]|null $sites Set the access level for the specified groups (sites). Only applies to user roles.
     *
     * @return self
     */
    public function setSites($sites)
    {
        $this->container['sites'] = $sites;

        return $this;
    }

    /**
     * Gets global_zone_access
     *
     * @return string|null
     */
    public function getGlobalZoneAccess()
    {
        return $this->container['global_zone_access'];
    }

    /**
     * Sets global_zone_access
     *
     * @param string|null $global_zone_access Set the default access level for for clouds (zones). Only applies to base account (tenant) roles.
     *
     * @return self
     */
    public function setGlobalZoneAccess($global_zone_access)
    {
        $allowedValues = $this->getGlobalZoneAccessAllowableValues();
        if (!is_null($global_zone_access) && !in_array($global_zone_access, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'global_zone_access', must be one of '%s'",
                    $global_zone_access,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['global_zone_access'] = $global_zone_access;

        return $this;
    }

    /**
     * Gets zones
     *
     * @return \OpenAPI\Client\Model\ApiRolesRoleZones[]|null
     */
    public function getZones()
    {
        return $this->container['zones'];
    }

    /**
     * Sets zones
     *
     * @param \OpenAPI\Client\Model\ApiRolesRoleZones[]|null $zones Set the access level for the specified clouds (zones). Only applies to base account (tenant) roles.
     *
     * @return self
     */
    public function setZones($zones)
    {
        $this->container['zones'] = $zones;

        return $this;
    }

    /**
     * Gets global_instance_type_access
     *
     * @return string|null
     */
    public function getGlobalInstanceTypeAccess()
    {
        return $this->container['global_instance_type_access'];
    }

    /**
     * Sets global_instance_type_access
     *
     * @param string|null $global_instance_type_access Set the default access level for for instance types
     *
     * @return self
     */
    public function setGlobalInstanceTypeAccess($global_instance_type_access)
    {
        $allowedValues = $this->getGlobalInstanceTypeAccessAllowableValues();
        if (!is_null($global_instance_type_access) && !in_array($global_instance_type_access, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'global_instance_type_access', must be one of '%s'",
                    $global_instance_type_access,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['global_instance_type_access'] = $global_instance_type_access;

        return $this;
    }

    /**
     * Gets instance_types
     *
     * @return \OpenAPI\Client\Model\ApiRolesRoleInstanceTypes[]|null
     */
    public function getInstanceTypes()
    {
        return $this->container['instance_types'];
    }

    /**
     * Sets instance_types
     *
     * @param \OpenAPI\Client\Model\ApiRolesRoleInstanceTypes[]|null $instance_types Set the access level for the specified instance types
     *
     * @return self
     */
    public function setInstanceTypes($instance_types)
    {
        $this->container['instance_types'] = $instance_types;

        return $this;
    }

    /**
     * Gets global_app_template_access
     *
     * @return string|null
     */
    public function getGlobalAppTemplateAccess()
    {
        return $this->container['global_app_template_access'];
    }

    /**
     * Sets global_app_template_access
     *
     * @param string|null $global_app_template_access Set the default access level for blueprints
     *
     * @return self
     */
    public function setGlobalAppTemplateAccess($global_app_template_access)
    {
        $allowedValues = $this->getGlobalAppTemplateAccessAllowableValues();
        if (!is_null($global_app_template_access) && !in_array($global_app_template_access, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'global_app_template_access', must be one of '%s'",
                    $global_app_template_access,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['global_app_template_access'] = $global_app_template_access;

        return $this;
    }

    /**
     * Gets app_templates
     *
     * @return \OpenAPI\Client\Model\ApiRolesRoleAppTemplates[]|null
     */
    public function getAppTemplates()
    {
        return $this->container['app_templates'];
    }

    /**
     * Sets app_templates
     *
     * @param \OpenAPI\Client\Model\ApiRolesRoleAppTemplates[]|null $app_templates Set the access level for the specified blueprints (appTemplates)
     *
     * @return self
     */
    public function setAppTemplates($app_templates)
    {
        $this->container['app_templates'] = $app_templates;

        return $this;
    }

    /**
     * Gets global_catalog_item_type_access
     *
     * @return string|null
     */
    public function getGlobalCatalogItemTypeAccess()
    {
        return $this->container['global_catalog_item_type_access'];
    }

    /**
     * Sets global_catalog_item_type_access
     *
     * @param string|null $global_catalog_item_type_access Set the default access level for catalog item types
     *
     * @return self
     */
    public function setGlobalCatalogItemTypeAccess($global_catalog_item_type_access)
    {
        $allowedValues = $this->getGlobalCatalogItemTypeAccessAllowableValues();
        if (!is_null($global_catalog_item_type_access) && !in_array($global_catalog_item_type_access, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'global_catalog_item_type_access', must be one of '%s'",
                    $global_catalog_item_type_access,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['global_catalog_item_type_access'] = $global_catalog_item_type_access;

        return $this;
    }

    /**
     * Gets catalog_item_types
     *
     * @return \OpenAPI\Client\Model\ApiRolesRoleCatalogItemTypes[]|null
     */
    public function getCatalogItemTypes()
    {
        return $this->container['catalog_item_types'];
    }

    /**
     * Sets catalog_item_types
     *
     * @param \OpenAPI\Client\Model\ApiRolesRoleCatalogItemTypes[]|null $catalog_item_types Set the access level for the specified catalog item types
     *
     * @return self
     */
    public function setCatalogItemTypes($catalog_item_types)
    {
        $this->container['catalog_item_types'] = $catalog_item_types;

        return $this;
    }

    /**
     * Gets global_persona_access
     *
     * @return string|null
     */
    public function getGlobalPersonaAccess()
    {
        return $this->container['global_persona_access'];
    }

    /**
     * Sets global_persona_access
     *
     * @param string|null $global_persona_access Set the default access level for personas
     *
     * @return self
     */
    public function setGlobalPersonaAccess($global_persona_access)
    {
        $allowedValues = $this->getGlobalPersonaAccessAllowableValues();
        if (!is_null($global_persona_access) && !in_array($global_persona_access, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'global_persona_access', must be one of '%s'",
                    $global_persona_access,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['global_persona_access'] = $global_persona_access;

        return $this;
    }

    /**
     * Gets personas
     *
     * @return \OpenAPI\Client\Model\ApiRolesRolePersonas[]|null
     */
    public function getPersonas()
    {
        return $this->container['personas'];
    }

    /**
     * Sets personas
     *
     * @param \OpenAPI\Client\Model\ApiRolesRolePersonas[]|null $personas Set the access level for the specified personas
     *
     * @return self
     */
    public function setPersonas($personas)
    {
        $this->container['personas'] = $personas;

        return $this;
    }

    /**
     * Gets global_vdi_pool_access
     *
     * @return string|null
     */
    public function getGlobalVdiPoolAccess()
    {
        return $this->container['global_vdi_pool_access'];
    }

    /**
     * Sets global_vdi_pool_access
     *
     * @param string|null $global_vdi_pool_access Set the default access level for VDI pools
     *
     * @return self
     */
    public function setGlobalVdiPoolAccess($global_vdi_pool_access)
    {
        $allowedValues = $this->getGlobalVdiPoolAccessAllowableValues();
        if (!is_null($global_vdi_pool_access) && !in_array($global_vdi_pool_access, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'global_vdi_pool_access', must be one of '%s'",
                    $global_vdi_pool_access,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['global_vdi_pool_access'] = $global_vdi_pool_access;

        return $this;
    }

    /**
     * Gets vdi_pools
     *
     * @return \OpenAPI\Client\Model\ApiRolesRoleVdiPools[]|null
     */
    public function getVdiPools()
    {
        return $this->container['vdi_pools'];
    }

    /**
     * Sets vdi_pools
     *
     * @param \OpenAPI\Client\Model\ApiRolesRoleVdiPools[]|null $vdi_pools Set the access level for the specified VDI pools
     *
     * @return self
     */
    public function setVdiPools($vdi_pools)
    {
        $this->container['vdi_pools'] = $vdi_pools;

        return $this;
    }

    /**
     * Gets global_report_type_access
     *
     * @return string|null
     */
    public function getGlobalReportTypeAccess()
    {
        return $this->container['global_report_type_access'];
    }

    /**
     * Sets global_report_type_access
     *
     * @param string|null $global_report_type_access Set the default access level for report types
     *
     * @return self
     */
    public function setGlobalReportTypeAccess($global_report_type_access)
    {
        $allowedValues = $this->getGlobalReportTypeAccessAllowableValues();
        if (!is_null($global_report_type_access) && !in_array($global_report_type_access, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'global_report_type_access', must be one of '%s'",
                    $global_report_type_access,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['global_report_type_access'] = $global_report_type_access;

        return $this;
    }

    /**
     * Gets report_types
     *
     * @return \OpenAPI\Client\Model\ApiRolesRoleReportTypes[]|null
     */
    public function getReportTypes()
    {
        return $this->container['report_types'];
    }

    /**
     * Sets report_types
     *
     * @param \OpenAPI\Client\Model\ApiRolesRoleReportTypes[]|null $report_types Set the access level for the specified report types
     *
     * @return self
     */
    public function setReportTypes($report_types)
    {
        $this->container['report_types'] = $report_types;

        return $this;
    }

    /**
     * Gets global_task_access
     *
     * @return string|null
     */
    public function getGlobalTaskAccess()
    {
        return $this->container['global_task_access'];
    }

    /**
     * Sets global_task_access
     *
     * @param string|null $global_task_access Set the default access level for tasks
     *
     * @return self
     */
    public function setGlobalTaskAccess($global_task_access)
    {
        $allowedValues = $this->getGlobalTaskAccessAllowableValues();
        if (!is_null($global_task_access) && !in_array($global_task_access, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'global_task_access', must be one of '%s'",
                    $global_task_access,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['global_task_access'] = $global_task_access;

        return $this;
    }

    /**
     * Gets tasks
     *
     * @return \OpenAPI\Client\Model\ApiRolesRoleTasks[]|null
     */
    public function getTasks()
    {
        return $this->container['tasks'];
    }

    /**
     * Sets tasks
     *
     * @param \OpenAPI\Client\Model\ApiRolesRoleTasks[]|null $tasks Set the access level for the specified tasks
     *
     * @return self
     */
    public function setTasks($tasks)
    {
        $this->container['tasks'] = $tasks;

        return $this;
    }

    /**
     * Gets global_task_set_access
     *
     * @return string|null
     */
    public function getGlobalTaskSetAccess()
    {
        return $this->container['global_task_set_access'];
    }

    /**
     * Sets global_task_set_access
     *
     * @param string|null $global_task_set_access Set the default access level for workflows (taskSets)
     *
     * @return self
     */
    public function setGlobalTaskSetAccess($global_task_set_access)
    {
        $allowedValues = $this->getGlobalTaskSetAccessAllowableValues();
        if (!is_null($global_task_set_access) && !in_array($global_task_set_access, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'global_task_set_access', must be one of '%s'",
                    $global_task_set_access,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['global_task_set_access'] = $global_task_set_access;

        return $this;
    }

    /**
     * Gets task_sets
     *
     * @return \OpenAPI\Client\Model\ApiRolesRoleTaskSets[]|null
     */
    public function getTaskSets()
    {
        return $this->container['task_sets'];
    }

    /**
     * Sets task_sets
     *
     * @param \OpenAPI\Client\Model\ApiRolesRoleTaskSets[]|null $task_sets Set the access level for the specified workflows (taskSets)
     *
     * @return self
     */
    public function setTaskSets($task_sets)
    {
        $this->container['task_sets'] = $task_sets;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


