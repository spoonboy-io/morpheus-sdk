<?php
/**
 * WhitelabelSettings
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * WhitelabelSettings Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class WhitelabelSettings implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'whitelabelSettings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'enabled' => 'bool',
        'appliance_name' => 'string',
        'disable_support_menu' => 'bool',
        'header_logo' => 'string',
        'footer_logo' => 'string',
        'login_logo' => 'string',
        'favicon' => 'string',
        'header_bg_color' => 'string',
        'header_fg_color' => 'string',
        'nav_bg_color' => 'string',
        'nav_fg_color' => 'string',
        'nav_hover_color' => 'string',
        'primary_button_bg_color' => 'string',
        'primary_button_fg_color' => 'string',
        'primary_button_hover_bg_color' => 'string',
        'primary_button_hover_fg_color' => 'string',
        'footer_bg_color' => 'string',
        'footer_fg_color' => 'string',
        'login_bg_color' => 'string',
        'override_css' => 'string',
        'copyright_string' => 'string',
        'terms_of_use' => 'string',
        'privacy_policy' => 'string',
        'support_menu_links' => '\OpenAPI\Client\Model\WhitelabelSettingsSupportMenuLinks[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'enabled' => null,
        'appliance_name' => null,
        'disable_support_menu' => null,
        'header_logo' => null,
        'footer_logo' => null,
        'login_logo' => null,
        'favicon' => null,
        'header_bg_color' => null,
        'header_fg_color' => null,
        'nav_bg_color' => null,
        'nav_fg_color' => null,
        'nav_hover_color' => null,
        'primary_button_bg_color' => null,
        'primary_button_fg_color' => null,
        'primary_button_hover_bg_color' => null,
        'primary_button_hover_fg_color' => null,
        'footer_bg_color' => null,
        'footer_fg_color' => null,
        'login_bg_color' => null,
        'override_css' => null,
        'copyright_string' => null,
        'terms_of_use' => null,
        'privacy_policy' => null,
        'support_menu_links' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'enabled' => 'enabled',
        'appliance_name' => 'applianceName',
        'disable_support_menu' => 'disableSupportMenu',
        'header_logo' => 'headerLogo',
        'footer_logo' => 'footerLogo',
        'login_logo' => 'loginLogo',
        'favicon' => 'favicon',
        'header_bg_color' => 'headerBgColor',
        'header_fg_color' => 'headerFgColor',
        'nav_bg_color' => 'navBgColor',
        'nav_fg_color' => 'navFgColor',
        'nav_hover_color' => 'navHoverColor',
        'primary_button_bg_color' => 'primaryButtonBgColor',
        'primary_button_fg_color' => 'primaryButtonFgColor',
        'primary_button_hover_bg_color' => 'primaryButtonHoverBgColor',
        'primary_button_hover_fg_color' => 'primaryButtonHoverFgColor',
        'footer_bg_color' => 'footerBgColor',
        'footer_fg_color' => 'footerFgColor',
        'login_bg_color' => 'loginBgColor',
        'override_css' => 'overrideCss',
        'copyright_string' => 'copyrightString',
        'terms_of_use' => 'termsOfUse',
        'privacy_policy' => 'privacyPolicy',
        'support_menu_links' => 'supportMenuLinks'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'enabled' => 'setEnabled',
        'appliance_name' => 'setApplianceName',
        'disable_support_menu' => 'setDisableSupportMenu',
        'header_logo' => 'setHeaderLogo',
        'footer_logo' => 'setFooterLogo',
        'login_logo' => 'setLoginLogo',
        'favicon' => 'setFavicon',
        'header_bg_color' => 'setHeaderBgColor',
        'header_fg_color' => 'setHeaderFgColor',
        'nav_bg_color' => 'setNavBgColor',
        'nav_fg_color' => 'setNavFgColor',
        'nav_hover_color' => 'setNavHoverColor',
        'primary_button_bg_color' => 'setPrimaryButtonBgColor',
        'primary_button_fg_color' => 'setPrimaryButtonFgColor',
        'primary_button_hover_bg_color' => 'setPrimaryButtonHoverBgColor',
        'primary_button_hover_fg_color' => 'setPrimaryButtonHoverFgColor',
        'footer_bg_color' => 'setFooterBgColor',
        'footer_fg_color' => 'setFooterFgColor',
        'login_bg_color' => 'setLoginBgColor',
        'override_css' => 'setOverrideCss',
        'copyright_string' => 'setCopyrightString',
        'terms_of_use' => 'setTermsOfUse',
        'privacy_policy' => 'setPrivacyPolicy',
        'support_menu_links' => 'setSupportMenuLinks'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'enabled' => 'getEnabled',
        'appliance_name' => 'getApplianceName',
        'disable_support_menu' => 'getDisableSupportMenu',
        'header_logo' => 'getHeaderLogo',
        'footer_logo' => 'getFooterLogo',
        'login_logo' => 'getLoginLogo',
        'favicon' => 'getFavicon',
        'header_bg_color' => 'getHeaderBgColor',
        'header_fg_color' => 'getHeaderFgColor',
        'nav_bg_color' => 'getNavBgColor',
        'nav_fg_color' => 'getNavFgColor',
        'nav_hover_color' => 'getNavHoverColor',
        'primary_button_bg_color' => 'getPrimaryButtonBgColor',
        'primary_button_fg_color' => 'getPrimaryButtonFgColor',
        'primary_button_hover_bg_color' => 'getPrimaryButtonHoverBgColor',
        'primary_button_hover_fg_color' => 'getPrimaryButtonHoverFgColor',
        'footer_bg_color' => 'getFooterBgColor',
        'footer_fg_color' => 'getFooterFgColor',
        'login_bg_color' => 'getLoginBgColor',
        'override_css' => 'getOverrideCss',
        'copyright_string' => 'getCopyrightString',
        'terms_of_use' => 'getTermsOfUse',
        'privacy_policy' => 'getPrivacyPolicy',
        'support_menu_links' => 'getSupportMenuLinks'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['enabled'] = $data['enabled'] ?? null;
        $this->container['appliance_name'] = $data['appliance_name'] ?? null;
        $this->container['disable_support_menu'] = $data['disable_support_menu'] ?? null;
        $this->container['header_logo'] = $data['header_logo'] ?? null;
        $this->container['footer_logo'] = $data['footer_logo'] ?? null;
        $this->container['login_logo'] = $data['login_logo'] ?? null;
        $this->container['favicon'] = $data['favicon'] ?? null;
        $this->container['header_bg_color'] = $data['header_bg_color'] ?? null;
        $this->container['header_fg_color'] = $data['header_fg_color'] ?? null;
        $this->container['nav_bg_color'] = $data['nav_bg_color'] ?? null;
        $this->container['nav_fg_color'] = $data['nav_fg_color'] ?? null;
        $this->container['nav_hover_color'] = $data['nav_hover_color'] ?? null;
        $this->container['primary_button_bg_color'] = $data['primary_button_bg_color'] ?? null;
        $this->container['primary_button_fg_color'] = $data['primary_button_fg_color'] ?? null;
        $this->container['primary_button_hover_bg_color'] = $data['primary_button_hover_bg_color'] ?? null;
        $this->container['primary_button_hover_fg_color'] = $data['primary_button_hover_fg_color'] ?? null;
        $this->container['footer_bg_color'] = $data['footer_bg_color'] ?? null;
        $this->container['footer_fg_color'] = $data['footer_fg_color'] ?? null;
        $this->container['login_bg_color'] = $data['login_bg_color'] ?? null;
        $this->container['override_css'] = $data['override_css'] ?? null;
        $this->container['copyright_string'] = $data['copyright_string'] ?? null;
        $this->container['terms_of_use'] = $data['terms_of_use'] ?? null;
        $this->container['privacy_policy'] = $data['privacy_policy'] ?? null;
        $this->container['support_menu_links'] = $data['support_menu_links'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets enabled
     *
     * @return bool|null
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool|null $enabled enabled
     *
     * @return self
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets appliance_name
     *
     * @return string|null
     */
    public function getApplianceName()
    {
        return $this->container['appliance_name'];
    }

    /**
     * Sets appliance_name
     *
     * @param string|null $appliance_name appliance_name
     *
     * @return self
     */
    public function setApplianceName($appliance_name)
    {
        $this->container['appliance_name'] = $appliance_name;

        return $this;
    }

    /**
     * Gets disable_support_menu
     *
     * @return bool|null
     */
    public function getDisableSupportMenu()
    {
        return $this->container['disable_support_menu'];
    }

    /**
     * Sets disable_support_menu
     *
     * @param bool|null $disable_support_menu disable_support_menu
     *
     * @return self
     */
    public function setDisableSupportMenu($disable_support_menu)
    {
        $this->container['disable_support_menu'] = $disable_support_menu;

        return $this;
    }

    /**
     * Gets header_logo
     *
     * @return string|null
     */
    public function getHeaderLogo()
    {
        return $this->container['header_logo'];
    }

    /**
     * Sets header_logo
     *
     * @param string|null $header_logo header_logo
     *
     * @return self
     */
    public function setHeaderLogo($header_logo)
    {
        $this->container['header_logo'] = $header_logo;

        return $this;
    }

    /**
     * Gets footer_logo
     *
     * @return string|null
     */
    public function getFooterLogo()
    {
        return $this->container['footer_logo'];
    }

    /**
     * Sets footer_logo
     *
     * @param string|null $footer_logo footer_logo
     *
     * @return self
     */
    public function setFooterLogo($footer_logo)
    {
        $this->container['footer_logo'] = $footer_logo;

        return $this;
    }

    /**
     * Gets login_logo
     *
     * @return string|null
     */
    public function getLoginLogo()
    {
        return $this->container['login_logo'];
    }

    /**
     * Sets login_logo
     *
     * @param string|null $login_logo login_logo
     *
     * @return self
     */
    public function setLoginLogo($login_logo)
    {
        $this->container['login_logo'] = $login_logo;

        return $this;
    }

    /**
     * Gets favicon
     *
     * @return string|null
     */
    public function getFavicon()
    {
        return $this->container['favicon'];
    }

    /**
     * Sets favicon
     *
     * @param string|null $favicon favicon
     *
     * @return self
     */
    public function setFavicon($favicon)
    {
        $this->container['favicon'] = $favicon;

        return $this;
    }

    /**
     * Gets header_bg_color
     *
     * @return string|null
     */
    public function getHeaderBgColor()
    {
        return $this->container['header_bg_color'];
    }

    /**
     * Sets header_bg_color
     *
     * @param string|null $header_bg_color header_bg_color
     *
     * @return self
     */
    public function setHeaderBgColor($header_bg_color)
    {
        $this->container['header_bg_color'] = $header_bg_color;

        return $this;
    }

    /**
     * Gets header_fg_color
     *
     * @return string|null
     */
    public function getHeaderFgColor()
    {
        return $this->container['header_fg_color'];
    }

    /**
     * Sets header_fg_color
     *
     * @param string|null $header_fg_color header_fg_color
     *
     * @return self
     */
    public function setHeaderFgColor($header_fg_color)
    {
        $this->container['header_fg_color'] = $header_fg_color;

        return $this;
    }

    /**
     * Gets nav_bg_color
     *
     * @return string|null
     */
    public function getNavBgColor()
    {
        return $this->container['nav_bg_color'];
    }

    /**
     * Sets nav_bg_color
     *
     * @param string|null $nav_bg_color nav_bg_color
     *
     * @return self
     */
    public function setNavBgColor($nav_bg_color)
    {
        $this->container['nav_bg_color'] = $nav_bg_color;

        return $this;
    }

    /**
     * Gets nav_fg_color
     *
     * @return string|null
     */
    public function getNavFgColor()
    {
        return $this->container['nav_fg_color'];
    }

    /**
     * Sets nav_fg_color
     *
     * @param string|null $nav_fg_color nav_fg_color
     *
     * @return self
     */
    public function setNavFgColor($nav_fg_color)
    {
        $this->container['nav_fg_color'] = $nav_fg_color;

        return $this;
    }

    /**
     * Gets nav_hover_color
     *
     * @return string|null
     */
    public function getNavHoverColor()
    {
        return $this->container['nav_hover_color'];
    }

    /**
     * Sets nav_hover_color
     *
     * @param string|null $nav_hover_color nav_hover_color
     *
     * @return self
     */
    public function setNavHoverColor($nav_hover_color)
    {
        $this->container['nav_hover_color'] = $nav_hover_color;

        return $this;
    }

    /**
     * Gets primary_button_bg_color
     *
     * @return string|null
     */
    public function getPrimaryButtonBgColor()
    {
        return $this->container['primary_button_bg_color'];
    }

    /**
     * Sets primary_button_bg_color
     *
     * @param string|null $primary_button_bg_color primary_button_bg_color
     *
     * @return self
     */
    public function setPrimaryButtonBgColor($primary_button_bg_color)
    {
        $this->container['primary_button_bg_color'] = $primary_button_bg_color;

        return $this;
    }

    /**
     * Gets primary_button_fg_color
     *
     * @return string|null
     */
    public function getPrimaryButtonFgColor()
    {
        return $this->container['primary_button_fg_color'];
    }

    /**
     * Sets primary_button_fg_color
     *
     * @param string|null $primary_button_fg_color primary_button_fg_color
     *
     * @return self
     */
    public function setPrimaryButtonFgColor($primary_button_fg_color)
    {
        $this->container['primary_button_fg_color'] = $primary_button_fg_color;

        return $this;
    }

    /**
     * Gets primary_button_hover_bg_color
     *
     * @return string|null
     */
    public function getPrimaryButtonHoverBgColor()
    {
        return $this->container['primary_button_hover_bg_color'];
    }

    /**
     * Sets primary_button_hover_bg_color
     *
     * @param string|null $primary_button_hover_bg_color primary_button_hover_bg_color
     *
     * @return self
     */
    public function setPrimaryButtonHoverBgColor($primary_button_hover_bg_color)
    {
        $this->container['primary_button_hover_bg_color'] = $primary_button_hover_bg_color;

        return $this;
    }

    /**
     * Gets primary_button_hover_fg_color
     *
     * @return string|null
     */
    public function getPrimaryButtonHoverFgColor()
    {
        return $this->container['primary_button_hover_fg_color'];
    }

    /**
     * Sets primary_button_hover_fg_color
     *
     * @param string|null $primary_button_hover_fg_color primary_button_hover_fg_color
     *
     * @return self
     */
    public function setPrimaryButtonHoverFgColor($primary_button_hover_fg_color)
    {
        $this->container['primary_button_hover_fg_color'] = $primary_button_hover_fg_color;

        return $this;
    }

    /**
     * Gets footer_bg_color
     *
     * @return string|null
     */
    public function getFooterBgColor()
    {
        return $this->container['footer_bg_color'];
    }

    /**
     * Sets footer_bg_color
     *
     * @param string|null $footer_bg_color footer_bg_color
     *
     * @return self
     */
    public function setFooterBgColor($footer_bg_color)
    {
        $this->container['footer_bg_color'] = $footer_bg_color;

        return $this;
    }

    /**
     * Gets footer_fg_color
     *
     * @return string|null
     */
    public function getFooterFgColor()
    {
        return $this->container['footer_fg_color'];
    }

    /**
     * Sets footer_fg_color
     *
     * @param string|null $footer_fg_color footer_fg_color
     *
     * @return self
     */
    public function setFooterFgColor($footer_fg_color)
    {
        $this->container['footer_fg_color'] = $footer_fg_color;

        return $this;
    }

    /**
     * Gets login_bg_color
     *
     * @return string|null
     */
    public function getLoginBgColor()
    {
        return $this->container['login_bg_color'];
    }

    /**
     * Sets login_bg_color
     *
     * @param string|null $login_bg_color login_bg_color
     *
     * @return self
     */
    public function setLoginBgColor($login_bg_color)
    {
        $this->container['login_bg_color'] = $login_bg_color;

        return $this;
    }

    /**
     * Gets override_css
     *
     * @return string|null
     */
    public function getOverrideCss()
    {
        return $this->container['override_css'];
    }

    /**
     * Sets override_css
     *
     * @param string|null $override_css override_css
     *
     * @return self
     */
    public function setOverrideCss($override_css)
    {
        $this->container['override_css'] = $override_css;

        return $this;
    }

    /**
     * Gets copyright_string
     *
     * @return string|null
     */
    public function getCopyrightString()
    {
        return $this->container['copyright_string'];
    }

    /**
     * Sets copyright_string
     *
     * @param string|null $copyright_string copyright_string
     *
     * @return self
     */
    public function setCopyrightString($copyright_string)
    {
        $this->container['copyright_string'] = $copyright_string;

        return $this;
    }

    /**
     * Gets terms_of_use
     *
     * @return string|null
     */
    public function getTermsOfUse()
    {
        return $this->container['terms_of_use'];
    }

    /**
     * Sets terms_of_use
     *
     * @param string|null $terms_of_use terms_of_use
     *
     * @return self
     */
    public function setTermsOfUse($terms_of_use)
    {
        $this->container['terms_of_use'] = $terms_of_use;

        return $this;
    }

    /**
     * Gets privacy_policy
     *
     * @return string|null
     */
    public function getPrivacyPolicy()
    {
        return $this->container['privacy_policy'];
    }

    /**
     * Sets privacy_policy
     *
     * @param string|null $privacy_policy privacy_policy
     *
     * @return self
     */
    public function setPrivacyPolicy($privacy_policy)
    {
        $this->container['privacy_policy'] = $privacy_policy;

        return $this;
    }

    /**
     * Gets support_menu_links
     *
     * @return \OpenAPI\Client\Model\WhitelabelSettingsSupportMenuLinks[]|null
     */
    public function getSupportMenuLinks()
    {
        return $this->container['support_menu_links'];
    }

    /**
     * Sets support_menu_links
     *
     * @param \OpenAPI\Client\Model\WhitelabelSettingsSupportMenuLinks[]|null $support_menu_links support_menu_links
     *
     * @return self
     */
    public function setSupportMenuLinks($support_menu_links)
    {
        $this->container['support_menu_links'] = $support_menu_links;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


