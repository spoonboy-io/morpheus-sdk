<?php
/**
 * InstanceUpdateInstance
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * InstanceUpdateInstance Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InstanceUpdateInstance implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'instanceUpdate_instance';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'description' => 'string',
        'instance_context' => 'string',
        'labels' => 'string[]',
        'tags' => '\OpenAPI\Client\Model\ApiServersIdMakeManagedServerTags[]',
        'add_tags' => '\OpenAPI\Client\Model\ApiServersIdMakeManagedServerTags[]',
        'remove_tags' => '\OpenAPI\Client\Model\InstanceUpdateInstanceRemoveTags[]',
        'power_schedule_type' => 'int',
        'site' => '\OpenAPI\Client\Model\InstanceUpdateInstanceSite',
        'owner_id' => 'int',
        'display_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'description' => null,
        'instance_context' => null,
        'labels' => null,
        'tags' => null,
        'add_tags' => null,
        'remove_tags' => null,
        'power_schedule_type' => 'int64',
        'site' => null,
        'owner_id' => 'int64',
        'display_name' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'description' => 'description',
        'instance_context' => 'instanceContext',
        'labels' => 'labels',
        'tags' => 'tags',
        'add_tags' => 'addTags',
        'remove_tags' => 'removeTags',
        'power_schedule_type' => 'powerScheduleType',
        'site' => 'site',
        'owner_id' => 'ownerId',
        'display_name' => 'displayName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'description' => 'setDescription',
        'instance_context' => 'setInstanceContext',
        'labels' => 'setLabels',
        'tags' => 'setTags',
        'add_tags' => 'setAddTags',
        'remove_tags' => 'setRemoveTags',
        'power_schedule_type' => 'setPowerScheduleType',
        'site' => 'setSite',
        'owner_id' => 'setOwnerId',
        'display_name' => 'setDisplayName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'description' => 'getDescription',
        'instance_context' => 'getInstanceContext',
        'labels' => 'getLabels',
        'tags' => 'getTags',
        'add_tags' => 'getAddTags',
        'remove_tags' => 'getRemoveTags',
        'power_schedule_type' => 'getPowerScheduleType',
        'site' => 'getSite',
        'owner_id' => 'getOwnerId',
        'display_name' => 'getDisplayName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['instance_context'] = $data['instance_context'] ?? null;
        $this->container['labels'] = $data['labels'] ?? null;
        $this->container['tags'] = $data['tags'] ?? null;
        $this->container['add_tags'] = $data['add_tags'] ?? null;
        $this->container['remove_tags'] = $data['remove_tags'] ?? null;
        $this->container['power_schedule_type'] = $data['power_schedule_type'] ?? null;
        $this->container['site'] = $data['site'] ?? null;
        $this->container['owner_id'] = $data['owner_id'] ?? null;
        $this->container['display_name'] = $data['display_name'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Unique name scoped to your account for the instance.
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Optional description field.
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets instance_context
     *
     * @return string|null
     */
    public function getInstanceContext()
    {
        return $this->container['instance_context'];
    }

    /**
     * Sets instance_context
     *
     * @param string|null $instance_context Environment
     *
     * @return self
     */
    public function setInstanceContext($instance_context)
    {
        $this->container['instance_context'] = $instance_context;

        return $this;
    }

    /**
     * Gets labels
     *
     * @return string[]|null
     */
    public function getLabels()
    {
        return $this->container['labels'];
    }

    /**
     * Sets labels
     *
     * @param string[]|null $labels Array of strings (keywords).
     *
     * @return self
     */
    public function setLabels($labels)
    {
        $this->container['labels'] = $labels;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return \OpenAPI\Client\Model\ApiServersIdMakeManagedServerTags[]|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param \OpenAPI\Client\Model\ApiServersIdMakeManagedServerTags[]|null $tags Metadata tags, Array of objects having a name and value.
     *
     * @return self
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets add_tags
     *
     * @return \OpenAPI\Client\Model\ApiServersIdMakeManagedServerTags[]|null
     */
    public function getAddTags()
    {
        return $this->container['add_tags'];
    }

    /**
     * Sets add_tags
     *
     * @param \OpenAPI\Client\Model\ApiServersIdMakeManagedServerTags[]|null $add_tags Add or update value of Metadata tags, Array of objects having a name and value.
     *
     * @return self
     */
    public function setAddTags($add_tags)
    {
        $this->container['add_tags'] = $add_tags;

        return $this;
    }

    /**
     * Gets remove_tags
     *
     * @return \OpenAPI\Client\Model\InstanceUpdateInstanceRemoveTags[]|null
     */
    public function getRemoveTags()
    {
        return $this->container['remove_tags'];
    }

    /**
     * Sets remove_tags
     *
     * @param \OpenAPI\Client\Model\InstanceUpdateInstanceRemoveTags[]|null $remove_tags Remove Metadata tags, Array of objects having a name and an optional value. If value is passed, it must match to be removed.
     *
     * @return self
     */
    public function setRemoveTags($remove_tags)
    {
        $this->container['remove_tags'] = $remove_tags;

        return $this;
    }

    /**
     * Gets power_schedule_type
     *
     * @return int|null
     */
    public function getPowerScheduleType()
    {
        return $this->container['power_schedule_type'];
    }

    /**
     * Sets power_schedule_type
     *
     * @param int|null $power_schedule_type Power schedule ID.
     *
     * @return self
     */
    public function setPowerScheduleType($power_schedule_type)
    {
        $this->container['power_schedule_type'] = $power_schedule_type;

        return $this;
    }

    /**
     * Gets site
     *
     * @return \OpenAPI\Client\Model\InstanceUpdateInstanceSite|null
     */
    public function getSite()
    {
        return $this->container['site'];
    }

    /**
     * Sets site
     *
     * @param \OpenAPI\Client\Model\InstanceUpdateInstanceSite|null $site site
     *
     * @return self
     */
    public function setSite($site)
    {
        $this->container['site'] = $site;

        return $this;
    }

    /**
     * Gets owner_id
     *
     * @return int|null
     */
    public function getOwnerId()
    {
        return $this->container['owner_id'];
    }

    /**
     * Sets owner_id
     *
     * @param int|null $owner_id User ID, can be used to change instance owner.
     *
     * @return self
     */
    public function setOwnerId($owner_id)
    {
        $this->container['owner_id'] = $owner_id;

        return $this;
    }

    /**
     * Gets display_name
     *
     * @return string|null
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string|null $display_name Name used in the UI for display
     *
     * @return self
     */
    public function setDisplayName($display_name)
    {
        $this->container['display_name'] = $display_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


