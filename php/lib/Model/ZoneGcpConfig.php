<?php
/**
 * ZoneGcpConfig
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ZoneGcpConfig Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class ZoneGcpConfig implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'zoneGcpConfig';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'private_key' => 'string',
        'client_email' => 'string',
        'project_id' => 'string',
        'google_region_id' => 'string',
        '_import_existing' => 'string',
        'import_existing' => 'string',
        'appliance_url' => 'string',
        'datacenter_name' => 'string',
        'network_server_id' => 'string',
        'network_server' => '\OpenAPI\Client\Model\ZoneVcenterConfigNetworkServer',
        'security_server' => 'string',
        'certificate_provider' => 'string',
        'backup_mode' => 'string',
        'replication_mode' => 'string',
        'dns_integration_id' => 'string',
        'service_registry_id' => 'string',
        'config_management_id' => 'string',
        'private_key_hash' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'private_key' => null,
        'client_email' => null,
        'project_id' => null,
        'google_region_id' => null,
        '_import_existing' => null,
        'import_existing' => null,
        'appliance_url' => null,
        'datacenter_name' => null,
        'network_server_id' => null,
        'network_server' => null,
        'security_server' => null,
        'certificate_provider' => null,
        'backup_mode' => null,
        'replication_mode' => null,
        'dns_integration_id' => null,
        'service_registry_id' => null,
        'config_management_id' => null,
        'private_key_hash' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'private_key' => 'privateKey',
        'client_email' => 'clientEmail',
        'project_id' => 'projectId',
        'google_region_id' => 'googleRegionId',
        '_import_existing' => '_importExisting',
        'import_existing' => 'importExisting',
        'appliance_url' => 'applianceUrl',
        'datacenter_name' => 'datacenterName',
        'network_server_id' => 'networkServer.id',
        'network_server' => 'networkServer',
        'security_server' => 'securityServer',
        'certificate_provider' => 'certificateProvider',
        'backup_mode' => 'backupMode',
        'replication_mode' => 'replicationMode',
        'dns_integration_id' => 'dnsIntegrationId',
        'service_registry_id' => 'serviceRegistryId',
        'config_management_id' => 'configManagementId',
        'private_key_hash' => 'privateKeyHash'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'private_key' => 'setPrivateKey',
        'client_email' => 'setClientEmail',
        'project_id' => 'setProjectId',
        'google_region_id' => 'setGoogleRegionId',
        '_import_existing' => 'setImportExisting',
        'import_existing' => 'setImportExisting',
        'appliance_url' => 'setApplianceUrl',
        'datacenter_name' => 'setDatacenterName',
        'network_server_id' => 'setNetworkServerId',
        'network_server' => 'setNetworkServer',
        'security_server' => 'setSecurityServer',
        'certificate_provider' => 'setCertificateProvider',
        'backup_mode' => 'setBackupMode',
        'replication_mode' => 'setReplicationMode',
        'dns_integration_id' => 'setDnsIntegrationId',
        'service_registry_id' => 'setServiceRegistryId',
        'config_management_id' => 'setConfigManagementId',
        'private_key_hash' => 'setPrivateKeyHash'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'private_key' => 'getPrivateKey',
        'client_email' => 'getClientEmail',
        'project_id' => 'getProjectId',
        'google_region_id' => 'getGoogleRegionId',
        '_import_existing' => 'getImportExisting',
        'import_existing' => 'getImportExisting',
        'appliance_url' => 'getApplianceUrl',
        'datacenter_name' => 'getDatacenterName',
        'network_server_id' => 'getNetworkServerId',
        'network_server' => 'getNetworkServer',
        'security_server' => 'getSecurityServer',
        'certificate_provider' => 'getCertificateProvider',
        'backup_mode' => 'getBackupMode',
        'replication_mode' => 'getReplicationMode',
        'dns_integration_id' => 'getDnsIntegrationId',
        'service_registry_id' => 'getServiceRegistryId',
        'config_management_id' => 'getConfigManagementId',
        'private_key_hash' => 'getPrivateKeyHash'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['private_key'] = $data['private_key'] ?? null;
        $this->container['client_email'] = $data['client_email'] ?? null;
        $this->container['project_id'] = $data['project_id'] ?? null;
        $this->container['google_region_id'] = $data['google_region_id'] ?? null;
        $this->container['_import_existing'] = $data['_import_existing'] ?? null;
        $this->container['import_existing'] = $data['import_existing'] ?? null;
        $this->container['appliance_url'] = $data['appliance_url'] ?? null;
        $this->container['datacenter_name'] = $data['datacenter_name'] ?? null;
        $this->container['network_server_id'] = $data['network_server_id'] ?? null;
        $this->container['network_server'] = $data['network_server'] ?? null;
        $this->container['security_server'] = $data['security_server'] ?? null;
        $this->container['certificate_provider'] = $data['certificate_provider'] ?? null;
        $this->container['backup_mode'] = $data['backup_mode'] ?? null;
        $this->container['replication_mode'] = $data['replication_mode'] ?? null;
        $this->container['dns_integration_id'] = $data['dns_integration_id'] ?? null;
        $this->container['service_registry_id'] = $data['service_registry_id'] ?? null;
        $this->container['config_management_id'] = $data['config_management_id'] ?? null;
        $this->container['private_key_hash'] = $data['private_key_hash'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets private_key
     *
     * @return string|null
     */
    public function getPrivateKey()
    {
        return $this->container['private_key'];
    }

    /**
     * Sets private_key
     *
     * @param string|null $private_key private_key
     *
     * @return self
     */
    public function setPrivateKey($private_key)
    {
        $this->container['private_key'] = $private_key;

        return $this;
    }

    /**
     * Gets client_email
     *
     * @return string|null
     */
    public function getClientEmail()
    {
        return $this->container['client_email'];
    }

    /**
     * Sets client_email
     *
     * @param string|null $client_email client_email
     *
     * @return self
     */
    public function setClientEmail($client_email)
    {
        $this->container['client_email'] = $client_email;

        return $this;
    }

    /**
     * Gets project_id
     *
     * @return string|null
     */
    public function getProjectId()
    {
        return $this->container['project_id'];
    }

    /**
     * Sets project_id
     *
     * @param string|null $project_id project_id
     *
     * @return self
     */
    public function setProjectId($project_id)
    {
        $this->container['project_id'] = $project_id;

        return $this;
    }

    /**
     * Gets google_region_id
     *
     * @return string|null
     */
    public function getGoogleRegionId()
    {
        return $this->container['google_region_id'];
    }

    /**
     * Sets google_region_id
     *
     * @param string|null $google_region_id google_region_id
     *
     * @return self
     */
    public function setGoogleRegionId($google_region_id)
    {
        $this->container['google_region_id'] = $google_region_id;

        return $this;
    }

    /**
     * Gets _import_existing
     *
     * @return string|null
     */
    public function getImportExisting()
    {
        return $this->container['_import_existing'];
    }

    /**
     * Sets _import_existing
     *
     * @param string|null $_import_existing _import_existing
     *
     * @return self
     */
    public function setImportExisting($_import_existing)
    {
        $this->container['_import_existing'] = $_import_existing;

        return $this;
    }

    /**
     * Gets import_existing
     *
     * @return string|null
     */
    public function getImportExisting()
    {
        return $this->container['import_existing'];
    }

    /**
     * Sets import_existing
     *
     * @param string|null $import_existing import_existing
     *
     * @return self
     */
    public function setImportExisting($import_existing)
    {
        $this->container['import_existing'] = $import_existing;

        return $this;
    }

    /**
     * Gets appliance_url
     *
     * @return string|null
     */
    public function getApplianceUrl()
    {
        return $this->container['appliance_url'];
    }

    /**
     * Sets appliance_url
     *
     * @param string|null $appliance_url appliance_url
     *
     * @return self
     */
    public function setApplianceUrl($appliance_url)
    {
        $this->container['appliance_url'] = $appliance_url;

        return $this;
    }

    /**
     * Gets datacenter_name
     *
     * @return string|null
     */
    public function getDatacenterName()
    {
        return $this->container['datacenter_name'];
    }

    /**
     * Sets datacenter_name
     *
     * @param string|null $datacenter_name datacenter_name
     *
     * @return self
     */
    public function setDatacenterName($datacenter_name)
    {
        $this->container['datacenter_name'] = $datacenter_name;

        return $this;
    }

    /**
     * Gets network_server_id
     *
     * @return string|null
     */
    public function getNetworkServerId()
    {
        return $this->container['network_server_id'];
    }

    /**
     * Sets network_server_id
     *
     * @param string|null $network_server_id network_server_id
     *
     * @return self
     */
    public function setNetworkServerId($network_server_id)
    {
        $this->container['network_server_id'] = $network_server_id;

        return $this;
    }

    /**
     * Gets network_server
     *
     * @return \OpenAPI\Client\Model\ZoneVcenterConfigNetworkServer|null
     */
    public function getNetworkServer()
    {
        return $this->container['network_server'];
    }

    /**
     * Sets network_server
     *
     * @param \OpenAPI\Client\Model\ZoneVcenterConfigNetworkServer|null $network_server network_server
     *
     * @return self
     */
    public function setNetworkServer($network_server)
    {
        $this->container['network_server'] = $network_server;

        return $this;
    }

    /**
     * Gets security_server
     *
     * @return string|null
     */
    public function getSecurityServer()
    {
        return $this->container['security_server'];
    }

    /**
     * Sets security_server
     *
     * @param string|null $security_server security_server
     *
     * @return self
     */
    public function setSecurityServer($security_server)
    {
        $this->container['security_server'] = $security_server;

        return $this;
    }

    /**
     * Gets certificate_provider
     *
     * @return string|null
     */
    public function getCertificateProvider()
    {
        return $this->container['certificate_provider'];
    }

    /**
     * Sets certificate_provider
     *
     * @param string|null $certificate_provider certificate_provider
     *
     * @return self
     */
    public function setCertificateProvider($certificate_provider)
    {
        $this->container['certificate_provider'] = $certificate_provider;

        return $this;
    }

    /**
     * Gets backup_mode
     *
     * @return string|null
     */
    public function getBackupMode()
    {
        return $this->container['backup_mode'];
    }

    /**
     * Sets backup_mode
     *
     * @param string|null $backup_mode backup_mode
     *
     * @return self
     */
    public function setBackupMode($backup_mode)
    {
        $this->container['backup_mode'] = $backup_mode;

        return $this;
    }

    /**
     * Gets replication_mode
     *
     * @return string|null
     */
    public function getReplicationMode()
    {
        return $this->container['replication_mode'];
    }

    /**
     * Sets replication_mode
     *
     * @param string|null $replication_mode replication_mode
     *
     * @return self
     */
    public function setReplicationMode($replication_mode)
    {
        $this->container['replication_mode'] = $replication_mode;

        return $this;
    }

    /**
     * Gets dns_integration_id
     *
     * @return string|null
     */
    public function getDnsIntegrationId()
    {
        return $this->container['dns_integration_id'];
    }

    /**
     * Sets dns_integration_id
     *
     * @param string|null $dns_integration_id dns_integration_id
     *
     * @return self
     */
    public function setDnsIntegrationId($dns_integration_id)
    {
        $this->container['dns_integration_id'] = $dns_integration_id;

        return $this;
    }

    /**
     * Gets service_registry_id
     *
     * @return string|null
     */
    public function getServiceRegistryId()
    {
        return $this->container['service_registry_id'];
    }

    /**
     * Sets service_registry_id
     *
     * @param string|null $service_registry_id service_registry_id
     *
     * @return self
     */
    public function setServiceRegistryId($service_registry_id)
    {
        $this->container['service_registry_id'] = $service_registry_id;

        return $this;
    }

    /**
     * Gets config_management_id
     *
     * @return string|null
     */
    public function getConfigManagementId()
    {
        return $this->container['config_management_id'];
    }

    /**
     * Sets config_management_id
     *
     * @param string|null $config_management_id config_management_id
     *
     * @return self
     */
    public function setConfigManagementId($config_management_id)
    {
        $this->container['config_management_id'] = $config_management_id;

        return $this;
    }

    /**
     * Gets private_key_hash
     *
     * @return string|null
     */
    public function getPrivateKeyHash()
    {
        return $this->container['private_key_hash'];
    }

    /**
     * Sets private_key_hash
     *
     * @param string|null $private_key_hash private_key_hash
     *
     * @return self
     */
    public function setPrivateKeyHash($private_key_hash)
    {
        $this->container['private_key_hash'] = $private_key_hash;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


