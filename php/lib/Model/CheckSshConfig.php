<?php
/**
 * CheckSshConfig
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CheckSshConfig Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class CheckSshConfig implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'checkSshConfig';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'ssh_port' => 'int',
        'check_user' => 'string',
        'tunnel_on' => 'string',
        'text_check_on' => 'string',
        'check_password' => 'string',
        'ssh_host' => 'string',
        'ssh_user' => 'string',
        'web_text_match' => 'string',
        'check_password_hash' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'ssh_port' => 'int64',
        'check_user' => null,
        'tunnel_on' => null,
        'text_check_on' => null,
        'check_password' => null,
        'ssh_host' => null,
        'ssh_user' => null,
        'web_text_match' => null,
        'check_password_hash' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ssh_port' => 'sshPort',
        'check_user' => 'checkUser',
        'tunnel_on' => 'tunnelOn',
        'text_check_on' => 'textCheckOn',
        'check_password' => 'checkPassword',
        'ssh_host' => 'sshHost',
        'ssh_user' => 'sshUser',
        'web_text_match' => 'webTextMatch',
        'check_password_hash' => 'checkPasswordHash'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ssh_port' => 'setSshPort',
        'check_user' => 'setCheckUser',
        'tunnel_on' => 'setTunnelOn',
        'text_check_on' => 'setTextCheckOn',
        'check_password' => 'setCheckPassword',
        'ssh_host' => 'setSshHost',
        'ssh_user' => 'setSshUser',
        'web_text_match' => 'setWebTextMatch',
        'check_password_hash' => 'setCheckPasswordHash'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ssh_port' => 'getSshPort',
        'check_user' => 'getCheckUser',
        'tunnel_on' => 'getTunnelOn',
        'text_check_on' => 'getTextCheckOn',
        'check_password' => 'getCheckPassword',
        'ssh_host' => 'getSshHost',
        'ssh_user' => 'getSshUser',
        'web_text_match' => 'getWebTextMatch',
        'check_password_hash' => 'getCheckPasswordHash'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['ssh_port'] = $data['ssh_port'] ?? null;
        $this->container['check_user'] = $data['check_user'] ?? null;
        $this->container['tunnel_on'] = $data['tunnel_on'] ?? null;
        $this->container['text_check_on'] = $data['text_check_on'] ?? null;
        $this->container['check_password'] = $data['check_password'] ?? null;
        $this->container['ssh_host'] = $data['ssh_host'] ?? null;
        $this->container['ssh_user'] = $data['ssh_user'] ?? null;
        $this->container['web_text_match'] = $data['web_text_match'] ?? null;
        $this->container['check_password_hash'] = $data['check_password_hash'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ssh_port
     *
     * @return int|null
     */
    public function getSshPort()
    {
        return $this->container['ssh_port'];
    }

    /**
     * Sets ssh_port
     *
     * @param int|null $ssh_port ssh_port
     *
     * @return self
     */
    public function setSshPort($ssh_port)
    {
        $this->container['ssh_port'] = $ssh_port;

        return $this;
    }

    /**
     * Gets check_user
     *
     * @return string|null
     */
    public function getCheckUser()
    {
        return $this->container['check_user'];
    }

    /**
     * Sets check_user
     *
     * @param string|null $check_user check_user
     *
     * @return self
     */
    public function setCheckUser($check_user)
    {
        $this->container['check_user'] = $check_user;

        return $this;
    }

    /**
     * Gets tunnel_on
     *
     * @return string|null
     */
    public function getTunnelOn()
    {
        return $this->container['tunnel_on'];
    }

    /**
     * Sets tunnel_on
     *
     * @param string|null $tunnel_on tunnel_on
     *
     * @return self
     */
    public function setTunnelOn($tunnel_on)
    {
        $this->container['tunnel_on'] = $tunnel_on;

        return $this;
    }

    /**
     * Gets text_check_on
     *
     * @return string|null
     */
    public function getTextCheckOn()
    {
        return $this->container['text_check_on'];
    }

    /**
     * Sets text_check_on
     *
     * @param string|null $text_check_on text_check_on
     *
     * @return self
     */
    public function setTextCheckOn($text_check_on)
    {
        $this->container['text_check_on'] = $text_check_on;

        return $this;
    }

    /**
     * Gets check_password
     *
     * @return string|null
     */
    public function getCheckPassword()
    {
        return $this->container['check_password'];
    }

    /**
     * Sets check_password
     *
     * @param string|null $check_password check_password
     *
     * @return self
     */
    public function setCheckPassword($check_password)
    {
        $this->container['check_password'] = $check_password;

        return $this;
    }

    /**
     * Gets ssh_host
     *
     * @return string|null
     */
    public function getSshHost()
    {
        return $this->container['ssh_host'];
    }

    /**
     * Sets ssh_host
     *
     * @param string|null $ssh_host ssh_host
     *
     * @return self
     */
    public function setSshHost($ssh_host)
    {
        $this->container['ssh_host'] = $ssh_host;

        return $this;
    }

    /**
     * Gets ssh_user
     *
     * @return string|null
     */
    public function getSshUser()
    {
        return $this->container['ssh_user'];
    }

    /**
     * Sets ssh_user
     *
     * @param string|null $ssh_user ssh_user
     *
     * @return self
     */
    public function setSshUser($ssh_user)
    {
        $this->container['ssh_user'] = $ssh_user;

        return $this;
    }

    /**
     * Gets web_text_match
     *
     * @return string|null
     */
    public function getWebTextMatch()
    {
        return $this->container['web_text_match'];
    }

    /**
     * Sets web_text_match
     *
     * @param string|null $web_text_match web_text_match
     *
     * @return self
     */
    public function setWebTextMatch($web_text_match)
    {
        $this->container['web_text_match'] = $web_text_match;

        return $this;
    }

    /**
     * Gets check_password_hash
     *
     * @return string|null
     */
    public function getCheckPasswordHash()
    {
        return $this->container['check_password_hash'];
    }

    /**
     * Sets check_password_hash
     *
     * @param string|null $check_password_hash check_password_hash
     *
     * @return self
     */
    public function setCheckPasswordHash($check_password_hash)
    {
        $this->container['check_password_hash'] = $check_password_hash;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


