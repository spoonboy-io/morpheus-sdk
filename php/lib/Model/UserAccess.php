<?php
/**
 * UserAccess
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * UserAccess Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class UserAccess implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'user_access';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'features' => 'object[]',
        'zones' => 'object[]',
        'sites' => 'object[]',
        'instance_types' => 'object[]',
        'app_templates' => 'object[]',
        'catalog_item_types' => 'object[]',
        'personas' => 'object[]',
        'vdi_pools' => 'object[]',
        'report_types' => 'object[]',
        'tasks' => 'object[]',
        'task_sets' => 'object[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'features' => null,
        'zones' => null,
        'sites' => null,
        'instance_types' => null,
        'app_templates' => null,
        'catalog_item_types' => null,
        'personas' => null,
        'vdi_pools' => null,
        'report_types' => null,
        'tasks' => null,
        'task_sets' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'features' => 'features',
        'zones' => 'zones',
        'sites' => 'sites',
        'instance_types' => 'instanceTypes',
        'app_templates' => 'appTemplates',
        'catalog_item_types' => 'catalogItemTypes',
        'personas' => 'personas',
        'vdi_pools' => 'vdiPools',
        'report_types' => 'reportTypes',
        'tasks' => 'tasks',
        'task_sets' => 'taskSets'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'features' => 'setFeatures',
        'zones' => 'setZones',
        'sites' => 'setSites',
        'instance_types' => 'setInstanceTypes',
        'app_templates' => 'setAppTemplates',
        'catalog_item_types' => 'setCatalogItemTypes',
        'personas' => 'setPersonas',
        'vdi_pools' => 'setVdiPools',
        'report_types' => 'setReportTypes',
        'tasks' => 'setTasks',
        'task_sets' => 'setTaskSets'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'features' => 'getFeatures',
        'zones' => 'getZones',
        'sites' => 'getSites',
        'instance_types' => 'getInstanceTypes',
        'app_templates' => 'getAppTemplates',
        'catalog_item_types' => 'getCatalogItemTypes',
        'personas' => 'getPersonas',
        'vdi_pools' => 'getVdiPools',
        'report_types' => 'getReportTypes',
        'tasks' => 'getTasks',
        'task_sets' => 'getTaskSets'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['features'] = $data['features'] ?? null;
        $this->container['zones'] = $data['zones'] ?? null;
        $this->container['sites'] = $data['sites'] ?? null;
        $this->container['instance_types'] = $data['instance_types'] ?? null;
        $this->container['app_templates'] = $data['app_templates'] ?? null;
        $this->container['catalog_item_types'] = $data['catalog_item_types'] ?? null;
        $this->container['personas'] = $data['personas'] ?? null;
        $this->container['vdi_pools'] = $data['vdi_pools'] ?? null;
        $this->container['report_types'] = $data['report_types'] ?? null;
        $this->container['tasks'] = $data['tasks'] ?? null;
        $this->container['task_sets'] = $data['task_sets'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets features
     *
     * @return object[]|null
     */
    public function getFeatures()
    {
        return $this->container['features'];
    }

    /**
     * Sets features
     *
     * @param object[]|null $features features
     *
     * @return self
     */
    public function setFeatures($features)
    {
        $this->container['features'] = $features;

        return $this;
    }

    /**
     * Gets zones
     *
     * @return object[]|null
     */
    public function getZones()
    {
        return $this->container['zones'];
    }

    /**
     * Sets zones
     *
     * @param object[]|null $zones zones
     *
     * @return self
     */
    public function setZones($zones)
    {
        $this->container['zones'] = $zones;

        return $this;
    }

    /**
     * Gets sites
     *
     * @return object[]|null
     */
    public function getSites()
    {
        return $this->container['sites'];
    }

    /**
     * Sets sites
     *
     * @param object[]|null $sites sites
     *
     * @return self
     */
    public function setSites($sites)
    {
        $this->container['sites'] = $sites;

        return $this;
    }

    /**
     * Gets instance_types
     *
     * @return object[]|null
     */
    public function getInstanceTypes()
    {
        return $this->container['instance_types'];
    }

    /**
     * Sets instance_types
     *
     * @param object[]|null $instance_types instance_types
     *
     * @return self
     */
    public function setInstanceTypes($instance_types)
    {
        $this->container['instance_types'] = $instance_types;

        return $this;
    }

    /**
     * Gets app_templates
     *
     * @return object[]|null
     */
    public function getAppTemplates()
    {
        return $this->container['app_templates'];
    }

    /**
     * Sets app_templates
     *
     * @param object[]|null $app_templates app_templates
     *
     * @return self
     */
    public function setAppTemplates($app_templates)
    {
        $this->container['app_templates'] = $app_templates;

        return $this;
    }

    /**
     * Gets catalog_item_types
     *
     * @return object[]|null
     */
    public function getCatalogItemTypes()
    {
        return $this->container['catalog_item_types'];
    }

    /**
     * Sets catalog_item_types
     *
     * @param object[]|null $catalog_item_types catalog_item_types
     *
     * @return self
     */
    public function setCatalogItemTypes($catalog_item_types)
    {
        $this->container['catalog_item_types'] = $catalog_item_types;

        return $this;
    }

    /**
     * Gets personas
     *
     * @return object[]|null
     */
    public function getPersonas()
    {
        return $this->container['personas'];
    }

    /**
     * Sets personas
     *
     * @param object[]|null $personas personas
     *
     * @return self
     */
    public function setPersonas($personas)
    {
        $this->container['personas'] = $personas;

        return $this;
    }

    /**
     * Gets vdi_pools
     *
     * @return object[]|null
     */
    public function getVdiPools()
    {
        return $this->container['vdi_pools'];
    }

    /**
     * Sets vdi_pools
     *
     * @param object[]|null $vdi_pools vdi_pools
     *
     * @return self
     */
    public function setVdiPools($vdi_pools)
    {
        $this->container['vdi_pools'] = $vdi_pools;

        return $this;
    }

    /**
     * Gets report_types
     *
     * @return object[]|null
     */
    public function getReportTypes()
    {
        return $this->container['report_types'];
    }

    /**
     * Sets report_types
     *
     * @param object[]|null $report_types report_types
     *
     * @return self
     */
    public function setReportTypes($report_types)
    {
        $this->container['report_types'] = $report_types;

        return $this;
    }

    /**
     * Gets tasks
     *
     * @return object[]|null
     */
    public function getTasks()
    {
        return $this->container['tasks'];
    }

    /**
     * Sets tasks
     *
     * @param object[]|null $tasks tasks
     *
     * @return self
     */
    public function setTasks($tasks)
    {
        $this->container['tasks'] = $tasks;

        return $this;
    }

    /**
     * Gets task_sets
     *
     * @return object[]|null
     */
    public function getTaskSets()
    {
        return $this->container['task_sets'];
    }

    /**
     * Sets task_sets
     *
     * @param object[]|null $task_sets task_sets
     *
     * @return self
     */
    public function setTaskSets($task_sets)
    {
        $this->container['task_sets'] = $task_sets;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


