<?php
/**
 * AppStats
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * AppStats Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class AppStats implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'app_stats';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'used_memory' => 'int',
        'max_memory' => 'int',
        'used_storage' => 'int',
        'max_storage' => 'int',
        'running' => 'int',
        'total' => 'int',
        'cpu_usage' => 'float',
        'instance_count' => 'int',
        'instance_day_count' => 'int[]',
        'instance_day_count_total' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'used_memory' => 'int64',
        'max_memory' => 'int64',
        'used_storage' => 'int64',
        'max_storage' => 'int64',
        'running' => 'int64',
        'total' => 'int64',
        'cpu_usage' => null,
        'instance_count' => 'int64',
        'instance_day_count' => 'int64',
        'instance_day_count_total' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'used_memory' => 'usedMemory',
        'max_memory' => 'maxMemory',
        'used_storage' => 'usedStorage',
        'max_storage' => 'maxStorage',
        'running' => 'running',
        'total' => 'total',
        'cpu_usage' => 'cpuUsage',
        'instance_count' => 'instanceCount',
        'instance_day_count' => 'instanceDayCount',
        'instance_day_count_total' => 'instanceDayCountTotal'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'used_memory' => 'setUsedMemory',
        'max_memory' => 'setMaxMemory',
        'used_storage' => 'setUsedStorage',
        'max_storage' => 'setMaxStorage',
        'running' => 'setRunning',
        'total' => 'setTotal',
        'cpu_usage' => 'setCpuUsage',
        'instance_count' => 'setInstanceCount',
        'instance_day_count' => 'setInstanceDayCount',
        'instance_day_count_total' => 'setInstanceDayCountTotal'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'used_memory' => 'getUsedMemory',
        'max_memory' => 'getMaxMemory',
        'used_storage' => 'getUsedStorage',
        'max_storage' => 'getMaxStorage',
        'running' => 'getRunning',
        'total' => 'getTotal',
        'cpu_usage' => 'getCpuUsage',
        'instance_count' => 'getInstanceCount',
        'instance_day_count' => 'getInstanceDayCount',
        'instance_day_count_total' => 'getInstanceDayCountTotal'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['used_memory'] = $data['used_memory'] ?? null;
        $this->container['max_memory'] = $data['max_memory'] ?? null;
        $this->container['used_storage'] = $data['used_storage'] ?? null;
        $this->container['max_storage'] = $data['max_storage'] ?? null;
        $this->container['running'] = $data['running'] ?? null;
        $this->container['total'] = $data['total'] ?? null;
        $this->container['cpu_usage'] = $data['cpu_usage'] ?? null;
        $this->container['instance_count'] = $data['instance_count'] ?? null;
        $this->container['instance_day_count'] = $data['instance_day_count'] ?? null;
        $this->container['instance_day_count_total'] = $data['instance_day_count_total'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets used_memory
     *
     * @return int|null
     */
    public function getUsedMemory()
    {
        return $this->container['used_memory'];
    }

    /**
     * Sets used_memory
     *
     * @param int|null $used_memory used_memory
     *
     * @return self
     */
    public function setUsedMemory($used_memory)
    {
        $this->container['used_memory'] = $used_memory;

        return $this;
    }

    /**
     * Gets max_memory
     *
     * @return int|null
     */
    public function getMaxMemory()
    {
        return $this->container['max_memory'];
    }

    /**
     * Sets max_memory
     *
     * @param int|null $max_memory max_memory
     *
     * @return self
     */
    public function setMaxMemory($max_memory)
    {
        $this->container['max_memory'] = $max_memory;

        return $this;
    }

    /**
     * Gets used_storage
     *
     * @return int|null
     */
    public function getUsedStorage()
    {
        return $this->container['used_storage'];
    }

    /**
     * Sets used_storage
     *
     * @param int|null $used_storage used_storage
     *
     * @return self
     */
    public function setUsedStorage($used_storage)
    {
        $this->container['used_storage'] = $used_storage;

        return $this;
    }

    /**
     * Gets max_storage
     *
     * @return int|null
     */
    public function getMaxStorage()
    {
        return $this->container['max_storage'];
    }

    /**
     * Sets max_storage
     *
     * @param int|null $max_storage max_storage
     *
     * @return self
     */
    public function setMaxStorage($max_storage)
    {
        $this->container['max_storage'] = $max_storage;

        return $this;
    }

    /**
     * Gets running
     *
     * @return int|null
     */
    public function getRunning()
    {
        return $this->container['running'];
    }

    /**
     * Sets running
     *
     * @param int|null $running running
     *
     * @return self
     */
    public function setRunning($running)
    {
        $this->container['running'] = $running;

        return $this;
    }

    /**
     * Gets total
     *
     * @return int|null
     */
    public function getTotal()
    {
        return $this->container['total'];
    }

    /**
     * Sets total
     *
     * @param int|null $total total
     *
     * @return self
     */
    public function setTotal($total)
    {
        $this->container['total'] = $total;

        return $this;
    }

    /**
     * Gets cpu_usage
     *
     * @return float|null
     */
    public function getCpuUsage()
    {
        return $this->container['cpu_usage'];
    }

    /**
     * Sets cpu_usage
     *
     * @param float|null $cpu_usage cpu_usage
     *
     * @return self
     */
    public function setCpuUsage($cpu_usage)
    {
        $this->container['cpu_usage'] = $cpu_usage;

        return $this;
    }

    /**
     * Gets instance_count
     *
     * @return int|null
     */
    public function getInstanceCount()
    {
        return $this->container['instance_count'];
    }

    /**
     * Sets instance_count
     *
     * @param int|null $instance_count instance_count
     *
     * @return self
     */
    public function setInstanceCount($instance_count)
    {
        $this->container['instance_count'] = $instance_count;

        return $this;
    }

    /**
     * Gets instance_day_count
     *
     * @return int[]|null
     */
    public function getInstanceDayCount()
    {
        return $this->container['instance_day_count'];
    }

    /**
     * Sets instance_day_count
     *
     * @param int[]|null $instance_day_count instance_day_count
     *
     * @return self
     */
    public function setInstanceDayCount($instance_day_count)
    {
        $this->container['instance_day_count'] = $instance_day_count;

        return $this;
    }

    /**
     * Gets instance_day_count_total
     *
     * @return int|null
     */
    public function getInstanceDayCountTotal()
    {
        return $this->container['instance_day_count_total'];
    }

    /**
     * Sets instance_day_count_total
     *
     * @param int|null $instance_day_count_total instance_day_count_total
     *
     * @return self
     */
    public function setInstanceDayCountTotal($instance_day_count_total)
    {
        $this->container['instance_day_count_total'] = $instance_day_count_total;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


