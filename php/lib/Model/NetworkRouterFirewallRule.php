<?php
/**
 * NetworkRouterFirewallRule
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * NetworkRouterFirewallRule Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class NetworkRouterFirewallRule implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'networkRouterFirewallRule';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'name' => 'string',
        'code' => 'string',
        'enabled' => 'bool',
        'priority' => 'int',
        'group_name' => 'string',
        'direction' => 'string',
        'rule_type' => 'string',
        'policy' => 'string',
        'source' => 'string[]',
        'source_type' => 'string',
        'destination' => 'string[]',
        'destination_type' => 'string',
        'profiles' => 'string[]',
        'protocol' => 'string',
        'application' => 'string',
        'application_type' => 'string',
        'port_range' => 'string',
        'source_port_range' => 'string',
        'source_group' => 'string',
        'source_tier' => 'string',
        'applications' => '\OpenAPI\Client\Model\InlineResponse20040AppDeployInstance[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'name' => null,
        'code' => null,
        'enabled' => null,
        'priority' => 'int64',
        'group_name' => null,
        'direction' => null,
        'rule_type' => null,
        'policy' => null,
        'source' => null,
        'source_type' => null,
        'destination' => null,
        'destination_type' => null,
        'profiles' => null,
        'protocol' => null,
        'application' => null,
        'application_type' => null,
        'port_range' => null,
        'source_port_range' => null,
        'source_group' => null,
        'source_tier' => null,
        'applications' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'code' => 'code',
        'enabled' => 'enabled',
        'priority' => 'priority',
        'group_name' => 'groupName',
        'direction' => 'direction',
        'rule_type' => 'ruleType',
        'policy' => 'policy',
        'source' => 'source',
        'source_type' => 'sourceType',
        'destination' => 'destination',
        'destination_type' => 'destinationType',
        'profiles' => 'profiles',
        'protocol' => 'protocol',
        'application' => 'application',
        'application_type' => 'applicationType',
        'port_range' => 'portRange',
        'source_port_range' => 'sourcePortRange',
        'source_group' => 'sourceGroup',
        'source_tier' => 'sourceTier',
        'applications' => 'applications'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'code' => 'setCode',
        'enabled' => 'setEnabled',
        'priority' => 'setPriority',
        'group_name' => 'setGroupName',
        'direction' => 'setDirection',
        'rule_type' => 'setRuleType',
        'policy' => 'setPolicy',
        'source' => 'setSource',
        'source_type' => 'setSourceType',
        'destination' => 'setDestination',
        'destination_type' => 'setDestinationType',
        'profiles' => 'setProfiles',
        'protocol' => 'setProtocol',
        'application' => 'setApplication',
        'application_type' => 'setApplicationType',
        'port_range' => 'setPortRange',
        'source_port_range' => 'setSourcePortRange',
        'source_group' => 'setSourceGroup',
        'source_tier' => 'setSourceTier',
        'applications' => 'setApplications'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'code' => 'getCode',
        'enabled' => 'getEnabled',
        'priority' => 'getPriority',
        'group_name' => 'getGroupName',
        'direction' => 'getDirection',
        'rule_type' => 'getRuleType',
        'policy' => 'getPolicy',
        'source' => 'getSource',
        'source_type' => 'getSourceType',
        'destination' => 'getDestination',
        'destination_type' => 'getDestinationType',
        'profiles' => 'getProfiles',
        'protocol' => 'getProtocol',
        'application' => 'getApplication',
        'application_type' => 'getApplicationType',
        'port_range' => 'getPortRange',
        'source_port_range' => 'getSourcePortRange',
        'source_group' => 'getSourceGroup',
        'source_tier' => 'getSourceTier',
        'applications' => 'getApplications'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['code'] = $data['code'] ?? null;
        $this->container['enabled'] = $data['enabled'] ?? null;
        $this->container['priority'] = $data['priority'] ?? null;
        $this->container['group_name'] = $data['group_name'] ?? null;
        $this->container['direction'] = $data['direction'] ?? null;
        $this->container['rule_type'] = $data['rule_type'] ?? null;
        $this->container['policy'] = $data['policy'] ?? null;
        $this->container['source'] = $data['source'] ?? null;
        $this->container['source_type'] = $data['source_type'] ?? null;
        $this->container['destination'] = $data['destination'] ?? null;
        $this->container['destination_type'] = $data['destination_type'] ?? null;
        $this->container['profiles'] = $data['profiles'] ?? null;
        $this->container['protocol'] = $data['protocol'] ?? null;
        $this->container['application'] = $data['application'] ?? null;
        $this->container['application_type'] = $data['application_type'] ?? null;
        $this->container['port_range'] = $data['port_range'] ?? null;
        $this->container['source_port_range'] = $data['source_port_range'] ?? null;
        $this->container['source_group'] = $data['source_group'] ?? null;
        $this->container['source_tier'] = $data['source_tier'] ?? null;
        $this->container['applications'] = $data['applications'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string|null
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string|null $code code
     *
     * @return self
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool|null
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool|null $enabled enabled
     *
     * @return self
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return int|null
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param int|null $priority priority
     *
     * @return self
     */
    public function setPriority($priority)
    {
        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets group_name
     *
     * @return string|null
     */
    public function getGroupName()
    {
        return $this->container['group_name'];
    }

    /**
     * Sets group_name
     *
     * @param string|null $group_name group_name
     *
     * @return self
     */
    public function setGroupName($group_name)
    {
        $this->container['group_name'] = $group_name;

        return $this;
    }

    /**
     * Gets direction
     *
     * @return string|null
     */
    public function getDirection()
    {
        return $this->container['direction'];
    }

    /**
     * Sets direction
     *
     * @param string|null $direction direction
     *
     * @return self
     */
    public function setDirection($direction)
    {
        $this->container['direction'] = $direction;

        return $this;
    }

    /**
     * Gets rule_type
     *
     * @return string|null
     */
    public function getRuleType()
    {
        return $this->container['rule_type'];
    }

    /**
     * Sets rule_type
     *
     * @param string|null $rule_type rule_type
     *
     * @return self
     */
    public function setRuleType($rule_type)
    {
        $this->container['rule_type'] = $rule_type;

        return $this;
    }

    /**
     * Gets policy
     *
     * @return string|null
     */
    public function getPolicy()
    {
        return $this->container['policy'];
    }

    /**
     * Sets policy
     *
     * @param string|null $policy policy
     *
     * @return self
     */
    public function setPolicy($policy)
    {
        $this->container['policy'] = $policy;

        return $this;
    }

    /**
     * Gets source
     *
     * @return string[]|null
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param string[]|null $source source
     *
     * @return self
     */
    public function setSource($source)
    {
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets source_type
     *
     * @return string|null
     */
    public function getSourceType()
    {
        return $this->container['source_type'];
    }

    /**
     * Sets source_type
     *
     * @param string|null $source_type source_type
     *
     * @return self
     */
    public function setSourceType($source_type)
    {
        $this->container['source_type'] = $source_type;

        return $this;
    }

    /**
     * Gets destination
     *
     * @return string[]|null
     */
    public function getDestination()
    {
        return $this->container['destination'];
    }

    /**
     * Sets destination
     *
     * @param string[]|null $destination destination
     *
     * @return self
     */
    public function setDestination($destination)
    {
        $this->container['destination'] = $destination;

        return $this;
    }

    /**
     * Gets destination_type
     *
     * @return string|null
     */
    public function getDestinationType()
    {
        return $this->container['destination_type'];
    }

    /**
     * Sets destination_type
     *
     * @param string|null $destination_type destination_type
     *
     * @return self
     */
    public function setDestinationType($destination_type)
    {
        $this->container['destination_type'] = $destination_type;

        return $this;
    }

    /**
     * Gets profiles
     *
     * @return string[]|null
     */
    public function getProfiles()
    {
        return $this->container['profiles'];
    }

    /**
     * Sets profiles
     *
     * @param string[]|null $profiles profiles
     *
     * @return self
     */
    public function setProfiles($profiles)
    {
        $this->container['profiles'] = $profiles;

        return $this;
    }

    /**
     * Gets protocol
     *
     * @return string|null
     */
    public function getProtocol()
    {
        return $this->container['protocol'];
    }

    /**
     * Sets protocol
     *
     * @param string|null $protocol protocol
     *
     * @return self
     */
    public function setProtocol($protocol)
    {
        $this->container['protocol'] = $protocol;

        return $this;
    }

    /**
     * Gets application
     *
     * @return string|null
     */
    public function getApplication()
    {
        return $this->container['application'];
    }

    /**
     * Sets application
     *
     * @param string|null $application application
     *
     * @return self
     */
    public function setApplication($application)
    {
        $this->container['application'] = $application;

        return $this;
    }

    /**
     * Gets application_type
     *
     * @return string|null
     */
    public function getApplicationType()
    {
        return $this->container['application_type'];
    }

    /**
     * Sets application_type
     *
     * @param string|null $application_type application_type
     *
     * @return self
     */
    public function setApplicationType($application_type)
    {
        $this->container['application_type'] = $application_type;

        return $this;
    }

    /**
     * Gets port_range
     *
     * @return string|null
     */
    public function getPortRange()
    {
        return $this->container['port_range'];
    }

    /**
     * Sets port_range
     *
     * @param string|null $port_range port_range
     *
     * @return self
     */
    public function setPortRange($port_range)
    {
        $this->container['port_range'] = $port_range;

        return $this;
    }

    /**
     * Gets source_port_range
     *
     * @return string|null
     */
    public function getSourcePortRange()
    {
        return $this->container['source_port_range'];
    }

    /**
     * Sets source_port_range
     *
     * @param string|null $source_port_range source_port_range
     *
     * @return self
     */
    public function setSourcePortRange($source_port_range)
    {
        $this->container['source_port_range'] = $source_port_range;

        return $this;
    }

    /**
     * Gets source_group
     *
     * @return string|null
     */
    public function getSourceGroup()
    {
        return $this->container['source_group'];
    }

    /**
     * Sets source_group
     *
     * @param string|null $source_group source_group
     *
     * @return self
     */
    public function setSourceGroup($source_group)
    {
        $this->container['source_group'] = $source_group;

        return $this;
    }

    /**
     * Gets source_tier
     *
     * @return string|null
     */
    public function getSourceTier()
    {
        return $this->container['source_tier'];
    }

    /**
     * Sets source_tier
     *
     * @param string|null $source_tier source_tier
     *
     * @return self
     */
    public function setSourceTier($source_tier)
    {
        $this->container['source_tier'] = $source_tier;

        return $this;
    }

    /**
     * Gets applications
     *
     * @return \OpenAPI\Client\Model\InlineResponse20040AppDeployInstance[]|null
     */
    public function getApplications()
    {
        return $this->container['applications'];
    }

    /**
     * Sets applications
     *
     * @param \OpenAPI\Client\Model\InlineResponse20040AppDeployInstance[]|null $applications applications
     *
     * @return self
     */
    public function setApplications($applications)
    {
        $this->container['applications'] = $applications;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


