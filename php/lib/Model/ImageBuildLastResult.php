<?php
/**
 * ImageBuildLastResult
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ImageBuildLastResult Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class ImageBuildLastResult implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'imageBuild_lastResult';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'image_build' => '\OpenAPI\Client\Model\InlineResponse20040AppDeployInstance',
        'build_number' => 'int',
        'start_date' => '\DateTime',
        'end_date' => '\DateTime',
        'status_message' => 'string',
        'status_percent' => 'int',
        'status_eta' => 'string',
        'status' => 'string',
        'error_message' => 'string',
        'created_by' => '\OpenAPI\Client\Model\ArchiveBucketFileCreatedBy',
        'temp_instance' => 'string',
        'virtual_images' => '\OpenAPI\Client\Model\InlineResponse20040AppDeployInstance[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'image_build' => null,
        'build_number' => 'int64',
        'start_date' => 'date-time',
        'end_date' => 'date-time',
        'status_message' => null,
        'status_percent' => 'int64',
        'status_eta' => null,
        'status' => null,
        'error_message' => null,
        'created_by' => null,
        'temp_instance' => null,
        'virtual_images' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'image_build' => 'imageBuild',
        'build_number' => 'buildNumber',
        'start_date' => 'startDate',
        'end_date' => 'endDate',
        'status_message' => 'statusMessage',
        'status_percent' => 'statusPercent',
        'status_eta' => 'statusEta',
        'status' => 'status',
        'error_message' => 'errorMessage',
        'created_by' => 'createdBy',
        'temp_instance' => 'tempInstance',
        'virtual_images' => 'virtualImages'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'image_build' => 'setImageBuild',
        'build_number' => 'setBuildNumber',
        'start_date' => 'setStartDate',
        'end_date' => 'setEndDate',
        'status_message' => 'setStatusMessage',
        'status_percent' => 'setStatusPercent',
        'status_eta' => 'setStatusEta',
        'status' => 'setStatus',
        'error_message' => 'setErrorMessage',
        'created_by' => 'setCreatedBy',
        'temp_instance' => 'setTempInstance',
        'virtual_images' => 'setVirtualImages'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'image_build' => 'getImageBuild',
        'build_number' => 'getBuildNumber',
        'start_date' => 'getStartDate',
        'end_date' => 'getEndDate',
        'status_message' => 'getStatusMessage',
        'status_percent' => 'getStatusPercent',
        'status_eta' => 'getStatusEta',
        'status' => 'getStatus',
        'error_message' => 'getErrorMessage',
        'created_by' => 'getCreatedBy',
        'temp_instance' => 'getTempInstance',
        'virtual_images' => 'getVirtualImages'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['image_build'] = $data['image_build'] ?? null;
        $this->container['build_number'] = $data['build_number'] ?? null;
        $this->container['start_date'] = $data['start_date'] ?? null;
        $this->container['end_date'] = $data['end_date'] ?? null;
        $this->container['status_message'] = $data['status_message'] ?? null;
        $this->container['status_percent'] = $data['status_percent'] ?? null;
        $this->container['status_eta'] = $data['status_eta'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['error_message'] = $data['error_message'] ?? null;
        $this->container['created_by'] = $data['created_by'] ?? null;
        $this->container['temp_instance'] = $data['temp_instance'] ?? null;
        $this->container['virtual_images'] = $data['virtual_images'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets image_build
     *
     * @return \OpenAPI\Client\Model\InlineResponse20040AppDeployInstance|null
     */
    public function getImageBuild()
    {
        return $this->container['image_build'];
    }

    /**
     * Sets image_build
     *
     * @param \OpenAPI\Client\Model\InlineResponse20040AppDeployInstance|null $image_build image_build
     *
     * @return self
     */
    public function setImageBuild($image_build)
    {
        $this->container['image_build'] = $image_build;

        return $this;
    }

    /**
     * Gets build_number
     *
     * @return int|null
     */
    public function getBuildNumber()
    {
        return $this->container['build_number'];
    }

    /**
     * Sets build_number
     *
     * @param int|null $build_number build_number
     *
     * @return self
     */
    public function setBuildNumber($build_number)
    {
        $this->container['build_number'] = $build_number;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return \DateTime|null
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime|null $start_date start_date
     *
     * @return self
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime|null
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime|null $end_date end_date
     *
     * @return self
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets status_message
     *
     * @return string|null
     */
    public function getStatusMessage()
    {
        return $this->container['status_message'];
    }

    /**
     * Sets status_message
     *
     * @param string|null $status_message status_message
     *
     * @return self
     */
    public function setStatusMessage($status_message)
    {
        $this->container['status_message'] = $status_message;

        return $this;
    }

    /**
     * Gets status_percent
     *
     * @return int|null
     */
    public function getStatusPercent()
    {
        return $this->container['status_percent'];
    }

    /**
     * Sets status_percent
     *
     * @param int|null $status_percent status_percent
     *
     * @return self
     */
    public function setStatusPercent($status_percent)
    {
        $this->container['status_percent'] = $status_percent;

        return $this;
    }

    /**
     * Gets status_eta
     *
     * @return string|null
     */
    public function getStatusEta()
    {
        return $this->container['status_eta'];
    }

    /**
     * Sets status_eta
     *
     * @param string|null $status_eta status_eta
     *
     * @return self
     */
    public function setStatusEta($status_eta)
    {
        $this->container['status_eta'] = $status_eta;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets error_message
     *
     * @return string|null
     */
    public function getErrorMessage()
    {
        return $this->container['error_message'];
    }

    /**
     * Sets error_message
     *
     * @param string|null $error_message error_message
     *
     * @return self
     */
    public function setErrorMessage($error_message)
    {
        $this->container['error_message'] = $error_message;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return \OpenAPI\Client\Model\ArchiveBucketFileCreatedBy|null
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param \OpenAPI\Client\Model\ArchiveBucketFileCreatedBy|null $created_by created_by
     *
     * @return self
     */
    public function setCreatedBy($created_by)
    {
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets temp_instance
     *
     * @return string|null
     */
    public function getTempInstance()
    {
        return $this->container['temp_instance'];
    }

    /**
     * Sets temp_instance
     *
     * @param string|null $temp_instance temp_instance
     *
     * @return self
     */
    public function setTempInstance($temp_instance)
    {
        $this->container['temp_instance'] = $temp_instance;

        return $this;
    }

    /**
     * Gets virtual_images
     *
     * @return \OpenAPI\Client\Model\InlineResponse20040AppDeployInstance[]|null
     */
    public function getVirtualImages()
    {
        return $this->container['virtual_images'];
    }

    /**
     * Sets virtual_images
     *
     * @param \OpenAPI\Client\Model\InlineResponse20040AppDeployInstance[]|null $virtual_images virtual_images
     *
     * @return self
     */
    public function setVirtualImages($virtual_images)
    {
        $this->container['virtual_images'] = $virtual_images;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


