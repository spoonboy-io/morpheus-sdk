<?php
/**
 * ApiTasksIdExecuteJob
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ApiTasksIdExecuteJob Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class ApiTasksIdExecuteJob implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_api_tasks__id__execute_job';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'target_type' => 'string',
        'instances' => 'int[]',
        'servers' => 'int[]',
        'instance_label' => 'string',
        'server_label' => 'string',
        'custom_options' => 'object',
        'custom_config' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'target_type' => null,
        'instances' => 'int64',
        'servers' => 'int64',
        'instance_label' => null,
        'server_label' => null,
        'custom_options' => null,
        'custom_config' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'target_type' => 'targetType',
        'instances' => 'instances',
        'servers' => 'servers',
        'instance_label' => 'instanceLabel',
        'server_label' => 'serverLabel',
        'custom_options' => 'customOptions',
        'custom_config' => 'customConfig'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'target_type' => 'setTargetType',
        'instances' => 'setInstances',
        'servers' => 'setServers',
        'instance_label' => 'setInstanceLabel',
        'server_label' => 'setServerLabel',
        'custom_options' => 'setCustomOptions',
        'custom_config' => 'setCustomConfig'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'target_type' => 'getTargetType',
        'instances' => 'getInstances',
        'servers' => 'getServers',
        'instance_label' => 'getInstanceLabel',
        'server_label' => 'getServerLabel',
        'custom_options' => 'getCustomOptions',
        'custom_config' => 'getCustomConfig'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const TARGET_TYPE_APPLIANCE = 'appliance';
    const TARGET_TYPE_INSTANCE = 'instance';
    const TARGET_TYPE_INSTANCE_LABEL = 'instance-label';
    const TARGET_TYPE_SERVER = 'server';
    const TARGET_TYPE_SERVER_LABEL = 'server-label';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTargetTypeAllowableValues()
    {
        return [
            self::TARGET_TYPE_APPLIANCE,
            self::TARGET_TYPE_INSTANCE,
            self::TARGET_TYPE_INSTANCE_LABEL,
            self::TARGET_TYPE_SERVER,
            self::TARGET_TYPE_SERVER_LABEL,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['target_type'] = $data['target_type'] ?? null;
        $this->container['instances'] = $data['instances'] ?? null;
        $this->container['servers'] = $data['servers'] ?? null;
        $this->container['instance_label'] = $data['instance_label'] ?? null;
        $this->container['server_label'] = $data['server_label'] ?? null;
        $this->container['custom_options'] = $data['custom_options'] ?? null;
        $this->container['custom_config'] = $data['custom_config'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTargetTypeAllowableValues();
        if (!is_null($this->container['target_type']) && !in_array($this->container['target_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'target_type', must be one of '%s'",
                $this->container['target_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name A name for the execution job. Can be used to find execution results with `/api/processes?name=`
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets target_type
     *
     * @return string|null
     */
    public function getTargetType()
    {
        return $this->container['target_type'];
    }

    /**
     * Sets target_type
     *
     * @param string|null $target_type The target context for task execution. This is required for tasks with `executeTarget` set to `resource`.
     *
     * @return self
     */
    public function setTargetType($target_type)
    {
        $allowedValues = $this->getTargetTypeAllowableValues();
        if (!is_null($target_type) && !in_array($target_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'target_type', must be one of '%s'",
                    $target_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['target_type'] = $target_type;

        return $this;
    }

    /**
     * Gets instances
     *
     * @return int[]|null
     */
    public function getInstances()
    {
        return $this->container['instances'];
    }

    /**
     * Sets instances
     *
     * @param int[]|null $instances Array of Instance IDs. Only applicable if `targetType` is instance.
     *
     * @return self
     */
    public function setInstances($instances)
    {
        $this->container['instances'] = $instances;

        return $this;
    }

    /**
     * Gets servers
     *
     * @return int[]|null
     */
    public function getServers()
    {
        return $this->container['servers'];
    }

    /**
     * Sets servers
     *
     * @param int[]|null $servers Array of Server IDs. Only applicable if `targetType` is `server`.
     *
     * @return self
     */
    public function setServers($servers)
    {
        $this->container['servers'] = $servers;

        return $this;
    }

    /**
     * Gets instance_label
     *
     * @return string|null
     */
    public function getInstanceLabel()
    {
        return $this->container['instance_label'];
    }

    /**
     * Sets instance_label
     *
     * @param string|null $instance_label Instance Label. Only applicable if `targetType` is `instance-label`.
     *
     * @return self
     */
    public function setInstanceLabel($instance_label)
    {
        $this->container['instance_label'] = $instance_label;

        return $this;
    }

    /**
     * Gets server_label
     *
     * @return string|null
     */
    public function getServerLabel()
    {
        return $this->container['server_label'];
    }

    /**
     * Sets server_label
     *
     * @param string|null $server_label Server Label. Only applicable if `targetType` is `server-label`.
     *
     * @return self
     */
    public function setServerLabel($server_label)
    {
        $this->container['server_label'] = $server_label;

        return $this;
    }

    /**
     * Gets custom_options
     *
     * @return object|null
     */
    public function getCustomOptions()
    {
        return $this->container['custom_options'];
    }

    /**
     * Sets custom_options
     *
     * @param object|null $custom_options Map of options to be used as values in the task. These correspond to option types.
     *
     * @return self
     */
    public function setCustomOptions($custom_options)
    {
        $this->container['custom_options'] = $custom_options;

        return $this;
    }

    /**
     * Gets custom_config
     *
     * @return string|null
     */
    public function getCustomConfig()
    {
        return $this->container['custom_config'];
    }

    /**
     * Sets custom_config
     *
     * @param string|null $custom_config String of custom configuration values as JSON.
     *
     * @return self
     */
    public function setCustomConfig($custom_config)
    {
        $this->container['custom_config'] = $custom_config;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


