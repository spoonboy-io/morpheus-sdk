<?php
/**
 * CheckWebConfig
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CheckWebConfig Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class CheckWebConfig implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'checkWebConfig';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'web_method' => 'string',
        'web_url' => 'string',
        'ignore_ssl' => 'bool',
        'check_user' => 'string',
        'check_password' => 'string',
        'text_check_on' => 'string',
        'web_text_match' => 'string',
        'tunnel_on' => 'string',
        'ssh_host' => 'string',
        'ssh_port' => 'int',
        'ssh_user' => 'string',
        'ssh_password' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'web_method' => null,
        'web_url' => null,
        'ignore_ssl' => null,
        'check_user' => null,
        'check_password' => null,
        'text_check_on' => null,
        'web_text_match' => null,
        'tunnel_on' => null,
        'ssh_host' => null,
        'ssh_port' => 'int64',
        'ssh_user' => null,
        'ssh_password' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'web_method' => 'webMethod',
        'web_url' => 'webUrl',
        'ignore_ssl' => 'ignoreSSL',
        'check_user' => 'checkUser',
        'check_password' => 'checkPassword',
        'text_check_on' => 'textCheckOn',
        'web_text_match' => 'webTextMatch',
        'tunnel_on' => 'tunnelOn',
        'ssh_host' => 'sshHost',
        'ssh_port' => 'sshPort',
        'ssh_user' => 'sshUser',
        'ssh_password' => 'sshPassword'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'web_method' => 'setWebMethod',
        'web_url' => 'setWebUrl',
        'ignore_ssl' => 'setIgnoreSsl',
        'check_user' => 'setCheckUser',
        'check_password' => 'setCheckPassword',
        'text_check_on' => 'setTextCheckOn',
        'web_text_match' => 'setWebTextMatch',
        'tunnel_on' => 'setTunnelOn',
        'ssh_host' => 'setSshHost',
        'ssh_port' => 'setSshPort',
        'ssh_user' => 'setSshUser',
        'ssh_password' => 'setSshPassword'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'web_method' => 'getWebMethod',
        'web_url' => 'getWebUrl',
        'ignore_ssl' => 'getIgnoreSsl',
        'check_user' => 'getCheckUser',
        'check_password' => 'getCheckPassword',
        'text_check_on' => 'getTextCheckOn',
        'web_text_match' => 'getWebTextMatch',
        'tunnel_on' => 'getTunnelOn',
        'ssh_host' => 'getSshHost',
        'ssh_port' => 'getSshPort',
        'ssh_user' => 'getSshUser',
        'ssh_password' => 'getSshPassword'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const WEB_METHOD_GET = 'GET';
    const WEB_METHOD_POST = 'POST';
    const TUNNEL_ON_ON = 'on';
    const TUNNEL_ON_OFF = 'off';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWebMethodAllowableValues()
    {
        return [
            self::WEB_METHOD_GET,
            self::WEB_METHOD_POST,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTunnelOnAllowableValues()
    {
        return [
            self::TUNNEL_ON_ON,
            self::TUNNEL_ON_OFF,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['web_method'] = $data['web_method'] ?? null;
        $this->container['web_url'] = $data['web_url'] ?? null;
        $this->container['ignore_ssl'] = $data['ignore_ssl'] ?? false;
        $this->container['check_user'] = $data['check_user'] ?? null;
        $this->container['check_password'] = $data['check_password'] ?? null;
        $this->container['text_check_on'] = $data['text_check_on'] ?? null;
        $this->container['web_text_match'] = $data['web_text_match'] ?? null;
        $this->container['tunnel_on'] = $data['tunnel_on'] ?? null;
        $this->container['ssh_host'] = $data['ssh_host'] ?? null;
        $this->container['ssh_port'] = $data['ssh_port'] ?? null;
        $this->container['ssh_user'] = $data['ssh_user'] ?? null;
        $this->container['ssh_password'] = $data['ssh_password'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['web_method'] === null) {
            $invalidProperties[] = "'web_method' can't be null";
        }
        $allowedValues = $this->getWebMethodAllowableValues();
        if (!is_null($this->container['web_method']) && !in_array($this->container['web_method'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'web_method', must be one of '%s'",
                $this->container['web_method'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['web_url'] === null) {
            $invalidProperties[] = "'web_url' can't be null";
        }
        $allowedValues = $this->getTunnelOnAllowableValues();
        if (!is_null($this->container['tunnel_on']) && !in_array($this->container['tunnel_on'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'tunnel_on', must be one of '%s'",
                $this->container['tunnel_on'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets web_method
     *
     * @return string
     */
    public function getWebMethod()
    {
        return $this->container['web_method'];
    }

    /**
     * Sets web_method
     *
     * @param string $web_method HTTP method to use for testing
     *
     * @return self
     */
    public function setWebMethod($web_method)
    {
        $allowedValues = $this->getWebMethodAllowableValues();
        if (!in_array($web_method, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'web_method', must be one of '%s'",
                    $web_method,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['web_method'] = $web_method;

        return $this;
    }

    /**
     * Gets web_url
     *
     * @return string
     */
    public function getWebUrl()
    {
        return $this->container['web_url'];
    }

    /**
     * Sets web_url
     *
     * @param string $web_url Web URL you wish to use to run a check on
     *
     * @return self
     */
    public function setWebUrl($web_url)
    {
        $this->container['web_url'] = $web_url;

        return $this;
    }

    /**
     * Gets ignore_ssl
     *
     * @return bool|null
     */
    public function getIgnoreSsl()
    {
        return $this->container['ignore_ssl'];
    }

    /**
     * Sets ignore_ssl
     *
     * @param bool|null $ignore_ssl Ignore SSL Errors
     *
     * @return self
     */
    public function setIgnoreSsl($ignore_ssl)
    {
        $this->container['ignore_ssl'] = $ignore_ssl;

        return $this;
    }

    /**
     * Gets check_user
     *
     * @return string|null
     */
    public function getCheckUser()
    {
        return $this->container['check_user'];
    }

    /**
     * Sets check_user
     *
     * @param string|null $check_user If you want to use HTTP Basic Authentication, populate this field with the username
     *
     * @return self
     */
    public function setCheckUser($check_user)
    {
        $this->container['check_user'] = $check_user;

        return $this;
    }

    /**
     * Gets check_password
     *
     * @return string|null
     */
    public function getCheckPassword()
    {
        return $this->container['check_password'];
    }

    /**
     * Sets check_password
     *
     * @param string|null $check_password If you want to use HTTP basic Authentication, populate this field with the password
     *
     * @return self
     */
    public function setCheckPassword($check_password)
    {
        $this->container['check_password'] = $check_password;

        return $this;
    }

    /**
     * Gets text_check_on
     *
     * @return string|null
     */
    public function getTextCheckOn()
    {
        return $this->container['text_check_on'];
    }

    /**
     * Sets text_check_on
     *
     * @param string|null $text_check_on Set value to `on` if you want to turn on text matching
     *
     * @return self
     */
    public function setTextCheckOn($text_check_on)
    {
        $this->container['text_check_on'] = $text_check_on;

        return $this;
    }

    /**
     * Gets web_text_match
     *
     * @return string|null
     */
    public function getWebTextMatch()
    {
        return $this->container['web_text_match'];
    }

    /**
     * Sets web_text_match
     *
     * @param string|null $web_text_match Set the string you want to look for in the page source
     *
     * @return self
     */
    public function setWebTextMatch($web_text_match)
    {
        $this->container['web_text_match'] = $web_text_match;

        return $this;
    }

    /**
     * Gets tunnel_on
     *
     * @return string|null
     */
    public function getTunnelOn()
    {
        return $this->container['tunnel_on'];
    }

    /**
     * Sets tunnel_on
     *
     * @param string|null $tunnel_on Set to on to turn on tunneling
     *
     * @return self
     */
    public function setTunnelOn($tunnel_on)
    {
        $allowedValues = $this->getTunnelOnAllowableValues();
        if (!is_null($tunnel_on) && !in_array($tunnel_on, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'tunnel_on', must be one of '%s'",
                    $tunnel_on,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['tunnel_on'] = $tunnel_on;

        return $this;
    }

    /**
     * Gets ssh_host
     *
     * @return string|null
     */
    public function getSshHost()
    {
        return $this->container['ssh_host'];
    }

    /**
     * Sets ssh_host
     *
     * @param string|null $ssh_host Hostname or IP address of the proxy host
     *
     * @return self
     */
    public function setSshHost($ssh_host)
    {
        $this->container['ssh_host'] = $ssh_host;

        return $this;
    }

    /**
     * Gets ssh_port
     *
     * @return int|null
     */
    public function getSshPort()
    {
        return $this->container['ssh_port'];
    }

    /**
     * Sets ssh_port
     *
     * @param int|null $ssh_port Port for SSH on the proxy host, defaults to 22
     *
     * @return self
     */
    public function setSshPort($ssh_port)
    {
        $this->container['ssh_port'] = $ssh_port;

        return $this;
    }

    /**
     * Gets ssh_user
     *
     * @return string|null
     */
    public function getSshUser()
    {
        return $this->container['ssh_user'];
    }

    /**
     * Sets ssh_user
     *
     * @param string|null $ssh_user SSH user on the proxy host to login as
     *
     * @return self
     */
    public function setSshUser($ssh_user)
    {
        $this->container['ssh_user'] = $ssh_user;

        return $this;
    }

    /**
     * Gets ssh_password
     *
     * @return string|null
     */
    public function getSshPassword()
    {
        return $this->container['ssh_password'];
    }

    /**
     * Sets ssh_password
     *
     * @param string|null $ssh_password Password for user, if not using key based authentication
     *
     * @return self
     */
    public function setSshPassword($ssh_password)
    {
        $this->container['ssh_password'] = $ssh_password;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


