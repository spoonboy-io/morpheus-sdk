<?php
/**
 * InlineResponse20096NetworkRouterBgpNeighbors
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * InlineResponse20096NetworkRouterBgpNeighbors Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InlineResponse20096NetworkRouterBgpNeighbors implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_response_200_96_networkRouterBgpNeighbors';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'ip_address' => 'string',
        'forwarding_address' => 'string',
        'protocol_address' => 'string',
        'remote_as' => 'string',
        'weight' => 'int',
        'keep_alive' => 'int',
        'hold_down' => 'int',
        'password' => 'string',
        'route_filtering_type' => 'string',
        'route_filtering_in' => 'string',
        'route_filtering_out' => 'string',
        'bfd_enabled' => 'bool',
        'bfd_interval' => 'int',
        'bfd_multiple' => 'int',
        'allow_as_in' => 'bool',
        'hop_limit' => 'int',
        'restart_mode' => 'string',
        'provider_id' => 'string',
        'sync_source' => 'string',
        'internal_id' => 'string',
        'external_id' => 'string',
        'ref_type' => 'string',
        'ref_id' => 'string',
        'config' => '\OpenAPI\Client\Model\InlineResponse20096Config',
        'date_created' => '\DateTime',
        'last_updated' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'ip_address' => null,
        'forwarding_address' => null,
        'protocol_address' => null,
        'remote_as' => null,
        'weight' => 'int64',
        'keep_alive' => 'int64',
        'hold_down' => 'int64',
        'password' => null,
        'route_filtering_type' => null,
        'route_filtering_in' => null,
        'route_filtering_out' => null,
        'bfd_enabled' => null,
        'bfd_interval' => 'int64',
        'bfd_multiple' => 'int64',
        'allow_as_in' => null,
        'hop_limit' => 'int64',
        'restart_mode' => null,
        'provider_id' => null,
        'sync_source' => null,
        'internal_id' => null,
        'external_id' => null,
        'ref_type' => null,
        'ref_id' => null,
        'config' => null,
        'date_created' => 'date-time',
        'last_updated' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'ip_address' => 'ipAddress',
        'forwarding_address' => 'forwardingAddress',
        'protocol_address' => 'protocolAddress',
        'remote_as' => 'remoteAs',
        'weight' => 'weight',
        'keep_alive' => 'keepAlive',
        'hold_down' => 'holdDown',
        'password' => 'password',
        'route_filtering_type' => 'routeFilteringType',
        'route_filtering_in' => 'routeFilteringIn',
        'route_filtering_out' => 'routeFilteringOut',
        'bfd_enabled' => 'bfdEnabled',
        'bfd_interval' => 'bfdInterval',
        'bfd_multiple' => 'bfdMultiple',
        'allow_as_in' => 'allowAsIn',
        'hop_limit' => 'hopLimit',
        'restart_mode' => 'restartMode',
        'provider_id' => 'providerId',
        'sync_source' => 'syncSource',
        'internal_id' => 'internalId',
        'external_id' => 'externalId',
        'ref_type' => 'refType',
        'ref_id' => 'refId',
        'config' => 'config',
        'date_created' => 'dateCreated',
        'last_updated' => 'lastUpdated'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'ip_address' => 'setIpAddress',
        'forwarding_address' => 'setForwardingAddress',
        'protocol_address' => 'setProtocolAddress',
        'remote_as' => 'setRemoteAs',
        'weight' => 'setWeight',
        'keep_alive' => 'setKeepAlive',
        'hold_down' => 'setHoldDown',
        'password' => 'setPassword',
        'route_filtering_type' => 'setRouteFilteringType',
        'route_filtering_in' => 'setRouteFilteringIn',
        'route_filtering_out' => 'setRouteFilteringOut',
        'bfd_enabled' => 'setBfdEnabled',
        'bfd_interval' => 'setBfdInterval',
        'bfd_multiple' => 'setBfdMultiple',
        'allow_as_in' => 'setAllowAsIn',
        'hop_limit' => 'setHopLimit',
        'restart_mode' => 'setRestartMode',
        'provider_id' => 'setProviderId',
        'sync_source' => 'setSyncSource',
        'internal_id' => 'setInternalId',
        'external_id' => 'setExternalId',
        'ref_type' => 'setRefType',
        'ref_id' => 'setRefId',
        'config' => 'setConfig',
        'date_created' => 'setDateCreated',
        'last_updated' => 'setLastUpdated'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'ip_address' => 'getIpAddress',
        'forwarding_address' => 'getForwardingAddress',
        'protocol_address' => 'getProtocolAddress',
        'remote_as' => 'getRemoteAs',
        'weight' => 'getWeight',
        'keep_alive' => 'getKeepAlive',
        'hold_down' => 'getHoldDown',
        'password' => 'getPassword',
        'route_filtering_type' => 'getRouteFilteringType',
        'route_filtering_in' => 'getRouteFilteringIn',
        'route_filtering_out' => 'getRouteFilteringOut',
        'bfd_enabled' => 'getBfdEnabled',
        'bfd_interval' => 'getBfdInterval',
        'bfd_multiple' => 'getBfdMultiple',
        'allow_as_in' => 'getAllowAsIn',
        'hop_limit' => 'getHopLimit',
        'restart_mode' => 'getRestartMode',
        'provider_id' => 'getProviderId',
        'sync_source' => 'getSyncSource',
        'internal_id' => 'getInternalId',
        'external_id' => 'getExternalId',
        'ref_type' => 'getRefType',
        'ref_id' => 'getRefId',
        'config' => 'getConfig',
        'date_created' => 'getDateCreated',
        'last_updated' => 'getLastUpdated'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['ip_address'] = $data['ip_address'] ?? null;
        $this->container['forwarding_address'] = $data['forwarding_address'] ?? null;
        $this->container['protocol_address'] = $data['protocol_address'] ?? null;
        $this->container['remote_as'] = $data['remote_as'] ?? null;
        $this->container['weight'] = $data['weight'] ?? null;
        $this->container['keep_alive'] = $data['keep_alive'] ?? null;
        $this->container['hold_down'] = $data['hold_down'] ?? null;
        $this->container['password'] = $data['password'] ?? null;
        $this->container['route_filtering_type'] = $data['route_filtering_type'] ?? null;
        $this->container['route_filtering_in'] = $data['route_filtering_in'] ?? null;
        $this->container['route_filtering_out'] = $data['route_filtering_out'] ?? null;
        $this->container['bfd_enabled'] = $data['bfd_enabled'] ?? null;
        $this->container['bfd_interval'] = $data['bfd_interval'] ?? null;
        $this->container['bfd_multiple'] = $data['bfd_multiple'] ?? null;
        $this->container['allow_as_in'] = $data['allow_as_in'] ?? null;
        $this->container['hop_limit'] = $data['hop_limit'] ?? null;
        $this->container['restart_mode'] = $data['restart_mode'] ?? null;
        $this->container['provider_id'] = $data['provider_id'] ?? null;
        $this->container['sync_source'] = $data['sync_source'] ?? null;
        $this->container['internal_id'] = $data['internal_id'] ?? null;
        $this->container['external_id'] = $data['external_id'] ?? null;
        $this->container['ref_type'] = $data['ref_type'] ?? null;
        $this->container['ref_id'] = $data['ref_id'] ?? null;
        $this->container['config'] = $data['config'] ?? null;
        $this->container['date_created'] = $data['date_created'] ?? null;
        $this->container['last_updated'] = $data['last_updated'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets ip_address
     *
     * @return string|null
     */
    public function getIpAddress()
    {
        return $this->container['ip_address'];
    }

    /**
     * Sets ip_address
     *
     * @param string|null $ip_address ip_address
     *
     * @return self
     */
    public function setIpAddress($ip_address)
    {
        $this->container['ip_address'] = $ip_address;

        return $this;
    }

    /**
     * Gets forwarding_address
     *
     * @return string|null
     */
    public function getForwardingAddress()
    {
        return $this->container['forwarding_address'];
    }

    /**
     * Sets forwarding_address
     *
     * @param string|null $forwarding_address forwarding_address
     *
     * @return self
     */
    public function setForwardingAddress($forwarding_address)
    {
        $this->container['forwarding_address'] = $forwarding_address;

        return $this;
    }

    /**
     * Gets protocol_address
     *
     * @return string|null
     */
    public function getProtocolAddress()
    {
        return $this->container['protocol_address'];
    }

    /**
     * Sets protocol_address
     *
     * @param string|null $protocol_address protocol_address
     *
     * @return self
     */
    public function setProtocolAddress($protocol_address)
    {
        $this->container['protocol_address'] = $protocol_address;

        return $this;
    }

    /**
     * Gets remote_as
     *
     * @return string|null
     */
    public function getRemoteAs()
    {
        return $this->container['remote_as'];
    }

    /**
     * Sets remote_as
     *
     * @param string|null $remote_as remote_as
     *
     * @return self
     */
    public function setRemoteAs($remote_as)
    {
        $this->container['remote_as'] = $remote_as;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return int|null
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param int|null $weight weight
     *
     * @return self
     */
    public function setWeight($weight)
    {
        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets keep_alive
     *
     * @return int|null
     */
    public function getKeepAlive()
    {
        return $this->container['keep_alive'];
    }

    /**
     * Sets keep_alive
     *
     * @param int|null $keep_alive keep_alive
     *
     * @return self
     */
    public function setKeepAlive($keep_alive)
    {
        $this->container['keep_alive'] = $keep_alive;

        return $this;
    }

    /**
     * Gets hold_down
     *
     * @return int|null
     */
    public function getHoldDown()
    {
        return $this->container['hold_down'];
    }

    /**
     * Sets hold_down
     *
     * @param int|null $hold_down hold_down
     *
     * @return self
     */
    public function setHoldDown($hold_down)
    {
        $this->container['hold_down'] = $hold_down;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string|null
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string|null $password password
     *
     * @return self
     */
    public function setPassword($password)
    {
        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets route_filtering_type
     *
     * @return string|null
     */
    public function getRouteFilteringType()
    {
        return $this->container['route_filtering_type'];
    }

    /**
     * Sets route_filtering_type
     *
     * @param string|null $route_filtering_type route_filtering_type
     *
     * @return self
     */
    public function setRouteFilteringType($route_filtering_type)
    {
        $this->container['route_filtering_type'] = $route_filtering_type;

        return $this;
    }

    /**
     * Gets route_filtering_in
     *
     * @return string|null
     */
    public function getRouteFilteringIn()
    {
        return $this->container['route_filtering_in'];
    }

    /**
     * Sets route_filtering_in
     *
     * @param string|null $route_filtering_in route_filtering_in
     *
     * @return self
     */
    public function setRouteFilteringIn($route_filtering_in)
    {
        $this->container['route_filtering_in'] = $route_filtering_in;

        return $this;
    }

    /**
     * Gets route_filtering_out
     *
     * @return string|null
     */
    public function getRouteFilteringOut()
    {
        return $this->container['route_filtering_out'];
    }

    /**
     * Sets route_filtering_out
     *
     * @param string|null $route_filtering_out route_filtering_out
     *
     * @return self
     */
    public function setRouteFilteringOut($route_filtering_out)
    {
        $this->container['route_filtering_out'] = $route_filtering_out;

        return $this;
    }

    /**
     * Gets bfd_enabled
     *
     * @return bool|null
     */
    public function getBfdEnabled()
    {
        return $this->container['bfd_enabled'];
    }

    /**
     * Sets bfd_enabled
     *
     * @param bool|null $bfd_enabled bfd_enabled
     *
     * @return self
     */
    public function setBfdEnabled($bfd_enabled)
    {
        $this->container['bfd_enabled'] = $bfd_enabled;

        return $this;
    }

    /**
     * Gets bfd_interval
     *
     * @return int|null
     */
    public function getBfdInterval()
    {
        return $this->container['bfd_interval'];
    }

    /**
     * Sets bfd_interval
     *
     * @param int|null $bfd_interval bfd_interval
     *
     * @return self
     */
    public function setBfdInterval($bfd_interval)
    {
        $this->container['bfd_interval'] = $bfd_interval;

        return $this;
    }

    /**
     * Gets bfd_multiple
     *
     * @return int|null
     */
    public function getBfdMultiple()
    {
        return $this->container['bfd_multiple'];
    }

    /**
     * Sets bfd_multiple
     *
     * @param int|null $bfd_multiple bfd_multiple
     *
     * @return self
     */
    public function setBfdMultiple($bfd_multiple)
    {
        $this->container['bfd_multiple'] = $bfd_multiple;

        return $this;
    }

    /**
     * Gets allow_as_in
     *
     * @return bool|null
     */
    public function getAllowAsIn()
    {
        return $this->container['allow_as_in'];
    }

    /**
     * Sets allow_as_in
     *
     * @param bool|null $allow_as_in allow_as_in
     *
     * @return self
     */
    public function setAllowAsIn($allow_as_in)
    {
        $this->container['allow_as_in'] = $allow_as_in;

        return $this;
    }

    /**
     * Gets hop_limit
     *
     * @return int|null
     */
    public function getHopLimit()
    {
        return $this->container['hop_limit'];
    }

    /**
     * Sets hop_limit
     *
     * @param int|null $hop_limit hop_limit
     *
     * @return self
     */
    public function setHopLimit($hop_limit)
    {
        $this->container['hop_limit'] = $hop_limit;

        return $this;
    }

    /**
     * Gets restart_mode
     *
     * @return string|null
     */
    public function getRestartMode()
    {
        return $this->container['restart_mode'];
    }

    /**
     * Sets restart_mode
     *
     * @param string|null $restart_mode restart_mode
     *
     * @return self
     */
    public function setRestartMode($restart_mode)
    {
        $this->container['restart_mode'] = $restart_mode;

        return $this;
    }

    /**
     * Gets provider_id
     *
     * @return string|null
     */
    public function getProviderId()
    {
        return $this->container['provider_id'];
    }

    /**
     * Sets provider_id
     *
     * @param string|null $provider_id provider_id
     *
     * @return self
     */
    public function setProviderId($provider_id)
    {
        $this->container['provider_id'] = $provider_id;

        return $this;
    }

    /**
     * Gets sync_source
     *
     * @return string|null
     */
    public function getSyncSource()
    {
        return $this->container['sync_source'];
    }

    /**
     * Sets sync_source
     *
     * @param string|null $sync_source sync_source
     *
     * @return self
     */
    public function setSyncSource($sync_source)
    {
        $this->container['sync_source'] = $sync_source;

        return $this;
    }

    /**
     * Gets internal_id
     *
     * @return string|null
     */
    public function getInternalId()
    {
        return $this->container['internal_id'];
    }

    /**
     * Sets internal_id
     *
     * @param string|null $internal_id internal_id
     *
     * @return self
     */
    public function setInternalId($internal_id)
    {
        $this->container['internal_id'] = $internal_id;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string|null
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string|null $external_id external_id
     *
     * @return self
     */
    public function setExternalId($external_id)
    {
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets ref_type
     *
     * @return string|null
     */
    public function getRefType()
    {
        return $this->container['ref_type'];
    }

    /**
     * Sets ref_type
     *
     * @param string|null $ref_type ref_type
     *
     * @return self
     */
    public function setRefType($ref_type)
    {
        $this->container['ref_type'] = $ref_type;

        return $this;
    }

    /**
     * Gets ref_id
     *
     * @return string|null
     */
    public function getRefId()
    {
        return $this->container['ref_id'];
    }

    /**
     * Sets ref_id
     *
     * @param string|null $ref_id ref_id
     *
     * @return self
     */
    public function setRefId($ref_id)
    {
        $this->container['ref_id'] = $ref_id;

        return $this;
    }

    /**
     * Gets config
     *
     * @return \OpenAPI\Client\Model\InlineResponse20096Config|null
     */
    public function getConfig()
    {
        return $this->container['config'];
    }

    /**
     * Sets config
     *
     * @param \OpenAPI\Client\Model\InlineResponse20096Config|null $config config
     *
     * @return self
     */
    public function setConfig($config)
    {
        $this->container['config'] = $config;

        return $this;
    }

    /**
     * Gets date_created
     *
     * @return \DateTime|null
     */
    public function getDateCreated()
    {
        return $this->container['date_created'];
    }

    /**
     * Sets date_created
     *
     * @param \DateTime|null $date_created date_created
     *
     * @return self
     */
    public function setDateCreated($date_created)
    {
        $this->container['date_created'] = $date_created;

        return $this;
    }

    /**
     * Gets last_updated
     *
     * @return \DateTime|null
     */
    public function getLastUpdated()
    {
        return $this->container['last_updated'];
    }

    /**
     * Sets last_updated
     *
     * @param \DateTime|null $last_updated last_updated
     *
     * @return self
     */
    public function setLastUpdated($last_updated)
    {
        $this->container['last_updated'] = $last_updated;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


