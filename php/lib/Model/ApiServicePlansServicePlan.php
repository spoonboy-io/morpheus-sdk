<?php
/**
 * ApiServicePlansServicePlan
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ApiServicePlansServicePlan Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class ApiServicePlansServicePlan implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_api_service_plans_servicePlan';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'code' => 'string',
        'description' => 'string',
        'editable' => 'bool',
        'max_storage' => 'float',
        'max_memory' => 'float',
        'max_cores' => 'float',
        'max_disks' => 'float',
        'provision_type' => '\OpenAPI\Client\Model\ApiServicePlansServicePlanProvisionType[]',
        'custom_cores' => 'bool',
        'custom_max_storage' => 'bool',
        'custom_max_data_storage' => 'bool',
        'custom_max_memory' => 'bool',
        'add_volumes' => 'bool',
        'sort_order' => 'float',
        'price_sets' => 'int[]',
        'config' => '\OpenAPI\Client\Model\ApiServicePlansServicePlanConfig'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'code' => null,
        'description' => null,
        'editable' => null,
        'max_storage' => null,
        'max_memory' => null,
        'max_cores' => null,
        'max_disks' => null,
        'provision_type' => null,
        'custom_cores' => null,
        'custom_max_storage' => null,
        'custom_max_data_storage' => null,
        'custom_max_memory' => null,
        'add_volumes' => null,
        'sort_order' => null,
        'price_sets' => 'int64',
        'config' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'code' => 'code',
        'description' => 'description',
        'editable' => 'editable',
        'max_storage' => 'maxStorage',
        'max_memory' => 'maxMemory',
        'max_cores' => 'maxCores',
        'max_disks' => 'maxDisks',
        'provision_type' => 'provisionType',
        'custom_cores' => 'customCores',
        'custom_max_storage' => 'customMaxStorage',
        'custom_max_data_storage' => 'customMaxDataStorage',
        'custom_max_memory' => 'customMaxMemory',
        'add_volumes' => 'addVolumes',
        'sort_order' => 'sortOrder',
        'price_sets' => 'priceSets',
        'config' => 'config'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'code' => 'setCode',
        'description' => 'setDescription',
        'editable' => 'setEditable',
        'max_storage' => 'setMaxStorage',
        'max_memory' => 'setMaxMemory',
        'max_cores' => 'setMaxCores',
        'max_disks' => 'setMaxDisks',
        'provision_type' => 'setProvisionType',
        'custom_cores' => 'setCustomCores',
        'custom_max_storage' => 'setCustomMaxStorage',
        'custom_max_data_storage' => 'setCustomMaxDataStorage',
        'custom_max_memory' => 'setCustomMaxMemory',
        'add_volumes' => 'setAddVolumes',
        'sort_order' => 'setSortOrder',
        'price_sets' => 'setPriceSets',
        'config' => 'setConfig'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'code' => 'getCode',
        'description' => 'getDescription',
        'editable' => 'getEditable',
        'max_storage' => 'getMaxStorage',
        'max_memory' => 'getMaxMemory',
        'max_cores' => 'getMaxCores',
        'max_disks' => 'getMaxDisks',
        'provision_type' => 'getProvisionType',
        'custom_cores' => 'getCustomCores',
        'custom_max_storage' => 'getCustomMaxStorage',
        'custom_max_data_storage' => 'getCustomMaxDataStorage',
        'custom_max_memory' => 'getCustomMaxMemory',
        'add_volumes' => 'getAddVolumes',
        'sort_order' => 'getSortOrder',
        'price_sets' => 'getPriceSets',
        'config' => 'getConfig'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['code'] = $data['code'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['editable'] = $data['editable'] ?? true;
        $this->container['max_storage'] = $data['max_storage'] ?? null;
        $this->container['max_memory'] = $data['max_memory'] ?? null;
        $this->container['max_cores'] = $data['max_cores'] ?? null;
        $this->container['max_disks'] = $data['max_disks'] ?? null;
        $this->container['provision_type'] = $data['provision_type'] ?? null;
        $this->container['custom_cores'] = $data['custom_cores'] ?? false;
        $this->container['custom_max_storage'] = $data['custom_max_storage'] ?? false;
        $this->container['custom_max_data_storage'] = $data['custom_max_data_storage'] ?? false;
        $this->container['custom_max_memory'] = $data['custom_max_memory'] ?? false;
        $this->container['add_volumes'] = $data['add_volumes'] ?? false;
        $this->container['sort_order'] = $data['sort_order'] ?? null;
        $this->container['price_sets'] = $data['price_sets'] ?? null;
        $this->container['config'] = $data['config'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['code'] === null) {
            $invalidProperties[] = "'code' can't be null";
        }
        if ($this->container['max_storage'] === null) {
            $invalidProperties[] = "'max_storage' can't be null";
        }
        if ($this->container['max_memory'] === null) {
            $invalidProperties[] = "'max_memory' can't be null";
        }
        if ($this->container['provision_type'] === null) {
            $invalidProperties[] = "'provision_type' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Service plan name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code Service plan code, must be unique
     *
     * @return self
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Service plan description
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets editable
     *
     * @return bool|null
     */
    public function getEditable()
    {
        return $this->container['editable'];
    }

    /**
     * Sets editable
     *
     * @param bool|null $editable Can be used to enable / disable the editability of the service plan.
     *
     * @return self
     */
    public function setEditable($editable)
    {
        $this->container['editable'] = $editable;

        return $this;
    }

    /**
     * Gets max_storage
     *
     * @return float
     */
    public function getMaxStorage()
    {
        return $this->container['max_storage'];
    }

    /**
     * Sets max_storage
     *
     * @param float $max_storage Max storage size in bytes
     *
     * @return self
     */
    public function setMaxStorage($max_storage)
    {
        $this->container['max_storage'] = $max_storage;

        return $this;
    }

    /**
     * Gets max_memory
     *
     * @return float
     */
    public function getMaxMemory()
    {
        return $this->container['max_memory'];
    }

    /**
     * Sets max_memory
     *
     * @param float $max_memory Max memory size in bytes
     *
     * @return self
     */
    public function setMaxMemory($max_memory)
    {
        $this->container['max_memory'] = $max_memory;

        return $this;
    }

    /**
     * Gets max_cores
     *
     * @return float|null
     */
    public function getMaxCores()
    {
        return $this->container['max_cores'];
    }

    /**
     * Sets max_cores
     *
     * @param float|null $max_cores Max cores
     *
     * @return self
     */
    public function setMaxCores($max_cores)
    {
        $this->container['max_cores'] = $max_cores;

        return $this;
    }

    /**
     * Gets max_disks
     *
     * @return float|null
     */
    public function getMaxDisks()
    {
        return $this->container['max_disks'];
    }

    /**
     * Sets max_disks
     *
     * @param float|null $max_disks Max disks allowed
     *
     * @return self
     */
    public function setMaxDisks($max_disks)
    {
        $this->container['max_disks'] = $max_disks;

        return $this;
    }

    /**
     * Gets provision_type
     *
     * @return \OpenAPI\Client\Model\ApiServicePlansServicePlanProvisionType[]
     */
    public function getProvisionType()
    {
        return $this->container['provision_type'];
    }

    /**
     * Sets provision_type
     *
     * @param \OpenAPI\Client\Model\ApiServicePlansServicePlanProvisionType[] $provision_type provision_type
     *
     * @return self
     */
    public function setProvisionType($provision_type)
    {
        $this->container['provision_type'] = $provision_type;

        return $this;
    }

    /**
     * Gets custom_cores
     *
     * @return bool|null
     */
    public function getCustomCores()
    {
        return $this->container['custom_cores'];
    }

    /**
     * Sets custom_cores
     *
     * @param bool|null $custom_cores Can be used to enable / disable customizable cores
     *
     * @return self
     */
    public function setCustomCores($custom_cores)
    {
        $this->container['custom_cores'] = $custom_cores;

        return $this;
    }

    /**
     * Gets custom_max_storage
     *
     * @return bool|null
     */
    public function getCustomMaxStorage()
    {
        return $this->container['custom_max_storage'];
    }

    /**
     * Sets custom_max_storage
     *
     * @param bool|null $custom_max_storage Can be used to enable / disable customizable storage
     *
     * @return self
     */
    public function setCustomMaxStorage($custom_max_storage)
    {
        $this->container['custom_max_storage'] = $custom_max_storage;

        return $this;
    }

    /**
     * Gets custom_max_data_storage
     *
     * @return bool|null
     */
    public function getCustomMaxDataStorage()
    {
        return $this->container['custom_max_data_storage'];
    }

    /**
     * Sets custom_max_data_storage
     *
     * @param bool|null $custom_max_data_storage Can be used to enable / disable customizable extra volumes.
     *
     * @return self
     */
    public function setCustomMaxDataStorage($custom_max_data_storage)
    {
        $this->container['custom_max_data_storage'] = $custom_max_data_storage;

        return $this;
    }

    /**
     * Gets custom_max_memory
     *
     * @return bool|null
     */
    public function getCustomMaxMemory()
    {
        return $this->container['custom_max_memory'];
    }

    /**
     * Sets custom_max_memory
     *
     * @param bool|null $custom_max_memory Can be used to enable / disable customizable memory.
     *
     * @return self
     */
    public function setCustomMaxMemory($custom_max_memory)
    {
        $this->container['custom_max_memory'] = $custom_max_memory;

        return $this;
    }

    /**
     * Gets add_volumes
     *
     * @return bool|null
     */
    public function getAddVolumes()
    {
        return $this->container['add_volumes'];
    }

    /**
     * Sets add_volumes
     *
     * @param bool|null $add_volumes Can be used to enable / disable ability to add volumes
     *
     * @return self
     */
    public function setAddVolumes($add_volumes)
    {
        $this->container['add_volumes'] = $add_volumes;

        return $this;
    }

    /**
     * Gets sort_order
     *
     * @return float|null
     */
    public function getSortOrder()
    {
        return $this->container['sort_order'];
    }

    /**
     * Sets sort_order
     *
     * @param float|null $sort_order Sort order
     *
     * @return self
     */
    public function setSortOrder($sort_order)
    {
        $this->container['sort_order'] = $sort_order;

        return $this;
    }

    /**
     * Gets price_sets
     *
     * @return int[]|null
     */
    public function getPriceSets()
    {
        return $this->container['price_sets'];
    }

    /**
     * Sets price_sets
     *
     * @param int[]|null $price_sets List of price sets to include in service plan
     *
     * @return self
     */
    public function setPriceSets($price_sets)
    {
        $this->container['price_sets'] = $price_sets;

        return $this;
    }

    /**
     * Gets config
     *
     * @return \OpenAPI\Client\Model\ApiServicePlansServicePlanConfig|null
     */
    public function getConfig()
    {
        return $this->container['config'];
    }

    /**
     * Sets config
     *
     * @param \OpenAPI\Client\Model\ApiServicePlansServicePlanConfig|null $config config
     *
     * @return self
     */
    public function setConfig($config)
    {
        $this->container['config'] = $config;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


