<?php
/**
 * RoleRole
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * RoleRole Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class RoleRole implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'role_role';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'name' => 'string',
        'authority' => 'string',
        'description' => 'string',
        'scope' => 'string',
        'role_type' => 'string',
        'multitenant' => 'bool',
        'multitenant_locked' => 'bool',
        'parent_role_id' => 'string',
        'diverged' => 'bool',
        'owner_id' => 'int',
        'owner' => '\OpenAPI\Client\Model\InlineResponse20040AppDeployInstance',
        'default_persona' => 'string',
        'date_created' => '\DateTime',
        'last_updated' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'name' => null,
        'authority' => null,
        'description' => null,
        'scope' => null,
        'role_type' => null,
        'multitenant' => null,
        'multitenant_locked' => null,
        'parent_role_id' => null,
        'diverged' => null,
        'owner_id' => 'int64',
        'owner' => null,
        'default_persona' => null,
        'date_created' => 'date-time',
        'last_updated' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'authority' => 'authority',
        'description' => 'description',
        'scope' => 'scope',
        'role_type' => 'roleType',
        'multitenant' => 'multitenant',
        'multitenant_locked' => 'multitenantLocked',
        'parent_role_id' => 'parentRoleId',
        'diverged' => 'diverged',
        'owner_id' => 'ownerId',
        'owner' => 'owner',
        'default_persona' => 'defaultPersona',
        'date_created' => 'dateCreated',
        'last_updated' => 'lastUpdated'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'authority' => 'setAuthority',
        'description' => 'setDescription',
        'scope' => 'setScope',
        'role_type' => 'setRoleType',
        'multitenant' => 'setMultitenant',
        'multitenant_locked' => 'setMultitenantLocked',
        'parent_role_id' => 'setParentRoleId',
        'diverged' => 'setDiverged',
        'owner_id' => 'setOwnerId',
        'owner' => 'setOwner',
        'default_persona' => 'setDefaultPersona',
        'date_created' => 'setDateCreated',
        'last_updated' => 'setLastUpdated'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'authority' => 'getAuthority',
        'description' => 'getDescription',
        'scope' => 'getScope',
        'role_type' => 'getRoleType',
        'multitenant' => 'getMultitenant',
        'multitenant_locked' => 'getMultitenantLocked',
        'parent_role_id' => 'getParentRoleId',
        'diverged' => 'getDiverged',
        'owner_id' => 'getOwnerId',
        'owner' => 'getOwner',
        'default_persona' => 'getDefaultPersona',
        'date_created' => 'getDateCreated',
        'last_updated' => 'getLastUpdated'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['authority'] = $data['authority'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['scope'] = $data['scope'] ?? null;
        $this->container['role_type'] = $data['role_type'] ?? null;
        $this->container['multitenant'] = $data['multitenant'] ?? null;
        $this->container['multitenant_locked'] = $data['multitenant_locked'] ?? null;
        $this->container['parent_role_id'] = $data['parent_role_id'] ?? null;
        $this->container['diverged'] = $data['diverged'] ?? null;
        $this->container['owner_id'] = $data['owner_id'] ?? null;
        $this->container['owner'] = $data['owner'] ?? null;
        $this->container['default_persona'] = $data['default_persona'] ?? null;
        $this->container['date_created'] = $data['date_created'] ?? null;
        $this->container['last_updated'] = $data['last_updated'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name a unique name of the role
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets authority
     *
     * @return string|null
     */
    public function getAuthority()
    {
        return $this->container['authority'];
    }

    /**
     * Sets authority
     *
     * @param string|null $authority Alias for name
     *
     * @return self
     */
    public function setAuthority($authority)
    {
        $this->container['authority'] = $authority;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets scope
     *
     * @return string|null
     */
    public function getScope()
    {
        return $this->container['scope'];
    }

    /**
     * Sets scope
     *
     * @param string|null $scope scope
     *
     * @return self
     */
    public function setScope($scope)
    {
        $this->container['scope'] = $scope;

        return $this;
    }

    /**
     * Gets role_type
     *
     * @return string|null
     */
    public function getRoleType()
    {
        return $this->container['role_type'];
    }

    /**
     * Sets role_type
     *
     * @param string|null $role_type role_type
     *
     * @return self
     */
    public function setRoleType($role_type)
    {
        $this->container['role_type'] = $role_type;

        return $this;
    }

    /**
     * Gets multitenant
     *
     * @return bool|null
     */
    public function getMultitenant()
    {
        return $this->container['multitenant'];
    }

    /**
     * Sets multitenant
     *
     * @param bool|null $multitenant multitenant
     *
     * @return self
     */
    public function setMultitenant($multitenant)
    {
        $this->container['multitenant'] = $multitenant;

        return $this;
    }

    /**
     * Gets multitenant_locked
     *
     * @return bool|null
     */
    public function getMultitenantLocked()
    {
        return $this->container['multitenant_locked'];
    }

    /**
     * Sets multitenant_locked
     *
     * @param bool|null $multitenant_locked multitenant_locked
     *
     * @return self
     */
    public function setMultitenantLocked($multitenant_locked)
    {
        $this->container['multitenant_locked'] = $multitenant_locked;

        return $this;
    }

    /**
     * Gets parent_role_id
     *
     * @return string|null
     */
    public function getParentRoleId()
    {
        return $this->container['parent_role_id'];
    }

    /**
     * Sets parent_role_id
     *
     * @param string|null $parent_role_id parent_role_id
     *
     * @return self
     */
    public function setParentRoleId($parent_role_id)
    {
        $this->container['parent_role_id'] = $parent_role_id;

        return $this;
    }

    /**
     * Gets diverged
     *
     * @return bool|null
     */
    public function getDiverged()
    {
        return $this->container['diverged'];
    }

    /**
     * Sets diverged
     *
     * @param bool|null $diverged diverged
     *
     * @return self
     */
    public function setDiverged($diverged)
    {
        $this->container['diverged'] = $diverged;

        return $this;
    }

    /**
     * Gets owner_id
     *
     * @return int|null
     */
    public function getOwnerId()
    {
        return $this->container['owner_id'];
    }

    /**
     * Sets owner_id
     *
     * @param int|null $owner_id owner_id
     *
     * @return self
     */
    public function setOwnerId($owner_id)
    {
        $this->container['owner_id'] = $owner_id;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return \OpenAPI\Client\Model\InlineResponse20040AppDeployInstance|null
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param \OpenAPI\Client\Model\InlineResponse20040AppDeployInstance|null $owner owner
     *
     * @return self
     */
    public function setOwner($owner)
    {
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets default_persona
     *
     * @return string|null
     */
    public function getDefaultPersona()
    {
        return $this->container['default_persona'];
    }

    /**
     * Sets default_persona
     *
     * @param string|null $default_persona default_persona
     *
     * @return self
     */
    public function setDefaultPersona($default_persona)
    {
        $this->container['default_persona'] = $default_persona;

        return $this;
    }

    /**
     * Gets date_created
     *
     * @return \DateTime|null
     */
    public function getDateCreated()
    {
        return $this->container['date_created'];
    }

    /**
     * Sets date_created
     *
     * @param \DateTime|null $date_created date_created
     *
     * @return self
     */
    public function setDateCreated($date_created)
    {
        $this->container['date_created'] = $date_created;

        return $this;
    }

    /**
     * Gets last_updated
     *
     * @return \DateTime|null
     */
    public function getLastUpdated()
    {
        return $this->container['last_updated'];
    }

    /**
     * Sets last_updated
     *
     * @param \DateTime|null $last_updated last_updated
     *
     * @return self
     */
    public function setLastUpdated($last_updated)
    {
        $this->container['last_updated'] = $last_updated;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


