<?php
/**
 * OptionTypeListUpdate
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * OptionTypeListUpdate Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class OptionTypeListUpdate implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'optionTypeListUpdate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'description' => 'string',
        'labels' => 'string[]',
        'type' => 'string',
        'source_url' => 'string',
        'visibility' => 'string',
        'source_method' => 'string',
        'api_type' => 'string',
        'ignore_ssl_errors' => 'bool',
        'real_time' => 'bool',
        'credential' => '\OpenAPI\Client\Model\OptionTypeListCreateCredential',
        'service_username' => 'string',
        'service_password' => 'string',
        'initial_dataset' => 'string',
        'translation_script' => 'string',
        'request_script' => 'string',
        'config' => '\OpenAPI\Client\Model\OptionTypeListCreateConfig'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'description' => null,
        'labels' => null,
        'type' => null,
        'source_url' => null,
        'visibility' => null,
        'source_method' => null,
        'api_type' => null,
        'ignore_ssl_errors' => null,
        'real_time' => null,
        'credential' => null,
        'service_username' => null,
        'service_password' => null,
        'initial_dataset' => null,
        'translation_script' => null,
        'request_script' => null,
        'config' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'description' => 'description',
        'labels' => 'labels',
        'type' => 'type',
        'source_url' => 'sourceUrl',
        'visibility' => 'visibility',
        'source_method' => 'sourceMethod',
        'api_type' => 'apiType',
        'ignore_ssl_errors' => 'ignoreSSLErrors',
        'real_time' => 'realTime',
        'credential' => 'credential',
        'service_username' => 'serviceUsername',
        'service_password' => 'servicePassword',
        'initial_dataset' => 'initialDataset',
        'translation_script' => 'translationScript',
        'request_script' => 'requestScript',
        'config' => 'config'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'description' => 'setDescription',
        'labels' => 'setLabels',
        'type' => 'setType',
        'source_url' => 'setSourceUrl',
        'visibility' => 'setVisibility',
        'source_method' => 'setSourceMethod',
        'api_type' => 'setApiType',
        'ignore_ssl_errors' => 'setIgnoreSslErrors',
        'real_time' => 'setRealTime',
        'credential' => 'setCredential',
        'service_username' => 'setServiceUsername',
        'service_password' => 'setServicePassword',
        'initial_dataset' => 'setInitialDataset',
        'translation_script' => 'setTranslationScript',
        'request_script' => 'setRequestScript',
        'config' => 'setConfig'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'description' => 'getDescription',
        'labels' => 'getLabels',
        'type' => 'getType',
        'source_url' => 'getSourceUrl',
        'visibility' => 'getVisibility',
        'source_method' => 'getSourceMethod',
        'api_type' => 'getApiType',
        'ignore_ssl_errors' => 'getIgnoreSslErrors',
        'real_time' => 'getRealTime',
        'credential' => 'getCredential',
        'service_username' => 'getServiceUsername',
        'service_password' => 'getServicePassword',
        'initial_dataset' => 'getInitialDataset',
        'translation_script' => 'getTranslationScript',
        'request_script' => 'getRequestScript',
        'config' => 'getConfig'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const TYPE_REST = 'rest';
    const TYPE_API = 'api';
    const TYPE_LDAP = 'ldap';
    const TYPE_MANUAL = 'manual';
    const VISIBILITY__PRIVATE = 'private';
    const VISIBILITY__PUBLIC = 'public';
    const SOURCE_METHOD_GET = 'GET';
    const SOURCE_METHOD_POST = 'POST';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_REST,
            self::TYPE_API,
            self::TYPE_LDAP,
            self::TYPE_MANUAL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVisibilityAllowableValues()
    {
        return [
            self::VISIBILITY__PRIVATE,
            self::VISIBILITY__PUBLIC,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSourceMethodAllowableValues()
    {
        return [
            self::SOURCE_METHOD_GET,
            self::SOURCE_METHOD_POST,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['labels'] = $data['labels'] ?? null;
        $this->container['type'] = $data['type'] ?? 'rest';
        $this->container['source_url'] = $data['source_url'] ?? null;
        $this->container['visibility'] = $data['visibility'] ?? 'private';
        $this->container['source_method'] = $data['source_method'] ?? 'GET';
        $this->container['api_type'] = $data['api_type'] ?? null;
        $this->container['ignore_ssl_errors'] = $data['ignore_ssl_errors'] ?? false;
        $this->container['real_time'] = $data['real_time'] ?? false;
        $this->container['credential'] = $data['credential'] ?? null;
        $this->container['service_username'] = $data['service_username'] ?? null;
        $this->container['service_password'] = $data['service_password'] ?? null;
        $this->container['initial_dataset'] = $data['initial_dataset'] ?? null;
        $this->container['translation_script'] = $data['translation_script'] ?? null;
        $this->container['request_script'] = $data['request_script'] ?? null;
        $this->container['config'] = $data['config'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getVisibilityAllowableValues();
        if (!is_null($this->container['visibility']) && !in_array($this->container['visibility'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'visibility', must be one of '%s'",
                $this->container['visibility'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSourceMethodAllowableValues();
        if (!is_null($this->container['source_method']) && !in_array($this->container['source_method'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'source_method', must be one of '%s'",
                $this->container['source_method'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Description
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets labels
     *
     * @return string[]|null
     */
    public function getLabels()
    {
        return $this->container['labels'];
    }

    /**
     * Sets labels
     *
     * @param string[]|null $labels Array of label strings, can be used for filtering.
     *
     * @return self
     */
    public function setLabels($labels)
    {
        $this->container['labels'] = $labels;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Option List Type eg. `rest`, `api`, `ldap` or `manual`.
     *
     * @return self
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets source_url
     *
     * @return string|null
     */
    public function getSourceUrl()
    {
        return $this->container['source_url'];
    }

    /**
     * Sets source_url
     *
     * @param string|null $source_url Source URL, the http(s) URL to request data from. Required when type is rest.
     *
     * @return self
     */
    public function setSourceUrl($source_url)
    {
        $this->container['source_url'] = $source_url;

        return $this;
    }

    /**
     * Gets visibility
     *
     * @return string|null
     */
    public function getVisibility()
    {
        return $this->container['visibility'];
    }

    /**
     * Sets visibility
     *
     * @param string|null $visibility Visibility
     *
     * @return self
     */
    public function setVisibility($visibility)
    {
        $allowedValues = $this->getVisibilityAllowableValues();
        if (!is_null($visibility) && !in_array($visibility, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'visibility', must be one of '%s'",
                    $visibility,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['visibility'] = $visibility;

        return $this;
    }

    /**
     * Gets source_method
     *
     * @return string|null
     */
    public function getSourceMethod()
    {
        return $this->container['source_method'];
    }

    /**
     * Sets source_method
     *
     * @param string|null $source_method Source Method, the HTTP method.
     *
     * @return self
     */
    public function setSourceMethod($source_method)
    {
        $allowedValues = $this->getSourceMethodAllowableValues();
        if (!is_null($source_method) && !in_array($source_method, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'source_method', must be one of '%s'",
                    $source_method,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['source_method'] = $source_method;

        return $this;
    }

    /**
     * Gets api_type
     *
     * @return string|null
     */
    public function getApiType()
    {
        return $this->container['api_type'];
    }

    /**
     * Sets api_type
     *
     * @param string|null $api_type Api Type, The code of the api option list to use, eg. clouds, environments, groups, instances, instance-wiki, networks, servicePlans, resourcePools, securityGroups, servers, server-wiki. Required when type is api.
     *
     * @return self
     */
    public function setApiType($api_type)
    {
        $this->container['api_type'] = $api_type;

        return $this;
    }

    /**
     * Gets ignore_ssl_errors
     *
     * @return bool|null
     */
    public function getIgnoreSslErrors()
    {
        return $this->container['ignore_ssl_errors'];
    }

    /**
     * Sets ignore_ssl_errors
     *
     * @param bool|null $ignore_ssl_errors Ignore SSL Errors.
     *
     * @return self
     */
    public function setIgnoreSslErrors($ignore_ssl_errors)
    {
        $this->container['ignore_ssl_errors'] = $ignore_ssl_errors;

        return $this;
    }

    /**
     * Gets real_time
     *
     * @return bool|null
     */
    public function getRealTime()
    {
        return $this->container['real_time'];
    }

    /**
     * Sets real_time
     *
     * @param bool|null $real_time Real Time.
     *
     * @return self
     */
    public function setRealTime($real_time)
    {
        $this->container['real_time'] = $real_time;

        return $this;
    }

    /**
     * Gets credential
     *
     * @return \OpenAPI\Client\Model\OptionTypeListCreateCredential|null
     */
    public function getCredential()
    {
        return $this->container['credential'];
    }

    /**
     * Sets credential
     *
     * @param \OpenAPI\Client\Model\OptionTypeListCreateCredential|null $credential credential
     *
     * @return self
     */
    public function setCredential($credential)
    {
        $this->container['credential'] = $credential;

        return $this;
    }

    /**
     * Gets service_username
     *
     * @return string|null
     */
    public function getServiceUsername()
    {
        return $this->container['service_username'];
    }

    /**
     * Sets service_username
     *
     * @param string|null $service_username Username for authenticating with Basic Auth when type is rest or ldap username.
     *
     * @return self
     */
    public function setServiceUsername($service_username)
    {
        $this->container['service_username'] = $service_username;

        return $this;
    }

    /**
     * Gets service_password
     *
     * @return string|null
     */
    public function getServicePassword()
    {
        return $this->container['service_password'];
    }

    /**
     * Sets service_password
     *
     * @param string|null $service_password Password for authenticating with Basic Auth when type is rest or ldap password.
     *
     * @return self
     */
    public function setServicePassword($service_password)
    {
        $this->container['service_password'] = $service_password;

        return $this;
    }

    /**
     * Gets initial_dataset
     *
     * @return string|null
     */
    public function getInitialDataset()
    {
        return $this->container['initial_dataset'];
    }

    /**
     * Sets initial_dataset
     *
     * @param string|null $initial_dataset Initial Dataset. Create an initial JSON or CSV dataset to be used as the collection for this option list. It should be a list containing objects with properties 'name', and 'value'. Required when type is manual.
     *
     * @return self
     */
    public function setInitialDataset($initial_dataset)
    {
        $this->container['initial_dataset'] = $initial_dataset;

        return $this;
    }

    /**
     * Gets translation_script
     *
     * @return string|null
     */
    public function getTranslationScript()
    {
        return $this->container['translation_script'];
    }

    /**
     * Sets translation_script
     *
     * @param string|null $translation_script Translation Script. Create a js script to translate the result data object into an Array containing objects with properties 'name' and 'value'. The input data is provided as data and the result should be put on the global variable results.
     *
     * @return self
     */
    public function setTranslationScript($translation_script)
    {
        $this->container['translation_script'] = $translation_script;

        return $this;
    }

    /**
     * Gets request_script
     *
     * @return string|null
     */
    public function getRequestScript()
    {
        return $this->container['request_script'];
    }

    /**
     * Sets request_script
     *
     * @param string|null $request_script Request Script. Create a js script to prepare the request. Return a data object as the body for a post, and return an array containing properties 'name' and 'value' for a get. The input data is provided as data and the result should be put on the global variable results.
     *
     * @return self
     */
    public function setRequestScript($request_script)
    {
        $this->container['request_script'] = $request_script;

        return $this;
    }

    /**
     * Gets config
     *
     * @return \OpenAPI\Client\Model\OptionTypeListCreateConfig|null
     */
    public function getConfig()
    {
        return $this->container['config'];
    }

    /**
     * Sets config
     *
     * @param \OpenAPI\Client\Model\OptionTypeListCreateConfig|null $config config
     *
     * @return self
     */
    public function setConfig($config)
    {
        $this->container['config'] = $config;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


