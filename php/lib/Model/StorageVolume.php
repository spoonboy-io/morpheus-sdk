<?php
/**
 * StorageVolume
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * StorageVolume Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class StorageVolume implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'storageVolume';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'name' => 'string',
        'description' => 'string',
        'controller_id' => 'int',
        'controller_mount_point' => 'string',
        'resizeable' => 'bool',
        'root_volume' => 'bool',
        'unit_number' => 'string',
        'device_name' => 'string',
        'device_display_name' => 'string',
        'type' => '\OpenAPI\Client\Model\InlineResponse20079LoadBalancerMonitorLoadBalancerType',
        'type_id' => 'int',
        'category' => 'string',
        'status' => 'string',
        'status_message' => 'string',
        'configurable_iops' => 'bool',
        'max_storage' => 'int',
        'display_order' => 'int',
        'max_iops' => 'string',
        'uuid' => 'string',
        'active' => 'bool',
        'zone' => '\OpenAPI\Client\Model\InlineResponse20040AppDeployInstance',
        'zone_id' => 'int',
        'datastore' => '\OpenAPI\Client\Model\InlineResponse20040AppDeployInstance',
        'datastore_id' => 'int',
        'storage_group' => 'string',
        'namespace' => 'string',
        'storage_server' => 'string',
        'source' => 'string',
        'owner' => '\OpenAPI\Client\Model\InlineResponse20040AppDeployInstance'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'name' => null,
        'description' => null,
        'controller_id' => 'int64',
        'controller_mount_point' => null,
        'resizeable' => null,
        'root_volume' => null,
        'unit_number' => null,
        'device_name' => null,
        'device_display_name' => null,
        'type' => null,
        'type_id' => 'int64',
        'category' => null,
        'status' => null,
        'status_message' => null,
        'configurable_iops' => null,
        'max_storage' => 'int64',
        'display_order' => 'int64',
        'max_iops' => null,
        'uuid' => null,
        'active' => null,
        'zone' => null,
        'zone_id' => 'int64',
        'datastore' => null,
        'datastore_id' => 'int64',
        'storage_group' => null,
        'namespace' => null,
        'storage_server' => null,
        'source' => null,
        'owner' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'description' => 'description',
        'controller_id' => 'controllerId',
        'controller_mount_point' => 'controllerMountPoint',
        'resizeable' => 'resizeable',
        'root_volume' => 'rootVolume',
        'unit_number' => 'unitNumber',
        'device_name' => 'deviceName',
        'device_display_name' => 'deviceDisplayName',
        'type' => 'type',
        'type_id' => 'typeId',
        'category' => 'category',
        'status' => 'status',
        'status_message' => 'statusMessage',
        'configurable_iops' => 'configurableIOPS',
        'max_storage' => 'maxStorage',
        'display_order' => 'displayOrder',
        'max_iops' => 'maxIOPS',
        'uuid' => 'uuid',
        'active' => 'active',
        'zone' => 'zone',
        'zone_id' => 'zoneId',
        'datastore' => 'datastore',
        'datastore_id' => 'datastoreId',
        'storage_group' => 'storageGroup',
        'namespace' => 'namespace',
        'storage_server' => 'storageServer',
        'source' => 'source',
        'owner' => 'owner'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'description' => 'setDescription',
        'controller_id' => 'setControllerId',
        'controller_mount_point' => 'setControllerMountPoint',
        'resizeable' => 'setResizeable',
        'root_volume' => 'setRootVolume',
        'unit_number' => 'setUnitNumber',
        'device_name' => 'setDeviceName',
        'device_display_name' => 'setDeviceDisplayName',
        'type' => 'setType',
        'type_id' => 'setTypeId',
        'category' => 'setCategory',
        'status' => 'setStatus',
        'status_message' => 'setStatusMessage',
        'configurable_iops' => 'setConfigurableIops',
        'max_storage' => 'setMaxStorage',
        'display_order' => 'setDisplayOrder',
        'max_iops' => 'setMaxIops',
        'uuid' => 'setUuid',
        'active' => 'setActive',
        'zone' => 'setZone',
        'zone_id' => 'setZoneId',
        'datastore' => 'setDatastore',
        'datastore_id' => 'setDatastoreId',
        'storage_group' => 'setStorageGroup',
        'namespace' => 'setNamespace',
        'storage_server' => 'setStorageServer',
        'source' => 'setSource',
        'owner' => 'setOwner'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'description' => 'getDescription',
        'controller_id' => 'getControllerId',
        'controller_mount_point' => 'getControllerMountPoint',
        'resizeable' => 'getResizeable',
        'root_volume' => 'getRootVolume',
        'unit_number' => 'getUnitNumber',
        'device_name' => 'getDeviceName',
        'device_display_name' => 'getDeviceDisplayName',
        'type' => 'getType',
        'type_id' => 'getTypeId',
        'category' => 'getCategory',
        'status' => 'getStatus',
        'status_message' => 'getStatusMessage',
        'configurable_iops' => 'getConfigurableIops',
        'max_storage' => 'getMaxStorage',
        'display_order' => 'getDisplayOrder',
        'max_iops' => 'getMaxIops',
        'uuid' => 'getUuid',
        'active' => 'getActive',
        'zone' => 'getZone',
        'zone_id' => 'getZoneId',
        'datastore' => 'getDatastore',
        'datastore_id' => 'getDatastoreId',
        'storage_group' => 'getStorageGroup',
        'namespace' => 'getNamespace',
        'storage_server' => 'getStorageServer',
        'source' => 'getSource',
        'owner' => 'getOwner'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['controller_id'] = $data['controller_id'] ?? null;
        $this->container['controller_mount_point'] = $data['controller_mount_point'] ?? null;
        $this->container['resizeable'] = $data['resizeable'] ?? null;
        $this->container['root_volume'] = $data['root_volume'] ?? null;
        $this->container['unit_number'] = $data['unit_number'] ?? null;
        $this->container['device_name'] = $data['device_name'] ?? null;
        $this->container['device_display_name'] = $data['device_display_name'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['type_id'] = $data['type_id'] ?? null;
        $this->container['category'] = $data['category'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['status_message'] = $data['status_message'] ?? null;
        $this->container['configurable_iops'] = $data['configurable_iops'] ?? null;
        $this->container['max_storage'] = $data['max_storage'] ?? null;
        $this->container['display_order'] = $data['display_order'] ?? null;
        $this->container['max_iops'] = $data['max_iops'] ?? null;
        $this->container['uuid'] = $data['uuid'] ?? null;
        $this->container['active'] = $data['active'] ?? null;
        $this->container['zone'] = $data['zone'] ?? null;
        $this->container['zone_id'] = $data['zone_id'] ?? null;
        $this->container['datastore'] = $data['datastore'] ?? null;
        $this->container['datastore_id'] = $data['datastore_id'] ?? null;
        $this->container['storage_group'] = $data['storage_group'] ?? null;
        $this->container['namespace'] = $data['namespace'] ?? null;
        $this->container['storage_server'] = $data['storage_server'] ?? null;
        $this->container['source'] = $data['source'] ?? null;
        $this->container['owner'] = $data['owner'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets controller_id
     *
     * @return int|null
     */
    public function getControllerId()
    {
        return $this->container['controller_id'];
    }

    /**
     * Sets controller_id
     *
     * @param int|null $controller_id controller_id
     *
     * @return self
     */
    public function setControllerId($controller_id)
    {
        $this->container['controller_id'] = $controller_id;

        return $this;
    }

    /**
     * Gets controller_mount_point
     *
     * @return string|null
     */
    public function getControllerMountPoint()
    {
        return $this->container['controller_mount_point'];
    }

    /**
     * Sets controller_mount_point
     *
     * @param string|null $controller_mount_point controller_mount_point
     *
     * @return self
     */
    public function setControllerMountPoint($controller_mount_point)
    {
        $this->container['controller_mount_point'] = $controller_mount_point;

        return $this;
    }

    /**
     * Gets resizeable
     *
     * @return bool|null
     */
    public function getResizeable()
    {
        return $this->container['resizeable'];
    }

    /**
     * Sets resizeable
     *
     * @param bool|null $resizeable resizeable
     *
     * @return self
     */
    public function setResizeable($resizeable)
    {
        $this->container['resizeable'] = $resizeable;

        return $this;
    }

    /**
     * Gets root_volume
     *
     * @return bool|null
     */
    public function getRootVolume()
    {
        return $this->container['root_volume'];
    }

    /**
     * Sets root_volume
     *
     * @param bool|null $root_volume root_volume
     *
     * @return self
     */
    public function setRootVolume($root_volume)
    {
        $this->container['root_volume'] = $root_volume;

        return $this;
    }

    /**
     * Gets unit_number
     *
     * @return string|null
     */
    public function getUnitNumber()
    {
        return $this->container['unit_number'];
    }

    /**
     * Sets unit_number
     *
     * @param string|null $unit_number unit_number
     *
     * @return self
     */
    public function setUnitNumber($unit_number)
    {
        $this->container['unit_number'] = $unit_number;

        return $this;
    }

    /**
     * Gets device_name
     *
     * @return string|null
     */
    public function getDeviceName()
    {
        return $this->container['device_name'];
    }

    /**
     * Sets device_name
     *
     * @param string|null $device_name device_name
     *
     * @return self
     */
    public function setDeviceName($device_name)
    {
        $this->container['device_name'] = $device_name;

        return $this;
    }

    /**
     * Gets device_display_name
     *
     * @return string|null
     */
    public function getDeviceDisplayName()
    {
        return $this->container['device_display_name'];
    }

    /**
     * Sets device_display_name
     *
     * @param string|null $device_display_name device_display_name
     *
     * @return self
     */
    public function setDeviceDisplayName($device_display_name)
    {
        $this->container['device_display_name'] = $device_display_name;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \OpenAPI\Client\Model\InlineResponse20079LoadBalancerMonitorLoadBalancerType|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \OpenAPI\Client\Model\InlineResponse20079LoadBalancerMonitorLoadBalancerType|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets type_id
     *
     * @return int|null
     */
    public function getTypeId()
    {
        return $this->container['type_id'];
    }

    /**
     * Sets type_id
     *
     * @param int|null $type_id type_id
     *
     * @return self
     */
    public function setTypeId($type_id)
    {
        $this->container['type_id'] = $type_id;

        return $this;
    }

    /**
     * Gets category
     *
     * @return string|null
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param string|null $category category
     *
     * @return self
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets status_message
     *
     * @return string|null
     */
    public function getStatusMessage()
    {
        return $this->container['status_message'];
    }

    /**
     * Sets status_message
     *
     * @param string|null $status_message status_message
     *
     * @return self
     */
    public function setStatusMessage($status_message)
    {
        $this->container['status_message'] = $status_message;

        return $this;
    }

    /**
     * Gets configurable_iops
     *
     * @return bool|null
     */
    public function getConfigurableIops()
    {
        return $this->container['configurable_iops'];
    }

    /**
     * Sets configurable_iops
     *
     * @param bool|null $configurable_iops configurable_iops
     *
     * @return self
     */
    public function setConfigurableIops($configurable_iops)
    {
        $this->container['configurable_iops'] = $configurable_iops;

        return $this;
    }

    /**
     * Gets max_storage
     *
     * @return int|null
     */
    public function getMaxStorage()
    {
        return $this->container['max_storage'];
    }

    /**
     * Sets max_storage
     *
     * @param int|null $max_storage max_storage
     *
     * @return self
     */
    public function setMaxStorage($max_storage)
    {
        $this->container['max_storage'] = $max_storage;

        return $this;
    }

    /**
     * Gets display_order
     *
     * @return int|null
     */
    public function getDisplayOrder()
    {
        return $this->container['display_order'];
    }

    /**
     * Sets display_order
     *
     * @param int|null $display_order display_order
     *
     * @return self
     */
    public function setDisplayOrder($display_order)
    {
        $this->container['display_order'] = $display_order;

        return $this;
    }

    /**
     * Gets max_iops
     *
     * @return string|null
     */
    public function getMaxIops()
    {
        return $this->container['max_iops'];
    }

    /**
     * Sets max_iops
     *
     * @param string|null $max_iops max_iops
     *
     * @return self
     */
    public function setMaxIops($max_iops)
    {
        $this->container['max_iops'] = $max_iops;

        return $this;
    }

    /**
     * Gets uuid
     *
     * @return string|null
     */
    public function getUuid()
    {
        return $this->container['uuid'];
    }

    /**
     * Sets uuid
     *
     * @param string|null $uuid uuid
     *
     * @return self
     */
    public function setUuid($uuid)
    {
        $this->container['uuid'] = $uuid;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool|null
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool|null $active active
     *
     * @return self
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets zone
     *
     * @return \OpenAPI\Client\Model\InlineResponse20040AppDeployInstance|null
     */
    public function getZone()
    {
        return $this->container['zone'];
    }

    /**
     * Sets zone
     *
     * @param \OpenAPI\Client\Model\InlineResponse20040AppDeployInstance|null $zone zone
     *
     * @return self
     */
    public function setZone($zone)
    {
        $this->container['zone'] = $zone;

        return $this;
    }

    /**
     * Gets zone_id
     *
     * @return int|null
     */
    public function getZoneId()
    {
        return $this->container['zone_id'];
    }

    /**
     * Sets zone_id
     *
     * @param int|null $zone_id zone_id
     *
     * @return self
     */
    public function setZoneId($zone_id)
    {
        $this->container['zone_id'] = $zone_id;

        return $this;
    }

    /**
     * Gets datastore
     *
     * @return \OpenAPI\Client\Model\InlineResponse20040AppDeployInstance|null
     */
    public function getDatastore()
    {
        return $this->container['datastore'];
    }

    /**
     * Sets datastore
     *
     * @param \OpenAPI\Client\Model\InlineResponse20040AppDeployInstance|null $datastore datastore
     *
     * @return self
     */
    public function setDatastore($datastore)
    {
        $this->container['datastore'] = $datastore;

        return $this;
    }

    /**
     * Gets datastore_id
     *
     * @return int|null
     */
    public function getDatastoreId()
    {
        return $this->container['datastore_id'];
    }

    /**
     * Sets datastore_id
     *
     * @param int|null $datastore_id datastore_id
     *
     * @return self
     */
    public function setDatastoreId($datastore_id)
    {
        $this->container['datastore_id'] = $datastore_id;

        return $this;
    }

    /**
     * Gets storage_group
     *
     * @return string|null
     */
    public function getStorageGroup()
    {
        return $this->container['storage_group'];
    }

    /**
     * Sets storage_group
     *
     * @param string|null $storage_group storage_group
     *
     * @return self
     */
    public function setStorageGroup($storage_group)
    {
        $this->container['storage_group'] = $storage_group;

        return $this;
    }

    /**
     * Gets namespace
     *
     * @return string|null
     */
    public function getNamespace()
    {
        return $this->container['namespace'];
    }

    /**
     * Sets namespace
     *
     * @param string|null $namespace namespace
     *
     * @return self
     */
    public function setNamespace($namespace)
    {
        $this->container['namespace'] = $namespace;

        return $this;
    }

    /**
     * Gets storage_server
     *
     * @return string|null
     */
    public function getStorageServer()
    {
        return $this->container['storage_server'];
    }

    /**
     * Sets storage_server
     *
     * @param string|null $storage_server storage_server
     *
     * @return self
     */
    public function setStorageServer($storage_server)
    {
        $this->container['storage_server'] = $storage_server;

        return $this;
    }

    /**
     * Gets source
     *
     * @return string|null
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param string|null $source source
     *
     * @return self
     */
    public function setSource($source)
    {
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return \OpenAPI\Client\Model\InlineResponse20040AppDeployInstance|null
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param \OpenAPI\Client\Model\InlineResponse20040AppDeployInstance|null $owner owner
     *
     * @return self
     */
    public function setOwner($owner)
    {
        $this->container['owner'] = $owner;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


