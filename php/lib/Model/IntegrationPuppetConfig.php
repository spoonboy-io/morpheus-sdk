<?php
/**
 * IntegrationPuppetConfig
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * IntegrationPuppetConfig Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class IntegrationPuppetConfig implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'integrationPuppet_config';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'puppet_master' => 'string',
        'puppet_fire_now' => 'string',
        'puppet_ssh_user' => 'string',
        'puppet_ssh_password' => 'string',
        'puppet_ssh_password_hash' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'puppet_master' => null,
        'puppet_fire_now' => null,
        'puppet_ssh_user' => null,
        'puppet_ssh_password' => null,
        'puppet_ssh_password_hash' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'puppet_master' => 'puppetMaster',
        'puppet_fire_now' => 'puppetFireNow',
        'puppet_ssh_user' => 'puppetSshUser',
        'puppet_ssh_password' => 'puppetSshPassword',
        'puppet_ssh_password_hash' => 'puppetSshPasswordHash'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'puppet_master' => 'setPuppetMaster',
        'puppet_fire_now' => 'setPuppetFireNow',
        'puppet_ssh_user' => 'setPuppetSshUser',
        'puppet_ssh_password' => 'setPuppetSshPassword',
        'puppet_ssh_password_hash' => 'setPuppetSshPasswordHash'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'puppet_master' => 'getPuppetMaster',
        'puppet_fire_now' => 'getPuppetFireNow',
        'puppet_ssh_user' => 'getPuppetSshUser',
        'puppet_ssh_password' => 'getPuppetSshPassword',
        'puppet_ssh_password_hash' => 'getPuppetSshPasswordHash'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['puppet_master'] = $data['puppet_master'] ?? null;
        $this->container['puppet_fire_now'] = $data['puppet_fire_now'] ?? null;
        $this->container['puppet_ssh_user'] = $data['puppet_ssh_user'] ?? null;
        $this->container['puppet_ssh_password'] = $data['puppet_ssh_password'] ?? null;
        $this->container['puppet_ssh_password_hash'] = $data['puppet_ssh_password_hash'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets puppet_master
     *
     * @return string|null
     */
    public function getPuppetMaster()
    {
        return $this->container['puppet_master'];
    }

    /**
     * Sets puppet_master
     *
     * @param string|null $puppet_master puppet_master
     *
     * @return self
     */
    public function setPuppetMaster($puppet_master)
    {
        $this->container['puppet_master'] = $puppet_master;

        return $this;
    }

    /**
     * Gets puppet_fire_now
     *
     * @return string|null
     */
    public function getPuppetFireNow()
    {
        return $this->container['puppet_fire_now'];
    }

    /**
     * Sets puppet_fire_now
     *
     * @param string|null $puppet_fire_now puppet_fire_now
     *
     * @return self
     */
    public function setPuppetFireNow($puppet_fire_now)
    {
        $this->container['puppet_fire_now'] = $puppet_fire_now;

        return $this;
    }

    /**
     * Gets puppet_ssh_user
     *
     * @return string|null
     */
    public function getPuppetSshUser()
    {
        return $this->container['puppet_ssh_user'];
    }

    /**
     * Sets puppet_ssh_user
     *
     * @param string|null $puppet_ssh_user puppet_ssh_user
     *
     * @return self
     */
    public function setPuppetSshUser($puppet_ssh_user)
    {
        $this->container['puppet_ssh_user'] = $puppet_ssh_user;

        return $this;
    }

    /**
     * Gets puppet_ssh_password
     *
     * @return string|null
     */
    public function getPuppetSshPassword()
    {
        return $this->container['puppet_ssh_password'];
    }

    /**
     * Sets puppet_ssh_password
     *
     * @param string|null $puppet_ssh_password puppet_ssh_password
     *
     * @return self
     */
    public function setPuppetSshPassword($puppet_ssh_password)
    {
        $this->container['puppet_ssh_password'] = $puppet_ssh_password;

        return $this;
    }

    /**
     * Gets puppet_ssh_password_hash
     *
     * @return string|null
     */
    public function getPuppetSshPasswordHash()
    {
        return $this->container['puppet_ssh_password_hash'];
    }

    /**
     * Sets puppet_ssh_password_hash
     *
     * @param string|null $puppet_ssh_password_hash puppet_ssh_password_hash
     *
     * @return self
     */
    public function setPuppetSshPasswordHash($puppet_ssh_password_hash)
    {
        $this->container['puppet_ssh_password_hash'] = $puppet_ssh_password_hash;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


