<?php
/**
 * ApiPowerSchedulesIdSchedule
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ApiPowerSchedulesIdSchedule Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class ApiPowerSchedulesIdSchedule implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_api_power_schedules__id__schedule';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'description' => 'string',
        'schedule_type' => 'string',
        'schedule_timezone' => 'string',
        'enabled' => 'bool',
        'monday_on_time' => 'string',
        'monday_off_time' => 'string',
        'tuesday_on_time' => 'string',
        'tuesday_off_time' => 'string',
        'wednesday_on_time' => 'string',
        'wednesday_off_time' => 'string',
        'thursday_on_time' => 'string',
        'thursday_off_time' => 'string',
        'friday_on_time' => 'string',
        'friday_off_time' => 'string',
        'saturday_on_time' => 'string',
        'saturday_off_time' => 'string',
        'sunday_on_time' => 'string',
        'sunday_off_time' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'description' => null,
        'schedule_type' => null,
        'schedule_timezone' => null,
        'enabled' => null,
        'monday_on_time' => null,
        'monday_off_time' => null,
        'tuesday_on_time' => null,
        'tuesday_off_time' => null,
        'wednesday_on_time' => null,
        'wednesday_off_time' => null,
        'thursday_on_time' => null,
        'thursday_off_time' => null,
        'friday_on_time' => null,
        'friday_off_time' => null,
        'saturday_on_time' => null,
        'saturday_off_time' => null,
        'sunday_on_time' => null,
        'sunday_off_time' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'description' => 'description',
        'schedule_type' => 'scheduleType',
        'schedule_timezone' => 'scheduleTimezone',
        'enabled' => 'enabled',
        'monday_on_time' => 'mondayOnTime',
        'monday_off_time' => 'mondayOffTime',
        'tuesday_on_time' => 'tuesdayOnTime',
        'tuesday_off_time' => 'tuesdayOffTime',
        'wednesday_on_time' => 'wednesdayOnTime',
        'wednesday_off_time' => 'wednesdayOffTime',
        'thursday_on_time' => 'thursdayOnTime',
        'thursday_off_time' => 'thursdayOffTime',
        'friday_on_time' => 'fridayOnTime',
        'friday_off_time' => 'fridayOffTime',
        'saturday_on_time' => 'saturdayOnTime',
        'saturday_off_time' => 'saturdayOffTime',
        'sunday_on_time' => 'sundayOnTime',
        'sunday_off_time' => 'sundayOffTime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'description' => 'setDescription',
        'schedule_type' => 'setScheduleType',
        'schedule_timezone' => 'setScheduleTimezone',
        'enabled' => 'setEnabled',
        'monday_on_time' => 'setMondayOnTime',
        'monday_off_time' => 'setMondayOffTime',
        'tuesday_on_time' => 'setTuesdayOnTime',
        'tuesday_off_time' => 'setTuesdayOffTime',
        'wednesday_on_time' => 'setWednesdayOnTime',
        'wednesday_off_time' => 'setWednesdayOffTime',
        'thursday_on_time' => 'setThursdayOnTime',
        'thursday_off_time' => 'setThursdayOffTime',
        'friday_on_time' => 'setFridayOnTime',
        'friday_off_time' => 'setFridayOffTime',
        'saturday_on_time' => 'setSaturdayOnTime',
        'saturday_off_time' => 'setSaturdayOffTime',
        'sunday_on_time' => 'setSundayOnTime',
        'sunday_off_time' => 'setSundayOffTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'description' => 'getDescription',
        'schedule_type' => 'getScheduleType',
        'schedule_timezone' => 'getScheduleTimezone',
        'enabled' => 'getEnabled',
        'monday_on_time' => 'getMondayOnTime',
        'monday_off_time' => 'getMondayOffTime',
        'tuesday_on_time' => 'getTuesdayOnTime',
        'tuesday_off_time' => 'getTuesdayOffTime',
        'wednesday_on_time' => 'getWednesdayOnTime',
        'wednesday_off_time' => 'getWednesdayOffTime',
        'thursday_on_time' => 'getThursdayOnTime',
        'thursday_off_time' => 'getThursdayOffTime',
        'friday_on_time' => 'getFridayOnTime',
        'friday_off_time' => 'getFridayOffTime',
        'saturday_on_time' => 'getSaturdayOnTime',
        'saturday_off_time' => 'getSaturdayOffTime',
        'sunday_on_time' => 'getSundayOnTime',
        'sunday_off_time' => 'getSundayOffTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const SCHEDULE_TYPE_POWER = 'power';
    const SCHEDULE_TYPE_POWER_OFF = 'power off';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getScheduleTypeAllowableValues()
    {
        return [
            self::SCHEDULE_TYPE_POWER,
            self::SCHEDULE_TYPE_POWER_OFF,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['schedule_type'] = $data['schedule_type'] ?? null;
        $this->container['schedule_timezone'] = $data['schedule_timezone'] ?? 'UTC';
        $this->container['enabled'] = $data['enabled'] ?? true;
        $this->container['monday_on_time'] = $data['monday_on_time'] ?? '00:00';
        $this->container['monday_off_time'] = $data['monday_off_time'] ?? '24:00';
        $this->container['tuesday_on_time'] = $data['tuesday_on_time'] ?? '00:00';
        $this->container['tuesday_off_time'] = $data['tuesday_off_time'] ?? '24:00';
        $this->container['wednesday_on_time'] = $data['wednesday_on_time'] ?? '00:00';
        $this->container['wednesday_off_time'] = $data['wednesday_off_time'] ?? '24:00';
        $this->container['thursday_on_time'] = $data['thursday_on_time'] ?? '00:00';
        $this->container['thursday_off_time'] = $data['thursday_off_time'] ?? '24:00';
        $this->container['friday_on_time'] = $data['friday_on_time'] ?? '00:00';
        $this->container['friday_off_time'] = $data['friday_off_time'] ?? '24:00';
        $this->container['saturday_on_time'] = $data['saturday_on_time'] ?? '00:00';
        $this->container['saturday_off_time'] = $data['saturday_off_time'] ?? '24:00';
        $this->container['sunday_on_time'] = $data['sunday_on_time'] ?? '00:00';
        $this->container['sunday_off_time'] = $data['sunday_off_time'] ?? '24:00';
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getScheduleTypeAllowableValues();
        if (!is_null($this->container['schedule_type']) && !in_array($this->container['schedule_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'schedule_type', must be one of '%s'",
                $this->container['schedule_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name A name for the power schedule
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description A description for the power schedule
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets schedule_type
     *
     * @return string|null
     */
    public function getScheduleType()
    {
        return $this->container['schedule_type'];
    }

    /**
     * Sets schedule_type
     *
     * @param string|null $schedule_type Type of schedule `power` on or `power off`
     *
     * @return self
     */
    public function setScheduleType($schedule_type)
    {
        $allowedValues = $this->getScheduleTypeAllowableValues();
        if (!is_null($schedule_type) && !in_array($schedule_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'schedule_type', must be one of '%s'",
                    $schedule_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['schedule_type'] = $schedule_type;

        return $this;
    }

    /**
     * Gets schedule_timezone
     *
     * @return string|null
     */
    public function getScheduleTimezone()
    {
        return $this->container['schedule_timezone'];
    }

    /**
     * Sets schedule_timezone
     *
     * @param string|null $schedule_timezone Time Zone eg. America/New_York, Europe/Amsterdam, etc.
     *
     * @return self
     */
    public function setScheduleTimezone($schedule_timezone)
    {
        $this->container['schedule_timezone'] = $schedule_timezone;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool|null
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool|null $enabled Is the power schedule enabled
     *
     * @return self
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets monday_on_time
     *
     * @return string|null
     */
    public function getMondayOnTime()
    {
        return $this->container['monday_on_time'];
    }

    /**
     * Sets monday_on_time
     *
     * @param string|null $monday_on_time Monday Start time of the day in 24-hour format
     *
     * @return self
     */
    public function setMondayOnTime($monday_on_time)
    {
        $this->container['monday_on_time'] = $monday_on_time;

        return $this;
    }

    /**
     * Gets monday_off_time
     *
     * @return string|null
     */
    public function getMondayOffTime()
    {
        return $this->container['monday_off_time'];
    }

    /**
     * Sets monday_off_time
     *
     * @param string|null $monday_off_time Monday Off time of the day in 24-hour format
     *
     * @return self
     */
    public function setMondayOffTime($monday_off_time)
    {
        $this->container['monday_off_time'] = $monday_off_time;

        return $this;
    }

    /**
     * Gets tuesday_on_time
     *
     * @return string|null
     */
    public function getTuesdayOnTime()
    {
        return $this->container['tuesday_on_time'];
    }

    /**
     * Sets tuesday_on_time
     *
     * @param string|null $tuesday_on_time Tuesday Start time of the day in 24-hour format
     *
     * @return self
     */
    public function setTuesdayOnTime($tuesday_on_time)
    {
        $this->container['tuesday_on_time'] = $tuesday_on_time;

        return $this;
    }

    /**
     * Gets tuesday_off_time
     *
     * @return string|null
     */
    public function getTuesdayOffTime()
    {
        return $this->container['tuesday_off_time'];
    }

    /**
     * Sets tuesday_off_time
     *
     * @param string|null $tuesday_off_time Tuesday Off time of the day in 24-hour format
     *
     * @return self
     */
    public function setTuesdayOffTime($tuesday_off_time)
    {
        $this->container['tuesday_off_time'] = $tuesday_off_time;

        return $this;
    }

    /**
     * Gets wednesday_on_time
     *
     * @return string|null
     */
    public function getWednesdayOnTime()
    {
        return $this->container['wednesday_on_time'];
    }

    /**
     * Sets wednesday_on_time
     *
     * @param string|null $wednesday_on_time Wednesday Start time of the day in 24-hour format
     *
     * @return self
     */
    public function setWednesdayOnTime($wednesday_on_time)
    {
        $this->container['wednesday_on_time'] = $wednesday_on_time;

        return $this;
    }

    /**
     * Gets wednesday_off_time
     *
     * @return string|null
     */
    public function getWednesdayOffTime()
    {
        return $this->container['wednesday_off_time'];
    }

    /**
     * Sets wednesday_off_time
     *
     * @param string|null $wednesday_off_time Wednesday Off time of the day in 24-hour format
     *
     * @return self
     */
    public function setWednesdayOffTime($wednesday_off_time)
    {
        $this->container['wednesday_off_time'] = $wednesday_off_time;

        return $this;
    }

    /**
     * Gets thursday_on_time
     *
     * @return string|null
     */
    public function getThursdayOnTime()
    {
        return $this->container['thursday_on_time'];
    }

    /**
     * Sets thursday_on_time
     *
     * @param string|null $thursday_on_time Thursday Start time of the day in 24-hour format
     *
     * @return self
     */
    public function setThursdayOnTime($thursday_on_time)
    {
        $this->container['thursday_on_time'] = $thursday_on_time;

        return $this;
    }

    /**
     * Gets thursday_off_time
     *
     * @return string|null
     */
    public function getThursdayOffTime()
    {
        return $this->container['thursday_off_time'];
    }

    /**
     * Sets thursday_off_time
     *
     * @param string|null $thursday_off_time Thursday Off time of the day in 24-hour format
     *
     * @return self
     */
    public function setThursdayOffTime($thursday_off_time)
    {
        $this->container['thursday_off_time'] = $thursday_off_time;

        return $this;
    }

    /**
     * Gets friday_on_time
     *
     * @return string|null
     */
    public function getFridayOnTime()
    {
        return $this->container['friday_on_time'];
    }

    /**
     * Sets friday_on_time
     *
     * @param string|null $friday_on_time Friday Start time of the day in 24-hour format
     *
     * @return self
     */
    public function setFridayOnTime($friday_on_time)
    {
        $this->container['friday_on_time'] = $friday_on_time;

        return $this;
    }

    /**
     * Gets friday_off_time
     *
     * @return string|null
     */
    public function getFridayOffTime()
    {
        return $this->container['friday_off_time'];
    }

    /**
     * Sets friday_off_time
     *
     * @param string|null $friday_off_time Friday Off time of the day in 24-hour format
     *
     * @return self
     */
    public function setFridayOffTime($friday_off_time)
    {
        $this->container['friday_off_time'] = $friday_off_time;

        return $this;
    }

    /**
     * Gets saturday_on_time
     *
     * @return string|null
     */
    public function getSaturdayOnTime()
    {
        return $this->container['saturday_on_time'];
    }

    /**
     * Sets saturday_on_time
     *
     * @param string|null $saturday_on_time Saturday Start time of the day in 24-hour format
     *
     * @return self
     */
    public function setSaturdayOnTime($saturday_on_time)
    {
        $this->container['saturday_on_time'] = $saturday_on_time;

        return $this;
    }

    /**
     * Gets saturday_off_time
     *
     * @return string|null
     */
    public function getSaturdayOffTime()
    {
        return $this->container['saturday_off_time'];
    }

    /**
     * Sets saturday_off_time
     *
     * @param string|null $saturday_off_time Saturday Off time of the day in 24-hour format
     *
     * @return self
     */
    public function setSaturdayOffTime($saturday_off_time)
    {
        $this->container['saturday_off_time'] = $saturday_off_time;

        return $this;
    }

    /**
     * Gets sunday_on_time
     *
     * @return string|null
     */
    public function getSundayOnTime()
    {
        return $this->container['sunday_on_time'];
    }

    /**
     * Sets sunday_on_time
     *
     * @param string|null $sunday_on_time Sunday Start time of the day in 24-hour format
     *
     * @return self
     */
    public function setSundayOnTime($sunday_on_time)
    {
        $this->container['sunday_on_time'] = $sunday_on_time;

        return $this;
    }

    /**
     * Gets sunday_off_time
     *
     * @return string|null
     */
    public function getSundayOffTime()
    {
        return $this->container['sunday_off_time'];
    }

    /**
     * Sets sunday_off_time
     *
     * @param string|null $sunday_off_time Sunday Off time of the day in 24-hour format
     *
     * @return self
     */
    public function setSundayOffTime($sunday_off_time)
    {
        $this->container['sunday_off_time'] = $sunday_off_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


