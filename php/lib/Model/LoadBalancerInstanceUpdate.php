<?php
/**
 * LoadBalancerInstanceUpdate
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * LoadBalancerInstanceUpdate Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class LoadBalancerInstanceUpdate implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'loadBalancerInstanceUpdate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'vip_name' => 'string',
        'description' => 'string',
        'vip_address' => 'string',
        'vip_port' => 'string',
        'vip_protocol' => 'string',
        'vip_hostname' => 'string',
        'pool' => 'int',
        'ssl_cert' => 'int',
        'ssl_server_cert' => 'int',
        'config' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'vip_name' => null,
        'description' => null,
        'vip_address' => null,
        'vip_port' => null,
        'vip_protocol' => null,
        'vip_hostname' => null,
        'pool' => 'int64',
        'ssl_cert' => 'int64',
        'ssl_server_cert' => 'int64',
        'config' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'vip_name' => 'vipName',
        'description' => 'description',
        'vip_address' => 'vipAddress',
        'vip_port' => 'vipPort',
        'vip_protocol' => 'vipProtocol',
        'vip_hostname' => 'vipHostname',
        'pool' => 'pool',
        'ssl_cert' => 'sslCert',
        'ssl_server_cert' => 'sslServerCert',
        'config' => 'config'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'vip_name' => 'setVipName',
        'description' => 'setDescription',
        'vip_address' => 'setVipAddress',
        'vip_port' => 'setVipPort',
        'vip_protocol' => 'setVipProtocol',
        'vip_hostname' => 'setVipHostname',
        'pool' => 'setPool',
        'ssl_cert' => 'setSslCert',
        'ssl_server_cert' => 'setSslServerCert',
        'config' => 'setConfig'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'vip_name' => 'getVipName',
        'description' => 'getDescription',
        'vip_address' => 'getVipAddress',
        'vip_port' => 'getVipPort',
        'vip_protocol' => 'getVipProtocol',
        'vip_hostname' => 'getVipHostname',
        'pool' => 'getPool',
        'ssl_cert' => 'getSslCert',
        'ssl_server_cert' => 'getSslServerCert',
        'config' => 'getConfig'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['vip_name'] = $data['vip_name'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['vip_address'] = $data['vip_address'] ?? null;
        $this->container['vip_port'] = $data['vip_port'] ?? null;
        $this->container['vip_protocol'] = $data['vip_protocol'] ?? null;
        $this->container['vip_hostname'] = $data['vip_hostname'] ?? null;
        $this->container['pool'] = $data['pool'] ?? null;
        $this->container['ssl_cert'] = $data['ssl_cert'] ?? null;
        $this->container['ssl_server_cert'] = $data['ssl_server_cert'] ?? null;
        $this->container['config'] = $data['config'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets vip_name
     *
     * @return string|null
     */
    public function getVipName()
    {
        return $this->container['vip_name'];
    }

    /**
     * Sets vip_name
     *
     * @param string|null $vip_name VIP Name
     *
     * @return self
     */
    public function setVipName($vip_name)
    {
        $this->container['vip_name'] = $vip_name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Description
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets vip_address
     *
     * @return string|null
     */
    public function getVipAddress()
    {
        return $this->container['vip_address'];
    }

    /**
     * Sets vip_address
     *
     * @param string|null $vip_address VIP Address
     *
     * @return self
     */
    public function setVipAddress($vip_address)
    {
        $this->container['vip_address'] = $vip_address;

        return $this;
    }

    /**
     * Gets vip_port
     *
     * @return string|null
     */
    public function getVipPort()
    {
        return $this->container['vip_port'];
    }

    /**
     * Sets vip_port
     *
     * @param string|null $vip_port VIP Port
     *
     * @return self
     */
    public function setVipPort($vip_port)
    {
        $this->container['vip_port'] = $vip_port;

        return $this;
    }

    /**
     * Gets vip_protocol
     *
     * @return string|null
     */
    public function getVipProtocol()
    {
        return $this->container['vip_protocol'];
    }

    /**
     * Sets vip_protocol
     *
     * @param string|null $vip_protocol VIP Protocol
     *
     * @return self
     */
    public function setVipProtocol($vip_protocol)
    {
        $this->container['vip_protocol'] = $vip_protocol;

        return $this;
    }

    /**
     * Gets vip_hostname
     *
     * @return string|null
     */
    public function getVipHostname()
    {
        return $this->container['vip_hostname'];
    }

    /**
     * Sets vip_hostname
     *
     * @param string|null $vip_hostname VIP Hostname
     *
     * @return self
     */
    public function setVipHostname($vip_hostname)
    {
        $this->container['vip_hostname'] = $vip_hostname;

        return $this;
    }

    /**
     * Gets pool
     *
     * @return int|null
     */
    public function getPool()
    {
        return $this->container['pool'];
    }

    /**
     * Sets pool
     *
     * @param int|null $pool pool
     *
     * @return self
     */
    public function setPool($pool)
    {
        $this->container['pool'] = $pool;

        return $this;
    }

    /**
     * Gets ssl_cert
     *
     * @return int|null
     */
    public function getSslCert()
    {
        return $this->container['ssl_cert'];
    }

    /**
     * Sets ssl_cert
     *
     * @param int|null $ssl_cert SSL Client Certificate ID
     *
     * @return self
     */
    public function setSslCert($ssl_cert)
    {
        $this->container['ssl_cert'] = $ssl_cert;

        return $this;
    }

    /**
     * Gets ssl_server_cert
     *
     * @return int|null
     */
    public function getSslServerCert()
    {
        return $this->container['ssl_server_cert'];
    }

    /**
     * Sets ssl_server_cert
     *
     * @param int|null $ssl_server_cert SSL Server Certificate ID
     *
     * @return self
     */
    public function setSslServerCert($ssl_server_cert)
    {
        $this->container['ssl_server_cert'] = $ssl_server_cert;

        return $this;
    }

    /**
     * Gets config
     *
     * @return object|null
     */
    public function getConfig()
    {
        return $this->container['config'];
    }

    /**
     * Sets config
     *
     * @param object|null $config Configuration object with parameters that vary by type.
     *
     * @return self
     */
    public function setConfig($config)
    {
        $this->container['config'] = $config;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


