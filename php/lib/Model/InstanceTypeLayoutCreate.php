<?php
/**
 * InstanceTypeLayoutCreate
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * InstanceTypeLayoutCreate Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InstanceTypeLayoutCreate implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'instanceTypeLayoutCreate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'labels' => 'string[]',
        'instance_version' => 'string',
        'description' => 'string',
        'creatable' => 'bool',
        'provision_type_code' => 'string',
        'memory_requirement' => 'string',
        'has_auto_scale' => 'bool',
        'supports_convert_to_managed' => 'bool',
        'container_types' => 'int[]',
        'option_types' => 'int[]',
        'spec_templates' => 'int[]',
        'environment_variables' => '\OpenAPI\Client\Model\ClusterLayoutCreateEnvironmentVariables[]',
        'price_sets' => '\OpenAPI\Client\Model\InstanceTypeCreatePriceSets[]',
        'permissions' => '\OpenAPI\Client\Model\ApiLibraryLayoutsIdPermissionsInstanceTypeLayoutPermissions'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'labels' => null,
        'instance_version' => null,
        'description' => null,
        'creatable' => null,
        'provision_type_code' => null,
        'memory_requirement' => null,
        'has_auto_scale' => null,
        'supports_convert_to_managed' => null,
        'container_types' => 'int64',
        'option_types' => 'int64',
        'spec_templates' => 'int64',
        'environment_variables' => null,
        'price_sets' => null,
        'permissions' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'labels' => 'labels',
        'instance_version' => 'instanceVersion',
        'description' => 'description',
        'creatable' => 'creatable',
        'provision_type_code' => 'provisionTypeCode',
        'memory_requirement' => 'memoryRequirement',
        'has_auto_scale' => 'hasAutoScale',
        'supports_convert_to_managed' => 'supportsConvertToManaged',
        'container_types' => 'containerTypes',
        'option_types' => 'optionTypes',
        'spec_templates' => 'specTemplates',
        'environment_variables' => 'environmentVariables',
        'price_sets' => 'priceSets',
        'permissions' => 'permissions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'labels' => 'setLabels',
        'instance_version' => 'setInstanceVersion',
        'description' => 'setDescription',
        'creatable' => 'setCreatable',
        'provision_type_code' => 'setProvisionTypeCode',
        'memory_requirement' => 'setMemoryRequirement',
        'has_auto_scale' => 'setHasAutoScale',
        'supports_convert_to_managed' => 'setSupportsConvertToManaged',
        'container_types' => 'setContainerTypes',
        'option_types' => 'setOptionTypes',
        'spec_templates' => 'setSpecTemplates',
        'environment_variables' => 'setEnvironmentVariables',
        'price_sets' => 'setPriceSets',
        'permissions' => 'setPermissions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'labels' => 'getLabels',
        'instance_version' => 'getInstanceVersion',
        'description' => 'getDescription',
        'creatable' => 'getCreatable',
        'provision_type_code' => 'getProvisionTypeCode',
        'memory_requirement' => 'getMemoryRequirement',
        'has_auto_scale' => 'getHasAutoScale',
        'supports_convert_to_managed' => 'getSupportsConvertToManaged',
        'container_types' => 'getContainerTypes',
        'option_types' => 'getOptionTypes',
        'spec_templates' => 'getSpecTemplates',
        'environment_variables' => 'getEnvironmentVariables',
        'price_sets' => 'getPriceSets',
        'permissions' => 'getPermissions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['labels'] = $data['labels'] ?? null;
        $this->container['instance_version'] = $data['instance_version'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['creatable'] = $data['creatable'] ?? true;
        $this->container['provision_type_code'] = $data['provision_type_code'] ?? null;
        $this->container['memory_requirement'] = $data['memory_requirement'] ?? null;
        $this->container['has_auto_scale'] = $data['has_auto_scale'] ?? false;
        $this->container['supports_convert_to_managed'] = $data['supports_convert_to_managed'] ?? false;
        $this->container['container_types'] = $data['container_types'] ?? null;
        $this->container['option_types'] = $data['option_types'] ?? null;
        $this->container['spec_templates'] = $data['spec_templates'] ?? null;
        $this->container['environment_variables'] = $data['environment_variables'] ?? null;
        $this->container['price_sets'] = $data['price_sets'] ?? null;
        $this->container['permissions'] = $data['permissions'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['instance_version'] === null) {
            $invalidProperties[] = "'instance_version' can't be null";
        }
        if ($this->container['provision_type_code'] === null) {
            $invalidProperties[] = "'provision_type_code' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Layout name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets labels
     *
     * @return string[]|null
     */
    public function getLabels()
    {
        return $this->container['labels'];
    }

    /**
     * Sets labels
     *
     * @param string[]|null $labels labels
     *
     * @return self
     */
    public function setLabels($labels)
    {
        $this->container['labels'] = $labels;

        return $this;
    }

    /**
     * Gets instance_version
     *
     * @return string
     */
    public function getInstanceVersion()
    {
        return $this->container['instance_version'];
    }

    /**
     * Sets instance_version
     *
     * @param string $instance_version Version of the layout
     *
     * @return self
     */
    public function setInstanceVersion($instance_version)
    {
        $this->container['instance_version'] = $instance_version;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Layout description
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets creatable
     *
     * @return bool|null
     */
    public function getCreatable()
    {
        return $this->container['creatable'];
    }

    /**
     * Sets creatable
     *
     * @param bool|null $creatable Can be used to enable / disable the creatability of the layout.
     *
     * @return self
     */
    public function setCreatable($creatable)
    {
        $this->container['creatable'] = $creatable;

        return $this;
    }

    /**
     * Gets provision_type_code
     *
     * @return string
     */
    public function getProvisionTypeCode()
    {
        return $this->container['provision_type_code'];
    }

    /**
     * Sets provision_type_code
     *
     * @param string $provision_type_code Provision type code
     *
     * @return self
     */
    public function setProvisionTypeCode($provision_type_code)
    {
        $this->container['provision_type_code'] = $provision_type_code;

        return $this;
    }

    /**
     * Gets memory_requirement
     *
     * @return string|null
     */
    public function getMemoryRequirement()
    {
        return $this->container['memory_requirement'];
    }

    /**
     * Sets memory_requirement
     *
     * @param string|null $memory_requirement Memory requirement in megabytes
     *
     * @return self
     */
    public function setMemoryRequirement($memory_requirement)
    {
        $this->container['memory_requirement'] = $memory_requirement;

        return $this;
    }

    /**
     * Gets has_auto_scale
     *
     * @return bool|null
     */
    public function getHasAutoScale()
    {
        return $this->container['has_auto_scale'];
    }

    /**
     * Sets has_auto_scale
     *
     * @param bool|null $has_auto_scale Can be used to enable / disable the horizontal scaling.
     *
     * @return self
     */
    public function setHasAutoScale($has_auto_scale)
    {
        $this->container['has_auto_scale'] = $has_auto_scale;

        return $this;
    }

    /**
     * Gets supports_convert_to_managed
     *
     * @return bool|null
     */
    public function getSupportsConvertToManaged()
    {
        return $this->container['supports_convert_to_managed'];
    }

    /**
     * Sets supports_convert_to_managed
     *
     * @param bool|null $supports_convert_to_managed Can be used to enable / disable the supports convert to managed.
     *
     * @return self
     */
    public function setSupportsConvertToManaged($supports_convert_to_managed)
    {
        $this->container['supports_convert_to_managed'] = $supports_convert_to_managed;

        return $this;
    }

    /**
     * Gets container_types
     *
     * @return int[]|null
     */
    public function getContainerTypes()
    {
        return $this->container['container_types'];
    }

    /**
     * Sets container_types
     *
     * @param int[]|null $container_types Array of layout node type IDs
     *
     * @return self
     */
    public function setContainerTypes($container_types)
    {
        $this->container['container_types'] = $container_types;

        return $this;
    }

    /**
     * Gets option_types
     *
     * @return int[]|null
     */
    public function getOptionTypes()
    {
        return $this->container['option_types'];
    }

    /**
     * Sets option_types
     *
     * @param int[]|null $option_types Array of layout option type IDs
     *
     * @return self
     */
    public function setOptionTypes($option_types)
    {
        $this->container['option_types'] = $option_types;

        return $this;
    }

    /**
     * Gets spec_templates
     *
     * @return int[]|null
     */
    public function getSpecTemplates()
    {
        return $this->container['spec_templates'];
    }

    /**
     * Sets spec_templates
     *
     * @param int[]|null $spec_templates Array of layout spec template IDs
     *
     * @return self
     */
    public function setSpecTemplates($spec_templates)
    {
        $this->container['spec_templates'] = $spec_templates;

        return $this;
    }

    /**
     * Gets environment_variables
     *
     * @return \OpenAPI\Client\Model\ClusterLayoutCreateEnvironmentVariables[]|null
     */
    public function getEnvironmentVariables()
    {
        return $this->container['environment_variables'];
    }

    /**
     * Sets environment_variables
     *
     * @param \OpenAPI\Client\Model\ClusterLayoutCreateEnvironmentVariables[]|null $environment_variables The environmentVariables parameter is array of env objects
     *
     * @return self
     */
    public function setEnvironmentVariables($environment_variables)
    {
        $this->container['environment_variables'] = $environment_variables;

        return $this;
    }

    /**
     * Gets price_sets
     *
     * @return \OpenAPI\Client\Model\InstanceTypeCreatePriceSets[]|null
     */
    public function getPriceSets()
    {
        return $this->container['price_sets'];
    }

    /**
     * Sets price_sets
     *
     * @param \OpenAPI\Client\Model\InstanceTypeCreatePriceSets[]|null $price_sets Array of price set objects
     *
     * @return self
     */
    public function setPriceSets($price_sets)
    {
        $this->container['price_sets'] = $price_sets;

        return $this;
    }

    /**
     * Gets permissions
     *
     * @return \OpenAPI\Client\Model\ApiLibraryLayoutsIdPermissionsInstanceTypeLayoutPermissions|null
     */
    public function getPermissions()
    {
        return $this->container['permissions'];
    }

    /**
     * Sets permissions
     *
     * @param \OpenAPI\Client\Model\ApiLibraryLayoutsIdPermissionsInstanceTypeLayoutPermissions|null $permissions permissions
     *
     * @return self
     */
    public function setPermissions($permissions)
    {
        $this->container['permissions'] = $permissions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


