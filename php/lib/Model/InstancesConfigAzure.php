<?php
/**
 * InstancesConfigAzure
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * InstancesConfigAzure Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InstancesConfigAzure implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'instancesConfigAzure';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'resource_pool_id' => 'string',
        'availability_options' => 'string',
        'availability_set' => 'string',
        'availability_zone' => 'int',
        'azurefloating_ip' => 'string',
        'boot_diagnostics' => 'string',
        'os_guest_diagnostics' => 'string',
        'diagnostics_storage_account' => 'string',
        'create_user' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'resource_pool_id' => null,
        'availability_options' => null,
        'availability_set' => null,
        'availability_zone' => 'int64',
        'azurefloating_ip' => null,
        'boot_diagnostics' => null,
        'os_guest_diagnostics' => null,
        'diagnostics_storage_account' => null,
        'create_user' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'resource_pool_id' => 'resourcePoolId',
        'availability_options' => 'availabilityOptions',
        'availability_set' => 'availabilitySet',
        'availability_zone' => 'availabilityZone',
        'azurefloating_ip' => 'azurefloatingIp',
        'boot_diagnostics' => 'bootDiagnostics',
        'os_guest_diagnostics' => 'osGuestDiagnostics',
        'diagnostics_storage_account' => 'diagnosticsStorageAccount',
        'create_user' => 'createUser'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'resource_pool_id' => 'setResourcePoolId',
        'availability_options' => 'setAvailabilityOptions',
        'availability_set' => 'setAvailabilitySet',
        'availability_zone' => 'setAvailabilityZone',
        'azurefloating_ip' => 'setAzurefloatingIp',
        'boot_diagnostics' => 'setBootDiagnostics',
        'os_guest_diagnostics' => 'setOsGuestDiagnostics',
        'diagnostics_storage_account' => 'setDiagnosticsStorageAccount',
        'create_user' => 'setCreateUser'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'resource_pool_id' => 'getResourcePoolId',
        'availability_options' => 'getAvailabilityOptions',
        'availability_set' => 'getAvailabilitySet',
        'availability_zone' => 'getAvailabilityZone',
        'azurefloating_ip' => 'getAzurefloatingIp',
        'boot_diagnostics' => 'getBootDiagnostics',
        'os_guest_diagnostics' => 'getOsGuestDiagnostics',
        'diagnostics_storage_account' => 'getDiagnosticsStorageAccount',
        'create_user' => 'getCreateUser'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const AVAILABILITY_OPTIONS_ZONE = 'zone';
    const AVAILABILITY_OPTIONS_SET = 'set';
    const AZUREFLOATING_IP_ON = 'on';
    const AZUREFLOATING_IP_OFF = 'off';
    const BOOT_DIAGNOSTICS_ENABLE = 'enable';
    const BOOT_DIAGNOSTICS_ENABLE_CUSTOM_STORAGE = 'enable_custom_storage';
    const OS_GUEST_DIAGNOSTICS_ON = 'on';
    const OS_GUEST_DIAGNOSTICS_OFF = 'off';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAvailabilityOptionsAllowableValues()
    {
        return [
            self::AVAILABILITY_OPTIONS_ZONE,
            self::AVAILABILITY_OPTIONS_SET,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAzurefloatingIpAllowableValues()
    {
        return [
            self::AZUREFLOATING_IP_ON,
            self::AZUREFLOATING_IP_OFF,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBootDiagnosticsAllowableValues()
    {
        return [
            self::BOOT_DIAGNOSTICS_ENABLE,
            self::BOOT_DIAGNOSTICS_ENABLE_CUSTOM_STORAGE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOsGuestDiagnosticsAllowableValues()
    {
        return [
            self::OS_GUEST_DIAGNOSTICS_ON,
            self::OS_GUEST_DIAGNOSTICS_OFF,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['resource_pool_id'] = $data['resource_pool_id'] ?? null;
        $this->container['availability_options'] = $data['availability_options'] ?? null;
        $this->container['availability_set'] = $data['availability_set'] ?? null;
        $this->container['availability_zone'] = $data['availability_zone'] ?? null;
        $this->container['azurefloating_ip'] = $data['azurefloating_ip'] ?? null;
        $this->container['boot_diagnostics'] = $data['boot_diagnostics'] ?? null;
        $this->container['os_guest_diagnostics'] = $data['os_guest_diagnostics'] ?? null;
        $this->container['diagnostics_storage_account'] = $data['diagnostics_storage_account'] ?? null;
        $this->container['create_user'] = $data['create_user'] ?? true;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getAvailabilityOptionsAllowableValues();
        if (!is_null($this->container['availability_options']) && !in_array($this->container['availability_options'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'availability_options', must be one of '%s'",
                $this->container['availability_options'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAzurefloatingIpAllowableValues();
        if (!is_null($this->container['azurefloating_ip']) && !in_array($this->container['azurefloating_ip'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'azurefloating_ip', must be one of '%s'",
                $this->container['azurefloating_ip'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getBootDiagnosticsAllowableValues();
        if (!is_null($this->container['boot_diagnostics']) && !in_array($this->container['boot_diagnostics'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'boot_diagnostics', must be one of '%s'",
                $this->container['boot_diagnostics'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOsGuestDiagnosticsAllowableValues();
        if (!is_null($this->container['os_guest_diagnostics']) && !in_array($this->container['os_guest_diagnostics'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'os_guest_diagnostics', must be one of '%s'",
                $this->container['os_guest_diagnostics'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets resource_pool_id
     *
     * @return string|null
     */
    public function getResourcePoolId()
    {
        return $this->container['resource_pool_id'];
    }

    /**
     * Sets resource_pool_id
     *
     * @param string|null $resource_pool_id id of the resource group to be used, can be prefixed with `pool-`. A resource pool group can be specified instead by prefixing its ID with `poolGroup-`.
     *
     * @return self
     */
    public function setResourcePoolId($resource_pool_id)
    {
        $this->container['resource_pool_id'] = $resource_pool_id;

        return $this;
    }

    /**
     * Gets availability_options
     *
     * @return string|null
     */
    public function getAvailabilityOptions()
    {
        return $this->container['availability_options'];
    }

    /**
     * Sets availability_options
     *
     * @param string|null $availability_options Availability Options
     *
     * @return self
     */
    public function setAvailabilityOptions($availability_options)
    {
        $allowedValues = $this->getAvailabilityOptionsAllowableValues();
        if (!is_null($availability_options) && !in_array($availability_options, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'availability_options', must be one of '%s'",
                    $availability_options,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['availability_options'] = $availability_options;

        return $this;
    }

    /**
     * Gets availability_set
     *
     * @return string|null
     */
    public function getAvailabilitySet()
    {
        return $this->container['availability_set'];
    }

    /**
     * Sets availability_set
     *
     * @param string|null $availability_set Availability Set
     *
     * @return self
     */
    public function setAvailabilitySet($availability_set)
    {
        $this->container['availability_set'] = $availability_set;

        return $this;
    }

    /**
     * Gets availability_zone
     *
     * @return int|null
     */
    public function getAvailabilityZone()
    {
        return $this->container['availability_zone'];
    }

    /**
     * Sets availability_zone
     *
     * @param int|null $availability_zone Availability Zone
     *
     * @return self
     */
    public function setAvailabilityZone($availability_zone)
    {
        $this->container['availability_zone'] = $availability_zone;

        return $this;
    }

    /**
     * Gets azurefloating_ip
     *
     * @return string|null
     */
    public function getAzurefloatingIp()
    {
        return $this->container['azurefloating_ip'];
    }

    /**
     * Sets azurefloating_ip
     *
     * @param string|null $azurefloating_ip Assign Public IP
     *
     * @return self
     */
    public function setAzurefloatingIp($azurefloating_ip)
    {
        $allowedValues = $this->getAzurefloatingIpAllowableValues();
        if (!is_null($azurefloating_ip) && !in_array($azurefloating_ip, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'azurefloating_ip', must be one of '%s'",
                    $azurefloating_ip,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['azurefloating_ip'] = $azurefloating_ip;

        return $this;
    }

    /**
     * Gets boot_diagnostics
     *
     * @return string|null
     */
    public function getBootDiagnostics()
    {
        return $this->container['boot_diagnostics'];
    }

    /**
     * Sets boot_diagnostics
     *
     * @param string|null $boot_diagnostics Boot Diagnostics
     *
     * @return self
     */
    public function setBootDiagnostics($boot_diagnostics)
    {
        $allowedValues = $this->getBootDiagnosticsAllowableValues();
        if (!is_null($boot_diagnostics) && !in_array($boot_diagnostics, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'boot_diagnostics', must be one of '%s'",
                    $boot_diagnostics,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['boot_diagnostics'] = $boot_diagnostics;

        return $this;
    }

    /**
     * Gets os_guest_diagnostics
     *
     * @return string|null
     */
    public function getOsGuestDiagnostics()
    {
        return $this->container['os_guest_diagnostics'];
    }

    /**
     * Sets os_guest_diagnostics
     *
     * @param string|null $os_guest_diagnostics OS Guest Diagnostics
     *
     * @return self
     */
    public function setOsGuestDiagnostics($os_guest_diagnostics)
    {
        $allowedValues = $this->getOsGuestDiagnosticsAllowableValues();
        if (!is_null($os_guest_diagnostics) && !in_array($os_guest_diagnostics, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'os_guest_diagnostics', must be one of '%s'",
                    $os_guest_diagnostics,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['os_guest_diagnostics'] = $os_guest_diagnostics;

        return $this;
    }

    /**
     * Gets diagnostics_storage_account
     *
     * @return string|null
     */
    public function getDiagnosticsStorageAccount()
    {
        return $this->container['diagnostics_storage_account'];
    }

    /**
     * Sets diagnostics_storage_account
     *
     * @param string|null $diagnostics_storage_account Diagnostics Storage Account
     *
     * @return self
     */
    public function setDiagnosticsStorageAccount($diagnostics_storage_account)
    {
        $this->container['diagnostics_storage_account'] = $diagnostics_storage_account;

        return $this;
    }

    /**
     * Gets create_user
     *
     * @return bool|null
     */
    public function getCreateUser()
    {
        return $this->container['create_user'];
    }

    /**
     * Sets create_user
     *
     * @param bool|null $create_user Create User
     *
     * @return self
     */
    public function setCreateUser($create_user)
    {
        $this->container['create_user'] = $create_user;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


