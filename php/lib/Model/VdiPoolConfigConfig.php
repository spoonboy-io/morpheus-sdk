<?php
/**
 * VdiPoolConfigConfig
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * VdiPoolConfigConfig Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class VdiPoolConfigConfig implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'vdiPool_config_config';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'create_user' => 'bool',
        'is_ec2' => 'bool',
        'is_vpc_selectable' => 'bool',
        'no_agent' => 'bool',
        'smbios_asset_tag' => 'string',
        'nested_virtualization' => 'string',
        'vmware_folder_id' => 'string',
        'resource_pool_id' => 'int',
        'pool_provider_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'create_user' => null,
        'is_ec2' => null,
        'is_vpc_selectable' => null,
        'no_agent' => null,
        'smbios_asset_tag' => null,
        'nested_virtualization' => null,
        'vmware_folder_id' => null,
        'resource_pool_id' => 'int64',
        'pool_provider_type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'create_user' => 'createUser',
        'is_ec2' => 'isEC2',
        'is_vpc_selectable' => 'isVpcSelectable',
        'no_agent' => 'noAgent',
        'smbios_asset_tag' => 'smbiosAssetTag',
        'nested_virtualization' => 'nestedVirtualization',
        'vmware_folder_id' => 'vmwareFolderId',
        'resource_pool_id' => 'resourcePoolId',
        'pool_provider_type' => 'poolProviderType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'create_user' => 'setCreateUser',
        'is_ec2' => 'setIsEc2',
        'is_vpc_selectable' => 'setIsVpcSelectable',
        'no_agent' => 'setNoAgent',
        'smbios_asset_tag' => 'setSmbiosAssetTag',
        'nested_virtualization' => 'setNestedVirtualization',
        'vmware_folder_id' => 'setVmwareFolderId',
        'resource_pool_id' => 'setResourcePoolId',
        'pool_provider_type' => 'setPoolProviderType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'create_user' => 'getCreateUser',
        'is_ec2' => 'getIsEc2',
        'is_vpc_selectable' => 'getIsVpcSelectable',
        'no_agent' => 'getNoAgent',
        'smbios_asset_tag' => 'getSmbiosAssetTag',
        'nested_virtualization' => 'getNestedVirtualization',
        'vmware_folder_id' => 'getVmwareFolderId',
        'resource_pool_id' => 'getResourcePoolId',
        'pool_provider_type' => 'getPoolProviderType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['create_user'] = $data['create_user'] ?? null;
        $this->container['is_ec2'] = $data['is_ec2'] ?? null;
        $this->container['is_vpc_selectable'] = $data['is_vpc_selectable'] ?? null;
        $this->container['no_agent'] = $data['no_agent'] ?? null;
        $this->container['smbios_asset_tag'] = $data['smbios_asset_tag'] ?? null;
        $this->container['nested_virtualization'] = $data['nested_virtualization'] ?? null;
        $this->container['vmware_folder_id'] = $data['vmware_folder_id'] ?? null;
        $this->container['resource_pool_id'] = $data['resource_pool_id'] ?? null;
        $this->container['pool_provider_type'] = $data['pool_provider_type'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets create_user
     *
     * @return bool|null
     */
    public function getCreateUser()
    {
        return $this->container['create_user'];
    }

    /**
     * Sets create_user
     *
     * @param bool|null $create_user create_user
     *
     * @return self
     */
    public function setCreateUser($create_user)
    {
        $this->container['create_user'] = $create_user;

        return $this;
    }

    /**
     * Gets is_ec2
     *
     * @return bool|null
     */
    public function getIsEc2()
    {
        return $this->container['is_ec2'];
    }

    /**
     * Sets is_ec2
     *
     * @param bool|null $is_ec2 is_ec2
     *
     * @return self
     */
    public function setIsEc2($is_ec2)
    {
        $this->container['is_ec2'] = $is_ec2;

        return $this;
    }

    /**
     * Gets is_vpc_selectable
     *
     * @return bool|null
     */
    public function getIsVpcSelectable()
    {
        return $this->container['is_vpc_selectable'];
    }

    /**
     * Sets is_vpc_selectable
     *
     * @param bool|null $is_vpc_selectable is_vpc_selectable
     *
     * @return self
     */
    public function setIsVpcSelectable($is_vpc_selectable)
    {
        $this->container['is_vpc_selectable'] = $is_vpc_selectable;

        return $this;
    }

    /**
     * Gets no_agent
     *
     * @return bool|null
     */
    public function getNoAgent()
    {
        return $this->container['no_agent'];
    }

    /**
     * Sets no_agent
     *
     * @param bool|null $no_agent no_agent
     *
     * @return self
     */
    public function setNoAgent($no_agent)
    {
        $this->container['no_agent'] = $no_agent;

        return $this;
    }

    /**
     * Gets smbios_asset_tag
     *
     * @return string|null
     */
    public function getSmbiosAssetTag()
    {
        return $this->container['smbios_asset_tag'];
    }

    /**
     * Sets smbios_asset_tag
     *
     * @param string|null $smbios_asset_tag smbios_asset_tag
     *
     * @return self
     */
    public function setSmbiosAssetTag($smbios_asset_tag)
    {
        $this->container['smbios_asset_tag'] = $smbios_asset_tag;

        return $this;
    }

    /**
     * Gets nested_virtualization
     *
     * @return string|null
     */
    public function getNestedVirtualization()
    {
        return $this->container['nested_virtualization'];
    }

    /**
     * Sets nested_virtualization
     *
     * @param string|null $nested_virtualization nested_virtualization
     *
     * @return self
     */
    public function setNestedVirtualization($nested_virtualization)
    {
        $this->container['nested_virtualization'] = $nested_virtualization;

        return $this;
    }

    /**
     * Gets vmware_folder_id
     *
     * @return string|null
     */
    public function getVmwareFolderId()
    {
        return $this->container['vmware_folder_id'];
    }

    /**
     * Sets vmware_folder_id
     *
     * @param string|null $vmware_folder_id vmware_folder_id
     *
     * @return self
     */
    public function setVmwareFolderId($vmware_folder_id)
    {
        $this->container['vmware_folder_id'] = $vmware_folder_id;

        return $this;
    }

    /**
     * Gets resource_pool_id
     *
     * @return int|null
     */
    public function getResourcePoolId()
    {
        return $this->container['resource_pool_id'];
    }

    /**
     * Sets resource_pool_id
     *
     * @param int|null $resource_pool_id resource_pool_id
     *
     * @return self
     */
    public function setResourcePoolId($resource_pool_id)
    {
        $this->container['resource_pool_id'] = $resource_pool_id;

        return $this;
    }

    /**
     * Gets pool_provider_type
     *
     * @return string|null
     */
    public function getPoolProviderType()
    {
        return $this->container['pool_provider_type'];
    }

    /**
     * Sets pool_provider_type
     *
     * @param string|null $pool_provider_type pool_provider_type
     *
     * @return self
     */
    public function setPoolProviderType($pool_provider_type)
    {
        $this->container['pool_provider_type'] = $pool_provider_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


