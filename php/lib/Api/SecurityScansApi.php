<?php
/**
 * SecurityScansApi
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * SecurityScansApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SecurityScansApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex)
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getSecurityScans
     *
     * Retrieves a Specific Security Scan
     *
     * @param  int $id Morpheus ID of the Object being referenced (required)
     * @param  bool $results Include the &#x60;results&#x60; object in the response under the security scan. This is a potentially very large object containing the raw results of the scan. (optional, default to false)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object|\OpenAPI\Client\Model\DefaultError|\OpenAPI\Client\Model\DefaultError
     */
    public function getSecurityScans($id, $results = false)
    {
        list($response) = $this->getSecurityScansWithHttpInfo($id, $results);
        return $response;
    }

    /**
     * Operation getSecurityScansWithHttpInfo
     *
     * Retrieves a Specific Security Scan
     *
     * @param  int $id Morpheus ID of the Object being referenced (required)
     * @param  bool $results Include the &#x60;results&#x60; object in the response under the security scan. This is a potentially very large object containing the raw results of the scan. (optional, default to false)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object|\OpenAPI\Client\Model\DefaultError|\OpenAPI\Client\Model\DefaultError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSecurityScansWithHttpInfo($id, $results = false)
    {
        $request = $this->getSecurityScansRequest($id, $results);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417:
                    if ('\OpenAPI\Client\Model\DefaultError' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500,501,502,503,504,505,506,507,509,510:
                    if ('\OpenAPI\Client\Model\DefaultError' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500,501,502,503,504,505,506,507,509,510:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSecurityScansAsync
     *
     * Retrieves a Specific Security Scan
     *
     * @param  int $id Morpheus ID of the Object being referenced (required)
     * @param  bool $results Include the &#x60;results&#x60; object in the response under the security scan. This is a potentially very large object containing the raw results of the scan. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSecurityScansAsync($id, $results = false)
    {
        return $this->getSecurityScansAsyncWithHttpInfo($id, $results)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSecurityScansAsyncWithHttpInfo
     *
     * Retrieves a Specific Security Scan
     *
     * @param  int $id Morpheus ID of the Object being referenced (required)
     * @param  bool $results Include the &#x60;results&#x60; object in the response under the security scan. This is a potentially very large object containing the raw results of the scan. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSecurityScansAsyncWithHttpInfo($id, $results = false)
    {
        $returnType = 'object';
        $request = $this->getSecurityScansRequest($id, $results);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSecurityScans'
     *
     * @param  int $id Morpheus ID of the Object being referenced (required)
     * @param  bool $results Include the &#x60;results&#x60; object in the response under the security scan. This is a potentially very large object containing the raw results of the scan. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getSecurityScansRequest($id, $results = false)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getSecurityScans'
            );
        }

        $resourcePath = '/api/security-scans/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($results !== null) {
            if('form' === 'form' && is_array($results)) {
                foreach($results as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['results'] = $results;
            }
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listSecurityScans
     *
     * Retrieves all Security Scans
     *
     * @param  int $max Maximum number of records to return, -1 can be used to fetch all records (optional, default to 25)
     * @param  int $offset Offset records, the number of records to skip, for paginating requests (optional, default to 0)
     * @param  string $sort Sort order, the name of the property to sort by (optional, default to 'scanDate')
     * @param  string $direction Sort direction, use &#39;desc&#39; to reverse sort (optional, default to 'desc')
     * @param  string $phrase Search phrase for partial matches on name or description of security package (optional)
     * @param  int $security_package_id Filter results by security package id(s). This parameter can be passed multiple times to match more than one id. (optional)
     * @param  int $server_id The Server ID for Filtering (optional)
     * @param  bool $results Include the &#x60;results&#x60; object in the response under each security scan. This is a potentially very large object containing the raw results of the scan. (optional, default to false)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object|\OpenAPI\Client\Model\DefaultError|\OpenAPI\Client\Model\DefaultError
     */
    public function listSecurityScans($max = 25, $offset = 0, $sort = 'scanDate', $direction = 'desc', $phrase = null, $security_package_id = null, $server_id = null, $results = false)
    {
        list($response) = $this->listSecurityScansWithHttpInfo($max, $offset, $sort, $direction, $phrase, $security_package_id, $server_id, $results);
        return $response;
    }

    /**
     * Operation listSecurityScansWithHttpInfo
     *
     * Retrieves all Security Scans
     *
     * @param  int $max Maximum number of records to return, -1 can be used to fetch all records (optional, default to 25)
     * @param  int $offset Offset records, the number of records to skip, for paginating requests (optional, default to 0)
     * @param  string $sort Sort order, the name of the property to sort by (optional, default to 'scanDate')
     * @param  string $direction Sort direction, use &#39;desc&#39; to reverse sort (optional, default to 'desc')
     * @param  string $phrase Search phrase for partial matches on name or description of security package (optional)
     * @param  int $security_package_id Filter results by security package id(s). This parameter can be passed multiple times to match more than one id. (optional)
     * @param  int $server_id The Server ID for Filtering (optional)
     * @param  bool $results Include the &#x60;results&#x60; object in the response under each security scan. This is a potentially very large object containing the raw results of the scan. (optional, default to false)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object|\OpenAPI\Client\Model\DefaultError|\OpenAPI\Client\Model\DefaultError, HTTP status code, HTTP response headers (array of strings)
     */
    public function listSecurityScansWithHttpInfo($max = 25, $offset = 0, $sort = 'scanDate', $direction = 'desc', $phrase = null, $security_package_id = null, $server_id = null, $results = false)
    {
        $request = $this->listSecurityScansRequest($max, $offset, $sort, $direction, $phrase, $security_package_id, $server_id, $results);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417:
                    if ('\OpenAPI\Client\Model\DefaultError' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500,501,502,503,504,505,506,507,509,510:
                    if ('\OpenAPI\Client\Model\DefaultError' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500,501,502,503,504,505,506,507,509,510:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listSecurityScansAsync
     *
     * Retrieves all Security Scans
     *
     * @param  int $max Maximum number of records to return, -1 can be used to fetch all records (optional, default to 25)
     * @param  int $offset Offset records, the number of records to skip, for paginating requests (optional, default to 0)
     * @param  string $sort Sort order, the name of the property to sort by (optional, default to 'scanDate')
     * @param  string $direction Sort direction, use &#39;desc&#39; to reverse sort (optional, default to 'desc')
     * @param  string $phrase Search phrase for partial matches on name or description of security package (optional)
     * @param  int $security_package_id Filter results by security package id(s). This parameter can be passed multiple times to match more than one id. (optional)
     * @param  int $server_id The Server ID for Filtering (optional)
     * @param  bool $results Include the &#x60;results&#x60; object in the response under each security scan. This is a potentially very large object containing the raw results of the scan. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listSecurityScansAsync($max = 25, $offset = 0, $sort = 'scanDate', $direction = 'desc', $phrase = null, $security_package_id = null, $server_id = null, $results = false)
    {
        return $this->listSecurityScansAsyncWithHttpInfo($max, $offset, $sort, $direction, $phrase, $security_package_id, $server_id, $results)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listSecurityScansAsyncWithHttpInfo
     *
     * Retrieves all Security Scans
     *
     * @param  int $max Maximum number of records to return, -1 can be used to fetch all records (optional, default to 25)
     * @param  int $offset Offset records, the number of records to skip, for paginating requests (optional, default to 0)
     * @param  string $sort Sort order, the name of the property to sort by (optional, default to 'scanDate')
     * @param  string $direction Sort direction, use &#39;desc&#39; to reverse sort (optional, default to 'desc')
     * @param  string $phrase Search phrase for partial matches on name or description of security package (optional)
     * @param  int $security_package_id Filter results by security package id(s). This parameter can be passed multiple times to match more than one id. (optional)
     * @param  int $server_id The Server ID for Filtering (optional)
     * @param  bool $results Include the &#x60;results&#x60; object in the response under each security scan. This is a potentially very large object containing the raw results of the scan. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listSecurityScansAsyncWithHttpInfo($max = 25, $offset = 0, $sort = 'scanDate', $direction = 'desc', $phrase = null, $security_package_id = null, $server_id = null, $results = false)
    {
        $returnType = 'object';
        $request = $this->listSecurityScansRequest($max, $offset, $sort, $direction, $phrase, $security_package_id, $server_id, $results);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listSecurityScans'
     *
     * @param  int $max Maximum number of records to return, -1 can be used to fetch all records (optional, default to 25)
     * @param  int $offset Offset records, the number of records to skip, for paginating requests (optional, default to 0)
     * @param  string $sort Sort order, the name of the property to sort by (optional, default to 'scanDate')
     * @param  string $direction Sort direction, use &#39;desc&#39; to reverse sort (optional, default to 'desc')
     * @param  string $phrase Search phrase for partial matches on name or description of security package (optional)
     * @param  int $security_package_id Filter results by security package id(s). This parameter can be passed multiple times to match more than one id. (optional)
     * @param  int $server_id The Server ID for Filtering (optional)
     * @param  bool $results Include the &#x60;results&#x60; object in the response under each security scan. This is a potentially very large object containing the raw results of the scan. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listSecurityScansRequest($max = 25, $offset = 0, $sort = 'scanDate', $direction = 'desc', $phrase = null, $security_package_id = null, $server_id = null, $results = false)
    {

        $resourcePath = '/api/security-scans';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($max !== null) {
            if('form' === 'form' && is_array($max)) {
                foreach($max as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['max'] = $max;
            }
        }
        // query params
        if ($offset !== null) {
            if('form' === 'form' && is_array($offset)) {
                foreach($offset as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['offset'] = $offset;
            }
        }
        // query params
        if ($sort !== null) {
            if('form' === 'form' && is_array($sort)) {
                foreach($sort as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['sort'] = $sort;
            }
        }
        // query params
        if ($direction !== null) {
            if('form' === 'form' && is_array($direction)) {
                foreach($direction as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['direction'] = $direction;
            }
        }
        // query params
        if ($phrase !== null) {
            if('form' === 'form' && is_array($phrase)) {
                foreach($phrase as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['phrase'] = $phrase;
            }
        }
        // query params
        if ($security_package_id !== null) {
            if('form' === 'form' && is_array($security_package_id)) {
                foreach($security_package_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['securityPackageId'] = $security_package_id;
            }
        }
        // query params
        if ($server_id !== null) {
            if('form' === 'form' && is_array($server_id)) {
                foreach($server_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['serverId'] = $server_id;
            }
        }
        // query params
        if ($results !== null) {
            if('form' === 'form' && is_array($results)) {
                foreach($results as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['results'] = $results;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
