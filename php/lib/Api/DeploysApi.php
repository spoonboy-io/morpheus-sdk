<?php
/**
 * DeploysApi
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * DeploysApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DeploysApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex)
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation addInstanceDeploy
     *
     * Deploy to an Instance
     *
     * @param  int $id Morpheus ID of the Object being referenced (required)
     * @param  \OpenAPI\Client\Model\InlineObject92 $inline_object92 inline_object92 (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineResponse20040|\OpenAPI\Client\Model\DefaultError|\OpenAPI\Client\Model\DefaultError
     */
    public function addInstanceDeploy($id, $inline_object92 = null)
    {
        list($response) = $this->addInstanceDeployWithHttpInfo($id, $inline_object92);
        return $response;
    }

    /**
     * Operation addInstanceDeployWithHttpInfo
     *
     * Deploy to an Instance
     *
     * @param  int $id Morpheus ID of the Object being referenced (required)
     * @param  \OpenAPI\Client\Model\InlineObject92 $inline_object92 (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineResponse20040|\OpenAPI\Client\Model\DefaultError|\OpenAPI\Client\Model\DefaultError, HTTP status code, HTTP response headers (array of strings)
     */
    public function addInstanceDeployWithHttpInfo($id, $inline_object92 = null)
    {
        $request = $this->addInstanceDeployRequest($id, $inline_object92);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\InlineResponse20040' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InlineResponse20040', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 4XX:
                    if ('\OpenAPI\Client\Model\DefaultError' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 5XX:
                    if ('\OpenAPI\Client\Model\DefaultError' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\InlineResponse20040';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineResponse20040',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 4XX:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 5XX:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addInstanceDeployAsync
     *
     * Deploy to an Instance
     *
     * @param  int $id Morpheus ID of the Object being referenced (required)
     * @param  \OpenAPI\Client\Model\InlineObject92 $inline_object92 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addInstanceDeployAsync($id, $inline_object92 = null)
    {
        return $this->addInstanceDeployAsyncWithHttpInfo($id, $inline_object92)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addInstanceDeployAsyncWithHttpInfo
     *
     * Deploy to an Instance
     *
     * @param  int $id Morpheus ID of the Object being referenced (required)
     * @param  \OpenAPI\Client\Model\InlineObject92 $inline_object92 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addInstanceDeployAsyncWithHttpInfo($id, $inline_object92 = null)
    {
        $returnType = '\OpenAPI\Client\Model\InlineResponse20040';
        $request = $this->addInstanceDeployRequest($id, $inline_object92);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addInstanceDeploy'
     *
     * @param  int $id Morpheus ID of the Object being referenced (required)
     * @param  \OpenAPI\Client\Model\InlineObject92 $inline_object92 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addInstanceDeployRequest($id, $inline_object92 = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling addInstanceDeploy'
            );
        }

        $resourcePath = '/api/instances/{id}/deploys';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($inline_object92)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($inline_object92));
            } else {
                $httpBody = $inline_object92;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deletedeploy
     *
     * Delete a Deploy
     *
     * @param  int $id Morpheus ID of the Object being referenced (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Model200Success|\OpenAPI\Client\Model\DefaultError|\OpenAPI\Client\Model\DefaultError
     */
    public function deletedeploy($id)
    {
        list($response) = $this->deletedeployWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation deletedeployWithHttpInfo
     *
     * Delete a Deploy
     *
     * @param  int $id Morpheus ID of the Object being referenced (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Model200Success|\OpenAPI\Client\Model\DefaultError|\OpenAPI\Client\Model\DefaultError, HTTP status code, HTTP response headers (array of strings)
     */
    public function deletedeployWithHttpInfo($id)
    {
        $request = $this->deletedeployRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Model200Success' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Model200Success', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 4XX:
                    if ('\OpenAPI\Client\Model\DefaultError' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 5XX:
                    if ('\OpenAPI\Client\Model\DefaultError' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Model200Success';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Model200Success',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 4XX:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 5XX:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deletedeployAsync
     *
     * Delete a Deploy
     *
     * @param  int $id Morpheus ID of the Object being referenced (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deletedeployAsync($id)
    {
        return $this->deletedeployAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deletedeployAsyncWithHttpInfo
     *
     * Delete a Deploy
     *
     * @param  int $id Morpheus ID of the Object being referenced (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deletedeployAsyncWithHttpInfo($id)
    {
        $returnType = '\OpenAPI\Client\Model\Model200Success';
        $request = $this->deletedeployRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deletedeploy'
     *
     * @param  int $id Morpheus ID of the Object being referenced (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deletedeployRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deletedeploy'
            );
        }

        $resourcePath = '/api/deploys/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getInstanceDeploys
     *
     * Get all Deploys for an Instance
     *
     * @param  int $id Morpheus ID of the Object being referenced (required)
     * @param  int $max Maximum number of records to return, -1 can be used to fetch all records (optional, default to 25)
     * @param  int $offset Offset records, the number of records to skip, for paginating requests (optional, default to 0)
     * @param  string $phrase Search phrase for partial matches on name or description (optional)
     * @param  string $name Filter by name, wildcard may be specified as %, eg. example-% (optional)
     * @param  int $deployment_id Filter by deployment id (optional)
     * @param  string $instance_name Filter by instance name (optional)
     * @param  int $instance_id The Instance ID for Filtering (optional)
     * @param  int $version Filter by version number (userVersion) (optional)
     * @param  int $version_id Filter by deployment version id (optional)
     * @param  int $created_by_id Filter by owner (user) id (optional)
     * @param  string $deploy_type Filter by type (deployType), file, git, fetch (optional)
     * @param  string $date_created Filter by dateCreated, the created timestamp is more recent or equal to the date specified (optional)
     * @param  \DateTime $last_updated Date filter, restricts query to only load resources updated more recently than the date specified (ISO 8601) (optional)
     * @param  string $deploy_date Filter by deployDate, deployment completion timestamp is more recent or equal to the date specified (optional)
     * @param  string $status Filter by status (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object|\OpenAPI\Client\Model\DefaultError|\OpenAPI\Client\Model\DefaultError
     */
    public function getInstanceDeploys($id, $max = 25, $offset = 0, $phrase = null, $name = null, $deployment_id = null, $instance_name = null, $instance_id = null, $version = null, $version_id = null, $created_by_id = null, $deploy_type = null, $date_created = null, $last_updated = null, $deploy_date = null, $status = null)
    {
        list($response) = $this->getInstanceDeploysWithHttpInfo($id, $max, $offset, $phrase, $name, $deployment_id, $instance_name, $instance_id, $version, $version_id, $created_by_id, $deploy_type, $date_created, $last_updated, $deploy_date, $status);
        return $response;
    }

    /**
     * Operation getInstanceDeploysWithHttpInfo
     *
     * Get all Deploys for an Instance
     *
     * @param  int $id Morpheus ID of the Object being referenced (required)
     * @param  int $max Maximum number of records to return, -1 can be used to fetch all records (optional, default to 25)
     * @param  int $offset Offset records, the number of records to skip, for paginating requests (optional, default to 0)
     * @param  string $phrase Search phrase for partial matches on name or description (optional)
     * @param  string $name Filter by name, wildcard may be specified as %, eg. example-% (optional)
     * @param  int $deployment_id Filter by deployment id (optional)
     * @param  string $instance_name Filter by instance name (optional)
     * @param  int $instance_id The Instance ID for Filtering (optional)
     * @param  int $version Filter by version number (userVersion) (optional)
     * @param  int $version_id Filter by deployment version id (optional)
     * @param  int $created_by_id Filter by owner (user) id (optional)
     * @param  string $deploy_type Filter by type (deployType), file, git, fetch (optional)
     * @param  string $date_created Filter by dateCreated, the created timestamp is more recent or equal to the date specified (optional)
     * @param  \DateTime $last_updated Date filter, restricts query to only load resources updated more recently than the date specified (ISO 8601) (optional)
     * @param  string $deploy_date Filter by deployDate, deployment completion timestamp is more recent or equal to the date specified (optional)
     * @param  string $status Filter by status (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object|\OpenAPI\Client\Model\DefaultError|\OpenAPI\Client\Model\DefaultError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getInstanceDeploysWithHttpInfo($id, $max = 25, $offset = 0, $phrase = null, $name = null, $deployment_id = null, $instance_name = null, $instance_id = null, $version = null, $version_id = null, $created_by_id = null, $deploy_type = null, $date_created = null, $last_updated = null, $deploy_date = null, $status = null)
    {
        $request = $this->getInstanceDeploysRequest($id, $max, $offset, $phrase, $name, $deployment_id, $instance_name, $instance_id, $version, $version_id, $created_by_id, $deploy_type, $date_created, $last_updated, $deploy_date, $status);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 4XX:
                    if ('\OpenAPI\Client\Model\DefaultError' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 5XX:
                    if ('\OpenAPI\Client\Model\DefaultError' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 4XX:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 5XX:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getInstanceDeploysAsync
     *
     * Get all Deploys for an Instance
     *
     * @param  int $id Morpheus ID of the Object being referenced (required)
     * @param  int $max Maximum number of records to return, -1 can be used to fetch all records (optional, default to 25)
     * @param  int $offset Offset records, the number of records to skip, for paginating requests (optional, default to 0)
     * @param  string $phrase Search phrase for partial matches on name or description (optional)
     * @param  string $name Filter by name, wildcard may be specified as %, eg. example-% (optional)
     * @param  int $deployment_id Filter by deployment id (optional)
     * @param  string $instance_name Filter by instance name (optional)
     * @param  int $instance_id The Instance ID for Filtering (optional)
     * @param  int $version Filter by version number (userVersion) (optional)
     * @param  int $version_id Filter by deployment version id (optional)
     * @param  int $created_by_id Filter by owner (user) id (optional)
     * @param  string $deploy_type Filter by type (deployType), file, git, fetch (optional)
     * @param  string $date_created Filter by dateCreated, the created timestamp is more recent or equal to the date specified (optional)
     * @param  \DateTime $last_updated Date filter, restricts query to only load resources updated more recently than the date specified (ISO 8601) (optional)
     * @param  string $deploy_date Filter by deployDate, deployment completion timestamp is more recent or equal to the date specified (optional)
     * @param  string $status Filter by status (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInstanceDeploysAsync($id, $max = 25, $offset = 0, $phrase = null, $name = null, $deployment_id = null, $instance_name = null, $instance_id = null, $version = null, $version_id = null, $created_by_id = null, $deploy_type = null, $date_created = null, $last_updated = null, $deploy_date = null, $status = null)
    {
        return $this->getInstanceDeploysAsyncWithHttpInfo($id, $max, $offset, $phrase, $name, $deployment_id, $instance_name, $instance_id, $version, $version_id, $created_by_id, $deploy_type, $date_created, $last_updated, $deploy_date, $status)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getInstanceDeploysAsyncWithHttpInfo
     *
     * Get all Deploys for an Instance
     *
     * @param  int $id Morpheus ID of the Object being referenced (required)
     * @param  int $max Maximum number of records to return, -1 can be used to fetch all records (optional, default to 25)
     * @param  int $offset Offset records, the number of records to skip, for paginating requests (optional, default to 0)
     * @param  string $phrase Search phrase for partial matches on name or description (optional)
     * @param  string $name Filter by name, wildcard may be specified as %, eg. example-% (optional)
     * @param  int $deployment_id Filter by deployment id (optional)
     * @param  string $instance_name Filter by instance name (optional)
     * @param  int $instance_id The Instance ID for Filtering (optional)
     * @param  int $version Filter by version number (userVersion) (optional)
     * @param  int $version_id Filter by deployment version id (optional)
     * @param  int $created_by_id Filter by owner (user) id (optional)
     * @param  string $deploy_type Filter by type (deployType), file, git, fetch (optional)
     * @param  string $date_created Filter by dateCreated, the created timestamp is more recent or equal to the date specified (optional)
     * @param  \DateTime $last_updated Date filter, restricts query to only load resources updated more recently than the date specified (ISO 8601) (optional)
     * @param  string $deploy_date Filter by deployDate, deployment completion timestamp is more recent or equal to the date specified (optional)
     * @param  string $status Filter by status (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInstanceDeploysAsyncWithHttpInfo($id, $max = 25, $offset = 0, $phrase = null, $name = null, $deployment_id = null, $instance_name = null, $instance_id = null, $version = null, $version_id = null, $created_by_id = null, $deploy_type = null, $date_created = null, $last_updated = null, $deploy_date = null, $status = null)
    {
        $returnType = 'object';
        $request = $this->getInstanceDeploysRequest($id, $max, $offset, $phrase, $name, $deployment_id, $instance_name, $instance_id, $version, $version_id, $created_by_id, $deploy_type, $date_created, $last_updated, $deploy_date, $status);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getInstanceDeploys'
     *
     * @param  int $id Morpheus ID of the Object being referenced (required)
     * @param  int $max Maximum number of records to return, -1 can be used to fetch all records (optional, default to 25)
     * @param  int $offset Offset records, the number of records to skip, for paginating requests (optional, default to 0)
     * @param  string $phrase Search phrase for partial matches on name or description (optional)
     * @param  string $name Filter by name, wildcard may be specified as %, eg. example-% (optional)
     * @param  int $deployment_id Filter by deployment id (optional)
     * @param  string $instance_name Filter by instance name (optional)
     * @param  int $instance_id The Instance ID for Filtering (optional)
     * @param  int $version Filter by version number (userVersion) (optional)
     * @param  int $version_id Filter by deployment version id (optional)
     * @param  int $created_by_id Filter by owner (user) id (optional)
     * @param  string $deploy_type Filter by type (deployType), file, git, fetch (optional)
     * @param  string $date_created Filter by dateCreated, the created timestamp is more recent or equal to the date specified (optional)
     * @param  \DateTime $last_updated Date filter, restricts query to only load resources updated more recently than the date specified (ISO 8601) (optional)
     * @param  string $deploy_date Filter by deployDate, deployment completion timestamp is more recent or equal to the date specified (optional)
     * @param  string $status Filter by status (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getInstanceDeploysRequest($id, $max = 25, $offset = 0, $phrase = null, $name = null, $deployment_id = null, $instance_name = null, $instance_id = null, $version = null, $version_id = null, $created_by_id = null, $deploy_type = null, $date_created = null, $last_updated = null, $deploy_date = null, $status = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getInstanceDeploys'
            );
        }

        $resourcePath = '/api/instances/{id}/deploys';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($max !== null) {
            if('form' === 'form' && is_array($max)) {
                foreach($max as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['max'] = $max;
            }
        }
        // query params
        if ($offset !== null) {
            if('form' === 'form' && is_array($offset)) {
                foreach($offset as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['offset'] = $offset;
            }
        }
        // query params
        if ($phrase !== null) {
            if('form' === 'form' && is_array($phrase)) {
                foreach($phrase as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['phrase'] = $phrase;
            }
        }
        // query params
        if ($name !== null) {
            if('form' === 'form' && is_array($name)) {
                foreach($name as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['name'] = $name;
            }
        }
        // query params
        if ($deployment_id !== null) {
            if('form' === 'form' && is_array($deployment_id)) {
                foreach($deployment_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['deploymentId'] = $deployment_id;
            }
        }
        // query params
        if ($instance_name !== null) {
            if('form' === 'form' && is_array($instance_name)) {
                foreach($instance_name as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['instanceName'] = $instance_name;
            }
        }
        // query params
        if ($instance_id !== null) {
            if('form' === 'form' && is_array($instance_id)) {
                foreach($instance_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['instanceId'] = $instance_id;
            }
        }
        // query params
        if ($version !== null) {
            if('form' === 'form' && is_array($version)) {
                foreach($version as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['version'] = $version;
            }
        }
        // query params
        if ($version_id !== null) {
            if('form' === 'form' && is_array($version_id)) {
                foreach($version_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['versionId'] = $version_id;
            }
        }
        // query params
        if ($created_by_id !== null) {
            if('form' === 'form' && is_array($created_by_id)) {
                foreach($created_by_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['createdById'] = $created_by_id;
            }
        }
        // query params
        if ($deploy_type !== null) {
            if('form' === 'form' && is_array($deploy_type)) {
                foreach($deploy_type as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['deployType'] = $deploy_type;
            }
        }
        // query params
        if ($date_created !== null) {
            if('form' === 'form' && is_array($date_created)) {
                foreach($date_created as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['dateCreated'] = $date_created;
            }
        }
        // query params
        if ($last_updated !== null) {
            if('form' === 'form' && is_array($last_updated)) {
                foreach($last_updated as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['lastUpdated'] = $last_updated;
            }
        }
        // query params
        if ($deploy_date !== null) {
            if('form' === 'form' && is_array($deploy_date)) {
                foreach($deploy_date as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['deployDate'] = $deploy_date;
            }
        }
        // query params
        if ($status !== null) {
            if('form' === 'form' && is_array($status)) {
                foreach($status as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['status'] = $status;
            }
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listDeploys
     *
     * Get all Deploys
     *
     * @param  int $max Maximum number of records to return, -1 can be used to fetch all records (optional, default to 25)
     * @param  int $offset Offset records, the number of records to skip, for paginating requests (optional, default to 0)
     * @param  string $phrase Search phrase for partial matches on name or description (optional)
     * @param  string $name Filter by name, wildcard may be specified as %, eg. example-% (optional)
     * @param  int $deployment_id Filter by deployment id (optional)
     * @param  string $instance_name Filter by instance name (optional)
     * @param  int $instance_id The Instance ID for Filtering (optional)
     * @param  int $version Filter by version number (userVersion) (optional)
     * @param  int $version_id Filter by deployment version id (optional)
     * @param  int $created_by_id Filter by owner (user) id (optional)
     * @param  string $deploy_type Filter by type (deployType), file, git, fetch (optional)
     * @param  string $date_created Filter by dateCreated, the created timestamp is more recent or equal to the date specified (optional)
     * @param  \DateTime $last_updated Date filter, restricts query to only load resources updated more recently than the date specified (ISO 8601) (optional)
     * @param  string $deploy_date Filter by deployDate, deployment completion timestamp is more recent or equal to the date specified (optional)
     * @param  string $status Filter by status (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object|\OpenAPI\Client\Model\DefaultError|\OpenAPI\Client\Model\DefaultError
     */
    public function listDeploys($max = 25, $offset = 0, $phrase = null, $name = null, $deployment_id = null, $instance_name = null, $instance_id = null, $version = null, $version_id = null, $created_by_id = null, $deploy_type = null, $date_created = null, $last_updated = null, $deploy_date = null, $status = null)
    {
        list($response) = $this->listDeploysWithHttpInfo($max, $offset, $phrase, $name, $deployment_id, $instance_name, $instance_id, $version, $version_id, $created_by_id, $deploy_type, $date_created, $last_updated, $deploy_date, $status);
        return $response;
    }

    /**
     * Operation listDeploysWithHttpInfo
     *
     * Get all Deploys
     *
     * @param  int $max Maximum number of records to return, -1 can be used to fetch all records (optional, default to 25)
     * @param  int $offset Offset records, the number of records to skip, for paginating requests (optional, default to 0)
     * @param  string $phrase Search phrase for partial matches on name or description (optional)
     * @param  string $name Filter by name, wildcard may be specified as %, eg. example-% (optional)
     * @param  int $deployment_id Filter by deployment id (optional)
     * @param  string $instance_name Filter by instance name (optional)
     * @param  int $instance_id The Instance ID for Filtering (optional)
     * @param  int $version Filter by version number (userVersion) (optional)
     * @param  int $version_id Filter by deployment version id (optional)
     * @param  int $created_by_id Filter by owner (user) id (optional)
     * @param  string $deploy_type Filter by type (deployType), file, git, fetch (optional)
     * @param  string $date_created Filter by dateCreated, the created timestamp is more recent or equal to the date specified (optional)
     * @param  \DateTime $last_updated Date filter, restricts query to only load resources updated more recently than the date specified (ISO 8601) (optional)
     * @param  string $deploy_date Filter by deployDate, deployment completion timestamp is more recent or equal to the date specified (optional)
     * @param  string $status Filter by status (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object|\OpenAPI\Client\Model\DefaultError|\OpenAPI\Client\Model\DefaultError, HTTP status code, HTTP response headers (array of strings)
     */
    public function listDeploysWithHttpInfo($max = 25, $offset = 0, $phrase = null, $name = null, $deployment_id = null, $instance_name = null, $instance_id = null, $version = null, $version_id = null, $created_by_id = null, $deploy_type = null, $date_created = null, $last_updated = null, $deploy_date = null, $status = null)
    {
        $request = $this->listDeploysRequest($max, $offset, $phrase, $name, $deployment_id, $instance_name, $instance_id, $version, $version_id, $created_by_id, $deploy_type, $date_created, $last_updated, $deploy_date, $status);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 4XX:
                    if ('\OpenAPI\Client\Model\DefaultError' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 5XX:
                    if ('\OpenAPI\Client\Model\DefaultError' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 4XX:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 5XX:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listDeploysAsync
     *
     * Get all Deploys
     *
     * @param  int $max Maximum number of records to return, -1 can be used to fetch all records (optional, default to 25)
     * @param  int $offset Offset records, the number of records to skip, for paginating requests (optional, default to 0)
     * @param  string $phrase Search phrase for partial matches on name or description (optional)
     * @param  string $name Filter by name, wildcard may be specified as %, eg. example-% (optional)
     * @param  int $deployment_id Filter by deployment id (optional)
     * @param  string $instance_name Filter by instance name (optional)
     * @param  int $instance_id The Instance ID for Filtering (optional)
     * @param  int $version Filter by version number (userVersion) (optional)
     * @param  int $version_id Filter by deployment version id (optional)
     * @param  int $created_by_id Filter by owner (user) id (optional)
     * @param  string $deploy_type Filter by type (deployType), file, git, fetch (optional)
     * @param  string $date_created Filter by dateCreated, the created timestamp is more recent or equal to the date specified (optional)
     * @param  \DateTime $last_updated Date filter, restricts query to only load resources updated more recently than the date specified (ISO 8601) (optional)
     * @param  string $deploy_date Filter by deployDate, deployment completion timestamp is more recent or equal to the date specified (optional)
     * @param  string $status Filter by status (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listDeploysAsync($max = 25, $offset = 0, $phrase = null, $name = null, $deployment_id = null, $instance_name = null, $instance_id = null, $version = null, $version_id = null, $created_by_id = null, $deploy_type = null, $date_created = null, $last_updated = null, $deploy_date = null, $status = null)
    {
        return $this->listDeploysAsyncWithHttpInfo($max, $offset, $phrase, $name, $deployment_id, $instance_name, $instance_id, $version, $version_id, $created_by_id, $deploy_type, $date_created, $last_updated, $deploy_date, $status)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listDeploysAsyncWithHttpInfo
     *
     * Get all Deploys
     *
     * @param  int $max Maximum number of records to return, -1 can be used to fetch all records (optional, default to 25)
     * @param  int $offset Offset records, the number of records to skip, for paginating requests (optional, default to 0)
     * @param  string $phrase Search phrase for partial matches on name or description (optional)
     * @param  string $name Filter by name, wildcard may be specified as %, eg. example-% (optional)
     * @param  int $deployment_id Filter by deployment id (optional)
     * @param  string $instance_name Filter by instance name (optional)
     * @param  int $instance_id The Instance ID for Filtering (optional)
     * @param  int $version Filter by version number (userVersion) (optional)
     * @param  int $version_id Filter by deployment version id (optional)
     * @param  int $created_by_id Filter by owner (user) id (optional)
     * @param  string $deploy_type Filter by type (deployType), file, git, fetch (optional)
     * @param  string $date_created Filter by dateCreated, the created timestamp is more recent or equal to the date specified (optional)
     * @param  \DateTime $last_updated Date filter, restricts query to only load resources updated more recently than the date specified (ISO 8601) (optional)
     * @param  string $deploy_date Filter by deployDate, deployment completion timestamp is more recent or equal to the date specified (optional)
     * @param  string $status Filter by status (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listDeploysAsyncWithHttpInfo($max = 25, $offset = 0, $phrase = null, $name = null, $deployment_id = null, $instance_name = null, $instance_id = null, $version = null, $version_id = null, $created_by_id = null, $deploy_type = null, $date_created = null, $last_updated = null, $deploy_date = null, $status = null)
    {
        $returnType = 'object';
        $request = $this->listDeploysRequest($max, $offset, $phrase, $name, $deployment_id, $instance_name, $instance_id, $version, $version_id, $created_by_id, $deploy_type, $date_created, $last_updated, $deploy_date, $status);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listDeploys'
     *
     * @param  int $max Maximum number of records to return, -1 can be used to fetch all records (optional, default to 25)
     * @param  int $offset Offset records, the number of records to skip, for paginating requests (optional, default to 0)
     * @param  string $phrase Search phrase for partial matches on name or description (optional)
     * @param  string $name Filter by name, wildcard may be specified as %, eg. example-% (optional)
     * @param  int $deployment_id Filter by deployment id (optional)
     * @param  string $instance_name Filter by instance name (optional)
     * @param  int $instance_id The Instance ID for Filtering (optional)
     * @param  int $version Filter by version number (userVersion) (optional)
     * @param  int $version_id Filter by deployment version id (optional)
     * @param  int $created_by_id Filter by owner (user) id (optional)
     * @param  string $deploy_type Filter by type (deployType), file, git, fetch (optional)
     * @param  string $date_created Filter by dateCreated, the created timestamp is more recent or equal to the date specified (optional)
     * @param  \DateTime $last_updated Date filter, restricts query to only load resources updated more recently than the date specified (ISO 8601) (optional)
     * @param  string $deploy_date Filter by deployDate, deployment completion timestamp is more recent or equal to the date specified (optional)
     * @param  string $status Filter by status (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listDeploysRequest($max = 25, $offset = 0, $phrase = null, $name = null, $deployment_id = null, $instance_name = null, $instance_id = null, $version = null, $version_id = null, $created_by_id = null, $deploy_type = null, $date_created = null, $last_updated = null, $deploy_date = null, $status = null)
    {

        $resourcePath = '/api/deploys';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($max !== null) {
            if('form' === 'form' && is_array($max)) {
                foreach($max as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['max'] = $max;
            }
        }
        // query params
        if ($offset !== null) {
            if('form' === 'form' && is_array($offset)) {
                foreach($offset as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['offset'] = $offset;
            }
        }
        // query params
        if ($phrase !== null) {
            if('form' === 'form' && is_array($phrase)) {
                foreach($phrase as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['phrase'] = $phrase;
            }
        }
        // query params
        if ($name !== null) {
            if('form' === 'form' && is_array($name)) {
                foreach($name as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['name'] = $name;
            }
        }
        // query params
        if ($deployment_id !== null) {
            if('form' === 'form' && is_array($deployment_id)) {
                foreach($deployment_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['deploymentId'] = $deployment_id;
            }
        }
        // query params
        if ($instance_name !== null) {
            if('form' === 'form' && is_array($instance_name)) {
                foreach($instance_name as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['instanceName'] = $instance_name;
            }
        }
        // query params
        if ($instance_id !== null) {
            if('form' === 'form' && is_array($instance_id)) {
                foreach($instance_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['instanceId'] = $instance_id;
            }
        }
        // query params
        if ($version !== null) {
            if('form' === 'form' && is_array($version)) {
                foreach($version as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['version'] = $version;
            }
        }
        // query params
        if ($version_id !== null) {
            if('form' === 'form' && is_array($version_id)) {
                foreach($version_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['versionId'] = $version_id;
            }
        }
        // query params
        if ($created_by_id !== null) {
            if('form' === 'form' && is_array($created_by_id)) {
                foreach($created_by_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['createdById'] = $created_by_id;
            }
        }
        // query params
        if ($deploy_type !== null) {
            if('form' === 'form' && is_array($deploy_type)) {
                foreach($deploy_type as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['deployType'] = $deploy_type;
            }
        }
        // query params
        if ($date_created !== null) {
            if('form' === 'form' && is_array($date_created)) {
                foreach($date_created as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['dateCreated'] = $date_created;
            }
        }
        // query params
        if ($last_updated !== null) {
            if('form' === 'form' && is_array($last_updated)) {
                foreach($last_updated as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['lastUpdated'] = $last_updated;
            }
        }
        // query params
        if ($deploy_date !== null) {
            if('form' === 'form' && is_array($deploy_date)) {
                foreach($deploy_date as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['deployDate'] = $deploy_date;
            }
        }
        // query params
        if ($status !== null) {
            if('form' === 'form' && is_array($status)) {
                foreach($status as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['status'] = $status;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation runDeploy
     *
     * Run a Deploy
     *
     * @param  int $id Morpheus ID of the Object being referenced (required)
     * @param  \OpenAPI\Client\Model\InlineObject73 $inline_object73 inline_object73 (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineResponse20040|\OpenAPI\Client\Model\DefaultError|\OpenAPI\Client\Model\DefaultError
     */
    public function runDeploy($id, $inline_object73 = null)
    {
        list($response) = $this->runDeployWithHttpInfo($id, $inline_object73);
        return $response;
    }

    /**
     * Operation runDeployWithHttpInfo
     *
     * Run a Deploy
     *
     * @param  int $id Morpheus ID of the Object being referenced (required)
     * @param  \OpenAPI\Client\Model\InlineObject73 $inline_object73 (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineResponse20040|\OpenAPI\Client\Model\DefaultError|\OpenAPI\Client\Model\DefaultError, HTTP status code, HTTP response headers (array of strings)
     */
    public function runDeployWithHttpInfo($id, $inline_object73 = null)
    {
        $request = $this->runDeployRequest($id, $inline_object73);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\InlineResponse20040' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InlineResponse20040', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 4XX:
                    if ('\OpenAPI\Client\Model\DefaultError' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 5XX:
                    if ('\OpenAPI\Client\Model\DefaultError' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\InlineResponse20040';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineResponse20040',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 4XX:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 5XX:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation runDeployAsync
     *
     * Run a Deploy
     *
     * @param  int $id Morpheus ID of the Object being referenced (required)
     * @param  \OpenAPI\Client\Model\InlineObject73 $inline_object73 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function runDeployAsync($id, $inline_object73 = null)
    {
        return $this->runDeployAsyncWithHttpInfo($id, $inline_object73)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation runDeployAsyncWithHttpInfo
     *
     * Run a Deploy
     *
     * @param  int $id Morpheus ID of the Object being referenced (required)
     * @param  \OpenAPI\Client\Model\InlineObject73 $inline_object73 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function runDeployAsyncWithHttpInfo($id, $inline_object73 = null)
    {
        $returnType = '\OpenAPI\Client\Model\InlineResponse20040';
        $request = $this->runDeployRequest($id, $inline_object73);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'runDeploy'
     *
     * @param  int $id Morpheus ID of the Object being referenced (required)
     * @param  \OpenAPI\Client\Model\InlineObject73 $inline_object73 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function runDeployRequest($id, $inline_object73 = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling runDeploy'
            );
        }

        $resourcePath = '/api/deploys/{id}/deploy';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($inline_object73)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($inline_object73));
            } else {
                $httpBody = $inline_object73;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateDeploy
     *
     * Update a Deploy
     *
     * @param  int $id Morpheus ID of the Object being referenced (required)
     * @param  \OpenAPI\Client\Model\InlineObject72 $inline_object72 inline_object72 (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineResponse20040|\OpenAPI\Client\Model\DefaultError|\OpenAPI\Client\Model\DefaultError
     */
    public function updateDeploy($id, $inline_object72 = null)
    {
        list($response) = $this->updateDeployWithHttpInfo($id, $inline_object72);
        return $response;
    }

    /**
     * Operation updateDeployWithHttpInfo
     *
     * Update a Deploy
     *
     * @param  int $id Morpheus ID of the Object being referenced (required)
     * @param  \OpenAPI\Client\Model\InlineObject72 $inline_object72 (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineResponse20040|\OpenAPI\Client\Model\DefaultError|\OpenAPI\Client\Model\DefaultError, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateDeployWithHttpInfo($id, $inline_object72 = null)
    {
        $request = $this->updateDeployRequest($id, $inline_object72);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\InlineResponse20040' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InlineResponse20040', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 4XX:
                    if ('\OpenAPI\Client\Model\DefaultError' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 5XX:
                    if ('\OpenAPI\Client\Model\DefaultError' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\InlineResponse20040';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineResponse20040',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 4XX:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 5XX:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateDeployAsync
     *
     * Update a Deploy
     *
     * @param  int $id Morpheus ID of the Object being referenced (required)
     * @param  \OpenAPI\Client\Model\InlineObject72 $inline_object72 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateDeployAsync($id, $inline_object72 = null)
    {
        return $this->updateDeployAsyncWithHttpInfo($id, $inline_object72)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateDeployAsyncWithHttpInfo
     *
     * Update a Deploy
     *
     * @param  int $id Morpheus ID of the Object being referenced (required)
     * @param  \OpenAPI\Client\Model\InlineObject72 $inline_object72 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateDeployAsyncWithHttpInfo($id, $inline_object72 = null)
    {
        $returnType = '\OpenAPI\Client\Model\InlineResponse20040';
        $request = $this->updateDeployRequest($id, $inline_object72);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateDeploy'
     *
     * @param  int $id Morpheus ID of the Object being referenced (required)
     * @param  \OpenAPI\Client\Model\InlineObject72 $inline_object72 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateDeployRequest($id, $inline_object72 = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateDeploy'
            );
        }

        $resourcePath = '/api/deploys/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($inline_object72)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($inline_object72));
            } else {
                $httpBody = $inline_object72;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
