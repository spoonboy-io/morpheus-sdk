<?php
/**
 * VDIApiTest
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Client\Test\Api;

use \OpenAPI\Client\Configuration;
use \OpenAPI\Client\ApiException;
use \OpenAPI\Client\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * VDIApiTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class VDIApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for addVDIApps
     *
     * Creates a VDI App.
     *
     */
    public function testAddVDIApps()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for addVDIGateways
     *
     * Creates a VDI Gateway.
     *
     */
    public function testAddVDIGateways()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for addVDIPools
     *
     * Creates a VDI Pool.
     *
     */
    public function testAddVDIPools()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for addVdiAllocation
     *
     * Allocate Virtual Desktop.
     *
     */
    public function testAddVdiAllocation()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getVDIAllocations
     *
     * Retrieves a Specific VDI Allocation.
     *
     */
    public function testGetVDIAllocations()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getVDIApps
     *
     * Retrieves a Specific VDI App.
     *
     */
    public function testGetVDIApps()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getVDIGateways
     *
     * Retrieves a Specific VDI Gateway.
     *
     */
    public function testGetVDIGateways()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getVDIPools
     *
     * Retrieves a Specific VDI Pool.
     *
     */
    public function testGetVDIPools()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getVdi
     *
     * Get a Specific Virtual Desktop.
     *
     */
    public function testGetVdi()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for listVDIAllocations
     *
     * Retrieves all VDI Allocations.
     *
     */
    public function testListVDIAllocations()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for listVDIApps
     *
     * Retrieves all VDI Apps.
     *
     */
    public function testListVDIApps()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for listVDIGateways
     *
     * Retrieves all VDI Gateways.
     *
     */
    public function testListVDIGateways()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for listVDIPools
     *
     * Retrieves all VDI Pools.
     *
     */
    public function testListVDIPools()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for listVdi
     *
     * List Virtual Desktops.
     *
     */
    public function testListVdi()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for removeVDIApps
     *
     * Deletes a VDI App.
     *
     */
    public function testRemoveVDIApps()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for removeVDIGateways
     *
     * Deletes a VDI Gateway.
     *
     */
    public function testRemoveVDIGateways()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for removeVDIPools
     *
     * Deletes a VDI Pool.
     *
     */
    public function testRemoveVDIPools()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateVDIApps
     *
     * Updates a VDI App Configuration or Icon.
     *
     */
    public function testUpdateVDIApps()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateVDIGateways
     *
     * Updates a VDI Gateway Configuration.
     *
     */
    public function testUpdateVDIGateways()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateVDIPools
     *
     * Updates a VDI Pool Configuration or Icon.
     *
     */
    public function testUpdateVDIPools()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }
}
